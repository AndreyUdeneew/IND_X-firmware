
IND_X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e38c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003440  0800e448  0800e448  0001e448  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011888  08011888  00030040  2**0
                  CONTENTS
  4 .ARM          00000000  08011888  08011888  00030040  2**0
                  CONTENTS
  5 .preinit_array 00000000  08011888  08011888  00030040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011888  08011888  00021888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801188c  0801188c  0002188c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08011890  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024d0  20000040  080118d0  00030040  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002510  080118d0  00032510  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030040  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a0da  00000000  00000000  00030068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034b9  00000000  00000000  0004a142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018c8  00000000  00000000  0004d600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001750  00000000  00000000  0004eec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c54a  00000000  00000000  00050618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d2d2  00000000  00000000  0006cb62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae732  00000000  00000000  00089e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00138566  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e94  00000000  00000000  001385bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000040 	.word	0x20000040
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800e430 	.word	0x0800e430

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000044 	.word	0x20000044
 8000100:	0800e430 	.word	0x0800e430

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_cdrcmple>:
 80003f0:	4684      	mov	ip, r0
 80003f2:	1c10      	adds	r0, r2, #0
 80003f4:	4662      	mov	r2, ip
 80003f6:	468c      	mov	ip, r1
 80003f8:	1c19      	adds	r1, r3, #0
 80003fa:	4663      	mov	r3, ip
 80003fc:	e000      	b.n	8000400 <__aeabi_cdcmpeq>
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_cdcmpeq>:
 8000400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000402:	f000 ff51 	bl	80012a8 <__ledf2>
 8000406:	2800      	cmp	r0, #0
 8000408:	d401      	bmi.n	800040e <__aeabi_cdcmpeq+0xe>
 800040a:	2100      	movs	r1, #0
 800040c:	42c8      	cmn	r0, r1
 800040e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000410 <__aeabi_dcmpeq>:
 8000410:	b510      	push	{r4, lr}
 8000412:	f000 fe9b 	bl	800114c <__eqdf2>
 8000416:	4240      	negs	r0, r0
 8000418:	3001      	adds	r0, #1
 800041a:	bd10      	pop	{r4, pc}

0800041c <__aeabi_dcmplt>:
 800041c:	b510      	push	{r4, lr}
 800041e:	f000 ff43 	bl	80012a8 <__ledf2>
 8000422:	2800      	cmp	r0, #0
 8000424:	db01      	blt.n	800042a <__aeabi_dcmplt+0xe>
 8000426:	2000      	movs	r0, #0
 8000428:	bd10      	pop	{r4, pc}
 800042a:	2001      	movs	r0, #1
 800042c:	bd10      	pop	{r4, pc}
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__aeabi_dcmple>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f000 ff39 	bl	80012a8 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	dd01      	ble.n	800043e <__aeabi_dcmple+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_dcmpgt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 febd 	bl	80011c4 <__gedf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dc01      	bgt.n	8000452 <__aeabi_dcmpgt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmpge>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 feb3 	bl	80011c4 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	da01      	bge.n	8000466 <__aeabi_dcmpge+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_d2uiz>:
 800046c:	b570      	push	{r4, r5, r6, lr}
 800046e:	2200      	movs	r2, #0
 8000470:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <__aeabi_d2uiz+0x38>)
 8000472:	0004      	movs	r4, r0
 8000474:	000d      	movs	r5, r1
 8000476:	f7ff ffef 	bl	8000458 <__aeabi_dcmpge>
 800047a:	2800      	cmp	r0, #0
 800047c:	d104      	bne.n	8000488 <__aeabi_d2uiz+0x1c>
 800047e:	0020      	movs	r0, r4
 8000480:	0029      	movs	r1, r5
 8000482:	f001 fd7f 	bl	8001f84 <__aeabi_d2iz>
 8000486:	bd70      	pop	{r4, r5, r6, pc}
 8000488:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <__aeabi_d2uiz+0x38>)
 800048a:	2200      	movs	r2, #0
 800048c:	0020      	movs	r0, r4
 800048e:	0029      	movs	r1, r5
 8000490:	f001 f9e6 	bl	8001860 <__aeabi_dsub>
 8000494:	f001 fd76 	bl	8001f84 <__aeabi_d2iz>
 8000498:	2380      	movs	r3, #128	; 0x80
 800049a:	061b      	lsls	r3, r3, #24
 800049c:	469c      	mov	ip, r3
 800049e:	4460      	add	r0, ip
 80004a0:	e7f1      	b.n	8000486 <__aeabi_d2uiz+0x1a>
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	41e00000 	.word	0x41e00000

080004a8 <__aeabi_dadd>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	464f      	mov	r7, r9
 80004ac:	46d6      	mov	lr, sl
 80004ae:	4646      	mov	r6, r8
 80004b0:	000d      	movs	r5, r1
 80004b2:	0001      	movs	r1, r0
 80004b4:	0018      	movs	r0, r3
 80004b6:	b5c0      	push	{r6, r7, lr}
 80004b8:	0017      	movs	r7, r2
 80004ba:	032b      	lsls	r3, r5, #12
 80004bc:	0a5a      	lsrs	r2, r3, #9
 80004be:	0f4b      	lsrs	r3, r1, #29
 80004c0:	4313      	orrs	r3, r2
 80004c2:	00ca      	lsls	r2, r1, #3
 80004c4:	4691      	mov	r9, r2
 80004c6:	0302      	lsls	r2, r0, #12
 80004c8:	006e      	lsls	r6, r5, #1
 80004ca:	0041      	lsls	r1, r0, #1
 80004cc:	0a52      	lsrs	r2, r2, #9
 80004ce:	0fec      	lsrs	r4, r5, #31
 80004d0:	0f7d      	lsrs	r5, r7, #29
 80004d2:	4315      	orrs	r5, r2
 80004d4:	0d76      	lsrs	r6, r6, #21
 80004d6:	0d49      	lsrs	r1, r1, #21
 80004d8:	0fc0      	lsrs	r0, r0, #31
 80004da:	4682      	mov	sl, r0
 80004dc:	46ac      	mov	ip, r5
 80004de:	00ff      	lsls	r7, r7, #3
 80004e0:	1a72      	subs	r2, r6, r1
 80004e2:	4284      	cmp	r4, r0
 80004e4:	d100      	bne.n	80004e8 <__aeabi_dadd+0x40>
 80004e6:	e098      	b.n	800061a <__aeabi_dadd+0x172>
 80004e8:	2a00      	cmp	r2, #0
 80004ea:	dc00      	bgt.n	80004ee <__aeabi_dadd+0x46>
 80004ec:	e081      	b.n	80005f2 <__aeabi_dadd+0x14a>
 80004ee:	2900      	cmp	r1, #0
 80004f0:	d100      	bne.n	80004f4 <__aeabi_dadd+0x4c>
 80004f2:	e0b6      	b.n	8000662 <__aeabi_dadd+0x1ba>
 80004f4:	49c9      	ldr	r1, [pc, #804]	; (800081c <__aeabi_dadd+0x374>)
 80004f6:	428e      	cmp	r6, r1
 80004f8:	d100      	bne.n	80004fc <__aeabi_dadd+0x54>
 80004fa:	e172      	b.n	80007e2 <__aeabi_dadd+0x33a>
 80004fc:	2180      	movs	r1, #128	; 0x80
 80004fe:	0028      	movs	r0, r5
 8000500:	0409      	lsls	r1, r1, #16
 8000502:	4308      	orrs	r0, r1
 8000504:	4684      	mov	ip, r0
 8000506:	2a38      	cmp	r2, #56	; 0x38
 8000508:	dd00      	ble.n	800050c <__aeabi_dadd+0x64>
 800050a:	e15e      	b.n	80007ca <__aeabi_dadd+0x322>
 800050c:	2a1f      	cmp	r2, #31
 800050e:	dd00      	ble.n	8000512 <__aeabi_dadd+0x6a>
 8000510:	e1ee      	b.n	80008f0 <__aeabi_dadd+0x448>
 8000512:	2020      	movs	r0, #32
 8000514:	0039      	movs	r1, r7
 8000516:	4665      	mov	r5, ip
 8000518:	1a80      	subs	r0, r0, r2
 800051a:	4087      	lsls	r7, r0
 800051c:	40d1      	lsrs	r1, r2
 800051e:	4085      	lsls	r5, r0
 8000520:	430d      	orrs	r5, r1
 8000522:	0039      	movs	r1, r7
 8000524:	1e4f      	subs	r7, r1, #1
 8000526:	41b9      	sbcs	r1, r7
 8000528:	4667      	mov	r7, ip
 800052a:	40d7      	lsrs	r7, r2
 800052c:	4329      	orrs	r1, r5
 800052e:	1bdb      	subs	r3, r3, r7
 8000530:	464a      	mov	r2, r9
 8000532:	1a55      	subs	r5, r2, r1
 8000534:	45a9      	cmp	r9, r5
 8000536:	4189      	sbcs	r1, r1
 8000538:	4249      	negs	r1, r1
 800053a:	1a5b      	subs	r3, r3, r1
 800053c:	4698      	mov	r8, r3
 800053e:	4643      	mov	r3, r8
 8000540:	021b      	lsls	r3, r3, #8
 8000542:	d400      	bmi.n	8000546 <__aeabi_dadd+0x9e>
 8000544:	e0cc      	b.n	80006e0 <__aeabi_dadd+0x238>
 8000546:	4643      	mov	r3, r8
 8000548:	025b      	lsls	r3, r3, #9
 800054a:	0a5b      	lsrs	r3, r3, #9
 800054c:	4698      	mov	r8, r3
 800054e:	4643      	mov	r3, r8
 8000550:	2b00      	cmp	r3, #0
 8000552:	d100      	bne.n	8000556 <__aeabi_dadd+0xae>
 8000554:	e12c      	b.n	80007b0 <__aeabi_dadd+0x308>
 8000556:	4640      	mov	r0, r8
 8000558:	f001 fda0 	bl	800209c <__clzsi2>
 800055c:	0001      	movs	r1, r0
 800055e:	3908      	subs	r1, #8
 8000560:	2220      	movs	r2, #32
 8000562:	0028      	movs	r0, r5
 8000564:	4643      	mov	r3, r8
 8000566:	1a52      	subs	r2, r2, r1
 8000568:	408b      	lsls	r3, r1
 800056a:	40d0      	lsrs	r0, r2
 800056c:	408d      	lsls	r5, r1
 800056e:	4303      	orrs	r3, r0
 8000570:	428e      	cmp	r6, r1
 8000572:	dd00      	ble.n	8000576 <__aeabi_dadd+0xce>
 8000574:	e117      	b.n	80007a6 <__aeabi_dadd+0x2fe>
 8000576:	1b8e      	subs	r6, r1, r6
 8000578:	1c72      	adds	r2, r6, #1
 800057a:	2a1f      	cmp	r2, #31
 800057c:	dd00      	ble.n	8000580 <__aeabi_dadd+0xd8>
 800057e:	e1a7      	b.n	80008d0 <__aeabi_dadd+0x428>
 8000580:	2120      	movs	r1, #32
 8000582:	0018      	movs	r0, r3
 8000584:	002e      	movs	r6, r5
 8000586:	1a89      	subs	r1, r1, r2
 8000588:	408d      	lsls	r5, r1
 800058a:	4088      	lsls	r0, r1
 800058c:	40d6      	lsrs	r6, r2
 800058e:	40d3      	lsrs	r3, r2
 8000590:	1e69      	subs	r1, r5, #1
 8000592:	418d      	sbcs	r5, r1
 8000594:	4330      	orrs	r0, r6
 8000596:	4698      	mov	r8, r3
 8000598:	2600      	movs	r6, #0
 800059a:	4305      	orrs	r5, r0
 800059c:	076b      	lsls	r3, r5, #29
 800059e:	d009      	beq.n	80005b4 <__aeabi_dadd+0x10c>
 80005a0:	230f      	movs	r3, #15
 80005a2:	402b      	ands	r3, r5
 80005a4:	2b04      	cmp	r3, #4
 80005a6:	d005      	beq.n	80005b4 <__aeabi_dadd+0x10c>
 80005a8:	1d2b      	adds	r3, r5, #4
 80005aa:	42ab      	cmp	r3, r5
 80005ac:	41ad      	sbcs	r5, r5
 80005ae:	426d      	negs	r5, r5
 80005b0:	44a8      	add	r8, r5
 80005b2:	001d      	movs	r5, r3
 80005b4:	4643      	mov	r3, r8
 80005b6:	021b      	lsls	r3, r3, #8
 80005b8:	d400      	bmi.n	80005bc <__aeabi_dadd+0x114>
 80005ba:	e094      	b.n	80006e6 <__aeabi_dadd+0x23e>
 80005bc:	4b97      	ldr	r3, [pc, #604]	; (800081c <__aeabi_dadd+0x374>)
 80005be:	1c72      	adds	r2, r6, #1
 80005c0:	429a      	cmp	r2, r3
 80005c2:	d100      	bne.n	80005c6 <__aeabi_dadd+0x11e>
 80005c4:	e09d      	b.n	8000702 <__aeabi_dadd+0x25a>
 80005c6:	4641      	mov	r1, r8
 80005c8:	4b95      	ldr	r3, [pc, #596]	; (8000820 <__aeabi_dadd+0x378>)
 80005ca:	08ed      	lsrs	r5, r5, #3
 80005cc:	4019      	ands	r1, r3
 80005ce:	000b      	movs	r3, r1
 80005d0:	0552      	lsls	r2, r2, #21
 80005d2:	0749      	lsls	r1, r1, #29
 80005d4:	025b      	lsls	r3, r3, #9
 80005d6:	4329      	orrs	r1, r5
 80005d8:	0b1b      	lsrs	r3, r3, #12
 80005da:	0d52      	lsrs	r2, r2, #21
 80005dc:	0512      	lsls	r2, r2, #20
 80005de:	4313      	orrs	r3, r2
 80005e0:	07e4      	lsls	r4, r4, #31
 80005e2:	4323      	orrs	r3, r4
 80005e4:	0008      	movs	r0, r1
 80005e6:	0019      	movs	r1, r3
 80005e8:	bce0      	pop	{r5, r6, r7}
 80005ea:	46ba      	mov	sl, r7
 80005ec:	46b1      	mov	r9, r6
 80005ee:	46a8      	mov	r8, r5
 80005f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f2:	2a00      	cmp	r2, #0
 80005f4:	d043      	beq.n	800067e <__aeabi_dadd+0x1d6>
 80005f6:	1b8a      	subs	r2, r1, r6
 80005f8:	2e00      	cmp	r6, #0
 80005fa:	d000      	beq.n	80005fe <__aeabi_dadd+0x156>
 80005fc:	e12a      	b.n	8000854 <__aeabi_dadd+0x3ac>
 80005fe:	464c      	mov	r4, r9
 8000600:	431c      	orrs	r4, r3
 8000602:	d100      	bne.n	8000606 <__aeabi_dadd+0x15e>
 8000604:	e1d1      	b.n	80009aa <__aeabi_dadd+0x502>
 8000606:	1e54      	subs	r4, r2, #1
 8000608:	2a01      	cmp	r2, #1
 800060a:	d100      	bne.n	800060e <__aeabi_dadd+0x166>
 800060c:	e21f      	b.n	8000a4e <__aeabi_dadd+0x5a6>
 800060e:	4d83      	ldr	r5, [pc, #524]	; (800081c <__aeabi_dadd+0x374>)
 8000610:	42aa      	cmp	r2, r5
 8000612:	d100      	bne.n	8000616 <__aeabi_dadd+0x16e>
 8000614:	e272      	b.n	8000afc <__aeabi_dadd+0x654>
 8000616:	0022      	movs	r2, r4
 8000618:	e123      	b.n	8000862 <__aeabi_dadd+0x3ba>
 800061a:	2a00      	cmp	r2, #0
 800061c:	dc00      	bgt.n	8000620 <__aeabi_dadd+0x178>
 800061e:	e098      	b.n	8000752 <__aeabi_dadd+0x2aa>
 8000620:	2900      	cmp	r1, #0
 8000622:	d042      	beq.n	80006aa <__aeabi_dadd+0x202>
 8000624:	497d      	ldr	r1, [pc, #500]	; (800081c <__aeabi_dadd+0x374>)
 8000626:	428e      	cmp	r6, r1
 8000628:	d100      	bne.n	800062c <__aeabi_dadd+0x184>
 800062a:	e0da      	b.n	80007e2 <__aeabi_dadd+0x33a>
 800062c:	2180      	movs	r1, #128	; 0x80
 800062e:	0028      	movs	r0, r5
 8000630:	0409      	lsls	r1, r1, #16
 8000632:	4308      	orrs	r0, r1
 8000634:	4684      	mov	ip, r0
 8000636:	2a38      	cmp	r2, #56	; 0x38
 8000638:	dd00      	ble.n	800063c <__aeabi_dadd+0x194>
 800063a:	e129      	b.n	8000890 <__aeabi_dadd+0x3e8>
 800063c:	2a1f      	cmp	r2, #31
 800063e:	dc00      	bgt.n	8000642 <__aeabi_dadd+0x19a>
 8000640:	e187      	b.n	8000952 <__aeabi_dadd+0x4aa>
 8000642:	0011      	movs	r1, r2
 8000644:	4665      	mov	r5, ip
 8000646:	3920      	subs	r1, #32
 8000648:	40cd      	lsrs	r5, r1
 800064a:	2a20      	cmp	r2, #32
 800064c:	d004      	beq.n	8000658 <__aeabi_dadd+0x1b0>
 800064e:	2040      	movs	r0, #64	; 0x40
 8000650:	4661      	mov	r1, ip
 8000652:	1a82      	subs	r2, r0, r2
 8000654:	4091      	lsls	r1, r2
 8000656:	430f      	orrs	r7, r1
 8000658:	0039      	movs	r1, r7
 800065a:	1e4f      	subs	r7, r1, #1
 800065c:	41b9      	sbcs	r1, r7
 800065e:	430d      	orrs	r5, r1
 8000660:	e11b      	b.n	800089a <__aeabi_dadd+0x3f2>
 8000662:	0029      	movs	r1, r5
 8000664:	4339      	orrs	r1, r7
 8000666:	d100      	bne.n	800066a <__aeabi_dadd+0x1c2>
 8000668:	e0b5      	b.n	80007d6 <__aeabi_dadd+0x32e>
 800066a:	1e51      	subs	r1, r2, #1
 800066c:	2a01      	cmp	r2, #1
 800066e:	d100      	bne.n	8000672 <__aeabi_dadd+0x1ca>
 8000670:	e1ab      	b.n	80009ca <__aeabi_dadd+0x522>
 8000672:	486a      	ldr	r0, [pc, #424]	; (800081c <__aeabi_dadd+0x374>)
 8000674:	4282      	cmp	r2, r0
 8000676:	d100      	bne.n	800067a <__aeabi_dadd+0x1d2>
 8000678:	e1b2      	b.n	80009e0 <__aeabi_dadd+0x538>
 800067a:	000a      	movs	r2, r1
 800067c:	e743      	b.n	8000506 <__aeabi_dadd+0x5e>
 800067e:	4969      	ldr	r1, [pc, #420]	; (8000824 <__aeabi_dadd+0x37c>)
 8000680:	1c75      	adds	r5, r6, #1
 8000682:	420d      	tst	r5, r1
 8000684:	d000      	beq.n	8000688 <__aeabi_dadd+0x1e0>
 8000686:	e0cf      	b.n	8000828 <__aeabi_dadd+0x380>
 8000688:	2e00      	cmp	r6, #0
 800068a:	d000      	beq.n	800068e <__aeabi_dadd+0x1e6>
 800068c:	e193      	b.n	80009b6 <__aeabi_dadd+0x50e>
 800068e:	4649      	mov	r1, r9
 8000690:	4319      	orrs	r1, r3
 8000692:	d100      	bne.n	8000696 <__aeabi_dadd+0x1ee>
 8000694:	e1d1      	b.n	8000a3a <__aeabi_dadd+0x592>
 8000696:	4661      	mov	r1, ip
 8000698:	4339      	orrs	r1, r7
 800069a:	d000      	beq.n	800069e <__aeabi_dadd+0x1f6>
 800069c:	e1e3      	b.n	8000a66 <__aeabi_dadd+0x5be>
 800069e:	4649      	mov	r1, r9
 80006a0:	0758      	lsls	r0, r3, #29
 80006a2:	08c9      	lsrs	r1, r1, #3
 80006a4:	4301      	orrs	r1, r0
 80006a6:	08db      	lsrs	r3, r3, #3
 80006a8:	e026      	b.n	80006f8 <__aeabi_dadd+0x250>
 80006aa:	0029      	movs	r1, r5
 80006ac:	4339      	orrs	r1, r7
 80006ae:	d100      	bne.n	80006b2 <__aeabi_dadd+0x20a>
 80006b0:	e091      	b.n	80007d6 <__aeabi_dadd+0x32e>
 80006b2:	1e51      	subs	r1, r2, #1
 80006b4:	2a01      	cmp	r2, #1
 80006b6:	d005      	beq.n	80006c4 <__aeabi_dadd+0x21c>
 80006b8:	4858      	ldr	r0, [pc, #352]	; (800081c <__aeabi_dadd+0x374>)
 80006ba:	4282      	cmp	r2, r0
 80006bc:	d100      	bne.n	80006c0 <__aeabi_dadd+0x218>
 80006be:	e18f      	b.n	80009e0 <__aeabi_dadd+0x538>
 80006c0:	000a      	movs	r2, r1
 80006c2:	e7b8      	b.n	8000636 <__aeabi_dadd+0x18e>
 80006c4:	003d      	movs	r5, r7
 80006c6:	444d      	add	r5, r9
 80006c8:	454d      	cmp	r5, r9
 80006ca:	4189      	sbcs	r1, r1
 80006cc:	4463      	add	r3, ip
 80006ce:	4698      	mov	r8, r3
 80006d0:	4249      	negs	r1, r1
 80006d2:	4488      	add	r8, r1
 80006d4:	4643      	mov	r3, r8
 80006d6:	2602      	movs	r6, #2
 80006d8:	021b      	lsls	r3, r3, #8
 80006da:	d500      	bpl.n	80006de <__aeabi_dadd+0x236>
 80006dc:	e0eb      	b.n	80008b6 <__aeabi_dadd+0x40e>
 80006de:	3e01      	subs	r6, #1
 80006e0:	076b      	lsls	r3, r5, #29
 80006e2:	d000      	beq.n	80006e6 <__aeabi_dadd+0x23e>
 80006e4:	e75c      	b.n	80005a0 <__aeabi_dadd+0xf8>
 80006e6:	4643      	mov	r3, r8
 80006e8:	08e9      	lsrs	r1, r5, #3
 80006ea:	075a      	lsls	r2, r3, #29
 80006ec:	4311      	orrs	r1, r2
 80006ee:	0032      	movs	r2, r6
 80006f0:	08db      	lsrs	r3, r3, #3
 80006f2:	484a      	ldr	r0, [pc, #296]	; (800081c <__aeabi_dadd+0x374>)
 80006f4:	4282      	cmp	r2, r0
 80006f6:	d021      	beq.n	800073c <__aeabi_dadd+0x294>
 80006f8:	031b      	lsls	r3, r3, #12
 80006fa:	0552      	lsls	r2, r2, #21
 80006fc:	0b1b      	lsrs	r3, r3, #12
 80006fe:	0d52      	lsrs	r2, r2, #21
 8000700:	e76c      	b.n	80005dc <__aeabi_dadd+0x134>
 8000702:	2300      	movs	r3, #0
 8000704:	2100      	movs	r1, #0
 8000706:	e769      	b.n	80005dc <__aeabi_dadd+0x134>
 8000708:	002a      	movs	r2, r5
 800070a:	433a      	orrs	r2, r7
 800070c:	d069      	beq.n	80007e2 <__aeabi_dadd+0x33a>
 800070e:	464a      	mov	r2, r9
 8000710:	0758      	lsls	r0, r3, #29
 8000712:	08d1      	lsrs	r1, r2, #3
 8000714:	08da      	lsrs	r2, r3, #3
 8000716:	2380      	movs	r3, #128	; 0x80
 8000718:	031b      	lsls	r3, r3, #12
 800071a:	4308      	orrs	r0, r1
 800071c:	421a      	tst	r2, r3
 800071e:	d007      	beq.n	8000730 <__aeabi_dadd+0x288>
 8000720:	0029      	movs	r1, r5
 8000722:	08ed      	lsrs	r5, r5, #3
 8000724:	421d      	tst	r5, r3
 8000726:	d103      	bne.n	8000730 <__aeabi_dadd+0x288>
 8000728:	002a      	movs	r2, r5
 800072a:	08ff      	lsrs	r7, r7, #3
 800072c:	0748      	lsls	r0, r1, #29
 800072e:	4338      	orrs	r0, r7
 8000730:	0f43      	lsrs	r3, r0, #29
 8000732:	00c1      	lsls	r1, r0, #3
 8000734:	075b      	lsls	r3, r3, #29
 8000736:	08c9      	lsrs	r1, r1, #3
 8000738:	4319      	orrs	r1, r3
 800073a:	0013      	movs	r3, r2
 800073c:	000a      	movs	r2, r1
 800073e:	431a      	orrs	r2, r3
 8000740:	d100      	bne.n	8000744 <__aeabi_dadd+0x29c>
 8000742:	e213      	b.n	8000b6c <__aeabi_dadd+0x6c4>
 8000744:	2280      	movs	r2, #128	; 0x80
 8000746:	0312      	lsls	r2, r2, #12
 8000748:	4313      	orrs	r3, r2
 800074a:	031b      	lsls	r3, r3, #12
 800074c:	4a33      	ldr	r2, [pc, #204]	; (800081c <__aeabi_dadd+0x374>)
 800074e:	0b1b      	lsrs	r3, r3, #12
 8000750:	e744      	b.n	80005dc <__aeabi_dadd+0x134>
 8000752:	2a00      	cmp	r2, #0
 8000754:	d04b      	beq.n	80007ee <__aeabi_dadd+0x346>
 8000756:	1b8a      	subs	r2, r1, r6
 8000758:	2e00      	cmp	r6, #0
 800075a:	d100      	bne.n	800075e <__aeabi_dadd+0x2b6>
 800075c:	e0e7      	b.n	800092e <__aeabi_dadd+0x486>
 800075e:	482f      	ldr	r0, [pc, #188]	; (800081c <__aeabi_dadd+0x374>)
 8000760:	4281      	cmp	r1, r0
 8000762:	d100      	bne.n	8000766 <__aeabi_dadd+0x2be>
 8000764:	e195      	b.n	8000a92 <__aeabi_dadd+0x5ea>
 8000766:	2080      	movs	r0, #128	; 0x80
 8000768:	0400      	lsls	r0, r0, #16
 800076a:	4303      	orrs	r3, r0
 800076c:	2a38      	cmp	r2, #56	; 0x38
 800076e:	dd00      	ble.n	8000772 <__aeabi_dadd+0x2ca>
 8000770:	e143      	b.n	80009fa <__aeabi_dadd+0x552>
 8000772:	2a1f      	cmp	r2, #31
 8000774:	dd00      	ble.n	8000778 <__aeabi_dadd+0x2d0>
 8000776:	e1db      	b.n	8000b30 <__aeabi_dadd+0x688>
 8000778:	2020      	movs	r0, #32
 800077a:	001d      	movs	r5, r3
 800077c:	464e      	mov	r6, r9
 800077e:	1a80      	subs	r0, r0, r2
 8000780:	4085      	lsls	r5, r0
 8000782:	40d6      	lsrs	r6, r2
 8000784:	4335      	orrs	r5, r6
 8000786:	464e      	mov	r6, r9
 8000788:	4086      	lsls	r6, r0
 800078a:	0030      	movs	r0, r6
 800078c:	40d3      	lsrs	r3, r2
 800078e:	1e46      	subs	r6, r0, #1
 8000790:	41b0      	sbcs	r0, r6
 8000792:	449c      	add	ip, r3
 8000794:	4305      	orrs	r5, r0
 8000796:	19ed      	adds	r5, r5, r7
 8000798:	42bd      	cmp	r5, r7
 800079a:	419b      	sbcs	r3, r3
 800079c:	425b      	negs	r3, r3
 800079e:	4463      	add	r3, ip
 80007a0:	4698      	mov	r8, r3
 80007a2:	000e      	movs	r6, r1
 80007a4:	e07f      	b.n	80008a6 <__aeabi_dadd+0x3fe>
 80007a6:	4a1e      	ldr	r2, [pc, #120]	; (8000820 <__aeabi_dadd+0x378>)
 80007a8:	1a76      	subs	r6, r6, r1
 80007aa:	4013      	ands	r3, r2
 80007ac:	4698      	mov	r8, r3
 80007ae:	e6f5      	b.n	800059c <__aeabi_dadd+0xf4>
 80007b0:	0028      	movs	r0, r5
 80007b2:	f001 fc73 	bl	800209c <__clzsi2>
 80007b6:	0001      	movs	r1, r0
 80007b8:	3118      	adds	r1, #24
 80007ba:	291f      	cmp	r1, #31
 80007bc:	dc00      	bgt.n	80007c0 <__aeabi_dadd+0x318>
 80007be:	e6cf      	b.n	8000560 <__aeabi_dadd+0xb8>
 80007c0:	002b      	movs	r3, r5
 80007c2:	3808      	subs	r0, #8
 80007c4:	4083      	lsls	r3, r0
 80007c6:	2500      	movs	r5, #0
 80007c8:	e6d2      	b.n	8000570 <__aeabi_dadd+0xc8>
 80007ca:	4662      	mov	r2, ip
 80007cc:	433a      	orrs	r2, r7
 80007ce:	0011      	movs	r1, r2
 80007d0:	1e4f      	subs	r7, r1, #1
 80007d2:	41b9      	sbcs	r1, r7
 80007d4:	e6ac      	b.n	8000530 <__aeabi_dadd+0x88>
 80007d6:	4649      	mov	r1, r9
 80007d8:	0758      	lsls	r0, r3, #29
 80007da:	08c9      	lsrs	r1, r1, #3
 80007dc:	4301      	orrs	r1, r0
 80007de:	08db      	lsrs	r3, r3, #3
 80007e0:	e787      	b.n	80006f2 <__aeabi_dadd+0x24a>
 80007e2:	4649      	mov	r1, r9
 80007e4:	075a      	lsls	r2, r3, #29
 80007e6:	08c9      	lsrs	r1, r1, #3
 80007e8:	4311      	orrs	r1, r2
 80007ea:	08db      	lsrs	r3, r3, #3
 80007ec:	e7a6      	b.n	800073c <__aeabi_dadd+0x294>
 80007ee:	490d      	ldr	r1, [pc, #52]	; (8000824 <__aeabi_dadd+0x37c>)
 80007f0:	1c70      	adds	r0, r6, #1
 80007f2:	4208      	tst	r0, r1
 80007f4:	d000      	beq.n	80007f8 <__aeabi_dadd+0x350>
 80007f6:	e0bb      	b.n	8000970 <__aeabi_dadd+0x4c8>
 80007f8:	2e00      	cmp	r6, #0
 80007fa:	d000      	beq.n	80007fe <__aeabi_dadd+0x356>
 80007fc:	e114      	b.n	8000a28 <__aeabi_dadd+0x580>
 80007fe:	4649      	mov	r1, r9
 8000800:	4319      	orrs	r1, r3
 8000802:	d100      	bne.n	8000806 <__aeabi_dadd+0x35e>
 8000804:	e175      	b.n	8000af2 <__aeabi_dadd+0x64a>
 8000806:	0029      	movs	r1, r5
 8000808:	4339      	orrs	r1, r7
 800080a:	d000      	beq.n	800080e <__aeabi_dadd+0x366>
 800080c:	e17e      	b.n	8000b0c <__aeabi_dadd+0x664>
 800080e:	4649      	mov	r1, r9
 8000810:	0758      	lsls	r0, r3, #29
 8000812:	08c9      	lsrs	r1, r1, #3
 8000814:	4301      	orrs	r1, r0
 8000816:	08db      	lsrs	r3, r3, #3
 8000818:	e76e      	b.n	80006f8 <__aeabi_dadd+0x250>
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	000007ff 	.word	0x000007ff
 8000820:	ff7fffff 	.word	0xff7fffff
 8000824:	000007fe 	.word	0x000007fe
 8000828:	4649      	mov	r1, r9
 800082a:	1bcd      	subs	r5, r1, r7
 800082c:	4661      	mov	r1, ip
 800082e:	1a58      	subs	r0, r3, r1
 8000830:	45a9      	cmp	r9, r5
 8000832:	4189      	sbcs	r1, r1
 8000834:	4249      	negs	r1, r1
 8000836:	4688      	mov	r8, r1
 8000838:	0001      	movs	r1, r0
 800083a:	4640      	mov	r0, r8
 800083c:	1a09      	subs	r1, r1, r0
 800083e:	4688      	mov	r8, r1
 8000840:	0209      	lsls	r1, r1, #8
 8000842:	d500      	bpl.n	8000846 <__aeabi_dadd+0x39e>
 8000844:	e0a6      	b.n	8000994 <__aeabi_dadd+0x4ec>
 8000846:	4641      	mov	r1, r8
 8000848:	4329      	orrs	r1, r5
 800084a:	d000      	beq.n	800084e <__aeabi_dadd+0x3a6>
 800084c:	e67f      	b.n	800054e <__aeabi_dadd+0xa6>
 800084e:	2300      	movs	r3, #0
 8000850:	2400      	movs	r4, #0
 8000852:	e751      	b.n	80006f8 <__aeabi_dadd+0x250>
 8000854:	4cc7      	ldr	r4, [pc, #796]	; (8000b74 <__aeabi_dadd+0x6cc>)
 8000856:	42a1      	cmp	r1, r4
 8000858:	d100      	bne.n	800085c <__aeabi_dadd+0x3b4>
 800085a:	e0c7      	b.n	80009ec <__aeabi_dadd+0x544>
 800085c:	2480      	movs	r4, #128	; 0x80
 800085e:	0424      	lsls	r4, r4, #16
 8000860:	4323      	orrs	r3, r4
 8000862:	2a38      	cmp	r2, #56	; 0x38
 8000864:	dc54      	bgt.n	8000910 <__aeabi_dadd+0x468>
 8000866:	2a1f      	cmp	r2, #31
 8000868:	dd00      	ble.n	800086c <__aeabi_dadd+0x3c4>
 800086a:	e0cc      	b.n	8000a06 <__aeabi_dadd+0x55e>
 800086c:	2420      	movs	r4, #32
 800086e:	4648      	mov	r0, r9
 8000870:	1aa4      	subs	r4, r4, r2
 8000872:	001d      	movs	r5, r3
 8000874:	464e      	mov	r6, r9
 8000876:	40a0      	lsls	r0, r4
 8000878:	40d6      	lsrs	r6, r2
 800087a:	40a5      	lsls	r5, r4
 800087c:	0004      	movs	r4, r0
 800087e:	40d3      	lsrs	r3, r2
 8000880:	4662      	mov	r2, ip
 8000882:	4335      	orrs	r5, r6
 8000884:	1e66      	subs	r6, r4, #1
 8000886:	41b4      	sbcs	r4, r6
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	469c      	mov	ip, r3
 800088c:	4325      	orrs	r5, r4
 800088e:	e044      	b.n	800091a <__aeabi_dadd+0x472>
 8000890:	4662      	mov	r2, ip
 8000892:	433a      	orrs	r2, r7
 8000894:	0015      	movs	r5, r2
 8000896:	1e6f      	subs	r7, r5, #1
 8000898:	41bd      	sbcs	r5, r7
 800089a:	444d      	add	r5, r9
 800089c:	454d      	cmp	r5, r9
 800089e:	4189      	sbcs	r1, r1
 80008a0:	4249      	negs	r1, r1
 80008a2:	4688      	mov	r8, r1
 80008a4:	4498      	add	r8, r3
 80008a6:	4643      	mov	r3, r8
 80008a8:	021b      	lsls	r3, r3, #8
 80008aa:	d400      	bmi.n	80008ae <__aeabi_dadd+0x406>
 80008ac:	e718      	b.n	80006e0 <__aeabi_dadd+0x238>
 80008ae:	4bb1      	ldr	r3, [pc, #708]	; (8000b74 <__aeabi_dadd+0x6cc>)
 80008b0:	3601      	adds	r6, #1
 80008b2:	429e      	cmp	r6, r3
 80008b4:	d049      	beq.n	800094a <__aeabi_dadd+0x4a2>
 80008b6:	4642      	mov	r2, r8
 80008b8:	4baf      	ldr	r3, [pc, #700]	; (8000b78 <__aeabi_dadd+0x6d0>)
 80008ba:	2101      	movs	r1, #1
 80008bc:	401a      	ands	r2, r3
 80008be:	0013      	movs	r3, r2
 80008c0:	086a      	lsrs	r2, r5, #1
 80008c2:	400d      	ands	r5, r1
 80008c4:	4315      	orrs	r5, r2
 80008c6:	07d9      	lsls	r1, r3, #31
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	4698      	mov	r8, r3
 80008cc:	430d      	orrs	r5, r1
 80008ce:	e665      	b.n	800059c <__aeabi_dadd+0xf4>
 80008d0:	0018      	movs	r0, r3
 80008d2:	3e1f      	subs	r6, #31
 80008d4:	40f0      	lsrs	r0, r6
 80008d6:	2a20      	cmp	r2, #32
 80008d8:	d003      	beq.n	80008e2 <__aeabi_dadd+0x43a>
 80008da:	2140      	movs	r1, #64	; 0x40
 80008dc:	1a8a      	subs	r2, r1, r2
 80008de:	4093      	lsls	r3, r2
 80008e0:	431d      	orrs	r5, r3
 80008e2:	1e69      	subs	r1, r5, #1
 80008e4:	418d      	sbcs	r5, r1
 80008e6:	2300      	movs	r3, #0
 80008e8:	2600      	movs	r6, #0
 80008ea:	4698      	mov	r8, r3
 80008ec:	4305      	orrs	r5, r0
 80008ee:	e6f7      	b.n	80006e0 <__aeabi_dadd+0x238>
 80008f0:	0011      	movs	r1, r2
 80008f2:	4665      	mov	r5, ip
 80008f4:	3920      	subs	r1, #32
 80008f6:	40cd      	lsrs	r5, r1
 80008f8:	2a20      	cmp	r2, #32
 80008fa:	d004      	beq.n	8000906 <__aeabi_dadd+0x45e>
 80008fc:	2040      	movs	r0, #64	; 0x40
 80008fe:	4661      	mov	r1, ip
 8000900:	1a82      	subs	r2, r0, r2
 8000902:	4091      	lsls	r1, r2
 8000904:	430f      	orrs	r7, r1
 8000906:	0039      	movs	r1, r7
 8000908:	1e4f      	subs	r7, r1, #1
 800090a:	41b9      	sbcs	r1, r7
 800090c:	4329      	orrs	r1, r5
 800090e:	e60f      	b.n	8000530 <__aeabi_dadd+0x88>
 8000910:	464a      	mov	r2, r9
 8000912:	4313      	orrs	r3, r2
 8000914:	001d      	movs	r5, r3
 8000916:	1e6b      	subs	r3, r5, #1
 8000918:	419d      	sbcs	r5, r3
 800091a:	1b7d      	subs	r5, r7, r5
 800091c:	42af      	cmp	r7, r5
 800091e:	419b      	sbcs	r3, r3
 8000920:	4662      	mov	r2, ip
 8000922:	425b      	negs	r3, r3
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	4698      	mov	r8, r3
 8000928:	4654      	mov	r4, sl
 800092a:	000e      	movs	r6, r1
 800092c:	e607      	b.n	800053e <__aeabi_dadd+0x96>
 800092e:	4648      	mov	r0, r9
 8000930:	4318      	orrs	r0, r3
 8000932:	d100      	bne.n	8000936 <__aeabi_dadd+0x48e>
 8000934:	e0b3      	b.n	8000a9e <__aeabi_dadd+0x5f6>
 8000936:	1e50      	subs	r0, r2, #1
 8000938:	2a01      	cmp	r2, #1
 800093a:	d100      	bne.n	800093e <__aeabi_dadd+0x496>
 800093c:	e10d      	b.n	8000b5a <__aeabi_dadd+0x6b2>
 800093e:	4d8d      	ldr	r5, [pc, #564]	; (8000b74 <__aeabi_dadd+0x6cc>)
 8000940:	42aa      	cmp	r2, r5
 8000942:	d100      	bne.n	8000946 <__aeabi_dadd+0x49e>
 8000944:	e0a5      	b.n	8000a92 <__aeabi_dadd+0x5ea>
 8000946:	0002      	movs	r2, r0
 8000948:	e710      	b.n	800076c <__aeabi_dadd+0x2c4>
 800094a:	0032      	movs	r2, r6
 800094c:	2300      	movs	r3, #0
 800094e:	2100      	movs	r1, #0
 8000950:	e644      	b.n	80005dc <__aeabi_dadd+0x134>
 8000952:	2120      	movs	r1, #32
 8000954:	0038      	movs	r0, r7
 8000956:	1a89      	subs	r1, r1, r2
 8000958:	4665      	mov	r5, ip
 800095a:	408f      	lsls	r7, r1
 800095c:	408d      	lsls	r5, r1
 800095e:	40d0      	lsrs	r0, r2
 8000960:	1e79      	subs	r1, r7, #1
 8000962:	418f      	sbcs	r7, r1
 8000964:	4305      	orrs	r5, r0
 8000966:	433d      	orrs	r5, r7
 8000968:	4667      	mov	r7, ip
 800096a:	40d7      	lsrs	r7, r2
 800096c:	19db      	adds	r3, r3, r7
 800096e:	e794      	b.n	800089a <__aeabi_dadd+0x3f2>
 8000970:	4a80      	ldr	r2, [pc, #512]	; (8000b74 <__aeabi_dadd+0x6cc>)
 8000972:	4290      	cmp	r0, r2
 8000974:	d100      	bne.n	8000978 <__aeabi_dadd+0x4d0>
 8000976:	e0ec      	b.n	8000b52 <__aeabi_dadd+0x6aa>
 8000978:	0039      	movs	r1, r7
 800097a:	4449      	add	r1, r9
 800097c:	4549      	cmp	r1, r9
 800097e:	4192      	sbcs	r2, r2
 8000980:	4463      	add	r3, ip
 8000982:	4252      	negs	r2, r2
 8000984:	189b      	adds	r3, r3, r2
 8000986:	07dd      	lsls	r5, r3, #31
 8000988:	0849      	lsrs	r1, r1, #1
 800098a:	085b      	lsrs	r3, r3, #1
 800098c:	4698      	mov	r8, r3
 800098e:	0006      	movs	r6, r0
 8000990:	430d      	orrs	r5, r1
 8000992:	e6a5      	b.n	80006e0 <__aeabi_dadd+0x238>
 8000994:	464a      	mov	r2, r9
 8000996:	1abd      	subs	r5, r7, r2
 8000998:	42af      	cmp	r7, r5
 800099a:	4189      	sbcs	r1, r1
 800099c:	4662      	mov	r2, ip
 800099e:	4249      	negs	r1, r1
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	1a5b      	subs	r3, r3, r1
 80009a4:	4698      	mov	r8, r3
 80009a6:	4654      	mov	r4, sl
 80009a8:	e5d1      	b.n	800054e <__aeabi_dadd+0xa6>
 80009aa:	076c      	lsls	r4, r5, #29
 80009ac:	08f9      	lsrs	r1, r7, #3
 80009ae:	4321      	orrs	r1, r4
 80009b0:	08eb      	lsrs	r3, r5, #3
 80009b2:	0004      	movs	r4, r0
 80009b4:	e69d      	b.n	80006f2 <__aeabi_dadd+0x24a>
 80009b6:	464a      	mov	r2, r9
 80009b8:	431a      	orrs	r2, r3
 80009ba:	d175      	bne.n	8000aa8 <__aeabi_dadd+0x600>
 80009bc:	4661      	mov	r1, ip
 80009be:	4339      	orrs	r1, r7
 80009c0:	d114      	bne.n	80009ec <__aeabi_dadd+0x544>
 80009c2:	2380      	movs	r3, #128	; 0x80
 80009c4:	2400      	movs	r4, #0
 80009c6:	031b      	lsls	r3, r3, #12
 80009c8:	e6bc      	b.n	8000744 <__aeabi_dadd+0x29c>
 80009ca:	464a      	mov	r2, r9
 80009cc:	1bd5      	subs	r5, r2, r7
 80009ce:	45a9      	cmp	r9, r5
 80009d0:	4189      	sbcs	r1, r1
 80009d2:	4662      	mov	r2, ip
 80009d4:	4249      	negs	r1, r1
 80009d6:	1a9b      	subs	r3, r3, r2
 80009d8:	1a5b      	subs	r3, r3, r1
 80009da:	4698      	mov	r8, r3
 80009dc:	2601      	movs	r6, #1
 80009de:	e5ae      	b.n	800053e <__aeabi_dadd+0x96>
 80009e0:	464a      	mov	r2, r9
 80009e2:	08d1      	lsrs	r1, r2, #3
 80009e4:	075a      	lsls	r2, r3, #29
 80009e6:	4311      	orrs	r1, r2
 80009e8:	08db      	lsrs	r3, r3, #3
 80009ea:	e6a7      	b.n	800073c <__aeabi_dadd+0x294>
 80009ec:	4663      	mov	r3, ip
 80009ee:	08f9      	lsrs	r1, r7, #3
 80009f0:	075a      	lsls	r2, r3, #29
 80009f2:	4654      	mov	r4, sl
 80009f4:	4311      	orrs	r1, r2
 80009f6:	08db      	lsrs	r3, r3, #3
 80009f8:	e6a0      	b.n	800073c <__aeabi_dadd+0x294>
 80009fa:	464a      	mov	r2, r9
 80009fc:	4313      	orrs	r3, r2
 80009fe:	001d      	movs	r5, r3
 8000a00:	1e6b      	subs	r3, r5, #1
 8000a02:	419d      	sbcs	r5, r3
 8000a04:	e6c7      	b.n	8000796 <__aeabi_dadd+0x2ee>
 8000a06:	0014      	movs	r4, r2
 8000a08:	001e      	movs	r6, r3
 8000a0a:	3c20      	subs	r4, #32
 8000a0c:	40e6      	lsrs	r6, r4
 8000a0e:	2a20      	cmp	r2, #32
 8000a10:	d005      	beq.n	8000a1e <__aeabi_dadd+0x576>
 8000a12:	2440      	movs	r4, #64	; 0x40
 8000a14:	1aa2      	subs	r2, r4, r2
 8000a16:	4093      	lsls	r3, r2
 8000a18:	464a      	mov	r2, r9
 8000a1a:	431a      	orrs	r2, r3
 8000a1c:	4691      	mov	r9, r2
 8000a1e:	464d      	mov	r5, r9
 8000a20:	1e6b      	subs	r3, r5, #1
 8000a22:	419d      	sbcs	r5, r3
 8000a24:	4335      	orrs	r5, r6
 8000a26:	e778      	b.n	800091a <__aeabi_dadd+0x472>
 8000a28:	464a      	mov	r2, r9
 8000a2a:	431a      	orrs	r2, r3
 8000a2c:	d000      	beq.n	8000a30 <__aeabi_dadd+0x588>
 8000a2e:	e66b      	b.n	8000708 <__aeabi_dadd+0x260>
 8000a30:	076b      	lsls	r3, r5, #29
 8000a32:	08f9      	lsrs	r1, r7, #3
 8000a34:	4319      	orrs	r1, r3
 8000a36:	08eb      	lsrs	r3, r5, #3
 8000a38:	e680      	b.n	800073c <__aeabi_dadd+0x294>
 8000a3a:	4661      	mov	r1, ip
 8000a3c:	4339      	orrs	r1, r7
 8000a3e:	d054      	beq.n	8000aea <__aeabi_dadd+0x642>
 8000a40:	4663      	mov	r3, ip
 8000a42:	08f9      	lsrs	r1, r7, #3
 8000a44:	075c      	lsls	r4, r3, #29
 8000a46:	4321      	orrs	r1, r4
 8000a48:	08db      	lsrs	r3, r3, #3
 8000a4a:	0004      	movs	r4, r0
 8000a4c:	e654      	b.n	80006f8 <__aeabi_dadd+0x250>
 8000a4e:	464a      	mov	r2, r9
 8000a50:	1abd      	subs	r5, r7, r2
 8000a52:	42af      	cmp	r7, r5
 8000a54:	4189      	sbcs	r1, r1
 8000a56:	4662      	mov	r2, ip
 8000a58:	4249      	negs	r1, r1
 8000a5a:	1ad3      	subs	r3, r2, r3
 8000a5c:	1a5b      	subs	r3, r3, r1
 8000a5e:	4698      	mov	r8, r3
 8000a60:	0004      	movs	r4, r0
 8000a62:	2601      	movs	r6, #1
 8000a64:	e56b      	b.n	800053e <__aeabi_dadd+0x96>
 8000a66:	464a      	mov	r2, r9
 8000a68:	1bd5      	subs	r5, r2, r7
 8000a6a:	45a9      	cmp	r9, r5
 8000a6c:	4189      	sbcs	r1, r1
 8000a6e:	4662      	mov	r2, ip
 8000a70:	4249      	negs	r1, r1
 8000a72:	1a9a      	subs	r2, r3, r2
 8000a74:	1a52      	subs	r2, r2, r1
 8000a76:	4690      	mov	r8, r2
 8000a78:	0212      	lsls	r2, r2, #8
 8000a7a:	d532      	bpl.n	8000ae2 <__aeabi_dadd+0x63a>
 8000a7c:	464a      	mov	r2, r9
 8000a7e:	1abd      	subs	r5, r7, r2
 8000a80:	42af      	cmp	r7, r5
 8000a82:	4189      	sbcs	r1, r1
 8000a84:	4662      	mov	r2, ip
 8000a86:	4249      	negs	r1, r1
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	1a5b      	subs	r3, r3, r1
 8000a8c:	4698      	mov	r8, r3
 8000a8e:	0004      	movs	r4, r0
 8000a90:	e584      	b.n	800059c <__aeabi_dadd+0xf4>
 8000a92:	4663      	mov	r3, ip
 8000a94:	08f9      	lsrs	r1, r7, #3
 8000a96:	075a      	lsls	r2, r3, #29
 8000a98:	4311      	orrs	r1, r2
 8000a9a:	08db      	lsrs	r3, r3, #3
 8000a9c:	e64e      	b.n	800073c <__aeabi_dadd+0x294>
 8000a9e:	08f9      	lsrs	r1, r7, #3
 8000aa0:	0768      	lsls	r0, r5, #29
 8000aa2:	4301      	orrs	r1, r0
 8000aa4:	08eb      	lsrs	r3, r5, #3
 8000aa6:	e624      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000aa8:	4662      	mov	r2, ip
 8000aaa:	433a      	orrs	r2, r7
 8000aac:	d100      	bne.n	8000ab0 <__aeabi_dadd+0x608>
 8000aae:	e698      	b.n	80007e2 <__aeabi_dadd+0x33a>
 8000ab0:	464a      	mov	r2, r9
 8000ab2:	08d1      	lsrs	r1, r2, #3
 8000ab4:	075a      	lsls	r2, r3, #29
 8000ab6:	4311      	orrs	r1, r2
 8000ab8:	08da      	lsrs	r2, r3, #3
 8000aba:	2380      	movs	r3, #128	; 0x80
 8000abc:	031b      	lsls	r3, r3, #12
 8000abe:	421a      	tst	r2, r3
 8000ac0:	d008      	beq.n	8000ad4 <__aeabi_dadd+0x62c>
 8000ac2:	4660      	mov	r0, ip
 8000ac4:	08c5      	lsrs	r5, r0, #3
 8000ac6:	421d      	tst	r5, r3
 8000ac8:	d104      	bne.n	8000ad4 <__aeabi_dadd+0x62c>
 8000aca:	4654      	mov	r4, sl
 8000acc:	002a      	movs	r2, r5
 8000ace:	08f9      	lsrs	r1, r7, #3
 8000ad0:	0743      	lsls	r3, r0, #29
 8000ad2:	4319      	orrs	r1, r3
 8000ad4:	0f4b      	lsrs	r3, r1, #29
 8000ad6:	00c9      	lsls	r1, r1, #3
 8000ad8:	075b      	lsls	r3, r3, #29
 8000ada:	08c9      	lsrs	r1, r1, #3
 8000adc:	4319      	orrs	r1, r3
 8000ade:	0013      	movs	r3, r2
 8000ae0:	e62c      	b.n	800073c <__aeabi_dadd+0x294>
 8000ae2:	4641      	mov	r1, r8
 8000ae4:	4329      	orrs	r1, r5
 8000ae6:	d000      	beq.n	8000aea <__aeabi_dadd+0x642>
 8000ae8:	e5fa      	b.n	80006e0 <__aeabi_dadd+0x238>
 8000aea:	2300      	movs	r3, #0
 8000aec:	000a      	movs	r2, r1
 8000aee:	2400      	movs	r4, #0
 8000af0:	e602      	b.n	80006f8 <__aeabi_dadd+0x250>
 8000af2:	076b      	lsls	r3, r5, #29
 8000af4:	08f9      	lsrs	r1, r7, #3
 8000af6:	4319      	orrs	r1, r3
 8000af8:	08eb      	lsrs	r3, r5, #3
 8000afa:	e5fd      	b.n	80006f8 <__aeabi_dadd+0x250>
 8000afc:	4663      	mov	r3, ip
 8000afe:	08f9      	lsrs	r1, r7, #3
 8000b00:	075b      	lsls	r3, r3, #29
 8000b02:	4319      	orrs	r1, r3
 8000b04:	4663      	mov	r3, ip
 8000b06:	0004      	movs	r4, r0
 8000b08:	08db      	lsrs	r3, r3, #3
 8000b0a:	e617      	b.n	800073c <__aeabi_dadd+0x294>
 8000b0c:	003d      	movs	r5, r7
 8000b0e:	444d      	add	r5, r9
 8000b10:	4463      	add	r3, ip
 8000b12:	454d      	cmp	r5, r9
 8000b14:	4189      	sbcs	r1, r1
 8000b16:	4698      	mov	r8, r3
 8000b18:	4249      	negs	r1, r1
 8000b1a:	4488      	add	r8, r1
 8000b1c:	4643      	mov	r3, r8
 8000b1e:	021b      	lsls	r3, r3, #8
 8000b20:	d400      	bmi.n	8000b24 <__aeabi_dadd+0x67c>
 8000b22:	e5dd      	b.n	80006e0 <__aeabi_dadd+0x238>
 8000b24:	4642      	mov	r2, r8
 8000b26:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <__aeabi_dadd+0x6d0>)
 8000b28:	2601      	movs	r6, #1
 8000b2a:	401a      	ands	r2, r3
 8000b2c:	4690      	mov	r8, r2
 8000b2e:	e5d7      	b.n	80006e0 <__aeabi_dadd+0x238>
 8000b30:	0010      	movs	r0, r2
 8000b32:	001e      	movs	r6, r3
 8000b34:	3820      	subs	r0, #32
 8000b36:	40c6      	lsrs	r6, r0
 8000b38:	2a20      	cmp	r2, #32
 8000b3a:	d005      	beq.n	8000b48 <__aeabi_dadd+0x6a0>
 8000b3c:	2040      	movs	r0, #64	; 0x40
 8000b3e:	1a82      	subs	r2, r0, r2
 8000b40:	4093      	lsls	r3, r2
 8000b42:	464a      	mov	r2, r9
 8000b44:	431a      	orrs	r2, r3
 8000b46:	4691      	mov	r9, r2
 8000b48:	464d      	mov	r5, r9
 8000b4a:	1e6b      	subs	r3, r5, #1
 8000b4c:	419d      	sbcs	r5, r3
 8000b4e:	4335      	orrs	r5, r6
 8000b50:	e621      	b.n	8000796 <__aeabi_dadd+0x2ee>
 8000b52:	0002      	movs	r2, r0
 8000b54:	2300      	movs	r3, #0
 8000b56:	2100      	movs	r1, #0
 8000b58:	e540      	b.n	80005dc <__aeabi_dadd+0x134>
 8000b5a:	464a      	mov	r2, r9
 8000b5c:	19d5      	adds	r5, r2, r7
 8000b5e:	42bd      	cmp	r5, r7
 8000b60:	4189      	sbcs	r1, r1
 8000b62:	4463      	add	r3, ip
 8000b64:	4698      	mov	r8, r3
 8000b66:	4249      	negs	r1, r1
 8000b68:	4488      	add	r8, r1
 8000b6a:	e5b3      	b.n	80006d4 <__aeabi_dadd+0x22c>
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4a01      	ldr	r2, [pc, #4]	; (8000b74 <__aeabi_dadd+0x6cc>)
 8000b70:	000b      	movs	r3, r1
 8000b72:	e533      	b.n	80005dc <__aeabi_dadd+0x134>
 8000b74:	000007ff 	.word	0x000007ff
 8000b78:	ff7fffff 	.word	0xff7fffff

08000b7c <__aeabi_ddiv>:
 8000b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b7e:	4657      	mov	r7, sl
 8000b80:	464e      	mov	r6, r9
 8000b82:	4645      	mov	r5, r8
 8000b84:	46de      	mov	lr, fp
 8000b86:	b5e0      	push	{r5, r6, r7, lr}
 8000b88:	4681      	mov	r9, r0
 8000b8a:	0005      	movs	r5, r0
 8000b8c:	030c      	lsls	r4, r1, #12
 8000b8e:	0048      	lsls	r0, r1, #1
 8000b90:	4692      	mov	sl, r2
 8000b92:	001f      	movs	r7, r3
 8000b94:	b085      	sub	sp, #20
 8000b96:	0b24      	lsrs	r4, r4, #12
 8000b98:	0d40      	lsrs	r0, r0, #21
 8000b9a:	0fce      	lsrs	r6, r1, #31
 8000b9c:	2800      	cmp	r0, #0
 8000b9e:	d059      	beq.n	8000c54 <__aeabi_ddiv+0xd8>
 8000ba0:	4b87      	ldr	r3, [pc, #540]	; (8000dc0 <__aeabi_ddiv+0x244>)
 8000ba2:	4298      	cmp	r0, r3
 8000ba4:	d100      	bne.n	8000ba8 <__aeabi_ddiv+0x2c>
 8000ba6:	e098      	b.n	8000cda <__aeabi_ddiv+0x15e>
 8000ba8:	0f6b      	lsrs	r3, r5, #29
 8000baa:	00e4      	lsls	r4, r4, #3
 8000bac:	431c      	orrs	r4, r3
 8000bae:	2380      	movs	r3, #128	; 0x80
 8000bb0:	041b      	lsls	r3, r3, #16
 8000bb2:	4323      	orrs	r3, r4
 8000bb4:	4698      	mov	r8, r3
 8000bb6:	4b83      	ldr	r3, [pc, #524]	; (8000dc4 <__aeabi_ddiv+0x248>)
 8000bb8:	00ed      	lsls	r5, r5, #3
 8000bba:	469b      	mov	fp, r3
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	4699      	mov	r9, r3
 8000bc0:	4483      	add	fp, r0
 8000bc2:	9300      	str	r3, [sp, #0]
 8000bc4:	033c      	lsls	r4, r7, #12
 8000bc6:	007b      	lsls	r3, r7, #1
 8000bc8:	4650      	mov	r0, sl
 8000bca:	0b24      	lsrs	r4, r4, #12
 8000bcc:	0d5b      	lsrs	r3, r3, #21
 8000bce:	0fff      	lsrs	r7, r7, #31
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d067      	beq.n	8000ca4 <__aeabi_ddiv+0x128>
 8000bd4:	4a7a      	ldr	r2, [pc, #488]	; (8000dc0 <__aeabi_ddiv+0x244>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d018      	beq.n	8000c0c <__aeabi_ddiv+0x90>
 8000bda:	497a      	ldr	r1, [pc, #488]	; (8000dc4 <__aeabi_ddiv+0x248>)
 8000bdc:	0f42      	lsrs	r2, r0, #29
 8000bde:	468c      	mov	ip, r1
 8000be0:	00e4      	lsls	r4, r4, #3
 8000be2:	4659      	mov	r1, fp
 8000be4:	4314      	orrs	r4, r2
 8000be6:	2280      	movs	r2, #128	; 0x80
 8000be8:	4463      	add	r3, ip
 8000bea:	0412      	lsls	r2, r2, #16
 8000bec:	1acb      	subs	r3, r1, r3
 8000bee:	4314      	orrs	r4, r2
 8000bf0:	469b      	mov	fp, r3
 8000bf2:	00c2      	lsls	r2, r0, #3
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	0033      	movs	r3, r6
 8000bf8:	407b      	eors	r3, r7
 8000bfa:	469a      	mov	sl, r3
 8000bfc:	464b      	mov	r3, r9
 8000bfe:	2b0f      	cmp	r3, #15
 8000c00:	d900      	bls.n	8000c04 <__aeabi_ddiv+0x88>
 8000c02:	e0ef      	b.n	8000de4 <__aeabi_ddiv+0x268>
 8000c04:	4970      	ldr	r1, [pc, #448]	; (8000dc8 <__aeabi_ddiv+0x24c>)
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	58cb      	ldr	r3, [r1, r3]
 8000c0a:	469f      	mov	pc, r3
 8000c0c:	4b6f      	ldr	r3, [pc, #444]	; (8000dcc <__aeabi_ddiv+0x250>)
 8000c0e:	4652      	mov	r2, sl
 8000c10:	469c      	mov	ip, r3
 8000c12:	4322      	orrs	r2, r4
 8000c14:	44e3      	add	fp, ip
 8000c16:	2a00      	cmp	r2, #0
 8000c18:	d000      	beq.n	8000c1c <__aeabi_ddiv+0xa0>
 8000c1a:	e095      	b.n	8000d48 <__aeabi_ddiv+0x1cc>
 8000c1c:	4649      	mov	r1, r9
 8000c1e:	2302      	movs	r3, #2
 8000c20:	4319      	orrs	r1, r3
 8000c22:	4689      	mov	r9, r1
 8000c24:	2400      	movs	r4, #0
 8000c26:	2002      	movs	r0, #2
 8000c28:	e7e5      	b.n	8000bf6 <__aeabi_ddiv+0x7a>
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	2400      	movs	r4, #0
 8000c2e:	2500      	movs	r5, #0
 8000c30:	4652      	mov	r2, sl
 8000c32:	051b      	lsls	r3, r3, #20
 8000c34:	4323      	orrs	r3, r4
 8000c36:	07d2      	lsls	r2, r2, #31
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	0028      	movs	r0, r5
 8000c3c:	0019      	movs	r1, r3
 8000c3e:	b005      	add	sp, #20
 8000c40:	bcf0      	pop	{r4, r5, r6, r7}
 8000c42:	46bb      	mov	fp, r7
 8000c44:	46b2      	mov	sl, r6
 8000c46:	46a9      	mov	r9, r5
 8000c48:	46a0      	mov	r8, r4
 8000c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c4c:	2400      	movs	r4, #0
 8000c4e:	2500      	movs	r5, #0
 8000c50:	4b5b      	ldr	r3, [pc, #364]	; (8000dc0 <__aeabi_ddiv+0x244>)
 8000c52:	e7ed      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 8000c54:	464b      	mov	r3, r9
 8000c56:	4323      	orrs	r3, r4
 8000c58:	4698      	mov	r8, r3
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_ddiv+0xe2>
 8000c5c:	e089      	b.n	8000d72 <__aeabi_ddiv+0x1f6>
 8000c5e:	2c00      	cmp	r4, #0
 8000c60:	d100      	bne.n	8000c64 <__aeabi_ddiv+0xe8>
 8000c62:	e1e0      	b.n	8001026 <__aeabi_ddiv+0x4aa>
 8000c64:	0020      	movs	r0, r4
 8000c66:	f001 fa19 	bl	800209c <__clzsi2>
 8000c6a:	0001      	movs	r1, r0
 8000c6c:	0002      	movs	r2, r0
 8000c6e:	390b      	subs	r1, #11
 8000c70:	231d      	movs	r3, #29
 8000c72:	1a5b      	subs	r3, r3, r1
 8000c74:	4649      	mov	r1, r9
 8000c76:	0010      	movs	r0, r2
 8000c78:	40d9      	lsrs	r1, r3
 8000c7a:	3808      	subs	r0, #8
 8000c7c:	4084      	lsls	r4, r0
 8000c7e:	000b      	movs	r3, r1
 8000c80:	464d      	mov	r5, r9
 8000c82:	4323      	orrs	r3, r4
 8000c84:	4698      	mov	r8, r3
 8000c86:	4085      	lsls	r5, r0
 8000c88:	4851      	ldr	r0, [pc, #324]	; (8000dd0 <__aeabi_ddiv+0x254>)
 8000c8a:	033c      	lsls	r4, r7, #12
 8000c8c:	1a83      	subs	r3, r0, r2
 8000c8e:	469b      	mov	fp, r3
 8000c90:	2300      	movs	r3, #0
 8000c92:	4699      	mov	r9, r3
 8000c94:	9300      	str	r3, [sp, #0]
 8000c96:	007b      	lsls	r3, r7, #1
 8000c98:	4650      	mov	r0, sl
 8000c9a:	0b24      	lsrs	r4, r4, #12
 8000c9c:	0d5b      	lsrs	r3, r3, #21
 8000c9e:	0fff      	lsrs	r7, r7, #31
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d197      	bne.n	8000bd4 <__aeabi_ddiv+0x58>
 8000ca4:	4652      	mov	r2, sl
 8000ca6:	4322      	orrs	r2, r4
 8000ca8:	d055      	beq.n	8000d56 <__aeabi_ddiv+0x1da>
 8000caa:	2c00      	cmp	r4, #0
 8000cac:	d100      	bne.n	8000cb0 <__aeabi_ddiv+0x134>
 8000cae:	e1ca      	b.n	8001046 <__aeabi_ddiv+0x4ca>
 8000cb0:	0020      	movs	r0, r4
 8000cb2:	f001 f9f3 	bl	800209c <__clzsi2>
 8000cb6:	0002      	movs	r2, r0
 8000cb8:	3a0b      	subs	r2, #11
 8000cba:	231d      	movs	r3, #29
 8000cbc:	0001      	movs	r1, r0
 8000cbe:	1a9b      	subs	r3, r3, r2
 8000cc0:	4652      	mov	r2, sl
 8000cc2:	3908      	subs	r1, #8
 8000cc4:	40da      	lsrs	r2, r3
 8000cc6:	408c      	lsls	r4, r1
 8000cc8:	4314      	orrs	r4, r2
 8000cca:	4652      	mov	r2, sl
 8000ccc:	408a      	lsls	r2, r1
 8000cce:	4b41      	ldr	r3, [pc, #260]	; (8000dd4 <__aeabi_ddiv+0x258>)
 8000cd0:	4458      	add	r0, fp
 8000cd2:	469b      	mov	fp, r3
 8000cd4:	4483      	add	fp, r0
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	e78d      	b.n	8000bf6 <__aeabi_ddiv+0x7a>
 8000cda:	464b      	mov	r3, r9
 8000cdc:	4323      	orrs	r3, r4
 8000cde:	4698      	mov	r8, r3
 8000ce0:	d140      	bne.n	8000d64 <__aeabi_ddiv+0x1e8>
 8000ce2:	2308      	movs	r3, #8
 8000ce4:	4699      	mov	r9, r3
 8000ce6:	3b06      	subs	r3, #6
 8000ce8:	2500      	movs	r5, #0
 8000cea:	4683      	mov	fp, r0
 8000cec:	9300      	str	r3, [sp, #0]
 8000cee:	e769      	b.n	8000bc4 <__aeabi_ddiv+0x48>
 8000cf0:	46b2      	mov	sl, r6
 8000cf2:	9b00      	ldr	r3, [sp, #0]
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d0a9      	beq.n	8000c4c <__aeabi_ddiv+0xd0>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d100      	bne.n	8000cfe <__aeabi_ddiv+0x182>
 8000cfc:	e211      	b.n	8001122 <__aeabi_ddiv+0x5a6>
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d093      	beq.n	8000c2a <__aeabi_ddiv+0xae>
 8000d02:	4a35      	ldr	r2, [pc, #212]	; (8000dd8 <__aeabi_ddiv+0x25c>)
 8000d04:	445a      	add	r2, fp
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	dc00      	bgt.n	8000d0c <__aeabi_ddiv+0x190>
 8000d0a:	e13c      	b.n	8000f86 <__aeabi_ddiv+0x40a>
 8000d0c:	076b      	lsls	r3, r5, #29
 8000d0e:	d000      	beq.n	8000d12 <__aeabi_ddiv+0x196>
 8000d10:	e1a7      	b.n	8001062 <__aeabi_ddiv+0x4e6>
 8000d12:	08ed      	lsrs	r5, r5, #3
 8000d14:	4643      	mov	r3, r8
 8000d16:	01db      	lsls	r3, r3, #7
 8000d18:	d506      	bpl.n	8000d28 <__aeabi_ddiv+0x1ac>
 8000d1a:	4642      	mov	r2, r8
 8000d1c:	4b2f      	ldr	r3, [pc, #188]	; (8000ddc <__aeabi_ddiv+0x260>)
 8000d1e:	401a      	ands	r2, r3
 8000d20:	4690      	mov	r8, r2
 8000d22:	2280      	movs	r2, #128	; 0x80
 8000d24:	00d2      	lsls	r2, r2, #3
 8000d26:	445a      	add	r2, fp
 8000d28:	4b2d      	ldr	r3, [pc, #180]	; (8000de0 <__aeabi_ddiv+0x264>)
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	dc8e      	bgt.n	8000c4c <__aeabi_ddiv+0xd0>
 8000d2e:	4643      	mov	r3, r8
 8000d30:	0552      	lsls	r2, r2, #21
 8000d32:	0758      	lsls	r0, r3, #29
 8000d34:	025c      	lsls	r4, r3, #9
 8000d36:	4305      	orrs	r5, r0
 8000d38:	0b24      	lsrs	r4, r4, #12
 8000d3a:	0d53      	lsrs	r3, r2, #21
 8000d3c:	e778      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 8000d3e:	46ba      	mov	sl, r7
 8000d40:	46a0      	mov	r8, r4
 8000d42:	0015      	movs	r5, r2
 8000d44:	9000      	str	r0, [sp, #0]
 8000d46:	e7d4      	b.n	8000cf2 <__aeabi_ddiv+0x176>
 8000d48:	464a      	mov	r2, r9
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	431a      	orrs	r2, r3
 8000d4e:	4691      	mov	r9, r2
 8000d50:	2003      	movs	r0, #3
 8000d52:	4652      	mov	r2, sl
 8000d54:	e74f      	b.n	8000bf6 <__aeabi_ddiv+0x7a>
 8000d56:	4649      	mov	r1, r9
 8000d58:	2301      	movs	r3, #1
 8000d5a:	4319      	orrs	r1, r3
 8000d5c:	4689      	mov	r9, r1
 8000d5e:	2400      	movs	r4, #0
 8000d60:	2001      	movs	r0, #1
 8000d62:	e748      	b.n	8000bf6 <__aeabi_ddiv+0x7a>
 8000d64:	230c      	movs	r3, #12
 8000d66:	4699      	mov	r9, r3
 8000d68:	3b09      	subs	r3, #9
 8000d6a:	46a0      	mov	r8, r4
 8000d6c:	4683      	mov	fp, r0
 8000d6e:	9300      	str	r3, [sp, #0]
 8000d70:	e728      	b.n	8000bc4 <__aeabi_ddiv+0x48>
 8000d72:	2304      	movs	r3, #4
 8000d74:	4699      	mov	r9, r3
 8000d76:	2300      	movs	r3, #0
 8000d78:	469b      	mov	fp, r3
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	2500      	movs	r5, #0
 8000d7e:	9300      	str	r3, [sp, #0]
 8000d80:	e720      	b.n	8000bc4 <__aeabi_ddiv+0x48>
 8000d82:	2300      	movs	r3, #0
 8000d84:	2480      	movs	r4, #128	; 0x80
 8000d86:	469a      	mov	sl, r3
 8000d88:	2500      	movs	r5, #0
 8000d8a:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <__aeabi_ddiv+0x244>)
 8000d8c:	0324      	lsls	r4, r4, #12
 8000d8e:	e74f      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 8000d90:	2380      	movs	r3, #128	; 0x80
 8000d92:	4641      	mov	r1, r8
 8000d94:	031b      	lsls	r3, r3, #12
 8000d96:	4219      	tst	r1, r3
 8000d98:	d008      	beq.n	8000dac <__aeabi_ddiv+0x230>
 8000d9a:	421c      	tst	r4, r3
 8000d9c:	d106      	bne.n	8000dac <__aeabi_ddiv+0x230>
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	0324      	lsls	r4, r4, #12
 8000da2:	46ba      	mov	sl, r7
 8000da4:	0015      	movs	r5, r2
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <__aeabi_ddiv+0x244>)
 8000da8:	0b24      	lsrs	r4, r4, #12
 8000daa:	e741      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 8000dac:	2480      	movs	r4, #128	; 0x80
 8000dae:	4643      	mov	r3, r8
 8000db0:	0324      	lsls	r4, r4, #12
 8000db2:	431c      	orrs	r4, r3
 8000db4:	0324      	lsls	r4, r4, #12
 8000db6:	46b2      	mov	sl, r6
 8000db8:	4b01      	ldr	r3, [pc, #4]	; (8000dc0 <__aeabi_ddiv+0x244>)
 8000dba:	0b24      	lsrs	r4, r4, #12
 8000dbc:	e738      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	000007ff 	.word	0x000007ff
 8000dc4:	fffffc01 	.word	0xfffffc01
 8000dc8:	0800e44c 	.word	0x0800e44c
 8000dcc:	fffff801 	.word	0xfffff801
 8000dd0:	fffffc0d 	.word	0xfffffc0d
 8000dd4:	000003f3 	.word	0x000003f3
 8000dd8:	000003ff 	.word	0x000003ff
 8000ddc:	feffffff 	.word	0xfeffffff
 8000de0:	000007fe 	.word	0x000007fe
 8000de4:	4544      	cmp	r4, r8
 8000de6:	d200      	bcs.n	8000dea <__aeabi_ddiv+0x26e>
 8000de8:	e116      	b.n	8001018 <__aeabi_ddiv+0x49c>
 8000dea:	d100      	bne.n	8000dee <__aeabi_ddiv+0x272>
 8000dec:	e111      	b.n	8001012 <__aeabi_ddiv+0x496>
 8000dee:	2301      	movs	r3, #1
 8000df0:	425b      	negs	r3, r3
 8000df2:	469c      	mov	ip, r3
 8000df4:	002e      	movs	r6, r5
 8000df6:	4640      	mov	r0, r8
 8000df8:	2500      	movs	r5, #0
 8000dfa:	44e3      	add	fp, ip
 8000dfc:	0223      	lsls	r3, r4, #8
 8000dfe:	0e14      	lsrs	r4, r2, #24
 8000e00:	431c      	orrs	r4, r3
 8000e02:	0c1b      	lsrs	r3, r3, #16
 8000e04:	4699      	mov	r9, r3
 8000e06:	0423      	lsls	r3, r4, #16
 8000e08:	0c1f      	lsrs	r7, r3, #16
 8000e0a:	0212      	lsls	r2, r2, #8
 8000e0c:	4649      	mov	r1, r9
 8000e0e:	9200      	str	r2, [sp, #0]
 8000e10:	9701      	str	r7, [sp, #4]
 8000e12:	f7ff f9fd 	bl	8000210 <__aeabi_uidivmod>
 8000e16:	0002      	movs	r2, r0
 8000e18:	437a      	muls	r2, r7
 8000e1a:	040b      	lsls	r3, r1, #16
 8000e1c:	0c31      	lsrs	r1, r6, #16
 8000e1e:	4680      	mov	r8, r0
 8000e20:	4319      	orrs	r1, r3
 8000e22:	428a      	cmp	r2, r1
 8000e24:	d90b      	bls.n	8000e3e <__aeabi_ddiv+0x2c2>
 8000e26:	2301      	movs	r3, #1
 8000e28:	425b      	negs	r3, r3
 8000e2a:	469c      	mov	ip, r3
 8000e2c:	1909      	adds	r1, r1, r4
 8000e2e:	44e0      	add	r8, ip
 8000e30:	428c      	cmp	r4, r1
 8000e32:	d804      	bhi.n	8000e3e <__aeabi_ddiv+0x2c2>
 8000e34:	428a      	cmp	r2, r1
 8000e36:	d902      	bls.n	8000e3e <__aeabi_ddiv+0x2c2>
 8000e38:	1e83      	subs	r3, r0, #2
 8000e3a:	4698      	mov	r8, r3
 8000e3c:	1909      	adds	r1, r1, r4
 8000e3e:	1a88      	subs	r0, r1, r2
 8000e40:	4649      	mov	r1, r9
 8000e42:	f7ff f9e5 	bl	8000210 <__aeabi_uidivmod>
 8000e46:	0409      	lsls	r1, r1, #16
 8000e48:	468c      	mov	ip, r1
 8000e4a:	0431      	lsls	r1, r6, #16
 8000e4c:	4666      	mov	r6, ip
 8000e4e:	9a01      	ldr	r2, [sp, #4]
 8000e50:	0c09      	lsrs	r1, r1, #16
 8000e52:	4342      	muls	r2, r0
 8000e54:	0003      	movs	r3, r0
 8000e56:	4331      	orrs	r1, r6
 8000e58:	428a      	cmp	r2, r1
 8000e5a:	d904      	bls.n	8000e66 <__aeabi_ddiv+0x2ea>
 8000e5c:	1909      	adds	r1, r1, r4
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	428c      	cmp	r4, r1
 8000e62:	d800      	bhi.n	8000e66 <__aeabi_ddiv+0x2ea>
 8000e64:	e111      	b.n	800108a <__aeabi_ddiv+0x50e>
 8000e66:	1a89      	subs	r1, r1, r2
 8000e68:	4642      	mov	r2, r8
 8000e6a:	9e00      	ldr	r6, [sp, #0]
 8000e6c:	0412      	lsls	r2, r2, #16
 8000e6e:	431a      	orrs	r2, r3
 8000e70:	0c33      	lsrs	r3, r6, #16
 8000e72:	001f      	movs	r7, r3
 8000e74:	0c10      	lsrs	r0, r2, #16
 8000e76:	4690      	mov	r8, r2
 8000e78:	9302      	str	r3, [sp, #8]
 8000e7a:	0413      	lsls	r3, r2, #16
 8000e7c:	0432      	lsls	r2, r6, #16
 8000e7e:	0c16      	lsrs	r6, r2, #16
 8000e80:	0032      	movs	r2, r6
 8000e82:	0c1b      	lsrs	r3, r3, #16
 8000e84:	435a      	muls	r2, r3
 8000e86:	9603      	str	r6, [sp, #12]
 8000e88:	437b      	muls	r3, r7
 8000e8a:	4346      	muls	r6, r0
 8000e8c:	4378      	muls	r0, r7
 8000e8e:	0c17      	lsrs	r7, r2, #16
 8000e90:	46bc      	mov	ip, r7
 8000e92:	199b      	adds	r3, r3, r6
 8000e94:	4463      	add	r3, ip
 8000e96:	429e      	cmp	r6, r3
 8000e98:	d903      	bls.n	8000ea2 <__aeabi_ddiv+0x326>
 8000e9a:	2680      	movs	r6, #128	; 0x80
 8000e9c:	0276      	lsls	r6, r6, #9
 8000e9e:	46b4      	mov	ip, r6
 8000ea0:	4460      	add	r0, ip
 8000ea2:	0c1e      	lsrs	r6, r3, #16
 8000ea4:	1830      	adds	r0, r6, r0
 8000ea6:	0416      	lsls	r6, r2, #16
 8000ea8:	041b      	lsls	r3, r3, #16
 8000eaa:	0c36      	lsrs	r6, r6, #16
 8000eac:	199e      	adds	r6, r3, r6
 8000eae:	4281      	cmp	r1, r0
 8000eb0:	d200      	bcs.n	8000eb4 <__aeabi_ddiv+0x338>
 8000eb2:	e09c      	b.n	8000fee <__aeabi_ddiv+0x472>
 8000eb4:	d100      	bne.n	8000eb8 <__aeabi_ddiv+0x33c>
 8000eb6:	e097      	b.n	8000fe8 <__aeabi_ddiv+0x46c>
 8000eb8:	1bae      	subs	r6, r5, r6
 8000eba:	1a09      	subs	r1, r1, r0
 8000ebc:	42b5      	cmp	r5, r6
 8000ebe:	4180      	sbcs	r0, r0
 8000ec0:	4240      	negs	r0, r0
 8000ec2:	1a08      	subs	r0, r1, r0
 8000ec4:	4284      	cmp	r4, r0
 8000ec6:	d100      	bne.n	8000eca <__aeabi_ddiv+0x34e>
 8000ec8:	e111      	b.n	80010ee <__aeabi_ddiv+0x572>
 8000eca:	4649      	mov	r1, r9
 8000ecc:	f7ff f9a0 	bl	8000210 <__aeabi_uidivmod>
 8000ed0:	9a01      	ldr	r2, [sp, #4]
 8000ed2:	040b      	lsls	r3, r1, #16
 8000ed4:	4342      	muls	r2, r0
 8000ed6:	0c31      	lsrs	r1, r6, #16
 8000ed8:	0005      	movs	r5, r0
 8000eda:	4319      	orrs	r1, r3
 8000edc:	428a      	cmp	r2, r1
 8000ede:	d907      	bls.n	8000ef0 <__aeabi_ddiv+0x374>
 8000ee0:	1909      	adds	r1, r1, r4
 8000ee2:	3d01      	subs	r5, #1
 8000ee4:	428c      	cmp	r4, r1
 8000ee6:	d803      	bhi.n	8000ef0 <__aeabi_ddiv+0x374>
 8000ee8:	428a      	cmp	r2, r1
 8000eea:	d901      	bls.n	8000ef0 <__aeabi_ddiv+0x374>
 8000eec:	1e85      	subs	r5, r0, #2
 8000eee:	1909      	adds	r1, r1, r4
 8000ef0:	1a88      	subs	r0, r1, r2
 8000ef2:	4649      	mov	r1, r9
 8000ef4:	f7ff f98c 	bl	8000210 <__aeabi_uidivmod>
 8000ef8:	0409      	lsls	r1, r1, #16
 8000efa:	468c      	mov	ip, r1
 8000efc:	0431      	lsls	r1, r6, #16
 8000efe:	4666      	mov	r6, ip
 8000f00:	9a01      	ldr	r2, [sp, #4]
 8000f02:	0c09      	lsrs	r1, r1, #16
 8000f04:	4342      	muls	r2, r0
 8000f06:	0003      	movs	r3, r0
 8000f08:	4331      	orrs	r1, r6
 8000f0a:	428a      	cmp	r2, r1
 8000f0c:	d907      	bls.n	8000f1e <__aeabi_ddiv+0x3a2>
 8000f0e:	1909      	adds	r1, r1, r4
 8000f10:	3b01      	subs	r3, #1
 8000f12:	428c      	cmp	r4, r1
 8000f14:	d803      	bhi.n	8000f1e <__aeabi_ddiv+0x3a2>
 8000f16:	428a      	cmp	r2, r1
 8000f18:	d901      	bls.n	8000f1e <__aeabi_ddiv+0x3a2>
 8000f1a:	1e83      	subs	r3, r0, #2
 8000f1c:	1909      	adds	r1, r1, r4
 8000f1e:	9e03      	ldr	r6, [sp, #12]
 8000f20:	1a89      	subs	r1, r1, r2
 8000f22:	0032      	movs	r2, r6
 8000f24:	042d      	lsls	r5, r5, #16
 8000f26:	431d      	orrs	r5, r3
 8000f28:	9f02      	ldr	r7, [sp, #8]
 8000f2a:	042b      	lsls	r3, r5, #16
 8000f2c:	0c1b      	lsrs	r3, r3, #16
 8000f2e:	435a      	muls	r2, r3
 8000f30:	437b      	muls	r3, r7
 8000f32:	469c      	mov	ip, r3
 8000f34:	0c28      	lsrs	r0, r5, #16
 8000f36:	4346      	muls	r6, r0
 8000f38:	0c13      	lsrs	r3, r2, #16
 8000f3a:	44b4      	add	ip, r6
 8000f3c:	4463      	add	r3, ip
 8000f3e:	4378      	muls	r0, r7
 8000f40:	429e      	cmp	r6, r3
 8000f42:	d903      	bls.n	8000f4c <__aeabi_ddiv+0x3d0>
 8000f44:	2680      	movs	r6, #128	; 0x80
 8000f46:	0276      	lsls	r6, r6, #9
 8000f48:	46b4      	mov	ip, r6
 8000f4a:	4460      	add	r0, ip
 8000f4c:	0c1e      	lsrs	r6, r3, #16
 8000f4e:	0412      	lsls	r2, r2, #16
 8000f50:	041b      	lsls	r3, r3, #16
 8000f52:	0c12      	lsrs	r2, r2, #16
 8000f54:	1830      	adds	r0, r6, r0
 8000f56:	189b      	adds	r3, r3, r2
 8000f58:	4281      	cmp	r1, r0
 8000f5a:	d306      	bcc.n	8000f6a <__aeabi_ddiv+0x3ee>
 8000f5c:	d002      	beq.n	8000f64 <__aeabi_ddiv+0x3e8>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	431d      	orrs	r5, r3
 8000f62:	e6ce      	b.n	8000d02 <__aeabi_ddiv+0x186>
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d100      	bne.n	8000f6a <__aeabi_ddiv+0x3ee>
 8000f68:	e6cb      	b.n	8000d02 <__aeabi_ddiv+0x186>
 8000f6a:	1861      	adds	r1, r4, r1
 8000f6c:	1e6e      	subs	r6, r5, #1
 8000f6e:	42a1      	cmp	r1, r4
 8000f70:	d200      	bcs.n	8000f74 <__aeabi_ddiv+0x3f8>
 8000f72:	e0a4      	b.n	80010be <__aeabi_ddiv+0x542>
 8000f74:	4281      	cmp	r1, r0
 8000f76:	d200      	bcs.n	8000f7a <__aeabi_ddiv+0x3fe>
 8000f78:	e0c9      	b.n	800110e <__aeabi_ddiv+0x592>
 8000f7a:	d100      	bne.n	8000f7e <__aeabi_ddiv+0x402>
 8000f7c:	e0d9      	b.n	8001132 <__aeabi_ddiv+0x5b6>
 8000f7e:	0035      	movs	r5, r6
 8000f80:	e7ed      	b.n	8000f5e <__aeabi_ddiv+0x3e2>
 8000f82:	2501      	movs	r5, #1
 8000f84:	426d      	negs	r5, r5
 8000f86:	2101      	movs	r1, #1
 8000f88:	1a89      	subs	r1, r1, r2
 8000f8a:	2938      	cmp	r1, #56	; 0x38
 8000f8c:	dd00      	ble.n	8000f90 <__aeabi_ddiv+0x414>
 8000f8e:	e64c      	b.n	8000c2a <__aeabi_ddiv+0xae>
 8000f90:	291f      	cmp	r1, #31
 8000f92:	dc00      	bgt.n	8000f96 <__aeabi_ddiv+0x41a>
 8000f94:	e07f      	b.n	8001096 <__aeabi_ddiv+0x51a>
 8000f96:	231f      	movs	r3, #31
 8000f98:	425b      	negs	r3, r3
 8000f9a:	1a9a      	subs	r2, r3, r2
 8000f9c:	4643      	mov	r3, r8
 8000f9e:	40d3      	lsrs	r3, r2
 8000fa0:	2920      	cmp	r1, #32
 8000fa2:	d004      	beq.n	8000fae <__aeabi_ddiv+0x432>
 8000fa4:	4644      	mov	r4, r8
 8000fa6:	4a65      	ldr	r2, [pc, #404]	; (800113c <__aeabi_ddiv+0x5c0>)
 8000fa8:	445a      	add	r2, fp
 8000faa:	4094      	lsls	r4, r2
 8000fac:	4325      	orrs	r5, r4
 8000fae:	1e6a      	subs	r2, r5, #1
 8000fb0:	4195      	sbcs	r5, r2
 8000fb2:	2207      	movs	r2, #7
 8000fb4:	432b      	orrs	r3, r5
 8000fb6:	0015      	movs	r5, r2
 8000fb8:	2400      	movs	r4, #0
 8000fba:	401d      	ands	r5, r3
 8000fbc:	421a      	tst	r2, r3
 8000fbe:	d100      	bne.n	8000fc2 <__aeabi_ddiv+0x446>
 8000fc0:	e0a1      	b.n	8001106 <__aeabi_ddiv+0x58a>
 8000fc2:	220f      	movs	r2, #15
 8000fc4:	2400      	movs	r4, #0
 8000fc6:	401a      	ands	r2, r3
 8000fc8:	2a04      	cmp	r2, #4
 8000fca:	d100      	bne.n	8000fce <__aeabi_ddiv+0x452>
 8000fcc:	e098      	b.n	8001100 <__aeabi_ddiv+0x584>
 8000fce:	1d1a      	adds	r2, r3, #4
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	419b      	sbcs	r3, r3
 8000fd4:	425b      	negs	r3, r3
 8000fd6:	18e4      	adds	r4, r4, r3
 8000fd8:	0013      	movs	r3, r2
 8000fda:	0222      	lsls	r2, r4, #8
 8000fdc:	d400      	bmi.n	8000fe0 <__aeabi_ddiv+0x464>
 8000fde:	e08f      	b.n	8001100 <__aeabi_ddiv+0x584>
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	2400      	movs	r4, #0
 8000fe4:	2500      	movs	r5, #0
 8000fe6:	e623      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 8000fe8:	42b5      	cmp	r5, r6
 8000fea:	d300      	bcc.n	8000fee <__aeabi_ddiv+0x472>
 8000fec:	e764      	b.n	8000eb8 <__aeabi_ddiv+0x33c>
 8000fee:	4643      	mov	r3, r8
 8000ff0:	1e5a      	subs	r2, r3, #1
 8000ff2:	9b00      	ldr	r3, [sp, #0]
 8000ff4:	469c      	mov	ip, r3
 8000ff6:	4465      	add	r5, ip
 8000ff8:	001f      	movs	r7, r3
 8000ffa:	429d      	cmp	r5, r3
 8000ffc:	419b      	sbcs	r3, r3
 8000ffe:	425b      	negs	r3, r3
 8001000:	191b      	adds	r3, r3, r4
 8001002:	18c9      	adds	r1, r1, r3
 8001004:	428c      	cmp	r4, r1
 8001006:	d23a      	bcs.n	800107e <__aeabi_ddiv+0x502>
 8001008:	4288      	cmp	r0, r1
 800100a:	d863      	bhi.n	80010d4 <__aeabi_ddiv+0x558>
 800100c:	d060      	beq.n	80010d0 <__aeabi_ddiv+0x554>
 800100e:	4690      	mov	r8, r2
 8001010:	e752      	b.n	8000eb8 <__aeabi_ddiv+0x33c>
 8001012:	42aa      	cmp	r2, r5
 8001014:	d900      	bls.n	8001018 <__aeabi_ddiv+0x49c>
 8001016:	e6ea      	b.n	8000dee <__aeabi_ddiv+0x272>
 8001018:	4643      	mov	r3, r8
 800101a:	07de      	lsls	r6, r3, #31
 800101c:	0858      	lsrs	r0, r3, #1
 800101e:	086b      	lsrs	r3, r5, #1
 8001020:	431e      	orrs	r6, r3
 8001022:	07ed      	lsls	r5, r5, #31
 8001024:	e6ea      	b.n	8000dfc <__aeabi_ddiv+0x280>
 8001026:	4648      	mov	r0, r9
 8001028:	f001 f838 	bl	800209c <__clzsi2>
 800102c:	0001      	movs	r1, r0
 800102e:	0002      	movs	r2, r0
 8001030:	3115      	adds	r1, #21
 8001032:	3220      	adds	r2, #32
 8001034:	291c      	cmp	r1, #28
 8001036:	dc00      	bgt.n	800103a <__aeabi_ddiv+0x4be>
 8001038:	e61a      	b.n	8000c70 <__aeabi_ddiv+0xf4>
 800103a:	464b      	mov	r3, r9
 800103c:	3808      	subs	r0, #8
 800103e:	4083      	lsls	r3, r0
 8001040:	2500      	movs	r5, #0
 8001042:	4698      	mov	r8, r3
 8001044:	e620      	b.n	8000c88 <__aeabi_ddiv+0x10c>
 8001046:	f001 f829 	bl	800209c <__clzsi2>
 800104a:	0003      	movs	r3, r0
 800104c:	001a      	movs	r2, r3
 800104e:	3215      	adds	r2, #21
 8001050:	3020      	adds	r0, #32
 8001052:	2a1c      	cmp	r2, #28
 8001054:	dc00      	bgt.n	8001058 <__aeabi_ddiv+0x4dc>
 8001056:	e630      	b.n	8000cba <__aeabi_ddiv+0x13e>
 8001058:	4654      	mov	r4, sl
 800105a:	3b08      	subs	r3, #8
 800105c:	2200      	movs	r2, #0
 800105e:	409c      	lsls	r4, r3
 8001060:	e635      	b.n	8000cce <__aeabi_ddiv+0x152>
 8001062:	230f      	movs	r3, #15
 8001064:	402b      	ands	r3, r5
 8001066:	2b04      	cmp	r3, #4
 8001068:	d100      	bne.n	800106c <__aeabi_ddiv+0x4f0>
 800106a:	e652      	b.n	8000d12 <__aeabi_ddiv+0x196>
 800106c:	2305      	movs	r3, #5
 800106e:	425b      	negs	r3, r3
 8001070:	42ab      	cmp	r3, r5
 8001072:	419b      	sbcs	r3, r3
 8001074:	3504      	adds	r5, #4
 8001076:	425b      	negs	r3, r3
 8001078:	08ed      	lsrs	r5, r5, #3
 800107a:	4498      	add	r8, r3
 800107c:	e64a      	b.n	8000d14 <__aeabi_ddiv+0x198>
 800107e:	428c      	cmp	r4, r1
 8001080:	d1c5      	bne.n	800100e <__aeabi_ddiv+0x492>
 8001082:	42af      	cmp	r7, r5
 8001084:	d9c0      	bls.n	8001008 <__aeabi_ddiv+0x48c>
 8001086:	4690      	mov	r8, r2
 8001088:	e716      	b.n	8000eb8 <__aeabi_ddiv+0x33c>
 800108a:	428a      	cmp	r2, r1
 800108c:	d800      	bhi.n	8001090 <__aeabi_ddiv+0x514>
 800108e:	e6ea      	b.n	8000e66 <__aeabi_ddiv+0x2ea>
 8001090:	1e83      	subs	r3, r0, #2
 8001092:	1909      	adds	r1, r1, r4
 8001094:	e6e7      	b.n	8000e66 <__aeabi_ddiv+0x2ea>
 8001096:	4a2a      	ldr	r2, [pc, #168]	; (8001140 <__aeabi_ddiv+0x5c4>)
 8001098:	0028      	movs	r0, r5
 800109a:	445a      	add	r2, fp
 800109c:	4643      	mov	r3, r8
 800109e:	4095      	lsls	r5, r2
 80010a0:	4093      	lsls	r3, r2
 80010a2:	40c8      	lsrs	r0, r1
 80010a4:	1e6a      	subs	r2, r5, #1
 80010a6:	4195      	sbcs	r5, r2
 80010a8:	4644      	mov	r4, r8
 80010aa:	4303      	orrs	r3, r0
 80010ac:	432b      	orrs	r3, r5
 80010ae:	40cc      	lsrs	r4, r1
 80010b0:	075a      	lsls	r2, r3, #29
 80010b2:	d092      	beq.n	8000fda <__aeabi_ddiv+0x45e>
 80010b4:	220f      	movs	r2, #15
 80010b6:	401a      	ands	r2, r3
 80010b8:	2a04      	cmp	r2, #4
 80010ba:	d188      	bne.n	8000fce <__aeabi_ddiv+0x452>
 80010bc:	e78d      	b.n	8000fda <__aeabi_ddiv+0x45e>
 80010be:	0035      	movs	r5, r6
 80010c0:	4281      	cmp	r1, r0
 80010c2:	d000      	beq.n	80010c6 <__aeabi_ddiv+0x54a>
 80010c4:	e74b      	b.n	8000f5e <__aeabi_ddiv+0x3e2>
 80010c6:	9a00      	ldr	r2, [sp, #0]
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d000      	beq.n	80010ce <__aeabi_ddiv+0x552>
 80010cc:	e747      	b.n	8000f5e <__aeabi_ddiv+0x3e2>
 80010ce:	e618      	b.n	8000d02 <__aeabi_ddiv+0x186>
 80010d0:	42ae      	cmp	r6, r5
 80010d2:	d99c      	bls.n	800100e <__aeabi_ddiv+0x492>
 80010d4:	2302      	movs	r3, #2
 80010d6:	425b      	negs	r3, r3
 80010d8:	469c      	mov	ip, r3
 80010da:	9b00      	ldr	r3, [sp, #0]
 80010dc:	44e0      	add	r8, ip
 80010de:	469c      	mov	ip, r3
 80010e0:	4465      	add	r5, ip
 80010e2:	429d      	cmp	r5, r3
 80010e4:	419b      	sbcs	r3, r3
 80010e6:	425b      	negs	r3, r3
 80010e8:	191b      	adds	r3, r3, r4
 80010ea:	18c9      	adds	r1, r1, r3
 80010ec:	e6e4      	b.n	8000eb8 <__aeabi_ddiv+0x33c>
 80010ee:	4a15      	ldr	r2, [pc, #84]	; (8001144 <__aeabi_ddiv+0x5c8>)
 80010f0:	445a      	add	r2, fp
 80010f2:	2a00      	cmp	r2, #0
 80010f4:	dc00      	bgt.n	80010f8 <__aeabi_ddiv+0x57c>
 80010f6:	e744      	b.n	8000f82 <__aeabi_ddiv+0x406>
 80010f8:	2301      	movs	r3, #1
 80010fa:	2500      	movs	r5, #0
 80010fc:	4498      	add	r8, r3
 80010fe:	e609      	b.n	8000d14 <__aeabi_ddiv+0x198>
 8001100:	0765      	lsls	r5, r4, #29
 8001102:	0264      	lsls	r4, r4, #9
 8001104:	0b24      	lsrs	r4, r4, #12
 8001106:	08db      	lsrs	r3, r3, #3
 8001108:	431d      	orrs	r5, r3
 800110a:	2300      	movs	r3, #0
 800110c:	e590      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 800110e:	9e00      	ldr	r6, [sp, #0]
 8001110:	3d02      	subs	r5, #2
 8001112:	0072      	lsls	r2, r6, #1
 8001114:	42b2      	cmp	r2, r6
 8001116:	41bf      	sbcs	r7, r7
 8001118:	427f      	negs	r7, r7
 800111a:	193c      	adds	r4, r7, r4
 800111c:	1909      	adds	r1, r1, r4
 800111e:	9200      	str	r2, [sp, #0]
 8001120:	e7ce      	b.n	80010c0 <__aeabi_ddiv+0x544>
 8001122:	2480      	movs	r4, #128	; 0x80
 8001124:	4643      	mov	r3, r8
 8001126:	0324      	lsls	r4, r4, #12
 8001128:	431c      	orrs	r4, r3
 800112a:	0324      	lsls	r4, r4, #12
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <__aeabi_ddiv+0x5cc>)
 800112e:	0b24      	lsrs	r4, r4, #12
 8001130:	e57e      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 8001132:	9a00      	ldr	r2, [sp, #0]
 8001134:	429a      	cmp	r2, r3
 8001136:	d3ea      	bcc.n	800110e <__aeabi_ddiv+0x592>
 8001138:	0035      	movs	r5, r6
 800113a:	e7c4      	b.n	80010c6 <__aeabi_ddiv+0x54a>
 800113c:	0000043e 	.word	0x0000043e
 8001140:	0000041e 	.word	0x0000041e
 8001144:	000003ff 	.word	0x000003ff
 8001148:	000007ff 	.word	0x000007ff

0800114c <__eqdf2>:
 800114c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800114e:	464f      	mov	r7, r9
 8001150:	4646      	mov	r6, r8
 8001152:	46d6      	mov	lr, sl
 8001154:	4694      	mov	ip, r2
 8001156:	4691      	mov	r9, r2
 8001158:	031a      	lsls	r2, r3, #12
 800115a:	0b12      	lsrs	r2, r2, #12
 800115c:	4d18      	ldr	r5, [pc, #96]	; (80011c0 <__eqdf2+0x74>)
 800115e:	b5c0      	push	{r6, r7, lr}
 8001160:	004c      	lsls	r4, r1, #1
 8001162:	030f      	lsls	r7, r1, #12
 8001164:	4692      	mov	sl, r2
 8001166:	005a      	lsls	r2, r3, #1
 8001168:	0006      	movs	r6, r0
 800116a:	4680      	mov	r8, r0
 800116c:	0b3f      	lsrs	r7, r7, #12
 800116e:	2001      	movs	r0, #1
 8001170:	0d64      	lsrs	r4, r4, #21
 8001172:	0fc9      	lsrs	r1, r1, #31
 8001174:	0d52      	lsrs	r2, r2, #21
 8001176:	0fdb      	lsrs	r3, r3, #31
 8001178:	42ac      	cmp	r4, r5
 800117a:	d00a      	beq.n	8001192 <__eqdf2+0x46>
 800117c:	42aa      	cmp	r2, r5
 800117e:	d003      	beq.n	8001188 <__eqdf2+0x3c>
 8001180:	4294      	cmp	r4, r2
 8001182:	d101      	bne.n	8001188 <__eqdf2+0x3c>
 8001184:	4557      	cmp	r7, sl
 8001186:	d00d      	beq.n	80011a4 <__eqdf2+0x58>
 8001188:	bce0      	pop	{r5, r6, r7}
 800118a:	46ba      	mov	sl, r7
 800118c:	46b1      	mov	r9, r6
 800118e:	46a8      	mov	r8, r5
 8001190:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001192:	003d      	movs	r5, r7
 8001194:	4335      	orrs	r5, r6
 8001196:	d1f7      	bne.n	8001188 <__eqdf2+0x3c>
 8001198:	42a2      	cmp	r2, r4
 800119a:	d1f5      	bne.n	8001188 <__eqdf2+0x3c>
 800119c:	4652      	mov	r2, sl
 800119e:	4665      	mov	r5, ip
 80011a0:	432a      	orrs	r2, r5
 80011a2:	d1f1      	bne.n	8001188 <__eqdf2+0x3c>
 80011a4:	2001      	movs	r0, #1
 80011a6:	45c8      	cmp	r8, r9
 80011a8:	d1ee      	bne.n	8001188 <__eqdf2+0x3c>
 80011aa:	4299      	cmp	r1, r3
 80011ac:	d006      	beq.n	80011bc <__eqdf2+0x70>
 80011ae:	2c00      	cmp	r4, #0
 80011b0:	d1ea      	bne.n	8001188 <__eqdf2+0x3c>
 80011b2:	433e      	orrs	r6, r7
 80011b4:	0030      	movs	r0, r6
 80011b6:	1e46      	subs	r6, r0, #1
 80011b8:	41b0      	sbcs	r0, r6
 80011ba:	e7e5      	b.n	8001188 <__eqdf2+0x3c>
 80011bc:	2000      	movs	r0, #0
 80011be:	e7e3      	b.n	8001188 <__eqdf2+0x3c>
 80011c0:	000007ff 	.word	0x000007ff

080011c4 <__gedf2>:
 80011c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011c6:	464e      	mov	r6, r9
 80011c8:	4645      	mov	r5, r8
 80011ca:	4657      	mov	r7, sl
 80011cc:	46de      	mov	lr, fp
 80011ce:	0004      	movs	r4, r0
 80011d0:	0018      	movs	r0, r3
 80011d2:	b5e0      	push	{r5, r6, r7, lr}
 80011d4:	0016      	movs	r6, r2
 80011d6:	031b      	lsls	r3, r3, #12
 80011d8:	0b1b      	lsrs	r3, r3, #12
 80011da:	4d32      	ldr	r5, [pc, #200]	; (80012a4 <__gedf2+0xe0>)
 80011dc:	030f      	lsls	r7, r1, #12
 80011de:	004a      	lsls	r2, r1, #1
 80011e0:	4699      	mov	r9, r3
 80011e2:	0043      	lsls	r3, r0, #1
 80011e4:	46a4      	mov	ip, r4
 80011e6:	46b0      	mov	r8, r6
 80011e8:	0b3f      	lsrs	r7, r7, #12
 80011ea:	0d52      	lsrs	r2, r2, #21
 80011ec:	0fc9      	lsrs	r1, r1, #31
 80011ee:	0d5b      	lsrs	r3, r3, #21
 80011f0:	0fc0      	lsrs	r0, r0, #31
 80011f2:	42aa      	cmp	r2, r5
 80011f4:	d029      	beq.n	800124a <__gedf2+0x86>
 80011f6:	42ab      	cmp	r3, r5
 80011f8:	d018      	beq.n	800122c <__gedf2+0x68>
 80011fa:	2a00      	cmp	r2, #0
 80011fc:	d12a      	bne.n	8001254 <__gedf2+0x90>
 80011fe:	433c      	orrs	r4, r7
 8001200:	46a3      	mov	fp, r4
 8001202:	4265      	negs	r5, r4
 8001204:	4165      	adcs	r5, r4
 8001206:	2b00      	cmp	r3, #0
 8001208:	d102      	bne.n	8001210 <__gedf2+0x4c>
 800120a:	464c      	mov	r4, r9
 800120c:	4326      	orrs	r6, r4
 800120e:	d027      	beq.n	8001260 <__gedf2+0x9c>
 8001210:	2d00      	cmp	r5, #0
 8001212:	d115      	bne.n	8001240 <__gedf2+0x7c>
 8001214:	4281      	cmp	r1, r0
 8001216:	d028      	beq.n	800126a <__gedf2+0xa6>
 8001218:	2002      	movs	r0, #2
 800121a:	3901      	subs	r1, #1
 800121c:	4008      	ands	r0, r1
 800121e:	3801      	subs	r0, #1
 8001220:	bcf0      	pop	{r4, r5, r6, r7}
 8001222:	46bb      	mov	fp, r7
 8001224:	46b2      	mov	sl, r6
 8001226:	46a9      	mov	r9, r5
 8001228:	46a0      	mov	r8, r4
 800122a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800122c:	464d      	mov	r5, r9
 800122e:	432e      	orrs	r6, r5
 8001230:	d12f      	bne.n	8001292 <__gedf2+0xce>
 8001232:	2a00      	cmp	r2, #0
 8001234:	d1ee      	bne.n	8001214 <__gedf2+0x50>
 8001236:	433c      	orrs	r4, r7
 8001238:	4265      	negs	r5, r4
 800123a:	4165      	adcs	r5, r4
 800123c:	2d00      	cmp	r5, #0
 800123e:	d0e9      	beq.n	8001214 <__gedf2+0x50>
 8001240:	2800      	cmp	r0, #0
 8001242:	d1ed      	bne.n	8001220 <__gedf2+0x5c>
 8001244:	2001      	movs	r0, #1
 8001246:	4240      	negs	r0, r0
 8001248:	e7ea      	b.n	8001220 <__gedf2+0x5c>
 800124a:	003d      	movs	r5, r7
 800124c:	4325      	orrs	r5, r4
 800124e:	d120      	bne.n	8001292 <__gedf2+0xce>
 8001250:	4293      	cmp	r3, r2
 8001252:	d0eb      	beq.n	800122c <__gedf2+0x68>
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1dd      	bne.n	8001214 <__gedf2+0x50>
 8001258:	464c      	mov	r4, r9
 800125a:	4326      	orrs	r6, r4
 800125c:	d1da      	bne.n	8001214 <__gedf2+0x50>
 800125e:	e7db      	b.n	8001218 <__gedf2+0x54>
 8001260:	465b      	mov	r3, fp
 8001262:	2000      	movs	r0, #0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d0db      	beq.n	8001220 <__gedf2+0x5c>
 8001268:	e7d6      	b.n	8001218 <__gedf2+0x54>
 800126a:	429a      	cmp	r2, r3
 800126c:	dc0a      	bgt.n	8001284 <__gedf2+0xc0>
 800126e:	dbe7      	blt.n	8001240 <__gedf2+0x7c>
 8001270:	454f      	cmp	r7, r9
 8001272:	d8d1      	bhi.n	8001218 <__gedf2+0x54>
 8001274:	d010      	beq.n	8001298 <__gedf2+0xd4>
 8001276:	2000      	movs	r0, #0
 8001278:	454f      	cmp	r7, r9
 800127a:	d2d1      	bcs.n	8001220 <__gedf2+0x5c>
 800127c:	2900      	cmp	r1, #0
 800127e:	d0e1      	beq.n	8001244 <__gedf2+0x80>
 8001280:	0008      	movs	r0, r1
 8001282:	e7cd      	b.n	8001220 <__gedf2+0x5c>
 8001284:	4243      	negs	r3, r0
 8001286:	4158      	adcs	r0, r3
 8001288:	2302      	movs	r3, #2
 800128a:	4240      	negs	r0, r0
 800128c:	4018      	ands	r0, r3
 800128e:	3801      	subs	r0, #1
 8001290:	e7c6      	b.n	8001220 <__gedf2+0x5c>
 8001292:	2002      	movs	r0, #2
 8001294:	4240      	negs	r0, r0
 8001296:	e7c3      	b.n	8001220 <__gedf2+0x5c>
 8001298:	45c4      	cmp	ip, r8
 800129a:	d8bd      	bhi.n	8001218 <__gedf2+0x54>
 800129c:	2000      	movs	r0, #0
 800129e:	45c4      	cmp	ip, r8
 80012a0:	d2be      	bcs.n	8001220 <__gedf2+0x5c>
 80012a2:	e7eb      	b.n	800127c <__gedf2+0xb8>
 80012a4:	000007ff 	.word	0x000007ff

080012a8 <__ledf2>:
 80012a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012aa:	464e      	mov	r6, r9
 80012ac:	4645      	mov	r5, r8
 80012ae:	4657      	mov	r7, sl
 80012b0:	46de      	mov	lr, fp
 80012b2:	0004      	movs	r4, r0
 80012b4:	0018      	movs	r0, r3
 80012b6:	b5e0      	push	{r5, r6, r7, lr}
 80012b8:	0016      	movs	r6, r2
 80012ba:	031b      	lsls	r3, r3, #12
 80012bc:	0b1b      	lsrs	r3, r3, #12
 80012be:	4d31      	ldr	r5, [pc, #196]	; (8001384 <__ledf2+0xdc>)
 80012c0:	030f      	lsls	r7, r1, #12
 80012c2:	004a      	lsls	r2, r1, #1
 80012c4:	4699      	mov	r9, r3
 80012c6:	0043      	lsls	r3, r0, #1
 80012c8:	46a4      	mov	ip, r4
 80012ca:	46b0      	mov	r8, r6
 80012cc:	0b3f      	lsrs	r7, r7, #12
 80012ce:	0d52      	lsrs	r2, r2, #21
 80012d0:	0fc9      	lsrs	r1, r1, #31
 80012d2:	0d5b      	lsrs	r3, r3, #21
 80012d4:	0fc0      	lsrs	r0, r0, #31
 80012d6:	42aa      	cmp	r2, r5
 80012d8:	d011      	beq.n	80012fe <__ledf2+0x56>
 80012da:	42ab      	cmp	r3, r5
 80012dc:	d014      	beq.n	8001308 <__ledf2+0x60>
 80012de:	2a00      	cmp	r2, #0
 80012e0:	d12f      	bne.n	8001342 <__ledf2+0x9a>
 80012e2:	433c      	orrs	r4, r7
 80012e4:	46a3      	mov	fp, r4
 80012e6:	4265      	negs	r5, r4
 80012e8:	4165      	adcs	r5, r4
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d114      	bne.n	8001318 <__ledf2+0x70>
 80012ee:	464c      	mov	r4, r9
 80012f0:	4326      	orrs	r6, r4
 80012f2:	d111      	bne.n	8001318 <__ledf2+0x70>
 80012f4:	465b      	mov	r3, fp
 80012f6:	2000      	movs	r0, #0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d017      	beq.n	800132c <__ledf2+0x84>
 80012fc:	e010      	b.n	8001320 <__ledf2+0x78>
 80012fe:	003d      	movs	r5, r7
 8001300:	4325      	orrs	r5, r4
 8001302:	d112      	bne.n	800132a <__ledf2+0x82>
 8001304:	4293      	cmp	r3, r2
 8001306:	d11c      	bne.n	8001342 <__ledf2+0x9a>
 8001308:	464d      	mov	r5, r9
 800130a:	432e      	orrs	r6, r5
 800130c:	d10d      	bne.n	800132a <__ledf2+0x82>
 800130e:	2a00      	cmp	r2, #0
 8001310:	d104      	bne.n	800131c <__ledf2+0x74>
 8001312:	433c      	orrs	r4, r7
 8001314:	4265      	negs	r5, r4
 8001316:	4165      	adcs	r5, r4
 8001318:	2d00      	cmp	r5, #0
 800131a:	d10d      	bne.n	8001338 <__ledf2+0x90>
 800131c:	4281      	cmp	r1, r0
 800131e:	d016      	beq.n	800134e <__ledf2+0xa6>
 8001320:	2002      	movs	r0, #2
 8001322:	3901      	subs	r1, #1
 8001324:	4008      	ands	r0, r1
 8001326:	3801      	subs	r0, #1
 8001328:	e000      	b.n	800132c <__ledf2+0x84>
 800132a:	2002      	movs	r0, #2
 800132c:	bcf0      	pop	{r4, r5, r6, r7}
 800132e:	46bb      	mov	fp, r7
 8001330:	46b2      	mov	sl, r6
 8001332:	46a9      	mov	r9, r5
 8001334:	46a0      	mov	r8, r4
 8001336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001338:	2800      	cmp	r0, #0
 800133a:	d1f7      	bne.n	800132c <__ledf2+0x84>
 800133c:	2001      	movs	r0, #1
 800133e:	4240      	negs	r0, r0
 8001340:	e7f4      	b.n	800132c <__ledf2+0x84>
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1ea      	bne.n	800131c <__ledf2+0x74>
 8001346:	464c      	mov	r4, r9
 8001348:	4326      	orrs	r6, r4
 800134a:	d1e7      	bne.n	800131c <__ledf2+0x74>
 800134c:	e7e8      	b.n	8001320 <__ledf2+0x78>
 800134e:	429a      	cmp	r2, r3
 8001350:	dd06      	ble.n	8001360 <__ledf2+0xb8>
 8001352:	4243      	negs	r3, r0
 8001354:	4158      	adcs	r0, r3
 8001356:	2302      	movs	r3, #2
 8001358:	4240      	negs	r0, r0
 800135a:	4018      	ands	r0, r3
 800135c:	3801      	subs	r0, #1
 800135e:	e7e5      	b.n	800132c <__ledf2+0x84>
 8001360:	429a      	cmp	r2, r3
 8001362:	dbe9      	blt.n	8001338 <__ledf2+0x90>
 8001364:	454f      	cmp	r7, r9
 8001366:	d8db      	bhi.n	8001320 <__ledf2+0x78>
 8001368:	d006      	beq.n	8001378 <__ledf2+0xd0>
 800136a:	2000      	movs	r0, #0
 800136c:	454f      	cmp	r7, r9
 800136e:	d2dd      	bcs.n	800132c <__ledf2+0x84>
 8001370:	2900      	cmp	r1, #0
 8001372:	d0e3      	beq.n	800133c <__ledf2+0x94>
 8001374:	0008      	movs	r0, r1
 8001376:	e7d9      	b.n	800132c <__ledf2+0x84>
 8001378:	45c4      	cmp	ip, r8
 800137a:	d8d1      	bhi.n	8001320 <__ledf2+0x78>
 800137c:	2000      	movs	r0, #0
 800137e:	45c4      	cmp	ip, r8
 8001380:	d2d4      	bcs.n	800132c <__ledf2+0x84>
 8001382:	e7f5      	b.n	8001370 <__ledf2+0xc8>
 8001384:	000007ff 	.word	0x000007ff

08001388 <__aeabi_dmul>:
 8001388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800138a:	4657      	mov	r7, sl
 800138c:	464e      	mov	r6, r9
 800138e:	4645      	mov	r5, r8
 8001390:	46de      	mov	lr, fp
 8001392:	b5e0      	push	{r5, r6, r7, lr}
 8001394:	4698      	mov	r8, r3
 8001396:	030c      	lsls	r4, r1, #12
 8001398:	004b      	lsls	r3, r1, #1
 800139a:	0006      	movs	r6, r0
 800139c:	4692      	mov	sl, r2
 800139e:	b087      	sub	sp, #28
 80013a0:	0b24      	lsrs	r4, r4, #12
 80013a2:	0d5b      	lsrs	r3, r3, #21
 80013a4:	0fcf      	lsrs	r7, r1, #31
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d06c      	beq.n	8001484 <__aeabi_dmul+0xfc>
 80013aa:	4add      	ldr	r2, [pc, #884]	; (8001720 <__aeabi_dmul+0x398>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d100      	bne.n	80013b2 <__aeabi_dmul+0x2a>
 80013b0:	e086      	b.n	80014c0 <__aeabi_dmul+0x138>
 80013b2:	0f42      	lsrs	r2, r0, #29
 80013b4:	00e4      	lsls	r4, r4, #3
 80013b6:	4314      	orrs	r4, r2
 80013b8:	2280      	movs	r2, #128	; 0x80
 80013ba:	0412      	lsls	r2, r2, #16
 80013bc:	4314      	orrs	r4, r2
 80013be:	4ad9      	ldr	r2, [pc, #868]	; (8001724 <__aeabi_dmul+0x39c>)
 80013c0:	00c5      	lsls	r5, r0, #3
 80013c2:	4694      	mov	ip, r2
 80013c4:	4463      	add	r3, ip
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	2300      	movs	r3, #0
 80013ca:	4699      	mov	r9, r3
 80013cc:	469b      	mov	fp, r3
 80013ce:	4643      	mov	r3, r8
 80013d0:	4642      	mov	r2, r8
 80013d2:	031e      	lsls	r6, r3, #12
 80013d4:	0fd2      	lsrs	r2, r2, #31
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	4650      	mov	r0, sl
 80013da:	4690      	mov	r8, r2
 80013dc:	0b36      	lsrs	r6, r6, #12
 80013de:	0d5b      	lsrs	r3, r3, #21
 80013e0:	d100      	bne.n	80013e4 <__aeabi_dmul+0x5c>
 80013e2:	e078      	b.n	80014d6 <__aeabi_dmul+0x14e>
 80013e4:	4ace      	ldr	r2, [pc, #824]	; (8001720 <__aeabi_dmul+0x398>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d01d      	beq.n	8001426 <__aeabi_dmul+0x9e>
 80013ea:	49ce      	ldr	r1, [pc, #824]	; (8001724 <__aeabi_dmul+0x39c>)
 80013ec:	0f42      	lsrs	r2, r0, #29
 80013ee:	468c      	mov	ip, r1
 80013f0:	9900      	ldr	r1, [sp, #0]
 80013f2:	4463      	add	r3, ip
 80013f4:	00f6      	lsls	r6, r6, #3
 80013f6:	468c      	mov	ip, r1
 80013f8:	4316      	orrs	r6, r2
 80013fa:	2280      	movs	r2, #128	; 0x80
 80013fc:	449c      	add	ip, r3
 80013fe:	0412      	lsls	r2, r2, #16
 8001400:	4663      	mov	r3, ip
 8001402:	4316      	orrs	r6, r2
 8001404:	00c2      	lsls	r2, r0, #3
 8001406:	2000      	movs	r0, #0
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	9900      	ldr	r1, [sp, #0]
 800140c:	4643      	mov	r3, r8
 800140e:	3101      	adds	r1, #1
 8001410:	468c      	mov	ip, r1
 8001412:	4649      	mov	r1, r9
 8001414:	407b      	eors	r3, r7
 8001416:	9301      	str	r3, [sp, #4]
 8001418:	290f      	cmp	r1, #15
 800141a:	d900      	bls.n	800141e <__aeabi_dmul+0x96>
 800141c:	e07e      	b.n	800151c <__aeabi_dmul+0x194>
 800141e:	4bc2      	ldr	r3, [pc, #776]	; (8001728 <__aeabi_dmul+0x3a0>)
 8001420:	0089      	lsls	r1, r1, #2
 8001422:	5859      	ldr	r1, [r3, r1]
 8001424:	468f      	mov	pc, r1
 8001426:	4652      	mov	r2, sl
 8001428:	9b00      	ldr	r3, [sp, #0]
 800142a:	4332      	orrs	r2, r6
 800142c:	d000      	beq.n	8001430 <__aeabi_dmul+0xa8>
 800142e:	e156      	b.n	80016de <__aeabi_dmul+0x356>
 8001430:	49bb      	ldr	r1, [pc, #748]	; (8001720 <__aeabi_dmul+0x398>)
 8001432:	2600      	movs	r6, #0
 8001434:	468c      	mov	ip, r1
 8001436:	4463      	add	r3, ip
 8001438:	4649      	mov	r1, r9
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	2302      	movs	r3, #2
 800143e:	4319      	orrs	r1, r3
 8001440:	4689      	mov	r9, r1
 8001442:	2002      	movs	r0, #2
 8001444:	e7e1      	b.n	800140a <__aeabi_dmul+0x82>
 8001446:	4643      	mov	r3, r8
 8001448:	9301      	str	r3, [sp, #4]
 800144a:	0034      	movs	r4, r6
 800144c:	0015      	movs	r5, r2
 800144e:	4683      	mov	fp, r0
 8001450:	465b      	mov	r3, fp
 8001452:	2b02      	cmp	r3, #2
 8001454:	d05e      	beq.n	8001514 <__aeabi_dmul+0x18c>
 8001456:	2b03      	cmp	r3, #3
 8001458:	d100      	bne.n	800145c <__aeabi_dmul+0xd4>
 800145a:	e1f3      	b.n	8001844 <__aeabi_dmul+0x4bc>
 800145c:	2b01      	cmp	r3, #1
 800145e:	d000      	beq.n	8001462 <__aeabi_dmul+0xda>
 8001460:	e118      	b.n	8001694 <__aeabi_dmul+0x30c>
 8001462:	2200      	movs	r2, #0
 8001464:	2400      	movs	r4, #0
 8001466:	2500      	movs	r5, #0
 8001468:	9b01      	ldr	r3, [sp, #4]
 800146a:	0512      	lsls	r2, r2, #20
 800146c:	4322      	orrs	r2, r4
 800146e:	07db      	lsls	r3, r3, #31
 8001470:	431a      	orrs	r2, r3
 8001472:	0028      	movs	r0, r5
 8001474:	0011      	movs	r1, r2
 8001476:	b007      	add	sp, #28
 8001478:	bcf0      	pop	{r4, r5, r6, r7}
 800147a:	46bb      	mov	fp, r7
 800147c:	46b2      	mov	sl, r6
 800147e:	46a9      	mov	r9, r5
 8001480:	46a0      	mov	r8, r4
 8001482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001484:	0025      	movs	r5, r4
 8001486:	4305      	orrs	r5, r0
 8001488:	d100      	bne.n	800148c <__aeabi_dmul+0x104>
 800148a:	e141      	b.n	8001710 <__aeabi_dmul+0x388>
 800148c:	2c00      	cmp	r4, #0
 800148e:	d100      	bne.n	8001492 <__aeabi_dmul+0x10a>
 8001490:	e1ad      	b.n	80017ee <__aeabi_dmul+0x466>
 8001492:	0020      	movs	r0, r4
 8001494:	f000 fe02 	bl	800209c <__clzsi2>
 8001498:	0001      	movs	r1, r0
 800149a:	0002      	movs	r2, r0
 800149c:	390b      	subs	r1, #11
 800149e:	231d      	movs	r3, #29
 80014a0:	0010      	movs	r0, r2
 80014a2:	1a5b      	subs	r3, r3, r1
 80014a4:	0031      	movs	r1, r6
 80014a6:	0035      	movs	r5, r6
 80014a8:	3808      	subs	r0, #8
 80014aa:	4084      	lsls	r4, r0
 80014ac:	40d9      	lsrs	r1, r3
 80014ae:	4085      	lsls	r5, r0
 80014b0:	430c      	orrs	r4, r1
 80014b2:	489e      	ldr	r0, [pc, #632]	; (800172c <__aeabi_dmul+0x3a4>)
 80014b4:	1a83      	subs	r3, r0, r2
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	2300      	movs	r3, #0
 80014ba:	4699      	mov	r9, r3
 80014bc:	469b      	mov	fp, r3
 80014be:	e786      	b.n	80013ce <__aeabi_dmul+0x46>
 80014c0:	0005      	movs	r5, r0
 80014c2:	4325      	orrs	r5, r4
 80014c4:	d000      	beq.n	80014c8 <__aeabi_dmul+0x140>
 80014c6:	e11c      	b.n	8001702 <__aeabi_dmul+0x37a>
 80014c8:	2208      	movs	r2, #8
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	2302      	movs	r3, #2
 80014ce:	2400      	movs	r4, #0
 80014d0:	4691      	mov	r9, r2
 80014d2:	469b      	mov	fp, r3
 80014d4:	e77b      	b.n	80013ce <__aeabi_dmul+0x46>
 80014d6:	4652      	mov	r2, sl
 80014d8:	4332      	orrs	r2, r6
 80014da:	d100      	bne.n	80014de <__aeabi_dmul+0x156>
 80014dc:	e10a      	b.n	80016f4 <__aeabi_dmul+0x36c>
 80014de:	2e00      	cmp	r6, #0
 80014e0:	d100      	bne.n	80014e4 <__aeabi_dmul+0x15c>
 80014e2:	e176      	b.n	80017d2 <__aeabi_dmul+0x44a>
 80014e4:	0030      	movs	r0, r6
 80014e6:	f000 fdd9 	bl	800209c <__clzsi2>
 80014ea:	0002      	movs	r2, r0
 80014ec:	3a0b      	subs	r2, #11
 80014ee:	231d      	movs	r3, #29
 80014f0:	0001      	movs	r1, r0
 80014f2:	1a9b      	subs	r3, r3, r2
 80014f4:	4652      	mov	r2, sl
 80014f6:	3908      	subs	r1, #8
 80014f8:	40da      	lsrs	r2, r3
 80014fa:	408e      	lsls	r6, r1
 80014fc:	4316      	orrs	r6, r2
 80014fe:	4652      	mov	r2, sl
 8001500:	408a      	lsls	r2, r1
 8001502:	9b00      	ldr	r3, [sp, #0]
 8001504:	4989      	ldr	r1, [pc, #548]	; (800172c <__aeabi_dmul+0x3a4>)
 8001506:	1a18      	subs	r0, r3, r0
 8001508:	0003      	movs	r3, r0
 800150a:	468c      	mov	ip, r1
 800150c:	4463      	add	r3, ip
 800150e:	2000      	movs	r0, #0
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	e77a      	b.n	800140a <__aeabi_dmul+0x82>
 8001514:	2400      	movs	r4, #0
 8001516:	2500      	movs	r5, #0
 8001518:	4a81      	ldr	r2, [pc, #516]	; (8001720 <__aeabi_dmul+0x398>)
 800151a:	e7a5      	b.n	8001468 <__aeabi_dmul+0xe0>
 800151c:	0c2f      	lsrs	r7, r5, #16
 800151e:	042d      	lsls	r5, r5, #16
 8001520:	0c2d      	lsrs	r5, r5, #16
 8001522:	002b      	movs	r3, r5
 8001524:	0c11      	lsrs	r1, r2, #16
 8001526:	0412      	lsls	r2, r2, #16
 8001528:	0c12      	lsrs	r2, r2, #16
 800152a:	4353      	muls	r3, r2
 800152c:	4698      	mov	r8, r3
 800152e:	0013      	movs	r3, r2
 8001530:	0028      	movs	r0, r5
 8001532:	437b      	muls	r3, r7
 8001534:	4699      	mov	r9, r3
 8001536:	4348      	muls	r0, r1
 8001538:	4448      	add	r0, r9
 800153a:	4683      	mov	fp, r0
 800153c:	4640      	mov	r0, r8
 800153e:	000b      	movs	r3, r1
 8001540:	0c00      	lsrs	r0, r0, #16
 8001542:	4682      	mov	sl, r0
 8001544:	4658      	mov	r0, fp
 8001546:	437b      	muls	r3, r7
 8001548:	4450      	add	r0, sl
 800154a:	9302      	str	r3, [sp, #8]
 800154c:	4581      	cmp	r9, r0
 800154e:	d906      	bls.n	800155e <__aeabi_dmul+0x1d6>
 8001550:	469a      	mov	sl, r3
 8001552:	2380      	movs	r3, #128	; 0x80
 8001554:	025b      	lsls	r3, r3, #9
 8001556:	4699      	mov	r9, r3
 8001558:	44ca      	add	sl, r9
 800155a:	4653      	mov	r3, sl
 800155c:	9302      	str	r3, [sp, #8]
 800155e:	0c03      	lsrs	r3, r0, #16
 8001560:	469b      	mov	fp, r3
 8001562:	4643      	mov	r3, r8
 8001564:	041b      	lsls	r3, r3, #16
 8001566:	0400      	lsls	r0, r0, #16
 8001568:	0c1b      	lsrs	r3, r3, #16
 800156a:	4698      	mov	r8, r3
 800156c:	0003      	movs	r3, r0
 800156e:	4443      	add	r3, r8
 8001570:	9304      	str	r3, [sp, #16]
 8001572:	0c33      	lsrs	r3, r6, #16
 8001574:	4699      	mov	r9, r3
 8001576:	002b      	movs	r3, r5
 8001578:	0436      	lsls	r6, r6, #16
 800157a:	0c36      	lsrs	r6, r6, #16
 800157c:	4373      	muls	r3, r6
 800157e:	4698      	mov	r8, r3
 8001580:	0033      	movs	r3, r6
 8001582:	437b      	muls	r3, r7
 8001584:	469a      	mov	sl, r3
 8001586:	464b      	mov	r3, r9
 8001588:	435d      	muls	r5, r3
 800158a:	435f      	muls	r7, r3
 800158c:	4643      	mov	r3, r8
 800158e:	4455      	add	r5, sl
 8001590:	0c18      	lsrs	r0, r3, #16
 8001592:	1940      	adds	r0, r0, r5
 8001594:	4582      	cmp	sl, r0
 8001596:	d903      	bls.n	80015a0 <__aeabi_dmul+0x218>
 8001598:	2380      	movs	r3, #128	; 0x80
 800159a:	025b      	lsls	r3, r3, #9
 800159c:	469a      	mov	sl, r3
 800159e:	4457      	add	r7, sl
 80015a0:	0c05      	lsrs	r5, r0, #16
 80015a2:	19eb      	adds	r3, r5, r7
 80015a4:	9305      	str	r3, [sp, #20]
 80015a6:	4643      	mov	r3, r8
 80015a8:	041d      	lsls	r5, r3, #16
 80015aa:	0c2d      	lsrs	r5, r5, #16
 80015ac:	0400      	lsls	r0, r0, #16
 80015ae:	1940      	adds	r0, r0, r5
 80015b0:	0c25      	lsrs	r5, r4, #16
 80015b2:	0424      	lsls	r4, r4, #16
 80015b4:	0c24      	lsrs	r4, r4, #16
 80015b6:	0027      	movs	r7, r4
 80015b8:	4357      	muls	r7, r2
 80015ba:	436a      	muls	r2, r5
 80015bc:	4690      	mov	r8, r2
 80015be:	002a      	movs	r2, r5
 80015c0:	0c3b      	lsrs	r3, r7, #16
 80015c2:	469a      	mov	sl, r3
 80015c4:	434a      	muls	r2, r1
 80015c6:	4361      	muls	r1, r4
 80015c8:	4441      	add	r1, r8
 80015ca:	4451      	add	r1, sl
 80015cc:	4483      	add	fp, r0
 80015ce:	4588      	cmp	r8, r1
 80015d0:	d903      	bls.n	80015da <__aeabi_dmul+0x252>
 80015d2:	2380      	movs	r3, #128	; 0x80
 80015d4:	025b      	lsls	r3, r3, #9
 80015d6:	4698      	mov	r8, r3
 80015d8:	4442      	add	r2, r8
 80015da:	043f      	lsls	r7, r7, #16
 80015dc:	0c0b      	lsrs	r3, r1, #16
 80015de:	0c3f      	lsrs	r7, r7, #16
 80015e0:	0409      	lsls	r1, r1, #16
 80015e2:	19c9      	adds	r1, r1, r7
 80015e4:	0027      	movs	r7, r4
 80015e6:	4698      	mov	r8, r3
 80015e8:	464b      	mov	r3, r9
 80015ea:	4377      	muls	r7, r6
 80015ec:	435c      	muls	r4, r3
 80015ee:	436e      	muls	r6, r5
 80015f0:	435d      	muls	r5, r3
 80015f2:	0c3b      	lsrs	r3, r7, #16
 80015f4:	4699      	mov	r9, r3
 80015f6:	19a4      	adds	r4, r4, r6
 80015f8:	444c      	add	r4, r9
 80015fa:	4442      	add	r2, r8
 80015fc:	9503      	str	r5, [sp, #12]
 80015fe:	42a6      	cmp	r6, r4
 8001600:	d904      	bls.n	800160c <__aeabi_dmul+0x284>
 8001602:	2380      	movs	r3, #128	; 0x80
 8001604:	025b      	lsls	r3, r3, #9
 8001606:	4698      	mov	r8, r3
 8001608:	4445      	add	r5, r8
 800160a:	9503      	str	r5, [sp, #12]
 800160c:	9b02      	ldr	r3, [sp, #8]
 800160e:	043f      	lsls	r7, r7, #16
 8001610:	445b      	add	r3, fp
 8001612:	001e      	movs	r6, r3
 8001614:	4283      	cmp	r3, r0
 8001616:	4180      	sbcs	r0, r0
 8001618:	0423      	lsls	r3, r4, #16
 800161a:	4698      	mov	r8, r3
 800161c:	9b05      	ldr	r3, [sp, #20]
 800161e:	0c3f      	lsrs	r7, r7, #16
 8001620:	4447      	add	r7, r8
 8001622:	4698      	mov	r8, r3
 8001624:	1876      	adds	r6, r6, r1
 8001626:	428e      	cmp	r6, r1
 8001628:	4189      	sbcs	r1, r1
 800162a:	4447      	add	r7, r8
 800162c:	4240      	negs	r0, r0
 800162e:	183d      	adds	r5, r7, r0
 8001630:	46a8      	mov	r8, r5
 8001632:	4693      	mov	fp, r2
 8001634:	4249      	negs	r1, r1
 8001636:	468a      	mov	sl, r1
 8001638:	44c3      	add	fp, r8
 800163a:	429f      	cmp	r7, r3
 800163c:	41bf      	sbcs	r7, r7
 800163e:	4580      	cmp	r8, r0
 8001640:	4180      	sbcs	r0, r0
 8001642:	9b03      	ldr	r3, [sp, #12]
 8001644:	44da      	add	sl, fp
 8001646:	4698      	mov	r8, r3
 8001648:	4653      	mov	r3, sl
 800164a:	4240      	negs	r0, r0
 800164c:	427f      	negs	r7, r7
 800164e:	4307      	orrs	r7, r0
 8001650:	0c24      	lsrs	r4, r4, #16
 8001652:	4593      	cmp	fp, r2
 8001654:	4192      	sbcs	r2, r2
 8001656:	458a      	cmp	sl, r1
 8001658:	4189      	sbcs	r1, r1
 800165a:	193f      	adds	r7, r7, r4
 800165c:	0ddc      	lsrs	r4, r3, #23
 800165e:	9b04      	ldr	r3, [sp, #16]
 8001660:	0275      	lsls	r5, r6, #9
 8001662:	431d      	orrs	r5, r3
 8001664:	1e68      	subs	r0, r5, #1
 8001666:	4185      	sbcs	r5, r0
 8001668:	4653      	mov	r3, sl
 800166a:	4252      	negs	r2, r2
 800166c:	4249      	negs	r1, r1
 800166e:	430a      	orrs	r2, r1
 8001670:	18bf      	adds	r7, r7, r2
 8001672:	4447      	add	r7, r8
 8001674:	0df6      	lsrs	r6, r6, #23
 8001676:	027f      	lsls	r7, r7, #9
 8001678:	4335      	orrs	r5, r6
 800167a:	025a      	lsls	r2, r3, #9
 800167c:	433c      	orrs	r4, r7
 800167e:	4315      	orrs	r5, r2
 8001680:	01fb      	lsls	r3, r7, #7
 8001682:	d400      	bmi.n	8001686 <__aeabi_dmul+0x2fe>
 8001684:	e0c1      	b.n	800180a <__aeabi_dmul+0x482>
 8001686:	2101      	movs	r1, #1
 8001688:	086a      	lsrs	r2, r5, #1
 800168a:	400d      	ands	r5, r1
 800168c:	4315      	orrs	r5, r2
 800168e:	07e2      	lsls	r2, r4, #31
 8001690:	4315      	orrs	r5, r2
 8001692:	0864      	lsrs	r4, r4, #1
 8001694:	4926      	ldr	r1, [pc, #152]	; (8001730 <__aeabi_dmul+0x3a8>)
 8001696:	4461      	add	r1, ip
 8001698:	2900      	cmp	r1, #0
 800169a:	dd56      	ble.n	800174a <__aeabi_dmul+0x3c2>
 800169c:	076b      	lsls	r3, r5, #29
 800169e:	d009      	beq.n	80016b4 <__aeabi_dmul+0x32c>
 80016a0:	220f      	movs	r2, #15
 80016a2:	402a      	ands	r2, r5
 80016a4:	2a04      	cmp	r2, #4
 80016a6:	d005      	beq.n	80016b4 <__aeabi_dmul+0x32c>
 80016a8:	1d2a      	adds	r2, r5, #4
 80016aa:	42aa      	cmp	r2, r5
 80016ac:	41ad      	sbcs	r5, r5
 80016ae:	426d      	negs	r5, r5
 80016b0:	1964      	adds	r4, r4, r5
 80016b2:	0015      	movs	r5, r2
 80016b4:	01e3      	lsls	r3, r4, #7
 80016b6:	d504      	bpl.n	80016c2 <__aeabi_dmul+0x33a>
 80016b8:	2180      	movs	r1, #128	; 0x80
 80016ba:	4a1e      	ldr	r2, [pc, #120]	; (8001734 <__aeabi_dmul+0x3ac>)
 80016bc:	00c9      	lsls	r1, r1, #3
 80016be:	4014      	ands	r4, r2
 80016c0:	4461      	add	r1, ip
 80016c2:	4a1d      	ldr	r2, [pc, #116]	; (8001738 <__aeabi_dmul+0x3b0>)
 80016c4:	4291      	cmp	r1, r2
 80016c6:	dd00      	ble.n	80016ca <__aeabi_dmul+0x342>
 80016c8:	e724      	b.n	8001514 <__aeabi_dmul+0x18c>
 80016ca:	0762      	lsls	r2, r4, #29
 80016cc:	08ed      	lsrs	r5, r5, #3
 80016ce:	0264      	lsls	r4, r4, #9
 80016d0:	0549      	lsls	r1, r1, #21
 80016d2:	4315      	orrs	r5, r2
 80016d4:	0b24      	lsrs	r4, r4, #12
 80016d6:	0d4a      	lsrs	r2, r1, #21
 80016d8:	e6c6      	b.n	8001468 <__aeabi_dmul+0xe0>
 80016da:	9701      	str	r7, [sp, #4]
 80016dc:	e6b8      	b.n	8001450 <__aeabi_dmul+0xc8>
 80016de:	4a10      	ldr	r2, [pc, #64]	; (8001720 <__aeabi_dmul+0x398>)
 80016e0:	2003      	movs	r0, #3
 80016e2:	4694      	mov	ip, r2
 80016e4:	4463      	add	r3, ip
 80016e6:	464a      	mov	r2, r9
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	2303      	movs	r3, #3
 80016ec:	431a      	orrs	r2, r3
 80016ee:	4691      	mov	r9, r2
 80016f0:	4652      	mov	r2, sl
 80016f2:	e68a      	b.n	800140a <__aeabi_dmul+0x82>
 80016f4:	4649      	mov	r1, r9
 80016f6:	2301      	movs	r3, #1
 80016f8:	4319      	orrs	r1, r3
 80016fa:	4689      	mov	r9, r1
 80016fc:	2600      	movs	r6, #0
 80016fe:	2001      	movs	r0, #1
 8001700:	e683      	b.n	800140a <__aeabi_dmul+0x82>
 8001702:	220c      	movs	r2, #12
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	2303      	movs	r3, #3
 8001708:	0005      	movs	r5, r0
 800170a:	4691      	mov	r9, r2
 800170c:	469b      	mov	fp, r3
 800170e:	e65e      	b.n	80013ce <__aeabi_dmul+0x46>
 8001710:	2304      	movs	r3, #4
 8001712:	4699      	mov	r9, r3
 8001714:	2300      	movs	r3, #0
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	3301      	adds	r3, #1
 800171a:	2400      	movs	r4, #0
 800171c:	469b      	mov	fp, r3
 800171e:	e656      	b.n	80013ce <__aeabi_dmul+0x46>
 8001720:	000007ff 	.word	0x000007ff
 8001724:	fffffc01 	.word	0xfffffc01
 8001728:	0800e48c 	.word	0x0800e48c
 800172c:	fffffc0d 	.word	0xfffffc0d
 8001730:	000003ff 	.word	0x000003ff
 8001734:	feffffff 	.word	0xfeffffff
 8001738:	000007fe 	.word	0x000007fe
 800173c:	2300      	movs	r3, #0
 800173e:	2480      	movs	r4, #128	; 0x80
 8001740:	2500      	movs	r5, #0
 8001742:	4a44      	ldr	r2, [pc, #272]	; (8001854 <__aeabi_dmul+0x4cc>)
 8001744:	9301      	str	r3, [sp, #4]
 8001746:	0324      	lsls	r4, r4, #12
 8001748:	e68e      	b.n	8001468 <__aeabi_dmul+0xe0>
 800174a:	2001      	movs	r0, #1
 800174c:	1a40      	subs	r0, r0, r1
 800174e:	2838      	cmp	r0, #56	; 0x38
 8001750:	dd00      	ble.n	8001754 <__aeabi_dmul+0x3cc>
 8001752:	e686      	b.n	8001462 <__aeabi_dmul+0xda>
 8001754:	281f      	cmp	r0, #31
 8001756:	dd5b      	ble.n	8001810 <__aeabi_dmul+0x488>
 8001758:	221f      	movs	r2, #31
 800175a:	0023      	movs	r3, r4
 800175c:	4252      	negs	r2, r2
 800175e:	1a51      	subs	r1, r2, r1
 8001760:	40cb      	lsrs	r3, r1
 8001762:	0019      	movs	r1, r3
 8001764:	2820      	cmp	r0, #32
 8001766:	d003      	beq.n	8001770 <__aeabi_dmul+0x3e8>
 8001768:	4a3b      	ldr	r2, [pc, #236]	; (8001858 <__aeabi_dmul+0x4d0>)
 800176a:	4462      	add	r2, ip
 800176c:	4094      	lsls	r4, r2
 800176e:	4325      	orrs	r5, r4
 8001770:	1e6a      	subs	r2, r5, #1
 8001772:	4195      	sbcs	r5, r2
 8001774:	002a      	movs	r2, r5
 8001776:	430a      	orrs	r2, r1
 8001778:	2107      	movs	r1, #7
 800177a:	000d      	movs	r5, r1
 800177c:	2400      	movs	r4, #0
 800177e:	4015      	ands	r5, r2
 8001780:	4211      	tst	r1, r2
 8001782:	d05b      	beq.n	800183c <__aeabi_dmul+0x4b4>
 8001784:	210f      	movs	r1, #15
 8001786:	2400      	movs	r4, #0
 8001788:	4011      	ands	r1, r2
 800178a:	2904      	cmp	r1, #4
 800178c:	d053      	beq.n	8001836 <__aeabi_dmul+0x4ae>
 800178e:	1d11      	adds	r1, r2, #4
 8001790:	4291      	cmp	r1, r2
 8001792:	4192      	sbcs	r2, r2
 8001794:	4252      	negs	r2, r2
 8001796:	18a4      	adds	r4, r4, r2
 8001798:	000a      	movs	r2, r1
 800179a:	0223      	lsls	r3, r4, #8
 800179c:	d54b      	bpl.n	8001836 <__aeabi_dmul+0x4ae>
 800179e:	2201      	movs	r2, #1
 80017a0:	2400      	movs	r4, #0
 80017a2:	2500      	movs	r5, #0
 80017a4:	e660      	b.n	8001468 <__aeabi_dmul+0xe0>
 80017a6:	2380      	movs	r3, #128	; 0x80
 80017a8:	031b      	lsls	r3, r3, #12
 80017aa:	421c      	tst	r4, r3
 80017ac:	d009      	beq.n	80017c2 <__aeabi_dmul+0x43a>
 80017ae:	421e      	tst	r6, r3
 80017b0:	d107      	bne.n	80017c2 <__aeabi_dmul+0x43a>
 80017b2:	4333      	orrs	r3, r6
 80017b4:	031c      	lsls	r4, r3, #12
 80017b6:	4643      	mov	r3, r8
 80017b8:	0015      	movs	r5, r2
 80017ba:	0b24      	lsrs	r4, r4, #12
 80017bc:	4a25      	ldr	r2, [pc, #148]	; (8001854 <__aeabi_dmul+0x4cc>)
 80017be:	9301      	str	r3, [sp, #4]
 80017c0:	e652      	b.n	8001468 <__aeabi_dmul+0xe0>
 80017c2:	2280      	movs	r2, #128	; 0x80
 80017c4:	0312      	lsls	r2, r2, #12
 80017c6:	4314      	orrs	r4, r2
 80017c8:	0324      	lsls	r4, r4, #12
 80017ca:	4a22      	ldr	r2, [pc, #136]	; (8001854 <__aeabi_dmul+0x4cc>)
 80017cc:	0b24      	lsrs	r4, r4, #12
 80017ce:	9701      	str	r7, [sp, #4]
 80017d0:	e64a      	b.n	8001468 <__aeabi_dmul+0xe0>
 80017d2:	f000 fc63 	bl	800209c <__clzsi2>
 80017d6:	0003      	movs	r3, r0
 80017d8:	001a      	movs	r2, r3
 80017da:	3215      	adds	r2, #21
 80017dc:	3020      	adds	r0, #32
 80017de:	2a1c      	cmp	r2, #28
 80017e0:	dc00      	bgt.n	80017e4 <__aeabi_dmul+0x45c>
 80017e2:	e684      	b.n	80014ee <__aeabi_dmul+0x166>
 80017e4:	4656      	mov	r6, sl
 80017e6:	3b08      	subs	r3, #8
 80017e8:	2200      	movs	r2, #0
 80017ea:	409e      	lsls	r6, r3
 80017ec:	e689      	b.n	8001502 <__aeabi_dmul+0x17a>
 80017ee:	f000 fc55 	bl	800209c <__clzsi2>
 80017f2:	0001      	movs	r1, r0
 80017f4:	0002      	movs	r2, r0
 80017f6:	3115      	adds	r1, #21
 80017f8:	3220      	adds	r2, #32
 80017fa:	291c      	cmp	r1, #28
 80017fc:	dc00      	bgt.n	8001800 <__aeabi_dmul+0x478>
 80017fe:	e64e      	b.n	800149e <__aeabi_dmul+0x116>
 8001800:	0034      	movs	r4, r6
 8001802:	3808      	subs	r0, #8
 8001804:	2500      	movs	r5, #0
 8001806:	4084      	lsls	r4, r0
 8001808:	e653      	b.n	80014b2 <__aeabi_dmul+0x12a>
 800180a:	9b00      	ldr	r3, [sp, #0]
 800180c:	469c      	mov	ip, r3
 800180e:	e741      	b.n	8001694 <__aeabi_dmul+0x30c>
 8001810:	4912      	ldr	r1, [pc, #72]	; (800185c <__aeabi_dmul+0x4d4>)
 8001812:	0022      	movs	r2, r4
 8001814:	4461      	add	r1, ip
 8001816:	002e      	movs	r6, r5
 8001818:	408d      	lsls	r5, r1
 800181a:	408a      	lsls	r2, r1
 800181c:	40c6      	lsrs	r6, r0
 800181e:	1e69      	subs	r1, r5, #1
 8001820:	418d      	sbcs	r5, r1
 8001822:	4332      	orrs	r2, r6
 8001824:	432a      	orrs	r2, r5
 8001826:	40c4      	lsrs	r4, r0
 8001828:	0753      	lsls	r3, r2, #29
 800182a:	d0b6      	beq.n	800179a <__aeabi_dmul+0x412>
 800182c:	210f      	movs	r1, #15
 800182e:	4011      	ands	r1, r2
 8001830:	2904      	cmp	r1, #4
 8001832:	d1ac      	bne.n	800178e <__aeabi_dmul+0x406>
 8001834:	e7b1      	b.n	800179a <__aeabi_dmul+0x412>
 8001836:	0765      	lsls	r5, r4, #29
 8001838:	0264      	lsls	r4, r4, #9
 800183a:	0b24      	lsrs	r4, r4, #12
 800183c:	08d2      	lsrs	r2, r2, #3
 800183e:	4315      	orrs	r5, r2
 8001840:	2200      	movs	r2, #0
 8001842:	e611      	b.n	8001468 <__aeabi_dmul+0xe0>
 8001844:	2280      	movs	r2, #128	; 0x80
 8001846:	0312      	lsls	r2, r2, #12
 8001848:	4314      	orrs	r4, r2
 800184a:	0324      	lsls	r4, r4, #12
 800184c:	4a01      	ldr	r2, [pc, #4]	; (8001854 <__aeabi_dmul+0x4cc>)
 800184e:	0b24      	lsrs	r4, r4, #12
 8001850:	e60a      	b.n	8001468 <__aeabi_dmul+0xe0>
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	000007ff 	.word	0x000007ff
 8001858:	0000043e 	.word	0x0000043e
 800185c:	0000041e 	.word	0x0000041e

08001860 <__aeabi_dsub>:
 8001860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001862:	4657      	mov	r7, sl
 8001864:	464e      	mov	r6, r9
 8001866:	4645      	mov	r5, r8
 8001868:	46de      	mov	lr, fp
 800186a:	0004      	movs	r4, r0
 800186c:	b5e0      	push	{r5, r6, r7, lr}
 800186e:	001f      	movs	r7, r3
 8001870:	0010      	movs	r0, r2
 8001872:	030b      	lsls	r3, r1, #12
 8001874:	0f62      	lsrs	r2, r4, #29
 8001876:	004e      	lsls	r6, r1, #1
 8001878:	0fcd      	lsrs	r5, r1, #31
 800187a:	0a5b      	lsrs	r3, r3, #9
 800187c:	0339      	lsls	r1, r7, #12
 800187e:	4313      	orrs	r3, r2
 8001880:	0a49      	lsrs	r1, r1, #9
 8001882:	00e2      	lsls	r2, r4, #3
 8001884:	0f44      	lsrs	r4, r0, #29
 8001886:	4321      	orrs	r1, r4
 8001888:	4cc2      	ldr	r4, [pc, #776]	; (8001b94 <__aeabi_dsub+0x334>)
 800188a:	4691      	mov	r9, r2
 800188c:	4692      	mov	sl, r2
 800188e:	00c0      	lsls	r0, r0, #3
 8001890:	007a      	lsls	r2, r7, #1
 8001892:	4680      	mov	r8, r0
 8001894:	0d76      	lsrs	r6, r6, #21
 8001896:	0d52      	lsrs	r2, r2, #21
 8001898:	0fff      	lsrs	r7, r7, #31
 800189a:	42a2      	cmp	r2, r4
 800189c:	d100      	bne.n	80018a0 <__aeabi_dsub+0x40>
 800189e:	e0b4      	b.n	8001a0a <__aeabi_dsub+0x1aa>
 80018a0:	2401      	movs	r4, #1
 80018a2:	4067      	eors	r7, r4
 80018a4:	46bb      	mov	fp, r7
 80018a6:	42bd      	cmp	r5, r7
 80018a8:	d100      	bne.n	80018ac <__aeabi_dsub+0x4c>
 80018aa:	e088      	b.n	80019be <__aeabi_dsub+0x15e>
 80018ac:	1ab4      	subs	r4, r6, r2
 80018ae:	46a4      	mov	ip, r4
 80018b0:	2c00      	cmp	r4, #0
 80018b2:	dc00      	bgt.n	80018b6 <__aeabi_dsub+0x56>
 80018b4:	e0b2      	b.n	8001a1c <__aeabi_dsub+0x1bc>
 80018b6:	2a00      	cmp	r2, #0
 80018b8:	d100      	bne.n	80018bc <__aeabi_dsub+0x5c>
 80018ba:	e0c5      	b.n	8001a48 <__aeabi_dsub+0x1e8>
 80018bc:	4ab5      	ldr	r2, [pc, #724]	; (8001b94 <__aeabi_dsub+0x334>)
 80018be:	4296      	cmp	r6, r2
 80018c0:	d100      	bne.n	80018c4 <__aeabi_dsub+0x64>
 80018c2:	e28b      	b.n	8001ddc <__aeabi_dsub+0x57c>
 80018c4:	2280      	movs	r2, #128	; 0x80
 80018c6:	0412      	lsls	r2, r2, #16
 80018c8:	4311      	orrs	r1, r2
 80018ca:	4662      	mov	r2, ip
 80018cc:	2a38      	cmp	r2, #56	; 0x38
 80018ce:	dd00      	ble.n	80018d2 <__aeabi_dsub+0x72>
 80018d0:	e1a1      	b.n	8001c16 <__aeabi_dsub+0x3b6>
 80018d2:	2a1f      	cmp	r2, #31
 80018d4:	dd00      	ble.n	80018d8 <__aeabi_dsub+0x78>
 80018d6:	e216      	b.n	8001d06 <__aeabi_dsub+0x4a6>
 80018d8:	2720      	movs	r7, #32
 80018da:	000c      	movs	r4, r1
 80018dc:	1abf      	subs	r7, r7, r2
 80018de:	40bc      	lsls	r4, r7
 80018e0:	0002      	movs	r2, r0
 80018e2:	46a0      	mov	r8, r4
 80018e4:	4664      	mov	r4, ip
 80018e6:	40b8      	lsls	r0, r7
 80018e8:	40e2      	lsrs	r2, r4
 80018ea:	4644      	mov	r4, r8
 80018ec:	4314      	orrs	r4, r2
 80018ee:	0002      	movs	r2, r0
 80018f0:	1e50      	subs	r0, r2, #1
 80018f2:	4182      	sbcs	r2, r0
 80018f4:	4660      	mov	r0, ip
 80018f6:	40c1      	lsrs	r1, r0
 80018f8:	4322      	orrs	r2, r4
 80018fa:	1a5b      	subs	r3, r3, r1
 80018fc:	4649      	mov	r1, r9
 80018fe:	1a8c      	subs	r4, r1, r2
 8001900:	45a1      	cmp	r9, r4
 8001902:	4192      	sbcs	r2, r2
 8001904:	4252      	negs	r2, r2
 8001906:	1a9b      	subs	r3, r3, r2
 8001908:	4698      	mov	r8, r3
 800190a:	4643      	mov	r3, r8
 800190c:	021b      	lsls	r3, r3, #8
 800190e:	d400      	bmi.n	8001912 <__aeabi_dsub+0xb2>
 8001910:	e117      	b.n	8001b42 <__aeabi_dsub+0x2e2>
 8001912:	4643      	mov	r3, r8
 8001914:	025b      	lsls	r3, r3, #9
 8001916:	0a5b      	lsrs	r3, r3, #9
 8001918:	4698      	mov	r8, r3
 800191a:	4643      	mov	r3, r8
 800191c:	2b00      	cmp	r3, #0
 800191e:	d100      	bne.n	8001922 <__aeabi_dsub+0xc2>
 8001920:	e16c      	b.n	8001bfc <__aeabi_dsub+0x39c>
 8001922:	4640      	mov	r0, r8
 8001924:	f000 fbba 	bl	800209c <__clzsi2>
 8001928:	0002      	movs	r2, r0
 800192a:	3a08      	subs	r2, #8
 800192c:	2120      	movs	r1, #32
 800192e:	0020      	movs	r0, r4
 8001930:	4643      	mov	r3, r8
 8001932:	1a89      	subs	r1, r1, r2
 8001934:	4093      	lsls	r3, r2
 8001936:	40c8      	lsrs	r0, r1
 8001938:	4094      	lsls	r4, r2
 800193a:	4303      	orrs	r3, r0
 800193c:	4296      	cmp	r6, r2
 800193e:	dd00      	ble.n	8001942 <__aeabi_dsub+0xe2>
 8001940:	e157      	b.n	8001bf2 <__aeabi_dsub+0x392>
 8001942:	1b96      	subs	r6, r2, r6
 8001944:	1c71      	adds	r1, r6, #1
 8001946:	291f      	cmp	r1, #31
 8001948:	dd00      	ble.n	800194c <__aeabi_dsub+0xec>
 800194a:	e1cb      	b.n	8001ce4 <__aeabi_dsub+0x484>
 800194c:	2220      	movs	r2, #32
 800194e:	0018      	movs	r0, r3
 8001950:	0026      	movs	r6, r4
 8001952:	1a52      	subs	r2, r2, r1
 8001954:	4094      	lsls	r4, r2
 8001956:	4090      	lsls	r0, r2
 8001958:	40ce      	lsrs	r6, r1
 800195a:	40cb      	lsrs	r3, r1
 800195c:	1e62      	subs	r2, r4, #1
 800195e:	4194      	sbcs	r4, r2
 8001960:	4330      	orrs	r0, r6
 8001962:	4698      	mov	r8, r3
 8001964:	2600      	movs	r6, #0
 8001966:	4304      	orrs	r4, r0
 8001968:	0763      	lsls	r3, r4, #29
 800196a:	d009      	beq.n	8001980 <__aeabi_dsub+0x120>
 800196c:	230f      	movs	r3, #15
 800196e:	4023      	ands	r3, r4
 8001970:	2b04      	cmp	r3, #4
 8001972:	d005      	beq.n	8001980 <__aeabi_dsub+0x120>
 8001974:	1d23      	adds	r3, r4, #4
 8001976:	42a3      	cmp	r3, r4
 8001978:	41a4      	sbcs	r4, r4
 800197a:	4264      	negs	r4, r4
 800197c:	44a0      	add	r8, r4
 800197e:	001c      	movs	r4, r3
 8001980:	4643      	mov	r3, r8
 8001982:	021b      	lsls	r3, r3, #8
 8001984:	d400      	bmi.n	8001988 <__aeabi_dsub+0x128>
 8001986:	e0df      	b.n	8001b48 <__aeabi_dsub+0x2e8>
 8001988:	4b82      	ldr	r3, [pc, #520]	; (8001b94 <__aeabi_dsub+0x334>)
 800198a:	3601      	adds	r6, #1
 800198c:	429e      	cmp	r6, r3
 800198e:	d100      	bne.n	8001992 <__aeabi_dsub+0x132>
 8001990:	e0fb      	b.n	8001b8a <__aeabi_dsub+0x32a>
 8001992:	4642      	mov	r2, r8
 8001994:	4b80      	ldr	r3, [pc, #512]	; (8001b98 <__aeabi_dsub+0x338>)
 8001996:	08e4      	lsrs	r4, r4, #3
 8001998:	401a      	ands	r2, r3
 800199a:	0013      	movs	r3, r2
 800199c:	0571      	lsls	r1, r6, #21
 800199e:	0752      	lsls	r2, r2, #29
 80019a0:	025b      	lsls	r3, r3, #9
 80019a2:	4322      	orrs	r2, r4
 80019a4:	0b1b      	lsrs	r3, r3, #12
 80019a6:	0d49      	lsrs	r1, r1, #21
 80019a8:	0509      	lsls	r1, r1, #20
 80019aa:	07ed      	lsls	r5, r5, #31
 80019ac:	4319      	orrs	r1, r3
 80019ae:	4329      	orrs	r1, r5
 80019b0:	0010      	movs	r0, r2
 80019b2:	bcf0      	pop	{r4, r5, r6, r7}
 80019b4:	46bb      	mov	fp, r7
 80019b6:	46b2      	mov	sl, r6
 80019b8:	46a9      	mov	r9, r5
 80019ba:	46a0      	mov	r8, r4
 80019bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019be:	1ab4      	subs	r4, r6, r2
 80019c0:	46a4      	mov	ip, r4
 80019c2:	2c00      	cmp	r4, #0
 80019c4:	dd58      	ble.n	8001a78 <__aeabi_dsub+0x218>
 80019c6:	2a00      	cmp	r2, #0
 80019c8:	d100      	bne.n	80019cc <__aeabi_dsub+0x16c>
 80019ca:	e09e      	b.n	8001b0a <__aeabi_dsub+0x2aa>
 80019cc:	4a71      	ldr	r2, [pc, #452]	; (8001b94 <__aeabi_dsub+0x334>)
 80019ce:	4296      	cmp	r6, r2
 80019d0:	d100      	bne.n	80019d4 <__aeabi_dsub+0x174>
 80019d2:	e13b      	b.n	8001c4c <__aeabi_dsub+0x3ec>
 80019d4:	2280      	movs	r2, #128	; 0x80
 80019d6:	0412      	lsls	r2, r2, #16
 80019d8:	4311      	orrs	r1, r2
 80019da:	4662      	mov	r2, ip
 80019dc:	2a38      	cmp	r2, #56	; 0x38
 80019de:	dd00      	ble.n	80019e2 <__aeabi_dsub+0x182>
 80019e0:	e0c1      	b.n	8001b66 <__aeabi_dsub+0x306>
 80019e2:	2a1f      	cmp	r2, #31
 80019e4:	dc00      	bgt.n	80019e8 <__aeabi_dsub+0x188>
 80019e6:	e1bb      	b.n	8001d60 <__aeabi_dsub+0x500>
 80019e8:	000c      	movs	r4, r1
 80019ea:	3a20      	subs	r2, #32
 80019ec:	40d4      	lsrs	r4, r2
 80019ee:	0022      	movs	r2, r4
 80019f0:	4664      	mov	r4, ip
 80019f2:	2c20      	cmp	r4, #32
 80019f4:	d004      	beq.n	8001a00 <__aeabi_dsub+0x1a0>
 80019f6:	2740      	movs	r7, #64	; 0x40
 80019f8:	1b3f      	subs	r7, r7, r4
 80019fa:	40b9      	lsls	r1, r7
 80019fc:	4308      	orrs	r0, r1
 80019fe:	4680      	mov	r8, r0
 8001a00:	4644      	mov	r4, r8
 8001a02:	1e61      	subs	r1, r4, #1
 8001a04:	418c      	sbcs	r4, r1
 8001a06:	4314      	orrs	r4, r2
 8001a08:	e0b1      	b.n	8001b6e <__aeabi_dsub+0x30e>
 8001a0a:	000c      	movs	r4, r1
 8001a0c:	4304      	orrs	r4, r0
 8001a0e:	d02a      	beq.n	8001a66 <__aeabi_dsub+0x206>
 8001a10:	46bb      	mov	fp, r7
 8001a12:	42bd      	cmp	r5, r7
 8001a14:	d02d      	beq.n	8001a72 <__aeabi_dsub+0x212>
 8001a16:	4c61      	ldr	r4, [pc, #388]	; (8001b9c <__aeabi_dsub+0x33c>)
 8001a18:	46a4      	mov	ip, r4
 8001a1a:	44b4      	add	ip, r6
 8001a1c:	4664      	mov	r4, ip
 8001a1e:	2c00      	cmp	r4, #0
 8001a20:	d05c      	beq.n	8001adc <__aeabi_dsub+0x27c>
 8001a22:	1b94      	subs	r4, r2, r6
 8001a24:	46a4      	mov	ip, r4
 8001a26:	2e00      	cmp	r6, #0
 8001a28:	d000      	beq.n	8001a2c <__aeabi_dsub+0x1cc>
 8001a2a:	e115      	b.n	8001c58 <__aeabi_dsub+0x3f8>
 8001a2c:	464d      	mov	r5, r9
 8001a2e:	431d      	orrs	r5, r3
 8001a30:	d100      	bne.n	8001a34 <__aeabi_dsub+0x1d4>
 8001a32:	e1c3      	b.n	8001dbc <__aeabi_dsub+0x55c>
 8001a34:	1e65      	subs	r5, r4, #1
 8001a36:	2c01      	cmp	r4, #1
 8001a38:	d100      	bne.n	8001a3c <__aeabi_dsub+0x1dc>
 8001a3a:	e20c      	b.n	8001e56 <__aeabi_dsub+0x5f6>
 8001a3c:	4e55      	ldr	r6, [pc, #340]	; (8001b94 <__aeabi_dsub+0x334>)
 8001a3e:	42b4      	cmp	r4, r6
 8001a40:	d100      	bne.n	8001a44 <__aeabi_dsub+0x1e4>
 8001a42:	e1f8      	b.n	8001e36 <__aeabi_dsub+0x5d6>
 8001a44:	46ac      	mov	ip, r5
 8001a46:	e10e      	b.n	8001c66 <__aeabi_dsub+0x406>
 8001a48:	000a      	movs	r2, r1
 8001a4a:	4302      	orrs	r2, r0
 8001a4c:	d100      	bne.n	8001a50 <__aeabi_dsub+0x1f0>
 8001a4e:	e136      	b.n	8001cbe <__aeabi_dsub+0x45e>
 8001a50:	0022      	movs	r2, r4
 8001a52:	3a01      	subs	r2, #1
 8001a54:	2c01      	cmp	r4, #1
 8001a56:	d100      	bne.n	8001a5a <__aeabi_dsub+0x1fa>
 8001a58:	e1c6      	b.n	8001de8 <__aeabi_dsub+0x588>
 8001a5a:	4c4e      	ldr	r4, [pc, #312]	; (8001b94 <__aeabi_dsub+0x334>)
 8001a5c:	45a4      	cmp	ip, r4
 8001a5e:	d100      	bne.n	8001a62 <__aeabi_dsub+0x202>
 8001a60:	e0f4      	b.n	8001c4c <__aeabi_dsub+0x3ec>
 8001a62:	4694      	mov	ip, r2
 8001a64:	e731      	b.n	80018ca <__aeabi_dsub+0x6a>
 8001a66:	2401      	movs	r4, #1
 8001a68:	4067      	eors	r7, r4
 8001a6a:	46bb      	mov	fp, r7
 8001a6c:	42bd      	cmp	r5, r7
 8001a6e:	d000      	beq.n	8001a72 <__aeabi_dsub+0x212>
 8001a70:	e71c      	b.n	80018ac <__aeabi_dsub+0x4c>
 8001a72:	4c4a      	ldr	r4, [pc, #296]	; (8001b9c <__aeabi_dsub+0x33c>)
 8001a74:	46a4      	mov	ip, r4
 8001a76:	44b4      	add	ip, r6
 8001a78:	4664      	mov	r4, ip
 8001a7a:	2c00      	cmp	r4, #0
 8001a7c:	d100      	bne.n	8001a80 <__aeabi_dsub+0x220>
 8001a7e:	e0cf      	b.n	8001c20 <__aeabi_dsub+0x3c0>
 8001a80:	1b94      	subs	r4, r2, r6
 8001a82:	46a4      	mov	ip, r4
 8001a84:	2e00      	cmp	r6, #0
 8001a86:	d100      	bne.n	8001a8a <__aeabi_dsub+0x22a>
 8001a88:	e15c      	b.n	8001d44 <__aeabi_dsub+0x4e4>
 8001a8a:	4e42      	ldr	r6, [pc, #264]	; (8001b94 <__aeabi_dsub+0x334>)
 8001a8c:	42b2      	cmp	r2, r6
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_dsub+0x232>
 8001a90:	e1ec      	b.n	8001e6c <__aeabi_dsub+0x60c>
 8001a92:	2680      	movs	r6, #128	; 0x80
 8001a94:	0436      	lsls	r6, r6, #16
 8001a96:	4333      	orrs	r3, r6
 8001a98:	4664      	mov	r4, ip
 8001a9a:	2c38      	cmp	r4, #56	; 0x38
 8001a9c:	dd00      	ble.n	8001aa0 <__aeabi_dsub+0x240>
 8001a9e:	e1b3      	b.n	8001e08 <__aeabi_dsub+0x5a8>
 8001aa0:	2c1f      	cmp	r4, #31
 8001aa2:	dd00      	ble.n	8001aa6 <__aeabi_dsub+0x246>
 8001aa4:	e238      	b.n	8001f18 <__aeabi_dsub+0x6b8>
 8001aa6:	2620      	movs	r6, #32
 8001aa8:	1b36      	subs	r6, r6, r4
 8001aaa:	001c      	movs	r4, r3
 8001aac:	40b4      	lsls	r4, r6
 8001aae:	464f      	mov	r7, r9
 8001ab0:	46a0      	mov	r8, r4
 8001ab2:	4664      	mov	r4, ip
 8001ab4:	40e7      	lsrs	r7, r4
 8001ab6:	4644      	mov	r4, r8
 8001ab8:	433c      	orrs	r4, r7
 8001aba:	464f      	mov	r7, r9
 8001abc:	40b7      	lsls	r7, r6
 8001abe:	003e      	movs	r6, r7
 8001ac0:	1e77      	subs	r7, r6, #1
 8001ac2:	41be      	sbcs	r6, r7
 8001ac4:	4334      	orrs	r4, r6
 8001ac6:	4666      	mov	r6, ip
 8001ac8:	40f3      	lsrs	r3, r6
 8001aca:	18c9      	adds	r1, r1, r3
 8001acc:	1824      	adds	r4, r4, r0
 8001ace:	4284      	cmp	r4, r0
 8001ad0:	419b      	sbcs	r3, r3
 8001ad2:	425b      	negs	r3, r3
 8001ad4:	4698      	mov	r8, r3
 8001ad6:	0016      	movs	r6, r2
 8001ad8:	4488      	add	r8, r1
 8001ada:	e04e      	b.n	8001b7a <__aeabi_dsub+0x31a>
 8001adc:	4a30      	ldr	r2, [pc, #192]	; (8001ba0 <__aeabi_dsub+0x340>)
 8001ade:	1c74      	adds	r4, r6, #1
 8001ae0:	4214      	tst	r4, r2
 8001ae2:	d000      	beq.n	8001ae6 <__aeabi_dsub+0x286>
 8001ae4:	e0d6      	b.n	8001c94 <__aeabi_dsub+0x434>
 8001ae6:	464a      	mov	r2, r9
 8001ae8:	431a      	orrs	r2, r3
 8001aea:	2e00      	cmp	r6, #0
 8001aec:	d000      	beq.n	8001af0 <__aeabi_dsub+0x290>
 8001aee:	e15b      	b.n	8001da8 <__aeabi_dsub+0x548>
 8001af0:	2a00      	cmp	r2, #0
 8001af2:	d100      	bne.n	8001af6 <__aeabi_dsub+0x296>
 8001af4:	e1a5      	b.n	8001e42 <__aeabi_dsub+0x5e2>
 8001af6:	000a      	movs	r2, r1
 8001af8:	4302      	orrs	r2, r0
 8001afa:	d000      	beq.n	8001afe <__aeabi_dsub+0x29e>
 8001afc:	e1bb      	b.n	8001e76 <__aeabi_dsub+0x616>
 8001afe:	464a      	mov	r2, r9
 8001b00:	0759      	lsls	r1, r3, #29
 8001b02:	08d2      	lsrs	r2, r2, #3
 8001b04:	430a      	orrs	r2, r1
 8001b06:	08db      	lsrs	r3, r3, #3
 8001b08:	e027      	b.n	8001b5a <__aeabi_dsub+0x2fa>
 8001b0a:	000a      	movs	r2, r1
 8001b0c:	4302      	orrs	r2, r0
 8001b0e:	d100      	bne.n	8001b12 <__aeabi_dsub+0x2b2>
 8001b10:	e174      	b.n	8001dfc <__aeabi_dsub+0x59c>
 8001b12:	0022      	movs	r2, r4
 8001b14:	3a01      	subs	r2, #1
 8001b16:	2c01      	cmp	r4, #1
 8001b18:	d005      	beq.n	8001b26 <__aeabi_dsub+0x2c6>
 8001b1a:	4c1e      	ldr	r4, [pc, #120]	; (8001b94 <__aeabi_dsub+0x334>)
 8001b1c:	45a4      	cmp	ip, r4
 8001b1e:	d100      	bne.n	8001b22 <__aeabi_dsub+0x2c2>
 8001b20:	e094      	b.n	8001c4c <__aeabi_dsub+0x3ec>
 8001b22:	4694      	mov	ip, r2
 8001b24:	e759      	b.n	80019da <__aeabi_dsub+0x17a>
 8001b26:	4448      	add	r0, r9
 8001b28:	4548      	cmp	r0, r9
 8001b2a:	4192      	sbcs	r2, r2
 8001b2c:	185b      	adds	r3, r3, r1
 8001b2e:	4698      	mov	r8, r3
 8001b30:	0004      	movs	r4, r0
 8001b32:	4252      	negs	r2, r2
 8001b34:	4490      	add	r8, r2
 8001b36:	4643      	mov	r3, r8
 8001b38:	2602      	movs	r6, #2
 8001b3a:	021b      	lsls	r3, r3, #8
 8001b3c:	d500      	bpl.n	8001b40 <__aeabi_dsub+0x2e0>
 8001b3e:	e0c4      	b.n	8001cca <__aeabi_dsub+0x46a>
 8001b40:	3e01      	subs	r6, #1
 8001b42:	0763      	lsls	r3, r4, #29
 8001b44:	d000      	beq.n	8001b48 <__aeabi_dsub+0x2e8>
 8001b46:	e711      	b.n	800196c <__aeabi_dsub+0x10c>
 8001b48:	4643      	mov	r3, r8
 8001b4a:	46b4      	mov	ip, r6
 8001b4c:	0759      	lsls	r1, r3, #29
 8001b4e:	08e2      	lsrs	r2, r4, #3
 8001b50:	430a      	orrs	r2, r1
 8001b52:	08db      	lsrs	r3, r3, #3
 8001b54:	490f      	ldr	r1, [pc, #60]	; (8001b94 <__aeabi_dsub+0x334>)
 8001b56:	458c      	cmp	ip, r1
 8001b58:	d040      	beq.n	8001bdc <__aeabi_dsub+0x37c>
 8001b5a:	4661      	mov	r1, ip
 8001b5c:	031b      	lsls	r3, r3, #12
 8001b5e:	0549      	lsls	r1, r1, #21
 8001b60:	0b1b      	lsrs	r3, r3, #12
 8001b62:	0d49      	lsrs	r1, r1, #21
 8001b64:	e720      	b.n	80019a8 <__aeabi_dsub+0x148>
 8001b66:	4301      	orrs	r1, r0
 8001b68:	000c      	movs	r4, r1
 8001b6a:	1e61      	subs	r1, r4, #1
 8001b6c:	418c      	sbcs	r4, r1
 8001b6e:	444c      	add	r4, r9
 8001b70:	454c      	cmp	r4, r9
 8001b72:	4192      	sbcs	r2, r2
 8001b74:	4252      	negs	r2, r2
 8001b76:	4690      	mov	r8, r2
 8001b78:	4498      	add	r8, r3
 8001b7a:	4643      	mov	r3, r8
 8001b7c:	021b      	lsls	r3, r3, #8
 8001b7e:	d5e0      	bpl.n	8001b42 <__aeabi_dsub+0x2e2>
 8001b80:	4b04      	ldr	r3, [pc, #16]	; (8001b94 <__aeabi_dsub+0x334>)
 8001b82:	3601      	adds	r6, #1
 8001b84:	429e      	cmp	r6, r3
 8001b86:	d000      	beq.n	8001b8a <__aeabi_dsub+0x32a>
 8001b88:	e09f      	b.n	8001cca <__aeabi_dsub+0x46a>
 8001b8a:	0031      	movs	r1, r6
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	2200      	movs	r2, #0
 8001b90:	e70a      	b.n	80019a8 <__aeabi_dsub+0x148>
 8001b92:	46c0      	nop			; (mov r8, r8)
 8001b94:	000007ff 	.word	0x000007ff
 8001b98:	ff7fffff 	.word	0xff7fffff
 8001b9c:	fffff801 	.word	0xfffff801
 8001ba0:	000007fe 	.word	0x000007fe
 8001ba4:	2a00      	cmp	r2, #0
 8001ba6:	d100      	bne.n	8001baa <__aeabi_dsub+0x34a>
 8001ba8:	e160      	b.n	8001e6c <__aeabi_dsub+0x60c>
 8001baa:	000a      	movs	r2, r1
 8001bac:	4302      	orrs	r2, r0
 8001bae:	d04d      	beq.n	8001c4c <__aeabi_dsub+0x3ec>
 8001bb0:	464a      	mov	r2, r9
 8001bb2:	075c      	lsls	r4, r3, #29
 8001bb4:	08d2      	lsrs	r2, r2, #3
 8001bb6:	4322      	orrs	r2, r4
 8001bb8:	2480      	movs	r4, #128	; 0x80
 8001bba:	08db      	lsrs	r3, r3, #3
 8001bbc:	0324      	lsls	r4, r4, #12
 8001bbe:	4223      	tst	r3, r4
 8001bc0:	d007      	beq.n	8001bd2 <__aeabi_dsub+0x372>
 8001bc2:	08ce      	lsrs	r6, r1, #3
 8001bc4:	4226      	tst	r6, r4
 8001bc6:	d104      	bne.n	8001bd2 <__aeabi_dsub+0x372>
 8001bc8:	465d      	mov	r5, fp
 8001bca:	0033      	movs	r3, r6
 8001bcc:	08c2      	lsrs	r2, r0, #3
 8001bce:	0749      	lsls	r1, r1, #29
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	0f51      	lsrs	r1, r2, #29
 8001bd4:	00d2      	lsls	r2, r2, #3
 8001bd6:	08d2      	lsrs	r2, r2, #3
 8001bd8:	0749      	lsls	r1, r1, #29
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	0011      	movs	r1, r2
 8001bde:	4319      	orrs	r1, r3
 8001be0:	d100      	bne.n	8001be4 <__aeabi_dsub+0x384>
 8001be2:	e1c8      	b.n	8001f76 <__aeabi_dsub+0x716>
 8001be4:	2180      	movs	r1, #128	; 0x80
 8001be6:	0309      	lsls	r1, r1, #12
 8001be8:	430b      	orrs	r3, r1
 8001bea:	031b      	lsls	r3, r3, #12
 8001bec:	49d5      	ldr	r1, [pc, #852]	; (8001f44 <__aeabi_dsub+0x6e4>)
 8001bee:	0b1b      	lsrs	r3, r3, #12
 8001bf0:	e6da      	b.n	80019a8 <__aeabi_dsub+0x148>
 8001bf2:	49d5      	ldr	r1, [pc, #852]	; (8001f48 <__aeabi_dsub+0x6e8>)
 8001bf4:	1ab6      	subs	r6, r6, r2
 8001bf6:	400b      	ands	r3, r1
 8001bf8:	4698      	mov	r8, r3
 8001bfa:	e6b5      	b.n	8001968 <__aeabi_dsub+0x108>
 8001bfc:	0020      	movs	r0, r4
 8001bfe:	f000 fa4d 	bl	800209c <__clzsi2>
 8001c02:	0002      	movs	r2, r0
 8001c04:	3218      	adds	r2, #24
 8001c06:	2a1f      	cmp	r2, #31
 8001c08:	dc00      	bgt.n	8001c0c <__aeabi_dsub+0x3ac>
 8001c0a:	e68f      	b.n	800192c <__aeabi_dsub+0xcc>
 8001c0c:	0023      	movs	r3, r4
 8001c0e:	3808      	subs	r0, #8
 8001c10:	4083      	lsls	r3, r0
 8001c12:	2400      	movs	r4, #0
 8001c14:	e692      	b.n	800193c <__aeabi_dsub+0xdc>
 8001c16:	4308      	orrs	r0, r1
 8001c18:	0002      	movs	r2, r0
 8001c1a:	1e50      	subs	r0, r2, #1
 8001c1c:	4182      	sbcs	r2, r0
 8001c1e:	e66d      	b.n	80018fc <__aeabi_dsub+0x9c>
 8001c20:	4cca      	ldr	r4, [pc, #808]	; (8001f4c <__aeabi_dsub+0x6ec>)
 8001c22:	1c72      	adds	r2, r6, #1
 8001c24:	4222      	tst	r2, r4
 8001c26:	d000      	beq.n	8001c2a <__aeabi_dsub+0x3ca>
 8001c28:	e0ad      	b.n	8001d86 <__aeabi_dsub+0x526>
 8001c2a:	464a      	mov	r2, r9
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	2e00      	cmp	r6, #0
 8001c30:	d1b8      	bne.n	8001ba4 <__aeabi_dsub+0x344>
 8001c32:	2a00      	cmp	r2, #0
 8001c34:	d100      	bne.n	8001c38 <__aeabi_dsub+0x3d8>
 8001c36:	e158      	b.n	8001eea <__aeabi_dsub+0x68a>
 8001c38:	000a      	movs	r2, r1
 8001c3a:	4302      	orrs	r2, r0
 8001c3c:	d000      	beq.n	8001c40 <__aeabi_dsub+0x3e0>
 8001c3e:	e159      	b.n	8001ef4 <__aeabi_dsub+0x694>
 8001c40:	464a      	mov	r2, r9
 8001c42:	0759      	lsls	r1, r3, #29
 8001c44:	08d2      	lsrs	r2, r2, #3
 8001c46:	430a      	orrs	r2, r1
 8001c48:	08db      	lsrs	r3, r3, #3
 8001c4a:	e786      	b.n	8001b5a <__aeabi_dsub+0x2fa>
 8001c4c:	464a      	mov	r2, r9
 8001c4e:	0759      	lsls	r1, r3, #29
 8001c50:	08d2      	lsrs	r2, r2, #3
 8001c52:	430a      	orrs	r2, r1
 8001c54:	08db      	lsrs	r3, r3, #3
 8001c56:	e7c1      	b.n	8001bdc <__aeabi_dsub+0x37c>
 8001c58:	4dba      	ldr	r5, [pc, #744]	; (8001f44 <__aeabi_dsub+0x6e4>)
 8001c5a:	42aa      	cmp	r2, r5
 8001c5c:	d100      	bne.n	8001c60 <__aeabi_dsub+0x400>
 8001c5e:	e11e      	b.n	8001e9e <__aeabi_dsub+0x63e>
 8001c60:	2580      	movs	r5, #128	; 0x80
 8001c62:	042d      	lsls	r5, r5, #16
 8001c64:	432b      	orrs	r3, r5
 8001c66:	4664      	mov	r4, ip
 8001c68:	2c38      	cmp	r4, #56	; 0x38
 8001c6a:	dc5d      	bgt.n	8001d28 <__aeabi_dsub+0x4c8>
 8001c6c:	2c1f      	cmp	r4, #31
 8001c6e:	dd00      	ble.n	8001c72 <__aeabi_dsub+0x412>
 8001c70:	e0d0      	b.n	8001e14 <__aeabi_dsub+0x5b4>
 8001c72:	2520      	movs	r5, #32
 8001c74:	4667      	mov	r7, ip
 8001c76:	1b2d      	subs	r5, r5, r4
 8001c78:	464e      	mov	r6, r9
 8001c7a:	001c      	movs	r4, r3
 8001c7c:	40fe      	lsrs	r6, r7
 8001c7e:	40ac      	lsls	r4, r5
 8001c80:	4334      	orrs	r4, r6
 8001c82:	464e      	mov	r6, r9
 8001c84:	40ae      	lsls	r6, r5
 8001c86:	0035      	movs	r5, r6
 8001c88:	40fb      	lsrs	r3, r7
 8001c8a:	1e6e      	subs	r6, r5, #1
 8001c8c:	41b5      	sbcs	r5, r6
 8001c8e:	1ac9      	subs	r1, r1, r3
 8001c90:	432c      	orrs	r4, r5
 8001c92:	e04e      	b.n	8001d32 <__aeabi_dsub+0x4d2>
 8001c94:	464a      	mov	r2, r9
 8001c96:	1a14      	subs	r4, r2, r0
 8001c98:	45a1      	cmp	r9, r4
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	4252      	negs	r2, r2
 8001c9e:	4690      	mov	r8, r2
 8001ca0:	1a5f      	subs	r7, r3, r1
 8001ca2:	003a      	movs	r2, r7
 8001ca4:	4647      	mov	r7, r8
 8001ca6:	1bd2      	subs	r2, r2, r7
 8001ca8:	4690      	mov	r8, r2
 8001caa:	0212      	lsls	r2, r2, #8
 8001cac:	d500      	bpl.n	8001cb0 <__aeabi_dsub+0x450>
 8001cae:	e08b      	b.n	8001dc8 <__aeabi_dsub+0x568>
 8001cb0:	4642      	mov	r2, r8
 8001cb2:	4322      	orrs	r2, r4
 8001cb4:	d000      	beq.n	8001cb8 <__aeabi_dsub+0x458>
 8001cb6:	e630      	b.n	800191a <__aeabi_dsub+0xba>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	2500      	movs	r5, #0
 8001cbc:	e74d      	b.n	8001b5a <__aeabi_dsub+0x2fa>
 8001cbe:	464a      	mov	r2, r9
 8001cc0:	0759      	lsls	r1, r3, #29
 8001cc2:	08d2      	lsrs	r2, r2, #3
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	08db      	lsrs	r3, r3, #3
 8001cc8:	e744      	b.n	8001b54 <__aeabi_dsub+0x2f4>
 8001cca:	4642      	mov	r2, r8
 8001ccc:	4b9e      	ldr	r3, [pc, #632]	; (8001f48 <__aeabi_dsub+0x6e8>)
 8001cce:	0861      	lsrs	r1, r4, #1
 8001cd0:	401a      	ands	r2, r3
 8001cd2:	0013      	movs	r3, r2
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	4014      	ands	r4, r2
 8001cd8:	430c      	orrs	r4, r1
 8001cda:	07da      	lsls	r2, r3, #31
 8001cdc:	085b      	lsrs	r3, r3, #1
 8001cde:	4698      	mov	r8, r3
 8001ce0:	4314      	orrs	r4, r2
 8001ce2:	e641      	b.n	8001968 <__aeabi_dsub+0x108>
 8001ce4:	001a      	movs	r2, r3
 8001ce6:	3e1f      	subs	r6, #31
 8001ce8:	40f2      	lsrs	r2, r6
 8001cea:	0016      	movs	r6, r2
 8001cec:	2920      	cmp	r1, #32
 8001cee:	d003      	beq.n	8001cf8 <__aeabi_dsub+0x498>
 8001cf0:	2240      	movs	r2, #64	; 0x40
 8001cf2:	1a51      	subs	r1, r2, r1
 8001cf4:	408b      	lsls	r3, r1
 8001cf6:	431c      	orrs	r4, r3
 8001cf8:	1e62      	subs	r2, r4, #1
 8001cfa:	4194      	sbcs	r4, r2
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	4334      	orrs	r4, r6
 8001d00:	4698      	mov	r8, r3
 8001d02:	2600      	movs	r6, #0
 8001d04:	e71d      	b.n	8001b42 <__aeabi_dsub+0x2e2>
 8001d06:	000c      	movs	r4, r1
 8001d08:	3a20      	subs	r2, #32
 8001d0a:	40d4      	lsrs	r4, r2
 8001d0c:	0022      	movs	r2, r4
 8001d0e:	4664      	mov	r4, ip
 8001d10:	2c20      	cmp	r4, #32
 8001d12:	d004      	beq.n	8001d1e <__aeabi_dsub+0x4be>
 8001d14:	2740      	movs	r7, #64	; 0x40
 8001d16:	1b3f      	subs	r7, r7, r4
 8001d18:	40b9      	lsls	r1, r7
 8001d1a:	4308      	orrs	r0, r1
 8001d1c:	4680      	mov	r8, r0
 8001d1e:	4644      	mov	r4, r8
 8001d20:	1e61      	subs	r1, r4, #1
 8001d22:	418c      	sbcs	r4, r1
 8001d24:	4322      	orrs	r2, r4
 8001d26:	e5e9      	b.n	80018fc <__aeabi_dsub+0x9c>
 8001d28:	464c      	mov	r4, r9
 8001d2a:	4323      	orrs	r3, r4
 8001d2c:	001c      	movs	r4, r3
 8001d2e:	1e63      	subs	r3, r4, #1
 8001d30:	419c      	sbcs	r4, r3
 8001d32:	1b04      	subs	r4, r0, r4
 8001d34:	42a0      	cmp	r0, r4
 8001d36:	419b      	sbcs	r3, r3
 8001d38:	425b      	negs	r3, r3
 8001d3a:	1acb      	subs	r3, r1, r3
 8001d3c:	4698      	mov	r8, r3
 8001d3e:	465d      	mov	r5, fp
 8001d40:	0016      	movs	r6, r2
 8001d42:	e5e2      	b.n	800190a <__aeabi_dsub+0xaa>
 8001d44:	464e      	mov	r6, r9
 8001d46:	431e      	orrs	r6, r3
 8001d48:	d100      	bne.n	8001d4c <__aeabi_dsub+0x4ec>
 8001d4a:	e0ae      	b.n	8001eaa <__aeabi_dsub+0x64a>
 8001d4c:	1e66      	subs	r6, r4, #1
 8001d4e:	2c01      	cmp	r4, #1
 8001d50:	d100      	bne.n	8001d54 <__aeabi_dsub+0x4f4>
 8001d52:	e0fd      	b.n	8001f50 <__aeabi_dsub+0x6f0>
 8001d54:	4f7b      	ldr	r7, [pc, #492]	; (8001f44 <__aeabi_dsub+0x6e4>)
 8001d56:	42bc      	cmp	r4, r7
 8001d58:	d100      	bne.n	8001d5c <__aeabi_dsub+0x4fc>
 8001d5a:	e107      	b.n	8001f6c <__aeabi_dsub+0x70c>
 8001d5c:	46b4      	mov	ip, r6
 8001d5e:	e69b      	b.n	8001a98 <__aeabi_dsub+0x238>
 8001d60:	4664      	mov	r4, ip
 8001d62:	2220      	movs	r2, #32
 8001d64:	1b12      	subs	r2, r2, r4
 8001d66:	000c      	movs	r4, r1
 8001d68:	4094      	lsls	r4, r2
 8001d6a:	0007      	movs	r7, r0
 8001d6c:	4090      	lsls	r0, r2
 8001d6e:	46a0      	mov	r8, r4
 8001d70:	4664      	mov	r4, ip
 8001d72:	1e42      	subs	r2, r0, #1
 8001d74:	4190      	sbcs	r0, r2
 8001d76:	4662      	mov	r2, ip
 8001d78:	40e7      	lsrs	r7, r4
 8001d7a:	4644      	mov	r4, r8
 8001d7c:	40d1      	lsrs	r1, r2
 8001d7e:	433c      	orrs	r4, r7
 8001d80:	4304      	orrs	r4, r0
 8001d82:	185b      	adds	r3, r3, r1
 8001d84:	e6f3      	b.n	8001b6e <__aeabi_dsub+0x30e>
 8001d86:	4c6f      	ldr	r4, [pc, #444]	; (8001f44 <__aeabi_dsub+0x6e4>)
 8001d88:	42a2      	cmp	r2, r4
 8001d8a:	d100      	bne.n	8001d8e <__aeabi_dsub+0x52e>
 8001d8c:	e0d5      	b.n	8001f3a <__aeabi_dsub+0x6da>
 8001d8e:	4448      	add	r0, r9
 8001d90:	185b      	adds	r3, r3, r1
 8001d92:	4548      	cmp	r0, r9
 8001d94:	4189      	sbcs	r1, r1
 8001d96:	4249      	negs	r1, r1
 8001d98:	185b      	adds	r3, r3, r1
 8001d9a:	07dc      	lsls	r4, r3, #31
 8001d9c:	0840      	lsrs	r0, r0, #1
 8001d9e:	085b      	lsrs	r3, r3, #1
 8001da0:	4698      	mov	r8, r3
 8001da2:	0016      	movs	r6, r2
 8001da4:	4304      	orrs	r4, r0
 8001da6:	e6cc      	b.n	8001b42 <__aeabi_dsub+0x2e2>
 8001da8:	2a00      	cmp	r2, #0
 8001daa:	d000      	beq.n	8001dae <__aeabi_dsub+0x54e>
 8001dac:	e082      	b.n	8001eb4 <__aeabi_dsub+0x654>
 8001dae:	000a      	movs	r2, r1
 8001db0:	4302      	orrs	r2, r0
 8001db2:	d140      	bne.n	8001e36 <__aeabi_dsub+0x5d6>
 8001db4:	2380      	movs	r3, #128	; 0x80
 8001db6:	2500      	movs	r5, #0
 8001db8:	031b      	lsls	r3, r3, #12
 8001dba:	e713      	b.n	8001be4 <__aeabi_dsub+0x384>
 8001dbc:	074b      	lsls	r3, r1, #29
 8001dbe:	08c2      	lsrs	r2, r0, #3
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	465d      	mov	r5, fp
 8001dc4:	08cb      	lsrs	r3, r1, #3
 8001dc6:	e6c5      	b.n	8001b54 <__aeabi_dsub+0x2f4>
 8001dc8:	464a      	mov	r2, r9
 8001dca:	1a84      	subs	r4, r0, r2
 8001dcc:	42a0      	cmp	r0, r4
 8001dce:	4192      	sbcs	r2, r2
 8001dd0:	1acb      	subs	r3, r1, r3
 8001dd2:	4252      	negs	r2, r2
 8001dd4:	1a9b      	subs	r3, r3, r2
 8001dd6:	4698      	mov	r8, r3
 8001dd8:	465d      	mov	r5, fp
 8001dda:	e59e      	b.n	800191a <__aeabi_dsub+0xba>
 8001ddc:	464a      	mov	r2, r9
 8001dde:	0759      	lsls	r1, r3, #29
 8001de0:	08d2      	lsrs	r2, r2, #3
 8001de2:	430a      	orrs	r2, r1
 8001de4:	08db      	lsrs	r3, r3, #3
 8001de6:	e6f9      	b.n	8001bdc <__aeabi_dsub+0x37c>
 8001de8:	464a      	mov	r2, r9
 8001dea:	1a14      	subs	r4, r2, r0
 8001dec:	45a1      	cmp	r9, r4
 8001dee:	4192      	sbcs	r2, r2
 8001df0:	1a5b      	subs	r3, r3, r1
 8001df2:	4252      	negs	r2, r2
 8001df4:	1a9b      	subs	r3, r3, r2
 8001df6:	4698      	mov	r8, r3
 8001df8:	2601      	movs	r6, #1
 8001dfa:	e586      	b.n	800190a <__aeabi_dsub+0xaa>
 8001dfc:	464a      	mov	r2, r9
 8001dfe:	0759      	lsls	r1, r3, #29
 8001e00:	08d2      	lsrs	r2, r2, #3
 8001e02:	430a      	orrs	r2, r1
 8001e04:	08db      	lsrs	r3, r3, #3
 8001e06:	e6a5      	b.n	8001b54 <__aeabi_dsub+0x2f4>
 8001e08:	464c      	mov	r4, r9
 8001e0a:	4323      	orrs	r3, r4
 8001e0c:	001c      	movs	r4, r3
 8001e0e:	1e63      	subs	r3, r4, #1
 8001e10:	419c      	sbcs	r4, r3
 8001e12:	e65b      	b.n	8001acc <__aeabi_dsub+0x26c>
 8001e14:	4665      	mov	r5, ip
 8001e16:	001e      	movs	r6, r3
 8001e18:	3d20      	subs	r5, #32
 8001e1a:	40ee      	lsrs	r6, r5
 8001e1c:	2c20      	cmp	r4, #32
 8001e1e:	d005      	beq.n	8001e2c <__aeabi_dsub+0x5cc>
 8001e20:	2540      	movs	r5, #64	; 0x40
 8001e22:	1b2d      	subs	r5, r5, r4
 8001e24:	40ab      	lsls	r3, r5
 8001e26:	464c      	mov	r4, r9
 8001e28:	431c      	orrs	r4, r3
 8001e2a:	46a2      	mov	sl, r4
 8001e2c:	4654      	mov	r4, sl
 8001e2e:	1e63      	subs	r3, r4, #1
 8001e30:	419c      	sbcs	r4, r3
 8001e32:	4334      	orrs	r4, r6
 8001e34:	e77d      	b.n	8001d32 <__aeabi_dsub+0x4d2>
 8001e36:	074b      	lsls	r3, r1, #29
 8001e38:	08c2      	lsrs	r2, r0, #3
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	465d      	mov	r5, fp
 8001e3e:	08cb      	lsrs	r3, r1, #3
 8001e40:	e6cc      	b.n	8001bdc <__aeabi_dsub+0x37c>
 8001e42:	000a      	movs	r2, r1
 8001e44:	4302      	orrs	r2, r0
 8001e46:	d100      	bne.n	8001e4a <__aeabi_dsub+0x5ea>
 8001e48:	e736      	b.n	8001cb8 <__aeabi_dsub+0x458>
 8001e4a:	074b      	lsls	r3, r1, #29
 8001e4c:	08c2      	lsrs	r2, r0, #3
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	465d      	mov	r5, fp
 8001e52:	08cb      	lsrs	r3, r1, #3
 8001e54:	e681      	b.n	8001b5a <__aeabi_dsub+0x2fa>
 8001e56:	464a      	mov	r2, r9
 8001e58:	1a84      	subs	r4, r0, r2
 8001e5a:	42a0      	cmp	r0, r4
 8001e5c:	4192      	sbcs	r2, r2
 8001e5e:	1acb      	subs	r3, r1, r3
 8001e60:	4252      	negs	r2, r2
 8001e62:	1a9b      	subs	r3, r3, r2
 8001e64:	4698      	mov	r8, r3
 8001e66:	465d      	mov	r5, fp
 8001e68:	2601      	movs	r6, #1
 8001e6a:	e54e      	b.n	800190a <__aeabi_dsub+0xaa>
 8001e6c:	074b      	lsls	r3, r1, #29
 8001e6e:	08c2      	lsrs	r2, r0, #3
 8001e70:	431a      	orrs	r2, r3
 8001e72:	08cb      	lsrs	r3, r1, #3
 8001e74:	e6b2      	b.n	8001bdc <__aeabi_dsub+0x37c>
 8001e76:	464a      	mov	r2, r9
 8001e78:	1a14      	subs	r4, r2, r0
 8001e7a:	45a1      	cmp	r9, r4
 8001e7c:	4192      	sbcs	r2, r2
 8001e7e:	1a5f      	subs	r7, r3, r1
 8001e80:	4252      	negs	r2, r2
 8001e82:	1aba      	subs	r2, r7, r2
 8001e84:	4690      	mov	r8, r2
 8001e86:	0212      	lsls	r2, r2, #8
 8001e88:	d56b      	bpl.n	8001f62 <__aeabi_dsub+0x702>
 8001e8a:	464a      	mov	r2, r9
 8001e8c:	1a84      	subs	r4, r0, r2
 8001e8e:	42a0      	cmp	r0, r4
 8001e90:	4192      	sbcs	r2, r2
 8001e92:	1acb      	subs	r3, r1, r3
 8001e94:	4252      	negs	r2, r2
 8001e96:	1a9b      	subs	r3, r3, r2
 8001e98:	4698      	mov	r8, r3
 8001e9a:	465d      	mov	r5, fp
 8001e9c:	e564      	b.n	8001968 <__aeabi_dsub+0x108>
 8001e9e:	074b      	lsls	r3, r1, #29
 8001ea0:	08c2      	lsrs	r2, r0, #3
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	465d      	mov	r5, fp
 8001ea6:	08cb      	lsrs	r3, r1, #3
 8001ea8:	e698      	b.n	8001bdc <__aeabi_dsub+0x37c>
 8001eaa:	074b      	lsls	r3, r1, #29
 8001eac:	08c2      	lsrs	r2, r0, #3
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	08cb      	lsrs	r3, r1, #3
 8001eb2:	e64f      	b.n	8001b54 <__aeabi_dsub+0x2f4>
 8001eb4:	000a      	movs	r2, r1
 8001eb6:	4302      	orrs	r2, r0
 8001eb8:	d090      	beq.n	8001ddc <__aeabi_dsub+0x57c>
 8001eba:	464a      	mov	r2, r9
 8001ebc:	075c      	lsls	r4, r3, #29
 8001ebe:	08d2      	lsrs	r2, r2, #3
 8001ec0:	4314      	orrs	r4, r2
 8001ec2:	2280      	movs	r2, #128	; 0x80
 8001ec4:	08db      	lsrs	r3, r3, #3
 8001ec6:	0312      	lsls	r2, r2, #12
 8001ec8:	4213      	tst	r3, r2
 8001eca:	d008      	beq.n	8001ede <__aeabi_dsub+0x67e>
 8001ecc:	08ce      	lsrs	r6, r1, #3
 8001ece:	4216      	tst	r6, r2
 8001ed0:	d105      	bne.n	8001ede <__aeabi_dsub+0x67e>
 8001ed2:	08c0      	lsrs	r0, r0, #3
 8001ed4:	0749      	lsls	r1, r1, #29
 8001ed6:	4308      	orrs	r0, r1
 8001ed8:	0004      	movs	r4, r0
 8001eda:	465d      	mov	r5, fp
 8001edc:	0033      	movs	r3, r6
 8001ede:	0f61      	lsrs	r1, r4, #29
 8001ee0:	00e2      	lsls	r2, r4, #3
 8001ee2:	0749      	lsls	r1, r1, #29
 8001ee4:	08d2      	lsrs	r2, r2, #3
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	e678      	b.n	8001bdc <__aeabi_dsub+0x37c>
 8001eea:	074b      	lsls	r3, r1, #29
 8001eec:	08c2      	lsrs	r2, r0, #3
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	08cb      	lsrs	r3, r1, #3
 8001ef2:	e632      	b.n	8001b5a <__aeabi_dsub+0x2fa>
 8001ef4:	4448      	add	r0, r9
 8001ef6:	185b      	adds	r3, r3, r1
 8001ef8:	4548      	cmp	r0, r9
 8001efa:	4192      	sbcs	r2, r2
 8001efc:	4698      	mov	r8, r3
 8001efe:	4252      	negs	r2, r2
 8001f00:	4490      	add	r8, r2
 8001f02:	4643      	mov	r3, r8
 8001f04:	0004      	movs	r4, r0
 8001f06:	021b      	lsls	r3, r3, #8
 8001f08:	d400      	bmi.n	8001f0c <__aeabi_dsub+0x6ac>
 8001f0a:	e61a      	b.n	8001b42 <__aeabi_dsub+0x2e2>
 8001f0c:	4642      	mov	r2, r8
 8001f0e:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <__aeabi_dsub+0x6e8>)
 8001f10:	2601      	movs	r6, #1
 8001f12:	401a      	ands	r2, r3
 8001f14:	4690      	mov	r8, r2
 8001f16:	e614      	b.n	8001b42 <__aeabi_dsub+0x2e2>
 8001f18:	4666      	mov	r6, ip
 8001f1a:	001f      	movs	r7, r3
 8001f1c:	3e20      	subs	r6, #32
 8001f1e:	40f7      	lsrs	r7, r6
 8001f20:	2c20      	cmp	r4, #32
 8001f22:	d005      	beq.n	8001f30 <__aeabi_dsub+0x6d0>
 8001f24:	2640      	movs	r6, #64	; 0x40
 8001f26:	1b36      	subs	r6, r6, r4
 8001f28:	40b3      	lsls	r3, r6
 8001f2a:	464c      	mov	r4, r9
 8001f2c:	431c      	orrs	r4, r3
 8001f2e:	46a2      	mov	sl, r4
 8001f30:	4654      	mov	r4, sl
 8001f32:	1e63      	subs	r3, r4, #1
 8001f34:	419c      	sbcs	r4, r3
 8001f36:	433c      	orrs	r4, r7
 8001f38:	e5c8      	b.n	8001acc <__aeabi_dsub+0x26c>
 8001f3a:	0011      	movs	r1, r2
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	2200      	movs	r2, #0
 8001f40:	e532      	b.n	80019a8 <__aeabi_dsub+0x148>
 8001f42:	46c0      	nop			; (mov r8, r8)
 8001f44:	000007ff 	.word	0x000007ff
 8001f48:	ff7fffff 	.word	0xff7fffff
 8001f4c:	000007fe 	.word	0x000007fe
 8001f50:	464a      	mov	r2, r9
 8001f52:	1814      	adds	r4, r2, r0
 8001f54:	4284      	cmp	r4, r0
 8001f56:	4192      	sbcs	r2, r2
 8001f58:	185b      	adds	r3, r3, r1
 8001f5a:	4698      	mov	r8, r3
 8001f5c:	4252      	negs	r2, r2
 8001f5e:	4490      	add	r8, r2
 8001f60:	e5e9      	b.n	8001b36 <__aeabi_dsub+0x2d6>
 8001f62:	4642      	mov	r2, r8
 8001f64:	4322      	orrs	r2, r4
 8001f66:	d100      	bne.n	8001f6a <__aeabi_dsub+0x70a>
 8001f68:	e6a6      	b.n	8001cb8 <__aeabi_dsub+0x458>
 8001f6a:	e5ea      	b.n	8001b42 <__aeabi_dsub+0x2e2>
 8001f6c:	074b      	lsls	r3, r1, #29
 8001f6e:	08c2      	lsrs	r2, r0, #3
 8001f70:	431a      	orrs	r2, r3
 8001f72:	08cb      	lsrs	r3, r1, #3
 8001f74:	e632      	b.n	8001bdc <__aeabi_dsub+0x37c>
 8001f76:	2200      	movs	r2, #0
 8001f78:	4901      	ldr	r1, [pc, #4]	; (8001f80 <__aeabi_dsub+0x720>)
 8001f7a:	0013      	movs	r3, r2
 8001f7c:	e514      	b.n	80019a8 <__aeabi_dsub+0x148>
 8001f7e:	46c0      	nop			; (mov r8, r8)
 8001f80:	000007ff 	.word	0x000007ff

08001f84 <__aeabi_d2iz>:
 8001f84:	000a      	movs	r2, r1
 8001f86:	b530      	push	{r4, r5, lr}
 8001f88:	4c13      	ldr	r4, [pc, #76]	; (8001fd8 <__aeabi_d2iz+0x54>)
 8001f8a:	0053      	lsls	r3, r2, #1
 8001f8c:	0309      	lsls	r1, r1, #12
 8001f8e:	0005      	movs	r5, r0
 8001f90:	0b09      	lsrs	r1, r1, #12
 8001f92:	2000      	movs	r0, #0
 8001f94:	0d5b      	lsrs	r3, r3, #21
 8001f96:	0fd2      	lsrs	r2, r2, #31
 8001f98:	42a3      	cmp	r3, r4
 8001f9a:	dd04      	ble.n	8001fa6 <__aeabi_d2iz+0x22>
 8001f9c:	480f      	ldr	r0, [pc, #60]	; (8001fdc <__aeabi_d2iz+0x58>)
 8001f9e:	4283      	cmp	r3, r0
 8001fa0:	dd02      	ble.n	8001fa8 <__aeabi_d2iz+0x24>
 8001fa2:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <__aeabi_d2iz+0x5c>)
 8001fa4:	18d0      	adds	r0, r2, r3
 8001fa6:	bd30      	pop	{r4, r5, pc}
 8001fa8:	2080      	movs	r0, #128	; 0x80
 8001faa:	0340      	lsls	r0, r0, #13
 8001fac:	4301      	orrs	r1, r0
 8001fae:	480d      	ldr	r0, [pc, #52]	; (8001fe4 <__aeabi_d2iz+0x60>)
 8001fb0:	1ac0      	subs	r0, r0, r3
 8001fb2:	281f      	cmp	r0, #31
 8001fb4:	dd08      	ble.n	8001fc8 <__aeabi_d2iz+0x44>
 8001fb6:	480c      	ldr	r0, [pc, #48]	; (8001fe8 <__aeabi_d2iz+0x64>)
 8001fb8:	1ac3      	subs	r3, r0, r3
 8001fba:	40d9      	lsrs	r1, r3
 8001fbc:	000b      	movs	r3, r1
 8001fbe:	4258      	negs	r0, r3
 8001fc0:	2a00      	cmp	r2, #0
 8001fc2:	d1f0      	bne.n	8001fa6 <__aeabi_d2iz+0x22>
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	e7ee      	b.n	8001fa6 <__aeabi_d2iz+0x22>
 8001fc8:	4c08      	ldr	r4, [pc, #32]	; (8001fec <__aeabi_d2iz+0x68>)
 8001fca:	40c5      	lsrs	r5, r0
 8001fcc:	46a4      	mov	ip, r4
 8001fce:	4463      	add	r3, ip
 8001fd0:	4099      	lsls	r1, r3
 8001fd2:	000b      	movs	r3, r1
 8001fd4:	432b      	orrs	r3, r5
 8001fd6:	e7f2      	b.n	8001fbe <__aeabi_d2iz+0x3a>
 8001fd8:	000003fe 	.word	0x000003fe
 8001fdc:	0000041d 	.word	0x0000041d
 8001fe0:	7fffffff 	.word	0x7fffffff
 8001fe4:	00000433 	.word	0x00000433
 8001fe8:	00000413 	.word	0x00000413
 8001fec:	fffffbed 	.word	0xfffffbed

08001ff0 <__aeabi_i2d>:
 8001ff0:	b570      	push	{r4, r5, r6, lr}
 8001ff2:	2800      	cmp	r0, #0
 8001ff4:	d016      	beq.n	8002024 <__aeabi_i2d+0x34>
 8001ff6:	17c3      	asrs	r3, r0, #31
 8001ff8:	18c5      	adds	r5, r0, r3
 8001ffa:	405d      	eors	r5, r3
 8001ffc:	0fc4      	lsrs	r4, r0, #31
 8001ffe:	0028      	movs	r0, r5
 8002000:	f000 f84c 	bl	800209c <__clzsi2>
 8002004:	4a11      	ldr	r2, [pc, #68]	; (800204c <__aeabi_i2d+0x5c>)
 8002006:	1a12      	subs	r2, r2, r0
 8002008:	280a      	cmp	r0, #10
 800200a:	dc16      	bgt.n	800203a <__aeabi_i2d+0x4a>
 800200c:	0003      	movs	r3, r0
 800200e:	002e      	movs	r6, r5
 8002010:	3315      	adds	r3, #21
 8002012:	409e      	lsls	r6, r3
 8002014:	230b      	movs	r3, #11
 8002016:	1a18      	subs	r0, r3, r0
 8002018:	40c5      	lsrs	r5, r0
 800201a:	0553      	lsls	r3, r2, #21
 800201c:	032d      	lsls	r5, r5, #12
 800201e:	0b2d      	lsrs	r5, r5, #12
 8002020:	0d5b      	lsrs	r3, r3, #21
 8002022:	e003      	b.n	800202c <__aeabi_i2d+0x3c>
 8002024:	2400      	movs	r4, #0
 8002026:	2300      	movs	r3, #0
 8002028:	2500      	movs	r5, #0
 800202a:	2600      	movs	r6, #0
 800202c:	051b      	lsls	r3, r3, #20
 800202e:	432b      	orrs	r3, r5
 8002030:	07e4      	lsls	r4, r4, #31
 8002032:	4323      	orrs	r3, r4
 8002034:	0030      	movs	r0, r6
 8002036:	0019      	movs	r1, r3
 8002038:	bd70      	pop	{r4, r5, r6, pc}
 800203a:	380b      	subs	r0, #11
 800203c:	4085      	lsls	r5, r0
 800203e:	0553      	lsls	r3, r2, #21
 8002040:	032d      	lsls	r5, r5, #12
 8002042:	2600      	movs	r6, #0
 8002044:	0b2d      	lsrs	r5, r5, #12
 8002046:	0d5b      	lsrs	r3, r3, #21
 8002048:	e7f0      	b.n	800202c <__aeabi_i2d+0x3c>
 800204a:	46c0      	nop			; (mov r8, r8)
 800204c:	0000041e 	.word	0x0000041e

08002050 <__aeabi_ui2d>:
 8002050:	b510      	push	{r4, lr}
 8002052:	1e04      	subs	r4, r0, #0
 8002054:	d010      	beq.n	8002078 <__aeabi_ui2d+0x28>
 8002056:	f000 f821 	bl	800209c <__clzsi2>
 800205a:	4b0f      	ldr	r3, [pc, #60]	; (8002098 <__aeabi_ui2d+0x48>)
 800205c:	1a1b      	subs	r3, r3, r0
 800205e:	280a      	cmp	r0, #10
 8002060:	dc11      	bgt.n	8002086 <__aeabi_ui2d+0x36>
 8002062:	220b      	movs	r2, #11
 8002064:	0021      	movs	r1, r4
 8002066:	1a12      	subs	r2, r2, r0
 8002068:	40d1      	lsrs	r1, r2
 800206a:	3015      	adds	r0, #21
 800206c:	030a      	lsls	r2, r1, #12
 800206e:	055b      	lsls	r3, r3, #21
 8002070:	4084      	lsls	r4, r0
 8002072:	0b12      	lsrs	r2, r2, #12
 8002074:	0d5b      	lsrs	r3, r3, #21
 8002076:	e001      	b.n	800207c <__aeabi_ui2d+0x2c>
 8002078:	2300      	movs	r3, #0
 800207a:	2200      	movs	r2, #0
 800207c:	051b      	lsls	r3, r3, #20
 800207e:	4313      	orrs	r3, r2
 8002080:	0020      	movs	r0, r4
 8002082:	0019      	movs	r1, r3
 8002084:	bd10      	pop	{r4, pc}
 8002086:	0022      	movs	r2, r4
 8002088:	380b      	subs	r0, #11
 800208a:	4082      	lsls	r2, r0
 800208c:	055b      	lsls	r3, r3, #21
 800208e:	0312      	lsls	r2, r2, #12
 8002090:	2400      	movs	r4, #0
 8002092:	0b12      	lsrs	r2, r2, #12
 8002094:	0d5b      	lsrs	r3, r3, #21
 8002096:	e7f1      	b.n	800207c <__aeabi_ui2d+0x2c>
 8002098:	0000041e 	.word	0x0000041e

0800209c <__clzsi2>:
 800209c:	211c      	movs	r1, #28
 800209e:	2301      	movs	r3, #1
 80020a0:	041b      	lsls	r3, r3, #16
 80020a2:	4298      	cmp	r0, r3
 80020a4:	d301      	bcc.n	80020aa <__clzsi2+0xe>
 80020a6:	0c00      	lsrs	r0, r0, #16
 80020a8:	3910      	subs	r1, #16
 80020aa:	0a1b      	lsrs	r3, r3, #8
 80020ac:	4298      	cmp	r0, r3
 80020ae:	d301      	bcc.n	80020b4 <__clzsi2+0x18>
 80020b0:	0a00      	lsrs	r0, r0, #8
 80020b2:	3908      	subs	r1, #8
 80020b4:	091b      	lsrs	r3, r3, #4
 80020b6:	4298      	cmp	r0, r3
 80020b8:	d301      	bcc.n	80020be <__clzsi2+0x22>
 80020ba:	0900      	lsrs	r0, r0, #4
 80020bc:	3904      	subs	r1, #4
 80020be:	a202      	add	r2, pc, #8	; (adr r2, 80020c8 <__clzsi2+0x2c>)
 80020c0:	5c10      	ldrb	r0, [r2, r0]
 80020c2:	1840      	adds	r0, r0, r1
 80020c4:	4770      	bx	lr
 80020c6:	46c0      	nop			; (mov r8, r8)
 80020c8:	02020304 	.word	0x02020304
 80020cc:	01010101 	.word	0x01010101
	...

080020d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	0002      	movs	r2, r0
 80020e0:	1dfb      	adds	r3, r7, #7
 80020e2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80020e4:	1dfb      	adds	r3, r7, #7
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b7f      	cmp	r3, #127	; 0x7f
 80020ea:	d809      	bhi.n	8002100 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ec:	1dfb      	adds	r3, r7, #7
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	001a      	movs	r2, r3
 80020f2:	231f      	movs	r3, #31
 80020f4:	401a      	ands	r2, r3
 80020f6:	4b04      	ldr	r3, [pc, #16]	; (8002108 <__NVIC_EnableIRQ+0x30>)
 80020f8:	2101      	movs	r1, #1
 80020fa:	4091      	lsls	r1, r2
 80020fc:	000a      	movs	r2, r1
 80020fe:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002100:	46c0      	nop			; (mov r8, r8)
 8002102:	46bd      	mov	sp, r7
 8002104:	b002      	add	sp, #8
 8002106:	bd80      	pop	{r7, pc}
 8002108:	e000e100 	.word	0xe000e100

0800210c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800210c:	b590      	push	{r4, r7, lr}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	0002      	movs	r2, r0
 8002114:	6039      	str	r1, [r7, #0]
 8002116:	1dfb      	adds	r3, r7, #7
 8002118:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800211a:	1dfb      	adds	r3, r7, #7
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	2b7f      	cmp	r3, #127	; 0x7f
 8002120:	d828      	bhi.n	8002174 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002122:	4a2f      	ldr	r2, [pc, #188]	; (80021e0 <__NVIC_SetPriority+0xd4>)
 8002124:	1dfb      	adds	r3, r7, #7
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	b25b      	sxtb	r3, r3
 800212a:	089b      	lsrs	r3, r3, #2
 800212c:	33c0      	adds	r3, #192	; 0xc0
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	589b      	ldr	r3, [r3, r2]
 8002132:	1dfa      	adds	r2, r7, #7
 8002134:	7812      	ldrb	r2, [r2, #0]
 8002136:	0011      	movs	r1, r2
 8002138:	2203      	movs	r2, #3
 800213a:	400a      	ands	r2, r1
 800213c:	00d2      	lsls	r2, r2, #3
 800213e:	21ff      	movs	r1, #255	; 0xff
 8002140:	4091      	lsls	r1, r2
 8002142:	000a      	movs	r2, r1
 8002144:	43d2      	mvns	r2, r2
 8002146:	401a      	ands	r2, r3
 8002148:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	019b      	lsls	r3, r3, #6
 800214e:	22ff      	movs	r2, #255	; 0xff
 8002150:	401a      	ands	r2, r3
 8002152:	1dfb      	adds	r3, r7, #7
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	0018      	movs	r0, r3
 8002158:	2303      	movs	r3, #3
 800215a:	4003      	ands	r3, r0
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002160:	481f      	ldr	r0, [pc, #124]	; (80021e0 <__NVIC_SetPriority+0xd4>)
 8002162:	1dfb      	adds	r3, r7, #7
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	b25b      	sxtb	r3, r3
 8002168:	089b      	lsrs	r3, r3, #2
 800216a:	430a      	orrs	r2, r1
 800216c:	33c0      	adds	r3, #192	; 0xc0
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002172:	e031      	b.n	80021d8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002174:	4a1b      	ldr	r2, [pc, #108]	; (80021e4 <__NVIC_SetPriority+0xd8>)
 8002176:	1dfb      	adds	r3, r7, #7
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	0019      	movs	r1, r3
 800217c:	230f      	movs	r3, #15
 800217e:	400b      	ands	r3, r1
 8002180:	3b08      	subs	r3, #8
 8002182:	089b      	lsrs	r3, r3, #2
 8002184:	3306      	adds	r3, #6
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	18d3      	adds	r3, r2, r3
 800218a:	3304      	adds	r3, #4
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	1dfa      	adds	r2, r7, #7
 8002190:	7812      	ldrb	r2, [r2, #0]
 8002192:	0011      	movs	r1, r2
 8002194:	2203      	movs	r2, #3
 8002196:	400a      	ands	r2, r1
 8002198:	00d2      	lsls	r2, r2, #3
 800219a:	21ff      	movs	r1, #255	; 0xff
 800219c:	4091      	lsls	r1, r2
 800219e:	000a      	movs	r2, r1
 80021a0:	43d2      	mvns	r2, r2
 80021a2:	401a      	ands	r2, r3
 80021a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	019b      	lsls	r3, r3, #6
 80021aa:	22ff      	movs	r2, #255	; 0xff
 80021ac:	401a      	ands	r2, r3
 80021ae:	1dfb      	adds	r3, r7, #7
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	0018      	movs	r0, r3
 80021b4:	2303      	movs	r3, #3
 80021b6:	4003      	ands	r3, r0
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021bc:	4809      	ldr	r0, [pc, #36]	; (80021e4 <__NVIC_SetPriority+0xd8>)
 80021be:	1dfb      	adds	r3, r7, #7
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	001c      	movs	r4, r3
 80021c4:	230f      	movs	r3, #15
 80021c6:	4023      	ands	r3, r4
 80021c8:	3b08      	subs	r3, #8
 80021ca:	089b      	lsrs	r3, r3, #2
 80021cc:	430a      	orrs	r2, r1
 80021ce:	3306      	adds	r3, #6
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	18c3      	adds	r3, r0, r3
 80021d4:	3304      	adds	r3, #4
 80021d6:	601a      	str	r2, [r3, #0]
}
 80021d8:	46c0      	nop			; (mov r8, r8)
 80021da:	46bd      	mov	sp, r7
 80021dc:	b003      	add	sp, #12
 80021de:	bd90      	pop	{r4, r7, pc}
 80021e0:	e000e100 	.word	0xe000e100
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2201      	movs	r2, #1
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	601a      	str	r2, [r3, #0]
}
 80021fc:	46c0      	nop			; (mov r8, r8)
 80021fe:	46bd      	mov	sp, r7
 8002200:	b002      	add	sp, #8
 8002202:	bd80      	pop	{r7, pc}

08002204 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a03      	ldr	r2, [pc, #12]	; (8002220 <LL_USART_DisableFIFO+0x1c>)
 8002212:	401a      	ands	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	601a      	str	r2, [r3, #0]
}
 8002218:	46c0      	nop			; (mov r8, r8)
 800221a:	46bd      	mov	sp, r7
 800221c:	b002      	add	sp, #8
 800221e:	bd80      	pop	{r7, pc}
 8002220:	dfffffff 	.word	0xdfffffff

08002224 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	08da      	lsrs	r2, r3, #3
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	075b      	lsls	r3, r3, #29
 800223a:	431a      	orrs	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	609a      	str	r2, [r3, #8]
}
 8002240:	46c0      	nop			; (mov r8, r8)
 8002242:	46bd      	mov	sp, r7
 8002244:	b002      	add	sp, #8
 8002246:	bd80      	pop	{r7, pc}

08002248 <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	4a05      	ldr	r2, [pc, #20]	; (800226c <LL_USART_SetRXFIFOThreshold+0x24>)
 8002258:	401a      	ands	r2, r3
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	065b      	lsls	r3, r3, #25
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	609a      	str	r2, [r3, #8]
}
 8002264:	46c0      	nop			; (mov r8, r8)
 8002266:	46bd      	mov	sp, r7
 8002268:	b002      	add	sp, #8
 800226a:	bd80      	pop	{r7, pc}
 800226c:	f1ffffff 	.word	0xf1ffffff

08002270 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	4a07      	ldr	r2, [pc, #28]	; (800229c <LL_USART_ConfigAsyncMode+0x2c>)
 800227e:	401a      	ands	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	222a      	movs	r2, #42	; 0x2a
 800228a:	4393      	bics	r3, r2
 800228c:	001a      	movs	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	609a      	str	r2, [r3, #8]
}
 8002292:	46c0      	nop			; (mov r8, r8)
 8002294:	46bd      	mov	sp, r7
 8002296:	b002      	add	sp, #8
 8002298:	bd80      	pop	{r7, pc}
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	ffffb7ff 	.word	0xffffb7ff

080022a0 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	69da      	ldr	r2, [r3, #28]
 80022ac:	2380      	movs	r3, #128	; 0x80
 80022ae:	039b      	lsls	r3, r3, #14
 80022b0:	401a      	ands	r2, r3
 80022b2:	2380      	movs	r3, #128	; 0x80
 80022b4:	039b      	lsls	r3, r3, #14
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d101      	bne.n	80022be <LL_USART_IsActiveFlag_TEACK+0x1e>
 80022ba:	2301      	movs	r3, #1
 80022bc:	e000      	b.n	80022c0 <LL_USART_IsActiveFlag_TEACK+0x20>
 80022be:	2300      	movs	r3, #0
}
 80022c0:	0018      	movs	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	b002      	add	sp, #8
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	69da      	ldr	r2, [r3, #28]
 80022d4:	2380      	movs	r3, #128	; 0x80
 80022d6:	03db      	lsls	r3, r3, #15
 80022d8:	401a      	ands	r2, r3
 80022da:	2380      	movs	r3, #128	; 0x80
 80022dc:	03db      	lsls	r3, r3, #15
 80022de:	429a      	cmp	r2, r3
 80022e0:	d101      	bne.n	80022e6 <LL_USART_IsActiveFlag_REACK+0x1e>
 80022e2:	2301      	movs	r3, #1
 80022e4:	e000      	b.n	80022e8 <LL_USART_IsActiveFlag_REACK+0x20>
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	0018      	movs	r0, r3
 80022ea:	46bd      	mov	sp, r7
 80022ec:	b002      	add	sp, #8
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2220      	movs	r2, #32
 80022fe:	431a      	orrs	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	601a      	str	r2, [r3, #0]
}
 8002304:	46c0      	nop			; (mov r8, r8)
 8002306:	46bd      	mov	sp, r7
 8002308:	b002      	add	sp, #8
 800230a:	bd80      	pop	{r7, pc}

0800230c <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	2201      	movs	r2, #1
 800231a:	431a      	orrs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	609a      	str	r2, [r3, #8]
}
 8002320:	46c0      	nop			; (mov r8, r8)
 8002322:	46bd      	mov	sp, r7
 8002324:	b002      	add	sp, #8
 8002326:	bd80      	pop	{r7, pc}

08002328 <LL_USART_ReceiveData9>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData9
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
  */
__STATIC_INLINE uint16_t LL_USART_ReceiveData9(USART_TypeDef *USARTx)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002334:	b29b      	uxth	r3, r3
 8002336:	05db      	lsls	r3, r3, #23
 8002338:	0ddb      	lsrs	r3, r3, #23
 800233a:	b29b      	uxth	r3, r3
}
 800233c:	0018      	movs	r0, r3
 800233e:	46bd      	mov	sp, r7
 8002340:	b002      	add	sp, #8
 8002342:	bd80      	pop	{r7, pc}

08002344 <LL_SYSCFG_EnableFastModePlus>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 800234c:	4b04      	ldr	r3, [pc, #16]	; (8002360 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 800234e:	6819      	ldr	r1, [r3, #0]
 8002350:	4b03      	ldr	r3, [pc, #12]	; (8002360 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	430a      	orrs	r2, r1
 8002356:	601a      	str	r2, [r3, #0]
}
 8002358:	46c0      	nop			; (mov r8, r8)
 800235a:	46bd      	mov	sp, r7
 800235c:	b002      	add	sp, #8
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40010000 	.word	0x40010000

08002364 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	619a      	str	r2, [r3, #24]
}
 8002374:	46c0      	nop			; (mov r8, r8)
 8002376:	46bd      	mov	sp, r7
 8002378:	b002      	add	sp, #8
 800237a:	bd80      	pop	{r7, pc}

0800237c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800238c:	46c0      	nop			; (mov r8, r8)
 800238e:	46bd      	mov	sp, r7
 8002390:	b002      	add	sp, #8
 8002392:	bd80      	pop	{r7, pc}

08002394 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 800239c:	4b07      	ldr	r3, [pc, #28]	; (80023bc <LL_APB1_GRP1_EnableClock+0x28>)
 800239e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80023a0:	4b06      	ldr	r3, [pc, #24]	; (80023bc <LL_APB1_GRP1_EnableClock+0x28>)
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	430a      	orrs	r2, r1
 80023a6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80023a8:	4b04      	ldr	r3, [pc, #16]	; (80023bc <LL_APB1_GRP1_EnableClock+0x28>)
 80023aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	4013      	ands	r3, r2
 80023b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023b2:	68fb      	ldr	r3, [r7, #12]
}
 80023b4:	46c0      	nop			; (mov r8, r8)
 80023b6:	46bd      	mov	sp, r7
 80023b8:	b004      	add	sp, #16
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40021000 	.word	0x40021000

080023c0 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 80023c8:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <LL_IOP_GRP1_EnableClock+0x28>)
 80023ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023cc:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <LL_IOP_GRP1_EnableClock+0x28>)
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	430a      	orrs	r2, r1
 80023d2:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80023d4:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <LL_IOP_GRP1_EnableClock+0x28>)
 80023d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	4013      	ands	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023de:	68fb      	ldr	r3, [r7, #12]
}
 80023e0:	46c0      	nop			; (mov r8, r8)
 80023e2:	46bd      	mov	sp, r7
 80023e4:	b004      	add	sp, #16
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40021000 	.word	0x40021000

080023ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b088      	sub	sp, #32
 80023f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t testINPUT = 0;
 80023f2:	231e      	movs	r3, #30
 80023f4:	18fb      	adds	r3, r7, r3
 80023f6:	2200      	movs	r2, #0
 80023f8:	801a      	strh	r2, [r3, #0]
	uint16_t testAns = 0;
 80023fa:	231c      	movs	r3, #28
 80023fc:	18fb      	adds	r3, r7, r3
 80023fe:	2200      	movs	r2, #0
 8002400:	801a      	strh	r2, [r3, #0]
	uint16_t i = 0;
 8002402:	231a      	movs	r3, #26
 8002404:	18fb      	adds	r3, r7, r3
 8002406:	2200      	movs	r2, #0
 8002408:	801a      	strh	r2, [r3, #0]
	uint16_t beep1 = 0x0000;
 800240a:	2318      	movs	r3, #24
 800240c:	18fb      	adds	r3, r7, r3
 800240e:	2200      	movs	r2, #0
 8002410:	801a      	strh	r2, [r3, #0]
	uint16_t beep2 = 0xFFFF;
 8002412:	2316      	movs	r3, #22
 8002414:	18fb      	adds	r3, r7, r3
 8002416:	2201      	movs	r2, #1
 8002418:	4252      	negs	r2, r2
 800241a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800241c:	f003 f8be 	bl	800559c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002420:	f000 f894 	bl	800254c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002424:	4b43      	ldr	r3, [pc, #268]	; (8002534 <main+0x148>)
 8002426:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002428:	4b42      	ldr	r3, [pc, #264]	; (8002534 <main+0x148>)
 800242a:	2101      	movs	r1, #1
 800242c:	430a      	orrs	r2, r1
 800242e:	635a      	str	r2, [r3, #52]	; 0x34
 8002430:	4b40      	ldr	r3, [pc, #256]	; (8002534 <main+0x148>)
 8002432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002434:	2201      	movs	r2, #1
 8002436:	4013      	ands	r3, r2
 8002438:	60bb      	str	r3, [r7, #8]
 800243a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800243c:	4b3d      	ldr	r3, [pc, #244]	; (8002534 <main+0x148>)
 800243e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002440:	4b3c      	ldr	r3, [pc, #240]	; (8002534 <main+0x148>)
 8002442:	2102      	movs	r1, #2
 8002444:	430a      	orrs	r2, r1
 8002446:	635a      	str	r2, [r3, #52]	; 0x34
 8002448:	4b3a      	ldr	r3, [pc, #232]	; (8002534 <main+0x148>)
 800244a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800244c:	2202      	movs	r2, #2
 800244e:	4013      	ands	r3, r2
 8002450:	607b      	str	r3, [r7, #4]
 8002452:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002454:	4b37      	ldr	r3, [pc, #220]	; (8002534 <main+0x148>)
 8002456:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002458:	4b36      	ldr	r3, [pc, #216]	; (8002534 <main+0x148>)
 800245a:	2104      	movs	r1, #4
 800245c:	430a      	orrs	r2, r1
 800245e:	635a      	str	r2, [r3, #52]	; 0x34
 8002460:	4b34      	ldr	r3, [pc, #208]	; (8002534 <main+0x148>)
 8002462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002464:	2204      	movs	r2, #4
 8002466:	4013      	ands	r3, r2
 8002468:	603b      	str	r3, [r7, #0]
 800246a:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800246c:	f000 fbd6 	bl	8002c1c <MX_GPIO_Init>
  MX_DMA_Init();
 8002470:	f000 fba6 	bl	8002bc0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002474:	f000 fac4 	bl	8002a00 <MX_USART2_UART_Init>
  MX_COMP1_Init();
 8002478:	f000 f8e8 	bl	800264c <MX_COMP1_Init>
  MX_TIM1_Init();
 800247c:	f000 f9c6 	bl	800280c <MX_TIM1_Init>
  MX_USART3_Init();
 8002480:	f000 fb5c 	bl	8002b3c <MX_USART3_Init>
  MX_I2S1_Init();
 8002484:	f000 f954 	bl	8002730 <MX_I2S1_Init>
  MX_I2C1_Init();
 8002488:	f000 f912 	bl	80026b0 <MX_I2C1_Init>
  MX_SPI2_Init();
 800248c:	f000 f97a 	bl	8002784 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	HAL_COMP_Start(&hcomp1);
 8002490:	4b29      	ldr	r3, [pc, #164]	; (8002538 <main+0x14c>)
 8002492:	0018      	movs	r0, r3
 8002494:	f003 fb50 	bl	8005b38 <HAL_COMP_Start>
	HAL_Delay(100);
 8002498:	2064      	movs	r0, #100	; 0x64
 800249a:	f003 f905 	bl	80056a8 <HAL_Delay>
	uint8_t I2Cbuf[5];
	MEM_Reset();
 800249e:	f001 fd8b 	bl	8003fb8 <MEM_Reset>

	weoInit();
 80024a2:	f000 fe3f 	bl	8003124 <weoInit>
	HAL_Delay(1);
 80024a6:	2001      	movs	r0, #1
 80024a8:	f003 f8fe 	bl	80056a8 <HAL_Delay>
	weoClear();
 80024ac:	f000 fea6 	bl	80031fc <weoClear>
	MEM_GetID();
 80024b0:	f002 f812 	bl	80044d8 <MEM_GetID>
	soundSetup();
 80024b4:	f001 f8b2 	bl	800361c <soundSetup>

	USART2->CR1 |= (USART_CR1_UE | USART_CR1_RE | USART_CR1_TE|USART_CR1_M); // Enable USART, Receive and Transmit
 80024b8:	4b20      	ldr	r3, [pc, #128]	; (800253c <main+0x150>)
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	4b1f      	ldr	r3, [pc, #124]	; (800253c <main+0x150>)
 80024be:	4920      	ldr	r1, [pc, #128]	; (8002540 <main+0x154>)
 80024c0:	430a      	orrs	r2, r1
 80024c2:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	LL_USART_EnableIT_RXNE(USART2);
 80024c4:	4b1d      	ldr	r3, [pc, #116]	; (800253c <main+0x150>)
 80024c6:	0018      	movs	r0, r3
 80024c8:	f7ff ff12 	bl	80022f0 <LL_USART_EnableIT_RXNE_RXFNE>
	LL_USART_EnableIT_ERROR(USART2);
 80024cc:	4b1b      	ldr	r3, [pc, #108]	; (800253c <main+0x150>)
 80024ce:	0018      	movs	r0, r3
 80024d0:	f7ff ff1c 	bl	800230c <LL_USART_EnableIT_ERROR>

	USART2->ICR|=USART_ICR_ORECF;
 80024d4:	4b19      	ldr	r3, [pc, #100]	; (800253c <main+0x150>)
 80024d6:	6a1a      	ldr	r2, [r3, #32]
 80024d8:	4b18      	ldr	r3, [pc, #96]	; (800253c <main+0x150>)
 80024da:	2108      	movs	r1, #8
 80024dc:	430a      	orrs	r2, r1
 80024de:	621a      	str	r2, [r3, #32]

	I2C_SOUND_ChangePage(0x01);
 80024e0:	2001      	movs	r0, #1
 80024e2:	f001 f85b 	bl	800359c <I2C_SOUND_ChangePage>
	WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 80024e6:	2100      	movs	r1, #0
 80024e8:	2010      	movs	r0, #16
 80024ea:	f001 f875 	bl	80035d8 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x2E, 0x24);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
 80024ee:	2124      	movs	r1, #36	; 0x24
 80024f0:	202e      	movs	r0, #46	; 0x2e
 80024f2:	f001 f871 	bl	80035d8 <WriteReg_I2C_SOUND>
    squeak_triple();
 80024f6:	f002 fb2b 	bl	8004b50 <squeak_triple>

	uint8_t x=0x02;
 80024fa:	2315      	movs	r3, #21
 80024fc:	18fb      	adds	r3, r7, r3
 80024fe:	2202      	movs	r2, #2
 8002500:	701a      	strb	r2, [r3, #0]
	uint8_t y=0x04;
 8002502:	2314      	movs	r3, #20
 8002504:	18fb      	adds	r3, r7, r3
 8002506:	2204      	movs	r2, #4
 8002508:	701a      	strb	r2, [r3, #0]
//				if(y % 2 !=0){
//					decY=0x02;
//				}
//	weoDrawRectangleFilled(x,y,(x+localWidth-1),(y+localHeight-decY),0xFF,aim);

	I2C_SOUND_ChangePage(0x01);
 800250a:	2001      	movs	r0, #1
 800250c:	f001 f846 	bl	800359c <I2C_SOUND_ChangePage>
//	WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
	WriteReg_I2C_SOUND(0x2E, 0x24);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
 8002510:	2124      	movs	r1, #36	; 0x24
 8002512:	202e      	movs	r0, #46	; 0x2e
 8002514:	f001 f860 	bl	80035d8 <WriteReg_I2C_SOUND>

	GPIOC->ODR |= 1 << 6;
 8002518:	4b0a      	ldr	r3, [pc, #40]	; (8002544 <main+0x158>)
 800251a:	695a      	ldr	r2, [r3, #20]
 800251c:	4b09      	ldr	r3, [pc, #36]	; (8002544 <main+0x158>)
 800251e:	2140      	movs	r1, #64	; 0x40
 8002520:	430a      	orrs	r2, r1
 8002522:	615a      	str	r2, [r3, #20]
	while (1) {
		cmdExecute(cmd2Execute);
 8002524:	4b08      	ldr	r3, [pc, #32]	; (8002548 <main+0x15c>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	0018      	movs	r0, r3
 800252a:	f002 f83d 	bl	80045a8 <cmdExecute>
//		squeak_single();
		Scount();
 800252e:	f002 f835 	bl	800459c <Scount>
		cmdExecute(cmd2Execute);
 8002532:	e7f7      	b.n	8002524 <main+0x138>
 8002534:	40021000 	.word	0x40021000
 8002538:	20000254 	.word	0x20000254
 800253c:	40004400 	.word	0x40004400
 8002540:	1000100d 	.word	0x1000100d
 8002544:	50000800 	.word	0x50000800
 8002548:	20000366 	.word	0x20000366

0800254c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800254c:	b590      	push	{r4, r7, lr}
 800254e:	b0a1      	sub	sp, #132	; 0x84
 8002550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002552:	2448      	movs	r4, #72	; 0x48
 8002554:	193b      	adds	r3, r7, r4
 8002556:	0018      	movs	r0, r3
 8002558:	2338      	movs	r3, #56	; 0x38
 800255a:	001a      	movs	r2, r3
 800255c:	2100      	movs	r1, #0
 800255e:	f00a ff49 	bl	800d3f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002562:	2338      	movs	r3, #56	; 0x38
 8002564:	18fb      	adds	r3, r7, r3
 8002566:	0018      	movs	r0, r3
 8002568:	2310      	movs	r3, #16
 800256a:	001a      	movs	r2, r3
 800256c:	2100      	movs	r1, #0
 800256e:	f00a ff41 	bl	800d3f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002572:	1d3b      	adds	r3, r7, #4
 8002574:	0018      	movs	r0, r3
 8002576:	2334      	movs	r3, #52	; 0x34
 8002578:	001a      	movs	r2, r3
 800257a:	2100      	movs	r1, #0
 800257c:	f00a ff3a 	bl	800d3f4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002580:	2380      	movs	r3, #128	; 0x80
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	0018      	movs	r0, r3
 8002586:	f005 fca3 	bl	8007ed0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800258a:	193b      	adds	r3, r7, r4
 800258c:	2202      	movs	r2, #2
 800258e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002590:	193b      	adds	r3, r7, r4
 8002592:	2280      	movs	r2, #128	; 0x80
 8002594:	0052      	lsls	r2, r2, #1
 8002596:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002598:	0021      	movs	r1, r4
 800259a:	187b      	adds	r3, r7, r1
 800259c:	2200      	movs	r2, #0
 800259e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025a0:	187b      	adds	r3, r7, r1
 80025a2:	2240      	movs	r2, #64	; 0x40
 80025a4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025a6:	187b      	adds	r3, r7, r1
 80025a8:	2202      	movs	r2, #2
 80025aa:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80025ac:	187b      	adds	r3, r7, r1
 80025ae:	2202      	movs	r2, #2
 80025b0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80025b2:	187b      	adds	r3, r7, r1
 80025b4:	2200      	movs	r2, #0
 80025b6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80025b8:	187b      	adds	r3, r7, r1
 80025ba:	2208      	movs	r2, #8
 80025bc:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025be:	187b      	adds	r3, r7, r1
 80025c0:	2280      	movs	r2, #128	; 0x80
 80025c2:	0292      	lsls	r2, r2, #10
 80025c4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80025c6:	187b      	adds	r3, r7, r1
 80025c8:	2280      	movs	r2, #128	; 0x80
 80025ca:	0492      	lsls	r2, r2, #18
 80025cc:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80025ce:	187b      	adds	r3, r7, r1
 80025d0:	2280      	movs	r2, #128	; 0x80
 80025d2:	0592      	lsls	r2, r2, #22
 80025d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025d6:	187b      	adds	r3, r7, r1
 80025d8:	0018      	movs	r0, r3
 80025da:	f005 fcc5 	bl	8007f68 <HAL_RCC_OscConfig>
 80025de:	1e03      	subs	r3, r0, #0
 80025e0:	d001      	beq.n	80025e6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80025e2:	f002 fb59 	bl	8004c98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025e6:	2138      	movs	r1, #56	; 0x38
 80025e8:	187b      	adds	r3, r7, r1
 80025ea:	2207      	movs	r2, #7
 80025ec:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025ee:	187b      	adds	r3, r7, r1
 80025f0:	2202      	movs	r2, #2
 80025f2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025f4:	187b      	adds	r3, r7, r1
 80025f6:	2200      	movs	r2, #0
 80025f8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025fa:	187b      	adds	r3, r7, r1
 80025fc:	2200      	movs	r2, #0
 80025fe:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002600:	187b      	adds	r3, r7, r1
 8002602:	2102      	movs	r1, #2
 8002604:	0018      	movs	r0, r3
 8002606:	f005 ffcf 	bl	80085a8 <HAL_RCC_ClockConfig>
 800260a:	1e03      	subs	r3, r0, #0
 800260c:	d001      	beq.n	8002612 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800260e:	f002 fb43 	bl	8004c98 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8002612:	1d3b      	adds	r3, r7, #4
 8002614:	4a0c      	ldr	r2, [pc, #48]	; (8002648 <SystemClock_Config+0xfc>)
 8002616:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2S1|RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002618:	1d3b      	adds	r3, r7, #4
 800261a:	2200      	movs	r2, #0
 800261c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800261e:	1d3b      	adds	r3, r7, #4
 8002620:	2200      	movs	r2, #0
 8002622:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8002624:	1d3b      	adds	r3, r7, #4
 8002626:	2200      	movs	r2, #0
 8002628:	615a      	str	r2, [r3, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 800262a:	1d3b      	adds	r3, r7, #4
 800262c:	2200      	movs	r2, #0
 800262e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002630:	1d3b      	adds	r3, r7, #4
 8002632:	0018      	movs	r0, r3
 8002634:	f006 f962 	bl	80088fc <HAL_RCCEx_PeriphCLKConfig>
 8002638:	1e03      	subs	r3, r0, #0
 800263a:	d001      	beq.n	8002640 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800263c:	f002 fb2c 	bl	8004c98 <Error_Handler>
  }
}
 8002640:	46c0      	nop			; (mov r8, r8)
 8002642:	46bd      	mov	sp, r7
 8002644:	b021      	add	sp, #132	; 0x84
 8002646:	bd90      	pop	{r4, r7, pc}
 8002648:	00200822 	.word	0x00200822

0800264c <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8002650:	4b15      	ldr	r3, [pc, #84]	; (80026a8 <MX_COMP1_Init+0x5c>)
 8002652:	4a16      	ldr	r2, [pc, #88]	; (80026ac <MX_COMP1_Init+0x60>)
 8002654:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 8002656:	4b14      	ldr	r3, [pc, #80]	; (80026a8 <MX_COMP1_Init+0x5c>)
 8002658:	2280      	movs	r2, #128	; 0x80
 800265a:	0052      	lsls	r2, r2, #1
 800265c:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 800265e:	4b12      	ldr	r3, [pc, #72]	; (80026a8 <MX_COMP1_Init+0x5c>)
 8002660:	2230      	movs	r2, #48	; 0x30
 8002662:	615a      	str	r2, [r3, #20]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8002664:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <MX_COMP1_Init+0x5c>)
 8002666:	2200      	movs	r2, #0
 8002668:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 800266a:	4b0f      	ldr	r3, [pc, #60]	; (80026a8 <MX_COMP1_Init+0x5c>)
 800266c:	2200      	movs	r2, #0
 800266e:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8002670:	4b0d      	ldr	r3, [pc, #52]	; (80026a8 <MX_COMP1_Init+0x5c>)
 8002672:	2200      	movs	r2, #0
 8002674:	619a      	str	r2, [r3, #24]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_TIM1_OC5;
 8002676:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <MX_COMP1_Init+0x5c>)
 8002678:	2280      	movs	r2, #128	; 0x80
 800267a:	0392      	lsls	r2, r2, #14
 800267c:	621a      	str	r2, [r3, #32]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 800267e:	4b0a      	ldr	r3, [pc, #40]	; (80026a8 <MX_COMP1_Init+0x5c>)
 8002680:	2200      	movs	r2, #0
 8002682:	60da      	str	r2, [r3, #12]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8002684:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <MX_COMP1_Init+0x5c>)
 8002686:	2200      	movs	r2, #0
 8002688:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_EVENT_RISING;
 800268a:	4b07      	ldr	r3, [pc, #28]	; (80026a8 <MX_COMP1_Init+0x5c>)
 800268c:	2212      	movs	r2, #18
 800268e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8002690:	4b05      	ldr	r3, [pc, #20]	; (80026a8 <MX_COMP1_Init+0x5c>)
 8002692:	0018      	movs	r0, r3
 8002694:	f003 f8ee 	bl	8005874 <HAL_COMP_Init>
 8002698:	1e03      	subs	r3, r0, #0
 800269a:	d001      	beq.n	80026a0 <MX_COMP1_Init+0x54>
  {
    Error_Handler();
 800269c:	f002 fafc 	bl	8004c98 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 80026a0:	46c0      	nop			; (mov r8, r8)
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	46c0      	nop			; (mov r8, r8)
 80026a8:	20000254 	.word	0x20000254
 80026ac:	40010200 	.word	0x40010200

080026b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80026b4:	4b1b      	ldr	r3, [pc, #108]	; (8002724 <MX_I2C1_Init+0x74>)
 80026b6:	4a1c      	ldr	r2, [pc, #112]	; (8002728 <MX_I2C1_Init+0x78>)
 80026b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x1094102C;
 80026ba:	4b1a      	ldr	r3, [pc, #104]	; (8002724 <MX_I2C1_Init+0x74>)
 80026bc:	4a1b      	ldr	r2, [pc, #108]	; (800272c <MX_I2C1_Init+0x7c>)
 80026be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80026c0:	4b18      	ldr	r3, [pc, #96]	; (8002724 <MX_I2C1_Init+0x74>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026c6:	4b17      	ldr	r3, [pc, #92]	; (8002724 <MX_I2C1_Init+0x74>)
 80026c8:	2201      	movs	r2, #1
 80026ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026cc:	4b15      	ldr	r3, [pc, #84]	; (8002724 <MX_I2C1_Init+0x74>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80026d2:	4b14      	ldr	r3, [pc, #80]	; (8002724 <MX_I2C1_Init+0x74>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80026d8:	4b12      	ldr	r3, [pc, #72]	; (8002724 <MX_I2C1_Init+0x74>)
 80026da:	2200      	movs	r2, #0
 80026dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026de:	4b11      	ldr	r3, [pc, #68]	; (8002724 <MX_I2C1_Init+0x74>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026e4:	4b0f      	ldr	r3, [pc, #60]	; (8002724 <MX_I2C1_Init+0x74>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80026ea:	4b0e      	ldr	r3, [pc, #56]	; (8002724 <MX_I2C1_Init+0x74>)
 80026ec:	0018      	movs	r0, r3
 80026ee:	f003 ff7f 	bl	80065f0 <HAL_I2C_Init>
 80026f2:	1e03      	subs	r3, r0, #0
 80026f4:	d001      	beq.n	80026fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80026f6:	f002 facf 	bl	8004c98 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80026fa:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <MX_I2C1_Init+0x74>)
 80026fc:	2100      	movs	r1, #0
 80026fe:	0018      	movs	r0, r3
 8002700:	f005 f86a 	bl	80077d8 <HAL_I2CEx_ConfigAnalogFilter>
 8002704:	1e03      	subs	r3, r0, #0
 8002706:	d001      	beq.n	800270c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002708:	f002 fac6 	bl	8004c98 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800270c:	4b05      	ldr	r3, [pc, #20]	; (8002724 <MX_I2C1_Init+0x74>)
 800270e:	2100      	movs	r1, #0
 8002710:	0018      	movs	r0, r3
 8002712:	f005 f8ad 	bl	8007870 <HAL_I2CEx_ConfigDigitalFilter>
 8002716:	1e03      	subs	r3, r0, #0
 8002718:	d001      	beq.n	800271e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800271a:	f002 fabd 	bl	8004c98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800271e:	46c0      	nop			; (mov r8, r8)
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	20000134 	.word	0x20000134
 8002728:	40005400 	.word	0x40005400
 800272c:	1094102c 	.word	0x1094102c

08002730 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8002734:	4b11      	ldr	r3, [pc, #68]	; (800277c <MX_I2S1_Init+0x4c>)
 8002736:	4a12      	ldr	r2, [pc, #72]	; (8002780 <MX_I2S1_Init+0x50>)
 8002738:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 800273a:	4b10      	ldr	r3, [pc, #64]	; (800277c <MX_I2S1_Init+0x4c>)
 800273c:	2280      	movs	r2, #128	; 0x80
 800273e:	0092      	lsls	r2, r2, #2
 8002740:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8002742:	4b0e      	ldr	r3, [pc, #56]	; (800277c <MX_I2S1_Init+0x4c>)
 8002744:	2200      	movs	r2, #0
 8002746:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002748:	4b0c      	ldr	r3, [pc, #48]	; (800277c <MX_I2S1_Init+0x4c>)
 800274a:	2200      	movs	r2, #0
 800274c:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800274e:	4b0b      	ldr	r3, [pc, #44]	; (800277c <MX_I2S1_Init+0x4c>)
 8002750:	2280      	movs	r2, #128	; 0x80
 8002752:	0092      	lsls	r2, r2, #2
 8002754:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8002756:	4b09      	ldr	r3, [pc, #36]	; (800277c <MX_I2S1_Init+0x4c>)
 8002758:	22fa      	movs	r2, #250	; 0xfa
 800275a:	0192      	lsls	r2, r2, #6
 800275c:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 800275e:	4b07      	ldr	r3, [pc, #28]	; (800277c <MX_I2S1_Init+0x4c>)
 8002760:	2200      	movs	r2, #0
 8002762:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8002764:	4b05      	ldr	r3, [pc, #20]	; (800277c <MX_I2S1_Init+0x4c>)
 8002766:	0018      	movs	r0, r3
 8002768:	f005 f8ce 	bl	8007908 <HAL_I2S_Init>
 800276c:	1e03      	subs	r3, r0, #0
 800276e:	d001      	beq.n	8002774 <MX_I2S1_Init+0x44>
  {
    Error_Handler();
 8002770:	f002 fa92 	bl	8004c98 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8002774:	46c0      	nop			; (mov r8, r8)
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	46c0      	nop			; (mov r8, r8)
 800277c:	2000036c 	.word	0x2000036c
 8002780:	40013000 	.word	0x40013000

08002784 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002788:	4b1e      	ldr	r3, [pc, #120]	; (8002804 <MX_SPI2_Init+0x80>)
 800278a:	2208      	movs	r2, #8
 800278c:	61da      	str	r2, [r3, #28]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800278e:	4b1d      	ldr	r3, [pc, #116]	; (8002804 <MX_SPI2_Init+0x80>)
 8002790:	4a1d      	ldr	r2, [pc, #116]	; (8002808 <MX_SPI2_Init+0x84>)
 8002792:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002794:	4b1b      	ldr	r3, [pc, #108]	; (8002804 <MX_SPI2_Init+0x80>)
 8002796:	2282      	movs	r2, #130	; 0x82
 8002798:	0052      	lsls	r2, r2, #1
 800279a:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800279c:	4b19      	ldr	r3, [pc, #100]	; (8002804 <MX_SPI2_Init+0x80>)
 800279e:	2200      	movs	r2, #0
 80027a0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80027a2:	4b18      	ldr	r3, [pc, #96]	; (8002804 <MX_SPI2_Init+0x80>)
 80027a4:	22e0      	movs	r2, #224	; 0xe0
 80027a6:	00d2      	lsls	r2, r2, #3
 80027a8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027aa:	4b16      	ldr	r3, [pc, #88]	; (8002804 <MX_SPI2_Init+0x80>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027b0:	4b14      	ldr	r3, [pc, #80]	; (8002804 <MX_SPI2_Init+0x80>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80027b6:	4b13      	ldr	r3, [pc, #76]	; (8002804 <MX_SPI2_Init+0x80>)
 80027b8:	2280      	movs	r2, #128	; 0x80
 80027ba:	0092      	lsls	r2, r2, #2
 80027bc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80027be:	4b11      	ldr	r3, [pc, #68]	; (8002804 <MX_SPI2_Init+0x80>)
 80027c0:	2208      	movs	r2, #8
 80027c2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027c4:	4b0f      	ldr	r3, [pc, #60]	; (8002804 <MX_SPI2_Init+0x80>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80027ca:	4b0e      	ldr	r3, [pc, #56]	; (8002804 <MX_SPI2_Init+0x80>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027d0:	4b0c      	ldr	r3, [pc, #48]	; (8002804 <MX_SPI2_Init+0x80>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80027d6:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <MX_SPI2_Init+0x80>)
 80027d8:	2207      	movs	r2, #7
 80027da:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80027dc:	4b09      	ldr	r3, [pc, #36]	; (8002804 <MX_SPI2_Init+0x80>)
 80027de:	2200      	movs	r2, #0
 80027e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80027e2:	4b08      	ldr	r3, [pc, #32]	; (8002804 <MX_SPI2_Init+0x80>)
 80027e4:	2208      	movs	r2, #8
 80027e6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80027e8:	4b06      	ldr	r3, [pc, #24]	; (8002804 <MX_SPI2_Init+0x80>)
 80027ea:	0018      	movs	r0, r3
 80027ec:	f006 fd86 	bl	80092fc <HAL_SPI_Init>
 80027f0:	1e03      	subs	r3, r0, #0
 80027f2:	d001      	beq.n	80027f8 <MX_SPI2_Init+0x74>
  {
    Error_Handler();
 80027f4:	f002 fa50 	bl	8004c98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80027f8:	4b02      	ldr	r3, [pc, #8]	; (8002804 <MX_SPI2_Init+0x80>)
 80027fa:	2208      	movs	r2, #8
 80027fc:	61da      	str	r2, [r3, #28]
  /* USER CODE END SPI2_Init 2 */

}
 80027fe:	46c0      	nop			; (mov r8, r8)
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	200000b0 	.word	0x200000b0
 8002808:	40003800 	.word	0x40003800

0800280c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b09e      	sub	sp, #120	; 0x78
 8002810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002812:	2368      	movs	r3, #104	; 0x68
 8002814:	18fb      	adds	r3, r7, r3
 8002816:	0018      	movs	r0, r3
 8002818:	2310      	movs	r3, #16
 800281a:	001a      	movs	r2, r3
 800281c:	2100      	movs	r1, #0
 800281e:	f00a fde9 	bl	800d3f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002822:	235c      	movs	r3, #92	; 0x5c
 8002824:	18fb      	adds	r3, r7, r3
 8002826:	0018      	movs	r0, r3
 8002828:	230c      	movs	r3, #12
 800282a:	001a      	movs	r2, r3
 800282c:	2100      	movs	r1, #0
 800282e:	f00a fde1 	bl	800d3f4 <memset>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8002832:	2350      	movs	r3, #80	; 0x50
 8002834:	18fb      	adds	r3, r7, r3
 8002836:	0018      	movs	r0, r3
 8002838:	230c      	movs	r3, #12
 800283a:	001a      	movs	r2, r3
 800283c:	2100      	movs	r1, #0
 800283e:	f00a fdd9 	bl	800d3f4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002842:	2334      	movs	r3, #52	; 0x34
 8002844:	18fb      	adds	r3, r7, r3
 8002846:	0018      	movs	r0, r3
 8002848:	231c      	movs	r3, #28
 800284a:	001a      	movs	r2, r3
 800284c:	2100      	movs	r1, #0
 800284e:	f00a fdd1 	bl	800d3f4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002852:	003b      	movs	r3, r7
 8002854:	0018      	movs	r0, r3
 8002856:	2334      	movs	r3, #52	; 0x34
 8002858:	001a      	movs	r2, r3
 800285a:	2100      	movs	r1, #0
 800285c:	f00a fdca 	bl	800d3f4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002860:	4b64      	ldr	r3, [pc, #400]	; (80029f4 <MX_TIM1_Init+0x1e8>)
 8002862:	4a65      	ldr	r2, [pc, #404]	; (80029f8 <MX_TIM1_Init+0x1ec>)
 8002864:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002866:	4b63      	ldr	r3, [pc, #396]	; (80029f4 <MX_TIM1_Init+0x1e8>)
 8002868:	2200      	movs	r2, #0
 800286a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800286c:	4b61      	ldr	r3, [pc, #388]	; (80029f4 <MX_TIM1_Init+0x1e8>)
 800286e:	2200      	movs	r2, #0
 8002870:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 639;
 8002872:	4b60      	ldr	r3, [pc, #384]	; (80029f4 <MX_TIM1_Init+0x1e8>)
 8002874:	4a61      	ldr	r2, [pc, #388]	; (80029fc <MX_TIM1_Init+0x1f0>)
 8002876:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002878:	4b5e      	ldr	r3, [pc, #376]	; (80029f4 <MX_TIM1_Init+0x1e8>)
 800287a:	2200      	movs	r2, #0
 800287c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800287e:	4b5d      	ldr	r3, [pc, #372]	; (80029f4 <MX_TIM1_Init+0x1e8>)
 8002880:	2200      	movs	r2, #0
 8002882:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002884:	4b5b      	ldr	r3, [pc, #364]	; (80029f4 <MX_TIM1_Init+0x1e8>)
 8002886:	2280      	movs	r2, #128	; 0x80
 8002888:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800288a:	4b5a      	ldr	r3, [pc, #360]	; (80029f4 <MX_TIM1_Init+0x1e8>)
 800288c:	0018      	movs	r0, r3
 800288e:	f008 f929 	bl	800aae4 <HAL_TIM_Base_Init>
 8002892:	1e03      	subs	r3, r0, #0
 8002894:	d001      	beq.n	800289a <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8002896:	f002 f9ff 	bl	8004c98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800289a:	2168      	movs	r1, #104	; 0x68
 800289c:	187b      	adds	r3, r7, r1
 800289e:	2280      	movs	r2, #128	; 0x80
 80028a0:	0152      	lsls	r2, r2, #5
 80028a2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80028a4:	187a      	adds	r2, r7, r1
 80028a6:	4b53      	ldr	r3, [pc, #332]	; (80029f4 <MX_TIM1_Init+0x1e8>)
 80028a8:	0011      	movs	r1, r2
 80028aa:	0018      	movs	r0, r3
 80028ac:	f008 fbb2 	bl	800b014 <HAL_TIM_ConfigClockSource>
 80028b0:	1e03      	subs	r3, r0, #0
 80028b2:	d001      	beq.n	80028b8 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80028b4:	f002 f9f0 	bl	8004c98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80028b8:	4b4e      	ldr	r3, [pc, #312]	; (80029f4 <MX_TIM1_Init+0x1e8>)
 80028ba:	0018      	movs	r0, r3
 80028bc:	f008 f96a 	bl	800ab94 <HAL_TIM_PWM_Init>
 80028c0:	1e03      	subs	r3, r0, #0
 80028c2:	d001      	beq.n	80028c8 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80028c4:	f002 f9e8 	bl	8004c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028c8:	215c      	movs	r1, #92	; 0x5c
 80028ca:	187b      	adds	r3, r7, r1
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80028d0:	187b      	adds	r3, r7, r1
 80028d2:	2200      	movs	r2, #0
 80028d4:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028d6:	187b      	adds	r3, r7, r1
 80028d8:	2200      	movs	r2, #0
 80028da:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80028dc:	187a      	adds	r2, r7, r1
 80028de:	4b45      	ldr	r3, [pc, #276]	; (80029f4 <MX_TIM1_Init+0x1e8>)
 80028e0:	0011      	movs	r1, r2
 80028e2:	0018      	movs	r0, r3
 80028e4:	f009 f866 	bl	800b9b4 <HAL_TIMEx_MasterConfigSynchronization>
 80028e8:	1e03      	subs	r3, r0, #0
 80028ea:	d001      	beq.n	80028f0 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 80028ec:	f002 f9d4 	bl	8004c98 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 80028f0:	2150      	movs	r1, #80	; 0x50
 80028f2:	187b      	adds	r3, r7, r1
 80028f4:	2202      	movs	r2, #2
 80028f6:	601a      	str	r2, [r3, #0]
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80028f8:	187b      	adds	r3, r7, r1
 80028fa:	2201      	movs	r2, #1
 80028fc:	605a      	str	r2, [r3, #4]
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 80028fe:	187b      	adds	r3, r7, r1
 8002900:	2200      	movs	r2, #0
 8002902:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8002904:	187a      	adds	r2, r7, r1
 8002906:	4b3b      	ldr	r3, [pc, #236]	; (80029f4 <MX_TIM1_Init+0x1e8>)
 8002908:	2101      	movs	r1, #1
 800290a:	0018      	movs	r0, r3
 800290c:	f009 f966 	bl	800bbdc <HAL_TIMEx_ConfigBreakInput>
 8002910:	1e03      	subs	r3, r0, #0
 8002912:	d001      	beq.n	8002918 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8002914:	f002 f9c0 	bl	8004c98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002918:	2134      	movs	r1, #52	; 0x34
 800291a:	187b      	adds	r3, r7, r1
 800291c:	2260      	movs	r2, #96	; 0x60
 800291e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 300;
 8002920:	187b      	adds	r3, r7, r1
 8002922:	2296      	movs	r2, #150	; 0x96
 8002924:	0052      	lsls	r2, r2, #1
 8002926:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002928:	187b      	adds	r3, r7, r1
 800292a:	2200      	movs	r2, #0
 800292c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800292e:	187b      	adds	r3, r7, r1
 8002930:	2200      	movs	r2, #0
 8002932:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002934:	187b      	adds	r3, r7, r1
 8002936:	2204      	movs	r2, #4
 8002938:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800293a:	187b      	adds	r3, r7, r1
 800293c:	2200      	movs	r2, #0
 800293e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002940:	187b      	adds	r3, r7, r1
 8002942:	2200      	movs	r2, #0
 8002944:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002946:	1879      	adds	r1, r7, r1
 8002948:	4b2a      	ldr	r3, [pc, #168]	; (80029f4 <MX_TIM1_Init+0x1e8>)
 800294a:	2200      	movs	r2, #0
 800294c:	0018      	movs	r0, r3
 800294e:	f008 fa6b 	bl	800ae28 <HAL_TIM_PWM_ConfigChannel>
 8002952:	1e03      	subs	r3, r0, #0
 8002954:	d001      	beq.n	800295a <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8002956:	f002 f99f 	bl	8004c98 <Error_Handler>
  }
  sConfigOC.Pulse = 50;
 800295a:	2134      	movs	r1, #52	; 0x34
 800295c:	187b      	adds	r3, r7, r1
 800295e:	2232      	movs	r2, #50	; 0x32
 8002960:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 8002962:	1879      	adds	r1, r7, r1
 8002964:	4b23      	ldr	r3, [pc, #140]	; (80029f4 <MX_TIM1_Init+0x1e8>)
 8002966:	2210      	movs	r2, #16
 8002968:	0018      	movs	r0, r3
 800296a:	f008 fa5d 	bl	800ae28 <HAL_TIM_PWM_ConfigChannel>
 800296e:	1e03      	subs	r3, r0, #0
 8002970:	d001      	beq.n	8002976 <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 8002972:	f002 f991 	bl	8004c98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8002976:	003b      	movs	r3, r7
 8002978:	2280      	movs	r2, #128	; 0x80
 800297a:	0112      	lsls	r2, r2, #4
 800297c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 800297e:	003b      	movs	r3, r7
 8002980:	2280      	movs	r2, #128	; 0x80
 8002982:	00d2      	lsls	r2, r2, #3
 8002984:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002986:	003b      	movs	r3, r7
 8002988:	2200      	movs	r2, #0
 800298a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800298c:	003b      	movs	r3, r7
 800298e:	2200      	movs	r2, #0
 8002990:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8002992:	003b      	movs	r3, r7
 8002994:	2280      	movs	r2, #128	; 0x80
 8002996:	0152      	lsls	r2, r2, #5
 8002998:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800299a:	003b      	movs	r3, r7
 800299c:	2280      	movs	r2, #128	; 0x80
 800299e:	0192      	lsls	r2, r2, #6
 80029a0:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 10;
 80029a2:	003b      	movs	r3, r7
 80029a4:	220a      	movs	r2, #10
 80029a6:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80029a8:	003b      	movs	r3, r7
 80029aa:	2200      	movs	r2, #0
 80029ac:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80029ae:	003b      	movs	r3, r7
 80029b0:	2200      	movs	r2, #0
 80029b2:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80029b4:	003b      	movs	r3, r7
 80029b6:	2280      	movs	r2, #128	; 0x80
 80029b8:	0492      	lsls	r2, r2, #18
 80029ba:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80029bc:	003b      	movs	r3, r7
 80029be:	2200      	movs	r2, #0
 80029c0:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80029c2:	003b      	movs	r3, r7
 80029c4:	2200      	movs	r2, #0
 80029c6:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 80029c8:	003b      	movs	r3, r7
 80029ca:	2280      	movs	r2, #128	; 0x80
 80029cc:	01d2      	lsls	r2, r2, #7
 80029ce:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80029d0:	003a      	movs	r2, r7
 80029d2:	4b08      	ldr	r3, [pc, #32]	; (80029f4 <MX_TIM1_Init+0x1e8>)
 80029d4:	0011      	movs	r1, r2
 80029d6:	0018      	movs	r0, r3
 80029d8:	f009 f85a 	bl	800ba90 <HAL_TIMEx_ConfigBreakDeadTime>
 80029dc:	1e03      	subs	r3, r0, #0
 80029de:	d001      	beq.n	80029e4 <MX_TIM1_Init+0x1d8>
  {
    Error_Handler();
 80029e0:	f002 f95a 	bl	8004c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80029e4:	4b03      	ldr	r3, [pc, #12]	; (80029f4 <MX_TIM1_Init+0x1e8>)
 80029e6:	0018      	movs	r0, r3
 80029e8:	f002 fb9c 	bl	8005124 <HAL_TIM_MspPostInit>

}
 80029ec:	46c0      	nop			; (mov r8, r8)
 80029ee:	46bd      	mov	sp, r7
 80029f0:	b01e      	add	sp, #120	; 0x78
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	20000310 	.word	0x20000310
 80029f8:	40012c00 	.word	0x40012c00
 80029fc:	0000027f 	.word	0x0000027f

08002a00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002a00:	b590      	push	{r4, r7, lr}
 8002a02:	b08f      	sub	sp, #60	; 0x3c
 8002a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002a06:	2418      	movs	r4, #24
 8002a08:	193b      	adds	r3, r7, r4
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	2320      	movs	r3, #32
 8002a0e:	001a      	movs	r2, r3
 8002a10:	2100      	movs	r1, #0
 8002a12:	f00a fcef 	bl	800d3f4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a16:	003b      	movs	r3, r7
 8002a18:	0018      	movs	r0, r3
 8002a1a:	2318      	movs	r3, #24
 8002a1c:	001a      	movs	r2, r3
 8002a1e:	2100      	movs	r1, #0
 8002a20:	f00a fce8 	bl	800d3f4 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002a24:	2380      	movs	r3, #128	; 0x80
 8002a26:	029b      	lsls	r3, r3, #10
 8002a28:	0018      	movs	r0, r3
 8002a2a:	f7ff fcb3 	bl	8002394 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8002a2e:	2001      	movs	r0, #1
 8002a30:	f7ff fcc6 	bl	80023c0 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8002a34:	003b      	movs	r3, r7
 8002a36:	2204      	movs	r2, #4
 8002a38:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002a3a:	003b      	movs	r3, r7
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002a40:	003b      	movs	r3, r7
 8002a42:	2200      	movs	r2, #0
 8002a44:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002a46:	003b      	movs	r3, r7
 8002a48:	2200      	movs	r2, #0
 8002a4a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002a4c:	003b      	movs	r3, r7
 8002a4e:	2200      	movs	r2, #0
 8002a50:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8002a52:	003b      	movs	r3, r7
 8002a54:	2201      	movs	r2, #1
 8002a56:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a58:	003a      	movs	r2, r7
 8002a5a:	23a0      	movs	r3, #160	; 0xa0
 8002a5c:	05db      	lsls	r3, r3, #23
 8002a5e:	0011      	movs	r1, r2
 8002a60:	0018      	movs	r0, r3
 8002a62:	f00a f949 	bl	800ccf8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8002a66:	003b      	movs	r3, r7
 8002a68:	2208      	movs	r2, #8
 8002a6a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002a6c:	003b      	movs	r3, r7
 8002a6e:	2202      	movs	r2, #2
 8002a70:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002a72:	003b      	movs	r3, r7
 8002a74:	2200      	movs	r2, #0
 8002a76:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002a78:	003b      	movs	r3, r7
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002a7e:	003b      	movs	r3, r7
 8002a80:	2200      	movs	r2, #0
 8002a82:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8002a84:	003b      	movs	r3, r7
 8002a86:	2201      	movs	r2, #1
 8002a88:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a8a:	003a      	movs	r2, r7
 8002a8c:	23a0      	movs	r3, #160	; 0xa0
 8002a8e:	05db      	lsls	r3, r3, #23
 8002a90:	0011      	movs	r1, r2
 8002a92:	0018      	movs	r0, r3
 8002a94:	f00a f930 	bl	800ccf8 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8002a98:	2100      	movs	r1, #0
 8002a9a:	201c      	movs	r0, #28
 8002a9c:	f7ff fb36 	bl	800210c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8002aa0:	201c      	movs	r0, #28
 8002aa2:	f7ff fb19 	bl	80020d8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8002aa6:	193b      	adds	r3, r7, r4
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 57600;
 8002aac:	193b      	adds	r3, r7, r4
 8002aae:	22e1      	movs	r2, #225	; 0xe1
 8002ab0:	0212      	lsls	r2, r2, #8
 8002ab2:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8002ab4:	193b      	adds	r3, r7, r4
 8002ab6:	2280      	movs	r2, #128	; 0x80
 8002ab8:	0152      	lsls	r2, r2, #5
 8002aba:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002abc:	0021      	movs	r1, r4
 8002abe:	187b      	adds	r3, r7, r1
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002ac4:	187b      	adds	r3, r7, r1
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002aca:	187b      	adds	r3, r7, r1
 8002acc:	220c      	movs	r2, #12
 8002ace:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002ad0:	187b      	adds	r3, r7, r1
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002ad6:	187b      	adds	r3, r7, r1
 8002ad8:	2200      	movs	r2, #0
 8002ada:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART2, &USART_InitStruct);
 8002adc:	187b      	adds	r3, r7, r1
 8002ade:	4a16      	ldr	r2, [pc, #88]	; (8002b38 <MX_USART2_UART_Init+0x138>)
 8002ae0:	0019      	movs	r1, r3
 8002ae2:	0010      	movs	r0, r2
 8002ae4:	f00a fbd4 	bl	800d290 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8002ae8:	4b13      	ldr	r3, [pc, #76]	; (8002b38 <MX_USART2_UART_Init+0x138>)
 8002aea:	2100      	movs	r1, #0
 8002aec:	0018      	movs	r0, r3
 8002aee:	f7ff fb99 	bl	8002224 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8002af2:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <MX_USART2_UART_Init+0x138>)
 8002af4:	2100      	movs	r1, #0
 8002af6:	0018      	movs	r0, r3
 8002af8:	f7ff fba6 	bl	8002248 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART2);
 8002afc:	4b0e      	ldr	r3, [pc, #56]	; (8002b38 <MX_USART2_UART_Init+0x138>)
 8002afe:	0018      	movs	r0, r3
 8002b00:	f7ff fb80 	bl	8002204 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART2);
 8002b04:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <MX_USART2_UART_Init+0x138>)
 8002b06:	0018      	movs	r0, r3
 8002b08:	f7ff fbb2 	bl	8002270 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 8002b0c:	4b0a      	ldr	r3, [pc, #40]	; (8002b38 <MX_USART2_UART_Init+0x138>)
 8002b0e:	0018      	movs	r0, r3
 8002b10:	f7ff fb6a 	bl	80021e8 <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 8002b14:	46c0      	nop			; (mov r8, r8)
 8002b16:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <MX_USART2_UART_Init+0x138>)
 8002b18:	0018      	movs	r0, r3
 8002b1a:	f7ff fbc1 	bl	80022a0 <LL_USART_IsActiveFlag_TEACK>
 8002b1e:	1e03      	subs	r3, r0, #0
 8002b20:	d0f9      	beq.n	8002b16 <MX_USART2_UART_Init+0x116>
 8002b22:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <MX_USART2_UART_Init+0x138>)
 8002b24:	0018      	movs	r0, r3
 8002b26:	f7ff fbcf 	bl	80022c8 <LL_USART_IsActiveFlag_REACK>
 8002b2a:	1e03      	subs	r3, r0, #0
 8002b2c:	d0f3      	beq.n	8002b16 <MX_USART2_UART_Init+0x116>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b2e:	46c0      	nop			; (mov r8, r8)
 8002b30:	46c0      	nop			; (mov r8, r8)
 8002b32:	46bd      	mov	sp, r7
 8002b34:	b00f      	add	sp, #60	; 0x3c
 8002b36:	bd90      	pop	{r4, r7, pc}
 8002b38:	40004400 	.word	0x40004400

08002b3c <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */
//	USART3->CR2 &= ~(USART_CR1_UE);
	USART3->CR2|=USART_CR2_MSBFIRST;
 8002b40:	4b1c      	ldr	r3, [pc, #112]	; (8002bb4 <MX_USART3_Init+0x78>)
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	4b1b      	ldr	r3, [pc, #108]	; (8002bb4 <MX_USART3_Init+0x78>)
 8002b46:	2180      	movs	r1, #128	; 0x80
 8002b48:	0309      	lsls	r1, r1, #12
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8002b4e:	4b1a      	ldr	r3, [pc, #104]	; (8002bb8 <MX_USART3_Init+0x7c>)
 8002b50:	4a18      	ldr	r2, [pc, #96]	; (8002bb4 <MX_USART3_Init+0x78>)
 8002b52:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 8100000;
 8002b54:	4b18      	ldr	r3, [pc, #96]	; (8002bb8 <MX_USART3_Init+0x7c>)
 8002b56:	4a19      	ldr	r2, [pc, #100]	; (8002bbc <MX_USART3_Init+0x80>)
 8002b58:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8002b5a:	4b17      	ldr	r3, [pc, #92]	; (8002bb8 <MX_USART3_Init+0x7c>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8002b60:	4b15      	ldr	r3, [pc, #84]	; (8002bb8 <MX_USART3_Init+0x7c>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8002b66:	4b14      	ldr	r3, [pc, #80]	; (8002bb8 <MX_USART3_Init+0x7c>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX;
 8002b6c:	4b12      	ldr	r3, [pc, #72]	; (8002bb8 <MX_USART3_Init+0x7c>)
 8002b6e:	2208      	movs	r2, #8
 8002b70:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_HIGH;
 8002b72:	4b11      	ldr	r3, [pc, #68]	; (8002bb8 <MX_USART3_Init+0x7c>)
 8002b74:	2280      	movs	r2, #128	; 0x80
 8002b76:	00d2      	lsls	r2, r2, #3
 8002b78:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_2EDGE;
 8002b7a:	4b0f      	ldr	r3, [pc, #60]	; (8002bb8 <MX_USART3_Init+0x7c>)
 8002b7c:	2280      	movs	r2, #128	; 0x80
 8002b7e:	0092      	lsls	r2, r2, #2
 8002b80:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_ENABLE;
 8002b82:	4b0d      	ldr	r3, [pc, #52]	; (8002bb8 <MX_USART3_Init+0x7c>)
 8002b84:	2280      	movs	r2, #128	; 0x80
 8002b86:	0052      	lsls	r2, r2, #1
 8002b88:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8002b8a:	4b0b      	ldr	r3, [pc, #44]	; (8002bb8 <MX_USART3_Init+0x7c>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 8002b90:	4b09      	ldr	r3, [pc, #36]	; (8002bb8 <MX_USART3_Init+0x7c>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8002b96:	4b08      	ldr	r3, [pc, #32]	; (8002bb8 <MX_USART3_Init+0x7c>)
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f009 f8bf 	bl	800bd1c <HAL_USART_Init>
 8002b9e:	1e03      	subs	r3, r0, #0
 8002ba0:	d001      	beq.n	8002ba6 <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 8002ba2:	f002 f879 	bl	8004c98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  husart3.Init.BaudRate = 8100000;
 8002ba6:	4b04      	ldr	r3, [pc, #16]	; (8002bb8 <MX_USART3_Init+0x7c>)
 8002ba8:	4a04      	ldr	r2, [pc, #16]	; (8002bbc <MX_USART3_Init+0x80>)
 8002baa:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 2 */

}
 8002bac:	46c0      	nop			; (mov r8, r8)
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	46c0      	nop			; (mov r8, r8)
 8002bb4:	40004800 	.word	0x40004800
 8002bb8:	20000294 	.word	0x20000294
 8002bbc:	007b98a0 	.word	0x007b98a0

08002bc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002bc6:	4b14      	ldr	r3, [pc, #80]	; (8002c18 <MX_DMA_Init+0x58>)
 8002bc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bca:	4b13      	ldr	r3, [pc, #76]	; (8002c18 <MX_DMA_Init+0x58>)
 8002bcc:	2101      	movs	r1, #1
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	639a      	str	r2, [r3, #56]	; 0x38
 8002bd2:	4b11      	ldr	r3, [pc, #68]	; (8002c18 <MX_DMA_Init+0x58>)
 8002bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	4013      	ands	r3, r2
 8002bda:	607b      	str	r3, [r7, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002bde:	2200      	movs	r2, #0
 8002be0:	2100      	movs	r1, #0
 8002be2:	2009      	movs	r0, #9
 8002be4:	f003 f8a6 	bl	8005d34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002be8:	2009      	movs	r0, #9
 8002bea:	f003 f8b8 	bl	8005d5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8002bee:	2200      	movs	r2, #0
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	200a      	movs	r0, #10
 8002bf4:	f003 f89e 	bl	8005d34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002bf8:	200a      	movs	r0, #10
 8002bfa:	f003 f8b0 	bl	8005d5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 0, 0);
 8002bfe:	2200      	movs	r2, #0
 8002c00:	2100      	movs	r1, #0
 8002c02:	200b      	movs	r0, #11
 8002c04:	f003 f896 	bl	8005d34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 8002c08:	200b      	movs	r0, #11
 8002c0a:	f003 f8a8 	bl	8005d5e <HAL_NVIC_EnableIRQ>

}
 8002c0e:	46c0      	nop			; (mov r8, r8)
 8002c10:	46bd      	mov	sp, r7
 8002c12:	b002      	add	sp, #8
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	40021000 	.word	0x40021000

08002c1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c22:	003b      	movs	r3, r7
 8002c24:	0018      	movs	r0, r3
 8002c26:	2318      	movs	r3, #24
 8002c28:	001a      	movs	r2, r3
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	f00a fbe2 	bl	800d3f4 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8002c30:	2002      	movs	r0, #2
 8002c32:	f7ff fbc5 	bl	80023c0 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8002c36:	2004      	movs	r0, #4
 8002c38:	f7ff fbc2 	bl	80023c0 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8002c3c:	2001      	movs	r0, #1
 8002c3e:	f7ff fbbf 	bl	80023c0 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(MEM_HOLD_GPIO_Port, MEM_HOLD_Pin);
 8002c42:	2380      	movs	r3, #128	; 0x80
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4aa0      	ldr	r2, [pc, #640]	; (8002ec8 <MX_GPIO_Init+0x2ac>)
 8002c48:	0019      	movs	r1, r3
 8002c4a:	0010      	movs	r0, r2
 8002c4c:	f7ff fb8a 	bl	8002364 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_WP_GPIO_Port, MEM_WP_Pin);
 8002c50:	2380      	movs	r3, #128	; 0x80
 8002c52:	01db      	lsls	r3, r3, #7
 8002c54:	4a9d      	ldr	r2, [pc, #628]	; (8002ecc <MX_GPIO_Init+0x2b0>)
 8002c56:	0019      	movs	r1, r3
 8002c58:	0010      	movs	r0, r2
 8002c5a:	f7ff fb83 	bl	8002364 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_CS_GPIO_Port, MEM_CS_Pin);
 8002c5e:	2380      	movs	r3, #128	; 0x80
 8002c60:	021b      	lsls	r3, r3, #8
 8002c62:	4a9a      	ldr	r2, [pc, #616]	; (8002ecc <MX_GPIO_Init+0x2b0>)
 8002c64:	0019      	movs	r1, r3
 8002c66:	0010      	movs	r0, r2
 8002c68:	f7ff fb7c 	bl	8002364 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_CS_GPIO_Port, DISP_CS_Pin);
 8002c6c:	23a0      	movs	r3, #160	; 0xa0
 8002c6e:	05db      	lsls	r3, r3, #23
 8002c70:	2140      	movs	r1, #64	; 0x40
 8002c72:	0018      	movs	r0, r3
 8002c74:	f7ff fb76 	bl	8002364 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_D_C_GPIO_Port, DISP_D_C_Pin);
 8002c78:	23a0      	movs	r3, #160	; 0xa0
 8002c7a:	05db      	lsls	r3, r3, #23
 8002c7c:	2180      	movs	r1, #128	; 0x80
 8002c7e:	0018      	movs	r0, r3
 8002c80:	f7ff fb70 	bl	8002364 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(BF_GPIO_Port, BF_Pin);
 8002c84:	4b91      	ldr	r3, [pc, #580]	; (8002ecc <MX_GPIO_Init+0x2b0>)
 8002c86:	2140      	movs	r1, #64	; 0x40
 8002c88:	0018      	movs	r0, r3
 8002c8a:	f7ff fb6b 	bl	8002364 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_1_GPIO_Port, TEST_1_Pin);
 8002c8e:	2380      	movs	r3, #128	; 0x80
 8002c90:	011a      	lsls	r2, r3, #4
 8002c92:	23a0      	movs	r3, #160	; 0xa0
 8002c94:	05db      	lsls	r3, r3, #23
 8002c96:	0011      	movs	r1, r2
 8002c98:	0018      	movs	r0, r3
 8002c9a:	f7ff fb6f 	bl	800237c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_2_GPIO_Port, TEST_2_Pin);
 8002c9e:	2380      	movs	r3, #128	; 0x80
 8002ca0:	015a      	lsls	r2, r3, #5
 8002ca2:	23a0      	movs	r3, #160	; 0xa0
 8002ca4:	05db      	lsls	r3, r3, #23
 8002ca6:	0011      	movs	r1, r2
 8002ca8:	0018      	movs	r0, r3
 8002caa:	f7ff fb67 	bl	800237c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = MEM_HOLD_Pin;
 8002cae:	003b      	movs	r3, r7
 8002cb0:	2280      	movs	r2, #128	; 0x80
 8002cb2:	0092      	lsls	r2, r2, #2
 8002cb4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002cb6:	003b      	movs	r3, r7
 8002cb8:	2201      	movs	r2, #1
 8002cba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002cbc:	003b      	movs	r3, r7
 8002cbe:	2203      	movs	r2, #3
 8002cc0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002cc2:	003b      	movs	r3, r7
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002cc8:	003b      	movs	r3, r7
 8002cca:	2200      	movs	r2, #0
 8002ccc:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_HOLD_GPIO_Port, &GPIO_InitStruct);
 8002cce:	003b      	movs	r3, r7
 8002cd0:	4a7d      	ldr	r2, [pc, #500]	; (8002ec8 <MX_GPIO_Init+0x2ac>)
 8002cd2:	0019      	movs	r1, r3
 8002cd4:	0010      	movs	r0, r2
 8002cd6:	f00a f80f 	bl	800ccf8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_WP_Pin;
 8002cda:	003b      	movs	r3, r7
 8002cdc:	2280      	movs	r2, #128	; 0x80
 8002cde:	01d2      	lsls	r2, r2, #7
 8002ce0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002ce2:	003b      	movs	r3, r7
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002ce8:	003b      	movs	r3, r7
 8002cea:	2200      	movs	r2, #0
 8002cec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002cee:	003b      	movs	r3, r7
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002cf4:	003b      	movs	r3, r7
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_WP_GPIO_Port, &GPIO_InitStruct);
 8002cfa:	003b      	movs	r3, r7
 8002cfc:	4a73      	ldr	r2, [pc, #460]	; (8002ecc <MX_GPIO_Init+0x2b0>)
 8002cfe:	0019      	movs	r1, r3
 8002d00:	0010      	movs	r0, r2
 8002d02:	f009 fff9 	bl	800ccf8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_CS_Pin;
 8002d06:	003b      	movs	r3, r7
 8002d08:	2280      	movs	r2, #128	; 0x80
 8002d0a:	0212      	lsls	r2, r2, #8
 8002d0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002d0e:	003b      	movs	r3, r7
 8002d10:	2201      	movs	r2, #1
 8002d12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002d14:	003b      	movs	r3, r7
 8002d16:	2200      	movs	r2, #0
 8002d18:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002d1a:	003b      	movs	r3, r7
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002d20:	003b      	movs	r3, r7
 8002d22:	2200      	movs	r2, #0
 8002d24:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_CS_GPIO_Port, &GPIO_InitStruct);
 8002d26:	003b      	movs	r3, r7
 8002d28:	4a68      	ldr	r2, [pc, #416]	; (8002ecc <MX_GPIO_Init+0x2b0>)
 8002d2a:	0019      	movs	r1, r3
 8002d2c:	0010      	movs	r0, r2
 8002d2e:	f009 ffe3 	bl	800ccf8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_1_Pin;
 8002d32:	003b      	movs	r3, r7
 8002d34:	2201      	movs	r2, #1
 8002d36:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002d38:	003b      	movs	r3, r7
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002d3e:	003b      	movs	r3, r7
 8002d40:	2201      	movs	r2, #1
 8002d42:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_1_GPIO_Port, &GPIO_InitStruct);
 8002d44:	003a      	movs	r2, r7
 8002d46:	23a0      	movs	r3, #160	; 0xa0
 8002d48:	05db      	lsls	r3, r3, #23
 8002d4a:	0011      	movs	r1, r2
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	f009 ffd3 	bl	800ccf8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_2_Pin;
 8002d52:	003b      	movs	r3, r7
 8002d54:	2202      	movs	r2, #2
 8002d56:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002d58:	003b      	movs	r3, r7
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002d5e:	003b      	movs	r3, r7
 8002d60:	2201      	movs	r2, #1
 8002d62:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_2_GPIO_Port, &GPIO_InitStruct);
 8002d64:	003a      	movs	r2, r7
 8002d66:	23a0      	movs	r3, #160	; 0xa0
 8002d68:	05db      	lsls	r3, r3, #23
 8002d6a:	0011      	movs	r1, r2
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	f009 ffc3 	bl	800ccf8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_3_Pin;
 8002d72:	003b      	movs	r3, r7
 8002d74:	2210      	movs	r2, #16
 8002d76:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002d78:	003b      	movs	r3, r7
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002d7e:	003b      	movs	r3, r7
 8002d80:	2201      	movs	r2, #1
 8002d82:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_3_GPIO_Port, &GPIO_InitStruct);
 8002d84:	003a      	movs	r2, r7
 8002d86:	23a0      	movs	r3, #160	; 0xa0
 8002d88:	05db      	lsls	r3, r3, #23
 8002d8a:	0011      	movs	r1, r2
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	f009 ffb3 	bl	800ccf8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 8002d92:	003b      	movs	r3, r7
 8002d94:	2240      	movs	r2, #64	; 0x40
 8002d96:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002d98:	003b      	movs	r3, r7
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002d9e:	003b      	movs	r3, r7
 8002da0:	2203      	movs	r2, #3
 8002da2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002da4:	003b      	movs	r3, r7
 8002da6:	2200      	movs	r2, #0
 8002da8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002daa:	003b      	movs	r3, r7
 8002dac:	2200      	movs	r2, #0
 8002dae:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 8002db0:	003a      	movs	r2, r7
 8002db2:	23a0      	movs	r3, #160	; 0xa0
 8002db4:	05db      	lsls	r3, r3, #23
 8002db6:	0011      	movs	r1, r2
 8002db8:	0018      	movs	r0, r3
 8002dba:	f009 ff9d 	bl	800ccf8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_D_C_Pin;
 8002dbe:	003b      	movs	r3, r7
 8002dc0:	2280      	movs	r2, #128	; 0x80
 8002dc2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002dc4:	003b      	movs	r3, r7
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002dca:	003b      	movs	r3, r7
 8002dcc:	2203      	movs	r2, #3
 8002dce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002dd0:	003b      	movs	r3, r7
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002dd6:	003b      	movs	r3, r7
 8002dd8:	2200      	movs	r2, #0
 8002dda:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_D_C_GPIO_Port, &GPIO_InitStruct);
 8002ddc:	003a      	movs	r2, r7
 8002dde:	23a0      	movs	r3, #160	; 0xa0
 8002de0:	05db      	lsls	r3, r3, #23
 8002de2:	0011      	movs	r1, r2
 8002de4:	0018      	movs	r0, r3
 8002de6:	f009 ff87 	bl	800ccf8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BF_Pin;
 8002dea:	003b      	movs	r3, r7
 8002dec:	2240      	movs	r2, #64	; 0x40
 8002dee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002df0:	003b      	movs	r3, r7
 8002df2:	2201      	movs	r2, #1
 8002df4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002df6:	003b      	movs	r3, r7
 8002df8:	2203      	movs	r2, #3
 8002dfa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002dfc:	003b      	movs	r3, r7
 8002dfe:	2200      	movs	r2, #0
 8002e00:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002e02:	003b      	movs	r3, r7
 8002e04:	2200      	movs	r2, #0
 8002e06:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BF_GPIO_Port, &GPIO_InitStruct);
 8002e08:	003b      	movs	r3, r7
 8002e0a:	4a30      	ldr	r2, [pc, #192]	; (8002ecc <MX_GPIO_Init+0x2b0>)
 8002e0c:	0019      	movs	r1, r3
 8002e0e:	0010      	movs	r0, r2
 8002e10:	f009 ff72 	bl	800ccf8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_1_Pin;
 8002e14:	003b      	movs	r3, r7
 8002e16:	2280      	movs	r2, #128	; 0x80
 8002e18:	0112      	lsls	r2, r2, #4
 8002e1a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002e1c:	003b      	movs	r3, r7
 8002e1e:	2201      	movs	r2, #1
 8002e20:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002e22:	003b      	movs	r3, r7
 8002e24:	2203      	movs	r2, #3
 8002e26:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002e28:	003b      	movs	r3, r7
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002e2e:	003b      	movs	r3, r7
 8002e30:	2200      	movs	r2, #0
 8002e32:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_1_GPIO_Port, &GPIO_InitStruct);
 8002e34:	003a      	movs	r2, r7
 8002e36:	23a0      	movs	r3, #160	; 0xa0
 8002e38:	05db      	lsls	r3, r3, #23
 8002e3a:	0011      	movs	r1, r2
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	f009 ff5b 	bl	800ccf8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_2_Pin;
 8002e42:	003b      	movs	r3, r7
 8002e44:	2280      	movs	r2, #128	; 0x80
 8002e46:	0152      	lsls	r2, r2, #5
 8002e48:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002e4a:	003b      	movs	r3, r7
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002e50:	003b      	movs	r3, r7
 8002e52:	2203      	movs	r2, #3
 8002e54:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002e56:	003b      	movs	r3, r7
 8002e58:	2200      	movs	r2, #0
 8002e5a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002e5c:	003b      	movs	r3, r7
 8002e5e:	2200      	movs	r2, #0
 8002e60:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_2_GPIO_Port, &GPIO_InitStruct);
 8002e62:	003a      	movs	r2, r7
 8002e64:	23a0      	movs	r3, #160	; 0xa0
 8002e66:	05db      	lsls	r3, r3, #23
 8002e68:	0011      	movs	r1, r2
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	f009 ff44 	bl	800ccf8 <LL_GPIO_Init>
  	  GPIO_InitStruct.Pin = KEY_4_Pin;
 8002e70:	003b      	movs	r3, r7
 8002e72:	2280      	movs	r2, #128	; 0x80
 8002e74:	0192      	lsls	r2, r2, #6
 8002e76:	601a      	str	r2, [r3, #0]
  	  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002e78:	003b      	movs	r3, r7
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	605a      	str	r2, [r3, #4]
  	  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002e7e:	003b      	movs	r3, r7
 8002e80:	2201      	movs	r2, #1
 8002e82:	611a      	str	r2, [r3, #16]
  	  LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 8002e84:	003a      	movs	r2, r7
 8002e86:	23a0      	movs	r3, #160	; 0xa0
 8002e88:	05db      	lsls	r3, r3, #23
 8002e8a:	0011      	movs	r1, r2
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	f009 ff33 	bl	800ccf8 <LL_GPIO_Init>
  	  /**/
  	    GPIO_InitStruct.Pin = KEY_5_Pin;
 8002e92:	003b      	movs	r3, r7
 8002e94:	2280      	movs	r2, #128	; 0x80
 8002e96:	01d2      	lsls	r2, r2, #7
 8002e98:	601a      	str	r2, [r3, #0]
  	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002e9a:	003b      	movs	r3, r7
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	605a      	str	r2, [r3, #4]
  	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002ea0:	003b      	movs	r3, r7
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	611a      	str	r2, [r3, #16]
  	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 8002ea6:	003a      	movs	r2, r7
 8002ea8:	23a0      	movs	r3, #160	; 0xa0
 8002eaa:	05db      	lsls	r3, r3, #23
 8002eac:	0011      	movs	r1, r2
 8002eae:	0018      	movs	r0, r3
 8002eb0:	f009 ff22 	bl	800ccf8 <LL_GPIO_Init>
  /**/
  LL_SYSCFG_EnableFastModePlus(LL_SYSCFG_I2C_FASTMODEPLUS_PB9);
 8002eb4:	2380      	movs	r3, #128	; 0x80
 8002eb6:	031b      	lsls	r3, r3, #12
 8002eb8:	0018      	movs	r0, r3
 8002eba:	f7ff fa43 	bl	8002344 <LL_SYSCFG_EnableFastModePlus>

}
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	b006      	add	sp, #24
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	46c0      	nop			; (mov r8, r8)
 8002ec8:	50000400 	.word	0x50000400
 8002ecc:	50000800 	.word	0x50000800

08002ed0 <USART2_RX_Callback>:
//	    GPIO_InitStruct.Pin = KEY_5_Pin;
//	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
//	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
//	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
void  USART2_RX_Callback(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0

  dt1 = LL_USART_ReceiveData9(USART2);// LL implementaion of 1 byte receive
 8002ed4:	4b16      	ldr	r3, [pc, #88]	; (8002f30 <USART2_RX_Callback+0x60>)
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	f7ff fa26 	bl	8002328 <LL_USART_ReceiveData9>
 8002edc:	0003      	movs	r3, r0
 8002ede:	001a      	movs	r2, r3
 8002ee0:	4b14      	ldr	r3, [pc, #80]	; (8002f34 <USART2_RX_Callback+0x64>)
 8002ee2:	801a      	strh	r2, [r3, #0]
	dt1 = (uint16_t)(USART2->RDR & 0x01FF);//CMSIS implementaion of 1 byte receive
 8002ee4:	4b12      	ldr	r3, [pc, #72]	; (8002f30 <USART2_RX_Callback+0x60>)
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	05db      	lsls	r3, r3, #23
 8002eec:	0ddb      	lsrs	r3, r3, #23
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	4b10      	ldr	r3, [pc, #64]	; (8002f34 <USART2_RX_Callback+0x64>)
 8002ef2:	801a      	strh	r2, [r3, #0]
  ByteReceived=1;
 8002ef4:	4b10      	ldr	r3, [pc, #64]	; (8002f38 <USART2_RX_Callback+0x68>)
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	701a      	strb	r2, [r3, #0]
  if(dt1>0xFF){
 8002efa:	4b0e      	ldr	r3, [pc, #56]	; (8002f34 <USART2_RX_Callback+0x64>)
 8002efc:	881b      	ldrh	r3, [r3, #0]
 8002efe:	2bff      	cmp	r3, #255	; 0xff
 8002f00:	d90a      	bls.n	8002f18 <USART2_RX_Callback+0x48>
	  cmd[0]=dt1;
 8002f02:	4b0c      	ldr	r3, [pc, #48]	; (8002f34 <USART2_RX_Callback+0x64>)
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	4b0c      	ldr	r3, [pc, #48]	; (8002f3c <USART2_RX_Callback+0x6c>)
 8002f0a:	701a      	strb	r2, [r3, #0]
	  ind = 0;
 8002f0c:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <USART2_RX_Callback+0x70>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	801a      	strh	r2, [r3, #0]
	  firstByteReceived=1;
 8002f12:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <USART2_RX_Callback+0x74>)
 8002f14:	2201      	movs	r2, #1
 8002f16:	701a      	strb	r2, [r3, #0]
//  while (!LL_USART_IsActiveFlag_TXE(USART2)) {}
//  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
  }
//  cmdReceive();
  if(firstByteReceived==1){
 8002f18:	4b0a      	ldr	r3, [pc, #40]	; (8002f44 <USART2_RX_Callback+0x74>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d104      	bne.n	8002f2a <USART2_RX_Callback+0x5a>
	  cmdReceive(dt1);
 8002f20:	4b04      	ldr	r3, [pc, #16]	; (8002f34 <USART2_RX_Callback+0x64>)
 8002f22:	881b      	ldrh	r3, [r3, #0]
 8002f24:	0018      	movs	r0, r3
 8002f26:	f000 f87f 	bl	8003028 <cmdReceive>
  }
}
 8002f2a:	46c0      	nop			; (mov r8, r8)
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40004400 	.word	0x40004400
 8002f34:	200004ea 	.word	0x200004ea
 8002f38:	20000060 	.word	0x20000060
 8002f3c:	200024f0 	.word	0x200024f0
 8002f40:	20000062 	.word	0x20000062
 8002f44:	20000061 	.word	0x20000061

08002f48 <HAL_SPI_RxHalfCpltCallback>:
//====================================================================================================================
void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi2)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  	GPIOA->ODR |= 1 << 11;	//set test 1
 8002f50:	23a0      	movs	r3, #160	; 0xa0
 8002f52:	05db      	lsls	r3, r3, #23
 8002f54:	695a      	ldr	r2, [r3, #20]
 8002f56:	23a0      	movs	r3, #160	; 0xa0
 8002f58:	05db      	lsls	r3, r3, #23
 8002f5a:	2180      	movs	r1, #128	; 0x80
 8002f5c:	0109      	lsls	r1, r1, #4
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	615a      	str	r2, [r3, #20]
  	GPIOA->ODR &= ~(1 << 11);	//reset test 1
 8002f62:	23a0      	movs	r3, #160	; 0xa0
 8002f64:	05db      	lsls	r3, r3, #23
 8002f66:	695a      	ldr	r2, [r3, #20]
 8002f68:	23a0      	movs	r3, #160	; 0xa0
 8002f6a:	05db      	lsls	r3, r3, #23
 8002f6c:	490e      	ldr	r1, [pc, #56]	; (8002fa8 <HAL_SPI_RxHalfCpltCallback+0x60>)
 8002f6e:	400a      	ands	r2, r1
 8002f70:	615a      	str	r2, [r3, #20]
//  	if(cmd2Execute==0x11){
  	GPIOA->ODR &= ~(1 << 6);	//reset cs of DISPLAY
 8002f72:	23a0      	movs	r3, #160	; 0xa0
 8002f74:	05db      	lsls	r3, r3, #23
 8002f76:	695a      	ldr	r2, [r3, #20]
 8002f78:	23a0      	movs	r3, #160	; 0xa0
 8002f7a:	05db      	lsls	r3, r3, #23
 8002f7c:	2140      	movs	r1, #64	; 0x40
 8002f7e:	438a      	bics	r2, r1
 8002f80:	615a      	str	r2, [r3, #20]
  		GPIOA->ODR |= 1 << 7;	//set   dc of DISPLAY
 8002f82:	23a0      	movs	r3, #160	; 0xa0
 8002f84:	05db      	lsls	r3, r3, #23
 8002f86:	695a      	ldr	r2, [r3, #20]
 8002f88:	23a0      	movs	r3, #160	; 0xa0
 8002f8a:	05db      	lsls	r3, r3, #23
 8002f8c:	2180      	movs	r1, #128	; 0x80
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	615a      	str	r2, [r3, #20]
  		HAL_USART_Transmit_DMA(&husart3, MEM_Buffer,len);
 8002f92:	4b06      	ldr	r3, [pc, #24]	; (8002fac <HAL_SPI_RxHalfCpltCallback+0x64>)
 8002f94:	881a      	ldrh	r2, [r3, #0]
 8002f96:	4906      	ldr	r1, [pc, #24]	; (8002fb0 <HAL_SPI_RxHalfCpltCallback+0x68>)
 8002f98:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <HAL_SPI_RxHalfCpltCallback+0x6c>)
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f008 ffcc 	bl	800bf38 <HAL_USART_Transmit_DMA>
//  	if(cmd2Execute==0x13){
//
////  	  		HAL_SPI_Transmit_DMA(&hspi1, MEM_Buffer,len);
//  	  	}

}
 8002fa0:	46c0      	nop			; (mov r8, r8)
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	b002      	add	sp, #8
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	fffff7ff 	.word	0xfffff7ff
 8002fac:	200004e8 	.word	0x200004e8
 8002fb0:	200004f0 	.word	0x200004f0
 8002fb4:	20000294 	.word	0x20000294

08002fb8 <HAL_SPI_RxCpltCallback>:
//==========================================================
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi2)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
//	if(cmd2Execute==0x11){
		GPIOC->ODR |= 1 << 15; // set cs
 8002fc0:	4b05      	ldr	r3, [pc, #20]	; (8002fd8 <HAL_SPI_RxCpltCallback+0x20>)
 8002fc2:	695a      	ldr	r2, [r3, #20]
 8002fc4:	4b04      	ldr	r3, [pc, #16]	; (8002fd8 <HAL_SPI_RxCpltCallback+0x20>)
 8002fc6:	2180      	movs	r1, #128	; 0x80
 8002fc8:	0209      	lsls	r1, r1, #8
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	615a      	str	r2, [r3, #20]
//	}
//	if(cmd2Execute==0x13){
//
//	}
}
 8002fce:	46c0      	nop			; (mov r8, r8)
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	b002      	add	sp, #8
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	46c0      	nop			; (mov r8, r8)
 8002fd8:	50000800 	.word	0x50000800

08002fdc <HAL_USART_TxCpltCallback>:
//==============================================================
void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart3)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
	GPIOA->ODR &= ~(1 << 7);	//reset dc
 8002fe4:	23a0      	movs	r3, #160	; 0xa0
 8002fe6:	05db      	lsls	r3, r3, #23
 8002fe8:	695a      	ldr	r2, [r3, #20]
 8002fea:	23a0      	movs	r3, #160	; 0xa0
 8002fec:	05db      	lsls	r3, r3, #23
 8002fee:	2180      	movs	r1, #128	; 0x80
 8002ff0:	438a      	bics	r2, r1
 8002ff2:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= 1 << 6;	//set cs
 8002ff4:	23a0      	movs	r3, #160	; 0xa0
 8002ff6:	05db      	lsls	r3, r3, #23
 8002ff8:	695a      	ldr	r2, [r3, #20]
 8002ffa:	23a0      	movs	r3, #160	; 0xa0
 8002ffc:	05db      	lsls	r3, r3, #23
 8002ffe:	2140      	movs	r1, #64	; 0x40
 8003000:	430a      	orrs	r2, r1
 8003002:	615a      	str	r2, [r3, #20]

	GPIOC->ODR |= 1 << 6;	//set BF
 8003004:	4b06      	ldr	r3, [pc, #24]	; (8003020 <HAL_USART_TxCpltCallback+0x44>)
 8003006:	695a      	ldr	r2, [r3, #20]
 8003008:	4b05      	ldr	r3, [pc, #20]	; (8003020 <HAL_USART_TxCpltCallback+0x44>)
 800300a:	2140      	movs	r1, #64	; 0x40
 800300c:	430a      	orrs	r2, r1
 800300e:	615a      	str	r2, [r3, #20]
	cmd2Execute=0;
 8003010:	4b04      	ldr	r3, [pc, #16]	; (8003024 <HAL_USART_TxCpltCallback+0x48>)
 8003012:	2200      	movs	r2, #0
 8003014:	701a      	strb	r2, [r3, #0]
}
 8003016:	46c0      	nop			; (mov r8, r8)
 8003018:	46bd      	mov	sp, r7
 800301a:	b002      	add	sp, #8
 800301c:	bd80      	pop	{r7, pc}
 800301e:	46c0      	nop			; (mov r8, r8)
 8003020:	50000800 	.word	0x50000800
 8003024:	20000366 	.word	0x20000366

08003028 <cmdReceive>:
//	GPIOC->ODR |= 1 << 6;	//set BF
//	cmd2Execute=0;
}
//==============================================================
	void cmdReceive (uint16_t dt1)
	{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	0002      	movs	r2, r0
 8003030:	1dbb      	adds	r3, r7, #6
 8003032:	801a      	strh	r2, [r3, #0]
//	  uint8_t inputCS=0;
	  uint8_t i=0;
 8003034:	230f      	movs	r3, #15
 8003036:	18fb      	adds	r3, r7, r3
 8003038:	2200      	movs	r2, #0
 800303a:	701a      	strb	r2, [r3, #0]
	  while (!ByteReceived) {}
 800303c:	46c0      	nop			; (mov r8, r8)
 800303e:	4b2b      	ldr	r3, [pc, #172]	; (80030ec <cmdReceive+0xc4>)
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d0fb      	beq.n	800303e <cmdReceive+0x16>
	  ByteReceived=0;
 8003046:	4b29      	ldr	r3, [pc, #164]	; (80030ec <cmdReceive+0xc4>)
 8003048:	2200      	movs	r2, #0
 800304a:	701a      	strb	r2, [r3, #0]
	  cmd[ind] = dt1;
 800304c:	4b28      	ldr	r3, [pc, #160]	; (80030f0 <cmdReceive+0xc8>)
 800304e:	881b      	ldrh	r3, [r3, #0]
 8003050:	001a      	movs	r2, r3
 8003052:	1dbb      	adds	r3, r7, #6
 8003054:	881b      	ldrh	r3, [r3, #0]
 8003056:	b2d9      	uxtb	r1, r3
 8003058:	4b26      	ldr	r3, [pc, #152]	; (80030f4 <cmdReceive+0xcc>)
 800305a:	5499      	strb	r1, [r3, r2]
	  ind++;
 800305c:	4b24      	ldr	r3, [pc, #144]	; (80030f0 <cmdReceive+0xc8>)
 800305e:	881b      	ldrh	r3, [r3, #0]
 8003060:	3301      	adds	r3, #1
 8003062:	b29a      	uxth	r2, r3
 8003064:	4b22      	ldr	r3, [pc, #136]	; (80030f0 <cmdReceive+0xc8>)
 8003066:	801a      	strh	r2, [r3, #0]
	  if(ind>=1){
 8003068:	4b21      	ldr	r3, [pc, #132]	; (80030f0 <cmdReceive+0xc8>)
 800306a:	881b      	ldrh	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d033      	beq.n	80030d8 <cmdReceive+0xb0>
//		  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
		  if(ind>cmd[1]+1){
 8003070:	4b1f      	ldr	r3, [pc, #124]	; (80030f0 <cmdReceive+0xc8>)
 8003072:	881b      	ldrh	r3, [r3, #0]
 8003074:	001a      	movs	r2, r3
 8003076:	4b1f      	ldr	r3, [pc, #124]	; (80030f4 <cmdReceive+0xcc>)
 8003078:	785b      	ldrb	r3, [r3, #1]
 800307a:	3301      	adds	r3, #1
 800307c:	429a      	cmp	r2, r3
 800307e:	dd2b      	ble.n	80030d8 <cmdReceive+0xb0>
//			  LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 for(i=0;i<(cmd[1]+2);i++){
 8003080:	230f      	movs	r3, #15
 8003082:	18fb      	adds	r3, r7, r3
 8003084:	2200      	movs	r2, #0
 8003086:	701a      	strb	r2, [r3, #0]
 8003088:	e00f      	b.n	80030aa <cmdReceive+0x82>
				 inputCS+=cmd[i];
 800308a:	210f      	movs	r1, #15
 800308c:	187b      	adds	r3, r7, r1
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	4a18      	ldr	r2, [pc, #96]	; (80030f4 <cmdReceive+0xcc>)
 8003092:	5cd2      	ldrb	r2, [r2, r3]
 8003094:	4b18      	ldr	r3, [pc, #96]	; (80030f8 <cmdReceive+0xd0>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	18d3      	adds	r3, r2, r3
 800309a:	b2da      	uxtb	r2, r3
 800309c:	4b16      	ldr	r3, [pc, #88]	; (80030f8 <cmdReceive+0xd0>)
 800309e:	701a      	strb	r2, [r3, #0]
			 for(i=0;i<(cmd[1]+2);i++){
 80030a0:	187b      	adds	r3, r7, r1
 80030a2:	781a      	ldrb	r2, [r3, #0]
 80030a4:	187b      	adds	r3, r7, r1
 80030a6:	3201      	adds	r2, #1
 80030a8:	701a      	strb	r2, [r3, #0]
 80030aa:	4b12      	ldr	r3, [pc, #72]	; (80030f4 <cmdReceive+0xcc>)
 80030ac:	785b      	ldrb	r3, [r3, #1]
 80030ae:	1c5a      	adds	r2, r3, #1
 80030b0:	210f      	movs	r1, #15
 80030b2:	187b      	adds	r3, r7, r1
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	dae7      	bge.n	800308a <cmdReceive+0x62>
			 }
			 if((inputCS==0)&&(i==cmd[1]+2)){
 80030ba:	4b0f      	ldr	r3, [pc, #60]	; (80030f8 <cmdReceive+0xd0>)
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10a      	bne.n	80030d8 <cmdReceive+0xb0>
 80030c2:	187b      	adds	r3, r7, r1
 80030c4:	781a      	ldrb	r2, [r3, #0]
 80030c6:	4b0b      	ldr	r3, [pc, #44]	; (80030f4 <cmdReceive+0xcc>)
 80030c8:	785b      	ldrb	r3, [r3, #1]
 80030ca:	3302      	adds	r3, #2
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d103      	bne.n	80030d8 <cmdReceive+0xb0>
//			 	LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 	answer2CPU(cmd);
 80030d0:	4b08      	ldr	r3, [pc, #32]	; (80030f4 <cmdReceive+0xcc>)
 80030d2:	0018      	movs	r0, r3
 80030d4:	f000 fb2c 	bl	8003730 <answer2CPU>
			 }
		  }
	  }
//	  ind = 0;
	  USART2->ICR|=USART_ICR_ORECF;
 80030d8:	4b08      	ldr	r3, [pc, #32]	; (80030fc <cmdReceive+0xd4>)
 80030da:	6a1a      	ldr	r2, [r3, #32]
 80030dc:	4b07      	ldr	r3, [pc, #28]	; (80030fc <cmdReceive+0xd4>)
 80030de:	2108      	movs	r1, #8
 80030e0:	430a      	orrs	r2, r1
 80030e2:	621a      	str	r2, [r3, #32]
	}
 80030e4:	46c0      	nop			; (mov r8, r8)
 80030e6:	46bd      	mov	sp, r7
 80030e8:	b004      	add	sp, #16
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	20000060 	.word	0x20000060
 80030f0:	20000062 	.word	0x20000062
 80030f4:	200024f0 	.word	0x200024f0
 80030f8:	20000064 	.word	0x20000064
 80030fc:	40004400 	.word	0x40004400

08003100 <USART_AS_SPI_sendCMD>:
	void USART_AS_SPI_sendCMD(uint8_t byte) {
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	0002      	movs	r2, r0
 8003108:	1dfb      	adds	r3, r7, #7
 800310a:	701a      	strb	r2, [r3, #0]
			HAL_USART_Transmit(&husart3, (uint8_t*)&byte, 1, 10);
 800310c:	1df9      	adds	r1, r7, #7
 800310e:	4804      	ldr	r0, [pc, #16]	; (8003120 <USART_AS_SPI_sendCMD+0x20>)
 8003110:	230a      	movs	r3, #10
 8003112:	2201      	movs	r2, #1
 8003114:	f008 fe52 	bl	800bdbc <HAL_USART_Transmit>
		}
 8003118:	46c0      	nop			; (mov r8, r8)
 800311a:	46bd      	mov	sp, r7
 800311c:	b002      	add	sp, #8
 800311e:	bd80      	pop	{r7, pc}
 8003120:	20000294 	.word	0x20000294

08003124 <weoInit>:
	void USART_AS_SPI_sendDAT(uint8_t byte) //(Without CS and D/C)
	{
		HAL_USART_Transmit(&husart3, (uint8_t*) &byte, 1, 10);
	}
	void weoInit(void) {
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0

		USART3->CR1 &= ~(USART_CR1_UE);
 8003128:	4b32      	ldr	r3, [pc, #200]	; (80031f4 <weoInit+0xd0>)
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	4b31      	ldr	r3, [pc, #196]	; (80031f4 <weoInit+0xd0>)
 800312e:	2101      	movs	r1, #1
 8003130:	438a      	bics	r2, r1
 8003132:	601a      	str	r2, [r3, #0]
		USART3->CR2 |= USART_CR2_MSBFIRST;
 8003134:	4b2f      	ldr	r3, [pc, #188]	; (80031f4 <weoInit+0xd0>)
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	4b2e      	ldr	r3, [pc, #184]	; (80031f4 <weoInit+0xd0>)
 800313a:	2180      	movs	r1, #128	; 0x80
 800313c:	0309      	lsls	r1, r1, #12
 800313e:	430a      	orrs	r2, r1
 8003140:	605a      	str	r2, [r3, #4]
		USART3->CR1 |= USART_CR1_UE;
 8003142:	4b2c      	ldr	r3, [pc, #176]	; (80031f4 <weoInit+0xd0>)
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	4b2b      	ldr	r3, [pc, #172]	; (80031f4 <weoInit+0xd0>)
 8003148:	2101      	movs	r1, #1
 800314a:	430a      	orrs	r2, r1
 800314c:	601a      	str	r2, [r3, #0]

		HAL_Delay(1);
 800314e:	2001      	movs	r0, #1
 8003150:	f002 faaa 	bl	80056a8 <HAL_Delay>
		HAL_Delay(1);
 8003154:	2001      	movs	r0, #1
 8003156:	f002 faa7 	bl	80056a8 <HAL_Delay>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800315a:	4b27      	ldr	r3, [pc, #156]	; (80031f8 <weoInit+0xd4>)
 800315c:	2100      	movs	r1, #0
 800315e:	0018      	movs	r0, r3
 8003160:	f007 fd78 	bl	800ac54 <HAL_TIM_PWM_Start>
		HAL_Delay(1);
 8003164:	2001      	movs	r0, #1
 8003166:	f002 fa9f 	bl	80056a8 <HAL_Delay>

		GPIOA->ODR &= ~(1 << 6);	//reset cs
 800316a:	23a0      	movs	r3, #160	; 0xa0
 800316c:	05db      	lsls	r3, r3, #23
 800316e:	695a      	ldr	r2, [r3, #20]
 8003170:	23a0      	movs	r3, #160	; 0xa0
 8003172:	05db      	lsls	r3, r3, #23
 8003174:	2140      	movs	r1, #64	; 0x40
 8003176:	438a      	bics	r2, r1
 8003178:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1 << 7);	// reset dc
 800317a:	23a0      	movs	r3, #160	; 0xa0
 800317c:	05db      	lsls	r3, r3, #23
 800317e:	695a      	ldr	r2, [r3, #20]
 8003180:	23a0      	movs	r3, #160	; 0xa0
 8003182:	05db      	lsls	r3, r3, #23
 8003184:	2180      	movs	r1, #128	; 0x80
 8003186:	438a      	bics	r2, r1
 8003188:	615a      	str	r2, [r3, #20]
		USART_AS_SPI_sendCMD(0xAF);
 800318a:	20af      	movs	r0, #175	; 0xaf
 800318c:	f7ff ffb8 	bl	8003100 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA0);	//Set Re-map
 8003190:	20a0      	movs	r0, #160	; 0xa0
 8003192:	f7ff ffb5 	bl	8003100 <USART_AS_SPI_sendCMD>
//		USART_AS_SPI_sendCMD(0x54);
//		USART_AS_SPI_sendCMD(0b00010100);
		USART_AS_SPI_sendCMD(0x51); //	0x51 is a proper remap!
 8003196:	2051      	movs	r0, #81	; 0x51
 8003198:	f7ff ffb2 	bl	8003100 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 800319c:	2081      	movs	r0, #129	; 0x81
 800319e:	f7ff ffaf 	bl	8003100 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xFF);
 80031a2:	20ff      	movs	r0, #255	; 0xff
 80031a4:	f7ff ffac 	bl	8003100 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA1);	//Set Display Start Line
 80031a8:	20a1      	movs	r0, #161	; 0xa1
 80031aa:	f7ff ffa9 	bl	8003100 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 80031ae:	2000      	movs	r0, #0
 80031b0:	f7ff ffa6 	bl	8003100 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA2);	//Set Display Offset
 80031b4:	20a2      	movs	r0, #162	; 0xa2
 80031b6:	f7ff ffa3 	bl	8003100 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 80031ba:	2000      	movs	r0, #0
 80031bc:	f7ff ffa0 	bl	8003100 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA8);  // Select Multiplex Ratio
 80031c0:	20a8      	movs	r0, #168	; 0xa8
 80031c2:	f7ff ff9d 	bl	8003100 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x7F); // Default => 0x3F (1/64 Duty)	0x1F(1/32 Duty)
 80031c6:	207f      	movs	r0, #127	; 0x7f
 80031c8:	f7ff ff9a 	bl	8003100 <USART_AS_SPI_sendCMD>
		GPIOA->ODR |= 1 << 7;	//set dc
 80031cc:	23a0      	movs	r3, #160	; 0xa0
 80031ce:	05db      	lsls	r3, r3, #23
 80031d0:	695a      	ldr	r2, [r3, #20]
 80031d2:	23a0      	movs	r3, #160	; 0xa0
 80031d4:	05db      	lsls	r3, r3, #23
 80031d6:	2180      	movs	r1, #128	; 0x80
 80031d8:	430a      	orrs	r2, r1
 80031da:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= 1 << 6;	//set cs
 80031dc:	23a0      	movs	r3, #160	; 0xa0
 80031de:	05db      	lsls	r3, r3, #23
 80031e0:	695a      	ldr	r2, [r3, #20]
 80031e2:	23a0      	movs	r3, #160	; 0xa0
 80031e4:	05db      	lsls	r3, r3, #23
 80031e6:	2140      	movs	r1, #64	; 0x40
 80031e8:	430a      	orrs	r2, r1
 80031ea:	615a      	str	r2, [r3, #20]
		//=======================================================================================================
	}
 80031ec:	46c0      	nop			; (mov r8, r8)
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	46c0      	nop			; (mov r8, r8)
 80031f4:	40004800 	.word	0x40004800
 80031f8:	20000310 	.word	0x20000310

080031fc <weoClear>:
	void weoClear(void) {
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
		uint16_t i;

					GPIOA->ODR &= ~(1 << 6);	//reset cs
 8003202:	23a0      	movs	r3, #160	; 0xa0
 8003204:	05db      	lsls	r3, r3, #23
 8003206:	695a      	ldr	r2, [r3, #20]
 8003208:	23a0      	movs	r3, #160	; 0xa0
 800320a:	05db      	lsls	r3, r3, #23
 800320c:	2140      	movs	r1, #64	; 0x40
 800320e:	438a      	bics	r2, r1
 8003210:	615a      	str	r2, [r3, #20]
					GPIOA->ODR &= ~(1 << 7);	// reset dc
 8003212:	23a0      	movs	r3, #160	; 0xa0
 8003214:	05db      	lsls	r3, r3, #23
 8003216:	695a      	ldr	r2, [r3, #20]
 8003218:	23a0      	movs	r3, #160	; 0xa0
 800321a:	05db      	lsls	r3, r3, #23
 800321c:	2180      	movs	r1, #128	; 0x80
 800321e:	438a      	bics	r2, r1
 8003220:	615a      	str	r2, [r3, #20]
						USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 8003222:	2075      	movs	r0, #117	; 0x75
 8003224:	f7ff ff6c 	bl	8003100 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 8003228:	2000      	movs	r0, #0
 800322a:	f7ff ff69 	bl	8003100 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 800322e:	207f      	movs	r0, #127	; 0x7f
 8003230:	f7ff ff66 	bl	8003100 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 8003234:	2015      	movs	r0, #21
 8003236:	f7ff ff63 	bl	8003100 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 800323a:	2000      	movs	r0, #0
 800323c:	f7ff ff60 	bl	8003100 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 8003240:	207f      	movs	r0, #127	; 0x7f
 8003242:	f7ff ff5d 	bl	8003100 <USART_AS_SPI_sendCMD>
					GPIOA->ODR &= ~(1 << 6);	//reset cs
 8003246:	23a0      	movs	r3, #160	; 0xa0
 8003248:	05db      	lsls	r3, r3, #23
 800324a:	695a      	ldr	r2, [r3, #20]
 800324c:	23a0      	movs	r3, #160	; 0xa0
 800324e:	05db      	lsls	r3, r3, #23
 8003250:	2140      	movs	r1, #64	; 0x40
 8003252:	438a      	bics	r2, r1
 8003254:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 7;	// set dc
 8003256:	23a0      	movs	r3, #160	; 0xa0
 8003258:	05db      	lsls	r3, r3, #23
 800325a:	695a      	ldr	r2, [r3, #20]
 800325c:	23a0      	movs	r3, #160	; 0xa0
 800325e:	05db      	lsls	r3, r3, #23
 8003260:	2180      	movs	r1, #128	; 0x80
 8003262:	430a      	orrs	r2, r1
 8003264:	615a      	str	r2, [r3, #20]
					for (i = 0; i <= 8193;i++) {	//fullScreen + small reserve
 8003266:	1dbb      	adds	r3, r7, #6
 8003268:	2200      	movs	r2, #0
 800326a:	801a      	strh	r2, [r3, #0]
 800326c:	e00d      	b.n	800328a <weoClear+0x8e>
						while(!(USART3->ISR & USART_ISR_TXE)){};
 800326e:	46c0      	nop			; (mov r8, r8)
 8003270:	4b12      	ldr	r3, [pc, #72]	; (80032bc <weoClear+0xc0>)
 8003272:	69db      	ldr	r3, [r3, #28]
 8003274:	2280      	movs	r2, #128	; 0x80
 8003276:	4013      	ands	r3, r2
 8003278:	d0fa      	beq.n	8003270 <weoClear+0x74>
						USART3->TDR = (uint8_t) 0x00;
 800327a:	4b10      	ldr	r3, [pc, #64]	; (80032bc <weoClear+0xc0>)
 800327c:	2200      	movs	r2, #0
 800327e:	629a      	str	r2, [r3, #40]	; 0x28
					for (i = 0; i <= 8193;i++) {	//fullScreen + small reserve
 8003280:	1dbb      	adds	r3, r7, #6
 8003282:	881a      	ldrh	r2, [r3, #0]
 8003284:	1dbb      	adds	r3, r7, #6
 8003286:	3201      	adds	r2, #1
 8003288:	801a      	strh	r2, [r3, #0]
 800328a:	1dbb      	adds	r3, r7, #6
 800328c:	881b      	ldrh	r3, [r3, #0]
 800328e:	4a0c      	ldr	r2, [pc, #48]	; (80032c0 <weoClear+0xc4>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d9ec      	bls.n	800326e <weoClear+0x72>
					}
					GPIOA->ODR &= ~(1 << 7);	//reset dc
 8003294:	23a0      	movs	r3, #160	; 0xa0
 8003296:	05db      	lsls	r3, r3, #23
 8003298:	695a      	ldr	r2, [r3, #20]
 800329a:	23a0      	movs	r3, #160	; 0xa0
 800329c:	05db      	lsls	r3, r3, #23
 800329e:	2180      	movs	r1, #128	; 0x80
 80032a0:	438a      	bics	r2, r1
 80032a2:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 6;	//set cs
 80032a4:	23a0      	movs	r3, #160	; 0xa0
 80032a6:	05db      	lsls	r3, r3, #23
 80032a8:	695a      	ldr	r2, [r3, #20]
 80032aa:	23a0      	movs	r3, #160	; 0xa0
 80032ac:	05db      	lsls	r3, r3, #23
 80032ae:	2140      	movs	r1, #64	; 0x40
 80032b0:	430a      	orrs	r2, r1
 80032b2:	615a      	str	r2, [r3, #20]
	}
 80032b4:	46c0      	nop			; (mov r8, r8)
 80032b6:	46bd      	mov	sp, r7
 80032b8:	b002      	add	sp, #8
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40004800 	.word	0x40004800
 80032c0:	00002001 	.word	0x00002001

080032c4 <weoDrawRectangleFilled>:
//========================================================================================================================
	void weoDrawRectangleFilled(unsigned char start_x, unsigned char start_y,
				unsigned char end_x, unsigned char end_y, unsigned char color,
				uint8_t MEM_Buffer[]) {
 80032c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	0005      	movs	r5, r0
 80032cc:	000c      	movs	r4, r1
 80032ce:	0010      	movs	r0, r2
 80032d0:	0019      	movs	r1, r3
 80032d2:	1dfb      	adds	r3, r7, #7
 80032d4:	1c2a      	adds	r2, r5, #0
 80032d6:	701a      	strb	r2, [r3, #0]
 80032d8:	1dbb      	adds	r3, r7, #6
 80032da:	1c22      	adds	r2, r4, #0
 80032dc:	701a      	strb	r2, [r3, #0]
 80032de:	1d7b      	adds	r3, r7, #5
 80032e0:	1c02      	adds	r2, r0, #0
 80032e2:	701a      	strb	r2, [r3, #0]
 80032e4:	1d3b      	adds	r3, r7, #4
 80032e6:	1c0a      	adds	r2, r1, #0
 80032e8:	701a      	strb	r2, [r3, #0]
			uint16_t i = 0;
 80032ea:	240e      	movs	r4, #14
 80032ec:	193b      	adds	r3, r7, r4
 80032ee:	2200      	movs	r2, #0
 80032f0:	801a      	strh	r2, [r3, #0]
			uint8_t start_x_New,start_y_New,end_x_New,end_y_New;
			if (start_x > OLED_DIM_WIDTH || start_y > OLED_DIM_HEIGHT
 80032f2:	1dfb      	adds	r3, r7, #7
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	b25b      	sxtb	r3, r3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	da00      	bge.n	80032fe <weoDrawRectangleFilled+0x3a>
 80032fc:	e0bf      	b.n	800347e <weoDrawRectangleFilled+0x1ba>
 80032fe:	1dbb      	adds	r3, r7, #6
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	b25b      	sxtb	r3, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	da00      	bge.n	800330a <weoDrawRectangleFilled+0x46>
 8003308:	e0b9      	b.n	800347e <weoDrawRectangleFilled+0x1ba>
					|| end_x > OLED_DIM_WIDTH || end_y > OLED_DIM_HEIGHT) {
 800330a:	1d7b      	adds	r3, r7, #5
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	b25b      	sxtb	r3, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	da00      	bge.n	8003316 <weoDrawRectangleFilled+0x52>
 8003314:	e0b3      	b.n	800347e <weoDrawRectangleFilled+0x1ba>
 8003316:	1d3b      	adds	r3, r7, #4
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	b25b      	sxtb	r3, r3
 800331c:	2b00      	cmp	r3, #0
 800331e:	da00      	bge.n	8003322 <weoDrawRectangleFilled+0x5e>
 8003320:	e0ad      	b.n	800347e <weoDrawRectangleFilled+0x1ba>
				return;
			}


			start_x_New=start_x;
 8003322:	250d      	movs	r5, #13
 8003324:	197b      	adds	r3, r7, r5
 8003326:	1dfa      	adds	r2, r7, #7
 8003328:	7812      	ldrb	r2, [r2, #0]
 800332a:	701a      	strb	r2, [r3, #0]
			start_y_New=0x7F-end_y;
 800332c:	260c      	movs	r6, #12
 800332e:	19bb      	adds	r3, r7, r6
 8003330:	1d3a      	adds	r2, r7, #4
 8003332:	7812      	ldrb	r2, [r2, #0]
 8003334:	217f      	movs	r1, #127	; 0x7f
 8003336:	1a8a      	subs	r2, r1, r2
 8003338:	701a      	strb	r2, [r3, #0]
			end_x_New=end_x;
 800333a:	230b      	movs	r3, #11
 800333c:	18fb      	adds	r3, r7, r3
 800333e:	1d7a      	adds	r2, r7, #5
 8003340:	7812      	ldrb	r2, [r2, #0]
 8003342:	701a      	strb	r2, [r3, #0]
			end_y_New=0x7F-start_y;
 8003344:	220a      	movs	r2, #10
 8003346:	18bb      	adds	r3, r7, r2
 8003348:	1dba      	adds	r2, r7, #6
 800334a:	7812      	ldrb	r2, [r2, #0]
 800334c:	217f      	movs	r1, #127	; 0x7f
 800334e:	1a8a      	subs	r2, r1, r2
 8003350:	701a      	strb	r2, [r3, #0]

			GPIOA->ODR &= ~(1 << 6);	//reset cs
 8003352:	23a0      	movs	r3, #160	; 0xa0
 8003354:	05db      	lsls	r3, r3, #23
 8003356:	695a      	ldr	r2, [r3, #20]
 8003358:	23a0      	movs	r3, #160	; 0xa0
 800335a:	05db      	lsls	r3, r3, #23
 800335c:	2140      	movs	r1, #64	; 0x40
 800335e:	438a      	bics	r2, r1
 8003360:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 8003362:	23a0      	movs	r3, #160	; 0xa0
 8003364:	05db      	lsls	r3, r3, #23
 8003366:	695a      	ldr	r2, [r3, #20]
 8003368:	23a0      	movs	r3, #160	; 0xa0
 800336a:	05db      	lsls	r3, r3, #23
 800336c:	2180      	movs	r1, #128	; 0x80
 800336e:	438a      	bics	r2, r1
 8003370:	615a      	str	r2, [r3, #20]
					USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 8003372:	2075      	movs	r0, #117	; 0x75
 8003374:	f7ff fec4 	bl	8003100 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_x_New/1);
 8003378:	197b      	adds	r3, r7, r5
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	0018      	movs	r0, r3
 800337e:	f7ff febf 	bl	8003100 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_x_New/1);
 8003382:	230b      	movs	r3, #11
 8003384:	18fb      	adds	r3, r7, r3
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	0018      	movs	r0, r3
 800338a:	f7ff feb9 	bl	8003100 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 800338e:	2015      	movs	r0, #21
 8003390:	f7ff feb6 	bl	8003100 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_y_New/2);
 8003394:	19bb      	adds	r3, r7, r6
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	085b      	lsrs	r3, r3, #1
 800339a:	b2db      	uxtb	r3, r3
 800339c:	0018      	movs	r0, r3
 800339e:	f7ff feaf 	bl	8003100 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_y_New/2);
 80033a2:	220a      	movs	r2, #10
 80033a4:	18bb      	adds	r3, r7, r2
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	085b      	lsrs	r3, r3, #1
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	0018      	movs	r0, r3
 80033ae:	f7ff fea7 	bl	8003100 <USART_AS_SPI_sendCMD>
			GPIOA->ODR |= 1 << 7;	//set dc
 80033b2:	23a0      	movs	r3, #160	; 0xa0
 80033b4:	05db      	lsls	r3, r3, #23
 80033b6:	695a      	ldr	r2, [r3, #20]
 80033b8:	23a0      	movs	r3, #160	; 0xa0
 80033ba:	05db      	lsls	r3, r3, #23
 80033bc:	2180      	movs	r1, #128	; 0x80
 80033be:	430a      	orrs	r2, r1
 80033c0:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 80033c2:	23a0      	movs	r3, #160	; 0xa0
 80033c4:	05db      	lsls	r3, r3, #23
 80033c6:	695a      	ldr	r2, [r3, #20]
 80033c8:	23a0      	movs	r3, #160	; 0xa0
 80033ca:	05db      	lsls	r3, r3, #23
 80033cc:	2140      	movs	r1, #64	; 0x40
 80033ce:	430a      	orrs	r2, r1
 80033d0:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 6);	//reset cs
 80033d2:	23a0      	movs	r3, #160	; 0xa0
 80033d4:	05db      	lsls	r3, r3, #23
 80033d6:	695a      	ldr	r2, [r3, #20]
 80033d8:	23a0      	movs	r3, #160	; 0xa0
 80033da:	05db      	lsls	r3, r3, #23
 80033dc:	2140      	movs	r1, #64	; 0x40
 80033de:	438a      	bics	r2, r1
 80033e0:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 7;	// set dc
 80033e2:	23a0      	movs	r3, #160	; 0xa0
 80033e4:	05db      	lsls	r3, r3, #23
 80033e6:	695a      	ldr	r2, [r3, #20]
 80033e8:	23a0      	movs	r3, #160	; 0xa0
 80033ea:	05db      	lsls	r3, r3, #23
 80033ec:	2180      	movs	r1, #128	; 0x80
 80033ee:	430a      	orrs	r2, r1
 80033f0:	615a      	str	r2, [r3, #20]

			for (i = 0; i < ((end_x_New - start_x_New + 1) * (end_y_New/2 - start_y_New /2 + 1));i++) {
 80033f2:	193b      	adds	r3, r7, r4
 80033f4:	2200      	movs	r2, #0
 80033f6:	801a      	strh	r2, [r3, #0]
 80033f8:	e012      	b.n	8003420 <weoDrawRectangleFilled+0x15c>
//			for (i = 0; i < len;i++) {
				while(!(USART3->ISR & USART_ISR_TXE)){};
 80033fa:	46c0      	nop			; (mov r8, r8)
 80033fc:	4b22      	ldr	r3, [pc, #136]	; (8003488 <weoDrawRectangleFilled+0x1c4>)
 80033fe:	69db      	ldr	r3, [r3, #28]
 8003400:	2280      	movs	r2, #128	; 0x80
 8003402:	4013      	ands	r3, r2
 8003404:	d0fa      	beq.n	80033fc <weoDrawRectangleFilled+0x138>
				USART3->TDR =MEM_Buffer[i];
 8003406:	210e      	movs	r1, #14
 8003408:	187b      	adds	r3, r7, r1
 800340a:	881b      	ldrh	r3, [r3, #0]
 800340c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800340e:	18d3      	adds	r3, r2, r3
 8003410:	781a      	ldrb	r2, [r3, #0]
 8003412:	4b1d      	ldr	r3, [pc, #116]	; (8003488 <weoDrawRectangleFilled+0x1c4>)
 8003414:	629a      	str	r2, [r3, #40]	; 0x28
			for (i = 0; i < ((end_x_New - start_x_New + 1) * (end_y_New/2 - start_y_New /2 + 1));i++) {
 8003416:	187b      	adds	r3, r7, r1
 8003418:	881a      	ldrh	r2, [r3, #0]
 800341a:	187b      	adds	r3, r7, r1
 800341c:	3201      	adds	r2, #1
 800341e:	801a      	strh	r2, [r3, #0]
 8003420:	230e      	movs	r3, #14
 8003422:	18fb      	adds	r3, r7, r3
 8003424:	881a      	ldrh	r2, [r3, #0]
 8003426:	230b      	movs	r3, #11
 8003428:	18fb      	adds	r3, r7, r3
 800342a:	7819      	ldrb	r1, [r3, #0]
 800342c:	230d      	movs	r3, #13
 800342e:	18fb      	adds	r3, r7, r3
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	1acb      	subs	r3, r1, r3
 8003434:	3301      	adds	r3, #1
 8003436:	210a      	movs	r1, #10
 8003438:	1879      	adds	r1, r7, r1
 800343a:	7809      	ldrb	r1, [r1, #0]
 800343c:	0849      	lsrs	r1, r1, #1
 800343e:	b2c9      	uxtb	r1, r1
 8003440:	0008      	movs	r0, r1
 8003442:	210c      	movs	r1, #12
 8003444:	1879      	adds	r1, r7, r1
 8003446:	7809      	ldrb	r1, [r1, #0]
 8003448:	0849      	lsrs	r1, r1, #1
 800344a:	b2c9      	uxtb	r1, r1
 800344c:	1a41      	subs	r1, r0, r1
 800344e:	3101      	adds	r1, #1
 8003450:	434b      	muls	r3, r1
 8003452:	429a      	cmp	r2, r3
 8003454:	dbd1      	blt.n	80033fa <weoDrawRectangleFilled+0x136>
			}
//			while(!(USART3->ISR & USART_ISR_TXE)){};
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 8003456:	23a0      	movs	r3, #160	; 0xa0
 8003458:	05db      	lsls	r3, r3, #23
 800345a:	695a      	ldr	r2, [r3, #20]
 800345c:	23a0      	movs	r3, #160	; 0xa0
 800345e:	05db      	lsls	r3, r3, #23
 8003460:	2180      	movs	r1, #128	; 0x80
 8003462:	438a      	bics	r2, r1
 8003464:	615a      	str	r2, [r3, #20]
//			USART_AS_SPI_sendCMD(0xBB);	// command for NOP
			HAL_Delay(1);
 8003466:	2001      	movs	r0, #1
 8003468:	f002 f91e 	bl	80056a8 <HAL_Delay>
//			GPIOA->ODR &= ~(1 << 7);	//reset dc
			GPIOA->ODR |= 1 << 6;	//set cs
 800346c:	23a0      	movs	r3, #160	; 0xa0
 800346e:	05db      	lsls	r3, r3, #23
 8003470:	695a      	ldr	r2, [r3, #20]
 8003472:	23a0      	movs	r3, #160	; 0xa0
 8003474:	05db      	lsls	r3, r3, #23
 8003476:	2140      	movs	r1, #64	; 0x40
 8003478:	430a      	orrs	r2, r1
 800347a:	615a      	str	r2, [r3, #20]
 800347c:	e000      	b.n	8003480 <weoDrawRectangleFilled+0x1bc>
				return;
 800347e:	46c0      	nop			; (mov r8, r8)
		}
 8003480:	46bd      	mov	sp, r7
 8003482:	b005      	add	sp, #20
 8003484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003486:	46c0      	nop			; (mov r8, r8)
 8003488:	40004800 	.word	0x40004800

0800348c <weoDrawRectangleInit>:
//========================================================================================================================
	void weoDrawRectangleInit(unsigned char start_x, unsigned char start_y,
				unsigned char end_x, unsigned char end_y) {
 800348c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	0005      	movs	r5, r0
 8003494:	000c      	movs	r4, r1
 8003496:	0010      	movs	r0, r2
 8003498:	0019      	movs	r1, r3
 800349a:	1dfb      	adds	r3, r7, #7
 800349c:	1c2a      	adds	r2, r5, #0
 800349e:	701a      	strb	r2, [r3, #0]
 80034a0:	1dbb      	adds	r3, r7, #6
 80034a2:	1c22      	adds	r2, r4, #0
 80034a4:	701a      	strb	r2, [r3, #0]
 80034a6:	1d7b      	adds	r3, r7, #5
 80034a8:	1c02      	adds	r2, r0, #0
 80034aa:	701a      	strb	r2, [r3, #0]
 80034ac:	1d3b      	adds	r3, r7, #4
 80034ae:	1c0a      	adds	r2, r1, #0
 80034b0:	701a      	strb	r2, [r3, #0]
			uint16_t i = 0;
 80034b2:	230e      	movs	r3, #14
 80034b4:	18fb      	adds	r3, r7, r3
 80034b6:	2200      	movs	r2, #0
 80034b8:	801a      	strh	r2, [r3, #0]
			uint8_t start_x_New,start_y_New,end_x_New,end_y_New;
			if (start_x > OLED_DIM_WIDTH || start_y > OLED_DIM_HEIGHT
 80034ba:	1dfb      	adds	r3, r7, #7
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	b25b      	sxtb	r3, r3
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	db66      	blt.n	8003592 <weoDrawRectangleInit+0x106>
 80034c4:	1dbb      	adds	r3, r7, #6
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	b25b      	sxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	db61      	blt.n	8003592 <weoDrawRectangleInit+0x106>
					|| end_x > OLED_DIM_WIDTH || end_y > OLED_DIM_HEIGHT) {
 80034ce:	1d7b      	adds	r3, r7, #5
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	b25b      	sxtb	r3, r3
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	db5c      	blt.n	8003592 <weoDrawRectangleInit+0x106>
 80034d8:	1d3b      	adds	r3, r7, #4
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	b25b      	sxtb	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	db57      	blt.n	8003592 <weoDrawRectangleInit+0x106>
				return;
			}
			start_x_New=start_x;
 80034e2:	240d      	movs	r4, #13
 80034e4:	193b      	adds	r3, r7, r4
 80034e6:	1dfa      	adds	r2, r7, #7
 80034e8:	7812      	ldrb	r2, [r2, #0]
 80034ea:	701a      	strb	r2, [r3, #0]
			start_y_New=0x7F-end_y;
 80034ec:	250c      	movs	r5, #12
 80034ee:	197b      	adds	r3, r7, r5
 80034f0:	1d3a      	adds	r2, r7, #4
 80034f2:	7812      	ldrb	r2, [r2, #0]
 80034f4:	217f      	movs	r1, #127	; 0x7f
 80034f6:	1a8a      	subs	r2, r1, r2
 80034f8:	701a      	strb	r2, [r3, #0]
			end_x_New=end_x;
 80034fa:	260b      	movs	r6, #11
 80034fc:	19bb      	adds	r3, r7, r6
 80034fe:	1d7a      	adds	r2, r7, #5
 8003500:	7812      	ldrb	r2, [r2, #0]
 8003502:	701a      	strb	r2, [r3, #0]
			end_y_New=0x7F-start_y;
 8003504:	230a      	movs	r3, #10
 8003506:	18fb      	adds	r3, r7, r3
 8003508:	1dba      	adds	r2, r7, #6
 800350a:	7812      	ldrb	r2, [r2, #0]
 800350c:	217f      	movs	r1, #127	; 0x7f
 800350e:	1a8a      	subs	r2, r1, r2
 8003510:	701a      	strb	r2, [r3, #0]

			GPIOA->ODR &= ~(1 << 6);	//reset cs
 8003512:	23a0      	movs	r3, #160	; 0xa0
 8003514:	05db      	lsls	r3, r3, #23
 8003516:	695a      	ldr	r2, [r3, #20]
 8003518:	23a0      	movs	r3, #160	; 0xa0
 800351a:	05db      	lsls	r3, r3, #23
 800351c:	2140      	movs	r1, #64	; 0x40
 800351e:	438a      	bics	r2, r1
 8003520:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 8003522:	23a0      	movs	r3, #160	; 0xa0
 8003524:	05db      	lsls	r3, r3, #23
 8003526:	695a      	ldr	r2, [r3, #20]
 8003528:	23a0      	movs	r3, #160	; 0xa0
 800352a:	05db      	lsls	r3, r3, #23
 800352c:	2180      	movs	r1, #128	; 0x80
 800352e:	438a      	bics	r2, r1
 8003530:	615a      	str	r2, [r3, #20]
					USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 8003532:	2075      	movs	r0, #117	; 0x75
 8003534:	f7ff fde4 	bl	8003100 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_x_New/1);
 8003538:	193b      	adds	r3, r7, r4
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	0018      	movs	r0, r3
 800353e:	f7ff fddf 	bl	8003100 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_x_New/1);
 8003542:	19bb      	adds	r3, r7, r6
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	0018      	movs	r0, r3
 8003548:	f7ff fdda 	bl	8003100 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 800354c:	2015      	movs	r0, #21
 800354e:	f7ff fdd7 	bl	8003100 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_y_New/2);
 8003552:	197b      	adds	r3, r7, r5
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	085b      	lsrs	r3, r3, #1
 8003558:	b2db      	uxtb	r3, r3
 800355a:	0018      	movs	r0, r3
 800355c:	f7ff fdd0 	bl	8003100 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_y_New/2);
 8003560:	230a      	movs	r3, #10
 8003562:	18fb      	adds	r3, r7, r3
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	085b      	lsrs	r3, r3, #1
 8003568:	b2db      	uxtb	r3, r3
 800356a:	0018      	movs	r0, r3
 800356c:	f7ff fdc8 	bl	8003100 <USART_AS_SPI_sendCMD>
			GPIOA->ODR |= 1 << 7;	//set dc
 8003570:	23a0      	movs	r3, #160	; 0xa0
 8003572:	05db      	lsls	r3, r3, #23
 8003574:	695a      	ldr	r2, [r3, #20]
 8003576:	23a0      	movs	r3, #160	; 0xa0
 8003578:	05db      	lsls	r3, r3, #23
 800357a:	2180      	movs	r1, #128	; 0x80
 800357c:	430a      	orrs	r2, r1
 800357e:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 8003580:	23a0      	movs	r3, #160	; 0xa0
 8003582:	05db      	lsls	r3, r3, #23
 8003584:	695a      	ldr	r2, [r3, #20]
 8003586:	23a0      	movs	r3, #160	; 0xa0
 8003588:	05db      	lsls	r3, r3, #23
 800358a:	2140      	movs	r1, #64	; 0x40
 800358c:	430a      	orrs	r2, r1
 800358e:	615a      	str	r2, [r3, #20]
 8003590:	e000      	b.n	8003594 <weoDrawRectangleInit+0x108>
				return;
 8003592:	46c0      	nop			; (mov r8, r8)
		}
 8003594:	46bd      	mov	sp, r7
 8003596:	b005      	add	sp, #20
 8003598:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800359c <I2C_SOUND_ChangePage>:
//		LL_GPIO_ResetOutputPin(GPIOC, DISP_RES_Pin);
		HAL_Delay(1);
//		LL_GPIO_SetOutputPin(GPIOC, DISP_RES_Pin);
		HAL_Delay(1);
	}
	void I2C_SOUND_ChangePage(uint8_t pageNum) {
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af02      	add	r7, sp, #8
 80035a2:	0002      	movs	r2, r0
 80035a4:	1dfb      	adds	r3, r7, #7
 80035a6:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { 0x00, pageNum };
 80035a8:	210c      	movs	r1, #12
 80035aa:	187b      	adds	r3, r7, r1
 80035ac:	2200      	movs	r2, #0
 80035ae:	701a      	strb	r2, [r3, #0]
 80035b0:	187b      	adds	r3, r7, r1
 80035b2:	1dfa      	adds	r2, r7, #7
 80035b4:	7812      	ldrb	r2, [r2, #0]
 80035b6:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x30, buf, 2, 1000);
 80035b8:	187a      	adds	r2, r7, r1
 80035ba:	4806      	ldr	r0, [pc, #24]	; (80035d4 <I2C_SOUND_ChangePage+0x38>)
 80035bc:	23fa      	movs	r3, #250	; 0xfa
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	2302      	movs	r3, #2
 80035c4:	2130      	movs	r1, #48	; 0x30
 80035c6:	f003 f8a9 	bl	800671c <HAL_I2C_Master_Transmit>
	}
 80035ca:	46c0      	nop			; (mov r8, r8)
 80035cc:	46bd      	mov	sp, r7
 80035ce:	b004      	add	sp, #16
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	20000134 	.word	0x20000134

080035d8 <WriteReg_I2C_SOUND>:
	void WriteReg_I2C_SOUND(uint8_t reg, uint8_t data) {
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af02      	add	r7, sp, #8
 80035de:	0002      	movs	r2, r0
 80035e0:	1dfb      	adds	r3, r7, #7
 80035e2:	701a      	strb	r2, [r3, #0]
 80035e4:	1dbb      	adds	r3, r7, #6
 80035e6:	1c0a      	adds	r2, r1, #0
 80035e8:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { reg, data };
 80035ea:	210c      	movs	r1, #12
 80035ec:	187b      	adds	r3, r7, r1
 80035ee:	1dfa      	adds	r2, r7, #7
 80035f0:	7812      	ldrb	r2, [r2, #0]
 80035f2:	701a      	strb	r2, [r3, #0]
 80035f4:	187b      	adds	r3, r7, r1
 80035f6:	1dba      	adds	r2, r7, #6
 80035f8:	7812      	ldrb	r2, [r2, #0]
 80035fa:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x30, buf, 2, 1000);	//(uint8_t*)&
 80035fc:	187a      	adds	r2, r7, r1
 80035fe:	4806      	ldr	r0, [pc, #24]	; (8003618 <WriteReg_I2C_SOUND+0x40>)
 8003600:	23fa      	movs	r3, #250	; 0xfa
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	2302      	movs	r3, #2
 8003608:	2130      	movs	r1, #48	; 0x30
 800360a:	f003 f887 	bl	800671c <HAL_I2C_Master_Transmit>
	}
 800360e:	46c0      	nop			; (mov r8, r8)
 8003610:	46bd      	mov	sp, r7
 8003612:	b004      	add	sp, #16
 8003614:	bd80      	pop	{r7, pc}
 8003616:	46c0      	nop			; (mov r8, r8)
 8003618:	20000134 	.word	0x20000134

0800361c <soundSetup>:
	void soundSetup(void) {
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
		I2C_SOUND_ChangePage(0x00);
 8003620:	2000      	movs	r0, #0
 8003622:	f7ff ffbb 	bl	800359c <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x01);	//Assert Software reset (P0, R1, D0=1)
 8003626:	2101      	movs	r1, #1
 8003628:	2001      	movs	r0, #1
 800362a:	f7ff ffd5 	bl	80035d8 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x01);
 800362e:	2001      	movs	r0, #1
 8003630:	f7ff ffb4 	bl	800359c <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x02, 0x00);	//LDO output programmed as 1.8V and Level shifters powered up. (P1, R2, D5-D4=00, D3=0)
 8003634:	2100      	movs	r1, #0
 8003636:	2002      	movs	r0, #2
 8003638:	f7ff ffce 	bl	80035d8 <WriteReg_I2C_SOUND>
		HAL_Delay(15);
 800363c:	200f      	movs	r0, #15
 800363e:	f002 f833 	bl	80056a8 <HAL_Delay>
		I2C_SOUND_ChangePage(0x00);
 8003642:	2000      	movs	r0, #0
 8003644:	f7ff ffaa 	bl	800359c <I2C_SOUND_ChangePage>
	WriteReg_I2C_SOUND(0x04,0x03);//PLL_clkin = MCLK, codec_clkin = PLL_CLK, MCLK should be 11.2896MHz
 8003648:	2103      	movs	r1, #3
 800364a:	2004      	movs	r0, #4
 800364c:	f7ff ffc4 	bl	80035d8 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x05,0x91);//Power up PLL, set P=1, R=1
 8003650:	2191      	movs	r1, #145	; 0x91
 8003652:	2005      	movs	r0, #5
 8003654:	f7ff ffc0 	bl	80035d8 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x06,0x04);//Set J = 4
 8003658:	2104      	movs	r1, #4
 800365a:	2006      	movs	r0, #6
 800365c:	f7ff ffbc 	bl	80035d8 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x07,0x00);//SET D=0000
 8003660:	2100      	movs	r1, #0
 8003662:	2007      	movs	r0, #7
 8003664:	f7ff ffb8 	bl	80035d8 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x08,0x00);//SET D=0000
 8003668:	2100      	movs	r1, #0
 800366a:	2008      	movs	r0, #8
 800366c:	f7ff ffb4 	bl	80035d8 <WriteReg_I2C_SOUND>
	HAL_Delay(15);
 8003670:	200f      	movs	r0, #15
 8003672:	f002 f819 	bl	80056a8 <HAL_Delay>
	WriteReg_I2C_SOUND(0x0B,0x84);//DAC NDAC Powered up, set NDAC = 4
 8003676:	2184      	movs	r1, #132	; 0x84
 8003678:	200b      	movs	r0, #11
 800367a:	f7ff ffad 	bl	80035d8 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0C,0x82);//DAC MDAC Powered up, set MDAC = 2
 800367e:	2182      	movs	r1, #130	; 0x82
 8003680:	200c      	movs	r0, #12
 8003682:	f7ff ffa9 	bl	80035d8 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0D,0x00);//DAC OSR(9:0)-> DOSR=128
 8003686:	2100      	movs	r1, #0
 8003688:	200d      	movs	r0, #13
 800368a:	f7ff ffa5 	bl	80035d8 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0E,0x80);//DAC OSR(9:0)
 800368e:	2180      	movs	r1, #128	; 0x80
 8003690:	200e      	movs	r0, #14
 8003692:	f7ff ffa1 	bl	80035d8 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x1B, 0x00);	//Codec Interface control Word length = 16bits, BCLK&WCLK inputs, I2S mode. (P0, R27, D7-D6=00, D5-D4=00, D3-D2=00)
 8003696:	2100      	movs	r1, #0
 8003698:	201b      	movs	r0, #27
 800369a:	f7ff ff9d 	bl	80035d8 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x1C,0x00);//Data slot offset
 800369e:	2100      	movs	r1, #0
 80036a0:	201c      	movs	r0, #28
 80036a2:	f7ff ff99 	bl	80035d8 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x3c,0x02);//Dac Instruction programming PRB #2 for Mono routing. Type interpolation (x8) and 3 programmable	Biquads. (P0, R60, D4-D0=0010)
 80036a6:	2102      	movs	r1, #2
 80036a8:	203c      	movs	r0, #60	; 0x3c
 80036aa:	f7ff ff95 	bl	80035d8 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x01);
 80036ae:	2001      	movs	r0, #1
 80036b0:	f7ff ff74 	bl	800359c <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x10);	//Master Reference Powered on (P1, R1, D4=1)
 80036b4:	2110      	movs	r1, #16
 80036b6:	2001      	movs	r0, #1
 80036b8:	f7ff ff8e 	bl	80035d8 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x0A, 0x00);	//Output common mode for DAC set to 0.9V (default) (P1, R10)
 80036bc:	2100      	movs	r1, #0
 80036be:	200a      	movs	r0, #10
 80036c0:	f7ff ff8a 	bl	80035d8 <WriteReg_I2C_SOUND>
		////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x0C, 0x00);	// No analog routing to headphone//0x0c,0x15 by SB
 80036c4:	2100      	movs	r1, #0
 80036c6:	200c      	movs	r0, #12
 80036c8:	f7ff ff86 	bl	80035d8 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x16, 0x00);	// Headphone volume=0//0x16,0x75 by SB
 80036cc:	2100      	movs	r1, #0
 80036ce:	2016      	movs	r0, #22
 80036d0:	f7ff ff82 	bl	80035d8 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x18, 0x00);	//No need to enable Mixer M and Mixer P, AINL Voulme, 0dB Gain 0x18,0x75 by SB
 80036d4:	2100      	movs	r1, #0
 80036d6:	2018      	movs	r0, #24
 80036d8:	f7ff ff7e 	bl	80035d8 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x19, 0x00);	//No need to enable Mixer M and Mixer P, AINR Voulme, 0dB Gain 0x19,0x75 by SB
 80036dc:	2100      	movs	r1, #0
 80036de:	2019      	movs	r0, #25
 80036e0:	f7ff ff7a 	bl	80035d8 <WriteReg_I2C_SOUND>
		//////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x09, 0x00);	//AINL,AINR are powered down
 80036e4:	2100      	movs	r1, #0
 80036e6:	2009      	movs	r0, #9
 80036e8:	f7ff ff76 	bl	80035d8 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 80036ec:	2100      	movs	r1, #0
 80036ee:	2010      	movs	r0, #16
 80036f0:	f7ff ff72 	bl	80035d8 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x2E, 0x00);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000)
 80036f4:	2100      	movs	r1, #0
 80036f6:	202e      	movs	r0, #46	; 0x2e
 80036f8:	f7ff ff6e 	bl	80035d8 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x30, 0x10);	//SPK driver Gain=6.0dB (P1, R48, D6-D4=001)
 80036fc:	2110      	movs	r1, #16
 80036fe:	2030      	movs	r0, #48	; 0x30
 8003700:	f7ff ff6a 	bl	80035d8 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x2D, 0x02);	//SPK powered up (P1, R45, D1=1)
 8003704:	2102      	movs	r1, #2
 8003706:	202d      	movs	r0, #45	; 0x2d
 8003708:	f7ff ff66 	bl	80035d8 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x00);
 800370c:	2000      	movs	r0, #0
 800370e:	f7ff ff45 	bl	800359c <I2C_SOUND_ChangePage>
		//////////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x3F, 0x90);	//DAC powered up, Soft step 1 per Fs. (P0, R63, D7=1, D5-D4=01, D3-D2=00, D1-D0=00)
 8003712:	2190      	movs	r1, #144	; 0x90
 8003714:	203f      	movs	r0, #63	; 0x3f
 8003716:	f7ff ff5f 	bl	80035d8 <WriteReg_I2C_SOUND>
		// 1<<7|1<<4|2 by SB
		WriteReg_I2C_SOUND(0x41, 0x00);	//DAC digital gain 0dB (P0, R65, D7-D0=00000000) cnDacValueOn by SB
 800371a:	2100      	movs	r1, #0
 800371c:	2041      	movs	r0, #65	; 0x41
 800371e:	f7ff ff5b 	bl	80035d8 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x40, 0x04);	//DAC volume not muted. (P0, R64, D3=0, D2=1) 1<<4 by SB
 8003722:	2104      	movs	r1, #4
 8003724:	2040      	movs	r0, #64	; 0x40
 8003726:	f7ff ff57 	bl	80035d8 <WriteReg_I2C_SOUND>
	}
 800372a:	46c0      	nop			; (mov r8, r8)
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <answer2CPU>:
//=============================================================================================
	uint8_t answer2CPU(uint8_t cmd[]) {
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
		uint8_t keyboard = 0xFF;
 8003738:	230f      	movs	r3, #15
 800373a:	18fb      	adds	r3, r7, r3
 800373c:	22ff      	movs	r2, #255	; 0xff
 800373e:	701a      	strb	r2, [r3, #0]
//		uint16_t ans[10];
		uint8_t i;
		uint8_t myCS = 0;					//   COMMON PART FOR EVERY COMMAND
 8003740:	230d      	movs	r3, #13
 8003742:	18fb      	adds	r3, r7, r3
 8003744:	2200      	movs	r2, #0
 8003746:	701a      	strb	r2, [r3, #0]
		uint8_t myLength;
		uint16_t ind = 0;
 8003748:	230a      	movs	r3, #10
 800374a:	18fb      	adds	r3, r7, r3
 800374c:	2200      	movs	r2, #0
 800374e:	801a      	strh	r2, [r3, #0]

		cmd2Execute=0;
 8003750:	4bd3      	ldr	r3, [pc, #844]	; (8003aa0 <answer2CPU+0x370>)
 8003752:	2200      	movs	r2, #0
 8003754:	701a      	strb	r2, [r3, #0]
		if ((cmd[0] == 0x11)||(cmd[0] == 0x12)||(cmd[0] == 0x13)||(cmd[0] == 0x14)||(cmd[0] == 0x15)) {GPIOC->ODR &= ~(1 << 6);}//reset BF
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	2b11      	cmp	r3, #17
 800375c:	d00f      	beq.n	800377e <answer2CPU+0x4e>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	2b12      	cmp	r3, #18
 8003764:	d00b      	beq.n	800377e <answer2CPU+0x4e>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	2b13      	cmp	r3, #19
 800376c:	d007      	beq.n	800377e <answer2CPU+0x4e>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	2b14      	cmp	r3, #20
 8003774:	d003      	beq.n	800377e <answer2CPU+0x4e>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	2b15      	cmp	r3, #21
 800377c:	d105      	bne.n	800378a <answer2CPU+0x5a>
 800377e:	4bc9      	ldr	r3, [pc, #804]	; (8003aa4 <answer2CPU+0x374>)
 8003780:	695a      	ldr	r2, [r3, #20]
 8003782:	4bc8      	ldr	r3, [pc, #800]	; (8003aa4 <answer2CPU+0x374>)
 8003784:	2140      	movs	r1, #64	; 0x40
 8003786:	438a      	bics	r2, r1
 8003788:	615a      	str	r2, [r3, #20]
		ans[0] = cmd[0]|0x80;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	2280      	movs	r2, #128	; 0x80
 8003790:	4252      	negs	r2, r2
 8003792:	4313      	orrs	r3, r2
 8003794:	b2db      	uxtb	r3, r3
 8003796:	b29a      	uxth	r2, r3
 8003798:	4bc3      	ldr	r3, [pc, #780]	; (8003aa8 <answer2CPU+0x378>)
 800379a:	801a      	strh	r2, [r3, #0]
//==================================================================================================
			if ((cmd[0] >= 0x10)&&(cmd[0] < 0x16)) { //answer is keyboard + stuff information                  0003
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	2b0f      	cmp	r3, #15
 80037a2:	d800      	bhi.n	80037a6 <answer2CPU+0x76>
 80037a4:	e14d      	b.n	8003a42 <answer2CPU+0x312>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	2b15      	cmp	r3, #21
 80037ac:	d900      	bls.n	80037b0 <answer2CPU+0x80>
 80037ae:	e148      	b.n	8003a42 <answer2CPU+0x312>
				if ((GPIOA->IDR & (1 << 0)) == 0) {
 80037b0:	23a0      	movs	r3, #160	; 0xa0
 80037b2:	05db      	lsls	r3, r3, #23
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	2201      	movs	r2, #1
 80037b8:	4013      	ands	r3, r2
 80037ba:	d106      	bne.n	80037ca <answer2CPU+0x9a>
					keyboard &= 0b11111110;
 80037bc:	220f      	movs	r2, #15
 80037be:	18bb      	adds	r3, r7, r2
 80037c0:	18ba      	adds	r2, r7, r2
 80037c2:	7812      	ldrb	r2, [r2, #0]
 80037c4:	2101      	movs	r1, #1
 80037c6:	438a      	bics	r2, r1
 80037c8:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 1)) == 0) {
 80037ca:	23a0      	movs	r3, #160	; 0xa0
 80037cc:	05db      	lsls	r3, r3, #23
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	2202      	movs	r2, #2
 80037d2:	4013      	ands	r3, r2
 80037d4:	d106      	bne.n	80037e4 <answer2CPU+0xb4>
					keyboard &= 0b11111101;
 80037d6:	220f      	movs	r2, #15
 80037d8:	18bb      	adds	r3, r7, r2
 80037da:	18ba      	adds	r2, r7, r2
 80037dc:	7812      	ldrb	r2, [r2, #0]
 80037de:	2102      	movs	r1, #2
 80037e0:	438a      	bics	r2, r1
 80037e2:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 4)) == 0) {
 80037e4:	23a0      	movs	r3, #160	; 0xa0
 80037e6:	05db      	lsls	r3, r3, #23
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	2210      	movs	r2, #16
 80037ec:	4013      	ands	r3, r2
 80037ee:	d106      	bne.n	80037fe <answer2CPU+0xce>
					keyboard &= 0b11111011;
 80037f0:	220f      	movs	r2, #15
 80037f2:	18bb      	adds	r3, r7, r2
 80037f4:	18ba      	adds	r2, r7, r2
 80037f6:	7812      	ldrb	r2, [r2, #0]
 80037f8:	2104      	movs	r1, #4
 80037fa:	438a      	bics	r2, r1
 80037fc:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 13)) == 0) {
 80037fe:	23a0      	movs	r3, #160	; 0xa0
 8003800:	05db      	lsls	r3, r3, #23
 8003802:	691a      	ldr	r2, [r3, #16]
 8003804:	2380      	movs	r3, #128	; 0x80
 8003806:	019b      	lsls	r3, r3, #6
 8003808:	4013      	ands	r3, r2
 800380a:	d106      	bne.n	800381a <answer2CPU+0xea>
					keyboard &= 0b11110111;
 800380c:	220f      	movs	r2, #15
 800380e:	18bb      	adds	r3, r7, r2
 8003810:	18ba      	adds	r2, r7, r2
 8003812:	7812      	ldrb	r2, [r2, #0]
 8003814:	2108      	movs	r1, #8
 8003816:	438a      	bics	r2, r1
 8003818:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 14)) == 0) {
 800381a:	23a0      	movs	r3, #160	; 0xa0
 800381c:	05db      	lsls	r3, r3, #23
 800381e:	691a      	ldr	r2, [r3, #16]
 8003820:	2380      	movs	r3, #128	; 0x80
 8003822:	01db      	lsls	r3, r3, #7
 8003824:	4013      	ands	r3, r2
 8003826:	d106      	bne.n	8003836 <answer2CPU+0x106>
					keyboard &= 0b11101111;
 8003828:	220f      	movs	r2, #15
 800382a:	18bb      	adds	r3, r7, r2
 800382c:	18ba      	adds	r2, r7, r2
 800382e:	7812      	ldrb	r2, [r2, #0]
 8003830:	2110      	movs	r1, #16
 8003832:	438a      	bics	r2, r1
 8003834:	701a      	strb	r2, [r3, #0]
				}

				keyboard = ~keyboard;
 8003836:	210f      	movs	r1, #15
 8003838:	187b      	adds	r3, r7, r1
 800383a:	187a      	adds	r2, r7, r1
 800383c:	7812      	ldrb	r2, [r2, #0]
 800383e:	43d2      	mvns	r2, r2
 8003840:	701a      	strb	r2, [r3, #0]
//				keyboard&=bf;
				myLength = 0x04;
 8003842:	2009      	movs	r0, #9
 8003844:	183b      	adds	r3, r7, r0
 8003846:	2204      	movs	r2, #4
 8003848:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 800384a:	183b      	adds	r3, r7, r0
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	b29b      	uxth	r3, r3
 8003850:	3b02      	subs	r3, #2
 8003852:	b29a      	uxth	r2, r3
 8003854:	4b94      	ldr	r3, [pc, #592]	; (8003aa8 <answer2CPU+0x378>)
 8003856:	805a      	strh	r2, [r3, #2]
				ans[2] = keyboard;				//			MANAGEMENT COMMANDS
 8003858:	187b      	adds	r3, r7, r1
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	b29a      	uxth	r2, r3
 800385e:	4b92      	ldr	r3, [pc, #584]	; (8003aa8 <answer2CPU+0x378>)
 8003860:	809a      	strh	r2, [r3, #4]

				for (i = 0; i < myLength-1; i++) {
 8003862:	230e      	movs	r3, #14
 8003864:	18fb      	adds	r3, r7, r3
 8003866:	2200      	movs	r2, #0
 8003868:	701a      	strb	r2, [r3, #0]
 800386a:	e011      	b.n	8003890 <answer2CPU+0x160>
					myCS = myCS + ans[i];
 800386c:	200e      	movs	r0, #14
 800386e:	183b      	adds	r3, r7, r0
 8003870:	781a      	ldrb	r2, [r3, #0]
 8003872:	4b8d      	ldr	r3, [pc, #564]	; (8003aa8 <answer2CPU+0x378>)
 8003874:	0052      	lsls	r2, r2, #1
 8003876:	5ad3      	ldrh	r3, [r2, r3]
 8003878:	b2d9      	uxtb	r1, r3
 800387a:	220d      	movs	r2, #13
 800387c:	18bb      	adds	r3, r7, r2
 800387e:	18ba      	adds	r2, r7, r2
 8003880:	7812      	ldrb	r2, [r2, #0]
 8003882:	188a      	adds	r2, r1, r2
 8003884:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8003886:	183b      	adds	r3, r7, r0
 8003888:	781a      	ldrb	r2, [r3, #0]
 800388a:	183b      	adds	r3, r7, r0
 800388c:	3201      	adds	r2, #1
 800388e:	701a      	strb	r2, [r3, #0]
 8003890:	200e      	movs	r0, #14
 8003892:	183b      	adds	r3, r7, r0
 8003894:	781a      	ldrb	r2, [r3, #0]
 8003896:	2309      	movs	r3, #9
 8003898:	18fb      	adds	r3, r7, r3
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	3b01      	subs	r3, #1
 800389e:	429a      	cmp	r2, r3
 80038a0:	dbe4      	blt.n	800386c <answer2CPU+0x13c>
				}
				myCS = 0 - myCS;
 80038a2:	210d      	movs	r1, #13
 80038a4:	187b      	adds	r3, r7, r1
 80038a6:	187a      	adds	r2, r7, r1
 80038a8:	7812      	ldrb	r2, [r2, #0]
 80038aa:	4252      	negs	r2, r2
 80038ac:	701a      	strb	r2, [r3, #0]
				ans[3] = myCS;
 80038ae:	187b      	adds	r3, r7, r1
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	4b7c      	ldr	r3, [pc, #496]	; (8003aa8 <answer2CPU+0x378>)
 80038b6:	80da      	strh	r2, [r3, #6]
				i=0;
 80038b8:	183b      	adds	r3, r7, r0
 80038ba:	2200      	movs	r2, #0
 80038bc:	701a      	strb	r2, [r3, #0]
//======================================================================================================================================
				while(!(USART2->ISR & USART_ISR_TXE)){};
 80038be:	46c0      	nop			; (mov r8, r8)
 80038c0:	4b7a      	ldr	r3, [pc, #488]	; (8003aac <answer2CPU+0x37c>)
 80038c2:	69db      	ldr	r3, [r3, #28]
 80038c4:	2280      	movs	r2, #128	; 0x80
 80038c6:	4013      	ands	r3, r2
 80038c8:	d0fa      	beq.n	80038c0 <answer2CPU+0x190>
				USART2->TDR = ans[0]|0x0100;
 80038ca:	4b77      	ldr	r3, [pc, #476]	; (8003aa8 <answer2CPU+0x378>)
 80038cc:	881b      	ldrh	r3, [r3, #0]
 80038ce:	2280      	movs	r2, #128	; 0x80
 80038d0:	0052      	lsls	r2, r2, #1
 80038d2:	4313      	orrs	r3, r2
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	4b75      	ldr	r3, [pc, #468]	; (8003aac <answer2CPU+0x37c>)
 80038d8:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 80038da:	230e      	movs	r3, #14
 80038dc:	18fb      	adds	r3, r7, r3
 80038de:	2201      	movs	r2, #1
 80038e0:	701a      	strb	r2, [r3, #0]
 80038e2:	e013      	b.n	800390c <answer2CPU+0x1dc>
				  {												//answer2cpu was given
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 80038e4:	46c0      	nop			; (mov r8, r8)
 80038e6:	4b71      	ldr	r3, [pc, #452]	; (8003aac <answer2CPU+0x37c>)
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	2280      	movs	r2, #128	; 0x80
 80038ec:	4013      	ands	r3, r2
 80038ee:	d0fa      	beq.n	80038e6 <answer2CPU+0x1b6>
				    USART2->TDR = (uint8_t)ans[i];
 80038f0:	210e      	movs	r1, #14
 80038f2:	187b      	adds	r3, r7, r1
 80038f4:	781a      	ldrb	r2, [r3, #0]
 80038f6:	4b6c      	ldr	r3, [pc, #432]	; (8003aa8 <answer2CPU+0x378>)
 80038f8:	0052      	lsls	r2, r2, #1
 80038fa:	5ad3      	ldrh	r3, [r2, r3]
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	4b6b      	ldr	r3, [pc, #428]	; (8003aac <answer2CPU+0x37c>)
 8003900:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 8003902:	187b      	adds	r3, r7, r1
 8003904:	781a      	ldrb	r2, [r3, #0]
 8003906:	187b      	adds	r3, r7, r1
 8003908:	3201      	adds	r2, #1
 800390a:	701a      	strb	r2, [r3, #0]
 800390c:	230e      	movs	r3, #14
 800390e:	18fa      	adds	r2, r7, r3
 8003910:	2309      	movs	r3, #9
 8003912:	18fb      	adds	r3, r7, r3
 8003914:	7812      	ldrb	r2, [r2, #0]
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	429a      	cmp	r2, r3
 800391a:	d3e3      	bcc.n	80038e4 <answer2CPU+0x1b4>
				  }
//=======================================================================================================================================
				if (cmd[0] == 0x11) {//Show full screen background;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	2b11      	cmp	r3, #17
 8003922:	d109      	bne.n	8003938 <answer2CPU+0x208>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					picNum = cmd[2];
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	789a      	ldrb	r2, [r3, #2]
 8003928:	4b61      	ldr	r3, [pc, #388]	; (8003ab0 <answer2CPU+0x380>)
 800392a:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x11;
 800392c:	4b5c      	ldr	r3, [pc, #368]	; (8003aa0 <answer2CPU+0x370>)
 800392e:	2211      	movs	r2, #17
 8003930:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8003932:	4b60      	ldr	r3, [pc, #384]	; (8003ab4 <answer2CPU+0x384>)
 8003934:	2200      	movs	r2, #0
 8003936:	701a      	strb	r2, [r3, #0]
				}
//=======================================================================================================================================
				if (cmd[0] == 0x12) {				//show small image
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	2b12      	cmp	r3, #18
 800393e:	d115      	bne.n	800396c <answer2CPU+0x23c>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3302      	adds	r3, #2
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	001a      	movs	r2, r3
 8003948:	4b5b      	ldr	r3, [pc, #364]	; (8003ab8 <answer2CPU+0x388>)
 800394a:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	3303      	adds	r3, #3
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	001a      	movs	r2, r3
 8003954:	4b59      	ldr	r3, [pc, #356]	; (8003abc <answer2CPU+0x38c>)
 8003956:	601a      	str	r2, [r3, #0]
					picNum=cmd[4];
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	791a      	ldrb	r2, [r3, #4]
 800395c:	4b54      	ldr	r3, [pc, #336]	; (8003ab0 <answer2CPU+0x380>)
 800395e:	701a      	strb	r2, [r3, #0]
//					weoShowSmallImage(dataASCII[i], ASCII_X, ASCII_Y);
					cmd2Execute=0x12;
 8003960:	4b4f      	ldr	r3, [pc, #316]	; (8003aa0 <answer2CPU+0x370>)
 8003962:	2212      	movs	r2, #18
 8003964:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8003966:	4b53      	ldr	r3, [pc, #332]	; (8003ab4 <answer2CPU+0x384>)
 8003968:	2200      	movs	r2, #0
 800396a:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x13) {			//show ASCII code(s)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	2b13      	cmp	r3, #19
 8003972:	d134      	bne.n	80039de <answer2CPU+0x2ae>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	3302      	adds	r3, #2
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	001a      	movs	r2, r3
 800397c:	4b4e      	ldr	r3, [pc, #312]	; (8003ab8 <answer2CPU+0x388>)
 800397e:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	3303      	adds	r3, #3
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	001a      	movs	r2, r3
 8003988:	4b4c      	ldr	r3, [pc, #304]	; (8003abc <answer2CPU+0x38c>)
 800398a:	601a      	str	r2, [r3, #0]
					strLen = cmd[1] -0x03;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3301      	adds	r3, #1
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	3b03      	subs	r3, #3
 8003994:	b2da      	uxtb	r2, r3
 8003996:	4b4a      	ldr	r3, [pc, #296]	; (8003ac0 <answer2CPU+0x390>)
 8003998:	701a      	strb	r2, [r3, #0]
					for (i = 0; i <strLen; i++) {
 800399a:	230e      	movs	r3, #14
 800399c:	18fb      	adds	r3, r7, r3
 800399e:	2200      	movs	r2, #0
 80039a0:	701a      	strb	r2, [r3, #0]
 80039a2:	e00f      	b.n	80039c4 <answer2CPU+0x294>
					dataASCII[i] = cmd[i+4];
 80039a4:	200e      	movs	r0, #14
 80039a6:	183b      	adds	r3, r7, r0
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	3304      	adds	r3, #4
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	18d2      	adds	r2, r2, r3
 80039b0:	183b      	adds	r3, r7, r0
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	7811      	ldrb	r1, [r2, #0]
 80039b6:	4a43      	ldr	r2, [pc, #268]	; (8003ac4 <answer2CPU+0x394>)
 80039b8:	54d1      	strb	r1, [r2, r3]
					for (i = 0; i <strLen; i++) {
 80039ba:	183b      	adds	r3, r7, r0
 80039bc:	781a      	ldrb	r2, [r3, #0]
 80039be:	183b      	adds	r3, r7, r0
 80039c0:	3201      	adds	r2, #1
 80039c2:	701a      	strb	r2, [r3, #0]
 80039c4:	4b3e      	ldr	r3, [pc, #248]	; (8003ac0 <answer2CPU+0x390>)
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	220e      	movs	r2, #14
 80039ca:	18ba      	adds	r2, r7, r2
 80039cc:	7812      	ldrb	r2, [r2, #0]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d3e8      	bcc.n	80039a4 <answer2CPU+0x274>
				}
					cmd2Execute=0x13;
 80039d2:	4b33      	ldr	r3, [pc, #204]	; (8003aa0 <answer2CPU+0x370>)
 80039d4:	2213      	movs	r2, #19
 80039d6:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 80039d8:	4b36      	ldr	r3, [pc, #216]	; (8003ab4 <answer2CPU+0x384>)
 80039da:	2200      	movs	r2, #0
 80039dc:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x14) {			//издать звук
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	2b14      	cmp	r3, #20
 80039e4:	d109      	bne.n	80039fa <answer2CPU+0x2ca>
					numSound = cmd[2];
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	789a      	ldrb	r2, [r3, #2]
 80039ea:	4b37      	ldr	r3, [pc, #220]	; (8003ac8 <answer2CPU+0x398>)
 80039ec:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x14;
 80039ee:	4b2c      	ldr	r3, [pc, #176]	; (8003aa0 <answer2CPU+0x370>)
 80039f0:	2214      	movs	r2, #20
 80039f2:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 80039f4:	4b2f      	ldr	r3, [pc, #188]	; (8003ab4 <answer2CPU+0x384>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x15) {
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	2b15      	cmp	r3, #21
 8003a00:	d10d      	bne.n	8003a1e <answer2CPU+0x2ee>
					volume = cmd[2];
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	789a      	ldrb	r2, [r3, #2]
 8003a06:	4b31      	ldr	r3, [pc, #196]	; (8003acc <answer2CPU+0x39c>)
 8003a08:	701a      	strb	r2, [r3, #0]
					contrast = cmd[3];
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	78da      	ldrb	r2, [r3, #3]
 8003a0e:	4b30      	ldr	r3, [pc, #192]	; (8003ad0 <answer2CPU+0x3a0>)
 8003a10:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x15;
 8003a12:	4b23      	ldr	r3, [pc, #140]	; (8003aa0 <answer2CPU+0x370>)
 8003a14:	2215      	movs	r2, #21
 8003a16:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8003a18:	4b26      	ldr	r3, [pc, #152]	; (8003ab4 <answer2CPU+0x384>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x16) {
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	2b16      	cmp	r3, #22
 8003a24:	d10d      	bne.n	8003a42 <answer2CPU+0x312>
					volume = cmd[3];
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	78da      	ldrb	r2, [r3, #3]
 8003a2a:	4b28      	ldr	r3, [pc, #160]	; (8003acc <answer2CPU+0x39c>)
 8003a2c:	701a      	strb	r2, [r3, #0]
					contrast = cmd[4];
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	791a      	ldrb	r2, [r3, #4]
 8003a32:	4b27      	ldr	r3, [pc, #156]	; (8003ad0 <answer2CPU+0x3a0>)
 8003a34:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x16;
 8003a36:	4b1a      	ldr	r3, [pc, #104]	; (8003aa0 <answer2CPU+0x370>)
 8003a38:	2216      	movs	r2, #22
 8003a3a:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8003a3c:	4b1d      	ldr	r3, [pc, #116]	; (8003ab4 <answer2CPU+0x384>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	701a      	strb	r2, [r3, #0]
				}
//				weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, Image);
//				USART2->ICR|=USART_ICR_ORECF;
			}
//==========================================================================================================================
			if (cmd[0] == 0x00) { //request of pcb type
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d000      	beq.n	8003a4c <answer2CPU+0x31c>
 8003a4a:	e09b      	b.n	8003b84 <answer2CPU+0x454>
				myLength = 0x14; //20 bytes length answer
 8003a4c:	2109      	movs	r1, #9
 8003a4e:	187b      	adds	r3, r7, r1
 8003a50:	2214      	movs	r2, #20
 8003a52:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8003a54:	187b      	adds	r3, r7, r1
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	3b02      	subs	r3, #2
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	4b12      	ldr	r3, [pc, #72]	; (8003aa8 <answer2CPU+0x378>)
 8003a60:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8003a62:	230e      	movs	r3, #14
 8003a64:	18fb      	adds	r3, r7, r3
 8003a66:	2200      	movs	r2, #0
 8003a68:	701a      	strb	r2, [r3, #0]
 8003a6a:	e010      	b.n	8003a8e <answer2CPU+0x35e>
					ans[i + 2] = PCB_type[i];
 8003a6c:	200e      	movs	r0, #14
 8003a6e:	183b      	adds	r3, r7, r0
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	4a18      	ldr	r2, [pc, #96]	; (8003ad4 <answer2CPU+0x3a4>)
 8003a74:	5cd1      	ldrb	r1, [r2, r3]
 8003a76:	183b      	adds	r3, r7, r0
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	1c9a      	adds	r2, r3, #2
 8003a7c:	b289      	uxth	r1, r1
 8003a7e:	4b0a      	ldr	r3, [pc, #40]	; (8003aa8 <answer2CPU+0x378>)
 8003a80:	0052      	lsls	r2, r2, #1
 8003a82:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8003a84:	183b      	adds	r3, r7, r0
 8003a86:	781a      	ldrb	r2, [r3, #0]
 8003a88:	183b      	adds	r3, r7, r0
 8003a8a:	3201      	adds	r2, #1
 8003a8c:	701a      	strb	r2, [r3, #0]
 8003a8e:	220e      	movs	r2, #14
 8003a90:	18bb      	adds	r3, r7, r2
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	2b10      	cmp	r3, #16
 8003a96:	d9e9      	bls.n	8003a6c <answer2CPU+0x33c>
				}
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8003a98:	18bb      	adds	r3, r7, r2
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	701a      	strb	r2, [r3, #0]
 8003a9e:	e02d      	b.n	8003afc <answer2CPU+0x3cc>
 8003aa0:	20000366 	.word	0x20000366
 8003aa4:	50000800 	.word	0x50000800
 8003aa8:	200003ac 	.word	0x200003ac
 8003aac:	40004400 	.word	0x40004400
 8003ab0:	20000365 	.word	0x20000365
 8003ab4:	200003c0 	.word	0x200003c0
 8003ab8:	200001f4 	.word	0x200001f4
 8003abc:	20000288 	.word	0x20000288
 8003ac0:	200003a9 	.word	0x200003a9
 8003ac4:	200000a0 	.word	0x200000a0
 8003ac8:	20000429 	.word	0x20000429
 8003acc:	200001f1 	.word	0x200001f1
 8003ad0:	200002f4 	.word	0x200002f4
 8003ad4:	20000000 	.word	0x20000000
					myCS = myCS + ans[i];
 8003ad8:	200e      	movs	r0, #14
 8003ada:	183b      	adds	r3, r7, r0
 8003adc:	781a      	ldrb	r2, [r3, #0]
 8003ade:	4bdb      	ldr	r3, [pc, #876]	; (8003e4c <answer2CPU+0x71c>)
 8003ae0:	0052      	lsls	r2, r2, #1
 8003ae2:	5ad3      	ldrh	r3, [r2, r3]
 8003ae4:	b2d9      	uxtb	r1, r3
 8003ae6:	220d      	movs	r2, #13
 8003ae8:	18bb      	adds	r3, r7, r2
 8003aea:	18ba      	adds	r2, r7, r2
 8003aec:	7812      	ldrb	r2, [r2, #0]
 8003aee:	188a      	adds	r2, r1, r2
 8003af0:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8003af2:	183b      	adds	r3, r7, r0
 8003af4:	781a      	ldrb	r2, [r3, #0]
 8003af6:	183b      	adds	r3, r7, r0
 8003af8:	3201      	adds	r2, #1
 8003afa:	701a      	strb	r2, [r3, #0]
 8003afc:	230e      	movs	r3, #14
 8003afe:	18fb      	adds	r3, r7, r3
 8003b00:	781a      	ldrb	r2, [r3, #0]
 8003b02:	2009      	movs	r0, #9
 8003b04:	183b      	adds	r3, r7, r0
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	dbe4      	blt.n	8003ad8 <answer2CPU+0x3a8>
				}
				myCS = 0 - myCS;
 8003b0e:	210d      	movs	r1, #13
 8003b10:	187b      	adds	r3, r7, r1
 8003b12:	187a      	adds	r2, r7, r1
 8003b14:	7812      	ldrb	r2, [r2, #0]
 8003b16:	4252      	negs	r2, r2
 8003b18:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8003b1a:	183b      	adds	r3, r7, r0
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	1e5a      	subs	r2, r3, #1
 8003b20:	187b      	adds	r3, r7, r1
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	b299      	uxth	r1, r3
 8003b26:	4bc9      	ldr	r3, [pc, #804]	; (8003e4c <answer2CPU+0x71c>)
 8003b28:	0052      	lsls	r2, r2, #1
 8003b2a:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8003b2c:	46c0      	nop			; (mov r8, r8)
 8003b2e:	4bc8      	ldr	r3, [pc, #800]	; (8003e50 <answer2CPU+0x720>)
 8003b30:	69db      	ldr	r3, [r3, #28]
 8003b32:	2280      	movs	r2, #128	; 0x80
 8003b34:	4013      	ands	r3, r2
 8003b36:	d0fa      	beq.n	8003b2e <answer2CPU+0x3fe>
				USART2->TDR = ans[0]|0x0100;
 8003b38:	4bc4      	ldr	r3, [pc, #784]	; (8003e4c <answer2CPU+0x71c>)
 8003b3a:	881b      	ldrh	r3, [r3, #0]
 8003b3c:	2280      	movs	r2, #128	; 0x80
 8003b3e:	0052      	lsls	r2, r2, #1
 8003b40:	4313      	orrs	r3, r2
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	4bc2      	ldr	r3, [pc, #776]	; (8003e50 <answer2CPU+0x720>)
 8003b46:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8003b48:	e014      	b.n	8003b74 <answer2CPU+0x444>
				  {
				    i++;
 8003b4a:	210e      	movs	r1, #14
 8003b4c:	187b      	adds	r3, r7, r1
 8003b4e:	781a      	ldrb	r2, [r3, #0]
 8003b50:	187b      	adds	r3, r7, r1
 8003b52:	3201      	adds	r2, #1
 8003b54:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8003b56:	46c0      	nop			; (mov r8, r8)
 8003b58:	4bbd      	ldr	r3, [pc, #756]	; (8003e50 <answer2CPU+0x720>)
 8003b5a:	69db      	ldr	r3, [r3, #28]
 8003b5c:	2280      	movs	r2, #128	; 0x80
 8003b5e:	4013      	ands	r3, r2
 8003b60:	d0fa      	beq.n	8003b58 <answer2CPU+0x428>
				    USART2->TDR = (uint8_t)ans[i];
 8003b62:	230e      	movs	r3, #14
 8003b64:	18fb      	adds	r3, r7, r3
 8003b66:	781a      	ldrb	r2, [r3, #0]
 8003b68:	4bb8      	ldr	r3, [pc, #736]	; (8003e4c <answer2CPU+0x71c>)
 8003b6a:	0052      	lsls	r2, r2, #1
 8003b6c:	5ad3      	ldrh	r3, [r2, r3]
 8003b6e:	b2da      	uxtb	r2, r3
 8003b70:	4bb7      	ldr	r3, [pc, #732]	; (8003e50 <answer2CPU+0x720>)
 8003b72:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8003b74:	230e      	movs	r3, #14
 8003b76:	18fb      	adds	r3, r7, r3
 8003b78:	781a      	ldrb	r2, [r3, #0]
 8003b7a:	4bb4      	ldr	r3, [pc, #720]	; (8003e4c <answer2CPU+0x71c>)
 8003b7c:	0052      	lsls	r2, r2, #1
 8003b7e:	5ad3      	ldrh	r3, [r2, r3]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1e2      	bne.n	8003b4a <answer2CPU+0x41a>
				  }
//				 cmd2Execute=0x00;
			}
//============================================================================================================================
			if (cmd[0] == 0x01) { //request of pcb revision
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d000      	beq.n	8003b8e <answer2CPU+0x45e>
 8003b8c:	e07f      	b.n	8003c8e <answer2CPU+0x55e>
				myLength = 0x0B; //19 bytes length answer
 8003b8e:	2109      	movs	r1, #9
 8003b90:	187b      	adds	r3, r7, r1
 8003b92:	220b      	movs	r2, #11
 8003b94:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8003b96:	187b      	adds	r3, r7, r1
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	3b02      	subs	r3, #2
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	4baa      	ldr	r3, [pc, #680]	; (8003e4c <answer2CPU+0x71c>)
 8003ba2:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8003ba4:	230e      	movs	r3, #14
 8003ba6:	18fb      	adds	r3, r7, r3
 8003ba8:	2200      	movs	r2, #0
 8003baa:	701a      	strb	r2, [r3, #0]
 8003bac:	e010      	b.n	8003bd0 <answer2CPU+0x4a0>
					ans[i + 2] = PCB_rev[i];
 8003bae:	200e      	movs	r0, #14
 8003bb0:	183b      	adds	r3, r7, r0
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	4aa7      	ldr	r2, [pc, #668]	; (8003e54 <answer2CPU+0x724>)
 8003bb6:	5cd1      	ldrb	r1, [r2, r3]
 8003bb8:	183b      	adds	r3, r7, r0
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	1c9a      	adds	r2, r3, #2
 8003bbe:	b289      	uxth	r1, r1
 8003bc0:	4ba2      	ldr	r3, [pc, #648]	; (8003e4c <answer2CPU+0x71c>)
 8003bc2:	0052      	lsls	r2, r2, #1
 8003bc4:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8003bc6:	183b      	adds	r3, r7, r0
 8003bc8:	781a      	ldrb	r2, [r3, #0]
 8003bca:	183b      	adds	r3, r7, r0
 8003bcc:	3201      	adds	r2, #1
 8003bce:	701a      	strb	r2, [r3, #0]
 8003bd0:	220e      	movs	r2, #14
 8003bd2:	18bb      	adds	r3, r7, r2
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	2b10      	cmp	r3, #16
 8003bd8:	d9e9      	bls.n	8003bae <answer2CPU+0x47e>
				}
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8003bda:	18bb      	adds	r3, r7, r2
 8003bdc:	2200      	movs	r2, #0
 8003bde:	701a      	strb	r2, [r3, #0]
 8003be0:	e011      	b.n	8003c06 <answer2CPU+0x4d6>
					myCS = myCS + ans[i];
 8003be2:	200e      	movs	r0, #14
 8003be4:	183b      	adds	r3, r7, r0
 8003be6:	781a      	ldrb	r2, [r3, #0]
 8003be8:	4b98      	ldr	r3, [pc, #608]	; (8003e4c <answer2CPU+0x71c>)
 8003bea:	0052      	lsls	r2, r2, #1
 8003bec:	5ad3      	ldrh	r3, [r2, r3]
 8003bee:	b2d9      	uxtb	r1, r3
 8003bf0:	220d      	movs	r2, #13
 8003bf2:	18bb      	adds	r3, r7, r2
 8003bf4:	18ba      	adds	r2, r7, r2
 8003bf6:	7812      	ldrb	r2, [r2, #0]
 8003bf8:	188a      	adds	r2, r1, r2
 8003bfa:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8003bfc:	183b      	adds	r3, r7, r0
 8003bfe:	781a      	ldrb	r2, [r3, #0]
 8003c00:	183b      	adds	r3, r7, r0
 8003c02:	3201      	adds	r2, #1
 8003c04:	701a      	strb	r2, [r3, #0]
 8003c06:	230e      	movs	r3, #14
 8003c08:	18fb      	adds	r3, r7, r3
 8003c0a:	781a      	ldrb	r2, [r3, #0]
 8003c0c:	2009      	movs	r0, #9
 8003c0e:	183b      	adds	r3, r7, r0
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	3b01      	subs	r3, #1
 8003c14:	429a      	cmp	r2, r3
 8003c16:	dbe4      	blt.n	8003be2 <answer2CPU+0x4b2>
				}
				myCS = 0 - myCS;
 8003c18:	210d      	movs	r1, #13
 8003c1a:	187b      	adds	r3, r7, r1
 8003c1c:	187a      	adds	r2, r7, r1
 8003c1e:	7812      	ldrb	r2, [r2, #0]
 8003c20:	4252      	negs	r2, r2
 8003c22:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8003c24:	183b      	adds	r3, r7, r0
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	1e5a      	subs	r2, r3, #1
 8003c2a:	187b      	adds	r3, r7, r1
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	b299      	uxth	r1, r3
 8003c30:	4b86      	ldr	r3, [pc, #536]	; (8003e4c <answer2CPU+0x71c>)
 8003c32:	0052      	lsls	r2, r2, #1
 8003c34:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8003c36:	46c0      	nop			; (mov r8, r8)
 8003c38:	4b85      	ldr	r3, [pc, #532]	; (8003e50 <answer2CPU+0x720>)
 8003c3a:	69db      	ldr	r3, [r3, #28]
 8003c3c:	2280      	movs	r2, #128	; 0x80
 8003c3e:	4013      	ands	r3, r2
 8003c40:	d0fa      	beq.n	8003c38 <answer2CPU+0x508>
				USART2->TDR = ans[0]|0x0100;
 8003c42:	4b82      	ldr	r3, [pc, #520]	; (8003e4c <answer2CPU+0x71c>)
 8003c44:	881b      	ldrh	r3, [r3, #0]
 8003c46:	2280      	movs	r2, #128	; 0x80
 8003c48:	0052      	lsls	r2, r2, #1
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	4b80      	ldr	r3, [pc, #512]	; (8003e50 <answer2CPU+0x720>)
 8003c50:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8003c52:	e014      	b.n	8003c7e <answer2CPU+0x54e>
					  {
					    i++;
 8003c54:	210e      	movs	r1, #14
 8003c56:	187b      	adds	r3, r7, r1
 8003c58:	781a      	ldrb	r2, [r3, #0]
 8003c5a:	187b      	adds	r3, r7, r1
 8003c5c:	3201      	adds	r2, #1
 8003c5e:	701a      	strb	r2, [r3, #0]
					    while(!(USART2->ISR & USART_ISR_TXE)){};
 8003c60:	46c0      	nop			; (mov r8, r8)
 8003c62:	4b7b      	ldr	r3, [pc, #492]	; (8003e50 <answer2CPU+0x720>)
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	2280      	movs	r2, #128	; 0x80
 8003c68:	4013      	ands	r3, r2
 8003c6a:	d0fa      	beq.n	8003c62 <answer2CPU+0x532>
					    USART2->TDR = (uint8_t)ans[i];
 8003c6c:	230e      	movs	r3, #14
 8003c6e:	18fb      	adds	r3, r7, r3
 8003c70:	781a      	ldrb	r2, [r3, #0]
 8003c72:	4b76      	ldr	r3, [pc, #472]	; (8003e4c <answer2CPU+0x71c>)
 8003c74:	0052      	lsls	r2, r2, #1
 8003c76:	5ad3      	ldrh	r3, [r2, r3]
 8003c78:	b2da      	uxtb	r2, r3
 8003c7a:	4b75      	ldr	r3, [pc, #468]	; (8003e50 <answer2CPU+0x720>)
 8003c7c:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8003c7e:	230e      	movs	r3, #14
 8003c80:	18fb      	adds	r3, r7, r3
 8003c82:	781a      	ldrb	r2, [r3, #0]
 8003c84:	4b71      	ldr	r3, [pc, #452]	; (8003e4c <answer2CPU+0x71c>)
 8003c86:	0052      	lsls	r2, r2, #1
 8003c88:	5ad3      	ldrh	r3, [r2, r3]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1e2      	bne.n	8003c54 <answer2CPU+0x524>
					  }
//				 cmd2Execute=0x01;
			}
//================================================================================================================================
			if (cmd[0] == 0x02) { //request of emitter SN
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d000      	beq.n	8003c98 <answer2CPU+0x568>
 8003c96:	e07f      	b.n	8003d98 <answer2CPU+0x668>
				myLength = 0x13; //19 bytes length answer
 8003c98:	2109      	movs	r1, #9
 8003c9a:	187b      	adds	r3, r7, r1
 8003c9c:	2213      	movs	r2, #19
 8003c9e:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8003ca0:	187b      	adds	r3, r7, r1
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	3b02      	subs	r3, #2
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	4b68      	ldr	r3, [pc, #416]	; (8003e4c <answer2CPU+0x71c>)
 8003cac:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8003cae:	230e      	movs	r3, #14
 8003cb0:	18fb      	adds	r3, r7, r3
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	701a      	strb	r2, [r3, #0]
 8003cb6:	e010      	b.n	8003cda <answer2CPU+0x5aa>
					ans[i + 2] = EmitterSN[i];
 8003cb8:	200e      	movs	r0, #14
 8003cba:	183b      	adds	r3, r7, r0
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	4a66      	ldr	r2, [pc, #408]	; (8003e58 <answer2CPU+0x728>)
 8003cc0:	5cd1      	ldrb	r1, [r2, r3]
 8003cc2:	183b      	adds	r3, r7, r0
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	1c9a      	adds	r2, r3, #2
 8003cc8:	b289      	uxth	r1, r1
 8003cca:	4b60      	ldr	r3, [pc, #384]	; (8003e4c <answer2CPU+0x71c>)
 8003ccc:	0052      	lsls	r2, r2, #1
 8003cce:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8003cd0:	183b      	adds	r3, r7, r0
 8003cd2:	781a      	ldrb	r2, [r3, #0]
 8003cd4:	183b      	adds	r3, r7, r0
 8003cd6:	3201      	adds	r2, #1
 8003cd8:	701a      	strb	r2, [r3, #0]
 8003cda:	220e      	movs	r2, #14
 8003cdc:	18bb      	adds	r3, r7, r2
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	2b10      	cmp	r3, #16
 8003ce2:	d9e9      	bls.n	8003cb8 <answer2CPU+0x588>
				}
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8003ce4:	18bb      	adds	r3, r7, r2
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	701a      	strb	r2, [r3, #0]
 8003cea:	e011      	b.n	8003d10 <answer2CPU+0x5e0>
					myCS = myCS + ans[i];
 8003cec:	200e      	movs	r0, #14
 8003cee:	183b      	adds	r3, r7, r0
 8003cf0:	781a      	ldrb	r2, [r3, #0]
 8003cf2:	4b56      	ldr	r3, [pc, #344]	; (8003e4c <answer2CPU+0x71c>)
 8003cf4:	0052      	lsls	r2, r2, #1
 8003cf6:	5ad3      	ldrh	r3, [r2, r3]
 8003cf8:	b2d9      	uxtb	r1, r3
 8003cfa:	220d      	movs	r2, #13
 8003cfc:	18bb      	adds	r3, r7, r2
 8003cfe:	18ba      	adds	r2, r7, r2
 8003d00:	7812      	ldrb	r2, [r2, #0]
 8003d02:	188a      	adds	r2, r1, r2
 8003d04:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8003d06:	183b      	adds	r3, r7, r0
 8003d08:	781a      	ldrb	r2, [r3, #0]
 8003d0a:	183b      	adds	r3, r7, r0
 8003d0c:	3201      	adds	r2, #1
 8003d0e:	701a      	strb	r2, [r3, #0]
 8003d10:	230e      	movs	r3, #14
 8003d12:	18fb      	adds	r3, r7, r3
 8003d14:	781a      	ldrb	r2, [r3, #0]
 8003d16:	2009      	movs	r0, #9
 8003d18:	183b      	adds	r3, r7, r0
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	dbe4      	blt.n	8003cec <answer2CPU+0x5bc>
				}
				myCS = 0 - myCS;
 8003d22:	210d      	movs	r1, #13
 8003d24:	187b      	adds	r3, r7, r1
 8003d26:	187a      	adds	r2, r7, r1
 8003d28:	7812      	ldrb	r2, [r2, #0]
 8003d2a:	4252      	negs	r2, r2
 8003d2c:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8003d2e:	183b      	adds	r3, r7, r0
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	1e5a      	subs	r2, r3, #1
 8003d34:	187b      	adds	r3, r7, r1
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	b299      	uxth	r1, r3
 8003d3a:	4b44      	ldr	r3, [pc, #272]	; (8003e4c <answer2CPU+0x71c>)
 8003d3c:	0052      	lsls	r2, r2, #1
 8003d3e:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8003d40:	46c0      	nop			; (mov r8, r8)
 8003d42:	4b43      	ldr	r3, [pc, #268]	; (8003e50 <answer2CPU+0x720>)
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	2280      	movs	r2, #128	; 0x80
 8003d48:	4013      	ands	r3, r2
 8003d4a:	d0fa      	beq.n	8003d42 <answer2CPU+0x612>
				USART2->TDR = ans[0]|0x0100;
 8003d4c:	4b3f      	ldr	r3, [pc, #252]	; (8003e4c <answer2CPU+0x71c>)
 8003d4e:	881b      	ldrh	r3, [r3, #0]
 8003d50:	2280      	movs	r2, #128	; 0x80
 8003d52:	0052      	lsls	r2, r2, #1
 8003d54:	4313      	orrs	r3, r2
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	4b3d      	ldr	r3, [pc, #244]	; (8003e50 <answer2CPU+0x720>)
 8003d5a:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8003d5c:	e014      	b.n	8003d88 <answer2CPU+0x658>
				  {
				    i++;
 8003d5e:	210e      	movs	r1, #14
 8003d60:	187b      	adds	r3, r7, r1
 8003d62:	781a      	ldrb	r2, [r3, #0]
 8003d64:	187b      	adds	r3, r7, r1
 8003d66:	3201      	adds	r2, #1
 8003d68:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8003d6a:	46c0      	nop			; (mov r8, r8)
 8003d6c:	4b38      	ldr	r3, [pc, #224]	; (8003e50 <answer2CPU+0x720>)
 8003d6e:	69db      	ldr	r3, [r3, #28]
 8003d70:	2280      	movs	r2, #128	; 0x80
 8003d72:	4013      	ands	r3, r2
 8003d74:	d0fa      	beq.n	8003d6c <answer2CPU+0x63c>
				    	USART2->TDR = (uint8_t)ans[i];
 8003d76:	230e      	movs	r3, #14
 8003d78:	18fb      	adds	r3, r7, r3
 8003d7a:	781a      	ldrb	r2, [r3, #0]
 8003d7c:	4b33      	ldr	r3, [pc, #204]	; (8003e4c <answer2CPU+0x71c>)
 8003d7e:	0052      	lsls	r2, r2, #1
 8003d80:	5ad3      	ldrh	r3, [r2, r3]
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	4b32      	ldr	r3, [pc, #200]	; (8003e50 <answer2CPU+0x720>)
 8003d86:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8003d88:	230e      	movs	r3, #14
 8003d8a:	18fb      	adds	r3, r7, r3
 8003d8c:	781a      	ldrb	r2, [r3, #0]
 8003d8e:	4b2f      	ldr	r3, [pc, #188]	; (8003e4c <answer2CPU+0x71c>)
 8003d90:	0052      	lsls	r2, r2, #1
 8003d92:	5ad3      	ldrh	r3, [r2, r3]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1e2      	bne.n	8003d5e <answer2CPU+0x62e>
				  }
//				cmd2Execute=0x02;
			}
//===============================================================================================================================
			if (cmd[0] == 0x03) { //request of current consumption
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	2b03      	cmp	r3, #3
 8003d9e:	d000      	beq.n	8003da2 <answer2CPU+0x672>
 8003da0:	e07b      	b.n	8003e9a <answer2CPU+0x76a>
				myLength = 0x04; //4 bytes length answer
 8003da2:	2109      	movs	r1, #9
 8003da4:	187b      	adds	r3, r7, r1
 8003da6:	2204      	movs	r2, #4
 8003da8:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8003daa:	187b      	adds	r3, r7, r1
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	3b02      	subs	r3, #2
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	4b25      	ldr	r3, [pc, #148]	; (8003e4c <answer2CPU+0x71c>)
 8003db6:	805a      	strh	r2, [r3, #2]
				ans[2] = currentConsumption;
 8003db8:	4b28      	ldr	r3, [pc, #160]	; (8003e5c <answer2CPU+0x72c>)
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	4b23      	ldr	r3, [pc, #140]	; (8003e4c <answer2CPU+0x71c>)
 8003dc0:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8003dc2:	230d      	movs	r3, #13
 8003dc4:	18fb      	adds	r3, r7, r3
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	4b20      	ldr	r3, [pc, #128]	; (8003e4c <answer2CPU+0x71c>)
 8003dcc:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8003dce:	230e      	movs	r3, #14
 8003dd0:	18fb      	adds	r3, r7, r3
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	701a      	strb	r2, [r3, #0]
 8003dd6:	e011      	b.n	8003dfc <answer2CPU+0x6cc>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8003dd8:	200e      	movs	r0, #14
 8003dda:	183b      	adds	r3, r7, r0
 8003ddc:	781a      	ldrb	r2, [r3, #0]
 8003dde:	4b1b      	ldr	r3, [pc, #108]	; (8003e4c <answer2CPU+0x71c>)
 8003de0:	0052      	lsls	r2, r2, #1
 8003de2:	5ad3      	ldrh	r3, [r2, r3]
 8003de4:	b2d9      	uxtb	r1, r3
 8003de6:	220d      	movs	r2, #13
 8003de8:	18bb      	adds	r3, r7, r2
 8003dea:	18ba      	adds	r2, r7, r2
 8003dec:	7812      	ldrb	r2, [r2, #0]
 8003dee:	188a      	adds	r2, r1, r2
 8003df0:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8003df2:	183b      	adds	r3, r7, r0
 8003df4:	781a      	ldrb	r2, [r3, #0]
 8003df6:	183b      	adds	r3, r7, r0
 8003df8:	3201      	adds	r2, #1
 8003dfa:	701a      	strb	r2, [r3, #0]
 8003dfc:	230e      	movs	r3, #14
 8003dfe:	18fb      	adds	r3, r7, r3
 8003e00:	781a      	ldrb	r2, [r3, #0]
 8003e02:	2009      	movs	r0, #9
 8003e04:	183b      	adds	r3, r7, r0
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	dbe4      	blt.n	8003dd8 <answer2CPU+0x6a8>
				}
				myCS = 0 - myCS;
 8003e0e:	210d      	movs	r1, #13
 8003e10:	187b      	adds	r3, r7, r1
 8003e12:	187a      	adds	r2, r7, r1
 8003e14:	7812      	ldrb	r2, [r2, #0]
 8003e16:	4252      	negs	r2, r2
 8003e18:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8003e1a:	183b      	adds	r3, r7, r0
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	1e5a      	subs	r2, r3, #1
 8003e20:	187b      	adds	r3, r7, r1
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	b299      	uxth	r1, r3
 8003e26:	4b09      	ldr	r3, [pc, #36]	; (8003e4c <answer2CPU+0x71c>)
 8003e28:	0052      	lsls	r2, r2, #1
 8003e2a:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8003e2c:	46c0      	nop			; (mov r8, r8)
 8003e2e:	4b08      	ldr	r3, [pc, #32]	; (8003e50 <answer2CPU+0x720>)
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	2280      	movs	r2, #128	; 0x80
 8003e34:	4013      	ands	r3, r2
 8003e36:	d0fa      	beq.n	8003e2e <answer2CPU+0x6fe>
					USART2->TDR = ans[0]|0x0100;
 8003e38:	4b04      	ldr	r3, [pc, #16]	; (8003e4c <answer2CPU+0x71c>)
 8003e3a:	881b      	ldrh	r3, [r3, #0]
 8003e3c:	2280      	movs	r2, #128	; 0x80
 8003e3e:	0052      	lsls	r2, r2, #1
 8003e40:	4313      	orrs	r3, r2
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	4b02      	ldr	r3, [pc, #8]	; (8003e50 <answer2CPU+0x720>)
 8003e46:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8003e48:	e01f      	b.n	8003e8a <answer2CPU+0x75a>
 8003e4a:	46c0      	nop			; (mov r8, r8)
 8003e4c:	200003ac 	.word	0x200003ac
 8003e50:	40004400 	.word	0x40004400
 8003e54:	20000014 	.word	0x20000014
 8003e58:	20000020 	.word	0x20000020
 8003e5c:	2000001c 	.word	0x2000001c
						{
						  i++;
 8003e60:	210e      	movs	r1, #14
 8003e62:	187b      	adds	r3, r7, r1
 8003e64:	781a      	ldrb	r2, [r3, #0]
 8003e66:	187b      	adds	r3, r7, r1
 8003e68:	3201      	adds	r2, #1
 8003e6a:	701a      	strb	r2, [r3, #0]
						  while(!(USART2->ISR & USART_ISR_TXE)){};
 8003e6c:	46c0      	nop			; (mov r8, r8)
 8003e6e:	4b4e      	ldr	r3, [pc, #312]	; (8003fa8 <answer2CPU+0x878>)
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	2280      	movs	r2, #128	; 0x80
 8003e74:	4013      	ands	r3, r2
 8003e76:	d0fa      	beq.n	8003e6e <answer2CPU+0x73e>
						     USART2->TDR = (uint8_t)ans[i];
 8003e78:	230e      	movs	r3, #14
 8003e7a:	18fb      	adds	r3, r7, r3
 8003e7c:	781a      	ldrb	r2, [r3, #0]
 8003e7e:	4b4b      	ldr	r3, [pc, #300]	; (8003fac <answer2CPU+0x87c>)
 8003e80:	0052      	lsls	r2, r2, #1
 8003e82:	5ad3      	ldrh	r3, [r2, r3]
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	4b48      	ldr	r3, [pc, #288]	; (8003fa8 <answer2CPU+0x878>)
 8003e88:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8003e8a:	230e      	movs	r3, #14
 8003e8c:	18fb      	adds	r3, r7, r3
 8003e8e:	781a      	ldrb	r2, [r3, #0]
 8003e90:	4b46      	ldr	r3, [pc, #280]	; (8003fac <answer2CPU+0x87c>)
 8003e92:	0052      	lsls	r2, r2, #1
 8003e94:	5ad3      	ldrh	r3, [r2, r3]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1e2      	bne.n	8003e60 <answer2CPU+0x730>
						}
//					cmd2Execute=0x03;
			}
			if (cmd[0] == 0x04) { //request of current consumption
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	2b04      	cmp	r3, #4
 8003ea0:	d000      	beq.n	8003ea4 <answer2CPU+0x774>
 8003ea2:	e076      	b.n	8003f92 <answer2CPU+0x862>
				myLength = 0x04; //4 bytes length answer
 8003ea4:	2109      	movs	r1, #9
 8003ea6:	187b      	adds	r3, r7, r1
 8003ea8:	2204      	movs	r2, #4
 8003eaa:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8003eac:	187b      	adds	r3, r7, r1
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	3b02      	subs	r3, #2
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	4b3d      	ldr	r3, [pc, #244]	; (8003fac <answer2CPU+0x87c>)
 8003eb8:	805a      	strh	r2, [r3, #2]
				uartSpeed = cmd[2];
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	3302      	adds	r3, #2
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	001a      	movs	r2, r3
 8003ec2:	4b3b      	ldr	r3, [pc, #236]	; (8003fb0 <answer2CPU+0x880>)
 8003ec4:	601a      	str	r2, [r3, #0]
				ans[2] = currentUARTspeed;
 8003ec6:	4b3b      	ldr	r3, [pc, #236]	; (8003fb4 <answer2CPU+0x884>)
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	4b37      	ldr	r3, [pc, #220]	; (8003fac <answer2CPU+0x87c>)
 8003ece:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8003ed0:	230d      	movs	r3, #13
 8003ed2:	18fb      	adds	r3, r7, r3
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	4b34      	ldr	r3, [pc, #208]	; (8003fac <answer2CPU+0x87c>)
 8003eda:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8003edc:	230e      	movs	r3, #14
 8003ede:	18fb      	adds	r3, r7, r3
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	701a      	strb	r2, [r3, #0]
 8003ee4:	e011      	b.n	8003f0a <answer2CPU+0x7da>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8003ee6:	200e      	movs	r0, #14
 8003ee8:	183b      	adds	r3, r7, r0
 8003eea:	781a      	ldrb	r2, [r3, #0]
 8003eec:	4b2f      	ldr	r3, [pc, #188]	; (8003fac <answer2CPU+0x87c>)
 8003eee:	0052      	lsls	r2, r2, #1
 8003ef0:	5ad3      	ldrh	r3, [r2, r3]
 8003ef2:	b2d9      	uxtb	r1, r3
 8003ef4:	220d      	movs	r2, #13
 8003ef6:	18bb      	adds	r3, r7, r2
 8003ef8:	18ba      	adds	r2, r7, r2
 8003efa:	7812      	ldrb	r2, [r2, #0]
 8003efc:	188a      	adds	r2, r1, r2
 8003efe:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8003f00:	183b      	adds	r3, r7, r0
 8003f02:	781a      	ldrb	r2, [r3, #0]
 8003f04:	183b      	adds	r3, r7, r0
 8003f06:	3201      	adds	r2, #1
 8003f08:	701a      	strb	r2, [r3, #0]
 8003f0a:	230e      	movs	r3, #14
 8003f0c:	18fb      	adds	r3, r7, r3
 8003f0e:	781a      	ldrb	r2, [r3, #0]
 8003f10:	2009      	movs	r0, #9
 8003f12:	183b      	adds	r3, r7, r0
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	3b01      	subs	r3, #1
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	dbe4      	blt.n	8003ee6 <answer2CPU+0x7b6>
				}
				myCS = 0 - myCS;
 8003f1c:	210d      	movs	r1, #13
 8003f1e:	187b      	adds	r3, r7, r1
 8003f20:	187a      	adds	r2, r7, r1
 8003f22:	7812      	ldrb	r2, [r2, #0]
 8003f24:	4252      	negs	r2, r2
 8003f26:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8003f28:	183b      	adds	r3, r7, r0
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	1e5a      	subs	r2, r3, #1
 8003f2e:	187b      	adds	r3, r7, r1
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	b299      	uxth	r1, r3
 8003f34:	4b1d      	ldr	r3, [pc, #116]	; (8003fac <answer2CPU+0x87c>)
 8003f36:	0052      	lsls	r2, r2, #1
 8003f38:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8003f3a:	46c0      	nop			; (mov r8, r8)
 8003f3c:	4b1a      	ldr	r3, [pc, #104]	; (8003fa8 <answer2CPU+0x878>)
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	2280      	movs	r2, #128	; 0x80
 8003f42:	4013      	ands	r3, r2
 8003f44:	d0fa      	beq.n	8003f3c <answer2CPU+0x80c>
				USART2->TDR = ans[0]|0x0100;
 8003f46:	4b19      	ldr	r3, [pc, #100]	; (8003fac <answer2CPU+0x87c>)
 8003f48:	881b      	ldrh	r3, [r3, #0]
 8003f4a:	2280      	movs	r2, #128	; 0x80
 8003f4c:	0052      	lsls	r2, r2, #1
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	4b15      	ldr	r3, [pc, #84]	; (8003fa8 <answer2CPU+0x878>)
 8003f54:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8003f56:	e014      	b.n	8003f82 <answer2CPU+0x852>
				{
				  i++;
 8003f58:	210e      	movs	r1, #14
 8003f5a:	187b      	adds	r3, r7, r1
 8003f5c:	781a      	ldrb	r2, [r3, #0]
 8003f5e:	187b      	adds	r3, r7, r1
 8003f60:	3201      	adds	r2, #1
 8003f62:	701a      	strb	r2, [r3, #0]
				  while(!(USART2->ISR & USART_ISR_TXE)){};
 8003f64:	46c0      	nop			; (mov r8, r8)
 8003f66:	4b10      	ldr	r3, [pc, #64]	; (8003fa8 <answer2CPU+0x878>)
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	2280      	movs	r2, #128	; 0x80
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	d0fa      	beq.n	8003f66 <answer2CPU+0x836>
				  USART2->TDR = (uint8_t)ans[i];
 8003f70:	230e      	movs	r3, #14
 8003f72:	18fb      	adds	r3, r7, r3
 8003f74:	781a      	ldrb	r2, [r3, #0]
 8003f76:	4b0d      	ldr	r3, [pc, #52]	; (8003fac <answer2CPU+0x87c>)
 8003f78:	0052      	lsls	r2, r2, #1
 8003f7a:	5ad3      	ldrh	r3, [r2, r3]
 8003f7c:	b2da      	uxtb	r2, r3
 8003f7e:	4b0a      	ldr	r3, [pc, #40]	; (8003fa8 <answer2CPU+0x878>)
 8003f80:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8003f82:	230e      	movs	r3, #14
 8003f84:	18fb      	adds	r3, r7, r3
 8003f86:	781a      	ldrb	r2, [r3, #0]
 8003f88:	4b08      	ldr	r3, [pc, #32]	; (8003fac <answer2CPU+0x87c>)
 8003f8a:	0052      	lsls	r2, r2, #1
 8003f8c:	5ad3      	ldrh	r3, [r2, r3]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1e2      	bne.n	8003f58 <answer2CPU+0x828>
				}
//				cmd2Execute=0x04;
			}
//			weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, coala);
			USART2->ICR|=USART_ICR_ORECF;
 8003f92:	4b05      	ldr	r3, [pc, #20]	; (8003fa8 <answer2CPU+0x878>)
 8003f94:	6a1a      	ldr	r2, [r3, #32]
 8003f96:	4b04      	ldr	r3, [pc, #16]	; (8003fa8 <answer2CPU+0x878>)
 8003f98:	2108      	movs	r1, #8
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	621a      	str	r2, [r3, #32]
}
 8003f9e:	46c0      	nop			; (mov r8, r8)
 8003fa0:	0018      	movs	r0, r3
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	b004      	add	sp, #16
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	40004400 	.word	0x40004400
 8003fac:	200003ac 	.word	0x200003ac
 8003fb0:	20000300 	.word	0x20000300
 8003fb4:	200001f2 	.word	0x200001f2

08003fb8 <MEM_Reset>:
//==================================================================================================================================
	void MEM_Reset(void) {
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
		uint8_t memCMD;
		HAL_Delay(1); //200 ms by Andrew
 8003fbe:	2001      	movs	r0, #1
 8003fc0:	f001 fb72 	bl	80056a8 <HAL_Delay>
		GPIOC->ODR &= ~(1 << 15); //reset cs
 8003fc4:	4b28      	ldr	r3, [pc, #160]	; (8004068 <MEM_Reset+0xb0>)
 8003fc6:	695a      	ldr	r2, [r3, #20]
 8003fc8:	4b27      	ldr	r3, [pc, #156]	; (8004068 <MEM_Reset+0xb0>)
 8003fca:	4928      	ldr	r1, [pc, #160]	; (800406c <MEM_Reset+0xb4>)
 8003fcc:	400a      	ands	r2, r1
 8003fce:	615a      	str	r2, [r3, #20]
		memCMD = 0x66;
 8003fd0:	1dfb      	adds	r3, r7, #7
 8003fd2:	2266      	movs	r2, #102	; 0x66
 8003fd4:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8003fd6:	1df9      	adds	r1, r7, #7
 8003fd8:	4825      	ldr	r0, [pc, #148]	; (8004070 <MEM_Reset+0xb8>)
 8003fda:	2305      	movs	r3, #5
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f005 fa45 	bl	800946c <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8003fe2:	4b21      	ldr	r3, [pc, #132]	; (8004068 <MEM_Reset+0xb0>)
 8003fe4:	695a      	ldr	r2, [r3, #20]
 8003fe6:	4b20      	ldr	r3, [pc, #128]	; (8004068 <MEM_Reset+0xb0>)
 8003fe8:	2180      	movs	r1, #128	; 0x80
 8003fea:	0209      	lsls	r1, r1, #8
 8003fec:	430a      	orrs	r2, r1
 8003fee:	615a      	str	r2, [r3, #20]
		asm("NOP");
 8003ff0:	46c0      	nop			; (mov r8, r8)
		__NOP();
 8003ff2:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8003ff4:	46c0      	nop			; (mov r8, r8)
		__NOP();			//May be less NOPs?
 8003ff6:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8003ff8:	46c0      	nop			; (mov r8, r8)
		__NOP();
 8003ffa:	46c0      	nop			; (mov r8, r8)
		GPIOC->ODR &= ~(1 << 15);			//reset cs
 8003ffc:	4b1a      	ldr	r3, [pc, #104]	; (8004068 <MEM_Reset+0xb0>)
 8003ffe:	695a      	ldr	r2, [r3, #20]
 8004000:	4b19      	ldr	r3, [pc, #100]	; (8004068 <MEM_Reset+0xb0>)
 8004002:	491a      	ldr	r1, [pc, #104]	; (800406c <MEM_Reset+0xb4>)
 8004004:	400a      	ands	r2, r1
 8004006:	615a      	str	r2, [r3, #20]
		memCMD = 0x99;
 8004008:	1dfb      	adds	r3, r7, #7
 800400a:	2299      	movs	r2, #153	; 0x99
 800400c:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset memory
 800400e:	1df9      	adds	r1, r7, #7
 8004010:	4817      	ldr	r0, [pc, #92]	; (8004070 <MEM_Reset+0xb8>)
 8004012:	2305      	movs	r3, #5
 8004014:	2201      	movs	r2, #1
 8004016:	f005 fa29 	bl	800946c <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 800401a:	4b13      	ldr	r3, [pc, #76]	; (8004068 <MEM_Reset+0xb0>)
 800401c:	695a      	ldr	r2, [r3, #20]
 800401e:	4b12      	ldr	r3, [pc, #72]	; (8004068 <MEM_Reset+0xb0>)
 8004020:	2180      	movs	r1, #128	; 0x80
 8004022:	0209      	lsls	r1, r1, #8
 8004024:	430a      	orrs	r2, r1
 8004026:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8004028:	2001      	movs	r0, #1
 800402a:	f001 fb3d 	bl	80056a8 <HAL_Delay>
//=============================================================================================================
		memCMD = 0xB7;												//	Activation 0f 4-bytes address mode
 800402e:	1dfb      	adds	r3, r7, #7
 8004030:	22b7      	movs	r2, #183	; 0xb7
 8004032:	701a      	strb	r2, [r3, #0]
		GPIOC->ODR &= ~(1 << 15); //reset cs
 8004034:	4b0c      	ldr	r3, [pc, #48]	; (8004068 <MEM_Reset+0xb0>)
 8004036:	695a      	ldr	r2, [r3, #20]
 8004038:	4b0b      	ldr	r3, [pc, #44]	; (8004068 <MEM_Reset+0xb0>)
 800403a:	490c      	ldr	r1, [pc, #48]	; (800406c <MEM_Reset+0xb4>)
 800403c:	400a      	ands	r2, r1
 800403e:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8004040:	1df9      	adds	r1, r7, #7
 8004042:	480b      	ldr	r0, [pc, #44]	; (8004070 <MEM_Reset+0xb8>)
 8004044:	2305      	movs	r3, #5
 8004046:	2201      	movs	r2, #1
 8004048:	f005 fa10 	bl	800946c <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 800404c:	4b06      	ldr	r3, [pc, #24]	; (8004068 <MEM_Reset+0xb0>)
 800404e:	695a      	ldr	r2, [r3, #20]
 8004050:	4b05      	ldr	r3, [pc, #20]	; (8004068 <MEM_Reset+0xb0>)
 8004052:	2180      	movs	r1, #128	; 0x80
 8004054:	0209      	lsls	r1, r1, #8
 8004056:	430a      	orrs	r2, r1
 8004058:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 800405a:	2001      	movs	r0, #1
 800405c:	f001 fb24 	bl	80056a8 <HAL_Delay>
	}
 8004060:	46c0      	nop			; (mov r8, r8)
 8004062:	46bd      	mov	sp, r7
 8004064:	b002      	add	sp, #8
 8004066:	bd80      	pop	{r7, pc}
 8004068:	50000800 	.word	0x50000800
 800406c:	ffff7fff 	.word	0xffff7fff
 8004070:	200000b0 	.word	0x200000b0

08004074 <weoShowFullScreenDMA>:
		GPIOC->ODR |= 1 << 6;	//set BF
		cmd2Execute=0;
	}
//==========================================================================================================================

	uint8_t weoShowFullScreenDMA(uint8_t picNum) {
 8004074:	b590      	push	{r4, r7, lr}
 8004076:	4c41      	ldr	r4, [pc, #260]	; (800417c <weoShowFullScreenDMA+0x108>)
 8004078:	44a5      	add	sp, r4
 800407a:	af00      	add	r7, sp, #0
 800407c:	0002      	movs	r2, r0
 800407e:	4b40      	ldr	r3, [pc, #256]	; (8004180 <weoShowFullScreenDMA+0x10c>)
 8004080:	4940      	ldr	r1, [pc, #256]	; (8004184 <weoShowFullScreenDMA+0x110>)
 8004082:	468c      	mov	ip, r1
 8004084:	44bc      	add	ip, r7
 8004086:	4463      	add	r3, ip
 8004088:	701a      	strb	r2, [r3, #0]
//		uint8_t MEM_Buffer[8192];
		uint8_t DUMMY_Buffer[8192], firstImAddrArray[4],addrArray[4];
		uint16_t i;
		uint32_t addrInfo,addr;

		weoDrawRectangleInit(0x00, 0x00, 0x7F, 0x7F); // Здесь ещё работает
 800408a:	237f      	movs	r3, #127	; 0x7f
 800408c:	227f      	movs	r2, #127	; 0x7f
 800408e:	2100      	movs	r1, #0
 8004090:	2000      	movs	r0, #0
 8004092:	f7ff f9fb 	bl	800348c <weoDrawRectangleInit>

		len=8192;
 8004096:	4b3c      	ldr	r3, [pc, #240]	; (8004188 <weoShowFullScreenDMA+0x114>)
 8004098:	2280      	movs	r2, #128	; 0x80
 800409a:	0192      	lsls	r2, r2, #6
 800409c:	801a      	strh	r2, [r3, #0]
		dma_spi_cnt=len;
 800409e:	4b3a      	ldr	r3, [pc, #232]	; (8004188 <weoShowFullScreenDMA+0x114>)
 80040a0:	881a      	ldrh	r2, [r3, #0]
 80040a2:	4b3a      	ldr	r3, [pc, #232]	; (800418c <weoShowFullScreenDMA+0x118>)
 80040a4:	801a      	strh	r2, [r3, #0]
		memCMD = 0x13; //read command with 4-byte address
 80040a6:	483a      	ldr	r0, [pc, #232]	; (8004190 <weoShowFullScreenDMA+0x11c>)
 80040a8:	183b      	adds	r3, r7, r0
 80040aa:	2213      	movs	r2, #19
 80040ac:	701a      	strb	r2, [r3, #0]

		addr=((picNum)*0x2000);
 80040ae:	4b34      	ldr	r3, [pc, #208]	; (8004180 <weoShowFullScreenDMA+0x10c>)
 80040b0:	4a34      	ldr	r2, [pc, #208]	; (8004184 <weoShowFullScreenDMA+0x110>)
 80040b2:	4694      	mov	ip, r2
 80040b4:	44bc      	add	ip, r7
 80040b6:	4463      	add	r3, ip
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	035b      	lsls	r3, r3, #13
 80040bc:	4935      	ldr	r1, [pc, #212]	; (8004194 <weoShowFullScreenDMA+0x120>)
 80040be:	187a      	adds	r2, r7, r1
 80040c0:	6013      	str	r3, [r2, #0]

		addrArray[0]=addr & 0xFF;
 80040c2:	187b      	adds	r3, r7, r1
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	b2da      	uxtb	r2, r3
 80040c8:	4b33      	ldr	r3, [pc, #204]	; (8004198 <weoShowFullScreenDMA+0x124>)
 80040ca:	4c2e      	ldr	r4, [pc, #184]	; (8004184 <weoShowFullScreenDMA+0x110>)
 80040cc:	46a4      	mov	ip, r4
 80040ce:	44bc      	add	ip, r7
 80040d0:	4463      	add	r3, ip
 80040d2:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 80040d4:	187b      	adds	r3, r7, r1
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	0a1b      	lsrs	r3, r3, #8
 80040da:	b2da      	uxtb	r2, r3
 80040dc:	4b2e      	ldr	r3, [pc, #184]	; (8004198 <weoShowFullScreenDMA+0x124>)
 80040de:	4c29      	ldr	r4, [pc, #164]	; (8004184 <weoShowFullScreenDMA+0x110>)
 80040e0:	46a4      	mov	ip, r4
 80040e2:	44bc      	add	ip, r7
 80040e4:	4463      	add	r3, ip
 80040e6:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 80040e8:	187b      	adds	r3, r7, r1
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	0c1b      	lsrs	r3, r3, #16
 80040ee:	b2da      	uxtb	r2, r3
 80040f0:	4b29      	ldr	r3, [pc, #164]	; (8004198 <weoShowFullScreenDMA+0x124>)
 80040f2:	4c24      	ldr	r4, [pc, #144]	; (8004184 <weoShowFullScreenDMA+0x110>)
 80040f4:	46a4      	mov	ip, r4
 80040f6:	44bc      	add	ip, r7
 80040f8:	4463      	add	r3, ip
 80040fa:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 80040fc:	187b      	adds	r3, r7, r1
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	0e1b      	lsrs	r3, r3, #24
 8004102:	b2da      	uxtb	r2, r3
 8004104:	4b24      	ldr	r3, [pc, #144]	; (8004198 <weoShowFullScreenDMA+0x124>)
 8004106:	491f      	ldr	r1, [pc, #124]	; (8004184 <weoShowFullScreenDMA+0x110>)
 8004108:	468c      	mov	ip, r1
 800410a:	44bc      	add	ip, r7
 800410c:	4463      	add	r3, ip
 800410e:	70da      	strb	r2, [r3, #3]

		GPIOC->ODR &= ~(1 << 15); //reset cs
 8004110:	4b22      	ldr	r3, [pc, #136]	; (800419c <weoShowFullScreenDMA+0x128>)
 8004112:	695a      	ldr	r2, [r3, #20]
 8004114:	4b21      	ldr	r3, [pc, #132]	; (800419c <weoShowFullScreenDMA+0x128>)
 8004116:	4922      	ldr	r1, [pc, #136]	; (80041a0 <weoShowFullScreenDMA+0x12c>)
 8004118:	400a      	ands	r2, r1
 800411a:	615a      	str	r2, [r3, #20]

		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 800411c:	1839      	adds	r1, r7, r0
 800411e:	4821      	ldr	r0, [pc, #132]	; (80041a4 <weoShowFullScreenDMA+0x130>)
 8004120:	2332      	movs	r3, #50	; 0x32
 8004122:	2201      	movs	r2, #1
 8004124:	f005 f9a2 	bl	800946c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 8004128:	2408      	movs	r4, #8
 800412a:	193b      	adds	r3, r7, r4
 800412c:	1cd9      	adds	r1, r3, #3
 800412e:	481d      	ldr	r0, [pc, #116]	; (80041a4 <weoShowFullScreenDMA+0x130>)
 8004130:	2332      	movs	r3, #50	; 0x32
 8004132:	2201      	movs	r2, #1
 8004134:	f005 f99a 	bl	800946c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 8004138:	193b      	adds	r3, r7, r4
 800413a:	1c99      	adds	r1, r3, #2
 800413c:	4819      	ldr	r0, [pc, #100]	; (80041a4 <weoShowFullScreenDMA+0x130>)
 800413e:	2332      	movs	r3, #50	; 0x32
 8004140:	2201      	movs	r2, #1
 8004142:	f005 f993 	bl	800946c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 8004146:	193b      	adds	r3, r7, r4
 8004148:	1c59      	adds	r1, r3, #1
 800414a:	4816      	ldr	r0, [pc, #88]	; (80041a4 <weoShowFullScreenDMA+0x130>)
 800414c:	2332      	movs	r3, #50	; 0x32
 800414e:	2201      	movs	r2, #1
 8004150:	f005 f98c 	bl	800946c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 8004154:	1939      	adds	r1, r7, r4
 8004156:	4813      	ldr	r0, [pc, #76]	; (80041a4 <weoShowFullScreenDMA+0x130>)
 8004158:	2332      	movs	r3, #50	; 0x32
 800415a:	2201      	movs	r2, #1
 800415c:	f005 f986 	bl	800946c <HAL_SPI_Transmit>
		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &MEM_Buffer ,len);
 8004160:	4b09      	ldr	r3, [pc, #36]	; (8004188 <weoShowFullScreenDMA+0x114>)
 8004162:	881a      	ldrh	r2, [r3, #0]
 8004164:	4910      	ldr	r1, [pc, #64]	; (80041a8 <weoShowFullScreenDMA+0x134>)
 8004166:	4b0f      	ldr	r3, [pc, #60]	; (80041a4 <weoShowFullScreenDMA+0x130>)
 8004168:	0018      	movs	r0, r3
 800416a:	f005 fdf5 	bl	8009d58 <HAL_SPI_Receive_DMA>
	}
 800416e:	46c0      	nop			; (mov r8, r8)
 8004170:	0018      	movs	r0, r3
 8004172:	46bd      	mov	sp, r7
 8004174:	4b0d      	ldr	r3, [pc, #52]	; (80041ac <weoShowFullScreenDMA+0x138>)
 8004176:	449d      	add	sp, r3
 8004178:	bd90      	pop	{r4, r7, pc}
 800417a:	46c0      	nop			; (mov r8, r8)
 800417c:	ffffdfe4 	.word	0xffffdfe4
 8004180:	ffffdfef 	.word	0xffffdfef
 8004184:	00002018 	.word	0x00002018
 8004188:	200004e8 	.word	0x200004e8
 800418c:	20000032 	.word	0x20000032
 8004190:	00002013 	.word	0x00002013
 8004194:	00002014 	.word	0x00002014
 8004198:	ffffdff0 	.word	0xffffdff0
 800419c:	50000800 	.word	0x50000800
 80041a0:	ffff7fff 	.word	0xffff7fff
 80041a4:	200000b0 	.word	0x200000b0
 80041a8:	200004f0 	.word	0x200004f0
 80041ac:	0000201c 	.word	0x0000201c

080041b0 <weoShowSmallImage>:
//==========================================================================================================================
	uint8_t weoShowSmallImage(uint8_t picNum, uint8_t imX, uint8_t imY) {
 80041b0:	b590      	push	{r4, r7, lr}
 80041b2:	4cb4      	ldr	r4, [pc, #720]	; (8004484 <weoShowSmallImage+0x2d4>)
 80041b4:	44a5      	add	sp, r4
 80041b6:	af02      	add	r7, sp, #8
 80041b8:	0004      	movs	r4, r0
 80041ba:	0008      	movs	r0, r1
 80041bc:	0011      	movs	r1, r2
 80041be:	4bb2      	ldr	r3, [pc, #712]	; (8004488 <weoShowSmallImage+0x2d8>)
 80041c0:	4ab2      	ldr	r2, [pc, #712]	; (800448c <weoShowSmallImage+0x2dc>)
 80041c2:	4694      	mov	ip, r2
 80041c4:	44bc      	add	ip, r7
 80041c6:	4463      	add	r3, ip
 80041c8:	1c22      	adds	r2, r4, #0
 80041ca:	701a      	strb	r2, [r3, #0]
 80041cc:	4bb0      	ldr	r3, [pc, #704]	; (8004490 <weoShowSmallImage+0x2e0>)
 80041ce:	4aaf      	ldr	r2, [pc, #700]	; (800448c <weoShowSmallImage+0x2dc>)
 80041d0:	4694      	mov	ip, r2
 80041d2:	44bc      	add	ip, r7
 80041d4:	4463      	add	r3, ip
 80041d6:	1c02      	adds	r2, r0, #0
 80041d8:	701a      	strb	r2, [r3, #0]
 80041da:	4bae      	ldr	r3, [pc, #696]	; (8004494 <weoShowSmallImage+0x2e4>)
 80041dc:	4aab      	ldr	r2, [pc, #684]	; (800448c <weoShowSmallImage+0x2dc>)
 80041de:	4694      	mov	ip, r2
 80041e0:	44bc      	add	ip, r7
 80041e2:	4463      	add	r3, ip
 80041e4:	1c0a      	adds	r2, r1, #0
 80041e6:	701a      	strb	r2, [r3, #0]
		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H,decY;
		uint8_t MEM_Buffer[8192];
		uint8_t imInfo[2],addrArray[4];
		uint16_t i;
		uint32_t addr,addrData;
		addr=0x00000000;
 80041e8:	2300      	movs	r3, #0
 80041ea:	49ab      	ldr	r1, [pc, #684]	; (8004498 <weoShowSmallImage+0x2e8>)
 80041ec:	187a      	adds	r2, r7, r1
 80041ee:	6013      	str	r3, [r2, #0]
		memCMD = 0x13; //read command with 4-byte address
 80041f0:	48aa      	ldr	r0, [pc, #680]	; (800449c <weoShowSmallImage+0x2ec>)
 80041f2:	183b      	adds	r3, r7, r0
 80041f4:	2213      	movs	r2, #19
 80041f6:	701a      	strb	r2, [r3, #0]
		//look at info about image
		addr=(picNum*0x2000)+0x200000;// the right path is to multiply picNum * image repeat period!
 80041f8:	4ba3      	ldr	r3, [pc, #652]	; (8004488 <weoShowSmallImage+0x2d8>)
 80041fa:	4aa4      	ldr	r2, [pc, #656]	; (800448c <weoShowSmallImage+0x2dc>)
 80041fc:	4694      	mov	ip, r2
 80041fe:	44bc      	add	ip, r7
 8004200:	4463      	add	r3, ip
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	3301      	adds	r3, #1
 8004206:	33ff      	adds	r3, #255	; 0xff
 8004208:	035b      	lsls	r3, r3, #13
 800420a:	187a      	adds	r2, r7, r1
 800420c:	6013      	str	r3, [r2, #0]
//		addr=(picNum*0x2000);

		addrArray[0]=addr & 0xFF;
 800420e:	187b      	adds	r3, r7, r1
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	b2da      	uxtb	r2, r3
 8004214:	4ba2      	ldr	r3, [pc, #648]	; (80044a0 <weoShowSmallImage+0x2f0>)
 8004216:	4c9d      	ldr	r4, [pc, #628]	; (800448c <weoShowSmallImage+0x2dc>)
 8004218:	46a4      	mov	ip, r4
 800421a:	44bc      	add	ip, r7
 800421c:	4463      	add	r3, ip
 800421e:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 8004220:	187b      	adds	r3, r7, r1
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	0a1b      	lsrs	r3, r3, #8
 8004226:	b2da      	uxtb	r2, r3
 8004228:	4b9d      	ldr	r3, [pc, #628]	; (80044a0 <weoShowSmallImage+0x2f0>)
 800422a:	4c98      	ldr	r4, [pc, #608]	; (800448c <weoShowSmallImage+0x2dc>)
 800422c:	46a4      	mov	ip, r4
 800422e:	44bc      	add	ip, r7
 8004230:	4463      	add	r3, ip
 8004232:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 8004234:	187b      	adds	r3, r7, r1
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	0c1b      	lsrs	r3, r3, #16
 800423a:	b2da      	uxtb	r2, r3
 800423c:	4b98      	ldr	r3, [pc, #608]	; (80044a0 <weoShowSmallImage+0x2f0>)
 800423e:	4c93      	ldr	r4, [pc, #588]	; (800448c <weoShowSmallImage+0x2dc>)
 8004240:	46a4      	mov	ip, r4
 8004242:	44bc      	add	ip, r7
 8004244:	4463      	add	r3, ip
 8004246:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 8004248:	187b      	adds	r3, r7, r1
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	0e1b      	lsrs	r3, r3, #24
 800424e:	b2da      	uxtb	r2, r3
 8004250:	4b93      	ldr	r3, [pc, #588]	; (80044a0 <weoShowSmallImage+0x2f0>)
 8004252:	498e      	ldr	r1, [pc, #568]	; (800448c <weoShowSmallImage+0x2dc>)
 8004254:	468c      	mov	ip, r1
 8004256:	44bc      	add	ip, r7
 8004258:	4463      	add	r3, ip
 800425a:	70da      	strb	r2, [r3, #3]

		GPIOC->ODR &= ~(1 << 15); //reset cs
 800425c:	4b91      	ldr	r3, [pc, #580]	; (80044a4 <weoShowSmallImage+0x2f4>)
 800425e:	695a      	ldr	r2, [r3, #20]
 8004260:	4b90      	ldr	r3, [pc, #576]	; (80044a4 <weoShowSmallImage+0x2f4>)
 8004262:	4991      	ldr	r1, [pc, #580]	; (80044a8 <weoShowSmallImage+0x2f8>)
 8004264:	400a      	ands	r2, r1
 8004266:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 8004268:	1839      	adds	r1, r7, r0
 800426a:	4890      	ldr	r0, [pc, #576]	; (80044ac <weoShowSmallImage+0x2fc>)
 800426c:	2332      	movs	r3, #50	; 0x32
 800426e:	2201      	movs	r2, #1
 8004270:	f005 f8fc 	bl	800946c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 8004274:	240c      	movs	r4, #12
 8004276:	193b      	adds	r3, r7, r4
 8004278:	1cd9      	adds	r1, r3, #3
 800427a:	488c      	ldr	r0, [pc, #560]	; (80044ac <weoShowSmallImage+0x2fc>)
 800427c:	2332      	movs	r3, #50	; 0x32
 800427e:	2201      	movs	r2, #1
 8004280:	f005 f8f4 	bl	800946c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 8004284:	193b      	adds	r3, r7, r4
 8004286:	1c99      	adds	r1, r3, #2
 8004288:	4888      	ldr	r0, [pc, #544]	; (80044ac <weoShowSmallImage+0x2fc>)
 800428a:	2332      	movs	r3, #50	; 0x32
 800428c:	2201      	movs	r2, #1
 800428e:	f005 f8ed 	bl	800946c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 8004292:	193b      	adds	r3, r7, r4
 8004294:	1c59      	adds	r1, r3, #1
 8004296:	4885      	ldr	r0, [pc, #532]	; (80044ac <weoShowSmallImage+0x2fc>)
 8004298:	2332      	movs	r3, #50	; 0x32
 800429a:	2201      	movs	r2, #1
 800429c:	f005 f8e6 	bl	800946c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 80042a0:	1939      	adds	r1, r7, r4
 80042a2:	4882      	ldr	r0, [pc, #520]	; (80044ac <weoShowSmallImage+0x2fc>)
 80042a4:	2332      	movs	r3, #50	; 0x32
 80042a6:	2201      	movs	r2, #1
 80042a8:	f005 f8e0 	bl	800946c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &imInfo,2, 5000);
 80042ac:	4b80      	ldr	r3, [pc, #512]	; (80044b0 <weoShowSmallImage+0x300>)
 80042ae:	2210      	movs	r2, #16
 80042b0:	18b9      	adds	r1, r7, r2
 80042b2:	487e      	ldr	r0, [pc, #504]	; (80044ac <weoShowSmallImage+0x2fc>)
 80042b4:	2202      	movs	r2, #2
 80042b6:	f005 fa31 	bl	800971c <HAL_SPI_Receive>
		GPIOC->ODR |= 1 << 15; // set cs
 80042ba:	4b7a      	ldr	r3, [pc, #488]	; (80044a4 <weoShowSmallImage+0x2f4>)
 80042bc:	695a      	ldr	r2, [r3, #20]
 80042be:	4b79      	ldr	r3, [pc, #484]	; (80044a4 <weoShowSmallImage+0x2f4>)
 80042c0:	2180      	movs	r1, #128	; 0x80
 80042c2:	0209      	lsls	r1, r1, #8
 80042c4:	430a      	orrs	r2, r1
 80042c6:	615a      	str	r2, [r3, #20]

		width=imInfo[0];
 80042c8:	497a      	ldr	r1, [pc, #488]	; (80044b4 <weoShowSmallImage+0x304>)
 80042ca:	187b      	adds	r3, r7, r1
 80042cc:	4a7a      	ldr	r2, [pc, #488]	; (80044b8 <weoShowSmallImage+0x308>)
 80042ce:	486f      	ldr	r0, [pc, #444]	; (800448c <weoShowSmallImage+0x2dc>)
 80042d0:	4684      	mov	ip, r0
 80042d2:	44bc      	add	ip, r7
 80042d4:	4462      	add	r2, ip
 80042d6:	7812      	ldrb	r2, [r2, #0]
 80042d8:	701a      	strb	r2, [r3, #0]
		height=imInfo[1];
 80042da:	4878      	ldr	r0, [pc, #480]	; (80044bc <weoShowSmallImage+0x30c>)
 80042dc:	183b      	adds	r3, r7, r0
 80042de:	4a76      	ldr	r2, [pc, #472]	; (80044b8 <weoShowSmallImage+0x308>)
 80042e0:	4c6a      	ldr	r4, [pc, #424]	; (800448c <weoShowSmallImage+0x2dc>)
 80042e2:	46a4      	mov	ip, r4
 80042e4:	44bc      	add	ip, r7
 80042e6:	4462      	add	r2, ip
 80042e8:	7852      	ldrb	r2, [r2, #1]
 80042ea:	701a      	strb	r2, [r3, #0]

		len=width*height/2;
 80042ec:	187b      	adds	r3, r7, r1
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	183a      	adds	r2, r7, r0
 80042f2:	7812      	ldrb	r2, [r2, #0]
 80042f4:	4353      	muls	r3, r2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	da00      	bge.n	80042fc <weoShowSmallImage+0x14c>
 80042fa:	3301      	adds	r3, #1
 80042fc:	105b      	asrs	r3, r3, #1
 80042fe:	b29a      	uxth	r2, r3
 8004300:	4b6f      	ldr	r3, [pc, #444]	; (80044c0 <weoShowSmallImage+0x310>)
 8004302:	801a      	strh	r2, [r3, #0]

		addrData=addr+0x02;
 8004304:	4b64      	ldr	r3, [pc, #400]	; (8004498 <weoShowSmallImage+0x2e8>)
 8004306:	18fb      	adds	r3, r7, r3
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	3302      	adds	r3, #2
 800430c:	496d      	ldr	r1, [pc, #436]	; (80044c4 <weoShowSmallImage+0x314>)
 800430e:	187a      	adds	r2, r7, r1
 8004310:	6013      	str	r3, [r2, #0]
		addrArray[0]=addrData & 0xFF;
 8004312:	187b      	adds	r3, r7, r1
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	b2da      	uxtb	r2, r3
 8004318:	4b61      	ldr	r3, [pc, #388]	; (80044a0 <weoShowSmallImage+0x2f0>)
 800431a:	485c      	ldr	r0, [pc, #368]	; (800448c <weoShowSmallImage+0x2dc>)
 800431c:	4684      	mov	ip, r0
 800431e:	44bc      	add	ip, r7
 8004320:	4463      	add	r3, ip
 8004322:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addrData >> 8) & 0xFF;
 8004324:	187b      	adds	r3, r7, r1
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	0a1b      	lsrs	r3, r3, #8
 800432a:	b2da      	uxtb	r2, r3
 800432c:	4b5c      	ldr	r3, [pc, #368]	; (80044a0 <weoShowSmallImage+0x2f0>)
 800432e:	4857      	ldr	r0, [pc, #348]	; (800448c <weoShowSmallImage+0x2dc>)
 8004330:	4684      	mov	ip, r0
 8004332:	44bc      	add	ip, r7
 8004334:	4463      	add	r3, ip
 8004336:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addrData >> 16) & 0xFF;
 8004338:	187b      	adds	r3, r7, r1
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	0c1b      	lsrs	r3, r3, #16
 800433e:	b2da      	uxtb	r2, r3
 8004340:	4b57      	ldr	r3, [pc, #348]	; (80044a0 <weoShowSmallImage+0x2f0>)
 8004342:	4852      	ldr	r0, [pc, #328]	; (800448c <weoShowSmallImage+0x2dc>)
 8004344:	4684      	mov	ip, r0
 8004346:	44bc      	add	ip, r7
 8004348:	4463      	add	r3, ip
 800434a:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addrData >> 24) & 0xFF;
 800434c:	187b      	adds	r3, r7, r1
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	0e1b      	lsrs	r3, r3, #24
 8004352:	b2da      	uxtb	r2, r3
 8004354:	4b52      	ldr	r3, [pc, #328]	; (80044a0 <weoShowSmallImage+0x2f0>)
 8004356:	494d      	ldr	r1, [pc, #308]	; (800448c <weoShowSmallImage+0x2dc>)
 8004358:	468c      	mov	ip, r1
 800435a:	44bc      	add	ip, r7
 800435c:	4463      	add	r3, ip
 800435e:	70da      	strb	r2, [r3, #3]

		USART2->ICR|=USART_ICR_ORECF;
 8004360:	4b59      	ldr	r3, [pc, #356]	; (80044c8 <weoShowSmallImage+0x318>)
 8004362:	6a1a      	ldr	r2, [r3, #32]
 8004364:	4b58      	ldr	r3, [pc, #352]	; (80044c8 <weoShowSmallImage+0x318>)
 8004366:	2108      	movs	r1, #8
 8004368:	430a      	orrs	r2, r1
 800436a:	621a      	str	r2, [r3, #32]
		memCMD = 0x13; //read command with 4-byte address
 800436c:	484b      	ldr	r0, [pc, #300]	; (800449c <weoShowSmallImage+0x2ec>)
 800436e:	183b      	adds	r3, r7, r0
 8004370:	2213      	movs	r2, #19
 8004372:	701a      	strb	r2, [r3, #0]

		GPIOC->ODR &= ~(1 << 15);	//reset cs
 8004374:	4b4b      	ldr	r3, [pc, #300]	; (80044a4 <weoShowSmallImage+0x2f4>)
 8004376:	695a      	ldr	r2, [r3, #20]
 8004378:	4b4a      	ldr	r3, [pc, #296]	; (80044a4 <weoShowSmallImage+0x2f4>)
 800437a:	494b      	ldr	r1, [pc, #300]	; (80044a8 <weoShowSmallImage+0x2f8>)
 800437c:	400a      	ands	r2, r1
 800437e:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50);//read command with 4-byte address
 8004380:	1839      	adds	r1, r7, r0
 8004382:	484a      	ldr	r0, [pc, #296]	; (80044ac <weoShowSmallImage+0x2fc>)
 8004384:	2332      	movs	r3, #50	; 0x32
 8004386:	2201      	movs	r2, #1
 8004388:	f005 f870 	bl	800946c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3],1, 50);	//send address
 800438c:	240c      	movs	r4, #12
 800438e:	193b      	adds	r3, r7, r4
 8004390:	1cd9      	adds	r1, r3, #3
 8004392:	4846      	ldr	r0, [pc, #280]	; (80044ac <weoShowSmallImage+0x2fc>)
 8004394:	2332      	movs	r3, #50	; 0x32
 8004396:	2201      	movs	r2, #1
 8004398:	f005 f868 	bl	800946c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2],1, 50);	//send address
 800439c:	193b      	adds	r3, r7, r4
 800439e:	1c99      	adds	r1, r3, #2
 80043a0:	4842      	ldr	r0, [pc, #264]	; (80044ac <weoShowSmallImage+0x2fc>)
 80043a2:	2332      	movs	r3, #50	; 0x32
 80043a4:	2201      	movs	r2, #1
 80043a6:	f005 f861 	bl	800946c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1],1, 50);	//send address
 80043aa:	193b      	adds	r3, r7, r4
 80043ac:	1c59      	adds	r1, r3, #1
 80043ae:	483f      	ldr	r0, [pc, #252]	; (80044ac <weoShowSmallImage+0x2fc>)
 80043b0:	2332      	movs	r3, #50	; 0x32
 80043b2:	2201      	movs	r2, #1
 80043b4:	f005 f85a 	bl	800946c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0],1, 50);	//send address
 80043b8:	1939      	adds	r1, r7, r4
 80043ba:	483c      	ldr	r0, [pc, #240]	; (80044ac <weoShowSmallImage+0x2fc>)
 80043bc:	2332      	movs	r3, #50	; 0x32
 80043be:	2201      	movs	r2, #1
 80043c0:	f005 f854 	bl	800946c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,len, 5000);// 7 information bits about the image
 80043c4:	4b3e      	ldr	r3, [pc, #248]	; (80044c0 <weoShowSmallImage+0x310>)
 80043c6:	881a      	ldrh	r2, [r3, #0]
 80043c8:	4b39      	ldr	r3, [pc, #228]	; (80044b0 <weoShowSmallImage+0x300>)
 80043ca:	2114      	movs	r1, #20
 80043cc:	1879      	adds	r1, r7, r1
 80043ce:	4837      	ldr	r0, [pc, #220]	; (80044ac <weoShowSmallImage+0x2fc>)
 80043d0:	f005 f9a4 	bl	800971c <HAL_SPI_Receive>
		GPIOC->ODR |= 1 << 15;	// set cs
 80043d4:	4b33      	ldr	r3, [pc, #204]	; (80044a4 <weoShowSmallImage+0x2f4>)
 80043d6:	695a      	ldr	r2, [r3, #20]
 80043d8:	4b32      	ldr	r3, [pc, #200]	; (80044a4 <weoShowSmallImage+0x2f4>)
 80043da:	2180      	movs	r1, #128	; 0x80
 80043dc:	0209      	lsls	r1, r1, #8
 80043de:	430a      	orrs	r2, r1
 80043e0:	615a      	str	r2, [r3, #20]

		decY=0x01;
 80043e2:	493a      	ldr	r1, [pc, #232]	; (80044cc <weoShowSmallImage+0x31c>)
 80043e4:	187b      	adds	r3, r7, r1
 80043e6:	2201      	movs	r2, #1
 80043e8:	701a      	strb	r2, [r3, #0]
		if(imY % 2 !=0){
 80043ea:	4b2a      	ldr	r3, [pc, #168]	; (8004494 <weoShowSmallImage+0x2e4>)
 80043ec:	4a27      	ldr	r2, [pc, #156]	; (800448c <weoShowSmallImage+0x2dc>)
 80043ee:	4694      	mov	ip, r2
 80043f0:	44bc      	add	ip, r7
 80043f2:	4463      	add	r3, ip
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	2201      	movs	r2, #1
 80043f8:	4013      	ands	r3, r2
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d002      	beq.n	8004406 <weoShowSmallImage+0x256>
			decY=0x02;
 8004400:	187b      	adds	r3, r7, r1
 8004402:	2202      	movs	r2, #2
 8004404:	701a      	strb	r2, [r3, #0]
		}
		weoDrawRectangleFilled(imX, imY, imX+width-1, imY+height-decY, 0xFF,MEM_Buffer);	// Здесь ещё работает 0xFF - затычка
 8004406:	4b22      	ldr	r3, [pc, #136]	; (8004490 <weoShowSmallImage+0x2e0>)
 8004408:	4920      	ldr	r1, [pc, #128]	; (800448c <weoShowSmallImage+0x2dc>)
 800440a:	187a      	adds	r2, r7, r1
 800440c:	18d2      	adds	r2, r2, r3
 800440e:	4b29      	ldr	r3, [pc, #164]	; (80044b4 <weoShowSmallImage+0x304>)
 8004410:	18fb      	adds	r3, r7, r3
 8004412:	7812      	ldrb	r2, [r2, #0]
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	18d3      	adds	r3, r2, r3
 8004418:	b2db      	uxtb	r3, r3
 800441a:	3b01      	subs	r3, #1
 800441c:	b2dc      	uxtb	r4, r3
 800441e:	4b1d      	ldr	r3, [pc, #116]	; (8004494 <weoShowSmallImage+0x2e4>)
 8004420:	187a      	adds	r2, r7, r1
 8004422:	18d2      	adds	r2, r2, r3
 8004424:	4b25      	ldr	r3, [pc, #148]	; (80044bc <weoShowSmallImage+0x30c>)
 8004426:	18fb      	adds	r3, r7, r3
 8004428:	7812      	ldrb	r2, [r2, #0]
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	18d3      	adds	r3, r2, r3
 800442e:	b2da      	uxtb	r2, r3
 8004430:	4b26      	ldr	r3, [pc, #152]	; (80044cc <weoShowSmallImage+0x31c>)
 8004432:	18fb      	adds	r3, r7, r3
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	b2da      	uxtb	r2, r3
 800443a:	4b16      	ldr	r3, [pc, #88]	; (8004494 <weoShowSmallImage+0x2e4>)
 800443c:	4913      	ldr	r1, [pc, #76]	; (800448c <weoShowSmallImage+0x2dc>)
 800443e:	468c      	mov	ip, r1
 8004440:	44bc      	add	ip, r7
 8004442:	4463      	add	r3, ip
 8004444:	7819      	ldrb	r1, [r3, #0]
 8004446:	4b12      	ldr	r3, [pc, #72]	; (8004490 <weoShowSmallImage+0x2e0>)
 8004448:	4810      	ldr	r0, [pc, #64]	; (800448c <weoShowSmallImage+0x2dc>)
 800444a:	4684      	mov	ip, r0
 800444c:	44bc      	add	ip, r7
 800444e:	4463      	add	r3, ip
 8004450:	7818      	ldrb	r0, [r3, #0]
 8004452:	2314      	movs	r3, #20
 8004454:	18fb      	adds	r3, r7, r3
 8004456:	9301      	str	r3, [sp, #4]
 8004458:	23ff      	movs	r3, #255	; 0xff
 800445a:	9300      	str	r3, [sp, #0]
 800445c:	0013      	movs	r3, r2
 800445e:	0022      	movs	r2, r4
 8004460:	f7fe ff30 	bl	80032c4 <weoDrawRectangleFilled>
		GPIOC->ODR |= 1 << 6;	//set BF
 8004464:	4b0f      	ldr	r3, [pc, #60]	; (80044a4 <weoShowSmallImage+0x2f4>)
 8004466:	695a      	ldr	r2, [r3, #20]
 8004468:	4b0e      	ldr	r3, [pc, #56]	; (80044a4 <weoShowSmallImage+0x2f4>)
 800446a:	2140      	movs	r1, #64	; 0x40
 800446c:	430a      	orrs	r2, r1
 800446e:	615a      	str	r2, [r3, #20]
		cmd2Execute=0;
 8004470:	4b17      	ldr	r3, [pc, #92]	; (80044d0 <weoShowSmallImage+0x320>)
 8004472:	2200      	movs	r2, #0
 8004474:	701a      	strb	r2, [r3, #0]
	}
 8004476:	46c0      	nop			; (mov r8, r8)
 8004478:	0018      	movs	r0, r3
 800447a:	46bd      	mov	sp, r7
 800447c:	4b15      	ldr	r3, [pc, #84]	; (80044d4 <weoShowSmallImage+0x324>)
 800447e:	449d      	add	sp, r3
 8004480:	bd90      	pop	{r4, r7, pc}
 8004482:	46c0      	nop			; (mov r8, r8)
 8004484:	ffffdfcc 	.word	0xffffdfcc
 8004488:	ffffdfdf 	.word	0xffffdfdf
 800448c:	00002028 	.word	0x00002028
 8004490:	ffffdfde 	.word	0xffffdfde
 8004494:	ffffdfdd 	.word	0xffffdfdd
 8004498:	00002020 	.word	0x00002020
 800449c:	00002017 	.word	0x00002017
 80044a0:	ffffdfe4 	.word	0xffffdfe4
 80044a4:	50000800 	.word	0x50000800
 80044a8:	ffff7fff 	.word	0xffff7fff
 80044ac:	200000b0 	.word	0x200000b0
 80044b0:	00001388 	.word	0x00001388
 80044b4:	0000201f 	.word	0x0000201f
 80044b8:	ffffdfe8 	.word	0xffffdfe8
 80044bc:	0000201e 	.word	0x0000201e
 80044c0:	200004e8 	.word	0x200004e8
 80044c4:	00002018 	.word	0x00002018
 80044c8:	40004400 	.word	0x40004400
 80044cc:	00002027 	.word	0x00002027
 80044d0:	20000366 	.word	0x20000366
 80044d4:	0000202c 	.word	0x0000202c

080044d8 <MEM_GetID>:
		dat = 0x04;
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 5);//write disable Is it neccessary, if WP pin is used????????????????????????????
		GPIOC->ODR |= 1 << 15;	// set cs
//    GPIOC->ODR &= ~(1 << 14);//Write Disable
	}
	uint32_t MEM_GetID(void) {
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
		uint8_t dat;
		uint8_t tmp[1] = { 0x00 };
 80044de:	1d3b      	adds	r3, r7, #4
 80044e0:	4a29      	ldr	r2, [pc, #164]	; (8004588 <MEM_GetID+0xb0>)
 80044e2:	7812      	ldrb	r2, [r2, #0]
 80044e4:	701a      	strb	r2, [r3, #0]
		dat = 0x9E;
 80044e6:	1dfb      	adds	r3, r7, #7
 80044e8:	229e      	movs	r2, #158	; 0x9e
 80044ea:	701a      	strb	r2, [r3, #0]
		GPIOC->ODR &= ~(1 << 15);	//reset cs
 80044ec:	4b27      	ldr	r3, [pc, #156]	; (800458c <MEM_GetID+0xb4>)
 80044ee:	695a      	ldr	r2, [r3, #20]
 80044f0:	4b26      	ldr	r3, [pc, #152]	; (800458c <MEM_GetID+0xb4>)
 80044f2:	4927      	ldr	r1, [pc, #156]	; (8004590 <MEM_GetID+0xb8>)
 80044f4:	400a      	ands	r2, r1
 80044f6:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 50);	//read ID command
 80044f8:	1df9      	adds	r1, r7, #7
 80044fa:	4826      	ldr	r0, [pc, #152]	; (8004594 <MEM_GetID+0xbc>)
 80044fc:	2332      	movs	r3, #50	; 0x32
 80044fe:	2201      	movs	r2, #1
 8004500:	f004 ffb4 	bl	800946c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8004504:	23fa      	movs	r3, #250	; 0xfa
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	1d39      	adds	r1, r7, #4
 800450a:	4822      	ldr	r0, [pc, #136]	; (8004594 <MEM_GetID+0xbc>)
 800450c:	2201      	movs	r2, #1
 800450e:	f005 f905 	bl	800971c <HAL_SPI_Receive>
		MEM_ID = (uint32_t) tmp[0];
 8004512:	1d3b      	adds	r3, r7, #4
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	001a      	movs	r2, r3
 8004518:	4b1f      	ldr	r3, [pc, #124]	; (8004598 <MEM_GetID+0xc0>)
 800451a:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;                    			//MSB
 800451c:	4b1e      	ldr	r3, [pc, #120]	; (8004598 <MEM_GetID+0xc0>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	021a      	lsls	r2, r3, #8
 8004522:	4b1d      	ldr	r3, [pc, #116]	; (8004598 <MEM_GetID+0xc0>)
 8004524:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8004526:	23fa      	movs	r3, #250	; 0xfa
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	1d39      	adds	r1, r7, #4
 800452c:	4819      	ldr	r0, [pc, #100]	; (8004594 <MEM_GetID+0xbc>)
 800452e:	2201      	movs	r2, #1
 8004530:	f005 f8f4 	bl	800971c <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8004534:	1d3b      	adds	r3, r7, #4
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	001a      	movs	r2, r3
 800453a:	4b17      	ldr	r3, [pc, #92]	; (8004598 <MEM_GetID+0xc0>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	18d2      	adds	r2, r2, r3
 8004540:	4b15      	ldr	r3, [pc, #84]	; (8004598 <MEM_GetID+0xc0>)
 8004542:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;
 8004544:	4b14      	ldr	r3, [pc, #80]	; (8004598 <MEM_GetID+0xc0>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	021a      	lsls	r2, r3, #8
 800454a:	4b13      	ldr	r3, [pc, #76]	; (8004598 <MEM_GetID+0xc0>)
 800454c:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 800454e:	23fa      	movs	r3, #250	; 0xfa
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	1d39      	adds	r1, r7, #4
 8004554:	480f      	ldr	r0, [pc, #60]	; (8004594 <MEM_GetID+0xbc>)
 8004556:	2201      	movs	r2, #1
 8004558:	f005 f8e0 	bl	800971c <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 800455c:	1d3b      	adds	r3, r7, #4
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	001a      	movs	r2, r3
 8004562:	4b0d      	ldr	r3, [pc, #52]	; (8004598 <MEM_GetID+0xc0>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	18d2      	adds	r2, r2, r3
 8004568:	4b0b      	ldr	r3, [pc, #44]	; (8004598 <MEM_GetID+0xc0>)
 800456a:	601a      	str	r2, [r3, #0]
		GPIOC->ODR |= 1 << 15;                    			// set cs
 800456c:	4b07      	ldr	r3, [pc, #28]	; (800458c <MEM_GetID+0xb4>)
 800456e:	695a      	ldr	r2, [r3, #20]
 8004570:	4b06      	ldr	r3, [pc, #24]	; (800458c <MEM_GetID+0xb4>)
 8004572:	2180      	movs	r1, #128	; 0x80
 8004574:	0209      	lsls	r1, r1, #8
 8004576:	430a      	orrs	r2, r1
 8004578:	615a      	str	r2, [r3, #20]
		return (MEM_ID);
 800457a:	4b07      	ldr	r3, [pc, #28]	; (8004598 <MEM_GetID+0xc0>)
 800457c:	681b      	ldr	r3, [r3, #0]
	}
 800457e:	0018      	movs	r0, r3
 8004580:	46bd      	mov	sp, r7
 8004582:	b002      	add	sp, #8
 8004584:	bd80      	pop	{r7, pc}
 8004586:	46c0      	nop			; (mov r8, r8)
 8004588:	0800e448 	.word	0x0800e448
 800458c:	50000800 	.word	0x50000800
 8004590:	ffff7fff 	.word	0xffff7fff
 8004594:	200000b0 	.word	0x200000b0
 8004598:	2000005c 	.word	0x2000005c

0800459c <Scount>:
		GPIOC->ODR |= 1 << 15;    // set cs
		//    GPIOC->ODR &= ~(1 << 14);//Write Disable
	}
//==================================================================================================================================

	uint16_t Scount(void){
 800459c:	b580      	push	{r7, lr}
 800459e:	af00      	add	r7, sp, #0

	}
 80045a0:	46c0      	nop			; (mov r8, r8)
 80045a2:	0018      	movs	r0, r3
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <cmdExecute>:
//====================================================================================================================
	uint8_t cmdExecute(uint8_t cmd2Execute){
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	0002      	movs	r2, r0
 80045b0:	1dfb      	adds	r3, r7, #7
 80045b2:	701a      	strb	r2, [r3, #0]
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 80045b4:	4b68      	ldr	r3, [pc, #416]	; (8004758 <cmdExecute+0x1b0>)
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	2b10      	cmp	r3, #16
 80045ba:	d100      	bne.n	80045be <cmdExecute+0x16>
 80045bc:	e0c5      	b.n	800474a <cmdExecute+0x1a2>
			if (bf4me!=0x00){return;}	// protection against false BF resets
 80045be:	4b67      	ldr	r3, [pc, #412]	; (800475c <cmdExecute+0x1b4>)
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d000      	beq.n	80045c8 <cmdExecute+0x20>
 80045c6:	e0c2      	b.n	800474e <cmdExecute+0x1a6>
		USART2->ICR|=USART_ICR_ORECF;
 80045c8:	4b65      	ldr	r3, [pc, #404]	; (8004760 <cmdExecute+0x1b8>)
 80045ca:	6a1a      	ldr	r2, [r3, #32]
 80045cc:	4b64      	ldr	r3, [pc, #400]	; (8004760 <cmdExecute+0x1b8>)
 80045ce:	2108      	movs	r1, #8
 80045d0:	430a      	orrs	r2, r1
 80045d2:	621a      	str	r2, [r3, #32]

				}
		if(cmd2Execute==0x10){

				}
		if(cmd2Execute==0x11){
 80045d4:	1dfb      	adds	r3, r7, #7
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	2b11      	cmp	r3, #17
 80045da:	d107      	bne.n	80045ec <cmdExecute+0x44>
			bf4me=0x11;	//set BF flag 4 me
 80045dc:	4b5f      	ldr	r3, [pc, #380]	; (800475c <cmdExecute+0x1b4>)
 80045de:	2211      	movs	r2, #17
 80045e0:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
//			weoShowFullScreen(picNum);
			weoShowFullScreenDMA(picNum);
 80045e2:	4b60      	ldr	r3, [pc, #384]	; (8004764 <cmdExecute+0x1bc>)
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	0018      	movs	r0, r3
 80045e8:	f7ff fd44 	bl	8004074 <weoShowFullScreenDMA>
				}
		if(cmd2Execute==0x12){
 80045ec:	1dfb      	adds	r3, r7, #7
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	2b12      	cmp	r3, #18
 80045f2:	d10d      	bne.n	8004610 <cmdExecute+0x68>
			bf4me=0x12;	//set BF flag 4 me
 80045f4:	4b59      	ldr	r3, [pc, #356]	; (800475c <cmdExecute+0x1b4>)
 80045f6:	2212      	movs	r2, #18
 80045f8:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
//			weoShowSmallImageDMA(picNum,imX,imY);
			weoShowSmallImage(picNum,imX,imY);
 80045fa:	4b5a      	ldr	r3, [pc, #360]	; (8004764 <cmdExecute+0x1bc>)
 80045fc:	7818      	ldrb	r0, [r3, #0]
 80045fe:	4b5a      	ldr	r3, [pc, #360]	; (8004768 <cmdExecute+0x1c0>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	b2d9      	uxtb	r1, r3
 8004604:	4b59      	ldr	r3, [pc, #356]	; (800476c <cmdExecute+0x1c4>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	b2db      	uxtb	r3, r3
 800460a:	001a      	movs	r2, r3
 800460c:	f7ff fdd0 	bl	80041b0 <weoShowSmallImage>
				}
		if(cmd2Execute==0x13){
 8004610:	1dfb      	adds	r3, r7, #7
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	2b13      	cmp	r3, #19
 8004616:	d10d      	bne.n	8004634 <cmdExecute+0x8c>
			bf4me=0x13;	//set BF flag 4 me
 8004618:	4b50      	ldr	r3, [pc, #320]	; (800475c <cmdExecute+0x1b4>)
 800461a:	2213      	movs	r2, #19
 800461c:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF

//			printASCIIarray_old(imX,imY, strLen,dataASCII);
			printASCIIarray(imX,imY, strLen,dataASCII);
 800461e:	4b52      	ldr	r3, [pc, #328]	; (8004768 <cmdExecute+0x1c0>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	b2d8      	uxtb	r0, r3
 8004624:	4b51      	ldr	r3, [pc, #324]	; (800476c <cmdExecute+0x1c4>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	b2d9      	uxtb	r1, r3
 800462a:	4b51      	ldr	r3, [pc, #324]	; (8004770 <cmdExecute+0x1c8>)
 800462c:	781a      	ldrb	r2, [r3, #0]
 800462e:	4b51      	ldr	r3, [pc, #324]	; (8004774 <cmdExecute+0x1cc>)
 8004630:	f000 f8aa 	bl	8004788 <printASCIIarray>
				}
		if(cmd2Execute==0x14){
 8004634:	1dfb      	adds	r3, r7, #7
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	2b14      	cmp	r3, #20
 800463a:	d11d      	bne.n	8004678 <cmdExecute+0xd0>
			bf4me=0x14;	//set BF flag 4 me
 800463c:	4b47      	ldr	r3, [pc, #284]	; (800475c <cmdExecute+0x1b4>)
 800463e:	2214      	movs	r2, #20
 8004640:	701a      	strb	r2, [r3, #0]
			if(numSound==0x01){
 8004642:	4b4d      	ldr	r3, [pc, #308]	; (8004778 <cmdExecute+0x1d0>)
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d101      	bne.n	800464e <cmdExecute+0xa6>
				squeak_single();
 800464a:	f000 f957 	bl	80048fc <squeak_single>
			}
			if(numSound==0x02){
 800464e:	4b4a      	ldr	r3, [pc, #296]	; (8004778 <cmdExecute+0x1d0>)
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	2b02      	cmp	r3, #2
 8004654:	d101      	bne.n	800465a <cmdExecute+0xb2>
				squeak_double();
 8004656:	f000 f9e1 	bl	8004a1c <squeak_double>
			}
			if(numSound==0x03){
 800465a:	4b47      	ldr	r3, [pc, #284]	; (8004778 <cmdExecute+0x1d0>)
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	2b03      	cmp	r3, #3
 8004660:	d101      	bne.n	8004666 <cmdExecute+0xbe>
				squeak_triple();
 8004662:	f000 fa75 	bl	8004b50 <squeak_triple>
				}
			GPIOC->ODR |= 1 << 6;	//set BF
 8004666:	4b45      	ldr	r3, [pc, #276]	; (800477c <cmdExecute+0x1d4>)
 8004668:	695a      	ldr	r2, [r3, #20]
 800466a:	4b44      	ldr	r3, [pc, #272]	; (800477c <cmdExecute+0x1d4>)
 800466c:	2140      	movs	r1, #64	; 0x40
 800466e:	430a      	orrs	r2, r1
 8004670:	615a      	str	r2, [r3, #20]
			cmd2Execute=0;
 8004672:	1dfb      	adds	r3, r7, #7
 8004674:	2200      	movs	r2, #0
 8004676:	701a      	strb	r2, [r3, #0]
		}
		if(cmd2Execute==0x15){
 8004678:	1dfb      	adds	r3, r7, #7
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	2b15      	cmp	r3, #21
 800467e:	d153      	bne.n	8004728 <cmdExecute+0x180>
			bf4me=0x15;	//set BF flag 4 me
 8004680:	4b36      	ldr	r3, [pc, #216]	; (800475c <cmdExecute+0x1b4>)
 8004682:	2215      	movs	r2, #21
 8004684:	701a      	strb	r2, [r3, #0]
			I2C_SOUND_ChangePage(0x01);
 8004686:	2001      	movs	r0, #1
 8004688:	f7fe ff88 	bl	800359c <I2C_SOUND_ChangePage>
//			WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
			if(volume==0x00){
 800468c:	4b3c      	ldr	r3, [pc, #240]	; (8004780 <cmdExecute+0x1d8>)
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d106      	bne.n	80046a2 <cmdExecute+0xfa>
				I2C_SOUND_ChangePage(0x01);
 8004694:	2001      	movs	r0, #1
 8004696:	f7fe ff81 	bl	800359c <I2C_SOUND_ChangePage>
				WriteReg_I2C_SOUND(0x2E,0xFF);// mute
 800469a:	21ff      	movs	r1, #255	; 0xff
 800469c:	202e      	movs	r0, #46	; 0x2e
 800469e:	f7fe ff9b 	bl	80035d8 <WriteReg_I2C_SOUND>
			}
			I2C_SOUND_ChangePage(0x01);
 80046a2:	2001      	movs	r0, #1
 80046a4:	f7fe ff7a 	bl	800359c <I2C_SOUND_ChangePage>
			WriteReg_I2C_SOUND(0x2E, volume);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
 80046a8:	4b35      	ldr	r3, [pc, #212]	; (8004780 <cmdExecute+0x1d8>)
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	0019      	movs	r1, r3
 80046ae:	202e      	movs	r0, #46	; 0x2e
 80046b0:	f7fe ff92 	bl	80035d8 <WriteReg_I2C_SOUND>

			if(contrast==0x00){
 80046b4:	4b33      	ldr	r3, [pc, #204]	; (8004784 <cmdExecute+0x1dc>)
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d102      	bne.n	80046c2 <cmdExecute+0x11a>
				weoClear();
 80046bc:	f7fe fd9e 	bl	80031fc <weoClear>
 80046c0:	e029      	b.n	8004716 <cmdExecute+0x16e>
			}
			else{
				GPIOA->ODR &= ~(1 << 6);	//reset cs
 80046c2:	23a0      	movs	r3, #160	; 0xa0
 80046c4:	05db      	lsls	r3, r3, #23
 80046c6:	695a      	ldr	r2, [r3, #20]
 80046c8:	23a0      	movs	r3, #160	; 0xa0
 80046ca:	05db      	lsls	r3, r3, #23
 80046cc:	2140      	movs	r1, #64	; 0x40
 80046ce:	438a      	bics	r2, r1
 80046d0:	615a      	str	r2, [r3, #20]
				GPIOA->ODR &= ~(1 << 7);	// reset dc
 80046d2:	23a0      	movs	r3, #160	; 0xa0
 80046d4:	05db      	lsls	r3, r3, #23
 80046d6:	695a      	ldr	r2, [r3, #20]
 80046d8:	23a0      	movs	r3, #160	; 0xa0
 80046da:	05db      	lsls	r3, r3, #23
 80046dc:	2180      	movs	r1, #128	; 0x80
 80046de:	438a      	bics	r2, r1
 80046e0:	615a      	str	r2, [r3, #20]
				USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 80046e2:	2081      	movs	r0, #129	; 0x81
 80046e4:	f7fe fd0c 	bl	8003100 <USART_AS_SPI_sendCMD>
				USART_AS_SPI_sendCMD(contrast<<4);
 80046e8:	4b26      	ldr	r3, [pc, #152]	; (8004784 <cmdExecute+0x1dc>)
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	011b      	lsls	r3, r3, #4
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	0018      	movs	r0, r3
 80046f2:	f7fe fd05 	bl	8003100 <USART_AS_SPI_sendCMD>
				GPIOA->ODR |= 1 << 7;	//set dc
 80046f6:	23a0      	movs	r3, #160	; 0xa0
 80046f8:	05db      	lsls	r3, r3, #23
 80046fa:	695a      	ldr	r2, [r3, #20]
 80046fc:	23a0      	movs	r3, #160	; 0xa0
 80046fe:	05db      	lsls	r3, r3, #23
 8004700:	2180      	movs	r1, #128	; 0x80
 8004702:	430a      	orrs	r2, r1
 8004704:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= 1 << 6;	//set cs
 8004706:	23a0      	movs	r3, #160	; 0xa0
 8004708:	05db      	lsls	r3, r3, #23
 800470a:	695a      	ldr	r2, [r3, #20]
 800470c:	23a0      	movs	r3, #160	; 0xa0
 800470e:	05db      	lsls	r3, r3, #23
 8004710:	2140      	movs	r1, #64	; 0x40
 8004712:	430a      	orrs	r2, r1
 8004714:	615a      	str	r2, [r3, #20]
			}
//			bf4me=0x15;	//set BF flag 4 me
			GPIOC->ODR |= 1 << 6;	//set BF
 8004716:	4b19      	ldr	r3, [pc, #100]	; (800477c <cmdExecute+0x1d4>)
 8004718:	695a      	ldr	r2, [r3, #20]
 800471a:	4b18      	ldr	r3, [pc, #96]	; (800477c <cmdExecute+0x1d4>)
 800471c:	2140      	movs	r1, #64	; 0x40
 800471e:	430a      	orrs	r2, r1
 8004720:	615a      	str	r2, [r3, #20]
			cmd2Execute=0;
 8004722:	1dfb      	adds	r3, r7, #7
 8004724:	2200      	movs	r2, #0
 8004726:	701a      	strb	r2, [r3, #0]
		}
		if(cmd2Execute==0x16){
 8004728:	1dfb      	adds	r3, r7, #7
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	2b16      	cmp	r3, #22
 800472e:	d102      	bne.n	8004736 <cmdExecute+0x18e>
			bf4me=0x16;	//set BF flag 4 me
 8004730:	4b0a      	ldr	r3, [pc, #40]	; (800475c <cmdExecute+0x1b4>)
 8004732:	2216      	movs	r2, #22
 8004734:	701a      	strb	r2, [r3, #0]

				}
		if(cmd2Execute==0x00){

				}
		if(cmd2Execute=0x00){
 8004736:	1dfb      	adds	r3, r7, #7
 8004738:	2200      	movs	r2, #0
 800473a:	701a      	strb	r2, [r3, #0]

				}
//			}
//		}
		USART2->ICR|=USART_ICR_ORECF;
 800473c:	4b08      	ldr	r3, [pc, #32]	; (8004760 <cmdExecute+0x1b8>)
 800473e:	6a1a      	ldr	r2, [r3, #32]
 8004740:	4b07      	ldr	r3, [pc, #28]	; (8004760 <cmdExecute+0x1b8>)
 8004742:	2108      	movs	r1, #8
 8004744:	430a      	orrs	r2, r1
 8004746:	621a      	str	r2, [r3, #32]
 8004748:	e002      	b.n	8004750 <cmdExecute+0x1a8>
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 800474a:	46c0      	nop			; (mov r8, r8)
 800474c:	e000      	b.n	8004750 <cmdExecute+0x1a8>
			if (bf4me!=0x00){return;}	// protection against false BF resets
 800474e:	46c0      	nop			; (mov r8, r8)
	}
 8004750:	0018      	movs	r0, r3
 8004752:	46bd      	mov	sp, r7
 8004754:	b002      	add	sp, #8
 8004756:	bd80      	pop	{r7, pc}
 8004758:	200024f0 	.word	0x200024f0
 800475c:	200003c0 	.word	0x200003c0
 8004760:	40004400 	.word	0x40004400
 8004764:	20000365 	.word	0x20000365
 8004768:	200001f4 	.word	0x200001f4
 800476c:	20000288 	.word	0x20000288
 8004770:	200003a9 	.word	0x200003a9
 8004774:	200000a0 	.word	0x200000a0
 8004778:	20000429 	.word	0x20000429
 800477c:	50000800 	.word	0x50000800
 8004780:	200001f1 	.word	0x200001f1
 8004784:	200002f4 	.word	0x200002f4

08004788 <printASCIIarray>:
//========================================================================================================================
	uint8_t printASCIIarray(uint8_t imX,uint8_t imY,uint8_t strLen,uint8_t dataASCII[]){
 8004788:	b5b0      	push	{r4, r5, r7, lr}
 800478a:	b092      	sub	sp, #72	; 0x48
 800478c:	af02      	add	r7, sp, #8
 800478e:	0004      	movs	r4, r0
 8004790:	0008      	movs	r0, r1
 8004792:	0011      	movs	r1, r2
 8004794:	603b      	str	r3, [r7, #0]
 8004796:	1dfb      	adds	r3, r7, #7
 8004798:	1c22      	adds	r2, r4, #0
 800479a:	701a      	strb	r2, [r3, #0]
 800479c:	1dbb      	adds	r3, r7, #6
 800479e:	1c02      	adds	r2, r0, #0
 80047a0:	701a      	strb	r2, [r3, #0]
 80047a2:	1d7b      	adds	r3, r7, #5
 80047a4:	1c0a      	adds	r2, r1, #0
 80047a6:	701a      	strb	r2, [r3, #0]
			uint8_t j,Y_height,X_width,ASCII_X,decY;
			uint8_t weoBuffer[49];
			uint16_t i;
			ASCII_X=imX;
 80047a8:	233e      	movs	r3, #62	; 0x3e
 80047aa:	18fb      	adds	r3, r7, r3
 80047ac:	1dfa      	adds	r2, r7, #7
 80047ae:	7812      	ldrb	r2, [r2, #0]
 80047b0:	701a      	strb	r2, [r3, #0]

			len=49;
 80047b2:	4b4c      	ldr	r3, [pc, #304]	; (80048e4 <printASCIIarray+0x15c>)
 80047b4:	2231      	movs	r2, #49	; 0x31
 80047b6:	801a      	strh	r2, [r3, #0]

			decY=0x01;
 80047b8:	213d      	movs	r1, #61	; 0x3d
 80047ba:	187b      	adds	r3, r7, r1
 80047bc:	2201      	movs	r2, #1
 80047be:	701a      	strb	r2, [r3, #0]
			if(imY % 2 !=0){
 80047c0:	1dbb      	adds	r3, r7, #6
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	2201      	movs	r2, #1
 80047c6:	4013      	ands	r3, r2
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d002      	beq.n	80047d4 <printASCIIarray+0x4c>
				decY=0x02;
 80047ce:	187b      	adds	r3, r7, r1
 80047d0:	2202      	movs	r2, #2
 80047d2:	701a      	strb	r2, [r3, #0]
			}

			for (i=0;i<strLen;i++){
 80047d4:	233a      	movs	r3, #58	; 0x3a
 80047d6:	18fb      	adds	r3, r7, r3
 80047d8:	2200      	movs	r2, #0
 80047da:	801a      	strh	r2, [r3, #0]
 80047dc:	e054      	b.n	8004888 <printASCIIarray+0x100>
				for(j=0;j<49;j++){
 80047de:	233f      	movs	r3, #63	; 0x3f
 80047e0:	18fb      	adds	r3, r7, r3
 80047e2:	2200      	movs	r2, #0
 80047e4:	701a      	strb	r2, [r3, #0]
 80047e6:	e01b      	b.n	8004820 <printASCIIarray+0x98>
					weoBuffer[j]=FONT_X[dataASCII[i]][j];
 80047e8:	233a      	movs	r3, #58	; 0x3a
 80047ea:	18fb      	adds	r3, r7, r3
 80047ec:	881b      	ldrh	r3, [r3, #0]
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	18d3      	adds	r3, r2, r3
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	001a      	movs	r2, r3
 80047f6:	253f      	movs	r5, #63	; 0x3f
 80047f8:	197b      	adds	r3, r7, r5
 80047fa:	7818      	ldrb	r0, [r3, #0]
 80047fc:	197b      	adds	r3, r7, r5
 80047fe:	7819      	ldrb	r1, [r3, #0]
 8004800:	4c39      	ldr	r4, [pc, #228]	; (80048e8 <printASCIIarray+0x160>)
 8004802:	0013      	movs	r3, r2
 8004804:	00db      	lsls	r3, r3, #3
 8004806:	1a9b      	subs	r3, r3, r2
 8004808:	00da      	lsls	r2, r3, #3
 800480a:	1ad2      	subs	r2, r2, r3
 800480c:	18a3      	adds	r3, r4, r2
 800480e:	5c1a      	ldrb	r2, [r3, r0]
 8004810:	2308      	movs	r3, #8
 8004812:	18fb      	adds	r3, r7, r3
 8004814:	545a      	strb	r2, [r3, r1]
				for(j=0;j<49;j++){
 8004816:	197b      	adds	r3, r7, r5
 8004818:	781a      	ldrb	r2, [r3, #0]
 800481a:	197b      	adds	r3, r7, r5
 800481c:	3201      	adds	r2, #1
 800481e:	701a      	strb	r2, [r3, #0]
 8004820:	233f      	movs	r3, #63	; 0x3f
 8004822:	18fb      	adds	r3, r7, r3
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	2b30      	cmp	r3, #48	; 0x30
 8004828:	d9de      	bls.n	80047e8 <printASCIIarray+0x60>
					}
				weoDrawRectangleFilled(ASCII_X,imY,ASCII_X+X_increment-1,imY+ASCII_height-decY,0xFF,weoBuffer);
 800482a:	4b30      	ldr	r3, [pc, #192]	; (80048ec <printASCIIarray+0x164>)
 800482c:	781a      	ldrb	r2, [r3, #0]
 800482e:	203e      	movs	r0, #62	; 0x3e
 8004830:	183b      	adds	r3, r7, r0
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	18d3      	adds	r3, r2, r3
 8004836:	b2db      	uxtb	r3, r3
 8004838:	3b01      	subs	r3, #1
 800483a:	b2dc      	uxtb	r4, r3
 800483c:	4b2c      	ldr	r3, [pc, #176]	; (80048f0 <printASCIIarray+0x168>)
 800483e:	781a      	ldrb	r2, [r3, #0]
 8004840:	1dbb      	adds	r3, r7, #6
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	18d3      	adds	r3, r2, r3
 8004846:	b2da      	uxtb	r2, r3
 8004848:	233d      	movs	r3, #61	; 0x3d
 800484a:	18fb      	adds	r3, r7, r3
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	b2da      	uxtb	r2, r3
 8004852:	1dbb      	adds	r3, r7, #6
 8004854:	7819      	ldrb	r1, [r3, #0]
 8004856:	0005      	movs	r5, r0
 8004858:	183b      	adds	r3, r7, r0
 800485a:	7818      	ldrb	r0, [r3, #0]
 800485c:	2308      	movs	r3, #8
 800485e:	18fb      	adds	r3, r7, r3
 8004860:	9301      	str	r3, [sp, #4]
 8004862:	23ff      	movs	r3, #255	; 0xff
 8004864:	9300      	str	r3, [sp, #0]
 8004866:	0013      	movs	r3, r2
 8004868:	0022      	movs	r2, r4
 800486a:	f7fe fd2b 	bl	80032c4 <weoDrawRectangleFilled>
				ASCII_X += X_increment+0;
 800486e:	4b1f      	ldr	r3, [pc, #124]	; (80048ec <printASCIIarray+0x164>)
 8004870:	7819      	ldrb	r1, [r3, #0]
 8004872:	197b      	adds	r3, r7, r5
 8004874:	197a      	adds	r2, r7, r5
 8004876:	7812      	ldrb	r2, [r2, #0]
 8004878:	188a      	adds	r2, r1, r2
 800487a:	701a      	strb	r2, [r3, #0]
			for (i=0;i<strLen;i++){
 800487c:	213a      	movs	r1, #58	; 0x3a
 800487e:	187b      	adds	r3, r7, r1
 8004880:	881a      	ldrh	r2, [r3, #0]
 8004882:	187b      	adds	r3, r7, r1
 8004884:	3201      	adds	r2, #1
 8004886:	801a      	strh	r2, [r3, #0]
 8004888:	1d7b      	adds	r3, r7, #5
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	b29b      	uxth	r3, r3
 800488e:	213a      	movs	r1, #58	; 0x3a
 8004890:	187a      	adds	r2, r7, r1
 8004892:	8812      	ldrh	r2, [r2, #0]
 8004894:	429a      	cmp	r2, r3
 8004896:	d3a2      	bcc.n	80047de <printASCIIarray+0x56>
			}
			for(i=0;i<len;i++){
 8004898:	187b      	adds	r3, r7, r1
 800489a:	2200      	movs	r2, #0
 800489c:	801a      	strh	r2, [r3, #0]
 800489e:	e00c      	b.n	80048ba <printASCIIarray+0x132>
					weoBuffer[j]=0x00;
 80048a0:	233f      	movs	r3, #63	; 0x3f
 80048a2:	18fb      	adds	r3, r7, r3
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	2208      	movs	r2, #8
 80048a8:	18ba      	adds	r2, r7, r2
 80048aa:	2100      	movs	r1, #0
 80048ac:	54d1      	strb	r1, [r2, r3]
			for(i=0;i<len;i++){
 80048ae:	213a      	movs	r1, #58	; 0x3a
 80048b0:	187b      	adds	r3, r7, r1
 80048b2:	881a      	ldrh	r2, [r3, #0]
 80048b4:	187b      	adds	r3, r7, r1
 80048b6:	3201      	adds	r2, #1
 80048b8:	801a      	strh	r2, [r3, #0]
 80048ba:	4b0a      	ldr	r3, [pc, #40]	; (80048e4 <printASCIIarray+0x15c>)
 80048bc:	881b      	ldrh	r3, [r3, #0]
 80048be:	223a      	movs	r2, #58	; 0x3a
 80048c0:	18ba      	adds	r2, r7, r2
 80048c2:	8812      	ldrh	r2, [r2, #0]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d3eb      	bcc.n	80048a0 <printASCIIarray+0x118>
			}
			GPIOC->ODR |= 1 << 6;	//set BF
 80048c8:	4b0a      	ldr	r3, [pc, #40]	; (80048f4 <printASCIIarray+0x16c>)
 80048ca:	695a      	ldr	r2, [r3, #20]
 80048cc:	4b09      	ldr	r3, [pc, #36]	; (80048f4 <printASCIIarray+0x16c>)
 80048ce:	2140      	movs	r1, #64	; 0x40
 80048d0:	430a      	orrs	r2, r1
 80048d2:	615a      	str	r2, [r3, #20]
			cmd2Execute=0;
 80048d4:	4b08      	ldr	r3, [pc, #32]	; (80048f8 <printASCIIarray+0x170>)
 80048d6:	2200      	movs	r2, #0
 80048d8:	701a      	strb	r2, [r3, #0]
		}
 80048da:	46c0      	nop			; (mov r8, r8)
 80048dc:	0018      	movs	r0, r3
 80048de:	46bd      	mov	sp, r7
 80048e0:	b010      	add	sp, #64	; 0x40
 80048e2:	bdb0      	pop	{r4, r5, r7, pc}
 80048e4:	200004e8 	.word	0x200004e8
 80048e8:	0800e4cc 	.word	0x0800e4cc
 80048ec:	20000030 	.word	0x20000030
 80048f0:	20000031 	.word	0x20000031
 80048f4:	50000800 	.word	0x50000800
 80048f8:	20000366 	.word	0x20000366

080048fc <squeak_single>:
//=============================================================================================================
	void squeak_single(void){
 80048fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048fe:	4c3d      	ldr	r4, [pc, #244]	; (80049f4 <squeak_single+0xf8>)
 8004900:	44a5      	add	sp, r4
 8004902:	af00      	add	r7, sp, #0
		   uint16_t signal[2048];
		    uint16_t nsamples = sizeof(signal) / sizeof(signal[0]);
 8004904:	4b3c      	ldr	r3, [pc, #240]	; (80049f8 <squeak_single+0xfc>)
 8004906:	18fb      	adds	r3, r7, r3
 8004908:	2280      	movs	r2, #128	; 0x80
 800490a:	0112      	lsls	r2, r2, #4
 800490c:	801a      	strh	r2, [r3, #0]

		    uint16_t k = 0;
 800490e:	4b3b      	ldr	r3, [pc, #236]	; (80049fc <squeak_single+0x100>)
 8004910:	18fb      	adds	r3, r7, r3
 8004912:	2200      	movs	r2, #0
 8004914:	801a      	strh	r2, [r3, #0]
		    while(k < nsamples) {
 8004916:	e048      	b.n	80049aa <squeak_single+0xae>
		        double t = ((double)k/2.0)/((double)nsamples);
 8004918:	4e38      	ldr	r6, [pc, #224]	; (80049fc <squeak_single+0x100>)
 800491a:	19bb      	adds	r3, r7, r6
 800491c:	881b      	ldrh	r3, [r3, #0]
 800491e:	0018      	movs	r0, r3
 8004920:	f7fd fb96 	bl	8002050 <__aeabi_ui2d>
 8004924:	2200      	movs	r2, #0
 8004926:	2380      	movs	r3, #128	; 0x80
 8004928:	05db      	lsls	r3, r3, #23
 800492a:	f7fc f927 	bl	8000b7c <__aeabi_ddiv>
 800492e:	0002      	movs	r2, r0
 8004930:	000b      	movs	r3, r1
 8004932:	0014      	movs	r4, r2
 8004934:	001d      	movs	r5, r3
 8004936:	4b30      	ldr	r3, [pc, #192]	; (80049f8 <squeak_single+0xfc>)
 8004938:	18fb      	adds	r3, r7, r3
 800493a:	881b      	ldrh	r3, [r3, #0]
 800493c:	0018      	movs	r0, r3
 800493e:	f7fd fb87 	bl	8002050 <__aeabi_ui2d>
 8004942:	0002      	movs	r2, r0
 8004944:	000b      	movs	r3, r1
 8004946:	0020      	movs	r0, r4
 8004948:	0029      	movs	r1, r5
 800494a:	f7fc f917 	bl	8000b7c <__aeabi_ddiv>
 800494e:	0002      	movs	r2, r0
 8004950:	000b      	movs	r3, r1
 8004952:	2180      	movs	r1, #128	; 0x80
 8004954:	0149      	lsls	r1, r1, #5
 8004956:	1878      	adds	r0, r7, r1
 8004958:	6002      	str	r2, [r0, #0]
 800495a:	6043      	str	r3, [r0, #4]
		        signal[k] = 32767*sin(100.0 * TAU * t); // left
 800495c:	4a28      	ldr	r2, [pc, #160]	; (8004a00 <squeak_single+0x104>)
 800495e:	4b29      	ldr	r3, [pc, #164]	; (8004a04 <squeak_single+0x108>)
 8004960:	1879      	adds	r1, r7, r1
 8004962:	6808      	ldr	r0, [r1, #0]
 8004964:	6849      	ldr	r1, [r1, #4]
 8004966:	f7fc fd0f 	bl	8001388 <__aeabi_dmul>
 800496a:	0002      	movs	r2, r0
 800496c:	000b      	movs	r3, r1
 800496e:	0010      	movs	r0, r2
 8004970:	0019      	movs	r1, r3
 8004972:	f008 fd47 	bl	800d404 <sin>
 8004976:	2200      	movs	r2, #0
 8004978:	4b23      	ldr	r3, [pc, #140]	; (8004a08 <squeak_single+0x10c>)
 800497a:	f7fc fd05 	bl	8001388 <__aeabi_dmul>
 800497e:	0002      	movs	r2, r0
 8004980:	000b      	movs	r3, r1
 8004982:	19b9      	adds	r1, r7, r6
 8004984:	880c      	ldrh	r4, [r1, #0]
 8004986:	0010      	movs	r0, r2
 8004988:	0019      	movs	r1, r3
 800498a:	f7fb fd6f 	bl	800046c <__aeabi_d2uiz>
 800498e:	0003      	movs	r3, r0
 8004990:	b299      	uxth	r1, r3
 8004992:	4b1e      	ldr	r3, [pc, #120]	; (8004a0c <squeak_single+0x110>)
 8004994:	4a1e      	ldr	r2, [pc, #120]	; (8004a10 <squeak_single+0x114>)
 8004996:	4694      	mov	ip, r2
 8004998:	44bc      	add	ip, r7
 800499a:	4463      	add	r3, ip
 800499c:	0062      	lsls	r2, r4, #1
 800499e:	52d1      	strh	r1, [r2, r3]
		        k += 1;
 80049a0:	19bb      	adds	r3, r7, r6
 80049a2:	19ba      	adds	r2, r7, r6
 80049a4:	8812      	ldrh	r2, [r2, #0]
 80049a6:	3201      	adds	r2, #1
 80049a8:	801a      	strh	r2, [r3, #0]
		    while(k < nsamples) {
 80049aa:	4b14      	ldr	r3, [pc, #80]	; (80049fc <squeak_single+0x100>)
 80049ac:	18fa      	adds	r2, r7, r3
 80049ae:	4c12      	ldr	r4, [pc, #72]	; (80049f8 <squeak_single+0xfc>)
 80049b0:	193b      	adds	r3, r7, r4
 80049b2:	8812      	ldrh	r2, [r2, #0]
 80049b4:	881b      	ldrh	r3, [r3, #0]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d3ae      	bcc.n	8004918 <squeak_single+0x1c>
		    }
		I2C_SOUND_ChangePage(0x01);
 80049ba:	2001      	movs	r0, #1
 80049bc:	f7fe fdee 	bl	800359c <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x00);
 80049c0:	2100      	movs	r1, #0
 80049c2:	2001      	movs	r0, #1
 80049c4:	f7fe fe08 	bl	80035d8 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x00);
 80049c8:	2000      	movs	r0, #0
 80049ca:	f7fe fde7 	bl	800359c <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x41, 0x30);// 0x81 - 0x30 available
 80049ce:	2130      	movs	r1, #48	; 0x30
 80049d0:	2041      	movs	r0, #65	; 0x41
 80049d2:	f7fe fe01 	bl	80035d8 <WriteReg_I2C_SOUND>
	//	I2C_SOUND_ChangePage(0x00);
		I2C_SOUND_ChangePage(0x01);
 80049d6:	2001      	movs	r0, #1
 80049d8:	f7fe fde0 	bl	800359c <I2C_SOUND_ChangePage>
//		WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
//		WriteReg_I2C_SOUND(0x2E, 0x24);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
		HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)signal, nsamples);
 80049dc:	193b      	adds	r3, r7, r4
 80049de:	881a      	ldrh	r2, [r3, #0]
 80049e0:	0039      	movs	r1, r7
 80049e2:	4b0c      	ldr	r3, [pc, #48]	; (8004a14 <squeak_single+0x118>)
 80049e4:	0018      	movs	r0, r3
 80049e6:	f003 f885 	bl	8007af4 <HAL_I2S_Transmit_DMA>
	}
 80049ea:	46c0      	nop			; (mov r8, r8)
 80049ec:	46bd      	mov	sp, r7
 80049ee:	4b0a      	ldr	r3, [pc, #40]	; (8004a18 <squeak_single+0x11c>)
 80049f0:	449d      	add	sp, r3
 80049f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049f4:	ffffefec 	.word	0xffffefec
 80049f8:	0000100c 	.word	0x0000100c
 80049fc:	0000100e 	.word	0x0000100e
 8004a00:	59d5433b 	.word	0x59d5433b
 8004a04:	4083a28c 	.word	0x4083a28c
 8004a08:	40dfffc0 	.word	0x40dfffc0
 8004a0c:	ffffeff0 	.word	0xffffeff0
 8004a10:	00001010 	.word	0x00001010
 8004a14:	2000036c 	.word	0x2000036c
 8004a18:	00001014 	.word	0x00001014

08004a1c <squeak_double>:
//=============================================================================================================
	void squeak_double(void){
 8004a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a1e:	4c42      	ldr	r4, [pc, #264]	; (8004b28 <squeak_double+0x10c>)
 8004a20:	44a5      	add	sp, r4
 8004a22:	af00      	add	r7, sp, #0
		   uint16_t signal[2048];
		    uint16_t nsamples = sizeof(signal) / sizeof(signal[0]);
 8004a24:	4b41      	ldr	r3, [pc, #260]	; (8004b2c <squeak_double+0x110>)
 8004a26:	18fb      	adds	r3, r7, r3
 8004a28:	2280      	movs	r2, #128	; 0x80
 8004a2a:	0112      	lsls	r2, r2, #4
 8004a2c:	801a      	strh	r2, [r3, #0]

		    uint16_t k = 0;
 8004a2e:	4b40      	ldr	r3, [pc, #256]	; (8004b30 <squeak_double+0x114>)
 8004a30:	18fb      	adds	r3, r7, r3
 8004a32:	2200      	movs	r2, #0
 8004a34:	801a      	strh	r2, [r3, #0]
		    while(k < nsamples) {
 8004a36:	e048      	b.n	8004aca <squeak_double+0xae>
		        double t = ((double)k/2.0)/((double)nsamples);
 8004a38:	4e3d      	ldr	r6, [pc, #244]	; (8004b30 <squeak_double+0x114>)
 8004a3a:	19bb      	adds	r3, r7, r6
 8004a3c:	881b      	ldrh	r3, [r3, #0]
 8004a3e:	0018      	movs	r0, r3
 8004a40:	f7fd fb06 	bl	8002050 <__aeabi_ui2d>
 8004a44:	2200      	movs	r2, #0
 8004a46:	2380      	movs	r3, #128	; 0x80
 8004a48:	05db      	lsls	r3, r3, #23
 8004a4a:	f7fc f897 	bl	8000b7c <__aeabi_ddiv>
 8004a4e:	0002      	movs	r2, r0
 8004a50:	000b      	movs	r3, r1
 8004a52:	0014      	movs	r4, r2
 8004a54:	001d      	movs	r5, r3
 8004a56:	4b35      	ldr	r3, [pc, #212]	; (8004b2c <squeak_double+0x110>)
 8004a58:	18fb      	adds	r3, r7, r3
 8004a5a:	881b      	ldrh	r3, [r3, #0]
 8004a5c:	0018      	movs	r0, r3
 8004a5e:	f7fd faf7 	bl	8002050 <__aeabi_ui2d>
 8004a62:	0002      	movs	r2, r0
 8004a64:	000b      	movs	r3, r1
 8004a66:	0020      	movs	r0, r4
 8004a68:	0029      	movs	r1, r5
 8004a6a:	f7fc f887 	bl	8000b7c <__aeabi_ddiv>
 8004a6e:	0002      	movs	r2, r0
 8004a70:	000b      	movs	r3, r1
 8004a72:	2180      	movs	r1, #128	; 0x80
 8004a74:	0149      	lsls	r1, r1, #5
 8004a76:	1878      	adds	r0, r7, r1
 8004a78:	6002      	str	r2, [r0, #0]
 8004a7a:	6043      	str	r3, [r0, #4]
		        signal[k] = 32767*sin(100.0 * TAU * t); // left
 8004a7c:	4a2d      	ldr	r2, [pc, #180]	; (8004b34 <squeak_double+0x118>)
 8004a7e:	4b2e      	ldr	r3, [pc, #184]	; (8004b38 <squeak_double+0x11c>)
 8004a80:	1879      	adds	r1, r7, r1
 8004a82:	6808      	ldr	r0, [r1, #0]
 8004a84:	6849      	ldr	r1, [r1, #4]
 8004a86:	f7fc fc7f 	bl	8001388 <__aeabi_dmul>
 8004a8a:	0002      	movs	r2, r0
 8004a8c:	000b      	movs	r3, r1
 8004a8e:	0010      	movs	r0, r2
 8004a90:	0019      	movs	r1, r3
 8004a92:	f008 fcb7 	bl	800d404 <sin>
 8004a96:	2200      	movs	r2, #0
 8004a98:	4b28      	ldr	r3, [pc, #160]	; (8004b3c <squeak_double+0x120>)
 8004a9a:	f7fc fc75 	bl	8001388 <__aeabi_dmul>
 8004a9e:	0002      	movs	r2, r0
 8004aa0:	000b      	movs	r3, r1
 8004aa2:	19b9      	adds	r1, r7, r6
 8004aa4:	880c      	ldrh	r4, [r1, #0]
 8004aa6:	0010      	movs	r0, r2
 8004aa8:	0019      	movs	r1, r3
 8004aaa:	f7fb fcdf 	bl	800046c <__aeabi_d2uiz>
 8004aae:	0003      	movs	r3, r0
 8004ab0:	b299      	uxth	r1, r3
 8004ab2:	4b23      	ldr	r3, [pc, #140]	; (8004b40 <squeak_double+0x124>)
 8004ab4:	4a23      	ldr	r2, [pc, #140]	; (8004b44 <squeak_double+0x128>)
 8004ab6:	4694      	mov	ip, r2
 8004ab8:	44bc      	add	ip, r7
 8004aba:	4463      	add	r3, ip
 8004abc:	0062      	lsls	r2, r4, #1
 8004abe:	52d1      	strh	r1, [r2, r3]
		        k += 1;
 8004ac0:	19bb      	adds	r3, r7, r6
 8004ac2:	19ba      	adds	r2, r7, r6
 8004ac4:	8812      	ldrh	r2, [r2, #0]
 8004ac6:	3201      	adds	r2, #1
 8004ac8:	801a      	strh	r2, [r3, #0]
		    while(k < nsamples) {
 8004aca:	4b19      	ldr	r3, [pc, #100]	; (8004b30 <squeak_double+0x114>)
 8004acc:	18fa      	adds	r2, r7, r3
 8004ace:	4c17      	ldr	r4, [pc, #92]	; (8004b2c <squeak_double+0x110>)
 8004ad0:	193b      	adds	r3, r7, r4
 8004ad2:	8812      	ldrh	r2, [r2, #0]
 8004ad4:	881b      	ldrh	r3, [r3, #0]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d3ae      	bcc.n	8004a38 <squeak_double+0x1c>
		    }
		I2C_SOUND_ChangePage(0x01);
 8004ada:	2001      	movs	r0, #1
 8004adc:	f7fe fd5e 	bl	800359c <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x00);
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	2001      	movs	r0, #1
 8004ae4:	f7fe fd78 	bl	80035d8 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x00);
 8004ae8:	2000      	movs	r0, #0
 8004aea:	f7fe fd57 	bl	800359c <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x41, 0x30);// 0x81 - 0x30 available
 8004aee:	2130      	movs	r1, #48	; 0x30
 8004af0:	2041      	movs	r0, #65	; 0x41
 8004af2:	f7fe fd71 	bl	80035d8 <WriteReg_I2C_SOUND>
	//	I2C_SOUND_ChangePage(0x00);
		I2C_SOUND_ChangePage(0x01);
 8004af6:	2001      	movs	r0, #1
 8004af8:	f7fe fd50 	bl	800359c <I2C_SOUND_ChangePage>
//		WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
//		WriteReg_I2C_SOUND(0x2E, 0x24);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
		HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)signal, nsamples);
 8004afc:	193b      	adds	r3, r7, r4
 8004afe:	881a      	ldrh	r2, [r3, #0]
 8004b00:	0039      	movs	r1, r7
 8004b02:	4b11      	ldr	r3, [pc, #68]	; (8004b48 <squeak_double+0x12c>)
 8004b04:	0018      	movs	r0, r3
 8004b06:	f002 fff5 	bl	8007af4 <HAL_I2S_Transmit_DMA>
		HAL_Delay(100);
 8004b0a:	2064      	movs	r0, #100	; 0x64
 8004b0c:	f000 fdcc 	bl	80056a8 <HAL_Delay>
		HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)signal, nsamples);
 8004b10:	193b      	adds	r3, r7, r4
 8004b12:	881a      	ldrh	r2, [r3, #0]
 8004b14:	0039      	movs	r1, r7
 8004b16:	4b0c      	ldr	r3, [pc, #48]	; (8004b48 <squeak_double+0x12c>)
 8004b18:	0018      	movs	r0, r3
 8004b1a:	f002 ffeb 	bl	8007af4 <HAL_I2S_Transmit_DMA>
	}
 8004b1e:	46c0      	nop			; (mov r8, r8)
 8004b20:	46bd      	mov	sp, r7
 8004b22:	4b0a      	ldr	r3, [pc, #40]	; (8004b4c <squeak_double+0x130>)
 8004b24:	449d      	add	sp, r3
 8004b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b28:	ffffefec 	.word	0xffffefec
 8004b2c:	0000100c 	.word	0x0000100c
 8004b30:	0000100e 	.word	0x0000100e
 8004b34:	59d5433b 	.word	0x59d5433b
 8004b38:	4083a28c 	.word	0x4083a28c
 8004b3c:	40dfffc0 	.word	0x40dfffc0
 8004b40:	ffffeff0 	.word	0xffffeff0
 8004b44:	00001010 	.word	0x00001010
 8004b48:	2000036c 	.word	0x2000036c
 8004b4c:	00001014 	.word	0x00001014

08004b50 <squeak_triple>:
//=============================================================================================================
	void squeak_triple(void){
 8004b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b52:	4c47      	ldr	r4, [pc, #284]	; (8004c70 <squeak_triple+0x120>)
 8004b54:	44a5      	add	sp, r4
 8004b56:	af00      	add	r7, sp, #0
		   uint16_t signal[2048];
		    uint16_t nsamples = sizeof(signal) / sizeof(signal[0]);
 8004b58:	4b46      	ldr	r3, [pc, #280]	; (8004c74 <squeak_triple+0x124>)
 8004b5a:	18fb      	adds	r3, r7, r3
 8004b5c:	2280      	movs	r2, #128	; 0x80
 8004b5e:	0112      	lsls	r2, r2, #4
 8004b60:	801a      	strh	r2, [r3, #0]

		    uint16_t k = 0;
 8004b62:	4b45      	ldr	r3, [pc, #276]	; (8004c78 <squeak_triple+0x128>)
 8004b64:	18fb      	adds	r3, r7, r3
 8004b66:	2200      	movs	r2, #0
 8004b68:	801a      	strh	r2, [r3, #0]
		    while(k < nsamples) {
 8004b6a:	e048      	b.n	8004bfe <squeak_triple+0xae>
		        double t = ((double)k/2.0)/((double)nsamples);
 8004b6c:	4e42      	ldr	r6, [pc, #264]	; (8004c78 <squeak_triple+0x128>)
 8004b6e:	19bb      	adds	r3, r7, r6
 8004b70:	881b      	ldrh	r3, [r3, #0]
 8004b72:	0018      	movs	r0, r3
 8004b74:	f7fd fa6c 	bl	8002050 <__aeabi_ui2d>
 8004b78:	2200      	movs	r2, #0
 8004b7a:	2380      	movs	r3, #128	; 0x80
 8004b7c:	05db      	lsls	r3, r3, #23
 8004b7e:	f7fb fffd 	bl	8000b7c <__aeabi_ddiv>
 8004b82:	0002      	movs	r2, r0
 8004b84:	000b      	movs	r3, r1
 8004b86:	0014      	movs	r4, r2
 8004b88:	001d      	movs	r5, r3
 8004b8a:	4b3a      	ldr	r3, [pc, #232]	; (8004c74 <squeak_triple+0x124>)
 8004b8c:	18fb      	adds	r3, r7, r3
 8004b8e:	881b      	ldrh	r3, [r3, #0]
 8004b90:	0018      	movs	r0, r3
 8004b92:	f7fd fa5d 	bl	8002050 <__aeabi_ui2d>
 8004b96:	0002      	movs	r2, r0
 8004b98:	000b      	movs	r3, r1
 8004b9a:	0020      	movs	r0, r4
 8004b9c:	0029      	movs	r1, r5
 8004b9e:	f7fb ffed 	bl	8000b7c <__aeabi_ddiv>
 8004ba2:	0002      	movs	r2, r0
 8004ba4:	000b      	movs	r3, r1
 8004ba6:	2180      	movs	r1, #128	; 0x80
 8004ba8:	0149      	lsls	r1, r1, #5
 8004baa:	1878      	adds	r0, r7, r1
 8004bac:	6002      	str	r2, [r0, #0]
 8004bae:	6043      	str	r3, [r0, #4]
		        signal[k] = 32767*sin(100.0 * TAU * t); // left
 8004bb0:	4a32      	ldr	r2, [pc, #200]	; (8004c7c <squeak_triple+0x12c>)
 8004bb2:	4b33      	ldr	r3, [pc, #204]	; (8004c80 <squeak_triple+0x130>)
 8004bb4:	1879      	adds	r1, r7, r1
 8004bb6:	6808      	ldr	r0, [r1, #0]
 8004bb8:	6849      	ldr	r1, [r1, #4]
 8004bba:	f7fc fbe5 	bl	8001388 <__aeabi_dmul>
 8004bbe:	0002      	movs	r2, r0
 8004bc0:	000b      	movs	r3, r1
 8004bc2:	0010      	movs	r0, r2
 8004bc4:	0019      	movs	r1, r3
 8004bc6:	f008 fc1d 	bl	800d404 <sin>
 8004bca:	2200      	movs	r2, #0
 8004bcc:	4b2d      	ldr	r3, [pc, #180]	; (8004c84 <squeak_triple+0x134>)
 8004bce:	f7fc fbdb 	bl	8001388 <__aeabi_dmul>
 8004bd2:	0002      	movs	r2, r0
 8004bd4:	000b      	movs	r3, r1
 8004bd6:	19b9      	adds	r1, r7, r6
 8004bd8:	880c      	ldrh	r4, [r1, #0]
 8004bda:	0010      	movs	r0, r2
 8004bdc:	0019      	movs	r1, r3
 8004bde:	f7fb fc45 	bl	800046c <__aeabi_d2uiz>
 8004be2:	0003      	movs	r3, r0
 8004be4:	b299      	uxth	r1, r3
 8004be6:	4b28      	ldr	r3, [pc, #160]	; (8004c88 <squeak_triple+0x138>)
 8004be8:	4a28      	ldr	r2, [pc, #160]	; (8004c8c <squeak_triple+0x13c>)
 8004bea:	4694      	mov	ip, r2
 8004bec:	44bc      	add	ip, r7
 8004bee:	4463      	add	r3, ip
 8004bf0:	0062      	lsls	r2, r4, #1
 8004bf2:	52d1      	strh	r1, [r2, r3]
		        k += 1;
 8004bf4:	19bb      	adds	r3, r7, r6
 8004bf6:	19ba      	adds	r2, r7, r6
 8004bf8:	8812      	ldrh	r2, [r2, #0]
 8004bfa:	3201      	adds	r2, #1
 8004bfc:	801a      	strh	r2, [r3, #0]
		    while(k < nsamples) {
 8004bfe:	4b1e      	ldr	r3, [pc, #120]	; (8004c78 <squeak_triple+0x128>)
 8004c00:	18fa      	adds	r2, r7, r3
 8004c02:	4c1c      	ldr	r4, [pc, #112]	; (8004c74 <squeak_triple+0x124>)
 8004c04:	193b      	adds	r3, r7, r4
 8004c06:	8812      	ldrh	r2, [r2, #0]
 8004c08:	881b      	ldrh	r3, [r3, #0]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d3ae      	bcc.n	8004b6c <squeak_triple+0x1c>
		    }
		I2C_SOUND_ChangePage(0x01);
 8004c0e:	2001      	movs	r0, #1
 8004c10:	f7fe fcc4 	bl	800359c <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x00);
 8004c14:	2100      	movs	r1, #0
 8004c16:	2001      	movs	r0, #1
 8004c18:	f7fe fcde 	bl	80035d8 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x00);
 8004c1c:	2000      	movs	r0, #0
 8004c1e:	f7fe fcbd 	bl	800359c <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x41, 0x30);// 0x81 - 0x30 available
 8004c22:	2130      	movs	r1, #48	; 0x30
 8004c24:	2041      	movs	r0, #65	; 0x41
 8004c26:	f7fe fcd7 	bl	80035d8 <WriteReg_I2C_SOUND>
	//	I2C_SOUND_ChangePage(0x00);
		I2C_SOUND_ChangePage(0x01);
 8004c2a:	2001      	movs	r0, #1
 8004c2c:	f7fe fcb6 	bl	800359c <I2C_SOUND_ChangePage>
//		WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
//		WriteReg_I2C_SOUND(0x2E, 0x24);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
		HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)signal, nsamples);
 8004c30:	193b      	adds	r3, r7, r4
 8004c32:	881a      	ldrh	r2, [r3, #0]
 8004c34:	0039      	movs	r1, r7
 8004c36:	4b16      	ldr	r3, [pc, #88]	; (8004c90 <squeak_triple+0x140>)
 8004c38:	0018      	movs	r0, r3
 8004c3a:	f002 ff5b 	bl	8007af4 <HAL_I2S_Transmit_DMA>
		HAL_Delay(100);
 8004c3e:	2064      	movs	r0, #100	; 0x64
 8004c40:	f000 fd32 	bl	80056a8 <HAL_Delay>
		HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)signal, nsamples);
 8004c44:	193b      	adds	r3, r7, r4
 8004c46:	881a      	ldrh	r2, [r3, #0]
 8004c48:	0039      	movs	r1, r7
 8004c4a:	4b11      	ldr	r3, [pc, #68]	; (8004c90 <squeak_triple+0x140>)
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	f002 ff51 	bl	8007af4 <HAL_I2S_Transmit_DMA>
		HAL_Delay(100);
 8004c52:	2064      	movs	r0, #100	; 0x64
 8004c54:	f000 fd28 	bl	80056a8 <HAL_Delay>
		HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)signal, nsamples);
 8004c58:	193b      	adds	r3, r7, r4
 8004c5a:	881a      	ldrh	r2, [r3, #0]
 8004c5c:	0039      	movs	r1, r7
 8004c5e:	4b0c      	ldr	r3, [pc, #48]	; (8004c90 <squeak_triple+0x140>)
 8004c60:	0018      	movs	r0, r3
 8004c62:	f002 ff47 	bl	8007af4 <HAL_I2S_Transmit_DMA>
	}
 8004c66:	46c0      	nop			; (mov r8, r8)
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	4b0a      	ldr	r3, [pc, #40]	; (8004c94 <squeak_triple+0x144>)
 8004c6c:	449d      	add	sp, r3
 8004c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c70:	ffffefec 	.word	0xffffefec
 8004c74:	0000100c 	.word	0x0000100c
 8004c78:	0000100e 	.word	0x0000100e
 8004c7c:	59d5433b 	.word	0x59d5433b
 8004c80:	4083a28c 	.word	0x4083a28c
 8004c84:	40dfffc0 	.word	0x40dfffc0
 8004c88:	ffffeff0 	.word	0xffffeff0
 8004c8c:	00001010 	.word	0x00001010
 8004c90:	2000036c 	.word	0x2000036c
 8004c94:	00001014 	.word	0x00001014

08004c98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004c9c:	46c0      	nop			; (mov r8, r8)
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
	...

08004ca4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004caa:	4b11      	ldr	r3, [pc, #68]	; (8004cf0 <HAL_MspInit+0x4c>)
 8004cac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cae:	4b10      	ldr	r3, [pc, #64]	; (8004cf0 <HAL_MspInit+0x4c>)
 8004cb0:	2101      	movs	r1, #1
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	641a      	str	r2, [r3, #64]	; 0x40
 8004cb6:	4b0e      	ldr	r3, [pc, #56]	; (8004cf0 <HAL_MspInit+0x4c>)
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cba:	2201      	movs	r2, #1
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	607b      	str	r3, [r7, #4]
 8004cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004cc2:	4b0b      	ldr	r3, [pc, #44]	; (8004cf0 <HAL_MspInit+0x4c>)
 8004cc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cc6:	4b0a      	ldr	r3, [pc, #40]	; (8004cf0 <HAL_MspInit+0x4c>)
 8004cc8:	2180      	movs	r1, #128	; 0x80
 8004cca:	0549      	lsls	r1, r1, #21
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	63da      	str	r2, [r3, #60]	; 0x3c
 8004cd0:	4b07      	ldr	r3, [pc, #28]	; (8004cf0 <HAL_MspInit+0x4c>)
 8004cd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cd4:	2380      	movs	r3, #128	; 0x80
 8004cd6:	055b      	lsls	r3, r3, #21
 8004cd8:	4013      	ands	r3, r2
 8004cda:	603b      	str	r3, [r7, #0]
 8004cdc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 8004cde:	2380      	movs	r3, #128	; 0x80
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	0018      	movs	r0, r3
 8004ce4:	f000 fd04 	bl	80056f0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ce8:	46c0      	nop			; (mov r8, r8)
 8004cea:	46bd      	mov	sp, r7
 8004cec:	b002      	add	sp, #8
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	40021000 	.word	0x40021000

08004cf4 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8004cf4:	b590      	push	{r4, r7, lr}
 8004cf6:	b089      	sub	sp, #36	; 0x24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cfc:	240c      	movs	r4, #12
 8004cfe:	193b      	adds	r3, r7, r4
 8004d00:	0018      	movs	r0, r3
 8004d02:	2314      	movs	r3, #20
 8004d04:	001a      	movs	r2, r3
 8004d06:	2100      	movs	r1, #0
 8004d08:	f008 fb74 	bl	800d3f4 <memset>
  if(hcomp->Instance==COMP1)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a10      	ldr	r2, [pc, #64]	; (8004d54 <HAL_COMP_MspInit+0x60>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d11a      	bne.n	8004d4c <HAL_COMP_MspInit+0x58>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d16:	4b10      	ldr	r3, [pc, #64]	; (8004d58 <HAL_COMP_MspInit+0x64>)
 8004d18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d1a:	4b0f      	ldr	r3, [pc, #60]	; (8004d58 <HAL_COMP_MspInit+0x64>)
 8004d1c:	2102      	movs	r1, #2
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	635a      	str	r2, [r3, #52]	; 0x34
 8004d22:	4b0d      	ldr	r3, [pc, #52]	; (8004d58 <HAL_COMP_MspInit+0x64>)
 8004d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d26:	2202      	movs	r2, #2
 8004d28:	4013      	ands	r3, r2
 8004d2a:	60bb      	str	r3, [r7, #8]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004d2e:	193b      	adds	r3, r7, r4
 8004d30:	2204      	movs	r2, #4
 8004d32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d34:	193b      	adds	r3, r7, r4
 8004d36:	2203      	movs	r2, #3
 8004d38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d3a:	193b      	adds	r3, r7, r4
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d40:	193b      	adds	r3, r7, r4
 8004d42:	4a06      	ldr	r2, [pc, #24]	; (8004d5c <HAL_COMP_MspInit+0x68>)
 8004d44:	0019      	movs	r1, r3
 8004d46:	0010      	movs	r0, r2
 8004d48:	f001 faee 	bl	8006328 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 8004d4c:	46c0      	nop			; (mov r8, r8)
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	b009      	add	sp, #36	; 0x24
 8004d52:	bd90      	pop	{r4, r7, pc}
 8004d54:	40010200 	.word	0x40010200
 8004d58:	40021000 	.word	0x40021000
 8004d5c:	50000400 	.word	0x50000400

08004d60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004d60:	b590      	push	{r4, r7, lr}
 8004d62:	b08b      	sub	sp, #44	; 0x2c
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d68:	2414      	movs	r4, #20
 8004d6a:	193b      	adds	r3, r7, r4
 8004d6c:	0018      	movs	r0, r3
 8004d6e:	2314      	movs	r3, #20
 8004d70:	001a      	movs	r2, r3
 8004d72:	2100      	movs	r1, #0
 8004d74:	f008 fb3e 	bl	800d3f4 <memset>
  if(hi2c->Instance==I2C1)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a20      	ldr	r2, [pc, #128]	; (8004e00 <HAL_I2C_MspInit+0xa0>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d139      	bne.n	8004df6 <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d82:	4b20      	ldr	r3, [pc, #128]	; (8004e04 <HAL_I2C_MspInit+0xa4>)
 8004d84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d86:	4b1f      	ldr	r3, [pc, #124]	; (8004e04 <HAL_I2C_MspInit+0xa4>)
 8004d88:	2101      	movs	r1, #1
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	635a      	str	r2, [r3, #52]	; 0x34
 8004d8e:	4b1d      	ldr	r3, [pc, #116]	; (8004e04 <HAL_I2C_MspInit+0xa4>)
 8004d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d92:	2201      	movs	r2, #1
 8004d94:	4013      	ands	r3, r2
 8004d96:	613b      	str	r3, [r7, #16]
 8004d98:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004d9a:	193b      	adds	r3, r7, r4
 8004d9c:	22c0      	movs	r2, #192	; 0xc0
 8004d9e:	00d2      	lsls	r2, r2, #3
 8004da0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004da2:	0021      	movs	r1, r4
 8004da4:	187b      	adds	r3, r7, r1
 8004da6:	2212      	movs	r2, #18
 8004da8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004daa:	187b      	adds	r3, r7, r1
 8004dac:	2201      	movs	r2, #1
 8004dae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004db0:	187b      	adds	r3, r7, r1
 8004db2:	2200      	movs	r2, #0
 8004db4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8004db6:	187b      	adds	r3, r7, r1
 8004db8:	2206      	movs	r2, #6
 8004dba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dbc:	187a      	adds	r2, r7, r1
 8004dbe:	23a0      	movs	r3, #160	; 0xa0
 8004dc0:	05db      	lsls	r3, r3, #23
 8004dc2:	0011      	movs	r1, r2
 8004dc4:	0018      	movs	r0, r3
 8004dc6:	f001 faaf 	bl	8006328 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004dca:	4b0e      	ldr	r3, [pc, #56]	; (8004e04 <HAL_I2C_MspInit+0xa4>)
 8004dcc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dce:	4b0d      	ldr	r3, [pc, #52]	; (8004e04 <HAL_I2C_MspInit+0xa4>)
 8004dd0:	2180      	movs	r1, #128	; 0x80
 8004dd2:	0389      	lsls	r1, r1, #14
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	63da      	str	r2, [r3, #60]	; 0x3c
 8004dd8:	4b0a      	ldr	r3, [pc, #40]	; (8004e04 <HAL_I2C_MspInit+0xa4>)
 8004dda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ddc:	2380      	movs	r3, #128	; 0x80
 8004dde:	039b      	lsls	r3, r3, #14
 8004de0:	4013      	ands	r3, r2
 8004de2:	60fb      	str	r3, [r7, #12]
 8004de4:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8004de6:	2200      	movs	r2, #0
 8004de8:	2100      	movs	r1, #0
 8004dea:	2017      	movs	r0, #23
 8004dec:	f000 ffa2 	bl	8005d34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8004df0:	2017      	movs	r0, #23
 8004df2:	f000 ffb4 	bl	8005d5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004df6:	46c0      	nop			; (mov r8, r8)
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	b00b      	add	sp, #44	; 0x2c
 8004dfc:	bd90      	pop	{r4, r7, pc}
 8004dfe:	46c0      	nop			; (mov r8, r8)
 8004e00:	40005400 	.word	0x40005400
 8004e04:	40021000 	.word	0x40021000

08004e08 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8004e08:	b590      	push	{r4, r7, lr}
 8004e0a:	b08b      	sub	sp, #44	; 0x2c
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e10:	2414      	movs	r4, #20
 8004e12:	193b      	adds	r3, r7, r4
 8004e14:	0018      	movs	r0, r3
 8004e16:	2314      	movs	r3, #20
 8004e18:	001a      	movs	r2, r3
 8004e1a:	2100      	movs	r1, #0
 8004e1c:	f008 faea 	bl	800d3f4 <memset>
  if(hi2s->Instance==SPI1)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a47      	ldr	r2, [pc, #284]	; (8004f44 <HAL_I2S_MspInit+0x13c>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d000      	beq.n	8004e2c <HAL_I2S_MspInit+0x24>
 8004e2a:	e086      	b.n	8004f3a <HAL_I2S_MspInit+0x132>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004e2c:	4b46      	ldr	r3, [pc, #280]	; (8004f48 <HAL_I2S_MspInit+0x140>)
 8004e2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e30:	4b45      	ldr	r3, [pc, #276]	; (8004f48 <HAL_I2S_MspInit+0x140>)
 8004e32:	2180      	movs	r1, #128	; 0x80
 8004e34:	0149      	lsls	r1, r1, #5
 8004e36:	430a      	orrs	r2, r1
 8004e38:	641a      	str	r2, [r3, #64]	; 0x40
 8004e3a:	4b43      	ldr	r3, [pc, #268]	; (8004f48 <HAL_I2S_MspInit+0x140>)
 8004e3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e3e:	2380      	movs	r3, #128	; 0x80
 8004e40:	015b      	lsls	r3, r3, #5
 8004e42:	4013      	ands	r3, r2
 8004e44:	613b      	str	r3, [r7, #16]
 8004e46:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e48:	4b3f      	ldr	r3, [pc, #252]	; (8004f48 <HAL_I2S_MspInit+0x140>)
 8004e4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e4c:	4b3e      	ldr	r3, [pc, #248]	; (8004f48 <HAL_I2S_MspInit+0x140>)
 8004e4e:	2101      	movs	r1, #1
 8004e50:	430a      	orrs	r2, r1
 8004e52:	635a      	str	r2, [r3, #52]	; 0x34
 8004e54:	4b3c      	ldr	r3, [pc, #240]	; (8004f48 <HAL_I2S_MspInit+0x140>)
 8004e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e58:	2201      	movs	r2, #1
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	60fb      	str	r3, [r7, #12]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e60:	4b39      	ldr	r3, [pc, #228]	; (8004f48 <HAL_I2S_MspInit+0x140>)
 8004e62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e64:	4b38      	ldr	r3, [pc, #224]	; (8004f48 <HAL_I2S_MspInit+0x140>)
 8004e66:	2102      	movs	r1, #2
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	635a      	str	r2, [r3, #52]	; 0x34
 8004e6c:	4b36      	ldr	r3, [pc, #216]	; (8004f48 <HAL_I2S_MspInit+0x140>)
 8004e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e70:	2202      	movs	r2, #2
 8004e72:	4013      	ands	r3, r2
 8004e74:	60bb      	str	r3, [r7, #8]
 8004e76:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> I2S1_WS
    PB3     ------> I2S1_CK
    PB4     ------> I2S1_MCK
    PB5     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004e78:	193b      	adds	r3, r7, r4
 8004e7a:	2280      	movs	r2, #128	; 0x80
 8004e7c:	0212      	lsls	r2, r2, #8
 8004e7e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e80:	193b      	adds	r3, r7, r4
 8004e82:	2202      	movs	r2, #2
 8004e84:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e86:	193b      	adds	r3, r7, r4
 8004e88:	2200      	movs	r2, #0
 8004e8a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e8c:	193b      	adds	r3, r7, r4
 8004e8e:	2200      	movs	r2, #0
 8004e90:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004e92:	193b      	adds	r3, r7, r4
 8004e94:	2200      	movs	r2, #0
 8004e96:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e98:	193a      	adds	r2, r7, r4
 8004e9a:	23a0      	movs	r3, #160	; 0xa0
 8004e9c:	05db      	lsls	r3, r3, #23
 8004e9e:	0011      	movs	r1, r2
 8004ea0:	0018      	movs	r0, r3
 8004ea2:	f001 fa41 	bl	8006328 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8004ea6:	0021      	movs	r1, r4
 8004ea8:	187b      	adds	r3, r7, r1
 8004eaa:	2238      	movs	r2, #56	; 0x38
 8004eac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eae:	187b      	adds	r3, r7, r1
 8004eb0:	2202      	movs	r2, #2
 8004eb2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eb4:	187b      	adds	r3, r7, r1
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004eba:	187b      	adds	r3, r7, r1
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004ec0:	187b      	adds	r3, r7, r1
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ec6:	187b      	adds	r3, r7, r1
 8004ec8:	4a20      	ldr	r2, [pc, #128]	; (8004f4c <HAL_I2S_MspInit+0x144>)
 8004eca:	0019      	movs	r1, r3
 8004ecc:	0010      	movs	r0, r2
 8004ece:	f001 fa2b 	bl	8006328 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8004ed2:	4b1f      	ldr	r3, [pc, #124]	; (8004f50 <HAL_I2S_MspInit+0x148>)
 8004ed4:	4a1f      	ldr	r2, [pc, #124]	; (8004f54 <HAL_I2S_MspInit+0x14c>)
 8004ed6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8004ed8:	4b1d      	ldr	r3, [pc, #116]	; (8004f50 <HAL_I2S_MspInit+0x148>)
 8004eda:	2211      	movs	r2, #17
 8004edc:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004ede:	4b1c      	ldr	r3, [pc, #112]	; (8004f50 <HAL_I2S_MspInit+0x148>)
 8004ee0:	2210      	movs	r2, #16
 8004ee2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ee4:	4b1a      	ldr	r3, [pc, #104]	; (8004f50 <HAL_I2S_MspInit+0x148>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004eea:	4b19      	ldr	r3, [pc, #100]	; (8004f50 <HAL_I2S_MspInit+0x148>)
 8004eec:	2280      	movs	r2, #128	; 0x80
 8004eee:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004ef0:	4b17      	ldr	r3, [pc, #92]	; (8004f50 <HAL_I2S_MspInit+0x148>)
 8004ef2:	2280      	movs	r2, #128	; 0x80
 8004ef4:	0052      	lsls	r2, r2, #1
 8004ef6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004ef8:	4b15      	ldr	r3, [pc, #84]	; (8004f50 <HAL_I2S_MspInit+0x148>)
 8004efa:	2280      	movs	r2, #128	; 0x80
 8004efc:	00d2      	lsls	r2, r2, #3
 8004efe:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8004f00:	4b13      	ldr	r3, [pc, #76]	; (8004f50 <HAL_I2S_MspInit+0x148>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004f06:	4b12      	ldr	r3, [pc, #72]	; (8004f50 <HAL_I2S_MspInit+0x148>)
 8004f08:	22c0      	movs	r2, #192	; 0xc0
 8004f0a:	0192      	lsls	r2, r2, #6
 8004f0c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8004f0e:	4b10      	ldr	r3, [pc, #64]	; (8004f50 <HAL_I2S_MspInit+0x148>)
 8004f10:	0018      	movs	r0, r3
 8004f12:	f000 ff41 	bl	8005d98 <HAL_DMA_Init>
 8004f16:	1e03      	subs	r3, r0, #0
 8004f18:	d001      	beq.n	8004f1e <HAL_I2S_MspInit+0x116>
    {
      Error_Handler();
 8004f1a:	f7ff febd 	bl	8004c98 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a0b      	ldr	r2, [pc, #44]	; (8004f50 <HAL_I2S_MspInit+0x148>)
 8004f22:	62da      	str	r2, [r3, #44]	; 0x2c
 8004f24:	4b0a      	ldr	r3, [pc, #40]	; (8004f50 <HAL_I2S_MspInit+0x148>)
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	629a      	str	r2, [r3, #40]	; 0x28

    /* I2S1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	2019      	movs	r0, #25
 8004f30:	f000 ff00 	bl	8005d34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004f34:	2019      	movs	r0, #25
 8004f36:	f000 ff12 	bl	8005d5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004f3a:	46c0      	nop			; (mov r8, r8)
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	b00b      	add	sp, #44	; 0x2c
 8004f40:	bd90      	pop	{r4, r7, pc}
 8004f42:	46c0      	nop			; (mov r8, r8)
 8004f44:	40013000 	.word	0x40013000
 8004f48:	40021000 	.word	0x40021000
 8004f4c:	50000400 	.word	0x50000400
 8004f50:	2000048c 	.word	0x2000048c
 8004f54:	40020008 	.word	0x40020008

08004f58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004f58:	b590      	push	{r4, r7, lr}
 8004f5a:	b08b      	sub	sp, #44	; 0x2c
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f60:	2414      	movs	r4, #20
 8004f62:	193b      	adds	r3, r7, r4
 8004f64:	0018      	movs	r0, r3
 8004f66:	2314      	movs	r3, #20
 8004f68:	001a      	movs	r2, r3
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	f008 fa42 	bl	800d3f4 <memset>
  if(hspi->Instance==SPI2)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a54      	ldr	r2, [pc, #336]	; (80050c8 <HAL_SPI_MspInit+0x170>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d000      	beq.n	8004f7c <HAL_SPI_MspInit+0x24>
 8004f7a:	e0a0      	b.n	80050be <HAL_SPI_MspInit+0x166>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004f7c:	4b53      	ldr	r3, [pc, #332]	; (80050cc <HAL_SPI_MspInit+0x174>)
 8004f7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f80:	4b52      	ldr	r3, [pc, #328]	; (80050cc <HAL_SPI_MspInit+0x174>)
 8004f82:	2180      	movs	r1, #128	; 0x80
 8004f84:	01c9      	lsls	r1, r1, #7
 8004f86:	430a      	orrs	r2, r1
 8004f88:	63da      	str	r2, [r3, #60]	; 0x3c
 8004f8a:	4b50      	ldr	r3, [pc, #320]	; (80050cc <HAL_SPI_MspInit+0x174>)
 8004f8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f8e:	2380      	movs	r3, #128	; 0x80
 8004f90:	01db      	lsls	r3, r3, #7
 8004f92:	4013      	ands	r3, r2
 8004f94:	613b      	str	r3, [r7, #16]
 8004f96:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f98:	4b4c      	ldr	r3, [pc, #304]	; (80050cc <HAL_SPI_MspInit+0x174>)
 8004f9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f9c:	4b4b      	ldr	r3, [pc, #300]	; (80050cc <HAL_SPI_MspInit+0x174>)
 8004f9e:	2102      	movs	r1, #2
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	635a      	str	r2, [r3, #52]	; 0x34
 8004fa4:	4b49      	ldr	r3, [pc, #292]	; (80050cc <HAL_SPI_MspInit+0x174>)
 8004fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa8:	2202      	movs	r2, #2
 8004faa:	4013      	ands	r3, r2
 8004fac:	60fb      	str	r3, [r7, #12]
 8004fae:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB6     ------> SPI2_MISO
    PB7     ------> SPI2_MOSI
    PB8     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004fb0:	193b      	adds	r3, r7, r4
 8004fb2:	2240      	movs	r2, #64	; 0x40
 8004fb4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fb6:	193b      	adds	r3, r7, r4
 8004fb8:	2202      	movs	r2, #2
 8004fba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fbc:	193b      	adds	r3, r7, r4
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fc2:	193b      	adds	r3, r7, r4
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI2;
 8004fc8:	193b      	adds	r3, r7, r4
 8004fca:	2204      	movs	r2, #4
 8004fcc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fce:	193b      	adds	r3, r7, r4
 8004fd0:	4a3f      	ldr	r2, [pc, #252]	; (80050d0 <HAL_SPI_MspInit+0x178>)
 8004fd2:	0019      	movs	r1, r3
 8004fd4:	0010      	movs	r0, r2
 8004fd6:	f001 f9a7 	bl	8006328 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8004fda:	0021      	movs	r1, r4
 8004fdc:	187b      	adds	r3, r7, r1
 8004fde:	22c0      	movs	r2, #192	; 0xc0
 8004fe0:	0052      	lsls	r2, r2, #1
 8004fe2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fe4:	187b      	adds	r3, r7, r1
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fea:	187b      	adds	r3, r7, r1
 8004fec:	2200      	movs	r2, #0
 8004fee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ff0:	187b      	adds	r3, r7, r1
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8004ff6:	187b      	adds	r3, r7, r1
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ffc:	187b      	adds	r3, r7, r1
 8004ffe:	4a34      	ldr	r2, [pc, #208]	; (80050d0 <HAL_SPI_MspInit+0x178>)
 8005000:	0019      	movs	r1, r3
 8005002:	0010      	movs	r0, r2
 8005004:	f001 f990 	bl	8006328 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel2;
 8005008:	4b32      	ldr	r3, [pc, #200]	; (80050d4 <HAL_SPI_MspInit+0x17c>)
 800500a:	4a33      	ldr	r2, [pc, #204]	; (80050d8 <HAL_SPI_MspInit+0x180>)
 800500c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 800500e:	4b31      	ldr	r3, [pc, #196]	; (80050d4 <HAL_SPI_MspInit+0x17c>)
 8005010:	2212      	movs	r2, #18
 8005012:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005014:	4b2f      	ldr	r3, [pc, #188]	; (80050d4 <HAL_SPI_MspInit+0x17c>)
 8005016:	2200      	movs	r2, #0
 8005018:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800501a:	4b2e      	ldr	r3, [pc, #184]	; (80050d4 <HAL_SPI_MspInit+0x17c>)
 800501c:	2200      	movs	r2, #0
 800501e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005020:	4b2c      	ldr	r3, [pc, #176]	; (80050d4 <HAL_SPI_MspInit+0x17c>)
 8005022:	2280      	movs	r2, #128	; 0x80
 8005024:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005026:	4b2b      	ldr	r3, [pc, #172]	; (80050d4 <HAL_SPI_MspInit+0x17c>)
 8005028:	2200      	movs	r2, #0
 800502a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800502c:	4b29      	ldr	r3, [pc, #164]	; (80050d4 <HAL_SPI_MspInit+0x17c>)
 800502e:	2200      	movs	r2, #0
 8005030:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8005032:	4b28      	ldr	r3, [pc, #160]	; (80050d4 <HAL_SPI_MspInit+0x17c>)
 8005034:	2200      	movs	r2, #0
 8005036:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8005038:	4b26      	ldr	r3, [pc, #152]	; (80050d4 <HAL_SPI_MspInit+0x17c>)
 800503a:	2280      	movs	r2, #128	; 0x80
 800503c:	0192      	lsls	r2, r2, #6
 800503e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8005040:	4b24      	ldr	r3, [pc, #144]	; (80050d4 <HAL_SPI_MspInit+0x17c>)
 8005042:	0018      	movs	r0, r3
 8005044:	f000 fea8 	bl	8005d98 <HAL_DMA_Init>
 8005048:	1e03      	subs	r3, r0, #0
 800504a:	d001      	beq.n	8005050 <HAL_SPI_MspInit+0xf8>
    {
      Error_Handler();
 800504c:	f7ff fe24 	bl	8004c98 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a20      	ldr	r2, [pc, #128]	; (80050d4 <HAL_SPI_MspInit+0x17c>)
 8005054:	659a      	str	r2, [r3, #88]	; 0x58
 8005056:	4b1f      	ldr	r3, [pc, #124]	; (80050d4 <HAL_SPI_MspInit+0x17c>)
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel3;
 800505c:	4b1f      	ldr	r3, [pc, #124]	; (80050dc <HAL_SPI_MspInit+0x184>)
 800505e:	4a20      	ldr	r2, [pc, #128]	; (80050e0 <HAL_SPI_MspInit+0x188>)
 8005060:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8005062:	4b1e      	ldr	r3, [pc, #120]	; (80050dc <HAL_SPI_MspInit+0x184>)
 8005064:	2213      	movs	r2, #19
 8005066:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005068:	4b1c      	ldr	r3, [pc, #112]	; (80050dc <HAL_SPI_MspInit+0x184>)
 800506a:	2210      	movs	r2, #16
 800506c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800506e:	4b1b      	ldr	r3, [pc, #108]	; (80050dc <HAL_SPI_MspInit+0x184>)
 8005070:	2200      	movs	r2, #0
 8005072:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005074:	4b19      	ldr	r3, [pc, #100]	; (80050dc <HAL_SPI_MspInit+0x184>)
 8005076:	2280      	movs	r2, #128	; 0x80
 8005078:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800507a:	4b18      	ldr	r3, [pc, #96]	; (80050dc <HAL_SPI_MspInit+0x184>)
 800507c:	2200      	movs	r2, #0
 800507e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005080:	4b16      	ldr	r3, [pc, #88]	; (80050dc <HAL_SPI_MspInit+0x184>)
 8005082:	2200      	movs	r2, #0
 8005084:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8005086:	4b15      	ldr	r3, [pc, #84]	; (80050dc <HAL_SPI_MspInit+0x184>)
 8005088:	2200      	movs	r2, #0
 800508a:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800508c:	4b13      	ldr	r3, [pc, #76]	; (80050dc <HAL_SPI_MspInit+0x184>)
 800508e:	2200      	movs	r2, #0
 8005090:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8005092:	4b12      	ldr	r3, [pc, #72]	; (80050dc <HAL_SPI_MspInit+0x184>)
 8005094:	0018      	movs	r0, r3
 8005096:	f000 fe7f 	bl	8005d98 <HAL_DMA_Init>
 800509a:	1e03      	subs	r3, r0, #0
 800509c:	d001      	beq.n	80050a2 <HAL_SPI_MspInit+0x14a>
    {
      Error_Handler();
 800509e:	f7ff fdfb 	bl	8004c98 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a0d      	ldr	r2, [pc, #52]	; (80050dc <HAL_SPI_MspInit+0x184>)
 80050a6:	655a      	str	r2, [r3, #84]	; 0x54
 80050a8:	4b0c      	ldr	r3, [pc, #48]	; (80050dc <HAL_SPI_MspInit+0x184>)
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80050ae:	2200      	movs	r2, #0
 80050b0:	2100      	movs	r1, #0
 80050b2:	201a      	movs	r0, #26
 80050b4:	f000 fe3e 	bl	8005d34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80050b8:	201a      	movs	r0, #26
 80050ba:	f000 fe50 	bl	8005d5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80050be:	46c0      	nop			; (mov r8, r8)
 80050c0:	46bd      	mov	sp, r7
 80050c2:	b00b      	add	sp, #44	; 0x2c
 80050c4:	bd90      	pop	{r4, r7, pc}
 80050c6:	46c0      	nop			; (mov r8, r8)
 80050c8:	40003800 	.word	0x40003800
 80050cc:	40021000 	.word	0x40021000
 80050d0:	50000400 	.word	0x50000400
 80050d4:	20000194 	.word	0x20000194
 80050d8:	4002001c 	.word	0x4002001c
 80050dc:	2000042c 	.word	0x2000042c
 80050e0:	40020030 	.word	0x40020030

080050e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a0a      	ldr	r2, [pc, #40]	; (800511c <HAL_TIM_Base_MspInit+0x38>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d10d      	bne.n	8005112 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80050f6:	4b0a      	ldr	r3, [pc, #40]	; (8005120 <HAL_TIM_Base_MspInit+0x3c>)
 80050f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050fa:	4b09      	ldr	r3, [pc, #36]	; (8005120 <HAL_TIM_Base_MspInit+0x3c>)
 80050fc:	2180      	movs	r1, #128	; 0x80
 80050fe:	0109      	lsls	r1, r1, #4
 8005100:	430a      	orrs	r2, r1
 8005102:	641a      	str	r2, [r3, #64]	; 0x40
 8005104:	4b06      	ldr	r3, [pc, #24]	; (8005120 <HAL_TIM_Base_MspInit+0x3c>)
 8005106:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005108:	2380      	movs	r3, #128	; 0x80
 800510a:	011b      	lsls	r3, r3, #4
 800510c:	4013      	ands	r3, r2
 800510e:	60fb      	str	r3, [r7, #12]
 8005110:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8005112:	46c0      	nop			; (mov r8, r8)
 8005114:	46bd      	mov	sp, r7
 8005116:	b004      	add	sp, #16
 8005118:	bd80      	pop	{r7, pc}
 800511a:	46c0      	nop			; (mov r8, r8)
 800511c:	40012c00 	.word	0x40012c00
 8005120:	40021000 	.word	0x40021000

08005124 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005124:	b590      	push	{r4, r7, lr}
 8005126:	b089      	sub	sp, #36	; 0x24
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800512c:	240c      	movs	r4, #12
 800512e:	193b      	adds	r3, r7, r4
 8005130:	0018      	movs	r0, r3
 8005132:	2314      	movs	r3, #20
 8005134:	001a      	movs	r2, r3
 8005136:	2100      	movs	r1, #0
 8005138:	f008 f95c 	bl	800d3f4 <memset>
  if(htim->Instance==TIM1)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a15      	ldr	r2, [pc, #84]	; (8005198 <HAL_TIM_MspPostInit+0x74>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d123      	bne.n	800518e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005146:	4b15      	ldr	r3, [pc, #84]	; (800519c <HAL_TIM_MspPostInit+0x78>)
 8005148:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800514a:	4b14      	ldr	r3, [pc, #80]	; (800519c <HAL_TIM_MspPostInit+0x78>)
 800514c:	2101      	movs	r1, #1
 800514e:	430a      	orrs	r2, r1
 8005150:	635a      	str	r2, [r3, #52]	; 0x34
 8005152:	4b12      	ldr	r3, [pc, #72]	; (800519c <HAL_TIM_MspPostInit+0x78>)
 8005154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005156:	2201      	movs	r2, #1
 8005158:	4013      	ands	r3, r2
 800515a:	60bb      	str	r3, [r7, #8]
 800515c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800515e:	193b      	adds	r3, r7, r4
 8005160:	2280      	movs	r2, #128	; 0x80
 8005162:	0052      	lsls	r2, r2, #1
 8005164:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005166:	0021      	movs	r1, r4
 8005168:	187b      	adds	r3, r7, r1
 800516a:	2202      	movs	r2, #2
 800516c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800516e:	187b      	adds	r3, r7, r1
 8005170:	2202      	movs	r2, #2
 8005172:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005174:	187b      	adds	r3, r7, r1
 8005176:	2203      	movs	r2, #3
 8005178:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800517a:	187b      	adds	r3, r7, r1
 800517c:	2202      	movs	r2, #2
 800517e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005180:	187a      	adds	r2, r7, r1
 8005182:	23a0      	movs	r3, #160	; 0xa0
 8005184:	05db      	lsls	r3, r3, #23
 8005186:	0011      	movs	r1, r2
 8005188:	0018      	movs	r0, r3
 800518a:	f001 f8cd 	bl	8006328 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800518e:	46c0      	nop			; (mov r8, r8)
 8005190:	46bd      	mov	sp, r7
 8005192:	b009      	add	sp, #36	; 0x24
 8005194:	bd90      	pop	{r4, r7, pc}
 8005196:	46c0      	nop			; (mov r8, r8)
 8005198:	40012c00 	.word	0x40012c00
 800519c:	40021000 	.word	0x40021000

080051a0 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80051a0:	b590      	push	{r4, r7, lr}
 80051a2:	b08b      	sub	sp, #44	; 0x2c
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051a8:	2414      	movs	r4, #20
 80051aa:	193b      	adds	r3, r7, r4
 80051ac:	0018      	movs	r0, r3
 80051ae:	2314      	movs	r3, #20
 80051b0:	001a      	movs	r2, r3
 80051b2:	2100      	movs	r1, #0
 80051b4:	f008 f91e 	bl	800d3f4 <memset>
  if(husart->Instance==USART3)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a45      	ldr	r2, [pc, #276]	; (80052d4 <HAL_USART_MspInit+0x134>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d000      	beq.n	80051c4 <HAL_USART_MspInit+0x24>
 80051c2:	e083      	b.n	80052cc <HAL_USART_MspInit+0x12c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80051c4:	4b44      	ldr	r3, [pc, #272]	; (80052d8 <HAL_USART_MspInit+0x138>)
 80051c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051c8:	4b43      	ldr	r3, [pc, #268]	; (80052d8 <HAL_USART_MspInit+0x138>)
 80051ca:	2180      	movs	r1, #128	; 0x80
 80051cc:	02c9      	lsls	r1, r1, #11
 80051ce:	430a      	orrs	r2, r1
 80051d0:	63da      	str	r2, [r3, #60]	; 0x3c
 80051d2:	4b41      	ldr	r3, [pc, #260]	; (80052d8 <HAL_USART_MspInit+0x138>)
 80051d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051d6:	2380      	movs	r3, #128	; 0x80
 80051d8:	02db      	lsls	r3, r3, #11
 80051da:	4013      	ands	r3, r2
 80051dc:	613b      	str	r3, [r7, #16]
 80051de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051e0:	4b3d      	ldr	r3, [pc, #244]	; (80052d8 <HAL_USART_MspInit+0x138>)
 80051e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051e4:	4b3c      	ldr	r3, [pc, #240]	; (80052d8 <HAL_USART_MspInit+0x138>)
 80051e6:	2101      	movs	r1, #1
 80051e8:	430a      	orrs	r2, r1
 80051ea:	635a      	str	r2, [r3, #52]	; 0x34
 80051ec:	4b3a      	ldr	r3, [pc, #232]	; (80052d8 <HAL_USART_MspInit+0x138>)
 80051ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051f0:	2201      	movs	r2, #1
 80051f2:	4013      	ands	r3, r2
 80051f4:	60fb      	str	r3, [r7, #12]
 80051f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051f8:	4b37      	ldr	r3, [pc, #220]	; (80052d8 <HAL_USART_MspInit+0x138>)
 80051fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051fc:	4b36      	ldr	r3, [pc, #216]	; (80052d8 <HAL_USART_MspInit+0x138>)
 80051fe:	2102      	movs	r1, #2
 8005200:	430a      	orrs	r2, r1
 8005202:	635a      	str	r2, [r3, #52]	; 0x34
 8005204:	4b34      	ldr	r3, [pc, #208]	; (80052d8 <HAL_USART_MspInit+0x138>)
 8005206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005208:	2202      	movs	r2, #2
 800520a:	4013      	ands	r3, r2
 800520c:	60bb      	str	r3, [r7, #8]
 800520e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA5     ------> USART3_TX
    PB0     ------> USART3_RX
    PB1     ------> USART3_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005210:	193b      	adds	r3, r7, r4
 8005212:	2220      	movs	r2, #32
 8005214:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005216:	193b      	adds	r3, r7, r4
 8005218:	2202      	movs	r2, #2
 800521a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800521c:	193b      	adds	r3, r7, r4
 800521e:	2200      	movs	r2, #0
 8005220:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005222:	193b      	adds	r3, r7, r4
 8005224:	2203      	movs	r2, #3
 8005226:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8005228:	193b      	adds	r3, r7, r4
 800522a:	2204      	movs	r2, #4
 800522c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800522e:	193a      	adds	r2, r7, r4
 8005230:	23a0      	movs	r3, #160	; 0xa0
 8005232:	05db      	lsls	r3, r3, #23
 8005234:	0011      	movs	r1, r2
 8005236:	0018      	movs	r0, r3
 8005238:	f001 f876 	bl	8006328 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800523c:	0021      	movs	r1, r4
 800523e:	187b      	adds	r3, r7, r1
 8005240:	2203      	movs	r2, #3
 8005242:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005244:	187b      	adds	r3, r7, r1
 8005246:	2202      	movs	r2, #2
 8005248:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800524a:	187b      	adds	r3, r7, r1
 800524c:	2200      	movs	r2, #0
 800524e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005250:	187b      	adds	r3, r7, r1
 8005252:	2203      	movs	r2, #3
 8005254:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8005256:	187b      	adds	r3, r7, r1
 8005258:	2204      	movs	r2, #4
 800525a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800525c:	187b      	adds	r3, r7, r1
 800525e:	4a1f      	ldr	r2, [pc, #124]	; (80052dc <HAL_USART_MspInit+0x13c>)
 8005260:	0019      	movs	r1, r3
 8005262:	0010      	movs	r0, r2
 8005264:	f001 f860 	bl	8006328 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel4;
 8005268:	4b1d      	ldr	r3, [pc, #116]	; (80052e0 <HAL_USART_MspInit+0x140>)
 800526a:	4a1e      	ldr	r2, [pc, #120]	; (80052e4 <HAL_USART_MspInit+0x144>)
 800526c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800526e:	4b1c      	ldr	r3, [pc, #112]	; (80052e0 <HAL_USART_MspInit+0x140>)
 8005270:	2237      	movs	r2, #55	; 0x37
 8005272:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005274:	4b1a      	ldr	r3, [pc, #104]	; (80052e0 <HAL_USART_MspInit+0x140>)
 8005276:	2210      	movs	r2, #16
 8005278:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800527a:	4b19      	ldr	r3, [pc, #100]	; (80052e0 <HAL_USART_MspInit+0x140>)
 800527c:	2200      	movs	r2, #0
 800527e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005280:	4b17      	ldr	r3, [pc, #92]	; (80052e0 <HAL_USART_MspInit+0x140>)
 8005282:	2280      	movs	r2, #128	; 0x80
 8005284:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005286:	4b16      	ldr	r3, [pc, #88]	; (80052e0 <HAL_USART_MspInit+0x140>)
 8005288:	2200      	movs	r2, #0
 800528a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800528c:	4b14      	ldr	r3, [pc, #80]	; (80052e0 <HAL_USART_MspInit+0x140>)
 800528e:	2200      	movs	r2, #0
 8005290:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8005292:	4b13      	ldr	r3, [pc, #76]	; (80052e0 <HAL_USART_MspInit+0x140>)
 8005294:	2200      	movs	r2, #0
 8005296:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005298:	4b11      	ldr	r3, [pc, #68]	; (80052e0 <HAL_USART_MspInit+0x140>)
 800529a:	2280      	movs	r2, #128	; 0x80
 800529c:	0192      	lsls	r2, r2, #6
 800529e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80052a0:	4b0f      	ldr	r3, [pc, #60]	; (80052e0 <HAL_USART_MspInit+0x140>)
 80052a2:	0018      	movs	r0, r3
 80052a4:	f000 fd78 	bl	8005d98 <HAL_DMA_Init>
 80052a8:	1e03      	subs	r3, r0, #0
 80052aa:	d001      	beq.n	80052b0 <HAL_USART_MspInit+0x110>
    {
      Error_Handler();
 80052ac:	f7ff fcf4 	bl	8004c98 <Error_Handler>
    }

    __HAL_LINKDMA(husart,hdmatx,hdma_usart3_tx);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a0b      	ldr	r2, [pc, #44]	; (80052e0 <HAL_USART_MspInit+0x140>)
 80052b4:	651a      	str	r2, [r3, #80]	; 0x50
 80052b6:	4b0a      	ldr	r3, [pc, #40]	; (80052e0 <HAL_USART_MspInit+0x140>)
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 80052bc:	2200      	movs	r2, #0
 80052be:	2100      	movs	r1, #0
 80052c0:	201d      	movs	r0, #29
 80052c2:	f000 fd37 	bl	8005d34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 80052c6:	201d      	movs	r0, #29
 80052c8:	f000 fd49 	bl	8005d5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80052cc:	46c0      	nop			; (mov r8, r8)
 80052ce:	46bd      	mov	sp, r7
 80052d0:	b00b      	add	sp, #44	; 0x2c
 80052d2:	bd90      	pop	{r4, r7, pc}
 80052d4:	40004800 	.word	0x40004800
 80052d8:	40021000 	.word	0x40021000
 80052dc:	50000400 	.word	0x50000400
 80052e0:	200001f8 	.word	0x200001f8
 80052e4:	40020044 	.word	0x40020044

080052e8 <LL_USART_IsActiveFlag_FE>:
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	69db      	ldr	r3, [r3, #28]
 80052f4:	2202      	movs	r2, #2
 80052f6:	4013      	ands	r3, r2
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d101      	bne.n	8005300 <LL_USART_IsActiveFlag_FE+0x18>
 80052fc:	2301      	movs	r3, #1
 80052fe:	e000      	b.n	8005302 <LL_USART_IsActiveFlag_FE+0x1a>
 8005300:	2300      	movs	r3, #0
}
 8005302:	0018      	movs	r0, r3
 8005304:	46bd      	mov	sp, r7
 8005306:	b002      	add	sp, #8
 8005308:	bd80      	pop	{r7, pc}

0800530a <LL_USART_IsActiveFlag_NE>:
{
 800530a:	b580      	push	{r7, lr}
 800530c:	b082      	sub	sp, #8
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	2204      	movs	r2, #4
 8005318:	4013      	ands	r3, r2
 800531a:	2b04      	cmp	r3, #4
 800531c:	d101      	bne.n	8005322 <LL_USART_IsActiveFlag_NE+0x18>
 800531e:	2301      	movs	r3, #1
 8005320:	e000      	b.n	8005324 <LL_USART_IsActiveFlag_NE+0x1a>
 8005322:	2300      	movs	r3, #0
}
 8005324:	0018      	movs	r0, r3
 8005326:	46bd      	mov	sp, r7
 8005328:	b002      	add	sp, #8
 800532a:	bd80      	pop	{r7, pc}

0800532c <LL_USART_IsActiveFlag_ORE>:
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	69db      	ldr	r3, [r3, #28]
 8005338:	2208      	movs	r2, #8
 800533a:	4013      	ands	r3, r2
 800533c:	2b08      	cmp	r3, #8
 800533e:	d101      	bne.n	8005344 <LL_USART_IsActiveFlag_ORE+0x18>
 8005340:	2301      	movs	r3, #1
 8005342:	e000      	b.n	8005346 <LL_USART_IsActiveFlag_ORE+0x1a>
 8005344:	2300      	movs	r3, #0
}
 8005346:	0018      	movs	r0, r3
 8005348:	46bd      	mov	sp, r7
 800534a:	b002      	add	sp, #8
 800534c:	bd80      	pop	{r7, pc}

0800534e <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 800534e:	b580      	push	{r7, lr}
 8005350:	b082      	sub	sp, #8
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	69db      	ldr	r3, [r3, #28]
 800535a:	2220      	movs	r2, #32
 800535c:	4013      	ands	r3, r2
 800535e:	2b20      	cmp	r3, #32
 8005360:	d101      	bne.n	8005366 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8005362:	2301      	movs	r3, #1
 8005364:	e000      	b.n	8005368 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8005366:	2300      	movs	r3, #0
}
 8005368:	0018      	movs	r0, r3
 800536a:	46bd      	mov	sp, r7
 800536c:	b002      	add	sp, #8
 800536e:	bd80      	pop	{r7, pc}

08005370 <LL_USART_IsEnabledIT_RXNE_RXFNE>:
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2220      	movs	r2, #32
 800537e:	4013      	ands	r3, r2
 8005380:	2b20      	cmp	r3, #32
 8005382:	d101      	bne.n	8005388 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 8005384:	2301      	movs	r3, #1
 8005386:	e000      	b.n	800538a <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 8005388:	2300      	movs	r3, #0
}
 800538a:	0018      	movs	r0, r3
 800538c:	46bd      	mov	sp, r7
 800538e:	b002      	add	sp, #8
 8005390:	bd80      	pop	{r7, pc}

08005392 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005392:	b580      	push	{r7, lr}
 8005394:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005396:	46c0      	nop			; (mov r8, r8)
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80053a0:	e7fe      	b.n	80053a0 <HardFault_Handler+0x4>

080053a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80053a6:	46c0      	nop			; (mov r8, r8)
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80053b0:	46c0      	nop			; (mov r8, r8)
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80053ba:	f000 f959 	bl	8005670 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80053be:	46c0      	nop			; (mov r8, r8)
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80053c8:	4b03      	ldr	r3, [pc, #12]	; (80053d8 <DMA1_Channel1_IRQHandler+0x14>)
 80053ca:	0018      	movs	r0, r3
 80053cc:	f000 fe5e 	bl	800608c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80053d0:	46c0      	nop			; (mov r8, r8)
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	46c0      	nop			; (mov r8, r8)
 80053d8:	2000048c 	.word	0x2000048c

080053dc <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

//	HAL_SPI_RxCpltCallback(&hspi2);
  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80053e0:	4b05      	ldr	r3, [pc, #20]	; (80053f8 <DMA1_Channel2_3_IRQHandler+0x1c>)
 80053e2:	0018      	movs	r0, r3
 80053e4:	f000 fe52 	bl	800608c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80053e8:	4b04      	ldr	r3, [pc, #16]	; (80053fc <DMA1_Channel2_3_IRQHandler+0x20>)
 80053ea:	0018      	movs	r0, r3
 80053ec:	f000 fe4e 	bl	800608c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80053f0:	46c0      	nop			; (mov r8, r8)
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	46c0      	nop			; (mov r8, r8)
 80053f8:	20000194 	.word	0x20000194
 80053fc:	2000042c 	.word	0x2000042c

08005400 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
//		GPIOA->ODR |= 1 << 11;	//set test 1
//		GPIOA->ODR &= ~(1 << 11);	//reset test 1
  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8005404:	4b03      	ldr	r3, [pc, #12]	; (8005414 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x14>)
 8005406:	0018      	movs	r0, r3
 8005408:	f000 fe40 	bl	800608c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 800540c:	46c0      	nop			; (mov r8, r8)
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	46c0      	nop			; (mov r8, r8)
 8005414:	200001f8 	.word	0x200001f8

08005418 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 800541c:	4b09      	ldr	r3, [pc, #36]	; (8005444 <I2C1_IRQHandler+0x2c>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	699a      	ldr	r2, [r3, #24]
 8005422:	23e0      	movs	r3, #224	; 0xe0
 8005424:	00db      	lsls	r3, r3, #3
 8005426:	4013      	ands	r3, r2
 8005428:	d004      	beq.n	8005434 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800542a:	4b06      	ldr	r3, [pc, #24]	; (8005444 <I2C1_IRQHandler+0x2c>)
 800542c:	0018      	movs	r0, r3
 800542e:	f001 fa97 	bl	8006960 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8005432:	e003      	b.n	800543c <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8005434:	4b03      	ldr	r3, [pc, #12]	; (8005444 <I2C1_IRQHandler+0x2c>)
 8005436:	0018      	movs	r0, r3
 8005438:	f001 fa78 	bl	800692c <HAL_I2C_EV_IRQHandler>
}
 800543c:	46c0      	nop			; (mov r8, r8)
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	46c0      	nop			; (mov r8, r8)
 8005444:	20000134 	.word	0x20000134

08005448 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s1);
 800544c:	4b03      	ldr	r3, [pc, #12]	; (800545c <SPI1_IRQHandler+0x14>)
 800544e:	0018      	movs	r0, r3
 8005450:	f002 fbfc 	bl	8007c4c <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8005454:	46c0      	nop			; (mov r8, r8)
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	46c0      	nop			; (mov r8, r8)
 800545c:	2000036c 	.word	0x2000036c

08005460 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8005464:	4b03      	ldr	r3, [pc, #12]	; (8005474 <SPI2_IRQHandler+0x14>)
 8005466:	0018      	movs	r0, r3
 8005468:	f004 ff66 	bl	800a338 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800546c:	46c0      	nop			; (mov r8, r8)
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	46c0      	nop			; (mov r8, r8)
 8005474:	200000b0 	.word	0x200000b0

08005478 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART2->ICR|=USART_ICR_ORECF;
 800547c:	4b25      	ldr	r3, [pc, #148]	; (8005514 <USART2_IRQHandler+0x9c>)
 800547e:	6a1a      	ldr	r2, [r3, #32]
 8005480:	4b24      	ldr	r3, [pc, #144]	; (8005514 <USART2_IRQHandler+0x9c>)
 8005482:	2108      	movs	r1, #8
 8005484:	430a      	orrs	r2, r1
 8005486:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_FECF;
 8005488:	4b22      	ldr	r3, [pc, #136]	; (8005514 <USART2_IRQHandler+0x9c>)
 800548a:	6a1a      	ldr	r2, [r3, #32]
 800548c:	4b21      	ldr	r3, [pc, #132]	; (8005514 <USART2_IRQHandler+0x9c>)
 800548e:	2102      	movs	r1, #2
 8005490:	430a      	orrs	r2, r1
 8005492:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_NECF;
 8005494:	4b1f      	ldr	r3, [pc, #124]	; (8005514 <USART2_IRQHandler+0x9c>)
 8005496:	6a1a      	ldr	r2, [r3, #32]
 8005498:	4b1e      	ldr	r3, [pc, #120]	; (8005514 <USART2_IRQHandler+0x9c>)
 800549a:	2104      	movs	r1, #4
 800549c:	430a      	orrs	r2, r1
 800549e:	621a      	str	r2, [r3, #32]
	if(LL_USART_IsActiveFlag_RXNE(USART2) && LL_USART_IsEnabledIT_RXNE(USART2))
 80054a0:	4b1c      	ldr	r3, [pc, #112]	; (8005514 <USART2_IRQHandler+0x9c>)
 80054a2:	0018      	movs	r0, r3
 80054a4:	f7ff ff53 	bl	800534e <LL_USART_IsActiveFlag_RXNE_RXFNE>
 80054a8:	1e03      	subs	r3, r0, #0
 80054aa:	d009      	beq.n	80054c0 <USART2_IRQHandler+0x48>
 80054ac:	4b19      	ldr	r3, [pc, #100]	; (8005514 <USART2_IRQHandler+0x9c>)
 80054ae:	0018      	movs	r0, r3
 80054b0:	f7ff ff5e 	bl	8005370 <LL_USART_IsEnabledIT_RXNE_RXFNE>
 80054b4:	1e03      	subs	r3, r0, #0
 80054b6:	d003      	beq.n	80054c0 <USART2_IRQHandler+0x48>
	  {
	    USART2_RX_Callback();// launching the receiving callback function //LL implentation
 80054b8:	f7fd fd0a 	bl	8002ed0 <USART2_RX_Callback>
	  {
 80054bc:	46c0      	nop			; (mov r8, r8)
	  }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80054be:	e025      	b.n	800550c <USART2_IRQHandler+0x94>
		  USART2->ICR|=USART_ICR_ORECF;
 80054c0:	4b14      	ldr	r3, [pc, #80]	; (8005514 <USART2_IRQHandler+0x9c>)
 80054c2:	6a1a      	ldr	r2, [r3, #32]
 80054c4:	4b13      	ldr	r3, [pc, #76]	; (8005514 <USART2_IRQHandler+0x9c>)
 80054c6:	2108      	movs	r1, #8
 80054c8:	430a      	orrs	r2, r1
 80054ca:	621a      	str	r2, [r3, #32]
	    if(LL_USART_IsActiveFlag_ORE(USART2))//clear the overrun flag by reading from RDR
 80054cc:	4b11      	ldr	r3, [pc, #68]	; (8005514 <USART2_IRQHandler+0x9c>)
 80054ce:	0018      	movs	r0, r3
 80054d0:	f7ff ff2c 	bl	800532c <LL_USART_IsActiveFlag_ORE>
 80054d4:	1e03      	subs	r3, r0, #0
 80054d6:	d008      	beq.n	80054ea <USART2_IRQHandler+0x72>
	    	USART2->ICR|=USART_ICR_ORECF;
 80054d8:	4b0e      	ldr	r3, [pc, #56]	; (8005514 <USART2_IRQHandler+0x9c>)
 80054da:	6a1a      	ldr	r2, [r3, #32]
 80054dc:	4b0d      	ldr	r3, [pc, #52]	; (8005514 <USART2_IRQHandler+0x9c>)
 80054de:	2108      	movs	r1, #8
 80054e0:	430a      	orrs	r2, r1
 80054e2:	621a      	str	r2, [r3, #32]
	      (void) USART2->RDR;
 80054e4:	4b0b      	ldr	r3, [pc, #44]	; (8005514 <USART2_IRQHandler+0x9c>)
 80054e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80054e8:	e010      	b.n	800550c <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_FE(USART2))//clear another flag by reading from RDR
 80054ea:	4b0a      	ldr	r3, [pc, #40]	; (8005514 <USART2_IRQHandler+0x9c>)
 80054ec:	0018      	movs	r0, r3
 80054ee:	f7ff fefb 	bl	80052e8 <LL_USART_IsActiveFlag_FE>
 80054f2:	1e03      	subs	r3, r0, #0
 80054f4:	d002      	beq.n	80054fc <USART2_IRQHandler+0x84>
	      (void) USART2->RDR;
 80054f6:	4b07      	ldr	r3, [pc, #28]	; (8005514 <USART2_IRQHandler+0x9c>)
 80054f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80054fa:	e007      	b.n	800550c <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_NE(USART2))//clear another flag by reading from RDR
 80054fc:	4b05      	ldr	r3, [pc, #20]	; (8005514 <USART2_IRQHandler+0x9c>)
 80054fe:	0018      	movs	r0, r3
 8005500:	f7ff ff03 	bl	800530a <LL_USART_IsActiveFlag_NE>
 8005504:	1e03      	subs	r3, r0, #0
 8005506:	d001      	beq.n	800550c <USART2_IRQHandler+0x94>
	      (void) USART2->RDR;
 8005508:	4b02      	ldr	r3, [pc, #8]	; (8005514 <USART2_IRQHandler+0x9c>)
 800550a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800550c:	46c0      	nop			; (mov r8, r8)
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	46c0      	nop			; (mov r8, r8)
 8005514:	40004400 	.word	0x40004400

08005518 <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_USART_IRQHandler(&husart3);
 800551c:	4b03      	ldr	r3, [pc, #12]	; (800552c <USART3_4_LPUART1_IRQHandler+0x14>)
 800551e:	0018      	movs	r0, r3
 8005520:	f006 fda6 	bl	800c070 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 8005524:	46c0      	nop			; (mov r8, r8)
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	46c0      	nop			; (mov r8, r8)
 800552c:	20000294 	.word	0x20000294

08005530 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005534:	4b03      	ldr	r3, [pc, #12]	; (8005544 <SystemInit+0x14>)
 8005536:	2280      	movs	r2, #128	; 0x80
 8005538:	0512      	lsls	r2, r2, #20
 800553a:	609a      	str	r2, [r3, #8]
#endif
}
 800553c:	46c0      	nop			; (mov r8, r8)
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	46c0      	nop			; (mov r8, r8)
 8005544:	e000ed00 	.word	0xe000ed00

08005548 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005548:	480d      	ldr	r0, [pc, #52]	; (8005580 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800554a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800554c:	f7ff fff0 	bl	8005530 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005550:	480c      	ldr	r0, [pc, #48]	; (8005584 <LoopForever+0x6>)
  ldr r1, =_edata
 8005552:	490d      	ldr	r1, [pc, #52]	; (8005588 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005554:	4a0d      	ldr	r2, [pc, #52]	; (800558c <LoopForever+0xe>)
  movs r3, #0
 8005556:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005558:	e002      	b.n	8005560 <LoopCopyDataInit>

0800555a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800555a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800555c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800555e:	3304      	adds	r3, #4

08005560 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005560:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005562:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005564:	d3f9      	bcc.n	800555a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005566:	4a0a      	ldr	r2, [pc, #40]	; (8005590 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005568:	4c0a      	ldr	r4, [pc, #40]	; (8005594 <LoopForever+0x16>)
  movs r3, #0
 800556a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800556c:	e001      	b.n	8005572 <LoopFillZerobss>

0800556e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800556e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005570:	3204      	adds	r2, #4

08005572 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005572:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005574:	d3fb      	bcc.n	800556e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005576:	f007 ff19 	bl	800d3ac <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800557a:	f7fc ff37 	bl	80023ec <main>

0800557e <LoopForever>:

LoopForever:
  b LoopForever
 800557e:	e7fe      	b.n	800557e <LoopForever>
  ldr   r0, =_estack
 8005580:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8005584:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005588:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 800558c:	08011890 	.word	0x08011890
  ldr r2, =_sbss
 8005590:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8005594:	20002510 	.word	0x20002510

08005598 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005598:	e7fe      	b.n	8005598 <ADC1_COMP_IRQHandler>
	...

0800559c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80055a2:	1dfb      	adds	r3, r7, #7
 80055a4:	2200      	movs	r2, #0
 80055a6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80055a8:	4b0b      	ldr	r3, [pc, #44]	; (80055d8 <HAL_Init+0x3c>)
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	4b0a      	ldr	r3, [pc, #40]	; (80055d8 <HAL_Init+0x3c>)
 80055ae:	2180      	movs	r1, #128	; 0x80
 80055b0:	0049      	lsls	r1, r1, #1
 80055b2:	430a      	orrs	r2, r1
 80055b4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80055b6:	2000      	movs	r0, #0
 80055b8:	f000 f810 	bl	80055dc <HAL_InitTick>
 80055bc:	1e03      	subs	r3, r0, #0
 80055be:	d003      	beq.n	80055c8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80055c0:	1dfb      	adds	r3, r7, #7
 80055c2:	2201      	movs	r2, #1
 80055c4:	701a      	strb	r2, [r3, #0]
 80055c6:	e001      	b.n	80055cc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80055c8:	f7ff fb6c 	bl	8004ca4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80055cc:	1dfb      	adds	r3, r7, #7
 80055ce:	781b      	ldrb	r3, [r3, #0]
}
 80055d0:	0018      	movs	r0, r3
 80055d2:	46bd      	mov	sp, r7
 80055d4:	b002      	add	sp, #8
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	40022000 	.word	0x40022000

080055dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80055dc:	b590      	push	{r4, r7, lr}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80055e4:	230f      	movs	r3, #15
 80055e6:	18fb      	adds	r3, r7, r3
 80055e8:	2200      	movs	r2, #0
 80055ea:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80055ec:	4b1d      	ldr	r3, [pc, #116]	; (8005664 <HAL_InitTick+0x88>)
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d02b      	beq.n	800564c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80055f4:	4b1c      	ldr	r3, [pc, #112]	; (8005668 <HAL_InitTick+0x8c>)
 80055f6:	681c      	ldr	r4, [r3, #0]
 80055f8:	4b1a      	ldr	r3, [pc, #104]	; (8005664 <HAL_InitTick+0x88>)
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	0019      	movs	r1, r3
 80055fe:	23fa      	movs	r3, #250	; 0xfa
 8005600:	0098      	lsls	r0, r3, #2
 8005602:	f7fa fd7f 	bl	8000104 <__udivsi3>
 8005606:	0003      	movs	r3, r0
 8005608:	0019      	movs	r1, r3
 800560a:	0020      	movs	r0, r4
 800560c:	f7fa fd7a 	bl	8000104 <__udivsi3>
 8005610:	0003      	movs	r3, r0
 8005612:	0018      	movs	r0, r3
 8005614:	f000 fbb3 	bl	8005d7e <HAL_SYSTICK_Config>
 8005618:	1e03      	subs	r3, r0, #0
 800561a:	d112      	bne.n	8005642 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b03      	cmp	r3, #3
 8005620:	d80a      	bhi.n	8005638 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005622:	6879      	ldr	r1, [r7, #4]
 8005624:	2301      	movs	r3, #1
 8005626:	425b      	negs	r3, r3
 8005628:	2200      	movs	r2, #0
 800562a:	0018      	movs	r0, r3
 800562c:	f000 fb82 	bl	8005d34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005630:	4b0e      	ldr	r3, [pc, #56]	; (800566c <HAL_InitTick+0x90>)
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	601a      	str	r2, [r3, #0]
 8005636:	e00d      	b.n	8005654 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8005638:	230f      	movs	r3, #15
 800563a:	18fb      	adds	r3, r7, r3
 800563c:	2201      	movs	r2, #1
 800563e:	701a      	strb	r2, [r3, #0]
 8005640:	e008      	b.n	8005654 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005642:	230f      	movs	r3, #15
 8005644:	18fb      	adds	r3, r7, r3
 8005646:	2201      	movs	r2, #1
 8005648:	701a      	strb	r2, [r3, #0]
 800564a:	e003      	b.n	8005654 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800564c:	230f      	movs	r3, #15
 800564e:	18fb      	adds	r3, r7, r3
 8005650:	2201      	movs	r2, #1
 8005652:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8005654:	230f      	movs	r3, #15
 8005656:	18fb      	adds	r3, r7, r3
 8005658:	781b      	ldrb	r3, [r3, #0]
}
 800565a:	0018      	movs	r0, r3
 800565c:	46bd      	mov	sp, r7
 800565e:	b005      	add	sp, #20
 8005660:	bd90      	pop	{r4, r7, pc}
 8005662:	46c0      	nop			; (mov r8, r8)
 8005664:	2000003c 	.word	0x2000003c
 8005668:	20000034 	.word	0x20000034
 800566c:	20000038 	.word	0x20000038

08005670 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005674:	4b05      	ldr	r3, [pc, #20]	; (800568c <HAL_IncTick+0x1c>)
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	001a      	movs	r2, r3
 800567a:	4b05      	ldr	r3, [pc, #20]	; (8005690 <HAL_IncTick+0x20>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	18d2      	adds	r2, r2, r3
 8005680:	4b03      	ldr	r3, [pc, #12]	; (8005690 <HAL_IncTick+0x20>)
 8005682:	601a      	str	r2, [r3, #0]
}
 8005684:	46c0      	nop			; (mov r8, r8)
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	46c0      	nop			; (mov r8, r8)
 800568c:	2000003c 	.word	0x2000003c
 8005690:	2000250c 	.word	0x2000250c

08005694 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	af00      	add	r7, sp, #0
  return uwTick;
 8005698:	4b02      	ldr	r3, [pc, #8]	; (80056a4 <HAL_GetTick+0x10>)
 800569a:	681b      	ldr	r3, [r3, #0]
}
 800569c:	0018      	movs	r0, r3
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	46c0      	nop			; (mov r8, r8)
 80056a4:	2000250c 	.word	0x2000250c

080056a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80056b0:	f7ff fff0 	bl	8005694 <HAL_GetTick>
 80056b4:	0003      	movs	r3, r0
 80056b6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	3301      	adds	r3, #1
 80056c0:	d005      	beq.n	80056ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80056c2:	4b0a      	ldr	r3, [pc, #40]	; (80056ec <HAL_Delay+0x44>)
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	001a      	movs	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	189b      	adds	r3, r3, r2
 80056cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80056ce:	46c0      	nop			; (mov r8, r8)
 80056d0:	f7ff ffe0 	bl	8005694 <HAL_GetTick>
 80056d4:	0002      	movs	r2, r0
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d8f7      	bhi.n	80056d0 <HAL_Delay+0x28>
  {
  }
}
 80056e0:	46c0      	nop			; (mov r8, r8)
 80056e2:	46c0      	nop			; (mov r8, r8)
 80056e4:	46bd      	mov	sp, r7
 80056e6:	b004      	add	sp, #16
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	46c0      	nop			; (mov r8, r8)
 80056ec:	2000003c 	.word	0x2000003c

080056f0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80056f8:	4b06      	ldr	r3, [pc, #24]	; (8005714 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a06      	ldr	r2, [pc, #24]	; (8005718 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80056fe:	4013      	ands	r3, r2
 8005700:	0019      	movs	r1, r3
 8005702:	4b04      	ldr	r3, [pc, #16]	; (8005714 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	430a      	orrs	r2, r1
 8005708:	601a      	str	r2, [r3, #0]
}
 800570a:	46c0      	nop			; (mov r8, r8)
 800570c:	46bd      	mov	sp, r7
 800570e:	b002      	add	sp, #8
 8005710:	bd80      	pop	{r7, pc}
 8005712:	46c0      	nop			; (mov r8, r8)
 8005714:	40010000 	.word	0x40010000
 8005718:	fffff9ff 	.word	0xfffff9ff

0800571c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8005724:	4a05      	ldr	r2, [pc, #20]	; (800573c <LL_EXTI_EnableIT_0_31+0x20>)
 8005726:	2380      	movs	r3, #128	; 0x80
 8005728:	58d2      	ldr	r2, [r2, r3]
 800572a:	4904      	ldr	r1, [pc, #16]	; (800573c <LL_EXTI_EnableIT_0_31+0x20>)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4313      	orrs	r3, r2
 8005730:	2280      	movs	r2, #128	; 0x80
 8005732:	508b      	str	r3, [r1, r2]
}
 8005734:	46c0      	nop			; (mov r8, r8)
 8005736:	46bd      	mov	sp, r7
 8005738:	b002      	add	sp, #8
 800573a:	bd80      	pop	{r7, pc}
 800573c:	40021800 	.word	0x40021800

08005740 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8005748:	4a06      	ldr	r2, [pc, #24]	; (8005764 <LL_EXTI_DisableIT_0_31+0x24>)
 800574a:	2380      	movs	r3, #128	; 0x80
 800574c:	58d3      	ldr	r3, [r2, r3]
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	43d2      	mvns	r2, r2
 8005752:	4904      	ldr	r1, [pc, #16]	; (8005764 <LL_EXTI_DisableIT_0_31+0x24>)
 8005754:	4013      	ands	r3, r2
 8005756:	2280      	movs	r2, #128	; 0x80
 8005758:	508b      	str	r3, [r1, r2]
}
 800575a:	46c0      	nop			; (mov r8, r8)
 800575c:	46bd      	mov	sp, r7
 800575e:	b002      	add	sp, #8
 8005760:	bd80      	pop	{r7, pc}
 8005762:	46c0      	nop			; (mov r8, r8)
 8005764:	40021800 	.word	0x40021800

08005768 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8005770:	4a05      	ldr	r2, [pc, #20]	; (8005788 <LL_EXTI_EnableEvent_0_31+0x20>)
 8005772:	2384      	movs	r3, #132	; 0x84
 8005774:	58d2      	ldr	r2, [r2, r3]
 8005776:	4904      	ldr	r1, [pc, #16]	; (8005788 <LL_EXTI_EnableEvent_0_31+0x20>)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4313      	orrs	r3, r2
 800577c:	2284      	movs	r2, #132	; 0x84
 800577e:	508b      	str	r3, [r1, r2]

}
 8005780:	46c0      	nop			; (mov r8, r8)
 8005782:	46bd      	mov	sp, r7
 8005784:	b002      	add	sp, #8
 8005786:	bd80      	pop	{r7, pc}
 8005788:	40021800 	.word	0x40021800

0800578c <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8005794:	4a06      	ldr	r2, [pc, #24]	; (80057b0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8005796:	2384      	movs	r3, #132	; 0x84
 8005798:	58d3      	ldr	r3, [r2, r3]
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	43d2      	mvns	r2, r2
 800579e:	4904      	ldr	r1, [pc, #16]	; (80057b0 <LL_EXTI_DisableEvent_0_31+0x24>)
 80057a0:	4013      	ands	r3, r2
 80057a2:	2284      	movs	r2, #132	; 0x84
 80057a4:	508b      	str	r3, [r1, r2]
}
 80057a6:	46c0      	nop			; (mov r8, r8)
 80057a8:	46bd      	mov	sp, r7
 80057aa:	b002      	add	sp, #8
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	46c0      	nop			; (mov r8, r8)
 80057b0:	40021800 	.word	0x40021800

080057b4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80057bc:	4b04      	ldr	r3, [pc, #16]	; (80057d0 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 80057be:	6819      	ldr	r1, [r3, #0]
 80057c0:	4b03      	ldr	r3, [pc, #12]	; (80057d0 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	430a      	orrs	r2, r1
 80057c6:	601a      	str	r2, [r3, #0]

}
 80057c8:	46c0      	nop			; (mov r8, r8)
 80057ca:	46bd      	mov	sp, r7
 80057cc:	b002      	add	sp, #8
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	40021800 	.word	0x40021800

080057d4 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80057dc:	4b05      	ldr	r3, [pc, #20]	; (80057f4 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	43d9      	mvns	r1, r3
 80057e4:	4b03      	ldr	r3, [pc, #12]	; (80057f4 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80057e6:	400a      	ands	r2, r1
 80057e8:	601a      	str	r2, [r3, #0]

}
 80057ea:	46c0      	nop			; (mov r8, r8)
 80057ec:	46bd      	mov	sp, r7
 80057ee:	b002      	add	sp, #8
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	46c0      	nop			; (mov r8, r8)
 80057f4:	40021800 	.word	0x40021800

080057f8 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8005800:	4b04      	ldr	r3, [pc, #16]	; (8005814 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8005802:	6859      	ldr	r1, [r3, #4]
 8005804:	4b03      	ldr	r3, [pc, #12]	; (8005814 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	430a      	orrs	r2, r1
 800580a:	605a      	str	r2, [r3, #4]
}
 800580c:	46c0      	nop			; (mov r8, r8)
 800580e:	46bd      	mov	sp, r7
 8005810:	b002      	add	sp, #8
 8005812:	bd80      	pop	{r7, pc}
 8005814:	40021800 	.word	0x40021800

08005818 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8005820:	4b05      	ldr	r3, [pc, #20]	; (8005838 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8005822:	685a      	ldr	r2, [r3, #4]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	43d9      	mvns	r1, r3
 8005828:	4b03      	ldr	r3, [pc, #12]	; (8005838 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800582a:	400a      	ands	r2, r1
 800582c:	605a      	str	r2, [r3, #4]
}
 800582e:	46c0      	nop			; (mov r8, r8)
 8005830:	46bd      	mov	sp, r7
 8005832:	b002      	add	sp, #8
 8005834:	bd80      	pop	{r7, pc}
 8005836:	46c0      	nop			; (mov r8, r8)
 8005838:	40021800 	.word	0x40021800

0800583c <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 8005844:	4b03      	ldr	r3, [pc, #12]	; (8005854 <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	611a      	str	r2, [r3, #16]
}
 800584a:	46c0      	nop			; (mov r8, r8)
 800584c:	46bd      	mov	sp, r7
 800584e:	b002      	add	sp, #8
 8005850:	bd80      	pop	{r7, pc}
 8005852:	46c0      	nop			; (mov r8, r8)
 8005854:	40021800 	.word	0x40021800

08005858 <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 8005860:	4b03      	ldr	r3, [pc, #12]	; (8005870 <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	60da      	str	r2, [r3, #12]
}
 8005866:	46c0      	nop			; (mov r8, r8)
 8005868:	46bd      	mov	sp, r7
 800586a:	b002      	add	sp, #8
 800586c:	bd80      	pop	{r7, pc}
 800586e:	46c0      	nop			; (mov r8, r8)
 8005870:	40021800 	.word	0x40021800

08005874 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b088      	sub	sp, #32
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800587c:	2300      	movs	r3, #0
 800587e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005880:	211f      	movs	r1, #31
 8005882:	187b      	adds	r3, r7, r1
 8005884:	2200      	movs	r2, #0
 8005886:	701a      	strb	r2, [r3, #0]
  __IO uint32_t * comp_common_odd;
  __IO uint32_t * comp_common_even;
#endif

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d103      	bne.n	8005896 <HAL_COMP_Init+0x22>
  {
    status = HAL_ERROR;
 800588e:	187b      	adds	r3, r7, r1
 8005890:	2201      	movs	r2, #1
 8005892:	701a      	strb	r2, [r3, #0]
 8005894:	e13d      	b.n	8005b12 <HAL_COMP_Init+0x29e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	0fdb      	lsrs	r3, r3, #31
 800589e:	07da      	lsls	r2, r3, #31
 80058a0:	2380      	movs	r3, #128	; 0x80
 80058a2:	061b      	lsls	r3, r3, #24
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d104      	bne.n	80058b2 <HAL_COMP_Init+0x3e>
  {
    status = HAL_ERROR;
 80058a8:	231f      	movs	r3, #31
 80058aa:	18fb      	adds	r3, r7, r3
 80058ac:	2201      	movs	r2, #1
 80058ae:	701a      	strb	r2, [r3, #0]
 80058b0:	e12f      	b.n	8005b12 <HAL_COMP_Init+0x29e>
    if(hcomp->Init.WindowMode != COMP_WINDOWMODE_DISABLE)
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2229      	movs	r2, #41	; 0x29
 80058b6:	5c9b      	ldrb	r3, [r3, r2]
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d10a      	bne.n	80058d4 <HAL_COMP_Init+0x60>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2228      	movs	r2, #40	; 0x28
 80058c2:	2100      	movs	r1, #0
 80058c4:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	0018      	movs	r0, r3
 80058d0:	f7ff fa10 	bl	8004cf4 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2230      	movs	r2, #48	; 0x30
 80058dc:	4013      	ands	r3, r2
 80058de:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a1b      	ldr	r3, [r3, #32]
 80058ee:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (  hcomp->Init.InputMinus
 8005900:	4313      	orrs	r3, r2
 8005902:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a85      	ldr	r2, [pc, #532]	; (8005b20 <HAL_COMP_Init+0x2ac>)
 800590c:	4013      	ands	r3, r2
 800590e:	0019      	movs	r1, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	430a      	orrs	r2, r1
 8005918:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(*comp_common_odd, COMP_CSR_WINOUT);
        CLEAR_BIT(*comp_common_even, COMP_CSR_WINOUT);
        break;
    }
#else
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685a      	ldr	r2, [r3, #4]
 800591e:	2380      	movs	r3, #128	; 0x80
 8005920:	011b      	lsls	r3, r3, #4
 8005922:	429a      	cmp	r2, r3
 8005924:	d10d      	bne.n	8005942 <HAL_COMP_Init+0xce>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8005926:	4b7f      	ldr	r3, [pc, #508]	; (8005b24 <HAL_COMP_Init+0x2b0>)
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	4b7e      	ldr	r3, [pc, #504]	; (8005b24 <HAL_COMP_Init+0x2b0>)
 800592c:	497e      	ldr	r1, [pc, #504]	; (8005b28 <HAL_COMP_Init+0x2b4>)
 800592e:	400a      	ands	r2, r1
 8005930:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8005932:	4b7c      	ldr	r3, [pc, #496]	; (8005b24 <HAL_COMP_Init+0x2b0>)
 8005934:	685a      	ldr	r2, [r3, #4]
 8005936:	4b7b      	ldr	r3, [pc, #492]	; (8005b24 <HAL_COMP_Init+0x2b0>)
 8005938:	2180      	movs	r1, #128	; 0x80
 800593a:	0109      	lsls	r1, r1, #4
 800593c:	430a      	orrs	r2, r1
 800593e:	605a      	str	r2, [r3, #4]
 8005940:	e01f      	b.n	8005982 <HAL_COMP_Init+0x10e>
    }
    else if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685a      	ldr	r2, [r3, #4]
 8005946:	23c0      	movs	r3, #192	; 0xc0
 8005948:	015b      	lsls	r3, r3, #5
 800594a:	429a      	cmp	r2, r3
 800594c:	d10d      	bne.n	800596a <HAL_COMP_Init+0xf6>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800594e:	4b75      	ldr	r3, [pc, #468]	; (8005b24 <HAL_COMP_Init+0x2b0>)
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	4b74      	ldr	r3, [pc, #464]	; (8005b24 <HAL_COMP_Init+0x2b0>)
 8005954:	2180      	movs	r1, #128	; 0x80
 8005956:	0109      	lsls	r1, r1, #4
 8005958:	430a      	orrs	r2, r1
 800595a:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800595c:	4b71      	ldr	r3, [pc, #452]	; (8005b24 <HAL_COMP_Init+0x2b0>)
 800595e:	685a      	ldr	r2, [r3, #4]
 8005960:	4b70      	ldr	r3, [pc, #448]	; (8005b24 <HAL_COMP_Init+0x2b0>)
 8005962:	4971      	ldr	r1, [pc, #452]	; (8005b28 <HAL_COMP_Init+0x2b4>)
 8005964:	400a      	ands	r2, r1
 8005966:	605a      	str	r2, [r3, #4]
 8005968:	e00b      	b.n	8005982 <HAL_COMP_Init+0x10e>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800596a:	4b6e      	ldr	r3, [pc, #440]	; (8005b24 <HAL_COMP_Init+0x2b0>)
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	4b6d      	ldr	r3, [pc, #436]	; (8005b24 <HAL_COMP_Init+0x2b0>)
 8005970:	496d      	ldr	r1, [pc, #436]	; (8005b28 <HAL_COMP_Init+0x2b4>)
 8005972:	400a      	ands	r2, r1
 8005974:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8005976:	4b6b      	ldr	r3, [pc, #428]	; (8005b24 <HAL_COMP_Init+0x2b0>)
 8005978:	685a      	ldr	r2, [r3, #4]
 800597a:	4b6a      	ldr	r3, [pc, #424]	; (8005b24 <HAL_COMP_Init+0x2b0>)
 800597c:	496a      	ldr	r1, [pc, #424]	; (8005b28 <HAL_COMP_Init+0x2b4>)
 800597e:	400a      	ands	r2, r1
 8005980:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	22a0      	movs	r2, #160	; 0xa0
 8005988:	01d2      	lsls	r2, r2, #7
 800598a:	4293      	cmp	r3, r2
 800598c:	d017      	beq.n	80059be <HAL_COMP_Init+0x14a>
 800598e:	22a0      	movs	r2, #160	; 0xa0
 8005990:	01d2      	lsls	r2, r2, #7
 8005992:	4293      	cmp	r3, r2
 8005994:	d830      	bhi.n	80059f8 <HAL_COMP_Init+0x184>
 8005996:	2b01      	cmp	r3, #1
 8005998:	d01f      	beq.n	80059da <HAL_COMP_Init+0x166>
 800599a:	2280      	movs	r2, #128	; 0x80
 800599c:	01d2      	lsls	r2, r2, #7
 800599e:	4293      	cmp	r3, r2
 80059a0:	d12a      	bne.n	80059f8 <HAL_COMP_Init+0x184>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80059a2:	4b60      	ldr	r3, [pc, #384]	; (8005b24 <HAL_COMP_Init+0x2b0>)
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	4b5f      	ldr	r3, [pc, #380]	; (8005b24 <HAL_COMP_Init+0x2b0>)
 80059a8:	2180      	movs	r1, #128	; 0x80
 80059aa:	01c9      	lsls	r1, r1, #7
 80059ac:	430a      	orrs	r2, r1
 80059ae:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80059b0:	4b5c      	ldr	r3, [pc, #368]	; (8005b24 <HAL_COMP_Init+0x2b0>)
 80059b2:	685a      	ldr	r2, [r3, #4]
 80059b4:	4b5b      	ldr	r3, [pc, #364]	; (8005b24 <HAL_COMP_Init+0x2b0>)
 80059b6:	495d      	ldr	r1, [pc, #372]	; (8005b2c <HAL_COMP_Init+0x2b8>)
 80059b8:	400a      	ands	r2, r1
 80059ba:	605a      	str	r2, [r3, #4]
        break;
 80059bc:	e029      	b.n	8005a12 <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80059be:	4b59      	ldr	r3, [pc, #356]	; (8005b24 <HAL_COMP_Init+0x2b0>)
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	4b58      	ldr	r3, [pc, #352]	; (8005b24 <HAL_COMP_Init+0x2b0>)
 80059c4:	4959      	ldr	r1, [pc, #356]	; (8005b2c <HAL_COMP_Init+0x2b8>)
 80059c6:	400a      	ands	r2, r1
 80059c8:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80059ca:	4b56      	ldr	r3, [pc, #344]	; (8005b24 <HAL_COMP_Init+0x2b0>)
 80059cc:	685a      	ldr	r2, [r3, #4]
 80059ce:	4b55      	ldr	r3, [pc, #340]	; (8005b24 <HAL_COMP_Init+0x2b0>)
 80059d0:	2180      	movs	r1, #128	; 0x80
 80059d2:	01c9      	lsls	r1, r1, #7
 80059d4:	430a      	orrs	r2, r1
 80059d6:	605a      	str	r2, [r3, #4]
        break;
 80059d8:	e01b      	b.n	8005a12 <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80059da:	4b52      	ldr	r3, [pc, #328]	; (8005b24 <HAL_COMP_Init+0x2b0>)
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	4b51      	ldr	r3, [pc, #324]	; (8005b24 <HAL_COMP_Init+0x2b0>)
 80059e0:	2180      	movs	r1, #128	; 0x80
 80059e2:	01c9      	lsls	r1, r1, #7
 80059e4:	430a      	orrs	r2, r1
 80059e6:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80059e8:	4b4e      	ldr	r3, [pc, #312]	; (8005b24 <HAL_COMP_Init+0x2b0>)
 80059ea:	685a      	ldr	r2, [r3, #4]
 80059ec:	4b4d      	ldr	r3, [pc, #308]	; (8005b24 <HAL_COMP_Init+0x2b0>)
 80059ee:	2180      	movs	r1, #128	; 0x80
 80059f0:	01c9      	lsls	r1, r1, #7
 80059f2:	430a      	orrs	r2, r1
 80059f4:	605a      	str	r2, [r3, #4]
        break;
 80059f6:	e00c      	b.n	8005a12 <HAL_COMP_Init+0x19e>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80059f8:	4b4a      	ldr	r3, [pc, #296]	; (8005b24 <HAL_COMP_Init+0x2b0>)
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	4b49      	ldr	r3, [pc, #292]	; (8005b24 <HAL_COMP_Init+0x2b0>)
 80059fe:	494b      	ldr	r1, [pc, #300]	; (8005b2c <HAL_COMP_Init+0x2b8>)
 8005a00:	400a      	ands	r2, r1
 8005a02:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8005a04:	4b47      	ldr	r3, [pc, #284]	; (8005b24 <HAL_COMP_Init+0x2b0>)
 8005a06:	685a      	ldr	r2, [r3, #4]
 8005a08:	4b46      	ldr	r3, [pc, #280]	; (8005b24 <HAL_COMP_Init+0x2b0>)
 8005a0a:	4948      	ldr	r1, [pc, #288]	; (8005b2c <HAL_COMP_Init+0x2b8>)
 8005a0c:	400a      	ands	r2, r1
 8005a0e:	605a      	str	r2, [r3, #4]
        break;
 8005a10:	46c0      	nop			; (mov r8, r8)
    }
#endif

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2230      	movs	r2, #48	; 0x30
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	d016      	beq.n	8005a4c <HAL_COMP_Init+0x1d8>
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d113      	bne.n	8005a4c <HAL_COMP_Init+0x1d8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005a24:	4b42      	ldr	r3, [pc, #264]	; (8005b30 <HAL_COMP_Init+0x2bc>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4942      	ldr	r1, [pc, #264]	; (8005b34 <HAL_COMP_Init+0x2c0>)
 8005a2a:	0018      	movs	r0, r3
 8005a2c:	f7fa fb6a 	bl	8000104 <__udivsi3>
 8005a30:	0003      	movs	r3, r0
 8005a32:	001a      	movs	r2, r3
 8005a34:	0013      	movs	r3, r2
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	189b      	adds	r3, r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8005a3e:	e002      	b.n	8005a46 <HAL_COMP_Init+0x1d2>
      {
        wait_loop_index--;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	3b01      	subs	r3, #1
 8005a44:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1f9      	bne.n	8005a40 <HAL_COMP_Init+0x1cc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a34      	ldr	r2, [pc, #208]	; (8005b24 <HAL_COMP_Init+0x2b0>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d102      	bne.n	8005a5c <HAL_COMP_Init+0x1e8>
 8005a56:	2380      	movs	r3, #128	; 0x80
 8005a58:	029b      	lsls	r3, r3, #10
 8005a5a:	e001      	b.n	8005a60 <HAL_COMP_Init+0x1ec>
 8005a5c:	2380      	movs	r3, #128	; 0x80
 8005a5e:	02db      	lsls	r3, r3, #11
 8005a60:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a66:	2203      	movs	r2, #3
 8005a68:	4013      	ands	r3, r2
 8005a6a:	d040      	beq.n	8005aee <HAL_COMP_Init+0x27a>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a70:	2210      	movs	r2, #16
 8005a72:	4013      	ands	r3, r2
 8005a74:	d004      	beq.n	8005a80 <HAL_COMP_Init+0x20c>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	0018      	movs	r0, r3
 8005a7a:	f7ff fe9b 	bl	80057b4 <LL_EXTI_EnableRisingTrig_0_31>
 8005a7e:	e003      	b.n	8005a88 <HAL_COMP_Init+0x214>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	0018      	movs	r0, r3
 8005a84:	f7ff fea6 	bl	80057d4 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8c:	2220      	movs	r2, #32
 8005a8e:	4013      	ands	r3, r2
 8005a90:	d004      	beq.n	8005a9c <HAL_COMP_Init+0x228>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	0018      	movs	r0, r3
 8005a96:	f7ff feaf 	bl	80057f8 <LL_EXTI_EnableFallingTrig_0_31>
 8005a9a:	e003      	b.n	8005aa4 <HAL_COMP_Init+0x230>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	0018      	movs	r0, r3
 8005aa0:	f7ff feba 	bl	8005818 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	0018      	movs	r0, r3
 8005aa8:	f7ff fed6 	bl	8005858 <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	0018      	movs	r0, r3
 8005ab0:	f7ff fec4 	bl	800583c <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab8:	2202      	movs	r2, #2
 8005aba:	4013      	ands	r3, r2
 8005abc:	d004      	beq.n	8005ac8 <HAL_COMP_Init+0x254>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	0018      	movs	r0, r3
 8005ac2:	f7ff fe51 	bl	8005768 <LL_EXTI_EnableEvent_0_31>
 8005ac6:	e003      	b.n	8005ad0 <HAL_COMP_Init+0x25c>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	0018      	movs	r0, r3
 8005acc:	f7ff fe5e 	bl	800578c <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	d004      	beq.n	8005ae4 <HAL_COMP_Init+0x270>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	0018      	movs	r0, r3
 8005ade:	f7ff fe1d 	bl	800571c <LL_EXTI_EnableIT_0_31>
 8005ae2:	e00c      	b.n	8005afe <HAL_COMP_Init+0x28a>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	0018      	movs	r0, r3
 8005ae8:	f7ff fe2a 	bl	8005740 <LL_EXTI_DisableIT_0_31>
 8005aec:	e007      	b.n	8005afe <HAL_COMP_Init+0x28a>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	0018      	movs	r0, r3
 8005af2:	f7ff fe4b 	bl	800578c <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	0018      	movs	r0, r3
 8005afa:	f7ff fe21 	bl	8005740 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2229      	movs	r2, #41	; 0x29
 8005b02:	5c9b      	ldrb	r3, [r3, r2]
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d103      	bne.n	8005b12 <HAL_COMP_Init+0x29e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2229      	movs	r2, #41	; 0x29
 8005b0e:	2101      	movs	r1, #1
 8005b10:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8005b12:	231f      	movs	r3, #31
 8005b14:	18fb      	adds	r3, r7, r3
 8005b16:	781b      	ldrb	r3, [r3, #0]
}
 8005b18:	0018      	movs	r0, r3
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	b008      	add	sp, #32
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	fe00740f 	.word	0xfe00740f
 8005b24:	40010200 	.word	0x40010200
 8005b28:	fffff7ff 	.word	0xfffff7ff
 8005b2c:	ffffbfff 	.word	0xffffbfff
 8005b30:	20000034 	.word	0x20000034
 8005b34:	00030d40 	.word	0x00030d40

08005b38 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8005b40:	2300      	movs	r3, #0
 8005b42:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005b44:	210f      	movs	r1, #15
 8005b46:	187b      	adds	r3, r7, r1
 8005b48:	2200      	movs	r2, #0
 8005b4a:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d103      	bne.n	8005b5a <HAL_COMP_Start+0x22>
  {
    status = HAL_ERROR;
 8005b52:	187b      	adds	r3, r7, r1
 8005b54:	2201      	movs	r2, #1
 8005b56:	701a      	strb	r2, [r3, #0]
 8005b58:	e034      	b.n	8005bc4 <HAL_COMP_Start+0x8c>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	0fdb      	lsrs	r3, r3, #31
 8005b62:	07da      	lsls	r2, r3, #31
 8005b64:	2380      	movs	r3, #128	; 0x80
 8005b66:	061b      	lsls	r3, r3, #24
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d104      	bne.n	8005b76 <HAL_COMP_Start+0x3e>
  {
    status = HAL_ERROR;
 8005b6c:	230f      	movs	r3, #15
 8005b6e:	18fb      	adds	r3, r7, r3
 8005b70:	2201      	movs	r2, #1
 8005b72:	701a      	strb	r2, [r3, #0]
 8005b74:	e026      	b.n	8005bc4 <HAL_COMP_Start+0x8c>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2229      	movs	r2, #41	; 0x29
 8005b7a:	5c9b      	ldrb	r3, [r3, r2]
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d11c      	bne.n	8005bbc <HAL_COMP_Start+0x84>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2101      	movs	r1, #1
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2229      	movs	r2, #41	; 0x29
 8005b96:	2102      	movs	r1, #2
 8005b98:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005b9a:	4b0e      	ldr	r3, [pc, #56]	; (8005bd4 <HAL_COMP_Start+0x9c>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	490e      	ldr	r1, [pc, #56]	; (8005bd8 <HAL_COMP_Start+0xa0>)
 8005ba0:	0018      	movs	r0, r3
 8005ba2:	f7fa faaf 	bl	8000104 <__udivsi3>
 8005ba6:	0003      	movs	r3, r0
 8005ba8:	00db      	lsls	r3, r3, #3
 8005baa:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8005bac:	e002      	b.n	8005bb4 <HAL_COMP_Start+0x7c>
      {
        wait_loop_index--;
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1f9      	bne.n	8005bae <HAL_COMP_Start+0x76>
 8005bba:	e003      	b.n	8005bc4 <HAL_COMP_Start+0x8c>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005bbc:	230f      	movs	r3, #15
 8005bbe:	18fb      	adds	r3, r7, r3
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8005bc4:	230f      	movs	r3, #15
 8005bc6:	18fb      	adds	r3, r7, r3
 8005bc8:	781b      	ldrb	r3, [r3, #0]
}
 8005bca:	0018      	movs	r0, r3
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	b004      	add	sp, #16
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	46c0      	nop			; (mov r8, r8)
 8005bd4:	20000034 	.word	0x20000034
 8005bd8:	00030d40 	.word	0x00030d40

08005bdc <__NVIC_EnableIRQ>:
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	0002      	movs	r2, r0
 8005be4:	1dfb      	adds	r3, r7, #7
 8005be6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005be8:	1dfb      	adds	r3, r7, #7
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	2b7f      	cmp	r3, #127	; 0x7f
 8005bee:	d809      	bhi.n	8005c04 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005bf0:	1dfb      	adds	r3, r7, #7
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	001a      	movs	r2, r3
 8005bf6:	231f      	movs	r3, #31
 8005bf8:	401a      	ands	r2, r3
 8005bfa:	4b04      	ldr	r3, [pc, #16]	; (8005c0c <__NVIC_EnableIRQ+0x30>)
 8005bfc:	2101      	movs	r1, #1
 8005bfe:	4091      	lsls	r1, r2
 8005c00:	000a      	movs	r2, r1
 8005c02:	601a      	str	r2, [r3, #0]
}
 8005c04:	46c0      	nop			; (mov r8, r8)
 8005c06:	46bd      	mov	sp, r7
 8005c08:	b002      	add	sp, #8
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	e000e100 	.word	0xe000e100

08005c10 <__NVIC_SetPriority>:
{
 8005c10:	b590      	push	{r4, r7, lr}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	0002      	movs	r2, r0
 8005c18:	6039      	str	r1, [r7, #0]
 8005c1a:	1dfb      	adds	r3, r7, #7
 8005c1c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005c1e:	1dfb      	adds	r3, r7, #7
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	2b7f      	cmp	r3, #127	; 0x7f
 8005c24:	d828      	bhi.n	8005c78 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005c26:	4a2f      	ldr	r2, [pc, #188]	; (8005ce4 <__NVIC_SetPriority+0xd4>)
 8005c28:	1dfb      	adds	r3, r7, #7
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	b25b      	sxtb	r3, r3
 8005c2e:	089b      	lsrs	r3, r3, #2
 8005c30:	33c0      	adds	r3, #192	; 0xc0
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	589b      	ldr	r3, [r3, r2]
 8005c36:	1dfa      	adds	r2, r7, #7
 8005c38:	7812      	ldrb	r2, [r2, #0]
 8005c3a:	0011      	movs	r1, r2
 8005c3c:	2203      	movs	r2, #3
 8005c3e:	400a      	ands	r2, r1
 8005c40:	00d2      	lsls	r2, r2, #3
 8005c42:	21ff      	movs	r1, #255	; 0xff
 8005c44:	4091      	lsls	r1, r2
 8005c46:	000a      	movs	r2, r1
 8005c48:	43d2      	mvns	r2, r2
 8005c4a:	401a      	ands	r2, r3
 8005c4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	019b      	lsls	r3, r3, #6
 8005c52:	22ff      	movs	r2, #255	; 0xff
 8005c54:	401a      	ands	r2, r3
 8005c56:	1dfb      	adds	r3, r7, #7
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	0018      	movs	r0, r3
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	4003      	ands	r3, r0
 8005c60:	00db      	lsls	r3, r3, #3
 8005c62:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005c64:	481f      	ldr	r0, [pc, #124]	; (8005ce4 <__NVIC_SetPriority+0xd4>)
 8005c66:	1dfb      	adds	r3, r7, #7
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	b25b      	sxtb	r3, r3
 8005c6c:	089b      	lsrs	r3, r3, #2
 8005c6e:	430a      	orrs	r2, r1
 8005c70:	33c0      	adds	r3, #192	; 0xc0
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	501a      	str	r2, [r3, r0]
}
 8005c76:	e031      	b.n	8005cdc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005c78:	4a1b      	ldr	r2, [pc, #108]	; (8005ce8 <__NVIC_SetPriority+0xd8>)
 8005c7a:	1dfb      	adds	r3, r7, #7
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	0019      	movs	r1, r3
 8005c80:	230f      	movs	r3, #15
 8005c82:	400b      	ands	r3, r1
 8005c84:	3b08      	subs	r3, #8
 8005c86:	089b      	lsrs	r3, r3, #2
 8005c88:	3306      	adds	r3, #6
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	18d3      	adds	r3, r2, r3
 8005c8e:	3304      	adds	r3, #4
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	1dfa      	adds	r2, r7, #7
 8005c94:	7812      	ldrb	r2, [r2, #0]
 8005c96:	0011      	movs	r1, r2
 8005c98:	2203      	movs	r2, #3
 8005c9a:	400a      	ands	r2, r1
 8005c9c:	00d2      	lsls	r2, r2, #3
 8005c9e:	21ff      	movs	r1, #255	; 0xff
 8005ca0:	4091      	lsls	r1, r2
 8005ca2:	000a      	movs	r2, r1
 8005ca4:	43d2      	mvns	r2, r2
 8005ca6:	401a      	ands	r2, r3
 8005ca8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	019b      	lsls	r3, r3, #6
 8005cae:	22ff      	movs	r2, #255	; 0xff
 8005cb0:	401a      	ands	r2, r3
 8005cb2:	1dfb      	adds	r3, r7, #7
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	0018      	movs	r0, r3
 8005cb8:	2303      	movs	r3, #3
 8005cba:	4003      	ands	r3, r0
 8005cbc:	00db      	lsls	r3, r3, #3
 8005cbe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005cc0:	4809      	ldr	r0, [pc, #36]	; (8005ce8 <__NVIC_SetPriority+0xd8>)
 8005cc2:	1dfb      	adds	r3, r7, #7
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	001c      	movs	r4, r3
 8005cc8:	230f      	movs	r3, #15
 8005cca:	4023      	ands	r3, r4
 8005ccc:	3b08      	subs	r3, #8
 8005cce:	089b      	lsrs	r3, r3, #2
 8005cd0:	430a      	orrs	r2, r1
 8005cd2:	3306      	adds	r3, #6
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	18c3      	adds	r3, r0, r3
 8005cd8:	3304      	adds	r3, #4
 8005cda:	601a      	str	r2, [r3, #0]
}
 8005cdc:	46c0      	nop			; (mov r8, r8)
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	b003      	add	sp, #12
 8005ce2:	bd90      	pop	{r4, r7, pc}
 8005ce4:	e000e100 	.word	0xe000e100
 8005ce8:	e000ed00 	.word	0xe000ed00

08005cec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b082      	sub	sp, #8
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	1e5a      	subs	r2, r3, #1
 8005cf8:	2380      	movs	r3, #128	; 0x80
 8005cfa:	045b      	lsls	r3, r3, #17
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d301      	bcc.n	8005d04 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005d00:	2301      	movs	r3, #1
 8005d02:	e010      	b.n	8005d26 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005d04:	4b0a      	ldr	r3, [pc, #40]	; (8005d30 <SysTick_Config+0x44>)
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	3a01      	subs	r2, #1
 8005d0a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	425b      	negs	r3, r3
 8005d10:	2103      	movs	r1, #3
 8005d12:	0018      	movs	r0, r3
 8005d14:	f7ff ff7c 	bl	8005c10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005d18:	4b05      	ldr	r3, [pc, #20]	; (8005d30 <SysTick_Config+0x44>)
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005d1e:	4b04      	ldr	r3, [pc, #16]	; (8005d30 <SysTick_Config+0x44>)
 8005d20:	2207      	movs	r2, #7
 8005d22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	0018      	movs	r0, r3
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	b002      	add	sp, #8
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	46c0      	nop			; (mov r8, r8)
 8005d30:	e000e010 	.word	0xe000e010

08005d34 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60b9      	str	r1, [r7, #8]
 8005d3c:	607a      	str	r2, [r7, #4]
 8005d3e:	210f      	movs	r1, #15
 8005d40:	187b      	adds	r3, r7, r1
 8005d42:	1c02      	adds	r2, r0, #0
 8005d44:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	187b      	adds	r3, r7, r1
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	b25b      	sxtb	r3, r3
 8005d4e:	0011      	movs	r1, r2
 8005d50:	0018      	movs	r0, r3
 8005d52:	f7ff ff5d 	bl	8005c10 <__NVIC_SetPriority>
}
 8005d56:	46c0      	nop			; (mov r8, r8)
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	b004      	add	sp, #16
 8005d5c:	bd80      	pop	{r7, pc}

08005d5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d5e:	b580      	push	{r7, lr}
 8005d60:	b082      	sub	sp, #8
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	0002      	movs	r2, r0
 8005d66:	1dfb      	adds	r3, r7, #7
 8005d68:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d6a:	1dfb      	adds	r3, r7, #7
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	b25b      	sxtb	r3, r3
 8005d70:	0018      	movs	r0, r3
 8005d72:	f7ff ff33 	bl	8005bdc <__NVIC_EnableIRQ>
}
 8005d76:	46c0      	nop			; (mov r8, r8)
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	b002      	add	sp, #8
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b082      	sub	sp, #8
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	0018      	movs	r0, r3
 8005d8a:	f7ff ffaf 	bl	8005cec <SysTick_Config>
 8005d8e:	0003      	movs	r3, r0
}
 8005d90:	0018      	movs	r0, r3
 8005d92:	46bd      	mov	sp, r7
 8005d94:	b002      	add	sp, #8
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d101      	bne.n	8005daa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e077      	b.n	8005e9a <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a3d      	ldr	r2, [pc, #244]	; (8005ea4 <HAL_DMA_Init+0x10c>)
 8005db0:	4694      	mov	ip, r2
 8005db2:	4463      	add	r3, ip
 8005db4:	2114      	movs	r1, #20
 8005db6:	0018      	movs	r0, r3
 8005db8:	f7fa f9a4 	bl	8000104 <__udivsi3>
 8005dbc:	0003      	movs	r3, r0
 8005dbe:	009a      	lsls	r2, r3, #2
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2225      	movs	r2, #37	; 0x25
 8005dc8:	2102      	movs	r1, #2
 8005dca:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4934      	ldr	r1, [pc, #208]	; (8005ea8 <HAL_DMA_Init+0x110>)
 8005dd8:	400a      	ands	r2, r1
 8005dda:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	6819      	ldr	r1, [r3, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	689a      	ldr	r2, [r3, #8]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	431a      	orrs	r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	431a      	orrs	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	431a      	orrs	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	699b      	ldr	r3, [r3, #24]
 8005dfc:	431a      	orrs	r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	69db      	ldr	r3, [r3, #28]
 8005e02:	431a      	orrs	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a1b      	ldr	r3, [r3, #32]
 8005e08:	431a      	orrs	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	0018      	movs	r0, r3
 8005e16:	f000 fa37 	bl	8006288 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	689a      	ldr	r2, [r3, #8]
 8005e1e:	2380      	movs	r3, #128	; 0x80
 8005e20:	01db      	lsls	r3, r3, #7
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d102      	bne.n	8005e2c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e34:	213f      	movs	r1, #63	; 0x3f
 8005e36:	400a      	ands	r2, r1
 8005e38:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005e42:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d011      	beq.n	8005e70 <HAL_DMA_Init+0xd8>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	2b04      	cmp	r3, #4
 8005e52:	d80d      	bhi.n	8005e70 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	0018      	movs	r0, r3
 8005e58:	f000 fa42 	bl	80062e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e60:	2200      	movs	r2, #0
 8005e62:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005e6c:	605a      	str	r2, [r3, #4]
 8005e6e:	e008      	b.n	8005e82 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2225      	movs	r2, #37	; 0x25
 8005e8c:	2101      	movs	r1, #1
 8005e8e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2224      	movs	r2, #36	; 0x24
 8005e94:	2100      	movs	r1, #0
 8005e96:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	0018      	movs	r0, r3
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	b002      	add	sp, #8
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	46c0      	nop			; (mov r8, r8)
 8005ea4:	bffdfff8 	.word	0xbffdfff8
 8005ea8:	ffff800f 	.word	0xffff800f

08005eac <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b086      	sub	sp, #24
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
 8005eb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005eba:	2317      	movs	r3, #23
 8005ebc:	18fb      	adds	r3, r7, r3
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2224      	movs	r2, #36	; 0x24
 8005ec6:	5c9b      	ldrb	r3, [r3, r2]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d101      	bne.n	8005ed0 <HAL_DMA_Start_IT+0x24>
 8005ecc:	2302      	movs	r3, #2
 8005ece:	e06f      	b.n	8005fb0 <HAL_DMA_Start_IT+0x104>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2224      	movs	r2, #36	; 0x24
 8005ed4:	2101      	movs	r1, #1
 8005ed6:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2225      	movs	r2, #37	; 0x25
 8005edc:	5c9b      	ldrb	r3, [r3, r2]
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d157      	bne.n	8005f94 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2225      	movs	r2, #37	; 0x25
 8005ee8:	2102      	movs	r1, #2
 8005eea:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2101      	movs	r1, #1
 8005efe:	438a      	bics	r2, r1
 8005f00:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	68b9      	ldr	r1, [r7, #8]
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f000 f97d 	bl	8006208 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d008      	beq.n	8005f28 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	210e      	movs	r1, #14
 8005f22:	430a      	orrs	r2, r1
 8005f24:	601a      	str	r2, [r3, #0]
 8005f26:	e00f      	b.n	8005f48 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2104      	movs	r1, #4
 8005f34:	438a      	bics	r2, r1
 8005f36:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	210a      	movs	r1, #10
 8005f44:	430a      	orrs	r2, r1
 8005f46:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	2380      	movs	r3, #128	; 0x80
 8005f50:	025b      	lsls	r3, r3, #9
 8005f52:	4013      	ands	r3, r2
 8005f54:	d008      	beq.n	8005f68 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f60:	2180      	movs	r1, #128	; 0x80
 8005f62:	0049      	lsls	r1, r1, #1
 8005f64:	430a      	orrs	r2, r1
 8005f66:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d008      	beq.n	8005f82 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f7a:	2180      	movs	r1, #128	; 0x80
 8005f7c:	0049      	lsls	r1, r1, #1
 8005f7e:	430a      	orrs	r2, r1
 8005f80:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2101      	movs	r1, #1
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	601a      	str	r2, [r3, #0]
 8005f92:	e00a      	b.n	8005faa <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2280      	movs	r2, #128	; 0x80
 8005f98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2224      	movs	r2, #36	; 0x24
 8005f9e:	2100      	movs	r1, #0
 8005fa0:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8005fa2:	2317      	movs	r3, #23
 8005fa4:	18fb      	adds	r3, r7, r3
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8005faa:	2317      	movs	r3, #23
 8005fac:	18fb      	adds	r3, r7, r3
 8005fae:	781b      	ldrb	r3, [r3, #0]
}
 8005fb0:	0018      	movs	r0, r3
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	b006      	add	sp, #24
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fc0:	210f      	movs	r1, #15
 8005fc2:	187b      	adds	r3, r7, r1
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2225      	movs	r2, #37	; 0x25
 8005fcc:	5c9b      	ldrb	r3, [r3, r2]
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d006      	beq.n	8005fe2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2204      	movs	r2, #4
 8005fd8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005fda:	187b      	adds	r3, r7, r1
 8005fdc:	2201      	movs	r2, #1
 8005fde:	701a      	strb	r2, [r3, #0]
 8005fe0:	e049      	b.n	8006076 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	210e      	movs	r1, #14
 8005fee:	438a      	bics	r2, r1
 8005ff0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2101      	movs	r1, #1
 8005ffe:	438a      	bics	r2, r1
 8006000:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800600c:	491d      	ldr	r1, [pc, #116]	; (8006084 <HAL_DMA_Abort_IT+0xcc>)
 800600e:	400a      	ands	r2, r1
 8006010:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8006012:	4b1d      	ldr	r3, [pc, #116]	; (8006088 <HAL_DMA_Abort_IT+0xd0>)
 8006014:	6859      	ldr	r1, [r3, #4]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601a:	221c      	movs	r2, #28
 800601c:	4013      	ands	r3, r2
 800601e:	2201      	movs	r2, #1
 8006020:	409a      	lsls	r2, r3
 8006022:	4b19      	ldr	r3, [pc, #100]	; (8006088 <HAL_DMA_Abort_IT+0xd0>)
 8006024:	430a      	orrs	r2, r1
 8006026:	605a      	str	r2, [r3, #4]
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006030:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00c      	beq.n	8006054 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006044:	490f      	ldr	r1, [pc, #60]	; (8006084 <HAL_DMA_Abort_IT+0xcc>)
 8006046:	400a      	ands	r2, r1
 8006048:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006052:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2225      	movs	r2, #37	; 0x25
 8006058:	2101      	movs	r1, #1
 800605a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2224      	movs	r2, #36	; 0x24
 8006060:	2100      	movs	r1, #0
 8006062:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006068:	2b00      	cmp	r3, #0
 800606a:	d004      	beq.n	8006076 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	0010      	movs	r0, r2
 8006074:	4798      	blx	r3
    }
  }
  return status;
 8006076:	230f      	movs	r3, #15
 8006078:	18fb      	adds	r3, r7, r3
 800607a:	781b      	ldrb	r3, [r3, #0]
}
 800607c:	0018      	movs	r0, r3
 800607e:	46bd      	mov	sp, r7
 8006080:	b004      	add	sp, #16
 8006082:	bd80      	pop	{r7, pc}
 8006084:	fffffeff 	.word	0xfffffeff
 8006088:	40020000 	.word	0x40020000

0800608c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8006094:	4b55      	ldr	r3, [pc, #340]	; (80061ec <HAL_DMA_IRQHandler+0x160>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t source_it = hdma->Instance->CCR;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a6:	221c      	movs	r2, #28
 80060a8:	4013      	ands	r3, r2
 80060aa:	2204      	movs	r2, #4
 80060ac:	409a      	lsls	r2, r3
 80060ae:	0013      	movs	r3, r2
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	4013      	ands	r3, r2
 80060b4:	d027      	beq.n	8006106 <HAL_DMA_IRQHandler+0x7a>
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	2204      	movs	r2, #4
 80060ba:	4013      	ands	r3, r2
 80060bc:	d023      	beq.n	8006106 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2220      	movs	r2, #32
 80060c6:	4013      	ands	r3, r2
 80060c8:	d107      	bne.n	80060da <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2104      	movs	r1, #4
 80060d6:	438a      	bics	r2, r1
 80060d8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80060da:	4b44      	ldr	r3, [pc, #272]	; (80061ec <HAL_DMA_IRQHandler+0x160>)
 80060dc:	6859      	ldr	r1, [r3, #4]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e2:	221c      	movs	r2, #28
 80060e4:	4013      	ands	r3, r2
 80060e6:	2204      	movs	r2, #4
 80060e8:	409a      	lsls	r2, r3
 80060ea:	4b40      	ldr	r3, [pc, #256]	; (80061ec <HAL_DMA_IRQHandler+0x160>)
 80060ec:	430a      	orrs	r2, r1
 80060ee:	605a      	str	r2, [r3, #4]
#endif

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d100      	bne.n	80060fa <HAL_DMA_IRQHandler+0x6e>
 80060f8:	e073      	b.n	80061e2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	0010      	movs	r0, r2
 8006102:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8006104:	e06d      	b.n	80061e2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610a:	221c      	movs	r2, #28
 800610c:	4013      	ands	r3, r2
 800610e:	2202      	movs	r2, #2
 8006110:	409a      	lsls	r2, r3
 8006112:	0013      	movs	r3, r2
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	4013      	ands	r3, r2
 8006118:	d02e      	beq.n	8006178 <HAL_DMA_IRQHandler+0xec>
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	2202      	movs	r2, #2
 800611e:	4013      	ands	r3, r2
 8006120:	d02a      	beq.n	8006178 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2220      	movs	r2, #32
 800612a:	4013      	ands	r3, r2
 800612c:	d10b      	bne.n	8006146 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	210a      	movs	r1, #10
 800613a:	438a      	bics	r2, r1
 800613c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2225      	movs	r2, #37	; 0x25
 8006142:	2101      	movs	r1, #1
 8006144:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8006146:	4b29      	ldr	r3, [pc, #164]	; (80061ec <HAL_DMA_IRQHandler+0x160>)
 8006148:	6859      	ldr	r1, [r3, #4]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614e:	221c      	movs	r2, #28
 8006150:	4013      	ands	r3, r2
 8006152:	2202      	movs	r2, #2
 8006154:	409a      	lsls	r2, r3
 8006156:	4b25      	ldr	r3, [pc, #148]	; (80061ec <HAL_DMA_IRQHandler+0x160>)
 8006158:	430a      	orrs	r2, r1
 800615a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2224      	movs	r2, #36	; 0x24
 8006160:	2100      	movs	r1, #0
 8006162:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006168:	2b00      	cmp	r3, #0
 800616a:	d03a      	beq.n	80061e2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	0010      	movs	r0, r2
 8006174:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8006176:	e034      	b.n	80061e2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617c:	221c      	movs	r2, #28
 800617e:	4013      	ands	r3, r2
 8006180:	2208      	movs	r2, #8
 8006182:	409a      	lsls	r2, r3
 8006184:	0013      	movs	r3, r2
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	4013      	ands	r3, r2
 800618a:	d02b      	beq.n	80061e4 <HAL_DMA_IRQHandler+0x158>
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	2208      	movs	r2, #8
 8006190:	4013      	ands	r3, r2
 8006192:	d027      	beq.n	80061e4 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	210e      	movs	r1, #14
 80061a0:	438a      	bics	r2, r1
 80061a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80061a4:	4b11      	ldr	r3, [pc, #68]	; (80061ec <HAL_DMA_IRQHandler+0x160>)
 80061a6:	6859      	ldr	r1, [r3, #4]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ac:	221c      	movs	r2, #28
 80061ae:	4013      	ands	r3, r2
 80061b0:	2201      	movs	r2, #1
 80061b2:	409a      	lsls	r2, r3
 80061b4:	4b0d      	ldr	r3, [pc, #52]	; (80061ec <HAL_DMA_IRQHandler+0x160>)
 80061b6:	430a      	orrs	r2, r1
 80061b8:	605a      	str	r2, [r3, #4]
#endif

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2201      	movs	r2, #1
 80061be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2225      	movs	r2, #37	; 0x25
 80061c4:	2101      	movs	r1, #1
 80061c6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2224      	movs	r2, #36	; 0x24
 80061cc:	2100      	movs	r1, #0
 80061ce:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d005      	beq.n	80061e4 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	0010      	movs	r0, r2
 80061e0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80061e2:	46c0      	nop			; (mov r8, r8)
 80061e4:	46c0      	nop			; (mov r8, r8)
}
 80061e6:	46bd      	mov	sp, r7
 80061e8:	b004      	add	sp, #16
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	40020000 	.word	0x40020000

080061f0 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2225      	movs	r2, #37	; 0x25
 80061fc:	5c9b      	ldrb	r3, [r3, r2]
 80061fe:	b2db      	uxtb	r3, r3
}
 8006200:	0018      	movs	r0, r3
 8006202:	46bd      	mov	sp, r7
 8006204:	b002      	add	sp, #8
 8006206:	bd80      	pop	{r7, pc}

08006208 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
 8006214:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800621e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006224:	2b00      	cmp	r3, #0
 8006226:	d004      	beq.n	8006232 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006230:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8006232:	4b14      	ldr	r3, [pc, #80]	; (8006284 <DMA_SetConfig+0x7c>)
 8006234:	6859      	ldr	r1, [r3, #4]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623a:	221c      	movs	r2, #28
 800623c:	4013      	ands	r3, r2
 800623e:	2201      	movs	r2, #1
 8006240:	409a      	lsls	r2, r3
 8006242:	4b10      	ldr	r3, [pc, #64]	; (8006284 <DMA_SetConfig+0x7c>)
 8006244:	430a      	orrs	r2, r1
 8006246:	605a      	str	r2, [r3, #4]
#endif

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	683a      	ldr	r2, [r7, #0]
 800624e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	2b10      	cmp	r3, #16
 8006256:	d108      	bne.n	800626a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006268:	e007      	b.n	800627a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68ba      	ldr	r2, [r7, #8]
 8006270:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	60da      	str	r2, [r3, #12]
}
 800627a:	46c0      	nop			; (mov r8, r8)
 800627c:	46bd      	mov	sp, r7
 800627e:	b004      	add	sp, #16
 8006280:	bd80      	pop	{r7, pc}
 8006282:	46c0      	nop			; (mov r8, r8)
 8006284:	40020000 	.word	0x40020000

08006288 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006294:	089b      	lsrs	r3, r3, #2
 8006296:	4a10      	ldr	r2, [pc, #64]	; (80062d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8006298:	4694      	mov	ip, r2
 800629a:	4463      	add	r3, ip
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	001a      	movs	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	001a      	movs	r2, r3
 80062aa:	23ff      	movs	r3, #255	; 0xff
 80062ac:	4013      	ands	r3, r2
 80062ae:	3b08      	subs	r3, #8
 80062b0:	2114      	movs	r1, #20
 80062b2:	0018      	movs	r0, r3
 80062b4:	f7f9 ff26 	bl	8000104 <__udivsi3>
 80062b8:	0003      	movs	r3, r0
 80062ba:	60fb      	str	r3, [r7, #12]
#endif

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4a07      	ldr	r2, [pc, #28]	; (80062dc <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80062c0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	221f      	movs	r2, #31
 80062c6:	4013      	ands	r3, r2
 80062c8:	2201      	movs	r2, #1
 80062ca:	409a      	lsls	r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80062d0:	46c0      	nop			; (mov r8, r8)
 80062d2:	46bd      	mov	sp, r7
 80062d4:	b004      	add	sp, #16
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	10008200 	.word	0x10008200
 80062dc:	40020880 	.word	0x40020880

080062e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	223f      	movs	r2, #63	; 0x3f
 80062ee:	4013      	ands	r3, r2
 80062f0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	4a0a      	ldr	r2, [pc, #40]	; (8006320 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80062f6:	4694      	mov	ip, r2
 80062f8:	4463      	add	r3, ip
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	001a      	movs	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a07      	ldr	r2, [pc, #28]	; (8006324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006306:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	3b01      	subs	r3, #1
 800630c:	2203      	movs	r2, #3
 800630e:	4013      	ands	r3, r2
 8006310:	2201      	movs	r2, #1
 8006312:	409a      	lsls	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	659a      	str	r2, [r3, #88]	; 0x58
}
 8006318:	46c0      	nop			; (mov r8, r8)
 800631a:	46bd      	mov	sp, r7
 800631c:	b004      	add	sp, #16
 800631e:	bd80      	pop	{r7, pc}
 8006320:	1000823f 	.word	0x1000823f
 8006324:	40020940 	.word	0x40020940

08006328 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b086      	sub	sp, #24
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006332:	2300      	movs	r3, #0
 8006334:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006336:	e147      	b.n	80065c8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2101      	movs	r1, #1
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	4091      	lsls	r1, r2
 8006342:	000a      	movs	r2, r1
 8006344:	4013      	ands	r3, r2
 8006346:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d100      	bne.n	8006350 <HAL_GPIO_Init+0x28>
 800634e:	e138      	b.n	80065c2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	2b01      	cmp	r3, #1
 8006356:	d00b      	beq.n	8006370 <HAL_GPIO_Init+0x48>
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	2b02      	cmp	r3, #2
 800635e:	d007      	beq.n	8006370 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006364:	2b11      	cmp	r3, #17
 8006366:	d003      	beq.n	8006370 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	2b12      	cmp	r3, #18
 800636e:	d130      	bne.n	80063d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	005b      	lsls	r3, r3, #1
 800637a:	2203      	movs	r2, #3
 800637c:	409a      	lsls	r2, r3
 800637e:	0013      	movs	r3, r2
 8006380:	43da      	mvns	r2, r3
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	4013      	ands	r3, r2
 8006386:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	68da      	ldr	r2, [r3, #12]
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	005b      	lsls	r3, r3, #1
 8006390:	409a      	lsls	r2, r3
 8006392:	0013      	movs	r3, r2
 8006394:	693a      	ldr	r2, [r7, #16]
 8006396:	4313      	orrs	r3, r2
 8006398:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	693a      	ldr	r2, [r7, #16]
 800639e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80063a6:	2201      	movs	r2, #1
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	409a      	lsls	r2, r3
 80063ac:	0013      	movs	r3, r2
 80063ae:	43da      	mvns	r2, r3
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	4013      	ands	r3, r2
 80063b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	091b      	lsrs	r3, r3, #4
 80063bc:	2201      	movs	r2, #1
 80063be:	401a      	ands	r2, r3
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	409a      	lsls	r2, r3
 80063c4:	0013      	movs	r3, r2
 80063c6:	693a      	ldr	r2, [r7, #16]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	693a      	ldr	r2, [r7, #16]
 80063d0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	005b      	lsls	r3, r3, #1
 80063dc:	2203      	movs	r2, #3
 80063de:	409a      	lsls	r2, r3
 80063e0:	0013      	movs	r3, r2
 80063e2:	43da      	mvns	r2, r3
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	4013      	ands	r3, r2
 80063e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	689a      	ldr	r2, [r3, #8]
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	005b      	lsls	r3, r3, #1
 80063f2:	409a      	lsls	r2, r3
 80063f4:	0013      	movs	r3, r2
 80063f6:	693a      	ldr	r2, [r7, #16]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	693a      	ldr	r2, [r7, #16]
 8006400:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	2b02      	cmp	r3, #2
 8006408:	d003      	beq.n	8006412 <HAL_GPIO_Init+0xea>
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	2b12      	cmp	r3, #18
 8006410:	d123      	bne.n	800645a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	08da      	lsrs	r2, r3, #3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	3208      	adds	r2, #8
 800641a:	0092      	lsls	r2, r2, #2
 800641c:	58d3      	ldr	r3, [r2, r3]
 800641e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	2207      	movs	r2, #7
 8006424:	4013      	ands	r3, r2
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	220f      	movs	r2, #15
 800642a:	409a      	lsls	r2, r3
 800642c:	0013      	movs	r3, r2
 800642e:	43da      	mvns	r2, r3
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	4013      	ands	r3, r2
 8006434:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	691a      	ldr	r2, [r3, #16]
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	2107      	movs	r1, #7
 800643e:	400b      	ands	r3, r1
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	409a      	lsls	r2, r3
 8006444:	0013      	movs	r3, r2
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	4313      	orrs	r3, r2
 800644a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	08da      	lsrs	r2, r3, #3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	3208      	adds	r2, #8
 8006454:	0092      	lsls	r2, r2, #2
 8006456:	6939      	ldr	r1, [r7, #16]
 8006458:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	005b      	lsls	r3, r3, #1
 8006464:	2203      	movs	r2, #3
 8006466:	409a      	lsls	r2, r3
 8006468:	0013      	movs	r3, r2
 800646a:	43da      	mvns	r2, r3
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	4013      	ands	r3, r2
 8006470:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	2203      	movs	r2, #3
 8006478:	401a      	ands	r2, r3
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	005b      	lsls	r3, r3, #1
 800647e:	409a      	lsls	r2, r3
 8006480:	0013      	movs	r3, r2
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	4313      	orrs	r3, r2
 8006486:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	693a      	ldr	r2, [r7, #16]
 800648c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	685a      	ldr	r2, [r3, #4]
 8006492:	2380      	movs	r3, #128	; 0x80
 8006494:	055b      	lsls	r3, r3, #21
 8006496:	4013      	ands	r3, r2
 8006498:	d100      	bne.n	800649c <HAL_GPIO_Init+0x174>
 800649a:	e092      	b.n	80065c2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800649c:	4a50      	ldr	r2, [pc, #320]	; (80065e0 <HAL_GPIO_Init+0x2b8>)
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	089b      	lsrs	r3, r3, #2
 80064a2:	3318      	adds	r3, #24
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	589b      	ldr	r3, [r3, r2]
 80064a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	2203      	movs	r2, #3
 80064ae:	4013      	ands	r3, r2
 80064b0:	00db      	lsls	r3, r3, #3
 80064b2:	220f      	movs	r2, #15
 80064b4:	409a      	lsls	r2, r3
 80064b6:	0013      	movs	r3, r2
 80064b8:	43da      	mvns	r2, r3
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	4013      	ands	r3, r2
 80064be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	23a0      	movs	r3, #160	; 0xa0
 80064c4:	05db      	lsls	r3, r3, #23
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d013      	beq.n	80064f2 <HAL_GPIO_Init+0x1ca>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a45      	ldr	r2, [pc, #276]	; (80065e4 <HAL_GPIO_Init+0x2bc>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d00d      	beq.n	80064ee <HAL_GPIO_Init+0x1c6>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a44      	ldr	r2, [pc, #272]	; (80065e8 <HAL_GPIO_Init+0x2c0>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d007      	beq.n	80064ea <HAL_GPIO_Init+0x1c2>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a43      	ldr	r2, [pc, #268]	; (80065ec <HAL_GPIO_Init+0x2c4>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d101      	bne.n	80064e6 <HAL_GPIO_Init+0x1be>
 80064e2:	2303      	movs	r3, #3
 80064e4:	e006      	b.n	80064f4 <HAL_GPIO_Init+0x1cc>
 80064e6:	2305      	movs	r3, #5
 80064e8:	e004      	b.n	80064f4 <HAL_GPIO_Init+0x1cc>
 80064ea:	2302      	movs	r3, #2
 80064ec:	e002      	b.n	80064f4 <HAL_GPIO_Init+0x1cc>
 80064ee:	2301      	movs	r3, #1
 80064f0:	e000      	b.n	80064f4 <HAL_GPIO_Init+0x1cc>
 80064f2:	2300      	movs	r3, #0
 80064f4:	697a      	ldr	r2, [r7, #20]
 80064f6:	2103      	movs	r1, #3
 80064f8:	400a      	ands	r2, r1
 80064fa:	00d2      	lsls	r2, r2, #3
 80064fc:	4093      	lsls	r3, r2
 80064fe:	693a      	ldr	r2, [r7, #16]
 8006500:	4313      	orrs	r3, r2
 8006502:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8006504:	4936      	ldr	r1, [pc, #216]	; (80065e0 <HAL_GPIO_Init+0x2b8>)
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	089b      	lsrs	r3, r3, #2
 800650a:	3318      	adds	r3, #24
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006512:	4a33      	ldr	r2, [pc, #204]	; (80065e0 <HAL_GPIO_Init+0x2b8>)
 8006514:	2380      	movs	r3, #128	; 0x80
 8006516:	58d3      	ldr	r3, [r2, r3]
 8006518:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	43da      	mvns	r2, r3
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	4013      	ands	r3, r2
 8006522:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	685a      	ldr	r2, [r3, #4]
 8006528:	2380      	movs	r3, #128	; 0x80
 800652a:	025b      	lsls	r3, r3, #9
 800652c:	4013      	ands	r3, r2
 800652e:	d003      	beq.n	8006538 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	4313      	orrs	r3, r2
 8006536:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006538:	4929      	ldr	r1, [pc, #164]	; (80065e0 <HAL_GPIO_Init+0x2b8>)
 800653a:	2280      	movs	r2, #128	; 0x80
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8006540:	4a27      	ldr	r2, [pc, #156]	; (80065e0 <HAL_GPIO_Init+0x2b8>)
 8006542:	2384      	movs	r3, #132	; 0x84
 8006544:	58d3      	ldr	r3, [r2, r3]
 8006546:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	43da      	mvns	r2, r3
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	4013      	ands	r3, r2
 8006550:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	685a      	ldr	r2, [r3, #4]
 8006556:	2380      	movs	r3, #128	; 0x80
 8006558:	029b      	lsls	r3, r3, #10
 800655a:	4013      	ands	r3, r2
 800655c:	d003      	beq.n	8006566 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 800655e:	693a      	ldr	r2, [r7, #16]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	4313      	orrs	r3, r2
 8006564:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006566:	491e      	ldr	r1, [pc, #120]	; (80065e0 <HAL_GPIO_Init+0x2b8>)
 8006568:	2284      	movs	r2, #132	; 0x84
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800656e:	4b1c      	ldr	r3, [pc, #112]	; (80065e0 <HAL_GPIO_Init+0x2b8>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	43da      	mvns	r2, r3
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	4013      	ands	r3, r2
 800657c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	685a      	ldr	r2, [r3, #4]
 8006582:	2380      	movs	r3, #128	; 0x80
 8006584:	035b      	lsls	r3, r3, #13
 8006586:	4013      	ands	r3, r2
 8006588:	d003      	beq.n	8006592 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800658a:	693a      	ldr	r2, [r7, #16]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	4313      	orrs	r3, r2
 8006590:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006592:	4b13      	ldr	r3, [pc, #76]	; (80065e0 <HAL_GPIO_Init+0x2b8>)
 8006594:	693a      	ldr	r2, [r7, #16]
 8006596:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8006598:	4b11      	ldr	r3, [pc, #68]	; (80065e0 <HAL_GPIO_Init+0x2b8>)
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	43da      	mvns	r2, r3
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	4013      	ands	r3, r2
 80065a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	685a      	ldr	r2, [r3, #4]
 80065ac:	2380      	movs	r3, #128	; 0x80
 80065ae:	039b      	lsls	r3, r3, #14
 80065b0:	4013      	ands	r3, r2
 80065b2:	d003      	beq.n	80065bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80065bc:	4b08      	ldr	r3, [pc, #32]	; (80065e0 <HAL_GPIO_Init+0x2b8>)
 80065be:	693a      	ldr	r2, [r7, #16]
 80065c0:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	3301      	adds	r3, #1
 80065c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	40da      	lsrs	r2, r3
 80065d0:	1e13      	subs	r3, r2, #0
 80065d2:	d000      	beq.n	80065d6 <HAL_GPIO_Init+0x2ae>
 80065d4:	e6b0      	b.n	8006338 <HAL_GPIO_Init+0x10>
  }
}
 80065d6:	46c0      	nop			; (mov r8, r8)
 80065d8:	46c0      	nop			; (mov r8, r8)
 80065da:	46bd      	mov	sp, r7
 80065dc:	b006      	add	sp, #24
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	40021800 	.word	0x40021800
 80065e4:	50000400 	.word	0x50000400
 80065e8:	50000800 	.word	0x50000800
 80065ec:	50000c00 	.word	0x50000c00

080065f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d101      	bne.n	8006602 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e082      	b.n	8006708 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2241      	movs	r2, #65	; 0x41
 8006606:	5c9b      	ldrb	r3, [r3, r2]
 8006608:	b2db      	uxtb	r3, r3
 800660a:	2b00      	cmp	r3, #0
 800660c:	d107      	bne.n	800661e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2240      	movs	r2, #64	; 0x40
 8006612:	2100      	movs	r1, #0
 8006614:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	0018      	movs	r0, r3
 800661a:	f7fe fba1 	bl	8004d60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2241      	movs	r2, #65	; 0x41
 8006622:	2124      	movs	r1, #36	; 0x24
 8006624:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2101      	movs	r1, #1
 8006632:	438a      	bics	r2, r1
 8006634:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	685a      	ldr	r2, [r3, #4]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4934      	ldr	r1, [pc, #208]	; (8006710 <HAL_I2C_Init+0x120>)
 8006640:	400a      	ands	r2, r1
 8006642:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	689a      	ldr	r2, [r3, #8]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4931      	ldr	r1, [pc, #196]	; (8006714 <HAL_I2C_Init+0x124>)
 8006650:	400a      	ands	r2, r1
 8006652:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	2b01      	cmp	r3, #1
 800665a:	d108      	bne.n	800666e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	689a      	ldr	r2, [r3, #8]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2180      	movs	r1, #128	; 0x80
 8006666:	0209      	lsls	r1, r1, #8
 8006668:	430a      	orrs	r2, r1
 800666a:	609a      	str	r2, [r3, #8]
 800666c:	e007      	b.n	800667e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	689a      	ldr	r2, [r3, #8]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2184      	movs	r1, #132	; 0x84
 8006678:	0209      	lsls	r1, r1, #8
 800667a:	430a      	orrs	r2, r1
 800667c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	2b02      	cmp	r3, #2
 8006684:	d104      	bne.n	8006690 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2280      	movs	r2, #128	; 0x80
 800668c:	0112      	lsls	r2, r2, #4
 800668e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	685a      	ldr	r2, [r3, #4]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	491f      	ldr	r1, [pc, #124]	; (8006718 <HAL_I2C_Init+0x128>)
 800669c:	430a      	orrs	r2, r1
 800669e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68da      	ldr	r2, [r3, #12]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	491a      	ldr	r1, [pc, #104]	; (8006714 <HAL_I2C_Init+0x124>)
 80066ac:	400a      	ands	r2, r1
 80066ae:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	691a      	ldr	r2, [r3, #16]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	695b      	ldr	r3, [r3, #20]
 80066b8:	431a      	orrs	r2, r3
 80066ba:	0011      	movs	r1, r2
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	699b      	ldr	r3, [r3, #24]
 80066c0:	021a      	lsls	r2, r3, #8
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	430a      	orrs	r2, r1
 80066c8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	69d9      	ldr	r1, [r3, #28]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a1a      	ldr	r2, [r3, #32]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	430a      	orrs	r2, r1
 80066d8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2101      	movs	r1, #1
 80066e6:	430a      	orrs	r2, r1
 80066e8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2241      	movs	r2, #65	; 0x41
 80066f4:	2120      	movs	r1, #32
 80066f6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2242      	movs	r2, #66	; 0x42
 8006702:	2100      	movs	r1, #0
 8006704:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	0018      	movs	r0, r3
 800670a:	46bd      	mov	sp, r7
 800670c:	b002      	add	sp, #8
 800670e:	bd80      	pop	{r7, pc}
 8006710:	f0ffffff 	.word	0xf0ffffff
 8006714:	ffff7fff 	.word	0xffff7fff
 8006718:	02008000 	.word	0x02008000

0800671c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800671c:	b590      	push	{r4, r7, lr}
 800671e:	b089      	sub	sp, #36	; 0x24
 8006720:	af02      	add	r7, sp, #8
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	0008      	movs	r0, r1
 8006726:	607a      	str	r2, [r7, #4]
 8006728:	0019      	movs	r1, r3
 800672a:	230a      	movs	r3, #10
 800672c:	18fb      	adds	r3, r7, r3
 800672e:	1c02      	adds	r2, r0, #0
 8006730:	801a      	strh	r2, [r3, #0]
 8006732:	2308      	movs	r3, #8
 8006734:	18fb      	adds	r3, r7, r3
 8006736:	1c0a      	adds	r2, r1, #0
 8006738:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2241      	movs	r2, #65	; 0x41
 800673e:	5c9b      	ldrb	r3, [r3, r2]
 8006740:	b2db      	uxtb	r3, r3
 8006742:	2b20      	cmp	r3, #32
 8006744:	d000      	beq.n	8006748 <HAL_I2C_Master_Transmit+0x2c>
 8006746:	e0e7      	b.n	8006918 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2240      	movs	r2, #64	; 0x40
 800674c:	5c9b      	ldrb	r3, [r3, r2]
 800674e:	2b01      	cmp	r3, #1
 8006750:	d101      	bne.n	8006756 <HAL_I2C_Master_Transmit+0x3a>
 8006752:	2302      	movs	r3, #2
 8006754:	e0e1      	b.n	800691a <HAL_I2C_Master_Transmit+0x1fe>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2240      	movs	r2, #64	; 0x40
 800675a:	2101      	movs	r1, #1
 800675c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800675e:	f7fe ff99 	bl	8005694 <HAL_GetTick>
 8006762:	0003      	movs	r3, r0
 8006764:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006766:	2380      	movs	r3, #128	; 0x80
 8006768:	0219      	lsls	r1, r3, #8
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	9300      	str	r3, [sp, #0]
 8006770:	2319      	movs	r3, #25
 8006772:	2201      	movs	r2, #1
 8006774:	f000 fe76 	bl	8007464 <I2C_WaitOnFlagUntilTimeout>
 8006778:	1e03      	subs	r3, r0, #0
 800677a:	d001      	beq.n	8006780 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e0cc      	b.n	800691a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2241      	movs	r2, #65	; 0x41
 8006784:	2121      	movs	r1, #33	; 0x21
 8006786:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2242      	movs	r2, #66	; 0x42
 800678c:	2110      	movs	r1, #16
 800678e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2208      	movs	r2, #8
 80067a0:	18ba      	adds	r2, r7, r2
 80067a2:	8812      	ldrh	r2, [r2, #0]
 80067a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2200      	movs	r2, #0
 80067aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	2bff      	cmp	r3, #255	; 0xff
 80067b4:	d911      	bls.n	80067da <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	22ff      	movs	r2, #255	; 0xff
 80067ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067c0:	b2da      	uxtb	r2, r3
 80067c2:	2380      	movs	r3, #128	; 0x80
 80067c4:	045c      	lsls	r4, r3, #17
 80067c6:	230a      	movs	r3, #10
 80067c8:	18fb      	adds	r3, r7, r3
 80067ca:	8819      	ldrh	r1, [r3, #0]
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	4b55      	ldr	r3, [pc, #340]	; (8006924 <HAL_I2C_Master_Transmit+0x208>)
 80067d0:	9300      	str	r3, [sp, #0]
 80067d2:	0023      	movs	r3, r4
 80067d4:	f000 ff66 	bl	80076a4 <I2C_TransferConfig>
 80067d8:	e075      	b.n	80068c6 <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067de:	b29a      	uxth	r2, r3
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067e8:	b2da      	uxtb	r2, r3
 80067ea:	2380      	movs	r3, #128	; 0x80
 80067ec:	049c      	lsls	r4, r3, #18
 80067ee:	230a      	movs	r3, #10
 80067f0:	18fb      	adds	r3, r7, r3
 80067f2:	8819      	ldrh	r1, [r3, #0]
 80067f4:	68f8      	ldr	r0, [r7, #12]
 80067f6:	4b4b      	ldr	r3, [pc, #300]	; (8006924 <HAL_I2C_Master_Transmit+0x208>)
 80067f8:	9300      	str	r3, [sp, #0]
 80067fa:	0023      	movs	r3, r4
 80067fc:	f000 ff52 	bl	80076a4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8006800:	e061      	b.n	80068c6 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006802:	697a      	ldr	r2, [r7, #20]
 8006804:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	0018      	movs	r0, r3
 800680a:	f000 fe6a 	bl	80074e2 <I2C_WaitOnTXISFlagUntilTimeout>
 800680e:	1e03      	subs	r3, r0, #0
 8006810:	d001      	beq.n	8006816 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e081      	b.n	800691a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681a:	781a      	ldrb	r2, [r3, #0]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006826:	1c5a      	adds	r2, r3, #1
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006830:	b29b      	uxth	r3, r3
 8006832:	3b01      	subs	r3, #1
 8006834:	b29a      	uxth	r2, r3
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800683e:	3b01      	subs	r3, #1
 8006840:	b29a      	uxth	r2, r3
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800684a:	b29b      	uxth	r3, r3
 800684c:	2b00      	cmp	r3, #0
 800684e:	d03a      	beq.n	80068c6 <HAL_I2C_Master_Transmit+0x1aa>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006854:	2b00      	cmp	r3, #0
 8006856:	d136      	bne.n	80068c6 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006858:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	9300      	str	r3, [sp, #0]
 8006860:	0013      	movs	r3, r2
 8006862:	2200      	movs	r2, #0
 8006864:	2180      	movs	r1, #128	; 0x80
 8006866:	f000 fdfd 	bl	8007464 <I2C_WaitOnFlagUntilTimeout>
 800686a:	1e03      	subs	r3, r0, #0
 800686c:	d001      	beq.n	8006872 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e053      	b.n	800691a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006876:	b29b      	uxth	r3, r3
 8006878:	2bff      	cmp	r3, #255	; 0xff
 800687a:	d911      	bls.n	80068a0 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	22ff      	movs	r2, #255	; 0xff
 8006880:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006886:	b2da      	uxtb	r2, r3
 8006888:	2380      	movs	r3, #128	; 0x80
 800688a:	045c      	lsls	r4, r3, #17
 800688c:	230a      	movs	r3, #10
 800688e:	18fb      	adds	r3, r7, r3
 8006890:	8819      	ldrh	r1, [r3, #0]
 8006892:	68f8      	ldr	r0, [r7, #12]
 8006894:	2300      	movs	r3, #0
 8006896:	9300      	str	r3, [sp, #0]
 8006898:	0023      	movs	r3, r4
 800689a:	f000 ff03 	bl	80076a4 <I2C_TransferConfig>
 800689e:	e012      	b.n	80068c6 <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068a4:	b29a      	uxth	r2, r3
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ae:	b2da      	uxtb	r2, r3
 80068b0:	2380      	movs	r3, #128	; 0x80
 80068b2:	049c      	lsls	r4, r3, #18
 80068b4:	230a      	movs	r3, #10
 80068b6:	18fb      	adds	r3, r7, r3
 80068b8:	8819      	ldrh	r1, [r3, #0]
 80068ba:	68f8      	ldr	r0, [r7, #12]
 80068bc:	2300      	movs	r3, #0
 80068be:	9300      	str	r3, [sp, #0]
 80068c0:	0023      	movs	r3, r4
 80068c2:	f000 feef 	bl	80076a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d198      	bne.n	8006802 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068d0:	697a      	ldr	r2, [r7, #20]
 80068d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	0018      	movs	r0, r3
 80068d8:	f000 fe42 	bl	8007560 <I2C_WaitOnSTOPFlagUntilTimeout>
 80068dc:	1e03      	subs	r3, r0, #0
 80068de:	d001      	beq.n	80068e4 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e01a      	b.n	800691a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2220      	movs	r2, #32
 80068ea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	685a      	ldr	r2, [r3, #4]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	490c      	ldr	r1, [pc, #48]	; (8006928 <HAL_I2C_Master_Transmit+0x20c>)
 80068f8:	400a      	ands	r2, r1
 80068fa:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2241      	movs	r2, #65	; 0x41
 8006900:	2120      	movs	r1, #32
 8006902:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2242      	movs	r2, #66	; 0x42
 8006908:	2100      	movs	r1, #0
 800690a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2240      	movs	r2, #64	; 0x40
 8006910:	2100      	movs	r1, #0
 8006912:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006914:	2300      	movs	r3, #0
 8006916:	e000      	b.n	800691a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8006918:	2302      	movs	r3, #2
  }
}
 800691a:	0018      	movs	r0, r3
 800691c:	46bd      	mov	sp, r7
 800691e:	b007      	add	sp, #28
 8006920:	bd90      	pop	{r4, r7, pc}
 8006922:	46c0      	nop			; (mov r8, r8)
 8006924:	80002000 	.word	0x80002000
 8006928:	fe00e800 	.word	0xfe00e800

0800692c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006948:	2b00      	cmp	r3, #0
 800694a:	d005      	beq.n	8006958 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006950:	68ba      	ldr	r2, [r7, #8]
 8006952:	68f9      	ldr	r1, [r7, #12]
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	4798      	blx	r3
  }
}
 8006958:	46c0      	nop			; (mov r8, r8)
 800695a:	46bd      	mov	sp, r7
 800695c:	b004      	add	sp, #16
 800695e:	bd80      	pop	{r7, pc}

08006960 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b086      	sub	sp, #24
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	0a1b      	lsrs	r3, r3, #8
 800697c:	001a      	movs	r2, r3
 800697e:	2301      	movs	r3, #1
 8006980:	4013      	ands	r3, r2
 8006982:	d010      	beq.n	80069a6 <HAL_I2C_ER_IRQHandler+0x46>
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	09db      	lsrs	r3, r3, #7
 8006988:	001a      	movs	r2, r3
 800698a:	2301      	movs	r3, #1
 800698c:	4013      	ands	r3, r2
 800698e:	d00a      	beq.n	80069a6 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006994:	2201      	movs	r2, #1
 8006996:	431a      	orrs	r2, r3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2280      	movs	r2, #128	; 0x80
 80069a2:	0052      	lsls	r2, r2, #1
 80069a4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	0a9b      	lsrs	r3, r3, #10
 80069aa:	001a      	movs	r2, r3
 80069ac:	2301      	movs	r3, #1
 80069ae:	4013      	ands	r3, r2
 80069b0:	d010      	beq.n	80069d4 <HAL_I2C_ER_IRQHandler+0x74>
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	09db      	lsrs	r3, r3, #7
 80069b6:	001a      	movs	r2, r3
 80069b8:	2301      	movs	r3, #1
 80069ba:	4013      	ands	r3, r2
 80069bc:	d00a      	beq.n	80069d4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069c2:	2208      	movs	r2, #8
 80069c4:	431a      	orrs	r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2280      	movs	r2, #128	; 0x80
 80069d0:	00d2      	lsls	r2, r2, #3
 80069d2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	0a5b      	lsrs	r3, r3, #9
 80069d8:	001a      	movs	r2, r3
 80069da:	2301      	movs	r3, #1
 80069dc:	4013      	ands	r3, r2
 80069de:	d010      	beq.n	8006a02 <HAL_I2C_ER_IRQHandler+0xa2>
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	09db      	lsrs	r3, r3, #7
 80069e4:	001a      	movs	r2, r3
 80069e6:	2301      	movs	r3, #1
 80069e8:	4013      	ands	r3, r2
 80069ea:	d00a      	beq.n	8006a02 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069f0:	2202      	movs	r2, #2
 80069f2:	431a      	orrs	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2280      	movs	r2, #128	; 0x80
 80069fe:	0092      	lsls	r2, r2, #2
 8006a00:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a06:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	220b      	movs	r2, #11
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	d005      	beq.n	8006a1c <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	0011      	movs	r1, r2
 8006a16:	0018      	movs	r0, r3
 8006a18:	f000 fbd8 	bl	80071cc <I2C_ITError>
  }
}
 8006a1c:	46c0      	nop			; (mov r8, r8)
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	b006      	add	sp, #24
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006a2c:	46c0      	nop			; (mov r8, r8)
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	b002      	add	sp, #8
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b082      	sub	sp, #8
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006a3c:	46c0      	nop			; (mov r8, r8)
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	b002      	add	sp, #8
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b082      	sub	sp, #8
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	0008      	movs	r0, r1
 8006a4e:	0011      	movs	r1, r2
 8006a50:	1cfb      	adds	r3, r7, #3
 8006a52:	1c02      	adds	r2, r0, #0
 8006a54:	701a      	strb	r2, [r3, #0]
 8006a56:	003b      	movs	r3, r7
 8006a58:	1c0a      	adds	r2, r1, #0
 8006a5a:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006a5c:	46c0      	nop			; (mov r8, r8)
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	b002      	add	sp, #8
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8006a6c:	46c0      	nop			; (mov r8, r8)
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	b002      	add	sp, #8
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006a7c:	46c0      	nop			; (mov r8, r8)
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	b002      	add	sp, #8
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006a8c:	46c0      	nop			; (mov r8, r8)
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	b002      	add	sp, #8
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b086      	sub	sp, #24
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2240      	movs	r2, #64	; 0x40
 8006aae:	5c9b      	ldrb	r3, [r3, r2]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d101      	bne.n	8006ab8 <I2C_Slave_ISR_IT+0x24>
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	e0fa      	b.n	8006cae <I2C_Slave_ISR_IT+0x21a>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2240      	movs	r2, #64	; 0x40
 8006abc:	2101      	movs	r1, #1
 8006abe:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	095b      	lsrs	r3, r3, #5
 8006ac4:	001a      	movs	r2, r3
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	4013      	ands	r3, r2
 8006aca:	d00b      	beq.n	8006ae4 <I2C_Slave_ISR_IT+0x50>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	095b      	lsrs	r3, r3, #5
 8006ad0:	001a      	movs	r2, r3
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	d005      	beq.n	8006ae4 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006ad8:	693a      	ldr	r2, [r7, #16]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	0011      	movs	r1, r2
 8006ade:	0018      	movs	r0, r3
 8006ae0:	f000 f9f6 	bl	8006ed0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	091b      	lsrs	r3, r3, #4
 8006ae8:	001a      	movs	r2, r3
 8006aea:	2301      	movs	r3, #1
 8006aec:	4013      	ands	r3, r2
 8006aee:	d054      	beq.n	8006b9a <I2C_Slave_ISR_IT+0x106>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	091b      	lsrs	r3, r3, #4
 8006af4:	001a      	movs	r2, r3
 8006af6:	2301      	movs	r3, #1
 8006af8:	4013      	ands	r3, r2
 8006afa:	d04e      	beq.n	8006b9a <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d12d      	bne.n	8006b62 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2241      	movs	r2, #65	; 0x41
 8006b0a:	5c9b      	ldrb	r3, [r3, r2]
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	2b28      	cmp	r3, #40	; 0x28
 8006b10:	d10b      	bne.n	8006b2a <I2C_Slave_ISR_IT+0x96>
 8006b12:	697a      	ldr	r2, [r7, #20]
 8006b14:	2380      	movs	r3, #128	; 0x80
 8006b16:	049b      	lsls	r3, r3, #18
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d106      	bne.n	8006b2a <I2C_Slave_ISR_IT+0x96>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006b1c:	693a      	ldr	r2, [r7, #16]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	0011      	movs	r1, r2
 8006b22:	0018      	movs	r0, r3
 8006b24:	f000 faf8 	bl	8007118 <I2C_ITListenCplt>
 8006b28:	e036      	b.n	8006b98 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2241      	movs	r2, #65	; 0x41
 8006b2e:	5c9b      	ldrb	r3, [r3, r2]
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	2b29      	cmp	r3, #41	; 0x29
 8006b34:	d110      	bne.n	8006b58 <I2C_Slave_ISR_IT+0xc4>
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	4a5f      	ldr	r2, [pc, #380]	; (8006cb8 <I2C_Slave_ISR_IT+0x224>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d00c      	beq.n	8006b58 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2210      	movs	r2, #16
 8006b44:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	0018      	movs	r0, r3
 8006b4a:	f000 fc4a 	bl	80073e2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	0018      	movs	r0, r3
 8006b52:	f000 f957 	bl	8006e04 <I2C_ITSlaveSeqCplt>
 8006b56:	e01f      	b.n	8006b98 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2210      	movs	r2, #16
 8006b5e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006b60:	e09d      	b.n	8006c9e <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2210      	movs	r2, #16
 8006b68:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b6e:	2204      	movs	r2, #4
 8006b70:	431a      	orrs	r2, r3
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d005      	beq.n	8006b88 <I2C_Slave_ISR_IT+0xf4>
 8006b7c:	697a      	ldr	r2, [r7, #20]
 8006b7e:	2380      	movs	r3, #128	; 0x80
 8006b80:	045b      	lsls	r3, r3, #17
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d000      	beq.n	8006b88 <I2C_Slave_ISR_IT+0xf4>
 8006b86:	e08a      	b.n	8006c9e <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	0011      	movs	r1, r2
 8006b90:	0018      	movs	r0, r3
 8006b92:	f000 fb1b 	bl	80071cc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006b96:	e082      	b.n	8006c9e <I2C_Slave_ISR_IT+0x20a>
 8006b98:	e081      	b.n	8006c9e <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	089b      	lsrs	r3, r3, #2
 8006b9e:	001a      	movs	r2, r3
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	d031      	beq.n	8006c0a <I2C_Slave_ISR_IT+0x176>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	089b      	lsrs	r3, r3, #2
 8006baa:	001a      	movs	r2, r3
 8006bac:	2301      	movs	r3, #1
 8006bae:	4013      	ands	r3, r2
 8006bb0:	d02b      	beq.n	8006c0a <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d018      	beq.n	8006bee <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc6:	b2d2      	uxtb	r2, r2
 8006bc8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bce:	1c5a      	adds	r2, r3, #1
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bd8:	3b01      	subs	r3, #1
 8006bda:	b29a      	uxth	r2, r3
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	3b01      	subs	r3, #1
 8006be8:	b29a      	uxth	r2, r3
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d154      	bne.n	8006ca2 <I2C_Slave_ISR_IT+0x20e>
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	4a2f      	ldr	r2, [pc, #188]	; (8006cb8 <I2C_Slave_ISR_IT+0x224>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d050      	beq.n	8006ca2 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	0018      	movs	r0, r3
 8006c04:	f000 f8fe 	bl	8006e04 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006c08:	e04b      	b.n	8006ca2 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	08db      	lsrs	r3, r3, #3
 8006c0e:	001a      	movs	r2, r3
 8006c10:	2301      	movs	r3, #1
 8006c12:	4013      	ands	r3, r2
 8006c14:	d00c      	beq.n	8006c30 <I2C_Slave_ISR_IT+0x19c>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	08db      	lsrs	r3, r3, #3
 8006c1a:	001a      	movs	r2, r3
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	4013      	ands	r3, r2
 8006c20:	d006      	beq.n	8006c30 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006c22:	693a      	ldr	r2, [r7, #16]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	0011      	movs	r1, r2
 8006c28:	0018      	movs	r0, r3
 8006c2a:	f000 f847 	bl	8006cbc <I2C_ITAddrCplt>
 8006c2e:	e039      	b.n	8006ca4 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	085b      	lsrs	r3, r3, #1
 8006c34:	001a      	movs	r2, r3
 8006c36:	2301      	movs	r3, #1
 8006c38:	4013      	ands	r3, r2
 8006c3a:	d033      	beq.n	8006ca4 <I2C_Slave_ISR_IT+0x210>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	085b      	lsrs	r3, r3, #1
 8006c40:	001a      	movs	r2, r3
 8006c42:	2301      	movs	r3, #1
 8006c44:	4013      	ands	r3, r2
 8006c46:	d02d      	beq.n	8006ca4 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d018      	beq.n	8006c84 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c56:	781a      	ldrb	r2, [r3, #0]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c62:	1c5a      	adds	r2, r3, #1
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	851a      	strh	r2, [r3, #40]	; 0x28
 8006c82:	e00f      	b.n	8006ca4 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006c84:	697a      	ldr	r2, [r7, #20]
 8006c86:	2380      	movs	r3, #128	; 0x80
 8006c88:	045b      	lsls	r3, r3, #17
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d002      	beq.n	8006c94 <I2C_Slave_ISR_IT+0x200>
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d107      	bne.n	8006ca4 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	0018      	movs	r0, r3
 8006c98:	f000 f8b4 	bl	8006e04 <I2C_ITSlaveSeqCplt>
 8006c9c:	e002      	b.n	8006ca4 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 8006c9e:	46c0      	nop			; (mov r8, r8)
 8006ca0:	e000      	b.n	8006ca4 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8006ca2:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2240      	movs	r2, #64	; 0x40
 8006ca8:	2100      	movs	r1, #0
 8006caa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	0018      	movs	r0, r3
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	b006      	add	sp, #24
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	46c0      	nop			; (mov r8, r8)
 8006cb8:	ffff0000 	.word	0xffff0000

08006cbc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006cbc:	b5b0      	push	{r4, r5, r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2241      	movs	r2, #65	; 0x41
 8006cca:	5c9b      	ldrb	r3, [r3, r2]
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	001a      	movs	r2, r3
 8006cd0:	2328      	movs	r3, #40	; 0x28
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	2b28      	cmp	r3, #40	; 0x28
 8006cd6:	d000      	beq.n	8006cda <I2C_ITAddrCplt+0x1e>
 8006cd8:	e088      	b.n	8006dec <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	699b      	ldr	r3, [r3, #24]
 8006ce0:	0c1b      	lsrs	r3, r3, #16
 8006ce2:	b2da      	uxtb	r2, r3
 8006ce4:	250f      	movs	r5, #15
 8006ce6:	197b      	adds	r3, r7, r5
 8006ce8:	2101      	movs	r1, #1
 8006cea:	400a      	ands	r2, r1
 8006cec:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	0c1b      	lsrs	r3, r3, #16
 8006cf6:	b29a      	uxth	r2, r3
 8006cf8:	200c      	movs	r0, #12
 8006cfa:	183b      	adds	r3, r7, r0
 8006cfc:	21fe      	movs	r1, #254	; 0xfe
 8006cfe:	400a      	ands	r2, r1
 8006d00:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	b29a      	uxth	r2, r3
 8006d0a:	240a      	movs	r4, #10
 8006d0c:	193b      	adds	r3, r7, r4
 8006d0e:	0592      	lsls	r2, r2, #22
 8006d10:	0d92      	lsrs	r2, r2, #22
 8006d12:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	b29a      	uxth	r2, r3
 8006d1c:	2308      	movs	r3, #8
 8006d1e:	18fb      	adds	r3, r7, r3
 8006d20:	21fe      	movs	r1, #254	; 0xfe
 8006d22:	400a      	ands	r2, r1
 8006d24:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	2b02      	cmp	r3, #2
 8006d2c:	d148      	bne.n	8006dc0 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8006d2e:	0021      	movs	r1, r4
 8006d30:	187b      	adds	r3, r7, r1
 8006d32:	881b      	ldrh	r3, [r3, #0]
 8006d34:	09db      	lsrs	r3, r3, #7
 8006d36:	b29a      	uxth	r2, r3
 8006d38:	183b      	adds	r3, r7, r0
 8006d3a:	881b      	ldrh	r3, [r3, #0]
 8006d3c:	4053      	eors	r3, r2
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	001a      	movs	r2, r3
 8006d42:	2306      	movs	r3, #6
 8006d44:	4013      	ands	r3, r2
 8006d46:	d120      	bne.n	8006d8a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8006d48:	183b      	adds	r3, r7, r0
 8006d4a:	187a      	adds	r2, r7, r1
 8006d4c:	8812      	ldrh	r2, [r2, #0]
 8006d4e:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d54:	1c5a      	adds	r2, r3, #1
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d5e:	2b02      	cmp	r3, #2
 8006d60:	d14c      	bne.n	8006dfc <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2208      	movs	r2, #8
 8006d6e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2240      	movs	r2, #64	; 0x40
 8006d74:	2100      	movs	r1, #0
 8006d76:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006d78:	183b      	adds	r3, r7, r0
 8006d7a:	881a      	ldrh	r2, [r3, #0]
 8006d7c:	197b      	adds	r3, r7, r5
 8006d7e:	7819      	ldrb	r1, [r3, #0]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	0018      	movs	r0, r3
 8006d84:	f7ff fe5e 	bl	8006a44 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006d88:	e038      	b.n	8006dfc <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8006d8a:	240c      	movs	r4, #12
 8006d8c:	193b      	adds	r3, r7, r4
 8006d8e:	2208      	movs	r2, #8
 8006d90:	18ba      	adds	r2, r7, r2
 8006d92:	8812      	ldrh	r2, [r2, #0]
 8006d94:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006d96:	2380      	movs	r3, #128	; 0x80
 8006d98:	021a      	lsls	r2, r3, #8
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	0011      	movs	r1, r2
 8006d9e:	0018      	movs	r0, r3
 8006da0:	f000 fcb6 	bl	8007710 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2240      	movs	r2, #64	; 0x40
 8006da8:	2100      	movs	r1, #0
 8006daa:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006dac:	193b      	adds	r3, r7, r4
 8006dae:	881a      	ldrh	r2, [r3, #0]
 8006db0:	230f      	movs	r3, #15
 8006db2:	18fb      	adds	r3, r7, r3
 8006db4:	7819      	ldrb	r1, [r3, #0]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	0018      	movs	r0, r3
 8006dba:	f7ff fe43 	bl	8006a44 <HAL_I2C_AddrCallback>
}
 8006dbe:	e01d      	b.n	8006dfc <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006dc0:	2380      	movs	r3, #128	; 0x80
 8006dc2:	021a      	lsls	r2, r3, #8
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	0011      	movs	r1, r2
 8006dc8:	0018      	movs	r0, r3
 8006dca:	f000 fca1 	bl	8007710 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2240      	movs	r2, #64	; 0x40
 8006dd2:	2100      	movs	r1, #0
 8006dd4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006dd6:	230c      	movs	r3, #12
 8006dd8:	18fb      	adds	r3, r7, r3
 8006dda:	881a      	ldrh	r2, [r3, #0]
 8006ddc:	230f      	movs	r3, #15
 8006dde:	18fb      	adds	r3, r7, r3
 8006de0:	7819      	ldrb	r1, [r3, #0]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	0018      	movs	r0, r3
 8006de6:	f7ff fe2d 	bl	8006a44 <HAL_I2C_AddrCallback>
}
 8006dea:	e007      	b.n	8006dfc <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2208      	movs	r2, #8
 8006df2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2240      	movs	r2, #64	; 0x40
 8006df8:	2100      	movs	r1, #0
 8006dfa:	5499      	strb	r1, [r3, r2]
}
 8006dfc:	46c0      	nop			; (mov r8, r8)
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	b004      	add	sp, #16
 8006e02:	bdb0      	pop	{r4, r5, r7, pc}

08006e04 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2242      	movs	r2, #66	; 0x42
 8006e18:	2100      	movs	r1, #0
 8006e1a:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	0b9b      	lsrs	r3, r3, #14
 8006e20:	001a      	movs	r2, r3
 8006e22:	2301      	movs	r3, #1
 8006e24:	4013      	ands	r3, r2
 8006e26:	d008      	beq.n	8006e3a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4925      	ldr	r1, [pc, #148]	; (8006ec8 <I2C_ITSlaveSeqCplt+0xc4>)
 8006e34:	400a      	ands	r2, r1
 8006e36:	601a      	str	r2, [r3, #0]
 8006e38:	e00d      	b.n	8006e56 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	0bdb      	lsrs	r3, r3, #15
 8006e3e:	001a      	movs	r2, r3
 8006e40:	2301      	movs	r3, #1
 8006e42:	4013      	ands	r3, r2
 8006e44:	d007      	beq.n	8006e56 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	491e      	ldr	r1, [pc, #120]	; (8006ecc <I2C_ITSlaveSeqCplt+0xc8>)
 8006e52:	400a      	ands	r2, r1
 8006e54:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2241      	movs	r2, #65	; 0x41
 8006e5a:	5c9b      	ldrb	r3, [r3, r2]
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	2b29      	cmp	r3, #41	; 0x29
 8006e60:	d114      	bne.n	8006e8c <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2241      	movs	r2, #65	; 0x41
 8006e66:	2128      	movs	r1, #40	; 0x28
 8006e68:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2221      	movs	r2, #33	; 0x21
 8006e6e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2101      	movs	r1, #1
 8006e74:	0018      	movs	r0, r3
 8006e76:	f000 fc4b 	bl	8007710 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2240      	movs	r2, #64	; 0x40
 8006e7e:	2100      	movs	r1, #0
 8006e80:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	0018      	movs	r0, r3
 8006e86:	f7ff fdcd 	bl	8006a24 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006e8a:	e019      	b.n	8006ec0 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2241      	movs	r2, #65	; 0x41
 8006e90:	5c9b      	ldrb	r3, [r3, r2]
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	2b2a      	cmp	r3, #42	; 0x2a
 8006e96:	d113      	bne.n	8006ec0 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2241      	movs	r2, #65	; 0x41
 8006e9c:	2128      	movs	r1, #40	; 0x28
 8006e9e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2222      	movs	r2, #34	; 0x22
 8006ea4:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2102      	movs	r1, #2
 8006eaa:	0018      	movs	r0, r3
 8006eac:	f000 fc30 	bl	8007710 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2240      	movs	r2, #64	; 0x40
 8006eb4:	2100      	movs	r1, #0
 8006eb6:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	0018      	movs	r0, r3
 8006ebc:	f7ff fdba 	bl	8006a34 <HAL_I2C_SlaveRxCpltCallback>
}
 8006ec0:	46c0      	nop			; (mov r8, r8)
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	b004      	add	sp, #16
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	ffffbfff 	.word	0xffffbfff
 8006ecc:	ffff7fff 	.word	0xffff7fff

08006ed0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b086      	sub	sp, #24
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006ee6:	200f      	movs	r0, #15
 8006ee8:	183b      	adds	r3, r7, r0
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	2141      	movs	r1, #65	; 0x41
 8006eee:	5c52      	ldrb	r2, [r2, r1]
 8006ef0:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2220      	movs	r2, #32
 8006ef8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006efa:	183b      	adds	r3, r7, r0
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	2b21      	cmp	r3, #33	; 0x21
 8006f00:	d003      	beq.n	8006f0a <I2C_ITSlaveCplt+0x3a>
 8006f02:	183b      	adds	r3, r7, r0
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	2b29      	cmp	r3, #41	; 0x29
 8006f08:	d109      	bne.n	8006f1e <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006f0a:	4a7d      	ldr	r2, [pc, #500]	; (8007100 <I2C_ITSlaveCplt+0x230>)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	0011      	movs	r1, r2
 8006f10:	0018      	movs	r0, r3
 8006f12:	f000 fbfd 	bl	8007710 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2221      	movs	r2, #33	; 0x21
 8006f1a:	631a      	str	r2, [r3, #48]	; 0x30
 8006f1c:	e011      	b.n	8006f42 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006f1e:	220f      	movs	r2, #15
 8006f20:	18bb      	adds	r3, r7, r2
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	2b22      	cmp	r3, #34	; 0x22
 8006f26:	d003      	beq.n	8006f30 <I2C_ITSlaveCplt+0x60>
 8006f28:	18bb      	adds	r3, r7, r2
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	2b2a      	cmp	r3, #42	; 0x2a
 8006f2e:	d108      	bne.n	8006f42 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006f30:	4a74      	ldr	r2, [pc, #464]	; (8007104 <I2C_ITSlaveCplt+0x234>)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	0011      	movs	r1, r2
 8006f36:	0018      	movs	r0, r3
 8006f38:	f000 fbea 	bl	8007710 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2222      	movs	r2, #34	; 0x22
 8006f40:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	685a      	ldr	r2, [r3, #4]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2180      	movs	r1, #128	; 0x80
 8006f4e:	0209      	lsls	r1, r1, #8
 8006f50:	430a      	orrs	r2, r1
 8006f52:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	685a      	ldr	r2, [r3, #4]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	496a      	ldr	r1, [pc, #424]	; (8007108 <I2C_ITSlaveCplt+0x238>)
 8006f60:	400a      	ands	r2, r1
 8006f62:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	0018      	movs	r0, r3
 8006f68:	f000 fa3b 	bl	80073e2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	0b9b      	lsrs	r3, r3, #14
 8006f70:	001a      	movs	r2, r3
 8006f72:	2301      	movs	r3, #1
 8006f74:	4013      	ands	r3, r2
 8006f76:	d013      	beq.n	8006fa0 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4962      	ldr	r1, [pc, #392]	; (800710c <I2C_ITSlaveCplt+0x23c>)
 8006f84:	400a      	ands	r2, r1
 8006f86:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d020      	beq.n	8006fd2 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	b29a      	uxth	r2, r3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f9e:	e018      	b.n	8006fd2 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	0bdb      	lsrs	r3, r3, #15
 8006fa4:	001a      	movs	r2, r3
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	4013      	ands	r3, r2
 8006faa:	d012      	beq.n	8006fd2 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4956      	ldr	r1, [pc, #344]	; (8007110 <I2C_ITSlaveCplt+0x240>)
 8006fb8:	400a      	ands	r2, r1
 8006fba:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d006      	beq.n	8006fd2 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	b29a      	uxth	r2, r3
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	089b      	lsrs	r3, r3, #2
 8006fd6:	001a      	movs	r2, r3
 8006fd8:	2301      	movs	r3, #1
 8006fda:	4013      	ands	r3, r2
 8006fdc:	d020      	beq.n	8007020 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	2204      	movs	r2, #4
 8006fe2:	4393      	bics	r3, r2
 8006fe4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff0:	b2d2      	uxtb	r2, r2
 8006ff2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff8:	1c5a      	adds	r2, r3, #1
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00c      	beq.n	8007020 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800700a:	3b01      	subs	r3, #1
 800700c:	b29a      	uxth	r2, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007016:	b29b      	uxth	r3, r3
 8007018:	3b01      	subs	r3, #1
 800701a:	b29a      	uxth	r2, r3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007024:	b29b      	uxth	r3, r3
 8007026:	2b00      	cmp	r3, #0
 8007028:	d005      	beq.n	8007036 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800702e:	2204      	movs	r2, #4
 8007030:	431a      	orrs	r2, r3
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2242      	movs	r2, #66	; 0x42
 800703a:	2100      	movs	r1, #0
 800703c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007048:	2b00      	cmp	r3, #0
 800704a:	d013      	beq.n	8007074 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	0011      	movs	r1, r2
 8007054:	0018      	movs	r0, r3
 8007056:	f000 f8b9 	bl	80071cc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2241      	movs	r2, #65	; 0x41
 800705e:	5c9b      	ldrb	r3, [r3, r2]
 8007060:	b2db      	uxtb	r3, r3
 8007062:	2b28      	cmp	r3, #40	; 0x28
 8007064:	d147      	bne.n	80070f6 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8007066:	697a      	ldr	r2, [r7, #20]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	0011      	movs	r1, r2
 800706c:	0018      	movs	r0, r3
 800706e:	f000 f853 	bl	8007118 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007072:	e040      	b.n	80070f6 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007078:	4a26      	ldr	r2, [pc, #152]	; (8007114 <I2C_ITSlaveCplt+0x244>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d016      	beq.n	80070ac <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	0018      	movs	r0, r3
 8007082:	f7ff febf 	bl	8006e04 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a22      	ldr	r2, [pc, #136]	; (8007114 <I2C_ITSlaveCplt+0x244>)
 800708a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2241      	movs	r2, #65	; 0x41
 8007090:	2120      	movs	r1, #32
 8007092:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2240      	movs	r2, #64	; 0x40
 800709e:	2100      	movs	r1, #0
 80070a0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	0018      	movs	r0, r3
 80070a6:	f7ff fcdd 	bl	8006a64 <HAL_I2C_ListenCpltCallback>
}
 80070aa:	e024      	b.n	80070f6 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2241      	movs	r2, #65	; 0x41
 80070b0:	5c9b      	ldrb	r3, [r3, r2]
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	2b22      	cmp	r3, #34	; 0x22
 80070b6:	d10f      	bne.n	80070d8 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2241      	movs	r2, #65	; 0x41
 80070bc:	2120      	movs	r1, #32
 80070be:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2240      	movs	r2, #64	; 0x40
 80070ca:	2100      	movs	r1, #0
 80070cc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	0018      	movs	r0, r3
 80070d2:	f7ff fcaf 	bl	8006a34 <HAL_I2C_SlaveRxCpltCallback>
}
 80070d6:	e00e      	b.n	80070f6 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2241      	movs	r2, #65	; 0x41
 80070dc:	2120      	movs	r1, #32
 80070de:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2240      	movs	r2, #64	; 0x40
 80070ea:	2100      	movs	r1, #0
 80070ec:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	0018      	movs	r0, r3
 80070f2:	f7ff fc97 	bl	8006a24 <HAL_I2C_SlaveTxCpltCallback>
}
 80070f6:	46c0      	nop			; (mov r8, r8)
 80070f8:	46bd      	mov	sp, r7
 80070fa:	b006      	add	sp, #24
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	46c0      	nop			; (mov r8, r8)
 8007100:	00008001 	.word	0x00008001
 8007104:	00008002 	.word	0x00008002
 8007108:	fe00e800 	.word	0xfe00e800
 800710c:	ffffbfff 	.word	0xffffbfff
 8007110:	ffff7fff 	.word	0xffff7fff
 8007114:	ffff0000 	.word	0xffff0000

08007118 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a27      	ldr	r2, [pc, #156]	; (80071c4 <I2C_ITListenCplt+0xac>)
 8007126:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2241      	movs	r2, #65	; 0x41
 8007132:	2120      	movs	r1, #32
 8007134:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2242      	movs	r2, #66	; 0x42
 800713a:	2100      	movs	r1, #0
 800713c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	089b      	lsrs	r3, r3, #2
 8007148:	001a      	movs	r2, r3
 800714a:	2301      	movs	r3, #1
 800714c:	4013      	ands	r3, r2
 800714e:	d022      	beq.n	8007196 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715a:	b2d2      	uxtb	r2, r2
 800715c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007162:	1c5a      	adds	r2, r3, #1
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800716c:	2b00      	cmp	r3, #0
 800716e:	d012      	beq.n	8007196 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007174:	3b01      	subs	r3, #1
 8007176:	b29a      	uxth	r2, r3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007180:	b29b      	uxth	r3, r3
 8007182:	3b01      	subs	r3, #1
 8007184:	b29a      	uxth	r2, r3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800718e:	2204      	movs	r2, #4
 8007190:	431a      	orrs	r2, r3
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007196:	4a0c      	ldr	r2, [pc, #48]	; (80071c8 <I2C_ITListenCplt+0xb0>)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	0011      	movs	r1, r2
 800719c:	0018      	movs	r0, r3
 800719e:	f000 fab7 	bl	8007710 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2210      	movs	r2, #16
 80071a8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2240      	movs	r2, #64	; 0x40
 80071ae:	2100      	movs	r1, #0
 80071b0:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	0018      	movs	r0, r3
 80071b6:	f7ff fc55 	bl	8006a64 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80071ba:	46c0      	nop			; (mov r8, r8)
 80071bc:	46bd      	mov	sp, r7
 80071be:	b002      	add	sp, #8
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	46c0      	nop			; (mov r8, r8)
 80071c4:	ffff0000 	.word	0xffff0000
 80071c8:	00008003 	.word	0x00008003

080071cc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80071d6:	200f      	movs	r0, #15
 80071d8:	183b      	adds	r3, r7, r0
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	2141      	movs	r1, #65	; 0x41
 80071de:	5c52      	ldrb	r2, [r2, r1]
 80071e0:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2242      	movs	r2, #66	; 0x42
 80071e6:	2100      	movs	r1, #0
 80071e8:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a62      	ldr	r2, [pc, #392]	; (8007378 <I2C_ITError+0x1ac>)
 80071ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	431a      	orrs	r2, r3
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007202:	183b      	adds	r3, r7, r0
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	2b28      	cmp	r3, #40	; 0x28
 8007208:	d007      	beq.n	800721a <I2C_ITError+0x4e>
 800720a:	183b      	adds	r3, r7, r0
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	2b29      	cmp	r3, #41	; 0x29
 8007210:	d003      	beq.n	800721a <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007212:	183b      	adds	r3, r7, r0
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	2b2a      	cmp	r3, #42	; 0x2a
 8007218:	d10c      	bne.n	8007234 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2103      	movs	r1, #3
 800721e:	0018      	movs	r0, r3
 8007220:	f000 fa76 	bl	8007710 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2241      	movs	r2, #65	; 0x41
 8007228:	2128      	movs	r1, #40	; 0x28
 800722a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	4a53      	ldr	r2, [pc, #332]	; (800737c <I2C_ITError+0x1b0>)
 8007230:	635a      	str	r2, [r3, #52]	; 0x34
 8007232:	e012      	b.n	800725a <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007234:	4a52      	ldr	r2, [pc, #328]	; (8007380 <I2C_ITError+0x1b4>)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	0011      	movs	r1, r2
 800723a:	0018      	movs	r0, r3
 800723c:	f000 fa68 	bl	8007710 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2241      	movs	r2, #65	; 0x41
 8007244:	5c9b      	ldrb	r3, [r3, r2]
 8007246:	b2db      	uxtb	r3, r3
 8007248:	2b60      	cmp	r3, #96	; 0x60
 800724a:	d003      	beq.n	8007254 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2241      	movs	r2, #65	; 0x41
 8007250:	2120      	movs	r1, #32
 8007252:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800725e:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007264:	2b00      	cmp	r3, #0
 8007266:	d03b      	beq.n	80072e0 <I2C_ITError+0x114>
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	2b11      	cmp	r3, #17
 800726c:	d002      	beq.n	8007274 <I2C_ITError+0xa8>
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	2b21      	cmp	r3, #33	; 0x21
 8007272:	d135      	bne.n	80072e0 <I2C_ITError+0x114>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	2380      	movs	r3, #128	; 0x80
 800727c:	01db      	lsls	r3, r3, #7
 800727e:	401a      	ands	r2, r3
 8007280:	2380      	movs	r3, #128	; 0x80
 8007282:	01db      	lsls	r3, r3, #7
 8007284:	429a      	cmp	r2, r3
 8007286:	d107      	bne.n	8007298 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	493c      	ldr	r1, [pc, #240]	; (8007384 <I2C_ITError+0x1b8>)
 8007294:	400a      	ands	r2, r1
 8007296:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729c:	0018      	movs	r0, r3
 800729e:	f7fe ffa7 	bl	80061f0 <HAL_DMA_GetState>
 80072a2:	0003      	movs	r3, r0
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d016      	beq.n	80072d6 <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ac:	4a36      	ldr	r2, [pc, #216]	; (8007388 <I2C_ITError+0x1bc>)
 80072ae:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2240      	movs	r2, #64	; 0x40
 80072b4:	2100      	movs	r1, #0
 80072b6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072bc:	0018      	movs	r0, r3
 80072be:	f7fe fe7b 	bl	8005fb8 <HAL_DMA_Abort_IT>
 80072c2:	1e03      	subs	r3, r0, #0
 80072c4:	d051      	beq.n	800736a <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d0:	0018      	movs	r0, r3
 80072d2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80072d4:	e049      	b.n	800736a <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	0018      	movs	r0, r3
 80072da:	f000 f859 	bl	8007390 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80072de:	e044      	b.n	800736a <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d03b      	beq.n	8007360 <I2C_ITError+0x194>
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	2b12      	cmp	r3, #18
 80072ec:	d002      	beq.n	80072f4 <I2C_ITError+0x128>
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	2b22      	cmp	r3, #34	; 0x22
 80072f2:	d135      	bne.n	8007360 <I2C_ITError+0x194>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	2380      	movs	r3, #128	; 0x80
 80072fc:	021b      	lsls	r3, r3, #8
 80072fe:	401a      	ands	r2, r3
 8007300:	2380      	movs	r3, #128	; 0x80
 8007302:	021b      	lsls	r3, r3, #8
 8007304:	429a      	cmp	r2, r3
 8007306:	d107      	bne.n	8007318 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	491e      	ldr	r1, [pc, #120]	; (800738c <I2C_ITError+0x1c0>)
 8007314:	400a      	ands	r2, r1
 8007316:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800731c:	0018      	movs	r0, r3
 800731e:	f7fe ff67 	bl	80061f0 <HAL_DMA_GetState>
 8007322:	0003      	movs	r3, r0
 8007324:	2b01      	cmp	r3, #1
 8007326:	d016      	beq.n	8007356 <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800732c:	4a16      	ldr	r2, [pc, #88]	; (8007388 <I2C_ITError+0x1bc>)
 800732e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2240      	movs	r2, #64	; 0x40
 8007334:	2100      	movs	r1, #0
 8007336:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800733c:	0018      	movs	r0, r3
 800733e:	f7fe fe3b 	bl	8005fb8 <HAL_DMA_Abort_IT>
 8007342:	1e03      	subs	r3, r0, #0
 8007344:	d013      	beq.n	800736e <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800734a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007350:	0018      	movs	r0, r3
 8007352:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007354:	e00b      	b.n	800736e <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	0018      	movs	r0, r3
 800735a:	f000 f819 	bl	8007390 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800735e:	e006      	b.n	800736e <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	0018      	movs	r0, r3
 8007364:	f000 f814 	bl	8007390 <I2C_TreatErrorCallback>
  }
}
 8007368:	e002      	b.n	8007370 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800736a:	46c0      	nop			; (mov r8, r8)
 800736c:	e000      	b.n	8007370 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800736e:	46c0      	nop			; (mov r8, r8)
}
 8007370:	46c0      	nop			; (mov r8, r8)
 8007372:	46bd      	mov	sp, r7
 8007374:	b004      	add	sp, #16
 8007376:	bd80      	pop	{r7, pc}
 8007378:	ffff0000 	.word	0xffff0000
 800737c:	08006a95 	.word	0x08006a95
 8007380:	00008003 	.word	0x00008003
 8007384:	ffffbfff 	.word	0xffffbfff
 8007388:	08007427 	.word	0x08007427
 800738c:	ffff7fff 	.word	0xffff7fff

08007390 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2241      	movs	r2, #65	; 0x41
 800739c:	5c9b      	ldrb	r3, [r3, r2]
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	2b60      	cmp	r3, #96	; 0x60
 80073a2:	d10f      	bne.n	80073c4 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2241      	movs	r2, #65	; 0x41
 80073a8:	2120      	movs	r1, #32
 80073aa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2240      	movs	r2, #64	; 0x40
 80073b6:	2100      	movs	r1, #0
 80073b8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	0018      	movs	r0, r3
 80073be:	f7ff fb61 	bl	8006a84 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80073c2:	e00a      	b.n	80073da <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2240      	movs	r2, #64	; 0x40
 80073ce:	2100      	movs	r1, #0
 80073d0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	0018      	movs	r0, r3
 80073d6:	f7ff fb4d 	bl	8006a74 <HAL_I2C_ErrorCallback>
}
 80073da:	46c0      	nop			; (mov r8, r8)
 80073dc:	46bd      	mov	sp, r7
 80073de:	b002      	add	sp, #8
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b082      	sub	sp, #8
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	699b      	ldr	r3, [r3, #24]
 80073f0:	2202      	movs	r2, #2
 80073f2:	4013      	ands	r3, r2
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	d103      	bne.n	8007400 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2200      	movs	r2, #0
 80073fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	699b      	ldr	r3, [r3, #24]
 8007406:	2201      	movs	r2, #1
 8007408:	4013      	ands	r3, r2
 800740a:	2b01      	cmp	r3, #1
 800740c:	d007      	beq.n	800741e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	699a      	ldr	r2, [r3, #24]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2101      	movs	r1, #1
 800741a:	430a      	orrs	r2, r1
 800741c:	619a      	str	r2, [r3, #24]
  }
}
 800741e:	46c0      	nop			; (mov r8, r8)
 8007420:	46bd      	mov	sp, r7
 8007422:	b002      	add	sp, #8
 8007424:	bd80      	pop	{r7, pc}

08007426 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007426:	b580      	push	{r7, lr}
 8007428:	b084      	sub	sp, #16
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007432:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007438:	2b00      	cmp	r3, #0
 800743a:	d003      	beq.n	8007444 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007440:	2200      	movs	r2, #0
 8007442:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007448:	2b00      	cmp	r3, #0
 800744a:	d003      	beq.n	8007454 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007450:	2200      	movs	r2, #0
 8007452:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	0018      	movs	r0, r3
 8007458:	f7ff ff9a 	bl	8007390 <I2C_TreatErrorCallback>
}
 800745c:	46c0      	nop			; (mov r8, r8)
 800745e:	46bd      	mov	sp, r7
 8007460:	b004      	add	sp, #16
 8007462:	bd80      	pop	{r7, pc}

08007464 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	603b      	str	r3, [r7, #0]
 8007470:	1dfb      	adds	r3, r7, #7
 8007472:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007474:	e021      	b.n	80074ba <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	3301      	adds	r3, #1
 800747a:	d01e      	beq.n	80074ba <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800747c:	f7fe f90a 	bl	8005694 <HAL_GetTick>
 8007480:	0002      	movs	r2, r0
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	1ad3      	subs	r3, r2, r3
 8007486:	683a      	ldr	r2, [r7, #0]
 8007488:	429a      	cmp	r2, r3
 800748a:	d302      	bcc.n	8007492 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d113      	bne.n	80074ba <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007496:	2220      	movs	r2, #32
 8007498:	431a      	orrs	r2, r3
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2241      	movs	r2, #65	; 0x41
 80074a2:	2120      	movs	r1, #32
 80074a4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2242      	movs	r2, #66	; 0x42
 80074aa:	2100      	movs	r1, #0
 80074ac:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2240      	movs	r2, #64	; 0x40
 80074b2:	2100      	movs	r1, #0
 80074b4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
 80074b8:	e00f      	b.n	80074da <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	68ba      	ldr	r2, [r7, #8]
 80074c2:	4013      	ands	r3, r2
 80074c4:	68ba      	ldr	r2, [r7, #8]
 80074c6:	1ad3      	subs	r3, r2, r3
 80074c8:	425a      	negs	r2, r3
 80074ca:	4153      	adcs	r3, r2
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	001a      	movs	r2, r3
 80074d0:	1dfb      	adds	r3, r7, #7
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d0ce      	beq.n	8007476 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	0018      	movs	r0, r3
 80074dc:	46bd      	mov	sp, r7
 80074de:	b004      	add	sp, #16
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b084      	sub	sp, #16
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	60f8      	str	r0, [r7, #12]
 80074ea:	60b9      	str	r1, [r7, #8]
 80074ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80074ee:	e02b      	b.n	8007548 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	68b9      	ldr	r1, [r7, #8]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	0018      	movs	r0, r3
 80074f8:	f000 f86e 	bl	80075d8 <I2C_IsAcknowledgeFailed>
 80074fc:	1e03      	subs	r3, r0, #0
 80074fe:	d001      	beq.n	8007504 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	e029      	b.n	8007558 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	3301      	adds	r3, #1
 8007508:	d01e      	beq.n	8007548 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800750a:	f7fe f8c3 	bl	8005694 <HAL_GetTick>
 800750e:	0002      	movs	r2, r0
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	1ad3      	subs	r3, r2, r3
 8007514:	68ba      	ldr	r2, [r7, #8]
 8007516:	429a      	cmp	r2, r3
 8007518:	d302      	bcc.n	8007520 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d113      	bne.n	8007548 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007524:	2220      	movs	r2, #32
 8007526:	431a      	orrs	r2, r3
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2241      	movs	r2, #65	; 0x41
 8007530:	2120      	movs	r1, #32
 8007532:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2242      	movs	r2, #66	; 0x42
 8007538:	2100      	movs	r1, #0
 800753a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2240      	movs	r2, #64	; 0x40
 8007540:	2100      	movs	r1, #0
 8007542:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	e007      	b.n	8007558 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	2202      	movs	r2, #2
 8007550:	4013      	ands	r3, r2
 8007552:	2b02      	cmp	r3, #2
 8007554:	d1cc      	bne.n	80074f0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	0018      	movs	r0, r3
 800755a:	46bd      	mov	sp, r7
 800755c:	b004      	add	sp, #16
 800755e:	bd80      	pop	{r7, pc}

08007560 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800756c:	e028      	b.n	80075c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	68b9      	ldr	r1, [r7, #8]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	0018      	movs	r0, r3
 8007576:	f000 f82f 	bl	80075d8 <I2C_IsAcknowledgeFailed>
 800757a:	1e03      	subs	r3, r0, #0
 800757c:	d001      	beq.n	8007582 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	e026      	b.n	80075d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007582:	f7fe f887 	bl	8005694 <HAL_GetTick>
 8007586:	0002      	movs	r2, r0
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	1ad3      	subs	r3, r2, r3
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	429a      	cmp	r2, r3
 8007590:	d302      	bcc.n	8007598 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d113      	bne.n	80075c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800759c:	2220      	movs	r2, #32
 800759e:	431a      	orrs	r2, r3
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2241      	movs	r2, #65	; 0x41
 80075a8:	2120      	movs	r1, #32
 80075aa:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2242      	movs	r2, #66	; 0x42
 80075b0:	2100      	movs	r1, #0
 80075b2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2240      	movs	r2, #64	; 0x40
 80075b8:	2100      	movs	r1, #0
 80075ba:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	e007      	b.n	80075d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	699b      	ldr	r3, [r3, #24]
 80075c6:	2220      	movs	r2, #32
 80075c8:	4013      	ands	r3, r2
 80075ca:	2b20      	cmp	r3, #32
 80075cc:	d1cf      	bne.n	800756e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	0018      	movs	r0, r3
 80075d2:	46bd      	mov	sp, r7
 80075d4:	b004      	add	sp, #16
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	699b      	ldr	r3, [r3, #24]
 80075ea:	2210      	movs	r2, #16
 80075ec:	4013      	ands	r3, r2
 80075ee:	2b10      	cmp	r3, #16
 80075f0:	d151      	bne.n	8007696 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80075f2:	e021      	b.n	8007638 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	3301      	adds	r3, #1
 80075f8:	d01e      	beq.n	8007638 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075fa:	f7fe f84b 	bl	8005694 <HAL_GetTick>
 80075fe:	0002      	movs	r2, r0
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	1ad3      	subs	r3, r2, r3
 8007604:	68ba      	ldr	r2, [r7, #8]
 8007606:	429a      	cmp	r2, r3
 8007608:	d302      	bcc.n	8007610 <I2C_IsAcknowledgeFailed+0x38>
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d113      	bne.n	8007638 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007614:	2220      	movs	r2, #32
 8007616:	431a      	orrs	r2, r3
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2241      	movs	r2, #65	; 0x41
 8007620:	2120      	movs	r1, #32
 8007622:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2242      	movs	r2, #66	; 0x42
 8007628:	2100      	movs	r1, #0
 800762a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2240      	movs	r2, #64	; 0x40
 8007630:	2100      	movs	r1, #0
 8007632:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	e02f      	b.n	8007698 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	699b      	ldr	r3, [r3, #24]
 800763e:	2220      	movs	r2, #32
 8007640:	4013      	ands	r3, r2
 8007642:	2b20      	cmp	r3, #32
 8007644:	d1d6      	bne.n	80075f4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2210      	movs	r2, #16
 800764c:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2220      	movs	r2, #32
 8007654:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	0018      	movs	r0, r3
 800765a:	f7ff fec2 	bl	80073e2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	685a      	ldr	r2, [r3, #4]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	490d      	ldr	r1, [pc, #52]	; (80076a0 <I2C_IsAcknowledgeFailed+0xc8>)
 800766a:	400a      	ands	r2, r1
 800766c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007672:	2204      	movs	r2, #4
 8007674:	431a      	orrs	r2, r3
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2241      	movs	r2, #65	; 0x41
 800767e:	2120      	movs	r1, #32
 8007680:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2242      	movs	r2, #66	; 0x42
 8007686:	2100      	movs	r1, #0
 8007688:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2240      	movs	r2, #64	; 0x40
 800768e:	2100      	movs	r1, #0
 8007690:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	e000      	b.n	8007698 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8007696:	2300      	movs	r3, #0
}
 8007698:	0018      	movs	r0, r3
 800769a:	46bd      	mov	sp, r7
 800769c:	b004      	add	sp, #16
 800769e:	bd80      	pop	{r7, pc}
 80076a0:	fe00e800 	.word	0xfe00e800

080076a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80076a4:	b590      	push	{r4, r7, lr}
 80076a6:	b085      	sub	sp, #20
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	0008      	movs	r0, r1
 80076ae:	0011      	movs	r1, r2
 80076b0:	607b      	str	r3, [r7, #4]
 80076b2:	240a      	movs	r4, #10
 80076b4:	193b      	adds	r3, r7, r4
 80076b6:	1c02      	adds	r2, r0, #0
 80076b8:	801a      	strh	r2, [r3, #0]
 80076ba:	2009      	movs	r0, #9
 80076bc:	183b      	adds	r3, r7, r0
 80076be:	1c0a      	adds	r2, r1, #0
 80076c0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	6a3a      	ldr	r2, [r7, #32]
 80076ca:	0d51      	lsrs	r1, r2, #21
 80076cc:	2280      	movs	r2, #128	; 0x80
 80076ce:	00d2      	lsls	r2, r2, #3
 80076d0:	400a      	ands	r2, r1
 80076d2:	490e      	ldr	r1, [pc, #56]	; (800770c <I2C_TransferConfig+0x68>)
 80076d4:	430a      	orrs	r2, r1
 80076d6:	43d2      	mvns	r2, r2
 80076d8:	401a      	ands	r2, r3
 80076da:	0011      	movs	r1, r2
 80076dc:	193b      	adds	r3, r7, r4
 80076de:	881b      	ldrh	r3, [r3, #0]
 80076e0:	059b      	lsls	r3, r3, #22
 80076e2:	0d9a      	lsrs	r2, r3, #22
 80076e4:	183b      	adds	r3, r7, r0
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	0418      	lsls	r0, r3, #16
 80076ea:	23ff      	movs	r3, #255	; 0xff
 80076ec:	041b      	lsls	r3, r3, #16
 80076ee:	4003      	ands	r3, r0
 80076f0:	431a      	orrs	r2, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	431a      	orrs	r2, r3
 80076f6:	6a3b      	ldr	r3, [r7, #32]
 80076f8:	431a      	orrs	r2, r3
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	430a      	orrs	r2, r1
 8007700:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8007702:	46c0      	nop			; (mov r8, r8)
 8007704:	46bd      	mov	sp, r7
 8007706:	b005      	add	sp, #20
 8007708:	bd90      	pop	{r4, r7, pc}
 800770a:	46c0      	nop			; (mov r8, r8)
 800770c:	03ff63ff 	.word	0x03ff63ff

08007710 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	000a      	movs	r2, r1
 800771a:	1cbb      	adds	r3, r7, #2
 800771c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800771e:	2300      	movs	r3, #0
 8007720:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007722:	1cbb      	adds	r3, r7, #2
 8007724:	881b      	ldrh	r3, [r3, #0]
 8007726:	2201      	movs	r2, #1
 8007728:	4013      	ands	r3, r2
 800772a:	d010      	beq.n	800774e <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2242      	movs	r2, #66	; 0x42
 8007730:	4313      	orrs	r3, r2
 8007732:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2241      	movs	r2, #65	; 0x41
 8007738:	5c9b      	ldrb	r3, [r3, r2]
 800773a:	b2db      	uxtb	r3, r3
 800773c:	001a      	movs	r2, r3
 800773e:	2328      	movs	r3, #40	; 0x28
 8007740:	4013      	ands	r3, r2
 8007742:	2b28      	cmp	r3, #40	; 0x28
 8007744:	d003      	beq.n	800774e <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	22b0      	movs	r2, #176	; 0xb0
 800774a:	4313      	orrs	r3, r2
 800774c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800774e:	1cbb      	adds	r3, r7, #2
 8007750:	881b      	ldrh	r3, [r3, #0]
 8007752:	2202      	movs	r2, #2
 8007754:	4013      	ands	r3, r2
 8007756:	d010      	beq.n	800777a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2244      	movs	r2, #68	; 0x44
 800775c:	4313      	orrs	r3, r2
 800775e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2241      	movs	r2, #65	; 0x41
 8007764:	5c9b      	ldrb	r3, [r3, r2]
 8007766:	b2db      	uxtb	r3, r3
 8007768:	001a      	movs	r2, r3
 800776a:	2328      	movs	r3, #40	; 0x28
 800776c:	4013      	ands	r3, r2
 800776e:	2b28      	cmp	r3, #40	; 0x28
 8007770:	d003      	beq.n	800777a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	22b0      	movs	r2, #176	; 0xb0
 8007776:	4313      	orrs	r3, r2
 8007778:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800777a:	1cbb      	adds	r3, r7, #2
 800777c:	2200      	movs	r2, #0
 800777e:	5e9b      	ldrsh	r3, [r3, r2]
 8007780:	2b00      	cmp	r3, #0
 8007782:	da03      	bge.n	800778c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	22b8      	movs	r2, #184	; 0xb8
 8007788:	4313      	orrs	r3, r2
 800778a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800778c:	1cbb      	adds	r3, r7, #2
 800778e:	881b      	ldrh	r3, [r3, #0]
 8007790:	2b10      	cmp	r3, #16
 8007792:	d103      	bne.n	800779c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2290      	movs	r2, #144	; 0x90
 8007798:	4313      	orrs	r3, r2
 800779a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800779c:	1cbb      	adds	r3, r7, #2
 800779e:	881b      	ldrh	r3, [r3, #0]
 80077a0:	2b20      	cmp	r3, #32
 80077a2:	d103      	bne.n	80077ac <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2220      	movs	r2, #32
 80077a8:	4313      	orrs	r3, r2
 80077aa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80077ac:	1cbb      	adds	r3, r7, #2
 80077ae:	881b      	ldrh	r3, [r3, #0]
 80077b0:	2b40      	cmp	r3, #64	; 0x40
 80077b2:	d103      	bne.n	80077bc <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2240      	movs	r2, #64	; 0x40
 80077b8:	4313      	orrs	r3, r2
 80077ba:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	43d9      	mvns	r1, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	400a      	ands	r2, r1
 80077cc:	601a      	str	r2, [r3, #0]
}
 80077ce:	46c0      	nop			; (mov r8, r8)
 80077d0:	46bd      	mov	sp, r7
 80077d2:	b004      	add	sp, #16
 80077d4:	bd80      	pop	{r7, pc}
	...

080077d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2241      	movs	r2, #65	; 0x41
 80077e6:	5c9b      	ldrb	r3, [r3, r2]
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	2b20      	cmp	r3, #32
 80077ec:	d138      	bne.n	8007860 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2240      	movs	r2, #64	; 0x40
 80077f2:	5c9b      	ldrb	r3, [r3, r2]
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d101      	bne.n	80077fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80077f8:	2302      	movs	r3, #2
 80077fa:	e032      	b.n	8007862 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2240      	movs	r2, #64	; 0x40
 8007800:	2101      	movs	r1, #1
 8007802:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2241      	movs	r2, #65	; 0x41
 8007808:	2124      	movs	r1, #36	; 0x24
 800780a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2101      	movs	r1, #1
 8007818:	438a      	bics	r2, r1
 800781a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4911      	ldr	r1, [pc, #68]	; (800786c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8007828:	400a      	ands	r2, r1
 800782a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	6819      	ldr	r1, [r3, #0]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	683a      	ldr	r2, [r7, #0]
 8007838:	430a      	orrs	r2, r1
 800783a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2101      	movs	r1, #1
 8007848:	430a      	orrs	r2, r1
 800784a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2241      	movs	r2, #65	; 0x41
 8007850:	2120      	movs	r1, #32
 8007852:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2240      	movs	r2, #64	; 0x40
 8007858:	2100      	movs	r1, #0
 800785a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800785c:	2300      	movs	r3, #0
 800785e:	e000      	b.n	8007862 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007860:	2302      	movs	r3, #2
  }
}
 8007862:	0018      	movs	r0, r3
 8007864:	46bd      	mov	sp, r7
 8007866:	b002      	add	sp, #8
 8007868:	bd80      	pop	{r7, pc}
 800786a:	46c0      	nop			; (mov r8, r8)
 800786c:	ffffefff 	.word	0xffffefff

08007870 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2241      	movs	r2, #65	; 0x41
 800787e:	5c9b      	ldrb	r3, [r3, r2]
 8007880:	b2db      	uxtb	r3, r3
 8007882:	2b20      	cmp	r3, #32
 8007884:	d139      	bne.n	80078fa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2240      	movs	r2, #64	; 0x40
 800788a:	5c9b      	ldrb	r3, [r3, r2]
 800788c:	2b01      	cmp	r3, #1
 800788e:	d101      	bne.n	8007894 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007890:	2302      	movs	r3, #2
 8007892:	e033      	b.n	80078fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2240      	movs	r2, #64	; 0x40
 8007898:	2101      	movs	r1, #1
 800789a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2241      	movs	r2, #65	; 0x41
 80078a0:	2124      	movs	r1, #36	; 0x24
 80078a2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2101      	movs	r1, #1
 80078b0:	438a      	bics	r2, r1
 80078b2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	4a11      	ldr	r2, [pc, #68]	; (8007904 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80078c0:	4013      	ands	r3, r2
 80078c2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	021b      	lsls	r3, r3, #8
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	68fa      	ldr	r2, [r7, #12]
 80078d4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2101      	movs	r1, #1
 80078e2:	430a      	orrs	r2, r1
 80078e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2241      	movs	r2, #65	; 0x41
 80078ea:	2120      	movs	r1, #32
 80078ec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2240      	movs	r2, #64	; 0x40
 80078f2:	2100      	movs	r1, #0
 80078f4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80078f6:	2300      	movs	r3, #0
 80078f8:	e000      	b.n	80078fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80078fa:	2302      	movs	r3, #2
  }
}
 80078fc:	0018      	movs	r0, r3
 80078fe:	46bd      	mov	sp, r7
 8007900:	b004      	add	sp, #16
 8007902:	bd80      	pop	{r7, pc}
 8007904:	fffff0ff 	.word	0xfffff0ff

08007908 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b088      	sub	sp, #32
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d101      	bne.n	800791a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e0e5      	b.n	8007ae6 <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2235      	movs	r2, #53	; 0x35
 800791e:	5c9b      	ldrb	r3, [r3, r2]
 8007920:	b2db      	uxtb	r3, r3
 8007922:	2b00      	cmp	r3, #0
 8007924:	d107      	bne.n	8007936 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2234      	movs	r2, #52	; 0x34
 800792a:	2100      	movs	r1, #0
 800792c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	0018      	movs	r0, r3
 8007932:	f7fd fa69 	bl	8004e08 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2235      	movs	r2, #53	; 0x35
 800793a:	2102      	movs	r1, #2
 800793c:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	69da      	ldr	r2, [r3, #28]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4969      	ldr	r1, [pc, #420]	; (8007af0 <HAL_I2S_Init+0x1e8>)
 800794a:	400a      	ands	r2, r1
 800794c:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2202      	movs	r2, #2
 8007954:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	695b      	ldr	r3, [r3, #20]
 800795a:	2b02      	cmp	r3, #2
 800795c:	d100      	bne.n	8007960 <HAL_I2S_Init+0x58>
 800795e:	e076      	b.n	8007a4e <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d102      	bne.n	800796e <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8007968:	2310      	movs	r3, #16
 800796a:	617b      	str	r3, [r7, #20]
 800796c:	e001      	b.n	8007972 <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800796e:	2320      	movs	r3, #32
 8007970:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	2b20      	cmp	r3, #32
 8007978:	d802      	bhi.n	8007980 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	005b      	lsls	r3, r3, #1
 800797e:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 8007980:	2380      	movs	r3, #128	; 0x80
 8007982:	011b      	lsls	r3, r3, #4
 8007984:	0018      	movs	r0, r3
 8007986:	f001 f971 	bl	8008c6c <HAL_RCCEx_GetPeriphCLKFreq>
 800798a:	0003      	movs	r3, r0
 800798c:	60fb      	str	r3, [r7, #12]
#endif
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	691a      	ldr	r2, [r3, #16]
 8007992:	2380      	movs	r3, #128	; 0x80
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	429a      	cmp	r2, r3
 8007998:	d131      	bne.n	80079fe <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d016      	beq.n	80079d0 <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	0019      	movs	r1, r3
 80079a8:	68f8      	ldr	r0, [r7, #12]
 80079aa:	f7f8 fbab 	bl	8000104 <__udivsi3>
 80079ae:	0003      	movs	r3, r0
 80079b0:	001a      	movs	r2, r3
 80079b2:	0013      	movs	r3, r2
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	189b      	adds	r3, r3, r2
 80079b8:	005b      	lsls	r3, r3, #1
 80079ba:	001a      	movs	r2, r3
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	695b      	ldr	r3, [r3, #20]
 80079c0:	0019      	movs	r1, r3
 80079c2:	0010      	movs	r0, r2
 80079c4:	f7f8 fb9e 	bl	8000104 <__udivsi3>
 80079c8:	0003      	movs	r3, r0
 80079ca:	3305      	adds	r3, #5
 80079cc:	613b      	str	r3, [r7, #16]
 80079ce:	e02a      	b.n	8007a26 <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	00db      	lsls	r3, r3, #3
 80079d4:	0019      	movs	r1, r3
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	f7f8 fb94 	bl	8000104 <__udivsi3>
 80079dc:	0003      	movs	r3, r0
 80079de:	001a      	movs	r2, r3
 80079e0:	0013      	movs	r3, r2
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	189b      	adds	r3, r3, r2
 80079e6:	005b      	lsls	r3, r3, #1
 80079e8:	001a      	movs	r2, r3
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	695b      	ldr	r3, [r3, #20]
 80079ee:	0019      	movs	r1, r3
 80079f0:	0010      	movs	r0, r2
 80079f2:	f7f8 fb87 	bl	8000104 <__udivsi3>
 80079f6:	0003      	movs	r3, r0
 80079f8:	3305      	adds	r3, #5
 80079fa:	613b      	str	r3, [r7, #16]
 80079fc:	e013      	b.n	8007a26 <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80079fe:	6979      	ldr	r1, [r7, #20]
 8007a00:	68f8      	ldr	r0, [r7, #12]
 8007a02:	f7f8 fb7f 	bl	8000104 <__udivsi3>
 8007a06:	0003      	movs	r3, r0
 8007a08:	001a      	movs	r2, r3
 8007a0a:	0013      	movs	r3, r2
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	189b      	adds	r3, r3, r2
 8007a10:	005b      	lsls	r3, r3, #1
 8007a12:	001a      	movs	r2, r3
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	695b      	ldr	r3, [r3, #20]
 8007a18:	0019      	movs	r1, r3
 8007a1a:	0010      	movs	r0, r2
 8007a1c:	f7f8 fb72 	bl	8000104 <__udivsi3>
 8007a20:	0003      	movs	r3, r0
 8007a22:	3305      	adds	r3, #5
 8007a24:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	210a      	movs	r1, #10
 8007a2a:	0018      	movs	r0, r3
 8007a2c:	f7f8 fb6a 	bl	8000104 <__udivsi3>
 8007a30:	0003      	movs	r3, r0
 8007a32:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	2201      	movs	r2, #1
 8007a38:	4013      	ands	r3, r2
 8007a3a:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8007a3c:	693a      	ldr	r2, [r7, #16]
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	1ad3      	subs	r3, r2, r3
 8007a42:	085b      	lsrs	r3, r3, #1
 8007a44:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8007a46:	69bb      	ldr	r3, [r7, #24]
 8007a48:	021b      	lsls	r3, r3, #8
 8007a4a:	61bb      	str	r3, [r7, #24]
 8007a4c:	e003      	b.n	8007a56 <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8007a4e:	2302      	movs	r3, #2
 8007a50:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8007a52:	2300      	movs	r3, #0
 8007a54:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8007a56:	69fb      	ldr	r3, [r7, #28]
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d902      	bls.n	8007a62 <HAL_I2S_Init+0x15a>
 8007a5c:	69fb      	ldr	r3, [r7, #28]
 8007a5e:	2bff      	cmp	r3, #255	; 0xff
 8007a60:	d907      	bls.n	8007a72 <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a66:	2210      	movs	r2, #16
 8007a68:	431a      	orrs	r2, r3
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e039      	b.n	8007ae6 <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	691a      	ldr	r2, [r3, #16]
 8007a76:	69bb      	ldr	r3, [r7, #24]
 8007a78:	431a      	orrs	r2, r3
 8007a7a:	0011      	movs	r1, r2
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	69fa      	ldr	r2, [r7, #28]
 8007a82:	430a      	orrs	r2, r1
 8007a84:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	69db      	ldr	r3, [r3, #28]
 8007a8c:	4a18      	ldr	r2, [pc, #96]	; (8007af0 <HAL_I2S_Init+0x1e8>)
 8007a8e:	401a      	ands	r2, r3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6859      	ldr	r1, [r3, #4]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	4319      	orrs	r1, r3
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	4319      	orrs	r1, r3
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	699b      	ldr	r3, [r3, #24]
 8007aa4:	430b      	orrs	r3, r1
 8007aa6:	431a      	orrs	r2, r3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2180      	movs	r1, #128	; 0x80
 8007aae:	0109      	lsls	r1, r1, #4
 8007ab0:	430a      	orrs	r2, r1
 8007ab2:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	2b30      	cmp	r3, #48	; 0x30
 8007aba:	d003      	beq.n	8007ac4 <HAL_I2S_Init+0x1bc>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	2bb0      	cmp	r3, #176	; 0xb0
 8007ac2:	d108      	bne.n	8007ad6 <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	69da      	ldr	r2, [r3, #28]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	2180      	movs	r1, #128	; 0x80
 8007ad0:	0149      	lsls	r1, r1, #5
 8007ad2:	430a      	orrs	r2, r1
 8007ad4:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2235      	movs	r2, #53	; 0x35
 8007ae0:	2101      	movs	r1, #1
 8007ae2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	0018      	movs	r0, r3
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	b008      	add	sp, #32
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	46c0      	nop			; (mov r8, r8)
 8007af0:	fffff040 	.word	0xfffff040

08007af4 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b086      	sub	sp, #24
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	1dbb      	adds	r3, r7, #6
 8007b00:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d003      	beq.n	8007b10 <HAL_I2S_Transmit_DMA+0x1c>
 8007b08:	1dbb      	adds	r3, r7, #6
 8007b0a:	881b      	ldrh	r3, [r3, #0]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d101      	bne.n	8007b14 <HAL_I2S_Transmit_DMA+0x20>
  {
    return  HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	e091      	b.n	8007c38 <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2234      	movs	r2, #52	; 0x34
 8007b18:	5c9b      	ldrb	r3, [r3, r2]
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d101      	bne.n	8007b24 <HAL_I2S_Transmit_DMA+0x30>
 8007b20:	2302      	movs	r3, #2
 8007b22:	e089      	b.n	8007c38 <HAL_I2S_Transmit_DMA+0x144>
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2234      	movs	r2, #52	; 0x34
 8007b28:	2101      	movs	r1, #1
 8007b2a:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2235      	movs	r2, #53	; 0x35
 8007b30:	5c9b      	ldrb	r3, [r3, r2]
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d005      	beq.n	8007b44 <HAL_I2S_Transmit_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2234      	movs	r2, #52	; 0x34
 8007b3c:	2100      	movs	r1, #0
 8007b3e:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8007b40:	2302      	movs	r3, #2
 8007b42:	e079      	b.n	8007c38 <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2235      	movs	r2, #53	; 0x35
 8007b48:	2103      	movs	r1, #3
 8007b4a:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->pTxBuffPtr = pData;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	68ba      	ldr	r2, [r7, #8]
 8007b56:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	69db      	ldr	r3, [r3, #28]
 8007b5e:	2207      	movs	r2, #7
 8007b60:	4013      	ands	r3, r2
 8007b62:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	2b03      	cmp	r3, #3
 8007b68:	d002      	beq.n	8007b70 <HAL_I2S_Transmit_DMA+0x7c>
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	2b05      	cmp	r3, #5
 8007b6e:	d10c      	bne.n	8007b8a <HAL_I2S_Transmit_DMA+0x96>
  {
    hi2s->TxXferSize = (Size << 1U);
 8007b70:	1dbb      	adds	r3, r7, #6
 8007b72:	881b      	ldrh	r3, [r3, #0]
 8007b74:	18db      	adds	r3, r3, r3
 8007b76:	b29a      	uxth	r2, r3
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 8007b7c:	1dbb      	adds	r3, r7, #6
 8007b7e:	881b      	ldrh	r3, [r3, #0]
 8007b80:	18db      	adds	r3, r3, r3
 8007b82:	b29a      	uxth	r2, r3
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	845a      	strh	r2, [r3, #34]	; 0x22
 8007b88:	e007      	b.n	8007b9a <HAL_I2S_Transmit_DMA+0xa6>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	1dba      	adds	r2, r7, #6
 8007b8e:	8812      	ldrh	r2, [r2, #0]
 8007b90:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	1dba      	adds	r2, r7, #6
 8007b96:	8812      	ldrh	r2, [r2, #0]
 8007b98:	845a      	strh	r2, [r3, #34]	; 0x22
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b9e:	4a28      	ldr	r2, [pc, #160]	; (8007c40 <HAL_I2S_Transmit_DMA+0x14c>)
 8007ba0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba6:	4a27      	ldr	r2, [pc, #156]	; (8007c44 <HAL_I2S_Transmit_DMA+0x150>)
 8007ba8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bae:	4a26      	ldr	r2, [pc, #152]	; (8007c48 <HAL_I2S_Transmit_DMA+0x154>)
 8007bb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
                                 (uint32_t)hi2s->pTxBuffPtr,
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	69db      	ldr	r3, [r3, #28]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007bba:	0019      	movs	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007bc2:	001a      	movs	r2, r3
                                 hi2s->TxXferSize))
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	8c1b      	ldrh	r3, [r3, #32]
 8007bc8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007bca:	f7fe f96f 	bl	8005eac <HAL_DMA_Start_IT>
 8007bce:	1e03      	subs	r3, r0, #0
 8007bd0:	d00f      	beq.n	8007bf2 <HAL_I2S_Transmit_DMA+0xfe>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd6:	2208      	movs	r2, #8
 8007bd8:	431a      	orrs	r2, r3
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	639a      	str	r2, [r3, #56]	; 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2235      	movs	r2, #53	; 0x35
 8007be2:	2101      	movs	r1, #1
 8007be4:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2234      	movs	r2, #52	; 0x34
 8007bea:	2100      	movs	r1, #0
 8007bec:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e022      	b.n	8007c38 <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	69da      	ldr	r2, [r3, #28]
 8007bf8:	2380      	movs	r3, #128	; 0x80
 8007bfa:	00db      	lsls	r3, r3, #3
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	d108      	bne.n	8007c12 <HAL_I2S_Transmit_DMA+0x11e>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	69da      	ldr	r2, [r3, #28]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	2180      	movs	r1, #128	; 0x80
 8007c0c:	00c9      	lsls	r1, r1, #3
 8007c0e:	430a      	orrs	r2, r1
 8007c10:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	2202      	movs	r2, #2
 8007c1a:	4013      	ands	r3, r2
 8007c1c:	d107      	bne.n	8007c2e <HAL_I2S_Transmit_DMA+0x13a>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	685a      	ldr	r2, [r3, #4]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2102      	movs	r1, #2
 8007c2a:	430a      	orrs	r2, r1
 8007c2c:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2234      	movs	r2, #52	; 0x34
 8007c32:	2100      	movs	r1, #0
 8007c34:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8007c36:	2300      	movs	r3, #0
}
 8007c38:	0018      	movs	r0, r3
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	b006      	add	sp, #24
 8007c3e:	bd80      	pop	{r7, pc}
 8007c40:	08007da7 	.word	0x08007da7
 8007c44:	08007d63 	.word	0x08007d63
 8007c48:	08007dc5 	.word	0x08007dc5

08007c4c <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hi2s->Instance->CR2;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hi2s->Instance->SR;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	60bb      	str	r3, [r7, #8]

  /* I2S in mode Receiver ------------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	099b      	lsrs	r3, r3, #6
 8007c68:	001a      	movs	r2, r3
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	4013      	ands	r3, r2
 8007c6e:	d10e      	bne.n	8007c8e <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	2201      	movs	r2, #1
 8007c74:	4013      	ands	r3, r2
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8007c76:	d00a      	beq.n	8007c8e <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	099b      	lsrs	r3, r3, #6
 8007c7c:	001a      	movs	r2, r3
 8007c7e:	2301      	movs	r3, #1
 8007c80:	4013      	ands	r3, r2
 8007c82:	d004      	beq.n	8007c8e <HAL_I2S_IRQHandler+0x42>
  {
    I2S_Receive_IT(hi2s);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	0018      	movs	r0, r3
 8007c88:	f000 f8f2 	bl	8007e70 <I2S_Receive_IT>
    return;
 8007c8c:	e046      	b.n	8007d1c <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S in mode Tramitter -----------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_TXE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_TXE) != RESET))
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	085b      	lsrs	r3, r3, #1
 8007c92:	001a      	movs	r2, r3
 8007c94:	2301      	movs	r3, #1
 8007c96:	4013      	ands	r3, r2
 8007c98:	d00a      	beq.n	8007cb0 <HAL_I2S_IRQHandler+0x64>
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	09db      	lsrs	r3, r3, #7
 8007c9e:	001a      	movs	r2, r3
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	4013      	ands	r3, r2
 8007ca4:	d004      	beq.n	8007cb0 <HAL_I2S_IRQHandler+0x64>
  {
    I2S_Transmit_IT(hi2s);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	0018      	movs	r0, r3
 8007caa:	f000 f8b2 	bl	8007e12 <I2S_Transmit_IT>
    return;
 8007cae:	e035      	b.n	8007d1c <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S interrupt error -------------------------------------------------*/
  if (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_ERR) != RESET)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	095b      	lsrs	r3, r3, #5
 8007cb4:	001a      	movs	r2, r3
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	4013      	ands	r3, r2
 8007cba:	d02f      	beq.n	8007d1c <HAL_I2S_IRQHandler+0xd0>
  {
    /* I2S Overrun error interrupt occurred ---------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) != RESET)
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	099b      	lsrs	r3, r3, #6
 8007cc0:	001a      	movs	r2, r3
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	4013      	ands	r3, r2
 8007cc6:	d00d      	beq.n	8007ce4 <HAL_I2S_IRQHandler+0x98>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	685a      	ldr	r2, [r3, #4]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2160      	movs	r1, #96	; 0x60
 8007cd4:	438a      	bics	r2, r1
 8007cd6:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cdc:	2202      	movs	r2, #2
 8007cde:	431a      	orrs	r2, r3
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_UDR) != RESET)
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	08db      	lsrs	r3, r3, #3
 8007ce8:	001a      	movs	r2, r3
 8007cea:	2301      	movs	r3, #1
 8007cec:	4013      	ands	r3, r2
 8007cee:	d00d      	beq.n	8007d0c <HAL_I2S_IRQHandler+0xc0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	685a      	ldr	r2, [r3, #4]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	21a0      	movs	r1, #160	; 0xa0
 8007cfc:	438a      	bics	r2, r1
 8007cfe:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d04:	2204      	movs	r2, #4
 8007d06:	431a      	orrs	r2, r3
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Set the I2S State ready */
    hi2s->State = HAL_I2S_STATE_READY;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2235      	movs	r2, #53	; 0x35
 8007d10:	2101      	movs	r1, #1
 8007d12:	5499      	strb	r1, [r3, r2]

    /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->ErrorCallback(hi2s);
#else
    HAL_I2S_ErrorCallback(hi2s);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	0018      	movs	r0, r3
 8007d18:	f000 f81b 	bl	8007d52 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	b004      	add	sp, #16
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007d22:	b580      	push	{r7, lr}
 8007d24:	b082      	sub	sp, #8
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007d2a:	46c0      	nop			; (mov r8, r8)
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	b002      	add	sp, #8
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b082      	sub	sp, #8
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8007d3a:	46c0      	nop			; (mov r8, r8)
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	b002      	add	sp, #8
 8007d40:	bd80      	pop	{r7, pc}

08007d42 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b082      	sub	sp, #8
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8007d4a:	46c0      	nop			; (mov r8, r8)
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	b002      	add	sp, #8
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b082      	sub	sp, #8
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8007d5a:	46c0      	nop			; (mov r8, r8)
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	b002      	add	sp, #8
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b084      	sub	sp, #16
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d6e:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	69db      	ldr	r3, [r3, #28]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d10e      	bne.n	8007d96 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	685a      	ldr	r2, [r3, #4]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2102      	movs	r1, #2
 8007d84:	438a      	bics	r2, r1
 8007d86:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	845a      	strh	r2, [r3, #34]	; 0x22
    hi2s->State = HAL_I2S_STATE_READY;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2235      	movs	r2, #53	; 0x35
 8007d92:	2101      	movs	r1, #1
 8007d94:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	0018      	movs	r0, r3
 8007d9a:	f7ff ffca 	bl	8007d32 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007d9e:	46c0      	nop			; (mov r8, r8)
 8007da0:	46bd      	mov	sp, r7
 8007da2:	b004      	add	sp, #16
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b084      	sub	sp, #16
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db2:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	0018      	movs	r0, r3
 8007db8:	f7ff ffb3 	bl	8007d22 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007dbc:	46c0      	nop			; (mov r8, r8)
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	b004      	add	sp, #16
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd0:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	685a      	ldr	r2, [r3, #4]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2103      	movs	r1, #3
 8007dde:	438a      	bics	r2, r1
 8007de0:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2200      	movs	r2, #0
 8007de6:	845a      	strh	r2, [r3, #34]	; 0x22
  hi2s->RxXferCount = 0U;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2200      	movs	r2, #0
 8007dec:	855a      	strh	r2, [r3, #42]	; 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2235      	movs	r2, #53	; 0x35
 8007df2:	2101      	movs	r1, #1
 8007df4:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dfa:	2208      	movs	r2, #8
 8007dfc:	431a      	orrs	r2, r3
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	639a      	str	r2, [r3, #56]	; 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	0018      	movs	r0, r3
 8007e06:	f7ff ffa4 	bl	8007d52 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007e0a:	46c0      	nop			; (mov r8, r8)
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	b004      	add	sp, #16
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b082      	sub	sp, #8
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	69db      	ldr	r3, [r3, #28]
 8007e1e:	881a      	ldrh	r2, [r3, #0]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	69db      	ldr	r3, [r3, #28]
 8007e2a:	1c9a      	adds	r2, r3, #2
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	61da      	str	r2, [r3, #28]
  hi2s->TxXferCount--;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	3b01      	subs	r3, #1
 8007e38:	b29a      	uxth	r2, r3
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	845a      	strh	r2, [r3, #34]	; 0x22

  if (hi2s->TxXferCount == 0U)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d10f      	bne.n	8007e68 <I2S_Transmit_IT+0x56>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	685a      	ldr	r2, [r3, #4]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	21a0      	movs	r1, #160	; 0xa0
 8007e54:	438a      	bics	r2, r1
 8007e56:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2235      	movs	r2, #53	; 0x35
 8007e5c:	2101      	movs	r1, #1
 8007e5e:	5499      	strb	r1, [r3, r2]
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	0018      	movs	r0, r3
 8007e64:	f7ff ff65 	bl	8007d32 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007e68:	46c0      	nop			; (mov r8, r8)
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	b002      	add	sp, #8
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	68da      	ldr	r2, [r3, #12]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e82:	b292      	uxth	r2, r2
 8007e84:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8a:	1c9a      	adds	r2, r3, #2
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->RxXferCount--;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	3b01      	subs	r3, #1
 8007e98:	b29a      	uxth	r2, r3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->RxXferCount == 0U)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d10f      	bne.n	8007ec8 <I2S_Receive_IT+0x58>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	685a      	ldr	r2, [r3, #4]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	2160      	movs	r1, #96	; 0x60
 8007eb4:	438a      	bics	r2, r1
 8007eb6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2235      	movs	r2, #53	; 0x35
 8007ebc:	2101      	movs	r1, #1
 8007ebe:	5499      	strb	r1, [r3, r2]
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	0018      	movs	r0, r3
 8007ec4:	f7ff ff3d 	bl	8007d42 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007ec8:	46c0      	nop			; (mov r8, r8)
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	b002      	add	sp, #8
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b084      	sub	sp, #16
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8007ed8:	4b19      	ldr	r3, [pc, #100]	; (8007f40 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a19      	ldr	r2, [pc, #100]	; (8007f44 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8007ede:	4013      	ands	r3, r2
 8007ee0:	0019      	movs	r1, r3
 8007ee2:	4b17      	ldr	r3, [pc, #92]	; (8007f40 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	430a      	orrs	r2, r1
 8007ee8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	2380      	movs	r3, #128	; 0x80
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d11f      	bne.n	8007f34 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8007ef4:	4b14      	ldr	r3, [pc, #80]	; (8007f48 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	0013      	movs	r3, r2
 8007efa:	005b      	lsls	r3, r3, #1
 8007efc:	189b      	adds	r3, r3, r2
 8007efe:	005b      	lsls	r3, r3, #1
 8007f00:	4912      	ldr	r1, [pc, #72]	; (8007f4c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8007f02:	0018      	movs	r0, r3
 8007f04:	f7f8 f8fe 	bl	8000104 <__udivsi3>
 8007f08:	0003      	movs	r3, r0
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007f0e:	e008      	b.n	8007f22 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d003      	beq.n	8007f1e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	3b01      	subs	r3, #1
 8007f1a:	60fb      	str	r3, [r7, #12]
 8007f1c:	e001      	b.n	8007f22 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8007f1e:	2303      	movs	r3, #3
 8007f20:	e009      	b.n	8007f36 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007f22:	4b07      	ldr	r3, [pc, #28]	; (8007f40 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007f24:	695a      	ldr	r2, [r3, #20]
 8007f26:	2380      	movs	r3, #128	; 0x80
 8007f28:	00db      	lsls	r3, r3, #3
 8007f2a:	401a      	ands	r2, r3
 8007f2c:	2380      	movs	r3, #128	; 0x80
 8007f2e:	00db      	lsls	r3, r3, #3
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d0ed      	beq.n	8007f10 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8007f34:	2300      	movs	r3, #0
}
 8007f36:	0018      	movs	r0, r3
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	b004      	add	sp, #16
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	46c0      	nop			; (mov r8, r8)
 8007f40:	40007000 	.word	0x40007000
 8007f44:	fffff9ff 	.word	0xfffff9ff
 8007f48:	20000034 	.word	0x20000034
 8007f4c:	000f4240 	.word	0x000f4240

08007f50 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8007f54:	4b03      	ldr	r3, [pc, #12]	; (8007f64 <LL_RCC_GetAPB1Prescaler+0x14>)
 8007f56:	689a      	ldr	r2, [r3, #8]
 8007f58:	23e0      	movs	r3, #224	; 0xe0
 8007f5a:	01db      	lsls	r3, r3, #7
 8007f5c:	4013      	ands	r3, r2
}
 8007f5e:	0018      	movs	r0, r3
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	40021000 	.word	0x40021000

08007f68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b088      	sub	sp, #32
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d101      	bne.n	8007f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007f76:	2301      	movs	r3, #1
 8007f78:	e304      	b.n	8008584 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	4013      	ands	r3, r2
 8007f82:	d100      	bne.n	8007f86 <HAL_RCC_OscConfig+0x1e>
 8007f84:	e07c      	b.n	8008080 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f86:	4bc3      	ldr	r3, [pc, #780]	; (8008294 <HAL_RCC_OscConfig+0x32c>)
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	2238      	movs	r2, #56	; 0x38
 8007f8c:	4013      	ands	r3, r2
 8007f8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007f90:	4bc0      	ldr	r3, [pc, #768]	; (8008294 <HAL_RCC_OscConfig+0x32c>)
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	2203      	movs	r2, #3
 8007f96:	4013      	ands	r3, r2
 8007f98:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	2b10      	cmp	r3, #16
 8007f9e:	d102      	bne.n	8007fa6 <HAL_RCC_OscConfig+0x3e>
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	2b03      	cmp	r3, #3
 8007fa4:	d002      	beq.n	8007fac <HAL_RCC_OscConfig+0x44>
 8007fa6:	69bb      	ldr	r3, [r7, #24]
 8007fa8:	2b08      	cmp	r3, #8
 8007faa:	d10b      	bne.n	8007fc4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fac:	4bb9      	ldr	r3, [pc, #740]	; (8008294 <HAL_RCC_OscConfig+0x32c>)
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	2380      	movs	r3, #128	; 0x80
 8007fb2:	029b      	lsls	r3, r3, #10
 8007fb4:	4013      	ands	r3, r2
 8007fb6:	d062      	beq.n	800807e <HAL_RCC_OscConfig+0x116>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d15e      	bne.n	800807e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	e2df      	b.n	8008584 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	685a      	ldr	r2, [r3, #4]
 8007fc8:	2380      	movs	r3, #128	; 0x80
 8007fca:	025b      	lsls	r3, r3, #9
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d107      	bne.n	8007fe0 <HAL_RCC_OscConfig+0x78>
 8007fd0:	4bb0      	ldr	r3, [pc, #704]	; (8008294 <HAL_RCC_OscConfig+0x32c>)
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	4baf      	ldr	r3, [pc, #700]	; (8008294 <HAL_RCC_OscConfig+0x32c>)
 8007fd6:	2180      	movs	r1, #128	; 0x80
 8007fd8:	0249      	lsls	r1, r1, #9
 8007fda:	430a      	orrs	r2, r1
 8007fdc:	601a      	str	r2, [r3, #0]
 8007fde:	e020      	b.n	8008022 <HAL_RCC_OscConfig+0xba>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	685a      	ldr	r2, [r3, #4]
 8007fe4:	23a0      	movs	r3, #160	; 0xa0
 8007fe6:	02db      	lsls	r3, r3, #11
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d10e      	bne.n	800800a <HAL_RCC_OscConfig+0xa2>
 8007fec:	4ba9      	ldr	r3, [pc, #676]	; (8008294 <HAL_RCC_OscConfig+0x32c>)
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	4ba8      	ldr	r3, [pc, #672]	; (8008294 <HAL_RCC_OscConfig+0x32c>)
 8007ff2:	2180      	movs	r1, #128	; 0x80
 8007ff4:	02c9      	lsls	r1, r1, #11
 8007ff6:	430a      	orrs	r2, r1
 8007ff8:	601a      	str	r2, [r3, #0]
 8007ffa:	4ba6      	ldr	r3, [pc, #664]	; (8008294 <HAL_RCC_OscConfig+0x32c>)
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	4ba5      	ldr	r3, [pc, #660]	; (8008294 <HAL_RCC_OscConfig+0x32c>)
 8008000:	2180      	movs	r1, #128	; 0x80
 8008002:	0249      	lsls	r1, r1, #9
 8008004:	430a      	orrs	r2, r1
 8008006:	601a      	str	r2, [r3, #0]
 8008008:	e00b      	b.n	8008022 <HAL_RCC_OscConfig+0xba>
 800800a:	4ba2      	ldr	r3, [pc, #648]	; (8008294 <HAL_RCC_OscConfig+0x32c>)
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	4ba1      	ldr	r3, [pc, #644]	; (8008294 <HAL_RCC_OscConfig+0x32c>)
 8008010:	49a1      	ldr	r1, [pc, #644]	; (8008298 <HAL_RCC_OscConfig+0x330>)
 8008012:	400a      	ands	r2, r1
 8008014:	601a      	str	r2, [r3, #0]
 8008016:	4b9f      	ldr	r3, [pc, #636]	; (8008294 <HAL_RCC_OscConfig+0x32c>)
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	4b9e      	ldr	r3, [pc, #632]	; (8008294 <HAL_RCC_OscConfig+0x32c>)
 800801c:	499f      	ldr	r1, [pc, #636]	; (800829c <HAL_RCC_OscConfig+0x334>)
 800801e:	400a      	ands	r2, r1
 8008020:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d014      	beq.n	8008054 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800802a:	f7fd fb33 	bl	8005694 <HAL_GetTick>
 800802e:	0003      	movs	r3, r0
 8008030:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008032:	e008      	b.n	8008046 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008034:	f7fd fb2e 	bl	8005694 <HAL_GetTick>
 8008038:	0002      	movs	r2, r0
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	1ad3      	subs	r3, r2, r3
 800803e:	2b64      	cmp	r3, #100	; 0x64
 8008040:	d901      	bls.n	8008046 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8008042:	2303      	movs	r3, #3
 8008044:	e29e      	b.n	8008584 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008046:	4b93      	ldr	r3, [pc, #588]	; (8008294 <HAL_RCC_OscConfig+0x32c>)
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	2380      	movs	r3, #128	; 0x80
 800804c:	029b      	lsls	r3, r3, #10
 800804e:	4013      	ands	r3, r2
 8008050:	d0f0      	beq.n	8008034 <HAL_RCC_OscConfig+0xcc>
 8008052:	e015      	b.n	8008080 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008054:	f7fd fb1e 	bl	8005694 <HAL_GetTick>
 8008058:	0003      	movs	r3, r0
 800805a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800805c:	e008      	b.n	8008070 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800805e:	f7fd fb19 	bl	8005694 <HAL_GetTick>
 8008062:	0002      	movs	r2, r0
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	1ad3      	subs	r3, r2, r3
 8008068:	2b64      	cmp	r3, #100	; 0x64
 800806a:	d901      	bls.n	8008070 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800806c:	2303      	movs	r3, #3
 800806e:	e289      	b.n	8008584 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008070:	4b88      	ldr	r3, [pc, #544]	; (8008294 <HAL_RCC_OscConfig+0x32c>)
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	2380      	movs	r3, #128	; 0x80
 8008076:	029b      	lsls	r3, r3, #10
 8008078:	4013      	ands	r3, r2
 800807a:	d1f0      	bne.n	800805e <HAL_RCC_OscConfig+0xf6>
 800807c:	e000      	b.n	8008080 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800807e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2202      	movs	r2, #2
 8008086:	4013      	ands	r3, r2
 8008088:	d100      	bne.n	800808c <HAL_RCC_OscConfig+0x124>
 800808a:	e099      	b.n	80081c0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800808c:	4b81      	ldr	r3, [pc, #516]	; (8008294 <HAL_RCC_OscConfig+0x32c>)
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	2238      	movs	r2, #56	; 0x38
 8008092:	4013      	ands	r3, r2
 8008094:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008096:	4b7f      	ldr	r3, [pc, #508]	; (8008294 <HAL_RCC_OscConfig+0x32c>)
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	2203      	movs	r2, #3
 800809c:	4013      	ands	r3, r2
 800809e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	2b10      	cmp	r3, #16
 80080a4:	d102      	bne.n	80080ac <HAL_RCC_OscConfig+0x144>
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	2b02      	cmp	r3, #2
 80080aa:	d002      	beq.n	80080b2 <HAL_RCC_OscConfig+0x14a>
 80080ac:	69bb      	ldr	r3, [r7, #24]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d135      	bne.n	800811e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80080b2:	4b78      	ldr	r3, [pc, #480]	; (8008294 <HAL_RCC_OscConfig+0x32c>)
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	2380      	movs	r3, #128	; 0x80
 80080b8:	00db      	lsls	r3, r3, #3
 80080ba:	4013      	ands	r3, r2
 80080bc:	d005      	beq.n	80080ca <HAL_RCC_OscConfig+0x162>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	68db      	ldr	r3, [r3, #12]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d101      	bne.n	80080ca <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
 80080c8:	e25c      	b.n	8008584 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080ca:	4b72      	ldr	r3, [pc, #456]	; (8008294 <HAL_RCC_OscConfig+0x32c>)
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	4a74      	ldr	r2, [pc, #464]	; (80082a0 <HAL_RCC_OscConfig+0x338>)
 80080d0:	4013      	ands	r3, r2
 80080d2:	0019      	movs	r1, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	695b      	ldr	r3, [r3, #20]
 80080d8:	021a      	lsls	r2, r3, #8
 80080da:	4b6e      	ldr	r3, [pc, #440]	; (8008294 <HAL_RCC_OscConfig+0x32c>)
 80080dc:	430a      	orrs	r2, r1
 80080de:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d112      	bne.n	800810c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80080e6:	4b6b      	ldr	r3, [pc, #428]	; (8008294 <HAL_RCC_OscConfig+0x32c>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a6e      	ldr	r2, [pc, #440]	; (80082a4 <HAL_RCC_OscConfig+0x33c>)
 80080ec:	4013      	ands	r3, r2
 80080ee:	0019      	movs	r1, r3
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	691a      	ldr	r2, [r3, #16]
 80080f4:	4b67      	ldr	r3, [pc, #412]	; (8008294 <HAL_RCC_OscConfig+0x32c>)
 80080f6:	430a      	orrs	r2, r1
 80080f8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80080fa:	4b66      	ldr	r3, [pc, #408]	; (8008294 <HAL_RCC_OscConfig+0x32c>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	0adb      	lsrs	r3, r3, #11
 8008100:	2207      	movs	r2, #7
 8008102:	4013      	ands	r3, r2
 8008104:	4a68      	ldr	r2, [pc, #416]	; (80082a8 <HAL_RCC_OscConfig+0x340>)
 8008106:	40da      	lsrs	r2, r3
 8008108:	4b68      	ldr	r3, [pc, #416]	; (80082ac <HAL_RCC_OscConfig+0x344>)
 800810a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800810c:	4b68      	ldr	r3, [pc, #416]	; (80082b0 <HAL_RCC_OscConfig+0x348>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	0018      	movs	r0, r3
 8008112:	f7fd fa63 	bl	80055dc <HAL_InitTick>
 8008116:	1e03      	subs	r3, r0, #0
 8008118:	d051      	beq.n	80081be <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	e232      	b.n	8008584 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d030      	beq.n	8008188 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008126:	4b5b      	ldr	r3, [pc, #364]	; (8008294 <HAL_RCC_OscConfig+0x32c>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a5e      	ldr	r2, [pc, #376]	; (80082a4 <HAL_RCC_OscConfig+0x33c>)
 800812c:	4013      	ands	r3, r2
 800812e:	0019      	movs	r1, r3
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	691a      	ldr	r2, [r3, #16]
 8008134:	4b57      	ldr	r3, [pc, #348]	; (8008294 <HAL_RCC_OscConfig+0x32c>)
 8008136:	430a      	orrs	r2, r1
 8008138:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800813a:	4b56      	ldr	r3, [pc, #344]	; (8008294 <HAL_RCC_OscConfig+0x32c>)
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	4b55      	ldr	r3, [pc, #340]	; (8008294 <HAL_RCC_OscConfig+0x32c>)
 8008140:	2180      	movs	r1, #128	; 0x80
 8008142:	0049      	lsls	r1, r1, #1
 8008144:	430a      	orrs	r2, r1
 8008146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008148:	f7fd faa4 	bl	8005694 <HAL_GetTick>
 800814c:	0003      	movs	r3, r0
 800814e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008150:	e008      	b.n	8008164 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008152:	f7fd fa9f 	bl	8005694 <HAL_GetTick>
 8008156:	0002      	movs	r2, r0
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	1ad3      	subs	r3, r2, r3
 800815c:	2b02      	cmp	r3, #2
 800815e:	d901      	bls.n	8008164 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008160:	2303      	movs	r3, #3
 8008162:	e20f      	b.n	8008584 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008164:	4b4b      	ldr	r3, [pc, #300]	; (8008294 <HAL_RCC_OscConfig+0x32c>)
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	2380      	movs	r3, #128	; 0x80
 800816a:	00db      	lsls	r3, r3, #3
 800816c:	4013      	ands	r3, r2
 800816e:	d0f0      	beq.n	8008152 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008170:	4b48      	ldr	r3, [pc, #288]	; (8008294 <HAL_RCC_OscConfig+0x32c>)
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	4a4a      	ldr	r2, [pc, #296]	; (80082a0 <HAL_RCC_OscConfig+0x338>)
 8008176:	4013      	ands	r3, r2
 8008178:	0019      	movs	r1, r3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	695b      	ldr	r3, [r3, #20]
 800817e:	021a      	lsls	r2, r3, #8
 8008180:	4b44      	ldr	r3, [pc, #272]	; (8008294 <HAL_RCC_OscConfig+0x32c>)
 8008182:	430a      	orrs	r2, r1
 8008184:	605a      	str	r2, [r3, #4]
 8008186:	e01b      	b.n	80081c0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8008188:	4b42      	ldr	r3, [pc, #264]	; (8008294 <HAL_RCC_OscConfig+0x32c>)
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	4b41      	ldr	r3, [pc, #260]	; (8008294 <HAL_RCC_OscConfig+0x32c>)
 800818e:	4949      	ldr	r1, [pc, #292]	; (80082b4 <HAL_RCC_OscConfig+0x34c>)
 8008190:	400a      	ands	r2, r1
 8008192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008194:	f7fd fa7e 	bl	8005694 <HAL_GetTick>
 8008198:	0003      	movs	r3, r0
 800819a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800819c:	e008      	b.n	80081b0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800819e:	f7fd fa79 	bl	8005694 <HAL_GetTick>
 80081a2:	0002      	movs	r2, r0
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	1ad3      	subs	r3, r2, r3
 80081a8:	2b02      	cmp	r3, #2
 80081aa:	d901      	bls.n	80081b0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80081ac:	2303      	movs	r3, #3
 80081ae:	e1e9      	b.n	8008584 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80081b0:	4b38      	ldr	r3, [pc, #224]	; (8008294 <HAL_RCC_OscConfig+0x32c>)
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	2380      	movs	r3, #128	; 0x80
 80081b6:	00db      	lsls	r3, r3, #3
 80081b8:	4013      	ands	r3, r2
 80081ba:	d1f0      	bne.n	800819e <HAL_RCC_OscConfig+0x236>
 80081bc:	e000      	b.n	80081c0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80081be:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2208      	movs	r2, #8
 80081c6:	4013      	ands	r3, r2
 80081c8:	d047      	beq.n	800825a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80081ca:	4b32      	ldr	r3, [pc, #200]	; (8008294 <HAL_RCC_OscConfig+0x32c>)
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	2238      	movs	r2, #56	; 0x38
 80081d0:	4013      	ands	r3, r2
 80081d2:	2b18      	cmp	r3, #24
 80081d4:	d10a      	bne.n	80081ec <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80081d6:	4b2f      	ldr	r3, [pc, #188]	; (8008294 <HAL_RCC_OscConfig+0x32c>)
 80081d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081da:	2202      	movs	r2, #2
 80081dc:	4013      	ands	r3, r2
 80081de:	d03c      	beq.n	800825a <HAL_RCC_OscConfig+0x2f2>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	699b      	ldr	r3, [r3, #24]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d138      	bne.n	800825a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80081e8:	2301      	movs	r3, #1
 80081ea:	e1cb      	b.n	8008584 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	699b      	ldr	r3, [r3, #24]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d019      	beq.n	8008228 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80081f4:	4b27      	ldr	r3, [pc, #156]	; (8008294 <HAL_RCC_OscConfig+0x32c>)
 80081f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80081f8:	4b26      	ldr	r3, [pc, #152]	; (8008294 <HAL_RCC_OscConfig+0x32c>)
 80081fa:	2101      	movs	r1, #1
 80081fc:	430a      	orrs	r2, r1
 80081fe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008200:	f7fd fa48 	bl	8005694 <HAL_GetTick>
 8008204:	0003      	movs	r3, r0
 8008206:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008208:	e008      	b.n	800821c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800820a:	f7fd fa43 	bl	8005694 <HAL_GetTick>
 800820e:	0002      	movs	r2, r0
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	1ad3      	subs	r3, r2, r3
 8008214:	2b02      	cmp	r3, #2
 8008216:	d901      	bls.n	800821c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8008218:	2303      	movs	r3, #3
 800821a:	e1b3      	b.n	8008584 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800821c:	4b1d      	ldr	r3, [pc, #116]	; (8008294 <HAL_RCC_OscConfig+0x32c>)
 800821e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008220:	2202      	movs	r2, #2
 8008222:	4013      	ands	r3, r2
 8008224:	d0f1      	beq.n	800820a <HAL_RCC_OscConfig+0x2a2>
 8008226:	e018      	b.n	800825a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8008228:	4b1a      	ldr	r3, [pc, #104]	; (8008294 <HAL_RCC_OscConfig+0x32c>)
 800822a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800822c:	4b19      	ldr	r3, [pc, #100]	; (8008294 <HAL_RCC_OscConfig+0x32c>)
 800822e:	2101      	movs	r1, #1
 8008230:	438a      	bics	r2, r1
 8008232:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008234:	f7fd fa2e 	bl	8005694 <HAL_GetTick>
 8008238:	0003      	movs	r3, r0
 800823a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800823c:	e008      	b.n	8008250 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800823e:	f7fd fa29 	bl	8005694 <HAL_GetTick>
 8008242:	0002      	movs	r2, r0
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	1ad3      	subs	r3, r2, r3
 8008248:	2b02      	cmp	r3, #2
 800824a:	d901      	bls.n	8008250 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800824c:	2303      	movs	r3, #3
 800824e:	e199      	b.n	8008584 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008250:	4b10      	ldr	r3, [pc, #64]	; (8008294 <HAL_RCC_OscConfig+0x32c>)
 8008252:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008254:	2202      	movs	r2, #2
 8008256:	4013      	ands	r3, r2
 8008258:	d1f1      	bne.n	800823e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	2204      	movs	r2, #4
 8008260:	4013      	ands	r3, r2
 8008262:	d100      	bne.n	8008266 <HAL_RCC_OscConfig+0x2fe>
 8008264:	e0c6      	b.n	80083f4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008266:	231f      	movs	r3, #31
 8008268:	18fb      	adds	r3, r7, r3
 800826a:	2200      	movs	r2, #0
 800826c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800826e:	4b09      	ldr	r3, [pc, #36]	; (8008294 <HAL_RCC_OscConfig+0x32c>)
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	2238      	movs	r2, #56	; 0x38
 8008274:	4013      	ands	r3, r2
 8008276:	2b20      	cmp	r3, #32
 8008278:	d11e      	bne.n	80082b8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800827a:	4b06      	ldr	r3, [pc, #24]	; (8008294 <HAL_RCC_OscConfig+0x32c>)
 800827c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800827e:	2202      	movs	r2, #2
 8008280:	4013      	ands	r3, r2
 8008282:	d100      	bne.n	8008286 <HAL_RCC_OscConfig+0x31e>
 8008284:	e0b6      	b.n	80083f4 <HAL_RCC_OscConfig+0x48c>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d000      	beq.n	8008290 <HAL_RCC_OscConfig+0x328>
 800828e:	e0b1      	b.n	80083f4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	e177      	b.n	8008584 <HAL_RCC_OscConfig+0x61c>
 8008294:	40021000 	.word	0x40021000
 8008298:	fffeffff 	.word	0xfffeffff
 800829c:	fffbffff 	.word	0xfffbffff
 80082a0:	ffff80ff 	.word	0xffff80ff
 80082a4:	ffffc7ff 	.word	0xffffc7ff
 80082a8:	00f42400 	.word	0x00f42400
 80082ac:	20000034 	.word	0x20000034
 80082b0:	20000038 	.word	0x20000038
 80082b4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80082b8:	4bb4      	ldr	r3, [pc, #720]	; (800858c <HAL_RCC_OscConfig+0x624>)
 80082ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082bc:	2380      	movs	r3, #128	; 0x80
 80082be:	055b      	lsls	r3, r3, #21
 80082c0:	4013      	ands	r3, r2
 80082c2:	d101      	bne.n	80082c8 <HAL_RCC_OscConfig+0x360>
 80082c4:	2301      	movs	r3, #1
 80082c6:	e000      	b.n	80082ca <HAL_RCC_OscConfig+0x362>
 80082c8:	2300      	movs	r3, #0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d011      	beq.n	80082f2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80082ce:	4baf      	ldr	r3, [pc, #700]	; (800858c <HAL_RCC_OscConfig+0x624>)
 80082d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082d2:	4bae      	ldr	r3, [pc, #696]	; (800858c <HAL_RCC_OscConfig+0x624>)
 80082d4:	2180      	movs	r1, #128	; 0x80
 80082d6:	0549      	lsls	r1, r1, #21
 80082d8:	430a      	orrs	r2, r1
 80082da:	63da      	str	r2, [r3, #60]	; 0x3c
 80082dc:	4bab      	ldr	r3, [pc, #684]	; (800858c <HAL_RCC_OscConfig+0x624>)
 80082de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082e0:	2380      	movs	r3, #128	; 0x80
 80082e2:	055b      	lsls	r3, r3, #21
 80082e4:	4013      	ands	r3, r2
 80082e6:	60fb      	str	r3, [r7, #12]
 80082e8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80082ea:	231f      	movs	r3, #31
 80082ec:	18fb      	adds	r3, r7, r3
 80082ee:	2201      	movs	r2, #1
 80082f0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80082f2:	4ba7      	ldr	r3, [pc, #668]	; (8008590 <HAL_RCC_OscConfig+0x628>)
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	2380      	movs	r3, #128	; 0x80
 80082f8:	005b      	lsls	r3, r3, #1
 80082fa:	4013      	ands	r3, r2
 80082fc:	d11a      	bne.n	8008334 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80082fe:	4ba4      	ldr	r3, [pc, #656]	; (8008590 <HAL_RCC_OscConfig+0x628>)
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	4ba3      	ldr	r3, [pc, #652]	; (8008590 <HAL_RCC_OscConfig+0x628>)
 8008304:	2180      	movs	r1, #128	; 0x80
 8008306:	0049      	lsls	r1, r1, #1
 8008308:	430a      	orrs	r2, r1
 800830a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800830c:	f7fd f9c2 	bl	8005694 <HAL_GetTick>
 8008310:	0003      	movs	r3, r0
 8008312:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008314:	e008      	b.n	8008328 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008316:	f7fd f9bd 	bl	8005694 <HAL_GetTick>
 800831a:	0002      	movs	r2, r0
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	1ad3      	subs	r3, r2, r3
 8008320:	2b02      	cmp	r3, #2
 8008322:	d901      	bls.n	8008328 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8008324:	2303      	movs	r3, #3
 8008326:	e12d      	b.n	8008584 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008328:	4b99      	ldr	r3, [pc, #612]	; (8008590 <HAL_RCC_OscConfig+0x628>)
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	2380      	movs	r3, #128	; 0x80
 800832e:	005b      	lsls	r3, r3, #1
 8008330:	4013      	ands	r3, r2
 8008332:	d0f0      	beq.n	8008316 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	2b01      	cmp	r3, #1
 800833a:	d106      	bne.n	800834a <HAL_RCC_OscConfig+0x3e2>
 800833c:	4b93      	ldr	r3, [pc, #588]	; (800858c <HAL_RCC_OscConfig+0x624>)
 800833e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008340:	4b92      	ldr	r3, [pc, #584]	; (800858c <HAL_RCC_OscConfig+0x624>)
 8008342:	2101      	movs	r1, #1
 8008344:	430a      	orrs	r2, r1
 8008346:	65da      	str	r2, [r3, #92]	; 0x5c
 8008348:	e01c      	b.n	8008384 <HAL_RCC_OscConfig+0x41c>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	2b05      	cmp	r3, #5
 8008350:	d10c      	bne.n	800836c <HAL_RCC_OscConfig+0x404>
 8008352:	4b8e      	ldr	r3, [pc, #568]	; (800858c <HAL_RCC_OscConfig+0x624>)
 8008354:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008356:	4b8d      	ldr	r3, [pc, #564]	; (800858c <HAL_RCC_OscConfig+0x624>)
 8008358:	2104      	movs	r1, #4
 800835a:	430a      	orrs	r2, r1
 800835c:	65da      	str	r2, [r3, #92]	; 0x5c
 800835e:	4b8b      	ldr	r3, [pc, #556]	; (800858c <HAL_RCC_OscConfig+0x624>)
 8008360:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008362:	4b8a      	ldr	r3, [pc, #552]	; (800858c <HAL_RCC_OscConfig+0x624>)
 8008364:	2101      	movs	r1, #1
 8008366:	430a      	orrs	r2, r1
 8008368:	65da      	str	r2, [r3, #92]	; 0x5c
 800836a:	e00b      	b.n	8008384 <HAL_RCC_OscConfig+0x41c>
 800836c:	4b87      	ldr	r3, [pc, #540]	; (800858c <HAL_RCC_OscConfig+0x624>)
 800836e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008370:	4b86      	ldr	r3, [pc, #536]	; (800858c <HAL_RCC_OscConfig+0x624>)
 8008372:	2101      	movs	r1, #1
 8008374:	438a      	bics	r2, r1
 8008376:	65da      	str	r2, [r3, #92]	; 0x5c
 8008378:	4b84      	ldr	r3, [pc, #528]	; (800858c <HAL_RCC_OscConfig+0x624>)
 800837a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800837c:	4b83      	ldr	r3, [pc, #524]	; (800858c <HAL_RCC_OscConfig+0x624>)
 800837e:	2104      	movs	r1, #4
 8008380:	438a      	bics	r2, r1
 8008382:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d014      	beq.n	80083b6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800838c:	f7fd f982 	bl	8005694 <HAL_GetTick>
 8008390:	0003      	movs	r3, r0
 8008392:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008394:	e009      	b.n	80083aa <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008396:	f7fd f97d 	bl	8005694 <HAL_GetTick>
 800839a:	0002      	movs	r2, r0
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	1ad3      	subs	r3, r2, r3
 80083a0:	4a7c      	ldr	r2, [pc, #496]	; (8008594 <HAL_RCC_OscConfig+0x62c>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d901      	bls.n	80083aa <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80083a6:	2303      	movs	r3, #3
 80083a8:	e0ec      	b.n	8008584 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80083aa:	4b78      	ldr	r3, [pc, #480]	; (800858c <HAL_RCC_OscConfig+0x624>)
 80083ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083ae:	2202      	movs	r2, #2
 80083b0:	4013      	ands	r3, r2
 80083b2:	d0f0      	beq.n	8008396 <HAL_RCC_OscConfig+0x42e>
 80083b4:	e013      	b.n	80083de <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083b6:	f7fd f96d 	bl	8005694 <HAL_GetTick>
 80083ba:	0003      	movs	r3, r0
 80083bc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80083be:	e009      	b.n	80083d4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083c0:	f7fd f968 	bl	8005694 <HAL_GetTick>
 80083c4:	0002      	movs	r2, r0
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	1ad3      	subs	r3, r2, r3
 80083ca:	4a72      	ldr	r2, [pc, #456]	; (8008594 <HAL_RCC_OscConfig+0x62c>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d901      	bls.n	80083d4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80083d0:	2303      	movs	r3, #3
 80083d2:	e0d7      	b.n	8008584 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80083d4:	4b6d      	ldr	r3, [pc, #436]	; (800858c <HAL_RCC_OscConfig+0x624>)
 80083d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083d8:	2202      	movs	r2, #2
 80083da:	4013      	ands	r3, r2
 80083dc:	d1f0      	bne.n	80083c0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80083de:	231f      	movs	r3, #31
 80083e0:	18fb      	adds	r3, r7, r3
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d105      	bne.n	80083f4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80083e8:	4b68      	ldr	r3, [pc, #416]	; (800858c <HAL_RCC_OscConfig+0x624>)
 80083ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083ec:	4b67      	ldr	r3, [pc, #412]	; (800858c <HAL_RCC_OscConfig+0x624>)
 80083ee:	496a      	ldr	r1, [pc, #424]	; (8008598 <HAL_RCC_OscConfig+0x630>)
 80083f0:	400a      	ands	r2, r1
 80083f2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	69db      	ldr	r3, [r3, #28]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d100      	bne.n	80083fe <HAL_RCC_OscConfig+0x496>
 80083fc:	e0c1      	b.n	8008582 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80083fe:	4b63      	ldr	r3, [pc, #396]	; (800858c <HAL_RCC_OscConfig+0x624>)
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	2238      	movs	r2, #56	; 0x38
 8008404:	4013      	ands	r3, r2
 8008406:	2b10      	cmp	r3, #16
 8008408:	d100      	bne.n	800840c <HAL_RCC_OscConfig+0x4a4>
 800840a:	e081      	b.n	8008510 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	69db      	ldr	r3, [r3, #28]
 8008410:	2b02      	cmp	r3, #2
 8008412:	d156      	bne.n	80084c2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008414:	4b5d      	ldr	r3, [pc, #372]	; (800858c <HAL_RCC_OscConfig+0x624>)
 8008416:	681a      	ldr	r2, [r3, #0]
 8008418:	4b5c      	ldr	r3, [pc, #368]	; (800858c <HAL_RCC_OscConfig+0x624>)
 800841a:	4960      	ldr	r1, [pc, #384]	; (800859c <HAL_RCC_OscConfig+0x634>)
 800841c:	400a      	ands	r2, r1
 800841e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008420:	f7fd f938 	bl	8005694 <HAL_GetTick>
 8008424:	0003      	movs	r3, r0
 8008426:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008428:	e008      	b.n	800843c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800842a:	f7fd f933 	bl	8005694 <HAL_GetTick>
 800842e:	0002      	movs	r2, r0
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	1ad3      	subs	r3, r2, r3
 8008434:	2b02      	cmp	r3, #2
 8008436:	d901      	bls.n	800843c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8008438:	2303      	movs	r3, #3
 800843a:	e0a3      	b.n	8008584 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800843c:	4b53      	ldr	r3, [pc, #332]	; (800858c <HAL_RCC_OscConfig+0x624>)
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	2380      	movs	r3, #128	; 0x80
 8008442:	049b      	lsls	r3, r3, #18
 8008444:	4013      	ands	r3, r2
 8008446:	d1f0      	bne.n	800842a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008448:	4b50      	ldr	r3, [pc, #320]	; (800858c <HAL_RCC_OscConfig+0x624>)
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	4a54      	ldr	r2, [pc, #336]	; (80085a0 <HAL_RCC_OscConfig+0x638>)
 800844e:	4013      	ands	r3, r2
 8008450:	0019      	movs	r1, r3
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6a1a      	ldr	r2, [r3, #32]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845a:	431a      	orrs	r2, r3
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008460:	021b      	lsls	r3, r3, #8
 8008462:	431a      	orrs	r2, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008468:	431a      	orrs	r2, r3
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800846e:	431a      	orrs	r2, r3
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008474:	431a      	orrs	r2, r3
 8008476:	4b45      	ldr	r3, [pc, #276]	; (800858c <HAL_RCC_OscConfig+0x624>)
 8008478:	430a      	orrs	r2, r1
 800847a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800847c:	4b43      	ldr	r3, [pc, #268]	; (800858c <HAL_RCC_OscConfig+0x624>)
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	4b42      	ldr	r3, [pc, #264]	; (800858c <HAL_RCC_OscConfig+0x624>)
 8008482:	2180      	movs	r1, #128	; 0x80
 8008484:	0449      	lsls	r1, r1, #17
 8008486:	430a      	orrs	r2, r1
 8008488:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800848a:	4b40      	ldr	r3, [pc, #256]	; (800858c <HAL_RCC_OscConfig+0x624>)
 800848c:	68da      	ldr	r2, [r3, #12]
 800848e:	4b3f      	ldr	r3, [pc, #252]	; (800858c <HAL_RCC_OscConfig+0x624>)
 8008490:	2180      	movs	r1, #128	; 0x80
 8008492:	0549      	lsls	r1, r1, #21
 8008494:	430a      	orrs	r2, r1
 8008496:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008498:	f7fd f8fc 	bl	8005694 <HAL_GetTick>
 800849c:	0003      	movs	r3, r0
 800849e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80084a0:	e008      	b.n	80084b4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084a2:	f7fd f8f7 	bl	8005694 <HAL_GetTick>
 80084a6:	0002      	movs	r2, r0
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	1ad3      	subs	r3, r2, r3
 80084ac:	2b02      	cmp	r3, #2
 80084ae:	d901      	bls.n	80084b4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80084b0:	2303      	movs	r3, #3
 80084b2:	e067      	b.n	8008584 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80084b4:	4b35      	ldr	r3, [pc, #212]	; (800858c <HAL_RCC_OscConfig+0x624>)
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	2380      	movs	r3, #128	; 0x80
 80084ba:	049b      	lsls	r3, r3, #18
 80084bc:	4013      	ands	r3, r2
 80084be:	d0f0      	beq.n	80084a2 <HAL_RCC_OscConfig+0x53a>
 80084c0:	e05f      	b.n	8008582 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084c2:	4b32      	ldr	r3, [pc, #200]	; (800858c <HAL_RCC_OscConfig+0x624>)
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	4b31      	ldr	r3, [pc, #196]	; (800858c <HAL_RCC_OscConfig+0x624>)
 80084c8:	4934      	ldr	r1, [pc, #208]	; (800859c <HAL_RCC_OscConfig+0x634>)
 80084ca:	400a      	ands	r2, r1
 80084cc:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80084ce:	4b2f      	ldr	r3, [pc, #188]	; (800858c <HAL_RCC_OscConfig+0x624>)
 80084d0:	68da      	ldr	r2, [r3, #12]
 80084d2:	4b2e      	ldr	r3, [pc, #184]	; (800858c <HAL_RCC_OscConfig+0x624>)
 80084d4:	2103      	movs	r1, #3
 80084d6:	438a      	bics	r2, r1
 80084d8:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80084da:	4b2c      	ldr	r3, [pc, #176]	; (800858c <HAL_RCC_OscConfig+0x624>)
 80084dc:	68da      	ldr	r2, [r3, #12]
 80084de:	4b2b      	ldr	r3, [pc, #172]	; (800858c <HAL_RCC_OscConfig+0x624>)
 80084e0:	4930      	ldr	r1, [pc, #192]	; (80085a4 <HAL_RCC_OscConfig+0x63c>)
 80084e2:	400a      	ands	r2, r1
 80084e4:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084e6:	f7fd f8d5 	bl	8005694 <HAL_GetTick>
 80084ea:	0003      	movs	r3, r0
 80084ec:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80084ee:	e008      	b.n	8008502 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084f0:	f7fd f8d0 	bl	8005694 <HAL_GetTick>
 80084f4:	0002      	movs	r2, r0
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	1ad3      	subs	r3, r2, r3
 80084fa:	2b02      	cmp	r3, #2
 80084fc:	d901      	bls.n	8008502 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80084fe:	2303      	movs	r3, #3
 8008500:	e040      	b.n	8008584 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008502:	4b22      	ldr	r3, [pc, #136]	; (800858c <HAL_RCC_OscConfig+0x624>)
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	2380      	movs	r3, #128	; 0x80
 8008508:	049b      	lsls	r3, r3, #18
 800850a:	4013      	ands	r3, r2
 800850c:	d1f0      	bne.n	80084f0 <HAL_RCC_OscConfig+0x588>
 800850e:	e038      	b.n	8008582 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	69db      	ldr	r3, [r3, #28]
 8008514:	2b01      	cmp	r3, #1
 8008516:	d101      	bne.n	800851c <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8008518:	2301      	movs	r3, #1
 800851a:	e033      	b.n	8008584 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800851c:	4b1b      	ldr	r3, [pc, #108]	; (800858c <HAL_RCC_OscConfig+0x624>)
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	2203      	movs	r2, #3
 8008526:	401a      	ands	r2, r3
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6a1b      	ldr	r3, [r3, #32]
 800852c:	429a      	cmp	r2, r3
 800852e:	d126      	bne.n	800857e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	2270      	movs	r2, #112	; 0x70
 8008534:	401a      	ands	r2, r3
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800853a:	429a      	cmp	r2, r3
 800853c:	d11f      	bne.n	800857e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800853e:	697a      	ldr	r2, [r7, #20]
 8008540:	23fe      	movs	r3, #254	; 0xfe
 8008542:	01db      	lsls	r3, r3, #7
 8008544:	401a      	ands	r2, r3
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800854a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800854c:	429a      	cmp	r2, r3
 800854e:	d116      	bne.n	800857e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008550:	697a      	ldr	r2, [r7, #20]
 8008552:	23f8      	movs	r3, #248	; 0xf8
 8008554:	039b      	lsls	r3, r3, #14
 8008556:	401a      	ands	r2, r3
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800855c:	429a      	cmp	r2, r3
 800855e:	d10e      	bne.n	800857e <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008560:	697a      	ldr	r2, [r7, #20]
 8008562:	23e0      	movs	r3, #224	; 0xe0
 8008564:	051b      	lsls	r3, r3, #20
 8008566:	401a      	ands	r2, r3
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800856c:	429a      	cmp	r2, r3
 800856e:	d106      	bne.n	800857e <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	0f5b      	lsrs	r3, r3, #29
 8008574:	075a      	lsls	r2, r3, #29
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800857a:	429a      	cmp	r2, r3
 800857c:	d001      	beq.n	8008582 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	e000      	b.n	8008584 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8008582:	2300      	movs	r3, #0
}
 8008584:	0018      	movs	r0, r3
 8008586:	46bd      	mov	sp, r7
 8008588:	b008      	add	sp, #32
 800858a:	bd80      	pop	{r7, pc}
 800858c:	40021000 	.word	0x40021000
 8008590:	40007000 	.word	0x40007000
 8008594:	00001388 	.word	0x00001388
 8008598:	efffffff 	.word	0xefffffff
 800859c:	feffffff 	.word	0xfeffffff
 80085a0:	11c1808c 	.word	0x11c1808c
 80085a4:	eefeffff 	.word	0xeefeffff

080085a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b084      	sub	sp, #16
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d101      	bne.n	80085bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80085b8:	2301      	movs	r3, #1
 80085ba:	e0e9      	b.n	8008790 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80085bc:	4b76      	ldr	r3, [pc, #472]	; (8008798 <HAL_RCC_ClockConfig+0x1f0>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2207      	movs	r2, #7
 80085c2:	4013      	ands	r3, r2
 80085c4:	683a      	ldr	r2, [r7, #0]
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d91e      	bls.n	8008608 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085ca:	4b73      	ldr	r3, [pc, #460]	; (8008798 <HAL_RCC_ClockConfig+0x1f0>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	2207      	movs	r2, #7
 80085d0:	4393      	bics	r3, r2
 80085d2:	0019      	movs	r1, r3
 80085d4:	4b70      	ldr	r3, [pc, #448]	; (8008798 <HAL_RCC_ClockConfig+0x1f0>)
 80085d6:	683a      	ldr	r2, [r7, #0]
 80085d8:	430a      	orrs	r2, r1
 80085da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80085dc:	f7fd f85a 	bl	8005694 <HAL_GetTick>
 80085e0:	0003      	movs	r3, r0
 80085e2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80085e4:	e009      	b.n	80085fa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80085e6:	f7fd f855 	bl	8005694 <HAL_GetTick>
 80085ea:	0002      	movs	r2, r0
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	1ad3      	subs	r3, r2, r3
 80085f0:	4a6a      	ldr	r2, [pc, #424]	; (800879c <HAL_RCC_ClockConfig+0x1f4>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d901      	bls.n	80085fa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80085f6:	2303      	movs	r3, #3
 80085f8:	e0ca      	b.n	8008790 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80085fa:	4b67      	ldr	r3, [pc, #412]	; (8008798 <HAL_RCC_ClockConfig+0x1f0>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	2207      	movs	r2, #7
 8008600:	4013      	ands	r3, r2
 8008602:	683a      	ldr	r2, [r7, #0]
 8008604:	429a      	cmp	r2, r3
 8008606:	d1ee      	bne.n	80085e6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	2202      	movs	r2, #2
 800860e:	4013      	ands	r3, r2
 8008610:	d015      	beq.n	800863e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	2204      	movs	r2, #4
 8008618:	4013      	ands	r3, r2
 800861a:	d006      	beq.n	800862a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800861c:	4b60      	ldr	r3, [pc, #384]	; (80087a0 <HAL_RCC_ClockConfig+0x1f8>)
 800861e:	689a      	ldr	r2, [r3, #8]
 8008620:	4b5f      	ldr	r3, [pc, #380]	; (80087a0 <HAL_RCC_ClockConfig+0x1f8>)
 8008622:	21e0      	movs	r1, #224	; 0xe0
 8008624:	01c9      	lsls	r1, r1, #7
 8008626:	430a      	orrs	r2, r1
 8008628:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800862a:	4b5d      	ldr	r3, [pc, #372]	; (80087a0 <HAL_RCC_ClockConfig+0x1f8>)
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	4a5d      	ldr	r2, [pc, #372]	; (80087a4 <HAL_RCC_ClockConfig+0x1fc>)
 8008630:	4013      	ands	r3, r2
 8008632:	0019      	movs	r1, r3
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	689a      	ldr	r2, [r3, #8]
 8008638:	4b59      	ldr	r3, [pc, #356]	; (80087a0 <HAL_RCC_ClockConfig+0x1f8>)
 800863a:	430a      	orrs	r2, r1
 800863c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	2201      	movs	r2, #1
 8008644:	4013      	ands	r3, r2
 8008646:	d057      	beq.n	80086f8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	2b01      	cmp	r3, #1
 800864e:	d107      	bne.n	8008660 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008650:	4b53      	ldr	r3, [pc, #332]	; (80087a0 <HAL_RCC_ClockConfig+0x1f8>)
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	2380      	movs	r3, #128	; 0x80
 8008656:	029b      	lsls	r3, r3, #10
 8008658:	4013      	ands	r3, r2
 800865a:	d12b      	bne.n	80086b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	e097      	b.n	8008790 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	2b02      	cmp	r3, #2
 8008666:	d107      	bne.n	8008678 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008668:	4b4d      	ldr	r3, [pc, #308]	; (80087a0 <HAL_RCC_ClockConfig+0x1f8>)
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	2380      	movs	r3, #128	; 0x80
 800866e:	049b      	lsls	r3, r3, #18
 8008670:	4013      	ands	r3, r2
 8008672:	d11f      	bne.n	80086b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008674:	2301      	movs	r3, #1
 8008676:	e08b      	b.n	8008790 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d107      	bne.n	8008690 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008680:	4b47      	ldr	r3, [pc, #284]	; (80087a0 <HAL_RCC_ClockConfig+0x1f8>)
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	2380      	movs	r3, #128	; 0x80
 8008686:	00db      	lsls	r3, r3, #3
 8008688:	4013      	ands	r3, r2
 800868a:	d113      	bne.n	80086b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800868c:	2301      	movs	r3, #1
 800868e:	e07f      	b.n	8008790 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	2b03      	cmp	r3, #3
 8008696:	d106      	bne.n	80086a6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008698:	4b41      	ldr	r3, [pc, #260]	; (80087a0 <HAL_RCC_ClockConfig+0x1f8>)
 800869a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800869c:	2202      	movs	r2, #2
 800869e:	4013      	ands	r3, r2
 80086a0:	d108      	bne.n	80086b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80086a2:	2301      	movs	r3, #1
 80086a4:	e074      	b.n	8008790 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80086a6:	4b3e      	ldr	r3, [pc, #248]	; (80087a0 <HAL_RCC_ClockConfig+0x1f8>)
 80086a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086aa:	2202      	movs	r2, #2
 80086ac:	4013      	ands	r3, r2
 80086ae:	d101      	bne.n	80086b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80086b0:	2301      	movs	r3, #1
 80086b2:	e06d      	b.n	8008790 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80086b4:	4b3a      	ldr	r3, [pc, #232]	; (80087a0 <HAL_RCC_ClockConfig+0x1f8>)
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	2207      	movs	r2, #7
 80086ba:	4393      	bics	r3, r2
 80086bc:	0019      	movs	r1, r3
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	685a      	ldr	r2, [r3, #4]
 80086c2:	4b37      	ldr	r3, [pc, #220]	; (80087a0 <HAL_RCC_ClockConfig+0x1f8>)
 80086c4:	430a      	orrs	r2, r1
 80086c6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086c8:	f7fc ffe4 	bl	8005694 <HAL_GetTick>
 80086cc:	0003      	movs	r3, r0
 80086ce:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086d0:	e009      	b.n	80086e6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80086d2:	f7fc ffdf 	bl	8005694 <HAL_GetTick>
 80086d6:	0002      	movs	r2, r0
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	1ad3      	subs	r3, r2, r3
 80086dc:	4a2f      	ldr	r2, [pc, #188]	; (800879c <HAL_RCC_ClockConfig+0x1f4>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d901      	bls.n	80086e6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80086e2:	2303      	movs	r3, #3
 80086e4:	e054      	b.n	8008790 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086e6:	4b2e      	ldr	r3, [pc, #184]	; (80087a0 <HAL_RCC_ClockConfig+0x1f8>)
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	2238      	movs	r2, #56	; 0x38
 80086ec:	401a      	ands	r2, r3
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	00db      	lsls	r3, r3, #3
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d1ec      	bne.n	80086d2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80086f8:	4b27      	ldr	r3, [pc, #156]	; (8008798 <HAL_RCC_ClockConfig+0x1f0>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	2207      	movs	r2, #7
 80086fe:	4013      	ands	r3, r2
 8008700:	683a      	ldr	r2, [r7, #0]
 8008702:	429a      	cmp	r2, r3
 8008704:	d21e      	bcs.n	8008744 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008706:	4b24      	ldr	r3, [pc, #144]	; (8008798 <HAL_RCC_ClockConfig+0x1f0>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	2207      	movs	r2, #7
 800870c:	4393      	bics	r3, r2
 800870e:	0019      	movs	r1, r3
 8008710:	4b21      	ldr	r3, [pc, #132]	; (8008798 <HAL_RCC_ClockConfig+0x1f0>)
 8008712:	683a      	ldr	r2, [r7, #0]
 8008714:	430a      	orrs	r2, r1
 8008716:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008718:	f7fc ffbc 	bl	8005694 <HAL_GetTick>
 800871c:	0003      	movs	r3, r0
 800871e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008720:	e009      	b.n	8008736 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008722:	f7fc ffb7 	bl	8005694 <HAL_GetTick>
 8008726:	0002      	movs	r2, r0
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	1ad3      	subs	r3, r2, r3
 800872c:	4a1b      	ldr	r2, [pc, #108]	; (800879c <HAL_RCC_ClockConfig+0x1f4>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d901      	bls.n	8008736 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8008732:	2303      	movs	r3, #3
 8008734:	e02c      	b.n	8008790 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008736:	4b18      	ldr	r3, [pc, #96]	; (8008798 <HAL_RCC_ClockConfig+0x1f0>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	2207      	movs	r2, #7
 800873c:	4013      	ands	r3, r2
 800873e:	683a      	ldr	r2, [r7, #0]
 8008740:	429a      	cmp	r2, r3
 8008742:	d1ee      	bne.n	8008722 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	2204      	movs	r2, #4
 800874a:	4013      	ands	r3, r2
 800874c:	d009      	beq.n	8008762 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800874e:	4b14      	ldr	r3, [pc, #80]	; (80087a0 <HAL_RCC_ClockConfig+0x1f8>)
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	4a15      	ldr	r2, [pc, #84]	; (80087a8 <HAL_RCC_ClockConfig+0x200>)
 8008754:	4013      	ands	r3, r2
 8008756:	0019      	movs	r1, r3
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	68da      	ldr	r2, [r3, #12]
 800875c:	4b10      	ldr	r3, [pc, #64]	; (80087a0 <HAL_RCC_ClockConfig+0x1f8>)
 800875e:	430a      	orrs	r2, r1
 8008760:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8008762:	f000 f829 	bl	80087b8 <HAL_RCC_GetSysClockFreq>
 8008766:	0001      	movs	r1, r0
 8008768:	4b0d      	ldr	r3, [pc, #52]	; (80087a0 <HAL_RCC_ClockConfig+0x1f8>)
 800876a:	689b      	ldr	r3, [r3, #8]
 800876c:	0a1b      	lsrs	r3, r3, #8
 800876e:	220f      	movs	r2, #15
 8008770:	401a      	ands	r2, r3
 8008772:	4b0e      	ldr	r3, [pc, #56]	; (80087ac <HAL_RCC_ClockConfig+0x204>)
 8008774:	0092      	lsls	r2, r2, #2
 8008776:	58d3      	ldr	r3, [r2, r3]
 8008778:	221f      	movs	r2, #31
 800877a:	4013      	ands	r3, r2
 800877c:	000a      	movs	r2, r1
 800877e:	40da      	lsrs	r2, r3
 8008780:	4b0b      	ldr	r3, [pc, #44]	; (80087b0 <HAL_RCC_ClockConfig+0x208>)
 8008782:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008784:	4b0b      	ldr	r3, [pc, #44]	; (80087b4 <HAL_RCC_ClockConfig+0x20c>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	0018      	movs	r0, r3
 800878a:	f7fc ff27 	bl	80055dc <HAL_InitTick>
 800878e:	0003      	movs	r3, r0
}
 8008790:	0018      	movs	r0, r3
 8008792:	46bd      	mov	sp, r7
 8008794:	b004      	add	sp, #16
 8008796:	bd80      	pop	{r7, pc}
 8008798:	40022000 	.word	0x40022000
 800879c:	00001388 	.word	0x00001388
 80087a0:	40021000 	.word	0x40021000
 80087a4:	fffff0ff 	.word	0xfffff0ff
 80087a8:	ffff8fff 	.word	0xffff8fff
 80087ac:	080115cc 	.word	0x080115cc
 80087b0:	20000034 	.word	0x20000034
 80087b4:	20000038 	.word	0x20000038

080087b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b086      	sub	sp, #24
 80087bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80087be:	4b3c      	ldr	r3, [pc, #240]	; (80088b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	2238      	movs	r2, #56	; 0x38
 80087c4:	4013      	ands	r3, r2
 80087c6:	d10f      	bne.n	80087e8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80087c8:	4b39      	ldr	r3, [pc, #228]	; (80088b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	0adb      	lsrs	r3, r3, #11
 80087ce:	2207      	movs	r2, #7
 80087d0:	4013      	ands	r3, r2
 80087d2:	2201      	movs	r2, #1
 80087d4:	409a      	lsls	r2, r3
 80087d6:	0013      	movs	r3, r2
 80087d8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80087da:	6839      	ldr	r1, [r7, #0]
 80087dc:	4835      	ldr	r0, [pc, #212]	; (80088b4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80087de:	f7f7 fc91 	bl	8000104 <__udivsi3>
 80087e2:	0003      	movs	r3, r0
 80087e4:	613b      	str	r3, [r7, #16]
 80087e6:	e05d      	b.n	80088a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80087e8:	4b31      	ldr	r3, [pc, #196]	; (80088b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80087ea:	689b      	ldr	r3, [r3, #8]
 80087ec:	2238      	movs	r2, #56	; 0x38
 80087ee:	4013      	ands	r3, r2
 80087f0:	2b08      	cmp	r3, #8
 80087f2:	d102      	bne.n	80087fa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80087f4:	4b30      	ldr	r3, [pc, #192]	; (80088b8 <HAL_RCC_GetSysClockFreq+0x100>)
 80087f6:	613b      	str	r3, [r7, #16]
 80087f8:	e054      	b.n	80088a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80087fa:	4b2d      	ldr	r3, [pc, #180]	; (80088b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	2238      	movs	r2, #56	; 0x38
 8008800:	4013      	ands	r3, r2
 8008802:	2b10      	cmp	r3, #16
 8008804:	d138      	bne.n	8008878 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8008806:	4b2a      	ldr	r3, [pc, #168]	; (80088b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008808:	68db      	ldr	r3, [r3, #12]
 800880a:	2203      	movs	r2, #3
 800880c:	4013      	ands	r3, r2
 800880e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008810:	4b27      	ldr	r3, [pc, #156]	; (80088b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	091b      	lsrs	r3, r3, #4
 8008816:	2207      	movs	r2, #7
 8008818:	4013      	ands	r3, r2
 800881a:	3301      	adds	r3, #1
 800881c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2b03      	cmp	r3, #3
 8008822:	d10d      	bne.n	8008840 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008824:	68b9      	ldr	r1, [r7, #8]
 8008826:	4824      	ldr	r0, [pc, #144]	; (80088b8 <HAL_RCC_GetSysClockFreq+0x100>)
 8008828:	f7f7 fc6c 	bl	8000104 <__udivsi3>
 800882c:	0003      	movs	r3, r0
 800882e:	0019      	movs	r1, r3
 8008830:	4b1f      	ldr	r3, [pc, #124]	; (80088b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	0a1b      	lsrs	r3, r3, #8
 8008836:	227f      	movs	r2, #127	; 0x7f
 8008838:	4013      	ands	r3, r2
 800883a:	434b      	muls	r3, r1
 800883c:	617b      	str	r3, [r7, #20]
        break;
 800883e:	e00d      	b.n	800885c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8008840:	68b9      	ldr	r1, [r7, #8]
 8008842:	481c      	ldr	r0, [pc, #112]	; (80088b4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8008844:	f7f7 fc5e 	bl	8000104 <__udivsi3>
 8008848:	0003      	movs	r3, r0
 800884a:	0019      	movs	r1, r3
 800884c:	4b18      	ldr	r3, [pc, #96]	; (80088b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	0a1b      	lsrs	r3, r3, #8
 8008852:	227f      	movs	r2, #127	; 0x7f
 8008854:	4013      	ands	r3, r2
 8008856:	434b      	muls	r3, r1
 8008858:	617b      	str	r3, [r7, #20]
        break;
 800885a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800885c:	4b14      	ldr	r3, [pc, #80]	; (80088b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	0f5b      	lsrs	r3, r3, #29
 8008862:	2207      	movs	r2, #7
 8008864:	4013      	ands	r3, r2
 8008866:	3301      	adds	r3, #1
 8008868:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800886a:	6879      	ldr	r1, [r7, #4]
 800886c:	6978      	ldr	r0, [r7, #20]
 800886e:	f7f7 fc49 	bl	8000104 <__udivsi3>
 8008872:	0003      	movs	r3, r0
 8008874:	613b      	str	r3, [r7, #16]
 8008876:	e015      	b.n	80088a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008878:	4b0d      	ldr	r3, [pc, #52]	; (80088b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800887a:	689b      	ldr	r3, [r3, #8]
 800887c:	2238      	movs	r2, #56	; 0x38
 800887e:	4013      	ands	r3, r2
 8008880:	2b20      	cmp	r3, #32
 8008882:	d103      	bne.n	800888c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8008884:	2380      	movs	r3, #128	; 0x80
 8008886:	021b      	lsls	r3, r3, #8
 8008888:	613b      	str	r3, [r7, #16]
 800888a:	e00b      	b.n	80088a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800888c:	4b08      	ldr	r3, [pc, #32]	; (80088b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	2238      	movs	r2, #56	; 0x38
 8008892:	4013      	ands	r3, r2
 8008894:	2b18      	cmp	r3, #24
 8008896:	d103      	bne.n	80088a0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8008898:	23fa      	movs	r3, #250	; 0xfa
 800889a:	01db      	lsls	r3, r3, #7
 800889c:	613b      	str	r3, [r7, #16]
 800889e:	e001      	b.n	80088a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80088a0:	2300      	movs	r3, #0
 80088a2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80088a4:	693b      	ldr	r3, [r7, #16]
}
 80088a6:	0018      	movs	r0, r3
 80088a8:	46bd      	mov	sp, r7
 80088aa:	b006      	add	sp, #24
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	46c0      	nop			; (mov r8, r8)
 80088b0:	40021000 	.word	0x40021000
 80088b4:	00f42400 	.word	0x00f42400
 80088b8:	007a1200 	.word	0x007a1200

080088bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80088c0:	4b02      	ldr	r3, [pc, #8]	; (80088cc <HAL_RCC_GetHCLKFreq+0x10>)
 80088c2:	681b      	ldr	r3, [r3, #0]
}
 80088c4:	0018      	movs	r0, r3
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	46c0      	nop			; (mov r8, r8)
 80088cc:	20000034 	.word	0x20000034

080088d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80088d0:	b5b0      	push	{r4, r5, r7, lr}
 80088d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80088d4:	f7ff fff2 	bl	80088bc <HAL_RCC_GetHCLKFreq>
 80088d8:	0004      	movs	r4, r0
 80088da:	f7ff fb39 	bl	8007f50 <LL_RCC_GetAPB1Prescaler>
 80088de:	0003      	movs	r3, r0
 80088e0:	0b1a      	lsrs	r2, r3, #12
 80088e2:	4b05      	ldr	r3, [pc, #20]	; (80088f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80088e4:	0092      	lsls	r2, r2, #2
 80088e6:	58d3      	ldr	r3, [r2, r3]
 80088e8:	221f      	movs	r2, #31
 80088ea:	4013      	ands	r3, r2
 80088ec:	40dc      	lsrs	r4, r3
 80088ee:	0023      	movs	r3, r4
}
 80088f0:	0018      	movs	r0, r3
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bdb0      	pop	{r4, r5, r7, pc}
 80088f6:	46c0      	nop			; (mov r8, r8)
 80088f8:	0801160c 	.word	0x0801160c

080088fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b086      	sub	sp, #24
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8008904:	2313      	movs	r3, #19
 8008906:	18fb      	adds	r3, r7, r3
 8008908:	2200      	movs	r2, #0
 800890a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800890c:	2312      	movs	r3, #18
 800890e:	18fb      	adds	r3, r7, r3
 8008910:	2200      	movs	r2, #0
 8008912:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	2380      	movs	r3, #128	; 0x80
 800891a:	029b      	lsls	r3, r3, #10
 800891c:	4013      	ands	r3, r2
 800891e:	d100      	bne.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8008920:	e0a3      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008922:	2011      	movs	r0, #17
 8008924:	183b      	adds	r3, r7, r0
 8008926:	2200      	movs	r2, #0
 8008928:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800892a:	4bc3      	ldr	r3, [pc, #780]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800892c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800892e:	2380      	movs	r3, #128	; 0x80
 8008930:	055b      	lsls	r3, r3, #21
 8008932:	4013      	ands	r3, r2
 8008934:	d110      	bne.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008936:	4bc0      	ldr	r3, [pc, #768]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008938:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800893a:	4bbf      	ldr	r3, [pc, #764]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800893c:	2180      	movs	r1, #128	; 0x80
 800893e:	0549      	lsls	r1, r1, #21
 8008940:	430a      	orrs	r2, r1
 8008942:	63da      	str	r2, [r3, #60]	; 0x3c
 8008944:	4bbc      	ldr	r3, [pc, #752]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008946:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008948:	2380      	movs	r3, #128	; 0x80
 800894a:	055b      	lsls	r3, r3, #21
 800894c:	4013      	ands	r3, r2
 800894e:	60bb      	str	r3, [r7, #8]
 8008950:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008952:	183b      	adds	r3, r7, r0
 8008954:	2201      	movs	r2, #1
 8008956:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008958:	4bb8      	ldr	r3, [pc, #736]	; (8008c3c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800895a:	681a      	ldr	r2, [r3, #0]
 800895c:	4bb7      	ldr	r3, [pc, #732]	; (8008c3c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800895e:	2180      	movs	r1, #128	; 0x80
 8008960:	0049      	lsls	r1, r1, #1
 8008962:	430a      	orrs	r2, r1
 8008964:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008966:	f7fc fe95 	bl	8005694 <HAL_GetTick>
 800896a:	0003      	movs	r3, r0
 800896c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800896e:	e00b      	b.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008970:	f7fc fe90 	bl	8005694 <HAL_GetTick>
 8008974:	0002      	movs	r2, r0
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	1ad3      	subs	r3, r2, r3
 800897a:	2b02      	cmp	r3, #2
 800897c:	d904      	bls.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800897e:	2313      	movs	r3, #19
 8008980:	18fb      	adds	r3, r7, r3
 8008982:	2203      	movs	r2, #3
 8008984:	701a      	strb	r2, [r3, #0]
        break;
 8008986:	e005      	b.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008988:	4bac      	ldr	r3, [pc, #688]	; (8008c3c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	2380      	movs	r3, #128	; 0x80
 800898e:	005b      	lsls	r3, r3, #1
 8008990:	4013      	ands	r3, r2
 8008992:	d0ed      	beq.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8008994:	2313      	movs	r3, #19
 8008996:	18fb      	adds	r3, r7, r3
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d154      	bne.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800899e:	4ba6      	ldr	r3, [pc, #664]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80089a2:	23c0      	movs	r3, #192	; 0xc0
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	4013      	ands	r3, r2
 80089a8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d019      	beq.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089b4:	697a      	ldr	r2, [r7, #20]
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d014      	beq.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80089ba:	4b9f      	ldr	r3, [pc, #636]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089be:	4aa0      	ldr	r2, [pc, #640]	; (8008c40 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80089c0:	4013      	ands	r3, r2
 80089c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80089c4:	4b9c      	ldr	r3, [pc, #624]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80089c8:	4b9b      	ldr	r3, [pc, #620]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089ca:	2180      	movs	r1, #128	; 0x80
 80089cc:	0249      	lsls	r1, r1, #9
 80089ce:	430a      	orrs	r2, r1
 80089d0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80089d2:	4b99      	ldr	r3, [pc, #612]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80089d6:	4b98      	ldr	r3, [pc, #608]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089d8:	499a      	ldr	r1, [pc, #616]	; (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80089da:	400a      	ands	r2, r1
 80089dc:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80089de:	4b96      	ldr	r3, [pc, #600]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089e0:	697a      	ldr	r2, [r7, #20]
 80089e2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	2201      	movs	r2, #1
 80089e8:	4013      	ands	r3, r2
 80089ea:	d016      	beq.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089ec:	f7fc fe52 	bl	8005694 <HAL_GetTick>
 80089f0:	0003      	movs	r3, r0
 80089f2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80089f4:	e00c      	b.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089f6:	f7fc fe4d 	bl	8005694 <HAL_GetTick>
 80089fa:	0002      	movs	r2, r0
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	1ad3      	subs	r3, r2, r3
 8008a00:	4a91      	ldr	r2, [pc, #580]	; (8008c48 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d904      	bls.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8008a06:	2313      	movs	r3, #19
 8008a08:	18fb      	adds	r3, r7, r3
 8008a0a:	2203      	movs	r2, #3
 8008a0c:	701a      	strb	r2, [r3, #0]
            break;
 8008a0e:	e004      	b.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a10:	4b89      	ldr	r3, [pc, #548]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a14:	2202      	movs	r2, #2
 8008a16:	4013      	ands	r3, r2
 8008a18:	d0ed      	beq.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8008a1a:	2313      	movs	r3, #19
 8008a1c:	18fb      	adds	r3, r7, r3
 8008a1e:	781b      	ldrb	r3, [r3, #0]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d10a      	bne.n	8008a3a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008a24:	4b84      	ldr	r3, [pc, #528]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a28:	4a85      	ldr	r2, [pc, #532]	; (8008c40 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8008a2a:	4013      	ands	r3, r2
 8008a2c:	0019      	movs	r1, r3
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a32:	4b81      	ldr	r3, [pc, #516]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a34:	430a      	orrs	r2, r1
 8008a36:	65da      	str	r2, [r3, #92]	; 0x5c
 8008a38:	e00c      	b.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008a3a:	2312      	movs	r3, #18
 8008a3c:	18fb      	adds	r3, r7, r3
 8008a3e:	2213      	movs	r2, #19
 8008a40:	18ba      	adds	r2, r7, r2
 8008a42:	7812      	ldrb	r2, [r2, #0]
 8008a44:	701a      	strb	r2, [r3, #0]
 8008a46:	e005      	b.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a48:	2312      	movs	r3, #18
 8008a4a:	18fb      	adds	r3, r7, r3
 8008a4c:	2213      	movs	r2, #19
 8008a4e:	18ba      	adds	r2, r7, r2
 8008a50:	7812      	ldrb	r2, [r2, #0]
 8008a52:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008a54:	2311      	movs	r3, #17
 8008a56:	18fb      	adds	r3, r7, r3
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d105      	bne.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a5e:	4b76      	ldr	r3, [pc, #472]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a62:	4b75      	ldr	r3, [pc, #468]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a64:	4979      	ldr	r1, [pc, #484]	; (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8008a66:	400a      	ands	r2, r1
 8008a68:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	4013      	ands	r3, r2
 8008a72:	d009      	beq.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008a74:	4b70      	ldr	r3, [pc, #448]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a78:	2203      	movs	r2, #3
 8008a7a:	4393      	bics	r3, r2
 8008a7c:	0019      	movs	r1, r3
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	685a      	ldr	r2, [r3, #4]
 8008a82:	4b6d      	ldr	r3, [pc, #436]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a84:	430a      	orrs	r2, r1
 8008a86:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	2202      	movs	r2, #2
 8008a8e:	4013      	ands	r3, r2
 8008a90:	d009      	beq.n	8008aa6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008a92:	4b69      	ldr	r3, [pc, #420]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a96:	220c      	movs	r2, #12
 8008a98:	4393      	bics	r3, r2
 8008a9a:	0019      	movs	r1, r3
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	689a      	ldr	r2, [r3, #8]
 8008aa0:	4b65      	ldr	r3, [pc, #404]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008aa2:	430a      	orrs	r2, r1
 8008aa4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	2210      	movs	r2, #16
 8008aac:	4013      	ands	r3, r2
 8008aae:	d009      	beq.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008ab0:	4b61      	ldr	r3, [pc, #388]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ab4:	4a66      	ldr	r2, [pc, #408]	; (8008c50 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8008ab6:	4013      	ands	r3, r2
 8008ab8:	0019      	movs	r1, r3
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	68da      	ldr	r2, [r3, #12]
 8008abe:	4b5e      	ldr	r3, [pc, #376]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008ac0:	430a      	orrs	r2, r1
 8008ac2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	2380      	movs	r3, #128	; 0x80
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	4013      	ands	r3, r2
 8008ace:	d009      	beq.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008ad0:	4b59      	ldr	r3, [pc, #356]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ad4:	4a5f      	ldr	r2, [pc, #380]	; (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008ad6:	4013      	ands	r3, r2
 8008ad8:	0019      	movs	r1, r3
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	699a      	ldr	r2, [r3, #24]
 8008ade:	4b56      	ldr	r3, [pc, #344]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008ae0:	430a      	orrs	r2, r1
 8008ae2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681a      	ldr	r2, [r3, #0]
 8008ae8:	2380      	movs	r3, #128	; 0x80
 8008aea:	00db      	lsls	r3, r3, #3
 8008aec:	4013      	ands	r3, r2
 8008aee:	d009      	beq.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008af0:	4b51      	ldr	r3, [pc, #324]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008af4:	4a58      	ldr	r2, [pc, #352]	; (8008c58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008af6:	4013      	ands	r3, r2
 8008af8:	0019      	movs	r1, r3
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	69da      	ldr	r2, [r3, #28]
 8008afe:	4b4e      	ldr	r3, [pc, #312]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008b00:	430a      	orrs	r2, r1
 8008b02:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	2220      	movs	r2, #32
 8008b0a:	4013      	ands	r3, r2
 8008b0c:	d009      	beq.n	8008b22 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008b0e:	4b4a      	ldr	r3, [pc, #296]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b12:	4a52      	ldr	r2, [pc, #328]	; (8008c5c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8008b14:	4013      	ands	r3, r2
 8008b16:	0019      	movs	r1, r3
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	691a      	ldr	r2, [r3, #16]
 8008b1c:	4b46      	ldr	r3, [pc, #280]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008b1e:	430a      	orrs	r2, r1
 8008b20:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681a      	ldr	r2, [r3, #0]
 8008b26:	2380      	movs	r3, #128	; 0x80
 8008b28:	01db      	lsls	r3, r3, #7
 8008b2a:	4013      	ands	r3, r2
 8008b2c:	d015      	beq.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008b2e:	4b42      	ldr	r3, [pc, #264]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	0899      	lsrs	r1, r3, #2
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6a1a      	ldr	r2, [r3, #32]
 8008b3a:	4b3f      	ldr	r3, [pc, #252]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008b3c:	430a      	orrs	r2, r1
 8008b3e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6a1a      	ldr	r2, [r3, #32]
 8008b44:	2380      	movs	r3, #128	; 0x80
 8008b46:	05db      	lsls	r3, r3, #23
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d106      	bne.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008b4c:	4b3a      	ldr	r3, [pc, #232]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008b4e:	68da      	ldr	r2, [r3, #12]
 8008b50:	4b39      	ldr	r3, [pc, #228]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008b52:	2180      	movs	r1, #128	; 0x80
 8008b54:	0249      	lsls	r1, r1, #9
 8008b56:	430a      	orrs	r2, r1
 8008b58:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	2380      	movs	r3, #128	; 0x80
 8008b60:	031b      	lsls	r3, r3, #12
 8008b62:	4013      	ands	r3, r2
 8008b64:	d009      	beq.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008b66:	4b34      	ldr	r3, [pc, #208]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b6a:	2240      	movs	r2, #64	; 0x40
 8008b6c:	4393      	bics	r3, r2
 8008b6e:	0019      	movs	r1, r3
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b74:	4b30      	ldr	r3, [pc, #192]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008b76:	430a      	orrs	r2, r1
 8008b78:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681a      	ldr	r2, [r3, #0]
 8008b7e:	2380      	movs	r3, #128	; 0x80
 8008b80:	039b      	lsls	r3, r3, #14
 8008b82:	4013      	ands	r3, r2
 8008b84:	d016      	beq.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8008b86:	4b2c      	ldr	r3, [pc, #176]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b8a:	4a35      	ldr	r2, [pc, #212]	; (8008c60 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8008b8c:	4013      	ands	r3, r2
 8008b8e:	0019      	movs	r1, r3
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b94:	4b28      	ldr	r3, [pc, #160]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008b96:	430a      	orrs	r2, r1
 8008b98:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b9e:	2380      	movs	r3, #128	; 0x80
 8008ba0:	03db      	lsls	r3, r3, #15
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d106      	bne.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008ba6:	4b24      	ldr	r3, [pc, #144]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008ba8:	68da      	ldr	r2, [r3, #12]
 8008baa:	4b23      	ldr	r3, [pc, #140]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008bac:	2180      	movs	r1, #128	; 0x80
 8008bae:	0449      	lsls	r1, r1, #17
 8008bb0:	430a      	orrs	r2, r1
 8008bb2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	2380      	movs	r3, #128	; 0x80
 8008bba:	03db      	lsls	r3, r3, #15
 8008bbc:	4013      	ands	r3, r2
 8008bbe:	d016      	beq.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8008bc0:	4b1d      	ldr	r3, [pc, #116]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bc4:	4a27      	ldr	r2, [pc, #156]	; (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8008bc6:	4013      	ands	r3, r2
 8008bc8:	0019      	movs	r1, r3
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bce:	4b1a      	ldr	r3, [pc, #104]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008bd0:	430a      	orrs	r2, r1
 8008bd2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bd8:	2380      	movs	r3, #128	; 0x80
 8008bda:	045b      	lsls	r3, r3, #17
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d106      	bne.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008be0:	4b15      	ldr	r3, [pc, #84]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008be2:	68da      	ldr	r2, [r3, #12]
 8008be4:	4b14      	ldr	r3, [pc, #80]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008be6:	2180      	movs	r1, #128	; 0x80
 8008be8:	0449      	lsls	r1, r1, #17
 8008bea:	430a      	orrs	r2, r1
 8008bec:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681a      	ldr	r2, [r3, #0]
 8008bf2:	2380      	movs	r3, #128	; 0x80
 8008bf4:	011b      	lsls	r3, r3, #4
 8008bf6:	4013      	ands	r3, r2
 8008bf8:	d016      	beq.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8008bfa:	4b0f      	ldr	r3, [pc, #60]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bfe:	4a1a      	ldr	r2, [pc, #104]	; (8008c68 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8008c00:	4013      	ands	r3, r2
 8008c02:	0019      	movs	r1, r3
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	695a      	ldr	r2, [r3, #20]
 8008c08:	4b0b      	ldr	r3, [pc, #44]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008c0a:	430a      	orrs	r2, r1
 8008c0c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	695a      	ldr	r2, [r3, #20]
 8008c12:	2380      	movs	r3, #128	; 0x80
 8008c14:	01db      	lsls	r3, r3, #7
 8008c16:	429a      	cmp	r2, r3
 8008c18:	d106      	bne.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008c1a:	4b07      	ldr	r3, [pc, #28]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008c1c:	68da      	ldr	r2, [r3, #12]
 8008c1e:	4b06      	ldr	r3, [pc, #24]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008c20:	2180      	movs	r1, #128	; 0x80
 8008c22:	0249      	lsls	r1, r1, #9
 8008c24:	430a      	orrs	r2, r1
 8008c26:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8008c28:	2312      	movs	r3, #18
 8008c2a:	18fb      	adds	r3, r7, r3
 8008c2c:	781b      	ldrb	r3, [r3, #0]
}
 8008c2e:	0018      	movs	r0, r3
 8008c30:	46bd      	mov	sp, r7
 8008c32:	b006      	add	sp, #24
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	46c0      	nop			; (mov r8, r8)
 8008c38:	40021000 	.word	0x40021000
 8008c3c:	40007000 	.word	0x40007000
 8008c40:	fffffcff 	.word	0xfffffcff
 8008c44:	fffeffff 	.word	0xfffeffff
 8008c48:	00001388 	.word	0x00001388
 8008c4c:	efffffff 	.word	0xefffffff
 8008c50:	fffff3ff 	.word	0xfffff3ff
 8008c54:	fff3ffff 	.word	0xfff3ffff
 8008c58:	ffcfffff 	.word	0xffcfffff
 8008c5c:	ffffcfff 	.word	0xffffcfff
 8008c60:	ffbfffff 	.word	0xffbfffff
 8008c64:	feffffff 	.word	0xfeffffff
 8008c68:	ffff3fff 	.word	0xffff3fff

08008c6c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b086      	sub	sp, #24
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8008c74:	2300      	movs	r3, #0
 8008c76:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	2380      	movs	r3, #128	; 0x80
 8008c7c:	029b      	lsls	r3, r3, #10
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	d136      	bne.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8008c82:	4bcd      	ldr	r3, [pc, #820]	; (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008c84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008c86:	23c0      	movs	r3, #192	; 0xc0
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	4013      	ands	r3, r2
 8008c8c:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8008c8e:	4bca      	ldr	r3, [pc, #808]	; (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c92:	2202      	movs	r2, #2
 8008c94:	4013      	ands	r3, r2
 8008c96:	2b02      	cmp	r3, #2
 8008c98:	d108      	bne.n	8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8008c9a:	68fa      	ldr	r2, [r7, #12]
 8008c9c:	2380      	movs	r3, #128	; 0x80
 8008c9e:	005b      	lsls	r3, r3, #1
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d103      	bne.n	8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8008ca4:	2380      	movs	r3, #128	; 0x80
 8008ca6:	021b      	lsls	r3, r3, #8
 8008ca8:	617b      	str	r3, [r7, #20]
 8008caa:	e31c      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8008cac:	4bc2      	ldr	r3, [pc, #776]	; (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008cae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cb0:	2202      	movs	r2, #2
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	2b02      	cmp	r3, #2
 8008cb6:	d108      	bne.n	8008cca <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8008cb8:	68fa      	ldr	r2, [r7, #12]
 8008cba:	2380      	movs	r3, #128	; 0x80
 8008cbc:	009b      	lsls	r3, r3, #2
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d103      	bne.n	8008cca <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 8008cc2:	23fa      	movs	r3, #250	; 0xfa
 8008cc4:	01db      	lsls	r3, r3, #7
 8008cc6:	617b      	str	r3, [r7, #20]
 8008cc8:	e30d      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8008cca:	4bbb      	ldr	r3, [pc, #748]	; (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	2380      	movs	r3, #128	; 0x80
 8008cd0:	029b      	lsls	r3, r3, #10
 8008cd2:	401a      	ands	r2, r3
 8008cd4:	2380      	movs	r3, #128	; 0x80
 8008cd6:	029b      	lsls	r3, r3, #10
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d000      	beq.n	8008cde <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 8008cdc:	e303      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
 8008cde:	68fa      	ldr	r2, [r7, #12]
 8008ce0:	23c0      	movs	r3, #192	; 0xc0
 8008ce2:	009b      	lsls	r3, r3, #2
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d000      	beq.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 8008ce8:	e2fd      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    {
      frequency = HSE_VALUE / 32U;
 8008cea:	4bb4      	ldr	r3, [pc, #720]	; (8008fbc <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8008cec:	617b      	str	r3, [r7, #20]
 8008cee:	e2fa      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 8008cf0:	4bb1      	ldr	r3, [pc, #708]	; (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	2203      	movs	r2, #3
 8008cf6:	4013      	ands	r3, r2
 8008cf8:	2b02      	cmp	r3, #2
 8008cfa:	d102      	bne.n	8008d02 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 8008cfc:	4bb0      	ldr	r3, [pc, #704]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008cfe:	613b      	str	r3, [r7, #16]
 8008d00:	e00a      	b.n	8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 8008d02:	4bad      	ldr	r3, [pc, #692]	; (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	2203      	movs	r2, #3
 8008d08:	4013      	ands	r3, r2
 8008d0a:	2b03      	cmp	r3, #3
 8008d0c:	d102      	bne.n	8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 8008d0e:	4bad      	ldr	r3, [pc, #692]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8008d10:	613b      	str	r3, [r7, #16]
 8008d12:	e001      	b.n	8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 8008d14:	2300      	movs	r3, #0
 8008d16:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008d18:	4ba7      	ldr	r3, [pc, #668]	; (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008d1a:	68db      	ldr	r3, [r3, #12]
 8008d1c:	091b      	lsrs	r3, r3, #4
 8008d1e:	2207      	movs	r2, #7
 8008d20:	4013      	ands	r3, r2
 8008d22:	3301      	adds	r3, #1
 8008d24:	0019      	movs	r1, r3
 8008d26:	6938      	ldr	r0, [r7, #16]
 8008d28:	f7f7 f9ec 	bl	8000104 <__udivsi3>
 8008d2c:	0003      	movs	r3, r0
 8008d2e:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	2380      	movs	r3, #128	; 0x80
 8008d34:	03db      	lsls	r3, r3, #15
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d100      	bne.n	8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 8008d3a:	e28e      	b.n	800925a <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 8008d3c:	687a      	ldr	r2, [r7, #4]
 8008d3e:	2380      	movs	r3, #128	; 0x80
 8008d40:	03db      	lsls	r3, r3, #15
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d900      	bls.n	8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8008d46:	e2b7      	b.n	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	2380      	movs	r3, #128	; 0x80
 8008d4c:	039b      	lsls	r3, r3, #14
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d100      	bne.n	8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8008d52:	e253      	b.n	80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	2380      	movs	r3, #128	; 0x80
 8008d58:	039b      	lsls	r3, r3, #14
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d900      	bls.n	8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8008d5e:	e2ab      	b.n	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	2380      	movs	r3, #128	; 0x80
 8008d64:	031b      	lsls	r3, r3, #12
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d100      	bne.n	8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8008d6a:	e0b2      	b.n	8008ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	2380      	movs	r3, #128	; 0x80
 8008d70:	031b      	lsls	r3, r3, #12
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d900      	bls.n	8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8008d76:	e29f      	b.n	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	2380      	movs	r3, #128	; 0x80
 8008d7c:	01db      	lsls	r3, r3, #7
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d100      	bne.n	8008d84 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 8008d82:	e103      	b.n	8008f8c <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	2380      	movs	r3, #128	; 0x80
 8008d88:	01db      	lsls	r3, r3, #7
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d900      	bls.n	8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008d8e:	e293      	b.n	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	2380      	movs	r3, #128	; 0x80
 8008d94:	011b      	lsls	r3, r3, #4
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d100      	bne.n	8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8008d9a:	e165      	b.n	8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8008d9c:	687a      	ldr	r2, [r7, #4]
 8008d9e:	2380      	movs	r3, #128	; 0x80
 8008da0:	011b      	lsls	r3, r3, #4
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d900      	bls.n	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8008da6:	e287      	b.n	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	2380      	movs	r3, #128	; 0x80
 8008dac:	00db      	lsls	r3, r3, #3
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d100      	bne.n	8008db4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8008db2:	e1e3      	b.n	800917c <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	2380      	movs	r3, #128	; 0x80
 8008db8:	00db      	lsls	r3, r3, #3
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d900      	bls.n	8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8008dbe:	e27b      	b.n	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	2380      	movs	r3, #128	; 0x80
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d100      	bne.n	8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8008dca:	e197      	b.n	80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	2380      	movs	r3, #128	; 0x80
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d900      	bls.n	8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8008dd6:	e26f      	b.n	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2b20      	cmp	r3, #32
 8008ddc:	d100      	bne.n	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 8008dde:	e118      	b.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2b20      	cmp	r3, #32
 8008de4:	d900      	bls.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
 8008de6:	e267      	b.n	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2b10      	cmp	r3, #16
 8008dec:	d100      	bne.n	8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8008dee:	e093      	b.n	8008f18 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2b10      	cmp	r3, #16
 8008df4:	d900      	bls.n	8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8008df6:	e25f      	b.n	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	d003      	beq.n	8008e06 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2b02      	cmp	r3, #2
 8008e02:	d033      	beq.n	8008e6c <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 8008e04:	e258      	b.n	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008e06:	4b6c      	ldr	r3, [pc, #432]	; (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e0a:	2203      	movs	r2, #3
 8008e0c:	4013      	ands	r3, r2
 8008e0e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d104      	bne.n	8008e20 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008e16:	f7ff fd5b 	bl	80088d0 <HAL_RCC_GetPCLK1Freq>
 8008e1a:	0003      	movs	r3, r0
 8008e1c:	617b      	str	r3, [r7, #20]
        break;
 8008e1e:	e24d      	b.n	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d104      	bne.n	8008e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
          frequency = HAL_RCC_GetSysClockFreq();
 8008e26:	f7ff fcc7 	bl	80087b8 <HAL_RCC_GetSysClockFreq>
 8008e2a:	0003      	movs	r3, r0
 8008e2c:	617b      	str	r3, [r7, #20]
        break;
 8008e2e:	e245      	b.n	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8008e30:	4b61      	ldr	r3, [pc, #388]	; (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	2380      	movs	r3, #128	; 0x80
 8008e36:	00db      	lsls	r3, r3, #3
 8008e38:	401a      	ands	r2, r3
 8008e3a:	2380      	movs	r3, #128	; 0x80
 8008e3c:	00db      	lsls	r3, r3, #3
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d105      	bne.n	8008e4e <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2b02      	cmp	r3, #2
 8008e46:	d102      	bne.n	8008e4e <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
          frequency = HSI_VALUE;
 8008e48:	4b5d      	ldr	r3, [pc, #372]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008e4a:	617b      	str	r3, [r7, #20]
        break;
 8008e4c:	e236      	b.n	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008e4e:	4b5a      	ldr	r3, [pc, #360]	; (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e52:	2202      	movs	r2, #2
 8008e54:	4013      	ands	r3, r2
 8008e56:	2b02      	cmp	r3, #2
 8008e58:	d000      	beq.n	8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
 8008e5a:	e22f      	b.n	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2b03      	cmp	r3, #3
 8008e60:	d000      	beq.n	8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>
 8008e62:	e22b      	b.n	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          frequency = LSE_VALUE;
 8008e64:	2380      	movs	r3, #128	; 0x80
 8008e66:	021b      	lsls	r3, r3, #8
 8008e68:	617b      	str	r3, [r7, #20]
        break;
 8008e6a:	e227      	b.n	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008e6c:	4b52      	ldr	r3, [pc, #328]	; (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e70:	220c      	movs	r2, #12
 8008e72:	4013      	ands	r3, r2
 8008e74:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d104      	bne.n	8008e86 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008e7c:	f7ff fd28 	bl	80088d0 <HAL_RCC_GetPCLK1Freq>
 8008e80:	0003      	movs	r3, r0
 8008e82:	617b      	str	r3, [r7, #20]
        break;
 8008e84:	e21c      	b.n	80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2b04      	cmp	r3, #4
 8008e8a:	d104      	bne.n	8008e96 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          frequency = HAL_RCC_GetSysClockFreq();
 8008e8c:	f7ff fc94 	bl	80087b8 <HAL_RCC_GetSysClockFreq>
 8008e90:	0003      	movs	r3, r0
 8008e92:	617b      	str	r3, [r7, #20]
        break;
 8008e94:	e214      	b.n	80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8008e96:	4b48      	ldr	r3, [pc, #288]	; (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	2380      	movs	r3, #128	; 0x80
 8008e9c:	00db      	lsls	r3, r3, #3
 8008e9e:	401a      	ands	r2, r3
 8008ea0:	2380      	movs	r3, #128	; 0x80
 8008ea2:	00db      	lsls	r3, r3, #3
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d105      	bne.n	8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2b08      	cmp	r3, #8
 8008eac:	d102      	bne.n	8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
          frequency = HSI_VALUE;
 8008eae:	4b44      	ldr	r3, [pc, #272]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008eb0:	617b      	str	r3, [r7, #20]
        break;
 8008eb2:	e205      	b.n	80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008eb4:	4b40      	ldr	r3, [pc, #256]	; (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008eb8:	2202      	movs	r2, #2
 8008eba:	4013      	ands	r3, r2
 8008ebc:	2b02      	cmp	r3, #2
 8008ebe:	d000      	beq.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8008ec0:	e1fe      	b.n	80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2b0c      	cmp	r3, #12
 8008ec6:	d000      	beq.n	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8008ec8:	e1fa      	b.n	80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
          frequency = LSE_VALUE;
 8008eca:	2380      	movs	r3, #128	; 0x80
 8008ecc:	021b      	lsls	r3, r3, #8
 8008ece:	617b      	str	r3, [r7, #20]
        break;
 8008ed0:	e1f6      	b.n	80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8008ed2:	4b39      	ldr	r3, [pc, #228]	; (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ed6:	2240      	movs	r2, #64	; 0x40
 8008ed8:	4013      	ands	r3, r2
 8008eda:	60fb      	str	r3, [r7, #12]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_CECCLKSOURCE_HSI_DIV488))
 8008edc:	4b36      	ldr	r3, [pc, #216]	; (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008ede:	681a      	ldr	r2, [r3, #0]
 8008ee0:	2380      	movs	r3, #128	; 0x80
 8008ee2:	00db      	lsls	r3, r3, #3
 8008ee4:	401a      	ands	r2, r3
 8008ee6:	2380      	movs	r3, #128	; 0x80
 8008ee8:	00db      	lsls	r3, r3, #3
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d105      	bne.n	8008efa <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d102      	bne.n	8008efa <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
          frequency = (HSI_VALUE / 488U);
 8008ef4:	4b34      	ldr	r3, [pc, #208]	; (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 8008ef6:	617b      	str	r3, [r7, #20]
        break;
 8008ef8:	e1e4      	b.n	80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8008efa:	4b2f      	ldr	r3, [pc, #188]	; (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008efe:	2202      	movs	r2, #2
 8008f00:	4013      	ands	r3, r2
 8008f02:	2b02      	cmp	r3, #2
 8008f04:	d000      	beq.n	8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 8008f06:	e1dd      	b.n	80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2b40      	cmp	r3, #64	; 0x40
 8008f0c:	d000      	beq.n	8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 8008f0e:	e1d9      	b.n	80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
          frequency = LSE_VALUE;
 8008f10:	2380      	movs	r3, #128	; 0x80
 8008f12:	021b      	lsls	r3, r3, #8
 8008f14:	617b      	str	r3, [r7, #20]
        break;
 8008f16:	e1d5      	b.n	80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008f18:	4b27      	ldr	r3, [pc, #156]	; (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008f1a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f1c:	23c0      	movs	r3, #192	; 0xc0
 8008f1e:	011b      	lsls	r3, r3, #4
 8008f20:	4013      	ands	r3, r2
 8008f22:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d104      	bne.n	8008f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008f2a:	f7ff fcd1 	bl	80088d0 <HAL_RCC_GetPCLK1Freq>
 8008f2e:	0003      	movs	r3, r0
 8008f30:	617b      	str	r3, [r7, #20]
        break;
 8008f32:	e1c9      	b.n	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8008f34:	68fa      	ldr	r2, [r7, #12]
 8008f36:	2380      	movs	r3, #128	; 0x80
 8008f38:	00db      	lsls	r3, r3, #3
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d104      	bne.n	8008f48 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>
          frequency = HAL_RCC_GetSysClockFreq();
 8008f3e:	f7ff fc3b 	bl	80087b8 <HAL_RCC_GetSysClockFreq>
 8008f42:	0003      	movs	r3, r0
 8008f44:	617b      	str	r3, [r7, #20]
        break;
 8008f46:	e1bf      	b.n	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8008f48:	4b1b      	ldr	r3, [pc, #108]	; (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	2380      	movs	r3, #128	; 0x80
 8008f4e:	00db      	lsls	r3, r3, #3
 8008f50:	401a      	ands	r2, r3
 8008f52:	2380      	movs	r3, #128	; 0x80
 8008f54:	00db      	lsls	r3, r3, #3
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d107      	bne.n	8008f6a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
 8008f5a:	68fa      	ldr	r2, [r7, #12]
 8008f5c:	2380      	movs	r3, #128	; 0x80
 8008f5e:	011b      	lsls	r3, r3, #4
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d102      	bne.n	8008f6a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
          frequency = HSI_VALUE;
 8008f64:	4b16      	ldr	r3, [pc, #88]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008f66:	617b      	str	r3, [r7, #20]
        break;
 8008f68:	e1ae      	b.n	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8008f6a:	4b13      	ldr	r3, [pc, #76]	; (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f6e:	2202      	movs	r2, #2
 8008f70:	4013      	ands	r3, r2
 8008f72:	2b02      	cmp	r3, #2
 8008f74:	d000      	beq.n	8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8008f76:	e1a7      	b.n	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8008f78:	68fa      	ldr	r2, [r7, #12]
 8008f7a:	23c0      	movs	r3, #192	; 0xc0
 8008f7c:	011b      	lsls	r3, r3, #4
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d000      	beq.n	8008f84 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8008f82:	e1a1      	b.n	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
          frequency = LSE_VALUE;
 8008f84:	2380      	movs	r3, #128	; 0x80
 8008f86:	021b      	lsls	r3, r3, #8
 8008f88:	617b      	str	r3, [r7, #20]
        break;
 8008f8a:	e19d      	b.n	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008f8c:	4b0a      	ldr	r3, [pc, #40]	; (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f90:	0f9b      	lsrs	r3, r3, #30
 8008f92:	079b      	lsls	r3, r3, #30
 8008f94:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d104      	bne.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
          frequency = HAL_RCC_GetSysClockFreq();
 8008f9c:	f7ff fc0c 	bl	80087b8 <HAL_RCC_GetSysClockFreq>
 8008fa0:	0003      	movs	r3, r0
 8008fa2:	617b      	str	r3, [r7, #20]
        break;
 8008fa4:	e192      	b.n	80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 8008fa6:	68fa      	ldr	r2, [r7, #12]
 8008fa8:	2380      	movs	r3, #128	; 0x80
 8008faa:	061b      	lsls	r3, r3, #24
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d10d      	bne.n	8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x360>
          frequency = HSI_VALUE;
 8008fb0:	4b03      	ldr	r3, [pc, #12]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008fb2:	617b      	str	r3, [r7, #20]
        break;
 8008fb4:	e18a      	b.n	80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008fb6:	46c0      	nop			; (mov r8, r8)
 8008fb8:	40021000 	.word	0x40021000
 8008fbc:	0003d090 	.word	0x0003d090
 8008fc0:	00f42400 	.word	0x00f42400
 8008fc4:	007a1200 	.word	0x007a1200
 8008fc8:	00008012 	.word	0x00008012
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 8008fcc:	68fa      	ldr	r2, [r7, #12]
 8008fce:	2380      	movs	r3, #128	; 0x80
 8008fd0:	05db      	lsls	r3, r3, #23
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d000      	beq.n	8008fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
 8008fd6:	e179      	b.n	80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8008fd8:	4bc5      	ldr	r3, [pc, #788]	; (80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008fda:	68da      	ldr	r2, [r3, #12]
 8008fdc:	2380      	movs	r3, #128	; 0x80
 8008fde:	025b      	lsls	r3, r3, #9
 8008fe0:	4013      	ands	r3, r2
 8008fe2:	d100      	bne.n	8008fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8008fe4:	e172      	b.n	80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008fe6:	4bc2      	ldr	r3, [pc, #776]	; (80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008fe8:	68db      	ldr	r3, [r3, #12]
 8008fea:	0a1b      	lsrs	r3, r3, #8
 8008fec:	227f      	movs	r2, #127	; 0x7f
 8008fee:	4013      	ands	r3, r2
 8008ff0:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	68ba      	ldr	r2, [r7, #8]
 8008ff6:	435a      	muls	r2, r3
 8008ff8:	4bbd      	ldr	r3, [pc, #756]	; (80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008ffa:	68db      	ldr	r3, [r3, #12]
 8008ffc:	0c5b      	lsrs	r3, r3, #17
 8008ffe:	211f      	movs	r1, #31
 8009000:	400b      	ands	r3, r1
 8009002:	3301      	adds	r3, #1
 8009004:	0019      	movs	r1, r3
 8009006:	0010      	movs	r0, r2
 8009008:	f7f7 f87c 	bl	8000104 <__udivsi3>
 800900c:	0003      	movs	r3, r0
 800900e:	617b      	str	r3, [r7, #20]
        break;
 8009010:	e15c      	b.n	80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8009012:	4bb7      	ldr	r3, [pc, #732]	; (80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009014:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009016:	23c0      	movs	r3, #192	; 0xc0
 8009018:	019b      	lsls	r3, r3, #6
 800901a:	4013      	ands	r3, r2
 800901c:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d104      	bne.n	800902e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009024:	f7ff fc54 	bl	80088d0 <HAL_RCC_GetPCLK1Freq>
 8009028:	0003      	movs	r3, r0
 800902a:	617b      	str	r3, [r7, #20]
        break;
 800902c:	e150      	b.n	80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800902e:	68fa      	ldr	r2, [r7, #12]
 8009030:	2380      	movs	r3, #128	; 0x80
 8009032:	015b      	lsls	r3, r3, #5
 8009034:	429a      	cmp	r2, r3
 8009036:	d104      	bne.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          frequency = HAL_RCC_GetSysClockFreq();
 8009038:	f7ff fbbe 	bl	80087b8 <HAL_RCC_GetSysClockFreq>
 800903c:	0003      	movs	r3, r0
 800903e:	617b      	str	r3, [r7, #20]
        break;
 8009040:	e146      	b.n	80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8009042:	4bab      	ldr	r3, [pc, #684]	; (80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	2380      	movs	r3, #128	; 0x80
 8009048:	00db      	lsls	r3, r3, #3
 800904a:	401a      	ands	r2, r3
 800904c:	2380      	movs	r3, #128	; 0x80
 800904e:	00db      	lsls	r3, r3, #3
 8009050:	429a      	cmp	r2, r3
 8009052:	d000      	beq.n	8009056 <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 8009054:	e13c      	b.n	80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8009056:	68fa      	ldr	r2, [r7, #12]
 8009058:	2380      	movs	r3, #128	; 0x80
 800905a:	019b      	lsls	r3, r3, #6
 800905c:	429a      	cmp	r2, r3
 800905e:	d000      	beq.n	8009062 <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 8009060:	e136      	b.n	80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HSI_VALUE;
 8009062:	4ba4      	ldr	r3, [pc, #656]	; (80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8009064:	617b      	str	r3, [r7, #20]
        break;
 8009066:	e133      	b.n	80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 8009068:	4ba1      	ldr	r3, [pc, #644]	; (80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800906a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800906c:	23c0      	movs	r3, #192	; 0xc0
 800906e:	021b      	lsls	r3, r3, #8
 8009070:	4013      	ands	r3, r2
 8009072:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 8009074:	68fa      	ldr	r2, [r7, #12]
 8009076:	2380      	movs	r3, #128	; 0x80
 8009078:	01db      	lsls	r3, r3, #7
 800907a:	429a      	cmp	r2, r3
 800907c:	d11c      	bne.n	80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 800907e:	4b9c      	ldr	r3, [pc, #624]	; (80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009080:	68da      	ldr	r2, [r3, #12]
 8009082:	2380      	movs	r3, #128	; 0x80
 8009084:	025b      	lsls	r3, r3, #9
 8009086:	4013      	ands	r3, r2
 8009088:	d100      	bne.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 800908a:	e123      	b.n	80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800908c:	4b98      	ldr	r3, [pc, #608]	; (80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800908e:	68db      	ldr	r3, [r3, #12]
 8009090:	0a1b      	lsrs	r3, r3, #8
 8009092:	227f      	movs	r2, #127	; 0x7f
 8009094:	4013      	ands	r3, r2
 8009096:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	68ba      	ldr	r2, [r7, #8]
 800909c:	435a      	muls	r2, r3
 800909e:	4b94      	ldr	r3, [pc, #592]	; (80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80090a0:	68db      	ldr	r3, [r3, #12]
 80090a2:	0c5b      	lsrs	r3, r3, #17
 80090a4:	211f      	movs	r1, #31
 80090a6:	400b      	ands	r3, r1
 80090a8:	3301      	adds	r3, #1
 80090aa:	0019      	movs	r1, r3
 80090ac:	0010      	movs	r0, r2
 80090ae:	f7f7 f829 	bl	8000104 <__udivsi3>
 80090b2:	0003      	movs	r3, r0
 80090b4:	617b      	str	r3, [r7, #20]
        break;
 80090b6:	e10d      	b.n	80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d104      	bne.n	80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
          frequency = HAL_RCC_GetSysClockFreq();
 80090be:	f7ff fb7b 	bl	80087b8 <HAL_RCC_GetSysClockFreq>
 80090c2:	0003      	movs	r3, r0
 80090c4:	617b      	str	r3, [r7, #20]
        break;
 80090c6:	e105      	b.n	80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 80090c8:	4b89      	ldr	r3, [pc, #548]	; (80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	2380      	movs	r3, #128	; 0x80
 80090ce:	00db      	lsls	r3, r3, #3
 80090d0:	401a      	ands	r2, r3
 80090d2:	2380      	movs	r3, #128	; 0x80
 80090d4:	00db      	lsls	r3, r3, #3
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d107      	bne.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
 80090da:	68fa      	ldr	r2, [r7, #12]
 80090dc:	2380      	movs	r3, #128	; 0x80
 80090de:	021b      	lsls	r3, r3, #8
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d102      	bne.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          frequency = HSI_VALUE;
 80090e4:	4b83      	ldr	r3, [pc, #524]	; (80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 80090e6:	617b      	str	r3, [r7, #20]
        break;
 80090e8:	e0f4      	b.n	80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 80090ea:	68fa      	ldr	r2, [r7, #12]
 80090ec:	23c0      	movs	r3, #192	; 0xc0
 80090ee:	021b      	lsls	r3, r3, #8
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d000      	beq.n	80090f6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80090f4:	e0ee      	b.n	80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 80090f6:	4b80      	ldr	r3, [pc, #512]	; (80092f8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 80090f8:	617b      	str	r3, [r7, #20]
        break;
 80090fa:	e0eb      	b.n	80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80090fc:	4b7c      	ldr	r3, [pc, #496]	; (80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80090fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009100:	23c0      	movs	r3, #192	; 0xc0
 8009102:	031b      	lsls	r3, r3, #12
 8009104:	4013      	ands	r3, r2
 8009106:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d104      	bne.n	8009118 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
          frequency = HAL_RCC_GetPCLK1Freq();
 800910e:	f7ff fbdf 	bl	80088d0 <HAL_RCC_GetPCLK1Freq>
 8009112:	0003      	movs	r3, r0
 8009114:	617b      	str	r3, [r7, #20]
        break;
 8009116:	e0df      	b.n	80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8009118:	4b75      	ldr	r3, [pc, #468]	; (80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800911a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800911c:	2202      	movs	r2, #2
 800911e:	4013      	ands	r3, r2
 8009120:	2b02      	cmp	r3, #2
 8009122:	d108      	bne.n	8009136 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 8009124:	68fa      	ldr	r2, [r7, #12]
 8009126:	2380      	movs	r3, #128	; 0x80
 8009128:	02db      	lsls	r3, r3, #11
 800912a:	429a      	cmp	r2, r3
 800912c:	d103      	bne.n	8009136 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          frequency = LSI_VALUE;
 800912e:	23fa      	movs	r3, #250	; 0xfa
 8009130:	01db      	lsls	r3, r3, #7
 8009132:	617b      	str	r3, [r7, #20]
 8009134:	e021      	b.n	800917a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8009136:	4b6e      	ldr	r3, [pc, #440]	; (80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	2380      	movs	r3, #128	; 0x80
 800913c:	00db      	lsls	r3, r3, #3
 800913e:	401a      	ands	r2, r3
 8009140:	2380      	movs	r3, #128	; 0x80
 8009142:	00db      	lsls	r3, r3, #3
 8009144:	429a      	cmp	r2, r3
 8009146:	d107      	bne.n	8009158 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8009148:	68fa      	ldr	r2, [r7, #12]
 800914a:	2380      	movs	r3, #128	; 0x80
 800914c:	031b      	lsls	r3, r3, #12
 800914e:	429a      	cmp	r2, r3
 8009150:	d102      	bne.n	8009158 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          frequency = HSI_VALUE;
 8009152:	4b68      	ldr	r3, [pc, #416]	; (80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8009154:	617b      	str	r3, [r7, #20]
 8009156:	e010      	b.n	800917a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8009158:	4b65      	ldr	r3, [pc, #404]	; (80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800915a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800915c:	2202      	movs	r2, #2
 800915e:	4013      	ands	r3, r2
 8009160:	2b02      	cmp	r3, #2
 8009162:	d000      	beq.n	8009166 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8009164:	e0b8      	b.n	80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8009166:	68fa      	ldr	r2, [r7, #12]
 8009168:	23c0      	movs	r3, #192	; 0xc0
 800916a:	031b      	lsls	r3, r3, #12
 800916c:	429a      	cmp	r2, r3
 800916e:	d000      	beq.n	8009172 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009170:	e0b2      	b.n	80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          frequency = LSE_VALUE;
 8009172:	2380      	movs	r3, #128	; 0x80
 8009174:	021b      	lsls	r3, r3, #8
 8009176:	617b      	str	r3, [r7, #20]
        break;
 8009178:	e0ae      	b.n	80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 800917a:	e0ad      	b.n	80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800917c:	4b5c      	ldr	r3, [pc, #368]	; (80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800917e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009180:	23c0      	movs	r3, #192	; 0xc0
 8009182:	039b      	lsls	r3, r3, #14
 8009184:	4013      	ands	r3, r2
 8009186:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d104      	bne.n	8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
          frequency = HAL_RCC_GetPCLK1Freq();
 800918e:	f7ff fb9f 	bl	80088d0 <HAL_RCC_GetPCLK1Freq>
 8009192:	0003      	movs	r3, r0
 8009194:	617b      	str	r3, [r7, #20]
        break;
 8009196:	e0a1      	b.n	80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8009198:	4b55      	ldr	r3, [pc, #340]	; (80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800919a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800919c:	2202      	movs	r2, #2
 800919e:	4013      	ands	r3, r2
 80091a0:	2b02      	cmp	r3, #2
 80091a2:	d108      	bne.n	80091b6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 80091a4:	68fa      	ldr	r2, [r7, #12]
 80091a6:	2380      	movs	r3, #128	; 0x80
 80091a8:	035b      	lsls	r3, r3, #13
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d103      	bne.n	80091b6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = LSI_VALUE;
 80091ae:	23fa      	movs	r3, #250	; 0xfa
 80091b0:	01db      	lsls	r3, r3, #7
 80091b2:	617b      	str	r3, [r7, #20]
 80091b4:	e021      	b.n	80091fa <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80091b6:	4b4e      	ldr	r3, [pc, #312]	; (80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80091b8:	681a      	ldr	r2, [r3, #0]
 80091ba:	2380      	movs	r3, #128	; 0x80
 80091bc:	00db      	lsls	r3, r3, #3
 80091be:	401a      	ands	r2, r3
 80091c0:	2380      	movs	r3, #128	; 0x80
 80091c2:	00db      	lsls	r3, r3, #3
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d107      	bne.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 80091c8:	68fa      	ldr	r2, [r7, #12]
 80091ca:	2380      	movs	r3, #128	; 0x80
 80091cc:	039b      	lsls	r3, r3, #14
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d102      	bne.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
          frequency = HSI_VALUE;
 80091d2:	4b48      	ldr	r3, [pc, #288]	; (80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 80091d4:	617b      	str	r3, [r7, #20]
 80091d6:	e010      	b.n	80091fa <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80091d8:	4b45      	ldr	r3, [pc, #276]	; (80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80091da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091dc:	2202      	movs	r2, #2
 80091de:	4013      	ands	r3, r2
 80091e0:	2b02      	cmp	r3, #2
 80091e2:	d000      	beq.n	80091e6 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 80091e4:	e07a      	b.n	80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 80091e6:	68fa      	ldr	r2, [r7, #12]
 80091e8:	23c0      	movs	r3, #192	; 0xc0
 80091ea:	039b      	lsls	r3, r3, #14
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d000      	beq.n	80091f2 <HAL_RCCEx_GetPeriphCLKFreq+0x586>
 80091f0:	e074      	b.n	80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          frequency = LSE_VALUE;
 80091f2:	2380      	movs	r3, #128	; 0x80
 80091f4:	021b      	lsls	r3, r3, #8
 80091f6:	617b      	str	r3, [r7, #20]
        break;
 80091f8:	e070      	b.n	80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 80091fa:	e06f      	b.n	80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 80091fc:	4b3c      	ldr	r3, [pc, #240]	; (80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80091fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009200:	2380      	movs	r3, #128	; 0x80
 8009202:	03db      	lsls	r3, r3, #15
 8009204:	4013      	ands	r3, r2
 8009206:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 8009208:	68fa      	ldr	r2, [r7, #12]
 800920a:	2380      	movs	r3, #128	; 0x80
 800920c:	03db      	lsls	r3, r3, #15
 800920e:	429a      	cmp	r2, r3
 8009210:	d11b      	bne.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8009212:	4b37      	ldr	r3, [pc, #220]	; (80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009214:	68da      	ldr	r2, [r3, #12]
 8009216:	2380      	movs	r3, #128	; 0x80
 8009218:	045b      	lsls	r3, r3, #17
 800921a:	4013      	ands	r3, r2
 800921c:	d060      	beq.n	80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800921e:	4b34      	ldr	r3, [pc, #208]	; (80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009220:	68db      	ldr	r3, [r3, #12]
 8009222:	0a1b      	lsrs	r3, r3, #8
 8009224:	227f      	movs	r2, #127	; 0x7f
 8009226:	4013      	ands	r3, r2
 8009228:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	68ba      	ldr	r2, [r7, #8]
 800922e:	435a      	muls	r2, r3
 8009230:	4b2f      	ldr	r3, [pc, #188]	; (80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009232:	68db      	ldr	r3, [r3, #12]
 8009234:	0e5b      	lsrs	r3, r3, #25
 8009236:	2107      	movs	r1, #7
 8009238:	400b      	ands	r3, r1
 800923a:	3301      	adds	r3, #1
 800923c:	0019      	movs	r1, r3
 800923e:	0010      	movs	r0, r2
 8009240:	f7f6 ff60 	bl	8000104 <__udivsi3>
 8009244:	0003      	movs	r3, r0
 8009246:	617b      	str	r3, [r7, #20]
        break;
 8009248:	e04a      	b.n	80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d147      	bne.n	80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009250:	f7ff fb3e 	bl	80088d0 <HAL_RCC_GetPCLK1Freq>
 8009254:	0003      	movs	r3, r0
 8009256:	617b      	str	r3, [r7, #20]
        break;
 8009258:	e042      	b.n	80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM15SEL);
 800925a:	4b25      	ldr	r3, [pc, #148]	; (80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800925c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800925e:	2380      	movs	r3, #128	; 0x80
 8009260:	045b      	lsls	r3, r3, #17
 8009262:	4013      	ands	r3, r2
 8009264:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM15CLKSOURCE_PLL) /* PLL ? */
 8009266:	68fa      	ldr	r2, [r7, #12]
 8009268:	2380      	movs	r3, #128	; 0x80
 800926a:	045b      	lsls	r3, r3, #17
 800926c:	429a      	cmp	r2, r3
 800926e:	d11b      	bne.n	80092a8 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8009270:	4b1f      	ldr	r3, [pc, #124]	; (80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009272:	68da      	ldr	r2, [r3, #12]
 8009274:	2380      	movs	r3, #128	; 0x80
 8009276:	045b      	lsls	r3, r3, #17
 8009278:	4013      	ands	r3, r2
 800927a:	d033      	beq.n	80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800927c:	4b1c      	ldr	r3, [pc, #112]	; (80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800927e:	68db      	ldr	r3, [r3, #12]
 8009280:	0a1b      	lsrs	r3, r3, #8
 8009282:	227f      	movs	r2, #127	; 0x7f
 8009284:	4013      	ands	r3, r2
 8009286:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	68ba      	ldr	r2, [r7, #8]
 800928c:	435a      	muls	r2, r3
 800928e:	4b18      	ldr	r3, [pc, #96]	; (80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009290:	68db      	ldr	r3, [r3, #12]
 8009292:	0e5b      	lsrs	r3, r3, #25
 8009294:	2107      	movs	r1, #7
 8009296:	400b      	ands	r3, r1
 8009298:	3301      	adds	r3, #1
 800929a:	0019      	movs	r1, r3
 800929c:	0010      	movs	r0, r2
 800929e:	f7f6 ff31 	bl	8000104 <__udivsi3>
 80092a2:	0003      	movs	r3, r0
 80092a4:	617b      	str	r3, [r7, #20]
        break;
 80092a6:	e01d      	b.n	80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        else if (srcclk == RCC_TIM15CLKSOURCE_PCLK1) /* PCLK1 ? */
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d11a      	bne.n	80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
          frequency = HAL_RCC_GetPCLK1Freq();
 80092ae:	f7ff fb0f 	bl	80088d0 <HAL_RCC_GetPCLK1Freq>
 80092b2:	0003      	movs	r3, r0
 80092b4:	617b      	str	r3, [r7, #20]
        break;
 80092b6:	e015      	b.n	80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        break;
 80092b8:	46c0      	nop			; (mov r8, r8)
 80092ba:	e014      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80092bc:	46c0      	nop			; (mov r8, r8)
 80092be:	e012      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80092c0:	46c0      	nop			; (mov r8, r8)
 80092c2:	e010      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80092c4:	46c0      	nop			; (mov r8, r8)
 80092c6:	e00e      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80092c8:	46c0      	nop			; (mov r8, r8)
 80092ca:	e00c      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80092cc:	46c0      	nop			; (mov r8, r8)
 80092ce:	e00a      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80092d0:	46c0      	nop			; (mov r8, r8)
 80092d2:	e008      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80092d4:	46c0      	nop			; (mov r8, r8)
 80092d6:	e006      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80092d8:	46c0      	nop			; (mov r8, r8)
 80092da:	e004      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80092dc:	46c0      	nop			; (mov r8, r8)
 80092de:	e002      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80092e0:	46c0      	nop			; (mov r8, r8)
 80092e2:	e000      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80092e4:	46c0      	nop			; (mov r8, r8)
    }
  }

  return (frequency);
 80092e6:	697b      	ldr	r3, [r7, #20]
}
 80092e8:	0018      	movs	r0, r3
 80092ea:	46bd      	mov	sp, r7
 80092ec:	b006      	add	sp, #24
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	40021000 	.word	0x40021000
 80092f4:	00f42400 	.word	0x00f42400
 80092f8:	0000bb80 	.word	0x0000bb80

080092fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b084      	sub	sp, #16
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d101      	bne.n	800930e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800930a:	2301      	movs	r3, #1
 800930c:	e0a8      	b.n	8009460 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009312:	2b00      	cmp	r3, #0
 8009314:	d109      	bne.n	800932a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	685a      	ldr	r2, [r3, #4]
 800931a:	2382      	movs	r3, #130	; 0x82
 800931c:	005b      	lsls	r3, r3, #1
 800931e:	429a      	cmp	r2, r3
 8009320:	d009      	beq.n	8009336 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2200      	movs	r2, #0
 8009326:	61da      	str	r2, [r3, #28]
 8009328:	e005      	b.n	8009336 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2200      	movs	r2, #0
 800932e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2200      	movs	r2, #0
 8009334:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2200      	movs	r2, #0
 800933a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	225d      	movs	r2, #93	; 0x5d
 8009340:	5c9b      	ldrb	r3, [r3, r2]
 8009342:	b2db      	uxtb	r3, r3
 8009344:	2b00      	cmp	r3, #0
 8009346:	d107      	bne.n	8009358 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	225c      	movs	r2, #92	; 0x5c
 800934c:	2100      	movs	r1, #0
 800934e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	0018      	movs	r0, r3
 8009354:	f7fb fe00 	bl	8004f58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	225d      	movs	r2, #93	; 0x5d
 800935c:	2102      	movs	r1, #2
 800935e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	681a      	ldr	r2, [r3, #0]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	2140      	movs	r1, #64	; 0x40
 800936c:	438a      	bics	r2, r1
 800936e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	68da      	ldr	r2, [r3, #12]
 8009374:	23e0      	movs	r3, #224	; 0xe0
 8009376:	00db      	lsls	r3, r3, #3
 8009378:	429a      	cmp	r2, r3
 800937a:	d902      	bls.n	8009382 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800937c:	2300      	movs	r3, #0
 800937e:	60fb      	str	r3, [r7, #12]
 8009380:	e002      	b.n	8009388 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009382:	2380      	movs	r3, #128	; 0x80
 8009384:	015b      	lsls	r3, r3, #5
 8009386:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	68da      	ldr	r2, [r3, #12]
 800938c:	23f0      	movs	r3, #240	; 0xf0
 800938e:	011b      	lsls	r3, r3, #4
 8009390:	429a      	cmp	r2, r3
 8009392:	d008      	beq.n	80093a6 <HAL_SPI_Init+0xaa>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	68da      	ldr	r2, [r3, #12]
 8009398:	23e0      	movs	r3, #224	; 0xe0
 800939a:	00db      	lsls	r3, r3, #3
 800939c:	429a      	cmp	r2, r3
 800939e:	d002      	beq.n	80093a6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2200      	movs	r2, #0
 80093a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	685a      	ldr	r2, [r3, #4]
 80093aa:	2382      	movs	r3, #130	; 0x82
 80093ac:	005b      	lsls	r3, r3, #1
 80093ae:	401a      	ands	r2, r3
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6899      	ldr	r1, [r3, #8]
 80093b4:	2384      	movs	r3, #132	; 0x84
 80093b6:	021b      	lsls	r3, r3, #8
 80093b8:	400b      	ands	r3, r1
 80093ba:	431a      	orrs	r2, r3
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	691b      	ldr	r3, [r3, #16]
 80093c0:	2102      	movs	r1, #2
 80093c2:	400b      	ands	r3, r1
 80093c4:	431a      	orrs	r2, r3
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	695b      	ldr	r3, [r3, #20]
 80093ca:	2101      	movs	r1, #1
 80093cc:	400b      	ands	r3, r1
 80093ce:	431a      	orrs	r2, r3
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6999      	ldr	r1, [r3, #24]
 80093d4:	2380      	movs	r3, #128	; 0x80
 80093d6:	009b      	lsls	r3, r3, #2
 80093d8:	400b      	ands	r3, r1
 80093da:	431a      	orrs	r2, r3
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	69db      	ldr	r3, [r3, #28]
 80093e0:	2138      	movs	r1, #56	; 0x38
 80093e2:	400b      	ands	r3, r1
 80093e4:	431a      	orrs	r2, r3
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6a1b      	ldr	r3, [r3, #32]
 80093ea:	2180      	movs	r1, #128	; 0x80
 80093ec:	400b      	ands	r3, r1
 80093ee:	431a      	orrs	r2, r3
 80093f0:	0011      	movs	r1, r2
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80093f6:	2380      	movs	r3, #128	; 0x80
 80093f8:	019b      	lsls	r3, r3, #6
 80093fa:	401a      	ands	r2, r3
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	430a      	orrs	r2, r1
 8009402:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	699b      	ldr	r3, [r3, #24]
 8009408:	0c1b      	lsrs	r3, r3, #16
 800940a:	2204      	movs	r2, #4
 800940c:	401a      	ands	r2, r3
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009412:	2110      	movs	r1, #16
 8009414:	400b      	ands	r3, r1
 8009416:	431a      	orrs	r2, r3
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800941c:	2108      	movs	r1, #8
 800941e:	400b      	ands	r3, r1
 8009420:	431a      	orrs	r2, r3
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	68d9      	ldr	r1, [r3, #12]
 8009426:	23f0      	movs	r3, #240	; 0xf0
 8009428:	011b      	lsls	r3, r3, #4
 800942a:	400b      	ands	r3, r1
 800942c:	431a      	orrs	r2, r3
 800942e:	0011      	movs	r1, r2
 8009430:	68fa      	ldr	r2, [r7, #12]
 8009432:	2380      	movs	r3, #128	; 0x80
 8009434:	015b      	lsls	r3, r3, #5
 8009436:	401a      	ands	r2, r3
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	430a      	orrs	r2, r1
 800943e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	69da      	ldr	r2, [r3, #28]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4907      	ldr	r1, [pc, #28]	; (8009468 <HAL_SPI_Init+0x16c>)
 800944c:	400a      	ands	r2, r1
 800944e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	225d      	movs	r2, #93	; 0x5d
 800945a:	2101      	movs	r1, #1
 800945c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800945e:	2300      	movs	r3, #0
}
 8009460:	0018      	movs	r0, r3
 8009462:	46bd      	mov	sp, r7
 8009464:	b004      	add	sp, #16
 8009466:	bd80      	pop	{r7, pc}
 8009468:	fffff7ff 	.word	0xfffff7ff

0800946c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b088      	sub	sp, #32
 8009470:	af00      	add	r7, sp, #0
 8009472:	60f8      	str	r0, [r7, #12]
 8009474:	60b9      	str	r1, [r7, #8]
 8009476:	603b      	str	r3, [r7, #0]
 8009478:	1dbb      	adds	r3, r7, #6
 800947a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800947c:	231f      	movs	r3, #31
 800947e:	18fb      	adds	r3, r7, r3
 8009480:	2200      	movs	r2, #0
 8009482:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	225c      	movs	r2, #92	; 0x5c
 8009488:	5c9b      	ldrb	r3, [r3, r2]
 800948a:	2b01      	cmp	r3, #1
 800948c:	d101      	bne.n	8009492 <HAL_SPI_Transmit+0x26>
 800948e:	2302      	movs	r3, #2
 8009490:	e140      	b.n	8009714 <HAL_SPI_Transmit+0x2a8>
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	225c      	movs	r2, #92	; 0x5c
 8009496:	2101      	movs	r1, #1
 8009498:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800949a:	f7fc f8fb 	bl	8005694 <HAL_GetTick>
 800949e:	0003      	movs	r3, r0
 80094a0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80094a2:	2316      	movs	r3, #22
 80094a4:	18fb      	adds	r3, r7, r3
 80094a6:	1dba      	adds	r2, r7, #6
 80094a8:	8812      	ldrh	r2, [r2, #0]
 80094aa:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	225d      	movs	r2, #93	; 0x5d
 80094b0:	5c9b      	ldrb	r3, [r3, r2]
 80094b2:	b2db      	uxtb	r3, r3
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	d004      	beq.n	80094c2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80094b8:	231f      	movs	r3, #31
 80094ba:	18fb      	adds	r3, r7, r3
 80094bc:	2202      	movs	r2, #2
 80094be:	701a      	strb	r2, [r3, #0]
    goto error;
 80094c0:	e11d      	b.n	80096fe <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d003      	beq.n	80094d0 <HAL_SPI_Transmit+0x64>
 80094c8:	1dbb      	adds	r3, r7, #6
 80094ca:	881b      	ldrh	r3, [r3, #0]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d104      	bne.n	80094da <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80094d0:	231f      	movs	r3, #31
 80094d2:	18fb      	adds	r3, r7, r3
 80094d4:	2201      	movs	r2, #1
 80094d6:	701a      	strb	r2, [r3, #0]
    goto error;
 80094d8:	e111      	b.n	80096fe <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	225d      	movs	r2, #93	; 0x5d
 80094de:	2103      	movs	r1, #3
 80094e0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2200      	movs	r2, #0
 80094e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	68ba      	ldr	r2, [r7, #8]
 80094ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	1dba      	adds	r2, r7, #6
 80094f2:	8812      	ldrh	r2, [r2, #0]
 80094f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	1dba      	adds	r2, r7, #6
 80094fa:	8812      	ldrh	r2, [r2, #0]
 80094fc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2200      	movs	r2, #0
 8009502:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2244      	movs	r2, #68	; 0x44
 8009508:	2100      	movs	r1, #0
 800950a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2246      	movs	r2, #70	; 0x46
 8009510:	2100      	movs	r1, #0
 8009512:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2200      	movs	r2, #0
 8009518:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2200      	movs	r2, #0
 800951e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	689a      	ldr	r2, [r3, #8]
 8009524:	2380      	movs	r3, #128	; 0x80
 8009526:	021b      	lsls	r3, r3, #8
 8009528:	429a      	cmp	r2, r3
 800952a:	d110      	bne.n	800954e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	681a      	ldr	r2, [r3, #0]
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	2140      	movs	r1, #64	; 0x40
 8009538:	438a      	bics	r2, r1
 800953a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	681a      	ldr	r2, [r3, #0]
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	2180      	movs	r1, #128	; 0x80
 8009548:	01c9      	lsls	r1, r1, #7
 800954a:	430a      	orrs	r2, r1
 800954c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	2240      	movs	r2, #64	; 0x40
 8009556:	4013      	ands	r3, r2
 8009558:	2b40      	cmp	r3, #64	; 0x40
 800955a:	d007      	beq.n	800956c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	681a      	ldr	r2, [r3, #0]
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	2140      	movs	r1, #64	; 0x40
 8009568:	430a      	orrs	r2, r1
 800956a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	68da      	ldr	r2, [r3, #12]
 8009570:	23e0      	movs	r3, #224	; 0xe0
 8009572:	00db      	lsls	r3, r3, #3
 8009574:	429a      	cmp	r2, r3
 8009576:	d94e      	bls.n	8009616 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	685b      	ldr	r3, [r3, #4]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d004      	beq.n	800958a <HAL_SPI_Transmit+0x11e>
 8009580:	2316      	movs	r3, #22
 8009582:	18fb      	adds	r3, r7, r3
 8009584:	881b      	ldrh	r3, [r3, #0]
 8009586:	2b01      	cmp	r3, #1
 8009588:	d13f      	bne.n	800960a <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800958e:	881a      	ldrh	r2, [r3, #0]
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800959a:	1c9a      	adds	r2, r3, #2
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	3b01      	subs	r3, #1
 80095a8:	b29a      	uxth	r2, r3
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80095ae:	e02c      	b.n	800960a <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	689b      	ldr	r3, [r3, #8]
 80095b6:	2202      	movs	r2, #2
 80095b8:	4013      	ands	r3, r2
 80095ba:	2b02      	cmp	r3, #2
 80095bc:	d112      	bne.n	80095e4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095c2:	881a      	ldrh	r2, [r3, #0]
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ce:	1c9a      	adds	r2, r3, #2
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095d8:	b29b      	uxth	r3, r3
 80095da:	3b01      	subs	r3, #1
 80095dc:	b29a      	uxth	r2, r3
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80095e2:	e012      	b.n	800960a <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80095e4:	f7fc f856 	bl	8005694 <HAL_GetTick>
 80095e8:	0002      	movs	r2, r0
 80095ea:	69bb      	ldr	r3, [r7, #24]
 80095ec:	1ad3      	subs	r3, r2, r3
 80095ee:	683a      	ldr	r2, [r7, #0]
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d802      	bhi.n	80095fa <HAL_SPI_Transmit+0x18e>
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	3301      	adds	r3, #1
 80095f8:	d102      	bne.n	8009600 <HAL_SPI_Transmit+0x194>
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d104      	bne.n	800960a <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8009600:	231f      	movs	r3, #31
 8009602:	18fb      	adds	r3, r7, r3
 8009604:	2203      	movs	r2, #3
 8009606:	701a      	strb	r2, [r3, #0]
          goto error;
 8009608:	e079      	b.n	80096fe <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800960e:	b29b      	uxth	r3, r3
 8009610:	2b00      	cmp	r3, #0
 8009612:	d1cd      	bne.n	80095b0 <HAL_SPI_Transmit+0x144>
 8009614:	e04f      	b.n	80096b6 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	685b      	ldr	r3, [r3, #4]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d004      	beq.n	8009628 <HAL_SPI_Transmit+0x1bc>
 800961e:	2316      	movs	r3, #22
 8009620:	18fb      	adds	r3, r7, r3
 8009622:	881b      	ldrh	r3, [r3, #0]
 8009624:	2b01      	cmp	r3, #1
 8009626:	d141      	bne.n	80096ac <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	330c      	adds	r3, #12
 8009632:	7812      	ldrb	r2, [r2, #0]
 8009634:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800963a:	1c5a      	adds	r2, r3, #1
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009644:	b29b      	uxth	r3, r3
 8009646:	3b01      	subs	r3, #1
 8009648:	b29a      	uxth	r2, r3
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800964e:	e02d      	b.n	80096ac <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	689b      	ldr	r3, [r3, #8]
 8009656:	2202      	movs	r2, #2
 8009658:	4013      	ands	r3, r2
 800965a:	2b02      	cmp	r3, #2
 800965c:	d113      	bne.n	8009686 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	330c      	adds	r3, #12
 8009668:	7812      	ldrb	r2, [r2, #0]
 800966a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009670:	1c5a      	adds	r2, r3, #1
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800967a:	b29b      	uxth	r3, r3
 800967c:	3b01      	subs	r3, #1
 800967e:	b29a      	uxth	r2, r3
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009684:	e012      	b.n	80096ac <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009686:	f7fc f805 	bl	8005694 <HAL_GetTick>
 800968a:	0002      	movs	r2, r0
 800968c:	69bb      	ldr	r3, [r7, #24]
 800968e:	1ad3      	subs	r3, r2, r3
 8009690:	683a      	ldr	r2, [r7, #0]
 8009692:	429a      	cmp	r2, r3
 8009694:	d802      	bhi.n	800969c <HAL_SPI_Transmit+0x230>
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	3301      	adds	r3, #1
 800969a:	d102      	bne.n	80096a2 <HAL_SPI_Transmit+0x236>
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d104      	bne.n	80096ac <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80096a2:	231f      	movs	r3, #31
 80096a4:	18fb      	adds	r3, r7, r3
 80096a6:	2203      	movs	r2, #3
 80096a8:	701a      	strb	r2, [r3, #0]
          goto error;
 80096aa:	e028      	b.n	80096fe <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d1cc      	bne.n	8009650 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80096b6:	69ba      	ldr	r2, [r7, #24]
 80096b8:	6839      	ldr	r1, [r7, #0]
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	0018      	movs	r0, r3
 80096be:	f001 f9cb 	bl	800aa58 <SPI_EndRxTxTransaction>
 80096c2:	1e03      	subs	r3, r0, #0
 80096c4:	d002      	beq.n	80096cc <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	2220      	movs	r2, #32
 80096ca:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d10a      	bne.n	80096ea <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80096d4:	2300      	movs	r3, #0
 80096d6:	613b      	str	r3, [r7, #16]
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	68db      	ldr	r3, [r3, #12]
 80096de:	613b      	str	r3, [r7, #16]
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	689b      	ldr	r3, [r3, #8]
 80096e6:	613b      	str	r3, [r7, #16]
 80096e8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d004      	beq.n	80096fc <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80096f2:	231f      	movs	r3, #31
 80096f4:	18fb      	adds	r3, r7, r3
 80096f6:	2201      	movs	r2, #1
 80096f8:	701a      	strb	r2, [r3, #0]
 80096fa:	e000      	b.n	80096fe <HAL_SPI_Transmit+0x292>
  }

error:
 80096fc:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	225d      	movs	r2, #93	; 0x5d
 8009702:	2101      	movs	r1, #1
 8009704:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	225c      	movs	r2, #92	; 0x5c
 800970a:	2100      	movs	r1, #0
 800970c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800970e:	231f      	movs	r3, #31
 8009710:	18fb      	adds	r3, r7, r3
 8009712:	781b      	ldrb	r3, [r3, #0]
}
 8009714:	0018      	movs	r0, r3
 8009716:	46bd      	mov	sp, r7
 8009718:	b008      	add	sp, #32
 800971a:	bd80      	pop	{r7, pc}

0800971c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800971c:	b590      	push	{r4, r7, lr}
 800971e:	b089      	sub	sp, #36	; 0x24
 8009720:	af02      	add	r7, sp, #8
 8009722:	60f8      	str	r0, [r7, #12]
 8009724:	60b9      	str	r1, [r7, #8]
 8009726:	603b      	str	r3, [r7, #0]
 8009728:	1dbb      	adds	r3, r7, #6
 800972a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800972c:	2317      	movs	r3, #23
 800972e:	18fb      	adds	r3, r7, r3
 8009730:	2200      	movs	r2, #0
 8009732:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	685a      	ldr	r2, [r3, #4]
 8009738:	2382      	movs	r3, #130	; 0x82
 800973a:	005b      	lsls	r3, r3, #1
 800973c:	429a      	cmp	r2, r3
 800973e:	d113      	bne.n	8009768 <HAL_SPI_Receive+0x4c>
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	689b      	ldr	r3, [r3, #8]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d10f      	bne.n	8009768 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	225d      	movs	r2, #93	; 0x5d
 800974c:	2104      	movs	r1, #4
 800974e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009750:	1dbb      	adds	r3, r7, #6
 8009752:	881c      	ldrh	r4, [r3, #0]
 8009754:	68ba      	ldr	r2, [r7, #8]
 8009756:	68b9      	ldr	r1, [r7, #8]
 8009758:	68f8      	ldr	r0, [r7, #12]
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	9300      	str	r3, [sp, #0]
 800975e:	0023      	movs	r3, r4
 8009760:	f000 f928 	bl	80099b4 <HAL_SPI_TransmitReceive>
 8009764:	0003      	movs	r3, r0
 8009766:	e11c      	b.n	80099a2 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	225c      	movs	r2, #92	; 0x5c
 800976c:	5c9b      	ldrb	r3, [r3, r2]
 800976e:	2b01      	cmp	r3, #1
 8009770:	d101      	bne.n	8009776 <HAL_SPI_Receive+0x5a>
 8009772:	2302      	movs	r3, #2
 8009774:	e115      	b.n	80099a2 <HAL_SPI_Receive+0x286>
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	225c      	movs	r2, #92	; 0x5c
 800977a:	2101      	movs	r1, #1
 800977c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800977e:	f7fb ff89 	bl	8005694 <HAL_GetTick>
 8009782:	0003      	movs	r3, r0
 8009784:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	225d      	movs	r2, #93	; 0x5d
 800978a:	5c9b      	ldrb	r3, [r3, r2]
 800978c:	b2db      	uxtb	r3, r3
 800978e:	2b01      	cmp	r3, #1
 8009790:	d004      	beq.n	800979c <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8009792:	2317      	movs	r3, #23
 8009794:	18fb      	adds	r3, r7, r3
 8009796:	2202      	movs	r2, #2
 8009798:	701a      	strb	r2, [r3, #0]
    goto error;
 800979a:	e0f7      	b.n	800998c <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d003      	beq.n	80097aa <HAL_SPI_Receive+0x8e>
 80097a2:	1dbb      	adds	r3, r7, #6
 80097a4:	881b      	ldrh	r3, [r3, #0]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d104      	bne.n	80097b4 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 80097aa:	2317      	movs	r3, #23
 80097ac:	18fb      	adds	r3, r7, r3
 80097ae:	2201      	movs	r2, #1
 80097b0:	701a      	strb	r2, [r3, #0]
    goto error;
 80097b2:	e0eb      	b.n	800998c <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	225d      	movs	r2, #93	; 0x5d
 80097b8:	2104      	movs	r1, #4
 80097ba:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2200      	movs	r2, #0
 80097c0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	68ba      	ldr	r2, [r7, #8]
 80097c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	1dba      	adds	r2, r7, #6
 80097cc:	2144      	movs	r1, #68	; 0x44
 80097ce:	8812      	ldrh	r2, [r2, #0]
 80097d0:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	1dba      	adds	r2, r7, #6
 80097d6:	2146      	movs	r1, #70	; 0x46
 80097d8:	8812      	ldrh	r2, [r2, #0]
 80097da:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2200      	movs	r2, #0
 80097e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	2200      	movs	r2, #0
 80097e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2200      	movs	r2, #0
 80097ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2200      	movs	r2, #0
 80097f2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2200      	movs	r2, #0
 80097f8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	68da      	ldr	r2, [r3, #12]
 80097fe:	23e0      	movs	r3, #224	; 0xe0
 8009800:	00db      	lsls	r3, r3, #3
 8009802:	429a      	cmp	r2, r3
 8009804:	d908      	bls.n	8009818 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	685a      	ldr	r2, [r3, #4]
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4966      	ldr	r1, [pc, #408]	; (80099ac <HAL_SPI_Receive+0x290>)
 8009812:	400a      	ands	r2, r1
 8009814:	605a      	str	r2, [r3, #4]
 8009816:	e008      	b.n	800982a <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	685a      	ldr	r2, [r3, #4]
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	2180      	movs	r1, #128	; 0x80
 8009824:	0149      	lsls	r1, r1, #5
 8009826:	430a      	orrs	r2, r1
 8009828:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	689a      	ldr	r2, [r3, #8]
 800982e:	2380      	movs	r3, #128	; 0x80
 8009830:	021b      	lsls	r3, r3, #8
 8009832:	429a      	cmp	r2, r3
 8009834:	d10f      	bne.n	8009856 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	681a      	ldr	r2, [r3, #0]
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	2140      	movs	r1, #64	; 0x40
 8009842:	438a      	bics	r2, r1
 8009844:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	681a      	ldr	r2, [r3, #0]
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4957      	ldr	r1, [pc, #348]	; (80099b0 <HAL_SPI_Receive+0x294>)
 8009852:	400a      	ands	r2, r1
 8009854:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	2240      	movs	r2, #64	; 0x40
 800985e:	4013      	ands	r3, r2
 8009860:	2b40      	cmp	r3, #64	; 0x40
 8009862:	d007      	beq.n	8009874 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	2140      	movs	r1, #64	; 0x40
 8009870:	430a      	orrs	r2, r1
 8009872:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	68da      	ldr	r2, [r3, #12]
 8009878:	23e0      	movs	r3, #224	; 0xe0
 800987a:	00db      	lsls	r3, r3, #3
 800987c:	429a      	cmp	r2, r3
 800987e:	d900      	bls.n	8009882 <HAL_SPI_Receive+0x166>
 8009880:	e069      	b.n	8009956 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009882:	e031      	b.n	80098e8 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	689b      	ldr	r3, [r3, #8]
 800988a:	2201      	movs	r2, #1
 800988c:	4013      	ands	r3, r2
 800988e:	2b01      	cmp	r3, #1
 8009890:	d117      	bne.n	80098c2 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	330c      	adds	r3, #12
 8009898:	001a      	movs	r2, r3
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800989e:	7812      	ldrb	r2, [r2, #0]
 80098a0:	b2d2      	uxtb	r2, r2
 80098a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098a8:	1c5a      	adds	r2, r3, #1
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2246      	movs	r2, #70	; 0x46
 80098b2:	5a9b      	ldrh	r3, [r3, r2]
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	3b01      	subs	r3, #1
 80098b8:	b299      	uxth	r1, r3
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2246      	movs	r2, #70	; 0x46
 80098be:	5299      	strh	r1, [r3, r2]
 80098c0:	e012      	b.n	80098e8 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80098c2:	f7fb fee7 	bl	8005694 <HAL_GetTick>
 80098c6:	0002      	movs	r2, r0
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	1ad3      	subs	r3, r2, r3
 80098cc:	683a      	ldr	r2, [r7, #0]
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d802      	bhi.n	80098d8 <HAL_SPI_Receive+0x1bc>
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	3301      	adds	r3, #1
 80098d6:	d102      	bne.n	80098de <HAL_SPI_Receive+0x1c2>
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d104      	bne.n	80098e8 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 80098de:	2317      	movs	r3, #23
 80098e0:	18fb      	adds	r3, r7, r3
 80098e2:	2203      	movs	r2, #3
 80098e4:	701a      	strb	r2, [r3, #0]
          goto error;
 80098e6:	e051      	b.n	800998c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2246      	movs	r2, #70	; 0x46
 80098ec:	5a9b      	ldrh	r3, [r3, r2]
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d1c7      	bne.n	8009884 <HAL_SPI_Receive+0x168>
 80098f4:	e035      	b.n	8009962 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	2201      	movs	r2, #1
 80098fe:	4013      	ands	r3, r2
 8009900:	2b01      	cmp	r3, #1
 8009902:	d115      	bne.n	8009930 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	68da      	ldr	r2, [r3, #12]
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800990e:	b292      	uxth	r2, r2
 8009910:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009916:	1c9a      	adds	r2, r3, #2
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2246      	movs	r2, #70	; 0x46
 8009920:	5a9b      	ldrh	r3, [r3, r2]
 8009922:	b29b      	uxth	r3, r3
 8009924:	3b01      	subs	r3, #1
 8009926:	b299      	uxth	r1, r3
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	2246      	movs	r2, #70	; 0x46
 800992c:	5299      	strh	r1, [r3, r2]
 800992e:	e012      	b.n	8009956 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009930:	f7fb feb0 	bl	8005694 <HAL_GetTick>
 8009934:	0002      	movs	r2, r0
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	1ad3      	subs	r3, r2, r3
 800993a:	683a      	ldr	r2, [r7, #0]
 800993c:	429a      	cmp	r2, r3
 800993e:	d802      	bhi.n	8009946 <HAL_SPI_Receive+0x22a>
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	3301      	adds	r3, #1
 8009944:	d102      	bne.n	800994c <HAL_SPI_Receive+0x230>
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d104      	bne.n	8009956 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 800994c:	2317      	movs	r3, #23
 800994e:	18fb      	adds	r3, r7, r3
 8009950:	2203      	movs	r2, #3
 8009952:	701a      	strb	r2, [r3, #0]
          goto error;
 8009954:	e01a      	b.n	800998c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2246      	movs	r2, #70	; 0x46
 800995a:	5a9b      	ldrh	r3, [r3, r2]
 800995c:	b29b      	uxth	r3, r3
 800995e:	2b00      	cmp	r3, #0
 8009960:	d1c9      	bne.n	80098f6 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009962:	693a      	ldr	r2, [r7, #16]
 8009964:	6839      	ldr	r1, [r7, #0]
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	0018      	movs	r0, r3
 800996a:	f001 f817 	bl	800a99c <SPI_EndRxTransaction>
 800996e:	1e03      	subs	r3, r0, #0
 8009970:	d002      	beq.n	8009978 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	2220      	movs	r2, #32
 8009976:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800997c:	2b00      	cmp	r3, #0
 800997e:	d004      	beq.n	800998a <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8009980:	2317      	movs	r3, #23
 8009982:	18fb      	adds	r3, r7, r3
 8009984:	2201      	movs	r2, #1
 8009986:	701a      	strb	r2, [r3, #0]
 8009988:	e000      	b.n	800998c <HAL_SPI_Receive+0x270>
  }

error :
 800998a:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	225d      	movs	r2, #93	; 0x5d
 8009990:	2101      	movs	r1, #1
 8009992:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	225c      	movs	r2, #92	; 0x5c
 8009998:	2100      	movs	r1, #0
 800999a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800999c:	2317      	movs	r3, #23
 800999e:	18fb      	adds	r3, r7, r3
 80099a0:	781b      	ldrb	r3, [r3, #0]
}
 80099a2:	0018      	movs	r0, r3
 80099a4:	46bd      	mov	sp, r7
 80099a6:	b007      	add	sp, #28
 80099a8:	bd90      	pop	{r4, r7, pc}
 80099aa:	46c0      	nop			; (mov r8, r8)
 80099ac:	ffffefff 	.word	0xffffefff
 80099b0:	ffffbfff 	.word	0xffffbfff

080099b4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b08a      	sub	sp, #40	; 0x28
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	60f8      	str	r0, [r7, #12]
 80099bc:	60b9      	str	r1, [r7, #8]
 80099be:	607a      	str	r2, [r7, #4]
 80099c0:	001a      	movs	r2, r3
 80099c2:	1cbb      	adds	r3, r7, #2
 80099c4:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80099c6:	2301      	movs	r3, #1
 80099c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80099ca:	2323      	movs	r3, #35	; 0x23
 80099cc:	18fb      	adds	r3, r7, r3
 80099ce:	2200      	movs	r2, #0
 80099d0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	225c      	movs	r2, #92	; 0x5c
 80099d6:	5c9b      	ldrb	r3, [r3, r2]
 80099d8:	2b01      	cmp	r3, #1
 80099da:	d101      	bne.n	80099e0 <HAL_SPI_TransmitReceive+0x2c>
 80099dc:	2302      	movs	r3, #2
 80099de:	e1b5      	b.n	8009d4c <HAL_SPI_TransmitReceive+0x398>
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	225c      	movs	r2, #92	; 0x5c
 80099e4:	2101      	movs	r1, #1
 80099e6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80099e8:	f7fb fe54 	bl	8005694 <HAL_GetTick>
 80099ec:	0003      	movs	r3, r0
 80099ee:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80099f0:	201b      	movs	r0, #27
 80099f2:	183b      	adds	r3, r7, r0
 80099f4:	68fa      	ldr	r2, [r7, #12]
 80099f6:	215d      	movs	r1, #93	; 0x5d
 80099f8:	5c52      	ldrb	r2, [r2, r1]
 80099fa:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8009a02:	2312      	movs	r3, #18
 8009a04:	18fb      	adds	r3, r7, r3
 8009a06:	1cba      	adds	r2, r7, #2
 8009a08:	8812      	ldrh	r2, [r2, #0]
 8009a0a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009a0c:	183b      	adds	r3, r7, r0
 8009a0e:	781b      	ldrb	r3, [r3, #0]
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	d011      	beq.n	8009a38 <HAL_SPI_TransmitReceive+0x84>
 8009a14:	697a      	ldr	r2, [r7, #20]
 8009a16:	2382      	movs	r3, #130	; 0x82
 8009a18:	005b      	lsls	r3, r3, #1
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	d107      	bne.n	8009a2e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	689b      	ldr	r3, [r3, #8]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d103      	bne.n	8009a2e <HAL_SPI_TransmitReceive+0x7a>
 8009a26:	183b      	adds	r3, r7, r0
 8009a28:	781b      	ldrb	r3, [r3, #0]
 8009a2a:	2b04      	cmp	r3, #4
 8009a2c:	d004      	beq.n	8009a38 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8009a2e:	2323      	movs	r3, #35	; 0x23
 8009a30:	18fb      	adds	r3, r7, r3
 8009a32:	2202      	movs	r2, #2
 8009a34:	701a      	strb	r2, [r3, #0]
    goto error;
 8009a36:	e17e      	b.n	8009d36 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d006      	beq.n	8009a4c <HAL_SPI_TransmitReceive+0x98>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d003      	beq.n	8009a4c <HAL_SPI_TransmitReceive+0x98>
 8009a44:	1cbb      	adds	r3, r7, #2
 8009a46:	881b      	ldrh	r3, [r3, #0]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d104      	bne.n	8009a56 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8009a4c:	2323      	movs	r3, #35	; 0x23
 8009a4e:	18fb      	adds	r3, r7, r3
 8009a50:	2201      	movs	r2, #1
 8009a52:	701a      	strb	r2, [r3, #0]
    goto error;
 8009a54:	e16f      	b.n	8009d36 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	225d      	movs	r2, #93	; 0x5d
 8009a5a:	5c9b      	ldrb	r3, [r3, r2]
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	2b04      	cmp	r3, #4
 8009a60:	d003      	beq.n	8009a6a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	225d      	movs	r2, #93	; 0x5d
 8009a66:	2105      	movs	r1, #5
 8009a68:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	687a      	ldr	r2, [r7, #4]
 8009a74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	1cba      	adds	r2, r7, #2
 8009a7a:	2146      	movs	r1, #70	; 0x46
 8009a7c:	8812      	ldrh	r2, [r2, #0]
 8009a7e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	1cba      	adds	r2, r7, #2
 8009a84:	2144      	movs	r1, #68	; 0x44
 8009a86:	8812      	ldrh	r2, [r2, #0]
 8009a88:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	68ba      	ldr	r2, [r7, #8]
 8009a8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	1cba      	adds	r2, r7, #2
 8009a94:	8812      	ldrh	r2, [r2, #0]
 8009a96:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	1cba      	adds	r2, r7, #2
 8009a9c:	8812      	ldrh	r2, [r2, #0]
 8009a9e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	68da      	ldr	r2, [r3, #12]
 8009ab0:	23e0      	movs	r3, #224	; 0xe0
 8009ab2:	00db      	lsls	r3, r3, #3
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	d908      	bls.n	8009aca <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	685a      	ldr	r2, [r3, #4]
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	49a4      	ldr	r1, [pc, #656]	; (8009d54 <HAL_SPI_TransmitReceive+0x3a0>)
 8009ac4:	400a      	ands	r2, r1
 8009ac6:	605a      	str	r2, [r3, #4]
 8009ac8:	e008      	b.n	8009adc <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	685a      	ldr	r2, [r3, #4]
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	2180      	movs	r1, #128	; 0x80
 8009ad6:	0149      	lsls	r1, r1, #5
 8009ad8:	430a      	orrs	r2, r1
 8009ada:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2240      	movs	r2, #64	; 0x40
 8009ae4:	4013      	ands	r3, r2
 8009ae6:	2b40      	cmp	r3, #64	; 0x40
 8009ae8:	d007      	beq.n	8009afa <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	681a      	ldr	r2, [r3, #0]
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	2140      	movs	r1, #64	; 0x40
 8009af6:	430a      	orrs	r2, r1
 8009af8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	68da      	ldr	r2, [r3, #12]
 8009afe:	23e0      	movs	r3, #224	; 0xe0
 8009b00:	00db      	lsls	r3, r3, #3
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d800      	bhi.n	8009b08 <HAL_SPI_TransmitReceive+0x154>
 8009b06:	e07f      	b.n	8009c08 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d005      	beq.n	8009b1c <HAL_SPI_TransmitReceive+0x168>
 8009b10:	2312      	movs	r3, #18
 8009b12:	18fb      	adds	r3, r7, r3
 8009b14:	881b      	ldrh	r3, [r3, #0]
 8009b16:	2b01      	cmp	r3, #1
 8009b18:	d000      	beq.n	8009b1c <HAL_SPI_TransmitReceive+0x168>
 8009b1a:	e069      	b.n	8009bf0 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b20:	881a      	ldrh	r2, [r3, #0]
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b2c:	1c9a      	adds	r2, r3, #2
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	3b01      	subs	r3, #1
 8009b3a:	b29a      	uxth	r2, r3
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b40:	e056      	b.n	8009bf0 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	689b      	ldr	r3, [r3, #8]
 8009b48:	2202      	movs	r2, #2
 8009b4a:	4013      	ands	r3, r2
 8009b4c:	2b02      	cmp	r3, #2
 8009b4e:	d11b      	bne.n	8009b88 <HAL_SPI_TransmitReceive+0x1d4>
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b54:	b29b      	uxth	r3, r3
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d016      	beq.n	8009b88 <HAL_SPI_TransmitReceive+0x1d4>
 8009b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d113      	bne.n	8009b88 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b64:	881a      	ldrh	r2, [r3, #0]
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b70:	1c9a      	adds	r2, r3, #2
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	3b01      	subs	r3, #1
 8009b7e:	b29a      	uxth	r2, r3
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009b84:	2300      	movs	r3, #0
 8009b86:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	689b      	ldr	r3, [r3, #8]
 8009b8e:	2201      	movs	r2, #1
 8009b90:	4013      	ands	r3, r2
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	d11c      	bne.n	8009bd0 <HAL_SPI_TransmitReceive+0x21c>
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2246      	movs	r2, #70	; 0x46
 8009b9a:	5a9b      	ldrh	r3, [r3, r2]
 8009b9c:	b29b      	uxth	r3, r3
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d016      	beq.n	8009bd0 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	68da      	ldr	r2, [r3, #12]
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bac:	b292      	uxth	r2, r2
 8009bae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bb4:	1c9a      	adds	r2, r3, #2
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2246      	movs	r2, #70	; 0x46
 8009bbe:	5a9b      	ldrh	r3, [r3, r2]
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	3b01      	subs	r3, #1
 8009bc4:	b299      	uxth	r1, r3
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2246      	movs	r2, #70	; 0x46
 8009bca:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009bd0:	f7fb fd60 	bl	8005694 <HAL_GetTick>
 8009bd4:	0002      	movs	r2, r0
 8009bd6:	69fb      	ldr	r3, [r7, #28]
 8009bd8:	1ad3      	subs	r3, r2, r3
 8009bda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d807      	bhi.n	8009bf0 <HAL_SPI_TransmitReceive+0x23c>
 8009be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be2:	3301      	adds	r3, #1
 8009be4:	d004      	beq.n	8009bf0 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8009be6:	2323      	movs	r3, #35	; 0x23
 8009be8:	18fb      	adds	r3, r7, r3
 8009bea:	2203      	movs	r2, #3
 8009bec:	701a      	strb	r2, [r3, #0]
        goto error;
 8009bee:	e0a2      	b.n	8009d36 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bf4:	b29b      	uxth	r3, r3
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d1a3      	bne.n	8009b42 <HAL_SPI_TransmitReceive+0x18e>
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2246      	movs	r2, #70	; 0x46
 8009bfe:	5a9b      	ldrh	r3, [r3, r2]
 8009c00:	b29b      	uxth	r3, r3
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d19d      	bne.n	8009b42 <HAL_SPI_TransmitReceive+0x18e>
 8009c06:	e085      	b.n	8009d14 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d005      	beq.n	8009c1c <HAL_SPI_TransmitReceive+0x268>
 8009c10:	2312      	movs	r3, #18
 8009c12:	18fb      	adds	r3, r7, r3
 8009c14:	881b      	ldrh	r3, [r3, #0]
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d000      	beq.n	8009c1c <HAL_SPI_TransmitReceive+0x268>
 8009c1a:	e070      	b.n	8009cfe <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	330c      	adds	r3, #12
 8009c26:	7812      	ldrb	r2, [r2, #0]
 8009c28:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c2e:	1c5a      	adds	r2, r3, #1
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c38:	b29b      	uxth	r3, r3
 8009c3a:	3b01      	subs	r3, #1
 8009c3c:	b29a      	uxth	r2, r3
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009c42:	e05c      	b.n	8009cfe <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	689b      	ldr	r3, [r3, #8]
 8009c4a:	2202      	movs	r2, #2
 8009c4c:	4013      	ands	r3, r2
 8009c4e:	2b02      	cmp	r3, #2
 8009c50:	d11c      	bne.n	8009c8c <HAL_SPI_TransmitReceive+0x2d8>
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c56:	b29b      	uxth	r3, r3
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d017      	beq.n	8009c8c <HAL_SPI_TransmitReceive+0x2d8>
 8009c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5e:	2b01      	cmp	r3, #1
 8009c60:	d114      	bne.n	8009c8c <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	330c      	adds	r3, #12
 8009c6c:	7812      	ldrb	r2, [r2, #0]
 8009c6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c74:	1c5a      	adds	r2, r3, #1
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c7e:	b29b      	uxth	r3, r3
 8009c80:	3b01      	subs	r3, #1
 8009c82:	b29a      	uxth	r2, r3
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	689b      	ldr	r3, [r3, #8]
 8009c92:	2201      	movs	r2, #1
 8009c94:	4013      	ands	r3, r2
 8009c96:	2b01      	cmp	r3, #1
 8009c98:	d11e      	bne.n	8009cd8 <HAL_SPI_TransmitReceive+0x324>
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2246      	movs	r2, #70	; 0x46
 8009c9e:	5a9b      	ldrh	r3, [r3, r2]
 8009ca0:	b29b      	uxth	r3, r3
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d018      	beq.n	8009cd8 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	330c      	adds	r3, #12
 8009cac:	001a      	movs	r2, r3
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cb2:	7812      	ldrb	r2, [r2, #0]
 8009cb4:	b2d2      	uxtb	r2, r2
 8009cb6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cbc:	1c5a      	adds	r2, r3, #1
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2246      	movs	r2, #70	; 0x46
 8009cc6:	5a9b      	ldrh	r3, [r3, r2]
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	3b01      	subs	r3, #1
 8009ccc:	b299      	uxth	r1, r3
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2246      	movs	r2, #70	; 0x46
 8009cd2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009cd8:	f7fb fcdc 	bl	8005694 <HAL_GetTick>
 8009cdc:	0002      	movs	r2, r0
 8009cde:	69fb      	ldr	r3, [r7, #28]
 8009ce0:	1ad3      	subs	r3, r2, r3
 8009ce2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d802      	bhi.n	8009cee <HAL_SPI_TransmitReceive+0x33a>
 8009ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cea:	3301      	adds	r3, #1
 8009cec:	d102      	bne.n	8009cf4 <HAL_SPI_TransmitReceive+0x340>
 8009cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d104      	bne.n	8009cfe <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8009cf4:	2323      	movs	r3, #35	; 0x23
 8009cf6:	18fb      	adds	r3, r7, r3
 8009cf8:	2203      	movs	r2, #3
 8009cfa:	701a      	strb	r2, [r3, #0]
        goto error;
 8009cfc:	e01b      	b.n	8009d36 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d02:	b29b      	uxth	r3, r3
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d19d      	bne.n	8009c44 <HAL_SPI_TransmitReceive+0x290>
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	2246      	movs	r2, #70	; 0x46
 8009d0c:	5a9b      	ldrh	r3, [r3, r2]
 8009d0e:	b29b      	uxth	r3, r3
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d197      	bne.n	8009c44 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009d14:	69fa      	ldr	r2, [r7, #28]
 8009d16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	0018      	movs	r0, r3
 8009d1c:	f000 fe9c 	bl	800aa58 <SPI_EndRxTxTransaction>
 8009d20:	1e03      	subs	r3, r0, #0
 8009d22:	d007      	beq.n	8009d34 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8009d24:	2323      	movs	r3, #35	; 0x23
 8009d26:	18fb      	adds	r3, r7, r3
 8009d28:	2201      	movs	r2, #1
 8009d2a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	2220      	movs	r2, #32
 8009d30:	661a      	str	r2, [r3, #96]	; 0x60
 8009d32:	e000      	b.n	8009d36 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8009d34:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	225d      	movs	r2, #93	; 0x5d
 8009d3a:	2101      	movs	r1, #1
 8009d3c:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	225c      	movs	r2, #92	; 0x5c
 8009d42:	2100      	movs	r1, #0
 8009d44:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009d46:	2323      	movs	r3, #35	; 0x23
 8009d48:	18fb      	adds	r3, r7, r3
 8009d4a:	781b      	ldrb	r3, [r3, #0]
}
 8009d4c:	0018      	movs	r0, r3
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	b00a      	add	sp, #40	; 0x28
 8009d52:	bd80      	pop	{r7, pc}
 8009d54:	ffffefff 	.word	0xffffefff

08009d58 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009d58:	b590      	push	{r4, r7, lr}
 8009d5a:	b087      	sub	sp, #28
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	60b9      	str	r1, [r7, #8]
 8009d62:	1dbb      	adds	r3, r7, #6
 8009d64:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009d66:	2317      	movs	r3, #23
 8009d68:	18fb      	adds	r3, r7, r3
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	701a      	strb	r2, [r3, #0]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	689b      	ldr	r3, [r3, #8]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d112      	bne.n	8009d9c <HAL_SPI_Receive_DMA+0x44>
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	685a      	ldr	r2, [r3, #4]
 8009d7a:	2382      	movs	r3, #130	; 0x82
 8009d7c:	005b      	lsls	r3, r3, #1
 8009d7e:	429a      	cmp	r2, r3
 8009d80:	d10c      	bne.n	8009d9c <HAL_SPI_Receive_DMA+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	225d      	movs	r2, #93	; 0x5d
 8009d86:	2104      	movs	r1, #4
 8009d88:	5499      	strb	r1, [r3, r2]

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8009d8a:	1dbb      	adds	r3, r7, #6
 8009d8c:	881b      	ldrh	r3, [r3, #0]
 8009d8e:	68ba      	ldr	r2, [r7, #8]
 8009d90:	68b9      	ldr	r1, [r7, #8]
 8009d92:	68f8      	ldr	r0, [r7, #12]
 8009d94:	f000 f91e 	bl	8009fd4 <HAL_SPI_TransmitReceive_DMA>
 8009d98:	0003      	movs	r3, r0
 8009d9a:	e10b      	b.n	8009fb4 <HAL_SPI_Receive_DMA+0x25c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	225c      	movs	r2, #92	; 0x5c
 8009da0:	5c9b      	ldrb	r3, [r3, r2]
 8009da2:	2b01      	cmp	r3, #1
 8009da4:	d101      	bne.n	8009daa <HAL_SPI_Receive_DMA+0x52>
 8009da6:	2302      	movs	r3, #2
 8009da8:	e104      	b.n	8009fb4 <HAL_SPI_Receive_DMA+0x25c>
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	225c      	movs	r2, #92	; 0x5c
 8009dae:	2101      	movs	r1, #1
 8009db0:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	225d      	movs	r2, #93	; 0x5d
 8009db6:	5c9b      	ldrb	r3, [r3, r2]
 8009db8:	b2db      	uxtb	r3, r3
 8009dba:	2b01      	cmp	r3, #1
 8009dbc:	d004      	beq.n	8009dc8 <HAL_SPI_Receive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 8009dbe:	2317      	movs	r3, #23
 8009dc0:	18fb      	adds	r3, r7, r3
 8009dc2:	2202      	movs	r2, #2
 8009dc4:	701a      	strb	r2, [r3, #0]
    goto error;
 8009dc6:	e0ee      	b.n	8009fa6 <HAL_SPI_Receive_DMA+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d003      	beq.n	8009dd6 <HAL_SPI_Receive_DMA+0x7e>
 8009dce:	1dbb      	adds	r3, r7, #6
 8009dd0:	881b      	ldrh	r3, [r3, #0]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d104      	bne.n	8009de0 <HAL_SPI_Receive_DMA+0x88>
  {
    errorcode = HAL_ERROR;
 8009dd6:	2317      	movs	r3, #23
 8009dd8:	18fb      	adds	r3, r7, r3
 8009dda:	2201      	movs	r2, #1
 8009ddc:	701a      	strb	r2, [r3, #0]
    goto error;
 8009dde:	e0e2      	b.n	8009fa6 <HAL_SPI_Receive_DMA+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	225d      	movs	r2, #93	; 0x5d
 8009de4:	2104      	movs	r1, #4
 8009de6:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2200      	movs	r2, #0
 8009dec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	68ba      	ldr	r2, [r7, #8]
 8009df2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	1dba      	adds	r2, r7, #6
 8009df8:	2144      	movs	r1, #68	; 0x44
 8009dfa:	8812      	ldrh	r2, [r2, #0]
 8009dfc:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	1dba      	adds	r2, r7, #6
 8009e02:	2146      	movs	r1, #70	; 0x46
 8009e04:	8812      	ldrh	r2, [r2, #0]
 8009e06:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2200      	movs	r2, #0
 8009e12:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2200      	movs	r2, #0
 8009e18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	689a      	ldr	r2, [r3, #8]
 8009e24:	2380      	movs	r3, #128	; 0x80
 8009e26:	021b      	lsls	r3, r3, #8
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	d10f      	bne.n	8009e4c <HAL_SPI_Receive_DMA+0xf4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	681a      	ldr	r2, [r3, #0]
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	2140      	movs	r1, #64	; 0x40
 8009e38:	438a      	bics	r2, r1
 8009e3a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	495d      	ldr	r1, [pc, #372]	; (8009fbc <HAL_SPI_Receive_DMA+0x264>)
 8009e48:	400a      	ands	r2, r1
 8009e4a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	685a      	ldr	r2, [r3, #4]
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	495a      	ldr	r1, [pc, #360]	; (8009fc0 <HAL_SPI_Receive_DMA+0x268>)
 8009e58:	400a      	ands	r2, r1
 8009e5a:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	68da      	ldr	r2, [r3, #12]
 8009e60:	23e0      	movs	r3, #224	; 0xe0
 8009e62:	00db      	lsls	r3, r3, #3
 8009e64:	429a      	cmp	r2, r3
 8009e66:	d908      	bls.n	8009e7a <HAL_SPI_Receive_DMA+0x122>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	685a      	ldr	r2, [r3, #4]
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4954      	ldr	r1, [pc, #336]	; (8009fc4 <HAL_SPI_Receive_DMA+0x26c>)
 8009e74:	400a      	ands	r2, r1
 8009e76:	605a      	str	r2, [r3, #4]
 8009e78:	e045      	b.n	8009f06 <HAL_SPI_Receive_DMA+0x1ae>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	685a      	ldr	r2, [r3, #4]
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	2180      	movs	r1, #128	; 0x80
 8009e86:	0149      	lsls	r1, r1, #5
 8009e88:	430a      	orrs	r2, r1
 8009e8a:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e90:	699a      	ldr	r2, [r3, #24]
 8009e92:	2380      	movs	r3, #128	; 0x80
 8009e94:	00db      	lsls	r3, r3, #3
 8009e96:	429a      	cmp	r2, r3
 8009e98:	d135      	bne.n	8009f06 <HAL_SPI_Receive_DMA+0x1ae>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	685a      	ldr	r2, [r3, #4]
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	4947      	ldr	r1, [pc, #284]	; (8009fc4 <HAL_SPI_Receive_DMA+0x26c>)
 8009ea6:	400a      	ands	r2, r1
 8009ea8:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2246      	movs	r2, #70	; 0x46
 8009eae:	5a9b      	ldrh	r3, [r3, r2]
 8009eb0:	b29b      	uxth	r3, r3
 8009eb2:	001a      	movs	r2, r3
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	4013      	ands	r3, r2
 8009eb8:	d111      	bne.n	8009ede <HAL_SPI_Receive_DMA+0x186>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	685a      	ldr	r2, [r3, #4]
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	493e      	ldr	r1, [pc, #248]	; (8009fc0 <HAL_SPI_Receive_DMA+0x268>)
 8009ec6:	400a      	ands	r2, r1
 8009ec8:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2246      	movs	r2, #70	; 0x46
 8009ece:	5a9b      	ldrh	r3, [r3, r2]
 8009ed0:	b29b      	uxth	r3, r3
 8009ed2:	085b      	lsrs	r3, r3, #1
 8009ed4:	b299      	uxth	r1, r3
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2246      	movs	r2, #70	; 0x46
 8009eda:	5299      	strh	r1, [r3, r2]
 8009edc:	e013      	b.n	8009f06 <HAL_SPI_Receive_DMA+0x1ae>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	685a      	ldr	r2, [r3, #4]
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	2180      	movs	r1, #128	; 0x80
 8009eea:	0189      	lsls	r1, r1, #6
 8009eec:	430a      	orrs	r2, r1
 8009eee:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2246      	movs	r2, #70	; 0x46
 8009ef4:	5a9b      	ldrh	r3, [r3, r2]
 8009ef6:	b29b      	uxth	r3, r3
 8009ef8:	085b      	lsrs	r3, r3, #1
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	3301      	adds	r3, #1
 8009efe:	b299      	uxth	r1, r3
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2246      	movs	r2, #70	; 0x46
 8009f04:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f0a:	4a2f      	ldr	r2, [pc, #188]	; (8009fc8 <HAL_SPI_Receive_DMA+0x270>)
 8009f0c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f12:	4a2e      	ldr	r2, [pc, #184]	; (8009fcc <HAL_SPI_Receive_DMA+0x274>)
 8009f14:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f1a:	4a2d      	ldr	r2, [pc, #180]	; (8009fd0 <HAL_SPI_Receive_DMA+0x278>)
 8009f1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f22:	2200      	movs	r2, #0
 8009f24:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	330c      	adds	r3, #12
 8009f30:	0019      	movs	r1, r3
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f36:	001c      	movs	r4, r3
                                 hspi->RxXferCount))
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2246      	movs	r2, #70	; 0x46
 8009f3c:	5a9b      	ldrh	r3, [r3, r2]
 8009f3e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009f40:	0022      	movs	r2, r4
 8009f42:	f7fb ffb3 	bl	8005eac <HAL_DMA_Start_IT>
 8009f46:	1e03      	subs	r3, r0, #0
 8009f48:	d00e      	beq.n	8009f68 <HAL_SPI_Receive_DMA+0x210>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f4e:	2210      	movs	r2, #16
 8009f50:	431a      	orrs	r2, r3
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8009f56:	2317      	movs	r3, #23
 8009f58:	18fb      	adds	r3, r7, r3
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	225d      	movs	r2, #93	; 0x5d
 8009f62:	2101      	movs	r1, #1
 8009f64:	5499      	strb	r1, [r3, r2]
    goto error;
 8009f66:	e01e      	b.n	8009fa6 <HAL_SPI_Receive_DMA+0x24e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	2240      	movs	r2, #64	; 0x40
 8009f70:	4013      	ands	r3, r2
 8009f72:	2b40      	cmp	r3, #64	; 0x40
 8009f74:	d007      	beq.n	8009f86 <HAL_SPI_Receive_DMA+0x22e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	681a      	ldr	r2, [r3, #0]
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	2140      	movs	r1, #64	; 0x40
 8009f82:	430a      	orrs	r2, r1
 8009f84:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	685a      	ldr	r2, [r3, #4]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	2120      	movs	r1, #32
 8009f92:	430a      	orrs	r2, r1
 8009f94:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	685a      	ldr	r2, [r3, #4]
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	2101      	movs	r1, #1
 8009fa2:	430a      	orrs	r2, r1
 8009fa4:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	225c      	movs	r2, #92	; 0x5c
 8009faa:	2100      	movs	r1, #0
 8009fac:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009fae:	2317      	movs	r3, #23
 8009fb0:	18fb      	adds	r3, r7, r3
 8009fb2:	781b      	ldrb	r3, [r3, #0]
}
 8009fb4:	0018      	movs	r0, r3
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	b007      	add	sp, #28
 8009fba:	bd90      	pop	{r4, r7, pc}
 8009fbc:	ffffbfff 	.word	0xffffbfff
 8009fc0:	ffffdfff 	.word	0xffffdfff
 8009fc4:	ffffefff 	.word	0xffffefff
 8009fc8:	0800a6ab 	.word	0x0800a6ab
 8009fcc:	0800a565 	.word	0x0800a565
 8009fd0:	0800a6e7 	.word	0x0800a6e7

08009fd4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8009fd4:	b590      	push	{r4, r7, lr}
 8009fd6:	b087      	sub	sp, #28
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	60f8      	str	r0, [r7, #12]
 8009fdc:	60b9      	str	r1, [r7, #8]
 8009fde:	607a      	str	r2, [r7, #4]
 8009fe0:	001a      	movs	r2, r3
 8009fe2:	1cbb      	adds	r3, r7, #2
 8009fe4:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009fe6:	2317      	movs	r3, #23
 8009fe8:	18fb      	adds	r3, r7, r3
 8009fea:	2200      	movs	r2, #0
 8009fec:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	225c      	movs	r2, #92	; 0x5c
 8009ff2:	5c9b      	ldrb	r3, [r3, r2]
 8009ff4:	2b01      	cmp	r3, #1
 8009ff6:	d101      	bne.n	8009ffc <HAL_SPI_TransmitReceive_DMA+0x28>
 8009ff8:	2302      	movs	r3, #2
 8009ffa:	e186      	b.n	800a30a <HAL_SPI_TransmitReceive_DMA+0x336>
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	225c      	movs	r2, #92	; 0x5c
 800a000:	2101      	movs	r1, #1
 800a002:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a004:	2016      	movs	r0, #22
 800a006:	183b      	adds	r3, r7, r0
 800a008:	68fa      	ldr	r2, [r7, #12]
 800a00a:	215d      	movs	r1, #93	; 0x5d
 800a00c:	5c52      	ldrb	r2, [r2, r1]
 800a00e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	685b      	ldr	r3, [r3, #4]
 800a014:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800a016:	0001      	movs	r1, r0
 800a018:	187b      	adds	r3, r7, r1
 800a01a:	781b      	ldrb	r3, [r3, #0]
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	d011      	beq.n	800a044 <HAL_SPI_TransmitReceive_DMA+0x70>
 800a020:	693a      	ldr	r2, [r7, #16]
 800a022:	2382      	movs	r3, #130	; 0x82
 800a024:	005b      	lsls	r3, r3, #1
 800a026:	429a      	cmp	r2, r3
 800a028:	d107      	bne.n	800a03a <HAL_SPI_TransmitReceive_DMA+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	689b      	ldr	r3, [r3, #8]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d103      	bne.n	800a03a <HAL_SPI_TransmitReceive_DMA+0x66>
 800a032:	187b      	adds	r3, r7, r1
 800a034:	781b      	ldrb	r3, [r3, #0]
 800a036:	2b04      	cmp	r3, #4
 800a038:	d004      	beq.n	800a044 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 800a03a:	2317      	movs	r3, #23
 800a03c:	18fb      	adds	r3, r7, r3
 800a03e:	2202      	movs	r2, #2
 800a040:	701a      	strb	r2, [r3, #0]
    goto error;
 800a042:	e15b      	b.n	800a2fc <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d006      	beq.n	800a058 <HAL_SPI_TransmitReceive_DMA+0x84>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d003      	beq.n	800a058 <HAL_SPI_TransmitReceive_DMA+0x84>
 800a050:	1cbb      	adds	r3, r7, #2
 800a052:	881b      	ldrh	r3, [r3, #0]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d104      	bne.n	800a062 <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    errorcode = HAL_ERROR;
 800a058:	2317      	movs	r3, #23
 800a05a:	18fb      	adds	r3, r7, r3
 800a05c:	2201      	movs	r2, #1
 800a05e:	701a      	strb	r2, [r3, #0]
    goto error;
 800a060:	e14c      	b.n	800a2fc <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	225d      	movs	r2, #93	; 0x5d
 800a066:	5c9b      	ldrb	r3, [r3, r2]
 800a068:	b2db      	uxtb	r3, r3
 800a06a:	2b04      	cmp	r3, #4
 800a06c:	d003      	beq.n	800a076 <HAL_SPI_TransmitReceive_DMA+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	225d      	movs	r2, #93	; 0x5d
 800a072:	2105      	movs	r1, #5
 800a074:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2200      	movs	r2, #0
 800a07a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	68ba      	ldr	r2, [r7, #8]
 800a080:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	1cba      	adds	r2, r7, #2
 800a086:	8812      	ldrh	r2, [r2, #0]
 800a088:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	1cba      	adds	r2, r7, #2
 800a08e:	8812      	ldrh	r2, [r2, #0]
 800a090:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	687a      	ldr	r2, [r7, #4]
 800a096:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	1cba      	adds	r2, r7, #2
 800a09c:	2144      	movs	r1, #68	; 0x44
 800a09e:	8812      	ldrh	r2, [r2, #0]
 800a0a0:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	1cba      	adds	r2, r7, #2
 800a0a6:	2146      	movs	r1, #70	; 0x46
 800a0a8:	8812      	ldrh	r2, [r2, #0]
 800a0aa:	525a      	strh	r2, [r3, r1]

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	685a      	ldr	r2, [r3, #4]
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4994      	ldr	r1, [pc, #592]	; (800a314 <HAL_SPI_TransmitReceive_DMA+0x340>)
 800a0c4:	400a      	ands	r2, r1
 800a0c6:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	68da      	ldr	r2, [r3, #12]
 800a0cc:	23e0      	movs	r3, #224	; 0xe0
 800a0ce:	00db      	lsls	r3, r3, #3
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	d908      	bls.n	800a0e6 <HAL_SPI_TransmitReceive_DMA+0x112>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	685a      	ldr	r2, [r3, #4]
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	498e      	ldr	r1, [pc, #568]	; (800a318 <HAL_SPI_TransmitReceive_DMA+0x344>)
 800a0e0:	400a      	ands	r2, r1
 800a0e2:	605a      	str	r2, [r3, #4]
 800a0e4:	e074      	b.n	800a1d0 <HAL_SPI_TransmitReceive_DMA+0x1fc>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	685a      	ldr	r2, [r3, #4]
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	2180      	movs	r1, #128	; 0x80
 800a0f2:	0149      	lsls	r1, r1, #5
 800a0f4:	430a      	orrs	r2, r1
 800a0f6:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0fc:	699a      	ldr	r2, [r3, #24]
 800a0fe:	2380      	movs	r3, #128	; 0x80
 800a100:	00db      	lsls	r3, r3, #3
 800a102:	429a      	cmp	r2, r3
 800a104:	d127      	bne.n	800a156 <HAL_SPI_TransmitReceive_DMA+0x182>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800a10a:	001a      	movs	r2, r3
 800a10c:	2301      	movs	r3, #1
 800a10e:	4013      	ands	r3, r2
 800a110:	d10f      	bne.n	800a132 <HAL_SPI_TransmitReceive_DMA+0x15e>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	685a      	ldr	r2, [r3, #4]
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	497f      	ldr	r1, [pc, #508]	; (800a31c <HAL_SPI_TransmitReceive_DMA+0x348>)
 800a11e:	400a      	ands	r2, r1
 800a120:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a126:	b29b      	uxth	r3, r3
 800a128:	085b      	lsrs	r3, r3, #1
 800a12a:	b29a      	uxth	r2, r3
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a130:	e011      	b.n	800a156 <HAL_SPI_TransmitReceive_DMA+0x182>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	685a      	ldr	r2, [r3, #4]
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	2180      	movs	r1, #128	; 0x80
 800a13e:	01c9      	lsls	r1, r1, #7
 800a140:	430a      	orrs	r2, r1
 800a142:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a148:	b29b      	uxth	r3, r3
 800a14a:	085b      	lsrs	r3, r3, #1
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	3301      	adds	r3, #1
 800a150:	b29a      	uxth	r2, r3
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a15a:	699a      	ldr	r2, [r3, #24]
 800a15c:	2380      	movs	r3, #128	; 0x80
 800a15e:	00db      	lsls	r3, r3, #3
 800a160:	429a      	cmp	r2, r3
 800a162:	d135      	bne.n	800a1d0 <HAL_SPI_TransmitReceive_DMA+0x1fc>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	685a      	ldr	r2, [r3, #4]
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	496a      	ldr	r1, [pc, #424]	; (800a318 <HAL_SPI_TransmitReceive_DMA+0x344>)
 800a170:	400a      	ands	r2, r1
 800a172:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2246      	movs	r2, #70	; 0x46
 800a178:	5a9b      	ldrh	r3, [r3, r2]
 800a17a:	b29b      	uxth	r3, r3
 800a17c:	001a      	movs	r2, r3
 800a17e:	2301      	movs	r3, #1
 800a180:	4013      	ands	r3, r2
 800a182:	d111      	bne.n	800a1a8 <HAL_SPI_TransmitReceive_DMA+0x1d4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	685a      	ldr	r2, [r3, #4]
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	4964      	ldr	r1, [pc, #400]	; (800a320 <HAL_SPI_TransmitReceive_DMA+0x34c>)
 800a190:	400a      	ands	r2, r1
 800a192:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	2246      	movs	r2, #70	; 0x46
 800a198:	5a9b      	ldrh	r3, [r3, r2]
 800a19a:	b29b      	uxth	r3, r3
 800a19c:	085b      	lsrs	r3, r3, #1
 800a19e:	b299      	uxth	r1, r3
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	2246      	movs	r2, #70	; 0x46
 800a1a4:	5299      	strh	r1, [r3, r2]
 800a1a6:	e013      	b.n	800a1d0 <HAL_SPI_TransmitReceive_DMA+0x1fc>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	685a      	ldr	r2, [r3, #4]
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	2180      	movs	r1, #128	; 0x80
 800a1b4:	0189      	lsls	r1, r1, #6
 800a1b6:	430a      	orrs	r2, r1
 800a1b8:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2246      	movs	r2, #70	; 0x46
 800a1be:	5a9b      	ldrh	r3, [r3, r2]
 800a1c0:	b29b      	uxth	r3, r3
 800a1c2:	085b      	lsrs	r3, r3, #1
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	3301      	adds	r3, #1
 800a1c8:	b299      	uxth	r1, r3
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	2246      	movs	r2, #70	; 0x46
 800a1ce:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	225d      	movs	r2, #93	; 0x5d
 800a1d4:	5c9b      	ldrb	r3, [r3, r2]
 800a1d6:	b2db      	uxtb	r3, r3
 800a1d8:	2b04      	cmp	r3, #4
 800a1da:	d108      	bne.n	800a1ee <HAL_SPI_TransmitReceive_DMA+0x21a>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1e0:	4a50      	ldr	r2, [pc, #320]	; (800a324 <HAL_SPI_TransmitReceive_DMA+0x350>)
 800a1e2:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1e8:	4a4f      	ldr	r2, [pc, #316]	; (800a328 <HAL_SPI_TransmitReceive_DMA+0x354>)
 800a1ea:	62da      	str	r2, [r3, #44]	; 0x2c
 800a1ec:	e007      	b.n	800a1fe <HAL_SPI_TransmitReceive_DMA+0x22a>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1f2:	4a4e      	ldr	r2, [pc, #312]	; (800a32c <HAL_SPI_TransmitReceive_DMA+0x358>)
 800a1f4:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1fa:	4a4d      	ldr	r2, [pc, #308]	; (800a330 <HAL_SPI_TransmitReceive_DMA+0x35c>)
 800a1fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a202:	4a4c      	ldr	r2, [pc, #304]	; (800a334 <HAL_SPI_TransmitReceive_DMA+0x360>)
 800a204:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a20a:	2200      	movs	r2, #0
 800a20c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	330c      	adds	r3, #12
 800a218:	0019      	movs	r1, r3
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a21e:	001c      	movs	r4, r3
                                 hspi->RxXferCount))
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2246      	movs	r2, #70	; 0x46
 800a224:	5a9b      	ldrh	r3, [r3, r2]
 800a226:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a228:	0022      	movs	r2, r4
 800a22a:	f7fb fe3f 	bl	8005eac <HAL_DMA_Start_IT>
 800a22e:	1e03      	subs	r3, r0, #0
 800a230:	d00e      	beq.n	800a250 <HAL_SPI_TransmitReceive_DMA+0x27c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a236:	2210      	movs	r2, #16
 800a238:	431a      	orrs	r2, r3
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800a23e:	2317      	movs	r3, #23
 800a240:	18fb      	adds	r3, r7, r3
 800a242:	2201      	movs	r2, #1
 800a244:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	225d      	movs	r2, #93	; 0x5d
 800a24a:	2101      	movs	r1, #1
 800a24c:	5499      	strb	r1, [r3, r2]
    goto error;
 800a24e:	e055      	b.n	800a2fc <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	685a      	ldr	r2, [r3, #4]
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	2101      	movs	r1, #1
 800a25c:	430a      	orrs	r2, r1
 800a25e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a264:	2200      	movs	r2, #0
 800a266:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a26c:	2200      	movs	r2, #0
 800a26e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a274:	2200      	movs	r2, #0
 800a276:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a27c:	2200      	movs	r2, #0
 800a27e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a288:	0019      	movs	r1, r3
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	330c      	adds	r3, #12
 800a290:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a296:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a298:	f7fb fe08 	bl	8005eac <HAL_DMA_Start_IT>
 800a29c:	1e03      	subs	r3, r0, #0
 800a29e:	d00e      	beq.n	800a2be <HAL_SPI_TransmitReceive_DMA+0x2ea>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2a4:	2210      	movs	r2, #16
 800a2a6:	431a      	orrs	r2, r3
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800a2ac:	2317      	movs	r3, #23
 800a2ae:	18fb      	adds	r3, r7, r3
 800a2b0:	2201      	movs	r2, #1
 800a2b2:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	225d      	movs	r2, #93	; 0x5d
 800a2b8:	2101      	movs	r1, #1
 800a2ba:	5499      	strb	r1, [r3, r2]
    goto error;
 800a2bc:	e01e      	b.n	800a2fc <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	2240      	movs	r2, #64	; 0x40
 800a2c6:	4013      	ands	r3, r2
 800a2c8:	2b40      	cmp	r3, #64	; 0x40
 800a2ca:	d007      	beq.n	800a2dc <HAL_SPI_TransmitReceive_DMA+0x308>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	681a      	ldr	r2, [r3, #0]
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	2140      	movs	r1, #64	; 0x40
 800a2d8:	430a      	orrs	r2, r1
 800a2da:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	685a      	ldr	r2, [r3, #4]
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	2120      	movs	r1, #32
 800a2e8:	430a      	orrs	r2, r1
 800a2ea:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	685a      	ldr	r2, [r3, #4]
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	2102      	movs	r1, #2
 800a2f8:	430a      	orrs	r2, r1
 800a2fa:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	225c      	movs	r2, #92	; 0x5c
 800a300:	2100      	movs	r1, #0
 800a302:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800a304:	2317      	movs	r3, #23
 800a306:	18fb      	adds	r3, r7, r3
 800a308:	781b      	ldrb	r3, [r3, #0]
}
 800a30a:	0018      	movs	r0, r3
 800a30c:	46bd      	mov	sp, r7
 800a30e:	b007      	add	sp, #28
 800a310:	bd90      	pop	{r4, r7, pc}
 800a312:	46c0      	nop			; (mov r8, r8)
 800a314:	ffff9fff 	.word	0xffff9fff
 800a318:	ffffefff 	.word	0xffffefff
 800a31c:	ffffbfff 	.word	0xffffbfff
 800a320:	ffffdfff 	.word	0xffffdfff
 800a324:	0800a6ab 	.word	0x0800a6ab
 800a328:	0800a565 	.word	0x0800a565
 800a32c:	0800a6c9 	.word	0x0800a6c9
 800a330:	0800a615 	.word	0x0800a615
 800a334:	0800a6e7 	.word	0x0800a6e7

0800a338 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b088      	sub	sp, #32
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	685b      	ldr	r3, [r3, #4]
 800a346:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	689b      	ldr	r3, [r3, #8]
 800a34e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a350:	69bb      	ldr	r3, [r7, #24]
 800a352:	099b      	lsrs	r3, r3, #6
 800a354:	001a      	movs	r2, r3
 800a356:	2301      	movs	r3, #1
 800a358:	4013      	ands	r3, r2
 800a35a:	d10f      	bne.n	800a37c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a35c:	69bb      	ldr	r3, [r7, #24]
 800a35e:	2201      	movs	r2, #1
 800a360:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a362:	d00b      	beq.n	800a37c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a364:	69fb      	ldr	r3, [r7, #28]
 800a366:	099b      	lsrs	r3, r3, #6
 800a368:	001a      	movs	r2, r3
 800a36a:	2301      	movs	r3, #1
 800a36c:	4013      	ands	r3, r2
 800a36e:	d005      	beq.n	800a37c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	0010      	movs	r0, r2
 800a378:	4798      	blx	r3
    return;
 800a37a:	e0d5      	b.n	800a528 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a37c:	69bb      	ldr	r3, [r7, #24]
 800a37e:	085b      	lsrs	r3, r3, #1
 800a380:	001a      	movs	r2, r3
 800a382:	2301      	movs	r3, #1
 800a384:	4013      	ands	r3, r2
 800a386:	d00b      	beq.n	800a3a0 <HAL_SPI_IRQHandler+0x68>
 800a388:	69fb      	ldr	r3, [r7, #28]
 800a38a:	09db      	lsrs	r3, r3, #7
 800a38c:	001a      	movs	r2, r3
 800a38e:	2301      	movs	r3, #1
 800a390:	4013      	ands	r3, r2
 800a392:	d005      	beq.n	800a3a0 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a398:	687a      	ldr	r2, [r7, #4]
 800a39a:	0010      	movs	r0, r2
 800a39c:	4798      	blx	r3
    return;
 800a39e:	e0c3      	b.n	800a528 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a3a0:	69bb      	ldr	r3, [r7, #24]
 800a3a2:	095b      	lsrs	r3, r3, #5
 800a3a4:	001a      	movs	r2, r3
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	4013      	ands	r3, r2
 800a3aa:	d10c      	bne.n	800a3c6 <HAL_SPI_IRQHandler+0x8e>
 800a3ac:	69bb      	ldr	r3, [r7, #24]
 800a3ae:	099b      	lsrs	r3, r3, #6
 800a3b0:	001a      	movs	r2, r3
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	4013      	ands	r3, r2
 800a3b6:	d106      	bne.n	800a3c6 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a3b8:	69bb      	ldr	r3, [r7, #24]
 800a3ba:	0a1b      	lsrs	r3, r3, #8
 800a3bc:	001a      	movs	r2, r3
 800a3be:	2301      	movs	r3, #1
 800a3c0:	4013      	ands	r3, r2
 800a3c2:	d100      	bne.n	800a3c6 <HAL_SPI_IRQHandler+0x8e>
 800a3c4:	e0b0      	b.n	800a528 <HAL_SPI_IRQHandler+0x1f0>
 800a3c6:	69fb      	ldr	r3, [r7, #28]
 800a3c8:	095b      	lsrs	r3, r3, #5
 800a3ca:	001a      	movs	r2, r3
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	4013      	ands	r3, r2
 800a3d0:	d100      	bne.n	800a3d4 <HAL_SPI_IRQHandler+0x9c>
 800a3d2:	e0a9      	b.n	800a528 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a3d4:	69bb      	ldr	r3, [r7, #24]
 800a3d6:	099b      	lsrs	r3, r3, #6
 800a3d8:	001a      	movs	r2, r3
 800a3da:	2301      	movs	r3, #1
 800a3dc:	4013      	ands	r3, r2
 800a3de:	d023      	beq.n	800a428 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	225d      	movs	r2, #93	; 0x5d
 800a3e4:	5c9b      	ldrb	r3, [r3, r2]
 800a3e6:	b2db      	uxtb	r3, r3
 800a3e8:	2b03      	cmp	r3, #3
 800a3ea:	d011      	beq.n	800a410 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3f0:	2204      	movs	r2, #4
 800a3f2:	431a      	orrs	r2, r3
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	617b      	str	r3, [r7, #20]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	68db      	ldr	r3, [r3, #12]
 800a402:	617b      	str	r3, [r7, #20]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	689b      	ldr	r3, [r3, #8]
 800a40a:	617b      	str	r3, [r7, #20]
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	e00b      	b.n	800a428 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a410:	2300      	movs	r3, #0
 800a412:	613b      	str	r3, [r7, #16]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	68db      	ldr	r3, [r3, #12]
 800a41a:	613b      	str	r3, [r7, #16]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	689b      	ldr	r3, [r3, #8]
 800a422:	613b      	str	r3, [r7, #16]
 800a424:	693b      	ldr	r3, [r7, #16]
        return;
 800a426:	e07f      	b.n	800a528 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a428:	69bb      	ldr	r3, [r7, #24]
 800a42a:	095b      	lsrs	r3, r3, #5
 800a42c:	001a      	movs	r2, r3
 800a42e:	2301      	movs	r3, #1
 800a430:	4013      	ands	r3, r2
 800a432:	d014      	beq.n	800a45e <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a438:	2201      	movs	r2, #1
 800a43a:	431a      	orrs	r2, r3
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a440:	2300      	movs	r3, #0
 800a442:	60fb      	str	r3, [r7, #12]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	689b      	ldr	r3, [r3, #8]
 800a44a:	60fb      	str	r3, [r7, #12]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	681a      	ldr	r2, [r3, #0]
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	2140      	movs	r1, #64	; 0x40
 800a458:	438a      	bics	r2, r1
 800a45a:	601a      	str	r2, [r3, #0]
 800a45c:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a45e:	69bb      	ldr	r3, [r7, #24]
 800a460:	0a1b      	lsrs	r3, r3, #8
 800a462:	001a      	movs	r2, r3
 800a464:	2301      	movs	r3, #1
 800a466:	4013      	ands	r3, r2
 800a468:	d00c      	beq.n	800a484 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a46e:	2208      	movs	r2, #8
 800a470:	431a      	orrs	r2, r3
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a476:	2300      	movs	r3, #0
 800a478:	60bb      	str	r3, [r7, #8]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	689b      	ldr	r3, [r3, #8]
 800a480:	60bb      	str	r3, [r7, #8]
 800a482:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d04c      	beq.n	800a526 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	685a      	ldr	r2, [r3, #4]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	21e0      	movs	r1, #224	; 0xe0
 800a498:	438a      	bics	r2, r1
 800a49a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	225d      	movs	r2, #93	; 0x5d
 800a4a0:	2101      	movs	r1, #1
 800a4a2:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a4a4:	69fb      	ldr	r3, [r7, #28]
 800a4a6:	2202      	movs	r2, #2
 800a4a8:	4013      	ands	r3, r2
 800a4aa:	d103      	bne.n	800a4b4 <HAL_SPI_IRQHandler+0x17c>
 800a4ac:	69fb      	ldr	r3, [r7, #28]
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	4013      	ands	r3, r2
 800a4b2:	d032      	beq.n	800a51a <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	685a      	ldr	r2, [r3, #4]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	2103      	movs	r1, #3
 800a4c0:	438a      	bics	r2, r1
 800a4c2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d010      	beq.n	800a4ee <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4d0:	4a17      	ldr	r2, [pc, #92]	; (800a530 <HAL_SPI_IRQHandler+0x1f8>)
 800a4d2:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4d8:	0018      	movs	r0, r3
 800a4da:	f7fb fd6d 	bl	8005fb8 <HAL_DMA_Abort_IT>
 800a4de:	1e03      	subs	r3, r0, #0
 800a4e0:	d005      	beq.n	800a4ee <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a4e6:	2240      	movs	r2, #64	; 0x40
 800a4e8:	431a      	orrs	r2, r3
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d016      	beq.n	800a524 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4fa:	4a0d      	ldr	r2, [pc, #52]	; (800a530 <HAL_SPI_IRQHandler+0x1f8>)
 800a4fc:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a502:	0018      	movs	r0, r3
 800a504:	f7fb fd58 	bl	8005fb8 <HAL_DMA_Abort_IT>
 800a508:	1e03      	subs	r3, r0, #0
 800a50a:	d00b      	beq.n	800a524 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a510:	2240      	movs	r2, #64	; 0x40
 800a512:	431a      	orrs	r2, r3
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800a518:	e004      	b.n	800a524 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	0018      	movs	r0, r3
 800a51e:	f000 f819 	bl	800a554 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a522:	e000      	b.n	800a526 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 800a524:	46c0      	nop			; (mov r8, r8)
    return;
 800a526:	46c0      	nop			; (mov r8, r8)
  }
}
 800a528:	46bd      	mov	sp, r7
 800a52a:	b008      	add	sp, #32
 800a52c:	bd80      	pop	{r7, pc}
 800a52e:	46c0      	nop			; (mov r8, r8)
 800a530:	0800a729 	.word	0x0800a729

0800a534 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b082      	sub	sp, #8
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800a53c:	46c0      	nop			; (mov r8, r8)
 800a53e:	46bd      	mov	sp, r7
 800a540:	b002      	add	sp, #8
 800a542:	bd80      	pop	{r7, pc}

0800a544 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b082      	sub	sp, #8
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800a54c:	46c0      	nop			; (mov r8, r8)
 800a54e:	46bd      	mov	sp, r7
 800a550:	b002      	add	sp, #8
 800a552:	bd80      	pop	{r7, pc}

0800a554 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b082      	sub	sp, #8
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a55c:	46c0      	nop			; (mov r8, r8)
 800a55e:	46bd      	mov	sp, r7
 800a560:	b002      	add	sp, #8
 800a562:	bd80      	pop	{r7, pc}

0800a564 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b084      	sub	sp, #16
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a570:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a572:	f7fb f88f 	bl	8005694 <HAL_GetTick>
 800a576:	0003      	movs	r3, r0
 800a578:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	2220      	movs	r2, #32
 800a582:	4013      	ands	r3, r2
 800a584:	2b20      	cmp	r3, #32
 800a586:	d03e      	beq.n	800a606 <SPI_DMAReceiveCplt+0xa2>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	685a      	ldr	r2, [r3, #4]
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	2120      	movs	r1, #32
 800a594:	438a      	bics	r2, r1
 800a596:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	689b      	ldr	r3, [r3, #8]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d10e      	bne.n	800a5be <SPI_DMAReceiveCplt+0x5a>
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	685a      	ldr	r2, [r3, #4]
 800a5a4:	2382      	movs	r3, #130	; 0x82
 800a5a6:	005b      	lsls	r3, r3, #1
 800a5a8:	429a      	cmp	r2, r3
 800a5aa:	d108      	bne.n	800a5be <SPI_DMAReceiveCplt+0x5a>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	685a      	ldr	r2, [r3, #4]
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	2103      	movs	r1, #3
 800a5b8:	438a      	bics	r2, r1
 800a5ba:	605a      	str	r2, [r3, #4]
 800a5bc:	e007      	b.n	800a5ce <SPI_DMAReceiveCplt+0x6a>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	685a      	ldr	r2, [r3, #4]
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	2101      	movs	r1, #1
 800a5ca:	438a      	bics	r2, r1
 800a5cc:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a5ce:	68ba      	ldr	r2, [r7, #8]
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2164      	movs	r1, #100	; 0x64
 800a5d4:	0018      	movs	r0, r3
 800a5d6:	f000 f9e1 	bl	800a99c <SPI_EndRxTransaction>
 800a5da:	1e03      	subs	r3, r0, #0
 800a5dc:	d002      	beq.n	800a5e4 <SPI_DMAReceiveCplt+0x80>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	2220      	movs	r2, #32
 800a5e2:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2246      	movs	r2, #70	; 0x46
 800a5e8:	2100      	movs	r1, #0
 800a5ea:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	225d      	movs	r2, #93	; 0x5d
 800a5f0:	2101      	movs	r1, #1
 800a5f2:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d004      	beq.n	800a606 <SPI_DMAReceiveCplt+0xa2>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	0018      	movs	r0, r3
 800a600:	f7ff ffa8 	bl	800a554 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a604:	e003      	b.n	800a60e <SPI_DMAReceiveCplt+0xaa>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	0018      	movs	r0, r3
 800a60a:	f7f8 fcd5 	bl	8002fb8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a60e:	46bd      	mov	sp, r7
 800a610:	b004      	add	sp, #16
 800a612:	bd80      	pop	{r7, pc}

0800a614 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b084      	sub	sp, #16
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a620:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a622:	f7fb f837 	bl	8005694 <HAL_GetTick>
 800a626:	0003      	movs	r3, r0
 800a628:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	2220      	movs	r2, #32
 800a632:	4013      	ands	r3, r2
 800a634:	2b20      	cmp	r3, #32
 800a636:	d031      	beq.n	800a69c <SPI_DMATransmitReceiveCplt+0x88>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	685a      	ldr	r2, [r3, #4]
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	2120      	movs	r1, #32
 800a644:	438a      	bics	r2, r1
 800a646:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a648:	68ba      	ldr	r2, [r7, #8]
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	2164      	movs	r1, #100	; 0x64
 800a64e:	0018      	movs	r0, r3
 800a650:	f000 fa02 	bl	800aa58 <SPI_EndRxTxTransaction>
 800a654:	1e03      	subs	r3, r0, #0
 800a656:	d005      	beq.n	800a664 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a65c:	2220      	movs	r2, #32
 800a65e:	431a      	orrs	r2, r3
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	685a      	ldr	r2, [r3, #4]
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	2103      	movs	r1, #3
 800a670:	438a      	bics	r2, r1
 800a672:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	2200      	movs	r2, #0
 800a678:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2246      	movs	r2, #70	; 0x46
 800a67e:	2100      	movs	r1, #0
 800a680:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	225d      	movs	r2, #93	; 0x5d
 800a686:	2101      	movs	r1, #1
 800a688:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d004      	beq.n	800a69c <SPI_DMATransmitReceiveCplt+0x88>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	0018      	movs	r0, r3
 800a696:	f7ff ff5d 	bl	800a554 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a69a:	e003      	b.n	800a6a4 <SPI_DMATransmitReceiveCplt+0x90>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	0018      	movs	r0, r3
 800a6a0:	f7ff ff48 	bl	800a534 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	b004      	add	sp, #16
 800a6a8:	bd80      	pop	{r7, pc}

0800a6aa <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a6aa:	b580      	push	{r7, lr}
 800a6ac:	b084      	sub	sp, #16
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6b6:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	0018      	movs	r0, r3
 800a6bc:	f7f8 fc44 	bl	8002f48 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a6c0:	46c0      	nop			; (mov r8, r8)
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	b004      	add	sp, #16
 800a6c6:	bd80      	pop	{r7, pc}

0800a6c8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b084      	sub	sp, #16
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6d4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	0018      	movs	r0, r3
 800a6da:	f7ff ff33 	bl	800a544 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a6de:	46c0      	nop			; (mov r8, r8)
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	b004      	add	sp, #16
 800a6e4:	bd80      	pop	{r7, pc}

0800a6e6 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a6e6:	b580      	push	{r7, lr}
 800a6e8:	b084      	sub	sp, #16
 800a6ea:	af00      	add	r7, sp, #0
 800a6ec:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6f2:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	685a      	ldr	r2, [r3, #4]
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	2103      	movs	r1, #3
 800a700:	438a      	bics	r2, r1
 800a702:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a708:	2210      	movs	r2, #16
 800a70a:	431a      	orrs	r2, r3
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	225d      	movs	r2, #93	; 0x5d
 800a714:	2101      	movs	r1, #1
 800a716:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	0018      	movs	r0, r3
 800a71c:	f7ff ff1a 	bl	800a554 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a720:	46c0      	nop			; (mov r8, r8)
 800a722:	46bd      	mov	sp, r7
 800a724:	b004      	add	sp, #16
 800a726:	bd80      	pop	{r7, pc}

0800a728 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b084      	sub	sp, #16
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a734:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	2246      	movs	r2, #70	; 0x46
 800a73a:	2100      	movs	r1, #0
 800a73c:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	2200      	movs	r2, #0
 800a742:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	0018      	movs	r0, r3
 800a748:	f7ff ff04 	bl	800a554 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a74c:	46c0      	nop			; (mov r8, r8)
 800a74e:	46bd      	mov	sp, r7
 800a750:	b004      	add	sp, #16
 800a752:	bd80      	pop	{r7, pc}

0800a754 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b088      	sub	sp, #32
 800a758:	af00      	add	r7, sp, #0
 800a75a:	60f8      	str	r0, [r7, #12]
 800a75c:	60b9      	str	r1, [r7, #8]
 800a75e:	603b      	str	r3, [r7, #0]
 800a760:	1dfb      	adds	r3, r7, #7
 800a762:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a764:	f7fa ff96 	bl	8005694 <HAL_GetTick>
 800a768:	0002      	movs	r2, r0
 800a76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a76c:	1a9b      	subs	r3, r3, r2
 800a76e:	683a      	ldr	r2, [r7, #0]
 800a770:	18d3      	adds	r3, r2, r3
 800a772:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a774:	f7fa ff8e 	bl	8005694 <HAL_GetTick>
 800a778:	0003      	movs	r3, r0
 800a77a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a77c:	4b3a      	ldr	r3, [pc, #232]	; (800a868 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	015b      	lsls	r3, r3, #5
 800a782:	0d1b      	lsrs	r3, r3, #20
 800a784:	69fa      	ldr	r2, [r7, #28]
 800a786:	4353      	muls	r3, r2
 800a788:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a78a:	e058      	b.n	800a83e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	3301      	adds	r3, #1
 800a790:	d055      	beq.n	800a83e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a792:	f7fa ff7f 	bl	8005694 <HAL_GetTick>
 800a796:	0002      	movs	r2, r0
 800a798:	69bb      	ldr	r3, [r7, #24]
 800a79a:	1ad3      	subs	r3, r2, r3
 800a79c:	69fa      	ldr	r2, [r7, #28]
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	d902      	bls.n	800a7a8 <SPI_WaitFlagStateUntilTimeout+0x54>
 800a7a2:	69fb      	ldr	r3, [r7, #28]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d142      	bne.n	800a82e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	685a      	ldr	r2, [r3, #4]
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	21e0      	movs	r1, #224	; 0xe0
 800a7b4:	438a      	bics	r2, r1
 800a7b6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	685a      	ldr	r2, [r3, #4]
 800a7bc:	2382      	movs	r3, #130	; 0x82
 800a7be:	005b      	lsls	r3, r3, #1
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	d113      	bne.n	800a7ec <SPI_WaitFlagStateUntilTimeout+0x98>
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	689a      	ldr	r2, [r3, #8]
 800a7c8:	2380      	movs	r3, #128	; 0x80
 800a7ca:	021b      	lsls	r3, r3, #8
 800a7cc:	429a      	cmp	r2, r3
 800a7ce:	d005      	beq.n	800a7dc <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	689a      	ldr	r2, [r3, #8]
 800a7d4:	2380      	movs	r3, #128	; 0x80
 800a7d6:	00db      	lsls	r3, r3, #3
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d107      	bne.n	800a7ec <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	681a      	ldr	r2, [r3, #0]
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	2140      	movs	r1, #64	; 0x40
 800a7e8:	438a      	bics	r2, r1
 800a7ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a7f0:	2380      	movs	r3, #128	; 0x80
 800a7f2:	019b      	lsls	r3, r3, #6
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	d110      	bne.n	800a81a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	681a      	ldr	r2, [r3, #0]
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	491a      	ldr	r1, [pc, #104]	; (800a86c <SPI_WaitFlagStateUntilTimeout+0x118>)
 800a804:	400a      	ands	r2, r1
 800a806:	601a      	str	r2, [r3, #0]
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	2180      	movs	r1, #128	; 0x80
 800a814:	0189      	lsls	r1, r1, #6
 800a816:	430a      	orrs	r2, r1
 800a818:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	225d      	movs	r2, #93	; 0x5d
 800a81e:	2101      	movs	r1, #1
 800a820:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	225c      	movs	r2, #92	; 0x5c
 800a826:	2100      	movs	r1, #0
 800a828:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a82a:	2303      	movs	r3, #3
 800a82c:	e017      	b.n	800a85e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d101      	bne.n	800a838 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800a834:	2300      	movs	r3, #0
 800a836:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	3b01      	subs	r3, #1
 800a83c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	689b      	ldr	r3, [r3, #8]
 800a844:	68ba      	ldr	r2, [r7, #8]
 800a846:	4013      	ands	r3, r2
 800a848:	68ba      	ldr	r2, [r7, #8]
 800a84a:	1ad3      	subs	r3, r2, r3
 800a84c:	425a      	negs	r2, r3
 800a84e:	4153      	adcs	r3, r2
 800a850:	b2db      	uxtb	r3, r3
 800a852:	001a      	movs	r2, r3
 800a854:	1dfb      	adds	r3, r7, #7
 800a856:	781b      	ldrb	r3, [r3, #0]
 800a858:	429a      	cmp	r2, r3
 800a85a:	d197      	bne.n	800a78c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a85c:	2300      	movs	r3, #0
}
 800a85e:	0018      	movs	r0, r3
 800a860:	46bd      	mov	sp, r7
 800a862:	b008      	add	sp, #32
 800a864:	bd80      	pop	{r7, pc}
 800a866:	46c0      	nop			; (mov r8, r8)
 800a868:	20000034 	.word	0x20000034
 800a86c:	ffffdfff 	.word	0xffffdfff

0800a870 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b088      	sub	sp, #32
 800a874:	af00      	add	r7, sp, #0
 800a876:	60f8      	str	r0, [r7, #12]
 800a878:	60b9      	str	r1, [r7, #8]
 800a87a:	607a      	str	r2, [r7, #4]
 800a87c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a87e:	f7fa ff09 	bl	8005694 <HAL_GetTick>
 800a882:	0002      	movs	r2, r0
 800a884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a886:	1a9b      	subs	r3, r3, r2
 800a888:	683a      	ldr	r2, [r7, #0]
 800a88a:	18d3      	adds	r3, r2, r3
 800a88c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a88e:	f7fa ff01 	bl	8005694 <HAL_GetTick>
 800a892:	0003      	movs	r3, r0
 800a894:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a896:	4b3f      	ldr	r3, [pc, #252]	; (800a994 <SPI_WaitFifoStateUntilTimeout+0x124>)
 800a898:	681a      	ldr	r2, [r3, #0]
 800a89a:	0013      	movs	r3, r2
 800a89c:	009b      	lsls	r3, r3, #2
 800a89e:	189b      	adds	r3, r3, r2
 800a8a0:	00da      	lsls	r2, r3, #3
 800a8a2:	1ad3      	subs	r3, r2, r3
 800a8a4:	0d1b      	lsrs	r3, r3, #20
 800a8a6:	69fa      	ldr	r2, [r7, #28]
 800a8a8:	4353      	muls	r3, r2
 800a8aa:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 800a8ac:	e064      	b.n	800a978 <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a8ae:	68ba      	ldr	r2, [r7, #8]
 800a8b0:	23c0      	movs	r3, #192	; 0xc0
 800a8b2:	00db      	lsls	r3, r3, #3
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d106      	bne.n	800a8c6 <SPI_WaitFifoStateUntilTimeout+0x56>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d103      	bne.n	800a8c6 <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	330c      	adds	r3, #12
 800a8c4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	3301      	adds	r3, #1
 800a8ca:	d055      	beq.n	800a978 <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a8cc:	f7fa fee2 	bl	8005694 <HAL_GetTick>
 800a8d0:	0002      	movs	r2, r0
 800a8d2:	69bb      	ldr	r3, [r7, #24]
 800a8d4:	1ad3      	subs	r3, r2, r3
 800a8d6:	69fa      	ldr	r2, [r7, #28]
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	d902      	bls.n	800a8e2 <SPI_WaitFifoStateUntilTimeout+0x72>
 800a8dc:	69fb      	ldr	r3, [r7, #28]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d142      	bne.n	800a968 <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	685a      	ldr	r2, [r3, #4]
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	21e0      	movs	r1, #224	; 0xe0
 800a8ee:	438a      	bics	r2, r1
 800a8f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	685a      	ldr	r2, [r3, #4]
 800a8f6:	2382      	movs	r3, #130	; 0x82
 800a8f8:	005b      	lsls	r3, r3, #1
 800a8fa:	429a      	cmp	r2, r3
 800a8fc:	d113      	bne.n	800a926 <SPI_WaitFifoStateUntilTimeout+0xb6>
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	689a      	ldr	r2, [r3, #8]
 800a902:	2380      	movs	r3, #128	; 0x80
 800a904:	021b      	lsls	r3, r3, #8
 800a906:	429a      	cmp	r2, r3
 800a908:	d005      	beq.n	800a916 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	689a      	ldr	r2, [r3, #8]
 800a90e:	2380      	movs	r3, #128	; 0x80
 800a910:	00db      	lsls	r3, r3, #3
 800a912:	429a      	cmp	r2, r3
 800a914:	d107      	bne.n	800a926 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	681a      	ldr	r2, [r3, #0]
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	2140      	movs	r1, #64	; 0x40
 800a922:	438a      	bics	r2, r1
 800a924:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a92a:	2380      	movs	r3, #128	; 0x80
 800a92c:	019b      	lsls	r3, r3, #6
 800a92e:	429a      	cmp	r2, r3
 800a930:	d110      	bne.n	800a954 <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	681a      	ldr	r2, [r3, #0]
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	4916      	ldr	r1, [pc, #88]	; (800a998 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a93e:	400a      	ands	r2, r1
 800a940:	601a      	str	r2, [r3, #0]
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	681a      	ldr	r2, [r3, #0]
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	2180      	movs	r1, #128	; 0x80
 800a94e:	0189      	lsls	r1, r1, #6
 800a950:	430a      	orrs	r2, r1
 800a952:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	225d      	movs	r2, #93	; 0x5d
 800a958:	2101      	movs	r1, #1
 800a95a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	225c      	movs	r2, #92	; 0x5c
 800a960:	2100      	movs	r1, #0
 800a962:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a964:	2303      	movs	r3, #3
 800a966:	e010      	b.n	800a98a <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d101      	bne.n	800a972 <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 800a96e:	2300      	movs	r3, #0
 800a970:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	3b01      	subs	r3, #1
 800a976:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	689b      	ldr	r3, [r3, #8]
 800a97e:	68ba      	ldr	r2, [r7, #8]
 800a980:	4013      	ands	r3, r2
 800a982:	687a      	ldr	r2, [r7, #4]
 800a984:	429a      	cmp	r2, r3
 800a986:	d192      	bne.n	800a8ae <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800a988:	2300      	movs	r3, #0
}
 800a98a:	0018      	movs	r0, r3
 800a98c:	46bd      	mov	sp, r7
 800a98e:	b008      	add	sp, #32
 800a990:	bd80      	pop	{r7, pc}
 800a992:	46c0      	nop			; (mov r8, r8)
 800a994:	20000034 	.word	0x20000034
 800a998:	ffffdfff 	.word	0xffffdfff

0800a99c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b086      	sub	sp, #24
 800a9a0:	af02      	add	r7, sp, #8
 800a9a2:	60f8      	str	r0, [r7, #12]
 800a9a4:	60b9      	str	r1, [r7, #8]
 800a9a6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	685a      	ldr	r2, [r3, #4]
 800a9ac:	2382      	movs	r3, #130	; 0x82
 800a9ae:	005b      	lsls	r3, r3, #1
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d113      	bne.n	800a9dc <SPI_EndRxTransaction+0x40>
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	689a      	ldr	r2, [r3, #8]
 800a9b8:	2380      	movs	r3, #128	; 0x80
 800a9ba:	021b      	lsls	r3, r3, #8
 800a9bc:	429a      	cmp	r2, r3
 800a9be:	d005      	beq.n	800a9cc <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	689a      	ldr	r2, [r3, #8]
 800a9c4:	2380      	movs	r3, #128	; 0x80
 800a9c6:	00db      	lsls	r3, r3, #3
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d107      	bne.n	800a9dc <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	681a      	ldr	r2, [r3, #0]
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	2140      	movs	r1, #64	; 0x40
 800a9d8:	438a      	bics	r2, r1
 800a9da:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a9dc:	68ba      	ldr	r2, [r7, #8]
 800a9de:	68f8      	ldr	r0, [r7, #12]
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	9300      	str	r3, [sp, #0]
 800a9e4:	0013      	movs	r3, r2
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	2180      	movs	r1, #128	; 0x80
 800a9ea:	f7ff feb3 	bl	800a754 <SPI_WaitFlagStateUntilTimeout>
 800a9ee:	1e03      	subs	r3, r0, #0
 800a9f0:	d007      	beq.n	800aa02 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9f6:	2220      	movs	r2, #32
 800a9f8:	431a      	orrs	r2, r3
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a9fe:	2303      	movs	r3, #3
 800aa00:	e026      	b.n	800aa50 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	685a      	ldr	r2, [r3, #4]
 800aa06:	2382      	movs	r3, #130	; 0x82
 800aa08:	005b      	lsls	r3, r3, #1
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d11f      	bne.n	800aa4e <SPI_EndRxTransaction+0xb2>
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	689a      	ldr	r2, [r3, #8]
 800aa12:	2380      	movs	r3, #128	; 0x80
 800aa14:	021b      	lsls	r3, r3, #8
 800aa16:	429a      	cmp	r2, r3
 800aa18:	d005      	beq.n	800aa26 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	689a      	ldr	r2, [r3, #8]
 800aa1e:	2380      	movs	r3, #128	; 0x80
 800aa20:	00db      	lsls	r3, r3, #3
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d113      	bne.n	800aa4e <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800aa26:	68ba      	ldr	r2, [r7, #8]
 800aa28:	23c0      	movs	r3, #192	; 0xc0
 800aa2a:	00d9      	lsls	r1, r3, #3
 800aa2c:	68f8      	ldr	r0, [r7, #12]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	9300      	str	r3, [sp, #0]
 800aa32:	0013      	movs	r3, r2
 800aa34:	2200      	movs	r2, #0
 800aa36:	f7ff ff1b 	bl	800a870 <SPI_WaitFifoStateUntilTimeout>
 800aa3a:	1e03      	subs	r3, r0, #0
 800aa3c:	d007      	beq.n	800aa4e <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa42:	2220      	movs	r2, #32
 800aa44:	431a      	orrs	r2, r3
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800aa4a:	2303      	movs	r3, #3
 800aa4c:	e000      	b.n	800aa50 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800aa4e:	2300      	movs	r3, #0
}
 800aa50:	0018      	movs	r0, r3
 800aa52:	46bd      	mov	sp, r7
 800aa54:	b004      	add	sp, #16
 800aa56:	bd80      	pop	{r7, pc}

0800aa58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b086      	sub	sp, #24
 800aa5c:	af02      	add	r7, sp, #8
 800aa5e:	60f8      	str	r0, [r7, #12]
 800aa60:	60b9      	str	r1, [r7, #8]
 800aa62:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800aa64:	68ba      	ldr	r2, [r7, #8]
 800aa66:	23c0      	movs	r3, #192	; 0xc0
 800aa68:	0159      	lsls	r1, r3, #5
 800aa6a:	68f8      	ldr	r0, [r7, #12]
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	9300      	str	r3, [sp, #0]
 800aa70:	0013      	movs	r3, r2
 800aa72:	2200      	movs	r2, #0
 800aa74:	f7ff fefc 	bl	800a870 <SPI_WaitFifoStateUntilTimeout>
 800aa78:	1e03      	subs	r3, r0, #0
 800aa7a:	d007      	beq.n	800aa8c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa80:	2220      	movs	r2, #32
 800aa82:	431a      	orrs	r2, r3
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800aa88:	2303      	movs	r3, #3
 800aa8a:	e027      	b.n	800aadc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800aa8c:	68ba      	ldr	r2, [r7, #8]
 800aa8e:	68f8      	ldr	r0, [r7, #12]
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	9300      	str	r3, [sp, #0]
 800aa94:	0013      	movs	r3, r2
 800aa96:	2200      	movs	r2, #0
 800aa98:	2180      	movs	r1, #128	; 0x80
 800aa9a:	f7ff fe5b 	bl	800a754 <SPI_WaitFlagStateUntilTimeout>
 800aa9e:	1e03      	subs	r3, r0, #0
 800aaa0:	d007      	beq.n	800aab2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aaa6:	2220      	movs	r2, #32
 800aaa8:	431a      	orrs	r2, r3
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800aaae:	2303      	movs	r3, #3
 800aab0:	e014      	b.n	800aadc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800aab2:	68ba      	ldr	r2, [r7, #8]
 800aab4:	23c0      	movs	r3, #192	; 0xc0
 800aab6:	00d9      	lsls	r1, r3, #3
 800aab8:	68f8      	ldr	r0, [r7, #12]
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	9300      	str	r3, [sp, #0]
 800aabe:	0013      	movs	r3, r2
 800aac0:	2200      	movs	r2, #0
 800aac2:	f7ff fed5 	bl	800a870 <SPI_WaitFifoStateUntilTimeout>
 800aac6:	1e03      	subs	r3, r0, #0
 800aac8:	d007      	beq.n	800aada <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aace:	2220      	movs	r2, #32
 800aad0:	431a      	orrs	r2, r3
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800aad6:	2303      	movs	r3, #3
 800aad8:	e000      	b.n	800aadc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800aada:	2300      	movs	r3, #0
}
 800aadc:	0018      	movs	r0, r3
 800aade:	46bd      	mov	sp, r7
 800aae0:	b004      	add	sp, #16
 800aae2:	bd80      	pop	{r7, pc}

0800aae4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b082      	sub	sp, #8
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d101      	bne.n	800aaf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	e04a      	b.n	800ab8c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	223d      	movs	r2, #61	; 0x3d
 800aafa:	5c9b      	ldrb	r3, [r3, r2]
 800aafc:	b2db      	uxtb	r3, r3
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d107      	bne.n	800ab12 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	223c      	movs	r2, #60	; 0x3c
 800ab06:	2100      	movs	r1, #0
 800ab08:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	0018      	movs	r0, r3
 800ab0e:	f7fa fae9 	bl	80050e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	223d      	movs	r2, #61	; 0x3d
 800ab16:	2102      	movs	r1, #2
 800ab18:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681a      	ldr	r2, [r3, #0]
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	3304      	adds	r3, #4
 800ab22:	0019      	movs	r1, r3
 800ab24:	0010      	movs	r0, r2
 800ab26:	f000 fb41 	bl	800b1ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2248      	movs	r2, #72	; 0x48
 800ab2e:	2101      	movs	r1, #1
 800ab30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	223e      	movs	r2, #62	; 0x3e
 800ab36:	2101      	movs	r1, #1
 800ab38:	5499      	strb	r1, [r3, r2]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	223f      	movs	r2, #63	; 0x3f
 800ab3e:	2101      	movs	r1, #1
 800ab40:	5499      	strb	r1, [r3, r2]
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2240      	movs	r2, #64	; 0x40
 800ab46:	2101      	movs	r1, #1
 800ab48:	5499      	strb	r1, [r3, r2]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2241      	movs	r2, #65	; 0x41
 800ab4e:	2101      	movs	r1, #1
 800ab50:	5499      	strb	r1, [r3, r2]
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2242      	movs	r2, #66	; 0x42
 800ab56:	2101      	movs	r1, #1
 800ab58:	5499      	strb	r1, [r3, r2]
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2243      	movs	r2, #67	; 0x43
 800ab5e:	2101      	movs	r1, #1
 800ab60:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2244      	movs	r2, #68	; 0x44
 800ab66:	2101      	movs	r1, #1
 800ab68:	5499      	strb	r1, [r3, r2]
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2245      	movs	r2, #69	; 0x45
 800ab6e:	2101      	movs	r1, #1
 800ab70:	5499      	strb	r1, [r3, r2]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2246      	movs	r2, #70	; 0x46
 800ab76:	2101      	movs	r1, #1
 800ab78:	5499      	strb	r1, [r3, r2]
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2247      	movs	r2, #71	; 0x47
 800ab7e:	2101      	movs	r1, #1
 800ab80:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	223d      	movs	r2, #61	; 0x3d
 800ab86:	2101      	movs	r1, #1
 800ab88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ab8a:	2300      	movs	r3, #0
}
 800ab8c:	0018      	movs	r0, r3
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	b002      	add	sp, #8
 800ab92:	bd80      	pop	{r7, pc}

0800ab94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b082      	sub	sp, #8
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d101      	bne.n	800aba6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800aba2:	2301      	movs	r3, #1
 800aba4:	e04a      	b.n	800ac3c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	223d      	movs	r2, #61	; 0x3d
 800abaa:	5c9b      	ldrb	r3, [r3, r2]
 800abac:	b2db      	uxtb	r3, r3
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d107      	bne.n	800abc2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	223c      	movs	r2, #60	; 0x3c
 800abb6:	2100      	movs	r1, #0
 800abb8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	0018      	movs	r0, r3
 800abbe:	f000 f841 	bl	800ac44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	223d      	movs	r2, #61	; 0x3d
 800abc6:	2102      	movs	r1, #2
 800abc8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681a      	ldr	r2, [r3, #0]
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	3304      	adds	r3, #4
 800abd2:	0019      	movs	r1, r3
 800abd4:	0010      	movs	r0, r2
 800abd6:	f000 fae9 	bl	800b1ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2248      	movs	r2, #72	; 0x48
 800abde:	2101      	movs	r1, #1
 800abe0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	223e      	movs	r2, #62	; 0x3e
 800abe6:	2101      	movs	r1, #1
 800abe8:	5499      	strb	r1, [r3, r2]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	223f      	movs	r2, #63	; 0x3f
 800abee:	2101      	movs	r1, #1
 800abf0:	5499      	strb	r1, [r3, r2]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2240      	movs	r2, #64	; 0x40
 800abf6:	2101      	movs	r1, #1
 800abf8:	5499      	strb	r1, [r3, r2]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2241      	movs	r2, #65	; 0x41
 800abfe:	2101      	movs	r1, #1
 800ac00:	5499      	strb	r1, [r3, r2]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2242      	movs	r2, #66	; 0x42
 800ac06:	2101      	movs	r1, #1
 800ac08:	5499      	strb	r1, [r3, r2]
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2243      	movs	r2, #67	; 0x43
 800ac0e:	2101      	movs	r1, #1
 800ac10:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2244      	movs	r2, #68	; 0x44
 800ac16:	2101      	movs	r1, #1
 800ac18:	5499      	strb	r1, [r3, r2]
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2245      	movs	r2, #69	; 0x45
 800ac1e:	2101      	movs	r1, #1
 800ac20:	5499      	strb	r1, [r3, r2]
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2246      	movs	r2, #70	; 0x46
 800ac26:	2101      	movs	r1, #1
 800ac28:	5499      	strb	r1, [r3, r2]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2247      	movs	r2, #71	; 0x47
 800ac2e:	2101      	movs	r1, #1
 800ac30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	223d      	movs	r2, #61	; 0x3d
 800ac36:	2101      	movs	r1, #1
 800ac38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ac3a:	2300      	movs	r3, #0
}
 800ac3c:	0018      	movs	r0, r3
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	b002      	add	sp, #8
 800ac42:	bd80      	pop	{r7, pc}

0800ac44 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b082      	sub	sp, #8
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ac4c:	46c0      	nop			; (mov r8, r8)
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	b002      	add	sp, #8
 800ac52:	bd80      	pop	{r7, pc}

0800ac54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b084      	sub	sp, #16
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
 800ac5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d108      	bne.n	800ac76 <HAL_TIM_PWM_Start+0x22>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	223e      	movs	r2, #62	; 0x3e
 800ac68:	5c9b      	ldrb	r3, [r3, r2]
 800ac6a:	b2db      	uxtb	r3, r3
 800ac6c:	3b01      	subs	r3, #1
 800ac6e:	1e5a      	subs	r2, r3, #1
 800ac70:	4193      	sbcs	r3, r2
 800ac72:	b2db      	uxtb	r3, r3
 800ac74:	e037      	b.n	800ace6 <HAL_TIM_PWM_Start+0x92>
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	2b04      	cmp	r3, #4
 800ac7a:	d108      	bne.n	800ac8e <HAL_TIM_PWM_Start+0x3a>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	223f      	movs	r2, #63	; 0x3f
 800ac80:	5c9b      	ldrb	r3, [r3, r2]
 800ac82:	b2db      	uxtb	r3, r3
 800ac84:	3b01      	subs	r3, #1
 800ac86:	1e5a      	subs	r2, r3, #1
 800ac88:	4193      	sbcs	r3, r2
 800ac8a:	b2db      	uxtb	r3, r3
 800ac8c:	e02b      	b.n	800ace6 <HAL_TIM_PWM_Start+0x92>
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	2b08      	cmp	r3, #8
 800ac92:	d108      	bne.n	800aca6 <HAL_TIM_PWM_Start+0x52>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2240      	movs	r2, #64	; 0x40
 800ac98:	5c9b      	ldrb	r3, [r3, r2]
 800ac9a:	b2db      	uxtb	r3, r3
 800ac9c:	3b01      	subs	r3, #1
 800ac9e:	1e5a      	subs	r2, r3, #1
 800aca0:	4193      	sbcs	r3, r2
 800aca2:	b2db      	uxtb	r3, r3
 800aca4:	e01f      	b.n	800ace6 <HAL_TIM_PWM_Start+0x92>
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	2b0c      	cmp	r3, #12
 800acaa:	d108      	bne.n	800acbe <HAL_TIM_PWM_Start+0x6a>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2241      	movs	r2, #65	; 0x41
 800acb0:	5c9b      	ldrb	r3, [r3, r2]
 800acb2:	b2db      	uxtb	r3, r3
 800acb4:	3b01      	subs	r3, #1
 800acb6:	1e5a      	subs	r2, r3, #1
 800acb8:	4193      	sbcs	r3, r2
 800acba:	b2db      	uxtb	r3, r3
 800acbc:	e013      	b.n	800ace6 <HAL_TIM_PWM_Start+0x92>
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	2b10      	cmp	r3, #16
 800acc2:	d108      	bne.n	800acd6 <HAL_TIM_PWM_Start+0x82>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2242      	movs	r2, #66	; 0x42
 800acc8:	5c9b      	ldrb	r3, [r3, r2]
 800acca:	b2db      	uxtb	r3, r3
 800accc:	3b01      	subs	r3, #1
 800acce:	1e5a      	subs	r2, r3, #1
 800acd0:	4193      	sbcs	r3, r2
 800acd2:	b2db      	uxtb	r3, r3
 800acd4:	e007      	b.n	800ace6 <HAL_TIM_PWM_Start+0x92>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2243      	movs	r2, #67	; 0x43
 800acda:	5c9b      	ldrb	r3, [r3, r2]
 800acdc:	b2db      	uxtb	r3, r3
 800acde:	3b01      	subs	r3, #1
 800ace0:	1e5a      	subs	r2, r3, #1
 800ace2:	4193      	sbcs	r3, r2
 800ace4:	b2db      	uxtb	r3, r3
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d001      	beq.n	800acee <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800acea:	2301      	movs	r3, #1
 800acec:	e08b      	b.n	800ae06 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d104      	bne.n	800acfe <HAL_TIM_PWM_Start+0xaa>
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	223e      	movs	r2, #62	; 0x3e
 800acf8:	2102      	movs	r1, #2
 800acfa:	5499      	strb	r1, [r3, r2]
 800acfc:	e023      	b.n	800ad46 <HAL_TIM_PWM_Start+0xf2>
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	2b04      	cmp	r3, #4
 800ad02:	d104      	bne.n	800ad0e <HAL_TIM_PWM_Start+0xba>
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	223f      	movs	r2, #63	; 0x3f
 800ad08:	2102      	movs	r1, #2
 800ad0a:	5499      	strb	r1, [r3, r2]
 800ad0c:	e01b      	b.n	800ad46 <HAL_TIM_PWM_Start+0xf2>
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	2b08      	cmp	r3, #8
 800ad12:	d104      	bne.n	800ad1e <HAL_TIM_PWM_Start+0xca>
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2240      	movs	r2, #64	; 0x40
 800ad18:	2102      	movs	r1, #2
 800ad1a:	5499      	strb	r1, [r3, r2]
 800ad1c:	e013      	b.n	800ad46 <HAL_TIM_PWM_Start+0xf2>
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	2b0c      	cmp	r3, #12
 800ad22:	d104      	bne.n	800ad2e <HAL_TIM_PWM_Start+0xda>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2241      	movs	r2, #65	; 0x41
 800ad28:	2102      	movs	r1, #2
 800ad2a:	5499      	strb	r1, [r3, r2]
 800ad2c:	e00b      	b.n	800ad46 <HAL_TIM_PWM_Start+0xf2>
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	2b10      	cmp	r3, #16
 800ad32:	d104      	bne.n	800ad3e <HAL_TIM_PWM_Start+0xea>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2242      	movs	r2, #66	; 0x42
 800ad38:	2102      	movs	r1, #2
 800ad3a:	5499      	strb	r1, [r3, r2]
 800ad3c:	e003      	b.n	800ad46 <HAL_TIM_PWM_Start+0xf2>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2243      	movs	r2, #67	; 0x43
 800ad42:	2102      	movs	r1, #2
 800ad44:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	6839      	ldr	r1, [r7, #0]
 800ad4c:	2201      	movs	r2, #1
 800ad4e:	0018      	movs	r0, r3
 800ad50:	f000 fe0c 	bl	800b96c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	4a2d      	ldr	r2, [pc, #180]	; (800ae10 <HAL_TIM_PWM_Start+0x1bc>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d00e      	beq.n	800ad7c <HAL_TIM_PWM_Start+0x128>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	4a2c      	ldr	r2, [pc, #176]	; (800ae14 <HAL_TIM_PWM_Start+0x1c0>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d009      	beq.n	800ad7c <HAL_TIM_PWM_Start+0x128>
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	4a2a      	ldr	r2, [pc, #168]	; (800ae18 <HAL_TIM_PWM_Start+0x1c4>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d004      	beq.n	800ad7c <HAL_TIM_PWM_Start+0x128>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	4a29      	ldr	r2, [pc, #164]	; (800ae1c <HAL_TIM_PWM_Start+0x1c8>)
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d101      	bne.n	800ad80 <HAL_TIM_PWM_Start+0x12c>
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	e000      	b.n	800ad82 <HAL_TIM_PWM_Start+0x12e>
 800ad80:	2300      	movs	r3, #0
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d008      	beq.n	800ad98 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	2180      	movs	r1, #128	; 0x80
 800ad92:	0209      	lsls	r1, r1, #8
 800ad94:	430a      	orrs	r2, r1
 800ad96:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	4a1c      	ldr	r2, [pc, #112]	; (800ae10 <HAL_TIM_PWM_Start+0x1bc>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d00f      	beq.n	800adc2 <HAL_TIM_PWM_Start+0x16e>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681a      	ldr	r2, [r3, #0]
 800ada6:	2380      	movs	r3, #128	; 0x80
 800ada8:	05db      	lsls	r3, r3, #23
 800adaa:	429a      	cmp	r2, r3
 800adac:	d009      	beq.n	800adc2 <HAL_TIM_PWM_Start+0x16e>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	4a1b      	ldr	r2, [pc, #108]	; (800ae20 <HAL_TIM_PWM_Start+0x1cc>)
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d004      	beq.n	800adc2 <HAL_TIM_PWM_Start+0x16e>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4a15      	ldr	r2, [pc, #84]	; (800ae14 <HAL_TIM_PWM_Start+0x1c0>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d116      	bne.n	800adf0 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	689b      	ldr	r3, [r3, #8]
 800adc8:	4a16      	ldr	r2, [pc, #88]	; (800ae24 <HAL_TIM_PWM_Start+0x1d0>)
 800adca:	4013      	ands	r3, r2
 800adcc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	2b06      	cmp	r3, #6
 800add2:	d016      	beq.n	800ae02 <HAL_TIM_PWM_Start+0x1ae>
 800add4:	68fa      	ldr	r2, [r7, #12]
 800add6:	2380      	movs	r3, #128	; 0x80
 800add8:	025b      	lsls	r3, r3, #9
 800adda:	429a      	cmp	r2, r3
 800addc:	d011      	beq.n	800ae02 <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	681a      	ldr	r2, [r3, #0]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	2101      	movs	r1, #1
 800adea:	430a      	orrs	r2, r1
 800adec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800adee:	e008      	b.n	800ae02 <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	681a      	ldr	r2, [r3, #0]
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	2101      	movs	r1, #1
 800adfc:	430a      	orrs	r2, r1
 800adfe:	601a      	str	r2, [r3, #0]
 800ae00:	e000      	b.n	800ae04 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae02:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800ae04:	2300      	movs	r3, #0
}
 800ae06:	0018      	movs	r0, r3
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	b004      	add	sp, #16
 800ae0c:	bd80      	pop	{r7, pc}
 800ae0e:	46c0      	nop			; (mov r8, r8)
 800ae10:	40012c00 	.word	0x40012c00
 800ae14:	40014000 	.word	0x40014000
 800ae18:	40014400 	.word	0x40014400
 800ae1c:	40014800 	.word	0x40014800
 800ae20:	40000400 	.word	0x40000400
 800ae24:	00010007 	.word	0x00010007

0800ae28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b084      	sub	sp, #16
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	60f8      	str	r0, [r7, #12]
 800ae30:	60b9      	str	r1, [r7, #8]
 800ae32:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	223c      	movs	r2, #60	; 0x3c
 800ae38:	5c9b      	ldrb	r3, [r3, r2]
 800ae3a:	2b01      	cmp	r3, #1
 800ae3c:	d101      	bne.n	800ae42 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800ae3e:	2302      	movs	r3, #2
 800ae40:	e0df      	b.n	800b002 <HAL_TIM_PWM_ConfigChannel+0x1da>
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	223c      	movs	r2, #60	; 0x3c
 800ae46:	2101      	movs	r1, #1
 800ae48:	5499      	strb	r1, [r3, r2]
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2b14      	cmp	r3, #20
 800ae4e:	d900      	bls.n	800ae52 <HAL_TIM_PWM_ConfigChannel+0x2a>
 800ae50:	e0d1      	b.n	800aff6 <HAL_TIM_PWM_ConfigChannel+0x1ce>
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	009a      	lsls	r2, r3, #2
 800ae56:	4b6d      	ldr	r3, [pc, #436]	; (800b00c <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 800ae58:	18d3      	adds	r3, r2, r3
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	68ba      	ldr	r2, [r7, #8]
 800ae64:	0011      	movs	r1, r2
 800ae66:	0018      	movs	r0, r3
 800ae68:	f000 fa20 	bl	800b2ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	699a      	ldr	r2, [r3, #24]
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	2108      	movs	r1, #8
 800ae78:	430a      	orrs	r2, r1
 800ae7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	699a      	ldr	r2, [r3, #24]
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	2104      	movs	r1, #4
 800ae88:	438a      	bics	r2, r1
 800ae8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	6999      	ldr	r1, [r3, #24]
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	691a      	ldr	r2, [r3, #16]
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	430a      	orrs	r2, r1
 800ae9c:	619a      	str	r2, [r3, #24]
      break;
 800ae9e:	e0ab      	b.n	800aff8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	68ba      	ldr	r2, [r7, #8]
 800aea6:	0011      	movs	r1, r2
 800aea8:	0018      	movs	r0, r3
 800aeaa:	f000 fa89 	bl	800b3c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	699a      	ldr	r2, [r3, #24]
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	2180      	movs	r1, #128	; 0x80
 800aeba:	0109      	lsls	r1, r1, #4
 800aebc:	430a      	orrs	r2, r1
 800aebe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	699a      	ldr	r2, [r3, #24]
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	4951      	ldr	r1, [pc, #324]	; (800b010 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 800aecc:	400a      	ands	r2, r1
 800aece:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	6999      	ldr	r1, [r3, #24]
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	691b      	ldr	r3, [r3, #16]
 800aeda:	021a      	lsls	r2, r3, #8
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	430a      	orrs	r2, r1
 800aee2:	619a      	str	r2, [r3, #24]
      break;
 800aee4:	e088      	b.n	800aff8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	68ba      	ldr	r2, [r7, #8]
 800aeec:	0011      	movs	r1, r2
 800aeee:	0018      	movs	r0, r3
 800aef0:	f000 faea 	bl	800b4c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	69da      	ldr	r2, [r3, #28]
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	2108      	movs	r1, #8
 800af00:	430a      	orrs	r2, r1
 800af02:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	69da      	ldr	r2, [r3, #28]
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	2104      	movs	r1, #4
 800af10:	438a      	bics	r2, r1
 800af12:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	69d9      	ldr	r1, [r3, #28]
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	691a      	ldr	r2, [r3, #16]
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	430a      	orrs	r2, r1
 800af24:	61da      	str	r2, [r3, #28]
      break;
 800af26:	e067      	b.n	800aff8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	68ba      	ldr	r2, [r7, #8]
 800af2e:	0011      	movs	r1, r2
 800af30:	0018      	movs	r0, r3
 800af32:	f000 fb51 	bl	800b5d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	69da      	ldr	r2, [r3, #28]
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	2180      	movs	r1, #128	; 0x80
 800af42:	0109      	lsls	r1, r1, #4
 800af44:	430a      	orrs	r2, r1
 800af46:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	69da      	ldr	r2, [r3, #28]
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	492f      	ldr	r1, [pc, #188]	; (800b010 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 800af54:	400a      	ands	r2, r1
 800af56:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	69d9      	ldr	r1, [r3, #28]
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	691b      	ldr	r3, [r3, #16]
 800af62:	021a      	lsls	r2, r3, #8
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	430a      	orrs	r2, r1
 800af6a:	61da      	str	r2, [r3, #28]
      break;
 800af6c:	e044      	b.n	800aff8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	68ba      	ldr	r2, [r7, #8]
 800af74:	0011      	movs	r1, r2
 800af76:	0018      	movs	r0, r3
 800af78:	f000 fb98 	bl	800b6ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	2108      	movs	r1, #8
 800af88:	430a      	orrs	r2, r1
 800af8a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	2104      	movs	r1, #4
 800af98:	438a      	bics	r2, r1
 800af9a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	691a      	ldr	r2, [r3, #16]
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	430a      	orrs	r2, r1
 800afac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800afae:	e023      	b.n	800aff8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	68ba      	ldr	r2, [r7, #8]
 800afb6:	0011      	movs	r1, r2
 800afb8:	0018      	movs	r0, r3
 800afba:	f000 fbd7 	bl	800b76c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	2180      	movs	r1, #128	; 0x80
 800afca:	0109      	lsls	r1, r1, #4
 800afcc:	430a      	orrs	r2, r1
 800afce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	490d      	ldr	r1, [pc, #52]	; (800b010 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 800afdc:	400a      	ands	r2, r1
 800afde:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	691b      	ldr	r3, [r3, #16]
 800afea:	021a      	lsls	r2, r3, #8
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	430a      	orrs	r2, r1
 800aff2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800aff4:	e000      	b.n	800aff8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 800aff6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	223c      	movs	r2, #60	; 0x3c
 800affc:	2100      	movs	r1, #0
 800affe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b000:	2300      	movs	r3, #0
}
 800b002:	0018      	movs	r0, r3
 800b004:	46bd      	mov	sp, r7
 800b006:	b004      	add	sp, #16
 800b008:	bd80      	pop	{r7, pc}
 800b00a:	46c0      	nop			; (mov r8, r8)
 800b00c:	0801162c 	.word	0x0801162c
 800b010:	fffffbff 	.word	0xfffffbff

0800b014 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b084      	sub	sp, #16
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	223c      	movs	r2, #60	; 0x3c
 800b022:	5c9b      	ldrb	r3, [r3, r2]
 800b024:	2b01      	cmp	r3, #1
 800b026:	d101      	bne.n	800b02c <HAL_TIM_ConfigClockSource+0x18>
 800b028:	2302      	movs	r3, #2
 800b02a:	e0b7      	b.n	800b19c <HAL_TIM_ConfigClockSource+0x188>
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	223c      	movs	r2, #60	; 0x3c
 800b030:	2101      	movs	r1, #1
 800b032:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	223d      	movs	r2, #61	; 0x3d
 800b038:	2102      	movs	r1, #2
 800b03a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	689b      	ldr	r3, [r3, #8]
 800b042:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	4a57      	ldr	r2, [pc, #348]	; (800b1a4 <HAL_TIM_ConfigClockSource+0x190>)
 800b048:	4013      	ands	r3, r2
 800b04a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	4a56      	ldr	r2, [pc, #344]	; (800b1a8 <HAL_TIM_ConfigClockSource+0x194>)
 800b050:	4013      	ands	r3, r2
 800b052:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	68fa      	ldr	r2, [r7, #12]
 800b05a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	2280      	movs	r2, #128	; 0x80
 800b062:	0192      	lsls	r2, r2, #6
 800b064:	4293      	cmp	r3, r2
 800b066:	d040      	beq.n	800b0ea <HAL_TIM_ConfigClockSource+0xd6>
 800b068:	2280      	movs	r2, #128	; 0x80
 800b06a:	0192      	lsls	r2, r2, #6
 800b06c:	4293      	cmp	r3, r2
 800b06e:	d900      	bls.n	800b072 <HAL_TIM_ConfigClockSource+0x5e>
 800b070:	e088      	b.n	800b184 <HAL_TIM_ConfigClockSource+0x170>
 800b072:	2280      	movs	r2, #128	; 0x80
 800b074:	0152      	lsls	r2, r2, #5
 800b076:	4293      	cmp	r3, r2
 800b078:	d100      	bne.n	800b07c <HAL_TIM_ConfigClockSource+0x68>
 800b07a:	e085      	b.n	800b188 <HAL_TIM_ConfigClockSource+0x174>
 800b07c:	2280      	movs	r2, #128	; 0x80
 800b07e:	0152      	lsls	r2, r2, #5
 800b080:	4293      	cmp	r3, r2
 800b082:	d900      	bls.n	800b086 <HAL_TIM_ConfigClockSource+0x72>
 800b084:	e07e      	b.n	800b184 <HAL_TIM_ConfigClockSource+0x170>
 800b086:	2b70      	cmp	r3, #112	; 0x70
 800b088:	d018      	beq.n	800b0bc <HAL_TIM_ConfigClockSource+0xa8>
 800b08a:	d900      	bls.n	800b08e <HAL_TIM_ConfigClockSource+0x7a>
 800b08c:	e07a      	b.n	800b184 <HAL_TIM_ConfigClockSource+0x170>
 800b08e:	2b60      	cmp	r3, #96	; 0x60
 800b090:	d04f      	beq.n	800b132 <HAL_TIM_ConfigClockSource+0x11e>
 800b092:	d900      	bls.n	800b096 <HAL_TIM_ConfigClockSource+0x82>
 800b094:	e076      	b.n	800b184 <HAL_TIM_ConfigClockSource+0x170>
 800b096:	2b50      	cmp	r3, #80	; 0x50
 800b098:	d03b      	beq.n	800b112 <HAL_TIM_ConfigClockSource+0xfe>
 800b09a:	d900      	bls.n	800b09e <HAL_TIM_ConfigClockSource+0x8a>
 800b09c:	e072      	b.n	800b184 <HAL_TIM_ConfigClockSource+0x170>
 800b09e:	2b40      	cmp	r3, #64	; 0x40
 800b0a0:	d057      	beq.n	800b152 <HAL_TIM_ConfigClockSource+0x13e>
 800b0a2:	d900      	bls.n	800b0a6 <HAL_TIM_ConfigClockSource+0x92>
 800b0a4:	e06e      	b.n	800b184 <HAL_TIM_ConfigClockSource+0x170>
 800b0a6:	2b30      	cmp	r3, #48	; 0x30
 800b0a8:	d063      	beq.n	800b172 <HAL_TIM_ConfigClockSource+0x15e>
 800b0aa:	d86b      	bhi.n	800b184 <HAL_TIM_ConfigClockSource+0x170>
 800b0ac:	2b20      	cmp	r3, #32
 800b0ae:	d060      	beq.n	800b172 <HAL_TIM_ConfigClockSource+0x15e>
 800b0b0:	d868      	bhi.n	800b184 <HAL_TIM_ConfigClockSource+0x170>
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d05d      	beq.n	800b172 <HAL_TIM_ConfigClockSource+0x15e>
 800b0b6:	2b10      	cmp	r3, #16
 800b0b8:	d05b      	beq.n	800b172 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800b0ba:	e063      	b.n	800b184 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6818      	ldr	r0, [r3, #0]
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	6899      	ldr	r1, [r3, #8]
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	685a      	ldr	r2, [r3, #4]
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	68db      	ldr	r3, [r3, #12]
 800b0cc:	f000 fc2e 	bl	800b92c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	689b      	ldr	r3, [r3, #8]
 800b0d6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	2277      	movs	r2, #119	; 0x77
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	68fa      	ldr	r2, [r7, #12]
 800b0e6:	609a      	str	r2, [r3, #8]
      break;
 800b0e8:	e04f      	b.n	800b18a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6818      	ldr	r0, [r3, #0]
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	6899      	ldr	r1, [r3, #8]
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	685a      	ldr	r2, [r3, #4]
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	68db      	ldr	r3, [r3, #12]
 800b0fa:	f000 fc17 	bl	800b92c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	689a      	ldr	r2, [r3, #8]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	2180      	movs	r1, #128	; 0x80
 800b10a:	01c9      	lsls	r1, r1, #7
 800b10c:	430a      	orrs	r2, r1
 800b10e:	609a      	str	r2, [r3, #8]
      break;
 800b110:	e03b      	b.n	800b18a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6818      	ldr	r0, [r3, #0]
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	6859      	ldr	r1, [r3, #4]
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	68db      	ldr	r3, [r3, #12]
 800b11e:	001a      	movs	r2, r3
 800b120:	f000 fb88 	bl	800b834 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	2150      	movs	r1, #80	; 0x50
 800b12a:	0018      	movs	r0, r3
 800b12c:	f000 fbe2 	bl	800b8f4 <TIM_ITRx_SetConfig>
      break;
 800b130:	e02b      	b.n	800b18a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6818      	ldr	r0, [r3, #0]
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	6859      	ldr	r1, [r3, #4]
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	68db      	ldr	r3, [r3, #12]
 800b13e:	001a      	movs	r2, r3
 800b140:	f000 fba6 	bl	800b890 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	2160      	movs	r1, #96	; 0x60
 800b14a:	0018      	movs	r0, r3
 800b14c:	f000 fbd2 	bl	800b8f4 <TIM_ITRx_SetConfig>
      break;
 800b150:	e01b      	b.n	800b18a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6818      	ldr	r0, [r3, #0]
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	6859      	ldr	r1, [r3, #4]
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	68db      	ldr	r3, [r3, #12]
 800b15e:	001a      	movs	r2, r3
 800b160:	f000 fb68 	bl	800b834 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	2140      	movs	r1, #64	; 0x40
 800b16a:	0018      	movs	r0, r3
 800b16c:	f000 fbc2 	bl	800b8f4 <TIM_ITRx_SetConfig>
      break;
 800b170:	e00b      	b.n	800b18a <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681a      	ldr	r2, [r3, #0]
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	0019      	movs	r1, r3
 800b17c:	0010      	movs	r0, r2
 800b17e:	f000 fbb9 	bl	800b8f4 <TIM_ITRx_SetConfig>
        break;
 800b182:	e002      	b.n	800b18a <HAL_TIM_ConfigClockSource+0x176>
      break;
 800b184:	46c0      	nop			; (mov r8, r8)
 800b186:	e000      	b.n	800b18a <HAL_TIM_ConfigClockSource+0x176>
      break;
 800b188:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	223d      	movs	r2, #61	; 0x3d
 800b18e:	2101      	movs	r1, #1
 800b190:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	223c      	movs	r2, #60	; 0x3c
 800b196:	2100      	movs	r1, #0
 800b198:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b19a:	2300      	movs	r3, #0
}
 800b19c:	0018      	movs	r0, r3
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	b004      	add	sp, #16
 800b1a2:	bd80      	pop	{r7, pc}
 800b1a4:	ffceff88 	.word	0xffceff88
 800b1a8:	ffff00ff 	.word	0xffff00ff

0800b1ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b084      	sub	sp, #16
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
 800b1b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	4a34      	ldr	r2, [pc, #208]	; (800b290 <TIM_Base_SetConfig+0xe4>)
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d008      	beq.n	800b1d6 <TIM_Base_SetConfig+0x2a>
 800b1c4:	687a      	ldr	r2, [r7, #4]
 800b1c6:	2380      	movs	r3, #128	; 0x80
 800b1c8:	05db      	lsls	r3, r3, #23
 800b1ca:	429a      	cmp	r2, r3
 800b1cc:	d003      	beq.n	800b1d6 <TIM_Base_SetConfig+0x2a>
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	4a30      	ldr	r2, [pc, #192]	; (800b294 <TIM_Base_SetConfig+0xe8>)
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	d108      	bne.n	800b1e8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	2270      	movs	r2, #112	; 0x70
 800b1da:	4393      	bics	r3, r2
 800b1dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	685b      	ldr	r3, [r3, #4]
 800b1e2:	68fa      	ldr	r2, [r7, #12]
 800b1e4:	4313      	orrs	r3, r2
 800b1e6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	4a29      	ldr	r2, [pc, #164]	; (800b290 <TIM_Base_SetConfig+0xe4>)
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d018      	beq.n	800b222 <TIM_Base_SetConfig+0x76>
 800b1f0:	687a      	ldr	r2, [r7, #4]
 800b1f2:	2380      	movs	r3, #128	; 0x80
 800b1f4:	05db      	lsls	r3, r3, #23
 800b1f6:	429a      	cmp	r2, r3
 800b1f8:	d013      	beq.n	800b222 <TIM_Base_SetConfig+0x76>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	4a25      	ldr	r2, [pc, #148]	; (800b294 <TIM_Base_SetConfig+0xe8>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d00f      	beq.n	800b222 <TIM_Base_SetConfig+0x76>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	4a24      	ldr	r2, [pc, #144]	; (800b298 <TIM_Base_SetConfig+0xec>)
 800b206:	4293      	cmp	r3, r2
 800b208:	d00b      	beq.n	800b222 <TIM_Base_SetConfig+0x76>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	4a23      	ldr	r2, [pc, #140]	; (800b29c <TIM_Base_SetConfig+0xf0>)
 800b20e:	4293      	cmp	r3, r2
 800b210:	d007      	beq.n	800b222 <TIM_Base_SetConfig+0x76>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	4a22      	ldr	r2, [pc, #136]	; (800b2a0 <TIM_Base_SetConfig+0xf4>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d003      	beq.n	800b222 <TIM_Base_SetConfig+0x76>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	4a21      	ldr	r2, [pc, #132]	; (800b2a4 <TIM_Base_SetConfig+0xf8>)
 800b21e:	4293      	cmp	r3, r2
 800b220:	d108      	bne.n	800b234 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	4a20      	ldr	r2, [pc, #128]	; (800b2a8 <TIM_Base_SetConfig+0xfc>)
 800b226:	4013      	ands	r3, r2
 800b228:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	68db      	ldr	r3, [r3, #12]
 800b22e:	68fa      	ldr	r2, [r7, #12]
 800b230:	4313      	orrs	r3, r2
 800b232:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	2280      	movs	r2, #128	; 0x80
 800b238:	4393      	bics	r3, r2
 800b23a:	001a      	movs	r2, r3
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	695b      	ldr	r3, [r3, #20]
 800b240:	4313      	orrs	r3, r2
 800b242:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	68fa      	ldr	r2, [r7, #12]
 800b248:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	689a      	ldr	r2, [r3, #8]
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	681a      	ldr	r2, [r3, #0]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	4a0c      	ldr	r2, [pc, #48]	; (800b290 <TIM_Base_SetConfig+0xe4>)
 800b25e:	4293      	cmp	r3, r2
 800b260:	d00b      	beq.n	800b27a <TIM_Base_SetConfig+0xce>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	4a0d      	ldr	r2, [pc, #52]	; (800b29c <TIM_Base_SetConfig+0xf0>)
 800b266:	4293      	cmp	r3, r2
 800b268:	d007      	beq.n	800b27a <TIM_Base_SetConfig+0xce>
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	4a0c      	ldr	r2, [pc, #48]	; (800b2a0 <TIM_Base_SetConfig+0xf4>)
 800b26e:	4293      	cmp	r3, r2
 800b270:	d003      	beq.n	800b27a <TIM_Base_SetConfig+0xce>
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	4a0b      	ldr	r2, [pc, #44]	; (800b2a4 <TIM_Base_SetConfig+0xf8>)
 800b276:	4293      	cmp	r3, r2
 800b278:	d103      	bne.n	800b282 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	691a      	ldr	r2, [r3, #16]
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2201      	movs	r2, #1
 800b286:	615a      	str	r2, [r3, #20]
}
 800b288:	46c0      	nop			; (mov r8, r8)
 800b28a:	46bd      	mov	sp, r7
 800b28c:	b004      	add	sp, #16
 800b28e:	bd80      	pop	{r7, pc}
 800b290:	40012c00 	.word	0x40012c00
 800b294:	40000400 	.word	0x40000400
 800b298:	40002000 	.word	0x40002000
 800b29c:	40014000 	.word	0x40014000
 800b2a0:	40014400 	.word	0x40014400
 800b2a4:	40014800 	.word	0x40014800
 800b2a8:	fffffcff 	.word	0xfffffcff

0800b2ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b086      	sub	sp, #24
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
 800b2b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6a1b      	ldr	r3, [r3, #32]
 800b2ba:	2201      	movs	r2, #1
 800b2bc:	4393      	bics	r3, r2
 800b2be:	001a      	movs	r2, r3
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6a1b      	ldr	r3, [r3, #32]
 800b2c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	685b      	ldr	r3, [r3, #4]
 800b2ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	699b      	ldr	r3, [r3, #24]
 800b2d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	4a32      	ldr	r2, [pc, #200]	; (800b3a4 <TIM_OC1_SetConfig+0xf8>)
 800b2da:	4013      	ands	r3, r2
 800b2dc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	2203      	movs	r2, #3
 800b2e2:	4393      	bics	r3, r2
 800b2e4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	68fa      	ldr	r2, [r7, #12]
 800b2ec:	4313      	orrs	r3, r2
 800b2ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	2202      	movs	r2, #2
 800b2f4:	4393      	bics	r3, r2
 800b2f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	689b      	ldr	r3, [r3, #8]
 800b2fc:	697a      	ldr	r2, [r7, #20]
 800b2fe:	4313      	orrs	r3, r2
 800b300:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	4a28      	ldr	r2, [pc, #160]	; (800b3a8 <TIM_OC1_SetConfig+0xfc>)
 800b306:	4293      	cmp	r3, r2
 800b308:	d00b      	beq.n	800b322 <TIM_OC1_SetConfig+0x76>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	4a27      	ldr	r2, [pc, #156]	; (800b3ac <TIM_OC1_SetConfig+0x100>)
 800b30e:	4293      	cmp	r3, r2
 800b310:	d007      	beq.n	800b322 <TIM_OC1_SetConfig+0x76>
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	4a26      	ldr	r2, [pc, #152]	; (800b3b0 <TIM_OC1_SetConfig+0x104>)
 800b316:	4293      	cmp	r3, r2
 800b318:	d003      	beq.n	800b322 <TIM_OC1_SetConfig+0x76>
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	4a25      	ldr	r2, [pc, #148]	; (800b3b4 <TIM_OC1_SetConfig+0x108>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	d10c      	bne.n	800b33c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	2208      	movs	r2, #8
 800b326:	4393      	bics	r3, r2
 800b328:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	68db      	ldr	r3, [r3, #12]
 800b32e:	697a      	ldr	r2, [r7, #20]
 800b330:	4313      	orrs	r3, r2
 800b332:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b334:	697b      	ldr	r3, [r7, #20]
 800b336:	2204      	movs	r2, #4
 800b338:	4393      	bics	r3, r2
 800b33a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	4a1a      	ldr	r2, [pc, #104]	; (800b3a8 <TIM_OC1_SetConfig+0xfc>)
 800b340:	4293      	cmp	r3, r2
 800b342:	d00b      	beq.n	800b35c <TIM_OC1_SetConfig+0xb0>
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	4a19      	ldr	r2, [pc, #100]	; (800b3ac <TIM_OC1_SetConfig+0x100>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	d007      	beq.n	800b35c <TIM_OC1_SetConfig+0xb0>
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	4a18      	ldr	r2, [pc, #96]	; (800b3b0 <TIM_OC1_SetConfig+0x104>)
 800b350:	4293      	cmp	r3, r2
 800b352:	d003      	beq.n	800b35c <TIM_OC1_SetConfig+0xb0>
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	4a17      	ldr	r2, [pc, #92]	; (800b3b4 <TIM_OC1_SetConfig+0x108>)
 800b358:	4293      	cmp	r3, r2
 800b35a:	d111      	bne.n	800b380 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	4a16      	ldr	r2, [pc, #88]	; (800b3b8 <TIM_OC1_SetConfig+0x10c>)
 800b360:	4013      	ands	r3, r2
 800b362:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	4a15      	ldr	r2, [pc, #84]	; (800b3bc <TIM_OC1_SetConfig+0x110>)
 800b368:	4013      	ands	r3, r2
 800b36a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	695b      	ldr	r3, [r3, #20]
 800b370:	693a      	ldr	r2, [r7, #16]
 800b372:	4313      	orrs	r3, r2
 800b374:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	699b      	ldr	r3, [r3, #24]
 800b37a:	693a      	ldr	r2, [r7, #16]
 800b37c:	4313      	orrs	r3, r2
 800b37e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	693a      	ldr	r2, [r7, #16]
 800b384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	68fa      	ldr	r2, [r7, #12]
 800b38a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	685a      	ldr	r2, [r3, #4]
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	697a      	ldr	r2, [r7, #20]
 800b398:	621a      	str	r2, [r3, #32]
}
 800b39a:	46c0      	nop			; (mov r8, r8)
 800b39c:	46bd      	mov	sp, r7
 800b39e:	b006      	add	sp, #24
 800b3a0:	bd80      	pop	{r7, pc}
 800b3a2:	46c0      	nop			; (mov r8, r8)
 800b3a4:	fffeff8f 	.word	0xfffeff8f
 800b3a8:	40012c00 	.word	0x40012c00
 800b3ac:	40014000 	.word	0x40014000
 800b3b0:	40014400 	.word	0x40014400
 800b3b4:	40014800 	.word	0x40014800
 800b3b8:	fffffeff 	.word	0xfffffeff
 800b3bc:	fffffdff 	.word	0xfffffdff

0800b3c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b086      	sub	sp, #24
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
 800b3c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6a1b      	ldr	r3, [r3, #32]
 800b3ce:	2210      	movs	r2, #16
 800b3d0:	4393      	bics	r3, r2
 800b3d2:	001a      	movs	r2, r3
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6a1b      	ldr	r3, [r3, #32]
 800b3dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	685b      	ldr	r3, [r3, #4]
 800b3e2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	699b      	ldr	r3, [r3, #24]
 800b3e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	4a2e      	ldr	r2, [pc, #184]	; (800b4a8 <TIM_OC2_SetConfig+0xe8>)
 800b3ee:	4013      	ands	r3, r2
 800b3f0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	4a2d      	ldr	r2, [pc, #180]	; (800b4ac <TIM_OC2_SetConfig+0xec>)
 800b3f6:	4013      	ands	r3, r2
 800b3f8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	021b      	lsls	r3, r3, #8
 800b400:	68fa      	ldr	r2, [r7, #12]
 800b402:	4313      	orrs	r3, r2
 800b404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	2220      	movs	r2, #32
 800b40a:	4393      	bics	r3, r2
 800b40c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	689b      	ldr	r3, [r3, #8]
 800b412:	011b      	lsls	r3, r3, #4
 800b414:	697a      	ldr	r2, [r7, #20]
 800b416:	4313      	orrs	r3, r2
 800b418:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	4a24      	ldr	r2, [pc, #144]	; (800b4b0 <TIM_OC2_SetConfig+0xf0>)
 800b41e:	4293      	cmp	r3, r2
 800b420:	d10d      	bne.n	800b43e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	2280      	movs	r2, #128	; 0x80
 800b426:	4393      	bics	r3, r2
 800b428:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	68db      	ldr	r3, [r3, #12]
 800b42e:	011b      	lsls	r3, r3, #4
 800b430:	697a      	ldr	r2, [r7, #20]
 800b432:	4313      	orrs	r3, r2
 800b434:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	2240      	movs	r2, #64	; 0x40
 800b43a:	4393      	bics	r3, r2
 800b43c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	4a1b      	ldr	r2, [pc, #108]	; (800b4b0 <TIM_OC2_SetConfig+0xf0>)
 800b442:	4293      	cmp	r3, r2
 800b444:	d00b      	beq.n	800b45e <TIM_OC2_SetConfig+0x9e>
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	4a1a      	ldr	r2, [pc, #104]	; (800b4b4 <TIM_OC2_SetConfig+0xf4>)
 800b44a:	4293      	cmp	r3, r2
 800b44c:	d007      	beq.n	800b45e <TIM_OC2_SetConfig+0x9e>
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	4a19      	ldr	r2, [pc, #100]	; (800b4b8 <TIM_OC2_SetConfig+0xf8>)
 800b452:	4293      	cmp	r3, r2
 800b454:	d003      	beq.n	800b45e <TIM_OC2_SetConfig+0x9e>
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	4a18      	ldr	r2, [pc, #96]	; (800b4bc <TIM_OC2_SetConfig+0xfc>)
 800b45a:	4293      	cmp	r3, r2
 800b45c:	d113      	bne.n	800b486 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b45e:	693b      	ldr	r3, [r7, #16]
 800b460:	4a17      	ldr	r2, [pc, #92]	; (800b4c0 <TIM_OC2_SetConfig+0x100>)
 800b462:	4013      	ands	r3, r2
 800b464:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b466:	693b      	ldr	r3, [r7, #16]
 800b468:	4a16      	ldr	r2, [pc, #88]	; (800b4c4 <TIM_OC2_SetConfig+0x104>)
 800b46a:	4013      	ands	r3, r2
 800b46c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	695b      	ldr	r3, [r3, #20]
 800b472:	009b      	lsls	r3, r3, #2
 800b474:	693a      	ldr	r2, [r7, #16]
 800b476:	4313      	orrs	r3, r2
 800b478:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	699b      	ldr	r3, [r3, #24]
 800b47e:	009b      	lsls	r3, r3, #2
 800b480:	693a      	ldr	r2, [r7, #16]
 800b482:	4313      	orrs	r3, r2
 800b484:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	693a      	ldr	r2, [r7, #16]
 800b48a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	68fa      	ldr	r2, [r7, #12]
 800b490:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	685a      	ldr	r2, [r3, #4]
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	697a      	ldr	r2, [r7, #20]
 800b49e:	621a      	str	r2, [r3, #32]
}
 800b4a0:	46c0      	nop			; (mov r8, r8)
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	b006      	add	sp, #24
 800b4a6:	bd80      	pop	{r7, pc}
 800b4a8:	feff8fff 	.word	0xfeff8fff
 800b4ac:	fffffcff 	.word	0xfffffcff
 800b4b0:	40012c00 	.word	0x40012c00
 800b4b4:	40014000 	.word	0x40014000
 800b4b8:	40014400 	.word	0x40014400
 800b4bc:	40014800 	.word	0x40014800
 800b4c0:	fffffbff 	.word	0xfffffbff
 800b4c4:	fffff7ff 	.word	0xfffff7ff

0800b4c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b086      	sub	sp, #24
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6a1b      	ldr	r3, [r3, #32]
 800b4d6:	4a35      	ldr	r2, [pc, #212]	; (800b5ac <TIM_OC3_SetConfig+0xe4>)
 800b4d8:	401a      	ands	r2, r3
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6a1b      	ldr	r3, [r3, #32]
 800b4e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	685b      	ldr	r3, [r3, #4]
 800b4e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	69db      	ldr	r3, [r3, #28]
 800b4ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	4a2f      	ldr	r2, [pc, #188]	; (800b5b0 <TIM_OC3_SetConfig+0xe8>)
 800b4f4:	4013      	ands	r3, r2
 800b4f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	2203      	movs	r2, #3
 800b4fc:	4393      	bics	r3, r2
 800b4fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	68fa      	ldr	r2, [r7, #12]
 800b506:	4313      	orrs	r3, r2
 800b508:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	4a29      	ldr	r2, [pc, #164]	; (800b5b4 <TIM_OC3_SetConfig+0xec>)
 800b50e:	4013      	ands	r3, r2
 800b510:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	689b      	ldr	r3, [r3, #8]
 800b516:	021b      	lsls	r3, r3, #8
 800b518:	697a      	ldr	r2, [r7, #20]
 800b51a:	4313      	orrs	r3, r2
 800b51c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	4a25      	ldr	r2, [pc, #148]	; (800b5b8 <TIM_OC3_SetConfig+0xf0>)
 800b522:	4293      	cmp	r3, r2
 800b524:	d10d      	bne.n	800b542 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	4a24      	ldr	r2, [pc, #144]	; (800b5bc <TIM_OC3_SetConfig+0xf4>)
 800b52a:	4013      	ands	r3, r2
 800b52c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	68db      	ldr	r3, [r3, #12]
 800b532:	021b      	lsls	r3, r3, #8
 800b534:	697a      	ldr	r2, [r7, #20]
 800b536:	4313      	orrs	r3, r2
 800b538:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	4a20      	ldr	r2, [pc, #128]	; (800b5c0 <TIM_OC3_SetConfig+0xf8>)
 800b53e:	4013      	ands	r3, r2
 800b540:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	4a1c      	ldr	r2, [pc, #112]	; (800b5b8 <TIM_OC3_SetConfig+0xf0>)
 800b546:	4293      	cmp	r3, r2
 800b548:	d00b      	beq.n	800b562 <TIM_OC3_SetConfig+0x9a>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	4a1d      	ldr	r2, [pc, #116]	; (800b5c4 <TIM_OC3_SetConfig+0xfc>)
 800b54e:	4293      	cmp	r3, r2
 800b550:	d007      	beq.n	800b562 <TIM_OC3_SetConfig+0x9a>
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	4a1c      	ldr	r2, [pc, #112]	; (800b5c8 <TIM_OC3_SetConfig+0x100>)
 800b556:	4293      	cmp	r3, r2
 800b558:	d003      	beq.n	800b562 <TIM_OC3_SetConfig+0x9a>
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	4a1b      	ldr	r2, [pc, #108]	; (800b5cc <TIM_OC3_SetConfig+0x104>)
 800b55e:	4293      	cmp	r3, r2
 800b560:	d113      	bne.n	800b58a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b562:	693b      	ldr	r3, [r7, #16]
 800b564:	4a1a      	ldr	r2, [pc, #104]	; (800b5d0 <TIM_OC3_SetConfig+0x108>)
 800b566:	4013      	ands	r3, r2
 800b568:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b56a:	693b      	ldr	r3, [r7, #16]
 800b56c:	4a19      	ldr	r2, [pc, #100]	; (800b5d4 <TIM_OC3_SetConfig+0x10c>)
 800b56e:	4013      	ands	r3, r2
 800b570:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	695b      	ldr	r3, [r3, #20]
 800b576:	011b      	lsls	r3, r3, #4
 800b578:	693a      	ldr	r2, [r7, #16]
 800b57a:	4313      	orrs	r3, r2
 800b57c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	699b      	ldr	r3, [r3, #24]
 800b582:	011b      	lsls	r3, r3, #4
 800b584:	693a      	ldr	r2, [r7, #16]
 800b586:	4313      	orrs	r3, r2
 800b588:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	693a      	ldr	r2, [r7, #16]
 800b58e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	68fa      	ldr	r2, [r7, #12]
 800b594:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	685a      	ldr	r2, [r3, #4]
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	697a      	ldr	r2, [r7, #20]
 800b5a2:	621a      	str	r2, [r3, #32]
}
 800b5a4:	46c0      	nop			; (mov r8, r8)
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	b006      	add	sp, #24
 800b5aa:	bd80      	pop	{r7, pc}
 800b5ac:	fffffeff 	.word	0xfffffeff
 800b5b0:	fffeff8f 	.word	0xfffeff8f
 800b5b4:	fffffdff 	.word	0xfffffdff
 800b5b8:	40012c00 	.word	0x40012c00
 800b5bc:	fffff7ff 	.word	0xfffff7ff
 800b5c0:	fffffbff 	.word	0xfffffbff
 800b5c4:	40014000 	.word	0x40014000
 800b5c8:	40014400 	.word	0x40014400
 800b5cc:	40014800 	.word	0x40014800
 800b5d0:	ffffefff 	.word	0xffffefff
 800b5d4:	ffffdfff 	.word	0xffffdfff

0800b5d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b086      	sub	sp, #24
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6a1b      	ldr	r3, [r3, #32]
 800b5e6:	4a28      	ldr	r2, [pc, #160]	; (800b688 <TIM_OC4_SetConfig+0xb0>)
 800b5e8:	401a      	ands	r2, r3
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6a1b      	ldr	r3, [r3, #32]
 800b5f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	685b      	ldr	r3, [r3, #4]
 800b5f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	69db      	ldr	r3, [r3, #28]
 800b5fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	4a22      	ldr	r2, [pc, #136]	; (800b68c <TIM_OC4_SetConfig+0xb4>)
 800b604:	4013      	ands	r3, r2
 800b606:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	4a21      	ldr	r2, [pc, #132]	; (800b690 <TIM_OC4_SetConfig+0xb8>)
 800b60c:	4013      	ands	r3, r2
 800b60e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	021b      	lsls	r3, r3, #8
 800b616:	68fa      	ldr	r2, [r7, #12]
 800b618:	4313      	orrs	r3, r2
 800b61a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	4a1d      	ldr	r2, [pc, #116]	; (800b694 <TIM_OC4_SetConfig+0xbc>)
 800b620:	4013      	ands	r3, r2
 800b622:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	689b      	ldr	r3, [r3, #8]
 800b628:	031b      	lsls	r3, r3, #12
 800b62a:	693a      	ldr	r2, [r7, #16]
 800b62c:	4313      	orrs	r3, r2
 800b62e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	4a19      	ldr	r2, [pc, #100]	; (800b698 <TIM_OC4_SetConfig+0xc0>)
 800b634:	4293      	cmp	r3, r2
 800b636:	d00b      	beq.n	800b650 <TIM_OC4_SetConfig+0x78>
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	4a18      	ldr	r2, [pc, #96]	; (800b69c <TIM_OC4_SetConfig+0xc4>)
 800b63c:	4293      	cmp	r3, r2
 800b63e:	d007      	beq.n	800b650 <TIM_OC4_SetConfig+0x78>
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	4a17      	ldr	r2, [pc, #92]	; (800b6a0 <TIM_OC4_SetConfig+0xc8>)
 800b644:	4293      	cmp	r3, r2
 800b646:	d003      	beq.n	800b650 <TIM_OC4_SetConfig+0x78>
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	4a16      	ldr	r2, [pc, #88]	; (800b6a4 <TIM_OC4_SetConfig+0xcc>)
 800b64c:	4293      	cmp	r3, r2
 800b64e:	d109      	bne.n	800b664 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b650:	697b      	ldr	r3, [r7, #20]
 800b652:	4a15      	ldr	r2, [pc, #84]	; (800b6a8 <TIM_OC4_SetConfig+0xd0>)
 800b654:	4013      	ands	r3, r2
 800b656:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	695b      	ldr	r3, [r3, #20]
 800b65c:	019b      	lsls	r3, r3, #6
 800b65e:	697a      	ldr	r2, [r7, #20]
 800b660:	4313      	orrs	r3, r2
 800b662:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	697a      	ldr	r2, [r7, #20]
 800b668:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	68fa      	ldr	r2, [r7, #12]
 800b66e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	685a      	ldr	r2, [r3, #4]
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	693a      	ldr	r2, [r7, #16]
 800b67c:	621a      	str	r2, [r3, #32]
}
 800b67e:	46c0      	nop			; (mov r8, r8)
 800b680:	46bd      	mov	sp, r7
 800b682:	b006      	add	sp, #24
 800b684:	bd80      	pop	{r7, pc}
 800b686:	46c0      	nop			; (mov r8, r8)
 800b688:	ffffefff 	.word	0xffffefff
 800b68c:	feff8fff 	.word	0xfeff8fff
 800b690:	fffffcff 	.word	0xfffffcff
 800b694:	ffffdfff 	.word	0xffffdfff
 800b698:	40012c00 	.word	0x40012c00
 800b69c:	40014000 	.word	0x40014000
 800b6a0:	40014400 	.word	0x40014400
 800b6a4:	40014800 	.word	0x40014800
 800b6a8:	ffffbfff 	.word	0xffffbfff

0800b6ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b086      	sub	sp, #24
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
 800b6b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	6a1b      	ldr	r3, [r3, #32]
 800b6ba:	4a25      	ldr	r2, [pc, #148]	; (800b750 <TIM_OC5_SetConfig+0xa4>)
 800b6bc:	401a      	ands	r2, r3
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6a1b      	ldr	r3, [r3, #32]
 800b6c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	685b      	ldr	r3, [r3, #4]
 800b6cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	4a1f      	ldr	r2, [pc, #124]	; (800b754 <TIM_OC5_SetConfig+0xa8>)
 800b6d8:	4013      	ands	r3, r2
 800b6da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	68fa      	ldr	r2, [r7, #12]
 800b6e2:	4313      	orrs	r3, r2
 800b6e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	4a1b      	ldr	r2, [pc, #108]	; (800b758 <TIM_OC5_SetConfig+0xac>)
 800b6ea:	4013      	ands	r3, r2
 800b6ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	689b      	ldr	r3, [r3, #8]
 800b6f2:	041b      	lsls	r3, r3, #16
 800b6f4:	693a      	ldr	r2, [r7, #16]
 800b6f6:	4313      	orrs	r3, r2
 800b6f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	4a17      	ldr	r2, [pc, #92]	; (800b75c <TIM_OC5_SetConfig+0xb0>)
 800b6fe:	4293      	cmp	r3, r2
 800b700:	d00b      	beq.n	800b71a <TIM_OC5_SetConfig+0x6e>
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	4a16      	ldr	r2, [pc, #88]	; (800b760 <TIM_OC5_SetConfig+0xb4>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d007      	beq.n	800b71a <TIM_OC5_SetConfig+0x6e>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	4a15      	ldr	r2, [pc, #84]	; (800b764 <TIM_OC5_SetConfig+0xb8>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d003      	beq.n	800b71a <TIM_OC5_SetConfig+0x6e>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	4a14      	ldr	r2, [pc, #80]	; (800b768 <TIM_OC5_SetConfig+0xbc>)
 800b716:	4293      	cmp	r3, r2
 800b718:	d109      	bne.n	800b72e <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	4a0c      	ldr	r2, [pc, #48]	; (800b750 <TIM_OC5_SetConfig+0xa4>)
 800b71e:	4013      	ands	r3, r2
 800b720:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	695b      	ldr	r3, [r3, #20]
 800b726:	021b      	lsls	r3, r3, #8
 800b728:	697a      	ldr	r2, [r7, #20]
 800b72a:	4313      	orrs	r3, r2
 800b72c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	697a      	ldr	r2, [r7, #20]
 800b732:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	68fa      	ldr	r2, [r7, #12]
 800b738:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	685a      	ldr	r2, [r3, #4]
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	693a      	ldr	r2, [r7, #16]
 800b746:	621a      	str	r2, [r3, #32]
}
 800b748:	46c0      	nop			; (mov r8, r8)
 800b74a:	46bd      	mov	sp, r7
 800b74c:	b006      	add	sp, #24
 800b74e:	bd80      	pop	{r7, pc}
 800b750:	fffeffff 	.word	0xfffeffff
 800b754:	fffeff8f 	.word	0xfffeff8f
 800b758:	fffdffff 	.word	0xfffdffff
 800b75c:	40012c00 	.word	0x40012c00
 800b760:	40014000 	.word	0x40014000
 800b764:	40014400 	.word	0x40014400
 800b768:	40014800 	.word	0x40014800

0800b76c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b086      	sub	sp, #24
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
 800b774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	6a1b      	ldr	r3, [r3, #32]
 800b77a:	4a26      	ldr	r2, [pc, #152]	; (800b814 <TIM_OC6_SetConfig+0xa8>)
 800b77c:	401a      	ands	r2, r3
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6a1b      	ldr	r3, [r3, #32]
 800b786:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	685b      	ldr	r3, [r3, #4]
 800b78c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	4a20      	ldr	r2, [pc, #128]	; (800b818 <TIM_OC6_SetConfig+0xac>)
 800b798:	4013      	ands	r3, r2
 800b79a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	021b      	lsls	r3, r3, #8
 800b7a2:	68fa      	ldr	r2, [r7, #12]
 800b7a4:	4313      	orrs	r3, r2
 800b7a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b7a8:	693b      	ldr	r3, [r7, #16]
 800b7aa:	4a1c      	ldr	r2, [pc, #112]	; (800b81c <TIM_OC6_SetConfig+0xb0>)
 800b7ac:	4013      	ands	r3, r2
 800b7ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	689b      	ldr	r3, [r3, #8]
 800b7b4:	051b      	lsls	r3, r3, #20
 800b7b6:	693a      	ldr	r2, [r7, #16]
 800b7b8:	4313      	orrs	r3, r2
 800b7ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	4a18      	ldr	r2, [pc, #96]	; (800b820 <TIM_OC6_SetConfig+0xb4>)
 800b7c0:	4293      	cmp	r3, r2
 800b7c2:	d00b      	beq.n	800b7dc <TIM_OC6_SetConfig+0x70>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	4a17      	ldr	r2, [pc, #92]	; (800b824 <TIM_OC6_SetConfig+0xb8>)
 800b7c8:	4293      	cmp	r3, r2
 800b7ca:	d007      	beq.n	800b7dc <TIM_OC6_SetConfig+0x70>
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	4a16      	ldr	r2, [pc, #88]	; (800b828 <TIM_OC6_SetConfig+0xbc>)
 800b7d0:	4293      	cmp	r3, r2
 800b7d2:	d003      	beq.n	800b7dc <TIM_OC6_SetConfig+0x70>
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	4a15      	ldr	r2, [pc, #84]	; (800b82c <TIM_OC6_SetConfig+0xc0>)
 800b7d8:	4293      	cmp	r3, r2
 800b7da:	d109      	bne.n	800b7f0 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b7dc:	697b      	ldr	r3, [r7, #20]
 800b7de:	4a14      	ldr	r2, [pc, #80]	; (800b830 <TIM_OC6_SetConfig+0xc4>)
 800b7e0:	4013      	ands	r3, r2
 800b7e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	695b      	ldr	r3, [r3, #20]
 800b7e8:	029b      	lsls	r3, r3, #10
 800b7ea:	697a      	ldr	r2, [r7, #20]
 800b7ec:	4313      	orrs	r3, r2
 800b7ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	697a      	ldr	r2, [r7, #20]
 800b7f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	68fa      	ldr	r2, [r7, #12]
 800b7fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	685a      	ldr	r2, [r3, #4]
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	693a      	ldr	r2, [r7, #16]
 800b808:	621a      	str	r2, [r3, #32]
}
 800b80a:	46c0      	nop			; (mov r8, r8)
 800b80c:	46bd      	mov	sp, r7
 800b80e:	b006      	add	sp, #24
 800b810:	bd80      	pop	{r7, pc}
 800b812:	46c0      	nop			; (mov r8, r8)
 800b814:	ffefffff 	.word	0xffefffff
 800b818:	feff8fff 	.word	0xfeff8fff
 800b81c:	ffdfffff 	.word	0xffdfffff
 800b820:	40012c00 	.word	0x40012c00
 800b824:	40014000 	.word	0x40014000
 800b828:	40014400 	.word	0x40014400
 800b82c:	40014800 	.word	0x40014800
 800b830:	fffbffff 	.word	0xfffbffff

0800b834 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b086      	sub	sp, #24
 800b838:	af00      	add	r7, sp, #0
 800b83a:	60f8      	str	r0, [r7, #12]
 800b83c:	60b9      	str	r1, [r7, #8]
 800b83e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	6a1b      	ldr	r3, [r3, #32]
 800b844:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	6a1b      	ldr	r3, [r3, #32]
 800b84a:	2201      	movs	r2, #1
 800b84c:	4393      	bics	r3, r2
 800b84e:	001a      	movs	r2, r3
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	699b      	ldr	r3, [r3, #24]
 800b858:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b85a:	693b      	ldr	r3, [r7, #16]
 800b85c:	22f0      	movs	r2, #240	; 0xf0
 800b85e:	4393      	bics	r3, r2
 800b860:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	011b      	lsls	r3, r3, #4
 800b866:	693a      	ldr	r2, [r7, #16]
 800b868:	4313      	orrs	r3, r2
 800b86a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b86c:	697b      	ldr	r3, [r7, #20]
 800b86e:	220a      	movs	r2, #10
 800b870:	4393      	bics	r3, r2
 800b872:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b874:	697a      	ldr	r2, [r7, #20]
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	4313      	orrs	r3, r2
 800b87a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	693a      	ldr	r2, [r7, #16]
 800b880:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	697a      	ldr	r2, [r7, #20]
 800b886:	621a      	str	r2, [r3, #32]
}
 800b888:	46c0      	nop			; (mov r8, r8)
 800b88a:	46bd      	mov	sp, r7
 800b88c:	b006      	add	sp, #24
 800b88e:	bd80      	pop	{r7, pc}

0800b890 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b086      	sub	sp, #24
 800b894:	af00      	add	r7, sp, #0
 800b896:	60f8      	str	r0, [r7, #12]
 800b898:	60b9      	str	r1, [r7, #8]
 800b89a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	6a1b      	ldr	r3, [r3, #32]
 800b8a0:	2210      	movs	r2, #16
 800b8a2:	4393      	bics	r3, r2
 800b8a4:	001a      	movs	r2, r3
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	699b      	ldr	r3, [r3, #24]
 800b8ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	6a1b      	ldr	r3, [r3, #32]
 800b8b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	4a0d      	ldr	r2, [pc, #52]	; (800b8f0 <TIM_TI2_ConfigInputStage+0x60>)
 800b8ba:	4013      	ands	r3, r2
 800b8bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	031b      	lsls	r3, r3, #12
 800b8c2:	697a      	ldr	r2, [r7, #20]
 800b8c4:	4313      	orrs	r3, r2
 800b8c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b8c8:	693b      	ldr	r3, [r7, #16]
 800b8ca:	22a0      	movs	r2, #160	; 0xa0
 800b8cc:	4393      	bics	r3, r2
 800b8ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	011b      	lsls	r3, r3, #4
 800b8d4:	693a      	ldr	r2, [r7, #16]
 800b8d6:	4313      	orrs	r3, r2
 800b8d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	697a      	ldr	r2, [r7, #20]
 800b8de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	693a      	ldr	r2, [r7, #16]
 800b8e4:	621a      	str	r2, [r3, #32]
}
 800b8e6:	46c0      	nop			; (mov r8, r8)
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	b006      	add	sp, #24
 800b8ec:	bd80      	pop	{r7, pc}
 800b8ee:	46c0      	nop			; (mov r8, r8)
 800b8f0:	ffff0fff 	.word	0xffff0fff

0800b8f4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b084      	sub	sp, #16
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
 800b8fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	689b      	ldr	r3, [r3, #8]
 800b902:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	4a08      	ldr	r2, [pc, #32]	; (800b928 <TIM_ITRx_SetConfig+0x34>)
 800b908:	4013      	ands	r3, r2
 800b90a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b90c:	683a      	ldr	r2, [r7, #0]
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	4313      	orrs	r3, r2
 800b912:	2207      	movs	r2, #7
 800b914:	4313      	orrs	r3, r2
 800b916:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	68fa      	ldr	r2, [r7, #12]
 800b91c:	609a      	str	r2, [r3, #8]
}
 800b91e:	46c0      	nop			; (mov r8, r8)
 800b920:	46bd      	mov	sp, r7
 800b922:	b004      	add	sp, #16
 800b924:	bd80      	pop	{r7, pc}
 800b926:	46c0      	nop			; (mov r8, r8)
 800b928:	ffcfff8f 	.word	0xffcfff8f

0800b92c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b086      	sub	sp, #24
 800b930:	af00      	add	r7, sp, #0
 800b932:	60f8      	str	r0, [r7, #12]
 800b934:	60b9      	str	r1, [r7, #8]
 800b936:	607a      	str	r2, [r7, #4]
 800b938:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	689b      	ldr	r3, [r3, #8]
 800b93e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b940:	697b      	ldr	r3, [r7, #20]
 800b942:	4a09      	ldr	r2, [pc, #36]	; (800b968 <TIM_ETR_SetConfig+0x3c>)
 800b944:	4013      	ands	r3, r2
 800b946:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	021a      	lsls	r2, r3, #8
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	431a      	orrs	r2, r3
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	4313      	orrs	r3, r2
 800b954:	697a      	ldr	r2, [r7, #20]
 800b956:	4313      	orrs	r3, r2
 800b958:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	697a      	ldr	r2, [r7, #20]
 800b95e:	609a      	str	r2, [r3, #8]
}
 800b960:	46c0      	nop			; (mov r8, r8)
 800b962:	46bd      	mov	sp, r7
 800b964:	b006      	add	sp, #24
 800b966:	bd80      	pop	{r7, pc}
 800b968:	ffff00ff 	.word	0xffff00ff

0800b96c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b086      	sub	sp, #24
 800b970:	af00      	add	r7, sp, #0
 800b972:	60f8      	str	r0, [r7, #12]
 800b974:	60b9      	str	r1, [r7, #8]
 800b976:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	221f      	movs	r2, #31
 800b97c:	4013      	ands	r3, r2
 800b97e:	2201      	movs	r2, #1
 800b980:	409a      	lsls	r2, r3
 800b982:	0013      	movs	r3, r2
 800b984:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	6a1b      	ldr	r3, [r3, #32]
 800b98a:	697a      	ldr	r2, [r7, #20]
 800b98c:	43d2      	mvns	r2, r2
 800b98e:	401a      	ands	r2, r3
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	6a1a      	ldr	r2, [r3, #32]
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	211f      	movs	r1, #31
 800b99c:	400b      	ands	r3, r1
 800b99e:	6879      	ldr	r1, [r7, #4]
 800b9a0:	4099      	lsls	r1, r3
 800b9a2:	000b      	movs	r3, r1
 800b9a4:	431a      	orrs	r2, r3
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	621a      	str	r2, [r3, #32]
}
 800b9aa:	46c0      	nop			; (mov r8, r8)
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	b006      	add	sp, #24
 800b9b0:	bd80      	pop	{r7, pc}
	...

0800b9b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b084      	sub	sp, #16
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
 800b9bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	223c      	movs	r2, #60	; 0x3c
 800b9c2:	5c9b      	ldrb	r3, [r3, r2]
 800b9c4:	2b01      	cmp	r3, #1
 800b9c6:	d101      	bne.n	800b9cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b9c8:	2302      	movs	r3, #2
 800b9ca:	e055      	b.n	800ba78 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	223c      	movs	r2, #60	; 0x3c
 800b9d0:	2101      	movs	r1, #1
 800b9d2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	223d      	movs	r2, #61	; 0x3d
 800b9d8:	2102      	movs	r1, #2
 800b9da:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	685b      	ldr	r3, [r3, #4]
 800b9e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	689b      	ldr	r3, [r3, #8]
 800b9ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	4a23      	ldr	r2, [pc, #140]	; (800ba80 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b9f2:	4293      	cmp	r3, r2
 800b9f4:	d108      	bne.n	800ba08 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	4a22      	ldr	r2, [pc, #136]	; (800ba84 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b9fa:	4013      	ands	r3, r2
 800b9fc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	685b      	ldr	r3, [r3, #4]
 800ba02:	68fa      	ldr	r2, [r7, #12]
 800ba04:	4313      	orrs	r3, r2
 800ba06:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	2270      	movs	r2, #112	; 0x70
 800ba0c:	4393      	bics	r3, r2
 800ba0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	68fa      	ldr	r2, [r7, #12]
 800ba16:	4313      	orrs	r3, r2
 800ba18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	68fa      	ldr	r2, [r7, #12]
 800ba20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	4a16      	ldr	r2, [pc, #88]	; (800ba80 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800ba28:	4293      	cmp	r3, r2
 800ba2a:	d00f      	beq.n	800ba4c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681a      	ldr	r2, [r3, #0]
 800ba30:	2380      	movs	r3, #128	; 0x80
 800ba32:	05db      	lsls	r3, r3, #23
 800ba34:	429a      	cmp	r2, r3
 800ba36:	d009      	beq.n	800ba4c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	4a12      	ldr	r2, [pc, #72]	; (800ba88 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	d004      	beq.n	800ba4c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	4a11      	ldr	r2, [pc, #68]	; (800ba8c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800ba48:	4293      	cmp	r3, r2
 800ba4a:	d10c      	bne.n	800ba66 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	2280      	movs	r2, #128	; 0x80
 800ba50:	4393      	bics	r3, r2
 800ba52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	689b      	ldr	r3, [r3, #8]
 800ba58:	68ba      	ldr	r2, [r7, #8]
 800ba5a:	4313      	orrs	r3, r2
 800ba5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	68ba      	ldr	r2, [r7, #8]
 800ba64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	223d      	movs	r2, #61	; 0x3d
 800ba6a:	2101      	movs	r1, #1
 800ba6c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	223c      	movs	r2, #60	; 0x3c
 800ba72:	2100      	movs	r1, #0
 800ba74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ba76:	2300      	movs	r3, #0
}
 800ba78:	0018      	movs	r0, r3
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	b004      	add	sp, #16
 800ba7e:	bd80      	pop	{r7, pc}
 800ba80:	40012c00 	.word	0x40012c00
 800ba84:	ff0fffff 	.word	0xff0fffff
 800ba88:	40000400 	.word	0x40000400
 800ba8c:	40014000 	.word	0x40014000

0800ba90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b084      	sub	sp, #16
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	223c      	movs	r2, #60	; 0x3c
 800baa2:	5c9b      	ldrb	r3, [r3, r2]
 800baa4:	2b01      	cmp	r3, #1
 800baa6:	d101      	bne.n	800baac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800baa8:	2302      	movs	r3, #2
 800baaa:	e079      	b.n	800bba0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	223c      	movs	r2, #60	; 0x3c
 800bab0:	2101      	movs	r1, #1
 800bab2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	22ff      	movs	r2, #255	; 0xff
 800bab8:	4393      	bics	r3, r2
 800baba:	001a      	movs	r2, r3
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	68db      	ldr	r3, [r3, #12]
 800bac0:	4313      	orrs	r3, r2
 800bac2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	4a38      	ldr	r2, [pc, #224]	; (800bba8 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800bac8:	401a      	ands	r2, r3
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	689b      	ldr	r3, [r3, #8]
 800bace:	4313      	orrs	r3, r2
 800bad0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	4a35      	ldr	r2, [pc, #212]	; (800bbac <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800bad6:	401a      	ands	r2, r3
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	4313      	orrs	r3, r2
 800bade:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	4a33      	ldr	r2, [pc, #204]	; (800bbb0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800bae4:	401a      	ands	r2, r3
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	4313      	orrs	r3, r2
 800baec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	4a30      	ldr	r2, [pc, #192]	; (800bbb4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800baf2:	401a      	ands	r2, r3
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	691b      	ldr	r3, [r3, #16]
 800baf8:	4313      	orrs	r3, r2
 800bafa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	4a2e      	ldr	r2, [pc, #184]	; (800bbb8 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800bb00:	401a      	ands	r2, r3
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	695b      	ldr	r3, [r3, #20]
 800bb06:	4313      	orrs	r3, r2
 800bb08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	4a2b      	ldr	r2, [pc, #172]	; (800bbbc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800bb0e:	401a      	ands	r2, r3
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb14:	4313      	orrs	r3, r2
 800bb16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	4a29      	ldr	r2, [pc, #164]	; (800bbc0 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800bb1c:	401a      	ands	r2, r3
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	699b      	ldr	r3, [r3, #24]
 800bb22:	041b      	lsls	r3, r3, #16
 800bb24:	4313      	orrs	r3, r2
 800bb26:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	4a25      	ldr	r2, [pc, #148]	; (800bbc4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	d106      	bne.n	800bb40 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	4a24      	ldr	r2, [pc, #144]	; (800bbc8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800bb36:	401a      	ands	r2, r3
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	69db      	ldr	r3, [r3, #28]
 800bb3c:	4313      	orrs	r3, r2
 800bb3e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	4a1f      	ldr	r2, [pc, #124]	; (800bbc4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800bb46:	4293      	cmp	r3, r2
 800bb48:	d121      	bne.n	800bb8e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	4a1f      	ldr	r2, [pc, #124]	; (800bbcc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800bb4e:	401a      	ands	r2, r3
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb54:	051b      	lsls	r3, r3, #20
 800bb56:	4313      	orrs	r3, r2
 800bb58:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	4a1c      	ldr	r2, [pc, #112]	; (800bbd0 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800bb5e:	401a      	ands	r2, r3
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	6a1b      	ldr	r3, [r3, #32]
 800bb64:	4313      	orrs	r3, r2
 800bb66:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	4a1a      	ldr	r2, [pc, #104]	; (800bbd4 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 800bb6c:	401a      	ands	r2, r3
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb72:	4313      	orrs	r3, r2
 800bb74:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	4a12      	ldr	r2, [pc, #72]	; (800bbc4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800bb7c:	4293      	cmp	r3, r2
 800bb7e:	d106      	bne.n	800bb8e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	4a15      	ldr	r2, [pc, #84]	; (800bbd8 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 800bb84:	401a      	ands	r2, r3
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb8a:	4313      	orrs	r3, r2
 800bb8c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	68fa      	ldr	r2, [r7, #12]
 800bb94:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	223c      	movs	r2, #60	; 0x3c
 800bb9a:	2100      	movs	r1, #0
 800bb9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bb9e:	2300      	movs	r3, #0
}
 800bba0:	0018      	movs	r0, r3
 800bba2:	46bd      	mov	sp, r7
 800bba4:	b004      	add	sp, #16
 800bba6:	bd80      	pop	{r7, pc}
 800bba8:	fffffcff 	.word	0xfffffcff
 800bbac:	fffffbff 	.word	0xfffffbff
 800bbb0:	fffff7ff 	.word	0xfffff7ff
 800bbb4:	ffffefff 	.word	0xffffefff
 800bbb8:	ffffdfff 	.word	0xffffdfff
 800bbbc:	ffffbfff 	.word	0xffffbfff
 800bbc0:	fff0ffff 	.word	0xfff0ffff
 800bbc4:	40012c00 	.word	0x40012c00
 800bbc8:	efffffff 	.word	0xefffffff
 800bbcc:	ff0fffff 	.word	0xff0fffff
 800bbd0:	feffffff 	.word	0xfeffffff
 800bbd4:	fdffffff 	.word	0xfdffffff
 800bbd8:	dfffffff 	.word	0xdfffffff

0800bbdc <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b08a      	sub	sp, #40	; 0x28
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	60f8      	str	r0, [r7, #12]
 800bbe4:	60b9      	str	r1, [r7, #8]
 800bbe6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	223c      	movs	r2, #60	; 0x3c
 800bbec:	5c9b      	ldrb	r3, [r3, r2]
 800bbee:	2b01      	cmp	r3, #1
 800bbf0:	d101      	bne.n	800bbf6 <HAL_TIMEx_ConfigBreakInput+0x1a>
 800bbf2:	2302      	movs	r3, #2
 800bbf4:	e08e      	b.n	800bd14 <HAL_TIMEx_ConfigBreakInput+0x138>
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	223c      	movs	r2, #60	; 0x3c
 800bbfa:	2101      	movs	r1, #1
 800bbfc:	5499      	strb	r1, [r3, r2]

  switch (sBreakInputConfig->Source)
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	2b04      	cmp	r3, #4
 800bc04:	d019      	beq.n	800bc3a <HAL_TIMEx_ConfigBreakInput+0x5e>
 800bc06:	d822      	bhi.n	800bc4e <HAL_TIMEx_ConfigBreakInput+0x72>
 800bc08:	2b01      	cmp	r3, #1
 800bc0a:	d002      	beq.n	800bc12 <HAL_TIMEx_ConfigBreakInput+0x36>
 800bc0c:	2b02      	cmp	r3, #2
 800bc0e:	d00a      	beq.n	800bc26 <HAL_TIMEx_ConfigBreakInput+0x4a>
 800bc10:	e01d      	b.n	800bc4e <HAL_TIMEx_ConfigBreakInput+0x72>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 800bc12:	2301      	movs	r3, #1
 800bc14:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 800bc16:	2300      	movs	r3, #0
 800bc18:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 800bc1a:	2380      	movs	r3, #128	; 0x80
 800bc1c:	009b      	lsls	r3, r3, #2
 800bc1e:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 800bc20:	2309      	movs	r3, #9
 800bc22:	61bb      	str	r3, [r7, #24]
      break;
 800bc24:	e01c      	b.n	800bc60 <HAL_TIMEx_ConfigBreakInput+0x84>
    }
#if defined(COMP1) && defined(COMP2)
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 800bc26:	2302      	movs	r3, #2
 800bc28:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 800bc2e:	2380      	movs	r3, #128	; 0x80
 800bc30:	00db      	lsls	r3, r3, #3
 800bc32:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 800bc34:	230a      	movs	r3, #10
 800bc36:	61bb      	str	r3, [r7, #24]
      break;
 800bc38:	e012      	b.n	800bc60 <HAL_TIMEx_ConfigBreakInput+0x84>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 800bc3a:	2304      	movs	r3, #4
 800bc3c:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 800bc3e:	2302      	movs	r3, #2
 800bc40:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 800bc42:	2380      	movs	r3, #128	; 0x80
 800bc44:	011b      	lsls	r3, r3, #4
 800bc46:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 800bc48:	230b      	movs	r3, #11
 800bc4a:	61bb      	str	r3, [r7, #24]
      break;
 800bc4c:	e008      	b.n	800bc60 <HAL_TIMEx_ConfigBreakInput+0x84>
    }
#endif /* COMP3 */

    default:
    {
      bkin_enable_mask = 0U;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_polarity_mask = 0U;
 800bc52:	2300      	movs	r3, #0
 800bc54:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = 0U;
 800bc56:	2300      	movs	r3, #0
 800bc58:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	61bb      	str	r3, [r7, #24]
      break;
 800bc5e:	46c0      	nop			; (mov r8, r8)
    }
  }

  switch (BreakInput)
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	2b01      	cmp	r3, #1
 800bc64:	d003      	beq.n	800bc6e <HAL_TIMEx_ConfigBreakInput+0x92>
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	2b02      	cmp	r3, #2
 800bc6a:	d027      	beq.n	800bcbc <HAL_TIMEx_ConfigBreakInput+0xe0>
      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
      break;
    }
    default:
      break;
 800bc6c:	e04d      	b.n	800bd0a <HAL_TIMEx_ConfigBreakInput+0x12e>
      tmporx = htim->Instance->AF1;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc74:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 800bc76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc78:	43da      	mvns	r2, r3
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	4013      	ands	r3, r2
 800bc7e:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	685a      	ldr	r2, [r3, #4]
 800bc84:	69fb      	ldr	r3, [r7, #28]
 800bc86:	409a      	lsls	r2, r3
 800bc88:	0013      	movs	r3, r2
 800bc8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc8c:	4013      	ands	r3, r2
 800bc8e:	697a      	ldr	r2, [r7, #20]
 800bc90:	4313      	orrs	r3, r2
 800bc92:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 800bc94:	6a3b      	ldr	r3, [r7, #32]
 800bc96:	43da      	mvns	r2, r3
 800bc98:	697b      	ldr	r3, [r7, #20]
 800bc9a:	4013      	ands	r3, r2
 800bc9c:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	689a      	ldr	r2, [r3, #8]
 800bca2:	69bb      	ldr	r3, [r7, #24]
 800bca4:	409a      	lsls	r2, r3
 800bca6:	0013      	movs	r3, r2
 800bca8:	6a3a      	ldr	r2, [r7, #32]
 800bcaa:	4013      	ands	r3, r2
 800bcac:	697a      	ldr	r2, [r7, #20]
 800bcae:	4313      	orrs	r3, r2
 800bcb0:	617b      	str	r3, [r7, #20]
      htim->Instance->AF1 = tmporx;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	697a      	ldr	r2, [r7, #20]
 800bcb8:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 800bcba:	e026      	b.n	800bd0a <HAL_TIMEx_ConfigBreakInput+0x12e>
      tmporx = htim->Instance->AF2;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bcc2:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 800bcc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc6:	43da      	mvns	r2, r3
 800bcc8:	697b      	ldr	r3, [r7, #20]
 800bcca:	4013      	ands	r3, r2
 800bccc:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	685a      	ldr	r2, [r3, #4]
 800bcd2:	69fb      	ldr	r3, [r7, #28]
 800bcd4:	409a      	lsls	r2, r3
 800bcd6:	0013      	movs	r3, r2
 800bcd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcda:	4013      	ands	r3, r2
 800bcdc:	697a      	ldr	r2, [r7, #20]
 800bcde:	4313      	orrs	r3, r2
 800bce0:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 800bce2:	6a3b      	ldr	r3, [r7, #32]
 800bce4:	43da      	mvns	r2, r3
 800bce6:	697b      	ldr	r3, [r7, #20]
 800bce8:	4013      	ands	r3, r2
 800bcea:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	689a      	ldr	r2, [r3, #8]
 800bcf0:	69bb      	ldr	r3, [r7, #24]
 800bcf2:	409a      	lsls	r2, r3
 800bcf4:	0013      	movs	r3, r2
 800bcf6:	6a3a      	ldr	r2, [r7, #32]
 800bcf8:	4013      	ands	r3, r2
 800bcfa:	697a      	ldr	r2, [r7, #20]
 800bcfc:	4313      	orrs	r3, r2
 800bcfe:	617b      	str	r3, [r7, #20]
      htim->Instance->AF2 = tmporx;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	697a      	ldr	r2, [r7, #20]
 800bd06:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800bd08:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	223c      	movs	r2, #60	; 0x3c
 800bd0e:	2100      	movs	r1, #0
 800bd10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bd12:	2300      	movs	r3, #0
}
 800bd14:	0018      	movs	r0, r3
 800bd16:	46bd      	mov	sp, r7
 800bd18:	b00a      	add	sp, #40	; 0x28
 800bd1a:	bd80      	pop	{r7, pc}

0800bd1c <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b082      	sub	sp, #8
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d101      	bne.n	800bd2e <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800bd2a:	2301      	movs	r3, #1
 800bd2c:	e03f      	b.n	800bdae <HAL_USART_Init+0x92>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2259      	movs	r2, #89	; 0x59
 800bd32:	5c9b      	ldrb	r3, [r3, r2]
 800bd34:	b2db      	uxtb	r3, r3
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d107      	bne.n	800bd4a <HAL_USART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2258      	movs	r2, #88	; 0x58
 800bd3e:	2100      	movs	r1, #0
 800bd40:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	0018      	movs	r0, r3
 800bd46:	f7f9 fa2b 	bl	80051a0 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2259      	movs	r2, #89	; 0x59
 800bd4e:	2102      	movs	r1, #2
 800bd50:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	681a      	ldr	r2, [r3, #0]
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	2101      	movs	r1, #1
 800bd5e:	438a      	bics	r2, r1
 800bd60:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	0018      	movs	r0, r3
 800bd66:	f000 fbdb 	bl	800c520 <USART_SetConfig>
 800bd6a:	0003      	movs	r3, r0
 800bd6c:	2b01      	cmp	r3, #1
 800bd6e:	d101      	bne.n	800bd74 <HAL_USART_Init+0x58>
  {
    return HAL_ERROR;
 800bd70:	2301      	movs	r3, #1
 800bd72:	e01c      	b.n	800bdae <HAL_USART_Init+0x92>
  }

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	685a      	ldr	r2, [r3, #4]
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	490e      	ldr	r1, [pc, #56]	; (800bdb8 <HAL_USART_Init+0x9c>)
 800bd80:	400a      	ands	r2, r1
 800bd82:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	689a      	ldr	r2, [r3, #8]
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	212a      	movs	r1, #42	; 0x2a
 800bd90:	438a      	bics	r2, r1
 800bd92:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	681a      	ldr	r2, [r3, #0]
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	2101      	movs	r1, #1
 800bda0:	430a      	orrs	r2, r1
 800bda2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	0018      	movs	r0, r3
 800bda8:	f000 fe56 	bl	800ca58 <USART_CheckIdleState>
 800bdac:	0003      	movs	r3, r0
}
 800bdae:	0018      	movs	r0, r3
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	b002      	add	sp, #8
 800bdb4:	bd80      	pop	{r7, pc}
 800bdb6:	46c0      	nop			; (mov r8, r8)
 800bdb8:	ffffbfff 	.word	0xffffbfff

0800bdbc <HAL_USART_Transmit>:
  * @param  Size Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b08a      	sub	sp, #40	; 0x28
 800bdc0:	af02      	add	r7, sp, #8
 800bdc2:	60f8      	str	r0, [r7, #12]
 800bdc4:	60b9      	str	r1, [r7, #8]
 800bdc6:	603b      	str	r3, [r7, #0]
 800bdc8:	1dbb      	adds	r3, r7, #6
 800bdca:	801a      	strh	r2, [r3, #0]
  uint8_t  *ptxdata8bits;
  uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	2259      	movs	r2, #89	; 0x59
 800bdd0:	5c9b      	ldrb	r3, [r3, r2]
 800bdd2:	b2db      	uxtb	r3, r3
 800bdd4:	2b01      	cmp	r3, #1
 800bdd6:	d000      	beq.n	800bdda <HAL_USART_Transmit+0x1e>
 800bdd8:	e0a9      	b.n	800bf2e <HAL_USART_Transmit+0x172>
  {
    if ((pTxData == NULL) || (Size == 0U))
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d003      	beq.n	800bde8 <HAL_USART_Transmit+0x2c>
 800bde0:	1dbb      	adds	r3, r7, #6
 800bde2:	881b      	ldrh	r3, [r3, #0]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d101      	bne.n	800bdec <HAL_USART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800bde8:	2301      	movs	r3, #1
 800bdea:	e0a1      	b.n	800bf30 <HAL_USART_Transmit+0x174>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	689a      	ldr	r2, [r3, #8]
 800bdf0:	2380      	movs	r3, #128	; 0x80
 800bdf2:	015b      	lsls	r3, r3, #5
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d109      	bne.n	800be0c <HAL_USART_Transmit+0x50>
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	691b      	ldr	r3, [r3, #16]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d105      	bne.n	800be0c <HAL_USART_Transmit+0x50>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	2201      	movs	r2, #1
 800be04:	4013      	ands	r3, r2
 800be06:	d001      	beq.n	800be0c <HAL_USART_Transmit+0x50>
      {
        return  HAL_ERROR;
 800be08:	2301      	movs	r3, #1
 800be0a:	e091      	b.n	800bf30 <HAL_USART_Transmit+0x174>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	2258      	movs	r2, #88	; 0x58
 800be10:	5c9b      	ldrb	r3, [r3, r2]
 800be12:	2b01      	cmp	r3, #1
 800be14:	d101      	bne.n	800be1a <HAL_USART_Transmit+0x5e>
 800be16:	2302      	movs	r3, #2
 800be18:	e08a      	b.n	800bf30 <HAL_USART_Transmit+0x174>
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	2258      	movs	r2, #88	; 0x58
 800be1e:	2101      	movs	r1, #1
 800be20:	5499      	strb	r1, [r3, r2]

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	2200      	movs	r2, #0
 800be26:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	2259      	movs	r2, #89	; 0x59
 800be2c:	2112      	movs	r1, #18
 800be2e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800be30:	f7f9 fc30 	bl	8005694 <HAL_GetTick>
 800be34:	0003      	movs	r3, r0
 800be36:	617b      	str	r3, [r7, #20]

    husart->TxXferSize = Size;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	1dba      	adds	r2, r7, #6
 800be3c:	8812      	ldrh	r2, [r2, #0]
 800be3e:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	1dba      	adds	r2, r7, #6
 800be44:	8812      	ldrh	r2, [r2, #0]
 800be46:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	689a      	ldr	r2, [r3, #8]
 800be4c:	2380      	movs	r3, #128	; 0x80
 800be4e:	015b      	lsls	r3, r3, #5
 800be50:	429a      	cmp	r2, r3
 800be52:	d108      	bne.n	800be66 <HAL_USART_Transmit+0xaa>
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	691b      	ldr	r3, [r3, #16]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d104      	bne.n	800be66 <HAL_USART_Transmit+0xaa>
    {
      ptxdata8bits  = NULL;
 800be5c:	2300      	movs	r3, #0
 800be5e:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (uint16_t *) pTxData;
 800be60:	68bb      	ldr	r3, [r7, #8]
 800be62:	61bb      	str	r3, [r7, #24]
 800be64:	e003      	b.n	800be6e <HAL_USART_Transmit+0xb2>
    }
    else
    {
      ptxdata8bits  = pTxData;
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 800be6a:	2300      	movs	r3, #0
 800be6c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 800be6e:	e02a      	b.n	800bec6 <HAL_USART_Transmit+0x10a>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800be70:	697a      	ldr	r2, [r7, #20]
 800be72:	68f8      	ldr	r0, [r7, #12]
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	9300      	str	r3, [sp, #0]
 800be78:	0013      	movs	r3, r2
 800be7a:	2200      	movs	r2, #0
 800be7c:	2180      	movs	r1, #128	; 0x80
 800be7e:	f000 fb19 	bl	800c4b4 <USART_WaitOnFlagUntilTimeout>
 800be82:	1e03      	subs	r3, r0, #0
 800be84:	d001      	beq.n	800be8a <HAL_USART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 800be86:	2303      	movs	r3, #3
 800be88:	e052      	b.n	800bf30 <HAL_USART_Transmit+0x174>
      }
      if (ptxdata8bits == NULL)
 800be8a:	69fb      	ldr	r3, [r7, #28]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d10b      	bne.n	800bea8 <HAL_USART_Transmit+0xec>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 800be90:	69bb      	ldr	r3, [r7, #24]
 800be92:	881b      	ldrh	r3, [r3, #0]
 800be94:	001a      	movs	r2, r3
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	05d2      	lsls	r2, r2, #23
 800be9c:	0dd2      	lsrs	r2, r2, #23
 800be9e:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 800bea0:	69bb      	ldr	r3, [r7, #24]
 800bea2:	3302      	adds	r3, #2
 800bea4:	61bb      	str	r3, [r7, #24]
 800bea6:	e007      	b.n	800beb8 <HAL_USART_Transmit+0xfc>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 800bea8:	69fb      	ldr	r3, [r7, #28]
 800beaa:	781a      	ldrb	r2, [r3, #0]
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 800beb2:	69fb      	ldr	r3, [r7, #28]
 800beb4:	3301      	adds	r3, #1
 800beb6:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bebc:	b29b      	uxth	r3, r3
 800bebe:	3b01      	subs	r3, #1
 800bec0:	b29a      	uxth	r2, r3
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (husart->TxXferCount > 0U)
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800beca:	b29b      	uxth	r3, r3
 800becc:	2b00      	cmp	r3, #0
 800bece:	d1cf      	bne.n	800be70 <HAL_USART_Transmit+0xb4>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bed0:	697a      	ldr	r2, [r7, #20]
 800bed2:	68f8      	ldr	r0, [r7, #12]
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	9300      	str	r3, [sp, #0]
 800bed8:	0013      	movs	r3, r2
 800beda:	2200      	movs	r2, #0
 800bedc:	2140      	movs	r1, #64	; 0x40
 800bede:	f000 fae9 	bl	800c4b4 <USART_WaitOnFlagUntilTimeout>
 800bee2:	1e03      	subs	r3, r0, #0
 800bee4:	d001      	beq.n	800beea <HAL_USART_Transmit+0x12e>
    {
      return HAL_TIMEOUT;
 800bee6:	2303      	movs	r3, #3
 800bee8:	e022      	b.n	800bf30 <HAL_USART_Transmit+0x174>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	2240      	movs	r2, #64	; 0x40
 800bef0:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	2208      	movs	r2, #8
 800bef8:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	699a      	ldr	r2, [r3, #24]
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	2108      	movs	r1, #8
 800bf06:	430a      	orrs	r2, r1
 800bf08:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	699a      	ldr	r2, [r3, #24]
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	2110      	movs	r1, #16
 800bf16:	430a      	orrs	r2, r1
 800bf18:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	2259      	movs	r2, #89	; 0x59
 800bf1e:	2101      	movs	r1, #1
 800bf20:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	2258      	movs	r2, #88	; 0x58
 800bf26:	2100      	movs	r1, #0
 800bf28:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	e000      	b.n	800bf30 <HAL_USART_Transmit+0x174>
  }
  else
  {
    return HAL_BUSY;
 800bf2e:	2302      	movs	r3, #2
  }
}
 800bf30:	0018      	movs	r0, r3
 800bf32:	46bd      	mov	sp, r7
 800bf34:	b008      	add	sp, #32
 800bf36:	bd80      	pop	{r7, pc}

0800bf38 <HAL_USART_Transmit_DMA>:
  * @param  pTxData pointer to data buffer (u8 or u16 data elements).
  * @param  Size amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit_DMA(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size)
{
 800bf38:	b590      	push	{r4, r7, lr}
 800bf3a:	b087      	sub	sp, #28
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	60f8      	str	r0, [r7, #12]
 800bf40:	60b9      	str	r1, [r7, #8]
 800bf42:	1dbb      	adds	r3, r7, #6
 800bf44:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bf46:	2317      	movs	r3, #23
 800bf48:	18fb      	adds	r3, r7, r3
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	701a      	strb	r2, [r3, #0]
  uint32_t *tmp;

  if (husart->State == HAL_USART_STATE_READY)
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	2259      	movs	r2, #89	; 0x59
 800bf52:	5c9b      	ldrb	r3, [r3, r2]
 800bf54:	b2db      	uxtb	r3, r3
 800bf56:	2b01      	cmp	r3, #1
 800bf58:	d000      	beq.n	800bf5c <HAL_USART_Transmit_DMA+0x24>
 800bf5a:	e07d      	b.n	800c058 <HAL_USART_Transmit_DMA+0x120>
  {
    if ((pTxData == NULL) || (Size == 0U))
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d003      	beq.n	800bf6a <HAL_USART_Transmit_DMA+0x32>
 800bf62:	1dbb      	adds	r3, r7, #6
 800bf64:	881b      	ldrh	r3, [r3, #0]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d101      	bne.n	800bf6e <HAL_USART_Transmit_DMA+0x36>
    {
      return HAL_ERROR;
 800bf6a:	2301      	movs	r3, #1
 800bf6c:	e075      	b.n	800c05a <HAL_USART_Transmit_DMA+0x122>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	689a      	ldr	r2, [r3, #8]
 800bf72:	2380      	movs	r3, #128	; 0x80
 800bf74:	015b      	lsls	r3, r3, #5
 800bf76:	429a      	cmp	r2, r3
 800bf78:	d10a      	bne.n	800bf90 <HAL_USART_Transmit_DMA+0x58>
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	691b      	ldr	r3, [r3, #16]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d106      	bne.n	800bf90 <HAL_USART_Transmit_DMA+0x58>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	001a      	movs	r2, r3
 800bf86:	2301      	movs	r3, #1
 800bf88:	4013      	ands	r3, r2
 800bf8a:	d001      	beq.n	800bf90 <HAL_USART_Transmit_DMA+0x58>
      {
        return  HAL_ERROR;
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	e064      	b.n	800c05a <HAL_USART_Transmit_DMA+0x122>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	2258      	movs	r2, #88	; 0x58
 800bf94:	5c9b      	ldrb	r3, [r3, r2]
 800bf96:	2b01      	cmp	r3, #1
 800bf98:	d101      	bne.n	800bf9e <HAL_USART_Transmit_DMA+0x66>
 800bf9a:	2302      	movs	r3, #2
 800bf9c:	e05d      	b.n	800c05a <HAL_USART_Transmit_DMA+0x122>
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	2258      	movs	r2, #88	; 0x58
 800bfa2:	2101      	movs	r1, #1
 800bfa4:	5499      	strb	r1, [r3, r2]

    husart->pTxBuffPtr = pTxData;
 800bfa6:	68ba      	ldr	r2, [r7, #8]
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	629a      	str	r2, [r3, #40]	; 0x28
    husart->TxXferSize = Size;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	1dba      	adds	r2, r7, #6
 800bfb0:	8812      	ldrh	r2, [r2, #0]
 800bfb2:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	1dba      	adds	r2, r7, #6
 800bfb8:	8812      	ldrh	r2, [r2, #0]
 800bfba:	85da      	strh	r2, [r3, #46]	; 0x2e

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	2259      	movs	r2, #89	; 0x59
 800bfc6:	2112      	movs	r1, #18
 800bfc8:	5499      	strb	r1, [r3, r2]

    if (husart->hdmatx != NULL)
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d01e      	beq.n	800c010 <HAL_USART_Transmit_DMA+0xd8>
    {
      /* Set the USART DMA transfer complete callback */
      husart->hdmatx->XferCpltCallback = USART_DMATransmitCplt;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfd6:	4a23      	ldr	r2, [pc, #140]	; (800c064 <HAL_USART_Transmit_DMA+0x12c>)
 800bfd8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the USART DMA Half transfer complete callback */
      husart->hdmatx->XferHalfCpltCallback = USART_DMATxHalfCplt;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfde:	4a22      	ldr	r2, [pc, #136]	; (800c068 <HAL_USART_Transmit_DMA+0x130>)
 800bfe0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      husart->hdmatx->XferErrorCallback = USART_DMAError;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfe6:	4a21      	ldr	r2, [pc, #132]	; (800c06c <HAL_USART_Transmit_DMA+0x134>)
 800bfe8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the USART transmit DMA channel */
      tmp = (uint32_t *)&pTxData;
 800bfea:	2308      	movs	r3, #8
 800bfec:	18fb      	adds	r3, r7, r3
 800bfee:	613b      	str	r3, [r7, #16]
      status = HAL_DMA_Start_IT(husart->hdmatx, *(uint32_t *)tmp, (uint32_t)&husart->Instance->TDR, Size);
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800bff4:	693b      	ldr	r3, [r7, #16]
 800bff6:	6819      	ldr	r1, [r3, #0]
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	3328      	adds	r3, #40	; 0x28
 800bffe:	001a      	movs	r2, r3
 800c000:	1dbb      	adds	r3, r7, #6
 800c002:	881b      	ldrh	r3, [r3, #0]
 800c004:	2417      	movs	r4, #23
 800c006:	193c      	adds	r4, r7, r4
 800c008:	f7f9 ff50 	bl	8005eac <HAL_DMA_Start_IT>
 800c00c:	0003      	movs	r3, r0
 800c00e:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 800c010:	2317      	movs	r3, #23
 800c012:	18fb      	adds	r3, r7, r3
 800c014:	781b      	ldrb	r3, [r3, #0]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d111      	bne.n	800c03e <HAL_USART_Transmit_DMA+0x106>
    {
      /* Clear the TC flag in the ICR register */
      __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	2240      	movs	r2, #64	; 0x40
 800c020:	621a      	str	r2, [r3, #32]

      /* Process Unlocked */
      __HAL_UNLOCK(husart);
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	2258      	movs	r2, #88	; 0x58
 800c026:	2100      	movs	r1, #0
 800c028:	5499      	strb	r1, [r3, r2]

      /* Enable the DMA transfer for transmit request by setting the DMAT bit
         in the USART CR3 register */
      SET_BIT(husart->Instance->CR3, USART_CR3_DMAT);
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	689a      	ldr	r2, [r3, #8]
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	2180      	movs	r1, #128	; 0x80
 800c036:	430a      	orrs	r2, r1
 800c038:	609a      	str	r2, [r3, #8]

      return HAL_OK;
 800c03a:	2300      	movs	r3, #0
 800c03c:	e00d      	b.n	800c05a <HAL_USART_Transmit_DMA+0x122>
    }
    else
    {
      /* Set error code to DMA */
      husart->ErrorCode = HAL_USART_ERROR_DMA;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	2210      	movs	r2, #16
 800c042:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Process Unlocked */
      __HAL_UNLOCK(husart);
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	2258      	movs	r2, #88	; 0x58
 800c048:	2100      	movs	r1, #0
 800c04a:	5499      	strb	r1, [r3, r2]

      /* Restore husart->State to ready */
      husart->State = HAL_USART_STATE_READY;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	2259      	movs	r2, #89	; 0x59
 800c050:	2101      	movs	r1, #1
 800c052:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800c054:	2301      	movs	r3, #1
 800c056:	e000      	b.n	800c05a <HAL_USART_Transmit_DMA+0x122>
    }
  }
  else
  {
    return HAL_BUSY;
 800c058:	2302      	movs	r3, #2
  }
}
 800c05a:	0018      	movs	r0, r3
 800c05c:	46bd      	mov	sp, r7
 800c05e:	b007      	add	sp, #28
 800c060:	bd90      	pop	{r4, r7, pc}
 800c062:	46c0      	nop			; (mov r8, r8)
 800c064:	0800c3bd 	.word	0x0800c3bd
 800c068:	0800c427 	.word	0x0800c427
 800c06c:	0800c445 	.word	0x0800c445

0800c070 <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b088      	sub	sp, #32
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	69db      	ldr	r3, [r3, #28]
 800c07e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	689b      	ldr	r3, [r3, #8]
 800c08e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_UDR));
 800c090:	69fb      	ldr	r3, [r7, #28]
 800c092:	4aab      	ldr	r2, [pc, #684]	; (800c340 <HAL_USART_IRQHandler+0x2d0>)
 800c094:	4013      	ands	r3, r2
 800c096:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d117      	bne.n	800c0ce <HAL_USART_IRQHandler+0x5e>
  {
    /* USART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c09e:	69fb      	ldr	r3, [r7, #28]
 800c0a0:	2220      	movs	r2, #32
 800c0a2:	4013      	ands	r3, r2
 800c0a4:	d013      	beq.n	800c0ce <HAL_USART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c0a6:	69bb      	ldr	r3, [r7, #24]
 800c0a8:	2220      	movs	r2, #32
 800c0aa:	4013      	ands	r3, r2
 800c0ac:	d104      	bne.n	800c0b8 <HAL_USART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c0ae:	697a      	ldr	r2, [r7, #20]
 800c0b0:	2380      	movs	r3, #128	; 0x80
 800c0b2:	055b      	lsls	r3, r3, #21
 800c0b4:	4013      	ands	r3, r2
 800c0b6:	d00a      	beq.n	800c0ce <HAL_USART_IRQHandler+0x5e>
    {
      if (husart->RxISR != NULL)
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d100      	bne.n	800c0c2 <HAL_USART_IRQHandler+0x52>
 800c0c0:	e135      	b.n	800c32e <HAL_USART_IRQHandler+0x2be>
      {
        husart->RxISR(husart);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c0c6:	687a      	ldr	r2, [r7, #4]
 800c0c8:	0010      	movs	r0, r2
 800c0ca:	4798      	blx	r3
      }
      return;
 800c0cc:	e12f      	b.n	800c32e <HAL_USART_IRQHandler+0x2be>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c0ce:	693b      	ldr	r3, [r7, #16]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d100      	bne.n	800c0d6 <HAL_USART_IRQHandler+0x66>
 800c0d4:	e0eb      	b.n	800c2ae <HAL_USART_IRQHandler+0x23e>
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	4a9a      	ldr	r2, [pc, #616]	; (800c344 <HAL_USART_IRQHandler+0x2d4>)
 800c0da:	4013      	ands	r3, r2
 800c0dc:	d105      	bne.n	800c0ea <HAL_USART_IRQHandler+0x7a>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
 800c0de:	69ba      	ldr	r2, [r7, #24]
 800c0e0:	2390      	movs	r3, #144	; 0x90
 800c0e2:	005b      	lsls	r3, r3, #1
 800c0e4:	4013      	ands	r3, r2
 800c0e6:	d100      	bne.n	800c0ea <HAL_USART_IRQHandler+0x7a>
 800c0e8:	e0e1      	b.n	800c2ae <HAL_USART_IRQHandler+0x23e>
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c0ea:	69fb      	ldr	r3, [r7, #28]
 800c0ec:	2201      	movs	r2, #1
 800c0ee:	4013      	ands	r3, r2
 800c0f0:	d00e      	beq.n	800c110 <HAL_USART_IRQHandler+0xa0>
 800c0f2:	69ba      	ldr	r2, [r7, #24]
 800c0f4:	2380      	movs	r3, #128	; 0x80
 800c0f6:	005b      	lsls	r3, r3, #1
 800c0f8:	4013      	ands	r3, r2
 800c0fa:	d009      	beq.n	800c110 <HAL_USART_IRQHandler+0xa0>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	2201      	movs	r2, #1
 800c102:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c108:	2201      	movs	r2, #1
 800c10a:	431a      	orrs	r2, r3
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c110:	69fb      	ldr	r3, [r7, #28]
 800c112:	2202      	movs	r2, #2
 800c114:	4013      	ands	r3, r2
 800c116:	d00d      	beq.n	800c134 <HAL_USART_IRQHandler+0xc4>
 800c118:	697b      	ldr	r3, [r7, #20]
 800c11a:	2201      	movs	r2, #1
 800c11c:	4013      	ands	r3, r2
 800c11e:	d009      	beq.n	800c134 <HAL_USART_IRQHandler+0xc4>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	2202      	movs	r2, #2
 800c126:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c12c:	2204      	movs	r2, #4
 800c12e:	431a      	orrs	r2, r3
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c134:	69fb      	ldr	r3, [r7, #28]
 800c136:	2204      	movs	r2, #4
 800c138:	4013      	ands	r3, r2
 800c13a:	d00d      	beq.n	800c158 <HAL_USART_IRQHandler+0xe8>
 800c13c:	697b      	ldr	r3, [r7, #20]
 800c13e:	2201      	movs	r2, #1
 800c140:	4013      	ands	r3, r2
 800c142:	d009      	beq.n	800c158 <HAL_USART_IRQHandler+0xe8>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	2204      	movs	r2, #4
 800c14a:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c150:	2202      	movs	r2, #2
 800c152:	431a      	orrs	r2, r3
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c158:	69fb      	ldr	r3, [r7, #28]
 800c15a:	2208      	movs	r2, #8
 800c15c:	4013      	ands	r3, r2
 800c15e:	d011      	beq.n	800c184 <HAL_USART_IRQHandler+0x114>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c160:	69bb      	ldr	r3, [r7, #24]
 800c162:	2220      	movs	r2, #32
 800c164:	4013      	ands	r3, r2
 800c166:	d103      	bne.n	800c170 <HAL_USART_IRQHandler+0x100>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c168:	697b      	ldr	r3, [r7, #20]
 800c16a:	4a76      	ldr	r2, [pc, #472]	; (800c344 <HAL_USART_IRQHandler+0x2d4>)
 800c16c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c16e:	d009      	beq.n	800c184 <HAL_USART_IRQHandler+0x114>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	2208      	movs	r2, #8
 800c176:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c17c:	2208      	movs	r2, #8
 800c17e:	431a      	orrs	r2, r3
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART SPI slave underrun error interrupt occurred -------------------------*/
    if (((isrflags & USART_ISR_UDR) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c184:	69fa      	ldr	r2, [r7, #28]
 800c186:	2380      	movs	r3, #128	; 0x80
 800c188:	019b      	lsls	r3, r3, #6
 800c18a:	4013      	ands	r3, r2
 800c18c:	d01a      	beq.n	800c1c4 <HAL_USART_IRQHandler+0x154>
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	2201      	movs	r2, #1
 800c192:	4013      	ands	r3, r2
 800c194:	d016      	beq.n	800c1c4 <HAL_USART_IRQHandler+0x154>
    {
      /* Ignore SPI slave underrun errors when reception is going on */
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2259      	movs	r2, #89	; 0x59
 800c19a:	5c9b      	ldrb	r3, [r3, r2]
 800c19c:	b2db      	uxtb	r3, r3
 800c19e:	2b22      	cmp	r3, #34	; 0x22
 800c1a0:	d105      	bne.n	800c1ae <HAL_USART_IRQHandler+0x13e>
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	2280      	movs	r2, #128	; 0x80
 800c1a8:	0192      	lsls	r2, r2, #6
 800c1aa:	621a      	str	r2, [r3, #32]
        return;
 800c1ac:	e0c4      	b.n	800c338 <HAL_USART_IRQHandler+0x2c8>
      }
      else
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	2280      	movs	r2, #128	; 0x80
 800c1b4:	0192      	lsls	r2, r2, #6
 800c1b6:	621a      	str	r2, [r3, #32]
        husart->ErrorCode |= HAL_USART_ERROR_UDR;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c1bc:	2220      	movs	r2, #32
 800c1be:	431a      	orrs	r2, r3
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d100      	bne.n	800c1ce <HAL_USART_IRQHandler+0x15e>
 800c1cc:	e0b1      	b.n	800c332 <HAL_USART_IRQHandler+0x2c2>
    {
      /* USART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c1ce:	69fb      	ldr	r3, [r7, #28]
 800c1d0:	2220      	movs	r2, #32
 800c1d2:	4013      	ands	r3, r2
 800c1d4:	d011      	beq.n	800c1fa <HAL_USART_IRQHandler+0x18a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c1d6:	69bb      	ldr	r3, [r7, #24]
 800c1d8:	2220      	movs	r2, #32
 800c1da:	4013      	ands	r3, r2
 800c1dc:	d104      	bne.n	800c1e8 <HAL_USART_IRQHandler+0x178>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c1de:	697a      	ldr	r2, [r7, #20]
 800c1e0:	2380      	movs	r3, #128	; 0x80
 800c1e2:	055b      	lsls	r3, r3, #21
 800c1e4:	4013      	ands	r3, r2
 800c1e6:	d008      	beq.n	800c1fa <HAL_USART_IRQHandler+0x18a>
      {
        if (husart->RxISR != NULL)
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d004      	beq.n	800c1fa <HAL_USART_IRQHandler+0x18a>
        {
          husart->RxISR(husart);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c1f4:	687a      	ldr	r2, [r7, #4]
 800c1f6:	0010      	movs	r0, r2
 800c1f8:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c1fe:	2208      	movs	r2, #8
 800c200:	4013      	ands	r3, r2
 800c202:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	689b      	ldr	r3, [r3, #8]
 800c20a:	2240      	movs	r2, #64	; 0x40
 800c20c:	4013      	ands	r3, r2
 800c20e:	2b40      	cmp	r3, #64	; 0x40
 800c210:	d002      	beq.n	800c218 <HAL_USART_IRQHandler+0x1a8>
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d040      	beq.n	800c29a <HAL_USART_IRQHandler+0x22a>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	0018      	movs	r0, r3
 800c21c:	f000 f8ae 	bl	800c37c <USART_EndTransfer>

        /* Disable the USART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	689b      	ldr	r3, [r3, #8]
 800c226:	2240      	movs	r2, #64	; 0x40
 800c228:	4013      	ands	r3, r2
 800c22a:	2b40      	cmp	r3, #64	; 0x40
 800c22c:	d130      	bne.n	800c290 <HAL_USART_IRQHandler+0x220>
        {
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	689a      	ldr	r2, [r3, #8]
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	2140      	movs	r1, #64	; 0x40
 800c23a:	438a      	bics	r2, r1
 800c23c:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c242:	2b00      	cmp	r3, #0
 800c244:	d008      	beq.n	800c258 <HAL_USART_IRQHandler+0x1e8>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c24a:	2200      	movs	r2, #0
 800c24c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c252:	0018      	movs	r0, r3
 800c254:	f7f9 feb0 	bl	8005fb8 <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d012      	beq.n	800c286 <HAL_USART_IRQHandler+0x216>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c264:	4a38      	ldr	r2, [pc, #224]	; (800c348 <HAL_USART_IRQHandler+0x2d8>)
 800c266:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c26c:	0018      	movs	r0, r3
 800c26e:	f7f9 fea3 	bl	8005fb8 <HAL_DMA_Abort_IT>
 800c272:	1e03      	subs	r3, r0, #0
 800c274:	d019      	beq.n	800c2aa <HAL_USART_IRQHandler+0x23a>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c27a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c280:	0018      	movs	r0, r3
 800c282:	4790      	blx	r2
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800c284:	e011      	b.n	800c2aa <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	0018      	movs	r0, r3
 800c28a:	f000 f86f 	bl	800c36c <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800c28e:	e00c      	b.n	800c2aa <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	0018      	movs	r0, r3
 800c294:	f000 f86a 	bl	800c36c <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800c298:	e007      	b.n	800c2aa <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	0018      	movs	r0, r3
 800c29e:	f000 f865 	bl	800c36c <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }
    return;
 800c2a8:	e043      	b.n	800c332 <HAL_USART_IRQHandler+0x2c2>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800c2aa:	46c0      	nop			; (mov r8, r8)
    return;
 800c2ac:	e041      	b.n	800c332 <HAL_USART_IRQHandler+0x2c2>

  } /* End if some error occurs */


  /* USART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c2ae:	69fb      	ldr	r3, [r7, #28]
 800c2b0:	2280      	movs	r2, #128	; 0x80
 800c2b2:	4013      	ands	r3, r2
 800c2b4:	d012      	beq.n	800c2dc <HAL_USART_IRQHandler+0x26c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c2b6:	69bb      	ldr	r3, [r7, #24]
 800c2b8:	2280      	movs	r2, #128	; 0x80
 800c2ba:	4013      	ands	r3, r2
 800c2bc:	d104      	bne.n	800c2c8 <HAL_USART_IRQHandler+0x258>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c2be:	697a      	ldr	r2, [r7, #20]
 800c2c0:	2380      	movs	r3, #128	; 0x80
 800c2c2:	041b      	lsls	r3, r3, #16
 800c2c4:	4013      	ands	r3, r2
 800c2c6:	d009      	beq.n	800c2dc <HAL_USART_IRQHandler+0x26c>
  {
    if (husart->TxISR != NULL)
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d032      	beq.n	800c336 <HAL_USART_IRQHandler+0x2c6>
    {
      husart->TxISR(husart);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2d4:	687a      	ldr	r2, [r7, #4]
 800c2d6:	0010      	movs	r0, r2
 800c2d8:	4798      	blx	r3
    }
    return;
 800c2da:	e02c      	b.n	800c336 <HAL_USART_IRQHandler+0x2c6>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c2dc:	69fb      	ldr	r3, [r7, #28]
 800c2de:	2240      	movs	r2, #64	; 0x40
 800c2e0:	4013      	ands	r3, r2
 800c2e2:	d008      	beq.n	800c2f6 <HAL_USART_IRQHandler+0x286>
 800c2e4:	69bb      	ldr	r3, [r7, #24]
 800c2e6:	2240      	movs	r2, #64	; 0x40
 800c2e8:	4013      	ands	r3, r2
 800c2ea:	d004      	beq.n	800c2f6 <HAL_USART_IRQHandler+0x286>
  {
    USART_EndTransmit_IT(husart);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	0018      	movs	r0, r3
 800c2f0:	f000 fbf6 	bl	800cae0 <USART_EndTransmit_IT>
    return;
 800c2f4:	e020      	b.n	800c338 <HAL_USART_IRQHandler+0x2c8>
  }

  /* USART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c2f6:	69fa      	ldr	r2, [r7, #28]
 800c2f8:	2380      	movs	r3, #128	; 0x80
 800c2fa:	041b      	lsls	r3, r3, #16
 800c2fc:	4013      	ands	r3, r2
 800c2fe:	d009      	beq.n	800c314 <HAL_USART_IRQHandler+0x2a4>
 800c300:	69ba      	ldr	r2, [r7, #24]
 800c302:	2380      	movs	r3, #128	; 0x80
 800c304:	05db      	lsls	r3, r3, #23
 800c306:	4013      	ands	r3, r2
 800c308:	d004      	beq.n	800c314 <HAL_USART_IRQHandler+0x2a4>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    husart->TxFifoEmptyCallback(husart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_USARTEx_TxFifoEmptyCallback(husart);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	0018      	movs	r0, r3
 800c30e:	f000 fc32 	bl	800cb76 <HAL_USARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 800c312:	e011      	b.n	800c338 <HAL_USART_IRQHandler+0x2c8>
  }

  /* USART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c314:	69fa      	ldr	r2, [r7, #28]
 800c316:	2380      	movs	r3, #128	; 0x80
 800c318:	045b      	lsls	r3, r3, #17
 800c31a:	4013      	ands	r3, r2
 800c31c:	d00c      	beq.n	800c338 <HAL_USART_IRQHandler+0x2c8>
 800c31e:	69bb      	ldr	r3, [r7, #24]
 800c320:	2b00      	cmp	r3, #0
 800c322:	da09      	bge.n	800c338 <HAL_USART_IRQHandler+0x2c8>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    husart->RxFifoFullCallback(husart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_USARTEx_RxFifoFullCallback(husart);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	0018      	movs	r0, r3
 800c328:	f000 fc1d 	bl	800cb66 <HAL_USARTEx_RxFifoFullCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 800c32c:	e004      	b.n	800c338 <HAL_USART_IRQHandler+0x2c8>
      return;
 800c32e:	46c0      	nop			; (mov r8, r8)
 800c330:	e002      	b.n	800c338 <HAL_USART_IRQHandler+0x2c8>
    return;
 800c332:	46c0      	nop			; (mov r8, r8)
 800c334:	e000      	b.n	800c338 <HAL_USART_IRQHandler+0x2c8>
    return;
 800c336:	46c0      	nop			; (mov r8, r8)
  }
}
 800c338:	46bd      	mov	sp, r7
 800c33a:	b008      	add	sp, #32
 800c33c:	bd80      	pop	{r7, pc}
 800c33e:	46c0      	nop			; (mov r8, r8)
 800c340:	0000200f 	.word	0x0000200f
 800c344:	10000001 	.word	0x10000001
 800c348:	0800c48b 	.word	0x0800c48b

0800c34c <HAL_USART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxHalfCpltCallback(USART_HandleTypeDef *husart)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b082      	sub	sp, #8
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c354:	46c0      	nop			; (mov r8, r8)
 800c356:	46bd      	mov	sp, r7
 800c358:	b002      	add	sp, #8
 800c35a:	bd80      	pop	{r7, pc}

0800c35c <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b082      	sub	sp, #8
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 800c364:	46c0      	nop			; (mov r8, r8)
 800c366:	46bd      	mov	sp, r7
 800c368:	b002      	add	sp, #8
 800c36a:	bd80      	pop	{r7, pc}

0800c36c <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b082      	sub	sp, #8
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 800c374:	46c0      	nop			; (mov r8, r8)
 800c376:	46bd      	mov	sp, r7
 800c378:	b002      	add	sp, #8
 800c37a:	bd80      	pop	{r7, pc}

0800c37c <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b082      	sub	sp, #8
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, RXFT, TXFT, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	681a      	ldr	r2, [r3, #0]
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	4909      	ldr	r1, [pc, #36]	; (800c3b4 <USART_EndTransfer+0x38>)
 800c390:	400a      	ands	r2, r1
 800c392:	601a      	str	r2, [r3, #0]
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	689a      	ldr	r2, [r3, #8]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	4906      	ldr	r1, [pc, #24]	; (800c3b8 <USART_EndTransfer+0x3c>)
 800c3a0:	400a      	ands	r2, r1
 800c3a2:	609a      	str	r2, [r3, #8]

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2259      	movs	r2, #89	; 0x59
 800c3a8:	2101      	movs	r1, #1
 800c3aa:	5499      	strb	r1, [r3, r2]
}
 800c3ac:	46c0      	nop			; (mov r8, r8)
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	b002      	add	sp, #8
 800c3b2:	bd80      	pop	{r7, pc}
 800c3b4:	fffffe1f 	.word	0xfffffe1f
 800c3b8:	ef7ffffe 	.word	0xef7ffffe

0800c3bc <USART_DMATransmitCplt>:
  * @brief DMA USART transmit process complete callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b084      	sub	sp, #16
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3c8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	2220      	movs	r2, #32
 800c3d2:	4013      	ands	r3, r2
 800c3d4:	d119      	bne.n	800c40a <USART_DMATransmitCplt+0x4e>
  {
    husart->TxXferCount = 0U;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	2200      	movs	r2, #0
 800c3da:	85da      	strh	r2, [r3, #46]	; 0x2e

    if (husart->State == HAL_USART_STATE_BUSY_TX)
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	2259      	movs	r2, #89	; 0x59
 800c3e0:	5c9b      	ldrb	r3, [r3, r2]
 800c3e2:	b2db      	uxtb	r3, r3
 800c3e4:	2b12      	cmp	r3, #18
 800c3e6:	d11a      	bne.n	800c41e <USART_DMATransmitCplt+0x62>
    {
      /* Disable the DMA transfer for transmit request by resetting the DMAT bit
         in the USART CR3 register */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAT);
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	689a      	ldr	r2, [r3, #8]
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	2180      	movs	r1, #128	; 0x80
 800c3f4:	438a      	bics	r2, r1
 800c3f6:	609a      	str	r2, [r3, #8]

      /* Enable the USART Transmit Complete Interrupt */
      __HAL_USART_ENABLE_IT(husart, USART_IT_TC);
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	681a      	ldr	r2, [r3, #0]
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	2140      	movs	r1, #64	; 0x40
 800c404:	430a      	orrs	r2, r1
 800c406:	601a      	str	r2, [r3, #0]
      /* Call legacy weak Tx Complete Callback */
      HAL_USART_TxCpltCallback(husart);
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    }
  }
}
 800c408:	e009      	b.n	800c41e <USART_DMATransmitCplt+0x62>
    if (husart->State == HAL_USART_STATE_BUSY_TX)
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	2259      	movs	r2, #89	; 0x59
 800c40e:	5c9b      	ldrb	r3, [r3, r2]
 800c410:	b2db      	uxtb	r3, r3
 800c412:	2b12      	cmp	r3, #18
 800c414:	d103      	bne.n	800c41e <USART_DMATransmitCplt+0x62>
      HAL_USART_TxCpltCallback(husart);
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	0018      	movs	r0, r3
 800c41a:	f7f6 fddf 	bl	8002fdc <HAL_USART_TxCpltCallback>
}
 800c41e:	46c0      	nop			; (mov r8, r8)
 800c420:	46bd      	mov	sp, r7
 800c422:	b004      	add	sp, #16
 800c424:	bd80      	pop	{r7, pc}

0800c426 <USART_DMATxHalfCplt>:
  * @brief DMA USART transmit process half complete callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c426:	b580      	push	{r7, lr}
 800c428:	b084      	sub	sp, #16
 800c42a:	af00      	add	r7, sp, #0
 800c42c:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c432:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Tx Half Complete Callback */
  husart->TxHalfCpltCallback(husart);
#else
  /* Call legacy weak Tx Half Complete Callback */
  HAL_USART_TxHalfCpltCallback(husart);
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	0018      	movs	r0, r3
 800c438:	f7ff ff88 	bl	800c34c <HAL_USART_TxHalfCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 800c43c:	46c0      	nop			; (mov r8, r8)
 800c43e:	46bd      	mov	sp, r7
 800c440:	b004      	add	sp, #16
 800c442:	bd80      	pop	{r7, pc}

0800c444 <USART_DMAError>:
  * @brief DMA USART communication error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b084      	sub	sp, #16
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c450:	60fb      	str	r3, [r7, #12]

  husart->RxXferCount = 0U;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	2200      	movs	r2, #0
 800c456:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	2200      	movs	r2, #0
 800c45c:	85da      	strh	r2, [r3, #46]	; 0x2e
  USART_EndTransfer(husart);
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	0018      	movs	r0, r3
 800c462:	f7ff ff8b 	bl	800c37c <USART_EndTransfer>

  husart->ErrorCode |= HAL_USART_ERROR_DMA;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c46a:	2210      	movs	r2, #16
 800c46c:	431a      	orrs	r2, r3
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	65da      	str	r2, [r3, #92]	; 0x5c
  husart->State = HAL_USART_STATE_READY;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	2259      	movs	r2, #89	; 0x59
 800c476:	2101      	movs	r1, #1
 800c478:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	0018      	movs	r0, r3
 800c47e:	f7ff ff75 	bl	800c36c <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 800c482:	46c0      	nop			; (mov r8, r8)
 800c484:	46bd      	mov	sp, r7
 800c486:	b004      	add	sp, #16
 800c488:	bd80      	pop	{r7, pc}

0800c48a <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c48a:	b580      	push	{r7, lr}
 800c48c:	b084      	sub	sp, #16
 800c48e:	af00      	add	r7, sp, #0
 800c490:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c496:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	2200      	movs	r2, #0
 800c49c:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	85da      	strh	r2, [r3, #46]	; 0x2e
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	0018      	movs	r0, r3
 800c4a8:	f7ff ff60 	bl	800c36c <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 800c4ac:	46c0      	nop			; (mov r8, r8)
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	b004      	add	sp, #16
 800c4b2:	bd80      	pop	{r7, pc}

0800c4b4 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b084      	sub	sp, #16
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	60f8      	str	r0, [r7, #12]
 800c4bc:	60b9      	str	r1, [r7, #8]
 800c4be:	603b      	str	r3, [r7, #0]
 800c4c0:	1dfb      	adds	r3, r7, #7
 800c4c2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800c4c4:	e017      	b.n	800c4f6 <USART_WaitOnFlagUntilTimeout+0x42>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c4c6:	69bb      	ldr	r3, [r7, #24]
 800c4c8:	3301      	adds	r3, #1
 800c4ca:	d014      	beq.n	800c4f6 <USART_WaitOnFlagUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c4cc:	f7f9 f8e2 	bl	8005694 <HAL_GetTick>
 800c4d0:	0002      	movs	r2, r0
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	1ad3      	subs	r3, r2, r3
 800c4d6:	69ba      	ldr	r2, [r7, #24]
 800c4d8:	429a      	cmp	r2, r3
 800c4da:	d302      	bcc.n	800c4e2 <USART_WaitOnFlagUntilTimeout+0x2e>
 800c4dc:	69bb      	ldr	r3, [r7, #24]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d109      	bne.n	800c4f6 <USART_WaitOnFlagUntilTimeout+0x42>
      {
        husart->State = HAL_USART_STATE_READY;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	2259      	movs	r2, #89	; 0x59
 800c4e6:	2101      	movs	r1, #1
 800c4e8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	2258      	movs	r2, #88	; 0x58
 800c4ee:	2100      	movs	r1, #0
 800c4f0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800c4f2:	2303      	movs	r3, #3
 800c4f4:	e00f      	b.n	800c516 <USART_WaitOnFlagUntilTimeout+0x62>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	69db      	ldr	r3, [r3, #28]
 800c4fc:	68ba      	ldr	r2, [r7, #8]
 800c4fe:	4013      	ands	r3, r2
 800c500:	68ba      	ldr	r2, [r7, #8]
 800c502:	1ad3      	subs	r3, r2, r3
 800c504:	425a      	negs	r2, r3
 800c506:	4153      	adcs	r3, r2
 800c508:	b2db      	uxtb	r3, r3
 800c50a:	001a      	movs	r2, r3
 800c50c:	1dfb      	adds	r3, r7, #7
 800c50e:	781b      	ldrb	r3, [r3, #0]
 800c510:	429a      	cmp	r2, r3
 800c512:	d0d8      	beq.n	800c4c6 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c514:	2300      	movs	r3, #0
}
 800c516:	0018      	movs	r0, r3
 800c518:	46bd      	mov	sp, r7
 800c51a:	b004      	add	sp, #16
 800c51c:	bd80      	pop	{r7, pc}
	...

0800c520 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b088      	sub	sp, #32
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800c528:	231e      	movs	r3, #30
 800c52a:	18fb      	adds	r3, r7, r3
 800c52c:	2200      	movs	r2, #0
 800c52e:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800c530:	2300      	movs	r3, #0
 800c532:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	689a      	ldr	r2, [r3, #8]
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	691b      	ldr	r3, [r3, #16]
 800c53c:	431a      	orrs	r2, r3
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	695b      	ldr	r3, [r3, #20]
 800c542:	4313      	orrs	r3, r2
 800c544:	2280      	movs	r2, #128	; 0x80
 800c546:	0212      	lsls	r2, r2, #8
 800c548:	4313      	orrs	r3, r2
 800c54a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	4ab1      	ldr	r2, [pc, #708]	; (800c818 <USART_SetConfig+0x2f8>)
 800c554:	4013      	ands	r3, r2
 800c556:	0019      	movs	r1, r3
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	697a      	ldr	r2, [r7, #20]
 800c55e:	430a      	orrs	r2, r1
 800c560:	601a      	str	r2, [r3, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800c562:	2380      	movs	r3, #128	; 0x80
 800c564:	011b      	lsls	r3, r3, #4
 800c566:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	6a1b      	ldr	r3, [r3, #32]
 800c56c:	697a      	ldr	r2, [r7, #20]
 800c56e:	4313      	orrs	r3, r2
 800c570:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	699a      	ldr	r2, [r3, #24]
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	69db      	ldr	r3, [r3, #28]
 800c57a:	4313      	orrs	r3, r2
 800c57c:	697a      	ldr	r2, [r7, #20]
 800c57e:	4313      	orrs	r3, r2
 800c580:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	68db      	ldr	r3, [r3, #12]
 800c586:	697a      	ldr	r2, [r7, #20]
 800c588:	4313      	orrs	r3, r2
 800c58a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	685b      	ldr	r3, [r3, #4]
 800c592:	4aa2      	ldr	r2, [pc, #648]	; (800c81c <USART_SetConfig+0x2fc>)
 800c594:	4013      	ands	r3, r2
 800c596:	0019      	movs	r1, r3
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	697a      	ldr	r2, [r7, #20]
 800c59e:	430a      	orrs	r2, r1
 800c5a0:	605a      	str	r2, [r3, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5a8:	220f      	movs	r2, #15
 800c5aa:	4393      	bics	r3, r2
 800c5ac:	0019      	movs	r1, r3
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	430a      	orrs	r2, r1
 800c5b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	4a98      	ldr	r2, [pc, #608]	; (800c820 <USART_SetConfig+0x300>)
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	d127      	bne.n	800c614 <USART_SetConfig+0xf4>
 800c5c4:	4b97      	ldr	r3, [pc, #604]	; (800c824 <USART_SetConfig+0x304>)
 800c5c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5c8:	2203      	movs	r2, #3
 800c5ca:	4013      	ands	r3, r2
 800c5cc:	2b03      	cmp	r3, #3
 800c5ce:	d017      	beq.n	800c600 <USART_SetConfig+0xe0>
 800c5d0:	d81b      	bhi.n	800c60a <USART_SetConfig+0xea>
 800c5d2:	2b02      	cmp	r3, #2
 800c5d4:	d00a      	beq.n	800c5ec <USART_SetConfig+0xcc>
 800c5d6:	d818      	bhi.n	800c60a <USART_SetConfig+0xea>
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d002      	beq.n	800c5e2 <USART_SetConfig+0xc2>
 800c5dc:	2b01      	cmp	r3, #1
 800c5de:	d00a      	beq.n	800c5f6 <USART_SetConfig+0xd6>
 800c5e0:	e013      	b.n	800c60a <USART_SetConfig+0xea>
 800c5e2:	231f      	movs	r3, #31
 800c5e4:	18fb      	adds	r3, r7, r3
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	701a      	strb	r2, [r3, #0]
 800c5ea:	e058      	b.n	800c69e <USART_SetConfig+0x17e>
 800c5ec:	231f      	movs	r3, #31
 800c5ee:	18fb      	adds	r3, r7, r3
 800c5f0:	2202      	movs	r2, #2
 800c5f2:	701a      	strb	r2, [r3, #0]
 800c5f4:	e053      	b.n	800c69e <USART_SetConfig+0x17e>
 800c5f6:	231f      	movs	r3, #31
 800c5f8:	18fb      	adds	r3, r7, r3
 800c5fa:	2204      	movs	r2, #4
 800c5fc:	701a      	strb	r2, [r3, #0]
 800c5fe:	e04e      	b.n	800c69e <USART_SetConfig+0x17e>
 800c600:	231f      	movs	r3, #31
 800c602:	18fb      	adds	r3, r7, r3
 800c604:	2208      	movs	r2, #8
 800c606:	701a      	strb	r2, [r3, #0]
 800c608:	e049      	b.n	800c69e <USART_SetConfig+0x17e>
 800c60a:	231f      	movs	r3, #31
 800c60c:	18fb      	adds	r3, r7, r3
 800c60e:	2210      	movs	r2, #16
 800c610:	701a      	strb	r2, [r3, #0]
 800c612:	e044      	b.n	800c69e <USART_SetConfig+0x17e>
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	4a83      	ldr	r2, [pc, #524]	; (800c828 <USART_SetConfig+0x308>)
 800c61a:	4293      	cmp	r3, r2
 800c61c:	d127      	bne.n	800c66e <USART_SetConfig+0x14e>
 800c61e:	4b81      	ldr	r3, [pc, #516]	; (800c824 <USART_SetConfig+0x304>)
 800c620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c622:	220c      	movs	r2, #12
 800c624:	4013      	ands	r3, r2
 800c626:	2b0c      	cmp	r3, #12
 800c628:	d017      	beq.n	800c65a <USART_SetConfig+0x13a>
 800c62a:	d81b      	bhi.n	800c664 <USART_SetConfig+0x144>
 800c62c:	2b08      	cmp	r3, #8
 800c62e:	d00a      	beq.n	800c646 <USART_SetConfig+0x126>
 800c630:	d818      	bhi.n	800c664 <USART_SetConfig+0x144>
 800c632:	2b00      	cmp	r3, #0
 800c634:	d002      	beq.n	800c63c <USART_SetConfig+0x11c>
 800c636:	2b04      	cmp	r3, #4
 800c638:	d00a      	beq.n	800c650 <USART_SetConfig+0x130>
 800c63a:	e013      	b.n	800c664 <USART_SetConfig+0x144>
 800c63c:	231f      	movs	r3, #31
 800c63e:	18fb      	adds	r3, r7, r3
 800c640:	2200      	movs	r2, #0
 800c642:	701a      	strb	r2, [r3, #0]
 800c644:	e02b      	b.n	800c69e <USART_SetConfig+0x17e>
 800c646:	231f      	movs	r3, #31
 800c648:	18fb      	adds	r3, r7, r3
 800c64a:	2202      	movs	r2, #2
 800c64c:	701a      	strb	r2, [r3, #0]
 800c64e:	e026      	b.n	800c69e <USART_SetConfig+0x17e>
 800c650:	231f      	movs	r3, #31
 800c652:	18fb      	adds	r3, r7, r3
 800c654:	2204      	movs	r2, #4
 800c656:	701a      	strb	r2, [r3, #0]
 800c658:	e021      	b.n	800c69e <USART_SetConfig+0x17e>
 800c65a:	231f      	movs	r3, #31
 800c65c:	18fb      	adds	r3, r7, r3
 800c65e:	2208      	movs	r2, #8
 800c660:	701a      	strb	r2, [r3, #0]
 800c662:	e01c      	b.n	800c69e <USART_SetConfig+0x17e>
 800c664:	231f      	movs	r3, #31
 800c666:	18fb      	adds	r3, r7, r3
 800c668:	2210      	movs	r2, #16
 800c66a:	701a      	strb	r2, [r3, #0]
 800c66c:	e017      	b.n	800c69e <USART_SetConfig+0x17e>
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	4a6e      	ldr	r2, [pc, #440]	; (800c82c <USART_SetConfig+0x30c>)
 800c674:	4293      	cmp	r3, r2
 800c676:	d104      	bne.n	800c682 <USART_SetConfig+0x162>
 800c678:	231f      	movs	r3, #31
 800c67a:	18fb      	adds	r3, r7, r3
 800c67c:	2200      	movs	r2, #0
 800c67e:	701a      	strb	r2, [r3, #0]
 800c680:	e00d      	b.n	800c69e <USART_SetConfig+0x17e>
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	4a6a      	ldr	r2, [pc, #424]	; (800c830 <USART_SetConfig+0x310>)
 800c688:	4293      	cmp	r3, r2
 800c68a:	d104      	bne.n	800c696 <USART_SetConfig+0x176>
 800c68c:	231f      	movs	r3, #31
 800c68e:	18fb      	adds	r3, r7, r3
 800c690:	2200      	movs	r2, #0
 800c692:	701a      	strb	r2, [r3, #0]
 800c694:	e003      	b.n	800c69e <USART_SetConfig+0x17e>
 800c696:	231f      	movs	r3, #31
 800c698:	18fb      	adds	r3, r7, r3
 800c69a:	2210      	movs	r2, #16
 800c69c:	701a      	strb	r2, [r3, #0]

  switch (clocksource)
 800c69e:	231f      	movs	r3, #31
 800c6a0:	18fb      	adds	r3, r7, r3
 800c6a2:	781b      	ldrb	r3, [r3, #0]
 800c6a4:	2b08      	cmp	r3, #8
 800c6a6:	d100      	bne.n	800c6aa <USART_SetConfig+0x18a>
 800c6a8:	e139      	b.n	800c91e <USART_SetConfig+0x3fe>
 800c6aa:	dd00      	ble.n	800c6ae <USART_SetConfig+0x18e>
 800c6ac:	e195      	b.n	800c9da <USART_SetConfig+0x4ba>
 800c6ae:	2b04      	cmp	r3, #4
 800c6b0:	d100      	bne.n	800c6b4 <USART_SetConfig+0x194>
 800c6b2:	e0d3      	b.n	800c85c <USART_SetConfig+0x33c>
 800c6b4:	dd00      	ble.n	800c6b8 <USART_SetConfig+0x198>
 800c6b6:	e190      	b.n	800c9da <USART_SetConfig+0x4ba>
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d003      	beq.n	800c6c4 <USART_SetConfig+0x1a4>
 800c6bc:	2b02      	cmp	r3, #2
 800c6be:	d100      	bne.n	800c6c2 <USART_SetConfig+0x1a2>
 800c6c0:	e061      	b.n	800c786 <USART_SetConfig+0x266>
 800c6c2:	e18a      	b.n	800c9da <USART_SetConfig+0x4ba>
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800c6c4:	f7fc f904 	bl	80088d0 <HAL_RCC_GetPCLK1Freq>
 800c6c8:	0003      	movs	r3, r0
 800c6ca:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d044      	beq.n	800c75e <USART_SetConfig+0x23e>
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6d8:	2b01      	cmp	r3, #1
 800c6da:	d03e      	beq.n	800c75a <USART_SetConfig+0x23a>
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6e0:	2b02      	cmp	r3, #2
 800c6e2:	d038      	beq.n	800c756 <USART_SetConfig+0x236>
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6e8:	2b03      	cmp	r3, #3
 800c6ea:	d032      	beq.n	800c752 <USART_SetConfig+0x232>
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6f0:	2b04      	cmp	r3, #4
 800c6f2:	d02c      	beq.n	800c74e <USART_SetConfig+0x22e>
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6f8:	2b05      	cmp	r3, #5
 800c6fa:	d026      	beq.n	800c74a <USART_SetConfig+0x22a>
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c700:	2b06      	cmp	r3, #6
 800c702:	d020      	beq.n	800c746 <USART_SetConfig+0x226>
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c708:	2b07      	cmp	r3, #7
 800c70a:	d01a      	beq.n	800c742 <USART_SetConfig+0x222>
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c710:	2b08      	cmp	r3, #8
 800c712:	d014      	beq.n	800c73e <USART_SetConfig+0x21e>
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c718:	2b09      	cmp	r3, #9
 800c71a:	d00e      	beq.n	800c73a <USART_SetConfig+0x21a>
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c720:	2b0a      	cmp	r3, #10
 800c722:	d008      	beq.n	800c736 <USART_SetConfig+0x216>
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c728:	2b0b      	cmp	r3, #11
 800c72a:	d102      	bne.n	800c732 <USART_SetConfig+0x212>
 800c72c:	2380      	movs	r3, #128	; 0x80
 800c72e:	005b      	lsls	r3, r3, #1
 800c730:	e016      	b.n	800c760 <USART_SetConfig+0x240>
 800c732:	2301      	movs	r3, #1
 800c734:	e014      	b.n	800c760 <USART_SetConfig+0x240>
 800c736:	2380      	movs	r3, #128	; 0x80
 800c738:	e012      	b.n	800c760 <USART_SetConfig+0x240>
 800c73a:	2340      	movs	r3, #64	; 0x40
 800c73c:	e010      	b.n	800c760 <USART_SetConfig+0x240>
 800c73e:	2320      	movs	r3, #32
 800c740:	e00e      	b.n	800c760 <USART_SetConfig+0x240>
 800c742:	2310      	movs	r3, #16
 800c744:	e00c      	b.n	800c760 <USART_SetConfig+0x240>
 800c746:	230c      	movs	r3, #12
 800c748:	e00a      	b.n	800c760 <USART_SetConfig+0x240>
 800c74a:	230a      	movs	r3, #10
 800c74c:	e008      	b.n	800c760 <USART_SetConfig+0x240>
 800c74e:	2308      	movs	r3, #8
 800c750:	e006      	b.n	800c760 <USART_SetConfig+0x240>
 800c752:	2306      	movs	r3, #6
 800c754:	e004      	b.n	800c760 <USART_SetConfig+0x240>
 800c756:	2304      	movs	r3, #4
 800c758:	e002      	b.n	800c760 <USART_SetConfig+0x240>
 800c75a:	2302      	movs	r3, #2
 800c75c:	e000      	b.n	800c760 <USART_SetConfig+0x240>
 800c75e:	2301      	movs	r3, #1
 800c760:	0019      	movs	r1, r3
 800c762:	6938      	ldr	r0, [r7, #16]
 800c764:	f7f3 fcce 	bl	8000104 <__udivsi3>
 800c768:	0003      	movs	r3, r0
 800c76a:	005a      	lsls	r2, r3, #1
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	685b      	ldr	r3, [r3, #4]
 800c770:	085b      	lsrs	r3, r3, #1
 800c772:	18d2      	adds	r2, r2, r3
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	685b      	ldr	r3, [r3, #4]
 800c778:	0019      	movs	r1, r3
 800c77a:	0010      	movs	r0, r2
 800c77c:	f7f3 fcc2 	bl	8000104 <__udivsi3>
 800c780:	0003      	movs	r3, r0
 800c782:	61bb      	str	r3, [r7, #24]
      break;
 800c784:	e12e      	b.n	800c9e4 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d052      	beq.n	800c834 <USART_SetConfig+0x314>
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c792:	2b01      	cmp	r3, #1
 800c794:	d03e      	beq.n	800c814 <USART_SetConfig+0x2f4>
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c79a:	2b02      	cmp	r3, #2
 800c79c:	d038      	beq.n	800c810 <USART_SetConfig+0x2f0>
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7a2:	2b03      	cmp	r3, #3
 800c7a4:	d032      	beq.n	800c80c <USART_SetConfig+0x2ec>
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7aa:	2b04      	cmp	r3, #4
 800c7ac:	d02c      	beq.n	800c808 <USART_SetConfig+0x2e8>
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7b2:	2b05      	cmp	r3, #5
 800c7b4:	d026      	beq.n	800c804 <USART_SetConfig+0x2e4>
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7ba:	2b06      	cmp	r3, #6
 800c7bc:	d020      	beq.n	800c800 <USART_SetConfig+0x2e0>
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7c2:	2b07      	cmp	r3, #7
 800c7c4:	d01a      	beq.n	800c7fc <USART_SetConfig+0x2dc>
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7ca:	2b08      	cmp	r3, #8
 800c7cc:	d014      	beq.n	800c7f8 <USART_SetConfig+0x2d8>
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7d2:	2b09      	cmp	r3, #9
 800c7d4:	d00e      	beq.n	800c7f4 <USART_SetConfig+0x2d4>
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7da:	2b0a      	cmp	r3, #10
 800c7dc:	d008      	beq.n	800c7f0 <USART_SetConfig+0x2d0>
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7e2:	2b0b      	cmp	r3, #11
 800c7e4:	d102      	bne.n	800c7ec <USART_SetConfig+0x2cc>
 800c7e6:	2380      	movs	r3, #128	; 0x80
 800c7e8:	005b      	lsls	r3, r3, #1
 800c7ea:	e024      	b.n	800c836 <USART_SetConfig+0x316>
 800c7ec:	2301      	movs	r3, #1
 800c7ee:	e022      	b.n	800c836 <USART_SetConfig+0x316>
 800c7f0:	2380      	movs	r3, #128	; 0x80
 800c7f2:	e020      	b.n	800c836 <USART_SetConfig+0x316>
 800c7f4:	2340      	movs	r3, #64	; 0x40
 800c7f6:	e01e      	b.n	800c836 <USART_SetConfig+0x316>
 800c7f8:	2320      	movs	r3, #32
 800c7fa:	e01c      	b.n	800c836 <USART_SetConfig+0x316>
 800c7fc:	2310      	movs	r3, #16
 800c7fe:	e01a      	b.n	800c836 <USART_SetConfig+0x316>
 800c800:	230c      	movs	r3, #12
 800c802:	e018      	b.n	800c836 <USART_SetConfig+0x316>
 800c804:	230a      	movs	r3, #10
 800c806:	e016      	b.n	800c836 <USART_SetConfig+0x316>
 800c808:	2308      	movs	r3, #8
 800c80a:	e014      	b.n	800c836 <USART_SetConfig+0x316>
 800c80c:	2306      	movs	r3, #6
 800c80e:	e012      	b.n	800c836 <USART_SetConfig+0x316>
 800c810:	2304      	movs	r3, #4
 800c812:	e010      	b.n	800c836 <USART_SetConfig+0x316>
 800c814:	2302      	movs	r3, #2
 800c816:	e00e      	b.n	800c836 <USART_SetConfig+0x316>
 800c818:	cfff69f3 	.word	0xcfff69f3
 800c81c:	ffffc0f6 	.word	0xffffc0f6
 800c820:	40013800 	.word	0x40013800
 800c824:	40021000 	.word	0x40021000
 800c828:	40004400 	.word	0x40004400
 800c82c:	40004800 	.word	0x40004800
 800c830:	40004c00 	.word	0x40004c00
 800c834:	2301      	movs	r3, #1
 800c836:	0019      	movs	r1, r3
 800c838:	4886      	ldr	r0, [pc, #536]	; (800ca54 <USART_SetConfig+0x534>)
 800c83a:	f7f3 fc63 	bl	8000104 <__udivsi3>
 800c83e:	0003      	movs	r3, r0
 800c840:	005a      	lsls	r2, r3, #1
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	685b      	ldr	r3, [r3, #4]
 800c846:	085b      	lsrs	r3, r3, #1
 800c848:	18d2      	adds	r2, r2, r3
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	685b      	ldr	r3, [r3, #4]
 800c84e:	0019      	movs	r1, r3
 800c850:	0010      	movs	r0, r2
 800c852:	f7f3 fc57 	bl	8000104 <__udivsi3>
 800c856:	0003      	movs	r3, r0
 800c858:	61bb      	str	r3, [r7, #24]
      break;
 800c85a:	e0c3      	b.n	800c9e4 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 800c85c:	f7fb ffac 	bl	80087b8 <HAL_RCC_GetSysClockFreq>
 800c860:	0003      	movs	r3, r0
 800c862:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d044      	beq.n	800c8f6 <USART_SetConfig+0x3d6>
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c870:	2b01      	cmp	r3, #1
 800c872:	d03e      	beq.n	800c8f2 <USART_SetConfig+0x3d2>
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c878:	2b02      	cmp	r3, #2
 800c87a:	d038      	beq.n	800c8ee <USART_SetConfig+0x3ce>
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c880:	2b03      	cmp	r3, #3
 800c882:	d032      	beq.n	800c8ea <USART_SetConfig+0x3ca>
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c888:	2b04      	cmp	r3, #4
 800c88a:	d02c      	beq.n	800c8e6 <USART_SetConfig+0x3c6>
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c890:	2b05      	cmp	r3, #5
 800c892:	d026      	beq.n	800c8e2 <USART_SetConfig+0x3c2>
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c898:	2b06      	cmp	r3, #6
 800c89a:	d020      	beq.n	800c8de <USART_SetConfig+0x3be>
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8a0:	2b07      	cmp	r3, #7
 800c8a2:	d01a      	beq.n	800c8da <USART_SetConfig+0x3ba>
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8a8:	2b08      	cmp	r3, #8
 800c8aa:	d014      	beq.n	800c8d6 <USART_SetConfig+0x3b6>
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8b0:	2b09      	cmp	r3, #9
 800c8b2:	d00e      	beq.n	800c8d2 <USART_SetConfig+0x3b2>
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8b8:	2b0a      	cmp	r3, #10
 800c8ba:	d008      	beq.n	800c8ce <USART_SetConfig+0x3ae>
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8c0:	2b0b      	cmp	r3, #11
 800c8c2:	d102      	bne.n	800c8ca <USART_SetConfig+0x3aa>
 800c8c4:	2380      	movs	r3, #128	; 0x80
 800c8c6:	005b      	lsls	r3, r3, #1
 800c8c8:	e016      	b.n	800c8f8 <USART_SetConfig+0x3d8>
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	e014      	b.n	800c8f8 <USART_SetConfig+0x3d8>
 800c8ce:	2380      	movs	r3, #128	; 0x80
 800c8d0:	e012      	b.n	800c8f8 <USART_SetConfig+0x3d8>
 800c8d2:	2340      	movs	r3, #64	; 0x40
 800c8d4:	e010      	b.n	800c8f8 <USART_SetConfig+0x3d8>
 800c8d6:	2320      	movs	r3, #32
 800c8d8:	e00e      	b.n	800c8f8 <USART_SetConfig+0x3d8>
 800c8da:	2310      	movs	r3, #16
 800c8dc:	e00c      	b.n	800c8f8 <USART_SetConfig+0x3d8>
 800c8de:	230c      	movs	r3, #12
 800c8e0:	e00a      	b.n	800c8f8 <USART_SetConfig+0x3d8>
 800c8e2:	230a      	movs	r3, #10
 800c8e4:	e008      	b.n	800c8f8 <USART_SetConfig+0x3d8>
 800c8e6:	2308      	movs	r3, #8
 800c8e8:	e006      	b.n	800c8f8 <USART_SetConfig+0x3d8>
 800c8ea:	2306      	movs	r3, #6
 800c8ec:	e004      	b.n	800c8f8 <USART_SetConfig+0x3d8>
 800c8ee:	2304      	movs	r3, #4
 800c8f0:	e002      	b.n	800c8f8 <USART_SetConfig+0x3d8>
 800c8f2:	2302      	movs	r3, #2
 800c8f4:	e000      	b.n	800c8f8 <USART_SetConfig+0x3d8>
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	0019      	movs	r1, r3
 800c8fa:	6938      	ldr	r0, [r7, #16]
 800c8fc:	f7f3 fc02 	bl	8000104 <__udivsi3>
 800c900:	0003      	movs	r3, r0
 800c902:	005a      	lsls	r2, r3, #1
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	685b      	ldr	r3, [r3, #4]
 800c908:	085b      	lsrs	r3, r3, #1
 800c90a:	18d2      	adds	r2, r2, r3
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	685b      	ldr	r3, [r3, #4]
 800c910:	0019      	movs	r1, r3
 800c912:	0010      	movs	r0, r2
 800c914:	f7f3 fbf6 	bl	8000104 <__udivsi3>
 800c918:	0003      	movs	r3, r0
 800c91a:	61bb      	str	r3, [r7, #24]
      break;
 800c91c:	e062      	b.n	800c9e4 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8((uint32_t)LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c922:	2b00      	cmp	r3, #0
 800c924:	d044      	beq.n	800c9b0 <USART_SetConfig+0x490>
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c92a:	2b01      	cmp	r3, #1
 800c92c:	d03e      	beq.n	800c9ac <USART_SetConfig+0x48c>
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c932:	2b02      	cmp	r3, #2
 800c934:	d038      	beq.n	800c9a8 <USART_SetConfig+0x488>
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c93a:	2b03      	cmp	r3, #3
 800c93c:	d032      	beq.n	800c9a4 <USART_SetConfig+0x484>
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c942:	2b04      	cmp	r3, #4
 800c944:	d02c      	beq.n	800c9a0 <USART_SetConfig+0x480>
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c94a:	2b05      	cmp	r3, #5
 800c94c:	d026      	beq.n	800c99c <USART_SetConfig+0x47c>
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c952:	2b06      	cmp	r3, #6
 800c954:	d020      	beq.n	800c998 <USART_SetConfig+0x478>
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c95a:	2b07      	cmp	r3, #7
 800c95c:	d01a      	beq.n	800c994 <USART_SetConfig+0x474>
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c962:	2b08      	cmp	r3, #8
 800c964:	d014      	beq.n	800c990 <USART_SetConfig+0x470>
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c96a:	2b09      	cmp	r3, #9
 800c96c:	d00e      	beq.n	800c98c <USART_SetConfig+0x46c>
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c972:	2b0a      	cmp	r3, #10
 800c974:	d008      	beq.n	800c988 <USART_SetConfig+0x468>
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c97a:	2b0b      	cmp	r3, #11
 800c97c:	d102      	bne.n	800c984 <USART_SetConfig+0x464>
 800c97e:	2380      	movs	r3, #128	; 0x80
 800c980:	005b      	lsls	r3, r3, #1
 800c982:	e016      	b.n	800c9b2 <USART_SetConfig+0x492>
 800c984:	2301      	movs	r3, #1
 800c986:	e014      	b.n	800c9b2 <USART_SetConfig+0x492>
 800c988:	2380      	movs	r3, #128	; 0x80
 800c98a:	e012      	b.n	800c9b2 <USART_SetConfig+0x492>
 800c98c:	2340      	movs	r3, #64	; 0x40
 800c98e:	e010      	b.n	800c9b2 <USART_SetConfig+0x492>
 800c990:	2320      	movs	r3, #32
 800c992:	e00e      	b.n	800c9b2 <USART_SetConfig+0x492>
 800c994:	2310      	movs	r3, #16
 800c996:	e00c      	b.n	800c9b2 <USART_SetConfig+0x492>
 800c998:	230c      	movs	r3, #12
 800c99a:	e00a      	b.n	800c9b2 <USART_SetConfig+0x492>
 800c99c:	230a      	movs	r3, #10
 800c99e:	e008      	b.n	800c9b2 <USART_SetConfig+0x492>
 800c9a0:	2308      	movs	r3, #8
 800c9a2:	e006      	b.n	800c9b2 <USART_SetConfig+0x492>
 800c9a4:	2306      	movs	r3, #6
 800c9a6:	e004      	b.n	800c9b2 <USART_SetConfig+0x492>
 800c9a8:	2304      	movs	r3, #4
 800c9aa:	e002      	b.n	800c9b2 <USART_SetConfig+0x492>
 800c9ac:	2302      	movs	r3, #2
 800c9ae:	e000      	b.n	800c9b2 <USART_SetConfig+0x492>
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	0019      	movs	r1, r3
 800c9b4:	2380      	movs	r3, #128	; 0x80
 800c9b6:	0218      	lsls	r0, r3, #8
 800c9b8:	f7f3 fba4 	bl	8000104 <__udivsi3>
 800c9bc:	0003      	movs	r3, r0
 800c9be:	005a      	lsls	r2, r3, #1
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	685b      	ldr	r3, [r3, #4]
 800c9c4:	085b      	lsrs	r3, r3, #1
 800c9c6:	18d2      	adds	r2, r2, r3
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	685b      	ldr	r3, [r3, #4]
 800c9cc:	0019      	movs	r1, r3
 800c9ce:	0010      	movs	r0, r2
 800c9d0:	f7f3 fb98 	bl	8000104 <__udivsi3>
 800c9d4:	0003      	movs	r3, r0
 800c9d6:	61bb      	str	r3, [r7, #24]
      break;
 800c9d8:	e004      	b.n	800c9e4 <USART_SetConfig+0x4c4>
    default:
      ret = HAL_ERROR;
 800c9da:	231e      	movs	r3, #30
 800c9dc:	18fb      	adds	r3, r7, r3
 800c9de:	2201      	movs	r2, #1
 800c9e0:	701a      	strb	r2, [r3, #0]
      break;
 800c9e2:	46c0      	nop			; (mov r8, r8)
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800c9e4:	69bb      	ldr	r3, [r7, #24]
 800c9e6:	2b0f      	cmp	r3, #15
 800c9e8:	d91c      	bls.n	800ca24 <USART_SetConfig+0x504>
 800c9ea:	69ba      	ldr	r2, [r7, #24]
 800c9ec:	2380      	movs	r3, #128	; 0x80
 800c9ee:	025b      	lsls	r3, r3, #9
 800c9f0:	429a      	cmp	r2, r3
 800c9f2:	d217      	bcs.n	800ca24 <USART_SetConfig+0x504>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c9f4:	69bb      	ldr	r3, [r7, #24]
 800c9f6:	b29a      	uxth	r2, r3
 800c9f8:	200e      	movs	r0, #14
 800c9fa:	183b      	adds	r3, r7, r0
 800c9fc:	210f      	movs	r1, #15
 800c9fe:	438a      	bics	r2, r1
 800ca00:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ca02:	69bb      	ldr	r3, [r7, #24]
 800ca04:	085b      	lsrs	r3, r3, #1
 800ca06:	b29b      	uxth	r3, r3
 800ca08:	2207      	movs	r2, #7
 800ca0a:	4013      	ands	r3, r2
 800ca0c:	b299      	uxth	r1, r3
 800ca0e:	183b      	adds	r3, r7, r0
 800ca10:	183a      	adds	r2, r7, r0
 800ca12:	8812      	ldrh	r2, [r2, #0]
 800ca14:	430a      	orrs	r2, r1
 800ca16:	801a      	strh	r2, [r3, #0]
    husart->Instance->BRR = brrtemp;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	183a      	adds	r2, r7, r0
 800ca1e:	8812      	ldrh	r2, [r2, #0]
 800ca20:	60da      	str	r2, [r3, #12]
 800ca22:	e003      	b.n	800ca2c <USART_SetConfig+0x50c>
  }
  else
  {
    ret = HAL_ERROR;
 800ca24:	231e      	movs	r3, #30
 800ca26:	18fb      	adds	r3, r7, r3
 800ca28:	2201      	movs	r2, #1
 800ca2a:	701a      	strb	r2, [r3, #0]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2201      	movs	r2, #1
 800ca30:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	2201      	movs	r2, #1
 800ca36:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2200      	movs	r2, #0
 800ca42:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 800ca44:	231e      	movs	r3, #30
 800ca46:	18fb      	adds	r3, r7, r3
 800ca48:	781b      	ldrb	r3, [r3, #0]
}
 800ca4a:	0018      	movs	r0, r3
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	b008      	add	sp, #32
 800ca50:	bd80      	pop	{r7, pc}
 800ca52:	46c0      	nop			; (mov r8, r8)
 800ca54:	00f42400 	.word	0x00f42400

0800ca58 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b086      	sub	sp, #24
 800ca5c:	af02      	add	r7, sp, #8
 800ca5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2200      	movs	r2, #0
 800ca64:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ca66:	f7f8 fe15 	bl	8005694 <HAL_GetTick>
 800ca6a:	0003      	movs	r3, r0
 800ca6c:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	2208      	movs	r2, #8
 800ca76:	4013      	ands	r3, r2
 800ca78:	2b08      	cmp	r3, #8
 800ca7a:	d10e      	bne.n	800ca9a <USART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800ca7c:	68fa      	ldr	r2, [r7, #12]
 800ca7e:	2380      	movs	r3, #128	; 0x80
 800ca80:	0399      	lsls	r1, r3, #14
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	23fa      	movs	r3, #250	; 0xfa
 800ca86:	009b      	lsls	r3, r3, #2
 800ca88:	9300      	str	r3, [sp, #0]
 800ca8a:	0013      	movs	r3, r2
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	f7ff fd11 	bl	800c4b4 <USART_WaitOnFlagUntilTimeout>
 800ca92:	1e03      	subs	r3, r0, #0
 800ca94:	d001      	beq.n	800ca9a <USART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ca96:	2303      	movs	r3, #3
 800ca98:	e01e      	b.n	800cad8 <USART_CheckIdleState+0x80>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	2204      	movs	r2, #4
 800caa2:	4013      	ands	r3, r2
 800caa4:	2b04      	cmp	r3, #4
 800caa6:	d10e      	bne.n	800cac6 <USART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800caa8:	68fa      	ldr	r2, [r7, #12]
 800caaa:	2380      	movs	r3, #128	; 0x80
 800caac:	03d9      	lsls	r1, r3, #15
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	23fa      	movs	r3, #250	; 0xfa
 800cab2:	009b      	lsls	r3, r3, #2
 800cab4:	9300      	str	r3, [sp, #0]
 800cab6:	0013      	movs	r3, r2
 800cab8:	2200      	movs	r2, #0
 800caba:	f7ff fcfb 	bl	800c4b4 <USART_WaitOnFlagUntilTimeout>
 800cabe:	1e03      	subs	r3, r0, #0
 800cac0:	d001      	beq.n	800cac6 <USART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cac2:	2303      	movs	r3, #3
 800cac4:	e008      	b.n	800cad8 <USART_CheckIdleState+0x80>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2259      	movs	r2, #89	; 0x59
 800caca:	2101      	movs	r1, #1
 800cacc:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2258      	movs	r2, #88	; 0x58
 800cad2:	2100      	movs	r1, #0
 800cad4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800cad6:	2300      	movs	r3, #0
}
 800cad8:	0018      	movs	r0, r3
 800cada:	46bd      	mov	sp, r7
 800cadc:	b004      	add	sp, #16
 800cade:	bd80      	pop	{r7, pc}

0800cae0 <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b082      	sub	sp, #8
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	681a      	ldr	r2, [r3, #0]
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	2140      	movs	r1, #64	; 0x40
 800caf4:	438a      	bics	r2, r1
 800caf6:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	689a      	ldr	r2, [r3, #8]
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	2101      	movs	r1, #1
 800cb04:	438a      	bics	r2, r1
 800cb06:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	64da      	str	r2, [r3, #76]	; 0x4c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2259      	movs	r2, #89	; 0x59
 800cb12:	5c9b      	ldrb	r3, [r3, r2]
 800cb14:	b2db      	uxtb	r3, r3
 800cb16:	2b12      	cmp	r3, #18
 800cb18:	d114      	bne.n	800cb44 <USART_EndTransmit_IT+0x64>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	2208      	movs	r2, #8
 800cb20:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	699a      	ldr	r2, [r3, #24]
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	2108      	movs	r1, #8
 800cb2e:	430a      	orrs	r2, r1
 800cb30:	619a      	str	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	2259      	movs	r2, #89	; 0x59
 800cb36:	2101      	movs	r1, #1
 800cb38:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	0018      	movs	r0, r3
 800cb3e:	f7f6 fa4d 	bl	8002fdc <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800cb42:	e00c      	b.n	800cb5e <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cb48:	b29b      	uxth	r3, r3
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d107      	bne.n	800cb5e <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	2259      	movs	r2, #89	; 0x59
 800cb52:	2101      	movs	r1, #1
 800cb54:	5499      	strb	r1, [r3, r2]
    HAL_USART_TxRxCpltCallback(husart);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	0018      	movs	r0, r3
 800cb5a:	f7ff fbff 	bl	800c35c <HAL_USART_TxRxCpltCallback>
}
 800cb5e:	46c0      	nop			; (mov r8, r8)
 800cb60:	46bd      	mov	sp, r7
 800cb62:	b002      	add	sp, #8
 800cb64:	bd80      	pop	{r7, pc}

0800cb66 <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
 800cb66:	b580      	push	{r7, lr}
 800cb68:	b082      	sub	sp, #8
 800cb6a:	af00      	add	r7, sp, #0
 800cb6c:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cb6e:	46c0      	nop			; (mov r8, r8)
 800cb70:	46bd      	mov	sp, r7
 800cb72:	b002      	add	sp, #8
 800cb74:	bd80      	pop	{r7, pc}

0800cb76 <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
 800cb76:	b580      	push	{r7, lr}
 800cb78:	b082      	sub	sp, #8
 800cb7a:	af00      	add	r7, sp, #0
 800cb7c:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cb7e:	46c0      	nop			; (mov r8, r8)
 800cb80:	46bd      	mov	sp, r7
 800cb82:	b002      	add	sp, #8
 800cb84:	bd80      	pop	{r7, pc}

0800cb86 <LL_GPIO_SetPinMode>:
{
 800cb86:	b580      	push	{r7, lr}
 800cb88:	b084      	sub	sp, #16
 800cb8a:	af00      	add	r7, sp, #0
 800cb8c:	60f8      	str	r0, [r7, #12]
 800cb8e:	60b9      	str	r1, [r7, #8]
 800cb90:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	6819      	ldr	r1, [r3, #0]
 800cb96:	68bb      	ldr	r3, [r7, #8]
 800cb98:	435b      	muls	r3, r3
 800cb9a:	001a      	movs	r2, r3
 800cb9c:	0013      	movs	r3, r2
 800cb9e:	005b      	lsls	r3, r3, #1
 800cba0:	189b      	adds	r3, r3, r2
 800cba2:	43db      	mvns	r3, r3
 800cba4:	400b      	ands	r3, r1
 800cba6:	001a      	movs	r2, r3
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	435b      	muls	r3, r3
 800cbac:	6879      	ldr	r1, [r7, #4]
 800cbae:	434b      	muls	r3, r1
 800cbb0:	431a      	orrs	r2, r3
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	601a      	str	r2, [r3, #0]
}
 800cbb6:	46c0      	nop			; (mov r8, r8)
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	b004      	add	sp, #16
 800cbbc:	bd80      	pop	{r7, pc}

0800cbbe <LL_GPIO_SetPinOutputType>:
{
 800cbbe:	b580      	push	{r7, lr}
 800cbc0:	b084      	sub	sp, #16
 800cbc2:	af00      	add	r7, sp, #0
 800cbc4:	60f8      	str	r0, [r7, #12]
 800cbc6:	60b9      	str	r1, [r7, #8]
 800cbc8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	685b      	ldr	r3, [r3, #4]
 800cbce:	68ba      	ldr	r2, [r7, #8]
 800cbd0:	43d2      	mvns	r2, r2
 800cbd2:	401a      	ands	r2, r3
 800cbd4:	68bb      	ldr	r3, [r7, #8]
 800cbd6:	6879      	ldr	r1, [r7, #4]
 800cbd8:	434b      	muls	r3, r1
 800cbda:	431a      	orrs	r2, r3
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	605a      	str	r2, [r3, #4]
}
 800cbe0:	46c0      	nop			; (mov r8, r8)
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	b004      	add	sp, #16
 800cbe6:	bd80      	pop	{r7, pc}

0800cbe8 <LL_GPIO_SetPinSpeed>:
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b084      	sub	sp, #16
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	60f8      	str	r0, [r7, #12]
 800cbf0:	60b9      	str	r1, [r7, #8]
 800cbf2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	6899      	ldr	r1, [r3, #8]
 800cbf8:	68bb      	ldr	r3, [r7, #8]
 800cbfa:	435b      	muls	r3, r3
 800cbfc:	001a      	movs	r2, r3
 800cbfe:	0013      	movs	r3, r2
 800cc00:	005b      	lsls	r3, r3, #1
 800cc02:	189b      	adds	r3, r3, r2
 800cc04:	43db      	mvns	r3, r3
 800cc06:	400b      	ands	r3, r1
 800cc08:	001a      	movs	r2, r3
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	435b      	muls	r3, r3
 800cc0e:	6879      	ldr	r1, [r7, #4]
 800cc10:	434b      	muls	r3, r1
 800cc12:	431a      	orrs	r2, r3
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	609a      	str	r2, [r3, #8]
}
 800cc18:	46c0      	nop			; (mov r8, r8)
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	b004      	add	sp, #16
 800cc1e:	bd80      	pop	{r7, pc}

0800cc20 <LL_GPIO_SetPinPull>:
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b084      	sub	sp, #16
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	60f8      	str	r0, [r7, #12]
 800cc28:	60b9      	str	r1, [r7, #8]
 800cc2a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	68d9      	ldr	r1, [r3, #12]
 800cc30:	68bb      	ldr	r3, [r7, #8]
 800cc32:	435b      	muls	r3, r3
 800cc34:	001a      	movs	r2, r3
 800cc36:	0013      	movs	r3, r2
 800cc38:	005b      	lsls	r3, r3, #1
 800cc3a:	189b      	adds	r3, r3, r2
 800cc3c:	43db      	mvns	r3, r3
 800cc3e:	400b      	ands	r3, r1
 800cc40:	001a      	movs	r2, r3
 800cc42:	68bb      	ldr	r3, [r7, #8]
 800cc44:	435b      	muls	r3, r3
 800cc46:	6879      	ldr	r1, [r7, #4]
 800cc48:	434b      	muls	r3, r1
 800cc4a:	431a      	orrs	r2, r3
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	60da      	str	r2, [r3, #12]
}
 800cc50:	46c0      	nop			; (mov r8, r8)
 800cc52:	46bd      	mov	sp, r7
 800cc54:	b004      	add	sp, #16
 800cc56:	bd80      	pop	{r7, pc}

0800cc58 <LL_GPIO_SetAFPin_0_7>:
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b084      	sub	sp, #16
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	60f8      	str	r0, [r7, #12]
 800cc60:	60b9      	str	r1, [r7, #8]
 800cc62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	6a19      	ldr	r1, [r3, #32]
 800cc68:	68bb      	ldr	r3, [r7, #8]
 800cc6a:	435b      	muls	r3, r3
 800cc6c:	68ba      	ldr	r2, [r7, #8]
 800cc6e:	4353      	muls	r3, r2
 800cc70:	68ba      	ldr	r2, [r7, #8]
 800cc72:	435a      	muls	r2, r3
 800cc74:	0013      	movs	r3, r2
 800cc76:	011b      	lsls	r3, r3, #4
 800cc78:	1a9b      	subs	r3, r3, r2
 800cc7a:	43db      	mvns	r3, r3
 800cc7c:	400b      	ands	r3, r1
 800cc7e:	001a      	movs	r2, r3
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	435b      	muls	r3, r3
 800cc84:	68b9      	ldr	r1, [r7, #8]
 800cc86:	434b      	muls	r3, r1
 800cc88:	68b9      	ldr	r1, [r7, #8]
 800cc8a:	434b      	muls	r3, r1
 800cc8c:	6879      	ldr	r1, [r7, #4]
 800cc8e:	434b      	muls	r3, r1
 800cc90:	431a      	orrs	r2, r3
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	621a      	str	r2, [r3, #32]
}
 800cc96:	46c0      	nop			; (mov r8, r8)
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	b004      	add	sp, #16
 800cc9c:	bd80      	pop	{r7, pc}

0800cc9e <LL_GPIO_SetAFPin_8_15>:
{
 800cc9e:	b580      	push	{r7, lr}
 800cca0:	b084      	sub	sp, #16
 800cca2:	af00      	add	r7, sp, #0
 800cca4:	60f8      	str	r0, [r7, #12]
 800cca6:	60b9      	str	r1, [r7, #8]
 800cca8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800ccae:	68bb      	ldr	r3, [r7, #8]
 800ccb0:	0a1b      	lsrs	r3, r3, #8
 800ccb2:	68ba      	ldr	r2, [r7, #8]
 800ccb4:	0a12      	lsrs	r2, r2, #8
 800ccb6:	4353      	muls	r3, r2
 800ccb8:	68ba      	ldr	r2, [r7, #8]
 800ccba:	0a12      	lsrs	r2, r2, #8
 800ccbc:	4353      	muls	r3, r2
 800ccbe:	68ba      	ldr	r2, [r7, #8]
 800ccc0:	0a12      	lsrs	r2, r2, #8
 800ccc2:	435a      	muls	r2, r3
 800ccc4:	0013      	movs	r3, r2
 800ccc6:	011b      	lsls	r3, r3, #4
 800ccc8:	1a9b      	subs	r3, r3, r2
 800ccca:	43db      	mvns	r3, r3
 800cccc:	400b      	ands	r3, r1
 800ccce:	001a      	movs	r2, r3
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	0a1b      	lsrs	r3, r3, #8
 800ccd4:	68b9      	ldr	r1, [r7, #8]
 800ccd6:	0a09      	lsrs	r1, r1, #8
 800ccd8:	434b      	muls	r3, r1
 800ccda:	68b9      	ldr	r1, [r7, #8]
 800ccdc:	0a09      	lsrs	r1, r1, #8
 800ccde:	434b      	muls	r3, r1
 800cce0:	68b9      	ldr	r1, [r7, #8]
 800cce2:	0a09      	lsrs	r1, r1, #8
 800cce4:	434b      	muls	r3, r1
 800cce6:	6879      	ldr	r1, [r7, #4]
 800cce8:	434b      	muls	r3, r1
 800ccea:	431a      	orrs	r2, r3
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	625a      	str	r2, [r3, #36]	; 0x24
}
 800ccf0:	46c0      	nop			; (mov r8, r8)
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	b004      	add	sp, #16
 800ccf6:	bd80      	pop	{r7, pc}

0800ccf8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b084      	sub	sp, #16
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
 800cd00:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800cd02:	2300      	movs	r3, #0
 800cd04:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800cd06:	e047      	b.n	800cd98 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	2101      	movs	r1, #1
 800cd0e:	68fa      	ldr	r2, [r7, #12]
 800cd10:	4091      	lsls	r1, r2
 800cd12:	000a      	movs	r2, r1
 800cd14:	4013      	ands	r3, r2
 800cd16:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d039      	beq.n	800cd92 <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	685b      	ldr	r3, [r3, #4]
 800cd22:	2b01      	cmp	r3, #1
 800cd24:	d003      	beq.n	800cd2e <LL_GPIO_Init+0x36>
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	685b      	ldr	r3, [r3, #4]
 800cd2a:	2b02      	cmp	r3, #2
 800cd2c:	d10d      	bne.n	800cd4a <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	689a      	ldr	r2, [r3, #8]
 800cd32:	68b9      	ldr	r1, [r7, #8]
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	0018      	movs	r0, r3
 800cd38:	f7ff ff56 	bl	800cbe8 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	68da      	ldr	r2, [r3, #12]
 800cd40:	68b9      	ldr	r1, [r7, #8]
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	0018      	movs	r0, r3
 800cd46:	f7ff ff3a 	bl	800cbbe <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	691a      	ldr	r2, [r3, #16]
 800cd4e:	68b9      	ldr	r1, [r7, #8]
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	0018      	movs	r0, r3
 800cd54:	f7ff ff64 	bl	800cc20 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	685b      	ldr	r3, [r3, #4]
 800cd5c:	2b02      	cmp	r3, #2
 800cd5e:	d111      	bne.n	800cd84 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800cd60:	68bb      	ldr	r3, [r7, #8]
 800cd62:	2bff      	cmp	r3, #255	; 0xff
 800cd64:	d807      	bhi.n	800cd76 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	695a      	ldr	r2, [r3, #20]
 800cd6a:	68b9      	ldr	r1, [r7, #8]
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	0018      	movs	r0, r3
 800cd70:	f7ff ff72 	bl	800cc58 <LL_GPIO_SetAFPin_0_7>
 800cd74:	e006      	b.n	800cd84 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	695a      	ldr	r2, [r3, #20]
 800cd7a:	68b9      	ldr	r1, [r7, #8]
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	0018      	movs	r0, r3
 800cd80:	f7ff ff8d 	bl	800cc9e <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	685a      	ldr	r2, [r3, #4]
 800cd88:	68b9      	ldr	r1, [r7, #8]
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	0018      	movs	r0, r3
 800cd8e:	f7ff fefa 	bl	800cb86 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	3301      	adds	r3, #1
 800cd96:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	681a      	ldr	r2, [r3, #0]
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	40da      	lsrs	r2, r3
 800cda0:	1e13      	subs	r3, r2, #0
 800cda2:	d1b1      	bne.n	800cd08 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800cda4:	2300      	movs	r3, #0
}
 800cda6:	0018      	movs	r0, r3
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	b004      	add	sp, #16
 800cdac:	bd80      	pop	{r7, pc}
	...

0800cdb0 <LL_RCC_HSI_IsReady>:
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800cdb4:	4b07      	ldr	r3, [pc, #28]	; (800cdd4 <LL_RCC_HSI_IsReady+0x24>)
 800cdb6:	681a      	ldr	r2, [r3, #0]
 800cdb8:	2380      	movs	r3, #128	; 0x80
 800cdba:	00db      	lsls	r3, r3, #3
 800cdbc:	401a      	ands	r2, r3
 800cdbe:	2380      	movs	r3, #128	; 0x80
 800cdc0:	00db      	lsls	r3, r3, #3
 800cdc2:	429a      	cmp	r2, r3
 800cdc4:	d101      	bne.n	800cdca <LL_RCC_HSI_IsReady+0x1a>
 800cdc6:	2301      	movs	r3, #1
 800cdc8:	e000      	b.n	800cdcc <LL_RCC_HSI_IsReady+0x1c>
 800cdca:	2300      	movs	r3, #0
}
 800cdcc:	0018      	movs	r0, r3
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bd80      	pop	{r7, pc}
 800cdd2:	46c0      	nop			; (mov r8, r8)
 800cdd4:	40021000 	.word	0x40021000

0800cdd8 <LL_RCC_LSE_IsReady>:
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800cddc:	4b05      	ldr	r3, [pc, #20]	; (800cdf4 <LL_RCC_LSE_IsReady+0x1c>)
 800cdde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cde0:	2202      	movs	r2, #2
 800cde2:	4013      	ands	r3, r2
 800cde4:	2b02      	cmp	r3, #2
 800cde6:	d101      	bne.n	800cdec <LL_RCC_LSE_IsReady+0x14>
 800cde8:	2301      	movs	r3, #1
 800cdea:	e000      	b.n	800cdee <LL_RCC_LSE_IsReady+0x16>
 800cdec:	2300      	movs	r3, #0
}
 800cdee:	0018      	movs	r0, r3
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}
 800cdf4:	40021000 	.word	0x40021000

0800cdf8 <LL_RCC_GetSysClkSource>:
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800cdfc:	4b03      	ldr	r3, [pc, #12]	; (800ce0c <LL_RCC_GetSysClkSource+0x14>)
 800cdfe:	689b      	ldr	r3, [r3, #8]
 800ce00:	2238      	movs	r2, #56	; 0x38
 800ce02:	4013      	ands	r3, r2
}
 800ce04:	0018      	movs	r0, r3
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bd80      	pop	{r7, pc}
 800ce0a:	46c0      	nop			; (mov r8, r8)
 800ce0c:	40021000 	.word	0x40021000

0800ce10 <LL_RCC_GetAHBPrescaler>:
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800ce14:	4b03      	ldr	r3, [pc, #12]	; (800ce24 <LL_RCC_GetAHBPrescaler+0x14>)
 800ce16:	689a      	ldr	r2, [r3, #8]
 800ce18:	23f0      	movs	r3, #240	; 0xf0
 800ce1a:	011b      	lsls	r3, r3, #4
 800ce1c:	4013      	ands	r3, r2
}
 800ce1e:	0018      	movs	r0, r3
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bd80      	pop	{r7, pc}
 800ce24:	40021000 	.word	0x40021000

0800ce28 <LL_RCC_GetAPB1Prescaler>:
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800ce2c:	4b03      	ldr	r3, [pc, #12]	; (800ce3c <LL_RCC_GetAPB1Prescaler+0x14>)
 800ce2e:	689a      	ldr	r2, [r3, #8]
 800ce30:	23e0      	movs	r3, #224	; 0xe0
 800ce32:	01db      	lsls	r3, r3, #7
 800ce34:	4013      	ands	r3, r2
}
 800ce36:	0018      	movs	r0, r3
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	bd80      	pop	{r7, pc}
 800ce3c:	40021000 	.word	0x40021000

0800ce40 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  * (*) feature not available on all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b082      	sub	sp, #8
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800ce48:	4b05      	ldr	r3, [pc, #20]	; (800ce60 <LL_RCC_GetUSARTClockSource+0x20>)
 800ce4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce4c:	687a      	ldr	r2, [r7, #4]
 800ce4e:	401a      	ands	r2, r3
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	041b      	lsls	r3, r3, #16
 800ce54:	4313      	orrs	r3, r2
}
 800ce56:	0018      	movs	r0, r3
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	b002      	add	sp, #8
 800ce5c:	bd80      	pop	{r7, pc}
 800ce5e:	46c0      	nop			; (mov r8, r8)
 800ce60:	40021000 	.word	0x40021000

0800ce64 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800ce68:	4b03      	ldr	r3, [pc, #12]	; (800ce78 <LL_RCC_PLL_GetN+0x14>)
 800ce6a:	68db      	ldr	r3, [r3, #12]
 800ce6c:	0a1b      	lsrs	r3, r3, #8
 800ce6e:	227f      	movs	r2, #127	; 0x7f
 800ce70:	4013      	ands	r3, r2
}
 800ce72:	0018      	movs	r0, r3
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}
 800ce78:	40021000 	.word	0x40021000

0800ce7c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800ce80:	4b03      	ldr	r3, [pc, #12]	; (800ce90 <LL_RCC_PLL_GetR+0x14>)
 800ce82:	68db      	ldr	r3, [r3, #12]
 800ce84:	0f5b      	lsrs	r3, r3, #29
 800ce86:	075b      	lsls	r3, r3, #29
}
 800ce88:	0018      	movs	r0, r3
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd80      	pop	{r7, pc}
 800ce8e:	46c0      	nop			; (mov r8, r8)
 800ce90:	40021000 	.word	0x40021000

0800ce94 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800ce98:	4b03      	ldr	r3, [pc, #12]	; (800cea8 <LL_RCC_PLL_GetMainSource+0x14>)
 800ce9a:	68db      	ldr	r3, [r3, #12]
 800ce9c:	2203      	movs	r2, #3
 800ce9e:	4013      	ands	r3, r2
}
 800cea0:	0018      	movs	r0, r3
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd80      	pop	{r7, pc}
 800cea6:	46c0      	nop			; (mov r8, r8)
 800cea8:	40021000 	.word	0x40021000

0800ceac <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800ceb0:	4b03      	ldr	r3, [pc, #12]	; (800cec0 <LL_RCC_PLL_GetDivider+0x14>)
 800ceb2:	68db      	ldr	r3, [r3, #12]
 800ceb4:	2270      	movs	r2, #112	; 0x70
 800ceb6:	4013      	ands	r3, r2
}
 800ceb8:	0018      	movs	r0, r3
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}
 800cebe:	46c0      	nop			; (mov r8, r8)
 800cec0:	40021000 	.word	0x40021000

0800cec4 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b082      	sub	sp, #8
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800cecc:	f000 f8a8 	bl	800d020 <RCC_GetSystemClockFreq>
 800ced0:	0002      	movs	r2, r0
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	0018      	movs	r0, r3
 800cedc:	f000 f8ce 	bl	800d07c <RCC_GetHCLKClockFreq>
 800cee0:	0002      	movs	r2, r0
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	685b      	ldr	r3, [r3, #4]
 800ceea:	0018      	movs	r0, r3
 800ceec:	f000 f8de 	bl	800d0ac <RCC_GetPCLK1ClockFreq>
 800cef0:	0002      	movs	r2, r0
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	609a      	str	r2, [r3, #8]
}
 800cef6:	46c0      	nop			; (mov r8, r8)
 800cef8:	46bd      	mov	sp, r7
 800cefa:	b002      	add	sp, #8
 800cefc:	bd80      	pop	{r7, pc}
	...

0800cf00 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b084      	sub	sp, #16
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800cf08:	2300      	movs	r3, #0
 800cf0a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	2b03      	cmp	r3, #3
 800cf10:	d134      	bne.n	800cf7c <LL_RCC_GetUSARTClockFreq+0x7c>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	0018      	movs	r0, r3
 800cf16:	f7ff ff93 	bl	800ce40 <LL_RCC_GetUSARTClockSource>
 800cf1a:	0003      	movs	r3, r0
 800cf1c:	4a39      	ldr	r2, [pc, #228]	; (800d004 <LL_RCC_GetUSARTClockFreq+0x104>)
 800cf1e:	4293      	cmp	r3, r2
 800cf20:	d016      	beq.n	800cf50 <LL_RCC_GetUSARTClockFreq+0x50>
 800cf22:	4a38      	ldr	r2, [pc, #224]	; (800d004 <LL_RCC_GetUSARTClockFreq+0x104>)
 800cf24:	4293      	cmp	r3, r2
 800cf26:	d81c      	bhi.n	800cf62 <LL_RCC_GetUSARTClockFreq+0x62>
 800cf28:	4a37      	ldr	r2, [pc, #220]	; (800d008 <LL_RCC_GetUSARTClockFreq+0x108>)
 800cf2a:	4293      	cmp	r3, r2
 800cf2c:	d003      	beq.n	800cf36 <LL_RCC_GetUSARTClockFreq+0x36>
 800cf2e:	4a37      	ldr	r2, [pc, #220]	; (800d00c <LL_RCC_GetUSARTClockFreq+0x10c>)
 800cf30:	4293      	cmp	r3, r2
 800cf32:	d005      	beq.n	800cf40 <LL_RCC_GetUSARTClockFreq+0x40>
 800cf34:	e015      	b.n	800cf62 <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800cf36:	f000 f873 	bl	800d020 <RCC_GetSystemClockFreq>
 800cf3a:	0003      	movs	r3, r0
 800cf3c:	60fb      	str	r3, [r7, #12]
        break;
 800cf3e:	e05c      	b.n	800cffa <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800cf40:	f7ff ff36 	bl	800cdb0 <LL_RCC_HSI_IsReady>
 800cf44:	0003      	movs	r3, r0
 800cf46:	2b01      	cmp	r3, #1
 800cf48:	d150      	bne.n	800cfec <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = HSI_VALUE;
 800cf4a:	4b31      	ldr	r3, [pc, #196]	; (800d010 <LL_RCC_GetUSARTClockFreq+0x110>)
 800cf4c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800cf4e:	e04d      	b.n	800cfec <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800cf50:	f7ff ff42 	bl	800cdd8 <LL_RCC_LSE_IsReady>
 800cf54:	0003      	movs	r3, r0
 800cf56:	2b01      	cmp	r3, #1
 800cf58:	d14a      	bne.n	800cff0 <LL_RCC_GetUSARTClockFreq+0xf0>
        {
          usart_frequency = LSE_VALUE;
 800cf5a:	2380      	movs	r3, #128	; 0x80
 800cf5c:	021b      	lsls	r3, r3, #8
 800cf5e:	60fb      	str	r3, [r7, #12]
        }
        break;
 800cf60:	e046      	b.n	800cff0 <LL_RCC_GetUSARTClockFreq+0xf0>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800cf62:	f000 f85d 	bl	800d020 <RCC_GetSystemClockFreq>
 800cf66:	0003      	movs	r3, r0
 800cf68:	0018      	movs	r0, r3
 800cf6a:	f000 f887 	bl	800d07c <RCC_GetHCLKClockFreq>
 800cf6e:	0003      	movs	r3, r0
 800cf70:	0018      	movs	r0, r3
 800cf72:	f000 f89b 	bl	800d0ac <RCC_GetPCLK1ClockFreq>
 800cf76:	0003      	movs	r3, r0
 800cf78:	60fb      	str	r3, [r7, #12]
        break;
 800cf7a:	e03e      	b.n	800cffa <LL_RCC_GetUSARTClockFreq+0xfa>
    }
  }
#if defined(RCC_CCIPR_USART2SEL)
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	2b0c      	cmp	r3, #12
 800cf80:	d13b      	bne.n	800cffa <LL_RCC_GetUSARTClockFreq+0xfa>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	0018      	movs	r0, r3
 800cf86:	f7ff ff5b 	bl	800ce40 <LL_RCC_GetUSARTClockSource>
 800cf8a:	0003      	movs	r3, r0
 800cf8c:	4a21      	ldr	r2, [pc, #132]	; (800d014 <LL_RCC_GetUSARTClockFreq+0x114>)
 800cf8e:	4293      	cmp	r3, r2
 800cf90:	d016      	beq.n	800cfc0 <LL_RCC_GetUSARTClockFreq+0xc0>
 800cf92:	4a20      	ldr	r2, [pc, #128]	; (800d014 <LL_RCC_GetUSARTClockFreq+0x114>)
 800cf94:	4293      	cmp	r3, r2
 800cf96:	d81c      	bhi.n	800cfd2 <LL_RCC_GetUSARTClockFreq+0xd2>
 800cf98:	4a1f      	ldr	r2, [pc, #124]	; (800d018 <LL_RCC_GetUSARTClockFreq+0x118>)
 800cf9a:	4293      	cmp	r3, r2
 800cf9c:	d003      	beq.n	800cfa6 <LL_RCC_GetUSARTClockFreq+0xa6>
 800cf9e:	4a1f      	ldr	r2, [pc, #124]	; (800d01c <LL_RCC_GetUSARTClockFreq+0x11c>)
 800cfa0:	4293      	cmp	r3, r2
 800cfa2:	d005      	beq.n	800cfb0 <LL_RCC_GetUSARTClockFreq+0xb0>
 800cfa4:	e015      	b.n	800cfd2 <LL_RCC_GetUSARTClockFreq+0xd2>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800cfa6:	f000 f83b 	bl	800d020 <RCC_GetSystemClockFreq>
 800cfaa:	0003      	movs	r3, r0
 800cfac:	60fb      	str	r3, [r7, #12]
        break;
 800cfae:	e024      	b.n	800cffa <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800cfb0:	f7ff fefe 	bl	800cdb0 <LL_RCC_HSI_IsReady>
 800cfb4:	0003      	movs	r3, r0
 800cfb6:	2b01      	cmp	r3, #1
 800cfb8:	d11c      	bne.n	800cff4 <LL_RCC_GetUSARTClockFreq+0xf4>
        {
          usart_frequency = HSI_VALUE;
 800cfba:	4b15      	ldr	r3, [pc, #84]	; (800d010 <LL_RCC_GetUSARTClockFreq+0x110>)
 800cfbc:	60fb      	str	r3, [r7, #12]
        }
        break;
 800cfbe:	e019      	b.n	800cff4 <LL_RCC_GetUSARTClockFreq+0xf4>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800cfc0:	f7ff ff0a 	bl	800cdd8 <LL_RCC_LSE_IsReady>
 800cfc4:	0003      	movs	r3, r0
 800cfc6:	2b01      	cmp	r3, #1
 800cfc8:	d116      	bne.n	800cff8 <LL_RCC_GetUSARTClockFreq+0xf8>
        {
          usart_frequency = LSE_VALUE;
 800cfca:	2380      	movs	r3, #128	; 0x80
 800cfcc:	021b      	lsls	r3, r3, #8
 800cfce:	60fb      	str	r3, [r7, #12]
        }
        break;
 800cfd0:	e012      	b.n	800cff8 <LL_RCC_GetUSARTClockFreq+0xf8>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800cfd2:	f000 f825 	bl	800d020 <RCC_GetSystemClockFreq>
 800cfd6:	0003      	movs	r3, r0
 800cfd8:	0018      	movs	r0, r3
 800cfda:	f000 f84f 	bl	800d07c <RCC_GetHCLKClockFreq>
 800cfde:	0003      	movs	r3, r0
 800cfe0:	0018      	movs	r0, r3
 800cfe2:	f000 f863 	bl	800d0ac <RCC_GetPCLK1ClockFreq>
 800cfe6:	0003      	movs	r3, r0
 800cfe8:	60fb      	str	r3, [r7, #12]
        break;
 800cfea:	e006      	b.n	800cffa <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800cfec:	46c0      	nop			; (mov r8, r8)
 800cfee:	e004      	b.n	800cffa <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800cff0:	46c0      	nop			; (mov r8, r8)
 800cff2:	e002      	b.n	800cffa <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800cff4:	46c0      	nop			; (mov r8, r8)
 800cff6:	e000      	b.n	800cffa <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800cff8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 800cffa:	68fb      	ldr	r3, [r7, #12]
}
 800cffc:	0018      	movs	r0, r3
 800cffe:	46bd      	mov	sp, r7
 800d000:	b004      	add	sp, #16
 800d002:	bd80      	pop	{r7, pc}
 800d004:	00030003 	.word	0x00030003
 800d008:	00030001 	.word	0x00030001
 800d00c:	00030002 	.word	0x00030002
 800d010:	00f42400 	.word	0x00f42400
 800d014:	000c000c 	.word	0x000c000c
 800d018:	000c0004 	.word	0x000c0004
 800d01c:	000c0008 	.word	0x000c0008

0800d020 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b082      	sub	sp, #8
 800d024:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800d026:	f7ff fee7 	bl	800cdf8 <LL_RCC_GetSysClkSource>
 800d02a:	0003      	movs	r3, r0
 800d02c:	2b08      	cmp	r3, #8
 800d02e:	d002      	beq.n	800d036 <RCC_GetSystemClockFreq+0x16>
 800d030:	2b10      	cmp	r3, #16
 800d032:	d003      	beq.n	800d03c <RCC_GetSystemClockFreq+0x1c>
 800d034:	e007      	b.n	800d046 <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800d036:	4b0e      	ldr	r3, [pc, #56]	; (800d070 <RCC_GetSystemClockFreq+0x50>)
 800d038:	607b      	str	r3, [r7, #4]
      break;
 800d03a:	e014      	b.n	800d066 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800d03c:	f000 f84c 	bl	800d0d8 <RCC_PLL_GetFreqDomain_SYS>
 800d040:	0003      	movs	r3, r0
 800d042:	607b      	str	r3, [r7, #4]
      break;
 800d044:	e00f      	b.n	800d066 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800d046:	4b0b      	ldr	r3, [pc, #44]	; (800d074 <RCC_GetSystemClockFreq+0x54>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	0adb      	lsrs	r3, r3, #11
 800d04c:	2207      	movs	r2, #7
 800d04e:	4013      	ands	r3, r2
 800d050:	2201      	movs	r2, #1
 800d052:	409a      	lsls	r2, r3
 800d054:	0013      	movs	r3, r2
 800d056:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 800d058:	6839      	ldr	r1, [r7, #0]
 800d05a:	4807      	ldr	r0, [pc, #28]	; (800d078 <RCC_GetSystemClockFreq+0x58>)
 800d05c:	f7f3 f852 	bl	8000104 <__udivsi3>
 800d060:	0003      	movs	r3, r0
 800d062:	607b      	str	r3, [r7, #4]
      break;
 800d064:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 800d066:	687b      	ldr	r3, [r7, #4]
}
 800d068:	0018      	movs	r0, r3
 800d06a:	46bd      	mov	sp, r7
 800d06c:	b002      	add	sp, #8
 800d06e:	bd80      	pop	{r7, pc}
 800d070:	007a1200 	.word	0x007a1200
 800d074:	40021000 	.word	0x40021000
 800d078:	00f42400 	.word	0x00f42400

0800d07c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b082      	sub	sp, #8
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800d084:	f7ff fec4 	bl	800ce10 <LL_RCC_GetAHBPrescaler>
 800d088:	0003      	movs	r3, r0
 800d08a:	0a1b      	lsrs	r3, r3, #8
 800d08c:	220f      	movs	r2, #15
 800d08e:	401a      	ands	r2, r3
 800d090:	4b05      	ldr	r3, [pc, #20]	; (800d0a8 <RCC_GetHCLKClockFreq+0x2c>)
 800d092:	0092      	lsls	r2, r2, #2
 800d094:	58d3      	ldr	r3, [r2, r3]
 800d096:	221f      	movs	r2, #31
 800d098:	4013      	ands	r3, r2
 800d09a:	687a      	ldr	r2, [r7, #4]
 800d09c:	40da      	lsrs	r2, r3
 800d09e:	0013      	movs	r3, r2
}
 800d0a0:	0018      	movs	r0, r3
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	b002      	add	sp, #8
 800d0a6:	bd80      	pop	{r7, pc}
 800d0a8:	080115cc 	.word	0x080115cc

0800d0ac <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b082      	sub	sp, #8
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800d0b4:	f7ff feb8 	bl	800ce28 <LL_RCC_GetAPB1Prescaler>
 800d0b8:	0003      	movs	r3, r0
 800d0ba:	0b1a      	lsrs	r2, r3, #12
 800d0bc:	4b05      	ldr	r3, [pc, #20]	; (800d0d4 <RCC_GetPCLK1ClockFreq+0x28>)
 800d0be:	0092      	lsls	r2, r2, #2
 800d0c0:	58d3      	ldr	r3, [r2, r3]
 800d0c2:	221f      	movs	r2, #31
 800d0c4:	4013      	ands	r3, r2
 800d0c6:	687a      	ldr	r2, [r7, #4]
 800d0c8:	40da      	lsrs	r2, r3
 800d0ca:	0013      	movs	r3, r2
}
 800d0cc:	0018      	movs	r0, r3
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	b002      	add	sp, #8
 800d0d2:	bd80      	pop	{r7, pc}
 800d0d4:	0801160c 	.word	0x0801160c

0800d0d8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800d0d8:	b590      	push	{r4, r7, lr}
 800d0da:	b083      	sub	sp, #12
 800d0dc:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800d0de:	f7ff fed9 	bl	800ce94 <LL_RCC_PLL_GetMainSource>
 800d0e2:	0003      	movs	r3, r0
 800d0e4:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	2b02      	cmp	r3, #2
 800d0ea:	d003      	beq.n	800d0f4 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	2b03      	cmp	r3, #3
 800d0f0:	d003      	beq.n	800d0fa <RCC_PLL_GetFreqDomain_SYS+0x22>
 800d0f2:	e005      	b.n	800d100 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800d0f4:	4b13      	ldr	r3, [pc, #76]	; (800d144 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800d0f6:	607b      	str	r3, [r7, #4]
      break;
 800d0f8:	e005      	b.n	800d106 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800d0fa:	4b13      	ldr	r3, [pc, #76]	; (800d148 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 800d0fc:	607b      	str	r3, [r7, #4]
      break;
 800d0fe:	e002      	b.n	800d106 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 800d100:	4b10      	ldr	r3, [pc, #64]	; (800d144 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800d102:	607b      	str	r3, [r7, #4]
      break;
 800d104:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800d106:	f7ff fead 	bl	800ce64 <LL_RCC_PLL_GetN>
 800d10a:	0002      	movs	r2, r0
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	4353      	muls	r3, r2
 800d110:	001c      	movs	r4, r3
 800d112:	f7ff fecb 	bl	800ceac <LL_RCC_PLL_GetDivider>
 800d116:	0003      	movs	r3, r0
 800d118:	091b      	lsrs	r3, r3, #4
 800d11a:	3301      	adds	r3, #1
 800d11c:	0019      	movs	r1, r3
 800d11e:	0020      	movs	r0, r4
 800d120:	f7f2 fff0 	bl	8000104 <__udivsi3>
 800d124:	0003      	movs	r3, r0
 800d126:	001c      	movs	r4, r3
 800d128:	f7ff fea8 	bl	800ce7c <LL_RCC_PLL_GetR>
 800d12c:	0003      	movs	r3, r0
 800d12e:	0f5b      	lsrs	r3, r3, #29
 800d130:	3301      	adds	r3, #1
 800d132:	0019      	movs	r1, r3
 800d134:	0020      	movs	r0, r4
 800d136:	f7f2 ffe5 	bl	8000104 <__udivsi3>
 800d13a:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800d13c:	0018      	movs	r0, r3
 800d13e:	46bd      	mov	sp, r7
 800d140:	b003      	add	sp, #12
 800d142:	bd90      	pop	{r4, r7, pc}
 800d144:	00f42400 	.word	0x00f42400
 800d148:	007a1200 	.word	0x007a1200

0800d14c <LL_USART_IsEnabled>:
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b082      	sub	sp, #8
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	2201      	movs	r2, #1
 800d15a:	4013      	ands	r3, r2
 800d15c:	2b01      	cmp	r3, #1
 800d15e:	d101      	bne.n	800d164 <LL_USART_IsEnabled+0x18>
 800d160:	2301      	movs	r3, #1
 800d162:	e000      	b.n	800d166 <LL_USART_IsEnabled+0x1a>
 800d164:	2300      	movs	r3, #0
}
 800d166:	0018      	movs	r0, r3
 800d168:	46bd      	mov	sp, r7
 800d16a:	b002      	add	sp, #8
 800d16c:	bd80      	pop	{r7, pc}

0800d16e <LL_USART_SetPrescaler>:
{
 800d16e:	b580      	push	{r7, lr}
 800d170:	b082      	sub	sp, #8
 800d172:	af00      	add	r7, sp, #0
 800d174:	6078      	str	r0, [r7, #4]
 800d176:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d17c:	220f      	movs	r2, #15
 800d17e:	4393      	bics	r3, r2
 800d180:	683a      	ldr	r2, [r7, #0]
 800d182:	b292      	uxth	r2, r2
 800d184:	431a      	orrs	r2, r3
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800d18a:	46c0      	nop			; (mov r8, r8)
 800d18c:	46bd      	mov	sp, r7
 800d18e:	b002      	add	sp, #8
 800d190:	bd80      	pop	{r7, pc}
	...

0800d194 <LL_USART_SetStopBitsLength>:
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b082      	sub	sp, #8
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
 800d19c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	685b      	ldr	r3, [r3, #4]
 800d1a2:	4a05      	ldr	r2, [pc, #20]	; (800d1b8 <LL_USART_SetStopBitsLength+0x24>)
 800d1a4:	401a      	ands	r2, r3
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	431a      	orrs	r2, r3
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	605a      	str	r2, [r3, #4]
}
 800d1ae:	46c0      	nop			; (mov r8, r8)
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	b002      	add	sp, #8
 800d1b4:	bd80      	pop	{r7, pc}
 800d1b6:	46c0      	nop			; (mov r8, r8)
 800d1b8:	ffffcfff 	.word	0xffffcfff

0800d1bc <LL_USART_SetHWFlowCtrl>:
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b082      	sub	sp, #8
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
 800d1c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	689b      	ldr	r3, [r3, #8]
 800d1ca:	4a05      	ldr	r2, [pc, #20]	; (800d1e0 <LL_USART_SetHWFlowCtrl+0x24>)
 800d1cc:	401a      	ands	r2, r3
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	431a      	orrs	r2, r3
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	609a      	str	r2, [r3, #8]
}
 800d1d6:	46c0      	nop			; (mov r8, r8)
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	b002      	add	sp, #8
 800d1dc:	bd80      	pop	{r7, pc}
 800d1de:	46c0      	nop			; (mov r8, r8)
 800d1e0:	fffffcff 	.word	0xfffffcff

0800d1e4 <LL_USART_SetBaudRate>:
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b086      	sub	sp, #24
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	60f8      	str	r0, [r7, #12]
 800d1ec:	60b9      	str	r1, [r7, #8]
 800d1ee:	607a      	str	r2, [r7, #4]
 800d1f0:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	2b0b      	cmp	r3, #11
 800d1f6:	d843      	bhi.n	800d280 <LL_USART_SetBaudRate+0x9c>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800d1f8:	683a      	ldr	r2, [r7, #0]
 800d1fa:	2380      	movs	r3, #128	; 0x80
 800d1fc:	021b      	lsls	r3, r3, #8
 800d1fe:	429a      	cmp	r2, r3
 800d200:	d126      	bne.n	800d250 <LL_USART_SetBaudRate+0x6c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	b2db      	uxtb	r3, r3
 800d206:	001a      	movs	r2, r3
 800d208:	4b1f      	ldr	r3, [pc, #124]	; (800d288 <LL_USART_SetBaudRate+0xa4>)
 800d20a:	0092      	lsls	r2, r2, #2
 800d20c:	58d3      	ldr	r3, [r2, r3]
 800d20e:	0019      	movs	r1, r3
 800d210:	68b8      	ldr	r0, [r7, #8]
 800d212:	f7f2 ff77 	bl	8000104 <__udivsi3>
 800d216:	0003      	movs	r3, r0
 800d218:	005a      	lsls	r2, r3, #1
 800d21a:	6a3b      	ldr	r3, [r7, #32]
 800d21c:	085b      	lsrs	r3, r3, #1
 800d21e:	18d3      	adds	r3, r2, r3
 800d220:	6a39      	ldr	r1, [r7, #32]
 800d222:	0018      	movs	r0, r3
 800d224:	f7f2 ff6e 	bl	8000104 <__udivsi3>
 800d228:	0003      	movs	r3, r0
 800d22a:	b29b      	uxth	r3, r3
 800d22c:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800d22e:	697b      	ldr	r3, [r7, #20]
 800d230:	4a16      	ldr	r2, [pc, #88]	; (800d28c <LL_USART_SetBaudRate+0xa8>)
 800d232:	4013      	ands	r3, r2
 800d234:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d236:	697b      	ldr	r3, [r7, #20]
 800d238:	085b      	lsrs	r3, r3, #1
 800d23a:	b29b      	uxth	r3, r3
 800d23c:	001a      	movs	r2, r3
 800d23e:	2307      	movs	r3, #7
 800d240:	4013      	ands	r3, r2
 800d242:	693a      	ldr	r2, [r7, #16]
 800d244:	4313      	orrs	r3, r2
 800d246:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	693a      	ldr	r2, [r7, #16]
 800d24c:	60da      	str	r2, [r3, #12]
}
 800d24e:	e017      	b.n	800d280 <LL_USART_SetBaudRate+0x9c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	b2db      	uxtb	r3, r3
 800d254:	001a      	movs	r2, r3
 800d256:	4b0c      	ldr	r3, [pc, #48]	; (800d288 <LL_USART_SetBaudRate+0xa4>)
 800d258:	0092      	lsls	r2, r2, #2
 800d25a:	58d3      	ldr	r3, [r2, r3]
 800d25c:	0019      	movs	r1, r3
 800d25e:	68b8      	ldr	r0, [r7, #8]
 800d260:	f7f2 ff50 	bl	8000104 <__udivsi3>
 800d264:	0003      	movs	r3, r0
 800d266:	001a      	movs	r2, r3
 800d268:	6a3b      	ldr	r3, [r7, #32]
 800d26a:	085b      	lsrs	r3, r3, #1
 800d26c:	18d3      	adds	r3, r2, r3
 800d26e:	6a39      	ldr	r1, [r7, #32]
 800d270:	0018      	movs	r0, r3
 800d272:	f7f2 ff47 	bl	8000104 <__udivsi3>
 800d276:	0003      	movs	r3, r0
 800d278:	b29b      	uxth	r3, r3
 800d27a:	001a      	movs	r2, r3
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	60da      	str	r2, [r3, #12]
}
 800d280:	46c0      	nop			; (mov r8, r8)
 800d282:	46bd      	mov	sp, r7
 800d284:	b006      	add	sp, #24
 800d286:	bd80      	pop	{r7, pc}
 800d288:	08011680 	.word	0x08011680
 800d28c:	0000fff0 	.word	0x0000fff0

0800d290 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800d290:	b590      	push	{r4, r7, lr}
 800d292:	b08b      	sub	sp, #44	; 0x2c
 800d294:	af02      	add	r7, sp, #8
 800d296:	6078      	str	r0, [r7, #4]
 800d298:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800d29a:	231f      	movs	r3, #31
 800d29c:	18fb      	adds	r3, r7, r3
 800d29e:	2201      	movs	r2, #1
 800d2a0:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	0018      	movs	r0, r3
 800d2aa:	f7ff ff4f 	bl	800d14c <LL_USART_IsEnabled>
 800d2ae:	1e03      	subs	r3, r0, #0
 800d2b0:	d16a      	bne.n	800d388 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	4a38      	ldr	r2, [pc, #224]	; (800d398 <LL_USART_Init+0x108>)
 800d2b8:	401a      	ands	r2, r3
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	6899      	ldr	r1, [r3, #8]
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	691b      	ldr	r3, [r3, #16]
 800d2c2:	4319      	orrs	r1, r3
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	695b      	ldr	r3, [r3, #20]
 800d2c8:	4319      	orrs	r1, r3
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	69db      	ldr	r3, [r3, #28]
 800d2ce:	430b      	orrs	r3, r1
 800d2d0:	431a      	orrs	r2, r3
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	68da      	ldr	r2, [r3, #12]
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	0011      	movs	r1, r2
 800d2de:	0018      	movs	r0, r3
 800d2e0:	f7ff ff58 	bl	800d194 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	699a      	ldr	r2, [r3, #24]
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	0011      	movs	r1, r2
 800d2ec:	0018      	movs	r0, r3
 800d2ee:	f7ff ff65 	bl	800d1bc <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	4a29      	ldr	r2, [pc, #164]	; (800d39c <LL_USART_Init+0x10c>)
 800d2f6:	4293      	cmp	r3, r2
 800d2f8:	d105      	bne.n	800d306 <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800d2fa:	2003      	movs	r0, #3
 800d2fc:	f7ff fe00 	bl	800cf00 <LL_RCC_GetUSARTClockFreq>
 800d300:	0003      	movs	r3, r0
 800d302:	61bb      	str	r3, [r7, #24]
 800d304:	e022      	b.n	800d34c <LL_USART_Init+0xbc>
    }
    else if (USARTx == USART2)
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	4a25      	ldr	r2, [pc, #148]	; (800d3a0 <LL_USART_Init+0x110>)
 800d30a:	4293      	cmp	r3, r2
 800d30c:	d105      	bne.n	800d31a <LL_USART_Init+0x8a>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800d30e:	200c      	movs	r0, #12
 800d310:	f7ff fdf6 	bl	800cf00 <LL_RCC_GetUSARTClockFreq>
 800d314:	0003      	movs	r3, r0
 800d316:	61bb      	str	r3, [r7, #24]
 800d318:	e018      	b.n	800d34c <LL_USART_Init+0xbc>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* RCC_CCIPR_USART2SEL */
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	4a21      	ldr	r2, [pc, #132]	; (800d3a4 <LL_USART_Init+0x114>)
 800d31e:	4293      	cmp	r3, r2
 800d320:	d108      	bne.n	800d334 <LL_USART_Init+0xa4>
    {
#if defined(RCC_CCIPR_USART3SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800d322:	240c      	movs	r4, #12
 800d324:	193b      	adds	r3, r7, r4
 800d326:	0018      	movs	r0, r3
 800d328:	f7ff fdcc 	bl	800cec4 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800d32c:	193b      	adds	r3, r7, r4
 800d32e:	689b      	ldr	r3, [r3, #8]
 800d330:	61bb      	str	r3, [r7, #24]
 800d332:	e00b      	b.n	800d34c <LL_USART_Init+0xbc>
#endif /* RCC_CCIPR_USART3SEL */
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	4a1c      	ldr	r2, [pc, #112]	; (800d3a8 <LL_USART_Init+0x118>)
 800d338:	4293      	cmp	r3, r2
 800d33a:	d107      	bne.n	800d34c <LL_USART_Init+0xbc>
    {
#if defined(RCC_CCIPR_USART4SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART4_CLKSOURCE);
#else
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800d33c:	240c      	movs	r4, #12
 800d33e:	193b      	adds	r3, r7, r4
 800d340:	0018      	movs	r0, r3
 800d342:	f7ff fdbf 	bl	800cec4 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800d346:	193b      	adds	r3, r7, r4
 800d348:	689b      	ldr	r3, [r3, #8]
 800d34a:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800d34c:	69bb      	ldr	r3, [r7, #24]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d013      	beq.n	800d37a <LL_USART_Init+0xea>
        && (USART_InitStruct->BaudRate != 0U))
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	685b      	ldr	r3, [r3, #4]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d00f      	beq.n	800d37a <LL_USART_Init+0xea>
    {
      status = SUCCESS;
 800d35a:	231f      	movs	r3, #31
 800d35c:	18fb      	adds	r3, r7, r3
 800d35e:	2200      	movs	r2, #0
 800d360:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	681a      	ldr	r2, [r3, #0]
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	69dc      	ldr	r4, [r3, #28]
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	685b      	ldr	r3, [r3, #4]
 800d36e:	69b9      	ldr	r1, [r7, #24]
 800d370:	6878      	ldr	r0, [r7, #4]
 800d372:	9300      	str	r3, [sp, #0]
 800d374:	0023      	movs	r3, r4
 800d376:	f7ff ff35 	bl	800d1e4 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	681a      	ldr	r2, [r3, #0]
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	0011      	movs	r1, r2
 800d382:	0018      	movs	r0, r3
 800d384:	f7ff fef3 	bl	800d16e <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800d388:	231f      	movs	r3, #31
 800d38a:	18fb      	adds	r3, r7, r3
 800d38c:	781b      	ldrb	r3, [r3, #0]
}
 800d38e:	0018      	movs	r0, r3
 800d390:	46bd      	mov	sp, r7
 800d392:	b009      	add	sp, #36	; 0x24
 800d394:	bd90      	pop	{r4, r7, pc}
 800d396:	46c0      	nop			; (mov r8, r8)
 800d398:	efff69f3 	.word	0xefff69f3
 800d39c:	40013800 	.word	0x40013800
 800d3a0:	40004400 	.word	0x40004400
 800d3a4:	40004800 	.word	0x40004800
 800d3a8:	40004c00 	.word	0x40004c00

0800d3ac <__libc_init_array>:
 800d3ac:	b570      	push	{r4, r5, r6, lr}
 800d3ae:	2600      	movs	r6, #0
 800d3b0:	4d0c      	ldr	r5, [pc, #48]	; (800d3e4 <__libc_init_array+0x38>)
 800d3b2:	4c0d      	ldr	r4, [pc, #52]	; (800d3e8 <__libc_init_array+0x3c>)
 800d3b4:	1b64      	subs	r4, r4, r5
 800d3b6:	10a4      	asrs	r4, r4, #2
 800d3b8:	42a6      	cmp	r6, r4
 800d3ba:	d109      	bne.n	800d3d0 <__libc_init_array+0x24>
 800d3bc:	2600      	movs	r6, #0
 800d3be:	f001 f837 	bl	800e430 <_init>
 800d3c2:	4d0a      	ldr	r5, [pc, #40]	; (800d3ec <__libc_init_array+0x40>)
 800d3c4:	4c0a      	ldr	r4, [pc, #40]	; (800d3f0 <__libc_init_array+0x44>)
 800d3c6:	1b64      	subs	r4, r4, r5
 800d3c8:	10a4      	asrs	r4, r4, #2
 800d3ca:	42a6      	cmp	r6, r4
 800d3cc:	d105      	bne.n	800d3da <__libc_init_array+0x2e>
 800d3ce:	bd70      	pop	{r4, r5, r6, pc}
 800d3d0:	00b3      	lsls	r3, r6, #2
 800d3d2:	58eb      	ldr	r3, [r5, r3]
 800d3d4:	4798      	blx	r3
 800d3d6:	3601      	adds	r6, #1
 800d3d8:	e7ee      	b.n	800d3b8 <__libc_init_array+0xc>
 800d3da:	00b3      	lsls	r3, r6, #2
 800d3dc:	58eb      	ldr	r3, [r5, r3]
 800d3de:	4798      	blx	r3
 800d3e0:	3601      	adds	r6, #1
 800d3e2:	e7f2      	b.n	800d3ca <__libc_init_array+0x1e>
 800d3e4:	08011888 	.word	0x08011888
 800d3e8:	08011888 	.word	0x08011888
 800d3ec:	08011888 	.word	0x08011888
 800d3f0:	0801188c 	.word	0x0801188c

0800d3f4 <memset>:
 800d3f4:	0003      	movs	r3, r0
 800d3f6:	1882      	adds	r2, r0, r2
 800d3f8:	4293      	cmp	r3, r2
 800d3fa:	d100      	bne.n	800d3fe <memset+0xa>
 800d3fc:	4770      	bx	lr
 800d3fe:	7019      	strb	r1, [r3, #0]
 800d400:	3301      	adds	r3, #1
 800d402:	e7f9      	b.n	800d3f8 <memset+0x4>

0800d404 <sin>:
 800d404:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d406:	4a20      	ldr	r2, [pc, #128]	; (800d488 <sin+0x84>)
 800d408:	004b      	lsls	r3, r1, #1
 800d40a:	b087      	sub	sp, #28
 800d40c:	085b      	lsrs	r3, r3, #1
 800d40e:	4293      	cmp	r3, r2
 800d410:	dc06      	bgt.n	800d420 <sin+0x1c>
 800d412:	2300      	movs	r3, #0
 800d414:	2200      	movs	r2, #0
 800d416:	9300      	str	r3, [sp, #0]
 800d418:	2300      	movs	r3, #0
 800d41a:	f000 fe5b 	bl	800e0d4 <__kernel_sin>
 800d41e:	e006      	b.n	800d42e <sin+0x2a>
 800d420:	4a1a      	ldr	r2, [pc, #104]	; (800d48c <sin+0x88>)
 800d422:	4293      	cmp	r3, r2
 800d424:	dd05      	ble.n	800d432 <sin+0x2e>
 800d426:	0002      	movs	r2, r0
 800d428:	000b      	movs	r3, r1
 800d42a:	f7f4 fa19 	bl	8001860 <__aeabi_dsub>
 800d42e:	b007      	add	sp, #28
 800d430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d432:	aa02      	add	r2, sp, #8
 800d434:	f000 f82c 	bl	800d490 <__ieee754_rem_pio2>
 800d438:	9c04      	ldr	r4, [sp, #16]
 800d43a:	9d05      	ldr	r5, [sp, #20]
 800d43c:	2303      	movs	r3, #3
 800d43e:	4003      	ands	r3, r0
 800d440:	2b01      	cmp	r3, #1
 800d442:	d00a      	beq.n	800d45a <sin+0x56>
 800d444:	9802      	ldr	r0, [sp, #8]
 800d446:	9903      	ldr	r1, [sp, #12]
 800d448:	2b02      	cmp	r3, #2
 800d44a:	d00d      	beq.n	800d468 <sin+0x64>
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d115      	bne.n	800d47c <sin+0x78>
 800d450:	3301      	adds	r3, #1
 800d452:	9300      	str	r3, [sp, #0]
 800d454:	0022      	movs	r2, r4
 800d456:	002b      	movs	r3, r5
 800d458:	e7df      	b.n	800d41a <sin+0x16>
 800d45a:	0022      	movs	r2, r4
 800d45c:	9802      	ldr	r0, [sp, #8]
 800d45e:	9903      	ldr	r1, [sp, #12]
 800d460:	002b      	movs	r3, r5
 800d462:	f000 fa01 	bl	800d868 <__kernel_cos>
 800d466:	e7e2      	b.n	800d42e <sin+0x2a>
 800d468:	2301      	movs	r3, #1
 800d46a:	0022      	movs	r2, r4
 800d46c:	9300      	str	r3, [sp, #0]
 800d46e:	002b      	movs	r3, r5
 800d470:	f000 fe30 	bl	800e0d4 <__kernel_sin>
 800d474:	2380      	movs	r3, #128	; 0x80
 800d476:	061b      	lsls	r3, r3, #24
 800d478:	18c9      	adds	r1, r1, r3
 800d47a:	e7d8      	b.n	800d42e <sin+0x2a>
 800d47c:	0022      	movs	r2, r4
 800d47e:	002b      	movs	r3, r5
 800d480:	f000 f9f2 	bl	800d868 <__kernel_cos>
 800d484:	e7f6      	b.n	800d474 <sin+0x70>
 800d486:	46c0      	nop			; (mov r8, r8)
 800d488:	3fe921fb 	.word	0x3fe921fb
 800d48c:	7fefffff 	.word	0x7fefffff

0800d490 <__ieee754_rem_pio2>:
 800d490:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d492:	004b      	lsls	r3, r1, #1
 800d494:	b091      	sub	sp, #68	; 0x44
 800d496:	085b      	lsrs	r3, r3, #1
 800d498:	9302      	str	r3, [sp, #8]
 800d49a:	0017      	movs	r7, r2
 800d49c:	4bb6      	ldr	r3, [pc, #728]	; (800d778 <__ieee754_rem_pio2+0x2e8>)
 800d49e:	9a02      	ldr	r2, [sp, #8]
 800d4a0:	0004      	movs	r4, r0
 800d4a2:	000d      	movs	r5, r1
 800d4a4:	9109      	str	r1, [sp, #36]	; 0x24
 800d4a6:	429a      	cmp	r2, r3
 800d4a8:	dc09      	bgt.n	800d4be <__ieee754_rem_pio2+0x2e>
 800d4aa:	0002      	movs	r2, r0
 800d4ac:	000b      	movs	r3, r1
 800d4ae:	603a      	str	r2, [r7, #0]
 800d4b0:	607b      	str	r3, [r7, #4]
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	60ba      	str	r2, [r7, #8]
 800d4b8:	60fb      	str	r3, [r7, #12]
 800d4ba:	2600      	movs	r6, #0
 800d4bc:	e025      	b.n	800d50a <__ieee754_rem_pio2+0x7a>
 800d4be:	4baf      	ldr	r3, [pc, #700]	; (800d77c <__ieee754_rem_pio2+0x2ec>)
 800d4c0:	9a02      	ldr	r2, [sp, #8]
 800d4c2:	429a      	cmp	r2, r3
 800d4c4:	dd00      	ble.n	800d4c8 <__ieee754_rem_pio2+0x38>
 800d4c6:	e06e      	b.n	800d5a6 <__ieee754_rem_pio2+0x116>
 800d4c8:	4ead      	ldr	r6, [pc, #692]	; (800d780 <__ieee754_rem_pio2+0x2f0>)
 800d4ca:	4aae      	ldr	r2, [pc, #696]	; (800d784 <__ieee754_rem_pio2+0x2f4>)
 800d4cc:	2d00      	cmp	r5, #0
 800d4ce:	dd35      	ble.n	800d53c <__ieee754_rem_pio2+0xac>
 800d4d0:	0020      	movs	r0, r4
 800d4d2:	0029      	movs	r1, r5
 800d4d4:	4baa      	ldr	r3, [pc, #680]	; (800d780 <__ieee754_rem_pio2+0x2f0>)
 800d4d6:	f7f4 f9c3 	bl	8001860 <__aeabi_dsub>
 800d4da:	9b02      	ldr	r3, [sp, #8]
 800d4dc:	0004      	movs	r4, r0
 800d4de:	000d      	movs	r5, r1
 800d4e0:	42b3      	cmp	r3, r6
 800d4e2:	d015      	beq.n	800d510 <__ieee754_rem_pio2+0x80>
 800d4e4:	4aa8      	ldr	r2, [pc, #672]	; (800d788 <__ieee754_rem_pio2+0x2f8>)
 800d4e6:	4ba9      	ldr	r3, [pc, #676]	; (800d78c <__ieee754_rem_pio2+0x2fc>)
 800d4e8:	f7f4 f9ba 	bl	8001860 <__aeabi_dsub>
 800d4ec:	0002      	movs	r2, r0
 800d4ee:	000b      	movs	r3, r1
 800d4f0:	0020      	movs	r0, r4
 800d4f2:	603a      	str	r2, [r7, #0]
 800d4f4:	607b      	str	r3, [r7, #4]
 800d4f6:	0029      	movs	r1, r5
 800d4f8:	f7f4 f9b2 	bl	8001860 <__aeabi_dsub>
 800d4fc:	4aa2      	ldr	r2, [pc, #648]	; (800d788 <__ieee754_rem_pio2+0x2f8>)
 800d4fe:	4ba3      	ldr	r3, [pc, #652]	; (800d78c <__ieee754_rem_pio2+0x2fc>)
 800d500:	f7f4 f9ae 	bl	8001860 <__aeabi_dsub>
 800d504:	2601      	movs	r6, #1
 800d506:	60b8      	str	r0, [r7, #8]
 800d508:	60f9      	str	r1, [r7, #12]
 800d50a:	0030      	movs	r0, r6
 800d50c:	b011      	add	sp, #68	; 0x44
 800d50e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d510:	22d3      	movs	r2, #211	; 0xd3
 800d512:	4b9e      	ldr	r3, [pc, #632]	; (800d78c <__ieee754_rem_pio2+0x2fc>)
 800d514:	0552      	lsls	r2, r2, #21
 800d516:	f7f4 f9a3 	bl	8001860 <__aeabi_dsub>
 800d51a:	4a9d      	ldr	r2, [pc, #628]	; (800d790 <__ieee754_rem_pio2+0x300>)
 800d51c:	4b9d      	ldr	r3, [pc, #628]	; (800d794 <__ieee754_rem_pio2+0x304>)
 800d51e:	0004      	movs	r4, r0
 800d520:	000d      	movs	r5, r1
 800d522:	f7f4 f99d 	bl	8001860 <__aeabi_dsub>
 800d526:	0002      	movs	r2, r0
 800d528:	000b      	movs	r3, r1
 800d52a:	0020      	movs	r0, r4
 800d52c:	603a      	str	r2, [r7, #0]
 800d52e:	607b      	str	r3, [r7, #4]
 800d530:	0029      	movs	r1, r5
 800d532:	f7f4 f995 	bl	8001860 <__aeabi_dsub>
 800d536:	4a96      	ldr	r2, [pc, #600]	; (800d790 <__ieee754_rem_pio2+0x300>)
 800d538:	4b96      	ldr	r3, [pc, #600]	; (800d794 <__ieee754_rem_pio2+0x304>)
 800d53a:	e7e1      	b.n	800d500 <__ieee754_rem_pio2+0x70>
 800d53c:	0020      	movs	r0, r4
 800d53e:	0029      	movs	r1, r5
 800d540:	4b8f      	ldr	r3, [pc, #572]	; (800d780 <__ieee754_rem_pio2+0x2f0>)
 800d542:	f7f2 ffb1 	bl	80004a8 <__aeabi_dadd>
 800d546:	9b02      	ldr	r3, [sp, #8]
 800d548:	0004      	movs	r4, r0
 800d54a:	000d      	movs	r5, r1
 800d54c:	42b3      	cmp	r3, r6
 800d54e:	d014      	beq.n	800d57a <__ieee754_rem_pio2+0xea>
 800d550:	4a8d      	ldr	r2, [pc, #564]	; (800d788 <__ieee754_rem_pio2+0x2f8>)
 800d552:	4b8e      	ldr	r3, [pc, #568]	; (800d78c <__ieee754_rem_pio2+0x2fc>)
 800d554:	f7f2 ffa8 	bl	80004a8 <__aeabi_dadd>
 800d558:	0002      	movs	r2, r0
 800d55a:	000b      	movs	r3, r1
 800d55c:	0020      	movs	r0, r4
 800d55e:	603a      	str	r2, [r7, #0]
 800d560:	607b      	str	r3, [r7, #4]
 800d562:	0029      	movs	r1, r5
 800d564:	f7f4 f97c 	bl	8001860 <__aeabi_dsub>
 800d568:	4a87      	ldr	r2, [pc, #540]	; (800d788 <__ieee754_rem_pio2+0x2f8>)
 800d56a:	4b88      	ldr	r3, [pc, #544]	; (800d78c <__ieee754_rem_pio2+0x2fc>)
 800d56c:	f7f2 ff9c 	bl	80004a8 <__aeabi_dadd>
 800d570:	2601      	movs	r6, #1
 800d572:	60b8      	str	r0, [r7, #8]
 800d574:	60f9      	str	r1, [r7, #12]
 800d576:	4276      	negs	r6, r6
 800d578:	e7c7      	b.n	800d50a <__ieee754_rem_pio2+0x7a>
 800d57a:	22d3      	movs	r2, #211	; 0xd3
 800d57c:	4b83      	ldr	r3, [pc, #524]	; (800d78c <__ieee754_rem_pio2+0x2fc>)
 800d57e:	0552      	lsls	r2, r2, #21
 800d580:	f7f2 ff92 	bl	80004a8 <__aeabi_dadd>
 800d584:	4a82      	ldr	r2, [pc, #520]	; (800d790 <__ieee754_rem_pio2+0x300>)
 800d586:	4b83      	ldr	r3, [pc, #524]	; (800d794 <__ieee754_rem_pio2+0x304>)
 800d588:	0004      	movs	r4, r0
 800d58a:	000d      	movs	r5, r1
 800d58c:	f7f2 ff8c 	bl	80004a8 <__aeabi_dadd>
 800d590:	0002      	movs	r2, r0
 800d592:	000b      	movs	r3, r1
 800d594:	0020      	movs	r0, r4
 800d596:	603a      	str	r2, [r7, #0]
 800d598:	607b      	str	r3, [r7, #4]
 800d59a:	0029      	movs	r1, r5
 800d59c:	f7f4 f960 	bl	8001860 <__aeabi_dsub>
 800d5a0:	4a7b      	ldr	r2, [pc, #492]	; (800d790 <__ieee754_rem_pio2+0x300>)
 800d5a2:	4b7c      	ldr	r3, [pc, #496]	; (800d794 <__ieee754_rem_pio2+0x304>)
 800d5a4:	e7e2      	b.n	800d56c <__ieee754_rem_pio2+0xdc>
 800d5a6:	4b7c      	ldr	r3, [pc, #496]	; (800d798 <__ieee754_rem_pio2+0x308>)
 800d5a8:	9a02      	ldr	r2, [sp, #8]
 800d5aa:	429a      	cmp	r2, r3
 800d5ac:	dd00      	ble.n	800d5b0 <__ieee754_rem_pio2+0x120>
 800d5ae:	e0d3      	b.n	800d758 <__ieee754_rem_pio2+0x2c8>
 800d5b0:	0020      	movs	r0, r4
 800d5b2:	0029      	movs	r1, r5
 800d5b4:	f000 fe3a 	bl	800e22c <fabs>
 800d5b8:	4a78      	ldr	r2, [pc, #480]	; (800d79c <__ieee754_rem_pio2+0x30c>)
 800d5ba:	4b79      	ldr	r3, [pc, #484]	; (800d7a0 <__ieee754_rem_pio2+0x310>)
 800d5bc:	0004      	movs	r4, r0
 800d5be:	000d      	movs	r5, r1
 800d5c0:	f7f3 fee2 	bl	8001388 <__aeabi_dmul>
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	4b77      	ldr	r3, [pc, #476]	; (800d7a4 <__ieee754_rem_pio2+0x314>)
 800d5c8:	f7f2 ff6e 	bl	80004a8 <__aeabi_dadd>
 800d5cc:	f7f4 fcda 	bl	8001f84 <__aeabi_d2iz>
 800d5d0:	0006      	movs	r6, r0
 800d5d2:	f7f4 fd0d 	bl	8001ff0 <__aeabi_i2d>
 800d5d6:	4a6b      	ldr	r2, [pc, #428]	; (800d784 <__ieee754_rem_pio2+0x2f4>)
 800d5d8:	4b69      	ldr	r3, [pc, #420]	; (800d780 <__ieee754_rem_pio2+0x2f0>)
 800d5da:	9006      	str	r0, [sp, #24]
 800d5dc:	9107      	str	r1, [sp, #28]
 800d5de:	f7f3 fed3 	bl	8001388 <__aeabi_dmul>
 800d5e2:	0002      	movs	r2, r0
 800d5e4:	000b      	movs	r3, r1
 800d5e6:	0020      	movs	r0, r4
 800d5e8:	0029      	movs	r1, r5
 800d5ea:	f7f4 f939 	bl	8001860 <__aeabi_dsub>
 800d5ee:	4a66      	ldr	r2, [pc, #408]	; (800d788 <__ieee754_rem_pio2+0x2f8>)
 800d5f0:	9004      	str	r0, [sp, #16]
 800d5f2:	9105      	str	r1, [sp, #20]
 800d5f4:	9806      	ldr	r0, [sp, #24]
 800d5f6:	9907      	ldr	r1, [sp, #28]
 800d5f8:	4b64      	ldr	r3, [pc, #400]	; (800d78c <__ieee754_rem_pio2+0x2fc>)
 800d5fa:	f7f3 fec5 	bl	8001388 <__aeabi_dmul>
 800d5fe:	0004      	movs	r4, r0
 800d600:	000d      	movs	r5, r1
 800d602:	2e1f      	cmp	r6, #31
 800d604:	dc0f      	bgt.n	800d626 <__ieee754_rem_pio2+0x196>
 800d606:	4a68      	ldr	r2, [pc, #416]	; (800d7a8 <__ieee754_rem_pio2+0x318>)
 800d608:	1e73      	subs	r3, r6, #1
 800d60a:	009b      	lsls	r3, r3, #2
 800d60c:	589b      	ldr	r3, [r3, r2]
 800d60e:	9a02      	ldr	r2, [sp, #8]
 800d610:	4293      	cmp	r3, r2
 800d612:	d008      	beq.n	800d626 <__ieee754_rem_pio2+0x196>
 800d614:	9804      	ldr	r0, [sp, #16]
 800d616:	9905      	ldr	r1, [sp, #20]
 800d618:	0022      	movs	r2, r4
 800d61a:	002b      	movs	r3, r5
 800d61c:	f7f4 f920 	bl	8001860 <__aeabi_dsub>
 800d620:	6038      	str	r0, [r7, #0]
 800d622:	6079      	str	r1, [r7, #4]
 800d624:	e012      	b.n	800d64c <__ieee754_rem_pio2+0x1bc>
 800d626:	0022      	movs	r2, r4
 800d628:	9804      	ldr	r0, [sp, #16]
 800d62a:	9905      	ldr	r1, [sp, #20]
 800d62c:	002b      	movs	r3, r5
 800d62e:	f7f4 f917 	bl	8001860 <__aeabi_dsub>
 800d632:	9b02      	ldr	r3, [sp, #8]
 800d634:	151b      	asrs	r3, r3, #20
 800d636:	9308      	str	r3, [sp, #32]
 800d638:	9a08      	ldr	r2, [sp, #32]
 800d63a:	004b      	lsls	r3, r1, #1
 800d63c:	0d5b      	lsrs	r3, r3, #21
 800d63e:	1ad3      	subs	r3, r2, r3
 800d640:	2b10      	cmp	r3, #16
 800d642:	dc21      	bgt.n	800d688 <__ieee754_rem_pio2+0x1f8>
 800d644:	0002      	movs	r2, r0
 800d646:	000b      	movs	r3, r1
 800d648:	603a      	str	r2, [r7, #0]
 800d64a:	607b      	str	r3, [r7, #4]
 800d64c:	9804      	ldr	r0, [sp, #16]
 800d64e:	9905      	ldr	r1, [sp, #20]
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	683a      	ldr	r2, [r7, #0]
 800d654:	9302      	str	r3, [sp, #8]
 800d656:	9b02      	ldr	r3, [sp, #8]
 800d658:	f7f4 f902 	bl	8001860 <__aeabi_dsub>
 800d65c:	0022      	movs	r2, r4
 800d65e:	002b      	movs	r3, r5
 800d660:	f7f4 f8fe 	bl	8001860 <__aeabi_dsub>
 800d664:	000b      	movs	r3, r1
 800d666:	0002      	movs	r2, r0
 800d668:	60ba      	str	r2, [r7, #8]
 800d66a:	60fb      	str	r3, [r7, #12]
 800d66c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d66e:	2b00      	cmp	r3, #0
 800d670:	db00      	blt.n	800d674 <__ieee754_rem_pio2+0x1e4>
 800d672:	e74a      	b.n	800d50a <__ieee754_rem_pio2+0x7a>
 800d674:	2280      	movs	r2, #128	; 0x80
 800d676:	0612      	lsls	r2, r2, #24
 800d678:	4694      	mov	ip, r2
 800d67a:	9b02      	ldr	r3, [sp, #8]
 800d67c:	1889      	adds	r1, r1, r2
 800d67e:	4463      	add	r3, ip
 800d680:	607b      	str	r3, [r7, #4]
 800d682:	60b8      	str	r0, [r7, #8]
 800d684:	60f9      	str	r1, [r7, #12]
 800d686:	e776      	b.n	800d576 <__ieee754_rem_pio2+0xe6>
 800d688:	22d3      	movs	r2, #211	; 0xd3
 800d68a:	9806      	ldr	r0, [sp, #24]
 800d68c:	9907      	ldr	r1, [sp, #28]
 800d68e:	4b3f      	ldr	r3, [pc, #252]	; (800d78c <__ieee754_rem_pio2+0x2fc>)
 800d690:	0552      	lsls	r2, r2, #21
 800d692:	f7f3 fe79 	bl	8001388 <__aeabi_dmul>
 800d696:	0004      	movs	r4, r0
 800d698:	000d      	movs	r5, r1
 800d69a:	0002      	movs	r2, r0
 800d69c:	000b      	movs	r3, r1
 800d69e:	9804      	ldr	r0, [sp, #16]
 800d6a0:	9905      	ldr	r1, [sp, #20]
 800d6a2:	f7f4 f8dd 	bl	8001860 <__aeabi_dsub>
 800d6a6:	0002      	movs	r2, r0
 800d6a8:	000b      	movs	r3, r1
 800d6aa:	9002      	str	r0, [sp, #8]
 800d6ac:	9103      	str	r1, [sp, #12]
 800d6ae:	9804      	ldr	r0, [sp, #16]
 800d6b0:	9905      	ldr	r1, [sp, #20]
 800d6b2:	f7f4 f8d5 	bl	8001860 <__aeabi_dsub>
 800d6b6:	0022      	movs	r2, r4
 800d6b8:	002b      	movs	r3, r5
 800d6ba:	f7f4 f8d1 	bl	8001860 <__aeabi_dsub>
 800d6be:	0004      	movs	r4, r0
 800d6c0:	000d      	movs	r5, r1
 800d6c2:	9806      	ldr	r0, [sp, #24]
 800d6c4:	9907      	ldr	r1, [sp, #28]
 800d6c6:	4a32      	ldr	r2, [pc, #200]	; (800d790 <__ieee754_rem_pio2+0x300>)
 800d6c8:	4b32      	ldr	r3, [pc, #200]	; (800d794 <__ieee754_rem_pio2+0x304>)
 800d6ca:	f7f3 fe5d 	bl	8001388 <__aeabi_dmul>
 800d6ce:	0022      	movs	r2, r4
 800d6d0:	002b      	movs	r3, r5
 800d6d2:	f7f4 f8c5 	bl	8001860 <__aeabi_dsub>
 800d6d6:	0002      	movs	r2, r0
 800d6d8:	000b      	movs	r3, r1
 800d6da:	0004      	movs	r4, r0
 800d6dc:	000d      	movs	r5, r1
 800d6de:	9802      	ldr	r0, [sp, #8]
 800d6e0:	9903      	ldr	r1, [sp, #12]
 800d6e2:	f7f4 f8bd 	bl	8001860 <__aeabi_dsub>
 800d6e6:	9a08      	ldr	r2, [sp, #32]
 800d6e8:	004b      	lsls	r3, r1, #1
 800d6ea:	0d5b      	lsrs	r3, r3, #21
 800d6ec:	1ad3      	subs	r3, r2, r3
 800d6ee:	2b31      	cmp	r3, #49	; 0x31
 800d6f0:	dc08      	bgt.n	800d704 <__ieee754_rem_pio2+0x274>
 800d6f2:	0002      	movs	r2, r0
 800d6f4:	000b      	movs	r3, r1
 800d6f6:	603a      	str	r2, [r7, #0]
 800d6f8:	607b      	str	r3, [r7, #4]
 800d6fa:	9a02      	ldr	r2, [sp, #8]
 800d6fc:	9b03      	ldr	r3, [sp, #12]
 800d6fe:	9204      	str	r2, [sp, #16]
 800d700:	9305      	str	r3, [sp, #20]
 800d702:	e7a3      	b.n	800d64c <__ieee754_rem_pio2+0x1bc>
 800d704:	22b8      	movs	r2, #184	; 0xb8
 800d706:	9806      	ldr	r0, [sp, #24]
 800d708:	9907      	ldr	r1, [sp, #28]
 800d70a:	4b22      	ldr	r3, [pc, #136]	; (800d794 <__ieee754_rem_pio2+0x304>)
 800d70c:	0592      	lsls	r2, r2, #22
 800d70e:	f7f3 fe3b 	bl	8001388 <__aeabi_dmul>
 800d712:	0004      	movs	r4, r0
 800d714:	000d      	movs	r5, r1
 800d716:	0002      	movs	r2, r0
 800d718:	000b      	movs	r3, r1
 800d71a:	9802      	ldr	r0, [sp, #8]
 800d71c:	9903      	ldr	r1, [sp, #12]
 800d71e:	f7f4 f89f 	bl	8001860 <__aeabi_dsub>
 800d722:	0002      	movs	r2, r0
 800d724:	000b      	movs	r3, r1
 800d726:	9004      	str	r0, [sp, #16]
 800d728:	9105      	str	r1, [sp, #20]
 800d72a:	9802      	ldr	r0, [sp, #8]
 800d72c:	9903      	ldr	r1, [sp, #12]
 800d72e:	f7f4 f897 	bl	8001860 <__aeabi_dsub>
 800d732:	0022      	movs	r2, r4
 800d734:	002b      	movs	r3, r5
 800d736:	f7f4 f893 	bl	8001860 <__aeabi_dsub>
 800d73a:	0004      	movs	r4, r0
 800d73c:	000d      	movs	r5, r1
 800d73e:	9806      	ldr	r0, [sp, #24]
 800d740:	9907      	ldr	r1, [sp, #28]
 800d742:	4a1a      	ldr	r2, [pc, #104]	; (800d7ac <__ieee754_rem_pio2+0x31c>)
 800d744:	4b1a      	ldr	r3, [pc, #104]	; (800d7b0 <__ieee754_rem_pio2+0x320>)
 800d746:	f7f3 fe1f 	bl	8001388 <__aeabi_dmul>
 800d74a:	0022      	movs	r2, r4
 800d74c:	002b      	movs	r3, r5
 800d74e:	f7f4 f887 	bl	8001860 <__aeabi_dsub>
 800d752:	0004      	movs	r4, r0
 800d754:	000d      	movs	r5, r1
 800d756:	e75d      	b.n	800d614 <__ieee754_rem_pio2+0x184>
 800d758:	4b16      	ldr	r3, [pc, #88]	; (800d7b4 <__ieee754_rem_pio2+0x324>)
 800d75a:	9a02      	ldr	r2, [sp, #8]
 800d75c:	429a      	cmp	r2, r3
 800d75e:	dd2b      	ble.n	800d7b8 <__ieee754_rem_pio2+0x328>
 800d760:	0022      	movs	r2, r4
 800d762:	002b      	movs	r3, r5
 800d764:	0020      	movs	r0, r4
 800d766:	0029      	movs	r1, r5
 800d768:	f7f4 f87a 	bl	8001860 <__aeabi_dsub>
 800d76c:	60b8      	str	r0, [r7, #8]
 800d76e:	60f9      	str	r1, [r7, #12]
 800d770:	6038      	str	r0, [r7, #0]
 800d772:	6079      	str	r1, [r7, #4]
 800d774:	e6a1      	b.n	800d4ba <__ieee754_rem_pio2+0x2a>
 800d776:	46c0      	nop			; (mov r8, r8)
 800d778:	3fe921fb 	.word	0x3fe921fb
 800d77c:	4002d97b 	.word	0x4002d97b
 800d780:	3ff921fb 	.word	0x3ff921fb
 800d784:	54400000 	.word	0x54400000
 800d788:	1a626331 	.word	0x1a626331
 800d78c:	3dd0b461 	.word	0x3dd0b461
 800d790:	2e037073 	.word	0x2e037073
 800d794:	3ba3198a 	.word	0x3ba3198a
 800d798:	413921fb 	.word	0x413921fb
 800d79c:	6dc9c883 	.word	0x6dc9c883
 800d7a0:	3fe45f30 	.word	0x3fe45f30
 800d7a4:	3fe00000 	.word	0x3fe00000
 800d7a8:	080116b0 	.word	0x080116b0
 800d7ac:	252049c1 	.word	0x252049c1
 800d7b0:	397b839a 	.word	0x397b839a
 800d7b4:	7fefffff 	.word	0x7fefffff
 800d7b8:	9a02      	ldr	r2, [sp, #8]
 800d7ba:	0020      	movs	r0, r4
 800d7bc:	1516      	asrs	r6, r2, #20
 800d7be:	4a27      	ldr	r2, [pc, #156]	; (800d85c <__ieee754_rem_pio2+0x3cc>)
 800d7c0:	18b6      	adds	r6, r6, r2
 800d7c2:	9a02      	ldr	r2, [sp, #8]
 800d7c4:	0533      	lsls	r3, r6, #20
 800d7c6:	1ad5      	subs	r5, r2, r3
 800d7c8:	0029      	movs	r1, r5
 800d7ca:	f7f4 fbdb 	bl	8001f84 <__aeabi_d2iz>
 800d7ce:	f7f4 fc0f 	bl	8001ff0 <__aeabi_i2d>
 800d7d2:	0002      	movs	r2, r0
 800d7d4:	000b      	movs	r3, r1
 800d7d6:	0020      	movs	r0, r4
 800d7d8:	0029      	movs	r1, r5
 800d7da:	920a      	str	r2, [sp, #40]	; 0x28
 800d7dc:	930b      	str	r3, [sp, #44]	; 0x2c
 800d7de:	f7f4 f83f 	bl	8001860 <__aeabi_dsub>
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	4b1e      	ldr	r3, [pc, #120]	; (800d860 <__ieee754_rem_pio2+0x3d0>)
 800d7e6:	f7f3 fdcf 	bl	8001388 <__aeabi_dmul>
 800d7ea:	000d      	movs	r5, r1
 800d7ec:	0004      	movs	r4, r0
 800d7ee:	f7f4 fbc9 	bl	8001f84 <__aeabi_d2iz>
 800d7f2:	f7f4 fbfd 	bl	8001ff0 <__aeabi_i2d>
 800d7f6:	0002      	movs	r2, r0
 800d7f8:	000b      	movs	r3, r1
 800d7fa:	0020      	movs	r0, r4
 800d7fc:	0029      	movs	r1, r5
 800d7fe:	920c      	str	r2, [sp, #48]	; 0x30
 800d800:	930d      	str	r3, [sp, #52]	; 0x34
 800d802:	f7f4 f82d 	bl	8001860 <__aeabi_dsub>
 800d806:	2200      	movs	r2, #0
 800d808:	4b15      	ldr	r3, [pc, #84]	; (800d860 <__ieee754_rem_pio2+0x3d0>)
 800d80a:	f7f3 fdbd 	bl	8001388 <__aeabi_dmul>
 800d80e:	2503      	movs	r5, #3
 800d810:	900e      	str	r0, [sp, #56]	; 0x38
 800d812:	910f      	str	r1, [sp, #60]	; 0x3c
 800d814:	ac0a      	add	r4, sp, #40	; 0x28
 800d816:	2200      	movs	r2, #0
 800d818:	6920      	ldr	r0, [r4, #16]
 800d81a:	6961      	ldr	r1, [r4, #20]
 800d81c:	2300      	movs	r3, #0
 800d81e:	9502      	str	r5, [sp, #8]
 800d820:	3c08      	subs	r4, #8
 800d822:	3d01      	subs	r5, #1
 800d824:	f7f2 fdf4 	bl	8000410 <__aeabi_dcmpeq>
 800d828:	2800      	cmp	r0, #0
 800d82a:	d1f4      	bne.n	800d816 <__ieee754_rem_pio2+0x386>
 800d82c:	4b0d      	ldr	r3, [pc, #52]	; (800d864 <__ieee754_rem_pio2+0x3d4>)
 800d82e:	0032      	movs	r2, r6
 800d830:	9301      	str	r3, [sp, #4]
 800d832:	2302      	movs	r3, #2
 800d834:	0039      	movs	r1, r7
 800d836:	9300      	str	r3, [sp, #0]
 800d838:	a80a      	add	r0, sp, #40	; 0x28
 800d83a:	9b02      	ldr	r3, [sp, #8]
 800d83c:	f000 f8d4 	bl	800d9e8 <__kernel_rem_pio2>
 800d840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d842:	0006      	movs	r6, r0
 800d844:	2b00      	cmp	r3, #0
 800d846:	db00      	blt.n	800d84a <__ieee754_rem_pio2+0x3ba>
 800d848:	e65f      	b.n	800d50a <__ieee754_rem_pio2+0x7a>
 800d84a:	2280      	movs	r2, #128	; 0x80
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	0612      	lsls	r2, r2, #24
 800d850:	189b      	adds	r3, r3, r2
 800d852:	607b      	str	r3, [r7, #4]
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	189b      	adds	r3, r3, r2
 800d858:	60fb      	str	r3, [r7, #12]
 800d85a:	e68c      	b.n	800d576 <__ieee754_rem_pio2+0xe6>
 800d85c:	fffffbea 	.word	0xfffffbea
 800d860:	41700000 	.word	0x41700000
 800d864:	08011730 	.word	0x08011730

0800d868 <__kernel_cos>:
 800d868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d86a:	b087      	sub	sp, #28
 800d86c:	9204      	str	r2, [sp, #16]
 800d86e:	9305      	str	r3, [sp, #20]
 800d870:	004b      	lsls	r3, r1, #1
 800d872:	085b      	lsrs	r3, r3, #1
 800d874:	9300      	str	r3, [sp, #0]
 800d876:	23f9      	movs	r3, #249	; 0xf9
 800d878:	9a00      	ldr	r2, [sp, #0]
 800d87a:	0007      	movs	r7, r0
 800d87c:	000e      	movs	r6, r1
 800d87e:	059b      	lsls	r3, r3, #22
 800d880:	429a      	cmp	r2, r3
 800d882:	da04      	bge.n	800d88e <__kernel_cos+0x26>
 800d884:	f7f4 fb7e 	bl	8001f84 <__aeabi_d2iz>
 800d888:	2800      	cmp	r0, #0
 800d88a:	d100      	bne.n	800d88e <__kernel_cos+0x26>
 800d88c:	e084      	b.n	800d998 <__kernel_cos+0x130>
 800d88e:	003a      	movs	r2, r7
 800d890:	0033      	movs	r3, r6
 800d892:	0038      	movs	r0, r7
 800d894:	0031      	movs	r1, r6
 800d896:	f7f3 fd77 	bl	8001388 <__aeabi_dmul>
 800d89a:	2200      	movs	r2, #0
 800d89c:	4b40      	ldr	r3, [pc, #256]	; (800d9a0 <__kernel_cos+0x138>)
 800d89e:	0004      	movs	r4, r0
 800d8a0:	000d      	movs	r5, r1
 800d8a2:	f7f3 fd71 	bl	8001388 <__aeabi_dmul>
 800d8a6:	4a3f      	ldr	r2, [pc, #252]	; (800d9a4 <__kernel_cos+0x13c>)
 800d8a8:	9002      	str	r0, [sp, #8]
 800d8aa:	9103      	str	r1, [sp, #12]
 800d8ac:	4b3e      	ldr	r3, [pc, #248]	; (800d9a8 <__kernel_cos+0x140>)
 800d8ae:	0020      	movs	r0, r4
 800d8b0:	0029      	movs	r1, r5
 800d8b2:	f7f3 fd69 	bl	8001388 <__aeabi_dmul>
 800d8b6:	4a3d      	ldr	r2, [pc, #244]	; (800d9ac <__kernel_cos+0x144>)
 800d8b8:	4b3d      	ldr	r3, [pc, #244]	; (800d9b0 <__kernel_cos+0x148>)
 800d8ba:	f7f2 fdf5 	bl	80004a8 <__aeabi_dadd>
 800d8be:	0022      	movs	r2, r4
 800d8c0:	002b      	movs	r3, r5
 800d8c2:	f7f3 fd61 	bl	8001388 <__aeabi_dmul>
 800d8c6:	4a3b      	ldr	r2, [pc, #236]	; (800d9b4 <__kernel_cos+0x14c>)
 800d8c8:	4b3b      	ldr	r3, [pc, #236]	; (800d9b8 <__kernel_cos+0x150>)
 800d8ca:	f7f3 ffc9 	bl	8001860 <__aeabi_dsub>
 800d8ce:	0022      	movs	r2, r4
 800d8d0:	002b      	movs	r3, r5
 800d8d2:	f7f3 fd59 	bl	8001388 <__aeabi_dmul>
 800d8d6:	4a39      	ldr	r2, [pc, #228]	; (800d9bc <__kernel_cos+0x154>)
 800d8d8:	4b39      	ldr	r3, [pc, #228]	; (800d9c0 <__kernel_cos+0x158>)
 800d8da:	f7f2 fde5 	bl	80004a8 <__aeabi_dadd>
 800d8de:	0022      	movs	r2, r4
 800d8e0:	002b      	movs	r3, r5
 800d8e2:	f7f3 fd51 	bl	8001388 <__aeabi_dmul>
 800d8e6:	4a37      	ldr	r2, [pc, #220]	; (800d9c4 <__kernel_cos+0x15c>)
 800d8e8:	4b37      	ldr	r3, [pc, #220]	; (800d9c8 <__kernel_cos+0x160>)
 800d8ea:	f7f3 ffb9 	bl	8001860 <__aeabi_dsub>
 800d8ee:	0022      	movs	r2, r4
 800d8f0:	002b      	movs	r3, r5
 800d8f2:	f7f3 fd49 	bl	8001388 <__aeabi_dmul>
 800d8f6:	4a35      	ldr	r2, [pc, #212]	; (800d9cc <__kernel_cos+0x164>)
 800d8f8:	4b35      	ldr	r3, [pc, #212]	; (800d9d0 <__kernel_cos+0x168>)
 800d8fa:	f7f2 fdd5 	bl	80004a8 <__aeabi_dadd>
 800d8fe:	0022      	movs	r2, r4
 800d900:	002b      	movs	r3, r5
 800d902:	f7f3 fd41 	bl	8001388 <__aeabi_dmul>
 800d906:	0022      	movs	r2, r4
 800d908:	002b      	movs	r3, r5
 800d90a:	f7f3 fd3d 	bl	8001388 <__aeabi_dmul>
 800d90e:	9a04      	ldr	r2, [sp, #16]
 800d910:	9b05      	ldr	r3, [sp, #20]
 800d912:	0004      	movs	r4, r0
 800d914:	000d      	movs	r5, r1
 800d916:	0038      	movs	r0, r7
 800d918:	0031      	movs	r1, r6
 800d91a:	f7f3 fd35 	bl	8001388 <__aeabi_dmul>
 800d91e:	0002      	movs	r2, r0
 800d920:	000b      	movs	r3, r1
 800d922:	0020      	movs	r0, r4
 800d924:	0029      	movs	r1, r5
 800d926:	f7f3 ff9b 	bl	8001860 <__aeabi_dsub>
 800d92a:	4b2a      	ldr	r3, [pc, #168]	; (800d9d4 <__kernel_cos+0x16c>)
 800d92c:	9a00      	ldr	r2, [sp, #0]
 800d92e:	0004      	movs	r4, r0
 800d930:	000d      	movs	r5, r1
 800d932:	429a      	cmp	r2, r3
 800d934:	dc0d      	bgt.n	800d952 <__kernel_cos+0xea>
 800d936:	0002      	movs	r2, r0
 800d938:	000b      	movs	r3, r1
 800d93a:	9802      	ldr	r0, [sp, #8]
 800d93c:	9903      	ldr	r1, [sp, #12]
 800d93e:	f7f3 ff8f 	bl	8001860 <__aeabi_dsub>
 800d942:	0002      	movs	r2, r0
 800d944:	2000      	movs	r0, #0
 800d946:	000b      	movs	r3, r1
 800d948:	4923      	ldr	r1, [pc, #140]	; (800d9d8 <__kernel_cos+0x170>)
 800d94a:	f7f3 ff89 	bl	8001860 <__aeabi_dsub>
 800d94e:	b007      	add	sp, #28
 800d950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d952:	4b22      	ldr	r3, [pc, #136]	; (800d9dc <__kernel_cos+0x174>)
 800d954:	9a00      	ldr	r2, [sp, #0]
 800d956:	2600      	movs	r6, #0
 800d958:	429a      	cmp	r2, r3
 800d95a:	dc1b      	bgt.n	800d994 <__kernel_cos+0x12c>
 800d95c:	0013      	movs	r3, r2
 800d95e:	4a20      	ldr	r2, [pc, #128]	; (800d9e0 <__kernel_cos+0x178>)
 800d960:	4694      	mov	ip, r2
 800d962:	4463      	add	r3, ip
 800d964:	001f      	movs	r7, r3
 800d966:	0032      	movs	r2, r6
 800d968:	003b      	movs	r3, r7
 800d96a:	2000      	movs	r0, #0
 800d96c:	491a      	ldr	r1, [pc, #104]	; (800d9d8 <__kernel_cos+0x170>)
 800d96e:	f7f3 ff77 	bl	8001860 <__aeabi_dsub>
 800d972:	0032      	movs	r2, r6
 800d974:	003b      	movs	r3, r7
 800d976:	9000      	str	r0, [sp, #0]
 800d978:	9101      	str	r1, [sp, #4]
 800d97a:	9802      	ldr	r0, [sp, #8]
 800d97c:	9903      	ldr	r1, [sp, #12]
 800d97e:	f7f3 ff6f 	bl	8001860 <__aeabi_dsub>
 800d982:	0022      	movs	r2, r4
 800d984:	002b      	movs	r3, r5
 800d986:	f7f3 ff6b 	bl	8001860 <__aeabi_dsub>
 800d98a:	0002      	movs	r2, r0
 800d98c:	000b      	movs	r3, r1
 800d98e:	9800      	ldr	r0, [sp, #0]
 800d990:	9901      	ldr	r1, [sp, #4]
 800d992:	e7da      	b.n	800d94a <__kernel_cos+0xe2>
 800d994:	4f13      	ldr	r7, [pc, #76]	; (800d9e4 <__kernel_cos+0x17c>)
 800d996:	e7e6      	b.n	800d966 <__kernel_cos+0xfe>
 800d998:	2000      	movs	r0, #0
 800d99a:	490f      	ldr	r1, [pc, #60]	; (800d9d8 <__kernel_cos+0x170>)
 800d99c:	e7d7      	b.n	800d94e <__kernel_cos+0xe6>
 800d99e:	46c0      	nop			; (mov r8, r8)
 800d9a0:	3fe00000 	.word	0x3fe00000
 800d9a4:	be8838d4 	.word	0xbe8838d4
 800d9a8:	bda8fae9 	.word	0xbda8fae9
 800d9ac:	bdb4b1c4 	.word	0xbdb4b1c4
 800d9b0:	3e21ee9e 	.word	0x3e21ee9e
 800d9b4:	809c52ad 	.word	0x809c52ad
 800d9b8:	3e927e4f 	.word	0x3e927e4f
 800d9bc:	19cb1590 	.word	0x19cb1590
 800d9c0:	3efa01a0 	.word	0x3efa01a0
 800d9c4:	16c15177 	.word	0x16c15177
 800d9c8:	3f56c16c 	.word	0x3f56c16c
 800d9cc:	5555554c 	.word	0x5555554c
 800d9d0:	3fa55555 	.word	0x3fa55555
 800d9d4:	3fd33332 	.word	0x3fd33332
 800d9d8:	3ff00000 	.word	0x3ff00000
 800d9dc:	3fe90000 	.word	0x3fe90000
 800d9e0:	ffe00000 	.word	0xffe00000
 800d9e4:	3fd20000 	.word	0x3fd20000

0800d9e8 <__kernel_rem_pio2>:
 800d9e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9ea:	4cd0      	ldr	r4, [pc, #832]	; (800dd2c <__kernel_rem_pio2+0x344>)
 800d9ec:	44a5      	add	sp, r4
 800d9ee:	930d      	str	r3, [sp, #52]	; 0x34
 800d9f0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d9f2:	0014      	movs	r4, r2
 800d9f4:	009a      	lsls	r2, r3, #2
 800d9f6:	4bce      	ldr	r3, [pc, #824]	; (800dd30 <__kernel_rem_pio2+0x348>)
 800d9f8:	900e      	str	r0, [sp, #56]	; 0x38
 800d9fa:	58d3      	ldr	r3, [r2, r3]
 800d9fc:	9107      	str	r1, [sp, #28]
 800d9fe:	9308      	str	r3, [sp, #32]
 800da00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da02:	3b01      	subs	r3, #1
 800da04:	930c      	str	r3, [sp, #48]	; 0x30
 800da06:	2300      	movs	r3, #0
 800da08:	9300      	str	r3, [sp, #0]
 800da0a:	0023      	movs	r3, r4
 800da0c:	3314      	adds	r3, #20
 800da0e:	db04      	blt.n	800da1a <__kernel_rem_pio2+0x32>
 800da10:	2118      	movs	r1, #24
 800da12:	1ee0      	subs	r0, r4, #3
 800da14:	f7f2 fc00 	bl	8000218 <__divsi3>
 800da18:	9000      	str	r0, [sp, #0]
 800da1a:	2218      	movs	r2, #24
 800da1c:	9b00      	ldr	r3, [sp, #0]
 800da1e:	4252      	negs	r2, r2
 800da20:	3301      	adds	r3, #1
 800da22:	435a      	muls	r2, r3
 800da24:	1913      	adds	r3, r2, r4
 800da26:	9302      	str	r3, [sp, #8]
 800da28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800da2a:	9b00      	ldr	r3, [sp, #0]
 800da2c:	ae26      	add	r6, sp, #152	; 0x98
 800da2e:	1a9d      	subs	r5, r3, r2
 800da30:	002c      	movs	r4, r5
 800da32:	9b08      	ldr	r3, [sp, #32]
 800da34:	189f      	adds	r7, r3, r2
 800da36:	1b63      	subs	r3, r4, r5
 800da38:	429f      	cmp	r7, r3
 800da3a:	da17      	bge.n	800da6c <__kernel_rem_pio2+0x84>
 800da3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800da3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800da40:	9304      	str	r3, [sp, #16]
 800da42:	ab76      	add	r3, sp, #472	; 0x1d8
 800da44:	930a      	str	r3, [sp, #40]	; 0x28
 800da46:	2301      	movs	r3, #1
 800da48:	1a9b      	subs	r3, r3, r2
 800da4a:	930b      	str	r3, [sp, #44]	; 0x2c
 800da4c:	ab28      	add	r3, sp, #160	; 0xa0
 800da4e:	930f      	str	r3, [sp, #60]	; 0x3c
 800da50:	9a04      	ldr	r2, [sp, #16]
 800da52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da54:	189b      	adds	r3, r3, r2
 800da56:	9a08      	ldr	r2, [sp, #32]
 800da58:	429a      	cmp	r2, r3
 800da5a:	db31      	blt.n	800dac0 <__kernel_rem_pio2+0xd8>
 800da5c:	9b04      	ldr	r3, [sp, #16]
 800da5e:	2400      	movs	r4, #0
 800da60:	00de      	lsls	r6, r3, #3
 800da62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800da64:	2500      	movs	r5, #0
 800da66:	2700      	movs	r7, #0
 800da68:	199e      	adds	r6, r3, r6
 800da6a:	e01e      	b.n	800daaa <__kernel_rem_pio2+0xc2>
 800da6c:	2c00      	cmp	r4, #0
 800da6e:	db07      	blt.n	800da80 <__kernel_rem_pio2+0x98>
 800da70:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 800da72:	00a3      	lsls	r3, r4, #2
 800da74:	58d0      	ldr	r0, [r2, r3]
 800da76:	f7f4 fabb 	bl	8001ff0 <__aeabi_i2d>
 800da7a:	c603      	stmia	r6!, {r0, r1}
 800da7c:	3401      	adds	r4, #1
 800da7e:	e7da      	b.n	800da36 <__kernel_rem_pio2+0x4e>
 800da80:	2000      	movs	r0, #0
 800da82:	2100      	movs	r1, #0
 800da84:	e7f9      	b.n	800da7a <__kernel_rem_pio2+0x92>
 800da86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800da88:	00f9      	lsls	r1, r7, #3
 800da8a:	1859      	adds	r1, r3, r1
 800da8c:	6808      	ldr	r0, [r1, #0]
 800da8e:	6849      	ldr	r1, [r1, #4]
 800da90:	6832      	ldr	r2, [r6, #0]
 800da92:	6873      	ldr	r3, [r6, #4]
 800da94:	f7f3 fc78 	bl	8001388 <__aeabi_dmul>
 800da98:	0002      	movs	r2, r0
 800da9a:	000b      	movs	r3, r1
 800da9c:	0020      	movs	r0, r4
 800da9e:	0029      	movs	r1, r5
 800daa0:	f7f2 fd02 	bl	80004a8 <__aeabi_dadd>
 800daa4:	0004      	movs	r4, r0
 800daa6:	000d      	movs	r5, r1
 800daa8:	3701      	adds	r7, #1
 800daaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800daac:	3e08      	subs	r6, #8
 800daae:	429f      	cmp	r7, r3
 800dab0:	dde9      	ble.n	800da86 <__kernel_rem_pio2+0x9e>
 800dab2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dab4:	c330      	stmia	r3!, {r4, r5}
 800dab6:	930a      	str	r3, [sp, #40]	; 0x28
 800dab8:	9b04      	ldr	r3, [sp, #16]
 800daba:	3301      	adds	r3, #1
 800dabc:	9304      	str	r3, [sp, #16]
 800dabe:	e7c7      	b.n	800da50 <__kernel_rem_pio2+0x68>
 800dac0:	9b08      	ldr	r3, [sp, #32]
 800dac2:	aa12      	add	r2, sp, #72	; 0x48
 800dac4:	009b      	lsls	r3, r3, #2
 800dac6:	189b      	adds	r3, r3, r2
 800dac8:	9310      	str	r3, [sp, #64]	; 0x40
 800daca:	9b00      	ldr	r3, [sp, #0]
 800dacc:	0098      	lsls	r0, r3, #2
 800dace:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800dad0:	181b      	adds	r3, r3, r0
 800dad2:	930f      	str	r3, [sp, #60]	; 0x3c
 800dad4:	9b08      	ldr	r3, [sp, #32]
 800dad6:	9304      	str	r3, [sp, #16]
 800dad8:	9b04      	ldr	r3, [sp, #16]
 800dada:	aa76      	add	r2, sp, #472	; 0x1d8
 800dadc:	00db      	lsls	r3, r3, #3
 800dade:	18d3      	adds	r3, r2, r3
 800dae0:	681c      	ldr	r4, [r3, #0]
 800dae2:	685d      	ldr	r5, [r3, #4]
 800dae4:	ab12      	add	r3, sp, #72	; 0x48
 800dae6:	9300      	str	r3, [sp, #0]
 800dae8:	930b      	str	r3, [sp, #44]	; 0x2c
 800daea:	9b04      	ldr	r3, [sp, #16]
 800daec:	9211      	str	r2, [sp, #68]	; 0x44
 800daee:	930a      	str	r3, [sp, #40]	; 0x28
 800daf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	dc74      	bgt.n	800dbe0 <__kernel_rem_pio2+0x1f8>
 800daf6:	0020      	movs	r0, r4
 800daf8:	0029      	movs	r1, r5
 800dafa:	9a02      	ldr	r2, [sp, #8]
 800dafc:	f000 fc24 	bl	800e348 <scalbn>
 800db00:	23ff      	movs	r3, #255	; 0xff
 800db02:	2200      	movs	r2, #0
 800db04:	059b      	lsls	r3, r3, #22
 800db06:	0004      	movs	r4, r0
 800db08:	000d      	movs	r5, r1
 800db0a:	f7f3 fc3d 	bl	8001388 <__aeabi_dmul>
 800db0e:	f000 fb91 	bl	800e234 <floor>
 800db12:	2200      	movs	r2, #0
 800db14:	4b87      	ldr	r3, [pc, #540]	; (800dd34 <__kernel_rem_pio2+0x34c>)
 800db16:	f7f3 fc37 	bl	8001388 <__aeabi_dmul>
 800db1a:	0002      	movs	r2, r0
 800db1c:	000b      	movs	r3, r1
 800db1e:	0020      	movs	r0, r4
 800db20:	0029      	movs	r1, r5
 800db22:	f7f3 fe9d 	bl	8001860 <__aeabi_dsub>
 800db26:	000d      	movs	r5, r1
 800db28:	0004      	movs	r4, r0
 800db2a:	f7f4 fa2b 	bl	8001f84 <__aeabi_d2iz>
 800db2e:	900b      	str	r0, [sp, #44]	; 0x2c
 800db30:	f7f4 fa5e 	bl	8001ff0 <__aeabi_i2d>
 800db34:	000b      	movs	r3, r1
 800db36:	0002      	movs	r2, r0
 800db38:	0029      	movs	r1, r5
 800db3a:	0020      	movs	r0, r4
 800db3c:	f7f3 fe90 	bl	8001860 <__aeabi_dsub>
 800db40:	9b02      	ldr	r3, [sp, #8]
 800db42:	0006      	movs	r6, r0
 800db44:	000f      	movs	r7, r1
 800db46:	2b00      	cmp	r3, #0
 800db48:	dd74      	ble.n	800dc34 <__kernel_rem_pio2+0x24c>
 800db4a:	2118      	movs	r1, #24
 800db4c:	9b04      	ldr	r3, [sp, #16]
 800db4e:	aa12      	add	r2, sp, #72	; 0x48
 800db50:	3b01      	subs	r3, #1
 800db52:	009b      	lsls	r3, r3, #2
 800db54:	589a      	ldr	r2, [r3, r2]
 800db56:	9802      	ldr	r0, [sp, #8]
 800db58:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800db5a:	1a09      	subs	r1, r1, r0
 800db5c:	0010      	movs	r0, r2
 800db5e:	4108      	asrs	r0, r1
 800db60:	1824      	adds	r4, r4, r0
 800db62:	4088      	lsls	r0, r1
 800db64:	a912      	add	r1, sp, #72	; 0x48
 800db66:	1a12      	subs	r2, r2, r0
 800db68:	505a      	str	r2, [r3, r1]
 800db6a:	2317      	movs	r3, #23
 800db6c:	9902      	ldr	r1, [sp, #8]
 800db6e:	940b      	str	r4, [sp, #44]	; 0x2c
 800db70:	1a5b      	subs	r3, r3, r1
 800db72:	411a      	asrs	r2, r3
 800db74:	920a      	str	r2, [sp, #40]	; 0x28
 800db76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db78:	2b00      	cmp	r3, #0
 800db7a:	dd6d      	ble.n	800dc58 <__kernel_rem_pio2+0x270>
 800db7c:	2200      	movs	r2, #0
 800db7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db80:	2080      	movs	r0, #128	; 0x80
 800db82:	3301      	adds	r3, #1
 800db84:	930b      	str	r3, [sp, #44]	; 0x2c
 800db86:	4b6c      	ldr	r3, [pc, #432]	; (800dd38 <__kernel_rem_pio2+0x350>)
 800db88:	0014      	movs	r4, r2
 800db8a:	469c      	mov	ip, r3
 800db8c:	2501      	movs	r5, #1
 800db8e:	0440      	lsls	r0, r0, #17
 800db90:	9b04      	ldr	r3, [sp, #16]
 800db92:	4293      	cmp	r3, r2
 800db94:	dd00      	ble.n	800db98 <__kernel_rem_pio2+0x1b0>
 800db96:	e098      	b.n	800dcca <__kernel_rem_pio2+0x2e2>
 800db98:	9b02      	ldr	r3, [sp, #8]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	dd05      	ble.n	800dbaa <__kernel_rem_pio2+0x1c2>
 800db9e:	2b01      	cmp	r3, #1
 800dba0:	d100      	bne.n	800dba4 <__kernel_rem_pio2+0x1bc>
 800dba2:	e0a8      	b.n	800dcf6 <__kernel_rem_pio2+0x30e>
 800dba4:	2b02      	cmp	r3, #2
 800dba6:	d100      	bne.n	800dbaa <__kernel_rem_pio2+0x1c2>
 800dba8:	e0b0      	b.n	800dd0c <__kernel_rem_pio2+0x324>
 800dbaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbac:	2b02      	cmp	r3, #2
 800dbae:	d153      	bne.n	800dc58 <__kernel_rem_pio2+0x270>
 800dbb0:	0032      	movs	r2, r6
 800dbb2:	003b      	movs	r3, r7
 800dbb4:	2000      	movs	r0, #0
 800dbb6:	4961      	ldr	r1, [pc, #388]	; (800dd3c <__kernel_rem_pio2+0x354>)
 800dbb8:	f7f3 fe52 	bl	8001860 <__aeabi_dsub>
 800dbbc:	0006      	movs	r6, r0
 800dbbe:	000f      	movs	r7, r1
 800dbc0:	2c00      	cmp	r4, #0
 800dbc2:	d049      	beq.n	800dc58 <__kernel_rem_pio2+0x270>
 800dbc4:	9a02      	ldr	r2, [sp, #8]
 800dbc6:	2000      	movs	r0, #0
 800dbc8:	495c      	ldr	r1, [pc, #368]	; (800dd3c <__kernel_rem_pio2+0x354>)
 800dbca:	f000 fbbd 	bl	800e348 <scalbn>
 800dbce:	0002      	movs	r2, r0
 800dbd0:	000b      	movs	r3, r1
 800dbd2:	0030      	movs	r0, r6
 800dbd4:	0039      	movs	r1, r7
 800dbd6:	f7f3 fe43 	bl	8001860 <__aeabi_dsub>
 800dbda:	0006      	movs	r6, r0
 800dbdc:	000f      	movs	r7, r1
 800dbde:	e03b      	b.n	800dc58 <__kernel_rem_pio2+0x270>
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	4b57      	ldr	r3, [pc, #348]	; (800dd40 <__kernel_rem_pio2+0x358>)
 800dbe4:	0020      	movs	r0, r4
 800dbe6:	0029      	movs	r1, r5
 800dbe8:	f7f3 fbce 	bl	8001388 <__aeabi_dmul>
 800dbec:	f7f4 f9ca 	bl	8001f84 <__aeabi_d2iz>
 800dbf0:	f7f4 f9fe 	bl	8001ff0 <__aeabi_i2d>
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	4b53      	ldr	r3, [pc, #332]	; (800dd44 <__kernel_rem_pio2+0x35c>)
 800dbf8:	0006      	movs	r6, r0
 800dbfa:	000f      	movs	r7, r1
 800dbfc:	f7f3 fbc4 	bl	8001388 <__aeabi_dmul>
 800dc00:	0002      	movs	r2, r0
 800dc02:	000b      	movs	r3, r1
 800dc04:	0020      	movs	r0, r4
 800dc06:	0029      	movs	r1, r5
 800dc08:	f7f3 fe2a 	bl	8001860 <__aeabi_dsub>
 800dc0c:	f7f4 f9ba 	bl	8001f84 <__aeabi_d2iz>
 800dc10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc12:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800dc14:	c301      	stmia	r3!, {r0}
 800dc16:	930b      	str	r3, [sp, #44]	; 0x2c
 800dc18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc1a:	0030      	movs	r0, r6
 800dc1c:	3b01      	subs	r3, #1
 800dc1e:	930a      	str	r3, [sp, #40]	; 0x28
 800dc20:	00db      	lsls	r3, r3, #3
 800dc22:	18d3      	adds	r3, r2, r3
 800dc24:	0039      	movs	r1, r7
 800dc26:	681a      	ldr	r2, [r3, #0]
 800dc28:	685b      	ldr	r3, [r3, #4]
 800dc2a:	f7f2 fc3d 	bl	80004a8 <__aeabi_dadd>
 800dc2e:	0004      	movs	r4, r0
 800dc30:	000d      	movs	r5, r1
 800dc32:	e75d      	b.n	800daf0 <__kernel_rem_pio2+0x108>
 800dc34:	9b02      	ldr	r3, [sp, #8]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d107      	bne.n	800dc4a <__kernel_rem_pio2+0x262>
 800dc3a:	9b04      	ldr	r3, [sp, #16]
 800dc3c:	aa12      	add	r2, sp, #72	; 0x48
 800dc3e:	3b01      	subs	r3, #1
 800dc40:	009b      	lsls	r3, r3, #2
 800dc42:	5898      	ldr	r0, [r3, r2]
 800dc44:	15c3      	asrs	r3, r0, #23
 800dc46:	930a      	str	r3, [sp, #40]	; 0x28
 800dc48:	e795      	b.n	800db76 <__kernel_rem_pio2+0x18e>
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	4b3e      	ldr	r3, [pc, #248]	; (800dd48 <__kernel_rem_pio2+0x360>)
 800dc4e:	f7f2 fc03 	bl	8000458 <__aeabi_dcmpge>
 800dc52:	2800      	cmp	r0, #0
 800dc54:	d136      	bne.n	800dcc4 <__kernel_rem_pio2+0x2dc>
 800dc56:	900a      	str	r0, [sp, #40]	; 0x28
 800dc58:	2200      	movs	r2, #0
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	0030      	movs	r0, r6
 800dc5e:	0039      	movs	r1, r7
 800dc60:	f7f2 fbd6 	bl	8000410 <__aeabi_dcmpeq>
 800dc64:	2800      	cmp	r0, #0
 800dc66:	d100      	bne.n	800dc6a <__kernel_rem_pio2+0x282>
 800dc68:	e0b9      	b.n	800ddde <__kernel_rem_pio2+0x3f6>
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	9b04      	ldr	r3, [sp, #16]
 800dc6e:	3b01      	subs	r3, #1
 800dc70:	9300      	str	r3, [sp, #0]
 800dc72:	9908      	ldr	r1, [sp, #32]
 800dc74:	428b      	cmp	r3, r1
 800dc76:	da52      	bge.n	800dd1e <__kernel_rem_pio2+0x336>
 800dc78:	2a00      	cmp	r2, #0
 800dc7a:	d100      	bne.n	800dc7e <__kernel_rem_pio2+0x296>
 800dc7c:	e095      	b.n	800ddaa <__kernel_rem_pio2+0x3c2>
 800dc7e:	9b02      	ldr	r3, [sp, #8]
 800dc80:	aa12      	add	r2, sp, #72	; 0x48
 800dc82:	3b18      	subs	r3, #24
 800dc84:	9302      	str	r3, [sp, #8]
 800dc86:	9b00      	ldr	r3, [sp, #0]
 800dc88:	009b      	lsls	r3, r3, #2
 800dc8a:	589b      	ldr	r3, [r3, r2]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d100      	bne.n	800dc92 <__kernel_rem_pio2+0x2aa>
 800dc90:	e0a1      	b.n	800ddd6 <__kernel_rem_pio2+0x3ee>
 800dc92:	2000      	movs	r0, #0
 800dc94:	9a02      	ldr	r2, [sp, #8]
 800dc96:	4929      	ldr	r1, [pc, #164]	; (800dd3c <__kernel_rem_pio2+0x354>)
 800dc98:	f000 fb56 	bl	800e348 <scalbn>
 800dc9c:	0006      	movs	r6, r0
 800dc9e:	000f      	movs	r7, r1
 800dca0:	9c00      	ldr	r4, [sp, #0]
 800dca2:	2c00      	cmp	r4, #0
 800dca4:	db00      	blt.n	800dca8 <__kernel_rem_pio2+0x2c0>
 800dca6:	e0d9      	b.n	800de5c <__kernel_rem_pio2+0x474>
 800dca8:	2600      	movs	r6, #0
 800dcaa:	9d00      	ldr	r5, [sp, #0]
 800dcac:	2d00      	cmp	r5, #0
 800dcae:	da00      	bge.n	800dcb2 <__kernel_rem_pio2+0x2ca>
 800dcb0:	e10c      	b.n	800decc <__kernel_rem_pio2+0x4e4>
 800dcb2:	ab76      	add	r3, sp, #472	; 0x1d8
 800dcb4:	00ef      	lsls	r7, r5, #3
 800dcb6:	2400      	movs	r4, #0
 800dcb8:	18ff      	adds	r7, r7, r3
 800dcba:	2300      	movs	r3, #0
 800dcbc:	9302      	str	r3, [sp, #8]
 800dcbe:	9403      	str	r4, [sp, #12]
 800dcc0:	2400      	movs	r4, #0
 800dcc2:	e0f4      	b.n	800deae <__kernel_rem_pio2+0x4c6>
 800dcc4:	2302      	movs	r3, #2
 800dcc6:	930a      	str	r3, [sp, #40]	; 0x28
 800dcc8:	e758      	b.n	800db7c <__kernel_rem_pio2+0x194>
 800dcca:	9b00      	ldr	r3, [sp, #0]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	2c00      	cmp	r4, #0
 800dcd0:	d10b      	bne.n	800dcea <__kernel_rem_pio2+0x302>
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d003      	beq.n	800dcde <__kernel_rem_pio2+0x2f6>
 800dcd6:	9c00      	ldr	r4, [sp, #0]
 800dcd8:	1ac3      	subs	r3, r0, r3
 800dcda:	6023      	str	r3, [r4, #0]
 800dcdc:	002b      	movs	r3, r5
 800dcde:	9c00      	ldr	r4, [sp, #0]
 800dce0:	3201      	adds	r2, #1
 800dce2:	3404      	adds	r4, #4
 800dce4:	9400      	str	r4, [sp, #0]
 800dce6:	001c      	movs	r4, r3
 800dce8:	e752      	b.n	800db90 <__kernel_rem_pio2+0x1a8>
 800dcea:	4661      	mov	r1, ip
 800dcec:	1acb      	subs	r3, r1, r3
 800dcee:	9900      	ldr	r1, [sp, #0]
 800dcf0:	600b      	str	r3, [r1, #0]
 800dcf2:	0023      	movs	r3, r4
 800dcf4:	e7f3      	b.n	800dcde <__kernel_rem_pio2+0x2f6>
 800dcf6:	9b04      	ldr	r3, [sp, #16]
 800dcf8:	aa12      	add	r2, sp, #72	; 0x48
 800dcfa:	3b01      	subs	r3, #1
 800dcfc:	009b      	lsls	r3, r3, #2
 800dcfe:	589a      	ldr	r2, [r3, r2]
 800dd00:	9200      	str	r2, [sp, #0]
 800dd02:	0252      	lsls	r2, r2, #9
 800dd04:	0a52      	lsrs	r2, r2, #9
 800dd06:	a912      	add	r1, sp, #72	; 0x48
 800dd08:	505a      	str	r2, [r3, r1]
 800dd0a:	e74e      	b.n	800dbaa <__kernel_rem_pio2+0x1c2>
 800dd0c:	9b04      	ldr	r3, [sp, #16]
 800dd0e:	aa12      	add	r2, sp, #72	; 0x48
 800dd10:	3b01      	subs	r3, #1
 800dd12:	009b      	lsls	r3, r3, #2
 800dd14:	589a      	ldr	r2, [r3, r2]
 800dd16:	9200      	str	r2, [sp, #0]
 800dd18:	0292      	lsls	r2, r2, #10
 800dd1a:	0a92      	lsrs	r2, r2, #10
 800dd1c:	e7f3      	b.n	800dd06 <__kernel_rem_pio2+0x31e>
 800dd1e:	0099      	lsls	r1, r3, #2
 800dd20:	a812      	add	r0, sp, #72	; 0x48
 800dd22:	5809      	ldr	r1, [r1, r0]
 800dd24:	3b01      	subs	r3, #1
 800dd26:	430a      	orrs	r2, r1
 800dd28:	e7a3      	b.n	800dc72 <__kernel_rem_pio2+0x28a>
 800dd2a:	46c0      	nop			; (mov r8, r8)
 800dd2c:	fffffd84 	.word	0xfffffd84
 800dd30:	08011878 	.word	0x08011878
 800dd34:	40200000 	.word	0x40200000
 800dd38:	00ffffff 	.word	0x00ffffff
 800dd3c:	3ff00000 	.word	0x3ff00000
 800dd40:	3e700000 	.word	0x3e700000
 800dd44:	41700000 	.word	0x41700000
 800dd48:	3fe00000 	.word	0x3fe00000
 800dd4c:	3301      	adds	r3, #1
 800dd4e:	9910      	ldr	r1, [sp, #64]	; 0x40
 800dd50:	009a      	lsls	r2, r3, #2
 800dd52:	4252      	negs	r2, r2
 800dd54:	588a      	ldr	r2, [r1, r2]
 800dd56:	2a00      	cmp	r2, #0
 800dd58:	d0f8      	beq.n	800dd4c <__kernel_rem_pio2+0x364>
 800dd5a:	9a04      	ldr	r2, [sp, #16]
 800dd5c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800dd5e:	1c57      	adds	r7, r2, #1
 800dd60:	1854      	adds	r4, r2, r1
 800dd62:	00e4      	lsls	r4, r4, #3
 800dd64:	aa26      	add	r2, sp, #152	; 0x98
 800dd66:	1914      	adds	r4, r2, r4
 800dd68:	9a04      	ldr	r2, [sp, #16]
 800dd6a:	18d3      	adds	r3, r2, r3
 800dd6c:	9304      	str	r3, [sp, #16]
 800dd6e:	9b04      	ldr	r3, [sp, #16]
 800dd70:	42bb      	cmp	r3, r7
 800dd72:	da00      	bge.n	800dd76 <__kernel_rem_pio2+0x38e>
 800dd74:	e6b0      	b.n	800dad8 <__kernel_rem_pio2+0xf0>
 800dd76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dd78:	00bb      	lsls	r3, r7, #2
 800dd7a:	58d0      	ldr	r0, [r2, r3]
 800dd7c:	f7f4 f938 	bl	8001ff0 <__aeabi_i2d>
 800dd80:	2200      	movs	r2, #0
 800dd82:	2300      	movs	r3, #0
 800dd84:	0026      	movs	r6, r4
 800dd86:	2500      	movs	r5, #0
 800dd88:	6020      	str	r0, [r4, #0]
 800dd8a:	6061      	str	r1, [r4, #4]
 800dd8c:	9200      	str	r2, [sp, #0]
 800dd8e:	9301      	str	r3, [sp, #4]
 800dd90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dd92:	429d      	cmp	r5, r3
 800dd94:	dd0b      	ble.n	800ddae <__kernel_rem_pio2+0x3c6>
 800dd96:	00fb      	lsls	r3, r7, #3
 800dd98:	aa76      	add	r2, sp, #472	; 0x1d8
 800dd9a:	18d3      	adds	r3, r2, r3
 800dd9c:	3701      	adds	r7, #1
 800dd9e:	9900      	ldr	r1, [sp, #0]
 800dda0:	9a01      	ldr	r2, [sp, #4]
 800dda2:	3408      	adds	r4, #8
 800dda4:	6019      	str	r1, [r3, #0]
 800dda6:	605a      	str	r2, [r3, #4]
 800dda8:	e7e1      	b.n	800dd6e <__kernel_rem_pio2+0x386>
 800ddaa:	2301      	movs	r3, #1
 800ddac:	e7cf      	b.n	800dd4e <__kernel_rem_pio2+0x366>
 800ddae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ddb0:	00e9      	lsls	r1, r5, #3
 800ddb2:	1859      	adds	r1, r3, r1
 800ddb4:	6808      	ldr	r0, [r1, #0]
 800ddb6:	6849      	ldr	r1, [r1, #4]
 800ddb8:	6832      	ldr	r2, [r6, #0]
 800ddba:	6873      	ldr	r3, [r6, #4]
 800ddbc:	f7f3 fae4 	bl	8001388 <__aeabi_dmul>
 800ddc0:	0002      	movs	r2, r0
 800ddc2:	000b      	movs	r3, r1
 800ddc4:	9800      	ldr	r0, [sp, #0]
 800ddc6:	9901      	ldr	r1, [sp, #4]
 800ddc8:	f7f2 fb6e 	bl	80004a8 <__aeabi_dadd>
 800ddcc:	3501      	adds	r5, #1
 800ddce:	9000      	str	r0, [sp, #0]
 800ddd0:	9101      	str	r1, [sp, #4]
 800ddd2:	3e08      	subs	r6, #8
 800ddd4:	e7dc      	b.n	800dd90 <__kernel_rem_pio2+0x3a8>
 800ddd6:	9b00      	ldr	r3, [sp, #0]
 800ddd8:	3b01      	subs	r3, #1
 800ddda:	9300      	str	r3, [sp, #0]
 800dddc:	e74f      	b.n	800dc7e <__kernel_rem_pio2+0x296>
 800ddde:	9b02      	ldr	r3, [sp, #8]
 800dde0:	0030      	movs	r0, r6
 800dde2:	425a      	negs	r2, r3
 800dde4:	0039      	movs	r1, r7
 800dde6:	f000 faaf 	bl	800e348 <scalbn>
 800ddea:	2200      	movs	r2, #0
 800ddec:	4bb6      	ldr	r3, [pc, #728]	; (800e0c8 <__kernel_rem_pio2+0x6e0>)
 800ddee:	0004      	movs	r4, r0
 800ddf0:	000d      	movs	r5, r1
 800ddf2:	f7f2 fb31 	bl	8000458 <__aeabi_dcmpge>
 800ddf6:	2800      	cmp	r0, #0
 800ddf8:	d025      	beq.n	800de46 <__kernel_rem_pio2+0x45e>
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	4bb3      	ldr	r3, [pc, #716]	; (800e0cc <__kernel_rem_pio2+0x6e4>)
 800ddfe:	0020      	movs	r0, r4
 800de00:	0029      	movs	r1, r5
 800de02:	f7f3 fac1 	bl	8001388 <__aeabi_dmul>
 800de06:	f7f4 f8bd 	bl	8001f84 <__aeabi_d2iz>
 800de0a:	9b04      	ldr	r3, [sp, #16]
 800de0c:	0006      	movs	r6, r0
 800de0e:	009f      	lsls	r7, r3, #2
 800de10:	f7f4 f8ee 	bl	8001ff0 <__aeabi_i2d>
 800de14:	2200      	movs	r2, #0
 800de16:	4bac      	ldr	r3, [pc, #688]	; (800e0c8 <__kernel_rem_pio2+0x6e0>)
 800de18:	f7f3 fab6 	bl	8001388 <__aeabi_dmul>
 800de1c:	0002      	movs	r2, r0
 800de1e:	000b      	movs	r3, r1
 800de20:	0020      	movs	r0, r4
 800de22:	0029      	movs	r1, r5
 800de24:	f7f3 fd1c 	bl	8001860 <__aeabi_dsub>
 800de28:	f7f4 f8ac 	bl	8001f84 <__aeabi_d2iz>
 800de2c:	ab12      	add	r3, sp, #72	; 0x48
 800de2e:	51d8      	str	r0, [r3, r7]
 800de30:	9b04      	ldr	r3, [sp, #16]
 800de32:	aa12      	add	r2, sp, #72	; 0x48
 800de34:	3301      	adds	r3, #1
 800de36:	9300      	str	r3, [sp, #0]
 800de38:	9b02      	ldr	r3, [sp, #8]
 800de3a:	3318      	adds	r3, #24
 800de3c:	9302      	str	r3, [sp, #8]
 800de3e:	9b00      	ldr	r3, [sp, #0]
 800de40:	009b      	lsls	r3, r3, #2
 800de42:	509e      	str	r6, [r3, r2]
 800de44:	e725      	b.n	800dc92 <__kernel_rem_pio2+0x2aa>
 800de46:	9b04      	ldr	r3, [sp, #16]
 800de48:	0020      	movs	r0, r4
 800de4a:	0029      	movs	r1, r5
 800de4c:	009e      	lsls	r6, r3, #2
 800de4e:	f7f4 f899 	bl	8001f84 <__aeabi_d2iz>
 800de52:	ab12      	add	r3, sp, #72	; 0x48
 800de54:	5198      	str	r0, [r3, r6]
 800de56:	9b04      	ldr	r3, [sp, #16]
 800de58:	9300      	str	r3, [sp, #0]
 800de5a:	e71a      	b.n	800dc92 <__kernel_rem_pio2+0x2aa>
 800de5c:	00e5      	lsls	r5, r4, #3
 800de5e:	ab76      	add	r3, sp, #472	; 0x1d8
 800de60:	aa12      	add	r2, sp, #72	; 0x48
 800de62:	195d      	adds	r5, r3, r5
 800de64:	00a3      	lsls	r3, r4, #2
 800de66:	5898      	ldr	r0, [r3, r2]
 800de68:	f7f4 f8c2 	bl	8001ff0 <__aeabi_i2d>
 800de6c:	0032      	movs	r2, r6
 800de6e:	003b      	movs	r3, r7
 800de70:	f7f3 fa8a 	bl	8001388 <__aeabi_dmul>
 800de74:	2200      	movs	r2, #0
 800de76:	6028      	str	r0, [r5, #0]
 800de78:	6069      	str	r1, [r5, #4]
 800de7a:	4b94      	ldr	r3, [pc, #592]	; (800e0cc <__kernel_rem_pio2+0x6e4>)
 800de7c:	0030      	movs	r0, r6
 800de7e:	0039      	movs	r1, r7
 800de80:	f7f3 fa82 	bl	8001388 <__aeabi_dmul>
 800de84:	3c01      	subs	r4, #1
 800de86:	0006      	movs	r6, r0
 800de88:	000f      	movs	r7, r1
 800de8a:	e70a      	b.n	800dca2 <__kernel_rem_pio2+0x2ba>
 800de8c:	4b90      	ldr	r3, [pc, #576]	; (800e0d0 <__kernel_rem_pio2+0x6e8>)
 800de8e:	00e1      	lsls	r1, r4, #3
 800de90:	1859      	adds	r1, r3, r1
 800de92:	6808      	ldr	r0, [r1, #0]
 800de94:	6849      	ldr	r1, [r1, #4]
 800de96:	cf0c      	ldmia	r7!, {r2, r3}
 800de98:	f7f3 fa76 	bl	8001388 <__aeabi_dmul>
 800de9c:	0002      	movs	r2, r0
 800de9e:	000b      	movs	r3, r1
 800dea0:	9802      	ldr	r0, [sp, #8]
 800dea2:	9903      	ldr	r1, [sp, #12]
 800dea4:	f7f2 fb00 	bl	80004a8 <__aeabi_dadd>
 800dea8:	9002      	str	r0, [sp, #8]
 800deaa:	9103      	str	r1, [sp, #12]
 800deac:	3401      	adds	r4, #1
 800deae:	9b08      	ldr	r3, [sp, #32]
 800deb0:	429c      	cmp	r4, r3
 800deb2:	dc01      	bgt.n	800deb8 <__kernel_rem_pio2+0x4d0>
 800deb4:	42a6      	cmp	r6, r4
 800deb6:	dae9      	bge.n	800de8c <__kernel_rem_pio2+0x4a4>
 800deb8:	00f3      	lsls	r3, r6, #3
 800deba:	aa4e      	add	r2, sp, #312	; 0x138
 800debc:	18d3      	adds	r3, r2, r3
 800debe:	3d01      	subs	r5, #1
 800dec0:	9902      	ldr	r1, [sp, #8]
 800dec2:	9a03      	ldr	r2, [sp, #12]
 800dec4:	3601      	adds	r6, #1
 800dec6:	6019      	str	r1, [r3, #0]
 800dec8:	605a      	str	r2, [r3, #4]
 800deca:	e6ef      	b.n	800dcac <__kernel_rem_pio2+0x2c4>
 800decc:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800dece:	2b02      	cmp	r3, #2
 800ded0:	dc0b      	bgt.n	800deea <__kernel_rem_pio2+0x502>
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	dd00      	ble.n	800ded8 <__kernel_rem_pio2+0x4f0>
 800ded6:	e08a      	b.n	800dfee <__kernel_rem_pio2+0x606>
 800ded8:	d055      	beq.n	800df86 <__kernel_rem_pio2+0x59e>
 800deda:	2007      	movs	r0, #7
 800dedc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dede:	4003      	ands	r3, r0
 800dee0:	0018      	movs	r0, r3
 800dee2:	239f      	movs	r3, #159	; 0x9f
 800dee4:	009b      	lsls	r3, r3, #2
 800dee6:	449d      	add	sp, r3
 800dee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800deea:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800deec:	2b03      	cmp	r3, #3
 800deee:	d1f4      	bne.n	800deda <__kernel_rem_pio2+0x4f2>
 800def0:	9b00      	ldr	r3, [sp, #0]
 800def2:	00dc      	lsls	r4, r3, #3
 800def4:	ab4e      	add	r3, sp, #312	; 0x138
 800def6:	191c      	adds	r4, r3, r4
 800def8:	0025      	movs	r5, r4
 800defa:	9b00      	ldr	r3, [sp, #0]
 800defc:	9302      	str	r3, [sp, #8]
 800defe:	9b02      	ldr	r3, [sp, #8]
 800df00:	3d08      	subs	r5, #8
 800df02:	2b00      	cmp	r3, #0
 800df04:	dd00      	ble.n	800df08 <__kernel_rem_pio2+0x520>
 800df06:	e083      	b.n	800e010 <__kernel_rem_pio2+0x628>
 800df08:	9d00      	ldr	r5, [sp, #0]
 800df0a:	3c08      	subs	r4, #8
 800df0c:	2d01      	cmp	r5, #1
 800df0e:	dd00      	ble.n	800df12 <__kernel_rem_pio2+0x52a>
 800df10:	e0a0      	b.n	800e054 <__kernel_rem_pio2+0x66c>
 800df12:	2400      	movs	r4, #0
 800df14:	0021      	movs	r1, r4
 800df16:	9b00      	ldr	r3, [sp, #0]
 800df18:	2b01      	cmp	r3, #1
 800df1a:	dd00      	ble.n	800df1e <__kernel_rem_pio2+0x536>
 800df1c:	e0b8      	b.n	800e090 <__kernel_rem_pio2+0x6a8>
 800df1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df20:	9f4e      	ldr	r7, [sp, #312]	; 0x138
 800df22:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
 800df24:	9d50      	ldr	r5, [sp, #320]	; 0x140
 800df26:	9851      	ldr	r0, [sp, #324]	; 0x144
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d000      	beq.n	800df2e <__kernel_rem_pio2+0x546>
 800df2c:	e0be      	b.n	800e0ac <__kernel_rem_pio2+0x6c4>
 800df2e:	0033      	movs	r3, r6
 800df30:	003a      	movs	r2, r7
 800df32:	9e07      	ldr	r6, [sp, #28]
 800df34:	6032      	str	r2, [r6, #0]
 800df36:	6073      	str	r3, [r6, #4]
 800df38:	002a      	movs	r2, r5
 800df3a:	0003      	movs	r3, r0
 800df3c:	60b2      	str	r2, [r6, #8]
 800df3e:	60f3      	str	r3, [r6, #12]
 800df40:	0022      	movs	r2, r4
 800df42:	000b      	movs	r3, r1
 800df44:	6132      	str	r2, [r6, #16]
 800df46:	6173      	str	r3, [r6, #20]
 800df48:	e7c7      	b.n	800deda <__kernel_rem_pio2+0x4f2>
 800df4a:	9b00      	ldr	r3, [sp, #0]
 800df4c:	aa4e      	add	r2, sp, #312	; 0x138
 800df4e:	00db      	lsls	r3, r3, #3
 800df50:	18d3      	adds	r3, r2, r3
 800df52:	0028      	movs	r0, r5
 800df54:	681a      	ldr	r2, [r3, #0]
 800df56:	685b      	ldr	r3, [r3, #4]
 800df58:	0021      	movs	r1, r4
 800df5a:	f7f2 faa5 	bl	80004a8 <__aeabi_dadd>
 800df5e:	0005      	movs	r5, r0
 800df60:	000c      	movs	r4, r1
 800df62:	9b00      	ldr	r3, [sp, #0]
 800df64:	3b01      	subs	r3, #1
 800df66:	9300      	str	r3, [sp, #0]
 800df68:	9b00      	ldr	r3, [sp, #0]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	daed      	bge.n	800df4a <__kernel_rem_pio2+0x562>
 800df6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df70:	2b00      	cmp	r3, #0
 800df72:	d002      	beq.n	800df7a <__kernel_rem_pio2+0x592>
 800df74:	2380      	movs	r3, #128	; 0x80
 800df76:	061b      	lsls	r3, r3, #24
 800df78:	18e4      	adds	r4, r4, r3
 800df7a:	002a      	movs	r2, r5
 800df7c:	0023      	movs	r3, r4
 800df7e:	9907      	ldr	r1, [sp, #28]
 800df80:	600a      	str	r2, [r1, #0]
 800df82:	604b      	str	r3, [r1, #4]
 800df84:	e7a9      	b.n	800deda <__kernel_rem_pio2+0x4f2>
 800df86:	9da4      	ldr	r5, [sp, #656]	; 0x290
 800df88:	002c      	movs	r4, r5
 800df8a:	e7ed      	b.n	800df68 <__kernel_rem_pio2+0x580>
 800df8c:	00e3      	lsls	r3, r4, #3
 800df8e:	aa4e      	add	r2, sp, #312	; 0x138
 800df90:	18d3      	adds	r3, r2, r3
 800df92:	0030      	movs	r0, r6
 800df94:	681a      	ldr	r2, [r3, #0]
 800df96:	685b      	ldr	r3, [r3, #4]
 800df98:	0029      	movs	r1, r5
 800df9a:	f7f2 fa85 	bl	80004a8 <__aeabi_dadd>
 800df9e:	0006      	movs	r6, r0
 800dfa0:	000d      	movs	r5, r1
 800dfa2:	3c01      	subs	r4, #1
 800dfa4:	2c00      	cmp	r4, #0
 800dfa6:	daf1      	bge.n	800df8c <__kernel_rem_pio2+0x5a4>
 800dfa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dfaa:	0029      	movs	r1, r5
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d002      	beq.n	800dfb6 <__kernel_rem_pio2+0x5ce>
 800dfb0:	2380      	movs	r3, #128	; 0x80
 800dfb2:	061b      	lsls	r3, r3, #24
 800dfb4:	18e9      	adds	r1, r5, r3
 800dfb6:	0032      	movs	r2, r6
 800dfb8:	000b      	movs	r3, r1
 800dfba:	9907      	ldr	r1, [sp, #28]
 800dfbc:	2401      	movs	r4, #1
 800dfbe:	600a      	str	r2, [r1, #0]
 800dfc0:	604b      	str	r3, [r1, #4]
 800dfc2:	984e      	ldr	r0, [sp, #312]	; 0x138
 800dfc4:	994f      	ldr	r1, [sp, #316]	; 0x13c
 800dfc6:	002b      	movs	r3, r5
 800dfc8:	f7f3 fc4a 	bl	8001860 <__aeabi_dsub>
 800dfcc:	0006      	movs	r6, r0
 800dfce:	000d      	movs	r5, r1
 800dfd0:	9b00      	ldr	r3, [sp, #0]
 800dfd2:	42a3      	cmp	r3, r4
 800dfd4:	da0f      	bge.n	800dff6 <__kernel_rem_pio2+0x60e>
 800dfd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d002      	beq.n	800dfe2 <__kernel_rem_pio2+0x5fa>
 800dfdc:	2380      	movs	r3, #128	; 0x80
 800dfde:	061b      	lsls	r3, r3, #24
 800dfe0:	18ed      	adds	r5, r5, r3
 800dfe2:	0032      	movs	r2, r6
 800dfe4:	002b      	movs	r3, r5
 800dfe6:	9907      	ldr	r1, [sp, #28]
 800dfe8:	608a      	str	r2, [r1, #8]
 800dfea:	60cb      	str	r3, [r1, #12]
 800dfec:	e775      	b.n	800deda <__kernel_rem_pio2+0x4f2>
 800dfee:	2600      	movs	r6, #0
 800dff0:	9c00      	ldr	r4, [sp, #0]
 800dff2:	0035      	movs	r5, r6
 800dff4:	e7d6      	b.n	800dfa4 <__kernel_rem_pio2+0x5bc>
 800dff6:	00e3      	lsls	r3, r4, #3
 800dff8:	aa4e      	add	r2, sp, #312	; 0x138
 800dffa:	18d3      	adds	r3, r2, r3
 800dffc:	0030      	movs	r0, r6
 800dffe:	681a      	ldr	r2, [r3, #0]
 800e000:	685b      	ldr	r3, [r3, #4]
 800e002:	0029      	movs	r1, r5
 800e004:	f7f2 fa50 	bl	80004a8 <__aeabi_dadd>
 800e008:	3401      	adds	r4, #1
 800e00a:	0006      	movs	r6, r0
 800e00c:	000d      	movs	r5, r1
 800e00e:	e7df      	b.n	800dfd0 <__kernel_rem_pio2+0x5e8>
 800e010:	9b02      	ldr	r3, [sp, #8]
 800e012:	68ae      	ldr	r6, [r5, #8]
 800e014:	68ef      	ldr	r7, [r5, #12]
 800e016:	3b01      	subs	r3, #1
 800e018:	9302      	str	r3, [sp, #8]
 800e01a:	682a      	ldr	r2, [r5, #0]
 800e01c:	686b      	ldr	r3, [r5, #4]
 800e01e:	9204      	str	r2, [sp, #16]
 800e020:	9305      	str	r3, [sp, #20]
 800e022:	9804      	ldr	r0, [sp, #16]
 800e024:	9905      	ldr	r1, [sp, #20]
 800e026:	0032      	movs	r2, r6
 800e028:	003b      	movs	r3, r7
 800e02a:	f7f2 fa3d 	bl	80004a8 <__aeabi_dadd>
 800e02e:	0002      	movs	r2, r0
 800e030:	000b      	movs	r3, r1
 800e032:	9008      	str	r0, [sp, #32]
 800e034:	9109      	str	r1, [sp, #36]	; 0x24
 800e036:	9804      	ldr	r0, [sp, #16]
 800e038:	9905      	ldr	r1, [sp, #20]
 800e03a:	f7f3 fc11 	bl	8001860 <__aeabi_dsub>
 800e03e:	0032      	movs	r2, r6
 800e040:	003b      	movs	r3, r7
 800e042:	f7f2 fa31 	bl	80004a8 <__aeabi_dadd>
 800e046:	9a08      	ldr	r2, [sp, #32]
 800e048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e04a:	60a8      	str	r0, [r5, #8]
 800e04c:	60e9      	str	r1, [r5, #12]
 800e04e:	602a      	str	r2, [r5, #0]
 800e050:	606b      	str	r3, [r5, #4]
 800e052:	e754      	b.n	800defe <__kernel_rem_pio2+0x516>
 800e054:	6826      	ldr	r6, [r4, #0]
 800e056:	6867      	ldr	r7, [r4, #4]
 800e058:	68a2      	ldr	r2, [r4, #8]
 800e05a:	68e3      	ldr	r3, [r4, #12]
 800e05c:	0030      	movs	r0, r6
 800e05e:	0039      	movs	r1, r7
 800e060:	9202      	str	r2, [sp, #8]
 800e062:	9303      	str	r3, [sp, #12]
 800e064:	f7f2 fa20 	bl	80004a8 <__aeabi_dadd>
 800e068:	0002      	movs	r2, r0
 800e06a:	000b      	movs	r3, r1
 800e06c:	9004      	str	r0, [sp, #16]
 800e06e:	9105      	str	r1, [sp, #20]
 800e070:	0030      	movs	r0, r6
 800e072:	0039      	movs	r1, r7
 800e074:	f7f3 fbf4 	bl	8001860 <__aeabi_dsub>
 800e078:	9a02      	ldr	r2, [sp, #8]
 800e07a:	9b03      	ldr	r3, [sp, #12]
 800e07c:	f7f2 fa14 	bl	80004a8 <__aeabi_dadd>
 800e080:	9a04      	ldr	r2, [sp, #16]
 800e082:	9b05      	ldr	r3, [sp, #20]
 800e084:	60a0      	str	r0, [r4, #8]
 800e086:	60e1      	str	r1, [r4, #12]
 800e088:	6022      	str	r2, [r4, #0]
 800e08a:	6063      	str	r3, [r4, #4]
 800e08c:	3d01      	subs	r5, #1
 800e08e:	e73c      	b.n	800df0a <__kernel_rem_pio2+0x522>
 800e090:	9b00      	ldr	r3, [sp, #0]
 800e092:	aa4e      	add	r2, sp, #312	; 0x138
 800e094:	00db      	lsls	r3, r3, #3
 800e096:	18d3      	adds	r3, r2, r3
 800e098:	0020      	movs	r0, r4
 800e09a:	681a      	ldr	r2, [r3, #0]
 800e09c:	685b      	ldr	r3, [r3, #4]
 800e09e:	f7f2 fa03 	bl	80004a8 <__aeabi_dadd>
 800e0a2:	9b00      	ldr	r3, [sp, #0]
 800e0a4:	0004      	movs	r4, r0
 800e0a6:	3b01      	subs	r3, #1
 800e0a8:	9300      	str	r3, [sp, #0]
 800e0aa:	e734      	b.n	800df16 <__kernel_rem_pio2+0x52e>
 800e0ac:	9b07      	ldr	r3, [sp, #28]
 800e0ae:	9a07      	ldr	r2, [sp, #28]
 800e0b0:	601f      	str	r7, [r3, #0]
 800e0b2:	2380      	movs	r3, #128	; 0x80
 800e0b4:	061b      	lsls	r3, r3, #24
 800e0b6:	18f6      	adds	r6, r6, r3
 800e0b8:	18c0      	adds	r0, r0, r3
 800e0ba:	18c9      	adds	r1, r1, r3
 800e0bc:	6056      	str	r6, [r2, #4]
 800e0be:	6095      	str	r5, [r2, #8]
 800e0c0:	60d0      	str	r0, [r2, #12]
 800e0c2:	6114      	str	r4, [r2, #16]
 800e0c4:	6151      	str	r1, [r2, #20]
 800e0c6:	e708      	b.n	800deda <__kernel_rem_pio2+0x4f2>
 800e0c8:	41700000 	.word	0x41700000
 800e0cc:	3e700000 	.word	0x3e700000
 800e0d0:	08011838 	.word	0x08011838

0800e0d4 <__kernel_sin>:
 800e0d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0d6:	b089      	sub	sp, #36	; 0x24
 800e0d8:	9202      	str	r2, [sp, #8]
 800e0da:	9303      	str	r3, [sp, #12]
 800e0dc:	22f9      	movs	r2, #249	; 0xf9
 800e0de:	004b      	lsls	r3, r1, #1
 800e0e0:	0007      	movs	r7, r0
 800e0e2:	000e      	movs	r6, r1
 800e0e4:	085b      	lsrs	r3, r3, #1
 800e0e6:	0592      	lsls	r2, r2, #22
 800e0e8:	4293      	cmp	r3, r2
 800e0ea:	da03      	bge.n	800e0f4 <__kernel_sin+0x20>
 800e0ec:	f7f3 ff4a 	bl	8001f84 <__aeabi_d2iz>
 800e0f0:	2800      	cmp	r0, #0
 800e0f2:	d04c      	beq.n	800e18e <__kernel_sin+0xba>
 800e0f4:	003a      	movs	r2, r7
 800e0f6:	0033      	movs	r3, r6
 800e0f8:	0038      	movs	r0, r7
 800e0fa:	0031      	movs	r1, r6
 800e0fc:	f7f3 f944 	bl	8001388 <__aeabi_dmul>
 800e100:	0004      	movs	r4, r0
 800e102:	000d      	movs	r5, r1
 800e104:	0002      	movs	r2, r0
 800e106:	000b      	movs	r3, r1
 800e108:	0038      	movs	r0, r7
 800e10a:	0031      	movs	r1, r6
 800e10c:	f7f3 f93c 	bl	8001388 <__aeabi_dmul>
 800e110:	4a39      	ldr	r2, [pc, #228]	; (800e1f8 <__kernel_sin+0x124>)
 800e112:	9000      	str	r0, [sp, #0]
 800e114:	9101      	str	r1, [sp, #4]
 800e116:	4b39      	ldr	r3, [pc, #228]	; (800e1fc <__kernel_sin+0x128>)
 800e118:	0020      	movs	r0, r4
 800e11a:	0029      	movs	r1, r5
 800e11c:	f7f3 f934 	bl	8001388 <__aeabi_dmul>
 800e120:	4a37      	ldr	r2, [pc, #220]	; (800e200 <__kernel_sin+0x12c>)
 800e122:	4b38      	ldr	r3, [pc, #224]	; (800e204 <__kernel_sin+0x130>)
 800e124:	f7f3 fb9c 	bl	8001860 <__aeabi_dsub>
 800e128:	0022      	movs	r2, r4
 800e12a:	002b      	movs	r3, r5
 800e12c:	f7f3 f92c 	bl	8001388 <__aeabi_dmul>
 800e130:	4a35      	ldr	r2, [pc, #212]	; (800e208 <__kernel_sin+0x134>)
 800e132:	4b36      	ldr	r3, [pc, #216]	; (800e20c <__kernel_sin+0x138>)
 800e134:	f7f2 f9b8 	bl	80004a8 <__aeabi_dadd>
 800e138:	0022      	movs	r2, r4
 800e13a:	002b      	movs	r3, r5
 800e13c:	f7f3 f924 	bl	8001388 <__aeabi_dmul>
 800e140:	4a33      	ldr	r2, [pc, #204]	; (800e210 <__kernel_sin+0x13c>)
 800e142:	4b34      	ldr	r3, [pc, #208]	; (800e214 <__kernel_sin+0x140>)
 800e144:	f7f3 fb8c 	bl	8001860 <__aeabi_dsub>
 800e148:	0022      	movs	r2, r4
 800e14a:	002b      	movs	r3, r5
 800e14c:	f7f3 f91c 	bl	8001388 <__aeabi_dmul>
 800e150:	4b31      	ldr	r3, [pc, #196]	; (800e218 <__kernel_sin+0x144>)
 800e152:	4a32      	ldr	r2, [pc, #200]	; (800e21c <__kernel_sin+0x148>)
 800e154:	f7f2 f9a8 	bl	80004a8 <__aeabi_dadd>
 800e158:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e15a:	9004      	str	r0, [sp, #16]
 800e15c:	9105      	str	r1, [sp, #20]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d119      	bne.n	800e196 <__kernel_sin+0xc2>
 800e162:	0002      	movs	r2, r0
 800e164:	000b      	movs	r3, r1
 800e166:	0020      	movs	r0, r4
 800e168:	0029      	movs	r1, r5
 800e16a:	f7f3 f90d 	bl	8001388 <__aeabi_dmul>
 800e16e:	4a2c      	ldr	r2, [pc, #176]	; (800e220 <__kernel_sin+0x14c>)
 800e170:	4b2c      	ldr	r3, [pc, #176]	; (800e224 <__kernel_sin+0x150>)
 800e172:	f7f3 fb75 	bl	8001860 <__aeabi_dsub>
 800e176:	9a00      	ldr	r2, [sp, #0]
 800e178:	9b01      	ldr	r3, [sp, #4]
 800e17a:	f7f3 f905 	bl	8001388 <__aeabi_dmul>
 800e17e:	0002      	movs	r2, r0
 800e180:	000b      	movs	r3, r1
 800e182:	0038      	movs	r0, r7
 800e184:	0031      	movs	r1, r6
 800e186:	f7f2 f98f 	bl	80004a8 <__aeabi_dadd>
 800e18a:	0007      	movs	r7, r0
 800e18c:	000e      	movs	r6, r1
 800e18e:	0038      	movs	r0, r7
 800e190:	0031      	movs	r1, r6
 800e192:	b009      	add	sp, #36	; 0x24
 800e194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e196:	2200      	movs	r2, #0
 800e198:	9802      	ldr	r0, [sp, #8]
 800e19a:	9903      	ldr	r1, [sp, #12]
 800e19c:	4b22      	ldr	r3, [pc, #136]	; (800e228 <__kernel_sin+0x154>)
 800e19e:	f7f3 f8f3 	bl	8001388 <__aeabi_dmul>
 800e1a2:	9a04      	ldr	r2, [sp, #16]
 800e1a4:	9b05      	ldr	r3, [sp, #20]
 800e1a6:	9006      	str	r0, [sp, #24]
 800e1a8:	9107      	str	r1, [sp, #28]
 800e1aa:	9800      	ldr	r0, [sp, #0]
 800e1ac:	9901      	ldr	r1, [sp, #4]
 800e1ae:	f7f3 f8eb 	bl	8001388 <__aeabi_dmul>
 800e1b2:	0002      	movs	r2, r0
 800e1b4:	000b      	movs	r3, r1
 800e1b6:	9806      	ldr	r0, [sp, #24]
 800e1b8:	9907      	ldr	r1, [sp, #28]
 800e1ba:	f7f3 fb51 	bl	8001860 <__aeabi_dsub>
 800e1be:	0022      	movs	r2, r4
 800e1c0:	002b      	movs	r3, r5
 800e1c2:	f7f3 f8e1 	bl	8001388 <__aeabi_dmul>
 800e1c6:	9a02      	ldr	r2, [sp, #8]
 800e1c8:	9b03      	ldr	r3, [sp, #12]
 800e1ca:	f7f3 fb49 	bl	8001860 <__aeabi_dsub>
 800e1ce:	4a14      	ldr	r2, [pc, #80]	; (800e220 <__kernel_sin+0x14c>)
 800e1d0:	0004      	movs	r4, r0
 800e1d2:	000d      	movs	r5, r1
 800e1d4:	9800      	ldr	r0, [sp, #0]
 800e1d6:	9901      	ldr	r1, [sp, #4]
 800e1d8:	4b12      	ldr	r3, [pc, #72]	; (800e224 <__kernel_sin+0x150>)
 800e1da:	f7f3 f8d5 	bl	8001388 <__aeabi_dmul>
 800e1de:	0002      	movs	r2, r0
 800e1e0:	000b      	movs	r3, r1
 800e1e2:	0020      	movs	r0, r4
 800e1e4:	0029      	movs	r1, r5
 800e1e6:	f7f2 f95f 	bl	80004a8 <__aeabi_dadd>
 800e1ea:	0002      	movs	r2, r0
 800e1ec:	000b      	movs	r3, r1
 800e1ee:	0038      	movs	r0, r7
 800e1f0:	0031      	movs	r1, r6
 800e1f2:	f7f3 fb35 	bl	8001860 <__aeabi_dsub>
 800e1f6:	e7c8      	b.n	800e18a <__kernel_sin+0xb6>
 800e1f8:	5acfd57c 	.word	0x5acfd57c
 800e1fc:	3de5d93a 	.word	0x3de5d93a
 800e200:	8a2b9ceb 	.word	0x8a2b9ceb
 800e204:	3e5ae5e6 	.word	0x3e5ae5e6
 800e208:	57b1fe7d 	.word	0x57b1fe7d
 800e20c:	3ec71de3 	.word	0x3ec71de3
 800e210:	19c161d5 	.word	0x19c161d5
 800e214:	3f2a01a0 	.word	0x3f2a01a0
 800e218:	3f811111 	.word	0x3f811111
 800e21c:	1110f8a6 	.word	0x1110f8a6
 800e220:	55555549 	.word	0x55555549
 800e224:	3fc55555 	.word	0x3fc55555
 800e228:	3fe00000 	.word	0x3fe00000

0800e22c <fabs>:
 800e22c:	004b      	lsls	r3, r1, #1
 800e22e:	0859      	lsrs	r1, r3, #1
 800e230:	4770      	bx	lr
	...

0800e234 <floor>:
 800e234:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e236:	004b      	lsls	r3, r1, #1
 800e238:	4a3d      	ldr	r2, [pc, #244]	; (800e330 <floor+0xfc>)
 800e23a:	0d5b      	lsrs	r3, r3, #21
 800e23c:	189f      	adds	r7, r3, r2
 800e23e:	4684      	mov	ip, r0
 800e240:	000e      	movs	r6, r1
 800e242:	000d      	movs	r5, r1
 800e244:	0004      	movs	r4, r0
 800e246:	9001      	str	r0, [sp, #4]
 800e248:	2f13      	cmp	r7, #19
 800e24a:	dc34      	bgt.n	800e2b6 <floor+0x82>
 800e24c:	2f00      	cmp	r7, #0
 800e24e:	da16      	bge.n	800e27e <floor+0x4a>
 800e250:	4a38      	ldr	r2, [pc, #224]	; (800e334 <floor+0x100>)
 800e252:	4b39      	ldr	r3, [pc, #228]	; (800e338 <floor+0x104>)
 800e254:	4660      	mov	r0, ip
 800e256:	0031      	movs	r1, r6
 800e258:	f7f2 f926 	bl	80004a8 <__aeabi_dadd>
 800e25c:	2200      	movs	r2, #0
 800e25e:	2300      	movs	r3, #0
 800e260:	f7f2 f8f0 	bl	8000444 <__aeabi_dcmpgt>
 800e264:	2800      	cmp	r0, #0
 800e266:	d007      	beq.n	800e278 <floor+0x44>
 800e268:	2e00      	cmp	r6, #0
 800e26a:	da5d      	bge.n	800e328 <floor+0xf4>
 800e26c:	0073      	lsls	r3, r6, #1
 800e26e:	085b      	lsrs	r3, r3, #1
 800e270:	431c      	orrs	r4, r3
 800e272:	d001      	beq.n	800e278 <floor+0x44>
 800e274:	2400      	movs	r4, #0
 800e276:	4d31      	ldr	r5, [pc, #196]	; (800e33c <floor+0x108>)
 800e278:	46a4      	mov	ip, r4
 800e27a:	002e      	movs	r6, r5
 800e27c:	e029      	b.n	800e2d2 <floor+0x9e>
 800e27e:	4b30      	ldr	r3, [pc, #192]	; (800e340 <floor+0x10c>)
 800e280:	413b      	asrs	r3, r7
 800e282:	9300      	str	r3, [sp, #0]
 800e284:	400b      	ands	r3, r1
 800e286:	4303      	orrs	r3, r0
 800e288:	d023      	beq.n	800e2d2 <floor+0x9e>
 800e28a:	4a2a      	ldr	r2, [pc, #168]	; (800e334 <floor+0x100>)
 800e28c:	4b2a      	ldr	r3, [pc, #168]	; (800e338 <floor+0x104>)
 800e28e:	4660      	mov	r0, ip
 800e290:	0031      	movs	r1, r6
 800e292:	f7f2 f909 	bl	80004a8 <__aeabi_dadd>
 800e296:	2200      	movs	r2, #0
 800e298:	2300      	movs	r3, #0
 800e29a:	f7f2 f8d3 	bl	8000444 <__aeabi_dcmpgt>
 800e29e:	2800      	cmp	r0, #0
 800e2a0:	d0ea      	beq.n	800e278 <floor+0x44>
 800e2a2:	2e00      	cmp	r6, #0
 800e2a4:	da03      	bge.n	800e2ae <floor+0x7a>
 800e2a6:	2380      	movs	r3, #128	; 0x80
 800e2a8:	035b      	lsls	r3, r3, #13
 800e2aa:	413b      	asrs	r3, r7
 800e2ac:	18f5      	adds	r5, r6, r3
 800e2ae:	9b00      	ldr	r3, [sp, #0]
 800e2b0:	2400      	movs	r4, #0
 800e2b2:	439d      	bics	r5, r3
 800e2b4:	e7e0      	b.n	800e278 <floor+0x44>
 800e2b6:	2f33      	cmp	r7, #51	; 0x33
 800e2b8:	dd0f      	ble.n	800e2da <floor+0xa6>
 800e2ba:	2380      	movs	r3, #128	; 0x80
 800e2bc:	00db      	lsls	r3, r3, #3
 800e2be:	429f      	cmp	r7, r3
 800e2c0:	d107      	bne.n	800e2d2 <floor+0x9e>
 800e2c2:	0002      	movs	r2, r0
 800e2c4:	000b      	movs	r3, r1
 800e2c6:	4660      	mov	r0, ip
 800e2c8:	0031      	movs	r1, r6
 800e2ca:	f7f2 f8ed 	bl	80004a8 <__aeabi_dadd>
 800e2ce:	4684      	mov	ip, r0
 800e2d0:	000e      	movs	r6, r1
 800e2d2:	4660      	mov	r0, ip
 800e2d4:	0031      	movs	r1, r6
 800e2d6:	b003      	add	sp, #12
 800e2d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2da:	4a1a      	ldr	r2, [pc, #104]	; (800e344 <floor+0x110>)
 800e2dc:	189b      	adds	r3, r3, r2
 800e2de:	2201      	movs	r2, #1
 800e2e0:	4252      	negs	r2, r2
 800e2e2:	40da      	lsrs	r2, r3
 800e2e4:	9200      	str	r2, [sp, #0]
 800e2e6:	4210      	tst	r0, r2
 800e2e8:	d0f3      	beq.n	800e2d2 <floor+0x9e>
 800e2ea:	4a12      	ldr	r2, [pc, #72]	; (800e334 <floor+0x100>)
 800e2ec:	4b12      	ldr	r3, [pc, #72]	; (800e338 <floor+0x104>)
 800e2ee:	4660      	mov	r0, ip
 800e2f0:	0031      	movs	r1, r6
 800e2f2:	f7f2 f8d9 	bl	80004a8 <__aeabi_dadd>
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	f7f2 f8a3 	bl	8000444 <__aeabi_dcmpgt>
 800e2fe:	2800      	cmp	r0, #0
 800e300:	d0ba      	beq.n	800e278 <floor+0x44>
 800e302:	2e00      	cmp	r6, #0
 800e304:	da02      	bge.n	800e30c <floor+0xd8>
 800e306:	2f14      	cmp	r7, #20
 800e308:	d103      	bne.n	800e312 <floor+0xde>
 800e30a:	3501      	adds	r5, #1
 800e30c:	9b00      	ldr	r3, [sp, #0]
 800e30e:	439c      	bics	r4, r3
 800e310:	e7b2      	b.n	800e278 <floor+0x44>
 800e312:	2334      	movs	r3, #52	; 0x34
 800e314:	1bdf      	subs	r7, r3, r7
 800e316:	3b33      	subs	r3, #51	; 0x33
 800e318:	40bb      	lsls	r3, r7
 800e31a:	18e4      	adds	r4, r4, r3
 800e31c:	9b01      	ldr	r3, [sp, #4]
 800e31e:	429c      	cmp	r4, r3
 800e320:	419b      	sbcs	r3, r3
 800e322:	425b      	negs	r3, r3
 800e324:	18f5      	adds	r5, r6, r3
 800e326:	e7f1      	b.n	800e30c <floor+0xd8>
 800e328:	2400      	movs	r4, #0
 800e32a:	0025      	movs	r5, r4
 800e32c:	e7a4      	b.n	800e278 <floor+0x44>
 800e32e:	46c0      	nop			; (mov r8, r8)
 800e330:	fffffc01 	.word	0xfffffc01
 800e334:	8800759c 	.word	0x8800759c
 800e338:	7e37e43c 	.word	0x7e37e43c
 800e33c:	bff00000 	.word	0xbff00000
 800e340:	000fffff 	.word	0x000fffff
 800e344:	fffffbed 	.word	0xfffffbed

0800e348 <scalbn>:
 800e348:	004b      	lsls	r3, r1, #1
 800e34a:	b570      	push	{r4, r5, r6, lr}
 800e34c:	0d5b      	lsrs	r3, r3, #21
 800e34e:	0014      	movs	r4, r2
 800e350:	000a      	movs	r2, r1
 800e352:	2b00      	cmp	r3, #0
 800e354:	d10d      	bne.n	800e372 <scalbn+0x2a>
 800e356:	004b      	lsls	r3, r1, #1
 800e358:	085b      	lsrs	r3, r3, #1
 800e35a:	4303      	orrs	r3, r0
 800e35c:	d010      	beq.n	800e380 <scalbn+0x38>
 800e35e:	4b27      	ldr	r3, [pc, #156]	; (800e3fc <scalbn+0xb4>)
 800e360:	2200      	movs	r2, #0
 800e362:	f7f3 f811 	bl	8001388 <__aeabi_dmul>
 800e366:	4b26      	ldr	r3, [pc, #152]	; (800e400 <scalbn+0xb8>)
 800e368:	429c      	cmp	r4, r3
 800e36a:	da0a      	bge.n	800e382 <scalbn+0x3a>
 800e36c:	4a25      	ldr	r2, [pc, #148]	; (800e404 <scalbn+0xbc>)
 800e36e:	4b26      	ldr	r3, [pc, #152]	; (800e408 <scalbn+0xc0>)
 800e370:	e019      	b.n	800e3a6 <scalbn+0x5e>
 800e372:	4d26      	ldr	r5, [pc, #152]	; (800e40c <scalbn+0xc4>)
 800e374:	42ab      	cmp	r3, r5
 800e376:	d108      	bne.n	800e38a <scalbn+0x42>
 800e378:	0002      	movs	r2, r0
 800e37a:	000b      	movs	r3, r1
 800e37c:	f7f2 f894 	bl	80004a8 <__aeabi_dadd>
 800e380:	bd70      	pop	{r4, r5, r6, pc}
 800e382:	000a      	movs	r2, r1
 800e384:	004b      	lsls	r3, r1, #1
 800e386:	0d5b      	lsrs	r3, r3, #21
 800e388:	3b36      	subs	r3, #54	; 0x36
 800e38a:	4d21      	ldr	r5, [pc, #132]	; (800e410 <scalbn+0xc8>)
 800e38c:	18e3      	adds	r3, r4, r3
 800e38e:	42ab      	cmp	r3, r5
 800e390:	dd0c      	ble.n	800e3ac <scalbn+0x64>
 800e392:	4c20      	ldr	r4, [pc, #128]	; (800e414 <scalbn+0xcc>)
 800e394:	4d20      	ldr	r5, [pc, #128]	; (800e418 <scalbn+0xd0>)
 800e396:	2900      	cmp	r1, #0
 800e398:	da01      	bge.n	800e39e <scalbn+0x56>
 800e39a:	4c1e      	ldr	r4, [pc, #120]	; (800e414 <scalbn+0xcc>)
 800e39c:	4d1f      	ldr	r5, [pc, #124]	; (800e41c <scalbn+0xd4>)
 800e39e:	0020      	movs	r0, r4
 800e3a0:	0029      	movs	r1, r5
 800e3a2:	4a1c      	ldr	r2, [pc, #112]	; (800e414 <scalbn+0xcc>)
 800e3a4:	4b1c      	ldr	r3, [pc, #112]	; (800e418 <scalbn+0xd0>)
 800e3a6:	f7f2 ffef 	bl	8001388 <__aeabi_dmul>
 800e3aa:	e7e9      	b.n	800e380 <scalbn+0x38>
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	dd05      	ble.n	800e3bc <scalbn+0x74>
 800e3b0:	4c1b      	ldr	r4, [pc, #108]	; (800e420 <scalbn+0xd8>)
 800e3b2:	051b      	lsls	r3, r3, #20
 800e3b4:	4022      	ands	r2, r4
 800e3b6:	431a      	orrs	r2, r3
 800e3b8:	0011      	movs	r1, r2
 800e3ba:	e7e1      	b.n	800e380 <scalbn+0x38>
 800e3bc:	001d      	movs	r5, r3
 800e3be:	3535      	adds	r5, #53	; 0x35
 800e3c0:	da13      	bge.n	800e3ea <scalbn+0xa2>
 800e3c2:	4a18      	ldr	r2, [pc, #96]	; (800e424 <scalbn+0xdc>)
 800e3c4:	0fcb      	lsrs	r3, r1, #31
 800e3c6:	4294      	cmp	r4, r2
 800e3c8:	dd08      	ble.n	800e3dc <scalbn+0x94>
 800e3ca:	4812      	ldr	r0, [pc, #72]	; (800e414 <scalbn+0xcc>)
 800e3cc:	4912      	ldr	r1, [pc, #72]	; (800e418 <scalbn+0xd0>)
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d001      	beq.n	800e3d6 <scalbn+0x8e>
 800e3d2:	4810      	ldr	r0, [pc, #64]	; (800e414 <scalbn+0xcc>)
 800e3d4:	4911      	ldr	r1, [pc, #68]	; (800e41c <scalbn+0xd4>)
 800e3d6:	4a0f      	ldr	r2, [pc, #60]	; (800e414 <scalbn+0xcc>)
 800e3d8:	4b0f      	ldr	r3, [pc, #60]	; (800e418 <scalbn+0xd0>)
 800e3da:	e7e4      	b.n	800e3a6 <scalbn+0x5e>
 800e3dc:	4809      	ldr	r0, [pc, #36]	; (800e404 <scalbn+0xbc>)
 800e3de:	490a      	ldr	r1, [pc, #40]	; (800e408 <scalbn+0xc0>)
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d0c3      	beq.n	800e36c <scalbn+0x24>
 800e3e4:	4807      	ldr	r0, [pc, #28]	; (800e404 <scalbn+0xbc>)
 800e3e6:	4910      	ldr	r1, [pc, #64]	; (800e428 <scalbn+0xe0>)
 800e3e8:	e7c0      	b.n	800e36c <scalbn+0x24>
 800e3ea:	4c0d      	ldr	r4, [pc, #52]	; (800e420 <scalbn+0xd8>)
 800e3ec:	3336      	adds	r3, #54	; 0x36
 800e3ee:	4022      	ands	r2, r4
 800e3f0:	051b      	lsls	r3, r3, #20
 800e3f2:	4313      	orrs	r3, r2
 800e3f4:	0019      	movs	r1, r3
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	4b0c      	ldr	r3, [pc, #48]	; (800e42c <scalbn+0xe4>)
 800e3fa:	e7d4      	b.n	800e3a6 <scalbn+0x5e>
 800e3fc:	43500000 	.word	0x43500000
 800e400:	ffff3cb0 	.word	0xffff3cb0
 800e404:	c2f8f359 	.word	0xc2f8f359
 800e408:	01a56e1f 	.word	0x01a56e1f
 800e40c:	000007ff 	.word	0x000007ff
 800e410:	000007fe 	.word	0x000007fe
 800e414:	8800759c 	.word	0x8800759c
 800e418:	7e37e43c 	.word	0x7e37e43c
 800e41c:	fe37e43c 	.word	0xfe37e43c
 800e420:	800fffff 	.word	0x800fffff
 800e424:	0000c350 	.word	0x0000c350
 800e428:	81a56e1f 	.word	0x81a56e1f
 800e42c:	3c900000 	.word	0x3c900000

0800e430 <_init>:
 800e430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e432:	46c0      	nop			; (mov r8, r8)
 800e434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e436:	bc08      	pop	{r3}
 800e438:	469e      	mov	lr, r3
 800e43a:	4770      	bx	lr

0800e43c <_fini>:
 800e43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e43e:	46c0      	nop			; (mov r8, r8)
 800e440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e442:	bc08      	pop	{r3}
 800e444:	469e      	mov	lr, r3
 800e446:	4770      	bx	lr
