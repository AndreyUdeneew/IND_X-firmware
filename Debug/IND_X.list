
IND_X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6b0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800a76c  0800a76c  0001a76c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a854  0800a854  00025144  2**0
                  CONTENTS
  4 .ARM          00000000  0800a854  0800a854  00025144  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a854  0800a854  00025144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a854  0800a854  0001a854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a858  0800a858  0001a858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00005144  20000000  0800a85c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024c0  20005144  0800f9a0  00025144  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007604  0800f9a0  00027604  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00025144  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d33  00000000  00000000  0002516c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034d5  00000000  00000000  0003ee9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001890  00000000  00000000  00042378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001718  00000000  00000000  00043c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c3f7  00000000  00000000  00045320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d08a  00000000  00000000  00061717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae23f  00000000  00000000  0007e7a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012c9e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059d4  00000000  00000000  0012ca34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20005144 	.word	0x20005144
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800a754 	.word	0x0800a754

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20005148 	.word	0x20005148
 8000100:	0800a754 	.word	0x0800a754

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b7f      	cmp	r3, #127	; 0x7f
 800022e:	d809      	bhi.n	8000244 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000230:	1dfb      	adds	r3, r7, #7
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	001a      	movs	r2, r3
 8000236:	231f      	movs	r3, #31
 8000238:	401a      	ands	r2, r3
 800023a:	4b04      	ldr	r3, [pc, #16]	; (800024c <__NVIC_EnableIRQ+0x30>)
 800023c:	2101      	movs	r1, #1
 800023e:	4091      	lsls	r1, r2
 8000240:	000a      	movs	r2, r1
 8000242:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e100 	.word	0xe000e100

08000250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	0002      	movs	r2, r0
 8000258:	6039      	str	r1, [r7, #0]
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b7f      	cmp	r3, #127	; 0x7f
 8000264:	d828      	bhi.n	80002b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000266:	4a2f      	ldr	r2, [pc, #188]	; (8000324 <__NVIC_SetPriority+0xd4>)
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	b25b      	sxtb	r3, r3
 800026e:	089b      	lsrs	r3, r3, #2
 8000270:	33c0      	adds	r3, #192	; 0xc0
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	589b      	ldr	r3, [r3, r2]
 8000276:	1dfa      	adds	r2, r7, #7
 8000278:	7812      	ldrb	r2, [r2, #0]
 800027a:	0011      	movs	r1, r2
 800027c:	2203      	movs	r2, #3
 800027e:	400a      	ands	r2, r1
 8000280:	00d2      	lsls	r2, r2, #3
 8000282:	21ff      	movs	r1, #255	; 0xff
 8000284:	4091      	lsls	r1, r2
 8000286:	000a      	movs	r2, r1
 8000288:	43d2      	mvns	r2, r2
 800028a:	401a      	ands	r2, r3
 800028c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	019b      	lsls	r3, r3, #6
 8000292:	22ff      	movs	r2, #255	; 0xff
 8000294:	401a      	ands	r2, r3
 8000296:	1dfb      	adds	r3, r7, #7
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	0018      	movs	r0, r3
 800029c:	2303      	movs	r3, #3
 800029e:	4003      	ands	r3, r0
 80002a0:	00db      	lsls	r3, r3, #3
 80002a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a4:	481f      	ldr	r0, [pc, #124]	; (8000324 <__NVIC_SetPriority+0xd4>)
 80002a6:	1dfb      	adds	r3, r7, #7
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	b25b      	sxtb	r3, r3
 80002ac:	089b      	lsrs	r3, r3, #2
 80002ae:	430a      	orrs	r2, r1
 80002b0:	33c0      	adds	r3, #192	; 0xc0
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002b6:	e031      	b.n	800031c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <__NVIC_SetPriority+0xd8>)
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	0019      	movs	r1, r3
 80002c0:	230f      	movs	r3, #15
 80002c2:	400b      	ands	r3, r1
 80002c4:	3b08      	subs	r3, #8
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	3306      	adds	r3, #6
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	18d3      	adds	r3, r2, r3
 80002ce:	3304      	adds	r3, #4
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1dfa      	adds	r2, r7, #7
 80002d4:	7812      	ldrb	r2, [r2, #0]
 80002d6:	0011      	movs	r1, r2
 80002d8:	2203      	movs	r2, #3
 80002da:	400a      	ands	r2, r1
 80002dc:	00d2      	lsls	r2, r2, #3
 80002de:	21ff      	movs	r1, #255	; 0xff
 80002e0:	4091      	lsls	r1, r2
 80002e2:	000a      	movs	r2, r1
 80002e4:	43d2      	mvns	r2, r2
 80002e6:	401a      	ands	r2, r3
 80002e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	019b      	lsls	r3, r3, #6
 80002ee:	22ff      	movs	r2, #255	; 0xff
 80002f0:	401a      	ands	r2, r3
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	0018      	movs	r0, r3
 80002f8:	2303      	movs	r3, #3
 80002fa:	4003      	ands	r3, r0
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	4809      	ldr	r0, [pc, #36]	; (8000328 <__NVIC_SetPriority+0xd8>)
 8000302:	1dfb      	adds	r3, r7, #7
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	001c      	movs	r4, r3
 8000308:	230f      	movs	r3, #15
 800030a:	4023      	ands	r3, r4
 800030c:	3b08      	subs	r3, #8
 800030e:	089b      	lsrs	r3, r3, #2
 8000310:	430a      	orrs	r2, r1
 8000312:	3306      	adds	r3, #6
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	18c3      	adds	r3, r0, r3
 8000318:	3304      	adds	r3, #4
 800031a:	601a      	str	r2, [r3, #0]
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b003      	add	sp, #12
 8000322:	bd90      	pop	{r4, r7, pc}
 8000324:	e000e100 	.word	0xe000e100
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2201      	movs	r2, #1
 800033a:	431a      	orrs	r2, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	601a      	str	r2, [r3, #0]
}
 8000340:	46c0      	nop			; (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	b002      	add	sp, #8
 8000346:	bd80      	pop	{r7, pc}

08000348 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a03      	ldr	r2, [pc, #12]	; (8000364 <LL_USART_DisableFIFO+0x1c>)
 8000356:	401a      	ands	r2, r3
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	601a      	str	r2, [r3, #0]
}
 800035c:	46c0      	nop			; (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	b002      	add	sp, #8
 8000362:	bd80      	pop	{r7, pc}
 8000364:	dfffffff 	.word	0xdfffffff

08000368 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	689b      	ldr	r3, [r3, #8]
 8000376:	00db      	lsls	r3, r3, #3
 8000378:	08da      	lsrs	r2, r3, #3
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	075b      	lsls	r3, r3, #29
 800037e:	431a      	orrs	r2, r3
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	609a      	str	r2, [r3, #8]
}
 8000384:	46c0      	nop			; (mov r8, r8)
 8000386:	46bd      	mov	sp, r7
 8000388:	b002      	add	sp, #8
 800038a:	bd80      	pop	{r7, pc}

0800038c <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	689b      	ldr	r3, [r3, #8]
 800039a:	4a05      	ldr	r2, [pc, #20]	; (80003b0 <LL_USART_SetRXFIFOThreshold+0x24>)
 800039c:	401a      	ands	r2, r3
 800039e:	683b      	ldr	r3, [r7, #0]
 80003a0:	065b      	lsls	r3, r3, #25
 80003a2:	431a      	orrs	r2, r3
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	609a      	str	r2, [r3, #8]
}
 80003a8:	46c0      	nop			; (mov r8, r8)
 80003aa:	46bd      	mov	sp, r7
 80003ac:	b002      	add	sp, #8
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	f1ffffff 	.word	0xf1ffffff

080003b4 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	685b      	ldr	r3, [r3, #4]
 80003c0:	4a07      	ldr	r2, [pc, #28]	; (80003e0 <LL_USART_ConfigAsyncMode+0x2c>)
 80003c2:	401a      	ands	r2, r3
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	689b      	ldr	r3, [r3, #8]
 80003cc:	222a      	movs	r2, #42	; 0x2a
 80003ce:	4393      	bics	r3, r2
 80003d0:	001a      	movs	r2, r3
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	609a      	str	r2, [r3, #8]
}
 80003d6:	46c0      	nop			; (mov r8, r8)
 80003d8:	46bd      	mov	sp, r7
 80003da:	b002      	add	sp, #8
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	46c0      	nop			; (mov r8, r8)
 80003e0:	ffffb7ff 	.word	0xffffb7ff

080003e4 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	69da      	ldr	r2, [r3, #28]
 80003f0:	2380      	movs	r3, #128	; 0x80
 80003f2:	039b      	lsls	r3, r3, #14
 80003f4:	401a      	ands	r2, r3
 80003f6:	2380      	movs	r3, #128	; 0x80
 80003f8:	039b      	lsls	r3, r3, #14
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d101      	bne.n	8000402 <LL_USART_IsActiveFlag_TEACK+0x1e>
 80003fe:	2301      	movs	r3, #1
 8000400:	e000      	b.n	8000404 <LL_USART_IsActiveFlag_TEACK+0x20>
 8000402:	2300      	movs	r3, #0
}
 8000404:	0018      	movs	r0, r3
 8000406:	46bd      	mov	sp, r7
 8000408:	b002      	add	sp, #8
 800040a:	bd80      	pop	{r7, pc}

0800040c <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	69da      	ldr	r2, [r3, #28]
 8000418:	2380      	movs	r3, #128	; 0x80
 800041a:	03db      	lsls	r3, r3, #15
 800041c:	401a      	ands	r2, r3
 800041e:	2380      	movs	r3, #128	; 0x80
 8000420:	03db      	lsls	r3, r3, #15
 8000422:	429a      	cmp	r2, r3
 8000424:	d101      	bne.n	800042a <LL_USART_IsActiveFlag_REACK+0x1e>
 8000426:	2301      	movs	r3, #1
 8000428:	e000      	b.n	800042c <LL_USART_IsActiveFlag_REACK+0x20>
 800042a:	2300      	movs	r3, #0
}
 800042c:	0018      	movs	r0, r3
 800042e:	46bd      	mov	sp, r7
 8000430:	b002      	add	sp, #8
 8000432:	bd80      	pop	{r7, pc}

08000434 <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	2220      	movs	r2, #32
 8000442:	431a      	orrs	r2, r3
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	601a      	str	r2, [r3, #0]
}
 8000448:	46c0      	nop			; (mov r8, r8)
 800044a:	46bd      	mov	sp, r7
 800044c:	b002      	add	sp, #8
 800044e:	bd80      	pop	{r7, pc}

08000450 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	689b      	ldr	r3, [r3, #8]
 800045c:	2201      	movs	r2, #1
 800045e:	431a      	orrs	r2, r3
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	609a      	str	r2, [r3, #8]
}
 8000464:	46c0      	nop			; (mov r8, r8)
 8000466:	46bd      	mov	sp, r7
 8000468:	b002      	add	sp, #8
 800046a:	bd80      	pop	{r7, pc}

0800046c <LL_USART_ReceiveData9>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData9
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
  */
__STATIC_INLINE uint16_t LL_USART_ReceiveData9(USART_TypeDef *USARTx)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000478:	b29b      	uxth	r3, r3
 800047a:	05db      	lsls	r3, r3, #23
 800047c:	0ddb      	lsrs	r3, r3, #23
 800047e:	b29b      	uxth	r3, r3
}
 8000480:	0018      	movs	r0, r3
 8000482:	46bd      	mov	sp, r7
 8000484:	b002      	add	sp, #8
 8000486:	bd80      	pop	{r7, pc}

08000488 <LL_SYSCFG_EnableFastModePlus>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 8000490:	4b04      	ldr	r3, [pc, #16]	; (80004a4 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8000492:	6819      	ldr	r1, [r3, #0]
 8000494:	4b03      	ldr	r3, [pc, #12]	; (80004a4 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8000496:	687a      	ldr	r2, [r7, #4]
 8000498:	430a      	orrs	r2, r1
 800049a:	601a      	str	r2, [r3, #0]
}
 800049c:	46c0      	nop			; (mov r8, r8)
 800049e:	46bd      	mov	sp, r7
 80004a0:	b002      	add	sp, #8
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	40010000 	.word	0x40010000

080004a8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	683a      	ldr	r2, [r7, #0]
 80004b6:	619a      	str	r2, [r3, #24]
}
 80004b8:	46c0      	nop			; (mov r8, r8)
 80004ba:	46bd      	mov	sp, r7
 80004bc:	b002      	add	sp, #8
 80004be:	bd80      	pop	{r7, pc}

080004c0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	683a      	ldr	r2, [r7, #0]
 80004ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80004d0:	46c0      	nop			; (mov r8, r8)
 80004d2:	46bd      	mov	sp, r7
 80004d4:	b002      	add	sp, #8
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 80004e0:	4b07      	ldr	r3, [pc, #28]	; (8000500 <LL_APB1_GRP1_EnableClock+0x28>)
 80004e2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80004e4:	4b06      	ldr	r3, [pc, #24]	; (8000500 <LL_APB1_GRP1_EnableClock+0x28>)
 80004e6:	687a      	ldr	r2, [r7, #4]
 80004e8:	430a      	orrs	r2, r1
 80004ea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80004ec:	4b04      	ldr	r3, [pc, #16]	; (8000500 <LL_APB1_GRP1_EnableClock+0x28>)
 80004ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	4013      	ands	r3, r2
 80004f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004f6:	68fb      	ldr	r3, [r7, #12]
}
 80004f8:	46c0      	nop			; (mov r8, r8)
 80004fa:	46bd      	mov	sp, r7
 80004fc:	b004      	add	sp, #16
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40021000 	.word	0x40021000

08000504 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 800050c:	4b07      	ldr	r3, [pc, #28]	; (800052c <LL_IOP_GRP1_EnableClock+0x28>)
 800050e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000510:	4b06      	ldr	r3, [pc, #24]	; (800052c <LL_IOP_GRP1_EnableClock+0x28>)
 8000512:	687a      	ldr	r2, [r7, #4]
 8000514:	430a      	orrs	r2, r1
 8000516:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000518:	4b04      	ldr	r3, [pc, #16]	; (800052c <LL_IOP_GRP1_EnableClock+0x28>)
 800051a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800051c:	687a      	ldr	r2, [r7, #4]
 800051e:	4013      	ands	r3, r2
 8000520:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000522:	68fb      	ldr	r3, [r7, #12]
}
 8000524:	46c0      	nop			; (mov r8, r8)
 8000526:	46bd      	mov	sp, r7
 8000528:	b004      	add	sp, #16
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40021000 	.word	0x40021000

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b088      	sub	sp, #32
 8000534:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint16_t testINPUT = 0;
 8000536:	2316      	movs	r3, #22
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	2200      	movs	r2, #0
 800053c:	801a      	strh	r2, [r3, #0]
	uint16_t testAns = 0;
 800053e:	2314      	movs	r3, #20
 8000540:	18fb      	adds	r3, r7, r3
 8000542:	2200      	movs	r2, #0
 8000544:	801a      	strh	r2, [r3, #0]
	uint16_t i = 0;
 8000546:	2312      	movs	r3, #18
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	2200      	movs	r2, #0
 800054c:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054e:	f002 fd37 	bl	8002fc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000552:	f000 f881 	bl	8000658 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	4b39      	ldr	r3, [pc, #228]	; (800063c <main+0x10c>)
 8000558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800055a:	4b38      	ldr	r3, [pc, #224]	; (800063c <main+0x10c>)
 800055c:	2101      	movs	r1, #1
 800055e:	430a      	orrs	r2, r1
 8000560:	635a      	str	r2, [r3, #52]	; 0x34
 8000562:	4b36      	ldr	r3, [pc, #216]	; (800063c <main+0x10c>)
 8000564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000566:	2201      	movs	r2, #1
 8000568:	4013      	ands	r3, r2
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800056e:	4b33      	ldr	r3, [pc, #204]	; (800063c <main+0x10c>)
 8000570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000572:	4b32      	ldr	r3, [pc, #200]	; (800063c <main+0x10c>)
 8000574:	2102      	movs	r1, #2
 8000576:	430a      	orrs	r2, r1
 8000578:	635a      	str	r2, [r3, #52]	; 0x34
 800057a:	4b30      	ldr	r3, [pc, #192]	; (800063c <main+0x10c>)
 800057c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800057e:	2202      	movs	r2, #2
 8000580:	4013      	ands	r3, r2
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000586:	4b2d      	ldr	r3, [pc, #180]	; (800063c <main+0x10c>)
 8000588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800058a:	4b2c      	ldr	r3, [pc, #176]	; (800063c <main+0x10c>)
 800058c:	2104      	movs	r1, #4
 800058e:	430a      	orrs	r2, r1
 8000590:	635a      	str	r2, [r3, #52]	; 0x34
 8000592:	4b2a      	ldr	r3, [pc, #168]	; (800063c <main+0x10c>)
 8000594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000596:	2204      	movs	r2, #4
 8000598:	4013      	ands	r3, r2
 800059a:	603b      	str	r3, [r7, #0]
 800059c:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 fbc3 	bl	8000d28 <MX_GPIO_Init>
  MX_DMA_Init();
 80005a2:	f000 fb93 	bl	8000ccc <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005a6:	f000 fab1 	bl	8000b0c <MX_USART2_UART_Init>
  MX_COMP1_Init();
 80005aa:	f000 f8d5 	bl	8000758 <MX_COMP1_Init>
  MX_TIM1_Init();
 80005ae:	f000 f9b3 	bl	8000918 <MX_TIM1_Init>
  MX_USART3_Init();
 80005b2:	f000 fb49 	bl	8000c48 <MX_USART3_Init>
  MX_I2S1_Init();
 80005b6:	f000 f941 	bl	800083c <MX_I2S1_Init>
  MX_I2C1_Init();
 80005ba:	f000 f8ff 	bl	80007bc <MX_I2C1_Init>
  MX_SPI2_Init();
 80005be:	f000 f967 	bl	8000890 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	HAL_COMP_Start(&hcomp1);
 80005c2:	4b1f      	ldr	r3, [pc, #124]	; (8000640 <main+0x110>)
 80005c4:	0018      	movs	r0, r3
 80005c6:	f002 ffc9 	bl	800355c <HAL_COMP_Start>
	HAL_Delay(100);
 80005ca:	2064      	movs	r0, #100	; 0x64
 80005cc:	f002 fd7e 	bl	80030cc <HAL_Delay>
	uint8_t I2Cbuf[5];
	MEM_Reset();
 80005d0:	f001 fca6 	bl	8001f20 <MEM_Reset>

	weoInit();
 80005d4:	f000 fe2c 	bl	8001230 <weoInit>
	HAL_Delay(1);
 80005d8:	2001      	movs	r0, #1
 80005da:	f002 fd77 	bl	80030cc <HAL_Delay>
	weoClear();
 80005de:	f000 fe93 	bl	8001308 <weoClear>
	MEM_GetID();
 80005e2:	f001 feef 	bl	80023c4 <MEM_GetID>

	USART2->CR1 |= (USART_CR1_UE | USART_CR1_RE | USART_CR1_TE|USART_CR1_M); // Enable USART, Receive and Transmit
 80005e6:	4b17      	ldr	r3, [pc, #92]	; (8000644 <main+0x114>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	4b16      	ldr	r3, [pc, #88]	; (8000644 <main+0x114>)
 80005ec:	4916      	ldr	r1, [pc, #88]	; (8000648 <main+0x118>)
 80005ee:	430a      	orrs	r2, r1
 80005f0:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	LL_USART_EnableIT_RXNE(USART2);
 80005f2:	4b14      	ldr	r3, [pc, #80]	; (8000644 <main+0x114>)
 80005f4:	0018      	movs	r0, r3
 80005f6:	f7ff ff1d 	bl	8000434 <LL_USART_EnableIT_RXNE_RXFNE>
	LL_USART_EnableIT_ERROR(USART2);
 80005fa:	4b12      	ldr	r3, [pc, #72]	; (8000644 <main+0x114>)
 80005fc:	0018      	movs	r0, r3
 80005fe:	f7ff ff27 	bl	8000450 <LL_USART_EnableIT_ERROR>

	USART2->ICR|=USART_ICR_ORECF;
 8000602:	4b10      	ldr	r3, [pc, #64]	; (8000644 <main+0x114>)
 8000604:	6a1a      	ldr	r2, [r3, #32]
 8000606:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <main+0x114>)
 8000608:	2108      	movs	r1, #8
 800060a:	430a      	orrs	r2, r1
 800060c:	621a      	str	r2, [r3, #32]

//	USART3->CR1 &= ~(USART_CR1_UE);
//	USART3->CR2 |= USART_CR2_MSBFIRST;
//	USART3->CR1 |= USART_CR1_UE;
	weoDrawRectangleFilled(0x00,0x00,0x7F,0x7F,0xFF,h1);
 800060e:	4b0f      	ldr	r3, [pc, #60]	; (800064c <main+0x11c>)
 8000610:	9301      	str	r3, [sp, #4]
 8000612:	23ff      	movs	r3, #255	; 0xff
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	237f      	movs	r3, #127	; 0x7f
 8000618:	227f      	movs	r2, #127	; 0x7f
 800061a:	2100      	movs	r1, #0
 800061c:	2000      	movs	r0, #0
 800061e:	f000 fed7 	bl	80013d0 <weoDrawRectangleFilled>
//	USART3->CR1 &= ~(USART_CR1_UE);
//		USART3->CR2 |= USART_CR2_MSBFIRST;
//		USART3->CR1 |= USART_CR1_UE;
	GPIOC->ODR |= 1 << 6;
 8000622:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <main+0x120>)
 8000624:	695a      	ldr	r2, [r3, #20]
 8000626:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <main+0x120>)
 8000628:	2140      	movs	r1, #64	; 0x40
 800062a:	430a      	orrs	r2, r1
 800062c:	615a      	str	r2, [r3, #20]
	while (1) {
//		while(!(USART3->ISR & USART_ISR_TXE)){};
//						USART3->TDR = 0xF0;
		cmdExecute(cmd2Execute);
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <main+0x124>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	0018      	movs	r0, r3
 8000634:	f001 ff28 	bl	8002488 <cmdExecute>
 8000638:	e7f9      	b.n	800062e <main+0xfe>
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	40021000 	.word	0x40021000
 8000640:	20005354 	.word	0x20005354
 8000644:	40004400 	.word	0x40004400
 8000648:	1000100d 	.word	0x1000100d
 800064c:	20003134 	.word	0x20003134
 8000650:	50000800 	.word	0x50000800
 8000654:	2000545e 	.word	0x2000545e

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b590      	push	{r4, r7, lr}
 800065a:	b0a1      	sub	sp, #132	; 0x84
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	2448      	movs	r4, #72	; 0x48
 8000660:	193b      	adds	r3, r7, r4
 8000662:	0018      	movs	r0, r3
 8000664:	2338      	movs	r3, #56	; 0x38
 8000666:	001a      	movs	r2, r3
 8000668:	2100      	movs	r1, #0
 800066a:	f00a f86b 	bl	800a744 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066e:	2338      	movs	r3, #56	; 0x38
 8000670:	18fb      	adds	r3, r7, r3
 8000672:	0018      	movs	r0, r3
 8000674:	2310      	movs	r3, #16
 8000676:	001a      	movs	r2, r3
 8000678:	2100      	movs	r1, #0
 800067a:	f00a f863 	bl	800a744 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	0018      	movs	r0, r3
 8000682:	2334      	movs	r3, #52	; 0x34
 8000684:	001a      	movs	r2, r3
 8000686:	2100      	movs	r1, #0
 8000688:	f00a f85c 	bl	800a744 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800068c:	2380      	movs	r3, #128	; 0x80
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	0018      	movs	r0, r3
 8000692:	f004 fdc5 	bl	8005220 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000696:	193b      	adds	r3, r7, r4
 8000698:	2202      	movs	r2, #2
 800069a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800069c:	193b      	adds	r3, r7, r4
 800069e:	2280      	movs	r2, #128	; 0x80
 80006a0:	0052      	lsls	r2, r2, #1
 80006a2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006a4:	0021      	movs	r1, r4
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	2240      	movs	r2, #64	; 0x40
 80006b0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2202      	movs	r2, #2
 80006b6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	2202      	movs	r2, #2
 80006bc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	2200      	movs	r2, #0
 80006c2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	2208      	movs	r2, #8
 80006c8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	2280      	movs	r2, #128	; 0x80
 80006ce:	0292      	lsls	r2, r2, #10
 80006d0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2280      	movs	r2, #128	; 0x80
 80006d6:	0492      	lsls	r2, r2, #18
 80006d8:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2280      	movs	r2, #128	; 0x80
 80006de:	0592      	lsls	r2, r2, #22
 80006e0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	0018      	movs	r0, r3
 80006e6:	f004 fde7 	bl	80052b8 <HAL_RCC_OscConfig>
 80006ea:	1e03      	subs	r3, r0, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006ee:	f001 ffe5 	bl	80026bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f2:	2138      	movs	r1, #56	; 0x38
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2207      	movs	r2, #7
 80006f8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2202      	movs	r2, #2
 80006fe:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2200      	movs	r2, #0
 800070a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800070c:	187b      	adds	r3, r7, r1
 800070e:	2102      	movs	r1, #2
 8000710:	0018      	movs	r0, r3
 8000712:	f005 f8f1 	bl	80058f8 <HAL_RCC_ClockConfig>
 8000716:	1e03      	subs	r3, r0, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800071a:	f001 ffcf 	bl	80026bc <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	4a0c      	ldr	r2, [pc, #48]	; (8000754 <SystemClock_Config+0xfc>)
 8000722:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2S1|RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	2200      	movs	r2, #0
 8000734:	615a      	str	r2, [r3, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	2200      	movs	r2, #0
 800073a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	0018      	movs	r0, r3
 8000740:	f005 fa84 	bl	8005c4c <HAL_RCCEx_PeriphCLKConfig>
 8000744:	1e03      	subs	r3, r0, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000748:	f001 ffb8 	bl	80026bc <Error_Handler>
  }
}
 800074c:	46c0      	nop			; (mov r8, r8)
 800074e:	46bd      	mov	sp, r7
 8000750:	b021      	add	sp, #132	; 0x84
 8000752:	bd90      	pop	{r4, r7, pc}
 8000754:	00200822 	.word	0x00200822

08000758 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 800075c:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <MX_COMP1_Init+0x5c>)
 800075e:	4a16      	ldr	r2, [pc, #88]	; (80007b8 <MX_COMP1_Init+0x60>)
 8000760:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 8000762:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <MX_COMP1_Init+0x5c>)
 8000764:	2280      	movs	r2, #128	; 0x80
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 800076a:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <MX_COMP1_Init+0x5c>)
 800076c:	2230      	movs	r2, #48	; 0x30
 800076e:	615a      	str	r2, [r3, #20]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000770:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <MX_COMP1_Init+0x5c>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <MX_COMP1_Init+0x5c>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800077c:	4b0d      	ldr	r3, [pc, #52]	; (80007b4 <MX_COMP1_Init+0x5c>)
 800077e:	2200      	movs	r2, #0
 8000780:	619a      	str	r2, [r3, #24]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_TIM1_OC5;
 8000782:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_COMP1_Init+0x5c>)
 8000784:	2280      	movs	r2, #128	; 0x80
 8000786:	0392      	lsls	r2, r2, #14
 8000788:	621a      	str	r2, [r3, #32]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 800078a:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <MX_COMP1_Init+0x5c>)
 800078c:	2200      	movs	r2, #0
 800078e:	60da      	str	r2, [r3, #12]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000790:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <MX_COMP1_Init+0x5c>)
 8000792:	2200      	movs	r2, #0
 8000794:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_EVENT_RISING;
 8000796:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <MX_COMP1_Init+0x5c>)
 8000798:	2212      	movs	r2, #18
 800079a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800079c:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <MX_COMP1_Init+0x5c>)
 800079e:	0018      	movs	r0, r3
 80007a0:	f002 fd7a 	bl	8003298 <HAL_COMP_Init>
 80007a4:	1e03      	subs	r3, r0, #0
 80007a6:	d001      	beq.n	80007ac <MX_COMP1_Init+0x54>
  {
    Error_Handler();
 80007a8:	f001 ff88 	bl	80026bc <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 80007ac:	46c0      	nop			; (mov r8, r8)
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	20005354 	.word	0x20005354
 80007b8:	40010200 	.word	0x40010200

080007bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007c0:	4b1b      	ldr	r3, [pc, #108]	; (8000830 <MX_I2C1_Init+0x74>)
 80007c2:	4a1c      	ldr	r2, [pc, #112]	; (8000834 <MX_I2C1_Init+0x78>)
 80007c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x1094102C;
 80007c6:	4b1a      	ldr	r3, [pc, #104]	; (8000830 <MX_I2C1_Init+0x74>)
 80007c8:	4a1b      	ldr	r2, [pc, #108]	; (8000838 <MX_I2C1_Init+0x7c>)
 80007ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007cc:	4b18      	ldr	r3, [pc, #96]	; (8000830 <MX_I2C1_Init+0x74>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007d2:	4b17      	ldr	r3, [pc, #92]	; (8000830 <MX_I2C1_Init+0x74>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d8:	4b15      	ldr	r3, [pc, #84]	; (8000830 <MX_I2C1_Init+0x74>)
 80007da:	2200      	movs	r2, #0
 80007dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007de:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_I2C1_Init+0x74>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MX_I2C1_Init+0x74>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_I2C1_Init+0x74>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_I2C1_Init+0x74>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_I2C1_Init+0x74>)
 80007f8:	0018      	movs	r0, r3
 80007fa:	f003 fc0b 	bl	8004014 <HAL_I2C_Init>
 80007fe:	1e03      	subs	r3, r0, #0
 8000800:	d001      	beq.n	8000806 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000802:	f001 ff5b 	bl	80026bc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000806:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <MX_I2C1_Init+0x74>)
 8000808:	2100      	movs	r1, #0
 800080a:	0018      	movs	r0, r3
 800080c:	f004 fa98 	bl	8004d40 <HAL_I2CEx_ConfigAnalogFilter>
 8000810:	1e03      	subs	r3, r0, #0
 8000812:	d001      	beq.n	8000818 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000814:	f001 ff52 	bl	80026bc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000818:	4b05      	ldr	r3, [pc, #20]	; (8000830 <MX_I2C1_Init+0x74>)
 800081a:	2100      	movs	r1, #0
 800081c:	0018      	movs	r0, r3
 800081e:	f004 fadb 	bl	8004dd8 <HAL_I2CEx_ConfigDigitalFilter>
 8000822:	1e03      	subs	r3, r0, #0
 8000824:	d001      	beq.n	800082a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000826:	f001 ff49 	bl	80026bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20005234 	.word	0x20005234
 8000834:	40005400 	.word	0x40005400
 8000838:	1094102c 	.word	0x1094102c

0800083c <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000840:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_I2S1_Init+0x4c>)
 8000842:	4a12      	ldr	r2, [pc, #72]	; (800088c <MX_I2S1_Init+0x50>)
 8000844:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8000846:	4b10      	ldr	r3, [pc, #64]	; (8000888 <MX_I2S1_Init+0x4c>)
 8000848:	2280      	movs	r2, #128	; 0x80
 800084a:	0092      	lsls	r2, r2, #2
 800084c:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_I2S1_Init+0x4c>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_I2S1_Init+0x4c>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MX_I2S1_Init+0x4c>)
 800085c:	2280      	movs	r2, #128	; 0x80
 800085e:	0092      	lsls	r2, r2, #2
 8000860:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_I2S1_Init+0x4c>)
 8000864:	22fa      	movs	r2, #250	; 0xfa
 8000866:	0192      	lsls	r2, r2, #6
 8000868:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 800086a:	4b07      	ldr	r3, [pc, #28]	; (8000888 <MX_I2S1_Init+0x4c>)
 800086c:	2200      	movs	r2, #0
 800086e:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <MX_I2S1_Init+0x4c>)
 8000872:	0018      	movs	r0, r3
 8000874:	f004 fafc 	bl	8004e70 <HAL_I2S_Init>
 8000878:	1e03      	subs	r3, r0, #0
 800087a:	d001      	beq.n	8000880 <MX_I2S1_Init+0x44>
  {
    Error_Handler();
 800087c:	f001 ff1e 	bl	80026bc <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000880:	46c0      	nop			; (mov r8, r8)
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	20005460 	.word	0x20005460
 800088c:	40013000 	.word	0x40013000

08000890 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000894:	4b1e      	ldr	r3, [pc, #120]	; (8000910 <MX_SPI2_Init+0x80>)
 8000896:	2208      	movs	r2, #8
 8000898:	61da      	str	r2, [r3, #28]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800089a:	4b1d      	ldr	r3, [pc, #116]	; (8000910 <MX_SPI2_Init+0x80>)
 800089c:	4a1d      	ldr	r2, [pc, #116]	; (8000914 <MX_SPI2_Init+0x84>)
 800089e:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008a0:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <MX_SPI2_Init+0x80>)
 80008a2:	2282      	movs	r2, #130	; 0x82
 80008a4:	0052      	lsls	r2, r2, #1
 80008a6:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008a8:	4b19      	ldr	r3, [pc, #100]	; (8000910 <MX_SPI2_Init+0x80>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008ae:	4b18      	ldr	r3, [pc, #96]	; (8000910 <MX_SPI2_Init+0x80>)
 80008b0:	22e0      	movs	r2, #224	; 0xe0
 80008b2:	00d2      	lsls	r2, r2, #3
 80008b4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008b6:	4b16      	ldr	r3, [pc, #88]	; (8000910 <MX_SPI2_Init+0x80>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008bc:	4b14      	ldr	r3, [pc, #80]	; (8000910 <MX_SPI2_Init+0x80>)
 80008be:	2200      	movs	r2, #0
 80008c0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008c2:	4b13      	ldr	r3, [pc, #76]	; (8000910 <MX_SPI2_Init+0x80>)
 80008c4:	2280      	movs	r2, #128	; 0x80
 80008c6:	0092      	lsls	r2, r2, #2
 80008c8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80008ca:	4b11      	ldr	r3, [pc, #68]	; (8000910 <MX_SPI2_Init+0x80>)
 80008cc:	2208      	movs	r2, #8
 80008ce:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008d0:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <MX_SPI2_Init+0x80>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <MX_SPI2_Init+0x80>)
 80008d8:	2200      	movs	r2, #0
 80008da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <MX_SPI2_Init+0x80>)
 80008de:	2200      	movs	r2, #0
 80008e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80008e2:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <MX_SPI2_Init+0x80>)
 80008e4:	2207      	movs	r2, #7
 80008e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008e8:	4b09      	ldr	r3, [pc, #36]	; (8000910 <MX_SPI2_Init+0x80>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008ee:	4b08      	ldr	r3, [pc, #32]	; (8000910 <MX_SPI2_Init+0x80>)
 80008f0:	2208      	movs	r2, #8
 80008f2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <MX_SPI2_Init+0x80>)
 80008f6:	0018      	movs	r0, r3
 80008f8:	f005 fea8 	bl	800664c <HAL_SPI_Init>
 80008fc:	1e03      	subs	r3, r0, #0
 80008fe:	d001      	beq.n	8000904 <MX_SPI2_Init+0x74>
  {
    Error_Handler();
 8000900:	f001 fedc 	bl	80026bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000904:	4b02      	ldr	r3, [pc, #8]	; (8000910 <MX_SPI2_Init+0x80>)
 8000906:	2208      	movs	r2, #8
 8000908:	61da      	str	r2, [r3, #28]
  /* USER CODE END SPI2_Init 2 */

}
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	200051b4 	.word	0x200051b4
 8000914:	40003800 	.word	0x40003800

08000918 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b09e      	sub	sp, #120	; 0x78
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800091e:	2368      	movs	r3, #104	; 0x68
 8000920:	18fb      	adds	r3, r7, r3
 8000922:	0018      	movs	r0, r3
 8000924:	2310      	movs	r3, #16
 8000926:	001a      	movs	r2, r3
 8000928:	2100      	movs	r1, #0
 800092a:	f009 ff0b 	bl	800a744 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800092e:	235c      	movs	r3, #92	; 0x5c
 8000930:	18fb      	adds	r3, r7, r3
 8000932:	0018      	movs	r0, r3
 8000934:	230c      	movs	r3, #12
 8000936:	001a      	movs	r2, r3
 8000938:	2100      	movs	r1, #0
 800093a:	f009 ff03 	bl	800a744 <memset>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 800093e:	2350      	movs	r3, #80	; 0x50
 8000940:	18fb      	adds	r3, r7, r3
 8000942:	0018      	movs	r0, r3
 8000944:	230c      	movs	r3, #12
 8000946:	001a      	movs	r2, r3
 8000948:	2100      	movs	r1, #0
 800094a:	f009 fefb 	bl	800a744 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800094e:	2334      	movs	r3, #52	; 0x34
 8000950:	18fb      	adds	r3, r7, r3
 8000952:	0018      	movs	r0, r3
 8000954:	231c      	movs	r3, #28
 8000956:	001a      	movs	r2, r3
 8000958:	2100      	movs	r1, #0
 800095a:	f009 fef3 	bl	800a744 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800095e:	003b      	movs	r3, r7
 8000960:	0018      	movs	r0, r3
 8000962:	2334      	movs	r3, #52	; 0x34
 8000964:	001a      	movs	r2, r3
 8000966:	2100      	movs	r1, #0
 8000968:	f009 feec 	bl	800a744 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800096c:	4b64      	ldr	r3, [pc, #400]	; (8000b00 <MX_TIM1_Init+0x1e8>)
 800096e:	4a65      	ldr	r2, [pc, #404]	; (8000b04 <MX_TIM1_Init+0x1ec>)
 8000970:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000972:	4b63      	ldr	r3, [pc, #396]	; (8000b00 <MX_TIM1_Init+0x1e8>)
 8000974:	2200      	movs	r2, #0
 8000976:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000978:	4b61      	ldr	r3, [pc, #388]	; (8000b00 <MX_TIM1_Init+0x1e8>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 639;
 800097e:	4b60      	ldr	r3, [pc, #384]	; (8000b00 <MX_TIM1_Init+0x1e8>)
 8000980:	4a61      	ldr	r2, [pc, #388]	; (8000b08 <MX_TIM1_Init+0x1f0>)
 8000982:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000984:	4b5e      	ldr	r3, [pc, #376]	; (8000b00 <MX_TIM1_Init+0x1e8>)
 8000986:	2200      	movs	r2, #0
 8000988:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800098a:	4b5d      	ldr	r3, [pc, #372]	; (8000b00 <MX_TIM1_Init+0x1e8>)
 800098c:	2200      	movs	r2, #0
 800098e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000990:	4b5b      	ldr	r3, [pc, #364]	; (8000b00 <MX_TIM1_Init+0x1e8>)
 8000992:	2280      	movs	r2, #128	; 0x80
 8000994:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000996:	4b5a      	ldr	r3, [pc, #360]	; (8000b00 <MX_TIM1_Init+0x1e8>)
 8000998:	0018      	movs	r0, r3
 800099a:	f007 fa4b 	bl	8007e34 <HAL_TIM_Base_Init>
 800099e:	1e03      	subs	r3, r0, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80009a2:	f001 fe8b 	bl	80026bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009a6:	2168      	movs	r1, #104	; 0x68
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	2280      	movs	r2, #128	; 0x80
 80009ac:	0152      	lsls	r2, r2, #5
 80009ae:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009b0:	187a      	adds	r2, r7, r1
 80009b2:	4b53      	ldr	r3, [pc, #332]	; (8000b00 <MX_TIM1_Init+0x1e8>)
 80009b4:	0011      	movs	r1, r2
 80009b6:	0018      	movs	r0, r3
 80009b8:	f007 fcd4 	bl	8008364 <HAL_TIM_ConfigClockSource>
 80009bc:	1e03      	subs	r3, r0, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80009c0:	f001 fe7c 	bl	80026bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009c4:	4b4e      	ldr	r3, [pc, #312]	; (8000b00 <MX_TIM1_Init+0x1e8>)
 80009c6:	0018      	movs	r0, r3
 80009c8:	f007 fa8c 	bl	8007ee4 <HAL_TIM_PWM_Init>
 80009cc:	1e03      	subs	r3, r0, #0
 80009ce:	d001      	beq.n	80009d4 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80009d0:	f001 fe74 	bl	80026bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d4:	215c      	movs	r1, #92	; 0x5c
 80009d6:	187b      	adds	r3, r7, r1
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	2200      	movs	r2, #0
 80009e0:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e2:	187b      	adds	r3, r7, r1
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009e8:	187a      	adds	r2, r7, r1
 80009ea:	4b45      	ldr	r3, [pc, #276]	; (8000b00 <MX_TIM1_Init+0x1e8>)
 80009ec:	0011      	movs	r1, r2
 80009ee:	0018      	movs	r0, r3
 80009f0:	f008 f988 	bl	8008d04 <HAL_TIMEx_MasterConfigSynchronization>
 80009f4:	1e03      	subs	r3, r0, #0
 80009f6:	d001      	beq.n	80009fc <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 80009f8:	f001 fe60 	bl	80026bc <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 80009fc:	2150      	movs	r1, #80	; 0x50
 80009fe:	187b      	adds	r3, r7, r1
 8000a00:	2202      	movs	r2, #2
 8000a02:	601a      	str	r2, [r3, #0]
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	2201      	movs	r2, #1
 8000a08:	605a      	str	r2, [r3, #4]
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8000a0a:	187b      	adds	r3, r7, r1
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8000a10:	187a      	adds	r2, r7, r1
 8000a12:	4b3b      	ldr	r3, [pc, #236]	; (8000b00 <MX_TIM1_Init+0x1e8>)
 8000a14:	2101      	movs	r1, #1
 8000a16:	0018      	movs	r0, r3
 8000a18:	f008 fa88 	bl	8008f2c <HAL_TIMEx_ConfigBreakInput>
 8000a1c:	1e03      	subs	r3, r0, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000a20:	f001 fe4c 	bl	80026bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a24:	2134      	movs	r1, #52	; 0x34
 8000a26:	187b      	adds	r3, r7, r1
 8000a28:	2260      	movs	r2, #96	; 0x60
 8000a2a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 300;
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	2296      	movs	r2, #150	; 0x96
 8000a30:	0052      	lsls	r2, r2, #1
 8000a32:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a3a:	187b      	adds	r3, r7, r1
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000a40:	187b      	adds	r3, r7, r1
 8000a42:	2204      	movs	r2, #4
 8000a44:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a46:	187b      	adds	r3, r7, r1
 8000a48:	2200      	movs	r2, #0
 8000a4a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	2200      	movs	r2, #0
 8000a50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a52:	1879      	adds	r1, r7, r1
 8000a54:	4b2a      	ldr	r3, [pc, #168]	; (8000b00 <MX_TIM1_Init+0x1e8>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f007 fb8d 	bl	8008178 <HAL_TIM_PWM_ConfigChannel>
 8000a5e:	1e03      	subs	r3, r0, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8000a62:	f001 fe2b 	bl	80026bc <Error_Handler>
  }
  sConfigOC.Pulse = 50;
 8000a66:	2134      	movs	r1, #52	; 0x34
 8000a68:	187b      	adds	r3, r7, r1
 8000a6a:	2232      	movs	r2, #50	; 0x32
 8000a6c:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 8000a6e:	1879      	adds	r1, r7, r1
 8000a70:	4b23      	ldr	r3, [pc, #140]	; (8000b00 <MX_TIM1_Init+0x1e8>)
 8000a72:	2210      	movs	r2, #16
 8000a74:	0018      	movs	r0, r3
 8000a76:	f007 fb7f 	bl	8008178 <HAL_TIM_PWM_ConfigChannel>
 8000a7a:	1e03      	subs	r3, r0, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 8000a7e:	f001 fe1d 	bl	80026bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000a82:	003b      	movs	r3, r7
 8000a84:	2280      	movs	r2, #128	; 0x80
 8000a86:	0112      	lsls	r2, r2, #4
 8000a88:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000a8a:	003b      	movs	r3, r7
 8000a8c:	2280      	movs	r2, #128	; 0x80
 8000a8e:	00d2      	lsls	r2, r2, #3
 8000a90:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a92:	003b      	movs	r3, r7
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a98:	003b      	movs	r3, r7
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000a9e:	003b      	movs	r3, r7
 8000aa0:	2280      	movs	r2, #128	; 0x80
 8000aa2:	0152      	lsls	r2, r2, #5
 8000aa4:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000aa6:	003b      	movs	r3, r7
 8000aa8:	2280      	movs	r2, #128	; 0x80
 8000aaa:	0192      	lsls	r2, r2, #6
 8000aac:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 10;
 8000aae:	003b      	movs	r3, r7
 8000ab0:	220a      	movs	r2, #10
 8000ab2:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000ab4:	003b      	movs	r3, r7
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000aba:	003b      	movs	r3, r7
 8000abc:	2200      	movs	r2, #0
 8000abe:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ac0:	003b      	movs	r3, r7
 8000ac2:	2280      	movs	r2, #128	; 0x80
 8000ac4:	0492      	lsls	r2, r2, #18
 8000ac6:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ac8:	003b      	movs	r3, r7
 8000aca:	2200      	movs	r2, #0
 8000acc:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000ace:	003b      	movs	r3, r7
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000ad4:	003b      	movs	r3, r7
 8000ad6:	2280      	movs	r2, #128	; 0x80
 8000ad8:	01d2      	lsls	r2, r2, #7
 8000ada:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000adc:	003a      	movs	r2, r7
 8000ade:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <MX_TIM1_Init+0x1e8>)
 8000ae0:	0011      	movs	r1, r2
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f008 f97c 	bl	8008de0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ae8:	1e03      	subs	r3, r0, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM1_Init+0x1d8>
  {
    Error_Handler();
 8000aec:	f001 fde6 	bl	80026bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <MX_TIM1_Init+0x1e8>)
 8000af2:	0018      	movs	r0, r3
 8000af4:	f002 f828 	bl	8002b48 <HAL_TIM_MspPostInit>

}
 8000af8:	46c0      	nop			; (mov r8, r8)
 8000afa:	46bd      	mov	sp, r7
 8000afc:	b01e      	add	sp, #120	; 0x78
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20005408 	.word	0x20005408
 8000b04:	40012c00 	.word	0x40012c00
 8000b08:	0000027f 	.word	0x0000027f

08000b0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b0c:	b590      	push	{r4, r7, lr}
 8000b0e:	b08f      	sub	sp, #60	; 0x3c
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000b12:	2418      	movs	r4, #24
 8000b14:	193b      	adds	r3, r7, r4
 8000b16:	0018      	movs	r0, r3
 8000b18:	2320      	movs	r3, #32
 8000b1a:	001a      	movs	r2, r3
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	f009 fe11 	bl	800a744 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b22:	003b      	movs	r3, r7
 8000b24:	0018      	movs	r0, r3
 8000b26:	2318      	movs	r3, #24
 8000b28:	001a      	movs	r2, r3
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	f009 fe0a 	bl	800a744 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000b30:	2380      	movs	r3, #128	; 0x80
 8000b32:	029b      	lsls	r3, r3, #10
 8000b34:	0018      	movs	r0, r3
 8000b36:	f7ff fccf 	bl	80004d8 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000b3a:	2001      	movs	r0, #1
 8000b3c:	f7ff fce2 	bl	8000504 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000b40:	003b      	movs	r3, r7
 8000b42:	2204      	movs	r2, #4
 8000b44:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b46:	003b      	movs	r3, r7
 8000b48:	2202      	movs	r2, #2
 8000b4a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b4c:	003b      	movs	r3, r7
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b52:	003b      	movs	r3, r7
 8000b54:	2200      	movs	r2, #0
 8000b56:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b58:	003b      	movs	r3, r7
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000b5e:	003b      	movs	r3, r7
 8000b60:	2201      	movs	r2, #1
 8000b62:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b64:	003a      	movs	r2, r7
 8000b66:	23a0      	movs	r3, #160	; 0xa0
 8000b68:	05db      	lsls	r3, r3, #23
 8000b6a:	0011      	movs	r1, r2
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	f009 fa6b 	bl	800a048 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000b72:	003b      	movs	r3, r7
 8000b74:	2208      	movs	r2, #8
 8000b76:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b78:	003b      	movs	r3, r7
 8000b7a:	2202      	movs	r2, #2
 8000b7c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b7e:	003b      	movs	r3, r7
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b84:	003b      	movs	r3, r7
 8000b86:	2200      	movs	r2, #0
 8000b88:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b8a:	003b      	movs	r3, r7
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000b90:	003b      	movs	r3, r7
 8000b92:	2201      	movs	r2, #1
 8000b94:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b96:	003a      	movs	r2, r7
 8000b98:	23a0      	movs	r3, #160	; 0xa0
 8000b9a:	05db      	lsls	r3, r3, #23
 8000b9c:	0011      	movs	r1, r2
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f009 fa52 	bl	800a048 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	201c      	movs	r0, #28
 8000ba8:	f7ff fb52 	bl	8000250 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000bac:	201c      	movs	r0, #28
 8000bae:	f7ff fb35 	bl	800021c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000bb2:	193b      	adds	r3, r7, r4
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 57600;
 8000bb8:	193b      	adds	r3, r7, r4
 8000bba:	22e1      	movs	r2, #225	; 0xe1
 8000bbc:	0212      	lsls	r2, r2, #8
 8000bbe:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8000bc0:	193b      	adds	r3, r7, r4
 8000bc2:	2280      	movs	r2, #128	; 0x80
 8000bc4:	0152      	lsls	r2, r2, #5
 8000bc6:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000bc8:	0021      	movs	r1, r4
 8000bca:	187b      	adds	r3, r7, r1
 8000bcc:	2200      	movs	r2, #0
 8000bce:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000bd0:	187b      	adds	r3, r7, r1
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000bd6:	187b      	adds	r3, r7, r1
 8000bd8:	220c      	movs	r2, #12
 8000bda:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000bdc:	187b      	adds	r3, r7, r1
 8000bde:	2200      	movs	r2, #0
 8000be0:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000be2:	187b      	adds	r3, r7, r1
 8000be4:	2200      	movs	r2, #0
 8000be6:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART2, &USART_InitStruct);
 8000be8:	187b      	adds	r3, r7, r1
 8000bea:	4a16      	ldr	r2, [pc, #88]	; (8000c44 <MX_USART2_UART_Init+0x138>)
 8000bec:	0019      	movs	r1, r3
 8000bee:	0010      	movs	r0, r2
 8000bf0:	f009 fcf6 	bl	800a5e0 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000bf4:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <MX_USART2_UART_Init+0x138>)
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	f7ff fbb5 	bl	8000368 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000bfe:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <MX_USART2_UART_Init+0x138>)
 8000c00:	2100      	movs	r1, #0
 8000c02:	0018      	movs	r0, r3
 8000c04:	f7ff fbc2 	bl	800038c <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART2);
 8000c08:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <MX_USART2_UART_Init+0x138>)
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f7ff fb9c 	bl	8000348 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART2);
 8000c10:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <MX_USART2_UART_Init+0x138>)
 8000c12:	0018      	movs	r0, r3
 8000c14:	f7ff fbce 	bl	80003b4 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 8000c18:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <MX_USART2_UART_Init+0x138>)
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f7ff fb86 	bl	800032c <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 8000c20:	46c0      	nop			; (mov r8, r8)
 8000c22:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <MX_USART2_UART_Init+0x138>)
 8000c24:	0018      	movs	r0, r3
 8000c26:	f7ff fbdd 	bl	80003e4 <LL_USART_IsActiveFlag_TEACK>
 8000c2a:	1e03      	subs	r3, r0, #0
 8000c2c:	d0f9      	beq.n	8000c22 <MX_USART2_UART_Init+0x116>
 8000c2e:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <MX_USART2_UART_Init+0x138>)
 8000c30:	0018      	movs	r0, r3
 8000c32:	f7ff fbeb 	bl	800040c <LL_USART_IsActiveFlag_REACK>
 8000c36:	1e03      	subs	r3, r0, #0
 8000c38:	d0f3      	beq.n	8000c22 <MX_USART2_UART_Init+0x116>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	46c0      	nop			; (mov r8, r8)
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	b00f      	add	sp, #60	; 0x3c
 8000c42:	bd90      	pop	{r4, r7, pc}
 8000c44:	40004400 	.word	0x40004400

08000c48 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */
//	USART3->CR2 &= ~(USART_CR1_UE);
	USART3->CR2|=USART_CR2_MSBFIRST;
 8000c4c:	4b1c      	ldr	r3, [pc, #112]	; (8000cc0 <MX_USART3_Init+0x78>)
 8000c4e:	685a      	ldr	r2, [r3, #4]
 8000c50:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <MX_USART3_Init+0x78>)
 8000c52:	2180      	movs	r1, #128	; 0x80
 8000c54:	0309      	lsls	r1, r1, #12
 8000c56:	430a      	orrs	r2, r1
 8000c58:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8000c5a:	4b1a      	ldr	r3, [pc, #104]	; (8000cc4 <MX_USART3_Init+0x7c>)
 8000c5c:	4a18      	ldr	r2, [pc, #96]	; (8000cc0 <MX_USART3_Init+0x78>)
 8000c5e:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 8100000;
 8000c60:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <MX_USART3_Init+0x7c>)
 8000c62:	4a19      	ldr	r2, [pc, #100]	; (8000cc8 <MX_USART3_Init+0x80>)
 8000c64:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8000c66:	4b17      	ldr	r3, [pc, #92]	; (8000cc4 <MX_USART3_Init+0x7c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8000c6c:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <MX_USART3_Init+0x7c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8000c72:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <MX_USART3_Init+0x7c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX;
 8000c78:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <MX_USART3_Init+0x7c>)
 8000c7a:	2208      	movs	r2, #8
 8000c7c:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_HIGH;
 8000c7e:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <MX_USART3_Init+0x7c>)
 8000c80:	2280      	movs	r2, #128	; 0x80
 8000c82:	00d2      	lsls	r2, r2, #3
 8000c84:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_2EDGE;
 8000c86:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <MX_USART3_Init+0x7c>)
 8000c88:	2280      	movs	r2, #128	; 0x80
 8000c8a:	0092      	lsls	r2, r2, #2
 8000c8c:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_ENABLE;
 8000c8e:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <MX_USART3_Init+0x7c>)
 8000c90:	2280      	movs	r2, #128	; 0x80
 8000c92:	0052      	lsls	r2, r2, #1
 8000c94:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8000c96:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <MX_USART3_Init+0x7c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 8000c9c:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <MX_USART3_Init+0x7c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8000ca2:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <MX_USART3_Init+0x7c>)
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f008 f9e1 	bl	800906c <HAL_USART_Init>
 8000caa:	1e03      	subs	r3, r0, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 8000cae:	f001 fd05 	bl	80026bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  husart3.Init.BaudRate = 8100000;
 8000cb2:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <MX_USART3_Init+0x7c>)
 8000cb4:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <MX_USART3_Init+0x80>)
 8000cb6:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 2 */

}
 8000cb8:	46c0      	nop			; (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	40004800 	.word	0x40004800
 8000cc4:	20005394 	.word	0x20005394
 8000cc8:	007b98a0 	.word	0x007b98a0

08000ccc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cd2:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <MX_DMA_Init+0x58>)
 8000cd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000cd6:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <MX_DMA_Init+0x58>)
 8000cd8:	2101      	movs	r1, #1
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	639a      	str	r2, [r3, #56]	; 0x38
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <MX_DMA_Init+0x58>)
 8000ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2100      	movs	r1, #0
 8000cee:	2009      	movs	r0, #9
 8000cf0:	f002 fd32 	bl	8003758 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000cf4:	2009      	movs	r0, #9
 8000cf6:	f002 fd44 	bl	8003782 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	200a      	movs	r0, #10
 8000d00:	f002 fd2a 	bl	8003758 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000d04:	200a      	movs	r0, #10
 8000d06:	f002 fd3c 	bl	8003782 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 0, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	200b      	movs	r0, #11
 8000d10:	f002 fd22 	bl	8003758 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 8000d14:	200b      	movs	r0, #11
 8000d16:	f002 fd34 	bl	8003782 <HAL_NVIC_EnableIRQ>

}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	b002      	add	sp, #8
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	40021000 	.word	0x40021000

08000d28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2e:	003b      	movs	r3, r7
 8000d30:	0018      	movs	r0, r3
 8000d32:	2318      	movs	r3, #24
 8000d34:	001a      	movs	r2, r3
 8000d36:	2100      	movs	r1, #0
 8000d38:	f009 fd04 	bl	800a744 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000d3c:	2002      	movs	r0, #2
 8000d3e:	f7ff fbe1 	bl	8000504 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000d42:	2004      	movs	r0, #4
 8000d44:	f7ff fbde 	bl	8000504 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000d48:	2001      	movs	r0, #1
 8000d4a:	f7ff fbdb 	bl	8000504 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(MEM_HOLD_GPIO_Port, MEM_HOLD_Pin);
 8000d4e:	2380      	movs	r3, #128	; 0x80
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	4aa0      	ldr	r2, [pc, #640]	; (8000fd4 <MX_GPIO_Init+0x2ac>)
 8000d54:	0019      	movs	r1, r3
 8000d56:	0010      	movs	r0, r2
 8000d58:	f7ff fba6 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_WP_GPIO_Port, MEM_WP_Pin);
 8000d5c:	2380      	movs	r3, #128	; 0x80
 8000d5e:	01db      	lsls	r3, r3, #7
 8000d60:	4a9d      	ldr	r2, [pc, #628]	; (8000fd8 <MX_GPIO_Init+0x2b0>)
 8000d62:	0019      	movs	r1, r3
 8000d64:	0010      	movs	r0, r2
 8000d66:	f7ff fb9f 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_CS_GPIO_Port, MEM_CS_Pin);
 8000d6a:	2380      	movs	r3, #128	; 0x80
 8000d6c:	021b      	lsls	r3, r3, #8
 8000d6e:	4a9a      	ldr	r2, [pc, #616]	; (8000fd8 <MX_GPIO_Init+0x2b0>)
 8000d70:	0019      	movs	r1, r3
 8000d72:	0010      	movs	r0, r2
 8000d74:	f7ff fb98 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_CS_GPIO_Port, DISP_CS_Pin);
 8000d78:	23a0      	movs	r3, #160	; 0xa0
 8000d7a:	05db      	lsls	r3, r3, #23
 8000d7c:	2140      	movs	r1, #64	; 0x40
 8000d7e:	0018      	movs	r0, r3
 8000d80:	f7ff fb92 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_D_C_GPIO_Port, DISP_D_C_Pin);
 8000d84:	23a0      	movs	r3, #160	; 0xa0
 8000d86:	05db      	lsls	r3, r3, #23
 8000d88:	2180      	movs	r1, #128	; 0x80
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f7ff fb8c 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(BF_GPIO_Port, BF_Pin);
 8000d90:	4b91      	ldr	r3, [pc, #580]	; (8000fd8 <MX_GPIO_Init+0x2b0>)
 8000d92:	2140      	movs	r1, #64	; 0x40
 8000d94:	0018      	movs	r0, r3
 8000d96:	f7ff fb87 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_1_GPIO_Port, TEST_1_Pin);
 8000d9a:	2380      	movs	r3, #128	; 0x80
 8000d9c:	011a      	lsls	r2, r3, #4
 8000d9e:	23a0      	movs	r3, #160	; 0xa0
 8000da0:	05db      	lsls	r3, r3, #23
 8000da2:	0011      	movs	r1, r2
 8000da4:	0018      	movs	r0, r3
 8000da6:	f7ff fb8b 	bl	80004c0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_2_GPIO_Port, TEST_2_Pin);
 8000daa:	2380      	movs	r3, #128	; 0x80
 8000dac:	015a      	lsls	r2, r3, #5
 8000dae:	23a0      	movs	r3, #160	; 0xa0
 8000db0:	05db      	lsls	r3, r3, #23
 8000db2:	0011      	movs	r1, r2
 8000db4:	0018      	movs	r0, r3
 8000db6:	f7ff fb83 	bl	80004c0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = MEM_HOLD_Pin;
 8000dba:	003b      	movs	r3, r7
 8000dbc:	2280      	movs	r2, #128	; 0x80
 8000dbe:	0092      	lsls	r2, r2, #2
 8000dc0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000dc2:	003b      	movs	r3, r7
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc8:	003b      	movs	r3, r7
 8000dca:	2203      	movs	r2, #3
 8000dcc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000dce:	003b      	movs	r3, r7
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000dd4:	003b      	movs	r3, r7
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_HOLD_GPIO_Port, &GPIO_InitStruct);
 8000dda:	003b      	movs	r3, r7
 8000ddc:	4a7d      	ldr	r2, [pc, #500]	; (8000fd4 <MX_GPIO_Init+0x2ac>)
 8000dde:	0019      	movs	r1, r3
 8000de0:	0010      	movs	r0, r2
 8000de2:	f009 f931 	bl	800a048 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_WP_Pin;
 8000de6:	003b      	movs	r3, r7
 8000de8:	2280      	movs	r2, #128	; 0x80
 8000dea:	01d2      	lsls	r2, r2, #7
 8000dec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000dee:	003b      	movs	r3, r7
 8000df0:	2201      	movs	r2, #1
 8000df2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000df4:	003b      	movs	r3, r7
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000dfa:	003b      	movs	r3, r7
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e00:	003b      	movs	r3, r7
 8000e02:	2200      	movs	r2, #0
 8000e04:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_WP_GPIO_Port, &GPIO_InitStruct);
 8000e06:	003b      	movs	r3, r7
 8000e08:	4a73      	ldr	r2, [pc, #460]	; (8000fd8 <MX_GPIO_Init+0x2b0>)
 8000e0a:	0019      	movs	r1, r3
 8000e0c:	0010      	movs	r0, r2
 8000e0e:	f009 f91b 	bl	800a048 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_CS_Pin;
 8000e12:	003b      	movs	r3, r7
 8000e14:	2280      	movs	r2, #128	; 0x80
 8000e16:	0212      	lsls	r2, r2, #8
 8000e18:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e1a:	003b      	movs	r3, r7
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e20:	003b      	movs	r3, r7
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e26:	003b      	movs	r3, r7
 8000e28:	2200      	movs	r2, #0
 8000e2a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e2c:	003b      	movs	r3, r7
 8000e2e:	2200      	movs	r2, #0
 8000e30:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_CS_GPIO_Port, &GPIO_InitStruct);
 8000e32:	003b      	movs	r3, r7
 8000e34:	4a68      	ldr	r2, [pc, #416]	; (8000fd8 <MX_GPIO_Init+0x2b0>)
 8000e36:	0019      	movs	r1, r3
 8000e38:	0010      	movs	r0, r2
 8000e3a:	f009 f905 	bl	800a048 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_1_Pin;
 8000e3e:	003b      	movs	r3, r7
 8000e40:	2201      	movs	r2, #1
 8000e42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e44:	003b      	movs	r3, r7
 8000e46:	2200      	movs	r2, #0
 8000e48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e4a:	003b      	movs	r3, r7
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_1_GPIO_Port, &GPIO_InitStruct);
 8000e50:	003a      	movs	r2, r7
 8000e52:	23a0      	movs	r3, #160	; 0xa0
 8000e54:	05db      	lsls	r3, r3, #23
 8000e56:	0011      	movs	r1, r2
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f009 f8f5 	bl	800a048 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_2_Pin;
 8000e5e:	003b      	movs	r3, r7
 8000e60:	2202      	movs	r2, #2
 8000e62:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e64:	003b      	movs	r3, r7
 8000e66:	2200      	movs	r2, #0
 8000e68:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e6a:	003b      	movs	r3, r7
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_2_GPIO_Port, &GPIO_InitStruct);
 8000e70:	003a      	movs	r2, r7
 8000e72:	23a0      	movs	r3, #160	; 0xa0
 8000e74:	05db      	lsls	r3, r3, #23
 8000e76:	0011      	movs	r1, r2
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f009 f8e5 	bl	800a048 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_3_Pin;
 8000e7e:	003b      	movs	r3, r7
 8000e80:	2210      	movs	r2, #16
 8000e82:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e84:	003b      	movs	r3, r7
 8000e86:	2200      	movs	r2, #0
 8000e88:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e8a:	003b      	movs	r3, r7
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_3_GPIO_Port, &GPIO_InitStruct);
 8000e90:	003a      	movs	r2, r7
 8000e92:	23a0      	movs	r3, #160	; 0xa0
 8000e94:	05db      	lsls	r3, r3, #23
 8000e96:	0011      	movs	r1, r2
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f009 f8d5 	bl	800a048 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 8000e9e:	003b      	movs	r3, r7
 8000ea0:	2240      	movs	r2, #64	; 0x40
 8000ea2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ea4:	003b      	movs	r3, r7
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000eaa:	003b      	movs	r3, r7
 8000eac:	2203      	movs	r2, #3
 8000eae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000eb0:	003b      	movs	r3, r7
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000eb6:	003b      	movs	r3, r7
 8000eb8:	2200      	movs	r2, #0
 8000eba:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 8000ebc:	003a      	movs	r2, r7
 8000ebe:	23a0      	movs	r3, #160	; 0xa0
 8000ec0:	05db      	lsls	r3, r3, #23
 8000ec2:	0011      	movs	r1, r2
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f009 f8bf 	bl	800a048 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_D_C_Pin;
 8000eca:	003b      	movs	r3, r7
 8000ecc:	2280      	movs	r2, #128	; 0x80
 8000ece:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ed0:	003b      	movs	r3, r7
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed6:	003b      	movs	r3, r7
 8000ed8:	2203      	movs	r2, #3
 8000eda:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000edc:	003b      	movs	r3, r7
 8000ede:	2200      	movs	r2, #0
 8000ee0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ee2:	003b      	movs	r3, r7
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_D_C_GPIO_Port, &GPIO_InitStruct);
 8000ee8:	003a      	movs	r2, r7
 8000eea:	23a0      	movs	r3, #160	; 0xa0
 8000eec:	05db      	lsls	r3, r3, #23
 8000eee:	0011      	movs	r1, r2
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f009 f8a9 	bl	800a048 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BF_Pin;
 8000ef6:	003b      	movs	r3, r7
 8000ef8:	2240      	movs	r2, #64	; 0x40
 8000efa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000efc:	003b      	movs	r3, r7
 8000efe:	2201      	movs	r2, #1
 8000f00:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f02:	003b      	movs	r3, r7
 8000f04:	2203      	movs	r2, #3
 8000f06:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f08:	003b      	movs	r3, r7
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f0e:	003b      	movs	r3, r7
 8000f10:	2200      	movs	r2, #0
 8000f12:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BF_GPIO_Port, &GPIO_InitStruct);
 8000f14:	003b      	movs	r3, r7
 8000f16:	4a30      	ldr	r2, [pc, #192]	; (8000fd8 <MX_GPIO_Init+0x2b0>)
 8000f18:	0019      	movs	r1, r3
 8000f1a:	0010      	movs	r0, r2
 8000f1c:	f009 f894 	bl	800a048 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_1_Pin;
 8000f20:	003b      	movs	r3, r7
 8000f22:	2280      	movs	r2, #128	; 0x80
 8000f24:	0112      	lsls	r2, r2, #4
 8000f26:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f28:	003b      	movs	r3, r7
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2e:	003b      	movs	r3, r7
 8000f30:	2203      	movs	r2, #3
 8000f32:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f34:	003b      	movs	r3, r7
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f3a:	003b      	movs	r3, r7
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_1_GPIO_Port, &GPIO_InitStruct);
 8000f40:	003a      	movs	r2, r7
 8000f42:	23a0      	movs	r3, #160	; 0xa0
 8000f44:	05db      	lsls	r3, r3, #23
 8000f46:	0011      	movs	r1, r2
 8000f48:	0018      	movs	r0, r3
 8000f4a:	f009 f87d 	bl	800a048 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_2_Pin;
 8000f4e:	003b      	movs	r3, r7
 8000f50:	2280      	movs	r2, #128	; 0x80
 8000f52:	0152      	lsls	r2, r2, #5
 8000f54:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f56:	003b      	movs	r3, r7
 8000f58:	2201      	movs	r2, #1
 8000f5a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5c:	003b      	movs	r3, r7
 8000f5e:	2203      	movs	r2, #3
 8000f60:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f62:	003b      	movs	r3, r7
 8000f64:	2200      	movs	r2, #0
 8000f66:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f68:	003b      	movs	r3, r7
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_2_GPIO_Port, &GPIO_InitStruct);
 8000f6e:	003a      	movs	r2, r7
 8000f70:	23a0      	movs	r3, #160	; 0xa0
 8000f72:	05db      	lsls	r3, r3, #23
 8000f74:	0011      	movs	r1, r2
 8000f76:	0018      	movs	r0, r3
 8000f78:	f009 f866 	bl	800a048 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = KEY_4_Pin;
 8000f7c:	003b      	movs	r3, r7
 8000f7e:	2280      	movs	r2, #128	; 0x80
 8000f80:	0192      	lsls	r2, r2, #6
 8000f82:	601a      	str	r2, [r3, #0]
  	  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000f84:	003b      	movs	r3, r7
 8000f86:	2200      	movs	r2, #0
 8000f88:	605a      	str	r2, [r3, #4]
  	  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000f8a:	003b      	movs	r3, r7
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	611a      	str	r2, [r3, #16]
  	  LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 8000f90:	003a      	movs	r2, r7
 8000f92:	23a0      	movs	r3, #160	; 0xa0
 8000f94:	05db      	lsls	r3, r3, #23
 8000f96:	0011      	movs	r1, r2
 8000f98:	0018      	movs	r0, r3
 8000f9a:	f009 f855 	bl	800a048 <LL_GPIO_Init>
  	  /**/
  	    GPIO_InitStruct.Pin = KEY_5_Pin;
 8000f9e:	003b      	movs	r3, r7
 8000fa0:	2280      	movs	r2, #128	; 0x80
 8000fa2:	01d2      	lsls	r2, r2, #7
 8000fa4:	601a      	str	r2, [r3, #0]
  	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000fa6:	003b      	movs	r3, r7
 8000fa8:	2200      	movs	r2, #0
 8000faa:	605a      	str	r2, [r3, #4]
  	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000fac:	003b      	movs	r3, r7
 8000fae:	2201      	movs	r2, #1
 8000fb0:	611a      	str	r2, [r3, #16]
  	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 8000fb2:	003a      	movs	r2, r7
 8000fb4:	23a0      	movs	r3, #160	; 0xa0
 8000fb6:	05db      	lsls	r3, r3, #23
 8000fb8:	0011      	movs	r1, r2
 8000fba:	0018      	movs	r0, r3
 8000fbc:	f009 f844 	bl	800a048 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_EnableFastModePlus(LL_SYSCFG_I2C_FASTMODEPLUS_PB9);
 8000fc0:	2380      	movs	r3, #128	; 0x80
 8000fc2:	031b      	lsls	r3, r3, #12
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f7ff fa5f 	bl	8000488 <LL_SYSCFG_EnableFastModePlus>

}
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	b006      	add	sp, #24
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	50000400 	.word	0x50000400
 8000fd8:	50000800 	.word	0x50000800

08000fdc <USART2_RX_Callback>:
//	    GPIO_InitStruct.Pin = KEY_5_Pin;
//	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
//	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
//	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
void  USART2_RX_Callback(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0

  dt1 = LL_USART_ReceiveData9(USART2);// LL implementaion of 1 byte receive
 8000fe0:	4b16      	ldr	r3, [pc, #88]	; (800103c <USART2_RX_Callback+0x60>)
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f7ff fa42 	bl	800046c <LL_USART_ReceiveData9>
 8000fe8:	0003      	movs	r3, r0
 8000fea:	001a      	movs	r2, r3
 8000fec:	4b14      	ldr	r3, [pc, #80]	; (8001040 <USART2_RX_Callback+0x64>)
 8000fee:	801a      	strh	r2, [r3, #0]
	dt1 = (uint16_t)(USART2->RDR & 0x01FF);//CMSIS implementaion of 1 byte receive
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <USART2_RX_Callback+0x60>)
 8000ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	05db      	lsls	r3, r3, #23
 8000ff8:	0ddb      	lsrs	r3, r3, #23
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	4b10      	ldr	r3, [pc, #64]	; (8001040 <USART2_RX_Callback+0x64>)
 8000ffe:	801a      	strh	r2, [r3, #0]
  ByteReceived=1;
 8001000:	4b10      	ldr	r3, [pc, #64]	; (8001044 <USART2_RX_Callback+0x68>)
 8001002:	2201      	movs	r2, #1
 8001004:	701a      	strb	r2, [r3, #0]
  if(dt1>0xFF){
 8001006:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <USART2_RX_Callback+0x64>)
 8001008:	881b      	ldrh	r3, [r3, #0]
 800100a:	2bff      	cmp	r3, #255	; 0xff
 800100c:	d90a      	bls.n	8001024 <USART2_RX_Callback+0x48>
	  cmd[0]=dt1;
 800100e:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <USART2_RX_Callback+0x64>)
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	b2da      	uxtb	r2, r3
 8001014:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <USART2_RX_Callback+0x6c>)
 8001016:	701a      	strb	r2, [r3, #0]
	  ind = 0;
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <USART2_RX_Callback+0x70>)
 800101a:	2200      	movs	r2, #0
 800101c:	801a      	strh	r2, [r3, #0]
	  firstByteReceived=1;
 800101e:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <USART2_RX_Callback+0x74>)
 8001020:	2201      	movs	r2, #1
 8001022:	701a      	strb	r2, [r3, #0]
//  while (!LL_USART_IsActiveFlag_TXE(USART2)) {}
//  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
  }
//  cmdReceive();
  if(firstByteReceived==1){
 8001024:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <USART2_RX_Callback+0x74>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d104      	bne.n	8001036 <USART2_RX_Callback+0x5a>
	  cmdReceive(dt1);
 800102c:	4b04      	ldr	r3, [pc, #16]	; (8001040 <USART2_RX_Callback+0x64>)
 800102e:	881b      	ldrh	r3, [r3, #0]
 8001030:	0018      	movs	r0, r3
 8001032:	f000 f87f 	bl	8001134 <cmdReceive>
  }
}
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40004400 	.word	0x40004400
 8001040:	200055de 	.word	0x200055de
 8001044:	20005164 	.word	0x20005164
 8001048:	200075e4 	.word	0x200075e4
 800104c:	20005166 	.word	0x20005166
 8001050:	20005165 	.word	0x20005165

08001054 <HAL_SPI_RxHalfCpltCallback>:
//====================================================================================================================
void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi2)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  	GPIOA->ODR |= 1 << 11;	//set test 1
 800105c:	23a0      	movs	r3, #160	; 0xa0
 800105e:	05db      	lsls	r3, r3, #23
 8001060:	695a      	ldr	r2, [r3, #20]
 8001062:	23a0      	movs	r3, #160	; 0xa0
 8001064:	05db      	lsls	r3, r3, #23
 8001066:	2180      	movs	r1, #128	; 0x80
 8001068:	0109      	lsls	r1, r1, #4
 800106a:	430a      	orrs	r2, r1
 800106c:	615a      	str	r2, [r3, #20]
  	GPIOA->ODR &= ~(1 << 11);	//reset test 1
 800106e:	23a0      	movs	r3, #160	; 0xa0
 8001070:	05db      	lsls	r3, r3, #23
 8001072:	695a      	ldr	r2, [r3, #20]
 8001074:	23a0      	movs	r3, #160	; 0xa0
 8001076:	05db      	lsls	r3, r3, #23
 8001078:	490e      	ldr	r1, [pc, #56]	; (80010b4 <HAL_SPI_RxHalfCpltCallback+0x60>)
 800107a:	400a      	ands	r2, r1
 800107c:	615a      	str	r2, [r3, #20]
  	GPIOA->ODR &= ~(1 << 6);	//reset cs
 800107e:	23a0      	movs	r3, #160	; 0xa0
 8001080:	05db      	lsls	r3, r3, #23
 8001082:	695a      	ldr	r2, [r3, #20]
 8001084:	23a0      	movs	r3, #160	; 0xa0
 8001086:	05db      	lsls	r3, r3, #23
 8001088:	2140      	movs	r1, #64	; 0x40
 800108a:	438a      	bics	r2, r1
 800108c:	615a      	str	r2, [r3, #20]
  		GPIOA->ODR |= 1 << 7;	// reset dc
 800108e:	23a0      	movs	r3, #160	; 0xa0
 8001090:	05db      	lsls	r3, r3, #23
 8001092:	695a      	ldr	r2, [r3, #20]
 8001094:	23a0      	movs	r3, #160	; 0xa0
 8001096:	05db      	lsls	r3, r3, #23
 8001098:	2180      	movs	r1, #128	; 0x80
 800109a:	430a      	orrs	r2, r1
 800109c:	615a      	str	r2, [r3, #20]
  		HAL_USART_Transmit_DMA(&husart3, MEM_Buffer,len);
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <HAL_SPI_RxHalfCpltCallback+0x64>)
 80010a0:	881a      	ldrh	r2, [r3, #0]
 80010a2:	4906      	ldr	r1, [pc, #24]	; (80010bc <HAL_SPI_RxHalfCpltCallback+0x68>)
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_SPI_RxHalfCpltCallback+0x6c>)
 80010a6:	0018      	movs	r0, r3
 80010a8:	f008 f8ee 	bl	8009288 <HAL_USART_Transmit_DMA>

}
 80010ac:	46c0      	nop			; (mov r8, r8)
 80010ae:	46bd      	mov	sp, r7
 80010b0:	b002      	add	sp, #8
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	fffff7ff 	.word	0xfffff7ff
 80010b8:	200055dc 	.word	0x200055dc
 80010bc:	200055e4 	.word	0x200055e4
 80010c0:	20005394 	.word	0x20005394

080010c4 <HAL_SPI_RxCpltCallback>:
//==========================================================
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi2)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  	GPIOC->ODR |= 1 << 15; // set cs
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <HAL_SPI_RxCpltCallback+0x20>)
 80010ce:	695a      	ldr	r2, [r3, #20]
 80010d0:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <HAL_SPI_RxCpltCallback+0x20>)
 80010d2:	2180      	movs	r1, #128	; 0x80
 80010d4:	0209      	lsls	r1, r1, #8
 80010d6:	430a      	orrs	r2, r1
 80010d8:	615a      	str	r2, [r3, #20]
}
 80010da:	46c0      	nop			; (mov r8, r8)
 80010dc:	46bd      	mov	sp, r7
 80010de:	b002      	add	sp, #8
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	50000800 	.word	0x50000800

080010e8 <HAL_USART_TxCpltCallback>:
//==============================================================
void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart3)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	GPIOA->ODR &= ~(1 << 7);	//reset dc
 80010f0:	23a0      	movs	r3, #160	; 0xa0
 80010f2:	05db      	lsls	r3, r3, #23
 80010f4:	695a      	ldr	r2, [r3, #20]
 80010f6:	23a0      	movs	r3, #160	; 0xa0
 80010f8:	05db      	lsls	r3, r3, #23
 80010fa:	2180      	movs	r1, #128	; 0x80
 80010fc:	438a      	bics	r2, r1
 80010fe:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= 1 << 6;	//set cs
 8001100:	23a0      	movs	r3, #160	; 0xa0
 8001102:	05db      	lsls	r3, r3, #23
 8001104:	695a      	ldr	r2, [r3, #20]
 8001106:	23a0      	movs	r3, #160	; 0xa0
 8001108:	05db      	lsls	r3, r3, #23
 800110a:	2140      	movs	r1, #64	; 0x40
 800110c:	430a      	orrs	r2, r1
 800110e:	615a      	str	r2, [r3, #20]

	GPIOC->ODR |= 1 << 6;	//set BF
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <HAL_USART_TxCpltCallback+0x44>)
 8001112:	695a      	ldr	r2, [r3, #20]
 8001114:	4b05      	ldr	r3, [pc, #20]	; (800112c <HAL_USART_TxCpltCallback+0x44>)
 8001116:	2140      	movs	r1, #64	; 0x40
 8001118:	430a      	orrs	r2, r1
 800111a:	615a      	str	r2, [r3, #20]
	cmd2Execute=0;
 800111c:	4b04      	ldr	r3, [pc, #16]	; (8001130 <HAL_USART_TxCpltCallback+0x48>)
 800111e:	2200      	movs	r2, #0
 8001120:	701a      	strb	r2, [r3, #0]
}
 8001122:	46c0      	nop			; (mov r8, r8)
 8001124:	46bd      	mov	sp, r7
 8001126:	b002      	add	sp, #8
 8001128:	bd80      	pop	{r7, pc}
 800112a:	46c0      	nop			; (mov r8, r8)
 800112c:	50000800 	.word	0x50000800
 8001130:	2000545e 	.word	0x2000545e

08001134 <cmdReceive>:
//==============================================================
	void cmdReceive (uint16_t dt1)
	{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	0002      	movs	r2, r0
 800113c:	1dbb      	adds	r3, r7, #6
 800113e:	801a      	strh	r2, [r3, #0]
//	  uint8_t inputCS=0;
	  uint8_t i=0;
 8001140:	230f      	movs	r3, #15
 8001142:	18fb      	adds	r3, r7, r3
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]
	  while (!ByteReceived) {}
 8001148:	46c0      	nop			; (mov r8, r8)
 800114a:	4b2b      	ldr	r3, [pc, #172]	; (80011f8 <cmdReceive+0xc4>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d0fb      	beq.n	800114a <cmdReceive+0x16>
	  ByteReceived=0;
 8001152:	4b29      	ldr	r3, [pc, #164]	; (80011f8 <cmdReceive+0xc4>)
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]
	  cmd[ind] = dt1;
 8001158:	4b28      	ldr	r3, [pc, #160]	; (80011fc <cmdReceive+0xc8>)
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	001a      	movs	r2, r3
 800115e:	1dbb      	adds	r3, r7, #6
 8001160:	881b      	ldrh	r3, [r3, #0]
 8001162:	b2d9      	uxtb	r1, r3
 8001164:	4b26      	ldr	r3, [pc, #152]	; (8001200 <cmdReceive+0xcc>)
 8001166:	5499      	strb	r1, [r3, r2]
	  ind++;
 8001168:	4b24      	ldr	r3, [pc, #144]	; (80011fc <cmdReceive+0xc8>)
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	3301      	adds	r3, #1
 800116e:	b29a      	uxth	r2, r3
 8001170:	4b22      	ldr	r3, [pc, #136]	; (80011fc <cmdReceive+0xc8>)
 8001172:	801a      	strh	r2, [r3, #0]
	  if(ind>=1){
 8001174:	4b21      	ldr	r3, [pc, #132]	; (80011fc <cmdReceive+0xc8>)
 8001176:	881b      	ldrh	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d033      	beq.n	80011e4 <cmdReceive+0xb0>
//		  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
		  if(ind>cmd[1]+1){
 800117c:	4b1f      	ldr	r3, [pc, #124]	; (80011fc <cmdReceive+0xc8>)
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	001a      	movs	r2, r3
 8001182:	4b1f      	ldr	r3, [pc, #124]	; (8001200 <cmdReceive+0xcc>)
 8001184:	785b      	ldrb	r3, [r3, #1]
 8001186:	3301      	adds	r3, #1
 8001188:	429a      	cmp	r2, r3
 800118a:	dd2b      	ble.n	80011e4 <cmdReceive+0xb0>
//			  LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 for(i=0;i<(cmd[1]+2);i++){
 800118c:	230f      	movs	r3, #15
 800118e:	18fb      	adds	r3, r7, r3
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]
 8001194:	e00f      	b.n	80011b6 <cmdReceive+0x82>
				 inputCS+=cmd[i];
 8001196:	210f      	movs	r1, #15
 8001198:	187b      	adds	r3, r7, r1
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	4a18      	ldr	r2, [pc, #96]	; (8001200 <cmdReceive+0xcc>)
 800119e:	5cd2      	ldrb	r2, [r2, r3]
 80011a0:	4b18      	ldr	r3, [pc, #96]	; (8001204 <cmdReceive+0xd0>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	18d3      	adds	r3, r2, r3
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	4b16      	ldr	r3, [pc, #88]	; (8001204 <cmdReceive+0xd0>)
 80011aa:	701a      	strb	r2, [r3, #0]
			 for(i=0;i<(cmd[1]+2);i++){
 80011ac:	187b      	adds	r3, r7, r1
 80011ae:	781a      	ldrb	r2, [r3, #0]
 80011b0:	187b      	adds	r3, r7, r1
 80011b2:	3201      	adds	r2, #1
 80011b4:	701a      	strb	r2, [r3, #0]
 80011b6:	4b12      	ldr	r3, [pc, #72]	; (8001200 <cmdReceive+0xcc>)
 80011b8:	785b      	ldrb	r3, [r3, #1]
 80011ba:	1c5a      	adds	r2, r3, #1
 80011bc:	210f      	movs	r1, #15
 80011be:	187b      	adds	r3, r7, r1
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	dae7      	bge.n	8001196 <cmdReceive+0x62>
			 }
			 if((inputCS==0)&&(i==cmd[1]+2)){
 80011c6:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <cmdReceive+0xd0>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d10a      	bne.n	80011e4 <cmdReceive+0xb0>
 80011ce:	187b      	adds	r3, r7, r1
 80011d0:	781a      	ldrb	r2, [r3, #0]
 80011d2:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <cmdReceive+0xcc>)
 80011d4:	785b      	ldrb	r3, [r3, #1]
 80011d6:	3302      	adds	r3, #2
 80011d8:	429a      	cmp	r2, r3
 80011da:	d103      	bne.n	80011e4 <cmdReceive+0xb0>
//			 	LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 	answer2CPU(cmd);
 80011dc:	4b08      	ldr	r3, [pc, #32]	; (8001200 <cmdReceive+0xcc>)
 80011de:	0018      	movs	r0, r3
 80011e0:	f000 fa5e 	bl	80016a0 <answer2CPU>
			 }
		  }
	  }
//	  ind = 0;
	  USART2->ICR|=USART_ICR_ORECF;
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <cmdReceive+0xd4>)
 80011e6:	6a1a      	ldr	r2, [r3, #32]
 80011e8:	4b07      	ldr	r3, [pc, #28]	; (8001208 <cmdReceive+0xd4>)
 80011ea:	2108      	movs	r1, #8
 80011ec:	430a      	orrs	r2, r1
 80011ee:	621a      	str	r2, [r3, #32]
	}
 80011f0:	46c0      	nop			; (mov r8, r8)
 80011f2:	46bd      	mov	sp, r7
 80011f4:	b004      	add	sp, #16
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20005164 	.word	0x20005164
 80011fc:	20005166 	.word	0x20005166
 8001200:	200075e4 	.word	0x200075e4
 8001204:	20005168 	.word	0x20005168
 8001208:	40004400 	.word	0x40004400

0800120c <USART_AS_SPI_sendCMD>:
	void USART_AS_SPI_sendCMD(uint8_t byte) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	0002      	movs	r2, r0
 8001214:	1dfb      	adds	r3, r7, #7
 8001216:	701a      	strb	r2, [r3, #0]
			HAL_USART_Transmit(&husart3, (uint8_t*)&byte, 1, 10);
 8001218:	1df9      	adds	r1, r7, #7
 800121a:	4804      	ldr	r0, [pc, #16]	; (800122c <USART_AS_SPI_sendCMD+0x20>)
 800121c:	230a      	movs	r3, #10
 800121e:	2201      	movs	r2, #1
 8001220:	f007 ff74 	bl	800910c <HAL_USART_Transmit>
		}
 8001224:	46c0      	nop			; (mov r8, r8)
 8001226:	46bd      	mov	sp, r7
 8001228:	b002      	add	sp, #8
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20005394 	.word	0x20005394

08001230 <weoInit>:
	void USART_AS_SPI_sendDAT(uint8_t byte) //(Without CS and D/C)
	{
		HAL_USART_Transmit(&husart3, (uint8_t*) &byte, 1, 10);
	}
	void weoInit(void) {
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0

		USART3->CR1 &= ~(USART_CR1_UE);
 8001234:	4b32      	ldr	r3, [pc, #200]	; (8001300 <weoInit+0xd0>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4b31      	ldr	r3, [pc, #196]	; (8001300 <weoInit+0xd0>)
 800123a:	2101      	movs	r1, #1
 800123c:	438a      	bics	r2, r1
 800123e:	601a      	str	r2, [r3, #0]
		USART3->CR2 |= USART_CR2_MSBFIRST;
 8001240:	4b2f      	ldr	r3, [pc, #188]	; (8001300 <weoInit+0xd0>)
 8001242:	685a      	ldr	r2, [r3, #4]
 8001244:	4b2e      	ldr	r3, [pc, #184]	; (8001300 <weoInit+0xd0>)
 8001246:	2180      	movs	r1, #128	; 0x80
 8001248:	0309      	lsls	r1, r1, #12
 800124a:	430a      	orrs	r2, r1
 800124c:	605a      	str	r2, [r3, #4]
		USART3->CR1 |= USART_CR1_UE;
 800124e:	4b2c      	ldr	r3, [pc, #176]	; (8001300 <weoInit+0xd0>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	4b2b      	ldr	r3, [pc, #172]	; (8001300 <weoInit+0xd0>)
 8001254:	2101      	movs	r1, #1
 8001256:	430a      	orrs	r2, r1
 8001258:	601a      	str	r2, [r3, #0]

		HAL_Delay(1);
 800125a:	2001      	movs	r0, #1
 800125c:	f001 ff36 	bl	80030cc <HAL_Delay>
		HAL_Delay(1);
 8001260:	2001      	movs	r0, #1
 8001262:	f001 ff33 	bl	80030cc <HAL_Delay>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001266:	4b27      	ldr	r3, [pc, #156]	; (8001304 <weoInit+0xd4>)
 8001268:	2100      	movs	r1, #0
 800126a:	0018      	movs	r0, r3
 800126c:	f006 fe9a 	bl	8007fa4 <HAL_TIM_PWM_Start>
		HAL_Delay(1);
 8001270:	2001      	movs	r0, #1
 8001272:	f001 ff2b 	bl	80030cc <HAL_Delay>

		GPIOA->ODR &= ~(1 << 6);	//reset cs
 8001276:	23a0      	movs	r3, #160	; 0xa0
 8001278:	05db      	lsls	r3, r3, #23
 800127a:	695a      	ldr	r2, [r3, #20]
 800127c:	23a0      	movs	r3, #160	; 0xa0
 800127e:	05db      	lsls	r3, r3, #23
 8001280:	2140      	movs	r1, #64	; 0x40
 8001282:	438a      	bics	r2, r1
 8001284:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1 << 7);	// reset dc
 8001286:	23a0      	movs	r3, #160	; 0xa0
 8001288:	05db      	lsls	r3, r3, #23
 800128a:	695a      	ldr	r2, [r3, #20]
 800128c:	23a0      	movs	r3, #160	; 0xa0
 800128e:	05db      	lsls	r3, r3, #23
 8001290:	2180      	movs	r1, #128	; 0x80
 8001292:	438a      	bics	r2, r1
 8001294:	615a      	str	r2, [r3, #20]
		USART_AS_SPI_sendCMD(0xAF);
 8001296:	20af      	movs	r0, #175	; 0xaf
 8001298:	f7ff ffb8 	bl	800120c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA0);	//Set Re-map
 800129c:	20a0      	movs	r0, #160	; 0xa0
 800129e:	f7ff ffb5 	bl	800120c <USART_AS_SPI_sendCMD>
//		USART_AS_SPI_sendCMD(0x54);
//		USART_AS_SPI_sendCMD(0b00010100);
		USART_AS_SPI_sendCMD(0x51); //	0x51 is a proper remap!
 80012a2:	2051      	movs	r0, #81	; 0x51
 80012a4:	f7ff ffb2 	bl	800120c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 80012a8:	2081      	movs	r0, #129	; 0x81
 80012aa:	f7ff ffaf 	bl	800120c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xFF);
 80012ae:	20ff      	movs	r0, #255	; 0xff
 80012b0:	f7ff ffac 	bl	800120c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA1);	//Set Display Start Line
 80012b4:	20a1      	movs	r0, #161	; 0xa1
 80012b6:	f7ff ffa9 	bl	800120c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 80012ba:	2000      	movs	r0, #0
 80012bc:	f7ff ffa6 	bl	800120c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA2);	//Set Display Offset
 80012c0:	20a2      	movs	r0, #162	; 0xa2
 80012c2:	f7ff ffa3 	bl	800120c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 80012c6:	2000      	movs	r0, #0
 80012c8:	f7ff ffa0 	bl	800120c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA8);  // Select Multiplex Ratio
 80012cc:	20a8      	movs	r0, #168	; 0xa8
 80012ce:	f7ff ff9d 	bl	800120c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x7F); // Default => 0x3F (1/64 Duty)	0x1F(1/32 Duty)
 80012d2:	207f      	movs	r0, #127	; 0x7f
 80012d4:	f7ff ff9a 	bl	800120c <USART_AS_SPI_sendCMD>
		GPIOA->ODR |= 1 << 7;	//set dc
 80012d8:	23a0      	movs	r3, #160	; 0xa0
 80012da:	05db      	lsls	r3, r3, #23
 80012dc:	695a      	ldr	r2, [r3, #20]
 80012de:	23a0      	movs	r3, #160	; 0xa0
 80012e0:	05db      	lsls	r3, r3, #23
 80012e2:	2180      	movs	r1, #128	; 0x80
 80012e4:	430a      	orrs	r2, r1
 80012e6:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= 1 << 6;	//set cs
 80012e8:	23a0      	movs	r3, #160	; 0xa0
 80012ea:	05db      	lsls	r3, r3, #23
 80012ec:	695a      	ldr	r2, [r3, #20]
 80012ee:	23a0      	movs	r3, #160	; 0xa0
 80012f0:	05db      	lsls	r3, r3, #23
 80012f2:	2140      	movs	r1, #64	; 0x40
 80012f4:	430a      	orrs	r2, r1
 80012f6:	615a      	str	r2, [r3, #20]
		//=======================================================================================================
	}
 80012f8:	46c0      	nop			; (mov r8, r8)
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	46c0      	nop			; (mov r8, r8)
 8001300:	40004800 	.word	0x40004800
 8001304:	20005408 	.word	0x20005408

08001308 <weoClear>:
	void weoClear(void) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
		uint16_t i;

					GPIOA->ODR &= ~(1 << 6);	//reset cs
 800130e:	23a0      	movs	r3, #160	; 0xa0
 8001310:	05db      	lsls	r3, r3, #23
 8001312:	695a      	ldr	r2, [r3, #20]
 8001314:	23a0      	movs	r3, #160	; 0xa0
 8001316:	05db      	lsls	r3, r3, #23
 8001318:	2140      	movs	r1, #64	; 0x40
 800131a:	438a      	bics	r2, r1
 800131c:	615a      	str	r2, [r3, #20]
					GPIOA->ODR &= ~(1 << 7);	// reset dc
 800131e:	23a0      	movs	r3, #160	; 0xa0
 8001320:	05db      	lsls	r3, r3, #23
 8001322:	695a      	ldr	r2, [r3, #20]
 8001324:	23a0      	movs	r3, #160	; 0xa0
 8001326:	05db      	lsls	r3, r3, #23
 8001328:	2180      	movs	r1, #128	; 0x80
 800132a:	438a      	bics	r2, r1
 800132c:	615a      	str	r2, [r3, #20]
						USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 800132e:	2075      	movs	r0, #117	; 0x75
 8001330:	f7ff ff6c 	bl	800120c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 8001334:	2000      	movs	r0, #0
 8001336:	f7ff ff69 	bl	800120c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 800133a:	207f      	movs	r0, #127	; 0x7f
 800133c:	f7ff ff66 	bl	800120c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 8001340:	2015      	movs	r0, #21
 8001342:	f7ff ff63 	bl	800120c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 8001346:	2000      	movs	r0, #0
 8001348:	f7ff ff60 	bl	800120c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 800134c:	207f      	movs	r0, #127	; 0x7f
 800134e:	f7ff ff5d 	bl	800120c <USART_AS_SPI_sendCMD>
					GPIOA->ODR &= ~(1 << 6);	//reset cs
 8001352:	23a0      	movs	r3, #160	; 0xa0
 8001354:	05db      	lsls	r3, r3, #23
 8001356:	695a      	ldr	r2, [r3, #20]
 8001358:	23a0      	movs	r3, #160	; 0xa0
 800135a:	05db      	lsls	r3, r3, #23
 800135c:	2140      	movs	r1, #64	; 0x40
 800135e:	438a      	bics	r2, r1
 8001360:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 7;	// set dc
 8001362:	23a0      	movs	r3, #160	; 0xa0
 8001364:	05db      	lsls	r3, r3, #23
 8001366:	695a      	ldr	r2, [r3, #20]
 8001368:	23a0      	movs	r3, #160	; 0xa0
 800136a:	05db      	lsls	r3, r3, #23
 800136c:	2180      	movs	r1, #128	; 0x80
 800136e:	430a      	orrs	r2, r1
 8001370:	615a      	str	r2, [r3, #20]
					for (i = 0; i <= 8193;i++) {	//fullScreen + small reserve
 8001372:	1dbb      	adds	r3, r7, #6
 8001374:	2200      	movs	r2, #0
 8001376:	801a      	strh	r2, [r3, #0]
 8001378:	e00d      	b.n	8001396 <weoClear+0x8e>
						while(!(USART3->ISR & USART_ISR_TXE)){};
 800137a:	46c0      	nop			; (mov r8, r8)
 800137c:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <weoClear+0xc0>)
 800137e:	69db      	ldr	r3, [r3, #28]
 8001380:	2280      	movs	r2, #128	; 0x80
 8001382:	4013      	ands	r3, r2
 8001384:	d0fa      	beq.n	800137c <weoClear+0x74>
						USART3->TDR = (uint8_t) 0x00;
 8001386:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <weoClear+0xc0>)
 8001388:	2200      	movs	r2, #0
 800138a:	629a      	str	r2, [r3, #40]	; 0x28
					for (i = 0; i <= 8193;i++) {	//fullScreen + small reserve
 800138c:	1dbb      	adds	r3, r7, #6
 800138e:	881a      	ldrh	r2, [r3, #0]
 8001390:	1dbb      	adds	r3, r7, #6
 8001392:	3201      	adds	r2, #1
 8001394:	801a      	strh	r2, [r3, #0]
 8001396:	1dbb      	adds	r3, r7, #6
 8001398:	881b      	ldrh	r3, [r3, #0]
 800139a:	4a0c      	ldr	r2, [pc, #48]	; (80013cc <weoClear+0xc4>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d9ec      	bls.n	800137a <weoClear+0x72>
					}
					GPIOA->ODR &= ~(1 << 7);	//reset dc
 80013a0:	23a0      	movs	r3, #160	; 0xa0
 80013a2:	05db      	lsls	r3, r3, #23
 80013a4:	695a      	ldr	r2, [r3, #20]
 80013a6:	23a0      	movs	r3, #160	; 0xa0
 80013a8:	05db      	lsls	r3, r3, #23
 80013aa:	2180      	movs	r1, #128	; 0x80
 80013ac:	438a      	bics	r2, r1
 80013ae:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 6;	//set cs
 80013b0:	23a0      	movs	r3, #160	; 0xa0
 80013b2:	05db      	lsls	r3, r3, #23
 80013b4:	695a      	ldr	r2, [r3, #20]
 80013b6:	23a0      	movs	r3, #160	; 0xa0
 80013b8:	05db      	lsls	r3, r3, #23
 80013ba:	2140      	movs	r1, #64	; 0x40
 80013bc:	430a      	orrs	r2, r1
 80013be:	615a      	str	r2, [r3, #20]
	}
 80013c0:	46c0      	nop			; (mov r8, r8)
 80013c2:	46bd      	mov	sp, r7
 80013c4:	b002      	add	sp, #8
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40004800 	.word	0x40004800
 80013cc:	00002001 	.word	0x00002001

080013d0 <weoDrawRectangleFilled>:
//========================================================================================================================
	void weoDrawRectangleFilled(unsigned char start_x, unsigned char start_y,
				unsigned char end_x, unsigned char end_y, unsigned char color,
				uint8_t MEM_Buffer[]) {
 80013d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	0005      	movs	r5, r0
 80013d8:	000c      	movs	r4, r1
 80013da:	0010      	movs	r0, r2
 80013dc:	0019      	movs	r1, r3
 80013de:	1dfb      	adds	r3, r7, #7
 80013e0:	1c2a      	adds	r2, r5, #0
 80013e2:	701a      	strb	r2, [r3, #0]
 80013e4:	1dbb      	adds	r3, r7, #6
 80013e6:	1c22      	adds	r2, r4, #0
 80013e8:	701a      	strb	r2, [r3, #0]
 80013ea:	1d7b      	adds	r3, r7, #5
 80013ec:	1c02      	adds	r2, r0, #0
 80013ee:	701a      	strb	r2, [r3, #0]
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	1c0a      	adds	r2, r1, #0
 80013f4:	701a      	strb	r2, [r3, #0]
			uint16_t i = 0;
 80013f6:	240e      	movs	r4, #14
 80013f8:	193b      	adds	r3, r7, r4
 80013fa:	2200      	movs	r2, #0
 80013fc:	801a      	strh	r2, [r3, #0]
			uint8_t start_x_New,start_y_New,end_x_New,end_y_New;
			if (start_x > OLED_DIM_WIDTH || start_y > OLED_DIM_HEIGHT
 80013fe:	1dfb      	adds	r3, r7, #7
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	b25b      	sxtb	r3, r3
 8001404:	2b00      	cmp	r3, #0
 8001406:	da00      	bge.n	800140a <weoDrawRectangleFilled+0x3a>
 8001408:	e0bc      	b.n	8001584 <weoDrawRectangleFilled+0x1b4>
 800140a:	1dbb      	adds	r3, r7, #6
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	b25b      	sxtb	r3, r3
 8001410:	2b00      	cmp	r3, #0
 8001412:	da00      	bge.n	8001416 <weoDrawRectangleFilled+0x46>
 8001414:	e0b6      	b.n	8001584 <weoDrawRectangleFilled+0x1b4>
					|| end_x > OLED_DIM_WIDTH || end_y > OLED_DIM_HEIGHT) {
 8001416:	1d7b      	adds	r3, r7, #5
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	b25b      	sxtb	r3, r3
 800141c:	2b00      	cmp	r3, #0
 800141e:	da00      	bge.n	8001422 <weoDrawRectangleFilled+0x52>
 8001420:	e0b0      	b.n	8001584 <weoDrawRectangleFilled+0x1b4>
 8001422:	1d3b      	adds	r3, r7, #4
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	b25b      	sxtb	r3, r3
 8001428:	2b00      	cmp	r3, #0
 800142a:	da00      	bge.n	800142e <weoDrawRectangleFilled+0x5e>
 800142c:	e0aa      	b.n	8001584 <weoDrawRectangleFilled+0x1b4>
				return;
			}


			start_x_New=start_x;
 800142e:	250d      	movs	r5, #13
 8001430:	197b      	adds	r3, r7, r5
 8001432:	1dfa      	adds	r2, r7, #7
 8001434:	7812      	ldrb	r2, [r2, #0]
 8001436:	701a      	strb	r2, [r3, #0]
			start_y_New=0x7F-end_y;
 8001438:	260c      	movs	r6, #12
 800143a:	19bb      	adds	r3, r7, r6
 800143c:	1d3a      	adds	r2, r7, #4
 800143e:	7812      	ldrb	r2, [r2, #0]
 8001440:	217f      	movs	r1, #127	; 0x7f
 8001442:	1a8a      	subs	r2, r1, r2
 8001444:	701a      	strb	r2, [r3, #0]
			end_x_New=end_x;
 8001446:	230b      	movs	r3, #11
 8001448:	18fb      	adds	r3, r7, r3
 800144a:	1d7a      	adds	r2, r7, #5
 800144c:	7812      	ldrb	r2, [r2, #0]
 800144e:	701a      	strb	r2, [r3, #0]
			end_y_New=0x7F-start_y;
 8001450:	220a      	movs	r2, #10
 8001452:	18bb      	adds	r3, r7, r2
 8001454:	1dba      	adds	r2, r7, #6
 8001456:	7812      	ldrb	r2, [r2, #0]
 8001458:	217f      	movs	r1, #127	; 0x7f
 800145a:	1a8a      	subs	r2, r1, r2
 800145c:	701a      	strb	r2, [r3, #0]

			GPIOA->ODR &= ~(1 << 6);	//reset cs
 800145e:	23a0      	movs	r3, #160	; 0xa0
 8001460:	05db      	lsls	r3, r3, #23
 8001462:	695a      	ldr	r2, [r3, #20]
 8001464:	23a0      	movs	r3, #160	; 0xa0
 8001466:	05db      	lsls	r3, r3, #23
 8001468:	2140      	movs	r1, #64	; 0x40
 800146a:	438a      	bics	r2, r1
 800146c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 800146e:	23a0      	movs	r3, #160	; 0xa0
 8001470:	05db      	lsls	r3, r3, #23
 8001472:	695a      	ldr	r2, [r3, #20]
 8001474:	23a0      	movs	r3, #160	; 0xa0
 8001476:	05db      	lsls	r3, r3, #23
 8001478:	2180      	movs	r1, #128	; 0x80
 800147a:	438a      	bics	r2, r1
 800147c:	615a      	str	r2, [r3, #20]
					USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 800147e:	2075      	movs	r0, #117	; 0x75
 8001480:	f7ff fec4 	bl	800120c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_x_New/1);
 8001484:	197b      	adds	r3, r7, r5
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	0018      	movs	r0, r3
 800148a:	f7ff febf 	bl	800120c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_x_New/1);
 800148e:	230b      	movs	r3, #11
 8001490:	18fb      	adds	r3, r7, r3
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	0018      	movs	r0, r3
 8001496:	f7ff feb9 	bl	800120c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 800149a:	2015      	movs	r0, #21
 800149c:	f7ff feb6 	bl	800120c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_y_New/2);
 80014a0:	19bb      	adds	r3, r7, r6
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	085b      	lsrs	r3, r3, #1
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	0018      	movs	r0, r3
 80014aa:	f7ff feaf 	bl	800120c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_y_New/2);
 80014ae:	220a      	movs	r2, #10
 80014b0:	18bb      	adds	r3, r7, r2
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	085b      	lsrs	r3, r3, #1
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	0018      	movs	r0, r3
 80014ba:	f7ff fea7 	bl	800120c <USART_AS_SPI_sendCMD>
			GPIOA->ODR |= 1 << 7;	//set dc
 80014be:	23a0      	movs	r3, #160	; 0xa0
 80014c0:	05db      	lsls	r3, r3, #23
 80014c2:	695a      	ldr	r2, [r3, #20]
 80014c4:	23a0      	movs	r3, #160	; 0xa0
 80014c6:	05db      	lsls	r3, r3, #23
 80014c8:	2180      	movs	r1, #128	; 0x80
 80014ca:	430a      	orrs	r2, r1
 80014cc:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 80014ce:	23a0      	movs	r3, #160	; 0xa0
 80014d0:	05db      	lsls	r3, r3, #23
 80014d2:	695a      	ldr	r2, [r3, #20]
 80014d4:	23a0      	movs	r3, #160	; 0xa0
 80014d6:	05db      	lsls	r3, r3, #23
 80014d8:	2140      	movs	r1, #64	; 0x40
 80014da:	430a      	orrs	r2, r1
 80014dc:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 6);	//reset cs
 80014de:	23a0      	movs	r3, #160	; 0xa0
 80014e0:	05db      	lsls	r3, r3, #23
 80014e2:	695a      	ldr	r2, [r3, #20]
 80014e4:	23a0      	movs	r3, #160	; 0xa0
 80014e6:	05db      	lsls	r3, r3, #23
 80014e8:	2140      	movs	r1, #64	; 0x40
 80014ea:	438a      	bics	r2, r1
 80014ec:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 7;	// set dc
 80014ee:	23a0      	movs	r3, #160	; 0xa0
 80014f0:	05db      	lsls	r3, r3, #23
 80014f2:	695a      	ldr	r2, [r3, #20]
 80014f4:	23a0      	movs	r3, #160	; 0xa0
 80014f6:	05db      	lsls	r3, r3, #23
 80014f8:	2180      	movs	r1, #128	; 0x80
 80014fa:	430a      	orrs	r2, r1
 80014fc:	615a      	str	r2, [r3, #20]

			for (i = 0; i < ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New/2 - start_y_New /2 + 1));i++) {
 80014fe:	193b      	adds	r3, r7, r4
 8001500:	2200      	movs	r2, #0
 8001502:	801a      	strh	r2, [r3, #0]
 8001504:	e012      	b.n	800152c <weoDrawRectangleFilled+0x15c>
				while(!(USART3->ISR & USART_ISR_TXE)){};
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	4b20      	ldr	r3, [pc, #128]	; (800158c <weoDrawRectangleFilled+0x1bc>)
 800150a:	69db      	ldr	r3, [r3, #28]
 800150c:	2280      	movs	r2, #128	; 0x80
 800150e:	4013      	ands	r3, r2
 8001510:	d0fa      	beq.n	8001508 <weoDrawRectangleFilled+0x138>
				USART3->TDR =MEM_Buffer[i];
 8001512:	210e      	movs	r1, #14
 8001514:	187b      	adds	r3, r7, r1
 8001516:	881b      	ldrh	r3, [r3, #0]
 8001518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800151a:	18d3      	adds	r3, r2, r3
 800151c:	781a      	ldrb	r2, [r3, #0]
 800151e:	4b1b      	ldr	r3, [pc, #108]	; (800158c <weoDrawRectangleFilled+0x1bc>)
 8001520:	629a      	str	r2, [r3, #40]	; 0x28
			for (i = 0; i < ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New/2 - start_y_New /2 + 1));i++) {
 8001522:	187b      	adds	r3, r7, r1
 8001524:	881a      	ldrh	r2, [r3, #0]
 8001526:	187b      	adds	r3, r7, r1
 8001528:	3201      	adds	r2, #1
 800152a:	801a      	strh	r2, [r3, #0]
 800152c:	230e      	movs	r3, #14
 800152e:	18fb      	adds	r3, r7, r3
 8001530:	881a      	ldrh	r2, [r3, #0]
 8001532:	230b      	movs	r3, #11
 8001534:	18fb      	adds	r3, r7, r3
 8001536:	7819      	ldrb	r1, [r3, #0]
 8001538:	230d      	movs	r3, #13
 800153a:	18fb      	adds	r3, r7, r3
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	1acb      	subs	r3, r1, r3
 8001540:	3301      	adds	r3, #1
 8001542:	210a      	movs	r1, #10
 8001544:	1879      	adds	r1, r7, r1
 8001546:	7809      	ldrb	r1, [r1, #0]
 8001548:	0849      	lsrs	r1, r1, #1
 800154a:	b2c9      	uxtb	r1, r1
 800154c:	0008      	movs	r0, r1
 800154e:	210c      	movs	r1, #12
 8001550:	1879      	adds	r1, r7, r1
 8001552:	7809      	ldrb	r1, [r1, #0]
 8001554:	0849      	lsrs	r1, r1, #1
 8001556:	b2c9      	uxtb	r1, r1
 8001558:	1a41      	subs	r1, r0, r1
 800155a:	3101      	adds	r1, #1
 800155c:	434b      	muls	r3, r1
 800155e:	429a      	cmp	r2, r3
 8001560:	dbd1      	blt.n	8001506 <weoDrawRectangleFilled+0x136>
			}
			GPIOA->ODR &= ~(1 << 7);	//reset dc
 8001562:	23a0      	movs	r3, #160	; 0xa0
 8001564:	05db      	lsls	r3, r3, #23
 8001566:	695a      	ldr	r2, [r3, #20]
 8001568:	23a0      	movs	r3, #160	; 0xa0
 800156a:	05db      	lsls	r3, r3, #23
 800156c:	2180      	movs	r1, #128	; 0x80
 800156e:	438a      	bics	r2, r1
 8001570:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 8001572:	23a0      	movs	r3, #160	; 0xa0
 8001574:	05db      	lsls	r3, r3, #23
 8001576:	695a      	ldr	r2, [r3, #20]
 8001578:	23a0      	movs	r3, #160	; 0xa0
 800157a:	05db      	lsls	r3, r3, #23
 800157c:	2140      	movs	r1, #64	; 0x40
 800157e:	430a      	orrs	r2, r1
 8001580:	615a      	str	r2, [r3, #20]
 8001582:	e000      	b.n	8001586 <weoDrawRectangleFilled+0x1b6>
				return;
 8001584:	46c0      	nop			; (mov r8, r8)
		}
 8001586:	46bd      	mov	sp, r7
 8001588:	b005      	add	sp, #20
 800158a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800158c:	40004800 	.word	0x40004800

08001590 <weoDrawRectangleInit>:
//========================================================================================================================
	void weoDrawRectangleInit(unsigned char start_x, unsigned char start_y,
				unsigned char end_x, unsigned char end_y) {
 8001590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	0005      	movs	r5, r0
 8001598:	000c      	movs	r4, r1
 800159a:	0010      	movs	r0, r2
 800159c:	0019      	movs	r1, r3
 800159e:	1dfb      	adds	r3, r7, #7
 80015a0:	1c2a      	adds	r2, r5, #0
 80015a2:	701a      	strb	r2, [r3, #0]
 80015a4:	1dbb      	adds	r3, r7, #6
 80015a6:	1c22      	adds	r2, r4, #0
 80015a8:	701a      	strb	r2, [r3, #0]
 80015aa:	1d7b      	adds	r3, r7, #5
 80015ac:	1c02      	adds	r2, r0, #0
 80015ae:	701a      	strb	r2, [r3, #0]
 80015b0:	1d3b      	adds	r3, r7, #4
 80015b2:	1c0a      	adds	r2, r1, #0
 80015b4:	701a      	strb	r2, [r3, #0]
			uint16_t i = 0;
 80015b6:	230e      	movs	r3, #14
 80015b8:	18fb      	adds	r3, r7, r3
 80015ba:	2200      	movs	r2, #0
 80015bc:	801a      	strh	r2, [r3, #0]
			uint8_t start_x_New,start_y_New,end_x_New,end_y_New;
			if (start_x > OLED_DIM_WIDTH || start_y > OLED_DIM_HEIGHT
 80015be:	1dfb      	adds	r3, r7, #7
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	b25b      	sxtb	r3, r3
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	db66      	blt.n	8001696 <weoDrawRectangleInit+0x106>
 80015c8:	1dbb      	adds	r3, r7, #6
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	b25b      	sxtb	r3, r3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	db61      	blt.n	8001696 <weoDrawRectangleInit+0x106>
					|| end_x > OLED_DIM_WIDTH || end_y > OLED_DIM_HEIGHT) {
 80015d2:	1d7b      	adds	r3, r7, #5
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	b25b      	sxtb	r3, r3
 80015d8:	2b00      	cmp	r3, #0
 80015da:	db5c      	blt.n	8001696 <weoDrawRectangleInit+0x106>
 80015dc:	1d3b      	adds	r3, r7, #4
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	b25b      	sxtb	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	db57      	blt.n	8001696 <weoDrawRectangleInit+0x106>
				return;
			}
			start_x_New=start_x;
 80015e6:	240d      	movs	r4, #13
 80015e8:	193b      	adds	r3, r7, r4
 80015ea:	1dfa      	adds	r2, r7, #7
 80015ec:	7812      	ldrb	r2, [r2, #0]
 80015ee:	701a      	strb	r2, [r3, #0]
			start_y_New=0x7F-end_y;
 80015f0:	250c      	movs	r5, #12
 80015f2:	197b      	adds	r3, r7, r5
 80015f4:	1d3a      	adds	r2, r7, #4
 80015f6:	7812      	ldrb	r2, [r2, #0]
 80015f8:	217f      	movs	r1, #127	; 0x7f
 80015fa:	1a8a      	subs	r2, r1, r2
 80015fc:	701a      	strb	r2, [r3, #0]
			end_x_New=end_x;
 80015fe:	260b      	movs	r6, #11
 8001600:	19bb      	adds	r3, r7, r6
 8001602:	1d7a      	adds	r2, r7, #5
 8001604:	7812      	ldrb	r2, [r2, #0]
 8001606:	701a      	strb	r2, [r3, #0]
			end_y_New=0x7F-start_y;
 8001608:	230a      	movs	r3, #10
 800160a:	18fb      	adds	r3, r7, r3
 800160c:	1dba      	adds	r2, r7, #6
 800160e:	7812      	ldrb	r2, [r2, #0]
 8001610:	217f      	movs	r1, #127	; 0x7f
 8001612:	1a8a      	subs	r2, r1, r2
 8001614:	701a      	strb	r2, [r3, #0]

			GPIOA->ODR &= ~(1 << 6);	//reset cs
 8001616:	23a0      	movs	r3, #160	; 0xa0
 8001618:	05db      	lsls	r3, r3, #23
 800161a:	695a      	ldr	r2, [r3, #20]
 800161c:	23a0      	movs	r3, #160	; 0xa0
 800161e:	05db      	lsls	r3, r3, #23
 8001620:	2140      	movs	r1, #64	; 0x40
 8001622:	438a      	bics	r2, r1
 8001624:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 8001626:	23a0      	movs	r3, #160	; 0xa0
 8001628:	05db      	lsls	r3, r3, #23
 800162a:	695a      	ldr	r2, [r3, #20]
 800162c:	23a0      	movs	r3, #160	; 0xa0
 800162e:	05db      	lsls	r3, r3, #23
 8001630:	2180      	movs	r1, #128	; 0x80
 8001632:	438a      	bics	r2, r1
 8001634:	615a      	str	r2, [r3, #20]
					USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 8001636:	2075      	movs	r0, #117	; 0x75
 8001638:	f7ff fde8 	bl	800120c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_x_New/1);
 800163c:	193b      	adds	r3, r7, r4
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	0018      	movs	r0, r3
 8001642:	f7ff fde3 	bl	800120c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_x_New/1);
 8001646:	19bb      	adds	r3, r7, r6
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	0018      	movs	r0, r3
 800164c:	f7ff fdde 	bl	800120c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 8001650:	2015      	movs	r0, #21
 8001652:	f7ff fddb 	bl	800120c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_y_New/2);
 8001656:	197b      	adds	r3, r7, r5
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	085b      	lsrs	r3, r3, #1
 800165c:	b2db      	uxtb	r3, r3
 800165e:	0018      	movs	r0, r3
 8001660:	f7ff fdd4 	bl	800120c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_y_New/2);
 8001664:	230a      	movs	r3, #10
 8001666:	18fb      	adds	r3, r7, r3
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	085b      	lsrs	r3, r3, #1
 800166c:	b2db      	uxtb	r3, r3
 800166e:	0018      	movs	r0, r3
 8001670:	f7ff fdcc 	bl	800120c <USART_AS_SPI_sendCMD>
			GPIOA->ODR |= 1 << 7;	//set dc
 8001674:	23a0      	movs	r3, #160	; 0xa0
 8001676:	05db      	lsls	r3, r3, #23
 8001678:	695a      	ldr	r2, [r3, #20]
 800167a:	23a0      	movs	r3, #160	; 0xa0
 800167c:	05db      	lsls	r3, r3, #23
 800167e:	2180      	movs	r1, #128	; 0x80
 8001680:	430a      	orrs	r2, r1
 8001682:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 8001684:	23a0      	movs	r3, #160	; 0xa0
 8001686:	05db      	lsls	r3, r3, #23
 8001688:	695a      	ldr	r2, [r3, #20]
 800168a:	23a0      	movs	r3, #160	; 0xa0
 800168c:	05db      	lsls	r3, r3, #23
 800168e:	2140      	movs	r1, #64	; 0x40
 8001690:	430a      	orrs	r2, r1
 8001692:	615a      	str	r2, [r3, #20]
 8001694:	e000      	b.n	8001698 <weoDrawRectangleInit+0x108>
				return;
 8001696:	46c0      	nop			; (mov r8, r8)
		}
 8001698:	46bd      	mov	sp, r7
 800169a:	b005      	add	sp, #20
 800169c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080016a0 <answer2CPU>:
		WriteReg_I2C_SOUND(0x3F, 0x90);	//DAC powered up, Soft step 1 per Fs. (P0, R63, D7=1, D5-D4=01, D3-D2=00, D1-D0=00)
		WriteReg_I2C_SOUND(0x41, 0x00);	//DAC digital gain 0dB (P0, R65, D7-D0=00000000)
		WriteReg_I2C_SOUND(0x40, 0x04);	//DAC volume not muted. (P0, R64, D3=0, D2=1)
	}
//=============================================================================================
	uint8_t answer2CPU(uint8_t cmd[]) {
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
		uint8_t keyboard = 0xFF;
 80016a8:	230f      	movs	r3, #15
 80016aa:	18fb      	adds	r3, r7, r3
 80016ac:	22ff      	movs	r2, #255	; 0xff
 80016ae:	701a      	strb	r2, [r3, #0]
//		uint16_t ans[10];
		uint8_t i;
		uint8_t myCS = 0;					//   COMMON PART FOR EVERY COMMAND
 80016b0:	230d      	movs	r3, #13
 80016b2:	18fb      	adds	r3, r7, r3
 80016b4:	2200      	movs	r2, #0
 80016b6:	701a      	strb	r2, [r3, #0]
		uint8_t myLength;
		uint16_t ind = 0;
 80016b8:	230a      	movs	r3, #10
 80016ba:	18fb      	adds	r3, r7, r3
 80016bc:	2200      	movs	r2, #0
 80016be:	801a      	strh	r2, [r3, #0]

		cmd2Execute=0;
 80016c0:	4bd1      	ldr	r3, [pc, #836]	; (8001a08 <answer2CPU+0x368>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	701a      	strb	r2, [r3, #0]
		if ((cmd[0] == 0x11)||(cmd[0] == 0x12)||(cmd[0] == 0x14)) {GPIOC->ODR &= ~(1 << 6);}//reset BF
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b11      	cmp	r3, #17
 80016cc:	d007      	beq.n	80016de <answer2CPU+0x3e>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b12      	cmp	r3, #18
 80016d4:	d003      	beq.n	80016de <answer2CPU+0x3e>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	2b14      	cmp	r3, #20
 80016dc:	d105      	bne.n	80016ea <answer2CPU+0x4a>
 80016de:	4bcb      	ldr	r3, [pc, #812]	; (8001a0c <answer2CPU+0x36c>)
 80016e0:	695a      	ldr	r2, [r3, #20]
 80016e2:	4bca      	ldr	r3, [pc, #808]	; (8001a0c <answer2CPU+0x36c>)
 80016e4:	2140      	movs	r1, #64	; 0x40
 80016e6:	438a      	bics	r2, r1
 80016e8:	615a      	str	r2, [r3, #20]
		ans[0] = cmd[0]|0x80;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2280      	movs	r2, #128	; 0x80
 80016f0:	4252      	negs	r2, r2
 80016f2:	4313      	orrs	r3, r2
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	4bc5      	ldr	r3, [pc, #788]	; (8001a10 <answer2CPU+0x370>)
 80016fa:	801a      	strh	r2, [r3, #0]
//==================================================================================================
			if ((cmd[0] >= 0x10)&&(cmd[0] < 0x16)) { //answer is keyboard + stuff information                  0003
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b0f      	cmp	r3, #15
 8001702:	d800      	bhi.n	8001706 <answer2CPU+0x66>
 8001704:	e150      	b.n	80019a8 <answer2CPU+0x308>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b15      	cmp	r3, #21
 800170c:	d900      	bls.n	8001710 <answer2CPU+0x70>
 800170e:	e14b      	b.n	80019a8 <answer2CPU+0x308>
				if ((GPIOA->IDR & (1 << 0)) == 0) {
 8001710:	23a0      	movs	r3, #160	; 0xa0
 8001712:	05db      	lsls	r3, r3, #23
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	2201      	movs	r2, #1
 8001718:	4013      	ands	r3, r2
 800171a:	d106      	bne.n	800172a <answer2CPU+0x8a>
					keyboard &= 0b11111110;
 800171c:	220f      	movs	r2, #15
 800171e:	18bb      	adds	r3, r7, r2
 8001720:	18ba      	adds	r2, r7, r2
 8001722:	7812      	ldrb	r2, [r2, #0]
 8001724:	2101      	movs	r1, #1
 8001726:	438a      	bics	r2, r1
 8001728:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 1)) == 0) {
 800172a:	23a0      	movs	r3, #160	; 0xa0
 800172c:	05db      	lsls	r3, r3, #23
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	2202      	movs	r2, #2
 8001732:	4013      	ands	r3, r2
 8001734:	d106      	bne.n	8001744 <answer2CPU+0xa4>
					keyboard &= 0b11111101;
 8001736:	220f      	movs	r2, #15
 8001738:	18bb      	adds	r3, r7, r2
 800173a:	18ba      	adds	r2, r7, r2
 800173c:	7812      	ldrb	r2, [r2, #0]
 800173e:	2102      	movs	r1, #2
 8001740:	438a      	bics	r2, r1
 8001742:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 4)) == 0) {
 8001744:	23a0      	movs	r3, #160	; 0xa0
 8001746:	05db      	lsls	r3, r3, #23
 8001748:	691b      	ldr	r3, [r3, #16]
 800174a:	2210      	movs	r2, #16
 800174c:	4013      	ands	r3, r2
 800174e:	d106      	bne.n	800175e <answer2CPU+0xbe>
					keyboard &= 0b11111011;
 8001750:	220f      	movs	r2, #15
 8001752:	18bb      	adds	r3, r7, r2
 8001754:	18ba      	adds	r2, r7, r2
 8001756:	7812      	ldrb	r2, [r2, #0]
 8001758:	2104      	movs	r1, #4
 800175a:	438a      	bics	r2, r1
 800175c:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 13)) == 0) {
 800175e:	23a0      	movs	r3, #160	; 0xa0
 8001760:	05db      	lsls	r3, r3, #23
 8001762:	691a      	ldr	r2, [r3, #16]
 8001764:	2380      	movs	r3, #128	; 0x80
 8001766:	019b      	lsls	r3, r3, #6
 8001768:	4013      	ands	r3, r2
 800176a:	d106      	bne.n	800177a <answer2CPU+0xda>
					keyboard &= 0b11110111;
 800176c:	220f      	movs	r2, #15
 800176e:	18bb      	adds	r3, r7, r2
 8001770:	18ba      	adds	r2, r7, r2
 8001772:	7812      	ldrb	r2, [r2, #0]
 8001774:	2108      	movs	r1, #8
 8001776:	438a      	bics	r2, r1
 8001778:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 14)) == 0) {
 800177a:	23a0      	movs	r3, #160	; 0xa0
 800177c:	05db      	lsls	r3, r3, #23
 800177e:	691a      	ldr	r2, [r3, #16]
 8001780:	2380      	movs	r3, #128	; 0x80
 8001782:	01db      	lsls	r3, r3, #7
 8001784:	4013      	ands	r3, r2
 8001786:	d106      	bne.n	8001796 <answer2CPU+0xf6>
					keyboard &= 0b11101111;
 8001788:	220f      	movs	r2, #15
 800178a:	18bb      	adds	r3, r7, r2
 800178c:	18ba      	adds	r2, r7, r2
 800178e:	7812      	ldrb	r2, [r2, #0]
 8001790:	2110      	movs	r1, #16
 8001792:	438a      	bics	r2, r1
 8001794:	701a      	strb	r2, [r3, #0]
				}

				keyboard = ~keyboard;
 8001796:	210f      	movs	r1, #15
 8001798:	187b      	adds	r3, r7, r1
 800179a:	187a      	adds	r2, r7, r1
 800179c:	7812      	ldrb	r2, [r2, #0]
 800179e:	43d2      	mvns	r2, r2
 80017a0:	701a      	strb	r2, [r3, #0]
//				keyboard&=bf;
				myLength = 0x04;
 80017a2:	2009      	movs	r0, #9
 80017a4:	183b      	adds	r3, r7, r0
 80017a6:	2204      	movs	r2, #4
 80017a8:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 80017aa:	183b      	adds	r3, r7, r0
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	3b02      	subs	r3, #2
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	4b96      	ldr	r3, [pc, #600]	; (8001a10 <answer2CPU+0x370>)
 80017b6:	805a      	strh	r2, [r3, #2]
				ans[2] = keyboard;				//			MANAGEMENT COMMANDS
 80017b8:	187b      	adds	r3, r7, r1
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	b29a      	uxth	r2, r3
 80017be:	4b94      	ldr	r3, [pc, #592]	; (8001a10 <answer2CPU+0x370>)
 80017c0:	809a      	strh	r2, [r3, #4]

				for (i = 0; i < myLength-1; i++) {
 80017c2:	230e      	movs	r3, #14
 80017c4:	18fb      	adds	r3, r7, r3
 80017c6:	2200      	movs	r2, #0
 80017c8:	701a      	strb	r2, [r3, #0]
 80017ca:	e011      	b.n	80017f0 <answer2CPU+0x150>
					myCS = myCS + ans[i];
 80017cc:	200e      	movs	r0, #14
 80017ce:	183b      	adds	r3, r7, r0
 80017d0:	781a      	ldrb	r2, [r3, #0]
 80017d2:	4b8f      	ldr	r3, [pc, #572]	; (8001a10 <answer2CPU+0x370>)
 80017d4:	0052      	lsls	r2, r2, #1
 80017d6:	5ad3      	ldrh	r3, [r2, r3]
 80017d8:	b2d9      	uxtb	r1, r3
 80017da:	220d      	movs	r2, #13
 80017dc:	18bb      	adds	r3, r7, r2
 80017de:	18ba      	adds	r2, r7, r2
 80017e0:	7812      	ldrb	r2, [r2, #0]
 80017e2:	188a      	adds	r2, r1, r2
 80017e4:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 80017e6:	183b      	adds	r3, r7, r0
 80017e8:	781a      	ldrb	r2, [r3, #0]
 80017ea:	183b      	adds	r3, r7, r0
 80017ec:	3201      	adds	r2, #1
 80017ee:	701a      	strb	r2, [r3, #0]
 80017f0:	200e      	movs	r0, #14
 80017f2:	183b      	adds	r3, r7, r0
 80017f4:	781a      	ldrb	r2, [r3, #0]
 80017f6:	2309      	movs	r3, #9
 80017f8:	18fb      	adds	r3, r7, r3
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	3b01      	subs	r3, #1
 80017fe:	429a      	cmp	r2, r3
 8001800:	dbe4      	blt.n	80017cc <answer2CPU+0x12c>
				}
				myCS = 0 - myCS;
 8001802:	210d      	movs	r1, #13
 8001804:	187b      	adds	r3, r7, r1
 8001806:	187a      	adds	r2, r7, r1
 8001808:	7812      	ldrb	r2, [r2, #0]
 800180a:	4252      	negs	r2, r2
 800180c:	701a      	strb	r2, [r3, #0]
				ans[3] = myCS;
 800180e:	187b      	adds	r3, r7, r1
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	b29a      	uxth	r2, r3
 8001814:	4b7e      	ldr	r3, [pc, #504]	; (8001a10 <answer2CPU+0x370>)
 8001816:	80da      	strh	r2, [r3, #6]
				i=0;
 8001818:	183b      	adds	r3, r7, r0
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]
//======================================================================================================================================
				while(!(USART2->ISR & USART_ISR_TXE)){};
 800181e:	46c0      	nop			; (mov r8, r8)
 8001820:	4b7c      	ldr	r3, [pc, #496]	; (8001a14 <answer2CPU+0x374>)
 8001822:	69db      	ldr	r3, [r3, #28]
 8001824:	2280      	movs	r2, #128	; 0x80
 8001826:	4013      	ands	r3, r2
 8001828:	d0fa      	beq.n	8001820 <answer2CPU+0x180>
				USART2->TDR = ans[0]|0x0100;
 800182a:	4b79      	ldr	r3, [pc, #484]	; (8001a10 <answer2CPU+0x370>)
 800182c:	881b      	ldrh	r3, [r3, #0]
 800182e:	2280      	movs	r2, #128	; 0x80
 8001830:	0052      	lsls	r2, r2, #1
 8001832:	4313      	orrs	r3, r2
 8001834:	b29a      	uxth	r2, r3
 8001836:	4b77      	ldr	r3, [pc, #476]	; (8001a14 <answer2CPU+0x374>)
 8001838:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 800183a:	230e      	movs	r3, #14
 800183c:	18fb      	adds	r3, r7, r3
 800183e:	2201      	movs	r2, #1
 8001840:	701a      	strb	r2, [r3, #0]
 8001842:	e013      	b.n	800186c <answer2CPU+0x1cc>
				  {												//answer2cpu was given
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001844:	46c0      	nop			; (mov r8, r8)
 8001846:	4b73      	ldr	r3, [pc, #460]	; (8001a14 <answer2CPU+0x374>)
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	2280      	movs	r2, #128	; 0x80
 800184c:	4013      	ands	r3, r2
 800184e:	d0fa      	beq.n	8001846 <answer2CPU+0x1a6>
				    USART2->TDR = (uint8_t)ans[i];
 8001850:	210e      	movs	r1, #14
 8001852:	187b      	adds	r3, r7, r1
 8001854:	781a      	ldrb	r2, [r3, #0]
 8001856:	4b6e      	ldr	r3, [pc, #440]	; (8001a10 <answer2CPU+0x370>)
 8001858:	0052      	lsls	r2, r2, #1
 800185a:	5ad3      	ldrh	r3, [r2, r3]
 800185c:	b2da      	uxtb	r2, r3
 800185e:	4b6d      	ldr	r3, [pc, #436]	; (8001a14 <answer2CPU+0x374>)
 8001860:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 8001862:	187b      	adds	r3, r7, r1
 8001864:	781a      	ldrb	r2, [r3, #0]
 8001866:	187b      	adds	r3, r7, r1
 8001868:	3201      	adds	r2, #1
 800186a:	701a      	strb	r2, [r3, #0]
 800186c:	230e      	movs	r3, #14
 800186e:	18fa      	adds	r2, r7, r3
 8001870:	2309      	movs	r3, #9
 8001872:	18fb      	adds	r3, r7, r3
 8001874:	7812      	ldrb	r2, [r2, #0]
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	429a      	cmp	r2, r3
 800187a:	d3e3      	bcc.n	8001844 <answer2CPU+0x1a4>
				  }
//=======================================================================================================================================
				if (cmd[0] == 0x11) {//Show full screen background;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b11      	cmp	r3, #17
 8001882:	d109      	bne.n	8001898 <answer2CPU+0x1f8>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					picNum = cmd[2];
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	789a      	ldrb	r2, [r3, #2]
 8001888:	4b63      	ldr	r3, [pc, #396]	; (8001a18 <answer2CPU+0x378>)
 800188a:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x11;
 800188c:	4b5e      	ldr	r3, [pc, #376]	; (8001a08 <answer2CPU+0x368>)
 800188e:	2211      	movs	r2, #17
 8001890:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001892:	4b62      	ldr	r3, [pc, #392]	; (8001a1c <answer2CPU+0x37c>)
 8001894:	2200      	movs	r2, #0
 8001896:	701a      	strb	r2, [r3, #0]
				}
//=======================================================================================================================================
				if (cmd[0] == 0x12) {				//show small image
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b12      	cmp	r3, #18
 800189e:	d115      	bne.n	80018cc <answer2CPU+0x22c>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3302      	adds	r3, #2
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	001a      	movs	r2, r3
 80018a8:	4b5d      	ldr	r3, [pc, #372]	; (8001a20 <answer2CPU+0x380>)
 80018aa:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3303      	adds	r3, #3
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	001a      	movs	r2, r3
 80018b4:	4b5b      	ldr	r3, [pc, #364]	; (8001a24 <answer2CPU+0x384>)
 80018b6:	601a      	str	r2, [r3, #0]
					picNum=cmd[4];
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	791a      	ldrb	r2, [r3, #4]
 80018bc:	4b56      	ldr	r3, [pc, #344]	; (8001a18 <answer2CPU+0x378>)
 80018be:	701a      	strb	r2, [r3, #0]
//					weoShowSmallImage(dataASCII[i], ASCII_X, ASCII_Y);
					cmd2Execute=0x12;
 80018c0:	4b51      	ldr	r3, [pc, #324]	; (8001a08 <answer2CPU+0x368>)
 80018c2:	2212      	movs	r2, #18
 80018c4:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 80018c6:	4b55      	ldr	r3, [pc, #340]	; (8001a1c <answer2CPU+0x37c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x13) {			//show ASCII code(s)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b13      	cmp	r3, #19
 80018d2:	d134      	bne.n	800193e <answer2CPU+0x29e>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3302      	adds	r3, #2
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	001a      	movs	r2, r3
 80018dc:	4b50      	ldr	r3, [pc, #320]	; (8001a20 <answer2CPU+0x380>)
 80018de:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3303      	adds	r3, #3
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	001a      	movs	r2, r3
 80018e8:	4b4e      	ldr	r3, [pc, #312]	; (8001a24 <answer2CPU+0x384>)
 80018ea:	601a      	str	r2, [r3, #0]
					strLen = cmd[1] -0x03;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3301      	adds	r3, #1
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	3b03      	subs	r3, #3
 80018f4:	b2da      	uxtb	r2, r3
 80018f6:	4b4c      	ldr	r3, [pc, #304]	; (8001a28 <answer2CPU+0x388>)
 80018f8:	701a      	strb	r2, [r3, #0]
					for (i = 0; i <strLen; i++) {
 80018fa:	230e      	movs	r3, #14
 80018fc:	18fb      	adds	r3, r7, r3
 80018fe:	2200      	movs	r2, #0
 8001900:	701a      	strb	r2, [r3, #0]
 8001902:	e00f      	b.n	8001924 <answer2CPU+0x284>
					dataASCII[i] = cmd[i+4];
 8001904:	200e      	movs	r0, #14
 8001906:	183b      	adds	r3, r7, r0
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	3304      	adds	r3, #4
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	18d2      	adds	r2, r2, r3
 8001910:	183b      	adds	r3, r7, r0
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	7811      	ldrb	r1, [r2, #0]
 8001916:	4a45      	ldr	r2, [pc, #276]	; (8001a2c <answer2CPU+0x38c>)
 8001918:	54d1      	strb	r1, [r2, r3]
					for (i = 0; i <strLen; i++) {
 800191a:	183b      	adds	r3, r7, r0
 800191c:	781a      	ldrb	r2, [r3, #0]
 800191e:	183b      	adds	r3, r7, r0
 8001920:	3201      	adds	r2, #1
 8001922:	701a      	strb	r2, [r3, #0]
 8001924:	4b40      	ldr	r3, [pc, #256]	; (8001a28 <answer2CPU+0x388>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	220e      	movs	r2, #14
 800192a:	18ba      	adds	r2, r7, r2
 800192c:	7812      	ldrb	r2, [r2, #0]
 800192e:	429a      	cmp	r2, r3
 8001930:	d3e8      	bcc.n	8001904 <answer2CPU+0x264>
				}
					cmd2Execute=0x13;
 8001932:	4b35      	ldr	r3, [pc, #212]	; (8001a08 <answer2CPU+0x368>)
 8001934:	2213      	movs	r2, #19
 8001936:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001938:	4b38      	ldr	r3, [pc, #224]	; (8001a1c <answer2CPU+0x37c>)
 800193a:	2200      	movs	r2, #0
 800193c:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x14) {			//издать звук
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b14      	cmp	r3, #20
 8001944:	d10c      	bne.n	8001960 <answer2CPU+0x2c0>
					numSound = cmd[3];
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	78da      	ldrb	r2, [r3, #3]
 800194a:	4b39      	ldr	r3, [pc, #228]	; (8001a30 <answer2CPU+0x390>)
 800194c:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x14;
 800194e:	4b2e      	ldr	r3, [pc, #184]	; (8001a08 <answer2CPU+0x368>)
 8001950:	2214      	movs	r2, #20
 8001952:	701a      	strb	r2, [r3, #0]
					cmd[0]=0xFF;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	22ff      	movs	r2, #255	; 0xff
 8001958:	701a      	strb	r2, [r3, #0]
					bf4me=0x00; //reset BF flag for me
 800195a:	4b30      	ldr	r3, [pc, #192]	; (8001a1c <answer2CPU+0x37c>)
 800195c:	2200      	movs	r2, #0
 800195e:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x15) {
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b15      	cmp	r3, #21
 8001966:	d10d      	bne.n	8001984 <answer2CPU+0x2e4>
					volume = cmd[2];
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	789a      	ldrb	r2, [r3, #2]
 800196c:	4b31      	ldr	r3, [pc, #196]	; (8001a34 <answer2CPU+0x394>)
 800196e:	701a      	strb	r2, [r3, #0]
					contrast = cmd[3];
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	78da      	ldrb	r2, [r3, #3]
 8001974:	4b30      	ldr	r3, [pc, #192]	; (8001a38 <answer2CPU+0x398>)
 8001976:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x15;
 8001978:	4b23      	ldr	r3, [pc, #140]	; (8001a08 <answer2CPU+0x368>)
 800197a:	2215      	movs	r2, #21
 800197c:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 800197e:	4b27      	ldr	r3, [pc, #156]	; (8001a1c <answer2CPU+0x37c>)
 8001980:	2200      	movs	r2, #0
 8001982:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x16) {
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b16      	cmp	r3, #22
 800198a:	d10d      	bne.n	80019a8 <answer2CPU+0x308>
					volume = cmd[3];
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	78da      	ldrb	r2, [r3, #3]
 8001990:	4b28      	ldr	r3, [pc, #160]	; (8001a34 <answer2CPU+0x394>)
 8001992:	701a      	strb	r2, [r3, #0]
					contrast = cmd[4];
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	791a      	ldrb	r2, [r3, #4]
 8001998:	4b27      	ldr	r3, [pc, #156]	; (8001a38 <answer2CPU+0x398>)
 800199a:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x16;
 800199c:	4b1a      	ldr	r3, [pc, #104]	; (8001a08 <answer2CPU+0x368>)
 800199e:	2216      	movs	r2, #22
 80019a0:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 80019a2:	4b1e      	ldr	r3, [pc, #120]	; (8001a1c <answer2CPU+0x37c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	701a      	strb	r2, [r3, #0]
				}
//				weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, Image);
//				USART2->ICR|=USART_ICR_ORECF;
			}
//==========================================================================================================================
			if (cmd[0] == 0x00) { //request of pcb type
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d000      	beq.n	80019b2 <answer2CPU+0x312>
 80019b0:	e09c      	b.n	8001aec <answer2CPU+0x44c>
				myLength = 0x14; //20 bytes length answer
 80019b2:	2109      	movs	r1, #9
 80019b4:	187b      	adds	r3, r7, r1
 80019b6:	2214      	movs	r2, #20
 80019b8:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 80019ba:	187b      	adds	r3, r7, r1
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	b29b      	uxth	r3, r3
 80019c0:	3b02      	subs	r3, #2
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <answer2CPU+0x370>)
 80019c6:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 80019c8:	230e      	movs	r3, #14
 80019ca:	18fb      	adds	r3, r7, r3
 80019cc:	2200      	movs	r2, #0
 80019ce:	701a      	strb	r2, [r3, #0]
 80019d0:	e010      	b.n	80019f4 <answer2CPU+0x354>
					ans[i + 2] = PCB_type[i];
 80019d2:	200e      	movs	r0, #14
 80019d4:	183b      	adds	r3, r7, r0
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	4a18      	ldr	r2, [pc, #96]	; (8001a3c <answer2CPU+0x39c>)
 80019da:	5cd1      	ldrb	r1, [r2, r3]
 80019dc:	183b      	adds	r3, r7, r0
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	1c9a      	adds	r2, r3, #2
 80019e2:	b289      	uxth	r1, r1
 80019e4:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <answer2CPU+0x370>)
 80019e6:	0052      	lsls	r2, r2, #1
 80019e8:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 80019ea:	183b      	adds	r3, r7, r0
 80019ec:	781a      	ldrb	r2, [r3, #0]
 80019ee:	183b      	adds	r3, r7, r0
 80019f0:	3201      	adds	r2, #1
 80019f2:	701a      	strb	r2, [r3, #0]
 80019f4:	220e      	movs	r2, #14
 80019f6:	18bb      	adds	r3, r7, r2
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b10      	cmp	r3, #16
 80019fc:	d9e9      	bls.n	80019d2 <answer2CPU+0x332>
				}
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 80019fe:	18bb      	adds	r3, r7, r2
 8001a00:	2200      	movs	r2, #0
 8001a02:	701a      	strb	r2, [r3, #0]
 8001a04:	e02e      	b.n	8001a64 <answer2CPU+0x3c4>
 8001a06:	46c0      	nop			; (mov r8, r8)
 8001a08:	2000545e 	.word	0x2000545e
 8001a0c:	50000800 	.word	0x50000800
 8001a10:	200054a0 	.word	0x200054a0
 8001a14:	40004400 	.word	0x40004400
 8001a18:	2000545d 	.word	0x2000545d
 8001a1c:	200054b4 	.word	0x200054b4
 8001a20:	200052f4 	.word	0x200052f4
 8001a24:	20005388 	.word	0x20005388
 8001a28:	2000549d 	.word	0x2000549d
 8001a2c:	200051a4 	.word	0x200051a4
 8001a30:	2000551d 	.word	0x2000551d
 8001a34:	200052f1 	.word	0x200052f1
 8001a38:	200053f4 	.word	0x200053f4
 8001a3c:	20003100 	.word	0x20003100
					myCS = myCS + ans[i];
 8001a40:	200e      	movs	r0, #14
 8001a42:	183b      	adds	r3, r7, r0
 8001a44:	781a      	ldrb	r2, [r3, #0]
 8001a46:	4bdb      	ldr	r3, [pc, #876]	; (8001db4 <answer2CPU+0x714>)
 8001a48:	0052      	lsls	r2, r2, #1
 8001a4a:	5ad3      	ldrh	r3, [r2, r3]
 8001a4c:	b2d9      	uxtb	r1, r3
 8001a4e:	220d      	movs	r2, #13
 8001a50:	18bb      	adds	r3, r7, r2
 8001a52:	18ba      	adds	r2, r7, r2
 8001a54:	7812      	ldrb	r2, [r2, #0]
 8001a56:	188a      	adds	r2, r1, r2
 8001a58:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8001a5a:	183b      	adds	r3, r7, r0
 8001a5c:	781a      	ldrb	r2, [r3, #0]
 8001a5e:	183b      	adds	r3, r7, r0
 8001a60:	3201      	adds	r2, #1
 8001a62:	701a      	strb	r2, [r3, #0]
 8001a64:	230e      	movs	r3, #14
 8001a66:	18fb      	adds	r3, r7, r3
 8001a68:	781a      	ldrb	r2, [r3, #0]
 8001a6a:	2009      	movs	r0, #9
 8001a6c:	183b      	adds	r3, r7, r0
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	3b01      	subs	r3, #1
 8001a72:	429a      	cmp	r2, r3
 8001a74:	dbe4      	blt.n	8001a40 <answer2CPU+0x3a0>
				}
				myCS = 0 - myCS;
 8001a76:	210d      	movs	r1, #13
 8001a78:	187b      	adds	r3, r7, r1
 8001a7a:	187a      	adds	r2, r7, r1
 8001a7c:	7812      	ldrb	r2, [r2, #0]
 8001a7e:	4252      	negs	r2, r2
 8001a80:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001a82:	183b      	adds	r3, r7, r0
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	1e5a      	subs	r2, r3, #1
 8001a88:	187b      	adds	r3, r7, r1
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	b299      	uxth	r1, r3
 8001a8e:	4bc9      	ldr	r3, [pc, #804]	; (8001db4 <answer2CPU+0x714>)
 8001a90:	0052      	lsls	r2, r2, #1
 8001a92:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001a94:	46c0      	nop			; (mov r8, r8)
 8001a96:	4bc8      	ldr	r3, [pc, #800]	; (8001db8 <answer2CPU+0x718>)
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	2280      	movs	r2, #128	; 0x80
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d0fa      	beq.n	8001a96 <answer2CPU+0x3f6>
				USART2->TDR = ans[0]|0x0100;
 8001aa0:	4bc4      	ldr	r3, [pc, #784]	; (8001db4 <answer2CPU+0x714>)
 8001aa2:	881b      	ldrh	r3, [r3, #0]
 8001aa4:	2280      	movs	r2, #128	; 0x80
 8001aa6:	0052      	lsls	r2, r2, #1
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	4bc2      	ldr	r3, [pc, #776]	; (8001db8 <answer2CPU+0x718>)
 8001aae:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001ab0:	e014      	b.n	8001adc <answer2CPU+0x43c>
				  {
				    i++;
 8001ab2:	210e      	movs	r1, #14
 8001ab4:	187b      	adds	r3, r7, r1
 8001ab6:	781a      	ldrb	r2, [r3, #0]
 8001ab8:	187b      	adds	r3, r7, r1
 8001aba:	3201      	adds	r2, #1
 8001abc:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001abe:	46c0      	nop			; (mov r8, r8)
 8001ac0:	4bbd      	ldr	r3, [pc, #756]	; (8001db8 <answer2CPU+0x718>)
 8001ac2:	69db      	ldr	r3, [r3, #28]
 8001ac4:	2280      	movs	r2, #128	; 0x80
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	d0fa      	beq.n	8001ac0 <answer2CPU+0x420>
				    USART2->TDR = (uint8_t)ans[i];
 8001aca:	230e      	movs	r3, #14
 8001acc:	18fb      	adds	r3, r7, r3
 8001ace:	781a      	ldrb	r2, [r3, #0]
 8001ad0:	4bb8      	ldr	r3, [pc, #736]	; (8001db4 <answer2CPU+0x714>)
 8001ad2:	0052      	lsls	r2, r2, #1
 8001ad4:	5ad3      	ldrh	r3, [r2, r3]
 8001ad6:	b2da      	uxtb	r2, r3
 8001ad8:	4bb7      	ldr	r3, [pc, #732]	; (8001db8 <answer2CPU+0x718>)
 8001ada:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001adc:	230e      	movs	r3, #14
 8001ade:	18fb      	adds	r3, r7, r3
 8001ae0:	781a      	ldrb	r2, [r3, #0]
 8001ae2:	4bb4      	ldr	r3, [pc, #720]	; (8001db4 <answer2CPU+0x714>)
 8001ae4:	0052      	lsls	r2, r2, #1
 8001ae6:	5ad3      	ldrh	r3, [r2, r3]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1e2      	bne.n	8001ab2 <answer2CPU+0x412>
				  }
//				 cmd2Execute=0x00;
			}
//============================================================================================================================
			if (cmd[0] == 0x01) { //request of pcb revision
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d000      	beq.n	8001af6 <answer2CPU+0x456>
 8001af4:	e07f      	b.n	8001bf6 <answer2CPU+0x556>
				myLength = 0x0B; //19 bytes length answer
 8001af6:	2109      	movs	r1, #9
 8001af8:	187b      	adds	r3, r7, r1
 8001afa:	220b      	movs	r2, #11
 8001afc:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001afe:	187b      	adds	r3, r7, r1
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	3b02      	subs	r3, #2
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	4baa      	ldr	r3, [pc, #680]	; (8001db4 <answer2CPU+0x714>)
 8001b0a:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001b0c:	230e      	movs	r3, #14
 8001b0e:	18fb      	adds	r3, r7, r3
 8001b10:	2200      	movs	r2, #0
 8001b12:	701a      	strb	r2, [r3, #0]
 8001b14:	e010      	b.n	8001b38 <answer2CPU+0x498>
					ans[i + 2] = PCB_rev[i];
 8001b16:	200e      	movs	r0, #14
 8001b18:	183b      	adds	r3, r7, r0
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	4aa7      	ldr	r2, [pc, #668]	; (8001dbc <answer2CPU+0x71c>)
 8001b1e:	5cd1      	ldrb	r1, [r2, r3]
 8001b20:	183b      	adds	r3, r7, r0
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	1c9a      	adds	r2, r3, #2
 8001b26:	b289      	uxth	r1, r1
 8001b28:	4ba2      	ldr	r3, [pc, #648]	; (8001db4 <answer2CPU+0x714>)
 8001b2a:	0052      	lsls	r2, r2, #1
 8001b2c:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001b2e:	183b      	adds	r3, r7, r0
 8001b30:	781a      	ldrb	r2, [r3, #0]
 8001b32:	183b      	adds	r3, r7, r0
 8001b34:	3201      	adds	r2, #1
 8001b36:	701a      	strb	r2, [r3, #0]
 8001b38:	220e      	movs	r2, #14
 8001b3a:	18bb      	adds	r3, r7, r2
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b10      	cmp	r3, #16
 8001b40:	d9e9      	bls.n	8001b16 <answer2CPU+0x476>
				}
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001b42:	18bb      	adds	r3, r7, r2
 8001b44:	2200      	movs	r2, #0
 8001b46:	701a      	strb	r2, [r3, #0]
 8001b48:	e011      	b.n	8001b6e <answer2CPU+0x4ce>
					myCS = myCS + ans[i];
 8001b4a:	200e      	movs	r0, #14
 8001b4c:	183b      	adds	r3, r7, r0
 8001b4e:	781a      	ldrb	r2, [r3, #0]
 8001b50:	4b98      	ldr	r3, [pc, #608]	; (8001db4 <answer2CPU+0x714>)
 8001b52:	0052      	lsls	r2, r2, #1
 8001b54:	5ad3      	ldrh	r3, [r2, r3]
 8001b56:	b2d9      	uxtb	r1, r3
 8001b58:	220d      	movs	r2, #13
 8001b5a:	18bb      	adds	r3, r7, r2
 8001b5c:	18ba      	adds	r2, r7, r2
 8001b5e:	7812      	ldrb	r2, [r2, #0]
 8001b60:	188a      	adds	r2, r1, r2
 8001b62:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001b64:	183b      	adds	r3, r7, r0
 8001b66:	781a      	ldrb	r2, [r3, #0]
 8001b68:	183b      	adds	r3, r7, r0
 8001b6a:	3201      	adds	r2, #1
 8001b6c:	701a      	strb	r2, [r3, #0]
 8001b6e:	230e      	movs	r3, #14
 8001b70:	18fb      	adds	r3, r7, r3
 8001b72:	781a      	ldrb	r2, [r3, #0]
 8001b74:	2009      	movs	r0, #9
 8001b76:	183b      	adds	r3, r7, r0
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	dbe4      	blt.n	8001b4a <answer2CPU+0x4aa>
				}
				myCS = 0 - myCS;
 8001b80:	210d      	movs	r1, #13
 8001b82:	187b      	adds	r3, r7, r1
 8001b84:	187a      	adds	r2, r7, r1
 8001b86:	7812      	ldrb	r2, [r2, #0]
 8001b88:	4252      	negs	r2, r2
 8001b8a:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001b8c:	183b      	adds	r3, r7, r0
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	1e5a      	subs	r2, r3, #1
 8001b92:	187b      	adds	r3, r7, r1
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	b299      	uxth	r1, r3
 8001b98:	4b86      	ldr	r3, [pc, #536]	; (8001db4 <answer2CPU+0x714>)
 8001b9a:	0052      	lsls	r2, r2, #1
 8001b9c:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001b9e:	46c0      	nop			; (mov r8, r8)
 8001ba0:	4b85      	ldr	r3, [pc, #532]	; (8001db8 <answer2CPU+0x718>)
 8001ba2:	69db      	ldr	r3, [r3, #28]
 8001ba4:	2280      	movs	r2, #128	; 0x80
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	d0fa      	beq.n	8001ba0 <answer2CPU+0x500>
				USART2->TDR = ans[0]|0x0100;
 8001baa:	4b82      	ldr	r3, [pc, #520]	; (8001db4 <answer2CPU+0x714>)
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	2280      	movs	r2, #128	; 0x80
 8001bb0:	0052      	lsls	r2, r2, #1
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	4b80      	ldr	r3, [pc, #512]	; (8001db8 <answer2CPU+0x718>)
 8001bb8:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001bba:	e014      	b.n	8001be6 <answer2CPU+0x546>
					  {
					    i++;
 8001bbc:	210e      	movs	r1, #14
 8001bbe:	187b      	adds	r3, r7, r1
 8001bc0:	781a      	ldrb	r2, [r3, #0]
 8001bc2:	187b      	adds	r3, r7, r1
 8001bc4:	3201      	adds	r2, #1
 8001bc6:	701a      	strb	r2, [r3, #0]
					    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001bc8:	46c0      	nop			; (mov r8, r8)
 8001bca:	4b7b      	ldr	r3, [pc, #492]	; (8001db8 <answer2CPU+0x718>)
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	2280      	movs	r2, #128	; 0x80
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d0fa      	beq.n	8001bca <answer2CPU+0x52a>
					    USART2->TDR = (uint8_t)ans[i];
 8001bd4:	230e      	movs	r3, #14
 8001bd6:	18fb      	adds	r3, r7, r3
 8001bd8:	781a      	ldrb	r2, [r3, #0]
 8001bda:	4b76      	ldr	r3, [pc, #472]	; (8001db4 <answer2CPU+0x714>)
 8001bdc:	0052      	lsls	r2, r2, #1
 8001bde:	5ad3      	ldrh	r3, [r2, r3]
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	4b75      	ldr	r3, [pc, #468]	; (8001db8 <answer2CPU+0x718>)
 8001be4:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001be6:	230e      	movs	r3, #14
 8001be8:	18fb      	adds	r3, r7, r3
 8001bea:	781a      	ldrb	r2, [r3, #0]
 8001bec:	4b71      	ldr	r3, [pc, #452]	; (8001db4 <answer2CPU+0x714>)
 8001bee:	0052      	lsls	r2, r2, #1
 8001bf0:	5ad3      	ldrh	r3, [r2, r3]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1e2      	bne.n	8001bbc <answer2CPU+0x51c>
					  }
//				 cmd2Execute=0x01;
			}
//================================================================================================================================
			if (cmd[0] == 0x02) { //request of emitter SN
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d000      	beq.n	8001c00 <answer2CPU+0x560>
 8001bfe:	e07f      	b.n	8001d00 <answer2CPU+0x660>
				myLength = 0x13; //19 bytes length answer
 8001c00:	2109      	movs	r1, #9
 8001c02:	187b      	adds	r3, r7, r1
 8001c04:	2213      	movs	r2, #19
 8001c06:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001c08:	187b      	adds	r3, r7, r1
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	3b02      	subs	r3, #2
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	4b68      	ldr	r3, [pc, #416]	; (8001db4 <answer2CPU+0x714>)
 8001c14:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001c16:	230e      	movs	r3, #14
 8001c18:	18fb      	adds	r3, r7, r3
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	701a      	strb	r2, [r3, #0]
 8001c1e:	e010      	b.n	8001c42 <answer2CPU+0x5a2>
					ans[i + 2] = EmitterSN[i];
 8001c20:	200e      	movs	r0, #14
 8001c22:	183b      	adds	r3, r7, r0
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	4a66      	ldr	r2, [pc, #408]	; (8001dc0 <answer2CPU+0x720>)
 8001c28:	5cd1      	ldrb	r1, [r2, r3]
 8001c2a:	183b      	adds	r3, r7, r0
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	1c9a      	adds	r2, r3, #2
 8001c30:	b289      	uxth	r1, r1
 8001c32:	4b60      	ldr	r3, [pc, #384]	; (8001db4 <answer2CPU+0x714>)
 8001c34:	0052      	lsls	r2, r2, #1
 8001c36:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001c38:	183b      	adds	r3, r7, r0
 8001c3a:	781a      	ldrb	r2, [r3, #0]
 8001c3c:	183b      	adds	r3, r7, r0
 8001c3e:	3201      	adds	r2, #1
 8001c40:	701a      	strb	r2, [r3, #0]
 8001c42:	220e      	movs	r2, #14
 8001c44:	18bb      	adds	r3, r7, r2
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b10      	cmp	r3, #16
 8001c4a:	d9e9      	bls.n	8001c20 <answer2CPU+0x580>
				}
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001c4c:	18bb      	adds	r3, r7, r2
 8001c4e:	2200      	movs	r2, #0
 8001c50:	701a      	strb	r2, [r3, #0]
 8001c52:	e011      	b.n	8001c78 <answer2CPU+0x5d8>
					myCS = myCS + ans[i];
 8001c54:	200e      	movs	r0, #14
 8001c56:	183b      	adds	r3, r7, r0
 8001c58:	781a      	ldrb	r2, [r3, #0]
 8001c5a:	4b56      	ldr	r3, [pc, #344]	; (8001db4 <answer2CPU+0x714>)
 8001c5c:	0052      	lsls	r2, r2, #1
 8001c5e:	5ad3      	ldrh	r3, [r2, r3]
 8001c60:	b2d9      	uxtb	r1, r3
 8001c62:	220d      	movs	r2, #13
 8001c64:	18bb      	adds	r3, r7, r2
 8001c66:	18ba      	adds	r2, r7, r2
 8001c68:	7812      	ldrb	r2, [r2, #0]
 8001c6a:	188a      	adds	r2, r1, r2
 8001c6c:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001c6e:	183b      	adds	r3, r7, r0
 8001c70:	781a      	ldrb	r2, [r3, #0]
 8001c72:	183b      	adds	r3, r7, r0
 8001c74:	3201      	adds	r2, #1
 8001c76:	701a      	strb	r2, [r3, #0]
 8001c78:	230e      	movs	r3, #14
 8001c7a:	18fb      	adds	r3, r7, r3
 8001c7c:	781a      	ldrb	r2, [r3, #0]
 8001c7e:	2009      	movs	r0, #9
 8001c80:	183b      	adds	r3, r7, r0
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	3b01      	subs	r3, #1
 8001c86:	429a      	cmp	r2, r3
 8001c88:	dbe4      	blt.n	8001c54 <answer2CPU+0x5b4>
				}
				myCS = 0 - myCS;
 8001c8a:	210d      	movs	r1, #13
 8001c8c:	187b      	adds	r3, r7, r1
 8001c8e:	187a      	adds	r2, r7, r1
 8001c90:	7812      	ldrb	r2, [r2, #0]
 8001c92:	4252      	negs	r2, r2
 8001c94:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001c96:	183b      	adds	r3, r7, r0
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	1e5a      	subs	r2, r3, #1
 8001c9c:	187b      	adds	r3, r7, r1
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	b299      	uxth	r1, r3
 8001ca2:	4b44      	ldr	r3, [pc, #272]	; (8001db4 <answer2CPU+0x714>)
 8001ca4:	0052      	lsls	r2, r2, #1
 8001ca6:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001ca8:	46c0      	nop			; (mov r8, r8)
 8001caa:	4b43      	ldr	r3, [pc, #268]	; (8001db8 <answer2CPU+0x718>)
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	2280      	movs	r2, #128	; 0x80
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	d0fa      	beq.n	8001caa <answer2CPU+0x60a>
				USART2->TDR = ans[0]|0x0100;
 8001cb4:	4b3f      	ldr	r3, [pc, #252]	; (8001db4 <answer2CPU+0x714>)
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	2280      	movs	r2, #128	; 0x80
 8001cba:	0052      	lsls	r2, r2, #1
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	4b3d      	ldr	r3, [pc, #244]	; (8001db8 <answer2CPU+0x718>)
 8001cc2:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001cc4:	e014      	b.n	8001cf0 <answer2CPU+0x650>
				  {
				    i++;
 8001cc6:	210e      	movs	r1, #14
 8001cc8:	187b      	adds	r3, r7, r1
 8001cca:	781a      	ldrb	r2, [r3, #0]
 8001ccc:	187b      	adds	r3, r7, r1
 8001cce:	3201      	adds	r2, #1
 8001cd0:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	4b38      	ldr	r3, [pc, #224]	; (8001db8 <answer2CPU+0x718>)
 8001cd6:	69db      	ldr	r3, [r3, #28]
 8001cd8:	2280      	movs	r2, #128	; 0x80
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d0fa      	beq.n	8001cd4 <answer2CPU+0x634>
				    	USART2->TDR = (uint8_t)ans[i];
 8001cde:	230e      	movs	r3, #14
 8001ce0:	18fb      	adds	r3, r7, r3
 8001ce2:	781a      	ldrb	r2, [r3, #0]
 8001ce4:	4b33      	ldr	r3, [pc, #204]	; (8001db4 <answer2CPU+0x714>)
 8001ce6:	0052      	lsls	r2, r2, #1
 8001ce8:	5ad3      	ldrh	r3, [r2, r3]
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	4b32      	ldr	r3, [pc, #200]	; (8001db8 <answer2CPU+0x718>)
 8001cee:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001cf0:	230e      	movs	r3, #14
 8001cf2:	18fb      	adds	r3, r7, r3
 8001cf4:	781a      	ldrb	r2, [r3, #0]
 8001cf6:	4b2f      	ldr	r3, [pc, #188]	; (8001db4 <answer2CPU+0x714>)
 8001cf8:	0052      	lsls	r2, r2, #1
 8001cfa:	5ad3      	ldrh	r3, [r2, r3]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1e2      	bne.n	8001cc6 <answer2CPU+0x626>
				  }
//				cmd2Execute=0x02;
			}
//===============================================================================================================================
			if (cmd[0] == 0x03) { //request of current consumption
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b03      	cmp	r3, #3
 8001d06:	d000      	beq.n	8001d0a <answer2CPU+0x66a>
 8001d08:	e07b      	b.n	8001e02 <answer2CPU+0x762>
				myLength = 0x04; //4 bytes length answer
 8001d0a:	2109      	movs	r1, #9
 8001d0c:	187b      	adds	r3, r7, r1
 8001d0e:	2204      	movs	r2, #4
 8001d10:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001d12:	187b      	adds	r3, r7, r1
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	3b02      	subs	r3, #2
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	4b25      	ldr	r3, [pc, #148]	; (8001db4 <answer2CPU+0x714>)
 8001d1e:	805a      	strh	r2, [r3, #2]
				ans[2] = currentConsumption;
 8001d20:	4b28      	ldr	r3, [pc, #160]	; (8001dc4 <answer2CPU+0x724>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	4b23      	ldr	r3, [pc, #140]	; (8001db4 <answer2CPU+0x714>)
 8001d28:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8001d2a:	230d      	movs	r3, #13
 8001d2c:	18fb      	adds	r3, r7, r3
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	4b20      	ldr	r3, [pc, #128]	; (8001db4 <answer2CPU+0x714>)
 8001d34:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8001d36:	230e      	movs	r3, #14
 8001d38:	18fb      	adds	r3, r7, r3
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	701a      	strb	r2, [r3, #0]
 8001d3e:	e011      	b.n	8001d64 <answer2CPU+0x6c4>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8001d40:	200e      	movs	r0, #14
 8001d42:	183b      	adds	r3, r7, r0
 8001d44:	781a      	ldrb	r2, [r3, #0]
 8001d46:	4b1b      	ldr	r3, [pc, #108]	; (8001db4 <answer2CPU+0x714>)
 8001d48:	0052      	lsls	r2, r2, #1
 8001d4a:	5ad3      	ldrh	r3, [r2, r3]
 8001d4c:	b2d9      	uxtb	r1, r3
 8001d4e:	220d      	movs	r2, #13
 8001d50:	18bb      	adds	r3, r7, r2
 8001d52:	18ba      	adds	r2, r7, r2
 8001d54:	7812      	ldrb	r2, [r2, #0]
 8001d56:	188a      	adds	r2, r1, r2
 8001d58:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001d5a:	183b      	adds	r3, r7, r0
 8001d5c:	781a      	ldrb	r2, [r3, #0]
 8001d5e:	183b      	adds	r3, r7, r0
 8001d60:	3201      	adds	r2, #1
 8001d62:	701a      	strb	r2, [r3, #0]
 8001d64:	230e      	movs	r3, #14
 8001d66:	18fb      	adds	r3, r7, r3
 8001d68:	781a      	ldrb	r2, [r3, #0]
 8001d6a:	2009      	movs	r0, #9
 8001d6c:	183b      	adds	r3, r7, r0
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	3b01      	subs	r3, #1
 8001d72:	429a      	cmp	r2, r3
 8001d74:	dbe4      	blt.n	8001d40 <answer2CPU+0x6a0>
				}
				myCS = 0 - myCS;
 8001d76:	210d      	movs	r1, #13
 8001d78:	187b      	adds	r3, r7, r1
 8001d7a:	187a      	adds	r2, r7, r1
 8001d7c:	7812      	ldrb	r2, [r2, #0]
 8001d7e:	4252      	negs	r2, r2
 8001d80:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001d82:	183b      	adds	r3, r7, r0
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	1e5a      	subs	r2, r3, #1
 8001d88:	187b      	adds	r3, r7, r1
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	b299      	uxth	r1, r3
 8001d8e:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <answer2CPU+0x714>)
 8001d90:	0052      	lsls	r2, r2, #1
 8001d92:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001d94:	46c0      	nop			; (mov r8, r8)
 8001d96:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <answer2CPU+0x718>)
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	2280      	movs	r2, #128	; 0x80
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	d0fa      	beq.n	8001d96 <answer2CPU+0x6f6>
					USART2->TDR = ans[0]|0x0100;
 8001da0:	4b04      	ldr	r3, [pc, #16]	; (8001db4 <answer2CPU+0x714>)
 8001da2:	881b      	ldrh	r3, [r3, #0]
 8001da4:	2280      	movs	r2, #128	; 0x80
 8001da6:	0052      	lsls	r2, r2, #1
 8001da8:	4313      	orrs	r3, r2
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	4b02      	ldr	r3, [pc, #8]	; (8001db8 <answer2CPU+0x718>)
 8001dae:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8001db0:	e01f      	b.n	8001df2 <answer2CPU+0x752>
 8001db2:	46c0      	nop			; (mov r8, r8)
 8001db4:	200054a0 	.word	0x200054a0
 8001db8:	40004400 	.word	0x40004400
 8001dbc:	20003114 	.word	0x20003114
 8001dc0:	20003120 	.word	0x20003120
 8001dc4:	2000311c 	.word	0x2000311c
						{
						  i++;
 8001dc8:	210e      	movs	r1, #14
 8001dca:	187b      	adds	r3, r7, r1
 8001dcc:	781a      	ldrb	r2, [r3, #0]
 8001dce:	187b      	adds	r3, r7, r1
 8001dd0:	3201      	adds	r2, #1
 8001dd2:	701a      	strb	r2, [r3, #0]
						  while(!(USART2->ISR & USART_ISR_TXE)){};
 8001dd4:	46c0      	nop			; (mov r8, r8)
 8001dd6:	4b4e      	ldr	r3, [pc, #312]	; (8001f10 <answer2CPU+0x870>)
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	2280      	movs	r2, #128	; 0x80
 8001ddc:	4013      	ands	r3, r2
 8001dde:	d0fa      	beq.n	8001dd6 <answer2CPU+0x736>
						     USART2->TDR = (uint8_t)ans[i];
 8001de0:	230e      	movs	r3, #14
 8001de2:	18fb      	adds	r3, r7, r3
 8001de4:	781a      	ldrb	r2, [r3, #0]
 8001de6:	4b4b      	ldr	r3, [pc, #300]	; (8001f14 <answer2CPU+0x874>)
 8001de8:	0052      	lsls	r2, r2, #1
 8001dea:	5ad3      	ldrh	r3, [r2, r3]
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	4b48      	ldr	r3, [pc, #288]	; (8001f10 <answer2CPU+0x870>)
 8001df0:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8001df2:	230e      	movs	r3, #14
 8001df4:	18fb      	adds	r3, r7, r3
 8001df6:	781a      	ldrb	r2, [r3, #0]
 8001df8:	4b46      	ldr	r3, [pc, #280]	; (8001f14 <answer2CPU+0x874>)
 8001dfa:	0052      	lsls	r2, r2, #1
 8001dfc:	5ad3      	ldrh	r3, [r2, r3]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1e2      	bne.n	8001dc8 <answer2CPU+0x728>
						}
//					cmd2Execute=0x03;
			}
			if (cmd[0] == 0x04) { //request of current consumption
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	d000      	beq.n	8001e0c <answer2CPU+0x76c>
 8001e0a:	e076      	b.n	8001efa <answer2CPU+0x85a>
				myLength = 0x04; //4 bytes length answer
 8001e0c:	2109      	movs	r1, #9
 8001e0e:	187b      	adds	r3, r7, r1
 8001e10:	2204      	movs	r2, #4
 8001e12:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001e14:	187b      	adds	r3, r7, r1
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	3b02      	subs	r3, #2
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	4b3d      	ldr	r3, [pc, #244]	; (8001f14 <answer2CPU+0x874>)
 8001e20:	805a      	strh	r2, [r3, #2]
				uartSpeed = cmd[2];
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3302      	adds	r3, #2
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	001a      	movs	r2, r3
 8001e2a:	4b3b      	ldr	r3, [pc, #236]	; (8001f18 <answer2CPU+0x878>)
 8001e2c:	601a      	str	r2, [r3, #0]
				ans[2] = currentUARTspeed;
 8001e2e:	4b3b      	ldr	r3, [pc, #236]	; (8001f1c <answer2CPU+0x87c>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	4b37      	ldr	r3, [pc, #220]	; (8001f14 <answer2CPU+0x874>)
 8001e36:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8001e38:	230d      	movs	r3, #13
 8001e3a:	18fb      	adds	r3, r7, r3
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	4b34      	ldr	r3, [pc, #208]	; (8001f14 <answer2CPU+0x874>)
 8001e42:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8001e44:	230e      	movs	r3, #14
 8001e46:	18fb      	adds	r3, r7, r3
 8001e48:	2200      	movs	r2, #0
 8001e4a:	701a      	strb	r2, [r3, #0]
 8001e4c:	e011      	b.n	8001e72 <answer2CPU+0x7d2>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8001e4e:	200e      	movs	r0, #14
 8001e50:	183b      	adds	r3, r7, r0
 8001e52:	781a      	ldrb	r2, [r3, #0]
 8001e54:	4b2f      	ldr	r3, [pc, #188]	; (8001f14 <answer2CPU+0x874>)
 8001e56:	0052      	lsls	r2, r2, #1
 8001e58:	5ad3      	ldrh	r3, [r2, r3]
 8001e5a:	b2d9      	uxtb	r1, r3
 8001e5c:	220d      	movs	r2, #13
 8001e5e:	18bb      	adds	r3, r7, r2
 8001e60:	18ba      	adds	r2, r7, r2
 8001e62:	7812      	ldrb	r2, [r2, #0]
 8001e64:	188a      	adds	r2, r1, r2
 8001e66:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001e68:	183b      	adds	r3, r7, r0
 8001e6a:	781a      	ldrb	r2, [r3, #0]
 8001e6c:	183b      	adds	r3, r7, r0
 8001e6e:	3201      	adds	r2, #1
 8001e70:	701a      	strb	r2, [r3, #0]
 8001e72:	230e      	movs	r3, #14
 8001e74:	18fb      	adds	r3, r7, r3
 8001e76:	781a      	ldrb	r2, [r3, #0]
 8001e78:	2009      	movs	r0, #9
 8001e7a:	183b      	adds	r3, r7, r0
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	429a      	cmp	r2, r3
 8001e82:	dbe4      	blt.n	8001e4e <answer2CPU+0x7ae>
				}
				myCS = 0 - myCS;
 8001e84:	210d      	movs	r1, #13
 8001e86:	187b      	adds	r3, r7, r1
 8001e88:	187a      	adds	r2, r7, r1
 8001e8a:	7812      	ldrb	r2, [r2, #0]
 8001e8c:	4252      	negs	r2, r2
 8001e8e:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001e90:	183b      	adds	r3, r7, r0
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	1e5a      	subs	r2, r3, #1
 8001e96:	187b      	adds	r3, r7, r1
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	b299      	uxth	r1, r3
 8001e9c:	4b1d      	ldr	r3, [pc, #116]	; (8001f14 <answer2CPU+0x874>)
 8001e9e:	0052      	lsls	r2, r2, #1
 8001ea0:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001ea2:	46c0      	nop			; (mov r8, r8)
 8001ea4:	4b1a      	ldr	r3, [pc, #104]	; (8001f10 <answer2CPU+0x870>)
 8001ea6:	69db      	ldr	r3, [r3, #28]
 8001ea8:	2280      	movs	r2, #128	; 0x80
 8001eaa:	4013      	ands	r3, r2
 8001eac:	d0fa      	beq.n	8001ea4 <answer2CPU+0x804>
				USART2->TDR = ans[0]|0x0100;
 8001eae:	4b19      	ldr	r3, [pc, #100]	; (8001f14 <answer2CPU+0x874>)
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	2280      	movs	r2, #128	; 0x80
 8001eb4:	0052      	lsls	r2, r2, #1
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	4b15      	ldr	r3, [pc, #84]	; (8001f10 <answer2CPU+0x870>)
 8001ebc:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001ebe:	e014      	b.n	8001eea <answer2CPU+0x84a>
				{
				  i++;
 8001ec0:	210e      	movs	r1, #14
 8001ec2:	187b      	adds	r3, r7, r1
 8001ec4:	781a      	ldrb	r2, [r3, #0]
 8001ec6:	187b      	adds	r3, r7, r1
 8001ec8:	3201      	adds	r2, #1
 8001eca:	701a      	strb	r2, [r3, #0]
				  while(!(USART2->ISR & USART_ISR_TXE)){};
 8001ecc:	46c0      	nop			; (mov r8, r8)
 8001ece:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <answer2CPU+0x870>)
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	2280      	movs	r2, #128	; 0x80
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d0fa      	beq.n	8001ece <answer2CPU+0x82e>
				  USART2->TDR = (uint8_t)ans[i];
 8001ed8:	230e      	movs	r3, #14
 8001eda:	18fb      	adds	r3, r7, r3
 8001edc:	781a      	ldrb	r2, [r3, #0]
 8001ede:	4b0d      	ldr	r3, [pc, #52]	; (8001f14 <answer2CPU+0x874>)
 8001ee0:	0052      	lsls	r2, r2, #1
 8001ee2:	5ad3      	ldrh	r3, [r2, r3]
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <answer2CPU+0x870>)
 8001ee8:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001eea:	230e      	movs	r3, #14
 8001eec:	18fb      	adds	r3, r7, r3
 8001eee:	781a      	ldrb	r2, [r3, #0]
 8001ef0:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <answer2CPU+0x874>)
 8001ef2:	0052      	lsls	r2, r2, #1
 8001ef4:	5ad3      	ldrh	r3, [r2, r3]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1e2      	bne.n	8001ec0 <answer2CPU+0x820>
				}
//				cmd2Execute=0x04;
			}
//			weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, coala);
			USART2->ICR|=USART_ICR_ORECF;
 8001efa:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <answer2CPU+0x870>)
 8001efc:	6a1a      	ldr	r2, [r3, #32]
 8001efe:	4b04      	ldr	r3, [pc, #16]	; (8001f10 <answer2CPU+0x870>)
 8001f00:	2108      	movs	r1, #8
 8001f02:	430a      	orrs	r2, r1
 8001f04:	621a      	str	r2, [r3, #32]
}
 8001f06:	46c0      	nop			; (mov r8, r8)
 8001f08:	0018      	movs	r0, r3
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	b004      	add	sp, #16
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40004400 	.word	0x40004400
 8001f14:	200054a0 	.word	0x200054a0
 8001f18:	200053fc 	.word	0x200053fc
 8001f1c:	200052f2 	.word	0x200052f2

08001f20 <MEM_Reset>:
//==================================================================================================================================
	void MEM_Reset(void) {
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
		uint8_t memCMD;
		HAL_Delay(1); //200 ms by Andrew
 8001f26:	2001      	movs	r0, #1
 8001f28:	f001 f8d0 	bl	80030cc <HAL_Delay>
		GPIOC->ODR &= ~(1 << 15); //reset cs
 8001f2c:	4b28      	ldr	r3, [pc, #160]	; (8001fd0 <MEM_Reset+0xb0>)
 8001f2e:	695a      	ldr	r2, [r3, #20]
 8001f30:	4b27      	ldr	r3, [pc, #156]	; (8001fd0 <MEM_Reset+0xb0>)
 8001f32:	4928      	ldr	r1, [pc, #160]	; (8001fd4 <MEM_Reset+0xb4>)
 8001f34:	400a      	ands	r2, r1
 8001f36:	615a      	str	r2, [r3, #20]
		memCMD = 0x66;
 8001f38:	1dfb      	adds	r3, r7, #7
 8001f3a:	2266      	movs	r2, #102	; 0x66
 8001f3c:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8001f3e:	1df9      	adds	r1, r7, #7
 8001f40:	4825      	ldr	r0, [pc, #148]	; (8001fd8 <MEM_Reset+0xb8>)
 8001f42:	2305      	movs	r3, #5
 8001f44:	2201      	movs	r2, #1
 8001f46:	f004 fc39 	bl	80067bc <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8001f4a:	4b21      	ldr	r3, [pc, #132]	; (8001fd0 <MEM_Reset+0xb0>)
 8001f4c:	695a      	ldr	r2, [r3, #20]
 8001f4e:	4b20      	ldr	r3, [pc, #128]	; (8001fd0 <MEM_Reset+0xb0>)
 8001f50:	2180      	movs	r1, #128	; 0x80
 8001f52:	0209      	lsls	r1, r1, #8
 8001f54:	430a      	orrs	r2, r1
 8001f56:	615a      	str	r2, [r3, #20]
		asm("NOP");
 8001f58:	46c0      	nop			; (mov r8, r8)
		__NOP();
 8001f5a:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8001f5c:	46c0      	nop			; (mov r8, r8)
		__NOP();			//May be less NOPs?
 8001f5e:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8001f60:	46c0      	nop			; (mov r8, r8)
		__NOP();
 8001f62:	46c0      	nop			; (mov r8, r8)
		GPIOC->ODR &= ~(1 << 15);			//reset cs
 8001f64:	4b1a      	ldr	r3, [pc, #104]	; (8001fd0 <MEM_Reset+0xb0>)
 8001f66:	695a      	ldr	r2, [r3, #20]
 8001f68:	4b19      	ldr	r3, [pc, #100]	; (8001fd0 <MEM_Reset+0xb0>)
 8001f6a:	491a      	ldr	r1, [pc, #104]	; (8001fd4 <MEM_Reset+0xb4>)
 8001f6c:	400a      	ands	r2, r1
 8001f6e:	615a      	str	r2, [r3, #20]
		memCMD = 0x99;
 8001f70:	1dfb      	adds	r3, r7, #7
 8001f72:	2299      	movs	r2, #153	; 0x99
 8001f74:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset memory
 8001f76:	1df9      	adds	r1, r7, #7
 8001f78:	4817      	ldr	r0, [pc, #92]	; (8001fd8 <MEM_Reset+0xb8>)
 8001f7a:	2305      	movs	r3, #5
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f004 fc1d 	bl	80067bc <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8001f82:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <MEM_Reset+0xb0>)
 8001f84:	695a      	ldr	r2, [r3, #20]
 8001f86:	4b12      	ldr	r3, [pc, #72]	; (8001fd0 <MEM_Reset+0xb0>)
 8001f88:	2180      	movs	r1, #128	; 0x80
 8001f8a:	0209      	lsls	r1, r1, #8
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8001f90:	2001      	movs	r0, #1
 8001f92:	f001 f89b 	bl	80030cc <HAL_Delay>
//=============================================================================================================
		memCMD = 0xB7;												//	Activation 0f 4-bytes address mode
 8001f96:	1dfb      	adds	r3, r7, #7
 8001f98:	22b7      	movs	r2, #183	; 0xb7
 8001f9a:	701a      	strb	r2, [r3, #0]
		GPIOC->ODR &= ~(1 << 15); //reset cs
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <MEM_Reset+0xb0>)
 8001f9e:	695a      	ldr	r2, [r3, #20]
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <MEM_Reset+0xb0>)
 8001fa2:	490c      	ldr	r1, [pc, #48]	; (8001fd4 <MEM_Reset+0xb4>)
 8001fa4:	400a      	ands	r2, r1
 8001fa6:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8001fa8:	1df9      	adds	r1, r7, #7
 8001faa:	480b      	ldr	r0, [pc, #44]	; (8001fd8 <MEM_Reset+0xb8>)
 8001fac:	2305      	movs	r3, #5
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f004 fc04 	bl	80067bc <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8001fb4:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <MEM_Reset+0xb0>)
 8001fb6:	695a      	ldr	r2, [r3, #20]
 8001fb8:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <MEM_Reset+0xb0>)
 8001fba:	2180      	movs	r1, #128	; 0x80
 8001fbc:	0209      	lsls	r1, r1, #8
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8001fc2:	2001      	movs	r0, #1
 8001fc4:	f001 f882 	bl	80030cc <HAL_Delay>
	}
 8001fc8:	46c0      	nop			; (mov r8, r8)
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	b002      	add	sp, #8
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	50000800 	.word	0x50000800
 8001fd4:	ffff7fff 	.word	0xffff7fff
 8001fd8:	200051b4 	.word	0x200051b4

08001fdc <weoShowFullScreenDMA>:
		GPIOC->ODR |= 1 << 6;	//set BF
		cmd2Execute=0;
	}
//==========================================================================================================================

	uint8_t weoShowFullScreenDMA(uint8_t picNum) {
 8001fdc:	b590      	push	{r4, r7, lr}
 8001fde:	4c41      	ldr	r4, [pc, #260]	; (80020e4 <weoShowFullScreenDMA+0x108>)
 8001fe0:	44a5      	add	sp, r4
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	0002      	movs	r2, r0
 8001fe6:	4b40      	ldr	r3, [pc, #256]	; (80020e8 <weoShowFullScreenDMA+0x10c>)
 8001fe8:	4940      	ldr	r1, [pc, #256]	; (80020ec <weoShowFullScreenDMA+0x110>)
 8001fea:	468c      	mov	ip, r1
 8001fec:	44bc      	add	ip, r7
 8001fee:	4463      	add	r3, ip
 8001ff0:	701a      	strb	r2, [r3, #0]
//		uint8_t MEM_Buffer[8192];
		uint8_t DUMMY_Buffer[8192], firstImAddrArray[4],addrArray[4];
		uint16_t i;
		uint32_t addrInfo,addr;

		weoDrawRectangleInit(0x00, 0x00, 0x7F, 0x7F); // Здесь ещё работает
 8001ff2:	237f      	movs	r3, #127	; 0x7f
 8001ff4:	227f      	movs	r2, #127	; 0x7f
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	2000      	movs	r0, #0
 8001ffa:	f7ff fac9 	bl	8001590 <weoDrawRectangleInit>

		len=8192;
 8001ffe:	4b3c      	ldr	r3, [pc, #240]	; (80020f0 <weoShowFullScreenDMA+0x114>)
 8002000:	2280      	movs	r2, #128	; 0x80
 8002002:	0192      	lsls	r2, r2, #6
 8002004:	801a      	strh	r2, [r3, #0]
		dma_spi_cnt=len;
 8002006:	4b3a      	ldr	r3, [pc, #232]	; (80020f0 <weoShowFullScreenDMA+0x114>)
 8002008:	881a      	ldrh	r2, [r3, #0]
 800200a:	4b3a      	ldr	r3, [pc, #232]	; (80020f4 <weoShowFullScreenDMA+0x118>)
 800200c:	801a      	strh	r2, [r3, #0]
		memCMD = 0x13; //read command with 4-byte address
 800200e:	483a      	ldr	r0, [pc, #232]	; (80020f8 <weoShowFullScreenDMA+0x11c>)
 8002010:	183b      	adds	r3, r7, r0
 8002012:	2213      	movs	r2, #19
 8002014:	701a      	strb	r2, [r3, #0]

		addr=((picNum)*0x2000);
 8002016:	4b34      	ldr	r3, [pc, #208]	; (80020e8 <weoShowFullScreenDMA+0x10c>)
 8002018:	4a34      	ldr	r2, [pc, #208]	; (80020ec <weoShowFullScreenDMA+0x110>)
 800201a:	4694      	mov	ip, r2
 800201c:	44bc      	add	ip, r7
 800201e:	4463      	add	r3, ip
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	035b      	lsls	r3, r3, #13
 8002024:	4935      	ldr	r1, [pc, #212]	; (80020fc <weoShowFullScreenDMA+0x120>)
 8002026:	187a      	adds	r2, r7, r1
 8002028:	6013      	str	r3, [r2, #0]

		addrArray[0]=addr & 0xFF;
 800202a:	187b      	adds	r3, r7, r1
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	b2da      	uxtb	r2, r3
 8002030:	4b33      	ldr	r3, [pc, #204]	; (8002100 <weoShowFullScreenDMA+0x124>)
 8002032:	4c2e      	ldr	r4, [pc, #184]	; (80020ec <weoShowFullScreenDMA+0x110>)
 8002034:	46a4      	mov	ip, r4
 8002036:	44bc      	add	ip, r7
 8002038:	4463      	add	r3, ip
 800203a:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 800203c:	187b      	adds	r3, r7, r1
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	0a1b      	lsrs	r3, r3, #8
 8002042:	b2da      	uxtb	r2, r3
 8002044:	4b2e      	ldr	r3, [pc, #184]	; (8002100 <weoShowFullScreenDMA+0x124>)
 8002046:	4c29      	ldr	r4, [pc, #164]	; (80020ec <weoShowFullScreenDMA+0x110>)
 8002048:	46a4      	mov	ip, r4
 800204a:	44bc      	add	ip, r7
 800204c:	4463      	add	r3, ip
 800204e:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 8002050:	187b      	adds	r3, r7, r1
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	0c1b      	lsrs	r3, r3, #16
 8002056:	b2da      	uxtb	r2, r3
 8002058:	4b29      	ldr	r3, [pc, #164]	; (8002100 <weoShowFullScreenDMA+0x124>)
 800205a:	4c24      	ldr	r4, [pc, #144]	; (80020ec <weoShowFullScreenDMA+0x110>)
 800205c:	46a4      	mov	ip, r4
 800205e:	44bc      	add	ip, r7
 8002060:	4463      	add	r3, ip
 8002062:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 8002064:	187b      	adds	r3, r7, r1
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	0e1b      	lsrs	r3, r3, #24
 800206a:	b2da      	uxtb	r2, r3
 800206c:	4b24      	ldr	r3, [pc, #144]	; (8002100 <weoShowFullScreenDMA+0x124>)
 800206e:	491f      	ldr	r1, [pc, #124]	; (80020ec <weoShowFullScreenDMA+0x110>)
 8002070:	468c      	mov	ip, r1
 8002072:	44bc      	add	ip, r7
 8002074:	4463      	add	r3, ip
 8002076:	70da      	strb	r2, [r3, #3]

		GPIOC->ODR &= ~(1 << 15); //reset cs
 8002078:	4b22      	ldr	r3, [pc, #136]	; (8002104 <weoShowFullScreenDMA+0x128>)
 800207a:	695a      	ldr	r2, [r3, #20]
 800207c:	4b21      	ldr	r3, [pc, #132]	; (8002104 <weoShowFullScreenDMA+0x128>)
 800207e:	4922      	ldr	r1, [pc, #136]	; (8002108 <weoShowFullScreenDMA+0x12c>)
 8002080:	400a      	ands	r2, r1
 8002082:	615a      	str	r2, [r3, #20]

		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 8002084:	1839      	adds	r1, r7, r0
 8002086:	4821      	ldr	r0, [pc, #132]	; (800210c <weoShowFullScreenDMA+0x130>)
 8002088:	2332      	movs	r3, #50	; 0x32
 800208a:	2201      	movs	r2, #1
 800208c:	f004 fb96 	bl	80067bc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 8002090:	2408      	movs	r4, #8
 8002092:	193b      	adds	r3, r7, r4
 8002094:	1cd9      	adds	r1, r3, #3
 8002096:	481d      	ldr	r0, [pc, #116]	; (800210c <weoShowFullScreenDMA+0x130>)
 8002098:	2332      	movs	r3, #50	; 0x32
 800209a:	2201      	movs	r2, #1
 800209c:	f004 fb8e 	bl	80067bc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 80020a0:	193b      	adds	r3, r7, r4
 80020a2:	1c99      	adds	r1, r3, #2
 80020a4:	4819      	ldr	r0, [pc, #100]	; (800210c <weoShowFullScreenDMA+0x130>)
 80020a6:	2332      	movs	r3, #50	; 0x32
 80020a8:	2201      	movs	r2, #1
 80020aa:	f004 fb87 	bl	80067bc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 80020ae:	193b      	adds	r3, r7, r4
 80020b0:	1c59      	adds	r1, r3, #1
 80020b2:	4816      	ldr	r0, [pc, #88]	; (800210c <weoShowFullScreenDMA+0x130>)
 80020b4:	2332      	movs	r3, #50	; 0x32
 80020b6:	2201      	movs	r2, #1
 80020b8:	f004 fb80 	bl	80067bc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 80020bc:	1939      	adds	r1, r7, r4
 80020be:	4813      	ldr	r0, [pc, #76]	; (800210c <weoShowFullScreenDMA+0x130>)
 80020c0:	2332      	movs	r3, #50	; 0x32
 80020c2:	2201      	movs	r2, #1
 80020c4:	f004 fb7a 	bl	80067bc <HAL_SPI_Transmit>
		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &MEM_Buffer ,len);
 80020c8:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <weoShowFullScreenDMA+0x114>)
 80020ca:	881a      	ldrh	r2, [r3, #0]
 80020cc:	4910      	ldr	r1, [pc, #64]	; (8002110 <weoShowFullScreenDMA+0x134>)
 80020ce:	4b0f      	ldr	r3, [pc, #60]	; (800210c <weoShowFullScreenDMA+0x130>)
 80020d0:	0018      	movs	r0, r3
 80020d2:	f004 ffe9 	bl	80070a8 <HAL_SPI_Receive_DMA>
	}
 80020d6:	46c0      	nop			; (mov r8, r8)
 80020d8:	0018      	movs	r0, r3
 80020da:	46bd      	mov	sp, r7
 80020dc:	4b0d      	ldr	r3, [pc, #52]	; (8002114 <weoShowFullScreenDMA+0x138>)
 80020de:	449d      	add	sp, r3
 80020e0:	bd90      	pop	{r4, r7, pc}
 80020e2:	46c0      	nop			; (mov r8, r8)
 80020e4:	ffffdfe4 	.word	0xffffdfe4
 80020e8:	ffffdfef 	.word	0xffffdfef
 80020ec:	00002018 	.word	0x00002018
 80020f0:	200055dc 	.word	0x200055dc
 80020f4:	20005134 	.word	0x20005134
 80020f8:	00002013 	.word	0x00002013
 80020fc:	00002014 	.word	0x00002014
 8002100:	ffffdff0 	.word	0xffffdff0
 8002104:	50000800 	.word	0x50000800
 8002108:	ffff7fff 	.word	0xffff7fff
 800210c:	200051b4 	.word	0x200051b4
 8002110:	200055e4 	.word	0x200055e4
 8002114:	0000201c 	.word	0x0000201c

08002118 <weoShowSmallImage>:
//==========================================================================================================================
	uint8_t weoShowSmallImage(uint8_t picNum, uint8_t imX, uint8_t imY) {
 8002118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800211a:	4c97      	ldr	r4, [pc, #604]	; (8002378 <weoShowSmallImage+0x260>)
 800211c:	44a5      	add	sp, r4
 800211e:	af02      	add	r7, sp, #8
 8002120:	0004      	movs	r4, r0
 8002122:	0008      	movs	r0, r1
 8002124:	0011      	movs	r1, r2
 8002126:	4b95      	ldr	r3, [pc, #596]	; (800237c <weoShowSmallImage+0x264>)
 8002128:	4a95      	ldr	r2, [pc, #596]	; (8002380 <weoShowSmallImage+0x268>)
 800212a:	4694      	mov	ip, r2
 800212c:	44bc      	add	ip, r7
 800212e:	4463      	add	r3, ip
 8002130:	1c22      	adds	r2, r4, #0
 8002132:	701a      	strb	r2, [r3, #0]
 8002134:	4b93      	ldr	r3, [pc, #588]	; (8002384 <weoShowSmallImage+0x26c>)
 8002136:	4a92      	ldr	r2, [pc, #584]	; (8002380 <weoShowSmallImage+0x268>)
 8002138:	4694      	mov	ip, r2
 800213a:	44bc      	add	ip, r7
 800213c:	4463      	add	r3, ip
 800213e:	1c02      	adds	r2, r0, #0
 8002140:	701a      	strb	r2, [r3, #0]
 8002142:	4b91      	ldr	r3, [pc, #580]	; (8002388 <weoShowSmallImage+0x270>)
 8002144:	4a8e      	ldr	r2, [pc, #568]	; (8002380 <weoShowSmallImage+0x268>)
 8002146:	4694      	mov	ip, r2
 8002148:	44bc      	add	ip, r7
 800214a:	4463      	add	r3, ip
 800214c:	1c0a      	adds	r2, r1, #0
 800214e:	701a      	strb	r2, [r3, #0]
		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H;
		uint8_t MEM_Buffer[8192];
		uint8_t imInfo[2],addrArray[4];
		uint16_t i, len;
		uint32_t addr;
		addr=0x00000000;
 8002150:	2300      	movs	r3, #0
 8002152:	498e      	ldr	r1, [pc, #568]	; (800238c <weoShowSmallImage+0x274>)
 8002154:	187a      	adds	r2, r7, r1
 8002156:	6013      	str	r3, [r2, #0]
		memCMD = 0x13; //read command with 4-byte address
 8002158:	4d8d      	ldr	r5, [pc, #564]	; (8002390 <weoShowSmallImage+0x278>)
 800215a:	197b      	adds	r3, r7, r5
 800215c:	2213      	movs	r2, #19
 800215e:	701a      	strb	r2, [r3, #0]
		//look at info about image
		addr=(picNum*0x2000)+0x3C000;// the right path is to multiply picNum * image repeat period!
 8002160:	4b86      	ldr	r3, [pc, #536]	; (800237c <weoShowSmallImage+0x264>)
 8002162:	4a87      	ldr	r2, [pc, #540]	; (8002380 <weoShowSmallImage+0x268>)
 8002164:	4694      	mov	ip, r2
 8002166:	44bc      	add	ip, r7
 8002168:	4463      	add	r3, ip
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	331e      	adds	r3, #30
 800216e:	035b      	lsls	r3, r3, #13
 8002170:	187a      	adds	r2, r7, r1
 8002172:	6013      	str	r3, [r2, #0]
//		addr=(picNum*0x2000);

		addrArray[0]=addr & 0xFF;
 8002174:	187b      	adds	r3, r7, r1
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	b2da      	uxtb	r2, r3
 800217a:	4b86      	ldr	r3, [pc, #536]	; (8002394 <weoShowSmallImage+0x27c>)
 800217c:	4880      	ldr	r0, [pc, #512]	; (8002380 <weoShowSmallImage+0x268>)
 800217e:	4684      	mov	ip, r0
 8002180:	44bc      	add	ip, r7
 8002182:	4463      	add	r3, ip
 8002184:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 8002186:	187b      	adds	r3, r7, r1
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	0a1b      	lsrs	r3, r3, #8
 800218c:	b2da      	uxtb	r2, r3
 800218e:	4b81      	ldr	r3, [pc, #516]	; (8002394 <weoShowSmallImage+0x27c>)
 8002190:	487b      	ldr	r0, [pc, #492]	; (8002380 <weoShowSmallImage+0x268>)
 8002192:	4684      	mov	ip, r0
 8002194:	44bc      	add	ip, r7
 8002196:	4463      	add	r3, ip
 8002198:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 800219a:	187b      	adds	r3, r7, r1
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	0c1b      	lsrs	r3, r3, #16
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	4b7c      	ldr	r3, [pc, #496]	; (8002394 <weoShowSmallImage+0x27c>)
 80021a4:	4876      	ldr	r0, [pc, #472]	; (8002380 <weoShowSmallImage+0x268>)
 80021a6:	4684      	mov	ip, r0
 80021a8:	44bc      	add	ip, r7
 80021aa:	4463      	add	r3, ip
 80021ac:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 80021ae:	187b      	adds	r3, r7, r1
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	0e1b      	lsrs	r3, r3, #24
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	4b77      	ldr	r3, [pc, #476]	; (8002394 <weoShowSmallImage+0x27c>)
 80021b8:	4971      	ldr	r1, [pc, #452]	; (8002380 <weoShowSmallImage+0x268>)
 80021ba:	468c      	mov	ip, r1
 80021bc:	44bc      	add	ip, r7
 80021be:	4463      	add	r3, ip
 80021c0:	70da      	strb	r2, [r3, #3]

		GPIOC->ODR &= ~(1 << 15); //reset cs
 80021c2:	4b75      	ldr	r3, [pc, #468]	; (8002398 <weoShowSmallImage+0x280>)
 80021c4:	695a      	ldr	r2, [r3, #20]
 80021c6:	4b74      	ldr	r3, [pc, #464]	; (8002398 <weoShowSmallImage+0x280>)
 80021c8:	4974      	ldr	r1, [pc, #464]	; (800239c <weoShowSmallImage+0x284>)
 80021ca:	400a      	ands	r2, r1
 80021cc:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 80021ce:	1979      	adds	r1, r7, r5
 80021d0:	4873      	ldr	r0, [pc, #460]	; (80023a0 <weoShowSmallImage+0x288>)
 80021d2:	2332      	movs	r3, #50	; 0x32
 80021d4:	2201      	movs	r2, #1
 80021d6:	f004 faf1 	bl	80067bc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 80021da:	240c      	movs	r4, #12
 80021dc:	193b      	adds	r3, r7, r4
 80021de:	1cd9      	adds	r1, r3, #3
 80021e0:	486f      	ldr	r0, [pc, #444]	; (80023a0 <weoShowSmallImage+0x288>)
 80021e2:	2332      	movs	r3, #50	; 0x32
 80021e4:	2201      	movs	r2, #1
 80021e6:	f004 fae9 	bl	80067bc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 80021ea:	193b      	adds	r3, r7, r4
 80021ec:	1c99      	adds	r1, r3, #2
 80021ee:	486c      	ldr	r0, [pc, #432]	; (80023a0 <weoShowSmallImage+0x288>)
 80021f0:	2332      	movs	r3, #50	; 0x32
 80021f2:	2201      	movs	r2, #1
 80021f4:	f004 fae2 	bl	80067bc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 80021f8:	193b      	adds	r3, r7, r4
 80021fa:	1c59      	adds	r1, r3, #1
 80021fc:	4868      	ldr	r0, [pc, #416]	; (80023a0 <weoShowSmallImage+0x288>)
 80021fe:	2332      	movs	r3, #50	; 0x32
 8002200:	2201      	movs	r2, #1
 8002202:	f004 fadb 	bl	80067bc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 8002206:	1939      	adds	r1, r7, r4
 8002208:	4865      	ldr	r0, [pc, #404]	; (80023a0 <weoShowSmallImage+0x288>)
 800220a:	2332      	movs	r3, #50	; 0x32
 800220c:	2201      	movs	r2, #1
 800220e:	f004 fad5 	bl	80067bc <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &imInfo,2, 5000);
 8002212:	4b64      	ldr	r3, [pc, #400]	; (80023a4 <weoShowSmallImage+0x28c>)
 8002214:	2210      	movs	r2, #16
 8002216:	18b9      	adds	r1, r7, r2
 8002218:	4861      	ldr	r0, [pc, #388]	; (80023a0 <weoShowSmallImage+0x288>)
 800221a:	2202      	movs	r2, #2
 800221c:	f004 fc26 	bl	8006a6c <HAL_SPI_Receive>
		GPIOC->ODR |= 1 << 15; // set cs
 8002220:	4b5d      	ldr	r3, [pc, #372]	; (8002398 <weoShowSmallImage+0x280>)
 8002222:	695a      	ldr	r2, [r3, #20]
 8002224:	4b5c      	ldr	r3, [pc, #368]	; (8002398 <weoShowSmallImage+0x280>)
 8002226:	2180      	movs	r1, #128	; 0x80
 8002228:	0209      	lsls	r1, r1, #8
 800222a:	430a      	orrs	r2, r1
 800222c:	615a      	str	r2, [r3, #20]

		width=imInfo[0];
 800222e:	4e5e      	ldr	r6, [pc, #376]	; (80023a8 <weoShowSmallImage+0x290>)
 8002230:	19bb      	adds	r3, r7, r6
 8002232:	4a5e      	ldr	r2, [pc, #376]	; (80023ac <weoShowSmallImage+0x294>)
 8002234:	4952      	ldr	r1, [pc, #328]	; (8002380 <weoShowSmallImage+0x268>)
 8002236:	468c      	mov	ip, r1
 8002238:	44bc      	add	ip, r7
 800223a:	4462      	add	r2, ip
 800223c:	7812      	ldrb	r2, [r2, #0]
 800223e:	701a      	strb	r2, [r3, #0]
		height=imInfo[1];
 8002240:	495b      	ldr	r1, [pc, #364]	; (80023b0 <weoShowSmallImage+0x298>)
 8002242:	187b      	adds	r3, r7, r1
 8002244:	4a59      	ldr	r2, [pc, #356]	; (80023ac <weoShowSmallImage+0x294>)
 8002246:	484e      	ldr	r0, [pc, #312]	; (8002380 <weoShowSmallImage+0x268>)
 8002248:	4684      	mov	ip, r0
 800224a:	44bc      	add	ip, r7
 800224c:	4462      	add	r2, ip
 800224e:	7852      	ldrb	r2, [r2, #1]
 8002250:	701a      	strb	r2, [r3, #0]

		len=(width*height>>1)+0x40;
 8002252:	19bb      	adds	r3, r7, r6
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	187a      	adds	r2, r7, r1
 8002258:	7812      	ldrb	r2, [r2, #0]
 800225a:	4353      	muls	r3, r2
 800225c:	105b      	asrs	r3, r3, #1
 800225e:	b29a      	uxth	r2, r3
 8002260:	4b54      	ldr	r3, [pc, #336]	; (80023b4 <weoShowSmallImage+0x29c>)
 8002262:	18fb      	adds	r3, r7, r3
 8002264:	3240      	adds	r2, #64	; 0x40
 8002266:	801a      	strh	r2, [r3, #0]
		addrArray[0]+=0x02;
 8002268:	4b4a      	ldr	r3, [pc, #296]	; (8002394 <weoShowSmallImage+0x27c>)
 800226a:	4a45      	ldr	r2, [pc, #276]	; (8002380 <weoShowSmallImage+0x268>)
 800226c:	4694      	mov	ip, r2
 800226e:	44bc      	add	ip, r7
 8002270:	4463      	add	r3, ip
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	3302      	adds	r3, #2
 8002276:	b2da      	uxtb	r2, r3
 8002278:	4b46      	ldr	r3, [pc, #280]	; (8002394 <weoShowSmallImage+0x27c>)
 800227a:	4841      	ldr	r0, [pc, #260]	; (8002380 <weoShowSmallImage+0x268>)
 800227c:	4684      	mov	ip, r0
 800227e:	44bc      	add	ip, r7
 8002280:	4463      	add	r3, ip
 8002282:	701a      	strb	r2, [r3, #0]

		USART2->ICR|=USART_ICR_ORECF;
 8002284:	4b4c      	ldr	r3, [pc, #304]	; (80023b8 <weoShowSmallImage+0x2a0>)
 8002286:	6a1a      	ldr	r2, [r3, #32]
 8002288:	4b4b      	ldr	r3, [pc, #300]	; (80023b8 <weoShowSmallImage+0x2a0>)
 800228a:	2108      	movs	r1, #8
 800228c:	430a      	orrs	r2, r1
 800228e:	621a      	str	r2, [r3, #32]
		memCMD = 0x13; //read command with 4-byte address
 8002290:	197b      	adds	r3, r7, r5
 8002292:	2213      	movs	r2, #19
 8002294:	701a      	strb	r2, [r3, #0]

		GPIOC->ODR &= ~(1 << 15);	//reset cs
 8002296:	4b40      	ldr	r3, [pc, #256]	; (8002398 <weoShowSmallImage+0x280>)
 8002298:	695a      	ldr	r2, [r3, #20]
 800229a:	4b3f      	ldr	r3, [pc, #252]	; (8002398 <weoShowSmallImage+0x280>)
 800229c:	493f      	ldr	r1, [pc, #252]	; (800239c <weoShowSmallImage+0x284>)
 800229e:	400a      	ands	r2, r1
 80022a0:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50);//read command with 4-byte address
 80022a2:	1979      	adds	r1, r7, r5
 80022a4:	483e      	ldr	r0, [pc, #248]	; (80023a0 <weoShowSmallImage+0x288>)
 80022a6:	2332      	movs	r3, #50	; 0x32
 80022a8:	2201      	movs	r2, #1
 80022aa:	f004 fa87 	bl	80067bc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3],1, 50);	//send address
 80022ae:	193b      	adds	r3, r7, r4
 80022b0:	1cd9      	adds	r1, r3, #3
 80022b2:	483b      	ldr	r0, [pc, #236]	; (80023a0 <weoShowSmallImage+0x288>)
 80022b4:	2332      	movs	r3, #50	; 0x32
 80022b6:	2201      	movs	r2, #1
 80022b8:	f004 fa80 	bl	80067bc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2],1, 50);	//send address
 80022bc:	193b      	adds	r3, r7, r4
 80022be:	1c99      	adds	r1, r3, #2
 80022c0:	4837      	ldr	r0, [pc, #220]	; (80023a0 <weoShowSmallImage+0x288>)
 80022c2:	2332      	movs	r3, #50	; 0x32
 80022c4:	2201      	movs	r2, #1
 80022c6:	f004 fa79 	bl	80067bc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1],1, 50);	//send address
 80022ca:	193b      	adds	r3, r7, r4
 80022cc:	1c59      	adds	r1, r3, #1
 80022ce:	4834      	ldr	r0, [pc, #208]	; (80023a0 <weoShowSmallImage+0x288>)
 80022d0:	2332      	movs	r3, #50	; 0x32
 80022d2:	2201      	movs	r2, #1
 80022d4:	f004 fa72 	bl	80067bc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0],1, 50);	//send address
 80022d8:	1939      	adds	r1, r7, r4
 80022da:	4831      	ldr	r0, [pc, #196]	; (80023a0 <weoShowSmallImage+0x288>)
 80022dc:	2332      	movs	r3, #50	; 0x32
 80022de:	2201      	movs	r2, #1
 80022e0:	f004 fa6c 	bl	80067bc <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,len, 5000);// 7 information bits about the image
 80022e4:	4c2f      	ldr	r4, [pc, #188]	; (80023a4 <weoShowSmallImage+0x28c>)
 80022e6:	4b33      	ldr	r3, [pc, #204]	; (80023b4 <weoShowSmallImage+0x29c>)
 80022e8:	18fb      	adds	r3, r7, r3
 80022ea:	881a      	ldrh	r2, [r3, #0]
 80022ec:	2514      	movs	r5, #20
 80022ee:	1979      	adds	r1, r7, r5
 80022f0:	482b      	ldr	r0, [pc, #172]	; (80023a0 <weoShowSmallImage+0x288>)
 80022f2:	0023      	movs	r3, r4
 80022f4:	f004 fbba 	bl	8006a6c <HAL_SPI_Receive>
		GPIOC->ODR |= 1 << 15;	// set cs
 80022f8:	4b27      	ldr	r3, [pc, #156]	; (8002398 <weoShowSmallImage+0x280>)
 80022fa:	695a      	ldr	r2, [r3, #20]
 80022fc:	4b26      	ldr	r3, [pc, #152]	; (8002398 <weoShowSmallImage+0x280>)
 80022fe:	2180      	movs	r1, #128	; 0x80
 8002300:	0209      	lsls	r1, r1, #8
 8002302:	430a      	orrs	r2, r1
 8002304:	615a      	str	r2, [r3, #20]
		weoDrawRectangleFilled(imX, imY, (imX+width-0x01), (imY+height-0x01), 0xFF,MEM_Buffer);	// Здесь ещё работает 0xFF - затычка
 8002306:	4b1f      	ldr	r3, [pc, #124]	; (8002384 <weoShowSmallImage+0x26c>)
 8002308:	481d      	ldr	r0, [pc, #116]	; (8002380 <weoShowSmallImage+0x268>)
 800230a:	183a      	adds	r2, r7, r0
 800230c:	18d2      	adds	r2, r2, r3
 800230e:	19bb      	adds	r3, r7, r6
 8002310:	7812      	ldrb	r2, [r2, #0]
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	18d3      	adds	r3, r2, r3
 8002316:	b2db      	uxtb	r3, r3
 8002318:	3b01      	subs	r3, #1
 800231a:	b2dc      	uxtb	r4, r3
 800231c:	4b1a      	ldr	r3, [pc, #104]	; (8002388 <weoShowSmallImage+0x270>)
 800231e:	183a      	adds	r2, r7, r0
 8002320:	18d2      	adds	r2, r2, r3
 8002322:	4923      	ldr	r1, [pc, #140]	; (80023b0 <weoShowSmallImage+0x298>)
 8002324:	187b      	adds	r3, r7, r1
 8002326:	7812      	ldrb	r2, [r2, #0]
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	18d3      	adds	r3, r2, r3
 800232c:	b2db      	uxtb	r3, r3
 800232e:	3b01      	subs	r3, #1
 8002330:	b2da      	uxtb	r2, r3
 8002332:	4b15      	ldr	r3, [pc, #84]	; (8002388 <weoShowSmallImage+0x270>)
 8002334:	4912      	ldr	r1, [pc, #72]	; (8002380 <weoShowSmallImage+0x268>)
 8002336:	468c      	mov	ip, r1
 8002338:	44bc      	add	ip, r7
 800233a:	4463      	add	r3, ip
 800233c:	7819      	ldrb	r1, [r3, #0]
 800233e:	4b11      	ldr	r3, [pc, #68]	; (8002384 <weoShowSmallImage+0x26c>)
 8002340:	480f      	ldr	r0, [pc, #60]	; (8002380 <weoShowSmallImage+0x268>)
 8002342:	4684      	mov	ip, r0
 8002344:	44bc      	add	ip, r7
 8002346:	4463      	add	r3, ip
 8002348:	7818      	ldrb	r0, [r3, #0]
 800234a:	197b      	adds	r3, r7, r5
 800234c:	9301      	str	r3, [sp, #4]
 800234e:	23ff      	movs	r3, #255	; 0xff
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	0013      	movs	r3, r2
 8002354:	0022      	movs	r2, r4
 8002356:	f7ff f83b 	bl	80013d0 <weoDrawRectangleFilled>
		GPIOC->ODR |= 1 << 6;	//set BF
 800235a:	4b0f      	ldr	r3, [pc, #60]	; (8002398 <weoShowSmallImage+0x280>)
 800235c:	695a      	ldr	r2, [r3, #20]
 800235e:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <weoShowSmallImage+0x280>)
 8002360:	2140      	movs	r1, #64	; 0x40
 8002362:	430a      	orrs	r2, r1
 8002364:	615a      	str	r2, [r3, #20]
		cmd2Execute=0;
 8002366:	4b15      	ldr	r3, [pc, #84]	; (80023bc <weoShowSmallImage+0x2a4>)
 8002368:	2200      	movs	r2, #0
 800236a:	701a      	strb	r2, [r3, #0]
	}
 800236c:	46c0      	nop			; (mov r8, r8)
 800236e:	0018      	movs	r0, r3
 8002370:	46bd      	mov	sp, r7
 8002372:	4b13      	ldr	r3, [pc, #76]	; (80023c0 <weoShowSmallImage+0x2a8>)
 8002374:	449d      	add	sp, r3
 8002376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002378:	ffffdfd4 	.word	0xffffdfd4
 800237c:	ffffdfe7 	.word	0xffffdfe7
 8002380:	00002020 	.word	0x00002020
 8002384:	ffffdfe6 	.word	0xffffdfe6
 8002388:	ffffdfe5 	.word	0xffffdfe5
 800238c:	0000201c 	.word	0x0000201c
 8002390:	00002017 	.word	0x00002017
 8002394:	ffffdfec 	.word	0xffffdfec
 8002398:	50000800 	.word	0x50000800
 800239c:	ffff7fff 	.word	0xffff7fff
 80023a0:	200051b4 	.word	0x200051b4
 80023a4:	00001388 	.word	0x00001388
 80023a8:	0000201b 	.word	0x0000201b
 80023ac:	ffffdff0 	.word	0xffffdff0
 80023b0:	0000201a 	.word	0x0000201a
 80023b4:	00002018 	.word	0x00002018
 80023b8:	40004400 	.word	0x40004400
 80023bc:	2000545e 	.word	0x2000545e
 80023c0:	00002024 	.word	0x00002024

080023c4 <MEM_GetID>:
		dat = 0x04;
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 5);//write disable Is it neccessary, if WP pin is used????????????????????????????
		GPIOC->ODR |= 1 << 15;	// set cs
//    GPIOC->ODR &= ~(1 << 14);//Write Disable
	}
	uint32_t MEM_GetID(void) {
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
		uint8_t dat;
		uint8_t tmp[1] = { 0x00 };
 80023ca:	1d3b      	adds	r3, r7, #4
 80023cc:	4a29      	ldr	r2, [pc, #164]	; (8002474 <MEM_GetID+0xb0>)
 80023ce:	7812      	ldrb	r2, [r2, #0]
 80023d0:	701a      	strb	r2, [r3, #0]
		dat = 0x9E;
 80023d2:	1dfb      	adds	r3, r7, #7
 80023d4:	229e      	movs	r2, #158	; 0x9e
 80023d6:	701a      	strb	r2, [r3, #0]
		GPIOC->ODR &= ~(1 << 15);	//reset cs
 80023d8:	4b27      	ldr	r3, [pc, #156]	; (8002478 <MEM_GetID+0xb4>)
 80023da:	695a      	ldr	r2, [r3, #20]
 80023dc:	4b26      	ldr	r3, [pc, #152]	; (8002478 <MEM_GetID+0xb4>)
 80023de:	4927      	ldr	r1, [pc, #156]	; (800247c <MEM_GetID+0xb8>)
 80023e0:	400a      	ands	r2, r1
 80023e2:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 50);	//read ID command
 80023e4:	1df9      	adds	r1, r7, #7
 80023e6:	4826      	ldr	r0, [pc, #152]	; (8002480 <MEM_GetID+0xbc>)
 80023e8:	2332      	movs	r3, #50	; 0x32
 80023ea:	2201      	movs	r2, #1
 80023ec:	f004 f9e6 	bl	80067bc <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 80023f0:	23fa      	movs	r3, #250	; 0xfa
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	1d39      	adds	r1, r7, #4
 80023f6:	4822      	ldr	r0, [pc, #136]	; (8002480 <MEM_GetID+0xbc>)
 80023f8:	2201      	movs	r2, #1
 80023fa:	f004 fb37 	bl	8006a6c <HAL_SPI_Receive>
		MEM_ID = (uint32_t) tmp[0];
 80023fe:	1d3b      	adds	r3, r7, #4
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	001a      	movs	r2, r3
 8002404:	4b1f      	ldr	r3, [pc, #124]	; (8002484 <MEM_GetID+0xc0>)
 8002406:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;                    			//MSB
 8002408:	4b1e      	ldr	r3, [pc, #120]	; (8002484 <MEM_GetID+0xc0>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	021a      	lsls	r2, r3, #8
 800240e:	4b1d      	ldr	r3, [pc, #116]	; (8002484 <MEM_GetID+0xc0>)
 8002410:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002412:	23fa      	movs	r3, #250	; 0xfa
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	1d39      	adds	r1, r7, #4
 8002418:	4819      	ldr	r0, [pc, #100]	; (8002480 <MEM_GetID+0xbc>)
 800241a:	2201      	movs	r2, #1
 800241c:	f004 fb26 	bl	8006a6c <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8002420:	1d3b      	adds	r3, r7, #4
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	001a      	movs	r2, r3
 8002426:	4b17      	ldr	r3, [pc, #92]	; (8002484 <MEM_GetID+0xc0>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	18d2      	adds	r2, r2, r3
 800242c:	4b15      	ldr	r3, [pc, #84]	; (8002484 <MEM_GetID+0xc0>)
 800242e:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;
 8002430:	4b14      	ldr	r3, [pc, #80]	; (8002484 <MEM_GetID+0xc0>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	021a      	lsls	r2, r3, #8
 8002436:	4b13      	ldr	r3, [pc, #76]	; (8002484 <MEM_GetID+0xc0>)
 8002438:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 800243a:	23fa      	movs	r3, #250	; 0xfa
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	1d39      	adds	r1, r7, #4
 8002440:	480f      	ldr	r0, [pc, #60]	; (8002480 <MEM_GetID+0xbc>)
 8002442:	2201      	movs	r2, #1
 8002444:	f004 fb12 	bl	8006a6c <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8002448:	1d3b      	adds	r3, r7, #4
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	001a      	movs	r2, r3
 800244e:	4b0d      	ldr	r3, [pc, #52]	; (8002484 <MEM_GetID+0xc0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	18d2      	adds	r2, r2, r3
 8002454:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <MEM_GetID+0xc0>)
 8002456:	601a      	str	r2, [r3, #0]
		GPIOC->ODR |= 1 << 15;                    			// set cs
 8002458:	4b07      	ldr	r3, [pc, #28]	; (8002478 <MEM_GetID+0xb4>)
 800245a:	695a      	ldr	r2, [r3, #20]
 800245c:	4b06      	ldr	r3, [pc, #24]	; (8002478 <MEM_GetID+0xb4>)
 800245e:	2180      	movs	r1, #128	; 0x80
 8002460:	0209      	lsls	r1, r1, #8
 8002462:	430a      	orrs	r2, r1
 8002464:	615a      	str	r2, [r3, #20]
		return (MEM_ID);
 8002466:	4b07      	ldr	r3, [pc, #28]	; (8002484 <MEM_GetID+0xc0>)
 8002468:	681b      	ldr	r3, [r3, #0]
	}
 800246a:	0018      	movs	r0, r3
 800246c:	46bd      	mov	sp, r7
 800246e:	b002      	add	sp, #8
 8002470:	bd80      	pop	{r7, pc}
 8002472:	46c0      	nop			; (mov r8, r8)
 8002474:	0800a76c 	.word	0x0800a76c
 8002478:	50000800 	.word	0x50000800
 800247c:	ffff7fff 	.word	0xffff7fff
 8002480:	200051b4 	.word	0x200051b4
 8002484:	20005160 	.word	0x20005160

08002488 <cmdExecute>:

	uint16_t Scount(void){

	}
//====================================================================================================================
	uint8_t cmdExecute(uint8_t cmd2Execute){
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	0002      	movs	r2, r0
 8002490:	1dfb      	adds	r3, r7, #7
 8002492:	701a      	strb	r2, [r3, #0]
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 8002494:	4b34      	ldr	r3, [pc, #208]	; (8002568 <cmdExecute+0xe0>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b10      	cmp	r3, #16
 800249a:	d05e      	beq.n	800255a <cmdExecute+0xd2>
			if (bf4me!=0x00){return;}	// protection against false BF resets
 800249c:	4b33      	ldr	r3, [pc, #204]	; (800256c <cmdExecute+0xe4>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d15c      	bne.n	800255e <cmdExecute+0xd6>
		USART2->ICR|=USART_ICR_ORECF;
 80024a4:	4b32      	ldr	r3, [pc, #200]	; (8002570 <cmdExecute+0xe8>)
 80024a6:	6a1a      	ldr	r2, [r3, #32]
 80024a8:	4b31      	ldr	r3, [pc, #196]	; (8002570 <cmdExecute+0xe8>)
 80024aa:	2108      	movs	r1, #8
 80024ac:	430a      	orrs	r2, r1
 80024ae:	621a      	str	r2, [r3, #32]

				}
		if(cmd2Execute==0x10){

				}
		if(cmd2Execute==0x11){
 80024b0:	1dfb      	adds	r3, r7, #7
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b11      	cmp	r3, #17
 80024b6:	d107      	bne.n	80024c8 <cmdExecute+0x40>
			bf4me=0x11;	//set BF flag 4 me
 80024b8:	4b2c      	ldr	r3, [pc, #176]	; (800256c <cmdExecute+0xe4>)
 80024ba:	2211      	movs	r2, #17
 80024bc:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
//			weoShowFullScreen(picNum);
			weoShowFullScreenDMA(picNum);
 80024be:	4b2d      	ldr	r3, [pc, #180]	; (8002574 <cmdExecute+0xec>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	0018      	movs	r0, r3
 80024c4:	f7ff fd8a 	bl	8001fdc <weoShowFullScreenDMA>
				}
		if(cmd2Execute==0x12){
 80024c8:	1dfb      	adds	r3, r7, #7
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b12      	cmp	r3, #18
 80024ce:	d10d      	bne.n	80024ec <cmdExecute+0x64>
			bf4me=0x12;	//set BF flag 4 me
 80024d0:	4b26      	ldr	r3, [pc, #152]	; (800256c <cmdExecute+0xe4>)
 80024d2:	2212      	movs	r2, #18
 80024d4:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
//			weoShowSmallImageDMA(picNum,imX,imY);
			weoShowSmallImage(picNum,imX,imY);
 80024d6:	4b27      	ldr	r3, [pc, #156]	; (8002574 <cmdExecute+0xec>)
 80024d8:	7818      	ldrb	r0, [r3, #0]
 80024da:	4b27      	ldr	r3, [pc, #156]	; (8002578 <cmdExecute+0xf0>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	b2d9      	uxtb	r1, r3
 80024e0:	4b26      	ldr	r3, [pc, #152]	; (800257c <cmdExecute+0xf4>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	001a      	movs	r2, r3
 80024e8:	f7ff fe16 	bl	8002118 <weoShowSmallImage>
				}
		if(cmd2Execute==0x13){
 80024ec:	1dfb      	adds	r3, r7, #7
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b13      	cmp	r3, #19
 80024f2:	d10d      	bne.n	8002510 <cmdExecute+0x88>
			bf4me=0x13;	//set BF flag 4 me
 80024f4:	4b1d      	ldr	r3, [pc, #116]	; (800256c <cmdExecute+0xe4>)
 80024f6:	2213      	movs	r2, #19
 80024f8:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF

//			printASCIIarray_old(imX,imY, strLen,dataASCII);
			printASCIIarray(imX,imY, strLen,dataASCII);
 80024fa:	4b1f      	ldr	r3, [pc, #124]	; (8002578 <cmdExecute+0xf0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	b2d8      	uxtb	r0, r3
 8002500:	4b1e      	ldr	r3, [pc, #120]	; (800257c <cmdExecute+0xf4>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	b2d9      	uxtb	r1, r3
 8002506:	4b1e      	ldr	r3, [pc, #120]	; (8002580 <cmdExecute+0xf8>)
 8002508:	781a      	ldrb	r2, [r3, #0]
 800250a:	4b1e      	ldr	r3, [pc, #120]	; (8002584 <cmdExecute+0xfc>)
 800250c:	f000 f83c 	bl	8002588 <printASCIIarray>
				}
		if(cmd2Execute==0x14){
 8002510:	1dfb      	adds	r3, r7, #7
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b14      	cmp	r3, #20
 8002516:	d102      	bne.n	800251e <cmdExecute+0x96>
			bf4me=0x14;	//set BF flag 4 me
 8002518:	4b14      	ldr	r3, [pc, #80]	; (800256c <cmdExecute+0xe4>)
 800251a:	2214      	movs	r2, #20
 800251c:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF


				}
		if(cmd2Execute==0x15){
 800251e:	1dfb      	adds	r3, r7, #7
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	2b15      	cmp	r3, #21
 8002524:	d108      	bne.n	8002538 <cmdExecute+0xb0>
			if(cmd[3]==0x00){
 8002526:	4b10      	ldr	r3, [pc, #64]	; (8002568 <cmdExecute+0xe0>)
 8002528:	78db      	ldrb	r3, [r3, #3]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <cmdExecute+0xaa>
				weoClear();
 800252e:	f7fe feeb 	bl	8001308 <weoClear>
			}
			bf4me=0x15;	//set BF flag 4 me
 8002532:	4b0e      	ldr	r3, [pc, #56]	; (800256c <cmdExecute+0xe4>)
 8002534:	2215      	movs	r2, #21
 8002536:	701a      	strb	r2, [r3, #0]
				}
		if(cmd2Execute==0x16){
 8002538:	1dfb      	adds	r3, r7, #7
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b16      	cmp	r3, #22
 800253e:	d102      	bne.n	8002546 <cmdExecute+0xbe>
			bf4me=0x16;	//set BF flag 4 me
 8002540:	4b0a      	ldr	r3, [pc, #40]	; (800256c <cmdExecute+0xe4>)
 8002542:	2216      	movs	r2, #22
 8002544:	701a      	strb	r2, [r3, #0]

				}
		if(cmd2Execute==0x00){

				}
		if(cmd2Execute=0x00){
 8002546:	1dfb      	adds	r3, r7, #7
 8002548:	2200      	movs	r2, #0
 800254a:	701a      	strb	r2, [r3, #0]

				}
//			}
//		}
		USART2->ICR|=USART_ICR_ORECF;
 800254c:	4b08      	ldr	r3, [pc, #32]	; (8002570 <cmdExecute+0xe8>)
 800254e:	6a1a      	ldr	r2, [r3, #32]
 8002550:	4b07      	ldr	r3, [pc, #28]	; (8002570 <cmdExecute+0xe8>)
 8002552:	2108      	movs	r1, #8
 8002554:	430a      	orrs	r2, r1
 8002556:	621a      	str	r2, [r3, #32]
 8002558:	e002      	b.n	8002560 <cmdExecute+0xd8>
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 800255a:	46c0      	nop			; (mov r8, r8)
 800255c:	e000      	b.n	8002560 <cmdExecute+0xd8>
			if (bf4me!=0x00){return;}	// protection against false BF resets
 800255e:	46c0      	nop			; (mov r8, r8)
	}
 8002560:	0018      	movs	r0, r3
 8002562:	46bd      	mov	sp, r7
 8002564:	b002      	add	sp, #8
 8002566:	bd80      	pop	{r7, pc}
 8002568:	200075e4 	.word	0x200075e4
 800256c:	200054b4 	.word	0x200054b4
 8002570:	40004400 	.word	0x40004400
 8002574:	2000545d 	.word	0x2000545d
 8002578:	200052f4 	.word	0x200052f4
 800257c:	20005388 	.word	0x20005388
 8002580:	2000549d 	.word	0x2000549d
 8002584:	200051a4 	.word	0x200051a4

08002588 <printASCIIarray>:
//========================================================================================================================
	uint8_t printASCIIarray(uint8_t imX,uint8_t imY,uint8_t strLen,uint8_t dataASCII[]){
 8002588:	b5b0      	push	{r4, r5, r7, lr}
 800258a:	b092      	sub	sp, #72	; 0x48
 800258c:	af02      	add	r7, sp, #8
 800258e:	0004      	movs	r4, r0
 8002590:	0008      	movs	r0, r1
 8002592:	0011      	movs	r1, r2
 8002594:	603b      	str	r3, [r7, #0]
 8002596:	1dfb      	adds	r3, r7, #7
 8002598:	1c22      	adds	r2, r4, #0
 800259a:	701a      	strb	r2, [r3, #0]
 800259c:	1dbb      	adds	r3, r7, #6
 800259e:	1c02      	adds	r2, r0, #0
 80025a0:	701a      	strb	r2, [r3, #0]
 80025a2:	1d7b      	adds	r3, r7, #5
 80025a4:	1c0a      	adds	r2, r1, #0
 80025a6:	701a      	strb	r2, [r3, #0]
			uint8_t j,Y_height,X_width,ASCII_X;
			uint8_t weoBuffer[49];
			uint16_t i;
			ASCII_X=imX;
 80025a8:	233e      	movs	r3, #62	; 0x3e
 80025aa:	18fb      	adds	r3, r7, r3
 80025ac:	1dfa      	adds	r2, r7, #7
 80025ae:	7812      	ldrb	r2, [r2, #0]
 80025b0:	701a      	strb	r2, [r3, #0]

			for (i=0;i<strLen;i++){
 80025b2:	233c      	movs	r3, #60	; 0x3c
 80025b4:	18fb      	adds	r3, r7, r3
 80025b6:	2200      	movs	r2, #0
 80025b8:	801a      	strh	r2, [r3, #0]
 80025ba:	e04f      	b.n	800265c <printASCIIarray+0xd4>
				for(j=0;j<49;j++){
 80025bc:	233f      	movs	r3, #63	; 0x3f
 80025be:	18fb      	adds	r3, r7, r3
 80025c0:	2200      	movs	r2, #0
 80025c2:	701a      	strb	r2, [r3, #0]
 80025c4:	e01b      	b.n	80025fe <printASCIIarray+0x76>
					weoBuffer[j]=FONT_X[dataASCII[i]][j];
 80025c6:	233c      	movs	r3, #60	; 0x3c
 80025c8:	18fb      	adds	r3, r7, r3
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	18d3      	adds	r3, r2, r3
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	001a      	movs	r2, r3
 80025d4:	253f      	movs	r5, #63	; 0x3f
 80025d6:	197b      	adds	r3, r7, r5
 80025d8:	7818      	ldrb	r0, [r3, #0]
 80025da:	197b      	adds	r3, r7, r5
 80025dc:	7819      	ldrb	r1, [r3, #0]
 80025de:	4c33      	ldr	r4, [pc, #204]	; (80026ac <printASCIIarray+0x124>)
 80025e0:	0013      	movs	r3, r2
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	1a9b      	subs	r3, r3, r2
 80025e6:	00da      	lsls	r2, r3, #3
 80025e8:	1ad2      	subs	r2, r2, r3
 80025ea:	18a3      	adds	r3, r4, r2
 80025ec:	5c1a      	ldrb	r2, [r3, r0]
 80025ee:	2308      	movs	r3, #8
 80025f0:	18fb      	adds	r3, r7, r3
 80025f2:	545a      	strb	r2, [r3, r1]
				for(j=0;j<49;j++){
 80025f4:	197b      	adds	r3, r7, r5
 80025f6:	781a      	ldrb	r2, [r3, #0]
 80025f8:	197b      	adds	r3, r7, r5
 80025fa:	3201      	adds	r2, #1
 80025fc:	701a      	strb	r2, [r3, #0]
 80025fe:	233f      	movs	r3, #63	; 0x3f
 8002600:	18fb      	adds	r3, r7, r3
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b30      	cmp	r3, #48	; 0x30
 8002606:	d9de      	bls.n	80025c6 <printASCIIarray+0x3e>
					}
				weoDrawRectangleFilled(ASCII_X,imY,ASCII_X+X_increment-0,imY+ASCII_height-0,0xFF,weoBuffer);
 8002608:	4b29      	ldr	r3, [pc, #164]	; (80026b0 <printASCIIarray+0x128>)
 800260a:	781a      	ldrb	r2, [r3, #0]
 800260c:	203e      	movs	r0, #62	; 0x3e
 800260e:	183b      	adds	r3, r7, r0
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	18d3      	adds	r3, r2, r3
 8002614:	b2dc      	uxtb	r4, r3
 8002616:	4b27      	ldr	r3, [pc, #156]	; (80026b4 <printASCIIarray+0x12c>)
 8002618:	781a      	ldrb	r2, [r3, #0]
 800261a:	1dbb      	adds	r3, r7, #6
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	18d3      	adds	r3, r2, r3
 8002620:	b2da      	uxtb	r2, r3
 8002622:	1dbb      	adds	r3, r7, #6
 8002624:	7819      	ldrb	r1, [r3, #0]
 8002626:	0005      	movs	r5, r0
 8002628:	183b      	adds	r3, r7, r0
 800262a:	7818      	ldrb	r0, [r3, #0]
 800262c:	2308      	movs	r3, #8
 800262e:	18fb      	adds	r3, r7, r3
 8002630:	9301      	str	r3, [sp, #4]
 8002632:	23ff      	movs	r3, #255	; 0xff
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	0013      	movs	r3, r2
 8002638:	0022      	movs	r2, r4
 800263a:	f7fe fec9 	bl	80013d0 <weoDrawRectangleFilled>
				ASCII_X += X_increment+1;
 800263e:	4b1c      	ldr	r3, [pc, #112]	; (80026b0 <printASCIIarray+0x128>)
 8002640:	781a      	ldrb	r2, [r3, #0]
 8002642:	197b      	adds	r3, r7, r5
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	18d3      	adds	r3, r2, r3
 8002648:	b2da      	uxtb	r2, r3
 800264a:	197b      	adds	r3, r7, r5
 800264c:	3201      	adds	r2, #1
 800264e:	701a      	strb	r2, [r3, #0]
			for (i=0;i<strLen;i++){
 8002650:	213c      	movs	r1, #60	; 0x3c
 8002652:	187b      	adds	r3, r7, r1
 8002654:	881a      	ldrh	r2, [r3, #0]
 8002656:	187b      	adds	r3, r7, r1
 8002658:	3201      	adds	r2, #1
 800265a:	801a      	strh	r2, [r3, #0]
 800265c:	1d7b      	adds	r3, r7, #5
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	b29b      	uxth	r3, r3
 8002662:	213c      	movs	r1, #60	; 0x3c
 8002664:	187a      	adds	r2, r7, r1
 8002666:	8812      	ldrh	r2, [r2, #0]
 8002668:	429a      	cmp	r2, r3
 800266a:	d3a7      	bcc.n	80025bc <printASCIIarray+0x34>
			}
			for(i=0;i<49;i++){
 800266c:	187b      	adds	r3, r7, r1
 800266e:	2200      	movs	r2, #0
 8002670:	801a      	strh	r2, [r3, #0]
 8002672:	e00b      	b.n	800268c <printASCIIarray+0x104>
			weoBuffer[i]=0x00;
 8002674:	203c      	movs	r0, #60	; 0x3c
 8002676:	183b      	adds	r3, r7, r0
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	2208      	movs	r2, #8
 800267c:	18ba      	adds	r2, r7, r2
 800267e:	2100      	movs	r1, #0
 8002680:	54d1      	strb	r1, [r2, r3]
			for(i=0;i<49;i++){
 8002682:	183b      	adds	r3, r7, r0
 8002684:	881a      	ldrh	r2, [r3, #0]
 8002686:	183b      	adds	r3, r7, r0
 8002688:	3201      	adds	r2, #1
 800268a:	801a      	strh	r2, [r3, #0]
 800268c:	233c      	movs	r3, #60	; 0x3c
 800268e:	18fb      	adds	r3, r7, r3
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	2b30      	cmp	r3, #48	; 0x30
 8002694:	d9ee      	bls.n	8002674 <printASCIIarray+0xec>
			}
			GPIOC->ODR |= 1 << 6;	//set BF
 8002696:	4b08      	ldr	r3, [pc, #32]	; (80026b8 <printASCIIarray+0x130>)
 8002698:	695a      	ldr	r2, [r3, #20]
 800269a:	4b07      	ldr	r3, [pc, #28]	; (80026b8 <printASCIIarray+0x130>)
 800269c:	2140      	movs	r1, #64	; 0x40
 800269e:	430a      	orrs	r2, r1
 80026a0:	615a      	str	r2, [r3, #20]

		}
 80026a2:	46c0      	nop			; (mov r8, r8)
 80026a4:	0018      	movs	r0, r3
 80026a6:	46bd      	mov	sp, r7
 80026a8:	b010      	add	sp, #64	; 0x40
 80026aa:	bdb0      	pop	{r4, r5, r7, pc}
 80026ac:	20000000 	.word	0x20000000
 80026b0:	20003130 	.word	0x20003130
 80026b4:	20003131 	.word	0x20003131
 80026b8:	50000800 	.word	0x50000800

080026bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80026c0:	46c0      	nop			; (mov r8, r8)
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
	...

080026c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ce:	4b11      	ldr	r3, [pc, #68]	; (8002714 <HAL_MspInit+0x4c>)
 80026d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026d2:	4b10      	ldr	r3, [pc, #64]	; (8002714 <HAL_MspInit+0x4c>)
 80026d4:	2101      	movs	r1, #1
 80026d6:	430a      	orrs	r2, r1
 80026d8:	641a      	str	r2, [r3, #64]	; 0x40
 80026da:	4b0e      	ldr	r3, [pc, #56]	; (8002714 <HAL_MspInit+0x4c>)
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	2201      	movs	r2, #1
 80026e0:	4013      	ands	r3, r2
 80026e2:	607b      	str	r3, [r7, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026e6:	4b0b      	ldr	r3, [pc, #44]	; (8002714 <HAL_MspInit+0x4c>)
 80026e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026ea:	4b0a      	ldr	r3, [pc, #40]	; (8002714 <HAL_MspInit+0x4c>)
 80026ec:	2180      	movs	r1, #128	; 0x80
 80026ee:	0549      	lsls	r1, r1, #21
 80026f0:	430a      	orrs	r2, r1
 80026f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80026f4:	4b07      	ldr	r3, [pc, #28]	; (8002714 <HAL_MspInit+0x4c>)
 80026f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026f8:	2380      	movs	r3, #128	; 0x80
 80026fa:	055b      	lsls	r3, r3, #21
 80026fc:	4013      	ands	r3, r2
 80026fe:	603b      	str	r3, [r7, #0]
 8002700:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 8002702:	2380      	movs	r3, #128	; 0x80
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	0018      	movs	r0, r3
 8002708:	f000 fd04 	bl	8003114 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800270c:	46c0      	nop			; (mov r8, r8)
 800270e:	46bd      	mov	sp, r7
 8002710:	b002      	add	sp, #8
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40021000 	.word	0x40021000

08002718 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8002718:	b590      	push	{r4, r7, lr}
 800271a:	b089      	sub	sp, #36	; 0x24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002720:	240c      	movs	r4, #12
 8002722:	193b      	adds	r3, r7, r4
 8002724:	0018      	movs	r0, r3
 8002726:	2314      	movs	r3, #20
 8002728:	001a      	movs	r2, r3
 800272a:	2100      	movs	r1, #0
 800272c:	f008 f80a 	bl	800a744 <memset>
  if(hcomp->Instance==COMP1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a10      	ldr	r2, [pc, #64]	; (8002778 <HAL_COMP_MspInit+0x60>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d11a      	bne.n	8002770 <HAL_COMP_MspInit+0x58>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800273a:	4b10      	ldr	r3, [pc, #64]	; (800277c <HAL_COMP_MspInit+0x64>)
 800273c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800273e:	4b0f      	ldr	r3, [pc, #60]	; (800277c <HAL_COMP_MspInit+0x64>)
 8002740:	2102      	movs	r1, #2
 8002742:	430a      	orrs	r2, r1
 8002744:	635a      	str	r2, [r3, #52]	; 0x34
 8002746:	4b0d      	ldr	r3, [pc, #52]	; (800277c <HAL_COMP_MspInit+0x64>)
 8002748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800274a:	2202      	movs	r2, #2
 800274c:	4013      	ands	r3, r2
 800274e:	60bb      	str	r3, [r7, #8]
 8002750:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002752:	193b      	adds	r3, r7, r4
 8002754:	2204      	movs	r2, #4
 8002756:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002758:	193b      	adds	r3, r7, r4
 800275a:	2203      	movs	r2, #3
 800275c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275e:	193b      	adds	r3, r7, r4
 8002760:	2200      	movs	r2, #0
 8002762:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002764:	193b      	adds	r3, r7, r4
 8002766:	4a06      	ldr	r2, [pc, #24]	; (8002780 <HAL_COMP_MspInit+0x68>)
 8002768:	0019      	movs	r1, r3
 800276a:	0010      	movs	r0, r2
 800276c:	f001 faee 	bl	8003d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 8002770:	46c0      	nop			; (mov r8, r8)
 8002772:	46bd      	mov	sp, r7
 8002774:	b009      	add	sp, #36	; 0x24
 8002776:	bd90      	pop	{r4, r7, pc}
 8002778:	40010200 	.word	0x40010200
 800277c:	40021000 	.word	0x40021000
 8002780:	50000400 	.word	0x50000400

08002784 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002784:	b590      	push	{r4, r7, lr}
 8002786:	b08b      	sub	sp, #44	; 0x2c
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800278c:	2414      	movs	r4, #20
 800278e:	193b      	adds	r3, r7, r4
 8002790:	0018      	movs	r0, r3
 8002792:	2314      	movs	r3, #20
 8002794:	001a      	movs	r2, r3
 8002796:	2100      	movs	r1, #0
 8002798:	f007 ffd4 	bl	800a744 <memset>
  if(hi2c->Instance==I2C1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a20      	ldr	r2, [pc, #128]	; (8002824 <HAL_I2C_MspInit+0xa0>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d139      	bne.n	800281a <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a6:	4b20      	ldr	r3, [pc, #128]	; (8002828 <HAL_I2C_MspInit+0xa4>)
 80027a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027aa:	4b1f      	ldr	r3, [pc, #124]	; (8002828 <HAL_I2C_MspInit+0xa4>)
 80027ac:	2101      	movs	r1, #1
 80027ae:	430a      	orrs	r2, r1
 80027b0:	635a      	str	r2, [r3, #52]	; 0x34
 80027b2:	4b1d      	ldr	r3, [pc, #116]	; (8002828 <HAL_I2C_MspInit+0xa4>)
 80027b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b6:	2201      	movs	r2, #1
 80027b8:	4013      	ands	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]
 80027bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80027be:	193b      	adds	r3, r7, r4
 80027c0:	22c0      	movs	r2, #192	; 0xc0
 80027c2:	00d2      	lsls	r2, r2, #3
 80027c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027c6:	0021      	movs	r1, r4
 80027c8:	187b      	adds	r3, r7, r1
 80027ca:	2212      	movs	r2, #18
 80027cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027ce:	187b      	adds	r3, r7, r1
 80027d0:	2201      	movs	r2, #1
 80027d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d4:	187b      	adds	r3, r7, r1
 80027d6:	2200      	movs	r2, #0
 80027d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80027da:	187b      	adds	r3, r7, r1
 80027dc:	2206      	movs	r2, #6
 80027de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e0:	187a      	adds	r2, r7, r1
 80027e2:	23a0      	movs	r3, #160	; 0xa0
 80027e4:	05db      	lsls	r3, r3, #23
 80027e6:	0011      	movs	r1, r2
 80027e8:	0018      	movs	r0, r3
 80027ea:	f001 faaf 	bl	8003d4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027ee:	4b0e      	ldr	r3, [pc, #56]	; (8002828 <HAL_I2C_MspInit+0xa4>)
 80027f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027f2:	4b0d      	ldr	r3, [pc, #52]	; (8002828 <HAL_I2C_MspInit+0xa4>)
 80027f4:	2180      	movs	r1, #128	; 0x80
 80027f6:	0389      	lsls	r1, r1, #14
 80027f8:	430a      	orrs	r2, r1
 80027fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80027fc:	4b0a      	ldr	r3, [pc, #40]	; (8002828 <HAL_I2C_MspInit+0xa4>)
 80027fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002800:	2380      	movs	r3, #128	; 0x80
 8002802:	039b      	lsls	r3, r3, #14
 8002804:	4013      	ands	r3, r2
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800280a:	2200      	movs	r2, #0
 800280c:	2100      	movs	r1, #0
 800280e:	2017      	movs	r0, #23
 8002810:	f000 ffa2 	bl	8003758 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8002814:	2017      	movs	r0, #23
 8002816:	f000 ffb4 	bl	8003782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800281a:	46c0      	nop			; (mov r8, r8)
 800281c:	46bd      	mov	sp, r7
 800281e:	b00b      	add	sp, #44	; 0x2c
 8002820:	bd90      	pop	{r4, r7, pc}
 8002822:	46c0      	nop			; (mov r8, r8)
 8002824:	40005400 	.word	0x40005400
 8002828:	40021000 	.word	0x40021000

0800282c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800282c:	b590      	push	{r4, r7, lr}
 800282e:	b08b      	sub	sp, #44	; 0x2c
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002834:	2414      	movs	r4, #20
 8002836:	193b      	adds	r3, r7, r4
 8002838:	0018      	movs	r0, r3
 800283a:	2314      	movs	r3, #20
 800283c:	001a      	movs	r2, r3
 800283e:	2100      	movs	r1, #0
 8002840:	f007 ff80 	bl	800a744 <memset>
  if(hi2s->Instance==SPI1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a47      	ldr	r2, [pc, #284]	; (8002968 <HAL_I2S_MspInit+0x13c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d000      	beq.n	8002850 <HAL_I2S_MspInit+0x24>
 800284e:	e086      	b.n	800295e <HAL_I2S_MspInit+0x132>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002850:	4b46      	ldr	r3, [pc, #280]	; (800296c <HAL_I2S_MspInit+0x140>)
 8002852:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002854:	4b45      	ldr	r3, [pc, #276]	; (800296c <HAL_I2S_MspInit+0x140>)
 8002856:	2180      	movs	r1, #128	; 0x80
 8002858:	0149      	lsls	r1, r1, #5
 800285a:	430a      	orrs	r2, r1
 800285c:	641a      	str	r2, [r3, #64]	; 0x40
 800285e:	4b43      	ldr	r3, [pc, #268]	; (800296c <HAL_I2S_MspInit+0x140>)
 8002860:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002862:	2380      	movs	r3, #128	; 0x80
 8002864:	015b      	lsls	r3, r3, #5
 8002866:	4013      	ands	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
 800286a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800286c:	4b3f      	ldr	r3, [pc, #252]	; (800296c <HAL_I2S_MspInit+0x140>)
 800286e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002870:	4b3e      	ldr	r3, [pc, #248]	; (800296c <HAL_I2S_MspInit+0x140>)
 8002872:	2101      	movs	r1, #1
 8002874:	430a      	orrs	r2, r1
 8002876:	635a      	str	r2, [r3, #52]	; 0x34
 8002878:	4b3c      	ldr	r3, [pc, #240]	; (800296c <HAL_I2S_MspInit+0x140>)
 800287a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800287c:	2201      	movs	r2, #1
 800287e:	4013      	ands	r3, r2
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002884:	4b39      	ldr	r3, [pc, #228]	; (800296c <HAL_I2S_MspInit+0x140>)
 8002886:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002888:	4b38      	ldr	r3, [pc, #224]	; (800296c <HAL_I2S_MspInit+0x140>)
 800288a:	2102      	movs	r1, #2
 800288c:	430a      	orrs	r2, r1
 800288e:	635a      	str	r2, [r3, #52]	; 0x34
 8002890:	4b36      	ldr	r3, [pc, #216]	; (800296c <HAL_I2S_MspInit+0x140>)
 8002892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002894:	2202      	movs	r2, #2
 8002896:	4013      	ands	r3, r2
 8002898:	60bb      	str	r3, [r7, #8]
 800289a:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> I2S1_WS
    PB3     ------> I2S1_CK
    PB4     ------> I2S1_MCK
    PB5     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800289c:	193b      	adds	r3, r7, r4
 800289e:	2280      	movs	r2, #128	; 0x80
 80028a0:	0212      	lsls	r2, r2, #8
 80028a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a4:	193b      	adds	r3, r7, r4
 80028a6:	2202      	movs	r2, #2
 80028a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028aa:	193b      	adds	r3, r7, r4
 80028ac:	2200      	movs	r2, #0
 80028ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b0:	193b      	adds	r3, r7, r4
 80028b2:	2200      	movs	r2, #0
 80028b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80028b6:	193b      	adds	r3, r7, r4
 80028b8:	2200      	movs	r2, #0
 80028ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028bc:	193a      	adds	r2, r7, r4
 80028be:	23a0      	movs	r3, #160	; 0xa0
 80028c0:	05db      	lsls	r3, r3, #23
 80028c2:	0011      	movs	r1, r2
 80028c4:	0018      	movs	r0, r3
 80028c6:	f001 fa41 	bl	8003d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80028ca:	0021      	movs	r1, r4
 80028cc:	187b      	adds	r3, r7, r1
 80028ce:	2238      	movs	r2, #56	; 0x38
 80028d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d2:	187b      	adds	r3, r7, r1
 80028d4:	2202      	movs	r2, #2
 80028d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d8:	187b      	adds	r3, r7, r1
 80028da:	2200      	movs	r2, #0
 80028dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028de:	187b      	adds	r3, r7, r1
 80028e0:	2200      	movs	r2, #0
 80028e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80028e4:	187b      	adds	r3, r7, r1
 80028e6:	2200      	movs	r2, #0
 80028e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ea:	187b      	adds	r3, r7, r1
 80028ec:	4a20      	ldr	r2, [pc, #128]	; (8002970 <HAL_I2S_MspInit+0x144>)
 80028ee:	0019      	movs	r1, r3
 80028f0:	0010      	movs	r0, r2
 80028f2:	f001 fa2b 	bl	8003d4c <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 80028f6:	4b1f      	ldr	r3, [pc, #124]	; (8002974 <HAL_I2S_MspInit+0x148>)
 80028f8:	4a1f      	ldr	r2, [pc, #124]	; (8002978 <HAL_I2S_MspInit+0x14c>)
 80028fa:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80028fc:	4b1d      	ldr	r3, [pc, #116]	; (8002974 <HAL_I2S_MspInit+0x148>)
 80028fe:	2211      	movs	r2, #17
 8002900:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002902:	4b1c      	ldr	r3, [pc, #112]	; (8002974 <HAL_I2S_MspInit+0x148>)
 8002904:	2210      	movs	r2, #16
 8002906:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002908:	4b1a      	ldr	r3, [pc, #104]	; (8002974 <HAL_I2S_MspInit+0x148>)
 800290a:	2200      	movs	r2, #0
 800290c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800290e:	4b19      	ldr	r3, [pc, #100]	; (8002974 <HAL_I2S_MspInit+0x148>)
 8002910:	2280      	movs	r2, #128	; 0x80
 8002912:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002914:	4b17      	ldr	r3, [pc, #92]	; (8002974 <HAL_I2S_MspInit+0x148>)
 8002916:	2280      	movs	r2, #128	; 0x80
 8002918:	0052      	lsls	r2, r2, #1
 800291a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800291c:	4b15      	ldr	r3, [pc, #84]	; (8002974 <HAL_I2S_MspInit+0x148>)
 800291e:	2280      	movs	r2, #128	; 0x80
 8002920:	00d2      	lsls	r2, r2, #3
 8002922:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002924:	4b13      	ldr	r3, [pc, #76]	; (8002974 <HAL_I2S_MspInit+0x148>)
 8002926:	2200      	movs	r2, #0
 8002928:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800292a:	4b12      	ldr	r3, [pc, #72]	; (8002974 <HAL_I2S_MspInit+0x148>)
 800292c:	22c0      	movs	r2, #192	; 0xc0
 800292e:	0192      	lsls	r2, r2, #6
 8002930:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002932:	4b10      	ldr	r3, [pc, #64]	; (8002974 <HAL_I2S_MspInit+0x148>)
 8002934:	0018      	movs	r0, r3
 8002936:	f000 ff41 	bl	80037bc <HAL_DMA_Init>
 800293a:	1e03      	subs	r3, r0, #0
 800293c:	d001      	beq.n	8002942 <HAL_I2S_MspInit+0x116>
    {
      Error_Handler();
 800293e:	f7ff febd 	bl	80026bc <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a0b      	ldr	r2, [pc, #44]	; (8002974 <HAL_I2S_MspInit+0x148>)
 8002946:	62da      	str	r2, [r3, #44]	; 0x2c
 8002948:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <HAL_I2S_MspInit+0x148>)
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	629a      	str	r2, [r3, #40]	; 0x28

    /* I2S1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800294e:	2200      	movs	r2, #0
 8002950:	2100      	movs	r1, #0
 8002952:	2019      	movs	r0, #25
 8002954:	f000 ff00 	bl	8003758 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002958:	2019      	movs	r0, #25
 800295a:	f000 ff12 	bl	8003782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800295e:	46c0      	nop			; (mov r8, r8)
 8002960:	46bd      	mov	sp, r7
 8002962:	b00b      	add	sp, #44	; 0x2c
 8002964:	bd90      	pop	{r4, r7, pc}
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	40013000 	.word	0x40013000
 800296c:	40021000 	.word	0x40021000
 8002970:	50000400 	.word	0x50000400
 8002974:	20005580 	.word	0x20005580
 8002978:	40020008 	.word	0x40020008

0800297c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800297c:	b590      	push	{r4, r7, lr}
 800297e:	b08b      	sub	sp, #44	; 0x2c
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002984:	2414      	movs	r4, #20
 8002986:	193b      	adds	r3, r7, r4
 8002988:	0018      	movs	r0, r3
 800298a:	2314      	movs	r3, #20
 800298c:	001a      	movs	r2, r3
 800298e:	2100      	movs	r1, #0
 8002990:	f007 fed8 	bl	800a744 <memset>
  if(hspi->Instance==SPI2)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a54      	ldr	r2, [pc, #336]	; (8002aec <HAL_SPI_MspInit+0x170>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d000      	beq.n	80029a0 <HAL_SPI_MspInit+0x24>
 800299e:	e0a0      	b.n	8002ae2 <HAL_SPI_MspInit+0x166>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80029a0:	4b53      	ldr	r3, [pc, #332]	; (8002af0 <HAL_SPI_MspInit+0x174>)
 80029a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029a4:	4b52      	ldr	r3, [pc, #328]	; (8002af0 <HAL_SPI_MspInit+0x174>)
 80029a6:	2180      	movs	r1, #128	; 0x80
 80029a8:	01c9      	lsls	r1, r1, #7
 80029aa:	430a      	orrs	r2, r1
 80029ac:	63da      	str	r2, [r3, #60]	; 0x3c
 80029ae:	4b50      	ldr	r3, [pc, #320]	; (8002af0 <HAL_SPI_MspInit+0x174>)
 80029b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029b2:	2380      	movs	r3, #128	; 0x80
 80029b4:	01db      	lsls	r3, r3, #7
 80029b6:	4013      	ands	r3, r2
 80029b8:	613b      	str	r3, [r7, #16]
 80029ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029bc:	4b4c      	ldr	r3, [pc, #304]	; (8002af0 <HAL_SPI_MspInit+0x174>)
 80029be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029c0:	4b4b      	ldr	r3, [pc, #300]	; (8002af0 <HAL_SPI_MspInit+0x174>)
 80029c2:	2102      	movs	r1, #2
 80029c4:	430a      	orrs	r2, r1
 80029c6:	635a      	str	r2, [r3, #52]	; 0x34
 80029c8:	4b49      	ldr	r3, [pc, #292]	; (8002af0 <HAL_SPI_MspInit+0x174>)
 80029ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029cc:	2202      	movs	r2, #2
 80029ce:	4013      	ands	r3, r2
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB6     ------> SPI2_MISO
    PB7     ------> SPI2_MOSI
    PB8     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80029d4:	193b      	adds	r3, r7, r4
 80029d6:	2240      	movs	r2, #64	; 0x40
 80029d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029da:	193b      	adds	r3, r7, r4
 80029dc:	2202      	movs	r2, #2
 80029de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e0:	193b      	adds	r3, r7, r4
 80029e2:	2200      	movs	r2, #0
 80029e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e6:	193b      	adds	r3, r7, r4
 80029e8:	2200      	movs	r2, #0
 80029ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI2;
 80029ec:	193b      	adds	r3, r7, r4
 80029ee:	2204      	movs	r2, #4
 80029f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029f2:	193b      	adds	r3, r7, r4
 80029f4:	4a3f      	ldr	r2, [pc, #252]	; (8002af4 <HAL_SPI_MspInit+0x178>)
 80029f6:	0019      	movs	r1, r3
 80029f8:	0010      	movs	r0, r2
 80029fa:	f001 f9a7 	bl	8003d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80029fe:	0021      	movs	r1, r4
 8002a00:	187b      	adds	r3, r7, r1
 8002a02:	22c0      	movs	r2, #192	; 0xc0
 8002a04:	0052      	lsls	r2, r2, #1
 8002a06:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a08:	187b      	adds	r3, r7, r1
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0e:	187b      	adds	r3, r7, r1
 8002a10:	2200      	movs	r2, #0
 8002a12:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a14:	187b      	adds	r3, r7, r1
 8002a16:	2200      	movs	r2, #0
 8002a18:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8002a1a:	187b      	adds	r3, r7, r1
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a20:	187b      	adds	r3, r7, r1
 8002a22:	4a34      	ldr	r2, [pc, #208]	; (8002af4 <HAL_SPI_MspInit+0x178>)
 8002a24:	0019      	movs	r1, r3
 8002a26:	0010      	movs	r0, r2
 8002a28:	f001 f990 	bl	8003d4c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel2;
 8002a2c:	4b32      	ldr	r3, [pc, #200]	; (8002af8 <HAL_SPI_MspInit+0x17c>)
 8002a2e:	4a33      	ldr	r2, [pc, #204]	; (8002afc <HAL_SPI_MspInit+0x180>)
 8002a30:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8002a32:	4b31      	ldr	r3, [pc, #196]	; (8002af8 <HAL_SPI_MspInit+0x17c>)
 8002a34:	2212      	movs	r2, #18
 8002a36:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a38:	4b2f      	ldr	r3, [pc, #188]	; (8002af8 <HAL_SPI_MspInit+0x17c>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a3e:	4b2e      	ldr	r3, [pc, #184]	; (8002af8 <HAL_SPI_MspInit+0x17c>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a44:	4b2c      	ldr	r3, [pc, #176]	; (8002af8 <HAL_SPI_MspInit+0x17c>)
 8002a46:	2280      	movs	r2, #128	; 0x80
 8002a48:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a4a:	4b2b      	ldr	r3, [pc, #172]	; (8002af8 <HAL_SPI_MspInit+0x17c>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a50:	4b29      	ldr	r3, [pc, #164]	; (8002af8 <HAL_SPI_MspInit+0x17c>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8002a56:	4b28      	ldr	r3, [pc, #160]	; (8002af8 <HAL_SPI_MspInit+0x17c>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002a5c:	4b26      	ldr	r3, [pc, #152]	; (8002af8 <HAL_SPI_MspInit+0x17c>)
 8002a5e:	2280      	movs	r2, #128	; 0x80
 8002a60:	0192      	lsls	r2, r2, #6
 8002a62:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002a64:	4b24      	ldr	r3, [pc, #144]	; (8002af8 <HAL_SPI_MspInit+0x17c>)
 8002a66:	0018      	movs	r0, r3
 8002a68:	f000 fea8 	bl	80037bc <HAL_DMA_Init>
 8002a6c:	1e03      	subs	r3, r0, #0
 8002a6e:	d001      	beq.n	8002a74 <HAL_SPI_MspInit+0xf8>
    {
      Error_Handler();
 8002a70:	f7ff fe24 	bl	80026bc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a20      	ldr	r2, [pc, #128]	; (8002af8 <HAL_SPI_MspInit+0x17c>)
 8002a78:	659a      	str	r2, [r3, #88]	; 0x58
 8002a7a:	4b1f      	ldr	r3, [pc, #124]	; (8002af8 <HAL_SPI_MspInit+0x17c>)
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel3;
 8002a80:	4b1f      	ldr	r3, [pc, #124]	; (8002b00 <HAL_SPI_MspInit+0x184>)
 8002a82:	4a20      	ldr	r2, [pc, #128]	; (8002b04 <HAL_SPI_MspInit+0x188>)
 8002a84:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8002a86:	4b1e      	ldr	r3, [pc, #120]	; (8002b00 <HAL_SPI_MspInit+0x184>)
 8002a88:	2213      	movs	r2, #19
 8002a8a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a8c:	4b1c      	ldr	r3, [pc, #112]	; (8002b00 <HAL_SPI_MspInit+0x184>)
 8002a8e:	2210      	movs	r2, #16
 8002a90:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a92:	4b1b      	ldr	r3, [pc, #108]	; (8002b00 <HAL_SPI_MspInit+0x184>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a98:	4b19      	ldr	r3, [pc, #100]	; (8002b00 <HAL_SPI_MspInit+0x184>)
 8002a9a:	2280      	movs	r2, #128	; 0x80
 8002a9c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a9e:	4b18      	ldr	r3, [pc, #96]	; (8002b00 <HAL_SPI_MspInit+0x184>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002aa4:	4b16      	ldr	r3, [pc, #88]	; (8002b00 <HAL_SPI_MspInit+0x184>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002aaa:	4b15      	ldr	r3, [pc, #84]	; (8002b00 <HAL_SPI_MspInit+0x184>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ab0:	4b13      	ldr	r3, [pc, #76]	; (8002b00 <HAL_SPI_MspInit+0x184>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002ab6:	4b12      	ldr	r3, [pc, #72]	; (8002b00 <HAL_SPI_MspInit+0x184>)
 8002ab8:	0018      	movs	r0, r3
 8002aba:	f000 fe7f 	bl	80037bc <HAL_DMA_Init>
 8002abe:	1e03      	subs	r3, r0, #0
 8002ac0:	d001      	beq.n	8002ac6 <HAL_SPI_MspInit+0x14a>
    {
      Error_Handler();
 8002ac2:	f7ff fdfb 	bl	80026bc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a0d      	ldr	r2, [pc, #52]	; (8002b00 <HAL_SPI_MspInit+0x184>)
 8002aca:	655a      	str	r2, [r3, #84]	; 0x54
 8002acc:	4b0c      	ldr	r3, [pc, #48]	; (8002b00 <HAL_SPI_MspInit+0x184>)
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	201a      	movs	r0, #26
 8002ad8:	f000 fe3e 	bl	8003758 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002adc:	201a      	movs	r0, #26
 8002ade:	f000 fe50 	bl	8003782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002ae2:	46c0      	nop			; (mov r8, r8)
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	b00b      	add	sp, #44	; 0x2c
 8002ae8:	bd90      	pop	{r4, r7, pc}
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	40003800 	.word	0x40003800
 8002af0:	40021000 	.word	0x40021000
 8002af4:	50000400 	.word	0x50000400
 8002af8:	20005294 	.word	0x20005294
 8002afc:	4002001c 	.word	0x4002001c
 8002b00:	20005520 	.word	0x20005520
 8002b04:	40020030 	.word	0x40020030

08002b08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a0a      	ldr	r2, [pc, #40]	; (8002b40 <HAL_TIM_Base_MspInit+0x38>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d10d      	bne.n	8002b36 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b1a:	4b0a      	ldr	r3, [pc, #40]	; (8002b44 <HAL_TIM_Base_MspInit+0x3c>)
 8002b1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b1e:	4b09      	ldr	r3, [pc, #36]	; (8002b44 <HAL_TIM_Base_MspInit+0x3c>)
 8002b20:	2180      	movs	r1, #128	; 0x80
 8002b22:	0109      	lsls	r1, r1, #4
 8002b24:	430a      	orrs	r2, r1
 8002b26:	641a      	str	r2, [r3, #64]	; 0x40
 8002b28:	4b06      	ldr	r3, [pc, #24]	; (8002b44 <HAL_TIM_Base_MspInit+0x3c>)
 8002b2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b2c:	2380      	movs	r3, #128	; 0x80
 8002b2e:	011b      	lsls	r3, r3, #4
 8002b30:	4013      	ands	r3, r2
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002b36:	46c0      	nop			; (mov r8, r8)
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	b004      	add	sp, #16
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	46c0      	nop			; (mov r8, r8)
 8002b40:	40012c00 	.word	0x40012c00
 8002b44:	40021000 	.word	0x40021000

08002b48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b48:	b590      	push	{r4, r7, lr}
 8002b4a:	b089      	sub	sp, #36	; 0x24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b50:	240c      	movs	r4, #12
 8002b52:	193b      	adds	r3, r7, r4
 8002b54:	0018      	movs	r0, r3
 8002b56:	2314      	movs	r3, #20
 8002b58:	001a      	movs	r2, r3
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	f007 fdf2 	bl	800a744 <memset>
  if(htim->Instance==TIM1)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a15      	ldr	r2, [pc, #84]	; (8002bbc <HAL_TIM_MspPostInit+0x74>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d123      	bne.n	8002bb2 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b6a:	4b15      	ldr	r3, [pc, #84]	; (8002bc0 <HAL_TIM_MspPostInit+0x78>)
 8002b6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b6e:	4b14      	ldr	r3, [pc, #80]	; (8002bc0 <HAL_TIM_MspPostInit+0x78>)
 8002b70:	2101      	movs	r1, #1
 8002b72:	430a      	orrs	r2, r1
 8002b74:	635a      	str	r2, [r3, #52]	; 0x34
 8002b76:	4b12      	ldr	r3, [pc, #72]	; (8002bc0 <HAL_TIM_MspPostInit+0x78>)
 8002b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	60bb      	str	r3, [r7, #8]
 8002b80:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002b82:	193b      	adds	r3, r7, r4
 8002b84:	2280      	movs	r2, #128	; 0x80
 8002b86:	0052      	lsls	r2, r2, #1
 8002b88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8a:	0021      	movs	r1, r4
 8002b8c:	187b      	adds	r3, r7, r1
 8002b8e:	2202      	movs	r2, #2
 8002b90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b92:	187b      	adds	r3, r7, r1
 8002b94:	2202      	movs	r2, #2
 8002b96:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b98:	187b      	adds	r3, r7, r1
 8002b9a:	2203      	movs	r2, #3
 8002b9c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002b9e:	187b      	adds	r3, r7, r1
 8002ba0:	2202      	movs	r2, #2
 8002ba2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba4:	187a      	adds	r2, r7, r1
 8002ba6:	23a0      	movs	r3, #160	; 0xa0
 8002ba8:	05db      	lsls	r3, r3, #23
 8002baa:	0011      	movs	r1, r2
 8002bac:	0018      	movs	r0, r3
 8002bae:	f001 f8cd 	bl	8003d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002bb2:	46c0      	nop			; (mov r8, r8)
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	b009      	add	sp, #36	; 0x24
 8002bb8:	bd90      	pop	{r4, r7, pc}
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	40012c00 	.word	0x40012c00
 8002bc0:	40021000 	.word	0x40021000

08002bc4 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8002bc4:	b590      	push	{r4, r7, lr}
 8002bc6:	b08b      	sub	sp, #44	; 0x2c
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bcc:	2414      	movs	r4, #20
 8002bce:	193b      	adds	r3, r7, r4
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	2314      	movs	r3, #20
 8002bd4:	001a      	movs	r2, r3
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	f007 fdb4 	bl	800a744 <memset>
  if(husart->Instance==USART3)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a45      	ldr	r2, [pc, #276]	; (8002cf8 <HAL_USART_MspInit+0x134>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d000      	beq.n	8002be8 <HAL_USART_MspInit+0x24>
 8002be6:	e083      	b.n	8002cf0 <HAL_USART_MspInit+0x12c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002be8:	4b44      	ldr	r3, [pc, #272]	; (8002cfc <HAL_USART_MspInit+0x138>)
 8002bea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bec:	4b43      	ldr	r3, [pc, #268]	; (8002cfc <HAL_USART_MspInit+0x138>)
 8002bee:	2180      	movs	r1, #128	; 0x80
 8002bf0:	02c9      	lsls	r1, r1, #11
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	63da      	str	r2, [r3, #60]	; 0x3c
 8002bf6:	4b41      	ldr	r3, [pc, #260]	; (8002cfc <HAL_USART_MspInit+0x138>)
 8002bf8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bfa:	2380      	movs	r3, #128	; 0x80
 8002bfc:	02db      	lsls	r3, r3, #11
 8002bfe:	4013      	ands	r3, r2
 8002c00:	613b      	str	r3, [r7, #16]
 8002c02:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c04:	4b3d      	ldr	r3, [pc, #244]	; (8002cfc <HAL_USART_MspInit+0x138>)
 8002c06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c08:	4b3c      	ldr	r3, [pc, #240]	; (8002cfc <HAL_USART_MspInit+0x138>)
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	635a      	str	r2, [r3, #52]	; 0x34
 8002c10:	4b3a      	ldr	r3, [pc, #232]	; (8002cfc <HAL_USART_MspInit+0x138>)
 8002c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c14:	2201      	movs	r2, #1
 8002c16:	4013      	ands	r3, r2
 8002c18:	60fb      	str	r3, [r7, #12]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c1c:	4b37      	ldr	r3, [pc, #220]	; (8002cfc <HAL_USART_MspInit+0x138>)
 8002c1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c20:	4b36      	ldr	r3, [pc, #216]	; (8002cfc <HAL_USART_MspInit+0x138>)
 8002c22:	2102      	movs	r1, #2
 8002c24:	430a      	orrs	r2, r1
 8002c26:	635a      	str	r2, [r3, #52]	; 0x34
 8002c28:	4b34      	ldr	r3, [pc, #208]	; (8002cfc <HAL_USART_MspInit+0x138>)
 8002c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c2c:	2202      	movs	r2, #2
 8002c2e:	4013      	ands	r3, r2
 8002c30:	60bb      	str	r3, [r7, #8]
 8002c32:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA5     ------> USART3_TX
    PB0     ------> USART3_RX
    PB1     ------> USART3_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002c34:	193b      	adds	r3, r7, r4
 8002c36:	2220      	movs	r2, #32
 8002c38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3a:	193b      	adds	r3, r7, r4
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c40:	193b      	adds	r3, r7, r4
 8002c42:	2200      	movs	r2, #0
 8002c44:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c46:	193b      	adds	r3, r7, r4
 8002c48:	2203      	movs	r2, #3
 8002c4a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8002c4c:	193b      	adds	r3, r7, r4
 8002c4e:	2204      	movs	r2, #4
 8002c50:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c52:	193a      	adds	r2, r7, r4
 8002c54:	23a0      	movs	r3, #160	; 0xa0
 8002c56:	05db      	lsls	r3, r3, #23
 8002c58:	0011      	movs	r1, r2
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	f001 f876 	bl	8003d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c60:	0021      	movs	r1, r4
 8002c62:	187b      	adds	r3, r7, r1
 8002c64:	2203      	movs	r2, #3
 8002c66:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c68:	187b      	adds	r3, r7, r1
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6e:	187b      	adds	r3, r7, r1
 8002c70:	2200      	movs	r2, #0
 8002c72:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c74:	187b      	adds	r3, r7, r1
 8002c76:	2203      	movs	r2, #3
 8002c78:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8002c7a:	187b      	adds	r3, r7, r1
 8002c7c:	2204      	movs	r2, #4
 8002c7e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c80:	187b      	adds	r3, r7, r1
 8002c82:	4a1f      	ldr	r2, [pc, #124]	; (8002d00 <HAL_USART_MspInit+0x13c>)
 8002c84:	0019      	movs	r1, r3
 8002c86:	0010      	movs	r0, r2
 8002c88:	f001 f860 	bl	8003d4c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel4;
 8002c8c:	4b1d      	ldr	r3, [pc, #116]	; (8002d04 <HAL_USART_MspInit+0x140>)
 8002c8e:	4a1e      	ldr	r2, [pc, #120]	; (8002d08 <HAL_USART_MspInit+0x144>)
 8002c90:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002c92:	4b1c      	ldr	r3, [pc, #112]	; (8002d04 <HAL_USART_MspInit+0x140>)
 8002c94:	2237      	movs	r2, #55	; 0x37
 8002c96:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c98:	4b1a      	ldr	r3, [pc, #104]	; (8002d04 <HAL_USART_MspInit+0x140>)
 8002c9a:	2210      	movs	r2, #16
 8002c9c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c9e:	4b19      	ldr	r3, [pc, #100]	; (8002d04 <HAL_USART_MspInit+0x140>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ca4:	4b17      	ldr	r3, [pc, #92]	; (8002d04 <HAL_USART_MspInit+0x140>)
 8002ca6:	2280      	movs	r2, #128	; 0x80
 8002ca8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002caa:	4b16      	ldr	r3, [pc, #88]	; (8002d04 <HAL_USART_MspInit+0x140>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cb0:	4b14      	ldr	r3, [pc, #80]	; (8002d04 <HAL_USART_MspInit+0x140>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002cb6:	4b13      	ldr	r3, [pc, #76]	; (8002d04 <HAL_USART_MspInit+0x140>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002cbc:	4b11      	ldr	r3, [pc, #68]	; (8002d04 <HAL_USART_MspInit+0x140>)
 8002cbe:	2280      	movs	r2, #128	; 0x80
 8002cc0:	0192      	lsls	r2, r2, #6
 8002cc2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002cc4:	4b0f      	ldr	r3, [pc, #60]	; (8002d04 <HAL_USART_MspInit+0x140>)
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	f000 fd78 	bl	80037bc <HAL_DMA_Init>
 8002ccc:	1e03      	subs	r3, r0, #0
 8002cce:	d001      	beq.n	8002cd4 <HAL_USART_MspInit+0x110>
    {
      Error_Handler();
 8002cd0:	f7ff fcf4 	bl	80026bc <Error_Handler>
    }

    __HAL_LINKDMA(husart,hdmatx,hdma_usart3_tx);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a0b      	ldr	r2, [pc, #44]	; (8002d04 <HAL_USART_MspInit+0x140>)
 8002cd8:	651a      	str	r2, [r3, #80]	; 0x50
 8002cda:	4b0a      	ldr	r3, [pc, #40]	; (8002d04 <HAL_USART_MspInit+0x140>)
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	201d      	movs	r0, #29
 8002ce6:	f000 fd37 	bl	8003758 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 8002cea:	201d      	movs	r0, #29
 8002cec:	f000 fd49 	bl	8003782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002cf0:	46c0      	nop			; (mov r8, r8)
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	b00b      	add	sp, #44	; 0x2c
 8002cf6:	bd90      	pop	{r4, r7, pc}
 8002cf8:	40004800 	.word	0x40004800
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	50000400 	.word	0x50000400
 8002d04:	200052f8 	.word	0x200052f8
 8002d08:	40020044 	.word	0x40020044

08002d0c <LL_USART_IsActiveFlag_FE>:
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	69db      	ldr	r3, [r3, #28]
 8002d18:	2202      	movs	r2, #2
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d101      	bne.n	8002d24 <LL_USART_IsActiveFlag_FE+0x18>
 8002d20:	2301      	movs	r3, #1
 8002d22:	e000      	b.n	8002d26 <LL_USART_IsActiveFlag_FE+0x1a>
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	0018      	movs	r0, r3
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	b002      	add	sp, #8
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <LL_USART_IsActiveFlag_NE>:
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b082      	sub	sp, #8
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	2204      	movs	r2, #4
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d101      	bne.n	8002d46 <LL_USART_IsActiveFlag_NE+0x18>
 8002d42:	2301      	movs	r3, #1
 8002d44:	e000      	b.n	8002d48 <LL_USART_IsActiveFlag_NE+0x1a>
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	0018      	movs	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	b002      	add	sp, #8
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <LL_USART_IsActiveFlag_ORE>:
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	69db      	ldr	r3, [r3, #28]
 8002d5c:	2208      	movs	r2, #8
 8002d5e:	4013      	ands	r3, r2
 8002d60:	2b08      	cmp	r3, #8
 8002d62:	d101      	bne.n	8002d68 <LL_USART_IsActiveFlag_ORE+0x18>
 8002d64:	2301      	movs	r3, #1
 8002d66:	e000      	b.n	8002d6a <LL_USART_IsActiveFlag_ORE+0x1a>
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	b002      	add	sp, #8
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b082      	sub	sp, #8
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	4013      	ands	r3, r2
 8002d82:	2b20      	cmp	r3, #32
 8002d84:	d101      	bne.n	8002d8a <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	b002      	add	sp, #8
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <LL_USART_IsEnabledIT_RXNE_RXFNE>:
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2220      	movs	r2, #32
 8002da2:	4013      	ands	r3, r2
 8002da4:	2b20      	cmp	r3, #32
 8002da6:	d101      	bne.n	8002dac <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 8002da8:	2301      	movs	r3, #1
 8002daa:	e000      	b.n	8002dae <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	0018      	movs	r0, r3
 8002db0:	46bd      	mov	sp, r7
 8002db2:	b002      	add	sp, #8
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002dba:	46c0      	nop			; (mov r8, r8)
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dc4:	e7fe      	b.n	8002dc4 <HardFault_Handler+0x4>

08002dc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dd4:	46c0      	nop			; (mov r8, r8)
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dde:	f000 f959 	bl	8003094 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002de2:	46c0      	nop			; (mov r8, r8)
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002dec:	4b03      	ldr	r3, [pc, #12]	; (8002dfc <DMA1_Channel1_IRQHandler+0x14>)
 8002dee:	0018      	movs	r0, r3
 8002df0:	f000 fe5e 	bl	8003ab0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002df4:	46c0      	nop			; (mov r8, r8)
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	46c0      	nop			; (mov r8, r8)
 8002dfc:	20005580 	.word	0x20005580

08002e00 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

//	HAL_SPI_RxCpltCallback(&hspi2);
  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002e04:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <DMA1_Channel2_3_IRQHandler+0x1c>)
 8002e06:	0018      	movs	r0, r3
 8002e08:	f000 fe52 	bl	8003ab0 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002e0c:	4b04      	ldr	r3, [pc, #16]	; (8002e20 <DMA1_Channel2_3_IRQHandler+0x20>)
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f000 fe4e 	bl	8003ab0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002e14:	46c0      	nop			; (mov r8, r8)
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	46c0      	nop			; (mov r8, r8)
 8002e1c:	20005294 	.word	0x20005294
 8002e20:	20005520 	.word	0x20005520

08002e24 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
//		GPIOA->ODR |= 1 << 11;	//set test 1
//		GPIOA->ODR &= ~(1 << 11);	//reset test 1
  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002e28:	4b03      	ldr	r3, [pc, #12]	; (8002e38 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x14>)
 8002e2a:	0018      	movs	r0, r3
 8002e2c:	f000 fe40 	bl	8003ab0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 8002e30:	46c0      	nop			; (mov r8, r8)
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	200052f8 	.word	0x200052f8

08002e3c <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8002e40:	4b09      	ldr	r3, [pc, #36]	; (8002e68 <I2C1_IRQHandler+0x2c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	699a      	ldr	r2, [r3, #24]
 8002e46:	23e0      	movs	r3, #224	; 0xe0
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	d004      	beq.n	8002e58 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8002e4e:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <I2C1_IRQHandler+0x2c>)
 8002e50:	0018      	movs	r0, r3
 8002e52:	f001 f98f 	bl	8004174 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8002e56:	e003      	b.n	8002e60 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8002e58:	4b03      	ldr	r3, [pc, #12]	; (8002e68 <I2C1_IRQHandler+0x2c>)
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	f001 f970 	bl	8004140 <HAL_I2C_EV_IRQHandler>
}
 8002e60:	46c0      	nop			; (mov r8, r8)
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	46c0      	nop			; (mov r8, r8)
 8002e68:	20005234 	.word	0x20005234

08002e6c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s1);
 8002e70:	4b03      	ldr	r3, [pc, #12]	; (8002e80 <SPI1_IRQHandler+0x14>)
 8002e72:	0018      	movs	r0, r3
 8002e74:	f002 f8f2 	bl	800505c <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002e78:	46c0      	nop			; (mov r8, r8)
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	46c0      	nop			; (mov r8, r8)
 8002e80:	20005460 	.word	0x20005460

08002e84 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002e88:	4b03      	ldr	r3, [pc, #12]	; (8002e98 <SPI2_IRQHandler+0x14>)
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	f004 fbfc 	bl	8007688 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002e90:	46c0      	nop			; (mov r8, r8)
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	46c0      	nop			; (mov r8, r8)
 8002e98:	200051b4 	.word	0x200051b4

08002e9c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART2->ICR|=USART_ICR_ORECF;
 8002ea0:	4b25      	ldr	r3, [pc, #148]	; (8002f38 <USART2_IRQHandler+0x9c>)
 8002ea2:	6a1a      	ldr	r2, [r3, #32]
 8002ea4:	4b24      	ldr	r3, [pc, #144]	; (8002f38 <USART2_IRQHandler+0x9c>)
 8002ea6:	2108      	movs	r1, #8
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_FECF;
 8002eac:	4b22      	ldr	r3, [pc, #136]	; (8002f38 <USART2_IRQHandler+0x9c>)
 8002eae:	6a1a      	ldr	r2, [r3, #32]
 8002eb0:	4b21      	ldr	r3, [pc, #132]	; (8002f38 <USART2_IRQHandler+0x9c>)
 8002eb2:	2102      	movs	r1, #2
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_NECF;
 8002eb8:	4b1f      	ldr	r3, [pc, #124]	; (8002f38 <USART2_IRQHandler+0x9c>)
 8002eba:	6a1a      	ldr	r2, [r3, #32]
 8002ebc:	4b1e      	ldr	r3, [pc, #120]	; (8002f38 <USART2_IRQHandler+0x9c>)
 8002ebe:	2104      	movs	r1, #4
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	621a      	str	r2, [r3, #32]
	if(LL_USART_IsActiveFlag_RXNE(USART2) && LL_USART_IsEnabledIT_RXNE(USART2))
 8002ec4:	4b1c      	ldr	r3, [pc, #112]	; (8002f38 <USART2_IRQHandler+0x9c>)
 8002ec6:	0018      	movs	r0, r3
 8002ec8:	f7ff ff53 	bl	8002d72 <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8002ecc:	1e03      	subs	r3, r0, #0
 8002ece:	d009      	beq.n	8002ee4 <USART2_IRQHandler+0x48>
 8002ed0:	4b19      	ldr	r3, [pc, #100]	; (8002f38 <USART2_IRQHandler+0x9c>)
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	f7ff ff5e 	bl	8002d94 <LL_USART_IsEnabledIT_RXNE_RXFNE>
 8002ed8:	1e03      	subs	r3, r0, #0
 8002eda:	d003      	beq.n	8002ee4 <USART2_IRQHandler+0x48>
	  {
	    USART2_RX_Callback();// launching the receiving callback function //LL implentation
 8002edc:	f7fe f87e 	bl	8000fdc <USART2_RX_Callback>
	  {
 8002ee0:	46c0      	nop			; (mov r8, r8)
	  }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002ee2:	e025      	b.n	8002f30 <USART2_IRQHandler+0x94>
		  USART2->ICR|=USART_ICR_ORECF;
 8002ee4:	4b14      	ldr	r3, [pc, #80]	; (8002f38 <USART2_IRQHandler+0x9c>)
 8002ee6:	6a1a      	ldr	r2, [r3, #32]
 8002ee8:	4b13      	ldr	r3, [pc, #76]	; (8002f38 <USART2_IRQHandler+0x9c>)
 8002eea:	2108      	movs	r1, #8
 8002eec:	430a      	orrs	r2, r1
 8002eee:	621a      	str	r2, [r3, #32]
	    if(LL_USART_IsActiveFlag_ORE(USART2))//clear the overrun flag by reading from RDR
 8002ef0:	4b11      	ldr	r3, [pc, #68]	; (8002f38 <USART2_IRQHandler+0x9c>)
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	f7ff ff2c 	bl	8002d50 <LL_USART_IsActiveFlag_ORE>
 8002ef8:	1e03      	subs	r3, r0, #0
 8002efa:	d008      	beq.n	8002f0e <USART2_IRQHandler+0x72>
	    	USART2->ICR|=USART_ICR_ORECF;
 8002efc:	4b0e      	ldr	r3, [pc, #56]	; (8002f38 <USART2_IRQHandler+0x9c>)
 8002efe:	6a1a      	ldr	r2, [r3, #32]
 8002f00:	4b0d      	ldr	r3, [pc, #52]	; (8002f38 <USART2_IRQHandler+0x9c>)
 8002f02:	2108      	movs	r1, #8
 8002f04:	430a      	orrs	r2, r1
 8002f06:	621a      	str	r2, [r3, #32]
	      (void) USART2->RDR;
 8002f08:	4b0b      	ldr	r3, [pc, #44]	; (8002f38 <USART2_IRQHandler+0x9c>)
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002f0c:	e010      	b.n	8002f30 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_FE(USART2))//clear another flag by reading from RDR
 8002f0e:	4b0a      	ldr	r3, [pc, #40]	; (8002f38 <USART2_IRQHandler+0x9c>)
 8002f10:	0018      	movs	r0, r3
 8002f12:	f7ff fefb 	bl	8002d0c <LL_USART_IsActiveFlag_FE>
 8002f16:	1e03      	subs	r3, r0, #0
 8002f18:	d002      	beq.n	8002f20 <USART2_IRQHandler+0x84>
	      (void) USART2->RDR;
 8002f1a:	4b07      	ldr	r3, [pc, #28]	; (8002f38 <USART2_IRQHandler+0x9c>)
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002f1e:	e007      	b.n	8002f30 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_NE(USART2))//clear another flag by reading from RDR
 8002f20:	4b05      	ldr	r3, [pc, #20]	; (8002f38 <USART2_IRQHandler+0x9c>)
 8002f22:	0018      	movs	r0, r3
 8002f24:	f7ff ff03 	bl	8002d2e <LL_USART_IsActiveFlag_NE>
 8002f28:	1e03      	subs	r3, r0, #0
 8002f2a:	d001      	beq.n	8002f30 <USART2_IRQHandler+0x94>
	      (void) USART2->RDR;
 8002f2c:	4b02      	ldr	r3, [pc, #8]	; (8002f38 <USART2_IRQHandler+0x9c>)
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002f30:	46c0      	nop			; (mov r8, r8)
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	40004400 	.word	0x40004400

08002f3c <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_USART_IRQHandler(&husart3);
 8002f40:	4b03      	ldr	r3, [pc, #12]	; (8002f50 <USART3_4_LPUART1_IRQHandler+0x14>)
 8002f42:	0018      	movs	r0, r3
 8002f44:	f006 fa3c 	bl	80093c0 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 8002f48:	46c0      	nop			; (mov r8, r8)
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	46c0      	nop			; (mov r8, r8)
 8002f50:	20005394 	.word	0x20005394

08002f54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002f58:	4b03      	ldr	r3, [pc, #12]	; (8002f68 <SystemInit+0x14>)
 8002f5a:	2280      	movs	r2, #128	; 0x80
 8002f5c:	0512      	lsls	r2, r2, #20
 8002f5e:	609a      	str	r2, [r3, #8]
#endif
}
 8002f60:	46c0      	nop			; (mov r8, r8)
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	46c0      	nop			; (mov r8, r8)
 8002f68:	e000ed00 	.word	0xe000ed00

08002f6c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f6c:	480d      	ldr	r0, [pc, #52]	; (8002fa4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f6e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f70:	f7ff fff0 	bl	8002f54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f74:	480c      	ldr	r0, [pc, #48]	; (8002fa8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f76:	490d      	ldr	r1, [pc, #52]	; (8002fac <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f78:	4a0d      	ldr	r2, [pc, #52]	; (8002fb0 <LoopForever+0xe>)
  movs r3, #0
 8002f7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f7c:	e002      	b.n	8002f84 <LoopCopyDataInit>

08002f7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f82:	3304      	adds	r3, #4

08002f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f88:	d3f9      	bcc.n	8002f7e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f8a:	4a0a      	ldr	r2, [pc, #40]	; (8002fb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f8c:	4c0a      	ldr	r4, [pc, #40]	; (8002fb8 <LoopForever+0x16>)
  movs r3, #0
 8002f8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f90:	e001      	b.n	8002f96 <LoopFillZerobss>

08002f92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f94:	3204      	adds	r2, #4

08002f96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f98:	d3fb      	bcc.n	8002f92 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002f9a:	f007 fbaf 	bl	800a6fc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002f9e:	f7fd fac7 	bl	8000530 <main>

08002fa2 <LoopForever>:

LoopForever:
  b LoopForever
 8002fa2:	e7fe      	b.n	8002fa2 <LoopForever>
  ldr   r0, =_estack
 8002fa4:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8002fa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fac:	20005144 	.word	0x20005144
  ldr r2, =_sidata
 8002fb0:	0800a85c 	.word	0x0800a85c
  ldr r2, =_sbss
 8002fb4:	20005144 	.word	0x20005144
  ldr r4, =_ebss
 8002fb8:	20007604 	.word	0x20007604

08002fbc <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002fbc:	e7fe      	b.n	8002fbc <ADC1_COMP_IRQHandler>
	...

08002fc0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002fc6:	1dfb      	adds	r3, r7, #7
 8002fc8:	2200      	movs	r2, #0
 8002fca:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fcc:	4b0b      	ldr	r3, [pc, #44]	; (8002ffc <HAL_Init+0x3c>)
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	4b0a      	ldr	r3, [pc, #40]	; (8002ffc <HAL_Init+0x3c>)
 8002fd2:	2180      	movs	r1, #128	; 0x80
 8002fd4:	0049      	lsls	r1, r1, #1
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002fda:	2000      	movs	r0, #0
 8002fdc:	f000 f810 	bl	8003000 <HAL_InitTick>
 8002fe0:	1e03      	subs	r3, r0, #0
 8002fe2:	d003      	beq.n	8002fec <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002fe4:	1dfb      	adds	r3, r7, #7
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	701a      	strb	r2, [r3, #0]
 8002fea:	e001      	b.n	8002ff0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002fec:	f7ff fb6c 	bl	80026c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ff0:	1dfb      	adds	r3, r7, #7
 8002ff2:	781b      	ldrb	r3, [r3, #0]
}
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	b002      	add	sp, #8
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	40022000 	.word	0x40022000

08003000 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003000:	b590      	push	{r4, r7, lr}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003008:	230f      	movs	r3, #15
 800300a:	18fb      	adds	r3, r7, r3
 800300c:	2200      	movs	r2, #0
 800300e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003010:	4b1d      	ldr	r3, [pc, #116]	; (8003088 <HAL_InitTick+0x88>)
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d02b      	beq.n	8003070 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003018:	4b1c      	ldr	r3, [pc, #112]	; (800308c <HAL_InitTick+0x8c>)
 800301a:	681c      	ldr	r4, [r3, #0]
 800301c:	4b1a      	ldr	r3, [pc, #104]	; (8003088 <HAL_InitTick+0x88>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	0019      	movs	r1, r3
 8003022:	23fa      	movs	r3, #250	; 0xfa
 8003024:	0098      	lsls	r0, r3, #2
 8003026:	f7fd f86d 	bl	8000104 <__udivsi3>
 800302a:	0003      	movs	r3, r0
 800302c:	0019      	movs	r1, r3
 800302e:	0020      	movs	r0, r4
 8003030:	f7fd f868 	bl	8000104 <__udivsi3>
 8003034:	0003      	movs	r3, r0
 8003036:	0018      	movs	r0, r3
 8003038:	f000 fbb3 	bl	80037a2 <HAL_SYSTICK_Config>
 800303c:	1e03      	subs	r3, r0, #0
 800303e:	d112      	bne.n	8003066 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b03      	cmp	r3, #3
 8003044:	d80a      	bhi.n	800305c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	2301      	movs	r3, #1
 800304a:	425b      	negs	r3, r3
 800304c:	2200      	movs	r2, #0
 800304e:	0018      	movs	r0, r3
 8003050:	f000 fb82 	bl	8003758 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003054:	4b0e      	ldr	r3, [pc, #56]	; (8003090 <HAL_InitTick+0x90>)
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	e00d      	b.n	8003078 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800305c:	230f      	movs	r3, #15
 800305e:	18fb      	adds	r3, r7, r3
 8003060:	2201      	movs	r2, #1
 8003062:	701a      	strb	r2, [r3, #0]
 8003064:	e008      	b.n	8003078 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003066:	230f      	movs	r3, #15
 8003068:	18fb      	adds	r3, r7, r3
 800306a:	2201      	movs	r2, #1
 800306c:	701a      	strb	r2, [r3, #0]
 800306e:	e003      	b.n	8003078 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003070:	230f      	movs	r3, #15
 8003072:	18fb      	adds	r3, r7, r3
 8003074:	2201      	movs	r2, #1
 8003076:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003078:	230f      	movs	r3, #15
 800307a:	18fb      	adds	r3, r7, r3
 800307c:	781b      	ldrb	r3, [r3, #0]
}
 800307e:	0018      	movs	r0, r3
 8003080:	46bd      	mov	sp, r7
 8003082:	b005      	add	sp, #20
 8003084:	bd90      	pop	{r4, r7, pc}
 8003086:	46c0      	nop			; (mov r8, r8)
 8003088:	20005140 	.word	0x20005140
 800308c:	20005138 	.word	0x20005138
 8003090:	2000513c 	.word	0x2000513c

08003094 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003098:	4b05      	ldr	r3, [pc, #20]	; (80030b0 <HAL_IncTick+0x1c>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	001a      	movs	r2, r3
 800309e:	4b05      	ldr	r3, [pc, #20]	; (80030b4 <HAL_IncTick+0x20>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	18d2      	adds	r2, r2, r3
 80030a4:	4b03      	ldr	r3, [pc, #12]	; (80030b4 <HAL_IncTick+0x20>)
 80030a6:	601a      	str	r2, [r3, #0]
}
 80030a8:	46c0      	nop			; (mov r8, r8)
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	46c0      	nop			; (mov r8, r8)
 80030b0:	20005140 	.word	0x20005140
 80030b4:	20007600 	.word	0x20007600

080030b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  return uwTick;
 80030bc:	4b02      	ldr	r3, [pc, #8]	; (80030c8 <HAL_GetTick+0x10>)
 80030be:	681b      	ldr	r3, [r3, #0]
}
 80030c0:	0018      	movs	r0, r3
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	46c0      	nop			; (mov r8, r8)
 80030c8:	20007600 	.word	0x20007600

080030cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030d4:	f7ff fff0 	bl	80030b8 <HAL_GetTick>
 80030d8:	0003      	movs	r3, r0
 80030da:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	3301      	adds	r3, #1
 80030e4:	d005      	beq.n	80030f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030e6:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <HAL_Delay+0x44>)
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	001a      	movs	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	189b      	adds	r3, r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030f2:	46c0      	nop			; (mov r8, r8)
 80030f4:	f7ff ffe0 	bl	80030b8 <HAL_GetTick>
 80030f8:	0002      	movs	r2, r0
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	429a      	cmp	r2, r3
 8003102:	d8f7      	bhi.n	80030f4 <HAL_Delay+0x28>
  {
  }
}
 8003104:	46c0      	nop			; (mov r8, r8)
 8003106:	46c0      	nop			; (mov r8, r8)
 8003108:	46bd      	mov	sp, r7
 800310a:	b004      	add	sp, #16
 800310c:	bd80      	pop	{r7, pc}
 800310e:	46c0      	nop			; (mov r8, r8)
 8003110:	20005140 	.word	0x20005140

08003114 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 800311c:	4b06      	ldr	r3, [pc, #24]	; (8003138 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a06      	ldr	r2, [pc, #24]	; (800313c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8003122:	4013      	ands	r3, r2
 8003124:	0019      	movs	r1, r3
 8003126:	4b04      	ldr	r3, [pc, #16]	; (8003138 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	430a      	orrs	r2, r1
 800312c:	601a      	str	r2, [r3, #0]
}
 800312e:	46c0      	nop			; (mov r8, r8)
 8003130:	46bd      	mov	sp, r7
 8003132:	b002      	add	sp, #8
 8003134:	bd80      	pop	{r7, pc}
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	40010000 	.word	0x40010000
 800313c:	fffff9ff 	.word	0xfffff9ff

08003140 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003148:	4a05      	ldr	r2, [pc, #20]	; (8003160 <LL_EXTI_EnableIT_0_31+0x20>)
 800314a:	2380      	movs	r3, #128	; 0x80
 800314c:	58d2      	ldr	r2, [r2, r3]
 800314e:	4904      	ldr	r1, [pc, #16]	; (8003160 <LL_EXTI_EnableIT_0_31+0x20>)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4313      	orrs	r3, r2
 8003154:	2280      	movs	r2, #128	; 0x80
 8003156:	508b      	str	r3, [r1, r2]
}
 8003158:	46c0      	nop			; (mov r8, r8)
 800315a:	46bd      	mov	sp, r7
 800315c:	b002      	add	sp, #8
 800315e:	bd80      	pop	{r7, pc}
 8003160:	40021800 	.word	0x40021800

08003164 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800316c:	4a06      	ldr	r2, [pc, #24]	; (8003188 <LL_EXTI_DisableIT_0_31+0x24>)
 800316e:	2380      	movs	r3, #128	; 0x80
 8003170:	58d3      	ldr	r3, [r2, r3]
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	43d2      	mvns	r2, r2
 8003176:	4904      	ldr	r1, [pc, #16]	; (8003188 <LL_EXTI_DisableIT_0_31+0x24>)
 8003178:	4013      	ands	r3, r2
 800317a:	2280      	movs	r2, #128	; 0x80
 800317c:	508b      	str	r3, [r1, r2]
}
 800317e:	46c0      	nop			; (mov r8, r8)
 8003180:	46bd      	mov	sp, r7
 8003182:	b002      	add	sp, #8
 8003184:	bd80      	pop	{r7, pc}
 8003186:	46c0      	nop			; (mov r8, r8)
 8003188:	40021800 	.word	0x40021800

0800318c <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8003194:	4a05      	ldr	r2, [pc, #20]	; (80031ac <LL_EXTI_EnableEvent_0_31+0x20>)
 8003196:	2384      	movs	r3, #132	; 0x84
 8003198:	58d2      	ldr	r2, [r2, r3]
 800319a:	4904      	ldr	r1, [pc, #16]	; (80031ac <LL_EXTI_EnableEvent_0_31+0x20>)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4313      	orrs	r3, r2
 80031a0:	2284      	movs	r2, #132	; 0x84
 80031a2:	508b      	str	r3, [r1, r2]

}
 80031a4:	46c0      	nop			; (mov r8, r8)
 80031a6:	46bd      	mov	sp, r7
 80031a8:	b002      	add	sp, #8
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40021800 	.word	0x40021800

080031b0 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80031b8:	4a06      	ldr	r2, [pc, #24]	; (80031d4 <LL_EXTI_DisableEvent_0_31+0x24>)
 80031ba:	2384      	movs	r3, #132	; 0x84
 80031bc:	58d3      	ldr	r3, [r2, r3]
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	43d2      	mvns	r2, r2
 80031c2:	4904      	ldr	r1, [pc, #16]	; (80031d4 <LL_EXTI_DisableEvent_0_31+0x24>)
 80031c4:	4013      	ands	r3, r2
 80031c6:	2284      	movs	r2, #132	; 0x84
 80031c8:	508b      	str	r3, [r1, r2]
}
 80031ca:	46c0      	nop			; (mov r8, r8)
 80031cc:	46bd      	mov	sp, r7
 80031ce:	b002      	add	sp, #8
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	46c0      	nop			; (mov r8, r8)
 80031d4:	40021800 	.word	0x40021800

080031d8 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80031e0:	4b04      	ldr	r3, [pc, #16]	; (80031f4 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 80031e2:	6819      	ldr	r1, [r3, #0]
 80031e4:	4b03      	ldr	r3, [pc, #12]	; (80031f4 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	601a      	str	r2, [r3, #0]

}
 80031ec:	46c0      	nop			; (mov r8, r8)
 80031ee:	46bd      	mov	sp, r7
 80031f0:	b002      	add	sp, #8
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	40021800 	.word	0x40021800

080031f8 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8003200:	4b05      	ldr	r3, [pc, #20]	; (8003218 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	43d9      	mvns	r1, r3
 8003208:	4b03      	ldr	r3, [pc, #12]	; (8003218 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800320a:	400a      	ands	r2, r1
 800320c:	601a      	str	r2, [r3, #0]

}
 800320e:	46c0      	nop			; (mov r8, r8)
 8003210:	46bd      	mov	sp, r7
 8003212:	b002      	add	sp, #8
 8003214:	bd80      	pop	{r7, pc}
 8003216:	46c0      	nop			; (mov r8, r8)
 8003218:	40021800 	.word	0x40021800

0800321c <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8003224:	4b04      	ldr	r3, [pc, #16]	; (8003238 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8003226:	6859      	ldr	r1, [r3, #4]
 8003228:	4b03      	ldr	r3, [pc, #12]	; (8003238 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	430a      	orrs	r2, r1
 800322e:	605a      	str	r2, [r3, #4]
}
 8003230:	46c0      	nop			; (mov r8, r8)
 8003232:	46bd      	mov	sp, r7
 8003234:	b002      	add	sp, #8
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40021800 	.word	0x40021800

0800323c <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8003244:	4b05      	ldr	r3, [pc, #20]	; (800325c <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	43d9      	mvns	r1, r3
 800324c:	4b03      	ldr	r3, [pc, #12]	; (800325c <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800324e:	400a      	ands	r2, r1
 8003250:	605a      	str	r2, [r3, #4]
}
 8003252:	46c0      	nop			; (mov r8, r8)
 8003254:	46bd      	mov	sp, r7
 8003256:	b002      	add	sp, #8
 8003258:	bd80      	pop	{r7, pc}
 800325a:	46c0      	nop			; (mov r8, r8)
 800325c:	40021800 	.word	0x40021800

08003260 <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 8003268:	4b03      	ldr	r3, [pc, #12]	; (8003278 <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	611a      	str	r2, [r3, #16]
}
 800326e:	46c0      	nop			; (mov r8, r8)
 8003270:	46bd      	mov	sp, r7
 8003272:	b002      	add	sp, #8
 8003274:	bd80      	pop	{r7, pc}
 8003276:	46c0      	nop			; (mov r8, r8)
 8003278:	40021800 	.word	0x40021800

0800327c <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 8003284:	4b03      	ldr	r3, [pc, #12]	; (8003294 <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	60da      	str	r2, [r3, #12]
}
 800328a:	46c0      	nop			; (mov r8, r8)
 800328c:	46bd      	mov	sp, r7
 800328e:	b002      	add	sp, #8
 8003290:	bd80      	pop	{r7, pc}
 8003292:	46c0      	nop			; (mov r8, r8)
 8003294:	40021800 	.word	0x40021800

08003298 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b088      	sub	sp, #32
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80032a0:	2300      	movs	r3, #0
 80032a2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80032a4:	211f      	movs	r1, #31
 80032a6:	187b      	adds	r3, r7, r1
 80032a8:	2200      	movs	r2, #0
 80032aa:	701a      	strb	r2, [r3, #0]
  __IO uint32_t * comp_common_odd;
  __IO uint32_t * comp_common_even;
#endif

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d103      	bne.n	80032ba <HAL_COMP_Init+0x22>
  {
    status = HAL_ERROR;
 80032b2:	187b      	adds	r3, r7, r1
 80032b4:	2201      	movs	r2, #1
 80032b6:	701a      	strb	r2, [r3, #0]
 80032b8:	e13d      	b.n	8003536 <HAL_COMP_Init+0x29e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	0fdb      	lsrs	r3, r3, #31
 80032c2:	07da      	lsls	r2, r3, #31
 80032c4:	2380      	movs	r3, #128	; 0x80
 80032c6:	061b      	lsls	r3, r3, #24
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d104      	bne.n	80032d6 <HAL_COMP_Init+0x3e>
  {
    status = HAL_ERROR;
 80032cc:	231f      	movs	r3, #31
 80032ce:	18fb      	adds	r3, r7, r3
 80032d0:	2201      	movs	r2, #1
 80032d2:	701a      	strb	r2, [r3, #0]
 80032d4:	e12f      	b.n	8003536 <HAL_COMP_Init+0x29e>
    if(hcomp->Init.WindowMode != COMP_WINDOWMODE_DISABLE)
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2229      	movs	r2, #41	; 0x29
 80032da:	5c9b      	ldrb	r3, [r3, r2]
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10a      	bne.n	80032f8 <HAL_COMP_Init+0x60>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2228      	movs	r2, #40	; 0x28
 80032e6:	2100      	movs	r1, #0
 80032e8:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	0018      	movs	r0, r3
 80032f4:	f7ff fa10 	bl	8002718 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2230      	movs	r2, #48	; 0x30
 8003300:	4013      	ands	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (  hcomp->Init.InputMinus
 8003324:	4313      	orrs	r3, r2
 8003326:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a85      	ldr	r2, [pc, #532]	; (8003544 <HAL_COMP_Init+0x2ac>)
 8003330:	4013      	ands	r3, r2
 8003332:	0019      	movs	r1, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	430a      	orrs	r2, r1
 800333c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(*comp_common_odd, COMP_CSR_WINOUT);
        CLEAR_BIT(*comp_common_even, COMP_CSR_WINOUT);
        break;
    }
#else
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	2380      	movs	r3, #128	; 0x80
 8003344:	011b      	lsls	r3, r3, #4
 8003346:	429a      	cmp	r2, r3
 8003348:	d10d      	bne.n	8003366 <HAL_COMP_Init+0xce>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800334a:	4b7f      	ldr	r3, [pc, #508]	; (8003548 <HAL_COMP_Init+0x2b0>)
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	4b7e      	ldr	r3, [pc, #504]	; (8003548 <HAL_COMP_Init+0x2b0>)
 8003350:	497e      	ldr	r1, [pc, #504]	; (800354c <HAL_COMP_Init+0x2b4>)
 8003352:	400a      	ands	r2, r1
 8003354:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8003356:	4b7c      	ldr	r3, [pc, #496]	; (8003548 <HAL_COMP_Init+0x2b0>)
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	4b7b      	ldr	r3, [pc, #492]	; (8003548 <HAL_COMP_Init+0x2b0>)
 800335c:	2180      	movs	r1, #128	; 0x80
 800335e:	0109      	lsls	r1, r1, #4
 8003360:	430a      	orrs	r2, r1
 8003362:	605a      	str	r2, [r3, #4]
 8003364:	e01f      	b.n	80033a6 <HAL_COMP_Init+0x10e>
    }
    else if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	23c0      	movs	r3, #192	; 0xc0
 800336c:	015b      	lsls	r3, r3, #5
 800336e:	429a      	cmp	r2, r3
 8003370:	d10d      	bne.n	800338e <HAL_COMP_Init+0xf6>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8003372:	4b75      	ldr	r3, [pc, #468]	; (8003548 <HAL_COMP_Init+0x2b0>)
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	4b74      	ldr	r3, [pc, #464]	; (8003548 <HAL_COMP_Init+0x2b0>)
 8003378:	2180      	movs	r1, #128	; 0x80
 800337a:	0109      	lsls	r1, r1, #4
 800337c:	430a      	orrs	r2, r1
 800337e:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8003380:	4b71      	ldr	r3, [pc, #452]	; (8003548 <HAL_COMP_Init+0x2b0>)
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	4b70      	ldr	r3, [pc, #448]	; (8003548 <HAL_COMP_Init+0x2b0>)
 8003386:	4971      	ldr	r1, [pc, #452]	; (800354c <HAL_COMP_Init+0x2b4>)
 8003388:	400a      	ands	r2, r1
 800338a:	605a      	str	r2, [r3, #4]
 800338c:	e00b      	b.n	80033a6 <HAL_COMP_Init+0x10e>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800338e:	4b6e      	ldr	r3, [pc, #440]	; (8003548 <HAL_COMP_Init+0x2b0>)
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	4b6d      	ldr	r3, [pc, #436]	; (8003548 <HAL_COMP_Init+0x2b0>)
 8003394:	496d      	ldr	r1, [pc, #436]	; (800354c <HAL_COMP_Init+0x2b4>)
 8003396:	400a      	ands	r2, r1
 8003398:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800339a:	4b6b      	ldr	r3, [pc, #428]	; (8003548 <HAL_COMP_Init+0x2b0>)
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	4b6a      	ldr	r3, [pc, #424]	; (8003548 <HAL_COMP_Init+0x2b0>)
 80033a0:	496a      	ldr	r1, [pc, #424]	; (800354c <HAL_COMP_Init+0x2b4>)
 80033a2:	400a      	ands	r2, r1
 80033a4:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	22a0      	movs	r2, #160	; 0xa0
 80033ac:	01d2      	lsls	r2, r2, #7
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d017      	beq.n	80033e2 <HAL_COMP_Init+0x14a>
 80033b2:	22a0      	movs	r2, #160	; 0xa0
 80033b4:	01d2      	lsls	r2, r2, #7
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d830      	bhi.n	800341c <HAL_COMP_Init+0x184>
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d01f      	beq.n	80033fe <HAL_COMP_Init+0x166>
 80033be:	2280      	movs	r2, #128	; 0x80
 80033c0:	01d2      	lsls	r2, r2, #7
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d12a      	bne.n	800341c <HAL_COMP_Init+0x184>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80033c6:	4b60      	ldr	r3, [pc, #384]	; (8003548 <HAL_COMP_Init+0x2b0>)
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	4b5f      	ldr	r3, [pc, #380]	; (8003548 <HAL_COMP_Init+0x2b0>)
 80033cc:	2180      	movs	r1, #128	; 0x80
 80033ce:	01c9      	lsls	r1, r1, #7
 80033d0:	430a      	orrs	r2, r1
 80033d2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80033d4:	4b5c      	ldr	r3, [pc, #368]	; (8003548 <HAL_COMP_Init+0x2b0>)
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	4b5b      	ldr	r3, [pc, #364]	; (8003548 <HAL_COMP_Init+0x2b0>)
 80033da:	495d      	ldr	r1, [pc, #372]	; (8003550 <HAL_COMP_Init+0x2b8>)
 80033dc:	400a      	ands	r2, r1
 80033de:	605a      	str	r2, [r3, #4]
        break;
 80033e0:	e029      	b.n	8003436 <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80033e2:	4b59      	ldr	r3, [pc, #356]	; (8003548 <HAL_COMP_Init+0x2b0>)
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	4b58      	ldr	r3, [pc, #352]	; (8003548 <HAL_COMP_Init+0x2b0>)
 80033e8:	4959      	ldr	r1, [pc, #356]	; (8003550 <HAL_COMP_Init+0x2b8>)
 80033ea:	400a      	ands	r2, r1
 80033ec:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80033ee:	4b56      	ldr	r3, [pc, #344]	; (8003548 <HAL_COMP_Init+0x2b0>)
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	4b55      	ldr	r3, [pc, #340]	; (8003548 <HAL_COMP_Init+0x2b0>)
 80033f4:	2180      	movs	r1, #128	; 0x80
 80033f6:	01c9      	lsls	r1, r1, #7
 80033f8:	430a      	orrs	r2, r1
 80033fa:	605a      	str	r2, [r3, #4]
        break;
 80033fc:	e01b      	b.n	8003436 <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80033fe:	4b52      	ldr	r3, [pc, #328]	; (8003548 <HAL_COMP_Init+0x2b0>)
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	4b51      	ldr	r3, [pc, #324]	; (8003548 <HAL_COMP_Init+0x2b0>)
 8003404:	2180      	movs	r1, #128	; 0x80
 8003406:	01c9      	lsls	r1, r1, #7
 8003408:	430a      	orrs	r2, r1
 800340a:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 800340c:	4b4e      	ldr	r3, [pc, #312]	; (8003548 <HAL_COMP_Init+0x2b0>)
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	4b4d      	ldr	r3, [pc, #308]	; (8003548 <HAL_COMP_Init+0x2b0>)
 8003412:	2180      	movs	r1, #128	; 0x80
 8003414:	01c9      	lsls	r1, r1, #7
 8003416:	430a      	orrs	r2, r1
 8003418:	605a      	str	r2, [r3, #4]
        break;
 800341a:	e00c      	b.n	8003436 <HAL_COMP_Init+0x19e>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800341c:	4b4a      	ldr	r3, [pc, #296]	; (8003548 <HAL_COMP_Init+0x2b0>)
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	4b49      	ldr	r3, [pc, #292]	; (8003548 <HAL_COMP_Init+0x2b0>)
 8003422:	494b      	ldr	r1, [pc, #300]	; (8003550 <HAL_COMP_Init+0x2b8>)
 8003424:	400a      	ands	r2, r1
 8003426:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8003428:	4b47      	ldr	r3, [pc, #284]	; (8003548 <HAL_COMP_Init+0x2b0>)
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	4b46      	ldr	r3, [pc, #280]	; (8003548 <HAL_COMP_Init+0x2b0>)
 800342e:	4948      	ldr	r1, [pc, #288]	; (8003550 <HAL_COMP_Init+0x2b8>)
 8003430:	400a      	ands	r2, r1
 8003432:	605a      	str	r2, [r3, #4]
        break;
 8003434:	46c0      	nop			; (mov r8, r8)
    }
#endif

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2230      	movs	r2, #48	; 0x30
 800343e:	4013      	ands	r3, r2
 8003440:	d016      	beq.n	8003470 <HAL_COMP_Init+0x1d8>
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d113      	bne.n	8003470 <HAL_COMP_Init+0x1d8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003448:	4b42      	ldr	r3, [pc, #264]	; (8003554 <HAL_COMP_Init+0x2bc>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4942      	ldr	r1, [pc, #264]	; (8003558 <HAL_COMP_Init+0x2c0>)
 800344e:	0018      	movs	r0, r3
 8003450:	f7fc fe58 	bl	8000104 <__udivsi3>
 8003454:	0003      	movs	r3, r0
 8003456:	001a      	movs	r2, r3
 8003458:	0013      	movs	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	189b      	adds	r3, r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003462:	e002      	b.n	800346a <HAL_COMP_Init+0x1d2>
      {
        wait_loop_index--;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	3b01      	subs	r3, #1
 8003468:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1f9      	bne.n	8003464 <HAL_COMP_Init+0x1cc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a34      	ldr	r2, [pc, #208]	; (8003548 <HAL_COMP_Init+0x2b0>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d102      	bne.n	8003480 <HAL_COMP_Init+0x1e8>
 800347a:	2380      	movs	r3, #128	; 0x80
 800347c:	029b      	lsls	r3, r3, #10
 800347e:	e001      	b.n	8003484 <HAL_COMP_Init+0x1ec>
 8003480:	2380      	movs	r3, #128	; 0x80
 8003482:	02db      	lsls	r3, r3, #11
 8003484:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	2203      	movs	r2, #3
 800348c:	4013      	ands	r3, r2
 800348e:	d040      	beq.n	8003512 <HAL_COMP_Init+0x27a>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	2210      	movs	r2, #16
 8003496:	4013      	ands	r3, r2
 8003498:	d004      	beq.n	80034a4 <HAL_COMP_Init+0x20c>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	0018      	movs	r0, r3
 800349e:	f7ff fe9b 	bl	80031d8 <LL_EXTI_EnableRisingTrig_0_31>
 80034a2:	e003      	b.n	80034ac <HAL_COMP_Init+0x214>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	0018      	movs	r0, r3
 80034a8:	f7ff fea6 	bl	80031f8 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b0:	2220      	movs	r2, #32
 80034b2:	4013      	ands	r3, r2
 80034b4:	d004      	beq.n	80034c0 <HAL_COMP_Init+0x228>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	0018      	movs	r0, r3
 80034ba:	f7ff feaf 	bl	800321c <LL_EXTI_EnableFallingTrig_0_31>
 80034be:	e003      	b.n	80034c8 <HAL_COMP_Init+0x230>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	0018      	movs	r0, r3
 80034c4:	f7ff feba 	bl	800323c <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	0018      	movs	r0, r3
 80034cc:	f7ff fed6 	bl	800327c <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	0018      	movs	r0, r3
 80034d4:	f7ff fec4 	bl	8003260 <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	2202      	movs	r2, #2
 80034de:	4013      	ands	r3, r2
 80034e0:	d004      	beq.n	80034ec <HAL_COMP_Init+0x254>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	0018      	movs	r0, r3
 80034e6:	f7ff fe51 	bl	800318c <LL_EXTI_EnableEvent_0_31>
 80034ea:	e003      	b.n	80034f4 <HAL_COMP_Init+0x25c>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	0018      	movs	r0, r3
 80034f0:	f7ff fe5e 	bl	80031b0 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f8:	2201      	movs	r2, #1
 80034fa:	4013      	ands	r3, r2
 80034fc:	d004      	beq.n	8003508 <HAL_COMP_Init+0x270>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	0018      	movs	r0, r3
 8003502:	f7ff fe1d 	bl	8003140 <LL_EXTI_EnableIT_0_31>
 8003506:	e00c      	b.n	8003522 <HAL_COMP_Init+0x28a>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	0018      	movs	r0, r3
 800350c:	f7ff fe2a 	bl	8003164 <LL_EXTI_DisableIT_0_31>
 8003510:	e007      	b.n	8003522 <HAL_COMP_Init+0x28a>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	0018      	movs	r0, r3
 8003516:	f7ff fe4b 	bl	80031b0 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	0018      	movs	r0, r3
 800351e:	f7ff fe21 	bl	8003164 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2229      	movs	r2, #41	; 0x29
 8003526:	5c9b      	ldrb	r3, [r3, r2]
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d103      	bne.n	8003536 <HAL_COMP_Init+0x29e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2229      	movs	r2, #41	; 0x29
 8003532:	2101      	movs	r1, #1
 8003534:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8003536:	231f      	movs	r3, #31
 8003538:	18fb      	adds	r3, r7, r3
 800353a:	781b      	ldrb	r3, [r3, #0]
}
 800353c:	0018      	movs	r0, r3
 800353e:	46bd      	mov	sp, r7
 8003540:	b008      	add	sp, #32
 8003542:	bd80      	pop	{r7, pc}
 8003544:	fe00740f 	.word	0xfe00740f
 8003548:	40010200 	.word	0x40010200
 800354c:	fffff7ff 	.word	0xfffff7ff
 8003550:	ffffbfff 	.word	0xffffbfff
 8003554:	20005138 	.word	0x20005138
 8003558:	00030d40 	.word	0x00030d40

0800355c <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8003564:	2300      	movs	r3, #0
 8003566:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003568:	210f      	movs	r1, #15
 800356a:	187b      	adds	r3, r7, r1
 800356c:	2200      	movs	r2, #0
 800356e:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d103      	bne.n	800357e <HAL_COMP_Start+0x22>
  {
    status = HAL_ERROR;
 8003576:	187b      	adds	r3, r7, r1
 8003578:	2201      	movs	r2, #1
 800357a:	701a      	strb	r2, [r3, #0]
 800357c:	e034      	b.n	80035e8 <HAL_COMP_Start+0x8c>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	0fdb      	lsrs	r3, r3, #31
 8003586:	07da      	lsls	r2, r3, #31
 8003588:	2380      	movs	r3, #128	; 0x80
 800358a:	061b      	lsls	r3, r3, #24
 800358c:	429a      	cmp	r2, r3
 800358e:	d104      	bne.n	800359a <HAL_COMP_Start+0x3e>
  {
    status = HAL_ERROR;
 8003590:	230f      	movs	r3, #15
 8003592:	18fb      	adds	r3, r7, r3
 8003594:	2201      	movs	r2, #1
 8003596:	701a      	strb	r2, [r3, #0]
 8003598:	e026      	b.n	80035e8 <HAL_COMP_Start+0x8c>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2229      	movs	r2, #41	; 0x29
 800359e:	5c9b      	ldrb	r3, [r3, r2]
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d11c      	bne.n	80035e0 <HAL_COMP_Start+0x84>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2101      	movs	r1, #1
 80035b2:	430a      	orrs	r2, r1
 80035b4:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2229      	movs	r2, #41	; 0x29
 80035ba:	2102      	movs	r1, #2
 80035bc:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80035be:	4b0e      	ldr	r3, [pc, #56]	; (80035f8 <HAL_COMP_Start+0x9c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	490e      	ldr	r1, [pc, #56]	; (80035fc <HAL_COMP_Start+0xa0>)
 80035c4:	0018      	movs	r0, r3
 80035c6:	f7fc fd9d 	bl	8000104 <__udivsi3>
 80035ca:	0003      	movs	r3, r0
 80035cc:	00db      	lsls	r3, r3, #3
 80035ce:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80035d0:	e002      	b.n	80035d8 <HAL_COMP_Start+0x7c>
      {
        wait_loop_index--;
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	3b01      	subs	r3, #1
 80035d6:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1f9      	bne.n	80035d2 <HAL_COMP_Start+0x76>
 80035de:	e003      	b.n	80035e8 <HAL_COMP_Start+0x8c>
      }
    }
    else
    {
      status = HAL_ERROR;
 80035e0:	230f      	movs	r3, #15
 80035e2:	18fb      	adds	r3, r7, r3
 80035e4:	2201      	movs	r2, #1
 80035e6:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80035e8:	230f      	movs	r3, #15
 80035ea:	18fb      	adds	r3, r7, r3
 80035ec:	781b      	ldrb	r3, [r3, #0]
}
 80035ee:	0018      	movs	r0, r3
 80035f0:	46bd      	mov	sp, r7
 80035f2:	b004      	add	sp, #16
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	46c0      	nop			; (mov r8, r8)
 80035f8:	20005138 	.word	0x20005138
 80035fc:	00030d40 	.word	0x00030d40

08003600 <__NVIC_EnableIRQ>:
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	0002      	movs	r2, r0
 8003608:	1dfb      	adds	r3, r7, #7
 800360a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800360c:	1dfb      	adds	r3, r7, #7
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	2b7f      	cmp	r3, #127	; 0x7f
 8003612:	d809      	bhi.n	8003628 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003614:	1dfb      	adds	r3, r7, #7
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	001a      	movs	r2, r3
 800361a:	231f      	movs	r3, #31
 800361c:	401a      	ands	r2, r3
 800361e:	4b04      	ldr	r3, [pc, #16]	; (8003630 <__NVIC_EnableIRQ+0x30>)
 8003620:	2101      	movs	r1, #1
 8003622:	4091      	lsls	r1, r2
 8003624:	000a      	movs	r2, r1
 8003626:	601a      	str	r2, [r3, #0]
}
 8003628:	46c0      	nop			; (mov r8, r8)
 800362a:	46bd      	mov	sp, r7
 800362c:	b002      	add	sp, #8
 800362e:	bd80      	pop	{r7, pc}
 8003630:	e000e100 	.word	0xe000e100

08003634 <__NVIC_SetPriority>:
{
 8003634:	b590      	push	{r4, r7, lr}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	0002      	movs	r2, r0
 800363c:	6039      	str	r1, [r7, #0]
 800363e:	1dfb      	adds	r3, r7, #7
 8003640:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003642:	1dfb      	adds	r3, r7, #7
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	2b7f      	cmp	r3, #127	; 0x7f
 8003648:	d828      	bhi.n	800369c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800364a:	4a2f      	ldr	r2, [pc, #188]	; (8003708 <__NVIC_SetPriority+0xd4>)
 800364c:	1dfb      	adds	r3, r7, #7
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	b25b      	sxtb	r3, r3
 8003652:	089b      	lsrs	r3, r3, #2
 8003654:	33c0      	adds	r3, #192	; 0xc0
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	589b      	ldr	r3, [r3, r2]
 800365a:	1dfa      	adds	r2, r7, #7
 800365c:	7812      	ldrb	r2, [r2, #0]
 800365e:	0011      	movs	r1, r2
 8003660:	2203      	movs	r2, #3
 8003662:	400a      	ands	r2, r1
 8003664:	00d2      	lsls	r2, r2, #3
 8003666:	21ff      	movs	r1, #255	; 0xff
 8003668:	4091      	lsls	r1, r2
 800366a:	000a      	movs	r2, r1
 800366c:	43d2      	mvns	r2, r2
 800366e:	401a      	ands	r2, r3
 8003670:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	019b      	lsls	r3, r3, #6
 8003676:	22ff      	movs	r2, #255	; 0xff
 8003678:	401a      	ands	r2, r3
 800367a:	1dfb      	adds	r3, r7, #7
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	0018      	movs	r0, r3
 8003680:	2303      	movs	r3, #3
 8003682:	4003      	ands	r3, r0
 8003684:	00db      	lsls	r3, r3, #3
 8003686:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003688:	481f      	ldr	r0, [pc, #124]	; (8003708 <__NVIC_SetPriority+0xd4>)
 800368a:	1dfb      	adds	r3, r7, #7
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	b25b      	sxtb	r3, r3
 8003690:	089b      	lsrs	r3, r3, #2
 8003692:	430a      	orrs	r2, r1
 8003694:	33c0      	adds	r3, #192	; 0xc0
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	501a      	str	r2, [r3, r0]
}
 800369a:	e031      	b.n	8003700 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800369c:	4a1b      	ldr	r2, [pc, #108]	; (800370c <__NVIC_SetPriority+0xd8>)
 800369e:	1dfb      	adds	r3, r7, #7
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	0019      	movs	r1, r3
 80036a4:	230f      	movs	r3, #15
 80036a6:	400b      	ands	r3, r1
 80036a8:	3b08      	subs	r3, #8
 80036aa:	089b      	lsrs	r3, r3, #2
 80036ac:	3306      	adds	r3, #6
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	18d3      	adds	r3, r2, r3
 80036b2:	3304      	adds	r3, #4
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	1dfa      	adds	r2, r7, #7
 80036b8:	7812      	ldrb	r2, [r2, #0]
 80036ba:	0011      	movs	r1, r2
 80036bc:	2203      	movs	r2, #3
 80036be:	400a      	ands	r2, r1
 80036c0:	00d2      	lsls	r2, r2, #3
 80036c2:	21ff      	movs	r1, #255	; 0xff
 80036c4:	4091      	lsls	r1, r2
 80036c6:	000a      	movs	r2, r1
 80036c8:	43d2      	mvns	r2, r2
 80036ca:	401a      	ands	r2, r3
 80036cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	019b      	lsls	r3, r3, #6
 80036d2:	22ff      	movs	r2, #255	; 0xff
 80036d4:	401a      	ands	r2, r3
 80036d6:	1dfb      	adds	r3, r7, #7
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	0018      	movs	r0, r3
 80036dc:	2303      	movs	r3, #3
 80036de:	4003      	ands	r3, r0
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036e4:	4809      	ldr	r0, [pc, #36]	; (800370c <__NVIC_SetPriority+0xd8>)
 80036e6:	1dfb      	adds	r3, r7, #7
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	001c      	movs	r4, r3
 80036ec:	230f      	movs	r3, #15
 80036ee:	4023      	ands	r3, r4
 80036f0:	3b08      	subs	r3, #8
 80036f2:	089b      	lsrs	r3, r3, #2
 80036f4:	430a      	orrs	r2, r1
 80036f6:	3306      	adds	r3, #6
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	18c3      	adds	r3, r0, r3
 80036fc:	3304      	adds	r3, #4
 80036fe:	601a      	str	r2, [r3, #0]
}
 8003700:	46c0      	nop			; (mov r8, r8)
 8003702:	46bd      	mov	sp, r7
 8003704:	b003      	add	sp, #12
 8003706:	bd90      	pop	{r4, r7, pc}
 8003708:	e000e100 	.word	0xe000e100
 800370c:	e000ed00 	.word	0xe000ed00

08003710 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	1e5a      	subs	r2, r3, #1
 800371c:	2380      	movs	r3, #128	; 0x80
 800371e:	045b      	lsls	r3, r3, #17
 8003720:	429a      	cmp	r2, r3
 8003722:	d301      	bcc.n	8003728 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003724:	2301      	movs	r3, #1
 8003726:	e010      	b.n	800374a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003728:	4b0a      	ldr	r3, [pc, #40]	; (8003754 <SysTick_Config+0x44>)
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	3a01      	subs	r2, #1
 800372e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003730:	2301      	movs	r3, #1
 8003732:	425b      	negs	r3, r3
 8003734:	2103      	movs	r1, #3
 8003736:	0018      	movs	r0, r3
 8003738:	f7ff ff7c 	bl	8003634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800373c:	4b05      	ldr	r3, [pc, #20]	; (8003754 <SysTick_Config+0x44>)
 800373e:	2200      	movs	r2, #0
 8003740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003742:	4b04      	ldr	r3, [pc, #16]	; (8003754 <SysTick_Config+0x44>)
 8003744:	2207      	movs	r2, #7
 8003746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003748:	2300      	movs	r3, #0
}
 800374a:	0018      	movs	r0, r3
 800374c:	46bd      	mov	sp, r7
 800374e:	b002      	add	sp, #8
 8003750:	bd80      	pop	{r7, pc}
 8003752:	46c0      	nop			; (mov r8, r8)
 8003754:	e000e010 	.word	0xe000e010

08003758 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	60b9      	str	r1, [r7, #8]
 8003760:	607a      	str	r2, [r7, #4]
 8003762:	210f      	movs	r1, #15
 8003764:	187b      	adds	r3, r7, r1
 8003766:	1c02      	adds	r2, r0, #0
 8003768:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	187b      	adds	r3, r7, r1
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	b25b      	sxtb	r3, r3
 8003772:	0011      	movs	r1, r2
 8003774:	0018      	movs	r0, r3
 8003776:	f7ff ff5d 	bl	8003634 <__NVIC_SetPriority>
}
 800377a:	46c0      	nop			; (mov r8, r8)
 800377c:	46bd      	mov	sp, r7
 800377e:	b004      	add	sp, #16
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b082      	sub	sp, #8
 8003786:	af00      	add	r7, sp, #0
 8003788:	0002      	movs	r2, r0
 800378a:	1dfb      	adds	r3, r7, #7
 800378c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800378e:	1dfb      	adds	r3, r7, #7
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	b25b      	sxtb	r3, r3
 8003794:	0018      	movs	r0, r3
 8003796:	f7ff ff33 	bl	8003600 <__NVIC_EnableIRQ>
}
 800379a:	46c0      	nop			; (mov r8, r8)
 800379c:	46bd      	mov	sp, r7
 800379e:	b002      	add	sp, #8
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b082      	sub	sp, #8
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	0018      	movs	r0, r3
 80037ae:	f7ff ffaf 	bl	8003710 <SysTick_Config>
 80037b2:	0003      	movs	r3, r0
}
 80037b4:	0018      	movs	r0, r3
 80037b6:	46bd      	mov	sp, r7
 80037b8:	b002      	add	sp, #8
 80037ba:	bd80      	pop	{r7, pc}

080037bc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e077      	b.n	80038be <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a3d      	ldr	r2, [pc, #244]	; (80038c8 <HAL_DMA_Init+0x10c>)
 80037d4:	4694      	mov	ip, r2
 80037d6:	4463      	add	r3, ip
 80037d8:	2114      	movs	r1, #20
 80037da:	0018      	movs	r0, r3
 80037dc:	f7fc fc92 	bl	8000104 <__udivsi3>
 80037e0:	0003      	movs	r3, r0
 80037e2:	009a      	lsls	r2, r3, #2
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2225      	movs	r2, #37	; 0x25
 80037ec:	2102      	movs	r1, #2
 80037ee:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4934      	ldr	r1, [pc, #208]	; (80038cc <HAL_DMA_Init+0x110>)
 80037fc:	400a      	ands	r2, r1
 80037fe:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6819      	ldr	r1, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689a      	ldr	r2, [r3, #8]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	431a      	orrs	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	431a      	orrs	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	431a      	orrs	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	431a      	orrs	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	431a      	orrs	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	430a      	orrs	r2, r1
 8003834:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	0018      	movs	r0, r3
 800383a:	f000 fa37 	bl	8003cac <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	689a      	ldr	r2, [r3, #8]
 8003842:	2380      	movs	r3, #128	; 0x80
 8003844:	01db      	lsls	r3, r3, #7
 8003846:	429a      	cmp	r2, r3
 8003848:	d102      	bne.n	8003850 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003858:	213f      	movs	r1, #63	; 0x3f
 800385a:	400a      	ands	r2, r1
 800385c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003866:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d011      	beq.n	8003894 <HAL_DMA_Init+0xd8>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b04      	cmp	r3, #4
 8003876:	d80d      	bhi.n	8003894 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	0018      	movs	r0, r3
 800387c:	f000 fa42 	bl	8003d04 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003884:	2200      	movs	r2, #0
 8003886:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003890:	605a      	str	r2, [r3, #4]
 8003892:	e008      	b.n	80038a6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2225      	movs	r2, #37	; 0x25
 80038b0:	2101      	movs	r1, #1
 80038b2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2224      	movs	r2, #36	; 0x24
 80038b8:	2100      	movs	r1, #0
 80038ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	0018      	movs	r0, r3
 80038c0:	46bd      	mov	sp, r7
 80038c2:	b002      	add	sp, #8
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	46c0      	nop			; (mov r8, r8)
 80038c8:	bffdfff8 	.word	0xbffdfff8
 80038cc:	ffff800f 	.word	0xffff800f

080038d0 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
 80038dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038de:	2317      	movs	r3, #23
 80038e0:	18fb      	adds	r3, r7, r3
 80038e2:	2200      	movs	r2, #0
 80038e4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2224      	movs	r2, #36	; 0x24
 80038ea:	5c9b      	ldrb	r3, [r3, r2]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d101      	bne.n	80038f4 <HAL_DMA_Start_IT+0x24>
 80038f0:	2302      	movs	r3, #2
 80038f2:	e06f      	b.n	80039d4 <HAL_DMA_Start_IT+0x104>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2224      	movs	r2, #36	; 0x24
 80038f8:	2101      	movs	r1, #1
 80038fa:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2225      	movs	r2, #37	; 0x25
 8003900:	5c9b      	ldrb	r3, [r3, r2]
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b01      	cmp	r3, #1
 8003906:	d157      	bne.n	80039b8 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2225      	movs	r2, #37	; 0x25
 800390c:	2102      	movs	r1, #2
 800390e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2101      	movs	r1, #1
 8003922:	438a      	bics	r2, r1
 8003924:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	68b9      	ldr	r1, [r7, #8]
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f000 f97d 	bl	8003c2c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003936:	2b00      	cmp	r3, #0
 8003938:	d008      	beq.n	800394c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	210e      	movs	r1, #14
 8003946:	430a      	orrs	r2, r1
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	e00f      	b.n	800396c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2104      	movs	r1, #4
 8003958:	438a      	bics	r2, r1
 800395a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	210a      	movs	r1, #10
 8003968:	430a      	orrs	r2, r1
 800396a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	2380      	movs	r3, #128	; 0x80
 8003974:	025b      	lsls	r3, r3, #9
 8003976:	4013      	ands	r3, r2
 8003978:	d008      	beq.n	800398c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003984:	2180      	movs	r1, #128	; 0x80
 8003986:	0049      	lsls	r1, r1, #1
 8003988:	430a      	orrs	r2, r1
 800398a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003990:	2b00      	cmp	r3, #0
 8003992:	d008      	beq.n	80039a6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800399e:	2180      	movs	r1, #128	; 0x80
 80039a0:	0049      	lsls	r1, r1, #1
 80039a2:	430a      	orrs	r2, r1
 80039a4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2101      	movs	r1, #1
 80039b2:	430a      	orrs	r2, r1
 80039b4:	601a      	str	r2, [r3, #0]
 80039b6:	e00a      	b.n	80039ce <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2280      	movs	r2, #128	; 0x80
 80039bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2224      	movs	r2, #36	; 0x24
 80039c2:	2100      	movs	r1, #0
 80039c4:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80039c6:	2317      	movs	r3, #23
 80039c8:	18fb      	adds	r3, r7, r3
 80039ca:	2201      	movs	r2, #1
 80039cc:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80039ce:	2317      	movs	r3, #23
 80039d0:	18fb      	adds	r3, r7, r3
 80039d2:	781b      	ldrb	r3, [r3, #0]
}
 80039d4:	0018      	movs	r0, r3
 80039d6:	46bd      	mov	sp, r7
 80039d8:	b006      	add	sp, #24
 80039da:	bd80      	pop	{r7, pc}

080039dc <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039e4:	210f      	movs	r1, #15
 80039e6:	187b      	adds	r3, r7, r1
 80039e8:	2200      	movs	r2, #0
 80039ea:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2225      	movs	r2, #37	; 0x25
 80039f0:	5c9b      	ldrb	r3, [r3, r2]
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d006      	beq.n	8003a06 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2204      	movs	r2, #4
 80039fc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80039fe:	187b      	adds	r3, r7, r1
 8003a00:	2201      	movs	r2, #1
 8003a02:	701a      	strb	r2, [r3, #0]
 8003a04:	e049      	b.n	8003a9a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	210e      	movs	r1, #14
 8003a12:	438a      	bics	r2, r1
 8003a14:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2101      	movs	r1, #1
 8003a22:	438a      	bics	r2, r1
 8003a24:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a30:	491d      	ldr	r1, [pc, #116]	; (8003aa8 <HAL_DMA_Abort_IT+0xcc>)
 8003a32:	400a      	ands	r2, r1
 8003a34:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8003a36:	4b1d      	ldr	r3, [pc, #116]	; (8003aac <HAL_DMA_Abort_IT+0xd0>)
 8003a38:	6859      	ldr	r1, [r3, #4]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	221c      	movs	r2, #28
 8003a40:	4013      	ands	r3, r2
 8003a42:	2201      	movs	r2, #1
 8003a44:	409a      	lsls	r2, r3
 8003a46:	4b19      	ldr	r3, [pc, #100]	; (8003aac <HAL_DMA_Abort_IT+0xd0>)
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	605a      	str	r2, [r3, #4]
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003a54:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00c      	beq.n	8003a78 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a68:	490f      	ldr	r1, [pc, #60]	; (8003aa8 <HAL_DMA_Abort_IT+0xcc>)
 8003a6a:	400a      	ands	r2, r1
 8003a6c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003a76:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2225      	movs	r2, #37	; 0x25
 8003a7c:	2101      	movs	r1, #1
 8003a7e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2224      	movs	r2, #36	; 0x24
 8003a84:	2100      	movs	r1, #0
 8003a86:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d004      	beq.n	8003a9a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	0010      	movs	r0, r2
 8003a98:	4798      	blx	r3
    }
  }
  return status;
 8003a9a:	230f      	movs	r3, #15
 8003a9c:	18fb      	adds	r3, r7, r3
 8003a9e:	781b      	ldrb	r3, [r3, #0]
}
 8003aa0:	0018      	movs	r0, r3
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	b004      	add	sp, #16
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	fffffeff 	.word	0xfffffeff
 8003aac:	40020000 	.word	0x40020000

08003ab0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003ab8:	4b55      	ldr	r3, [pc, #340]	; (8003c10 <HAL_DMA_IRQHandler+0x160>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t source_it = hdma->Instance->CCR;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	221c      	movs	r2, #28
 8003acc:	4013      	ands	r3, r2
 8003ace:	2204      	movs	r2, #4
 8003ad0:	409a      	lsls	r2, r3
 8003ad2:	0013      	movs	r3, r2
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	d027      	beq.n	8003b2a <HAL_DMA_IRQHandler+0x7a>
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	2204      	movs	r2, #4
 8003ade:	4013      	ands	r3, r2
 8003ae0:	d023      	beq.n	8003b2a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	4013      	ands	r3, r2
 8003aec:	d107      	bne.n	8003afe <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2104      	movs	r1, #4
 8003afa:	438a      	bics	r2, r1
 8003afc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8003afe:	4b44      	ldr	r3, [pc, #272]	; (8003c10 <HAL_DMA_IRQHandler+0x160>)
 8003b00:	6859      	ldr	r1, [r3, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	221c      	movs	r2, #28
 8003b08:	4013      	ands	r3, r2
 8003b0a:	2204      	movs	r2, #4
 8003b0c:	409a      	lsls	r2, r3
 8003b0e:	4b40      	ldr	r3, [pc, #256]	; (8003c10 <HAL_DMA_IRQHandler+0x160>)
 8003b10:	430a      	orrs	r2, r1
 8003b12:	605a      	str	r2, [r3, #4]
#endif

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d100      	bne.n	8003b1e <HAL_DMA_IRQHandler+0x6e>
 8003b1c:	e073      	b.n	8003c06 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	0010      	movs	r0, r2
 8003b26:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003b28:	e06d      	b.n	8003c06 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	221c      	movs	r2, #28
 8003b30:	4013      	ands	r3, r2
 8003b32:	2202      	movs	r2, #2
 8003b34:	409a      	lsls	r2, r3
 8003b36:	0013      	movs	r3, r2
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	d02e      	beq.n	8003b9c <HAL_DMA_IRQHandler+0xec>
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	2202      	movs	r2, #2
 8003b42:	4013      	ands	r3, r2
 8003b44:	d02a      	beq.n	8003b9c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	4013      	ands	r3, r2
 8003b50:	d10b      	bne.n	8003b6a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	210a      	movs	r1, #10
 8003b5e:	438a      	bics	r2, r1
 8003b60:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2225      	movs	r2, #37	; 0x25
 8003b66:	2101      	movs	r1, #1
 8003b68:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003b6a:	4b29      	ldr	r3, [pc, #164]	; (8003c10 <HAL_DMA_IRQHandler+0x160>)
 8003b6c:	6859      	ldr	r1, [r3, #4]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	221c      	movs	r2, #28
 8003b74:	4013      	ands	r3, r2
 8003b76:	2202      	movs	r2, #2
 8003b78:	409a      	lsls	r2, r3
 8003b7a:	4b25      	ldr	r3, [pc, #148]	; (8003c10 <HAL_DMA_IRQHandler+0x160>)
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2224      	movs	r2, #36	; 0x24
 8003b84:	2100      	movs	r1, #0
 8003b86:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d03a      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	0010      	movs	r0, r2
 8003b98:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003b9a:	e034      	b.n	8003c06 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba0:	221c      	movs	r2, #28
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	2208      	movs	r2, #8
 8003ba6:	409a      	lsls	r2, r3
 8003ba8:	0013      	movs	r3, r2
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	4013      	ands	r3, r2
 8003bae:	d02b      	beq.n	8003c08 <HAL_DMA_IRQHandler+0x158>
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	2208      	movs	r2, #8
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	d027      	beq.n	8003c08 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	210e      	movs	r1, #14
 8003bc4:	438a      	bics	r2, r1
 8003bc6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003bc8:	4b11      	ldr	r3, [pc, #68]	; (8003c10 <HAL_DMA_IRQHandler+0x160>)
 8003bca:	6859      	ldr	r1, [r3, #4]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd0:	221c      	movs	r2, #28
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	409a      	lsls	r2, r3
 8003bd8:	4b0d      	ldr	r3, [pc, #52]	; (8003c10 <HAL_DMA_IRQHandler+0x160>)
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	605a      	str	r2, [r3, #4]
#endif

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2225      	movs	r2, #37	; 0x25
 8003be8:	2101      	movs	r1, #1
 8003bea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2224      	movs	r2, #36	; 0x24
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d005      	beq.n	8003c08 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	0010      	movs	r0, r2
 8003c04:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003c06:	46c0      	nop			; (mov r8, r8)
 8003c08:	46c0      	nop			; (mov r8, r8)
}
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	b004      	add	sp, #16
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	40020000 	.word	0x40020000

08003c14 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2225      	movs	r2, #37	; 0x25
 8003c20:	5c9b      	ldrb	r3, [r3, r2]
 8003c22:	b2db      	uxtb	r3, r3
}
 8003c24:	0018      	movs	r0, r3
 8003c26:	46bd      	mov	sp, r7
 8003c28:	b002      	add	sp, #8
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
 8003c38:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003c42:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d004      	beq.n	8003c56 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003c54:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003c56:	4b14      	ldr	r3, [pc, #80]	; (8003ca8 <DMA_SetConfig+0x7c>)
 8003c58:	6859      	ldr	r1, [r3, #4]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	221c      	movs	r2, #28
 8003c60:	4013      	ands	r3, r2
 8003c62:	2201      	movs	r2, #1
 8003c64:	409a      	lsls	r2, r3
 8003c66:	4b10      	ldr	r3, [pc, #64]	; (8003ca8 <DMA_SetConfig+0x7c>)
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	605a      	str	r2, [r3, #4]
#endif

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	2b10      	cmp	r3, #16
 8003c7a:	d108      	bne.n	8003c8e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68ba      	ldr	r2, [r7, #8]
 8003c8a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c8c:	e007      	b.n	8003c9e <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	60da      	str	r2, [r3, #12]
}
 8003c9e:	46c0      	nop			; (mov r8, r8)
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	b004      	add	sp, #16
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	46c0      	nop			; (mov r8, r8)
 8003ca8:	40020000 	.word	0x40020000

08003cac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb8:	089b      	lsrs	r3, r3, #2
 8003cba:	4a10      	ldr	r2, [pc, #64]	; (8003cfc <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003cbc:	4694      	mov	ip, r2
 8003cbe:	4463      	add	r3, ip
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	001a      	movs	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	001a      	movs	r2, r3
 8003cce:	23ff      	movs	r3, #255	; 0xff
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	3b08      	subs	r3, #8
 8003cd4:	2114      	movs	r1, #20
 8003cd6:	0018      	movs	r0, r3
 8003cd8:	f7fc fa14 	bl	8000104 <__udivsi3>
 8003cdc:	0003      	movs	r3, r0
 8003cde:	60fb      	str	r3, [r7, #12]
#endif

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a07      	ldr	r2, [pc, #28]	; (8003d00 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003ce4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	221f      	movs	r2, #31
 8003cea:	4013      	ands	r3, r2
 8003cec:	2201      	movs	r2, #1
 8003cee:	409a      	lsls	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003cf4:	46c0      	nop			; (mov r8, r8)
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	b004      	add	sp, #16
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	10008200 	.word	0x10008200
 8003d00:	40020880 	.word	0x40020880

08003d04 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	223f      	movs	r2, #63	; 0x3f
 8003d12:	4013      	ands	r3, r2
 8003d14:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	4a0a      	ldr	r2, [pc, #40]	; (8003d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003d1a:	4694      	mov	ip, r2
 8003d1c:	4463      	add	r3, ip
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	001a      	movs	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a07      	ldr	r2, [pc, #28]	; (8003d48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003d2a:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	2203      	movs	r2, #3
 8003d32:	4013      	ands	r3, r2
 8003d34:	2201      	movs	r2, #1
 8003d36:	409a      	lsls	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003d3c:	46c0      	nop			; (mov r8, r8)
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	b004      	add	sp, #16
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	1000823f 	.word	0x1000823f
 8003d48:	40020940 	.word	0x40020940

08003d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d56:	2300      	movs	r3, #0
 8003d58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d5a:	e147      	b.n	8003fec <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2101      	movs	r1, #1
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	4091      	lsls	r1, r2
 8003d66:	000a      	movs	r2, r1
 8003d68:	4013      	ands	r3, r2
 8003d6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d100      	bne.n	8003d74 <HAL_GPIO_Init+0x28>
 8003d72:	e138      	b.n	8003fe6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d00b      	beq.n	8003d94 <HAL_GPIO_Init+0x48>
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d007      	beq.n	8003d94 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d88:	2b11      	cmp	r3, #17
 8003d8a:	d003      	beq.n	8003d94 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	2b12      	cmp	r3, #18
 8003d92:	d130      	bne.n	8003df6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	2203      	movs	r2, #3
 8003da0:	409a      	lsls	r2, r3
 8003da2:	0013      	movs	r3, r2
 8003da4:	43da      	mvns	r2, r3
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	4013      	ands	r3, r2
 8003daa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	68da      	ldr	r2, [r3, #12]
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	409a      	lsls	r2, r3
 8003db6:	0013      	movs	r3, r2
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003dca:	2201      	movs	r2, #1
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	409a      	lsls	r2, r3
 8003dd0:	0013      	movs	r3, r2
 8003dd2:	43da      	mvns	r2, r3
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	091b      	lsrs	r3, r3, #4
 8003de0:	2201      	movs	r2, #1
 8003de2:	401a      	ands	r2, r3
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	409a      	lsls	r2, r3
 8003de8:	0013      	movs	r3, r2
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	2203      	movs	r2, #3
 8003e02:	409a      	lsls	r2, r3
 8003e04:	0013      	movs	r3, r2
 8003e06:	43da      	mvns	r2, r3
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	689a      	ldr	r2, [r3, #8]
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	409a      	lsls	r2, r3
 8003e18:	0013      	movs	r3, r2
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d003      	beq.n	8003e36 <HAL_GPIO_Init+0xea>
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	2b12      	cmp	r3, #18
 8003e34:	d123      	bne.n	8003e7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	08da      	lsrs	r2, r3, #3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	3208      	adds	r2, #8
 8003e3e:	0092      	lsls	r2, r2, #2
 8003e40:	58d3      	ldr	r3, [r2, r3]
 8003e42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	2207      	movs	r2, #7
 8003e48:	4013      	ands	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	220f      	movs	r2, #15
 8003e4e:	409a      	lsls	r2, r3
 8003e50:	0013      	movs	r3, r2
 8003e52:	43da      	mvns	r2, r3
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	4013      	ands	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	691a      	ldr	r2, [r3, #16]
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	2107      	movs	r1, #7
 8003e62:	400b      	ands	r3, r1
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	409a      	lsls	r2, r3
 8003e68:	0013      	movs	r3, r2
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	08da      	lsrs	r2, r3, #3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	3208      	adds	r2, #8
 8003e78:	0092      	lsls	r2, r2, #2
 8003e7a:	6939      	ldr	r1, [r7, #16]
 8003e7c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	2203      	movs	r2, #3
 8003e8a:	409a      	lsls	r2, r3
 8003e8c:	0013      	movs	r3, r2
 8003e8e:	43da      	mvns	r2, r3
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	4013      	ands	r3, r2
 8003e94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	2203      	movs	r2, #3
 8003e9c:	401a      	ands	r2, r3
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	409a      	lsls	r2, r3
 8003ea4:	0013      	movs	r3, r2
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685a      	ldr	r2, [r3, #4]
 8003eb6:	2380      	movs	r3, #128	; 0x80
 8003eb8:	055b      	lsls	r3, r3, #21
 8003eba:	4013      	ands	r3, r2
 8003ebc:	d100      	bne.n	8003ec0 <HAL_GPIO_Init+0x174>
 8003ebe:	e092      	b.n	8003fe6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003ec0:	4a50      	ldr	r2, [pc, #320]	; (8004004 <HAL_GPIO_Init+0x2b8>)
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	089b      	lsrs	r3, r3, #2
 8003ec6:	3318      	adds	r3, #24
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	589b      	ldr	r3, [r3, r2]
 8003ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	2203      	movs	r2, #3
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	00db      	lsls	r3, r3, #3
 8003ed6:	220f      	movs	r2, #15
 8003ed8:	409a      	lsls	r2, r3
 8003eda:	0013      	movs	r3, r2
 8003edc:	43da      	mvns	r2, r3
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	23a0      	movs	r3, #160	; 0xa0
 8003ee8:	05db      	lsls	r3, r3, #23
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d013      	beq.n	8003f16 <HAL_GPIO_Init+0x1ca>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a45      	ldr	r2, [pc, #276]	; (8004008 <HAL_GPIO_Init+0x2bc>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d00d      	beq.n	8003f12 <HAL_GPIO_Init+0x1c6>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a44      	ldr	r2, [pc, #272]	; (800400c <HAL_GPIO_Init+0x2c0>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d007      	beq.n	8003f0e <HAL_GPIO_Init+0x1c2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a43      	ldr	r2, [pc, #268]	; (8004010 <HAL_GPIO_Init+0x2c4>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d101      	bne.n	8003f0a <HAL_GPIO_Init+0x1be>
 8003f06:	2303      	movs	r3, #3
 8003f08:	e006      	b.n	8003f18 <HAL_GPIO_Init+0x1cc>
 8003f0a:	2305      	movs	r3, #5
 8003f0c:	e004      	b.n	8003f18 <HAL_GPIO_Init+0x1cc>
 8003f0e:	2302      	movs	r3, #2
 8003f10:	e002      	b.n	8003f18 <HAL_GPIO_Init+0x1cc>
 8003f12:	2301      	movs	r3, #1
 8003f14:	e000      	b.n	8003f18 <HAL_GPIO_Init+0x1cc>
 8003f16:	2300      	movs	r3, #0
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	2103      	movs	r1, #3
 8003f1c:	400a      	ands	r2, r1
 8003f1e:	00d2      	lsls	r2, r2, #3
 8003f20:	4093      	lsls	r3, r2
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003f28:	4936      	ldr	r1, [pc, #216]	; (8004004 <HAL_GPIO_Init+0x2b8>)
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	089b      	lsrs	r3, r3, #2
 8003f2e:	3318      	adds	r3, #24
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003f36:	4a33      	ldr	r2, [pc, #204]	; (8004004 <HAL_GPIO_Init+0x2b8>)
 8003f38:	2380      	movs	r3, #128	; 0x80
 8003f3a:	58d3      	ldr	r3, [r2, r3]
 8003f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	43da      	mvns	r2, r3
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	4013      	ands	r3, r2
 8003f46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	2380      	movs	r3, #128	; 0x80
 8003f4e:	025b      	lsls	r3, r3, #9
 8003f50:	4013      	ands	r3, r2
 8003f52:	d003      	beq.n	8003f5c <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f5c:	4929      	ldr	r1, [pc, #164]	; (8004004 <HAL_GPIO_Init+0x2b8>)
 8003f5e:	2280      	movs	r2, #128	; 0x80
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8003f64:	4a27      	ldr	r2, [pc, #156]	; (8004004 <HAL_GPIO_Init+0x2b8>)
 8003f66:	2384      	movs	r3, #132	; 0x84
 8003f68:	58d3      	ldr	r3, [r2, r3]
 8003f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	43da      	mvns	r2, r3
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	4013      	ands	r3, r2
 8003f74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	685a      	ldr	r2, [r3, #4]
 8003f7a:	2380      	movs	r3, #128	; 0x80
 8003f7c:	029b      	lsls	r3, r3, #10
 8003f7e:	4013      	ands	r3, r2
 8003f80:	d003      	beq.n	8003f8a <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f8a:	491e      	ldr	r1, [pc, #120]	; (8004004 <HAL_GPIO_Init+0x2b8>)
 8003f8c:	2284      	movs	r2, #132	; 0x84
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f92:	4b1c      	ldr	r3, [pc, #112]	; (8004004 <HAL_GPIO_Init+0x2b8>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	43da      	mvns	r2, r3
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685a      	ldr	r2, [r3, #4]
 8003fa6:	2380      	movs	r3, #128	; 0x80
 8003fa8:	035b      	lsls	r3, r3, #13
 8003faa:	4013      	ands	r3, r2
 8003fac:	d003      	beq.n	8003fb6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003fb6:	4b13      	ldr	r3, [pc, #76]	; (8004004 <HAL_GPIO_Init+0x2b8>)
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003fbc:	4b11      	ldr	r3, [pc, #68]	; (8004004 <HAL_GPIO_Init+0x2b8>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	43da      	mvns	r2, r3
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	2380      	movs	r3, #128	; 0x80
 8003fd2:	039b      	lsls	r3, r3, #14
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	d003      	beq.n	8003fe0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003fe0:	4b08      	ldr	r3, [pc, #32]	; (8004004 <HAL_GPIO_Init+0x2b8>)
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	40da      	lsrs	r2, r3
 8003ff4:	1e13      	subs	r3, r2, #0
 8003ff6:	d000      	beq.n	8003ffa <HAL_GPIO_Init+0x2ae>
 8003ff8:	e6b0      	b.n	8003d5c <HAL_GPIO_Init+0x10>
  }
}
 8003ffa:	46c0      	nop			; (mov r8, r8)
 8003ffc:	46c0      	nop			; (mov r8, r8)
 8003ffe:	46bd      	mov	sp, r7
 8004000:	b006      	add	sp, #24
 8004002:	bd80      	pop	{r7, pc}
 8004004:	40021800 	.word	0x40021800
 8004008:	50000400 	.word	0x50000400
 800400c:	50000800 	.word	0x50000800
 8004010:	50000c00 	.word	0x50000c00

08004014 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e082      	b.n	800412c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2241      	movs	r2, #65	; 0x41
 800402a:	5c9b      	ldrb	r3, [r3, r2]
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d107      	bne.n	8004042 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2240      	movs	r2, #64	; 0x40
 8004036:	2100      	movs	r1, #0
 8004038:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	0018      	movs	r0, r3
 800403e:	f7fe fba1 	bl	8002784 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2241      	movs	r2, #65	; 0x41
 8004046:	2124      	movs	r1, #36	; 0x24
 8004048:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2101      	movs	r1, #1
 8004056:	438a      	bics	r2, r1
 8004058:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4934      	ldr	r1, [pc, #208]	; (8004134 <HAL_I2C_Init+0x120>)
 8004064:	400a      	ands	r2, r1
 8004066:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689a      	ldr	r2, [r3, #8]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4931      	ldr	r1, [pc, #196]	; (8004138 <HAL_I2C_Init+0x124>)
 8004074:	400a      	ands	r2, r1
 8004076:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d108      	bne.n	8004092 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689a      	ldr	r2, [r3, #8]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2180      	movs	r1, #128	; 0x80
 800408a:	0209      	lsls	r1, r1, #8
 800408c:	430a      	orrs	r2, r1
 800408e:	609a      	str	r2, [r3, #8]
 8004090:	e007      	b.n	80040a2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	689a      	ldr	r2, [r3, #8]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2184      	movs	r1, #132	; 0x84
 800409c:	0209      	lsls	r1, r1, #8
 800409e:	430a      	orrs	r2, r1
 80040a0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d104      	bne.n	80040b4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2280      	movs	r2, #128	; 0x80
 80040b0:	0112      	lsls	r2, r2, #4
 80040b2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685a      	ldr	r2, [r3, #4]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	491f      	ldr	r1, [pc, #124]	; (800413c <HAL_I2C_Init+0x128>)
 80040c0:	430a      	orrs	r2, r1
 80040c2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68da      	ldr	r2, [r3, #12]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	491a      	ldr	r1, [pc, #104]	; (8004138 <HAL_I2C_Init+0x124>)
 80040d0:	400a      	ands	r2, r1
 80040d2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	691a      	ldr	r2, [r3, #16]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	431a      	orrs	r2, r3
 80040de:	0011      	movs	r1, r2
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	021a      	lsls	r2, r3, #8
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	430a      	orrs	r2, r1
 80040ec:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	69d9      	ldr	r1, [r3, #28]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1a      	ldr	r2, [r3, #32]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2101      	movs	r1, #1
 800410a:	430a      	orrs	r2, r1
 800410c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2241      	movs	r2, #65	; 0x41
 8004118:	2120      	movs	r1, #32
 800411a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2242      	movs	r2, #66	; 0x42
 8004126:	2100      	movs	r1, #0
 8004128:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	0018      	movs	r0, r3
 800412e:	46bd      	mov	sp, r7
 8004130:	b002      	add	sp, #8
 8004132:	bd80      	pop	{r7, pc}
 8004134:	f0ffffff 	.word	0xf0ffffff
 8004138:	ffff7fff 	.word	0xffff7fff
 800413c:	02008000 	.word	0x02008000

08004140 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800415c:	2b00      	cmp	r3, #0
 800415e:	d005      	beq.n	800416c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	68f9      	ldr	r1, [r7, #12]
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	4798      	blx	r3
  }
}
 800416c:	46c0      	nop			; (mov r8, r8)
 800416e:	46bd      	mov	sp, r7
 8004170:	b004      	add	sp, #16
 8004172:	bd80      	pop	{r7, pc}

08004174 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	0a1b      	lsrs	r3, r3, #8
 8004190:	001a      	movs	r2, r3
 8004192:	2301      	movs	r3, #1
 8004194:	4013      	ands	r3, r2
 8004196:	d010      	beq.n	80041ba <HAL_I2C_ER_IRQHandler+0x46>
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	09db      	lsrs	r3, r3, #7
 800419c:	001a      	movs	r2, r3
 800419e:	2301      	movs	r3, #1
 80041a0:	4013      	ands	r3, r2
 80041a2:	d00a      	beq.n	80041ba <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a8:	2201      	movs	r2, #1
 80041aa:	431a      	orrs	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2280      	movs	r2, #128	; 0x80
 80041b6:	0052      	lsls	r2, r2, #1
 80041b8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	0a9b      	lsrs	r3, r3, #10
 80041be:	001a      	movs	r2, r3
 80041c0:	2301      	movs	r3, #1
 80041c2:	4013      	ands	r3, r2
 80041c4:	d010      	beq.n	80041e8 <HAL_I2C_ER_IRQHandler+0x74>
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	09db      	lsrs	r3, r3, #7
 80041ca:	001a      	movs	r2, r3
 80041cc:	2301      	movs	r3, #1
 80041ce:	4013      	ands	r3, r2
 80041d0:	d00a      	beq.n	80041e8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d6:	2208      	movs	r2, #8
 80041d8:	431a      	orrs	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2280      	movs	r2, #128	; 0x80
 80041e4:	00d2      	lsls	r2, r2, #3
 80041e6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	0a5b      	lsrs	r3, r3, #9
 80041ec:	001a      	movs	r2, r3
 80041ee:	2301      	movs	r3, #1
 80041f0:	4013      	ands	r3, r2
 80041f2:	d010      	beq.n	8004216 <HAL_I2C_ER_IRQHandler+0xa2>
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	09db      	lsrs	r3, r3, #7
 80041f8:	001a      	movs	r2, r3
 80041fa:	2301      	movs	r3, #1
 80041fc:	4013      	ands	r3, r2
 80041fe:	d00a      	beq.n	8004216 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004204:	2202      	movs	r2, #2
 8004206:	431a      	orrs	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2280      	movs	r2, #128	; 0x80
 8004212:	0092      	lsls	r2, r2, #2
 8004214:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	220b      	movs	r2, #11
 8004220:	4013      	ands	r3, r2
 8004222:	d005      	beq.n	8004230 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	0011      	movs	r1, r2
 800422a:	0018      	movs	r0, r3
 800422c:	f000 fbd8 	bl	80049e0 <I2C_ITError>
  }
}
 8004230:	46c0      	nop			; (mov r8, r8)
 8004232:	46bd      	mov	sp, r7
 8004234:	b006      	add	sp, #24
 8004236:	bd80      	pop	{r7, pc}

08004238 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004240:	46c0      	nop			; (mov r8, r8)
 8004242:	46bd      	mov	sp, r7
 8004244:	b002      	add	sp, #8
 8004246:	bd80      	pop	{r7, pc}

08004248 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004250:	46c0      	nop			; (mov r8, r8)
 8004252:	46bd      	mov	sp, r7
 8004254:	b002      	add	sp, #8
 8004256:	bd80      	pop	{r7, pc}

08004258 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	0008      	movs	r0, r1
 8004262:	0011      	movs	r1, r2
 8004264:	1cfb      	adds	r3, r7, #3
 8004266:	1c02      	adds	r2, r0, #0
 8004268:	701a      	strb	r2, [r3, #0]
 800426a:	003b      	movs	r3, r7
 800426c:	1c0a      	adds	r2, r1, #0
 800426e:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004270:	46c0      	nop			; (mov r8, r8)
 8004272:	46bd      	mov	sp, r7
 8004274:	b002      	add	sp, #8
 8004276:	bd80      	pop	{r7, pc}

08004278 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004280:	46c0      	nop			; (mov r8, r8)
 8004282:	46bd      	mov	sp, r7
 8004284:	b002      	add	sp, #8
 8004286:	bd80      	pop	{r7, pc}

08004288 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004290:	46c0      	nop			; (mov r8, r8)
 8004292:	46bd      	mov	sp, r7
 8004294:	b002      	add	sp, #8
 8004296:	bd80      	pop	{r7, pc}

08004298 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80042a0:	46c0      	nop			; (mov r8, r8)
 80042a2:	46bd      	mov	sp, r7
 80042a4:	b002      	add	sp, #8
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2240      	movs	r2, #64	; 0x40
 80042c2:	5c9b      	ldrb	r3, [r3, r2]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d101      	bne.n	80042cc <I2C_Slave_ISR_IT+0x24>
 80042c8:	2302      	movs	r3, #2
 80042ca:	e0fa      	b.n	80044c2 <I2C_Slave_ISR_IT+0x21a>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2240      	movs	r2, #64	; 0x40
 80042d0:	2101      	movs	r1, #1
 80042d2:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	095b      	lsrs	r3, r3, #5
 80042d8:	001a      	movs	r2, r3
 80042da:	2301      	movs	r3, #1
 80042dc:	4013      	ands	r3, r2
 80042de:	d00b      	beq.n	80042f8 <I2C_Slave_ISR_IT+0x50>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	095b      	lsrs	r3, r3, #5
 80042e4:	001a      	movs	r2, r3
 80042e6:	2301      	movs	r3, #1
 80042e8:	4013      	ands	r3, r2
 80042ea:	d005      	beq.n	80042f8 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	0011      	movs	r1, r2
 80042f2:	0018      	movs	r0, r3
 80042f4:	f000 f9f6 	bl	80046e4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	091b      	lsrs	r3, r3, #4
 80042fc:	001a      	movs	r2, r3
 80042fe:	2301      	movs	r3, #1
 8004300:	4013      	ands	r3, r2
 8004302:	d054      	beq.n	80043ae <I2C_Slave_ISR_IT+0x106>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	091b      	lsrs	r3, r3, #4
 8004308:	001a      	movs	r2, r3
 800430a:	2301      	movs	r3, #1
 800430c:	4013      	ands	r3, r2
 800430e:	d04e      	beq.n	80043ae <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004314:	b29b      	uxth	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d12d      	bne.n	8004376 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2241      	movs	r2, #65	; 0x41
 800431e:	5c9b      	ldrb	r3, [r3, r2]
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b28      	cmp	r3, #40	; 0x28
 8004324:	d10b      	bne.n	800433e <I2C_Slave_ISR_IT+0x96>
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	2380      	movs	r3, #128	; 0x80
 800432a:	049b      	lsls	r3, r3, #18
 800432c:	429a      	cmp	r2, r3
 800432e:	d106      	bne.n	800433e <I2C_Slave_ISR_IT+0x96>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	0011      	movs	r1, r2
 8004336:	0018      	movs	r0, r3
 8004338:	f000 faf8 	bl	800492c <I2C_ITListenCplt>
 800433c:	e036      	b.n	80043ac <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2241      	movs	r2, #65	; 0x41
 8004342:	5c9b      	ldrb	r3, [r3, r2]
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b29      	cmp	r3, #41	; 0x29
 8004348:	d110      	bne.n	800436c <I2C_Slave_ISR_IT+0xc4>
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	4a5f      	ldr	r2, [pc, #380]	; (80044cc <I2C_Slave_ISR_IT+0x224>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d00c      	beq.n	800436c <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2210      	movs	r2, #16
 8004358:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	0018      	movs	r0, r3
 800435e:	f000 fc4a 	bl	8004bf6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	0018      	movs	r0, r3
 8004366:	f000 f957 	bl	8004618 <I2C_ITSlaveSeqCplt>
 800436a:	e01f      	b.n	80043ac <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2210      	movs	r2, #16
 8004372:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004374:	e09d      	b.n	80044b2 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2210      	movs	r2, #16
 800437c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004382:	2204      	movs	r2, #4
 8004384:	431a      	orrs	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d005      	beq.n	800439c <I2C_Slave_ISR_IT+0xf4>
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	2380      	movs	r3, #128	; 0x80
 8004394:	045b      	lsls	r3, r3, #17
 8004396:	429a      	cmp	r2, r3
 8004398:	d000      	beq.n	800439c <I2C_Slave_ISR_IT+0xf4>
 800439a:	e08a      	b.n	80044b2 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	0011      	movs	r1, r2
 80043a4:	0018      	movs	r0, r3
 80043a6:	f000 fb1b 	bl	80049e0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80043aa:	e082      	b.n	80044b2 <I2C_Slave_ISR_IT+0x20a>
 80043ac:	e081      	b.n	80044b2 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	089b      	lsrs	r3, r3, #2
 80043b2:	001a      	movs	r2, r3
 80043b4:	2301      	movs	r3, #1
 80043b6:	4013      	ands	r3, r2
 80043b8:	d031      	beq.n	800441e <I2C_Slave_ISR_IT+0x176>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	089b      	lsrs	r3, r3, #2
 80043be:	001a      	movs	r2, r3
 80043c0:	2301      	movs	r3, #1
 80043c2:	4013      	ands	r3, r2
 80043c4:	d02b      	beq.n	800441e <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d018      	beq.n	8004402 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043da:	b2d2      	uxtb	r2, r2
 80043dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e2:	1c5a      	adds	r2, r3, #1
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ec:	3b01      	subs	r3, #1
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	3b01      	subs	r3, #1
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004406:	b29b      	uxth	r3, r3
 8004408:	2b00      	cmp	r3, #0
 800440a:	d154      	bne.n	80044b6 <I2C_Slave_ISR_IT+0x20e>
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	4a2f      	ldr	r2, [pc, #188]	; (80044cc <I2C_Slave_ISR_IT+0x224>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d050      	beq.n	80044b6 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	0018      	movs	r0, r3
 8004418:	f000 f8fe 	bl	8004618 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800441c:	e04b      	b.n	80044b6 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	08db      	lsrs	r3, r3, #3
 8004422:	001a      	movs	r2, r3
 8004424:	2301      	movs	r3, #1
 8004426:	4013      	ands	r3, r2
 8004428:	d00c      	beq.n	8004444 <I2C_Slave_ISR_IT+0x19c>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	08db      	lsrs	r3, r3, #3
 800442e:	001a      	movs	r2, r3
 8004430:	2301      	movs	r3, #1
 8004432:	4013      	ands	r3, r2
 8004434:	d006      	beq.n	8004444 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	0011      	movs	r1, r2
 800443c:	0018      	movs	r0, r3
 800443e:	f000 f847 	bl	80044d0 <I2C_ITAddrCplt>
 8004442:	e039      	b.n	80044b8 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	085b      	lsrs	r3, r3, #1
 8004448:	001a      	movs	r2, r3
 800444a:	2301      	movs	r3, #1
 800444c:	4013      	ands	r3, r2
 800444e:	d033      	beq.n	80044b8 <I2C_Slave_ISR_IT+0x210>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	085b      	lsrs	r3, r3, #1
 8004454:	001a      	movs	r2, r3
 8004456:	2301      	movs	r3, #1
 8004458:	4013      	ands	r3, r2
 800445a:	d02d      	beq.n	80044b8 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004460:	b29b      	uxth	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d018      	beq.n	8004498 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446a:	781a      	ldrb	r2, [r3, #0]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004476:	1c5a      	adds	r2, r3, #1
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004480:	b29b      	uxth	r3, r3
 8004482:	3b01      	subs	r3, #1
 8004484:	b29a      	uxth	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800448e:	3b01      	subs	r3, #1
 8004490:	b29a      	uxth	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	851a      	strh	r2, [r3, #40]	; 0x28
 8004496:	e00f      	b.n	80044b8 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	2380      	movs	r3, #128	; 0x80
 800449c:	045b      	lsls	r3, r3, #17
 800449e:	429a      	cmp	r2, r3
 80044a0:	d002      	beq.n	80044a8 <I2C_Slave_ISR_IT+0x200>
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d107      	bne.n	80044b8 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	0018      	movs	r0, r3
 80044ac:	f000 f8b4 	bl	8004618 <I2C_ITSlaveSeqCplt>
 80044b0:	e002      	b.n	80044b8 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 80044b2:	46c0      	nop			; (mov r8, r8)
 80044b4:	e000      	b.n	80044b8 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 80044b6:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2240      	movs	r2, #64	; 0x40
 80044bc:	2100      	movs	r1, #0
 80044be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	0018      	movs	r0, r3
 80044c4:	46bd      	mov	sp, r7
 80044c6:	b006      	add	sp, #24
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	46c0      	nop			; (mov r8, r8)
 80044cc:	ffff0000 	.word	0xffff0000

080044d0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80044d0:	b5b0      	push	{r4, r5, r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2241      	movs	r2, #65	; 0x41
 80044de:	5c9b      	ldrb	r3, [r3, r2]
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	001a      	movs	r2, r3
 80044e4:	2328      	movs	r3, #40	; 0x28
 80044e6:	4013      	ands	r3, r2
 80044e8:	2b28      	cmp	r3, #40	; 0x28
 80044ea:	d000      	beq.n	80044ee <I2C_ITAddrCplt+0x1e>
 80044ec:	e088      	b.n	8004600 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	0c1b      	lsrs	r3, r3, #16
 80044f6:	b2da      	uxtb	r2, r3
 80044f8:	250f      	movs	r5, #15
 80044fa:	197b      	adds	r3, r7, r5
 80044fc:	2101      	movs	r1, #1
 80044fe:	400a      	ands	r2, r1
 8004500:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	0c1b      	lsrs	r3, r3, #16
 800450a:	b29a      	uxth	r2, r3
 800450c:	200c      	movs	r0, #12
 800450e:	183b      	adds	r3, r7, r0
 8004510:	21fe      	movs	r1, #254	; 0xfe
 8004512:	400a      	ands	r2, r1
 8004514:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	b29a      	uxth	r2, r3
 800451e:	240a      	movs	r4, #10
 8004520:	193b      	adds	r3, r7, r4
 8004522:	0592      	lsls	r2, r2, #22
 8004524:	0d92      	lsrs	r2, r2, #22
 8004526:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	b29a      	uxth	r2, r3
 8004530:	2308      	movs	r3, #8
 8004532:	18fb      	adds	r3, r7, r3
 8004534:	21fe      	movs	r1, #254	; 0xfe
 8004536:	400a      	ands	r2, r1
 8004538:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	2b02      	cmp	r3, #2
 8004540:	d148      	bne.n	80045d4 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8004542:	0021      	movs	r1, r4
 8004544:	187b      	adds	r3, r7, r1
 8004546:	881b      	ldrh	r3, [r3, #0]
 8004548:	09db      	lsrs	r3, r3, #7
 800454a:	b29a      	uxth	r2, r3
 800454c:	183b      	adds	r3, r7, r0
 800454e:	881b      	ldrh	r3, [r3, #0]
 8004550:	4053      	eors	r3, r2
 8004552:	b29b      	uxth	r3, r3
 8004554:	001a      	movs	r2, r3
 8004556:	2306      	movs	r3, #6
 8004558:	4013      	ands	r3, r2
 800455a:	d120      	bne.n	800459e <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 800455c:	183b      	adds	r3, r7, r0
 800455e:	187a      	adds	r2, r7, r1
 8004560:	8812      	ldrh	r2, [r2, #0]
 8004562:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004568:	1c5a      	adds	r2, r3, #1
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004572:	2b02      	cmp	r3, #2
 8004574:	d14c      	bne.n	8004610 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2208      	movs	r2, #8
 8004582:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2240      	movs	r2, #64	; 0x40
 8004588:	2100      	movs	r1, #0
 800458a:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800458c:	183b      	adds	r3, r7, r0
 800458e:	881a      	ldrh	r2, [r3, #0]
 8004590:	197b      	adds	r3, r7, r5
 8004592:	7819      	ldrb	r1, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	0018      	movs	r0, r3
 8004598:	f7ff fe5e 	bl	8004258 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800459c:	e038      	b.n	8004610 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800459e:	240c      	movs	r4, #12
 80045a0:	193b      	adds	r3, r7, r4
 80045a2:	2208      	movs	r2, #8
 80045a4:	18ba      	adds	r2, r7, r2
 80045a6:	8812      	ldrh	r2, [r2, #0]
 80045a8:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80045aa:	2380      	movs	r3, #128	; 0x80
 80045ac:	021a      	lsls	r2, r3, #8
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	0011      	movs	r1, r2
 80045b2:	0018      	movs	r0, r3
 80045b4:	f000 fb60 	bl	8004c78 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2240      	movs	r2, #64	; 0x40
 80045bc:	2100      	movs	r1, #0
 80045be:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80045c0:	193b      	adds	r3, r7, r4
 80045c2:	881a      	ldrh	r2, [r3, #0]
 80045c4:	230f      	movs	r3, #15
 80045c6:	18fb      	adds	r3, r7, r3
 80045c8:	7819      	ldrb	r1, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	0018      	movs	r0, r3
 80045ce:	f7ff fe43 	bl	8004258 <HAL_I2C_AddrCallback>
}
 80045d2:	e01d      	b.n	8004610 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80045d4:	2380      	movs	r3, #128	; 0x80
 80045d6:	021a      	lsls	r2, r3, #8
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	0011      	movs	r1, r2
 80045dc:	0018      	movs	r0, r3
 80045de:	f000 fb4b 	bl	8004c78 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2240      	movs	r2, #64	; 0x40
 80045e6:	2100      	movs	r1, #0
 80045e8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80045ea:	230c      	movs	r3, #12
 80045ec:	18fb      	adds	r3, r7, r3
 80045ee:	881a      	ldrh	r2, [r3, #0]
 80045f0:	230f      	movs	r3, #15
 80045f2:	18fb      	adds	r3, r7, r3
 80045f4:	7819      	ldrb	r1, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	0018      	movs	r0, r3
 80045fa:	f7ff fe2d 	bl	8004258 <HAL_I2C_AddrCallback>
}
 80045fe:	e007      	b.n	8004610 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2208      	movs	r2, #8
 8004606:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2240      	movs	r2, #64	; 0x40
 800460c:	2100      	movs	r1, #0
 800460e:	5499      	strb	r1, [r3, r2]
}
 8004610:	46c0      	nop			; (mov r8, r8)
 8004612:	46bd      	mov	sp, r7
 8004614:	b004      	add	sp, #16
 8004616:	bdb0      	pop	{r4, r5, r7, pc}

08004618 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2242      	movs	r2, #66	; 0x42
 800462c:	2100      	movs	r1, #0
 800462e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	0b9b      	lsrs	r3, r3, #14
 8004634:	001a      	movs	r2, r3
 8004636:	2301      	movs	r3, #1
 8004638:	4013      	ands	r3, r2
 800463a:	d008      	beq.n	800464e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4925      	ldr	r1, [pc, #148]	; (80046dc <I2C_ITSlaveSeqCplt+0xc4>)
 8004648:	400a      	ands	r2, r1
 800464a:	601a      	str	r2, [r3, #0]
 800464c:	e00d      	b.n	800466a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	0bdb      	lsrs	r3, r3, #15
 8004652:	001a      	movs	r2, r3
 8004654:	2301      	movs	r3, #1
 8004656:	4013      	ands	r3, r2
 8004658:	d007      	beq.n	800466a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	491e      	ldr	r1, [pc, #120]	; (80046e0 <I2C_ITSlaveSeqCplt+0xc8>)
 8004666:	400a      	ands	r2, r1
 8004668:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2241      	movs	r2, #65	; 0x41
 800466e:	5c9b      	ldrb	r3, [r3, r2]
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b29      	cmp	r3, #41	; 0x29
 8004674:	d114      	bne.n	80046a0 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2241      	movs	r2, #65	; 0x41
 800467a:	2128      	movs	r1, #40	; 0x28
 800467c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2221      	movs	r2, #33	; 0x21
 8004682:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2101      	movs	r1, #1
 8004688:	0018      	movs	r0, r3
 800468a:	f000 faf5 	bl	8004c78 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2240      	movs	r2, #64	; 0x40
 8004692:	2100      	movs	r1, #0
 8004694:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	0018      	movs	r0, r3
 800469a:	f7ff fdcd 	bl	8004238 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800469e:	e019      	b.n	80046d4 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2241      	movs	r2, #65	; 0x41
 80046a4:	5c9b      	ldrb	r3, [r3, r2]
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b2a      	cmp	r3, #42	; 0x2a
 80046aa:	d113      	bne.n	80046d4 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2241      	movs	r2, #65	; 0x41
 80046b0:	2128      	movs	r1, #40	; 0x28
 80046b2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2222      	movs	r2, #34	; 0x22
 80046b8:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2102      	movs	r1, #2
 80046be:	0018      	movs	r0, r3
 80046c0:	f000 fada 	bl	8004c78 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2240      	movs	r2, #64	; 0x40
 80046c8:	2100      	movs	r1, #0
 80046ca:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	0018      	movs	r0, r3
 80046d0:	f7ff fdba 	bl	8004248 <HAL_I2C_SlaveRxCpltCallback>
}
 80046d4:	46c0      	nop			; (mov r8, r8)
 80046d6:	46bd      	mov	sp, r7
 80046d8:	b004      	add	sp, #16
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	ffffbfff 	.word	0xffffbfff
 80046e0:	ffff7fff 	.word	0xffff7fff

080046e4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80046fa:	200f      	movs	r0, #15
 80046fc:	183b      	adds	r3, r7, r0
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	2141      	movs	r1, #65	; 0x41
 8004702:	5c52      	ldrb	r2, [r2, r1]
 8004704:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2220      	movs	r2, #32
 800470c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800470e:	183b      	adds	r3, r7, r0
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	2b21      	cmp	r3, #33	; 0x21
 8004714:	d003      	beq.n	800471e <I2C_ITSlaveCplt+0x3a>
 8004716:	183b      	adds	r3, r7, r0
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	2b29      	cmp	r3, #41	; 0x29
 800471c:	d109      	bne.n	8004732 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800471e:	4a7d      	ldr	r2, [pc, #500]	; (8004914 <I2C_ITSlaveCplt+0x230>)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	0011      	movs	r1, r2
 8004724:	0018      	movs	r0, r3
 8004726:	f000 faa7 	bl	8004c78 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2221      	movs	r2, #33	; 0x21
 800472e:	631a      	str	r2, [r3, #48]	; 0x30
 8004730:	e011      	b.n	8004756 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004732:	220f      	movs	r2, #15
 8004734:	18bb      	adds	r3, r7, r2
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	2b22      	cmp	r3, #34	; 0x22
 800473a:	d003      	beq.n	8004744 <I2C_ITSlaveCplt+0x60>
 800473c:	18bb      	adds	r3, r7, r2
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	2b2a      	cmp	r3, #42	; 0x2a
 8004742:	d108      	bne.n	8004756 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004744:	4a74      	ldr	r2, [pc, #464]	; (8004918 <I2C_ITSlaveCplt+0x234>)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	0011      	movs	r1, r2
 800474a:	0018      	movs	r0, r3
 800474c:	f000 fa94 	bl	8004c78 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2222      	movs	r2, #34	; 0x22
 8004754:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2180      	movs	r1, #128	; 0x80
 8004762:	0209      	lsls	r1, r1, #8
 8004764:	430a      	orrs	r2, r1
 8004766:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	685a      	ldr	r2, [r3, #4]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	496a      	ldr	r1, [pc, #424]	; (800491c <I2C_ITSlaveCplt+0x238>)
 8004774:	400a      	ands	r2, r1
 8004776:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	0018      	movs	r0, r3
 800477c:	f000 fa3b 	bl	8004bf6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	0b9b      	lsrs	r3, r3, #14
 8004784:	001a      	movs	r2, r3
 8004786:	2301      	movs	r3, #1
 8004788:	4013      	ands	r3, r2
 800478a:	d013      	beq.n	80047b4 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4962      	ldr	r1, [pc, #392]	; (8004920 <I2C_ITSlaveCplt+0x23c>)
 8004798:	400a      	ands	r2, r1
 800479a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d020      	beq.n	80047e6 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047b2:	e018      	b.n	80047e6 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	0bdb      	lsrs	r3, r3, #15
 80047b8:	001a      	movs	r2, r3
 80047ba:	2301      	movs	r3, #1
 80047bc:	4013      	ands	r3, r2
 80047be:	d012      	beq.n	80047e6 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4956      	ldr	r1, [pc, #344]	; (8004924 <I2C_ITSlaveCplt+0x240>)
 80047cc:	400a      	ands	r2, r1
 80047ce:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d006      	beq.n	80047e6 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	089b      	lsrs	r3, r3, #2
 80047ea:	001a      	movs	r2, r3
 80047ec:	2301      	movs	r3, #1
 80047ee:	4013      	ands	r3, r2
 80047f0:	d020      	beq.n	8004834 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	2204      	movs	r2, #4
 80047f6:	4393      	bics	r3, r2
 80047f8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	b2d2      	uxtb	r2, r2
 8004806:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	1c5a      	adds	r2, r3, #1
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00c      	beq.n	8004834 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800481e:	3b01      	subs	r3, #1
 8004820:	b29a      	uxth	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800482a:	b29b      	uxth	r3, r3
 800482c:	3b01      	subs	r3, #1
 800482e:	b29a      	uxth	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004838:	b29b      	uxth	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d005      	beq.n	800484a <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004842:	2204      	movs	r2, #4
 8004844:	431a      	orrs	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2242      	movs	r2, #66	; 0x42
 800484e:	2100      	movs	r1, #0
 8004850:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485c:	2b00      	cmp	r3, #0
 800485e:	d013      	beq.n	8004888 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	0011      	movs	r1, r2
 8004868:	0018      	movs	r0, r3
 800486a:	f000 f8b9 	bl	80049e0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2241      	movs	r2, #65	; 0x41
 8004872:	5c9b      	ldrb	r3, [r3, r2]
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b28      	cmp	r3, #40	; 0x28
 8004878:	d147      	bne.n	800490a <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	0011      	movs	r1, r2
 8004880:	0018      	movs	r0, r3
 8004882:	f000 f853 	bl	800492c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004886:	e040      	b.n	800490a <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488c:	4a26      	ldr	r2, [pc, #152]	; (8004928 <I2C_ITSlaveCplt+0x244>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d016      	beq.n	80048c0 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	0018      	movs	r0, r3
 8004896:	f7ff febf 	bl	8004618 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a22      	ldr	r2, [pc, #136]	; (8004928 <I2C_ITSlaveCplt+0x244>)
 800489e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2241      	movs	r2, #65	; 0x41
 80048a4:	2120      	movs	r1, #32
 80048a6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2240      	movs	r2, #64	; 0x40
 80048b2:	2100      	movs	r1, #0
 80048b4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	0018      	movs	r0, r3
 80048ba:	f7ff fcdd 	bl	8004278 <HAL_I2C_ListenCpltCallback>
}
 80048be:	e024      	b.n	800490a <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2241      	movs	r2, #65	; 0x41
 80048c4:	5c9b      	ldrb	r3, [r3, r2]
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b22      	cmp	r3, #34	; 0x22
 80048ca:	d10f      	bne.n	80048ec <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2241      	movs	r2, #65	; 0x41
 80048d0:	2120      	movs	r1, #32
 80048d2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2240      	movs	r2, #64	; 0x40
 80048de:	2100      	movs	r1, #0
 80048e0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	0018      	movs	r0, r3
 80048e6:	f7ff fcaf 	bl	8004248 <HAL_I2C_SlaveRxCpltCallback>
}
 80048ea:	e00e      	b.n	800490a <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2241      	movs	r2, #65	; 0x41
 80048f0:	2120      	movs	r1, #32
 80048f2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2240      	movs	r2, #64	; 0x40
 80048fe:	2100      	movs	r1, #0
 8004900:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	0018      	movs	r0, r3
 8004906:	f7ff fc97 	bl	8004238 <HAL_I2C_SlaveTxCpltCallback>
}
 800490a:	46c0      	nop			; (mov r8, r8)
 800490c:	46bd      	mov	sp, r7
 800490e:	b006      	add	sp, #24
 8004910:	bd80      	pop	{r7, pc}
 8004912:	46c0      	nop			; (mov r8, r8)
 8004914:	00008001 	.word	0x00008001
 8004918:	00008002 	.word	0x00008002
 800491c:	fe00e800 	.word	0xfe00e800
 8004920:	ffffbfff 	.word	0xffffbfff
 8004924:	ffff7fff 	.word	0xffff7fff
 8004928:	ffff0000 	.word	0xffff0000

0800492c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a27      	ldr	r2, [pc, #156]	; (80049d8 <I2C_ITListenCplt+0xac>)
 800493a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2241      	movs	r2, #65	; 0x41
 8004946:	2120      	movs	r1, #32
 8004948:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2242      	movs	r2, #66	; 0x42
 800494e:	2100      	movs	r1, #0
 8004950:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	089b      	lsrs	r3, r3, #2
 800495c:	001a      	movs	r2, r3
 800495e:	2301      	movs	r3, #1
 8004960:	4013      	ands	r3, r2
 8004962:	d022      	beq.n	80049aa <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496e:	b2d2      	uxtb	r2, r2
 8004970:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004976:	1c5a      	adds	r2, r3, #1
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004980:	2b00      	cmp	r3, #0
 8004982:	d012      	beq.n	80049aa <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004988:	3b01      	subs	r3, #1
 800498a:	b29a      	uxth	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004994:	b29b      	uxth	r3, r3
 8004996:	3b01      	subs	r3, #1
 8004998:	b29a      	uxth	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a2:	2204      	movs	r2, #4
 80049a4:	431a      	orrs	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80049aa:	4a0c      	ldr	r2, [pc, #48]	; (80049dc <I2C_ITListenCplt+0xb0>)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	0011      	movs	r1, r2
 80049b0:	0018      	movs	r0, r3
 80049b2:	f000 f961 	bl	8004c78 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2210      	movs	r2, #16
 80049bc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2240      	movs	r2, #64	; 0x40
 80049c2:	2100      	movs	r1, #0
 80049c4:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	0018      	movs	r0, r3
 80049ca:	f7ff fc55 	bl	8004278 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80049ce:	46c0      	nop			; (mov r8, r8)
 80049d0:	46bd      	mov	sp, r7
 80049d2:	b002      	add	sp, #8
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	46c0      	nop			; (mov r8, r8)
 80049d8:	ffff0000 	.word	0xffff0000
 80049dc:	00008003 	.word	0x00008003

080049e0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80049ea:	200f      	movs	r0, #15
 80049ec:	183b      	adds	r3, r7, r0
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	2141      	movs	r1, #65	; 0x41
 80049f2:	5c52      	ldrb	r2, [r2, r1]
 80049f4:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2242      	movs	r2, #66	; 0x42
 80049fa:	2100      	movs	r1, #0
 80049fc:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a62      	ldr	r2, [pc, #392]	; (8004b8c <I2C_ITError+0x1ac>)
 8004a02:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	431a      	orrs	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004a16:	183b      	adds	r3, r7, r0
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	2b28      	cmp	r3, #40	; 0x28
 8004a1c:	d007      	beq.n	8004a2e <I2C_ITError+0x4e>
 8004a1e:	183b      	adds	r3, r7, r0
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	2b29      	cmp	r3, #41	; 0x29
 8004a24:	d003      	beq.n	8004a2e <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004a26:	183b      	adds	r3, r7, r0
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	2b2a      	cmp	r3, #42	; 0x2a
 8004a2c:	d10c      	bne.n	8004a48 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2103      	movs	r1, #3
 8004a32:	0018      	movs	r0, r3
 8004a34:	f000 f920 	bl	8004c78 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2241      	movs	r2, #65	; 0x41
 8004a3c:	2128      	movs	r1, #40	; 0x28
 8004a3e:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a53      	ldr	r2, [pc, #332]	; (8004b90 <I2C_ITError+0x1b0>)
 8004a44:	635a      	str	r2, [r3, #52]	; 0x34
 8004a46:	e012      	b.n	8004a6e <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004a48:	4a52      	ldr	r2, [pc, #328]	; (8004b94 <I2C_ITError+0x1b4>)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	0011      	movs	r1, r2
 8004a4e:	0018      	movs	r0, r3
 8004a50:	f000 f912 	bl	8004c78 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2241      	movs	r2, #65	; 0x41
 8004a58:	5c9b      	ldrb	r3, [r3, r2]
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	2b60      	cmp	r3, #96	; 0x60
 8004a5e:	d003      	beq.n	8004a68 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2241      	movs	r2, #65	; 0x41
 8004a64:	2120      	movs	r1, #32
 8004a66:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a72:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d03b      	beq.n	8004af4 <I2C_ITError+0x114>
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	2b11      	cmp	r3, #17
 8004a80:	d002      	beq.n	8004a88 <I2C_ITError+0xa8>
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	2b21      	cmp	r3, #33	; 0x21
 8004a86:	d135      	bne.n	8004af4 <I2C_ITError+0x114>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	2380      	movs	r3, #128	; 0x80
 8004a90:	01db      	lsls	r3, r3, #7
 8004a92:	401a      	ands	r2, r3
 8004a94:	2380      	movs	r3, #128	; 0x80
 8004a96:	01db      	lsls	r3, r3, #7
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d107      	bne.n	8004aac <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	493c      	ldr	r1, [pc, #240]	; (8004b98 <I2C_ITError+0x1b8>)
 8004aa8:	400a      	ands	r2, r1
 8004aaa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab0:	0018      	movs	r0, r3
 8004ab2:	f7ff f8af 	bl	8003c14 <HAL_DMA_GetState>
 8004ab6:	0003      	movs	r3, r0
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d016      	beq.n	8004aea <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac0:	4a36      	ldr	r2, [pc, #216]	; (8004b9c <I2C_ITError+0x1bc>)
 8004ac2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2240      	movs	r2, #64	; 0x40
 8004ac8:	2100      	movs	r1, #0
 8004aca:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad0:	0018      	movs	r0, r3
 8004ad2:	f7fe ff83 	bl	80039dc <HAL_DMA_Abort_IT>
 8004ad6:	1e03      	subs	r3, r0, #0
 8004ad8:	d051      	beq.n	8004b7e <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ade:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004ae8:	e049      	b.n	8004b7e <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	0018      	movs	r0, r3
 8004aee:	f000 f859 	bl	8004ba4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004af2:	e044      	b.n	8004b7e <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d03b      	beq.n	8004b74 <I2C_ITError+0x194>
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	2b12      	cmp	r3, #18
 8004b00:	d002      	beq.n	8004b08 <I2C_ITError+0x128>
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	2b22      	cmp	r3, #34	; 0x22
 8004b06:	d135      	bne.n	8004b74 <I2C_ITError+0x194>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	2380      	movs	r3, #128	; 0x80
 8004b10:	021b      	lsls	r3, r3, #8
 8004b12:	401a      	ands	r2, r3
 8004b14:	2380      	movs	r3, #128	; 0x80
 8004b16:	021b      	lsls	r3, r3, #8
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d107      	bne.n	8004b2c <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	491e      	ldr	r1, [pc, #120]	; (8004ba0 <I2C_ITError+0x1c0>)
 8004b28:	400a      	ands	r2, r1
 8004b2a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b30:	0018      	movs	r0, r3
 8004b32:	f7ff f86f 	bl	8003c14 <HAL_DMA_GetState>
 8004b36:	0003      	movs	r3, r0
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d016      	beq.n	8004b6a <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b40:	4a16      	ldr	r2, [pc, #88]	; (8004b9c <I2C_ITError+0x1bc>)
 8004b42:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2240      	movs	r2, #64	; 0x40
 8004b48:	2100      	movs	r1, #0
 8004b4a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b50:	0018      	movs	r0, r3
 8004b52:	f7fe ff43 	bl	80039dc <HAL_DMA_Abort_IT>
 8004b56:	1e03      	subs	r3, r0, #0
 8004b58:	d013      	beq.n	8004b82 <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b64:	0018      	movs	r0, r3
 8004b66:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b68:	e00b      	b.n	8004b82 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	0018      	movs	r0, r3
 8004b6e:	f000 f819 	bl	8004ba4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b72:	e006      	b.n	8004b82 <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	0018      	movs	r0, r3
 8004b78:	f000 f814 	bl	8004ba4 <I2C_TreatErrorCallback>
  }
}
 8004b7c:	e002      	b.n	8004b84 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b7e:	46c0      	nop			; (mov r8, r8)
 8004b80:	e000      	b.n	8004b84 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b82:	46c0      	nop			; (mov r8, r8)
}
 8004b84:	46c0      	nop			; (mov r8, r8)
 8004b86:	46bd      	mov	sp, r7
 8004b88:	b004      	add	sp, #16
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	ffff0000 	.word	0xffff0000
 8004b90:	080042a9 	.word	0x080042a9
 8004b94:	00008003 	.word	0x00008003
 8004b98:	ffffbfff 	.word	0xffffbfff
 8004b9c:	08004c3b 	.word	0x08004c3b
 8004ba0:	ffff7fff 	.word	0xffff7fff

08004ba4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2241      	movs	r2, #65	; 0x41
 8004bb0:	5c9b      	ldrb	r3, [r3, r2]
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	2b60      	cmp	r3, #96	; 0x60
 8004bb6:	d10f      	bne.n	8004bd8 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2241      	movs	r2, #65	; 0x41
 8004bbc:	2120      	movs	r1, #32
 8004bbe:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2240      	movs	r2, #64	; 0x40
 8004bca:	2100      	movs	r1, #0
 8004bcc:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	0018      	movs	r0, r3
 8004bd2:	f7ff fb61 	bl	8004298 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004bd6:	e00a      	b.n	8004bee <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2240      	movs	r2, #64	; 0x40
 8004be2:	2100      	movs	r1, #0
 8004be4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	0018      	movs	r0, r3
 8004bea:	f7ff fb4d 	bl	8004288 <HAL_I2C_ErrorCallback>
}
 8004bee:	46c0      	nop			; (mov r8, r8)
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	b002      	add	sp, #8
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	b082      	sub	sp, #8
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	2202      	movs	r2, #2
 8004c06:	4013      	ands	r3, r2
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d103      	bne.n	8004c14 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2200      	movs	r2, #0
 8004c12:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d007      	beq.n	8004c32 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	699a      	ldr	r2, [r3, #24]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2101      	movs	r1, #1
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	619a      	str	r2, [r3, #24]
  }
}
 8004c32:	46c0      	nop			; (mov r8, r8)
 8004c34:	46bd      	mov	sp, r7
 8004c36:	b002      	add	sp, #8
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b084      	sub	sp, #16
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c46:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d003      	beq.n	8004c58 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c54:	2200      	movs	r2, #0
 8004c56:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d003      	beq.n	8004c68 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c64:	2200      	movs	r2, #0
 8004c66:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	0018      	movs	r0, r3
 8004c6c:	f7ff ff9a 	bl	8004ba4 <I2C_TreatErrorCallback>
}
 8004c70:	46c0      	nop			; (mov r8, r8)
 8004c72:	46bd      	mov	sp, r7
 8004c74:	b004      	add	sp, #16
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	000a      	movs	r2, r1
 8004c82:	1cbb      	adds	r3, r7, #2
 8004c84:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8004c86:	2300      	movs	r3, #0
 8004c88:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004c8a:	1cbb      	adds	r3, r7, #2
 8004c8c:	881b      	ldrh	r3, [r3, #0]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	4013      	ands	r3, r2
 8004c92:	d010      	beq.n	8004cb6 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2242      	movs	r2, #66	; 0x42
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2241      	movs	r2, #65	; 0x41
 8004ca0:	5c9b      	ldrb	r3, [r3, r2]
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	001a      	movs	r2, r3
 8004ca6:	2328      	movs	r3, #40	; 0x28
 8004ca8:	4013      	ands	r3, r2
 8004caa:	2b28      	cmp	r3, #40	; 0x28
 8004cac:	d003      	beq.n	8004cb6 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	22b0      	movs	r2, #176	; 0xb0
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004cb6:	1cbb      	adds	r3, r7, #2
 8004cb8:	881b      	ldrh	r3, [r3, #0]
 8004cba:	2202      	movs	r2, #2
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	d010      	beq.n	8004ce2 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2244      	movs	r2, #68	; 0x44
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2241      	movs	r2, #65	; 0x41
 8004ccc:	5c9b      	ldrb	r3, [r3, r2]
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	001a      	movs	r2, r3
 8004cd2:	2328      	movs	r3, #40	; 0x28
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	2b28      	cmp	r3, #40	; 0x28
 8004cd8:	d003      	beq.n	8004ce2 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	22b0      	movs	r2, #176	; 0xb0
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004ce2:	1cbb      	adds	r3, r7, #2
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	5e9b      	ldrsh	r3, [r3, r2]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	da03      	bge.n	8004cf4 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	22b8      	movs	r2, #184	; 0xb8
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004cf4:	1cbb      	adds	r3, r7, #2
 8004cf6:	881b      	ldrh	r3, [r3, #0]
 8004cf8:	2b10      	cmp	r3, #16
 8004cfa:	d103      	bne.n	8004d04 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2290      	movs	r2, #144	; 0x90
 8004d00:	4313      	orrs	r3, r2
 8004d02:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004d04:	1cbb      	adds	r3, r7, #2
 8004d06:	881b      	ldrh	r3, [r3, #0]
 8004d08:	2b20      	cmp	r3, #32
 8004d0a:	d103      	bne.n	8004d14 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2220      	movs	r2, #32
 8004d10:	4313      	orrs	r3, r2
 8004d12:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004d14:	1cbb      	adds	r3, r7, #2
 8004d16:	881b      	ldrh	r3, [r3, #0]
 8004d18:	2b40      	cmp	r3, #64	; 0x40
 8004d1a:	d103      	bne.n	8004d24 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2240      	movs	r2, #64	; 0x40
 8004d20:	4313      	orrs	r3, r2
 8004d22:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	43d9      	mvns	r1, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	400a      	ands	r2, r1
 8004d34:	601a      	str	r2, [r3, #0]
}
 8004d36:	46c0      	nop			; (mov r8, r8)
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	b004      	add	sp, #16
 8004d3c:	bd80      	pop	{r7, pc}
	...

08004d40 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2241      	movs	r2, #65	; 0x41
 8004d4e:	5c9b      	ldrb	r3, [r3, r2]
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	2b20      	cmp	r3, #32
 8004d54:	d138      	bne.n	8004dc8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2240      	movs	r2, #64	; 0x40
 8004d5a:	5c9b      	ldrb	r3, [r3, r2]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d101      	bne.n	8004d64 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004d60:	2302      	movs	r3, #2
 8004d62:	e032      	b.n	8004dca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2240      	movs	r2, #64	; 0x40
 8004d68:	2101      	movs	r1, #1
 8004d6a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2241      	movs	r2, #65	; 0x41
 8004d70:	2124      	movs	r1, #36	; 0x24
 8004d72:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2101      	movs	r1, #1
 8004d80:	438a      	bics	r2, r1
 8004d82:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4911      	ldr	r1, [pc, #68]	; (8004dd4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004d90:	400a      	ands	r2, r1
 8004d92:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6819      	ldr	r1, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	683a      	ldr	r2, [r7, #0]
 8004da0:	430a      	orrs	r2, r1
 8004da2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2101      	movs	r1, #1
 8004db0:	430a      	orrs	r2, r1
 8004db2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2241      	movs	r2, #65	; 0x41
 8004db8:	2120      	movs	r1, #32
 8004dba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2240      	movs	r2, #64	; 0x40
 8004dc0:	2100      	movs	r1, #0
 8004dc2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	e000      	b.n	8004dca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004dc8:	2302      	movs	r3, #2
  }
}
 8004dca:	0018      	movs	r0, r3
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	b002      	add	sp, #8
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	46c0      	nop			; (mov r8, r8)
 8004dd4:	ffffefff 	.word	0xffffefff

08004dd8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2241      	movs	r2, #65	; 0x41
 8004de6:	5c9b      	ldrb	r3, [r3, r2]
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b20      	cmp	r3, #32
 8004dec:	d139      	bne.n	8004e62 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2240      	movs	r2, #64	; 0x40
 8004df2:	5c9b      	ldrb	r3, [r3, r2]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d101      	bne.n	8004dfc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004df8:	2302      	movs	r3, #2
 8004dfa:	e033      	b.n	8004e64 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2240      	movs	r2, #64	; 0x40
 8004e00:	2101      	movs	r1, #1
 8004e02:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2241      	movs	r2, #65	; 0x41
 8004e08:	2124      	movs	r1, #36	; 0x24
 8004e0a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2101      	movs	r1, #1
 8004e18:	438a      	bics	r2, r1
 8004e1a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	4a11      	ldr	r2, [pc, #68]	; (8004e6c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004e28:	4013      	ands	r3, r2
 8004e2a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	021b      	lsls	r3, r3, #8
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2101      	movs	r1, #1
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2241      	movs	r2, #65	; 0x41
 8004e52:	2120      	movs	r1, #32
 8004e54:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2240      	movs	r2, #64	; 0x40
 8004e5a:	2100      	movs	r1, #0
 8004e5c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	e000      	b.n	8004e64 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004e62:	2302      	movs	r3, #2
  }
}
 8004e64:	0018      	movs	r0, r3
 8004e66:	46bd      	mov	sp, r7
 8004e68:	b004      	add	sp, #16
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	fffff0ff 	.word	0xfffff0ff

08004e70 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b088      	sub	sp, #32
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d101      	bne.n	8004e82 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e0e5      	b.n	800504e <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2235      	movs	r2, #53	; 0x35
 8004e86:	5c9b      	ldrb	r3, [r3, r2]
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d107      	bne.n	8004e9e <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2234      	movs	r2, #52	; 0x34
 8004e92:	2100      	movs	r1, #0
 8004e94:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	0018      	movs	r0, r3
 8004e9a:	f7fd fcc7 	bl	800282c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2235      	movs	r2, #53	; 0x35
 8004ea2:	2102      	movs	r1, #2
 8004ea4:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	69da      	ldr	r2, [r3, #28]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4969      	ldr	r1, [pc, #420]	; (8005058 <HAL_I2S_Init+0x1e8>)
 8004eb2:	400a      	ands	r2, r1
 8004eb4:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2202      	movs	r2, #2
 8004ebc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d100      	bne.n	8004ec8 <HAL_I2S_Init+0x58>
 8004ec6:	e076      	b.n	8004fb6 <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d102      	bne.n	8004ed6 <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004ed0:	2310      	movs	r3, #16
 8004ed2:	617b      	str	r3, [r7, #20]
 8004ed4:	e001      	b.n	8004eda <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004ed6:	2320      	movs	r3, #32
 8004ed8:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	2b20      	cmp	r3, #32
 8004ee0:	d802      	bhi.n	8004ee8 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	005b      	lsls	r3, r3, #1
 8004ee6:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 8004ee8:	2380      	movs	r3, #128	; 0x80
 8004eea:	011b      	lsls	r3, r3, #4
 8004eec:	0018      	movs	r0, r3
 8004eee:	f001 f865 	bl	8005fbc <HAL_RCCEx_GetPeriphCLKFreq>
 8004ef2:	0003      	movs	r3, r0
 8004ef4:	60fb      	str	r3, [r7, #12]
#endif
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	691a      	ldr	r2, [r3, #16]
 8004efa:	2380      	movs	r3, #128	; 0x80
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d131      	bne.n	8004f66 <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d016      	beq.n	8004f38 <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	0019      	movs	r1, r3
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f7fb f8f7 	bl	8000104 <__udivsi3>
 8004f16:	0003      	movs	r3, r0
 8004f18:	001a      	movs	r2, r3
 8004f1a:	0013      	movs	r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	189b      	adds	r3, r3, r2
 8004f20:	005b      	lsls	r3, r3, #1
 8004f22:	001a      	movs	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	695b      	ldr	r3, [r3, #20]
 8004f28:	0019      	movs	r1, r3
 8004f2a:	0010      	movs	r0, r2
 8004f2c:	f7fb f8ea 	bl	8000104 <__udivsi3>
 8004f30:	0003      	movs	r3, r0
 8004f32:	3305      	adds	r3, #5
 8004f34:	613b      	str	r3, [r7, #16]
 8004f36:	e02a      	b.n	8004f8e <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	0019      	movs	r1, r3
 8004f3e:	68f8      	ldr	r0, [r7, #12]
 8004f40:	f7fb f8e0 	bl	8000104 <__udivsi3>
 8004f44:	0003      	movs	r3, r0
 8004f46:	001a      	movs	r2, r3
 8004f48:	0013      	movs	r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	189b      	adds	r3, r3, r2
 8004f4e:	005b      	lsls	r3, r3, #1
 8004f50:	001a      	movs	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	0019      	movs	r1, r3
 8004f58:	0010      	movs	r0, r2
 8004f5a:	f7fb f8d3 	bl	8000104 <__udivsi3>
 8004f5e:	0003      	movs	r3, r0
 8004f60:	3305      	adds	r3, #5
 8004f62:	613b      	str	r3, [r7, #16]
 8004f64:	e013      	b.n	8004f8e <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004f66:	6979      	ldr	r1, [r7, #20]
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f7fb f8cb 	bl	8000104 <__udivsi3>
 8004f6e:	0003      	movs	r3, r0
 8004f70:	001a      	movs	r2, r3
 8004f72:	0013      	movs	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	189b      	adds	r3, r3, r2
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	001a      	movs	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	0019      	movs	r1, r3
 8004f82:	0010      	movs	r0, r2
 8004f84:	f7fb f8be 	bl	8000104 <__udivsi3>
 8004f88:	0003      	movs	r3, r0
 8004f8a:	3305      	adds	r3, #5
 8004f8c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	210a      	movs	r1, #10
 8004f92:	0018      	movs	r0, r3
 8004f94:	f7fb f8b6 	bl	8000104 <__udivsi3>
 8004f98:	0003      	movs	r3, r0
 8004f9a:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	085b      	lsrs	r3, r3, #1
 8004fac:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	021b      	lsls	r3, r3, #8
 8004fb2:	61bb      	str	r3, [r7, #24]
 8004fb4:	e003      	b.n	8004fbe <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004fb6:	2302      	movs	r3, #2
 8004fb8:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d902      	bls.n	8004fca <HAL_I2S_Init+0x15a>
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	2bff      	cmp	r3, #255	; 0xff
 8004fc8:	d907      	bls.n	8004fda <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fce:	2210      	movs	r2, #16
 8004fd0:	431a      	orrs	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e039      	b.n	800504e <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	691a      	ldr	r2, [r3, #16]
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	431a      	orrs	r2, r3
 8004fe2:	0011      	movs	r1, r2
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	69fa      	ldr	r2, [r7, #28]
 8004fea:	430a      	orrs	r2, r1
 8004fec:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	69db      	ldr	r3, [r3, #28]
 8004ff4:	4a18      	ldr	r2, [pc, #96]	; (8005058 <HAL_I2S_Init+0x1e8>)
 8004ff6:	401a      	ands	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6859      	ldr	r1, [r3, #4]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	4319      	orrs	r1, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	4319      	orrs	r1, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	430b      	orrs	r3, r1
 800500e:	431a      	orrs	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2180      	movs	r1, #128	; 0x80
 8005016:	0109      	lsls	r1, r1, #4
 8005018:	430a      	orrs	r2, r1
 800501a:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	2b30      	cmp	r3, #48	; 0x30
 8005022:	d003      	beq.n	800502c <HAL_I2S_Init+0x1bc>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	2bb0      	cmp	r3, #176	; 0xb0
 800502a:	d108      	bne.n	800503e <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	69da      	ldr	r2, [r3, #28]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2180      	movs	r1, #128	; 0x80
 8005038:	0149      	lsls	r1, r1, #5
 800503a:	430a      	orrs	r2, r1
 800503c:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2235      	movs	r2, #53	; 0x35
 8005048:	2101      	movs	r1, #1
 800504a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	0018      	movs	r0, r3
 8005050:	46bd      	mov	sp, r7
 8005052:	b008      	add	sp, #32
 8005054:	bd80      	pop	{r7, pc}
 8005056:	46c0      	nop			; (mov r8, r8)
 8005058:	fffff040 	.word	0xfffff040

0800505c <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hi2s->Instance->CR2;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hi2s->Instance->SR;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	60bb      	str	r3, [r7, #8]

  /* I2S in mode Receiver ------------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	099b      	lsrs	r3, r3, #6
 8005078:	001a      	movs	r2, r3
 800507a:	2301      	movs	r3, #1
 800507c:	4013      	ands	r3, r2
 800507e:	d10e      	bne.n	800509e <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	2201      	movs	r2, #1
 8005084:	4013      	ands	r3, r2
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8005086:	d00a      	beq.n	800509e <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	099b      	lsrs	r3, r3, #6
 800508c:	001a      	movs	r2, r3
 800508e:	2301      	movs	r3, #1
 8005090:	4013      	ands	r3, r2
 8005092:	d004      	beq.n	800509e <HAL_I2S_IRQHandler+0x42>
  {
    I2S_Receive_IT(hi2s);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	0018      	movs	r0, r3
 8005098:	f000 f892 	bl	80051c0 <I2S_Receive_IT>
    return;
 800509c:	e046      	b.n	800512c <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S in mode Tramitter -----------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_TXE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_TXE) != RESET))
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	085b      	lsrs	r3, r3, #1
 80050a2:	001a      	movs	r2, r3
 80050a4:	2301      	movs	r3, #1
 80050a6:	4013      	ands	r3, r2
 80050a8:	d00a      	beq.n	80050c0 <HAL_I2S_IRQHandler+0x64>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	09db      	lsrs	r3, r3, #7
 80050ae:	001a      	movs	r2, r3
 80050b0:	2301      	movs	r3, #1
 80050b2:	4013      	ands	r3, r2
 80050b4:	d004      	beq.n	80050c0 <HAL_I2S_IRQHandler+0x64>
  {
    I2S_Transmit_IT(hi2s);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	0018      	movs	r0, r3
 80050ba:	f000 f852 	bl	8005162 <I2S_Transmit_IT>
    return;
 80050be:	e035      	b.n	800512c <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S interrupt error -------------------------------------------------*/
  if (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_ERR) != RESET)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	095b      	lsrs	r3, r3, #5
 80050c4:	001a      	movs	r2, r3
 80050c6:	2301      	movs	r3, #1
 80050c8:	4013      	ands	r3, r2
 80050ca:	d02f      	beq.n	800512c <HAL_I2S_IRQHandler+0xd0>
  {
    /* I2S Overrun error interrupt occurred ---------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) != RESET)
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	099b      	lsrs	r3, r3, #6
 80050d0:	001a      	movs	r2, r3
 80050d2:	2301      	movs	r3, #1
 80050d4:	4013      	ands	r3, r2
 80050d6:	d00d      	beq.n	80050f4 <HAL_I2S_IRQHandler+0x98>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2160      	movs	r1, #96	; 0x60
 80050e4:	438a      	bics	r2, r1
 80050e6:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ec:	2202      	movs	r2, #2
 80050ee:	431a      	orrs	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_UDR) != RESET)
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	08db      	lsrs	r3, r3, #3
 80050f8:	001a      	movs	r2, r3
 80050fa:	2301      	movs	r3, #1
 80050fc:	4013      	ands	r3, r2
 80050fe:	d00d      	beq.n	800511c <HAL_I2S_IRQHandler+0xc0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	21a0      	movs	r1, #160	; 0xa0
 800510c:	438a      	bics	r2, r1
 800510e:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005114:	2204      	movs	r2, #4
 8005116:	431a      	orrs	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Set the I2S State ready */
    hi2s->State = HAL_I2S_STATE_READY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2235      	movs	r2, #53	; 0x35
 8005120:	2101      	movs	r1, #1
 8005122:	5499      	strb	r1, [r3, r2]

    /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->ErrorCallback(hi2s);
#else
    HAL_I2S_ErrorCallback(hi2s);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	0018      	movs	r0, r3
 8005128:	f000 f813 	bl	8005152 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800512c:	46bd      	mov	sp, r7
 800512e:	b004      	add	sp, #16
 8005130:	bd80      	pop	{r7, pc}

08005132 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b082      	sub	sp, #8
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800513a:	46c0      	nop			; (mov r8, r8)
 800513c:	46bd      	mov	sp, r7
 800513e:	b002      	add	sp, #8
 8005140:	bd80      	pop	{r7, pc}

08005142 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b082      	sub	sp, #8
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800514a:	46c0      	nop			; (mov r8, r8)
 800514c:	46bd      	mov	sp, r7
 800514e:	b002      	add	sp, #8
 8005150:	bd80      	pop	{r7, pc}

08005152 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005152:	b580      	push	{r7, lr}
 8005154:	b082      	sub	sp, #8
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800515a:	46c0      	nop			; (mov r8, r8)
 800515c:	46bd      	mov	sp, r7
 800515e:	b002      	add	sp, #8
 8005160:	bd80      	pop	{r7, pc}

08005162 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b082      	sub	sp, #8
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	69db      	ldr	r3, [r3, #28]
 800516e:	881a      	ldrh	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	69db      	ldr	r3, [r3, #28]
 800517a:	1c9a      	adds	r2, r3, #2
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	61da      	str	r2, [r3, #28]
  hi2s->TxXferCount--;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005184:	b29b      	uxth	r3, r3
 8005186:	3b01      	subs	r3, #1
 8005188:	b29a      	uxth	r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	845a      	strh	r2, [r3, #34]	; 0x22

  if (hi2s->TxXferCount == 0U)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005192:	b29b      	uxth	r3, r3
 8005194:	2b00      	cmp	r3, #0
 8005196:	d10f      	bne.n	80051b8 <I2S_Transmit_IT+0x56>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	21a0      	movs	r1, #160	; 0xa0
 80051a4:	438a      	bics	r2, r1
 80051a6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2235      	movs	r2, #53	; 0x35
 80051ac:	2101      	movs	r1, #1
 80051ae:	5499      	strb	r1, [r3, r2]
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	0018      	movs	r0, r3
 80051b4:	f7ff ffbd 	bl	8005132 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80051b8:	46c0      	nop			; (mov r8, r8)
 80051ba:	46bd      	mov	sp, r7
 80051bc:	b002      	add	sp, #8
 80051be:	bd80      	pop	{r7, pc}

080051c0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68da      	ldr	r2, [r3, #12]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d2:	b292      	uxth	r2, r2
 80051d4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051da:	1c9a      	adds	r2, r3, #2
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->RxXferCount--;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	3b01      	subs	r3, #1
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->RxXferCount == 0U)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10f      	bne.n	8005218 <I2S_Receive_IT+0x58>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	685a      	ldr	r2, [r3, #4]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2160      	movs	r1, #96	; 0x60
 8005204:	438a      	bics	r2, r1
 8005206:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2235      	movs	r2, #53	; 0x35
 800520c:	2101      	movs	r1, #1
 800520e:	5499      	strb	r1, [r3, r2]
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	0018      	movs	r0, r3
 8005214:	f7ff ff95 	bl	8005142 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005218:	46c0      	nop			; (mov r8, r8)
 800521a:	46bd      	mov	sp, r7
 800521c:	b002      	add	sp, #8
 800521e:	bd80      	pop	{r7, pc}

08005220 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005228:	4b19      	ldr	r3, [pc, #100]	; (8005290 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a19      	ldr	r2, [pc, #100]	; (8005294 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800522e:	4013      	ands	r3, r2
 8005230:	0019      	movs	r1, r3
 8005232:	4b17      	ldr	r3, [pc, #92]	; (8005290 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	430a      	orrs	r2, r1
 8005238:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	2380      	movs	r3, #128	; 0x80
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	429a      	cmp	r2, r3
 8005242:	d11f      	bne.n	8005284 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8005244:	4b14      	ldr	r3, [pc, #80]	; (8005298 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	0013      	movs	r3, r2
 800524a:	005b      	lsls	r3, r3, #1
 800524c:	189b      	adds	r3, r3, r2
 800524e:	005b      	lsls	r3, r3, #1
 8005250:	4912      	ldr	r1, [pc, #72]	; (800529c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8005252:	0018      	movs	r0, r3
 8005254:	f7fa ff56 	bl	8000104 <__udivsi3>
 8005258:	0003      	movs	r3, r0
 800525a:	3301      	adds	r3, #1
 800525c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800525e:	e008      	b.n	8005272 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d003      	beq.n	800526e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	3b01      	subs	r3, #1
 800526a:	60fb      	str	r3, [r7, #12]
 800526c:	e001      	b.n	8005272 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e009      	b.n	8005286 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005272:	4b07      	ldr	r3, [pc, #28]	; (8005290 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005274:	695a      	ldr	r2, [r3, #20]
 8005276:	2380      	movs	r3, #128	; 0x80
 8005278:	00db      	lsls	r3, r3, #3
 800527a:	401a      	ands	r2, r3
 800527c:	2380      	movs	r3, #128	; 0x80
 800527e:	00db      	lsls	r3, r3, #3
 8005280:	429a      	cmp	r2, r3
 8005282:	d0ed      	beq.n	8005260 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	0018      	movs	r0, r3
 8005288:	46bd      	mov	sp, r7
 800528a:	b004      	add	sp, #16
 800528c:	bd80      	pop	{r7, pc}
 800528e:	46c0      	nop			; (mov r8, r8)
 8005290:	40007000 	.word	0x40007000
 8005294:	fffff9ff 	.word	0xfffff9ff
 8005298:	20005138 	.word	0x20005138
 800529c:	000f4240 	.word	0x000f4240

080052a0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80052a4:	4b03      	ldr	r3, [pc, #12]	; (80052b4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80052a6:	689a      	ldr	r2, [r3, #8]
 80052a8:	23e0      	movs	r3, #224	; 0xe0
 80052aa:	01db      	lsls	r3, r3, #7
 80052ac:	4013      	ands	r3, r2
}
 80052ae:	0018      	movs	r0, r3
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	40021000 	.word	0x40021000

080052b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b088      	sub	sp, #32
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d101      	bne.n	80052ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e304      	b.n	80058d4 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2201      	movs	r2, #1
 80052d0:	4013      	ands	r3, r2
 80052d2:	d100      	bne.n	80052d6 <HAL_RCC_OscConfig+0x1e>
 80052d4:	e07c      	b.n	80053d0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052d6:	4bc3      	ldr	r3, [pc, #780]	; (80055e4 <HAL_RCC_OscConfig+0x32c>)
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	2238      	movs	r2, #56	; 0x38
 80052dc:	4013      	ands	r3, r2
 80052de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052e0:	4bc0      	ldr	r3, [pc, #768]	; (80055e4 <HAL_RCC_OscConfig+0x32c>)
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	2203      	movs	r2, #3
 80052e6:	4013      	ands	r3, r2
 80052e8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	2b10      	cmp	r3, #16
 80052ee:	d102      	bne.n	80052f6 <HAL_RCC_OscConfig+0x3e>
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	2b03      	cmp	r3, #3
 80052f4:	d002      	beq.n	80052fc <HAL_RCC_OscConfig+0x44>
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	2b08      	cmp	r3, #8
 80052fa:	d10b      	bne.n	8005314 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052fc:	4bb9      	ldr	r3, [pc, #740]	; (80055e4 <HAL_RCC_OscConfig+0x32c>)
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	2380      	movs	r3, #128	; 0x80
 8005302:	029b      	lsls	r3, r3, #10
 8005304:	4013      	ands	r3, r2
 8005306:	d062      	beq.n	80053ce <HAL_RCC_OscConfig+0x116>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d15e      	bne.n	80053ce <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e2df      	b.n	80058d4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685a      	ldr	r2, [r3, #4]
 8005318:	2380      	movs	r3, #128	; 0x80
 800531a:	025b      	lsls	r3, r3, #9
 800531c:	429a      	cmp	r2, r3
 800531e:	d107      	bne.n	8005330 <HAL_RCC_OscConfig+0x78>
 8005320:	4bb0      	ldr	r3, [pc, #704]	; (80055e4 <HAL_RCC_OscConfig+0x32c>)
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	4baf      	ldr	r3, [pc, #700]	; (80055e4 <HAL_RCC_OscConfig+0x32c>)
 8005326:	2180      	movs	r1, #128	; 0x80
 8005328:	0249      	lsls	r1, r1, #9
 800532a:	430a      	orrs	r2, r1
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	e020      	b.n	8005372 <HAL_RCC_OscConfig+0xba>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685a      	ldr	r2, [r3, #4]
 8005334:	23a0      	movs	r3, #160	; 0xa0
 8005336:	02db      	lsls	r3, r3, #11
 8005338:	429a      	cmp	r2, r3
 800533a:	d10e      	bne.n	800535a <HAL_RCC_OscConfig+0xa2>
 800533c:	4ba9      	ldr	r3, [pc, #676]	; (80055e4 <HAL_RCC_OscConfig+0x32c>)
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	4ba8      	ldr	r3, [pc, #672]	; (80055e4 <HAL_RCC_OscConfig+0x32c>)
 8005342:	2180      	movs	r1, #128	; 0x80
 8005344:	02c9      	lsls	r1, r1, #11
 8005346:	430a      	orrs	r2, r1
 8005348:	601a      	str	r2, [r3, #0]
 800534a:	4ba6      	ldr	r3, [pc, #664]	; (80055e4 <HAL_RCC_OscConfig+0x32c>)
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	4ba5      	ldr	r3, [pc, #660]	; (80055e4 <HAL_RCC_OscConfig+0x32c>)
 8005350:	2180      	movs	r1, #128	; 0x80
 8005352:	0249      	lsls	r1, r1, #9
 8005354:	430a      	orrs	r2, r1
 8005356:	601a      	str	r2, [r3, #0]
 8005358:	e00b      	b.n	8005372 <HAL_RCC_OscConfig+0xba>
 800535a:	4ba2      	ldr	r3, [pc, #648]	; (80055e4 <HAL_RCC_OscConfig+0x32c>)
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	4ba1      	ldr	r3, [pc, #644]	; (80055e4 <HAL_RCC_OscConfig+0x32c>)
 8005360:	49a1      	ldr	r1, [pc, #644]	; (80055e8 <HAL_RCC_OscConfig+0x330>)
 8005362:	400a      	ands	r2, r1
 8005364:	601a      	str	r2, [r3, #0]
 8005366:	4b9f      	ldr	r3, [pc, #636]	; (80055e4 <HAL_RCC_OscConfig+0x32c>)
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	4b9e      	ldr	r3, [pc, #632]	; (80055e4 <HAL_RCC_OscConfig+0x32c>)
 800536c:	499f      	ldr	r1, [pc, #636]	; (80055ec <HAL_RCC_OscConfig+0x334>)
 800536e:	400a      	ands	r2, r1
 8005370:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d014      	beq.n	80053a4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800537a:	f7fd fe9d 	bl	80030b8 <HAL_GetTick>
 800537e:	0003      	movs	r3, r0
 8005380:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005382:	e008      	b.n	8005396 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005384:	f7fd fe98 	bl	80030b8 <HAL_GetTick>
 8005388:	0002      	movs	r2, r0
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b64      	cmp	r3, #100	; 0x64
 8005390:	d901      	bls.n	8005396 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e29e      	b.n	80058d4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005396:	4b93      	ldr	r3, [pc, #588]	; (80055e4 <HAL_RCC_OscConfig+0x32c>)
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	2380      	movs	r3, #128	; 0x80
 800539c:	029b      	lsls	r3, r3, #10
 800539e:	4013      	ands	r3, r2
 80053a0:	d0f0      	beq.n	8005384 <HAL_RCC_OscConfig+0xcc>
 80053a2:	e015      	b.n	80053d0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a4:	f7fd fe88 	bl	80030b8 <HAL_GetTick>
 80053a8:	0003      	movs	r3, r0
 80053aa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053ac:	e008      	b.n	80053c0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053ae:	f7fd fe83 	bl	80030b8 <HAL_GetTick>
 80053b2:	0002      	movs	r2, r0
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	2b64      	cmp	r3, #100	; 0x64
 80053ba:	d901      	bls.n	80053c0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e289      	b.n	80058d4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053c0:	4b88      	ldr	r3, [pc, #544]	; (80055e4 <HAL_RCC_OscConfig+0x32c>)
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	2380      	movs	r3, #128	; 0x80
 80053c6:	029b      	lsls	r3, r3, #10
 80053c8:	4013      	ands	r3, r2
 80053ca:	d1f0      	bne.n	80053ae <HAL_RCC_OscConfig+0xf6>
 80053cc:	e000      	b.n	80053d0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053ce:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2202      	movs	r2, #2
 80053d6:	4013      	ands	r3, r2
 80053d8:	d100      	bne.n	80053dc <HAL_RCC_OscConfig+0x124>
 80053da:	e099      	b.n	8005510 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053dc:	4b81      	ldr	r3, [pc, #516]	; (80055e4 <HAL_RCC_OscConfig+0x32c>)
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	2238      	movs	r2, #56	; 0x38
 80053e2:	4013      	ands	r3, r2
 80053e4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053e6:	4b7f      	ldr	r3, [pc, #508]	; (80055e4 <HAL_RCC_OscConfig+0x32c>)
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	2203      	movs	r2, #3
 80053ec:	4013      	ands	r3, r2
 80053ee:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	2b10      	cmp	r3, #16
 80053f4:	d102      	bne.n	80053fc <HAL_RCC_OscConfig+0x144>
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d002      	beq.n	8005402 <HAL_RCC_OscConfig+0x14a>
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d135      	bne.n	800546e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005402:	4b78      	ldr	r3, [pc, #480]	; (80055e4 <HAL_RCC_OscConfig+0x32c>)
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	2380      	movs	r3, #128	; 0x80
 8005408:	00db      	lsls	r3, r3, #3
 800540a:	4013      	ands	r3, r2
 800540c:	d005      	beq.n	800541a <HAL_RCC_OscConfig+0x162>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d101      	bne.n	800541a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e25c      	b.n	80058d4 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800541a:	4b72      	ldr	r3, [pc, #456]	; (80055e4 <HAL_RCC_OscConfig+0x32c>)
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	4a74      	ldr	r2, [pc, #464]	; (80055f0 <HAL_RCC_OscConfig+0x338>)
 8005420:	4013      	ands	r3, r2
 8005422:	0019      	movs	r1, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	695b      	ldr	r3, [r3, #20]
 8005428:	021a      	lsls	r2, r3, #8
 800542a:	4b6e      	ldr	r3, [pc, #440]	; (80055e4 <HAL_RCC_OscConfig+0x32c>)
 800542c:	430a      	orrs	r2, r1
 800542e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d112      	bne.n	800545c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005436:	4b6b      	ldr	r3, [pc, #428]	; (80055e4 <HAL_RCC_OscConfig+0x32c>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a6e      	ldr	r2, [pc, #440]	; (80055f4 <HAL_RCC_OscConfig+0x33c>)
 800543c:	4013      	ands	r3, r2
 800543e:	0019      	movs	r1, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	691a      	ldr	r2, [r3, #16]
 8005444:	4b67      	ldr	r3, [pc, #412]	; (80055e4 <HAL_RCC_OscConfig+0x32c>)
 8005446:	430a      	orrs	r2, r1
 8005448:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800544a:	4b66      	ldr	r3, [pc, #408]	; (80055e4 <HAL_RCC_OscConfig+0x32c>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	0adb      	lsrs	r3, r3, #11
 8005450:	2207      	movs	r2, #7
 8005452:	4013      	ands	r3, r2
 8005454:	4a68      	ldr	r2, [pc, #416]	; (80055f8 <HAL_RCC_OscConfig+0x340>)
 8005456:	40da      	lsrs	r2, r3
 8005458:	4b68      	ldr	r3, [pc, #416]	; (80055fc <HAL_RCC_OscConfig+0x344>)
 800545a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800545c:	4b68      	ldr	r3, [pc, #416]	; (8005600 <HAL_RCC_OscConfig+0x348>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	0018      	movs	r0, r3
 8005462:	f7fd fdcd 	bl	8003000 <HAL_InitTick>
 8005466:	1e03      	subs	r3, r0, #0
 8005468:	d051      	beq.n	800550e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e232      	b.n	80058d4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d030      	beq.n	80054d8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005476:	4b5b      	ldr	r3, [pc, #364]	; (80055e4 <HAL_RCC_OscConfig+0x32c>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a5e      	ldr	r2, [pc, #376]	; (80055f4 <HAL_RCC_OscConfig+0x33c>)
 800547c:	4013      	ands	r3, r2
 800547e:	0019      	movs	r1, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	691a      	ldr	r2, [r3, #16]
 8005484:	4b57      	ldr	r3, [pc, #348]	; (80055e4 <HAL_RCC_OscConfig+0x32c>)
 8005486:	430a      	orrs	r2, r1
 8005488:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800548a:	4b56      	ldr	r3, [pc, #344]	; (80055e4 <HAL_RCC_OscConfig+0x32c>)
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	4b55      	ldr	r3, [pc, #340]	; (80055e4 <HAL_RCC_OscConfig+0x32c>)
 8005490:	2180      	movs	r1, #128	; 0x80
 8005492:	0049      	lsls	r1, r1, #1
 8005494:	430a      	orrs	r2, r1
 8005496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005498:	f7fd fe0e 	bl	80030b8 <HAL_GetTick>
 800549c:	0003      	movs	r3, r0
 800549e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054a0:	e008      	b.n	80054b4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054a2:	f7fd fe09 	bl	80030b8 <HAL_GetTick>
 80054a6:	0002      	movs	r2, r0
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d901      	bls.n	80054b4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e20f      	b.n	80058d4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054b4:	4b4b      	ldr	r3, [pc, #300]	; (80055e4 <HAL_RCC_OscConfig+0x32c>)
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	2380      	movs	r3, #128	; 0x80
 80054ba:	00db      	lsls	r3, r3, #3
 80054bc:	4013      	ands	r3, r2
 80054be:	d0f0      	beq.n	80054a2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054c0:	4b48      	ldr	r3, [pc, #288]	; (80055e4 <HAL_RCC_OscConfig+0x32c>)
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	4a4a      	ldr	r2, [pc, #296]	; (80055f0 <HAL_RCC_OscConfig+0x338>)
 80054c6:	4013      	ands	r3, r2
 80054c8:	0019      	movs	r1, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	695b      	ldr	r3, [r3, #20]
 80054ce:	021a      	lsls	r2, r3, #8
 80054d0:	4b44      	ldr	r3, [pc, #272]	; (80055e4 <HAL_RCC_OscConfig+0x32c>)
 80054d2:	430a      	orrs	r2, r1
 80054d4:	605a      	str	r2, [r3, #4]
 80054d6:	e01b      	b.n	8005510 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80054d8:	4b42      	ldr	r3, [pc, #264]	; (80055e4 <HAL_RCC_OscConfig+0x32c>)
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	4b41      	ldr	r3, [pc, #260]	; (80055e4 <HAL_RCC_OscConfig+0x32c>)
 80054de:	4949      	ldr	r1, [pc, #292]	; (8005604 <HAL_RCC_OscConfig+0x34c>)
 80054e0:	400a      	ands	r2, r1
 80054e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e4:	f7fd fde8 	bl	80030b8 <HAL_GetTick>
 80054e8:	0003      	movs	r3, r0
 80054ea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054ec:	e008      	b.n	8005500 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054ee:	f7fd fde3 	bl	80030b8 <HAL_GetTick>
 80054f2:	0002      	movs	r2, r0
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d901      	bls.n	8005500 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e1e9      	b.n	80058d4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005500:	4b38      	ldr	r3, [pc, #224]	; (80055e4 <HAL_RCC_OscConfig+0x32c>)
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	2380      	movs	r3, #128	; 0x80
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	4013      	ands	r3, r2
 800550a:	d1f0      	bne.n	80054ee <HAL_RCC_OscConfig+0x236>
 800550c:	e000      	b.n	8005510 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800550e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2208      	movs	r2, #8
 8005516:	4013      	ands	r3, r2
 8005518:	d047      	beq.n	80055aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800551a:	4b32      	ldr	r3, [pc, #200]	; (80055e4 <HAL_RCC_OscConfig+0x32c>)
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	2238      	movs	r2, #56	; 0x38
 8005520:	4013      	ands	r3, r2
 8005522:	2b18      	cmp	r3, #24
 8005524:	d10a      	bne.n	800553c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005526:	4b2f      	ldr	r3, [pc, #188]	; (80055e4 <HAL_RCC_OscConfig+0x32c>)
 8005528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800552a:	2202      	movs	r2, #2
 800552c:	4013      	ands	r3, r2
 800552e:	d03c      	beq.n	80055aa <HAL_RCC_OscConfig+0x2f2>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d138      	bne.n	80055aa <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e1cb      	b.n	80058d4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d019      	beq.n	8005578 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005544:	4b27      	ldr	r3, [pc, #156]	; (80055e4 <HAL_RCC_OscConfig+0x32c>)
 8005546:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005548:	4b26      	ldr	r3, [pc, #152]	; (80055e4 <HAL_RCC_OscConfig+0x32c>)
 800554a:	2101      	movs	r1, #1
 800554c:	430a      	orrs	r2, r1
 800554e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005550:	f7fd fdb2 	bl	80030b8 <HAL_GetTick>
 8005554:	0003      	movs	r3, r0
 8005556:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005558:	e008      	b.n	800556c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800555a:	f7fd fdad 	bl	80030b8 <HAL_GetTick>
 800555e:	0002      	movs	r2, r0
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	2b02      	cmp	r3, #2
 8005566:	d901      	bls.n	800556c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e1b3      	b.n	80058d4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800556c:	4b1d      	ldr	r3, [pc, #116]	; (80055e4 <HAL_RCC_OscConfig+0x32c>)
 800556e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005570:	2202      	movs	r2, #2
 8005572:	4013      	ands	r3, r2
 8005574:	d0f1      	beq.n	800555a <HAL_RCC_OscConfig+0x2a2>
 8005576:	e018      	b.n	80055aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005578:	4b1a      	ldr	r3, [pc, #104]	; (80055e4 <HAL_RCC_OscConfig+0x32c>)
 800557a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800557c:	4b19      	ldr	r3, [pc, #100]	; (80055e4 <HAL_RCC_OscConfig+0x32c>)
 800557e:	2101      	movs	r1, #1
 8005580:	438a      	bics	r2, r1
 8005582:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005584:	f7fd fd98 	bl	80030b8 <HAL_GetTick>
 8005588:	0003      	movs	r3, r0
 800558a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800558c:	e008      	b.n	80055a0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800558e:	f7fd fd93 	bl	80030b8 <HAL_GetTick>
 8005592:	0002      	movs	r2, r0
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	2b02      	cmp	r3, #2
 800559a:	d901      	bls.n	80055a0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e199      	b.n	80058d4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055a0:	4b10      	ldr	r3, [pc, #64]	; (80055e4 <HAL_RCC_OscConfig+0x32c>)
 80055a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055a4:	2202      	movs	r2, #2
 80055a6:	4013      	ands	r3, r2
 80055a8:	d1f1      	bne.n	800558e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2204      	movs	r2, #4
 80055b0:	4013      	ands	r3, r2
 80055b2:	d100      	bne.n	80055b6 <HAL_RCC_OscConfig+0x2fe>
 80055b4:	e0c6      	b.n	8005744 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055b6:	231f      	movs	r3, #31
 80055b8:	18fb      	adds	r3, r7, r3
 80055ba:	2200      	movs	r2, #0
 80055bc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80055be:	4b09      	ldr	r3, [pc, #36]	; (80055e4 <HAL_RCC_OscConfig+0x32c>)
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	2238      	movs	r2, #56	; 0x38
 80055c4:	4013      	ands	r3, r2
 80055c6:	2b20      	cmp	r3, #32
 80055c8:	d11e      	bne.n	8005608 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80055ca:	4b06      	ldr	r3, [pc, #24]	; (80055e4 <HAL_RCC_OscConfig+0x32c>)
 80055cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ce:	2202      	movs	r2, #2
 80055d0:	4013      	ands	r3, r2
 80055d2:	d100      	bne.n	80055d6 <HAL_RCC_OscConfig+0x31e>
 80055d4:	e0b6      	b.n	8005744 <HAL_RCC_OscConfig+0x48c>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d000      	beq.n	80055e0 <HAL_RCC_OscConfig+0x328>
 80055de:	e0b1      	b.n	8005744 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e177      	b.n	80058d4 <HAL_RCC_OscConfig+0x61c>
 80055e4:	40021000 	.word	0x40021000
 80055e8:	fffeffff 	.word	0xfffeffff
 80055ec:	fffbffff 	.word	0xfffbffff
 80055f0:	ffff80ff 	.word	0xffff80ff
 80055f4:	ffffc7ff 	.word	0xffffc7ff
 80055f8:	00f42400 	.word	0x00f42400
 80055fc:	20005138 	.word	0x20005138
 8005600:	2000513c 	.word	0x2000513c
 8005604:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005608:	4bb4      	ldr	r3, [pc, #720]	; (80058dc <HAL_RCC_OscConfig+0x624>)
 800560a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800560c:	2380      	movs	r3, #128	; 0x80
 800560e:	055b      	lsls	r3, r3, #21
 8005610:	4013      	ands	r3, r2
 8005612:	d101      	bne.n	8005618 <HAL_RCC_OscConfig+0x360>
 8005614:	2301      	movs	r3, #1
 8005616:	e000      	b.n	800561a <HAL_RCC_OscConfig+0x362>
 8005618:	2300      	movs	r3, #0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d011      	beq.n	8005642 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800561e:	4baf      	ldr	r3, [pc, #700]	; (80058dc <HAL_RCC_OscConfig+0x624>)
 8005620:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005622:	4bae      	ldr	r3, [pc, #696]	; (80058dc <HAL_RCC_OscConfig+0x624>)
 8005624:	2180      	movs	r1, #128	; 0x80
 8005626:	0549      	lsls	r1, r1, #21
 8005628:	430a      	orrs	r2, r1
 800562a:	63da      	str	r2, [r3, #60]	; 0x3c
 800562c:	4bab      	ldr	r3, [pc, #684]	; (80058dc <HAL_RCC_OscConfig+0x624>)
 800562e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005630:	2380      	movs	r3, #128	; 0x80
 8005632:	055b      	lsls	r3, r3, #21
 8005634:	4013      	ands	r3, r2
 8005636:	60fb      	str	r3, [r7, #12]
 8005638:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800563a:	231f      	movs	r3, #31
 800563c:	18fb      	adds	r3, r7, r3
 800563e:	2201      	movs	r2, #1
 8005640:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005642:	4ba7      	ldr	r3, [pc, #668]	; (80058e0 <HAL_RCC_OscConfig+0x628>)
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	2380      	movs	r3, #128	; 0x80
 8005648:	005b      	lsls	r3, r3, #1
 800564a:	4013      	ands	r3, r2
 800564c:	d11a      	bne.n	8005684 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800564e:	4ba4      	ldr	r3, [pc, #656]	; (80058e0 <HAL_RCC_OscConfig+0x628>)
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	4ba3      	ldr	r3, [pc, #652]	; (80058e0 <HAL_RCC_OscConfig+0x628>)
 8005654:	2180      	movs	r1, #128	; 0x80
 8005656:	0049      	lsls	r1, r1, #1
 8005658:	430a      	orrs	r2, r1
 800565a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800565c:	f7fd fd2c 	bl	80030b8 <HAL_GetTick>
 8005660:	0003      	movs	r3, r0
 8005662:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005664:	e008      	b.n	8005678 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005666:	f7fd fd27 	bl	80030b8 <HAL_GetTick>
 800566a:	0002      	movs	r2, r0
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	2b02      	cmp	r3, #2
 8005672:	d901      	bls.n	8005678 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e12d      	b.n	80058d4 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005678:	4b99      	ldr	r3, [pc, #612]	; (80058e0 <HAL_RCC_OscConfig+0x628>)
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	2380      	movs	r3, #128	; 0x80
 800567e:	005b      	lsls	r3, r3, #1
 8005680:	4013      	ands	r3, r2
 8005682:	d0f0      	beq.n	8005666 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d106      	bne.n	800569a <HAL_RCC_OscConfig+0x3e2>
 800568c:	4b93      	ldr	r3, [pc, #588]	; (80058dc <HAL_RCC_OscConfig+0x624>)
 800568e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005690:	4b92      	ldr	r3, [pc, #584]	; (80058dc <HAL_RCC_OscConfig+0x624>)
 8005692:	2101      	movs	r1, #1
 8005694:	430a      	orrs	r2, r1
 8005696:	65da      	str	r2, [r3, #92]	; 0x5c
 8005698:	e01c      	b.n	80056d4 <HAL_RCC_OscConfig+0x41c>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	2b05      	cmp	r3, #5
 80056a0:	d10c      	bne.n	80056bc <HAL_RCC_OscConfig+0x404>
 80056a2:	4b8e      	ldr	r3, [pc, #568]	; (80058dc <HAL_RCC_OscConfig+0x624>)
 80056a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80056a6:	4b8d      	ldr	r3, [pc, #564]	; (80058dc <HAL_RCC_OscConfig+0x624>)
 80056a8:	2104      	movs	r1, #4
 80056aa:	430a      	orrs	r2, r1
 80056ac:	65da      	str	r2, [r3, #92]	; 0x5c
 80056ae:	4b8b      	ldr	r3, [pc, #556]	; (80058dc <HAL_RCC_OscConfig+0x624>)
 80056b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80056b2:	4b8a      	ldr	r3, [pc, #552]	; (80058dc <HAL_RCC_OscConfig+0x624>)
 80056b4:	2101      	movs	r1, #1
 80056b6:	430a      	orrs	r2, r1
 80056b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80056ba:	e00b      	b.n	80056d4 <HAL_RCC_OscConfig+0x41c>
 80056bc:	4b87      	ldr	r3, [pc, #540]	; (80058dc <HAL_RCC_OscConfig+0x624>)
 80056be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80056c0:	4b86      	ldr	r3, [pc, #536]	; (80058dc <HAL_RCC_OscConfig+0x624>)
 80056c2:	2101      	movs	r1, #1
 80056c4:	438a      	bics	r2, r1
 80056c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80056c8:	4b84      	ldr	r3, [pc, #528]	; (80058dc <HAL_RCC_OscConfig+0x624>)
 80056ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80056cc:	4b83      	ldr	r3, [pc, #524]	; (80058dc <HAL_RCC_OscConfig+0x624>)
 80056ce:	2104      	movs	r1, #4
 80056d0:	438a      	bics	r2, r1
 80056d2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d014      	beq.n	8005706 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056dc:	f7fd fcec 	bl	80030b8 <HAL_GetTick>
 80056e0:	0003      	movs	r3, r0
 80056e2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056e4:	e009      	b.n	80056fa <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056e6:	f7fd fce7 	bl	80030b8 <HAL_GetTick>
 80056ea:	0002      	movs	r2, r0
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	4a7c      	ldr	r2, [pc, #496]	; (80058e4 <HAL_RCC_OscConfig+0x62c>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d901      	bls.n	80056fa <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e0ec      	b.n	80058d4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056fa:	4b78      	ldr	r3, [pc, #480]	; (80058dc <HAL_RCC_OscConfig+0x624>)
 80056fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056fe:	2202      	movs	r2, #2
 8005700:	4013      	ands	r3, r2
 8005702:	d0f0      	beq.n	80056e6 <HAL_RCC_OscConfig+0x42e>
 8005704:	e013      	b.n	800572e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005706:	f7fd fcd7 	bl	80030b8 <HAL_GetTick>
 800570a:	0003      	movs	r3, r0
 800570c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800570e:	e009      	b.n	8005724 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005710:	f7fd fcd2 	bl	80030b8 <HAL_GetTick>
 8005714:	0002      	movs	r2, r0
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	4a72      	ldr	r2, [pc, #456]	; (80058e4 <HAL_RCC_OscConfig+0x62c>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d901      	bls.n	8005724 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e0d7      	b.n	80058d4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005724:	4b6d      	ldr	r3, [pc, #436]	; (80058dc <HAL_RCC_OscConfig+0x624>)
 8005726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005728:	2202      	movs	r2, #2
 800572a:	4013      	ands	r3, r2
 800572c:	d1f0      	bne.n	8005710 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800572e:	231f      	movs	r3, #31
 8005730:	18fb      	adds	r3, r7, r3
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d105      	bne.n	8005744 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005738:	4b68      	ldr	r3, [pc, #416]	; (80058dc <HAL_RCC_OscConfig+0x624>)
 800573a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800573c:	4b67      	ldr	r3, [pc, #412]	; (80058dc <HAL_RCC_OscConfig+0x624>)
 800573e:	496a      	ldr	r1, [pc, #424]	; (80058e8 <HAL_RCC_OscConfig+0x630>)
 8005740:	400a      	ands	r2, r1
 8005742:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	69db      	ldr	r3, [r3, #28]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d100      	bne.n	800574e <HAL_RCC_OscConfig+0x496>
 800574c:	e0c1      	b.n	80058d2 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800574e:	4b63      	ldr	r3, [pc, #396]	; (80058dc <HAL_RCC_OscConfig+0x624>)
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	2238      	movs	r2, #56	; 0x38
 8005754:	4013      	ands	r3, r2
 8005756:	2b10      	cmp	r3, #16
 8005758:	d100      	bne.n	800575c <HAL_RCC_OscConfig+0x4a4>
 800575a:	e081      	b.n	8005860 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	69db      	ldr	r3, [r3, #28]
 8005760:	2b02      	cmp	r3, #2
 8005762:	d156      	bne.n	8005812 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005764:	4b5d      	ldr	r3, [pc, #372]	; (80058dc <HAL_RCC_OscConfig+0x624>)
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	4b5c      	ldr	r3, [pc, #368]	; (80058dc <HAL_RCC_OscConfig+0x624>)
 800576a:	4960      	ldr	r1, [pc, #384]	; (80058ec <HAL_RCC_OscConfig+0x634>)
 800576c:	400a      	ands	r2, r1
 800576e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005770:	f7fd fca2 	bl	80030b8 <HAL_GetTick>
 8005774:	0003      	movs	r3, r0
 8005776:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005778:	e008      	b.n	800578c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800577a:	f7fd fc9d 	bl	80030b8 <HAL_GetTick>
 800577e:	0002      	movs	r2, r0
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	2b02      	cmp	r3, #2
 8005786:	d901      	bls.n	800578c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e0a3      	b.n	80058d4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800578c:	4b53      	ldr	r3, [pc, #332]	; (80058dc <HAL_RCC_OscConfig+0x624>)
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	2380      	movs	r3, #128	; 0x80
 8005792:	049b      	lsls	r3, r3, #18
 8005794:	4013      	ands	r3, r2
 8005796:	d1f0      	bne.n	800577a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005798:	4b50      	ldr	r3, [pc, #320]	; (80058dc <HAL_RCC_OscConfig+0x624>)
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	4a54      	ldr	r2, [pc, #336]	; (80058f0 <HAL_RCC_OscConfig+0x638>)
 800579e:	4013      	ands	r3, r2
 80057a0:	0019      	movs	r1, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a1a      	ldr	r2, [r3, #32]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057aa:	431a      	orrs	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b0:	021b      	lsls	r3, r3, #8
 80057b2:	431a      	orrs	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b8:	431a      	orrs	r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057be:	431a      	orrs	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057c4:	431a      	orrs	r2, r3
 80057c6:	4b45      	ldr	r3, [pc, #276]	; (80058dc <HAL_RCC_OscConfig+0x624>)
 80057c8:	430a      	orrs	r2, r1
 80057ca:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057cc:	4b43      	ldr	r3, [pc, #268]	; (80058dc <HAL_RCC_OscConfig+0x624>)
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	4b42      	ldr	r3, [pc, #264]	; (80058dc <HAL_RCC_OscConfig+0x624>)
 80057d2:	2180      	movs	r1, #128	; 0x80
 80057d4:	0449      	lsls	r1, r1, #17
 80057d6:	430a      	orrs	r2, r1
 80057d8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80057da:	4b40      	ldr	r3, [pc, #256]	; (80058dc <HAL_RCC_OscConfig+0x624>)
 80057dc:	68da      	ldr	r2, [r3, #12]
 80057de:	4b3f      	ldr	r3, [pc, #252]	; (80058dc <HAL_RCC_OscConfig+0x624>)
 80057e0:	2180      	movs	r1, #128	; 0x80
 80057e2:	0549      	lsls	r1, r1, #21
 80057e4:	430a      	orrs	r2, r1
 80057e6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e8:	f7fd fc66 	bl	80030b8 <HAL_GetTick>
 80057ec:	0003      	movs	r3, r0
 80057ee:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057f0:	e008      	b.n	8005804 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057f2:	f7fd fc61 	bl	80030b8 <HAL_GetTick>
 80057f6:	0002      	movs	r2, r0
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d901      	bls.n	8005804 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e067      	b.n	80058d4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005804:	4b35      	ldr	r3, [pc, #212]	; (80058dc <HAL_RCC_OscConfig+0x624>)
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	2380      	movs	r3, #128	; 0x80
 800580a:	049b      	lsls	r3, r3, #18
 800580c:	4013      	ands	r3, r2
 800580e:	d0f0      	beq.n	80057f2 <HAL_RCC_OscConfig+0x53a>
 8005810:	e05f      	b.n	80058d2 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005812:	4b32      	ldr	r3, [pc, #200]	; (80058dc <HAL_RCC_OscConfig+0x624>)
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	4b31      	ldr	r3, [pc, #196]	; (80058dc <HAL_RCC_OscConfig+0x624>)
 8005818:	4934      	ldr	r1, [pc, #208]	; (80058ec <HAL_RCC_OscConfig+0x634>)
 800581a:	400a      	ands	r2, r1
 800581c:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800581e:	4b2f      	ldr	r3, [pc, #188]	; (80058dc <HAL_RCC_OscConfig+0x624>)
 8005820:	68da      	ldr	r2, [r3, #12]
 8005822:	4b2e      	ldr	r3, [pc, #184]	; (80058dc <HAL_RCC_OscConfig+0x624>)
 8005824:	2103      	movs	r1, #3
 8005826:	438a      	bics	r2, r1
 8005828:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800582a:	4b2c      	ldr	r3, [pc, #176]	; (80058dc <HAL_RCC_OscConfig+0x624>)
 800582c:	68da      	ldr	r2, [r3, #12]
 800582e:	4b2b      	ldr	r3, [pc, #172]	; (80058dc <HAL_RCC_OscConfig+0x624>)
 8005830:	4930      	ldr	r1, [pc, #192]	; (80058f4 <HAL_RCC_OscConfig+0x63c>)
 8005832:	400a      	ands	r2, r1
 8005834:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005836:	f7fd fc3f 	bl	80030b8 <HAL_GetTick>
 800583a:	0003      	movs	r3, r0
 800583c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800583e:	e008      	b.n	8005852 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005840:	f7fd fc3a 	bl	80030b8 <HAL_GetTick>
 8005844:	0002      	movs	r2, r0
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b02      	cmp	r3, #2
 800584c:	d901      	bls.n	8005852 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e040      	b.n	80058d4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005852:	4b22      	ldr	r3, [pc, #136]	; (80058dc <HAL_RCC_OscConfig+0x624>)
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	2380      	movs	r3, #128	; 0x80
 8005858:	049b      	lsls	r3, r3, #18
 800585a:	4013      	ands	r3, r2
 800585c:	d1f0      	bne.n	8005840 <HAL_RCC_OscConfig+0x588>
 800585e:	e038      	b.n	80058d2 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	69db      	ldr	r3, [r3, #28]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d101      	bne.n	800586c <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e033      	b.n	80058d4 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800586c:	4b1b      	ldr	r3, [pc, #108]	; (80058dc <HAL_RCC_OscConfig+0x624>)
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	2203      	movs	r2, #3
 8005876:	401a      	ands	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a1b      	ldr	r3, [r3, #32]
 800587c:	429a      	cmp	r2, r3
 800587e:	d126      	bne.n	80058ce <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	2270      	movs	r2, #112	; 0x70
 8005884:	401a      	ands	r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800588a:	429a      	cmp	r2, r3
 800588c:	d11f      	bne.n	80058ce <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	23fe      	movs	r3, #254	; 0xfe
 8005892:	01db      	lsls	r3, r3, #7
 8005894:	401a      	ands	r2, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800589c:	429a      	cmp	r2, r3
 800589e:	d116      	bne.n	80058ce <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	23f8      	movs	r3, #248	; 0xf8
 80058a4:	039b      	lsls	r3, r3, #14
 80058a6:	401a      	ands	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d10e      	bne.n	80058ce <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80058b0:	697a      	ldr	r2, [r7, #20]
 80058b2:	23e0      	movs	r3, #224	; 0xe0
 80058b4:	051b      	lsls	r3, r3, #20
 80058b6:	401a      	ands	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80058bc:	429a      	cmp	r2, r3
 80058be:	d106      	bne.n	80058ce <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	0f5b      	lsrs	r3, r3, #29
 80058c4:	075a      	lsls	r2, r3, #29
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d001      	beq.n	80058d2 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e000      	b.n	80058d4 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	0018      	movs	r0, r3
 80058d6:	46bd      	mov	sp, r7
 80058d8:	b008      	add	sp, #32
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	40021000 	.word	0x40021000
 80058e0:	40007000 	.word	0x40007000
 80058e4:	00001388 	.word	0x00001388
 80058e8:	efffffff 	.word	0xefffffff
 80058ec:	feffffff 	.word	0xfeffffff
 80058f0:	11c1808c 	.word	0x11c1808c
 80058f4:	eefeffff 	.word	0xeefeffff

080058f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d101      	bne.n	800590c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e0e9      	b.n	8005ae0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800590c:	4b76      	ldr	r3, [pc, #472]	; (8005ae8 <HAL_RCC_ClockConfig+0x1f0>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2207      	movs	r2, #7
 8005912:	4013      	ands	r3, r2
 8005914:	683a      	ldr	r2, [r7, #0]
 8005916:	429a      	cmp	r2, r3
 8005918:	d91e      	bls.n	8005958 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800591a:	4b73      	ldr	r3, [pc, #460]	; (8005ae8 <HAL_RCC_ClockConfig+0x1f0>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2207      	movs	r2, #7
 8005920:	4393      	bics	r3, r2
 8005922:	0019      	movs	r1, r3
 8005924:	4b70      	ldr	r3, [pc, #448]	; (8005ae8 <HAL_RCC_ClockConfig+0x1f0>)
 8005926:	683a      	ldr	r2, [r7, #0]
 8005928:	430a      	orrs	r2, r1
 800592a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800592c:	f7fd fbc4 	bl	80030b8 <HAL_GetTick>
 8005930:	0003      	movs	r3, r0
 8005932:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005934:	e009      	b.n	800594a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005936:	f7fd fbbf 	bl	80030b8 <HAL_GetTick>
 800593a:	0002      	movs	r2, r0
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	4a6a      	ldr	r2, [pc, #424]	; (8005aec <HAL_RCC_ClockConfig+0x1f4>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d901      	bls.n	800594a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e0ca      	b.n	8005ae0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800594a:	4b67      	ldr	r3, [pc, #412]	; (8005ae8 <HAL_RCC_ClockConfig+0x1f0>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2207      	movs	r2, #7
 8005950:	4013      	ands	r3, r2
 8005952:	683a      	ldr	r2, [r7, #0]
 8005954:	429a      	cmp	r2, r3
 8005956:	d1ee      	bne.n	8005936 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2202      	movs	r2, #2
 800595e:	4013      	ands	r3, r2
 8005960:	d015      	beq.n	800598e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2204      	movs	r2, #4
 8005968:	4013      	ands	r3, r2
 800596a:	d006      	beq.n	800597a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800596c:	4b60      	ldr	r3, [pc, #384]	; (8005af0 <HAL_RCC_ClockConfig+0x1f8>)
 800596e:	689a      	ldr	r2, [r3, #8]
 8005970:	4b5f      	ldr	r3, [pc, #380]	; (8005af0 <HAL_RCC_ClockConfig+0x1f8>)
 8005972:	21e0      	movs	r1, #224	; 0xe0
 8005974:	01c9      	lsls	r1, r1, #7
 8005976:	430a      	orrs	r2, r1
 8005978:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800597a:	4b5d      	ldr	r3, [pc, #372]	; (8005af0 <HAL_RCC_ClockConfig+0x1f8>)
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	4a5d      	ldr	r2, [pc, #372]	; (8005af4 <HAL_RCC_ClockConfig+0x1fc>)
 8005980:	4013      	ands	r3, r2
 8005982:	0019      	movs	r1, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	689a      	ldr	r2, [r3, #8]
 8005988:	4b59      	ldr	r3, [pc, #356]	; (8005af0 <HAL_RCC_ClockConfig+0x1f8>)
 800598a:	430a      	orrs	r2, r1
 800598c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2201      	movs	r2, #1
 8005994:	4013      	ands	r3, r2
 8005996:	d057      	beq.n	8005a48 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d107      	bne.n	80059b0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059a0:	4b53      	ldr	r3, [pc, #332]	; (8005af0 <HAL_RCC_ClockConfig+0x1f8>)
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	2380      	movs	r3, #128	; 0x80
 80059a6:	029b      	lsls	r3, r3, #10
 80059a8:	4013      	ands	r3, r2
 80059aa:	d12b      	bne.n	8005a04 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e097      	b.n	8005ae0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	d107      	bne.n	80059c8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059b8:	4b4d      	ldr	r3, [pc, #308]	; (8005af0 <HAL_RCC_ClockConfig+0x1f8>)
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	2380      	movs	r3, #128	; 0x80
 80059be:	049b      	lsls	r3, r3, #18
 80059c0:	4013      	ands	r3, r2
 80059c2:	d11f      	bne.n	8005a04 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e08b      	b.n	8005ae0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d107      	bne.n	80059e0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059d0:	4b47      	ldr	r3, [pc, #284]	; (8005af0 <HAL_RCC_ClockConfig+0x1f8>)
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	2380      	movs	r3, #128	; 0x80
 80059d6:	00db      	lsls	r3, r3, #3
 80059d8:	4013      	ands	r3, r2
 80059da:	d113      	bne.n	8005a04 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e07f      	b.n	8005ae0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	2b03      	cmp	r3, #3
 80059e6:	d106      	bne.n	80059f6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80059e8:	4b41      	ldr	r3, [pc, #260]	; (8005af0 <HAL_RCC_ClockConfig+0x1f8>)
 80059ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059ec:	2202      	movs	r2, #2
 80059ee:	4013      	ands	r3, r2
 80059f0:	d108      	bne.n	8005a04 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e074      	b.n	8005ae0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059f6:	4b3e      	ldr	r3, [pc, #248]	; (8005af0 <HAL_RCC_ClockConfig+0x1f8>)
 80059f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059fa:	2202      	movs	r2, #2
 80059fc:	4013      	ands	r3, r2
 80059fe:	d101      	bne.n	8005a04 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e06d      	b.n	8005ae0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a04:	4b3a      	ldr	r3, [pc, #232]	; (8005af0 <HAL_RCC_ClockConfig+0x1f8>)
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	2207      	movs	r2, #7
 8005a0a:	4393      	bics	r3, r2
 8005a0c:	0019      	movs	r1, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	685a      	ldr	r2, [r3, #4]
 8005a12:	4b37      	ldr	r3, [pc, #220]	; (8005af0 <HAL_RCC_ClockConfig+0x1f8>)
 8005a14:	430a      	orrs	r2, r1
 8005a16:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a18:	f7fd fb4e 	bl	80030b8 <HAL_GetTick>
 8005a1c:	0003      	movs	r3, r0
 8005a1e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a20:	e009      	b.n	8005a36 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a22:	f7fd fb49 	bl	80030b8 <HAL_GetTick>
 8005a26:	0002      	movs	r2, r0
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	4a2f      	ldr	r2, [pc, #188]	; (8005aec <HAL_RCC_ClockConfig+0x1f4>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d901      	bls.n	8005a36 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e054      	b.n	8005ae0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a36:	4b2e      	ldr	r3, [pc, #184]	; (8005af0 <HAL_RCC_ClockConfig+0x1f8>)
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	2238      	movs	r2, #56	; 0x38
 8005a3c:	401a      	ands	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	00db      	lsls	r3, r3, #3
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d1ec      	bne.n	8005a22 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a48:	4b27      	ldr	r3, [pc, #156]	; (8005ae8 <HAL_RCC_ClockConfig+0x1f0>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2207      	movs	r2, #7
 8005a4e:	4013      	ands	r3, r2
 8005a50:	683a      	ldr	r2, [r7, #0]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d21e      	bcs.n	8005a94 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a56:	4b24      	ldr	r3, [pc, #144]	; (8005ae8 <HAL_RCC_ClockConfig+0x1f0>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2207      	movs	r2, #7
 8005a5c:	4393      	bics	r3, r2
 8005a5e:	0019      	movs	r1, r3
 8005a60:	4b21      	ldr	r3, [pc, #132]	; (8005ae8 <HAL_RCC_ClockConfig+0x1f0>)
 8005a62:	683a      	ldr	r2, [r7, #0]
 8005a64:	430a      	orrs	r2, r1
 8005a66:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005a68:	f7fd fb26 	bl	80030b8 <HAL_GetTick>
 8005a6c:	0003      	movs	r3, r0
 8005a6e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005a70:	e009      	b.n	8005a86 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a72:	f7fd fb21 	bl	80030b8 <HAL_GetTick>
 8005a76:	0002      	movs	r2, r0
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	4a1b      	ldr	r2, [pc, #108]	; (8005aec <HAL_RCC_ClockConfig+0x1f4>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d901      	bls.n	8005a86 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e02c      	b.n	8005ae0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005a86:	4b18      	ldr	r3, [pc, #96]	; (8005ae8 <HAL_RCC_ClockConfig+0x1f0>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2207      	movs	r2, #7
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	683a      	ldr	r2, [r7, #0]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d1ee      	bne.n	8005a72 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2204      	movs	r2, #4
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	d009      	beq.n	8005ab2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005a9e:	4b14      	ldr	r3, [pc, #80]	; (8005af0 <HAL_RCC_ClockConfig+0x1f8>)
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	4a15      	ldr	r2, [pc, #84]	; (8005af8 <HAL_RCC_ClockConfig+0x200>)
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	0019      	movs	r1, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	68da      	ldr	r2, [r3, #12]
 8005aac:	4b10      	ldr	r3, [pc, #64]	; (8005af0 <HAL_RCC_ClockConfig+0x1f8>)
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005ab2:	f000 f829 	bl	8005b08 <HAL_RCC_GetSysClockFreq>
 8005ab6:	0001      	movs	r1, r0
 8005ab8:	4b0d      	ldr	r3, [pc, #52]	; (8005af0 <HAL_RCC_ClockConfig+0x1f8>)
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	0a1b      	lsrs	r3, r3, #8
 8005abe:	220f      	movs	r2, #15
 8005ac0:	401a      	ands	r2, r3
 8005ac2:	4b0e      	ldr	r3, [pc, #56]	; (8005afc <HAL_RCC_ClockConfig+0x204>)
 8005ac4:	0092      	lsls	r2, r2, #2
 8005ac6:	58d3      	ldr	r3, [r2, r3]
 8005ac8:	221f      	movs	r2, #31
 8005aca:	4013      	ands	r3, r2
 8005acc:	000a      	movs	r2, r1
 8005ace:	40da      	lsrs	r2, r3
 8005ad0:	4b0b      	ldr	r3, [pc, #44]	; (8005b00 <HAL_RCC_ClockConfig+0x208>)
 8005ad2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005ad4:	4b0b      	ldr	r3, [pc, #44]	; (8005b04 <HAL_RCC_ClockConfig+0x20c>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	0018      	movs	r0, r3
 8005ada:	f7fd fa91 	bl	8003000 <HAL_InitTick>
 8005ade:	0003      	movs	r3, r0
}
 8005ae0:	0018      	movs	r0, r3
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	b004      	add	sp, #16
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	40022000 	.word	0x40022000
 8005aec:	00001388 	.word	0x00001388
 8005af0:	40021000 	.word	0x40021000
 8005af4:	fffff0ff 	.word	0xfffff0ff
 8005af8:	ffff8fff 	.word	0xffff8fff
 8005afc:	0800a770 	.word	0x0800a770
 8005b00:	20005138 	.word	0x20005138
 8005b04:	2000513c 	.word	0x2000513c

08005b08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b086      	sub	sp, #24
 8005b0c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b0e:	4b3c      	ldr	r3, [pc, #240]	; (8005c00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	2238      	movs	r2, #56	; 0x38
 8005b14:	4013      	ands	r3, r2
 8005b16:	d10f      	bne.n	8005b38 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005b18:	4b39      	ldr	r3, [pc, #228]	; (8005c00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	0adb      	lsrs	r3, r3, #11
 8005b1e:	2207      	movs	r2, #7
 8005b20:	4013      	ands	r3, r2
 8005b22:	2201      	movs	r2, #1
 8005b24:	409a      	lsls	r2, r3
 8005b26:	0013      	movs	r3, r2
 8005b28:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005b2a:	6839      	ldr	r1, [r7, #0]
 8005b2c:	4835      	ldr	r0, [pc, #212]	; (8005c04 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005b2e:	f7fa fae9 	bl	8000104 <__udivsi3>
 8005b32:	0003      	movs	r3, r0
 8005b34:	613b      	str	r3, [r7, #16]
 8005b36:	e05d      	b.n	8005bf4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b38:	4b31      	ldr	r3, [pc, #196]	; (8005c00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	2238      	movs	r2, #56	; 0x38
 8005b3e:	4013      	ands	r3, r2
 8005b40:	2b08      	cmp	r3, #8
 8005b42:	d102      	bne.n	8005b4a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005b44:	4b30      	ldr	r3, [pc, #192]	; (8005c08 <HAL_RCC_GetSysClockFreq+0x100>)
 8005b46:	613b      	str	r3, [r7, #16]
 8005b48:	e054      	b.n	8005bf4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b4a:	4b2d      	ldr	r3, [pc, #180]	; (8005c00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	2238      	movs	r2, #56	; 0x38
 8005b50:	4013      	ands	r3, r2
 8005b52:	2b10      	cmp	r3, #16
 8005b54:	d138      	bne.n	8005bc8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005b56:	4b2a      	ldr	r3, [pc, #168]	; (8005c00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	2203      	movs	r2, #3
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b60:	4b27      	ldr	r3, [pc, #156]	; (8005c00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	091b      	lsrs	r3, r3, #4
 8005b66:	2207      	movs	r2, #7
 8005b68:	4013      	ands	r3, r2
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2b03      	cmp	r3, #3
 8005b72:	d10d      	bne.n	8005b90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b74:	68b9      	ldr	r1, [r7, #8]
 8005b76:	4824      	ldr	r0, [pc, #144]	; (8005c08 <HAL_RCC_GetSysClockFreq+0x100>)
 8005b78:	f7fa fac4 	bl	8000104 <__udivsi3>
 8005b7c:	0003      	movs	r3, r0
 8005b7e:	0019      	movs	r1, r3
 8005b80:	4b1f      	ldr	r3, [pc, #124]	; (8005c00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	0a1b      	lsrs	r3, r3, #8
 8005b86:	227f      	movs	r2, #127	; 0x7f
 8005b88:	4013      	ands	r3, r2
 8005b8a:	434b      	muls	r3, r1
 8005b8c:	617b      	str	r3, [r7, #20]
        break;
 8005b8e:	e00d      	b.n	8005bac <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005b90:	68b9      	ldr	r1, [r7, #8]
 8005b92:	481c      	ldr	r0, [pc, #112]	; (8005c04 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005b94:	f7fa fab6 	bl	8000104 <__udivsi3>
 8005b98:	0003      	movs	r3, r0
 8005b9a:	0019      	movs	r1, r3
 8005b9c:	4b18      	ldr	r3, [pc, #96]	; (8005c00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	0a1b      	lsrs	r3, r3, #8
 8005ba2:	227f      	movs	r2, #127	; 0x7f
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	434b      	muls	r3, r1
 8005ba8:	617b      	str	r3, [r7, #20]
        break;
 8005baa:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005bac:	4b14      	ldr	r3, [pc, #80]	; (8005c00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	0f5b      	lsrs	r3, r3, #29
 8005bb2:	2207      	movs	r2, #7
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005bba:	6879      	ldr	r1, [r7, #4]
 8005bbc:	6978      	ldr	r0, [r7, #20]
 8005bbe:	f7fa faa1 	bl	8000104 <__udivsi3>
 8005bc2:	0003      	movs	r3, r0
 8005bc4:	613b      	str	r3, [r7, #16]
 8005bc6:	e015      	b.n	8005bf4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005bc8:	4b0d      	ldr	r3, [pc, #52]	; (8005c00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	2238      	movs	r2, #56	; 0x38
 8005bce:	4013      	ands	r3, r2
 8005bd0:	2b20      	cmp	r3, #32
 8005bd2:	d103      	bne.n	8005bdc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005bd4:	2380      	movs	r3, #128	; 0x80
 8005bd6:	021b      	lsls	r3, r3, #8
 8005bd8:	613b      	str	r3, [r7, #16]
 8005bda:	e00b      	b.n	8005bf4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005bdc:	4b08      	ldr	r3, [pc, #32]	; (8005c00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	2238      	movs	r2, #56	; 0x38
 8005be2:	4013      	ands	r3, r2
 8005be4:	2b18      	cmp	r3, #24
 8005be6:	d103      	bne.n	8005bf0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005be8:	23fa      	movs	r3, #250	; 0xfa
 8005bea:	01db      	lsls	r3, r3, #7
 8005bec:	613b      	str	r3, [r7, #16]
 8005bee:	e001      	b.n	8005bf4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005bf4:	693b      	ldr	r3, [r7, #16]
}
 8005bf6:	0018      	movs	r0, r3
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	b006      	add	sp, #24
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	46c0      	nop			; (mov r8, r8)
 8005c00:	40021000 	.word	0x40021000
 8005c04:	00f42400 	.word	0x00f42400
 8005c08:	007a1200 	.word	0x007a1200

08005c0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c10:	4b02      	ldr	r3, [pc, #8]	; (8005c1c <HAL_RCC_GetHCLKFreq+0x10>)
 8005c12:	681b      	ldr	r3, [r3, #0]
}
 8005c14:	0018      	movs	r0, r3
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	46c0      	nop			; (mov r8, r8)
 8005c1c:	20005138 	.word	0x20005138

08005c20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c20:	b5b0      	push	{r4, r5, r7, lr}
 8005c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005c24:	f7ff fff2 	bl	8005c0c <HAL_RCC_GetHCLKFreq>
 8005c28:	0004      	movs	r4, r0
 8005c2a:	f7ff fb39 	bl	80052a0 <LL_RCC_GetAPB1Prescaler>
 8005c2e:	0003      	movs	r3, r0
 8005c30:	0b1a      	lsrs	r2, r3, #12
 8005c32:	4b05      	ldr	r3, [pc, #20]	; (8005c48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c34:	0092      	lsls	r2, r2, #2
 8005c36:	58d3      	ldr	r3, [r2, r3]
 8005c38:	221f      	movs	r2, #31
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	40dc      	lsrs	r4, r3
 8005c3e:	0023      	movs	r3, r4
}
 8005c40:	0018      	movs	r0, r3
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bdb0      	pop	{r4, r5, r7, pc}
 8005c46:	46c0      	nop			; (mov r8, r8)
 8005c48:	0800a7b0 	.word	0x0800a7b0

08005c4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b086      	sub	sp, #24
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005c54:	2313      	movs	r3, #19
 8005c56:	18fb      	adds	r3, r7, r3
 8005c58:	2200      	movs	r2, #0
 8005c5a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c5c:	2312      	movs	r3, #18
 8005c5e:	18fb      	adds	r3, r7, r3
 8005c60:	2200      	movs	r2, #0
 8005c62:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	2380      	movs	r3, #128	; 0x80
 8005c6a:	029b      	lsls	r3, r3, #10
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	d100      	bne.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005c70:	e0a3      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c72:	2011      	movs	r0, #17
 8005c74:	183b      	adds	r3, r7, r0
 8005c76:	2200      	movs	r2, #0
 8005c78:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c7a:	4bc3      	ldr	r3, [pc, #780]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005c7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c7e:	2380      	movs	r3, #128	; 0x80
 8005c80:	055b      	lsls	r3, r3, #21
 8005c82:	4013      	ands	r3, r2
 8005c84:	d110      	bne.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c86:	4bc0      	ldr	r3, [pc, #768]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005c88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c8a:	4bbf      	ldr	r3, [pc, #764]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005c8c:	2180      	movs	r1, #128	; 0x80
 8005c8e:	0549      	lsls	r1, r1, #21
 8005c90:	430a      	orrs	r2, r1
 8005c92:	63da      	str	r2, [r3, #60]	; 0x3c
 8005c94:	4bbc      	ldr	r3, [pc, #752]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005c96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c98:	2380      	movs	r3, #128	; 0x80
 8005c9a:	055b      	lsls	r3, r3, #21
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	60bb      	str	r3, [r7, #8]
 8005ca0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ca2:	183b      	adds	r3, r7, r0
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ca8:	4bb8      	ldr	r3, [pc, #736]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	4bb7      	ldr	r3, [pc, #732]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005cae:	2180      	movs	r1, #128	; 0x80
 8005cb0:	0049      	lsls	r1, r1, #1
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005cb6:	f7fd f9ff 	bl	80030b8 <HAL_GetTick>
 8005cba:	0003      	movs	r3, r0
 8005cbc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cbe:	e00b      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cc0:	f7fd f9fa 	bl	80030b8 <HAL_GetTick>
 8005cc4:	0002      	movs	r2, r0
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d904      	bls.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005cce:	2313      	movs	r3, #19
 8005cd0:	18fb      	adds	r3, r7, r3
 8005cd2:	2203      	movs	r2, #3
 8005cd4:	701a      	strb	r2, [r3, #0]
        break;
 8005cd6:	e005      	b.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cd8:	4bac      	ldr	r3, [pc, #688]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	2380      	movs	r3, #128	; 0x80
 8005cde:	005b      	lsls	r3, r3, #1
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	d0ed      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005ce4:	2313      	movs	r3, #19
 8005ce6:	18fb      	adds	r3, r7, r3
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d154      	bne.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005cee:	4ba6      	ldr	r3, [pc, #664]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005cf0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005cf2:	23c0      	movs	r3, #192	; 0xc0
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d019      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d04:	697a      	ldr	r2, [r7, #20]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d014      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005d0a:	4b9f      	ldr	r3, [pc, #636]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d0e:	4aa0      	ldr	r2, [pc, #640]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005d10:	4013      	ands	r3, r2
 8005d12:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d14:	4b9c      	ldr	r3, [pc, #624]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005d18:	4b9b      	ldr	r3, [pc, #620]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d1a:	2180      	movs	r1, #128	; 0x80
 8005d1c:	0249      	lsls	r1, r1, #9
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d22:	4b99      	ldr	r3, [pc, #612]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d24:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005d26:	4b98      	ldr	r3, [pc, #608]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d28:	499a      	ldr	r1, [pc, #616]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005d2a:	400a      	ands	r2, r1
 8005d2c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005d2e:	4b96      	ldr	r3, [pc, #600]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	2201      	movs	r2, #1
 8005d38:	4013      	ands	r3, r2
 8005d3a:	d016      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d3c:	f7fd f9bc 	bl	80030b8 <HAL_GetTick>
 8005d40:	0003      	movs	r3, r0
 8005d42:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d44:	e00c      	b.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d46:	f7fd f9b7 	bl	80030b8 <HAL_GetTick>
 8005d4a:	0002      	movs	r2, r0
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	4a91      	ldr	r2, [pc, #580]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d904      	bls.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005d56:	2313      	movs	r3, #19
 8005d58:	18fb      	adds	r3, r7, r3
 8005d5a:	2203      	movs	r2, #3
 8005d5c:	701a      	strb	r2, [r3, #0]
            break;
 8005d5e:	e004      	b.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d60:	4b89      	ldr	r3, [pc, #548]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d64:	2202      	movs	r2, #2
 8005d66:	4013      	ands	r3, r2
 8005d68:	d0ed      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005d6a:	2313      	movs	r3, #19
 8005d6c:	18fb      	adds	r3, r7, r3
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d10a      	bne.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d74:	4b84      	ldr	r3, [pc, #528]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d78:	4a85      	ldr	r2, [pc, #532]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	0019      	movs	r1, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d82:	4b81      	ldr	r3, [pc, #516]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d84:	430a      	orrs	r2, r1
 8005d86:	65da      	str	r2, [r3, #92]	; 0x5c
 8005d88:	e00c      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d8a:	2312      	movs	r3, #18
 8005d8c:	18fb      	adds	r3, r7, r3
 8005d8e:	2213      	movs	r2, #19
 8005d90:	18ba      	adds	r2, r7, r2
 8005d92:	7812      	ldrb	r2, [r2, #0]
 8005d94:	701a      	strb	r2, [r3, #0]
 8005d96:	e005      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d98:	2312      	movs	r3, #18
 8005d9a:	18fb      	adds	r3, r7, r3
 8005d9c:	2213      	movs	r2, #19
 8005d9e:	18ba      	adds	r2, r7, r2
 8005da0:	7812      	ldrb	r2, [r2, #0]
 8005da2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005da4:	2311      	movs	r3, #17
 8005da6:	18fb      	adds	r3, r7, r3
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d105      	bne.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dae:	4b76      	ldr	r3, [pc, #472]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005db0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005db2:	4b75      	ldr	r3, [pc, #468]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005db4:	4979      	ldr	r1, [pc, #484]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8005db6:	400a      	ands	r2, r1
 8005db8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	d009      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005dc4:	4b70      	ldr	r3, [pc, #448]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dc8:	2203      	movs	r2, #3
 8005dca:	4393      	bics	r3, r2
 8005dcc:	0019      	movs	r1, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	685a      	ldr	r2, [r3, #4]
 8005dd2:	4b6d      	ldr	r3, [pc, #436]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2202      	movs	r2, #2
 8005dde:	4013      	ands	r3, r2
 8005de0:	d009      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005de2:	4b69      	ldr	r3, [pc, #420]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005de6:	220c      	movs	r2, #12
 8005de8:	4393      	bics	r3, r2
 8005dea:	0019      	movs	r1, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	689a      	ldr	r2, [r3, #8]
 8005df0:	4b65      	ldr	r3, [pc, #404]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005df2:	430a      	orrs	r2, r1
 8005df4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2210      	movs	r2, #16
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	d009      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e00:	4b61      	ldr	r3, [pc, #388]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e04:	4a66      	ldr	r2, [pc, #408]	; (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8005e06:	4013      	ands	r3, r2
 8005e08:	0019      	movs	r1, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	68da      	ldr	r2, [r3, #12]
 8005e0e:	4b5e      	ldr	r3, [pc, #376]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e10:	430a      	orrs	r2, r1
 8005e12:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	2380      	movs	r3, #128	; 0x80
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	d009      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e20:	4b59      	ldr	r3, [pc, #356]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e24:	4a5f      	ldr	r2, [pc, #380]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005e26:	4013      	ands	r3, r2
 8005e28:	0019      	movs	r1, r3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	699a      	ldr	r2, [r3, #24]
 8005e2e:	4b56      	ldr	r3, [pc, #344]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e30:	430a      	orrs	r2, r1
 8005e32:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	2380      	movs	r3, #128	; 0x80
 8005e3a:	00db      	lsls	r3, r3, #3
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	d009      	beq.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e40:	4b51      	ldr	r3, [pc, #324]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e44:	4a58      	ldr	r2, [pc, #352]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e46:	4013      	ands	r3, r2
 8005e48:	0019      	movs	r1, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	69da      	ldr	r2, [r3, #28]
 8005e4e:	4b4e      	ldr	r3, [pc, #312]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e50:	430a      	orrs	r2, r1
 8005e52:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2220      	movs	r2, #32
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	d009      	beq.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e5e:	4b4a      	ldr	r3, [pc, #296]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e62:	4a52      	ldr	r2, [pc, #328]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8005e64:	4013      	ands	r3, r2
 8005e66:	0019      	movs	r1, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	691a      	ldr	r2, [r3, #16]
 8005e6c:	4b46      	ldr	r3, [pc, #280]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e6e:	430a      	orrs	r2, r1
 8005e70:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	2380      	movs	r3, #128	; 0x80
 8005e78:	01db      	lsls	r3, r3, #7
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	d015      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e7e:	4b42      	ldr	r3, [pc, #264]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	0899      	lsrs	r1, r3, #2
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a1a      	ldr	r2, [r3, #32]
 8005e8a:	4b3f      	ldr	r3, [pc, #252]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e8c:	430a      	orrs	r2, r1
 8005e8e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a1a      	ldr	r2, [r3, #32]
 8005e94:	2380      	movs	r3, #128	; 0x80
 8005e96:	05db      	lsls	r3, r3, #23
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d106      	bne.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005e9c:	4b3a      	ldr	r3, [pc, #232]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e9e:	68da      	ldr	r2, [r3, #12]
 8005ea0:	4b39      	ldr	r3, [pc, #228]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ea2:	2180      	movs	r1, #128	; 0x80
 8005ea4:	0249      	lsls	r1, r1, #9
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	2380      	movs	r3, #128	; 0x80
 8005eb0:	031b      	lsls	r3, r3, #12
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	d009      	beq.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005eb6:	4b34      	ldr	r3, [pc, #208]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eba:	2240      	movs	r2, #64	; 0x40
 8005ebc:	4393      	bics	r3, r2
 8005ebe:	0019      	movs	r1, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ec4:	4b30      	ldr	r3, [pc, #192]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ec6:	430a      	orrs	r2, r1
 8005ec8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	2380      	movs	r3, #128	; 0x80
 8005ed0:	039b      	lsls	r3, r3, #14
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	d016      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005ed6:	4b2c      	ldr	r3, [pc, #176]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eda:	4a35      	ldr	r2, [pc, #212]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005edc:	4013      	ands	r3, r2
 8005ede:	0019      	movs	r1, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ee4:	4b28      	ldr	r3, [pc, #160]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ee6:	430a      	orrs	r2, r1
 8005ee8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005eee:	2380      	movs	r3, #128	; 0x80
 8005ef0:	03db      	lsls	r3, r3, #15
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d106      	bne.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005ef6:	4b24      	ldr	r3, [pc, #144]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ef8:	68da      	ldr	r2, [r3, #12]
 8005efa:	4b23      	ldr	r3, [pc, #140]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005efc:	2180      	movs	r1, #128	; 0x80
 8005efe:	0449      	lsls	r1, r1, #17
 8005f00:	430a      	orrs	r2, r1
 8005f02:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	2380      	movs	r3, #128	; 0x80
 8005f0a:	03db      	lsls	r3, r3, #15
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	d016      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005f10:	4b1d      	ldr	r3, [pc, #116]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f14:	4a27      	ldr	r2, [pc, #156]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8005f16:	4013      	ands	r3, r2
 8005f18:	0019      	movs	r1, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f1e:	4b1a      	ldr	r3, [pc, #104]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f20:	430a      	orrs	r2, r1
 8005f22:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f28:	2380      	movs	r3, #128	; 0x80
 8005f2a:	045b      	lsls	r3, r3, #17
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d106      	bne.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005f30:	4b15      	ldr	r3, [pc, #84]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f32:	68da      	ldr	r2, [r3, #12]
 8005f34:	4b14      	ldr	r3, [pc, #80]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f36:	2180      	movs	r1, #128	; 0x80
 8005f38:	0449      	lsls	r1, r1, #17
 8005f3a:	430a      	orrs	r2, r1
 8005f3c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	2380      	movs	r3, #128	; 0x80
 8005f44:	011b      	lsls	r3, r3, #4
 8005f46:	4013      	ands	r3, r2
 8005f48:	d016      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005f4a:	4b0f      	ldr	r3, [pc, #60]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f4e:	4a1a      	ldr	r2, [pc, #104]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8005f50:	4013      	ands	r3, r2
 8005f52:	0019      	movs	r1, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	695a      	ldr	r2, [r3, #20]
 8005f58:	4b0b      	ldr	r3, [pc, #44]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	695a      	ldr	r2, [r3, #20]
 8005f62:	2380      	movs	r3, #128	; 0x80
 8005f64:	01db      	lsls	r3, r3, #7
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d106      	bne.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005f6a:	4b07      	ldr	r3, [pc, #28]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f6c:	68da      	ldr	r2, [r3, #12]
 8005f6e:	4b06      	ldr	r3, [pc, #24]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f70:	2180      	movs	r1, #128	; 0x80
 8005f72:	0249      	lsls	r1, r1, #9
 8005f74:	430a      	orrs	r2, r1
 8005f76:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005f78:	2312      	movs	r3, #18
 8005f7a:	18fb      	adds	r3, r7, r3
 8005f7c:	781b      	ldrb	r3, [r3, #0]
}
 8005f7e:	0018      	movs	r0, r3
 8005f80:	46bd      	mov	sp, r7
 8005f82:	b006      	add	sp, #24
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	46c0      	nop			; (mov r8, r8)
 8005f88:	40021000 	.word	0x40021000
 8005f8c:	40007000 	.word	0x40007000
 8005f90:	fffffcff 	.word	0xfffffcff
 8005f94:	fffeffff 	.word	0xfffeffff
 8005f98:	00001388 	.word	0x00001388
 8005f9c:	efffffff 	.word	0xefffffff
 8005fa0:	fffff3ff 	.word	0xfffff3ff
 8005fa4:	fff3ffff 	.word	0xfff3ffff
 8005fa8:	ffcfffff 	.word	0xffcfffff
 8005fac:	ffffcfff 	.word	0xffffcfff
 8005fb0:	ffbfffff 	.word	0xffbfffff
 8005fb4:	feffffff 	.word	0xfeffffff
 8005fb8:	ffff3fff 	.word	0xffff3fff

08005fbc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	2380      	movs	r3, #128	; 0x80
 8005fcc:	029b      	lsls	r3, r3, #10
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d136      	bne.n	8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005fd2:	4bcd      	ldr	r3, [pc, #820]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005fd4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005fd6:	23c0      	movs	r3, #192	; 0xc0
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	4013      	ands	r3, r2
 8005fdc:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005fde:	4bca      	ldr	r3, [pc, #808]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fe2:	2202      	movs	r2, #2
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	d108      	bne.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	2380      	movs	r3, #128	; 0x80
 8005fee:	005b      	lsls	r3, r3, #1
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d103      	bne.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8005ff4:	2380      	movs	r3, #128	; 0x80
 8005ff6:	021b      	lsls	r3, r3, #8
 8005ff8:	617b      	str	r3, [r7, #20]
 8005ffa:	e31c      	b.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005ffc:	4bc2      	ldr	r3, [pc, #776]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006000:	2202      	movs	r2, #2
 8006002:	4013      	ands	r3, r2
 8006004:	2b02      	cmp	r3, #2
 8006006:	d108      	bne.n	800601a <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	2380      	movs	r3, #128	; 0x80
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	429a      	cmp	r2, r3
 8006010:	d103      	bne.n	800601a <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 8006012:	23fa      	movs	r3, #250	; 0xfa
 8006014:	01db      	lsls	r3, r3, #7
 8006016:	617b      	str	r3, [r7, #20]
 8006018:	e30d      	b.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800601a:	4bbb      	ldr	r3, [pc, #748]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	2380      	movs	r3, #128	; 0x80
 8006020:	029b      	lsls	r3, r3, #10
 8006022:	401a      	ands	r2, r3
 8006024:	2380      	movs	r3, #128	; 0x80
 8006026:	029b      	lsls	r3, r3, #10
 8006028:	429a      	cmp	r2, r3
 800602a:	d000      	beq.n	800602e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 800602c:	e303      	b.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	23c0      	movs	r3, #192	; 0xc0
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	429a      	cmp	r2, r3
 8006036:	d000      	beq.n	800603a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 8006038:	e2fd      	b.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    {
      frequency = HSE_VALUE / 32U;
 800603a:	4bb4      	ldr	r3, [pc, #720]	; (800630c <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 800603c:	617b      	str	r3, [r7, #20]
 800603e:	e2fa      	b.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 8006040:	4bb1      	ldr	r3, [pc, #708]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	2203      	movs	r2, #3
 8006046:	4013      	ands	r3, r2
 8006048:	2b02      	cmp	r3, #2
 800604a:	d102      	bne.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 800604c:	4bb0      	ldr	r3, [pc, #704]	; (8006310 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800604e:	613b      	str	r3, [r7, #16]
 8006050:	e00a      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 8006052:	4bad      	ldr	r3, [pc, #692]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	2203      	movs	r2, #3
 8006058:	4013      	ands	r3, r2
 800605a:	2b03      	cmp	r3, #3
 800605c:	d102      	bne.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 800605e:	4bad      	ldr	r3, [pc, #692]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8006060:	613b      	str	r3, [r7, #16]
 8006062:	e001      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 8006064:	2300      	movs	r3, #0
 8006066:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006068:	4ba7      	ldr	r3, [pc, #668]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	091b      	lsrs	r3, r3, #4
 800606e:	2207      	movs	r2, #7
 8006070:	4013      	ands	r3, r2
 8006072:	3301      	adds	r3, #1
 8006074:	0019      	movs	r1, r3
 8006076:	6938      	ldr	r0, [r7, #16]
 8006078:	f7fa f844 	bl	8000104 <__udivsi3>
 800607c:	0003      	movs	r3, r0
 800607e:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	2380      	movs	r3, #128	; 0x80
 8006084:	03db      	lsls	r3, r3, #15
 8006086:	429a      	cmp	r2, r3
 8006088:	d100      	bne.n	800608c <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 800608a:	e28e      	b.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	2380      	movs	r3, #128	; 0x80
 8006090:	03db      	lsls	r3, r3, #15
 8006092:	429a      	cmp	r2, r3
 8006094:	d900      	bls.n	8006098 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8006096:	e2b7      	b.n	8006608 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	2380      	movs	r3, #128	; 0x80
 800609c:	039b      	lsls	r3, r3, #14
 800609e:	429a      	cmp	r2, r3
 80060a0:	d100      	bne.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80060a2:	e253      	b.n	800654c <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	2380      	movs	r3, #128	; 0x80
 80060a8:	039b      	lsls	r3, r3, #14
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d900      	bls.n	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80060ae:	e2ab      	b.n	8006608 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	2380      	movs	r3, #128	; 0x80
 80060b4:	031b      	lsls	r3, r3, #12
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d100      	bne.n	80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80060ba:	e0b2      	b.n	8006222 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	2380      	movs	r3, #128	; 0x80
 80060c0:	031b      	lsls	r3, r3, #12
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d900      	bls.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 80060c6:	e29f      	b.n	8006608 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	2380      	movs	r3, #128	; 0x80
 80060cc:	01db      	lsls	r3, r3, #7
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d100      	bne.n	80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 80060d2:	e103      	b.n	80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	2380      	movs	r3, #128	; 0x80
 80060d8:	01db      	lsls	r3, r3, #7
 80060da:	429a      	cmp	r2, r3
 80060dc:	d900      	bls.n	80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80060de:	e293      	b.n	8006608 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	2380      	movs	r3, #128	; 0x80
 80060e4:	011b      	lsls	r3, r3, #4
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d100      	bne.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 80060ea:	e165      	b.n	80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	2380      	movs	r3, #128	; 0x80
 80060f0:	011b      	lsls	r3, r3, #4
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d900      	bls.n	80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 80060f6:	e287      	b.n	8006608 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	2380      	movs	r3, #128	; 0x80
 80060fc:	00db      	lsls	r3, r3, #3
 80060fe:	429a      	cmp	r2, r3
 8006100:	d100      	bne.n	8006104 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8006102:	e1e3      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	2380      	movs	r3, #128	; 0x80
 8006108:	00db      	lsls	r3, r3, #3
 800610a:	429a      	cmp	r2, r3
 800610c:	d900      	bls.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800610e:	e27b      	b.n	8006608 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	2380      	movs	r3, #128	; 0x80
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	429a      	cmp	r2, r3
 8006118:	d100      	bne.n	800611c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800611a:	e197      	b.n	800644c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	2380      	movs	r3, #128	; 0x80
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	429a      	cmp	r2, r3
 8006124:	d900      	bls.n	8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8006126:	e26f      	b.n	8006608 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2b20      	cmp	r3, #32
 800612c:	d100      	bne.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 800612e:	e118      	b.n	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2b20      	cmp	r3, #32
 8006134:	d900      	bls.n	8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
 8006136:	e267      	b.n	8006608 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2b10      	cmp	r3, #16
 800613c:	d100      	bne.n	8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 800613e:	e093      	b.n	8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2b10      	cmp	r3, #16
 8006144:	d900      	bls.n	8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8006146:	e25f      	b.n	8006608 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d003      	beq.n	8006156 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2b02      	cmp	r3, #2
 8006152:	d033      	beq.n	80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 8006154:	e258      	b.n	8006608 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006156:	4b6c      	ldr	r3, [pc, #432]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800615a:	2203      	movs	r2, #3
 800615c:	4013      	ands	r3, r2
 800615e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d104      	bne.n	8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006166:	f7ff fd5b 	bl	8005c20 <HAL_RCC_GetPCLK1Freq>
 800616a:	0003      	movs	r3, r0
 800616c:	617b      	str	r3, [r7, #20]
        break;
 800616e:	e24d      	b.n	800660c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2b01      	cmp	r3, #1
 8006174:	d104      	bne.n	8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
          frequency = HAL_RCC_GetSysClockFreq();
 8006176:	f7ff fcc7 	bl	8005b08 <HAL_RCC_GetSysClockFreq>
 800617a:	0003      	movs	r3, r0
 800617c:	617b      	str	r3, [r7, #20]
        break;
 800617e:	e245      	b.n	800660c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006180:	4b61      	ldr	r3, [pc, #388]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	2380      	movs	r3, #128	; 0x80
 8006186:	00db      	lsls	r3, r3, #3
 8006188:	401a      	ands	r2, r3
 800618a:	2380      	movs	r3, #128	; 0x80
 800618c:	00db      	lsls	r3, r3, #3
 800618e:	429a      	cmp	r2, r3
 8006190:	d105      	bne.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2b02      	cmp	r3, #2
 8006196:	d102      	bne.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
          frequency = HSI_VALUE;
 8006198:	4b5d      	ldr	r3, [pc, #372]	; (8006310 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800619a:	617b      	str	r3, [r7, #20]
        break;
 800619c:	e236      	b.n	800660c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800619e:	4b5a      	ldr	r3, [pc, #360]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80061a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061a2:	2202      	movs	r2, #2
 80061a4:	4013      	ands	r3, r2
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d000      	beq.n	80061ac <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
 80061aa:	e22f      	b.n	800660c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2b03      	cmp	r3, #3
 80061b0:	d000      	beq.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>
 80061b2:	e22b      	b.n	800660c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          frequency = LSE_VALUE;
 80061b4:	2380      	movs	r3, #128	; 0x80
 80061b6:	021b      	lsls	r3, r3, #8
 80061b8:	617b      	str	r3, [r7, #20]
        break;
 80061ba:	e227      	b.n	800660c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80061bc:	4b52      	ldr	r3, [pc, #328]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80061be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061c0:	220c      	movs	r2, #12
 80061c2:	4013      	ands	r3, r2
 80061c4:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d104      	bne.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80061cc:	f7ff fd28 	bl	8005c20 <HAL_RCC_GetPCLK1Freq>
 80061d0:	0003      	movs	r3, r0
 80061d2:	617b      	str	r3, [r7, #20]
        break;
 80061d4:	e21c      	b.n	8006610 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2b04      	cmp	r3, #4
 80061da:	d104      	bne.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          frequency = HAL_RCC_GetSysClockFreq();
 80061dc:	f7ff fc94 	bl	8005b08 <HAL_RCC_GetSysClockFreq>
 80061e0:	0003      	movs	r3, r0
 80061e2:	617b      	str	r3, [r7, #20]
        break;
 80061e4:	e214      	b.n	8006610 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80061e6:	4b48      	ldr	r3, [pc, #288]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	2380      	movs	r3, #128	; 0x80
 80061ec:	00db      	lsls	r3, r3, #3
 80061ee:	401a      	ands	r2, r3
 80061f0:	2380      	movs	r3, #128	; 0x80
 80061f2:	00db      	lsls	r3, r3, #3
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d105      	bne.n	8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2b08      	cmp	r3, #8
 80061fc:	d102      	bne.n	8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
          frequency = HSI_VALUE;
 80061fe:	4b44      	ldr	r3, [pc, #272]	; (8006310 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006200:	617b      	str	r3, [r7, #20]
        break;
 8006202:	e205      	b.n	8006610 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006204:	4b40      	ldr	r3, [pc, #256]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006208:	2202      	movs	r2, #2
 800620a:	4013      	ands	r3, r2
 800620c:	2b02      	cmp	r3, #2
 800620e:	d000      	beq.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8006210:	e1fe      	b.n	8006610 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2b0c      	cmp	r3, #12
 8006216:	d000      	beq.n	800621a <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8006218:	e1fa      	b.n	8006610 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
          frequency = LSE_VALUE;
 800621a:	2380      	movs	r3, #128	; 0x80
 800621c:	021b      	lsls	r3, r3, #8
 800621e:	617b      	str	r3, [r7, #20]
        break;
 8006220:	e1f6      	b.n	8006610 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8006222:	4b39      	ldr	r3, [pc, #228]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006226:	2240      	movs	r2, #64	; 0x40
 8006228:	4013      	ands	r3, r2
 800622a:	60fb      	str	r3, [r7, #12]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_CECCLKSOURCE_HSI_DIV488))
 800622c:	4b36      	ldr	r3, [pc, #216]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	2380      	movs	r3, #128	; 0x80
 8006232:	00db      	lsls	r3, r3, #3
 8006234:	401a      	ands	r2, r3
 8006236:	2380      	movs	r3, #128	; 0x80
 8006238:	00db      	lsls	r3, r3, #3
 800623a:	429a      	cmp	r2, r3
 800623c:	d105      	bne.n	800624a <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d102      	bne.n	800624a <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
          frequency = (HSI_VALUE / 488U);
 8006244:	4b34      	ldr	r3, [pc, #208]	; (8006318 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 8006246:	617b      	str	r3, [r7, #20]
        break;
 8006248:	e1e4      	b.n	8006614 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800624a:	4b2f      	ldr	r3, [pc, #188]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800624c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800624e:	2202      	movs	r2, #2
 8006250:	4013      	ands	r3, r2
 8006252:	2b02      	cmp	r3, #2
 8006254:	d000      	beq.n	8006258 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 8006256:	e1dd      	b.n	8006614 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2b40      	cmp	r3, #64	; 0x40
 800625c:	d000      	beq.n	8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 800625e:	e1d9      	b.n	8006614 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
          frequency = LSE_VALUE;
 8006260:	2380      	movs	r3, #128	; 0x80
 8006262:	021b      	lsls	r3, r3, #8
 8006264:	617b      	str	r3, [r7, #20]
        break;
 8006266:	e1d5      	b.n	8006614 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006268:	4b27      	ldr	r3, [pc, #156]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800626a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800626c:	23c0      	movs	r3, #192	; 0xc0
 800626e:	011b      	lsls	r3, r3, #4
 8006270:	4013      	ands	r3, r2
 8006272:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d104      	bne.n	8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800627a:	f7ff fcd1 	bl	8005c20 <HAL_RCC_GetPCLK1Freq>
 800627e:	0003      	movs	r3, r0
 8006280:	617b      	str	r3, [r7, #20]
        break;
 8006282:	e1c9      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	2380      	movs	r3, #128	; 0x80
 8006288:	00db      	lsls	r3, r3, #3
 800628a:	429a      	cmp	r2, r3
 800628c:	d104      	bne.n	8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>
          frequency = HAL_RCC_GetSysClockFreq();
 800628e:	f7ff fc3b 	bl	8005b08 <HAL_RCC_GetSysClockFreq>
 8006292:	0003      	movs	r3, r0
 8006294:	617b      	str	r3, [r7, #20]
        break;
 8006296:	e1bf      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006298:	4b1b      	ldr	r3, [pc, #108]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	2380      	movs	r3, #128	; 0x80
 800629e:	00db      	lsls	r3, r3, #3
 80062a0:	401a      	ands	r2, r3
 80062a2:	2380      	movs	r3, #128	; 0x80
 80062a4:	00db      	lsls	r3, r3, #3
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d107      	bne.n	80062ba <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	2380      	movs	r3, #128	; 0x80
 80062ae:	011b      	lsls	r3, r3, #4
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d102      	bne.n	80062ba <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
          frequency = HSI_VALUE;
 80062b4:	4b16      	ldr	r3, [pc, #88]	; (8006310 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80062b6:	617b      	str	r3, [r7, #20]
        break;
 80062b8:	e1ae      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80062ba:	4b13      	ldr	r3, [pc, #76]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80062bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062be:	2202      	movs	r2, #2
 80062c0:	4013      	ands	r3, r2
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d000      	beq.n	80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 80062c6:	e1a7      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	23c0      	movs	r3, #192	; 0xc0
 80062cc:	011b      	lsls	r3, r3, #4
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d000      	beq.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 80062d2:	e1a1      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
          frequency = LSE_VALUE;
 80062d4:	2380      	movs	r3, #128	; 0x80
 80062d6:	021b      	lsls	r3, r3, #8
 80062d8:	617b      	str	r3, [r7, #20]
        break;
 80062da:	e19d      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80062dc:	4b0a      	ldr	r3, [pc, #40]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80062de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062e0:	0f9b      	lsrs	r3, r3, #30
 80062e2:	079b      	lsls	r3, r3, #30
 80062e4:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d104      	bne.n	80062f6 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
          frequency = HAL_RCC_GetSysClockFreq();
 80062ec:	f7ff fc0c 	bl	8005b08 <HAL_RCC_GetSysClockFreq>
 80062f0:	0003      	movs	r3, r0
 80062f2:	617b      	str	r3, [r7, #20]
        break;
 80062f4:	e192      	b.n	800661c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	2380      	movs	r3, #128	; 0x80
 80062fa:	061b      	lsls	r3, r3, #24
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d10d      	bne.n	800631c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
          frequency = HSI_VALUE;
 8006300:	4b03      	ldr	r3, [pc, #12]	; (8006310 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006302:	617b      	str	r3, [r7, #20]
        break;
 8006304:	e18a      	b.n	800661c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006306:	46c0      	nop			; (mov r8, r8)
 8006308:	40021000 	.word	0x40021000
 800630c:	0003d090 	.word	0x0003d090
 8006310:	00f42400 	.word	0x00f42400
 8006314:	007a1200 	.word	0x007a1200
 8006318:	00008012 	.word	0x00008012
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	2380      	movs	r3, #128	; 0x80
 8006320:	05db      	lsls	r3, r3, #23
 8006322:	429a      	cmp	r2, r3
 8006324:	d000      	beq.n	8006328 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
 8006326:	e179      	b.n	800661c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8006328:	4bc5      	ldr	r3, [pc, #788]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800632a:	68da      	ldr	r2, [r3, #12]
 800632c:	2380      	movs	r3, #128	; 0x80
 800632e:	025b      	lsls	r3, r3, #9
 8006330:	4013      	ands	r3, r2
 8006332:	d100      	bne.n	8006336 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8006334:	e172      	b.n	800661c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006336:	4bc2      	ldr	r3, [pc, #776]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	0a1b      	lsrs	r3, r3, #8
 800633c:	227f      	movs	r2, #127	; 0x7f
 800633e:	4013      	ands	r3, r2
 8006340:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	68ba      	ldr	r2, [r7, #8]
 8006346:	435a      	muls	r2, r3
 8006348:	4bbd      	ldr	r3, [pc, #756]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	0c5b      	lsrs	r3, r3, #17
 800634e:	211f      	movs	r1, #31
 8006350:	400b      	ands	r3, r1
 8006352:	3301      	adds	r3, #1
 8006354:	0019      	movs	r1, r3
 8006356:	0010      	movs	r0, r2
 8006358:	f7f9 fed4 	bl	8000104 <__udivsi3>
 800635c:	0003      	movs	r3, r0
 800635e:	617b      	str	r3, [r7, #20]
        break;
 8006360:	e15c      	b.n	800661c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006362:	4bb7      	ldr	r3, [pc, #732]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006364:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006366:	23c0      	movs	r3, #192	; 0xc0
 8006368:	019b      	lsls	r3, r3, #6
 800636a:	4013      	ands	r3, r2
 800636c:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d104      	bne.n	800637e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006374:	f7ff fc54 	bl	8005c20 <HAL_RCC_GetPCLK1Freq>
 8006378:	0003      	movs	r3, r0
 800637a:	617b      	str	r3, [r7, #20]
        break;
 800637c:	e150      	b.n	8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	2380      	movs	r3, #128	; 0x80
 8006382:	015b      	lsls	r3, r3, #5
 8006384:	429a      	cmp	r2, r3
 8006386:	d104      	bne.n	8006392 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          frequency = HAL_RCC_GetSysClockFreq();
 8006388:	f7ff fbbe 	bl	8005b08 <HAL_RCC_GetSysClockFreq>
 800638c:	0003      	movs	r3, r0
 800638e:	617b      	str	r3, [r7, #20]
        break;
 8006390:	e146      	b.n	8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006392:	4bab      	ldr	r3, [pc, #684]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	2380      	movs	r3, #128	; 0x80
 8006398:	00db      	lsls	r3, r3, #3
 800639a:	401a      	ands	r2, r3
 800639c:	2380      	movs	r3, #128	; 0x80
 800639e:	00db      	lsls	r3, r3, #3
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d000      	beq.n	80063a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 80063a4:	e13c      	b.n	8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	2380      	movs	r3, #128	; 0x80
 80063aa:	019b      	lsls	r3, r3, #6
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d000      	beq.n	80063b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 80063b0:	e136      	b.n	8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HSI_VALUE;
 80063b2:	4ba4      	ldr	r3, [pc, #656]	; (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 80063b4:	617b      	str	r3, [r7, #20]
        break;
 80063b6:	e133      	b.n	8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 80063b8:	4ba1      	ldr	r3, [pc, #644]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80063ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063bc:	23c0      	movs	r3, #192	; 0xc0
 80063be:	021b      	lsls	r3, r3, #8
 80063c0:	4013      	ands	r3, r2
 80063c2:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	2380      	movs	r3, #128	; 0x80
 80063c8:	01db      	lsls	r3, r3, #7
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d11c      	bne.n	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 80063ce:	4b9c      	ldr	r3, [pc, #624]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80063d0:	68da      	ldr	r2, [r3, #12]
 80063d2:	2380      	movs	r3, #128	; 0x80
 80063d4:	025b      	lsls	r3, r3, #9
 80063d6:	4013      	ands	r3, r2
 80063d8:	d100      	bne.n	80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 80063da:	e123      	b.n	8006624 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80063dc:	4b98      	ldr	r3, [pc, #608]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	0a1b      	lsrs	r3, r3, #8
 80063e2:	227f      	movs	r2, #127	; 0x7f
 80063e4:	4013      	ands	r3, r2
 80063e6:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	68ba      	ldr	r2, [r7, #8]
 80063ec:	435a      	muls	r2, r3
 80063ee:	4b94      	ldr	r3, [pc, #592]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	0c5b      	lsrs	r3, r3, #17
 80063f4:	211f      	movs	r1, #31
 80063f6:	400b      	ands	r3, r1
 80063f8:	3301      	adds	r3, #1
 80063fa:	0019      	movs	r1, r3
 80063fc:	0010      	movs	r0, r2
 80063fe:	f7f9 fe81 	bl	8000104 <__udivsi3>
 8006402:	0003      	movs	r3, r0
 8006404:	617b      	str	r3, [r7, #20]
        break;
 8006406:	e10d      	b.n	8006624 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d104      	bne.n	8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
          frequency = HAL_RCC_GetSysClockFreq();
 800640e:	f7ff fb7b 	bl	8005b08 <HAL_RCC_GetSysClockFreq>
 8006412:	0003      	movs	r3, r0
 8006414:	617b      	str	r3, [r7, #20]
        break;
 8006416:	e105      	b.n	8006624 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 8006418:	4b89      	ldr	r3, [pc, #548]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	2380      	movs	r3, #128	; 0x80
 800641e:	00db      	lsls	r3, r3, #3
 8006420:	401a      	ands	r2, r3
 8006422:	2380      	movs	r3, #128	; 0x80
 8006424:	00db      	lsls	r3, r3, #3
 8006426:	429a      	cmp	r2, r3
 8006428:	d107      	bne.n	800643a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	2380      	movs	r3, #128	; 0x80
 800642e:	021b      	lsls	r3, r3, #8
 8006430:	429a      	cmp	r2, r3
 8006432:	d102      	bne.n	800643a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          frequency = HSI_VALUE;
 8006434:	4b83      	ldr	r3, [pc, #524]	; (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8006436:	617b      	str	r3, [r7, #20]
        break;
 8006438:	e0f4      	b.n	8006624 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	23c0      	movs	r3, #192	; 0xc0
 800643e:	021b      	lsls	r3, r3, #8
 8006440:	429a      	cmp	r2, r3
 8006442:	d000      	beq.n	8006446 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8006444:	e0ee      	b.n	8006624 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 8006446:	4b80      	ldr	r3, [pc, #512]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8006448:	617b      	str	r3, [r7, #20]
        break;
 800644a:	e0eb      	b.n	8006624 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800644c:	4b7c      	ldr	r3, [pc, #496]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800644e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006450:	23c0      	movs	r3, #192	; 0xc0
 8006452:	031b      	lsls	r3, r3, #12
 8006454:	4013      	ands	r3, r2
 8006456:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d104      	bne.n	8006468 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
          frequency = HAL_RCC_GetPCLK1Freq();
 800645e:	f7ff fbdf 	bl	8005c20 <HAL_RCC_GetPCLK1Freq>
 8006462:	0003      	movs	r3, r0
 8006464:	617b      	str	r3, [r7, #20]
        break;
 8006466:	e0df      	b.n	8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8006468:	4b75      	ldr	r3, [pc, #468]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800646a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800646c:	2202      	movs	r2, #2
 800646e:	4013      	ands	r3, r2
 8006470:	2b02      	cmp	r3, #2
 8006472:	d108      	bne.n	8006486 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	2380      	movs	r3, #128	; 0x80
 8006478:	02db      	lsls	r3, r3, #11
 800647a:	429a      	cmp	r2, r3
 800647c:	d103      	bne.n	8006486 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          frequency = LSI_VALUE;
 800647e:	23fa      	movs	r3, #250	; 0xfa
 8006480:	01db      	lsls	r3, r3, #7
 8006482:	617b      	str	r3, [r7, #20]
 8006484:	e021      	b.n	80064ca <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006486:	4b6e      	ldr	r3, [pc, #440]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	2380      	movs	r3, #128	; 0x80
 800648c:	00db      	lsls	r3, r3, #3
 800648e:	401a      	ands	r2, r3
 8006490:	2380      	movs	r3, #128	; 0x80
 8006492:	00db      	lsls	r3, r3, #3
 8006494:	429a      	cmp	r2, r3
 8006496:	d107      	bne.n	80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	2380      	movs	r3, #128	; 0x80
 800649c:	031b      	lsls	r3, r3, #12
 800649e:	429a      	cmp	r2, r3
 80064a0:	d102      	bne.n	80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          frequency = HSI_VALUE;
 80064a2:	4b68      	ldr	r3, [pc, #416]	; (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 80064a4:	617b      	str	r3, [r7, #20]
 80064a6:	e010      	b.n	80064ca <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80064a8:	4b65      	ldr	r3, [pc, #404]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80064aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064ac:	2202      	movs	r2, #2
 80064ae:	4013      	ands	r3, r2
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d000      	beq.n	80064b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80064b4:	e0b8      	b.n	8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	23c0      	movs	r3, #192	; 0xc0
 80064ba:	031b      	lsls	r3, r3, #12
 80064bc:	429a      	cmp	r2, r3
 80064be:	d000      	beq.n	80064c2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80064c0:	e0b2      	b.n	8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          frequency = LSE_VALUE;
 80064c2:	2380      	movs	r3, #128	; 0x80
 80064c4:	021b      	lsls	r3, r3, #8
 80064c6:	617b      	str	r3, [r7, #20]
        break;
 80064c8:	e0ae      	b.n	8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 80064ca:	e0ad      	b.n	8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80064cc:	4b5c      	ldr	r3, [pc, #368]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80064ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064d0:	23c0      	movs	r3, #192	; 0xc0
 80064d2:	039b      	lsls	r3, r3, #14
 80064d4:	4013      	ands	r3, r2
 80064d6:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d104      	bne.n	80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
          frequency = HAL_RCC_GetPCLK1Freq();
 80064de:	f7ff fb9f 	bl	8005c20 <HAL_RCC_GetPCLK1Freq>
 80064e2:	0003      	movs	r3, r0
 80064e4:	617b      	str	r3, [r7, #20]
        break;
 80064e6:	e0a1      	b.n	800662c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80064e8:	4b55      	ldr	r3, [pc, #340]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80064ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064ec:	2202      	movs	r2, #2
 80064ee:	4013      	ands	r3, r2
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d108      	bne.n	8006506 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	2380      	movs	r3, #128	; 0x80
 80064f8:	035b      	lsls	r3, r3, #13
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d103      	bne.n	8006506 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = LSI_VALUE;
 80064fe:	23fa      	movs	r3, #250	; 0xfa
 8006500:	01db      	lsls	r3, r3, #7
 8006502:	617b      	str	r3, [r7, #20]
 8006504:	e021      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8006506:	4b4e      	ldr	r3, [pc, #312]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	2380      	movs	r3, #128	; 0x80
 800650c:	00db      	lsls	r3, r3, #3
 800650e:	401a      	ands	r2, r3
 8006510:	2380      	movs	r3, #128	; 0x80
 8006512:	00db      	lsls	r3, r3, #3
 8006514:	429a      	cmp	r2, r3
 8006516:	d107      	bne.n	8006528 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	2380      	movs	r3, #128	; 0x80
 800651c:	039b      	lsls	r3, r3, #14
 800651e:	429a      	cmp	r2, r3
 8006520:	d102      	bne.n	8006528 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
          frequency = HSI_VALUE;
 8006522:	4b48      	ldr	r3, [pc, #288]	; (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8006524:	617b      	str	r3, [r7, #20]
 8006526:	e010      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8006528:	4b45      	ldr	r3, [pc, #276]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800652a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800652c:	2202      	movs	r2, #2
 800652e:	4013      	ands	r3, r2
 8006530:	2b02      	cmp	r3, #2
 8006532:	d000      	beq.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8006534:	e07a      	b.n	800662c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	23c0      	movs	r3, #192	; 0xc0
 800653a:	039b      	lsls	r3, r3, #14
 800653c:	429a      	cmp	r2, r3
 800653e:	d000      	beq.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x586>
 8006540:	e074      	b.n	800662c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          frequency = LSE_VALUE;
 8006542:	2380      	movs	r3, #128	; 0x80
 8006544:	021b      	lsls	r3, r3, #8
 8006546:	617b      	str	r3, [r7, #20]
        break;
 8006548:	e070      	b.n	800662c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 800654a:	e06f      	b.n	800662c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 800654c:	4b3c      	ldr	r3, [pc, #240]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800654e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006550:	2380      	movs	r3, #128	; 0x80
 8006552:	03db      	lsls	r3, r3, #15
 8006554:	4013      	ands	r3, r2
 8006556:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	2380      	movs	r3, #128	; 0x80
 800655c:	03db      	lsls	r3, r3, #15
 800655e:	429a      	cmp	r2, r3
 8006560:	d11b      	bne.n	800659a <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8006562:	4b37      	ldr	r3, [pc, #220]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006564:	68da      	ldr	r2, [r3, #12]
 8006566:	2380      	movs	r3, #128	; 0x80
 8006568:	045b      	lsls	r3, r3, #17
 800656a:	4013      	ands	r3, r2
 800656c:	d060      	beq.n	8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800656e:	4b34      	ldr	r3, [pc, #208]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	0a1b      	lsrs	r3, r3, #8
 8006574:	227f      	movs	r2, #127	; 0x7f
 8006576:	4013      	ands	r3, r2
 8006578:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	68ba      	ldr	r2, [r7, #8]
 800657e:	435a      	muls	r2, r3
 8006580:	4b2f      	ldr	r3, [pc, #188]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	0e5b      	lsrs	r3, r3, #25
 8006586:	2107      	movs	r1, #7
 8006588:	400b      	ands	r3, r1
 800658a:	3301      	adds	r3, #1
 800658c:	0019      	movs	r1, r3
 800658e:	0010      	movs	r0, r2
 8006590:	f7f9 fdb8 	bl	8000104 <__udivsi3>
 8006594:	0003      	movs	r3, r0
 8006596:	617b      	str	r3, [r7, #20]
        break;
 8006598:	e04a      	b.n	8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d147      	bne.n	8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          frequency = HAL_RCC_GetPCLK1Freq();
 80065a0:	f7ff fb3e 	bl	8005c20 <HAL_RCC_GetPCLK1Freq>
 80065a4:	0003      	movs	r3, r0
 80065a6:	617b      	str	r3, [r7, #20]
        break;
 80065a8:	e042      	b.n	8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM15SEL);
 80065aa:	4b25      	ldr	r3, [pc, #148]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80065ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065ae:	2380      	movs	r3, #128	; 0x80
 80065b0:	045b      	lsls	r3, r3, #17
 80065b2:	4013      	ands	r3, r2
 80065b4:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM15CLKSOURCE_PLL) /* PLL ? */
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	2380      	movs	r3, #128	; 0x80
 80065ba:	045b      	lsls	r3, r3, #17
 80065bc:	429a      	cmp	r2, r3
 80065be:	d11b      	bne.n	80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 80065c0:	4b1f      	ldr	r3, [pc, #124]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80065c2:	68da      	ldr	r2, [r3, #12]
 80065c4:	2380      	movs	r3, #128	; 0x80
 80065c6:	045b      	lsls	r3, r3, #17
 80065c8:	4013      	ands	r3, r2
 80065ca:	d033      	beq.n	8006634 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80065cc:	4b1c      	ldr	r3, [pc, #112]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	0a1b      	lsrs	r3, r3, #8
 80065d2:	227f      	movs	r2, #127	; 0x7f
 80065d4:	4013      	ands	r3, r2
 80065d6:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	68ba      	ldr	r2, [r7, #8]
 80065dc:	435a      	muls	r2, r3
 80065de:	4b18      	ldr	r3, [pc, #96]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	0e5b      	lsrs	r3, r3, #25
 80065e4:	2107      	movs	r1, #7
 80065e6:	400b      	ands	r3, r1
 80065e8:	3301      	adds	r3, #1
 80065ea:	0019      	movs	r1, r3
 80065ec:	0010      	movs	r0, r2
 80065ee:	f7f9 fd89 	bl	8000104 <__udivsi3>
 80065f2:	0003      	movs	r3, r0
 80065f4:	617b      	str	r3, [r7, #20]
        break;
 80065f6:	e01d      	b.n	8006634 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        else if (srcclk == RCC_TIM15CLKSOURCE_PCLK1) /* PCLK1 ? */
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d11a      	bne.n	8006634 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
          frequency = HAL_RCC_GetPCLK1Freq();
 80065fe:	f7ff fb0f 	bl	8005c20 <HAL_RCC_GetPCLK1Freq>
 8006602:	0003      	movs	r3, r0
 8006604:	617b      	str	r3, [r7, #20]
        break;
 8006606:	e015      	b.n	8006634 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        break;
 8006608:	46c0      	nop			; (mov r8, r8)
 800660a:	e014      	b.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800660c:	46c0      	nop			; (mov r8, r8)
 800660e:	e012      	b.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006610:	46c0      	nop			; (mov r8, r8)
 8006612:	e010      	b.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006614:	46c0      	nop			; (mov r8, r8)
 8006616:	e00e      	b.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006618:	46c0      	nop			; (mov r8, r8)
 800661a:	e00c      	b.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800661c:	46c0      	nop			; (mov r8, r8)
 800661e:	e00a      	b.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006620:	46c0      	nop			; (mov r8, r8)
 8006622:	e008      	b.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006624:	46c0      	nop			; (mov r8, r8)
 8006626:	e006      	b.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006628:	46c0      	nop			; (mov r8, r8)
 800662a:	e004      	b.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800662c:	46c0      	nop			; (mov r8, r8)
 800662e:	e002      	b.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006630:	46c0      	nop			; (mov r8, r8)
 8006632:	e000      	b.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006634:	46c0      	nop			; (mov r8, r8)
    }
  }

  return (frequency);
 8006636:	697b      	ldr	r3, [r7, #20]
}
 8006638:	0018      	movs	r0, r3
 800663a:	46bd      	mov	sp, r7
 800663c:	b006      	add	sp, #24
 800663e:	bd80      	pop	{r7, pc}
 8006640:	40021000 	.word	0x40021000
 8006644:	00f42400 	.word	0x00f42400
 8006648:	0000bb80 	.word	0x0000bb80

0800664c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d101      	bne.n	800665e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e0a8      	b.n	80067b0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006662:	2b00      	cmp	r3, #0
 8006664:	d109      	bne.n	800667a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	685a      	ldr	r2, [r3, #4]
 800666a:	2382      	movs	r3, #130	; 0x82
 800666c:	005b      	lsls	r3, r3, #1
 800666e:	429a      	cmp	r2, r3
 8006670:	d009      	beq.n	8006686 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	61da      	str	r2, [r3, #28]
 8006678:	e005      	b.n	8006686 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	225d      	movs	r2, #93	; 0x5d
 8006690:	5c9b      	ldrb	r3, [r3, r2]
 8006692:	b2db      	uxtb	r3, r3
 8006694:	2b00      	cmp	r3, #0
 8006696:	d107      	bne.n	80066a8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	225c      	movs	r2, #92	; 0x5c
 800669c:	2100      	movs	r1, #0
 800669e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	0018      	movs	r0, r3
 80066a4:	f7fc f96a 	bl	800297c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	225d      	movs	r2, #93	; 0x5d
 80066ac:	2102      	movs	r1, #2
 80066ae:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2140      	movs	r1, #64	; 0x40
 80066bc:	438a      	bics	r2, r1
 80066be:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	68da      	ldr	r2, [r3, #12]
 80066c4:	23e0      	movs	r3, #224	; 0xe0
 80066c6:	00db      	lsls	r3, r3, #3
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d902      	bls.n	80066d2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80066cc:	2300      	movs	r3, #0
 80066ce:	60fb      	str	r3, [r7, #12]
 80066d0:	e002      	b.n	80066d8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80066d2:	2380      	movs	r3, #128	; 0x80
 80066d4:	015b      	lsls	r3, r3, #5
 80066d6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	68da      	ldr	r2, [r3, #12]
 80066dc:	23f0      	movs	r3, #240	; 0xf0
 80066de:	011b      	lsls	r3, r3, #4
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d008      	beq.n	80066f6 <HAL_SPI_Init+0xaa>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	68da      	ldr	r2, [r3, #12]
 80066e8:	23e0      	movs	r3, #224	; 0xe0
 80066ea:	00db      	lsls	r3, r3, #3
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d002      	beq.n	80066f6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	685a      	ldr	r2, [r3, #4]
 80066fa:	2382      	movs	r3, #130	; 0x82
 80066fc:	005b      	lsls	r3, r3, #1
 80066fe:	401a      	ands	r2, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6899      	ldr	r1, [r3, #8]
 8006704:	2384      	movs	r3, #132	; 0x84
 8006706:	021b      	lsls	r3, r3, #8
 8006708:	400b      	ands	r3, r1
 800670a:	431a      	orrs	r2, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	2102      	movs	r1, #2
 8006712:	400b      	ands	r3, r1
 8006714:	431a      	orrs	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	695b      	ldr	r3, [r3, #20]
 800671a:	2101      	movs	r1, #1
 800671c:	400b      	ands	r3, r1
 800671e:	431a      	orrs	r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6999      	ldr	r1, [r3, #24]
 8006724:	2380      	movs	r3, #128	; 0x80
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	400b      	ands	r3, r1
 800672a:	431a      	orrs	r2, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	69db      	ldr	r3, [r3, #28]
 8006730:	2138      	movs	r1, #56	; 0x38
 8006732:	400b      	ands	r3, r1
 8006734:	431a      	orrs	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a1b      	ldr	r3, [r3, #32]
 800673a:	2180      	movs	r1, #128	; 0x80
 800673c:	400b      	ands	r3, r1
 800673e:	431a      	orrs	r2, r3
 8006740:	0011      	movs	r1, r2
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006746:	2380      	movs	r3, #128	; 0x80
 8006748:	019b      	lsls	r3, r3, #6
 800674a:	401a      	ands	r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	430a      	orrs	r2, r1
 8006752:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	699b      	ldr	r3, [r3, #24]
 8006758:	0c1b      	lsrs	r3, r3, #16
 800675a:	2204      	movs	r2, #4
 800675c:	401a      	ands	r2, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006762:	2110      	movs	r1, #16
 8006764:	400b      	ands	r3, r1
 8006766:	431a      	orrs	r2, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800676c:	2108      	movs	r1, #8
 800676e:	400b      	ands	r3, r1
 8006770:	431a      	orrs	r2, r3
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	68d9      	ldr	r1, [r3, #12]
 8006776:	23f0      	movs	r3, #240	; 0xf0
 8006778:	011b      	lsls	r3, r3, #4
 800677a:	400b      	ands	r3, r1
 800677c:	431a      	orrs	r2, r3
 800677e:	0011      	movs	r1, r2
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	2380      	movs	r3, #128	; 0x80
 8006784:	015b      	lsls	r3, r3, #5
 8006786:	401a      	ands	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	430a      	orrs	r2, r1
 800678e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	69da      	ldr	r2, [r3, #28]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4907      	ldr	r1, [pc, #28]	; (80067b8 <HAL_SPI_Init+0x16c>)
 800679c:	400a      	ands	r2, r1
 800679e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	225d      	movs	r2, #93	; 0x5d
 80067aa:	2101      	movs	r1, #1
 80067ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	0018      	movs	r0, r3
 80067b2:	46bd      	mov	sp, r7
 80067b4:	b004      	add	sp, #16
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	fffff7ff 	.word	0xfffff7ff

080067bc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b088      	sub	sp, #32
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	60b9      	str	r1, [r7, #8]
 80067c6:	603b      	str	r3, [r7, #0]
 80067c8:	1dbb      	adds	r3, r7, #6
 80067ca:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80067cc:	231f      	movs	r3, #31
 80067ce:	18fb      	adds	r3, r7, r3
 80067d0:	2200      	movs	r2, #0
 80067d2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	225c      	movs	r2, #92	; 0x5c
 80067d8:	5c9b      	ldrb	r3, [r3, r2]
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d101      	bne.n	80067e2 <HAL_SPI_Transmit+0x26>
 80067de:	2302      	movs	r3, #2
 80067e0:	e140      	b.n	8006a64 <HAL_SPI_Transmit+0x2a8>
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	225c      	movs	r2, #92	; 0x5c
 80067e6:	2101      	movs	r1, #1
 80067e8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067ea:	f7fc fc65 	bl	80030b8 <HAL_GetTick>
 80067ee:	0003      	movs	r3, r0
 80067f0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80067f2:	2316      	movs	r3, #22
 80067f4:	18fb      	adds	r3, r7, r3
 80067f6:	1dba      	adds	r2, r7, #6
 80067f8:	8812      	ldrh	r2, [r2, #0]
 80067fa:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	225d      	movs	r2, #93	; 0x5d
 8006800:	5c9b      	ldrb	r3, [r3, r2]
 8006802:	b2db      	uxtb	r3, r3
 8006804:	2b01      	cmp	r3, #1
 8006806:	d004      	beq.n	8006812 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006808:	231f      	movs	r3, #31
 800680a:	18fb      	adds	r3, r7, r3
 800680c:	2202      	movs	r2, #2
 800680e:	701a      	strb	r2, [r3, #0]
    goto error;
 8006810:	e11d      	b.n	8006a4e <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d003      	beq.n	8006820 <HAL_SPI_Transmit+0x64>
 8006818:	1dbb      	adds	r3, r7, #6
 800681a:	881b      	ldrh	r3, [r3, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d104      	bne.n	800682a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006820:	231f      	movs	r3, #31
 8006822:	18fb      	adds	r3, r7, r3
 8006824:	2201      	movs	r2, #1
 8006826:	701a      	strb	r2, [r3, #0]
    goto error;
 8006828:	e111      	b.n	8006a4e <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	225d      	movs	r2, #93	; 0x5d
 800682e:	2103      	movs	r1, #3
 8006830:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	1dba      	adds	r2, r7, #6
 8006842:	8812      	ldrh	r2, [r2, #0]
 8006844:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	1dba      	adds	r2, r7, #6
 800684a:	8812      	ldrh	r2, [r2, #0]
 800684c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2244      	movs	r2, #68	; 0x44
 8006858:	2100      	movs	r1, #0
 800685a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2246      	movs	r2, #70	; 0x46
 8006860:	2100      	movs	r1, #0
 8006862:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2200      	movs	r2, #0
 800686e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	689a      	ldr	r2, [r3, #8]
 8006874:	2380      	movs	r3, #128	; 0x80
 8006876:	021b      	lsls	r3, r3, #8
 8006878:	429a      	cmp	r2, r3
 800687a:	d110      	bne.n	800689e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2140      	movs	r1, #64	; 0x40
 8006888:	438a      	bics	r2, r1
 800688a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2180      	movs	r1, #128	; 0x80
 8006898:	01c9      	lsls	r1, r1, #7
 800689a:	430a      	orrs	r2, r1
 800689c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2240      	movs	r2, #64	; 0x40
 80068a6:	4013      	ands	r3, r2
 80068a8:	2b40      	cmp	r3, #64	; 0x40
 80068aa:	d007      	beq.n	80068bc <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2140      	movs	r1, #64	; 0x40
 80068b8:	430a      	orrs	r2, r1
 80068ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	68da      	ldr	r2, [r3, #12]
 80068c0:	23e0      	movs	r3, #224	; 0xe0
 80068c2:	00db      	lsls	r3, r3, #3
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d94e      	bls.n	8006966 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d004      	beq.n	80068da <HAL_SPI_Transmit+0x11e>
 80068d0:	2316      	movs	r3, #22
 80068d2:	18fb      	adds	r3, r7, r3
 80068d4:	881b      	ldrh	r3, [r3, #0]
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d13f      	bne.n	800695a <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068de:	881a      	ldrh	r2, [r3, #0]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ea:	1c9a      	adds	r2, r3, #2
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	3b01      	subs	r3, #1
 80068f8:	b29a      	uxth	r2, r3
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80068fe:	e02c      	b.n	800695a <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	2202      	movs	r2, #2
 8006908:	4013      	ands	r3, r2
 800690a:	2b02      	cmp	r3, #2
 800690c:	d112      	bne.n	8006934 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006912:	881a      	ldrh	r2, [r3, #0]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691e:	1c9a      	adds	r2, r3, #2
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006928:	b29b      	uxth	r3, r3
 800692a:	3b01      	subs	r3, #1
 800692c:	b29a      	uxth	r2, r3
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006932:	e012      	b.n	800695a <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006934:	f7fc fbc0 	bl	80030b8 <HAL_GetTick>
 8006938:	0002      	movs	r2, r0
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	683a      	ldr	r2, [r7, #0]
 8006940:	429a      	cmp	r2, r3
 8006942:	d802      	bhi.n	800694a <HAL_SPI_Transmit+0x18e>
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	3301      	adds	r3, #1
 8006948:	d102      	bne.n	8006950 <HAL_SPI_Transmit+0x194>
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d104      	bne.n	800695a <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8006950:	231f      	movs	r3, #31
 8006952:	18fb      	adds	r3, r7, r3
 8006954:	2203      	movs	r2, #3
 8006956:	701a      	strb	r2, [r3, #0]
          goto error;
 8006958:	e079      	b.n	8006a4e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800695e:	b29b      	uxth	r3, r3
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1cd      	bne.n	8006900 <HAL_SPI_Transmit+0x144>
 8006964:	e04f      	b.n	8006a06 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d004      	beq.n	8006978 <HAL_SPI_Transmit+0x1bc>
 800696e:	2316      	movs	r3, #22
 8006970:	18fb      	adds	r3, r7, r3
 8006972:	881b      	ldrh	r3, [r3, #0]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d141      	bne.n	80069fc <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	330c      	adds	r3, #12
 8006982:	7812      	ldrb	r2, [r2, #0]
 8006984:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698a:	1c5a      	adds	r2, r3, #1
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006994:	b29b      	uxth	r3, r3
 8006996:	3b01      	subs	r3, #1
 8006998:	b29a      	uxth	r2, r3
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800699e:	e02d      	b.n	80069fc <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	2202      	movs	r2, #2
 80069a8:	4013      	ands	r3, r2
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d113      	bne.n	80069d6 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	330c      	adds	r3, #12
 80069b8:	7812      	ldrb	r2, [r2, #0]
 80069ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c0:	1c5a      	adds	r2, r3, #1
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	3b01      	subs	r3, #1
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80069d4:	e012      	b.n	80069fc <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069d6:	f7fc fb6f 	bl	80030b8 <HAL_GetTick>
 80069da:	0002      	movs	r2, r0
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	1ad3      	subs	r3, r2, r3
 80069e0:	683a      	ldr	r2, [r7, #0]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d802      	bhi.n	80069ec <HAL_SPI_Transmit+0x230>
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	3301      	adds	r3, #1
 80069ea:	d102      	bne.n	80069f2 <HAL_SPI_Transmit+0x236>
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d104      	bne.n	80069fc <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80069f2:	231f      	movs	r3, #31
 80069f4:	18fb      	adds	r3, r7, r3
 80069f6:	2203      	movs	r2, #3
 80069f8:	701a      	strb	r2, [r3, #0]
          goto error;
 80069fa:	e028      	b.n	8006a4e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1cc      	bne.n	80069a0 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a06:	69ba      	ldr	r2, [r7, #24]
 8006a08:	6839      	ldr	r1, [r7, #0]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	0018      	movs	r0, r3
 8006a0e:	f001 f9cb 	bl	8007da8 <SPI_EndRxTxTransaction>
 8006a12:	1e03      	subs	r3, r0, #0
 8006a14:	d002      	beq.n	8006a1c <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2220      	movs	r2, #32
 8006a1a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d10a      	bne.n	8006a3a <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a24:	2300      	movs	r3, #0
 8006a26:	613b      	str	r3, [r7, #16]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	613b      	str	r3, [r7, #16]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	613b      	str	r3, [r7, #16]
 8006a38:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d004      	beq.n	8006a4c <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8006a42:	231f      	movs	r3, #31
 8006a44:	18fb      	adds	r3, r7, r3
 8006a46:	2201      	movs	r2, #1
 8006a48:	701a      	strb	r2, [r3, #0]
 8006a4a:	e000      	b.n	8006a4e <HAL_SPI_Transmit+0x292>
  }

error:
 8006a4c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	225d      	movs	r2, #93	; 0x5d
 8006a52:	2101      	movs	r1, #1
 8006a54:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	225c      	movs	r2, #92	; 0x5c
 8006a5a:	2100      	movs	r1, #0
 8006a5c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006a5e:	231f      	movs	r3, #31
 8006a60:	18fb      	adds	r3, r7, r3
 8006a62:	781b      	ldrb	r3, [r3, #0]
}
 8006a64:	0018      	movs	r0, r3
 8006a66:	46bd      	mov	sp, r7
 8006a68:	b008      	add	sp, #32
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a6c:	b590      	push	{r4, r7, lr}
 8006a6e:	b089      	sub	sp, #36	; 0x24
 8006a70:	af02      	add	r7, sp, #8
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	603b      	str	r3, [r7, #0]
 8006a78:	1dbb      	adds	r3, r7, #6
 8006a7a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006a7c:	2317      	movs	r3, #23
 8006a7e:	18fb      	adds	r3, r7, r3
 8006a80:	2200      	movs	r2, #0
 8006a82:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	685a      	ldr	r2, [r3, #4]
 8006a88:	2382      	movs	r3, #130	; 0x82
 8006a8a:	005b      	lsls	r3, r3, #1
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d113      	bne.n	8006ab8 <HAL_SPI_Receive+0x4c>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d10f      	bne.n	8006ab8 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	225d      	movs	r2, #93	; 0x5d
 8006a9c:	2104      	movs	r1, #4
 8006a9e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006aa0:	1dbb      	adds	r3, r7, #6
 8006aa2:	881c      	ldrh	r4, [r3, #0]
 8006aa4:	68ba      	ldr	r2, [r7, #8]
 8006aa6:	68b9      	ldr	r1, [r7, #8]
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	0023      	movs	r3, r4
 8006ab0:	f000 f928 	bl	8006d04 <HAL_SPI_TransmitReceive>
 8006ab4:	0003      	movs	r3, r0
 8006ab6:	e11c      	b.n	8006cf2 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	225c      	movs	r2, #92	; 0x5c
 8006abc:	5c9b      	ldrb	r3, [r3, r2]
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d101      	bne.n	8006ac6 <HAL_SPI_Receive+0x5a>
 8006ac2:	2302      	movs	r3, #2
 8006ac4:	e115      	b.n	8006cf2 <HAL_SPI_Receive+0x286>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	225c      	movs	r2, #92	; 0x5c
 8006aca:	2101      	movs	r1, #1
 8006acc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ace:	f7fc faf3 	bl	80030b8 <HAL_GetTick>
 8006ad2:	0003      	movs	r3, r0
 8006ad4:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	225d      	movs	r2, #93	; 0x5d
 8006ada:	5c9b      	ldrb	r3, [r3, r2]
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d004      	beq.n	8006aec <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8006ae2:	2317      	movs	r3, #23
 8006ae4:	18fb      	adds	r3, r7, r3
 8006ae6:	2202      	movs	r2, #2
 8006ae8:	701a      	strb	r2, [r3, #0]
    goto error;
 8006aea:	e0f7      	b.n	8006cdc <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d003      	beq.n	8006afa <HAL_SPI_Receive+0x8e>
 8006af2:	1dbb      	adds	r3, r7, #6
 8006af4:	881b      	ldrh	r3, [r3, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d104      	bne.n	8006b04 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8006afa:	2317      	movs	r3, #23
 8006afc:	18fb      	adds	r3, r7, r3
 8006afe:	2201      	movs	r2, #1
 8006b00:	701a      	strb	r2, [r3, #0]
    goto error;
 8006b02:	e0eb      	b.n	8006cdc <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	225d      	movs	r2, #93	; 0x5d
 8006b08:	2104      	movs	r1, #4
 8006b0a:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	68ba      	ldr	r2, [r7, #8]
 8006b16:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	1dba      	adds	r2, r7, #6
 8006b1c:	2144      	movs	r1, #68	; 0x44
 8006b1e:	8812      	ldrh	r2, [r2, #0]
 8006b20:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	1dba      	adds	r2, r7, #6
 8006b26:	2146      	movs	r1, #70	; 0x46
 8006b28:	8812      	ldrh	r2, [r2, #0]
 8006b2a:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2200      	movs	r2, #0
 8006b36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2200      	movs	r2, #0
 8006b48:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	68da      	ldr	r2, [r3, #12]
 8006b4e:	23e0      	movs	r3, #224	; 0xe0
 8006b50:	00db      	lsls	r3, r3, #3
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d908      	bls.n	8006b68 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	685a      	ldr	r2, [r3, #4]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4966      	ldr	r1, [pc, #408]	; (8006cfc <HAL_SPI_Receive+0x290>)
 8006b62:	400a      	ands	r2, r1
 8006b64:	605a      	str	r2, [r3, #4]
 8006b66:	e008      	b.n	8006b7a <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	685a      	ldr	r2, [r3, #4]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2180      	movs	r1, #128	; 0x80
 8006b74:	0149      	lsls	r1, r1, #5
 8006b76:	430a      	orrs	r2, r1
 8006b78:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	689a      	ldr	r2, [r3, #8]
 8006b7e:	2380      	movs	r3, #128	; 0x80
 8006b80:	021b      	lsls	r3, r3, #8
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d10f      	bne.n	8006ba6 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2140      	movs	r1, #64	; 0x40
 8006b92:	438a      	bics	r2, r1
 8006b94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4957      	ldr	r1, [pc, #348]	; (8006d00 <HAL_SPI_Receive+0x294>)
 8006ba2:	400a      	ands	r2, r1
 8006ba4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2240      	movs	r2, #64	; 0x40
 8006bae:	4013      	ands	r3, r2
 8006bb0:	2b40      	cmp	r3, #64	; 0x40
 8006bb2:	d007      	beq.n	8006bc4 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2140      	movs	r1, #64	; 0x40
 8006bc0:	430a      	orrs	r2, r1
 8006bc2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	68da      	ldr	r2, [r3, #12]
 8006bc8:	23e0      	movs	r3, #224	; 0xe0
 8006bca:	00db      	lsls	r3, r3, #3
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d900      	bls.n	8006bd2 <HAL_SPI_Receive+0x166>
 8006bd0:	e069      	b.n	8006ca6 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006bd2:	e031      	b.n	8006c38 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	4013      	ands	r3, r2
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d117      	bne.n	8006c12 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	330c      	adds	r3, #12
 8006be8:	001a      	movs	r2, r3
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bee:	7812      	ldrb	r2, [r2, #0]
 8006bf0:	b2d2      	uxtb	r2, r2
 8006bf2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf8:	1c5a      	adds	r2, r3, #1
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2246      	movs	r2, #70	; 0x46
 8006c02:	5a9b      	ldrh	r3, [r3, r2]
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	3b01      	subs	r3, #1
 8006c08:	b299      	uxth	r1, r3
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2246      	movs	r2, #70	; 0x46
 8006c0e:	5299      	strh	r1, [r3, r2]
 8006c10:	e012      	b.n	8006c38 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c12:	f7fc fa51 	bl	80030b8 <HAL_GetTick>
 8006c16:	0002      	movs	r2, r0
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	1ad3      	subs	r3, r2, r3
 8006c1c:	683a      	ldr	r2, [r7, #0]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d802      	bhi.n	8006c28 <HAL_SPI_Receive+0x1bc>
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	3301      	adds	r3, #1
 8006c26:	d102      	bne.n	8006c2e <HAL_SPI_Receive+0x1c2>
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d104      	bne.n	8006c38 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8006c2e:	2317      	movs	r3, #23
 8006c30:	18fb      	adds	r3, r7, r3
 8006c32:	2203      	movs	r2, #3
 8006c34:	701a      	strb	r2, [r3, #0]
          goto error;
 8006c36:	e051      	b.n	8006cdc <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2246      	movs	r2, #70	; 0x46
 8006c3c:	5a9b      	ldrh	r3, [r3, r2]
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d1c7      	bne.n	8006bd4 <HAL_SPI_Receive+0x168>
 8006c44:	e035      	b.n	8006cb2 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	4013      	ands	r3, r2
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d115      	bne.n	8006c80 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	68da      	ldr	r2, [r3, #12]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5e:	b292      	uxth	r2, r2
 8006c60:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c66:	1c9a      	adds	r2, r3, #2
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2246      	movs	r2, #70	; 0x46
 8006c70:	5a9b      	ldrh	r3, [r3, r2]
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	3b01      	subs	r3, #1
 8006c76:	b299      	uxth	r1, r3
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2246      	movs	r2, #70	; 0x46
 8006c7c:	5299      	strh	r1, [r3, r2]
 8006c7e:	e012      	b.n	8006ca6 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c80:	f7fc fa1a 	bl	80030b8 <HAL_GetTick>
 8006c84:	0002      	movs	r2, r0
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	683a      	ldr	r2, [r7, #0]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d802      	bhi.n	8006c96 <HAL_SPI_Receive+0x22a>
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	3301      	adds	r3, #1
 8006c94:	d102      	bne.n	8006c9c <HAL_SPI_Receive+0x230>
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d104      	bne.n	8006ca6 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8006c9c:	2317      	movs	r3, #23
 8006c9e:	18fb      	adds	r3, r7, r3
 8006ca0:	2203      	movs	r2, #3
 8006ca2:	701a      	strb	r2, [r3, #0]
          goto error;
 8006ca4:	e01a      	b.n	8006cdc <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2246      	movs	r2, #70	; 0x46
 8006caa:	5a9b      	ldrh	r3, [r3, r2]
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1c9      	bne.n	8006c46 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006cb2:	693a      	ldr	r2, [r7, #16]
 8006cb4:	6839      	ldr	r1, [r7, #0]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	0018      	movs	r0, r3
 8006cba:	f001 f817 	bl	8007cec <SPI_EndRxTransaction>
 8006cbe:	1e03      	subs	r3, r0, #0
 8006cc0:	d002      	beq.n	8006cc8 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2220      	movs	r2, #32
 8006cc6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d004      	beq.n	8006cda <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8006cd0:	2317      	movs	r3, #23
 8006cd2:	18fb      	adds	r3, r7, r3
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	701a      	strb	r2, [r3, #0]
 8006cd8:	e000      	b.n	8006cdc <HAL_SPI_Receive+0x270>
  }

error :
 8006cda:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	225d      	movs	r2, #93	; 0x5d
 8006ce0:	2101      	movs	r1, #1
 8006ce2:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	225c      	movs	r2, #92	; 0x5c
 8006ce8:	2100      	movs	r1, #0
 8006cea:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006cec:	2317      	movs	r3, #23
 8006cee:	18fb      	adds	r3, r7, r3
 8006cf0:	781b      	ldrb	r3, [r3, #0]
}
 8006cf2:	0018      	movs	r0, r3
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	b007      	add	sp, #28
 8006cf8:	bd90      	pop	{r4, r7, pc}
 8006cfa:	46c0      	nop			; (mov r8, r8)
 8006cfc:	ffffefff 	.word	0xffffefff
 8006d00:	ffffbfff 	.word	0xffffbfff

08006d04 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b08a      	sub	sp, #40	; 0x28
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	607a      	str	r2, [r7, #4]
 8006d10:	001a      	movs	r2, r3
 8006d12:	1cbb      	adds	r3, r7, #2
 8006d14:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006d16:	2301      	movs	r3, #1
 8006d18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006d1a:	2323      	movs	r3, #35	; 0x23
 8006d1c:	18fb      	adds	r3, r7, r3
 8006d1e:	2200      	movs	r2, #0
 8006d20:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	225c      	movs	r2, #92	; 0x5c
 8006d26:	5c9b      	ldrb	r3, [r3, r2]
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d101      	bne.n	8006d30 <HAL_SPI_TransmitReceive+0x2c>
 8006d2c:	2302      	movs	r3, #2
 8006d2e:	e1b5      	b.n	800709c <HAL_SPI_TransmitReceive+0x398>
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	225c      	movs	r2, #92	; 0x5c
 8006d34:	2101      	movs	r1, #1
 8006d36:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d38:	f7fc f9be 	bl	80030b8 <HAL_GetTick>
 8006d3c:	0003      	movs	r3, r0
 8006d3e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006d40:	201b      	movs	r0, #27
 8006d42:	183b      	adds	r3, r7, r0
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	215d      	movs	r1, #93	; 0x5d
 8006d48:	5c52      	ldrb	r2, [r2, r1]
 8006d4a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006d52:	2312      	movs	r3, #18
 8006d54:	18fb      	adds	r3, r7, r3
 8006d56:	1cba      	adds	r2, r7, #2
 8006d58:	8812      	ldrh	r2, [r2, #0]
 8006d5a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006d5c:	183b      	adds	r3, r7, r0
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d011      	beq.n	8006d88 <HAL_SPI_TransmitReceive+0x84>
 8006d64:	697a      	ldr	r2, [r7, #20]
 8006d66:	2382      	movs	r3, #130	; 0x82
 8006d68:	005b      	lsls	r3, r3, #1
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d107      	bne.n	8006d7e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d103      	bne.n	8006d7e <HAL_SPI_TransmitReceive+0x7a>
 8006d76:	183b      	adds	r3, r7, r0
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	2b04      	cmp	r3, #4
 8006d7c:	d004      	beq.n	8006d88 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8006d7e:	2323      	movs	r3, #35	; 0x23
 8006d80:	18fb      	adds	r3, r7, r3
 8006d82:	2202      	movs	r2, #2
 8006d84:	701a      	strb	r2, [r3, #0]
    goto error;
 8006d86:	e17e      	b.n	8007086 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d006      	beq.n	8006d9c <HAL_SPI_TransmitReceive+0x98>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d003      	beq.n	8006d9c <HAL_SPI_TransmitReceive+0x98>
 8006d94:	1cbb      	adds	r3, r7, #2
 8006d96:	881b      	ldrh	r3, [r3, #0]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d104      	bne.n	8006da6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8006d9c:	2323      	movs	r3, #35	; 0x23
 8006d9e:	18fb      	adds	r3, r7, r3
 8006da0:	2201      	movs	r2, #1
 8006da2:	701a      	strb	r2, [r3, #0]
    goto error;
 8006da4:	e16f      	b.n	8007086 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	225d      	movs	r2, #93	; 0x5d
 8006daa:	5c9b      	ldrb	r3, [r3, r2]
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	2b04      	cmp	r3, #4
 8006db0:	d003      	beq.n	8006dba <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	225d      	movs	r2, #93	; 0x5d
 8006db6:	2105      	movs	r1, #5
 8006db8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	1cba      	adds	r2, r7, #2
 8006dca:	2146      	movs	r1, #70	; 0x46
 8006dcc:	8812      	ldrh	r2, [r2, #0]
 8006dce:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	1cba      	adds	r2, r7, #2
 8006dd4:	2144      	movs	r1, #68	; 0x44
 8006dd6:	8812      	ldrh	r2, [r2, #0]
 8006dd8:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	68ba      	ldr	r2, [r7, #8]
 8006dde:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	1cba      	adds	r2, r7, #2
 8006de4:	8812      	ldrh	r2, [r2, #0]
 8006de6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	1cba      	adds	r2, r7, #2
 8006dec:	8812      	ldrh	r2, [r2, #0]
 8006dee:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2200      	movs	r2, #0
 8006df4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	68da      	ldr	r2, [r3, #12]
 8006e00:	23e0      	movs	r3, #224	; 0xe0
 8006e02:	00db      	lsls	r3, r3, #3
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d908      	bls.n	8006e1a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	685a      	ldr	r2, [r3, #4]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	49a4      	ldr	r1, [pc, #656]	; (80070a4 <HAL_SPI_TransmitReceive+0x3a0>)
 8006e14:	400a      	ands	r2, r1
 8006e16:	605a      	str	r2, [r3, #4]
 8006e18:	e008      	b.n	8006e2c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	685a      	ldr	r2, [r3, #4]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2180      	movs	r1, #128	; 0x80
 8006e26:	0149      	lsls	r1, r1, #5
 8006e28:	430a      	orrs	r2, r1
 8006e2a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2240      	movs	r2, #64	; 0x40
 8006e34:	4013      	ands	r3, r2
 8006e36:	2b40      	cmp	r3, #64	; 0x40
 8006e38:	d007      	beq.n	8006e4a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2140      	movs	r1, #64	; 0x40
 8006e46:	430a      	orrs	r2, r1
 8006e48:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	68da      	ldr	r2, [r3, #12]
 8006e4e:	23e0      	movs	r3, #224	; 0xe0
 8006e50:	00db      	lsls	r3, r3, #3
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d800      	bhi.n	8006e58 <HAL_SPI_TransmitReceive+0x154>
 8006e56:	e07f      	b.n	8006f58 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d005      	beq.n	8006e6c <HAL_SPI_TransmitReceive+0x168>
 8006e60:	2312      	movs	r3, #18
 8006e62:	18fb      	adds	r3, r7, r3
 8006e64:	881b      	ldrh	r3, [r3, #0]
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d000      	beq.n	8006e6c <HAL_SPI_TransmitReceive+0x168>
 8006e6a:	e069      	b.n	8006f40 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e70:	881a      	ldrh	r2, [r3, #0]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e7c:	1c9a      	adds	r2, r3, #2
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	3b01      	subs	r3, #1
 8006e8a:	b29a      	uxth	r2, r3
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e90:	e056      	b.n	8006f40 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	2202      	movs	r2, #2
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	d11b      	bne.n	8006ed8 <HAL_SPI_TransmitReceive+0x1d4>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d016      	beq.n	8006ed8 <HAL_SPI_TransmitReceive+0x1d4>
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d113      	bne.n	8006ed8 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb4:	881a      	ldrh	r2, [r3, #0]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec0:	1c9a      	adds	r2, r3, #2
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	4013      	ands	r3, r2
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d11c      	bne.n	8006f20 <HAL_SPI_TransmitReceive+0x21c>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2246      	movs	r2, #70	; 0x46
 8006eea:	5a9b      	ldrh	r3, [r3, r2]
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d016      	beq.n	8006f20 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	68da      	ldr	r2, [r3, #12]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efc:	b292      	uxth	r2, r2
 8006efe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f04:	1c9a      	adds	r2, r3, #2
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2246      	movs	r2, #70	; 0x46
 8006f0e:	5a9b      	ldrh	r3, [r3, r2]
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	3b01      	subs	r3, #1
 8006f14:	b299      	uxth	r1, r3
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2246      	movs	r2, #70	; 0x46
 8006f1a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006f20:	f7fc f8ca 	bl	80030b8 <HAL_GetTick>
 8006f24:	0002      	movs	r2, r0
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d807      	bhi.n	8006f40 <HAL_SPI_TransmitReceive+0x23c>
 8006f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f32:	3301      	adds	r3, #1
 8006f34:	d004      	beq.n	8006f40 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8006f36:	2323      	movs	r3, #35	; 0x23
 8006f38:	18fb      	adds	r3, r7, r3
 8006f3a:	2203      	movs	r2, #3
 8006f3c:	701a      	strb	r2, [r3, #0]
        goto error;
 8006f3e:	e0a2      	b.n	8007086 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d1a3      	bne.n	8006e92 <HAL_SPI_TransmitReceive+0x18e>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2246      	movs	r2, #70	; 0x46
 8006f4e:	5a9b      	ldrh	r3, [r3, r2]
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d19d      	bne.n	8006e92 <HAL_SPI_TransmitReceive+0x18e>
 8006f56:	e085      	b.n	8007064 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d005      	beq.n	8006f6c <HAL_SPI_TransmitReceive+0x268>
 8006f60:	2312      	movs	r3, #18
 8006f62:	18fb      	adds	r3, r7, r3
 8006f64:	881b      	ldrh	r3, [r3, #0]
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d000      	beq.n	8006f6c <HAL_SPI_TransmitReceive+0x268>
 8006f6a:	e070      	b.n	800704e <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	330c      	adds	r3, #12
 8006f76:	7812      	ldrb	r2, [r2, #0]
 8006f78:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7e:	1c5a      	adds	r2, r3, #1
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	b29a      	uxth	r2, r3
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f92:	e05c      	b.n	800704e <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	2202      	movs	r2, #2
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	2b02      	cmp	r3, #2
 8006fa0:	d11c      	bne.n	8006fdc <HAL_SPI_TransmitReceive+0x2d8>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d017      	beq.n	8006fdc <HAL_SPI_TransmitReceive+0x2d8>
 8006fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d114      	bne.n	8006fdc <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	330c      	adds	r3, #12
 8006fbc:	7812      	ldrb	r2, [r2, #0]
 8006fbe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc4:	1c5a      	adds	r2, r3, #1
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d11e      	bne.n	8007028 <HAL_SPI_TransmitReceive+0x324>
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2246      	movs	r2, #70	; 0x46
 8006fee:	5a9b      	ldrh	r3, [r3, r2]
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d018      	beq.n	8007028 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	330c      	adds	r3, #12
 8006ffc:	001a      	movs	r2, r3
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007002:	7812      	ldrb	r2, [r2, #0]
 8007004:	b2d2      	uxtb	r2, r2
 8007006:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700c:	1c5a      	adds	r2, r3, #1
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2246      	movs	r2, #70	; 0x46
 8007016:	5a9b      	ldrh	r3, [r3, r2]
 8007018:	b29b      	uxth	r3, r3
 800701a:	3b01      	subs	r3, #1
 800701c:	b299      	uxth	r1, r3
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2246      	movs	r2, #70	; 0x46
 8007022:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007024:	2301      	movs	r3, #1
 8007026:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007028:	f7fc f846 	bl	80030b8 <HAL_GetTick>
 800702c:	0002      	movs	r2, r0
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	1ad3      	subs	r3, r2, r3
 8007032:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007034:	429a      	cmp	r2, r3
 8007036:	d802      	bhi.n	800703e <HAL_SPI_TransmitReceive+0x33a>
 8007038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800703a:	3301      	adds	r3, #1
 800703c:	d102      	bne.n	8007044 <HAL_SPI_TransmitReceive+0x340>
 800703e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007040:	2b00      	cmp	r3, #0
 8007042:	d104      	bne.n	800704e <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8007044:	2323      	movs	r3, #35	; 0x23
 8007046:	18fb      	adds	r3, r7, r3
 8007048:	2203      	movs	r2, #3
 800704a:	701a      	strb	r2, [r3, #0]
        goto error;
 800704c:	e01b      	b.n	8007086 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007052:	b29b      	uxth	r3, r3
 8007054:	2b00      	cmp	r3, #0
 8007056:	d19d      	bne.n	8006f94 <HAL_SPI_TransmitReceive+0x290>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2246      	movs	r2, #70	; 0x46
 800705c:	5a9b      	ldrh	r3, [r3, r2]
 800705e:	b29b      	uxth	r3, r3
 8007060:	2b00      	cmp	r3, #0
 8007062:	d197      	bne.n	8006f94 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007064:	69fa      	ldr	r2, [r7, #28]
 8007066:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	0018      	movs	r0, r3
 800706c:	f000 fe9c 	bl	8007da8 <SPI_EndRxTxTransaction>
 8007070:	1e03      	subs	r3, r0, #0
 8007072:	d007      	beq.n	8007084 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8007074:	2323      	movs	r3, #35	; 0x23
 8007076:	18fb      	adds	r3, r7, r3
 8007078:	2201      	movs	r2, #1
 800707a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2220      	movs	r2, #32
 8007080:	661a      	str	r2, [r3, #96]	; 0x60
 8007082:	e000      	b.n	8007086 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8007084:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	225d      	movs	r2, #93	; 0x5d
 800708a:	2101      	movs	r1, #1
 800708c:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	225c      	movs	r2, #92	; 0x5c
 8007092:	2100      	movs	r1, #0
 8007094:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007096:	2323      	movs	r3, #35	; 0x23
 8007098:	18fb      	adds	r3, r7, r3
 800709a:	781b      	ldrb	r3, [r3, #0]
}
 800709c:	0018      	movs	r0, r3
 800709e:	46bd      	mov	sp, r7
 80070a0:	b00a      	add	sp, #40	; 0x28
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	ffffefff 	.word	0xffffefff

080070a8 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80070a8:	b590      	push	{r4, r7, lr}
 80070aa:	b087      	sub	sp, #28
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	1dbb      	adds	r3, r7, #6
 80070b4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80070b6:	2317      	movs	r3, #23
 80070b8:	18fb      	adds	r3, r7, r3
 80070ba:	2200      	movs	r2, #0
 80070bc:	701a      	strb	r2, [r3, #0]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d112      	bne.n	80070ec <HAL_SPI_Receive_DMA+0x44>
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	685a      	ldr	r2, [r3, #4]
 80070ca:	2382      	movs	r3, #130	; 0x82
 80070cc:	005b      	lsls	r3, r3, #1
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d10c      	bne.n	80070ec <HAL_SPI_Receive_DMA+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	225d      	movs	r2, #93	; 0x5d
 80070d6:	2104      	movs	r1, #4
 80070d8:	5499      	strb	r1, [r3, r2]

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80070da:	1dbb      	adds	r3, r7, #6
 80070dc:	881b      	ldrh	r3, [r3, #0]
 80070de:	68ba      	ldr	r2, [r7, #8]
 80070e0:	68b9      	ldr	r1, [r7, #8]
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f000 f91e 	bl	8007324 <HAL_SPI_TransmitReceive_DMA>
 80070e8:	0003      	movs	r3, r0
 80070ea:	e10b      	b.n	8007304 <HAL_SPI_Receive_DMA+0x25c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	225c      	movs	r2, #92	; 0x5c
 80070f0:	5c9b      	ldrb	r3, [r3, r2]
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d101      	bne.n	80070fa <HAL_SPI_Receive_DMA+0x52>
 80070f6:	2302      	movs	r3, #2
 80070f8:	e104      	b.n	8007304 <HAL_SPI_Receive_DMA+0x25c>
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	225c      	movs	r2, #92	; 0x5c
 80070fe:	2101      	movs	r1, #1
 8007100:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	225d      	movs	r2, #93	; 0x5d
 8007106:	5c9b      	ldrb	r3, [r3, r2]
 8007108:	b2db      	uxtb	r3, r3
 800710a:	2b01      	cmp	r3, #1
 800710c:	d004      	beq.n	8007118 <HAL_SPI_Receive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 800710e:	2317      	movs	r3, #23
 8007110:	18fb      	adds	r3, r7, r3
 8007112:	2202      	movs	r2, #2
 8007114:	701a      	strb	r2, [r3, #0]
    goto error;
 8007116:	e0ee      	b.n	80072f6 <HAL_SPI_Receive_DMA+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d003      	beq.n	8007126 <HAL_SPI_Receive_DMA+0x7e>
 800711e:	1dbb      	adds	r3, r7, #6
 8007120:	881b      	ldrh	r3, [r3, #0]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d104      	bne.n	8007130 <HAL_SPI_Receive_DMA+0x88>
  {
    errorcode = HAL_ERROR;
 8007126:	2317      	movs	r3, #23
 8007128:	18fb      	adds	r3, r7, r3
 800712a:	2201      	movs	r2, #1
 800712c:	701a      	strb	r2, [r3, #0]
    goto error;
 800712e:	e0e2      	b.n	80072f6 <HAL_SPI_Receive_DMA+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	225d      	movs	r2, #93	; 0x5d
 8007134:	2104      	movs	r1, #4
 8007136:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2200      	movs	r2, #0
 800713c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	68ba      	ldr	r2, [r7, #8]
 8007142:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	1dba      	adds	r2, r7, #6
 8007148:	2144      	movs	r1, #68	; 0x44
 800714a:	8812      	ldrh	r2, [r2, #0]
 800714c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	1dba      	adds	r2, r7, #6
 8007152:	2146      	movs	r1, #70	; 0x46
 8007154:	8812      	ldrh	r2, [r2, #0]
 8007156:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2200      	movs	r2, #0
 800715c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2200      	movs	r2, #0
 8007168:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2200      	movs	r2, #0
 800716e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	689a      	ldr	r2, [r3, #8]
 8007174:	2380      	movs	r3, #128	; 0x80
 8007176:	021b      	lsls	r3, r3, #8
 8007178:	429a      	cmp	r2, r3
 800717a:	d10f      	bne.n	800719c <HAL_SPI_Receive_DMA+0xf4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2140      	movs	r1, #64	; 0x40
 8007188:	438a      	bics	r2, r1
 800718a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	495d      	ldr	r1, [pc, #372]	; (800730c <HAL_SPI_Receive_DMA+0x264>)
 8007198:	400a      	ands	r2, r1
 800719a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	685a      	ldr	r2, [r3, #4]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	495a      	ldr	r1, [pc, #360]	; (8007310 <HAL_SPI_Receive_DMA+0x268>)
 80071a8:	400a      	ands	r2, r1
 80071aa:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	68da      	ldr	r2, [r3, #12]
 80071b0:	23e0      	movs	r3, #224	; 0xe0
 80071b2:	00db      	lsls	r3, r3, #3
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d908      	bls.n	80071ca <HAL_SPI_Receive_DMA+0x122>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	685a      	ldr	r2, [r3, #4]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4954      	ldr	r1, [pc, #336]	; (8007314 <HAL_SPI_Receive_DMA+0x26c>)
 80071c4:	400a      	ands	r2, r1
 80071c6:	605a      	str	r2, [r3, #4]
 80071c8:	e045      	b.n	8007256 <HAL_SPI_Receive_DMA+0x1ae>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	685a      	ldr	r2, [r3, #4]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	2180      	movs	r1, #128	; 0x80
 80071d6:	0149      	lsls	r1, r1, #5
 80071d8:	430a      	orrs	r2, r1
 80071da:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071e0:	699a      	ldr	r2, [r3, #24]
 80071e2:	2380      	movs	r3, #128	; 0x80
 80071e4:	00db      	lsls	r3, r3, #3
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d135      	bne.n	8007256 <HAL_SPI_Receive_DMA+0x1ae>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	685a      	ldr	r2, [r3, #4]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4947      	ldr	r1, [pc, #284]	; (8007314 <HAL_SPI_Receive_DMA+0x26c>)
 80071f6:	400a      	ands	r2, r1
 80071f8:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2246      	movs	r2, #70	; 0x46
 80071fe:	5a9b      	ldrh	r3, [r3, r2]
 8007200:	b29b      	uxth	r3, r3
 8007202:	001a      	movs	r2, r3
 8007204:	2301      	movs	r3, #1
 8007206:	4013      	ands	r3, r2
 8007208:	d111      	bne.n	800722e <HAL_SPI_Receive_DMA+0x186>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	685a      	ldr	r2, [r3, #4]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	493e      	ldr	r1, [pc, #248]	; (8007310 <HAL_SPI_Receive_DMA+0x268>)
 8007216:	400a      	ands	r2, r1
 8007218:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2246      	movs	r2, #70	; 0x46
 800721e:	5a9b      	ldrh	r3, [r3, r2]
 8007220:	b29b      	uxth	r3, r3
 8007222:	085b      	lsrs	r3, r3, #1
 8007224:	b299      	uxth	r1, r3
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2246      	movs	r2, #70	; 0x46
 800722a:	5299      	strh	r1, [r3, r2]
 800722c:	e013      	b.n	8007256 <HAL_SPI_Receive_DMA+0x1ae>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	685a      	ldr	r2, [r3, #4]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2180      	movs	r1, #128	; 0x80
 800723a:	0189      	lsls	r1, r1, #6
 800723c:	430a      	orrs	r2, r1
 800723e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2246      	movs	r2, #70	; 0x46
 8007244:	5a9b      	ldrh	r3, [r3, r2]
 8007246:	b29b      	uxth	r3, r3
 8007248:	085b      	lsrs	r3, r3, #1
 800724a:	b29b      	uxth	r3, r3
 800724c:	3301      	adds	r3, #1
 800724e:	b299      	uxth	r1, r3
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2246      	movs	r2, #70	; 0x46
 8007254:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800725a:	4a2f      	ldr	r2, [pc, #188]	; (8007318 <HAL_SPI_Receive_DMA+0x270>)
 800725c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007262:	4a2e      	ldr	r2, [pc, #184]	; (800731c <HAL_SPI_Receive_DMA+0x274>)
 8007264:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800726a:	4a2d      	ldr	r2, [pc, #180]	; (8007320 <HAL_SPI_Receive_DMA+0x278>)
 800726c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007272:	2200      	movs	r2, #0
 8007274:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	330c      	adds	r3, #12
 8007280:	0019      	movs	r1, r3
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007286:	001c      	movs	r4, r3
                                 hspi->RxXferCount))
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2246      	movs	r2, #70	; 0x46
 800728c:	5a9b      	ldrh	r3, [r3, r2]
 800728e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007290:	0022      	movs	r2, r4
 8007292:	f7fc fb1d 	bl	80038d0 <HAL_DMA_Start_IT>
 8007296:	1e03      	subs	r3, r0, #0
 8007298:	d00e      	beq.n	80072b8 <HAL_SPI_Receive_DMA+0x210>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800729e:	2210      	movs	r2, #16
 80072a0:	431a      	orrs	r2, r3
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80072a6:	2317      	movs	r3, #23
 80072a8:	18fb      	adds	r3, r7, r3
 80072aa:	2201      	movs	r2, #1
 80072ac:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	225d      	movs	r2, #93	; 0x5d
 80072b2:	2101      	movs	r1, #1
 80072b4:	5499      	strb	r1, [r3, r2]
    goto error;
 80072b6:	e01e      	b.n	80072f6 <HAL_SPI_Receive_DMA+0x24e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2240      	movs	r2, #64	; 0x40
 80072c0:	4013      	ands	r3, r2
 80072c2:	2b40      	cmp	r3, #64	; 0x40
 80072c4:	d007      	beq.n	80072d6 <HAL_SPI_Receive_DMA+0x22e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2140      	movs	r1, #64	; 0x40
 80072d2:	430a      	orrs	r2, r1
 80072d4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	685a      	ldr	r2, [r3, #4]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2120      	movs	r1, #32
 80072e2:	430a      	orrs	r2, r1
 80072e4:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	685a      	ldr	r2, [r3, #4]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2101      	movs	r1, #1
 80072f2:	430a      	orrs	r2, r1
 80072f4:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	225c      	movs	r2, #92	; 0x5c
 80072fa:	2100      	movs	r1, #0
 80072fc:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80072fe:	2317      	movs	r3, #23
 8007300:	18fb      	adds	r3, r7, r3
 8007302:	781b      	ldrb	r3, [r3, #0]
}
 8007304:	0018      	movs	r0, r3
 8007306:	46bd      	mov	sp, r7
 8007308:	b007      	add	sp, #28
 800730a:	bd90      	pop	{r4, r7, pc}
 800730c:	ffffbfff 	.word	0xffffbfff
 8007310:	ffffdfff 	.word	0xffffdfff
 8007314:	ffffefff 	.word	0xffffefff
 8007318:	080079fb 	.word	0x080079fb
 800731c:	080078b5 	.word	0x080078b5
 8007320:	08007a37 	.word	0x08007a37

08007324 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8007324:	b590      	push	{r4, r7, lr}
 8007326:	b087      	sub	sp, #28
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	607a      	str	r2, [r7, #4]
 8007330:	001a      	movs	r2, r3
 8007332:	1cbb      	adds	r3, r7, #2
 8007334:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007336:	2317      	movs	r3, #23
 8007338:	18fb      	adds	r3, r7, r3
 800733a:	2200      	movs	r2, #0
 800733c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	225c      	movs	r2, #92	; 0x5c
 8007342:	5c9b      	ldrb	r3, [r3, r2]
 8007344:	2b01      	cmp	r3, #1
 8007346:	d101      	bne.n	800734c <HAL_SPI_TransmitReceive_DMA+0x28>
 8007348:	2302      	movs	r3, #2
 800734a:	e186      	b.n	800765a <HAL_SPI_TransmitReceive_DMA+0x336>
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	225c      	movs	r2, #92	; 0x5c
 8007350:	2101      	movs	r1, #1
 8007352:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007354:	2016      	movs	r0, #22
 8007356:	183b      	adds	r3, r7, r0
 8007358:	68fa      	ldr	r2, [r7, #12]
 800735a:	215d      	movs	r1, #93	; 0x5d
 800735c:	5c52      	ldrb	r2, [r2, r1]
 800735e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8007366:	0001      	movs	r1, r0
 8007368:	187b      	adds	r3, r7, r1
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	2b01      	cmp	r3, #1
 800736e:	d011      	beq.n	8007394 <HAL_SPI_TransmitReceive_DMA+0x70>
 8007370:	693a      	ldr	r2, [r7, #16]
 8007372:	2382      	movs	r3, #130	; 0x82
 8007374:	005b      	lsls	r3, r3, #1
 8007376:	429a      	cmp	r2, r3
 8007378:	d107      	bne.n	800738a <HAL_SPI_TransmitReceive_DMA+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d103      	bne.n	800738a <HAL_SPI_TransmitReceive_DMA+0x66>
 8007382:	187b      	adds	r3, r7, r1
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	2b04      	cmp	r3, #4
 8007388:	d004      	beq.n	8007394 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 800738a:	2317      	movs	r3, #23
 800738c:	18fb      	adds	r3, r7, r3
 800738e:	2202      	movs	r2, #2
 8007390:	701a      	strb	r2, [r3, #0]
    goto error;
 8007392:	e15b      	b.n	800764c <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d006      	beq.n	80073a8 <HAL_SPI_TransmitReceive_DMA+0x84>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d003      	beq.n	80073a8 <HAL_SPI_TransmitReceive_DMA+0x84>
 80073a0:	1cbb      	adds	r3, r7, #2
 80073a2:	881b      	ldrh	r3, [r3, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d104      	bne.n	80073b2 <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    errorcode = HAL_ERROR;
 80073a8:	2317      	movs	r3, #23
 80073aa:	18fb      	adds	r3, r7, r3
 80073ac:	2201      	movs	r2, #1
 80073ae:	701a      	strb	r2, [r3, #0]
    goto error;
 80073b0:	e14c      	b.n	800764c <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	225d      	movs	r2, #93	; 0x5d
 80073b6:	5c9b      	ldrb	r3, [r3, r2]
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	2b04      	cmp	r3, #4
 80073bc:	d003      	beq.n	80073c6 <HAL_SPI_TransmitReceive_DMA+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	225d      	movs	r2, #93	; 0x5d
 80073c2:	2105      	movs	r1, #5
 80073c4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2200      	movs	r2, #0
 80073ca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	68ba      	ldr	r2, [r7, #8]
 80073d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	1cba      	adds	r2, r7, #2
 80073d6:	8812      	ldrh	r2, [r2, #0]
 80073d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	1cba      	adds	r2, r7, #2
 80073de:	8812      	ldrh	r2, [r2, #0]
 80073e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	1cba      	adds	r2, r7, #2
 80073ec:	2144      	movs	r1, #68	; 0x44
 80073ee:	8812      	ldrh	r2, [r2, #0]
 80073f0:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	1cba      	adds	r2, r7, #2
 80073f6:	2146      	movs	r1, #70	; 0x46
 80073f8:	8812      	ldrh	r2, [r2, #0]
 80073fa:	525a      	strh	r2, [r3, r1]

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2200      	movs	r2, #0
 8007400:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2200      	movs	r2, #0
 8007406:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	685a      	ldr	r2, [r3, #4]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4994      	ldr	r1, [pc, #592]	; (8007664 <HAL_SPI_TransmitReceive_DMA+0x340>)
 8007414:	400a      	ands	r2, r1
 8007416:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	68da      	ldr	r2, [r3, #12]
 800741c:	23e0      	movs	r3, #224	; 0xe0
 800741e:	00db      	lsls	r3, r3, #3
 8007420:	429a      	cmp	r2, r3
 8007422:	d908      	bls.n	8007436 <HAL_SPI_TransmitReceive_DMA+0x112>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	685a      	ldr	r2, [r3, #4]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	498e      	ldr	r1, [pc, #568]	; (8007668 <HAL_SPI_TransmitReceive_DMA+0x344>)
 8007430:	400a      	ands	r2, r1
 8007432:	605a      	str	r2, [r3, #4]
 8007434:	e074      	b.n	8007520 <HAL_SPI_TransmitReceive_DMA+0x1fc>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	685a      	ldr	r2, [r3, #4]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2180      	movs	r1, #128	; 0x80
 8007442:	0149      	lsls	r1, r1, #5
 8007444:	430a      	orrs	r2, r1
 8007446:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800744c:	699a      	ldr	r2, [r3, #24]
 800744e:	2380      	movs	r3, #128	; 0x80
 8007450:	00db      	lsls	r3, r3, #3
 8007452:	429a      	cmp	r2, r3
 8007454:	d127      	bne.n	80074a6 <HAL_SPI_TransmitReceive_DMA+0x182>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800745a:	001a      	movs	r2, r3
 800745c:	2301      	movs	r3, #1
 800745e:	4013      	ands	r3, r2
 8007460:	d10f      	bne.n	8007482 <HAL_SPI_TransmitReceive_DMA+0x15e>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	685a      	ldr	r2, [r3, #4]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	497f      	ldr	r1, [pc, #508]	; (800766c <HAL_SPI_TransmitReceive_DMA+0x348>)
 800746e:	400a      	ands	r2, r1
 8007470:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007476:	b29b      	uxth	r3, r3
 8007478:	085b      	lsrs	r3, r3, #1
 800747a:	b29a      	uxth	r2, r3
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007480:	e011      	b.n	80074a6 <HAL_SPI_TransmitReceive_DMA+0x182>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	685a      	ldr	r2, [r3, #4]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2180      	movs	r1, #128	; 0x80
 800748e:	01c9      	lsls	r1, r1, #7
 8007490:	430a      	orrs	r2, r1
 8007492:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007498:	b29b      	uxth	r3, r3
 800749a:	085b      	lsrs	r3, r3, #1
 800749c:	b29b      	uxth	r3, r3
 800749e:	3301      	adds	r3, #1
 80074a0:	b29a      	uxth	r2, r3
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074aa:	699a      	ldr	r2, [r3, #24]
 80074ac:	2380      	movs	r3, #128	; 0x80
 80074ae:	00db      	lsls	r3, r3, #3
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d135      	bne.n	8007520 <HAL_SPI_TransmitReceive_DMA+0x1fc>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	685a      	ldr	r2, [r3, #4]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	496a      	ldr	r1, [pc, #424]	; (8007668 <HAL_SPI_TransmitReceive_DMA+0x344>)
 80074c0:	400a      	ands	r2, r1
 80074c2:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2246      	movs	r2, #70	; 0x46
 80074c8:	5a9b      	ldrh	r3, [r3, r2]
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	001a      	movs	r2, r3
 80074ce:	2301      	movs	r3, #1
 80074d0:	4013      	ands	r3, r2
 80074d2:	d111      	bne.n	80074f8 <HAL_SPI_TransmitReceive_DMA+0x1d4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	685a      	ldr	r2, [r3, #4]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4964      	ldr	r1, [pc, #400]	; (8007670 <HAL_SPI_TransmitReceive_DMA+0x34c>)
 80074e0:	400a      	ands	r2, r1
 80074e2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2246      	movs	r2, #70	; 0x46
 80074e8:	5a9b      	ldrh	r3, [r3, r2]
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	085b      	lsrs	r3, r3, #1
 80074ee:	b299      	uxth	r1, r3
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2246      	movs	r2, #70	; 0x46
 80074f4:	5299      	strh	r1, [r3, r2]
 80074f6:	e013      	b.n	8007520 <HAL_SPI_TransmitReceive_DMA+0x1fc>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	685a      	ldr	r2, [r3, #4]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	2180      	movs	r1, #128	; 0x80
 8007504:	0189      	lsls	r1, r1, #6
 8007506:	430a      	orrs	r2, r1
 8007508:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2246      	movs	r2, #70	; 0x46
 800750e:	5a9b      	ldrh	r3, [r3, r2]
 8007510:	b29b      	uxth	r3, r3
 8007512:	085b      	lsrs	r3, r3, #1
 8007514:	b29b      	uxth	r3, r3
 8007516:	3301      	adds	r3, #1
 8007518:	b299      	uxth	r1, r3
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2246      	movs	r2, #70	; 0x46
 800751e:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	225d      	movs	r2, #93	; 0x5d
 8007524:	5c9b      	ldrb	r3, [r3, r2]
 8007526:	b2db      	uxtb	r3, r3
 8007528:	2b04      	cmp	r3, #4
 800752a:	d108      	bne.n	800753e <HAL_SPI_TransmitReceive_DMA+0x21a>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007530:	4a50      	ldr	r2, [pc, #320]	; (8007674 <HAL_SPI_TransmitReceive_DMA+0x350>)
 8007532:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007538:	4a4f      	ldr	r2, [pc, #316]	; (8007678 <HAL_SPI_TransmitReceive_DMA+0x354>)
 800753a:	62da      	str	r2, [r3, #44]	; 0x2c
 800753c:	e007      	b.n	800754e <HAL_SPI_TransmitReceive_DMA+0x22a>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007542:	4a4e      	ldr	r2, [pc, #312]	; (800767c <HAL_SPI_TransmitReceive_DMA+0x358>)
 8007544:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800754a:	4a4d      	ldr	r2, [pc, #308]	; (8007680 <HAL_SPI_TransmitReceive_DMA+0x35c>)
 800754c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007552:	4a4c      	ldr	r2, [pc, #304]	; (8007684 <HAL_SPI_TransmitReceive_DMA+0x360>)
 8007554:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800755a:	2200      	movs	r2, #0
 800755c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	330c      	adds	r3, #12
 8007568:	0019      	movs	r1, r3
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756e:	001c      	movs	r4, r3
                                 hspi->RxXferCount))
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2246      	movs	r2, #70	; 0x46
 8007574:	5a9b      	ldrh	r3, [r3, r2]
 8007576:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007578:	0022      	movs	r2, r4
 800757a:	f7fc f9a9 	bl	80038d0 <HAL_DMA_Start_IT>
 800757e:	1e03      	subs	r3, r0, #0
 8007580:	d00e      	beq.n	80075a0 <HAL_SPI_TransmitReceive_DMA+0x27c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007586:	2210      	movs	r2, #16
 8007588:	431a      	orrs	r2, r3
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800758e:	2317      	movs	r3, #23
 8007590:	18fb      	adds	r3, r7, r3
 8007592:	2201      	movs	r2, #1
 8007594:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	225d      	movs	r2, #93	; 0x5d
 800759a:	2101      	movs	r1, #1
 800759c:	5499      	strb	r1, [r3, r2]
    goto error;
 800759e:	e055      	b.n	800764c <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	685a      	ldr	r2, [r3, #4]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2101      	movs	r1, #1
 80075ac:	430a      	orrs	r2, r1
 80075ae:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075b4:	2200      	movs	r2, #0
 80075b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075bc:	2200      	movs	r2, #0
 80075be:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075c4:	2200      	movs	r2, #0
 80075c6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075cc:	2200      	movs	r2, #0
 80075ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d8:	0019      	movs	r1, r3
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	330c      	adds	r3, #12
 80075e0:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075e6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80075e8:	f7fc f972 	bl	80038d0 <HAL_DMA_Start_IT>
 80075ec:	1e03      	subs	r3, r0, #0
 80075ee:	d00e      	beq.n	800760e <HAL_SPI_TransmitReceive_DMA+0x2ea>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075f4:	2210      	movs	r2, #16
 80075f6:	431a      	orrs	r2, r3
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80075fc:	2317      	movs	r3, #23
 80075fe:	18fb      	adds	r3, r7, r3
 8007600:	2201      	movs	r2, #1
 8007602:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	225d      	movs	r2, #93	; 0x5d
 8007608:	2101      	movs	r1, #1
 800760a:	5499      	strb	r1, [r3, r2]
    goto error;
 800760c:	e01e      	b.n	800764c <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2240      	movs	r2, #64	; 0x40
 8007616:	4013      	ands	r3, r2
 8007618:	2b40      	cmp	r3, #64	; 0x40
 800761a:	d007      	beq.n	800762c <HAL_SPI_TransmitReceive_DMA+0x308>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2140      	movs	r1, #64	; 0x40
 8007628:	430a      	orrs	r2, r1
 800762a:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	685a      	ldr	r2, [r3, #4]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2120      	movs	r1, #32
 8007638:	430a      	orrs	r2, r1
 800763a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	685a      	ldr	r2, [r3, #4]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2102      	movs	r1, #2
 8007648:	430a      	orrs	r2, r1
 800764a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	225c      	movs	r2, #92	; 0x5c
 8007650:	2100      	movs	r1, #0
 8007652:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007654:	2317      	movs	r3, #23
 8007656:	18fb      	adds	r3, r7, r3
 8007658:	781b      	ldrb	r3, [r3, #0]
}
 800765a:	0018      	movs	r0, r3
 800765c:	46bd      	mov	sp, r7
 800765e:	b007      	add	sp, #28
 8007660:	bd90      	pop	{r4, r7, pc}
 8007662:	46c0      	nop			; (mov r8, r8)
 8007664:	ffff9fff 	.word	0xffff9fff
 8007668:	ffffefff 	.word	0xffffefff
 800766c:	ffffbfff 	.word	0xffffbfff
 8007670:	ffffdfff 	.word	0xffffdfff
 8007674:	080079fb 	.word	0x080079fb
 8007678:	080078b5 	.word	0x080078b5
 800767c:	08007a19 	.word	0x08007a19
 8007680:	08007965 	.word	0x08007965
 8007684:	08007a37 	.word	0x08007a37

08007688 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b088      	sub	sp, #32
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	099b      	lsrs	r3, r3, #6
 80076a4:	001a      	movs	r2, r3
 80076a6:	2301      	movs	r3, #1
 80076a8:	4013      	ands	r3, r2
 80076aa:	d10f      	bne.n	80076cc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80076ac:	69bb      	ldr	r3, [r7, #24]
 80076ae:	2201      	movs	r2, #1
 80076b0:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80076b2:	d00b      	beq.n	80076cc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	099b      	lsrs	r3, r3, #6
 80076b8:	001a      	movs	r2, r3
 80076ba:	2301      	movs	r3, #1
 80076bc:	4013      	ands	r3, r2
 80076be:	d005      	beq.n	80076cc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	0010      	movs	r0, r2
 80076c8:	4798      	blx	r3
    return;
 80076ca:	e0d5      	b.n	8007878 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	085b      	lsrs	r3, r3, #1
 80076d0:	001a      	movs	r2, r3
 80076d2:	2301      	movs	r3, #1
 80076d4:	4013      	ands	r3, r2
 80076d6:	d00b      	beq.n	80076f0 <HAL_SPI_IRQHandler+0x68>
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	09db      	lsrs	r3, r3, #7
 80076dc:	001a      	movs	r2, r3
 80076de:	2301      	movs	r3, #1
 80076e0:	4013      	ands	r3, r2
 80076e2:	d005      	beq.n	80076f0 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	0010      	movs	r0, r2
 80076ec:	4798      	blx	r3
    return;
 80076ee:	e0c3      	b.n	8007878 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	095b      	lsrs	r3, r3, #5
 80076f4:	001a      	movs	r2, r3
 80076f6:	2301      	movs	r3, #1
 80076f8:	4013      	ands	r3, r2
 80076fa:	d10c      	bne.n	8007716 <HAL_SPI_IRQHandler+0x8e>
 80076fc:	69bb      	ldr	r3, [r7, #24]
 80076fe:	099b      	lsrs	r3, r3, #6
 8007700:	001a      	movs	r2, r3
 8007702:	2301      	movs	r3, #1
 8007704:	4013      	ands	r3, r2
 8007706:	d106      	bne.n	8007716 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007708:	69bb      	ldr	r3, [r7, #24]
 800770a:	0a1b      	lsrs	r3, r3, #8
 800770c:	001a      	movs	r2, r3
 800770e:	2301      	movs	r3, #1
 8007710:	4013      	ands	r3, r2
 8007712:	d100      	bne.n	8007716 <HAL_SPI_IRQHandler+0x8e>
 8007714:	e0b0      	b.n	8007878 <HAL_SPI_IRQHandler+0x1f0>
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	095b      	lsrs	r3, r3, #5
 800771a:	001a      	movs	r2, r3
 800771c:	2301      	movs	r3, #1
 800771e:	4013      	ands	r3, r2
 8007720:	d100      	bne.n	8007724 <HAL_SPI_IRQHandler+0x9c>
 8007722:	e0a9      	b.n	8007878 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	099b      	lsrs	r3, r3, #6
 8007728:	001a      	movs	r2, r3
 800772a:	2301      	movs	r3, #1
 800772c:	4013      	ands	r3, r2
 800772e:	d023      	beq.n	8007778 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	225d      	movs	r2, #93	; 0x5d
 8007734:	5c9b      	ldrb	r3, [r3, r2]
 8007736:	b2db      	uxtb	r3, r3
 8007738:	2b03      	cmp	r3, #3
 800773a:	d011      	beq.n	8007760 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007740:	2204      	movs	r2, #4
 8007742:	431a      	orrs	r2, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007748:	2300      	movs	r3, #0
 800774a:	617b      	str	r3, [r7, #20]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	617b      	str	r3, [r7, #20]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	617b      	str	r3, [r7, #20]
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	e00b      	b.n	8007778 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007760:	2300      	movs	r3, #0
 8007762:	613b      	str	r3, [r7, #16]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	613b      	str	r3, [r7, #16]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	613b      	str	r3, [r7, #16]
 8007774:	693b      	ldr	r3, [r7, #16]
        return;
 8007776:	e07f      	b.n	8007878 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	095b      	lsrs	r3, r3, #5
 800777c:	001a      	movs	r2, r3
 800777e:	2301      	movs	r3, #1
 8007780:	4013      	ands	r3, r2
 8007782:	d014      	beq.n	80077ae <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007788:	2201      	movs	r2, #1
 800778a:	431a      	orrs	r2, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007790:	2300      	movs	r3, #0
 8007792:	60fb      	str	r3, [r7, #12]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	60fb      	str	r3, [r7, #12]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	2140      	movs	r1, #64	; 0x40
 80077a8:	438a      	bics	r2, r1
 80077aa:	601a      	str	r2, [r3, #0]
 80077ac:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	0a1b      	lsrs	r3, r3, #8
 80077b2:	001a      	movs	r2, r3
 80077b4:	2301      	movs	r3, #1
 80077b6:	4013      	ands	r3, r2
 80077b8:	d00c      	beq.n	80077d4 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077be:	2208      	movs	r2, #8
 80077c0:	431a      	orrs	r2, r3
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80077c6:	2300      	movs	r3, #0
 80077c8:	60bb      	str	r3, [r7, #8]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	60bb      	str	r3, [r7, #8]
 80077d2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d04c      	beq.n	8007876 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	685a      	ldr	r2, [r3, #4]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	21e0      	movs	r1, #224	; 0xe0
 80077e8:	438a      	bics	r2, r1
 80077ea:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	225d      	movs	r2, #93	; 0x5d
 80077f0:	2101      	movs	r1, #1
 80077f2:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80077f4:	69fb      	ldr	r3, [r7, #28]
 80077f6:	2202      	movs	r2, #2
 80077f8:	4013      	ands	r3, r2
 80077fa:	d103      	bne.n	8007804 <HAL_SPI_IRQHandler+0x17c>
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	2201      	movs	r2, #1
 8007800:	4013      	ands	r3, r2
 8007802:	d032      	beq.n	800786a <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	685a      	ldr	r2, [r3, #4]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2103      	movs	r1, #3
 8007810:	438a      	bics	r2, r1
 8007812:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007818:	2b00      	cmp	r3, #0
 800781a:	d010      	beq.n	800783e <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007820:	4a17      	ldr	r2, [pc, #92]	; (8007880 <HAL_SPI_IRQHandler+0x1f8>)
 8007822:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007828:	0018      	movs	r0, r3
 800782a:	f7fc f8d7 	bl	80039dc <HAL_DMA_Abort_IT>
 800782e:	1e03      	subs	r3, r0, #0
 8007830:	d005      	beq.n	800783e <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007836:	2240      	movs	r2, #64	; 0x40
 8007838:	431a      	orrs	r2, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007842:	2b00      	cmp	r3, #0
 8007844:	d016      	beq.n	8007874 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800784a:	4a0d      	ldr	r2, [pc, #52]	; (8007880 <HAL_SPI_IRQHandler+0x1f8>)
 800784c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007852:	0018      	movs	r0, r3
 8007854:	f7fc f8c2 	bl	80039dc <HAL_DMA_Abort_IT>
 8007858:	1e03      	subs	r3, r0, #0
 800785a:	d00b      	beq.n	8007874 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007860:	2240      	movs	r2, #64	; 0x40
 8007862:	431a      	orrs	r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007868:	e004      	b.n	8007874 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	0018      	movs	r0, r3
 800786e:	f000 f819 	bl	80078a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007872:	e000      	b.n	8007876 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8007874:	46c0      	nop			; (mov r8, r8)
    return;
 8007876:	46c0      	nop			; (mov r8, r8)
  }
}
 8007878:	46bd      	mov	sp, r7
 800787a:	b008      	add	sp, #32
 800787c:	bd80      	pop	{r7, pc}
 800787e:	46c0      	nop			; (mov r8, r8)
 8007880:	08007a79 	.word	0x08007a79

08007884 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800788c:	46c0      	nop			; (mov r8, r8)
 800788e:	46bd      	mov	sp, r7
 8007890:	b002      	add	sp, #8
 8007892:	bd80      	pop	{r7, pc}

08007894 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800789c:	46c0      	nop			; (mov r8, r8)
 800789e:	46bd      	mov	sp, r7
 80078a0:	b002      	add	sp, #8
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80078ac:	46c0      	nop			; (mov r8, r8)
 80078ae:	46bd      	mov	sp, r7
 80078b0:	b002      	add	sp, #8
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c0:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078c2:	f7fb fbf9 	bl	80030b8 <HAL_GetTick>
 80078c6:	0003      	movs	r3, r0
 80078c8:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2220      	movs	r2, #32
 80078d2:	4013      	ands	r3, r2
 80078d4:	2b20      	cmp	r3, #32
 80078d6:	d03e      	beq.n	8007956 <SPI_DMAReceiveCplt+0xa2>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	685a      	ldr	r2, [r3, #4]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2120      	movs	r1, #32
 80078e4:	438a      	bics	r2, r1
 80078e6:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d10e      	bne.n	800790e <SPI_DMAReceiveCplt+0x5a>
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	685a      	ldr	r2, [r3, #4]
 80078f4:	2382      	movs	r3, #130	; 0x82
 80078f6:	005b      	lsls	r3, r3, #1
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d108      	bne.n	800790e <SPI_DMAReceiveCplt+0x5a>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	685a      	ldr	r2, [r3, #4]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2103      	movs	r1, #3
 8007908:	438a      	bics	r2, r1
 800790a:	605a      	str	r2, [r3, #4]
 800790c:	e007      	b.n	800791e <SPI_DMAReceiveCplt+0x6a>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	685a      	ldr	r2, [r3, #4]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2101      	movs	r1, #1
 800791a:	438a      	bics	r2, r1
 800791c:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800791e:	68ba      	ldr	r2, [r7, #8]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2164      	movs	r1, #100	; 0x64
 8007924:	0018      	movs	r0, r3
 8007926:	f000 f9e1 	bl	8007cec <SPI_EndRxTransaction>
 800792a:	1e03      	subs	r3, r0, #0
 800792c:	d002      	beq.n	8007934 <SPI_DMAReceiveCplt+0x80>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2220      	movs	r2, #32
 8007932:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2246      	movs	r2, #70	; 0x46
 8007938:	2100      	movs	r1, #0
 800793a:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	225d      	movs	r2, #93	; 0x5d
 8007940:	2101      	movs	r1, #1
 8007942:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007948:	2b00      	cmp	r3, #0
 800794a:	d004      	beq.n	8007956 <SPI_DMAReceiveCplt+0xa2>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	0018      	movs	r0, r3
 8007950:	f7ff ffa8 	bl	80078a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007954:	e003      	b.n	800795e <SPI_DMAReceiveCplt+0xaa>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	0018      	movs	r0, r3
 800795a:	f7f9 fbb3 	bl	80010c4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800795e:	46bd      	mov	sp, r7
 8007960:	b004      	add	sp, #16
 8007962:	bd80      	pop	{r7, pc}

08007964 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007970:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007972:	f7fb fba1 	bl	80030b8 <HAL_GetTick>
 8007976:	0003      	movs	r3, r0
 8007978:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2220      	movs	r2, #32
 8007982:	4013      	ands	r3, r2
 8007984:	2b20      	cmp	r3, #32
 8007986:	d031      	beq.n	80079ec <SPI_DMATransmitReceiveCplt+0x88>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	685a      	ldr	r2, [r3, #4]
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2120      	movs	r1, #32
 8007994:	438a      	bics	r2, r1
 8007996:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007998:	68ba      	ldr	r2, [r7, #8]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2164      	movs	r1, #100	; 0x64
 800799e:	0018      	movs	r0, r3
 80079a0:	f000 fa02 	bl	8007da8 <SPI_EndRxTxTransaction>
 80079a4:	1e03      	subs	r3, r0, #0
 80079a6:	d005      	beq.n	80079b4 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079ac:	2220      	movs	r2, #32
 80079ae:	431a      	orrs	r2, r3
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	685a      	ldr	r2, [r3, #4]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2103      	movs	r1, #3
 80079c0:	438a      	bics	r2, r1
 80079c2:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2200      	movs	r2, #0
 80079c8:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2246      	movs	r2, #70	; 0x46
 80079ce:	2100      	movs	r1, #0
 80079d0:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	225d      	movs	r2, #93	; 0x5d
 80079d6:	2101      	movs	r1, #1
 80079d8:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d004      	beq.n	80079ec <SPI_DMATransmitReceiveCplt+0x88>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	0018      	movs	r0, r3
 80079e6:	f7ff ff5d 	bl	80078a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80079ea:	e003      	b.n	80079f4 <SPI_DMATransmitReceiveCplt+0x90>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	0018      	movs	r0, r3
 80079f0:	f7ff ff48 	bl	8007884 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80079f4:	46bd      	mov	sp, r7
 80079f6:	b004      	add	sp, #16
 80079f8:	bd80      	pop	{r7, pc}

080079fa <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80079fa:	b580      	push	{r7, lr}
 80079fc:	b084      	sub	sp, #16
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a06:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	0018      	movs	r0, r3
 8007a0c:	f7f9 fb22 	bl	8001054 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007a10:	46c0      	nop			; (mov r8, r8)
 8007a12:	46bd      	mov	sp, r7
 8007a14:	b004      	add	sp, #16
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a24:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	0018      	movs	r0, r3
 8007a2a:	f7ff ff33 	bl	8007894 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007a2e:	46c0      	nop			; (mov r8, r8)
 8007a30:	46bd      	mov	sp, r7
 8007a32:	b004      	add	sp, #16
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b084      	sub	sp, #16
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a42:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	685a      	ldr	r2, [r3, #4]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2103      	movs	r1, #3
 8007a50:	438a      	bics	r2, r1
 8007a52:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a58:	2210      	movs	r2, #16
 8007a5a:	431a      	orrs	r2, r3
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	225d      	movs	r2, #93	; 0x5d
 8007a64:	2101      	movs	r1, #1
 8007a66:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	0018      	movs	r0, r3
 8007a6c:	f7ff ff1a 	bl	80078a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007a70:	46c0      	nop			; (mov r8, r8)
 8007a72:	46bd      	mov	sp, r7
 8007a74:	b004      	add	sp, #16
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a84:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2246      	movs	r2, #70	; 0x46
 8007a8a:	2100      	movs	r1, #0
 8007a8c:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2200      	movs	r2, #0
 8007a92:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	0018      	movs	r0, r3
 8007a98:	f7ff ff04 	bl	80078a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007a9c:	46c0      	nop			; (mov r8, r8)
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	b004      	add	sp, #16
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b088      	sub	sp, #32
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	603b      	str	r3, [r7, #0]
 8007ab0:	1dfb      	adds	r3, r7, #7
 8007ab2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007ab4:	f7fb fb00 	bl	80030b8 <HAL_GetTick>
 8007ab8:	0002      	movs	r2, r0
 8007aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007abc:	1a9b      	subs	r3, r3, r2
 8007abe:	683a      	ldr	r2, [r7, #0]
 8007ac0:	18d3      	adds	r3, r2, r3
 8007ac2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007ac4:	f7fb faf8 	bl	80030b8 <HAL_GetTick>
 8007ac8:	0003      	movs	r3, r0
 8007aca:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007acc:	4b3a      	ldr	r3, [pc, #232]	; (8007bb8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	015b      	lsls	r3, r3, #5
 8007ad2:	0d1b      	lsrs	r3, r3, #20
 8007ad4:	69fa      	ldr	r2, [r7, #28]
 8007ad6:	4353      	muls	r3, r2
 8007ad8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007ada:	e058      	b.n	8007b8e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	3301      	adds	r3, #1
 8007ae0:	d055      	beq.n	8007b8e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007ae2:	f7fb fae9 	bl	80030b8 <HAL_GetTick>
 8007ae6:	0002      	movs	r2, r0
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	1ad3      	subs	r3, r2, r3
 8007aec:	69fa      	ldr	r2, [r7, #28]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d902      	bls.n	8007af8 <SPI_WaitFlagStateUntilTimeout+0x54>
 8007af2:	69fb      	ldr	r3, [r7, #28]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d142      	bne.n	8007b7e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	685a      	ldr	r2, [r3, #4]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	21e0      	movs	r1, #224	; 0xe0
 8007b04:	438a      	bics	r2, r1
 8007b06:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	685a      	ldr	r2, [r3, #4]
 8007b0c:	2382      	movs	r3, #130	; 0x82
 8007b0e:	005b      	lsls	r3, r3, #1
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d113      	bne.n	8007b3c <SPI_WaitFlagStateUntilTimeout+0x98>
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	689a      	ldr	r2, [r3, #8]
 8007b18:	2380      	movs	r3, #128	; 0x80
 8007b1a:	021b      	lsls	r3, r3, #8
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d005      	beq.n	8007b2c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	689a      	ldr	r2, [r3, #8]
 8007b24:	2380      	movs	r3, #128	; 0x80
 8007b26:	00db      	lsls	r3, r3, #3
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d107      	bne.n	8007b3c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	2140      	movs	r1, #64	; 0x40
 8007b38:	438a      	bics	r2, r1
 8007b3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b40:	2380      	movs	r3, #128	; 0x80
 8007b42:	019b      	lsls	r3, r3, #6
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d110      	bne.n	8007b6a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	491a      	ldr	r1, [pc, #104]	; (8007bbc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8007b54:	400a      	ands	r2, r1
 8007b56:	601a      	str	r2, [r3, #0]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2180      	movs	r1, #128	; 0x80
 8007b64:	0189      	lsls	r1, r1, #6
 8007b66:	430a      	orrs	r2, r1
 8007b68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	225d      	movs	r2, #93	; 0x5d
 8007b6e:	2101      	movs	r1, #1
 8007b70:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	225c      	movs	r2, #92	; 0x5c
 8007b76:	2100      	movs	r1, #0
 8007b78:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	e017      	b.n	8007bae <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d101      	bne.n	8007b88 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8007b84:	2300      	movs	r3, #0
 8007b86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	3b01      	subs	r3, #1
 8007b8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	68ba      	ldr	r2, [r7, #8]
 8007b96:	4013      	ands	r3, r2
 8007b98:	68ba      	ldr	r2, [r7, #8]
 8007b9a:	1ad3      	subs	r3, r2, r3
 8007b9c:	425a      	negs	r2, r3
 8007b9e:	4153      	adcs	r3, r2
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	001a      	movs	r2, r3
 8007ba4:	1dfb      	adds	r3, r7, #7
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d197      	bne.n	8007adc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007bac:	2300      	movs	r3, #0
}
 8007bae:	0018      	movs	r0, r3
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	b008      	add	sp, #32
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	46c0      	nop			; (mov r8, r8)
 8007bb8:	20005138 	.word	0x20005138
 8007bbc:	ffffdfff 	.word	0xffffdfff

08007bc0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b088      	sub	sp, #32
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	607a      	str	r2, [r7, #4]
 8007bcc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007bce:	f7fb fa73 	bl	80030b8 <HAL_GetTick>
 8007bd2:	0002      	movs	r2, r0
 8007bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd6:	1a9b      	subs	r3, r3, r2
 8007bd8:	683a      	ldr	r2, [r7, #0]
 8007bda:	18d3      	adds	r3, r2, r3
 8007bdc:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007bde:	f7fb fa6b 	bl	80030b8 <HAL_GetTick>
 8007be2:	0003      	movs	r3, r0
 8007be4:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007be6:	4b3f      	ldr	r3, [pc, #252]	; (8007ce4 <SPI_WaitFifoStateUntilTimeout+0x124>)
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	0013      	movs	r3, r2
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	189b      	adds	r3, r3, r2
 8007bf0:	00da      	lsls	r2, r3, #3
 8007bf2:	1ad3      	subs	r3, r2, r3
 8007bf4:	0d1b      	lsrs	r3, r3, #20
 8007bf6:	69fa      	ldr	r2, [r7, #28]
 8007bf8:	4353      	muls	r3, r2
 8007bfa:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8007bfc:	e064      	b.n	8007cc8 <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007bfe:	68ba      	ldr	r2, [r7, #8]
 8007c00:	23c0      	movs	r3, #192	; 0xc0
 8007c02:	00db      	lsls	r3, r3, #3
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d106      	bne.n	8007c16 <SPI_WaitFifoStateUntilTimeout+0x56>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d103      	bne.n	8007c16 <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	330c      	adds	r3, #12
 8007c14:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	d055      	beq.n	8007cc8 <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c1c:	f7fb fa4c 	bl	80030b8 <HAL_GetTick>
 8007c20:	0002      	movs	r2, r0
 8007c22:	69bb      	ldr	r3, [r7, #24]
 8007c24:	1ad3      	subs	r3, r2, r3
 8007c26:	69fa      	ldr	r2, [r7, #28]
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d902      	bls.n	8007c32 <SPI_WaitFifoStateUntilTimeout+0x72>
 8007c2c:	69fb      	ldr	r3, [r7, #28]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d142      	bne.n	8007cb8 <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	685a      	ldr	r2, [r3, #4]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	21e0      	movs	r1, #224	; 0xe0
 8007c3e:	438a      	bics	r2, r1
 8007c40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	685a      	ldr	r2, [r3, #4]
 8007c46:	2382      	movs	r3, #130	; 0x82
 8007c48:	005b      	lsls	r3, r3, #1
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d113      	bne.n	8007c76 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	689a      	ldr	r2, [r3, #8]
 8007c52:	2380      	movs	r3, #128	; 0x80
 8007c54:	021b      	lsls	r3, r3, #8
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d005      	beq.n	8007c66 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	689a      	ldr	r2, [r3, #8]
 8007c5e:	2380      	movs	r3, #128	; 0x80
 8007c60:	00db      	lsls	r3, r3, #3
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d107      	bne.n	8007c76 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2140      	movs	r1, #64	; 0x40
 8007c72:	438a      	bics	r2, r1
 8007c74:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c7a:	2380      	movs	r3, #128	; 0x80
 8007c7c:	019b      	lsls	r3, r3, #6
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d110      	bne.n	8007ca4 <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4916      	ldr	r1, [pc, #88]	; (8007ce8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007c8e:	400a      	ands	r2, r1
 8007c90:	601a      	str	r2, [r3, #0]
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	2180      	movs	r1, #128	; 0x80
 8007c9e:	0189      	lsls	r1, r1, #6
 8007ca0:	430a      	orrs	r2, r1
 8007ca2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	225d      	movs	r2, #93	; 0x5d
 8007ca8:	2101      	movs	r1, #1
 8007caa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	225c      	movs	r2, #92	; 0x5c
 8007cb0:	2100      	movs	r1, #0
 8007cb2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	e010      	b.n	8007cda <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d101      	bne.n	8007cc2 <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	3b01      	subs	r3, #1
 8007cc6:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	68ba      	ldr	r2, [r7, #8]
 8007cd0:	4013      	ands	r3, r2
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d192      	bne.n	8007bfe <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	0018      	movs	r0, r3
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	b008      	add	sp, #32
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	46c0      	nop			; (mov r8, r8)
 8007ce4:	20005138 	.word	0x20005138
 8007ce8:	ffffdfff 	.word	0xffffdfff

08007cec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b086      	sub	sp, #24
 8007cf0:	af02      	add	r7, sp, #8
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	60b9      	str	r1, [r7, #8]
 8007cf6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	685a      	ldr	r2, [r3, #4]
 8007cfc:	2382      	movs	r3, #130	; 0x82
 8007cfe:	005b      	lsls	r3, r3, #1
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d113      	bne.n	8007d2c <SPI_EndRxTransaction+0x40>
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	689a      	ldr	r2, [r3, #8]
 8007d08:	2380      	movs	r3, #128	; 0x80
 8007d0a:	021b      	lsls	r3, r3, #8
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d005      	beq.n	8007d1c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	689a      	ldr	r2, [r3, #8]
 8007d14:	2380      	movs	r3, #128	; 0x80
 8007d16:	00db      	lsls	r3, r3, #3
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d107      	bne.n	8007d2c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	2140      	movs	r1, #64	; 0x40
 8007d28:	438a      	bics	r2, r1
 8007d2a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d2c:	68ba      	ldr	r2, [r7, #8]
 8007d2e:	68f8      	ldr	r0, [r7, #12]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	9300      	str	r3, [sp, #0]
 8007d34:	0013      	movs	r3, r2
 8007d36:	2200      	movs	r2, #0
 8007d38:	2180      	movs	r1, #128	; 0x80
 8007d3a:	f7ff feb3 	bl	8007aa4 <SPI_WaitFlagStateUntilTimeout>
 8007d3e:	1e03      	subs	r3, r0, #0
 8007d40:	d007      	beq.n	8007d52 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d46:	2220      	movs	r2, #32
 8007d48:	431a      	orrs	r2, r3
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007d4e:	2303      	movs	r3, #3
 8007d50:	e026      	b.n	8007da0 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	685a      	ldr	r2, [r3, #4]
 8007d56:	2382      	movs	r3, #130	; 0x82
 8007d58:	005b      	lsls	r3, r3, #1
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d11f      	bne.n	8007d9e <SPI_EndRxTransaction+0xb2>
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	689a      	ldr	r2, [r3, #8]
 8007d62:	2380      	movs	r3, #128	; 0x80
 8007d64:	021b      	lsls	r3, r3, #8
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d005      	beq.n	8007d76 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	689a      	ldr	r2, [r3, #8]
 8007d6e:	2380      	movs	r3, #128	; 0x80
 8007d70:	00db      	lsls	r3, r3, #3
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d113      	bne.n	8007d9e <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007d76:	68ba      	ldr	r2, [r7, #8]
 8007d78:	23c0      	movs	r3, #192	; 0xc0
 8007d7a:	00d9      	lsls	r1, r3, #3
 8007d7c:	68f8      	ldr	r0, [r7, #12]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	9300      	str	r3, [sp, #0]
 8007d82:	0013      	movs	r3, r2
 8007d84:	2200      	movs	r2, #0
 8007d86:	f7ff ff1b 	bl	8007bc0 <SPI_WaitFifoStateUntilTimeout>
 8007d8a:	1e03      	subs	r3, r0, #0
 8007d8c:	d007      	beq.n	8007d9e <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d92:	2220      	movs	r2, #32
 8007d94:	431a      	orrs	r2, r3
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007d9a:	2303      	movs	r3, #3
 8007d9c:	e000      	b.n	8007da0 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8007d9e:	2300      	movs	r3, #0
}
 8007da0:	0018      	movs	r0, r3
 8007da2:	46bd      	mov	sp, r7
 8007da4:	b004      	add	sp, #16
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b086      	sub	sp, #24
 8007dac:	af02      	add	r7, sp, #8
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007db4:	68ba      	ldr	r2, [r7, #8]
 8007db6:	23c0      	movs	r3, #192	; 0xc0
 8007db8:	0159      	lsls	r1, r3, #5
 8007dba:	68f8      	ldr	r0, [r7, #12]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	9300      	str	r3, [sp, #0]
 8007dc0:	0013      	movs	r3, r2
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f7ff fefc 	bl	8007bc0 <SPI_WaitFifoStateUntilTimeout>
 8007dc8:	1e03      	subs	r3, r0, #0
 8007dca:	d007      	beq.n	8007ddc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dd0:	2220      	movs	r2, #32
 8007dd2:	431a      	orrs	r2, r3
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007dd8:	2303      	movs	r3, #3
 8007dda:	e027      	b.n	8007e2c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ddc:	68ba      	ldr	r2, [r7, #8]
 8007dde:	68f8      	ldr	r0, [r7, #12]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	9300      	str	r3, [sp, #0]
 8007de4:	0013      	movs	r3, r2
 8007de6:	2200      	movs	r2, #0
 8007de8:	2180      	movs	r1, #128	; 0x80
 8007dea:	f7ff fe5b 	bl	8007aa4 <SPI_WaitFlagStateUntilTimeout>
 8007dee:	1e03      	subs	r3, r0, #0
 8007df0:	d007      	beq.n	8007e02 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007df6:	2220      	movs	r2, #32
 8007df8:	431a      	orrs	r2, r3
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007dfe:	2303      	movs	r3, #3
 8007e00:	e014      	b.n	8007e2c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007e02:	68ba      	ldr	r2, [r7, #8]
 8007e04:	23c0      	movs	r3, #192	; 0xc0
 8007e06:	00d9      	lsls	r1, r3, #3
 8007e08:	68f8      	ldr	r0, [r7, #12]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	9300      	str	r3, [sp, #0]
 8007e0e:	0013      	movs	r3, r2
 8007e10:	2200      	movs	r2, #0
 8007e12:	f7ff fed5 	bl	8007bc0 <SPI_WaitFifoStateUntilTimeout>
 8007e16:	1e03      	subs	r3, r0, #0
 8007e18:	d007      	beq.n	8007e2a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e1e:	2220      	movs	r2, #32
 8007e20:	431a      	orrs	r2, r3
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007e26:	2303      	movs	r3, #3
 8007e28:	e000      	b.n	8007e2c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007e2a:	2300      	movs	r3, #0
}
 8007e2c:	0018      	movs	r0, r3
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	b004      	add	sp, #16
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d101      	bne.n	8007e46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	e04a      	b.n	8007edc <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	223d      	movs	r2, #61	; 0x3d
 8007e4a:	5c9b      	ldrb	r3, [r3, r2]
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d107      	bne.n	8007e62 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	223c      	movs	r2, #60	; 0x3c
 8007e56:	2100      	movs	r1, #0
 8007e58:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	0018      	movs	r0, r3
 8007e5e:	f7fa fe53 	bl	8002b08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	223d      	movs	r2, #61	; 0x3d
 8007e66:	2102      	movs	r1, #2
 8007e68:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	3304      	adds	r3, #4
 8007e72:	0019      	movs	r1, r3
 8007e74:	0010      	movs	r0, r2
 8007e76:	f000 fb41 	bl	80084fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2248      	movs	r2, #72	; 0x48
 8007e7e:	2101      	movs	r1, #1
 8007e80:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	223e      	movs	r2, #62	; 0x3e
 8007e86:	2101      	movs	r1, #1
 8007e88:	5499      	strb	r1, [r3, r2]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	223f      	movs	r2, #63	; 0x3f
 8007e8e:	2101      	movs	r1, #1
 8007e90:	5499      	strb	r1, [r3, r2]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2240      	movs	r2, #64	; 0x40
 8007e96:	2101      	movs	r1, #1
 8007e98:	5499      	strb	r1, [r3, r2]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2241      	movs	r2, #65	; 0x41
 8007e9e:	2101      	movs	r1, #1
 8007ea0:	5499      	strb	r1, [r3, r2]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2242      	movs	r2, #66	; 0x42
 8007ea6:	2101      	movs	r1, #1
 8007ea8:	5499      	strb	r1, [r3, r2]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2243      	movs	r2, #67	; 0x43
 8007eae:	2101      	movs	r1, #1
 8007eb0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2244      	movs	r2, #68	; 0x44
 8007eb6:	2101      	movs	r1, #1
 8007eb8:	5499      	strb	r1, [r3, r2]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2245      	movs	r2, #69	; 0x45
 8007ebe:	2101      	movs	r1, #1
 8007ec0:	5499      	strb	r1, [r3, r2]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2246      	movs	r2, #70	; 0x46
 8007ec6:	2101      	movs	r1, #1
 8007ec8:	5499      	strb	r1, [r3, r2]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2247      	movs	r2, #71	; 0x47
 8007ece:	2101      	movs	r1, #1
 8007ed0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	223d      	movs	r2, #61	; 0x3d
 8007ed6:	2101      	movs	r1, #1
 8007ed8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007eda:	2300      	movs	r3, #0
}
 8007edc:	0018      	movs	r0, r3
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	b002      	add	sp, #8
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d101      	bne.n	8007ef6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e04a      	b.n	8007f8c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	223d      	movs	r2, #61	; 0x3d
 8007efa:	5c9b      	ldrb	r3, [r3, r2]
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d107      	bne.n	8007f12 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	223c      	movs	r2, #60	; 0x3c
 8007f06:	2100      	movs	r1, #0
 8007f08:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	0018      	movs	r0, r3
 8007f0e:	f000 f841 	bl	8007f94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	223d      	movs	r2, #61	; 0x3d
 8007f16:	2102      	movs	r1, #2
 8007f18:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	3304      	adds	r3, #4
 8007f22:	0019      	movs	r1, r3
 8007f24:	0010      	movs	r0, r2
 8007f26:	f000 fae9 	bl	80084fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2248      	movs	r2, #72	; 0x48
 8007f2e:	2101      	movs	r1, #1
 8007f30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	223e      	movs	r2, #62	; 0x3e
 8007f36:	2101      	movs	r1, #1
 8007f38:	5499      	strb	r1, [r3, r2]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	223f      	movs	r2, #63	; 0x3f
 8007f3e:	2101      	movs	r1, #1
 8007f40:	5499      	strb	r1, [r3, r2]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2240      	movs	r2, #64	; 0x40
 8007f46:	2101      	movs	r1, #1
 8007f48:	5499      	strb	r1, [r3, r2]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2241      	movs	r2, #65	; 0x41
 8007f4e:	2101      	movs	r1, #1
 8007f50:	5499      	strb	r1, [r3, r2]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2242      	movs	r2, #66	; 0x42
 8007f56:	2101      	movs	r1, #1
 8007f58:	5499      	strb	r1, [r3, r2]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2243      	movs	r2, #67	; 0x43
 8007f5e:	2101      	movs	r1, #1
 8007f60:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2244      	movs	r2, #68	; 0x44
 8007f66:	2101      	movs	r1, #1
 8007f68:	5499      	strb	r1, [r3, r2]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2245      	movs	r2, #69	; 0x45
 8007f6e:	2101      	movs	r1, #1
 8007f70:	5499      	strb	r1, [r3, r2]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2246      	movs	r2, #70	; 0x46
 8007f76:	2101      	movs	r1, #1
 8007f78:	5499      	strb	r1, [r3, r2]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2247      	movs	r2, #71	; 0x47
 8007f7e:	2101      	movs	r1, #1
 8007f80:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	223d      	movs	r2, #61	; 0x3d
 8007f86:	2101      	movs	r1, #1
 8007f88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007f8a:	2300      	movs	r3, #0
}
 8007f8c:	0018      	movs	r0, r3
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	b002      	add	sp, #8
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007f9c:	46c0      	nop			; (mov r8, r8)
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	b002      	add	sp, #8
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d108      	bne.n	8007fc6 <HAL_TIM_PWM_Start+0x22>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	223e      	movs	r2, #62	; 0x3e
 8007fb8:	5c9b      	ldrb	r3, [r3, r2]
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	3b01      	subs	r3, #1
 8007fbe:	1e5a      	subs	r2, r3, #1
 8007fc0:	4193      	sbcs	r3, r2
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	e037      	b.n	8008036 <HAL_TIM_PWM_Start+0x92>
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	2b04      	cmp	r3, #4
 8007fca:	d108      	bne.n	8007fde <HAL_TIM_PWM_Start+0x3a>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	223f      	movs	r2, #63	; 0x3f
 8007fd0:	5c9b      	ldrb	r3, [r3, r2]
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	3b01      	subs	r3, #1
 8007fd6:	1e5a      	subs	r2, r3, #1
 8007fd8:	4193      	sbcs	r3, r2
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	e02b      	b.n	8008036 <HAL_TIM_PWM_Start+0x92>
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	2b08      	cmp	r3, #8
 8007fe2:	d108      	bne.n	8007ff6 <HAL_TIM_PWM_Start+0x52>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2240      	movs	r2, #64	; 0x40
 8007fe8:	5c9b      	ldrb	r3, [r3, r2]
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	3b01      	subs	r3, #1
 8007fee:	1e5a      	subs	r2, r3, #1
 8007ff0:	4193      	sbcs	r3, r2
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	e01f      	b.n	8008036 <HAL_TIM_PWM_Start+0x92>
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	2b0c      	cmp	r3, #12
 8007ffa:	d108      	bne.n	800800e <HAL_TIM_PWM_Start+0x6a>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2241      	movs	r2, #65	; 0x41
 8008000:	5c9b      	ldrb	r3, [r3, r2]
 8008002:	b2db      	uxtb	r3, r3
 8008004:	3b01      	subs	r3, #1
 8008006:	1e5a      	subs	r2, r3, #1
 8008008:	4193      	sbcs	r3, r2
 800800a:	b2db      	uxtb	r3, r3
 800800c:	e013      	b.n	8008036 <HAL_TIM_PWM_Start+0x92>
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	2b10      	cmp	r3, #16
 8008012:	d108      	bne.n	8008026 <HAL_TIM_PWM_Start+0x82>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2242      	movs	r2, #66	; 0x42
 8008018:	5c9b      	ldrb	r3, [r3, r2]
 800801a:	b2db      	uxtb	r3, r3
 800801c:	3b01      	subs	r3, #1
 800801e:	1e5a      	subs	r2, r3, #1
 8008020:	4193      	sbcs	r3, r2
 8008022:	b2db      	uxtb	r3, r3
 8008024:	e007      	b.n	8008036 <HAL_TIM_PWM_Start+0x92>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2243      	movs	r2, #67	; 0x43
 800802a:	5c9b      	ldrb	r3, [r3, r2]
 800802c:	b2db      	uxtb	r3, r3
 800802e:	3b01      	subs	r3, #1
 8008030:	1e5a      	subs	r2, r3, #1
 8008032:	4193      	sbcs	r3, r2
 8008034:	b2db      	uxtb	r3, r3
 8008036:	2b00      	cmp	r3, #0
 8008038:	d001      	beq.n	800803e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	e08b      	b.n	8008156 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d104      	bne.n	800804e <HAL_TIM_PWM_Start+0xaa>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	223e      	movs	r2, #62	; 0x3e
 8008048:	2102      	movs	r1, #2
 800804a:	5499      	strb	r1, [r3, r2]
 800804c:	e023      	b.n	8008096 <HAL_TIM_PWM_Start+0xf2>
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	2b04      	cmp	r3, #4
 8008052:	d104      	bne.n	800805e <HAL_TIM_PWM_Start+0xba>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	223f      	movs	r2, #63	; 0x3f
 8008058:	2102      	movs	r1, #2
 800805a:	5499      	strb	r1, [r3, r2]
 800805c:	e01b      	b.n	8008096 <HAL_TIM_PWM_Start+0xf2>
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	2b08      	cmp	r3, #8
 8008062:	d104      	bne.n	800806e <HAL_TIM_PWM_Start+0xca>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2240      	movs	r2, #64	; 0x40
 8008068:	2102      	movs	r1, #2
 800806a:	5499      	strb	r1, [r3, r2]
 800806c:	e013      	b.n	8008096 <HAL_TIM_PWM_Start+0xf2>
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	2b0c      	cmp	r3, #12
 8008072:	d104      	bne.n	800807e <HAL_TIM_PWM_Start+0xda>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2241      	movs	r2, #65	; 0x41
 8008078:	2102      	movs	r1, #2
 800807a:	5499      	strb	r1, [r3, r2]
 800807c:	e00b      	b.n	8008096 <HAL_TIM_PWM_Start+0xf2>
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	2b10      	cmp	r3, #16
 8008082:	d104      	bne.n	800808e <HAL_TIM_PWM_Start+0xea>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2242      	movs	r2, #66	; 0x42
 8008088:	2102      	movs	r1, #2
 800808a:	5499      	strb	r1, [r3, r2]
 800808c:	e003      	b.n	8008096 <HAL_TIM_PWM_Start+0xf2>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2243      	movs	r2, #67	; 0x43
 8008092:	2102      	movs	r1, #2
 8008094:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	6839      	ldr	r1, [r7, #0]
 800809c:	2201      	movs	r2, #1
 800809e:	0018      	movs	r0, r3
 80080a0:	f000 fe0c 	bl	8008cbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a2d      	ldr	r2, [pc, #180]	; (8008160 <HAL_TIM_PWM_Start+0x1bc>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d00e      	beq.n	80080cc <HAL_TIM_PWM_Start+0x128>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a2c      	ldr	r2, [pc, #176]	; (8008164 <HAL_TIM_PWM_Start+0x1c0>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d009      	beq.n	80080cc <HAL_TIM_PWM_Start+0x128>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a2a      	ldr	r2, [pc, #168]	; (8008168 <HAL_TIM_PWM_Start+0x1c4>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d004      	beq.n	80080cc <HAL_TIM_PWM_Start+0x128>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a29      	ldr	r2, [pc, #164]	; (800816c <HAL_TIM_PWM_Start+0x1c8>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d101      	bne.n	80080d0 <HAL_TIM_PWM_Start+0x12c>
 80080cc:	2301      	movs	r3, #1
 80080ce:	e000      	b.n	80080d2 <HAL_TIM_PWM_Start+0x12e>
 80080d0:	2300      	movs	r3, #0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d008      	beq.n	80080e8 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2180      	movs	r1, #128	; 0x80
 80080e2:	0209      	lsls	r1, r1, #8
 80080e4:	430a      	orrs	r2, r1
 80080e6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a1c      	ldr	r2, [pc, #112]	; (8008160 <HAL_TIM_PWM_Start+0x1bc>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d00f      	beq.n	8008112 <HAL_TIM_PWM_Start+0x16e>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	2380      	movs	r3, #128	; 0x80
 80080f8:	05db      	lsls	r3, r3, #23
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d009      	beq.n	8008112 <HAL_TIM_PWM_Start+0x16e>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a1b      	ldr	r2, [pc, #108]	; (8008170 <HAL_TIM_PWM_Start+0x1cc>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d004      	beq.n	8008112 <HAL_TIM_PWM_Start+0x16e>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a15      	ldr	r2, [pc, #84]	; (8008164 <HAL_TIM_PWM_Start+0x1c0>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d116      	bne.n	8008140 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	4a16      	ldr	r2, [pc, #88]	; (8008174 <HAL_TIM_PWM_Start+0x1d0>)
 800811a:	4013      	ands	r3, r2
 800811c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2b06      	cmp	r3, #6
 8008122:	d016      	beq.n	8008152 <HAL_TIM_PWM_Start+0x1ae>
 8008124:	68fa      	ldr	r2, [r7, #12]
 8008126:	2380      	movs	r3, #128	; 0x80
 8008128:	025b      	lsls	r3, r3, #9
 800812a:	429a      	cmp	r2, r3
 800812c:	d011      	beq.n	8008152 <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	2101      	movs	r1, #1
 800813a:	430a      	orrs	r2, r1
 800813c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800813e:	e008      	b.n	8008152 <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	2101      	movs	r1, #1
 800814c:	430a      	orrs	r2, r1
 800814e:	601a      	str	r2, [r3, #0]
 8008150:	e000      	b.n	8008154 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008152:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8008154:	2300      	movs	r3, #0
}
 8008156:	0018      	movs	r0, r3
 8008158:	46bd      	mov	sp, r7
 800815a:	b004      	add	sp, #16
 800815c:	bd80      	pop	{r7, pc}
 800815e:	46c0      	nop			; (mov r8, r8)
 8008160:	40012c00 	.word	0x40012c00
 8008164:	40014000 	.word	0x40014000
 8008168:	40014400 	.word	0x40014400
 800816c:	40014800 	.word	0x40014800
 8008170:	40000400 	.word	0x40000400
 8008174:	00010007 	.word	0x00010007

08008178 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	223c      	movs	r2, #60	; 0x3c
 8008188:	5c9b      	ldrb	r3, [r3, r2]
 800818a:	2b01      	cmp	r3, #1
 800818c:	d101      	bne.n	8008192 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800818e:	2302      	movs	r3, #2
 8008190:	e0df      	b.n	8008352 <HAL_TIM_PWM_ConfigChannel+0x1da>
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	223c      	movs	r2, #60	; 0x3c
 8008196:	2101      	movs	r1, #1
 8008198:	5499      	strb	r1, [r3, r2]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2b14      	cmp	r3, #20
 800819e:	d900      	bls.n	80081a2 <HAL_TIM_PWM_ConfigChannel+0x2a>
 80081a0:	e0d1      	b.n	8008346 <HAL_TIM_PWM_ConfigChannel+0x1ce>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	009a      	lsls	r2, r3, #2
 80081a6:	4b6d      	ldr	r3, [pc, #436]	; (800835c <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 80081a8:	18d3      	adds	r3, r2, r3
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	68ba      	ldr	r2, [r7, #8]
 80081b4:	0011      	movs	r1, r2
 80081b6:	0018      	movs	r0, r3
 80081b8:	f000 fa20 	bl	80085fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	699a      	ldr	r2, [r3, #24]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	2108      	movs	r1, #8
 80081c8:	430a      	orrs	r2, r1
 80081ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	699a      	ldr	r2, [r3, #24]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2104      	movs	r1, #4
 80081d8:	438a      	bics	r2, r1
 80081da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	6999      	ldr	r1, [r3, #24]
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	691a      	ldr	r2, [r3, #16]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	430a      	orrs	r2, r1
 80081ec:	619a      	str	r2, [r3, #24]
      break;
 80081ee:	e0ab      	b.n	8008348 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	68ba      	ldr	r2, [r7, #8]
 80081f6:	0011      	movs	r1, r2
 80081f8:	0018      	movs	r0, r3
 80081fa:	f000 fa89 	bl	8008710 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	699a      	ldr	r2, [r3, #24]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	2180      	movs	r1, #128	; 0x80
 800820a:	0109      	lsls	r1, r1, #4
 800820c:	430a      	orrs	r2, r1
 800820e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	699a      	ldr	r2, [r3, #24]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4951      	ldr	r1, [pc, #324]	; (8008360 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 800821c:	400a      	ands	r2, r1
 800821e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	6999      	ldr	r1, [r3, #24]
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	691b      	ldr	r3, [r3, #16]
 800822a:	021a      	lsls	r2, r3, #8
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	430a      	orrs	r2, r1
 8008232:	619a      	str	r2, [r3, #24]
      break;
 8008234:	e088      	b.n	8008348 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	68ba      	ldr	r2, [r7, #8]
 800823c:	0011      	movs	r1, r2
 800823e:	0018      	movs	r0, r3
 8008240:	f000 faea 	bl	8008818 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	69da      	ldr	r2, [r3, #28]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	2108      	movs	r1, #8
 8008250:	430a      	orrs	r2, r1
 8008252:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	69da      	ldr	r2, [r3, #28]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	2104      	movs	r1, #4
 8008260:	438a      	bics	r2, r1
 8008262:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	69d9      	ldr	r1, [r3, #28]
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	691a      	ldr	r2, [r3, #16]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	430a      	orrs	r2, r1
 8008274:	61da      	str	r2, [r3, #28]
      break;
 8008276:	e067      	b.n	8008348 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	68ba      	ldr	r2, [r7, #8]
 800827e:	0011      	movs	r1, r2
 8008280:	0018      	movs	r0, r3
 8008282:	f000 fb51 	bl	8008928 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	69da      	ldr	r2, [r3, #28]
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2180      	movs	r1, #128	; 0x80
 8008292:	0109      	lsls	r1, r1, #4
 8008294:	430a      	orrs	r2, r1
 8008296:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	69da      	ldr	r2, [r3, #28]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	492f      	ldr	r1, [pc, #188]	; (8008360 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80082a4:	400a      	ands	r2, r1
 80082a6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	69d9      	ldr	r1, [r3, #28]
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	691b      	ldr	r3, [r3, #16]
 80082b2:	021a      	lsls	r2, r3, #8
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	430a      	orrs	r2, r1
 80082ba:	61da      	str	r2, [r3, #28]
      break;
 80082bc:	e044      	b.n	8008348 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	68ba      	ldr	r2, [r7, #8]
 80082c4:	0011      	movs	r1, r2
 80082c6:	0018      	movs	r0, r3
 80082c8:	f000 fb98 	bl	80089fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	2108      	movs	r1, #8
 80082d8:	430a      	orrs	r2, r1
 80082da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	2104      	movs	r1, #4
 80082e8:	438a      	bics	r2, r1
 80082ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	691a      	ldr	r2, [r3, #16]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	430a      	orrs	r2, r1
 80082fc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80082fe:	e023      	b.n	8008348 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	68ba      	ldr	r2, [r7, #8]
 8008306:	0011      	movs	r1, r2
 8008308:	0018      	movs	r0, r3
 800830a:	f000 fbd7 	bl	8008abc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	2180      	movs	r1, #128	; 0x80
 800831a:	0109      	lsls	r1, r1, #4
 800831c:	430a      	orrs	r2, r1
 800831e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	490d      	ldr	r1, [pc, #52]	; (8008360 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 800832c:	400a      	ands	r2, r1
 800832e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	691b      	ldr	r3, [r3, #16]
 800833a:	021a      	lsls	r2, r3, #8
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	430a      	orrs	r2, r1
 8008342:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008344:	e000      	b.n	8008348 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 8008346:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	223c      	movs	r2, #60	; 0x3c
 800834c:	2100      	movs	r1, #0
 800834e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	0018      	movs	r0, r3
 8008354:	46bd      	mov	sp, r7
 8008356:	b004      	add	sp, #16
 8008358:	bd80      	pop	{r7, pc}
 800835a:	46c0      	nop			; (mov r8, r8)
 800835c:	0800a7d0 	.word	0x0800a7d0
 8008360:	fffffbff 	.word	0xfffffbff

08008364 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	223c      	movs	r2, #60	; 0x3c
 8008372:	5c9b      	ldrb	r3, [r3, r2]
 8008374:	2b01      	cmp	r3, #1
 8008376:	d101      	bne.n	800837c <HAL_TIM_ConfigClockSource+0x18>
 8008378:	2302      	movs	r3, #2
 800837a:	e0b7      	b.n	80084ec <HAL_TIM_ConfigClockSource+0x188>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	223c      	movs	r2, #60	; 0x3c
 8008380:	2101      	movs	r1, #1
 8008382:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	223d      	movs	r2, #61	; 0x3d
 8008388:	2102      	movs	r1, #2
 800838a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	4a57      	ldr	r2, [pc, #348]	; (80084f4 <HAL_TIM_ConfigClockSource+0x190>)
 8008398:	4013      	ands	r3, r2
 800839a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	4a56      	ldr	r2, [pc, #344]	; (80084f8 <HAL_TIM_ConfigClockSource+0x194>)
 80083a0:	4013      	ands	r3, r2
 80083a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	68fa      	ldr	r2, [r7, #12]
 80083aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	2280      	movs	r2, #128	; 0x80
 80083b2:	0192      	lsls	r2, r2, #6
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d040      	beq.n	800843a <HAL_TIM_ConfigClockSource+0xd6>
 80083b8:	2280      	movs	r2, #128	; 0x80
 80083ba:	0192      	lsls	r2, r2, #6
 80083bc:	4293      	cmp	r3, r2
 80083be:	d900      	bls.n	80083c2 <HAL_TIM_ConfigClockSource+0x5e>
 80083c0:	e088      	b.n	80084d4 <HAL_TIM_ConfigClockSource+0x170>
 80083c2:	2280      	movs	r2, #128	; 0x80
 80083c4:	0152      	lsls	r2, r2, #5
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d100      	bne.n	80083cc <HAL_TIM_ConfigClockSource+0x68>
 80083ca:	e085      	b.n	80084d8 <HAL_TIM_ConfigClockSource+0x174>
 80083cc:	2280      	movs	r2, #128	; 0x80
 80083ce:	0152      	lsls	r2, r2, #5
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d900      	bls.n	80083d6 <HAL_TIM_ConfigClockSource+0x72>
 80083d4:	e07e      	b.n	80084d4 <HAL_TIM_ConfigClockSource+0x170>
 80083d6:	2b70      	cmp	r3, #112	; 0x70
 80083d8:	d018      	beq.n	800840c <HAL_TIM_ConfigClockSource+0xa8>
 80083da:	d900      	bls.n	80083de <HAL_TIM_ConfigClockSource+0x7a>
 80083dc:	e07a      	b.n	80084d4 <HAL_TIM_ConfigClockSource+0x170>
 80083de:	2b60      	cmp	r3, #96	; 0x60
 80083e0:	d04f      	beq.n	8008482 <HAL_TIM_ConfigClockSource+0x11e>
 80083e2:	d900      	bls.n	80083e6 <HAL_TIM_ConfigClockSource+0x82>
 80083e4:	e076      	b.n	80084d4 <HAL_TIM_ConfigClockSource+0x170>
 80083e6:	2b50      	cmp	r3, #80	; 0x50
 80083e8:	d03b      	beq.n	8008462 <HAL_TIM_ConfigClockSource+0xfe>
 80083ea:	d900      	bls.n	80083ee <HAL_TIM_ConfigClockSource+0x8a>
 80083ec:	e072      	b.n	80084d4 <HAL_TIM_ConfigClockSource+0x170>
 80083ee:	2b40      	cmp	r3, #64	; 0x40
 80083f0:	d057      	beq.n	80084a2 <HAL_TIM_ConfigClockSource+0x13e>
 80083f2:	d900      	bls.n	80083f6 <HAL_TIM_ConfigClockSource+0x92>
 80083f4:	e06e      	b.n	80084d4 <HAL_TIM_ConfigClockSource+0x170>
 80083f6:	2b30      	cmp	r3, #48	; 0x30
 80083f8:	d063      	beq.n	80084c2 <HAL_TIM_ConfigClockSource+0x15e>
 80083fa:	d86b      	bhi.n	80084d4 <HAL_TIM_ConfigClockSource+0x170>
 80083fc:	2b20      	cmp	r3, #32
 80083fe:	d060      	beq.n	80084c2 <HAL_TIM_ConfigClockSource+0x15e>
 8008400:	d868      	bhi.n	80084d4 <HAL_TIM_ConfigClockSource+0x170>
 8008402:	2b00      	cmp	r3, #0
 8008404:	d05d      	beq.n	80084c2 <HAL_TIM_ConfigClockSource+0x15e>
 8008406:	2b10      	cmp	r3, #16
 8008408:	d05b      	beq.n	80084c2 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800840a:	e063      	b.n	80084d4 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6818      	ldr	r0, [r3, #0]
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	6899      	ldr	r1, [r3, #8]
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	685a      	ldr	r2, [r3, #4]
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	68db      	ldr	r3, [r3, #12]
 800841c:	f000 fc2e 	bl	8008c7c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	689b      	ldr	r3, [r3, #8]
 8008426:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2277      	movs	r2, #119	; 0x77
 800842c:	4313      	orrs	r3, r2
 800842e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	68fa      	ldr	r2, [r7, #12]
 8008436:	609a      	str	r2, [r3, #8]
      break;
 8008438:	e04f      	b.n	80084da <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6818      	ldr	r0, [r3, #0]
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	6899      	ldr	r1, [r3, #8]
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	685a      	ldr	r2, [r3, #4]
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	68db      	ldr	r3, [r3, #12]
 800844a:	f000 fc17 	bl	8008c7c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	689a      	ldr	r2, [r3, #8]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	2180      	movs	r1, #128	; 0x80
 800845a:	01c9      	lsls	r1, r1, #7
 800845c:	430a      	orrs	r2, r1
 800845e:	609a      	str	r2, [r3, #8]
      break;
 8008460:	e03b      	b.n	80084da <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6818      	ldr	r0, [r3, #0]
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	6859      	ldr	r1, [r3, #4]
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	68db      	ldr	r3, [r3, #12]
 800846e:	001a      	movs	r2, r3
 8008470:	f000 fb88 	bl	8008b84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2150      	movs	r1, #80	; 0x50
 800847a:	0018      	movs	r0, r3
 800847c:	f000 fbe2 	bl	8008c44 <TIM_ITRx_SetConfig>
      break;
 8008480:	e02b      	b.n	80084da <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6818      	ldr	r0, [r3, #0]
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	6859      	ldr	r1, [r3, #4]
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	001a      	movs	r2, r3
 8008490:	f000 fba6 	bl	8008be0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	2160      	movs	r1, #96	; 0x60
 800849a:	0018      	movs	r0, r3
 800849c:	f000 fbd2 	bl	8008c44 <TIM_ITRx_SetConfig>
      break;
 80084a0:	e01b      	b.n	80084da <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6818      	ldr	r0, [r3, #0]
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	6859      	ldr	r1, [r3, #4]
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	68db      	ldr	r3, [r3, #12]
 80084ae:	001a      	movs	r2, r3
 80084b0:	f000 fb68 	bl	8008b84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2140      	movs	r1, #64	; 0x40
 80084ba:	0018      	movs	r0, r3
 80084bc:	f000 fbc2 	bl	8008c44 <TIM_ITRx_SetConfig>
      break;
 80084c0:	e00b      	b.n	80084da <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	0019      	movs	r1, r3
 80084cc:	0010      	movs	r0, r2
 80084ce:	f000 fbb9 	bl	8008c44 <TIM_ITRx_SetConfig>
        break;
 80084d2:	e002      	b.n	80084da <HAL_TIM_ConfigClockSource+0x176>
      break;
 80084d4:	46c0      	nop			; (mov r8, r8)
 80084d6:	e000      	b.n	80084da <HAL_TIM_ConfigClockSource+0x176>
      break;
 80084d8:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	223d      	movs	r2, #61	; 0x3d
 80084de:	2101      	movs	r1, #1
 80084e0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	223c      	movs	r2, #60	; 0x3c
 80084e6:	2100      	movs	r1, #0
 80084e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80084ea:	2300      	movs	r3, #0
}
 80084ec:	0018      	movs	r0, r3
 80084ee:	46bd      	mov	sp, r7
 80084f0:	b004      	add	sp, #16
 80084f2:	bd80      	pop	{r7, pc}
 80084f4:	ffceff88 	.word	0xffceff88
 80084f8:	ffff00ff 	.word	0xffff00ff

080084fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	4a34      	ldr	r2, [pc, #208]	; (80085e0 <TIM_Base_SetConfig+0xe4>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d008      	beq.n	8008526 <TIM_Base_SetConfig+0x2a>
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	2380      	movs	r3, #128	; 0x80
 8008518:	05db      	lsls	r3, r3, #23
 800851a:	429a      	cmp	r2, r3
 800851c:	d003      	beq.n	8008526 <TIM_Base_SetConfig+0x2a>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	4a30      	ldr	r2, [pc, #192]	; (80085e4 <TIM_Base_SetConfig+0xe8>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d108      	bne.n	8008538 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2270      	movs	r2, #112	; 0x70
 800852a:	4393      	bics	r3, r2
 800852c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	68fa      	ldr	r2, [r7, #12]
 8008534:	4313      	orrs	r3, r2
 8008536:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	4a29      	ldr	r2, [pc, #164]	; (80085e0 <TIM_Base_SetConfig+0xe4>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d018      	beq.n	8008572 <TIM_Base_SetConfig+0x76>
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	2380      	movs	r3, #128	; 0x80
 8008544:	05db      	lsls	r3, r3, #23
 8008546:	429a      	cmp	r2, r3
 8008548:	d013      	beq.n	8008572 <TIM_Base_SetConfig+0x76>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	4a25      	ldr	r2, [pc, #148]	; (80085e4 <TIM_Base_SetConfig+0xe8>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d00f      	beq.n	8008572 <TIM_Base_SetConfig+0x76>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4a24      	ldr	r2, [pc, #144]	; (80085e8 <TIM_Base_SetConfig+0xec>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d00b      	beq.n	8008572 <TIM_Base_SetConfig+0x76>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	4a23      	ldr	r2, [pc, #140]	; (80085ec <TIM_Base_SetConfig+0xf0>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d007      	beq.n	8008572 <TIM_Base_SetConfig+0x76>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4a22      	ldr	r2, [pc, #136]	; (80085f0 <TIM_Base_SetConfig+0xf4>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d003      	beq.n	8008572 <TIM_Base_SetConfig+0x76>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4a21      	ldr	r2, [pc, #132]	; (80085f4 <TIM_Base_SetConfig+0xf8>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d108      	bne.n	8008584 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	4a20      	ldr	r2, [pc, #128]	; (80085f8 <TIM_Base_SetConfig+0xfc>)
 8008576:	4013      	ands	r3, r2
 8008578:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	68fa      	ldr	r2, [r7, #12]
 8008580:	4313      	orrs	r3, r2
 8008582:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2280      	movs	r2, #128	; 0x80
 8008588:	4393      	bics	r3, r2
 800858a:	001a      	movs	r2, r3
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	695b      	ldr	r3, [r3, #20]
 8008590:	4313      	orrs	r3, r2
 8008592:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	68fa      	ldr	r2, [r7, #12]
 8008598:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	689a      	ldr	r2, [r3, #8]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	4a0c      	ldr	r2, [pc, #48]	; (80085e0 <TIM_Base_SetConfig+0xe4>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d00b      	beq.n	80085ca <TIM_Base_SetConfig+0xce>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	4a0d      	ldr	r2, [pc, #52]	; (80085ec <TIM_Base_SetConfig+0xf0>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d007      	beq.n	80085ca <TIM_Base_SetConfig+0xce>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	4a0c      	ldr	r2, [pc, #48]	; (80085f0 <TIM_Base_SetConfig+0xf4>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d003      	beq.n	80085ca <TIM_Base_SetConfig+0xce>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	4a0b      	ldr	r2, [pc, #44]	; (80085f4 <TIM_Base_SetConfig+0xf8>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d103      	bne.n	80085d2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	691a      	ldr	r2, [r3, #16]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2201      	movs	r2, #1
 80085d6:	615a      	str	r2, [r3, #20]
}
 80085d8:	46c0      	nop			; (mov r8, r8)
 80085da:	46bd      	mov	sp, r7
 80085dc:	b004      	add	sp, #16
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	40012c00 	.word	0x40012c00
 80085e4:	40000400 	.word	0x40000400
 80085e8:	40002000 	.word	0x40002000
 80085ec:	40014000 	.word	0x40014000
 80085f0:	40014400 	.word	0x40014400
 80085f4:	40014800 	.word	0x40014800
 80085f8:	fffffcff 	.word	0xfffffcff

080085fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b086      	sub	sp, #24
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6a1b      	ldr	r3, [r3, #32]
 800860a:	2201      	movs	r2, #1
 800860c:	4393      	bics	r3, r2
 800860e:	001a      	movs	r2, r3
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6a1b      	ldr	r3, [r3, #32]
 8008618:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	699b      	ldr	r3, [r3, #24]
 8008624:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	4a32      	ldr	r2, [pc, #200]	; (80086f4 <TIM_OC1_SetConfig+0xf8>)
 800862a:	4013      	ands	r3, r2
 800862c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2203      	movs	r2, #3
 8008632:	4393      	bics	r3, r2
 8008634:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	68fa      	ldr	r2, [r7, #12]
 800863c:	4313      	orrs	r3, r2
 800863e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	2202      	movs	r2, #2
 8008644:	4393      	bics	r3, r2
 8008646:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	697a      	ldr	r2, [r7, #20]
 800864e:	4313      	orrs	r3, r2
 8008650:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4a28      	ldr	r2, [pc, #160]	; (80086f8 <TIM_OC1_SetConfig+0xfc>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d00b      	beq.n	8008672 <TIM_OC1_SetConfig+0x76>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	4a27      	ldr	r2, [pc, #156]	; (80086fc <TIM_OC1_SetConfig+0x100>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d007      	beq.n	8008672 <TIM_OC1_SetConfig+0x76>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4a26      	ldr	r2, [pc, #152]	; (8008700 <TIM_OC1_SetConfig+0x104>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d003      	beq.n	8008672 <TIM_OC1_SetConfig+0x76>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4a25      	ldr	r2, [pc, #148]	; (8008704 <TIM_OC1_SetConfig+0x108>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d10c      	bne.n	800868c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	2208      	movs	r2, #8
 8008676:	4393      	bics	r3, r2
 8008678:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	68db      	ldr	r3, [r3, #12]
 800867e:	697a      	ldr	r2, [r7, #20]
 8008680:	4313      	orrs	r3, r2
 8008682:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	2204      	movs	r2, #4
 8008688:	4393      	bics	r3, r2
 800868a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4a1a      	ldr	r2, [pc, #104]	; (80086f8 <TIM_OC1_SetConfig+0xfc>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d00b      	beq.n	80086ac <TIM_OC1_SetConfig+0xb0>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	4a19      	ldr	r2, [pc, #100]	; (80086fc <TIM_OC1_SetConfig+0x100>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d007      	beq.n	80086ac <TIM_OC1_SetConfig+0xb0>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	4a18      	ldr	r2, [pc, #96]	; (8008700 <TIM_OC1_SetConfig+0x104>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d003      	beq.n	80086ac <TIM_OC1_SetConfig+0xb0>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	4a17      	ldr	r2, [pc, #92]	; (8008704 <TIM_OC1_SetConfig+0x108>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d111      	bne.n	80086d0 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	4a16      	ldr	r2, [pc, #88]	; (8008708 <TIM_OC1_SetConfig+0x10c>)
 80086b0:	4013      	ands	r3, r2
 80086b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	4a15      	ldr	r2, [pc, #84]	; (800870c <TIM_OC1_SetConfig+0x110>)
 80086b8:	4013      	ands	r3, r2
 80086ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	695b      	ldr	r3, [r3, #20]
 80086c0:	693a      	ldr	r2, [r7, #16]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	699b      	ldr	r3, [r3, #24]
 80086ca:	693a      	ldr	r2, [r7, #16]
 80086cc:	4313      	orrs	r3, r2
 80086ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	693a      	ldr	r2, [r7, #16]
 80086d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	68fa      	ldr	r2, [r7, #12]
 80086da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	685a      	ldr	r2, [r3, #4]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	697a      	ldr	r2, [r7, #20]
 80086e8:	621a      	str	r2, [r3, #32]
}
 80086ea:	46c0      	nop			; (mov r8, r8)
 80086ec:	46bd      	mov	sp, r7
 80086ee:	b006      	add	sp, #24
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	46c0      	nop			; (mov r8, r8)
 80086f4:	fffeff8f 	.word	0xfffeff8f
 80086f8:	40012c00 	.word	0x40012c00
 80086fc:	40014000 	.word	0x40014000
 8008700:	40014400 	.word	0x40014400
 8008704:	40014800 	.word	0x40014800
 8008708:	fffffeff 	.word	0xfffffeff
 800870c:	fffffdff 	.word	0xfffffdff

08008710 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b086      	sub	sp, #24
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6a1b      	ldr	r3, [r3, #32]
 800871e:	2210      	movs	r2, #16
 8008720:	4393      	bics	r3, r2
 8008722:	001a      	movs	r2, r3
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6a1b      	ldr	r3, [r3, #32]
 800872c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	699b      	ldr	r3, [r3, #24]
 8008738:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	4a2e      	ldr	r2, [pc, #184]	; (80087f8 <TIM_OC2_SetConfig+0xe8>)
 800873e:	4013      	ands	r3, r2
 8008740:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	4a2d      	ldr	r2, [pc, #180]	; (80087fc <TIM_OC2_SetConfig+0xec>)
 8008746:	4013      	ands	r3, r2
 8008748:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	021b      	lsls	r3, r3, #8
 8008750:	68fa      	ldr	r2, [r7, #12]
 8008752:	4313      	orrs	r3, r2
 8008754:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	2220      	movs	r2, #32
 800875a:	4393      	bics	r3, r2
 800875c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	011b      	lsls	r3, r3, #4
 8008764:	697a      	ldr	r2, [r7, #20]
 8008766:	4313      	orrs	r3, r2
 8008768:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4a24      	ldr	r2, [pc, #144]	; (8008800 <TIM_OC2_SetConfig+0xf0>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d10d      	bne.n	800878e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	2280      	movs	r2, #128	; 0x80
 8008776:	4393      	bics	r3, r2
 8008778:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	011b      	lsls	r3, r3, #4
 8008780:	697a      	ldr	r2, [r7, #20]
 8008782:	4313      	orrs	r3, r2
 8008784:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	2240      	movs	r2, #64	; 0x40
 800878a:	4393      	bics	r3, r2
 800878c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	4a1b      	ldr	r2, [pc, #108]	; (8008800 <TIM_OC2_SetConfig+0xf0>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d00b      	beq.n	80087ae <TIM_OC2_SetConfig+0x9e>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	4a1a      	ldr	r2, [pc, #104]	; (8008804 <TIM_OC2_SetConfig+0xf4>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d007      	beq.n	80087ae <TIM_OC2_SetConfig+0x9e>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	4a19      	ldr	r2, [pc, #100]	; (8008808 <TIM_OC2_SetConfig+0xf8>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d003      	beq.n	80087ae <TIM_OC2_SetConfig+0x9e>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	4a18      	ldr	r2, [pc, #96]	; (800880c <TIM_OC2_SetConfig+0xfc>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d113      	bne.n	80087d6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	4a17      	ldr	r2, [pc, #92]	; (8008810 <TIM_OC2_SetConfig+0x100>)
 80087b2:	4013      	ands	r3, r2
 80087b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	4a16      	ldr	r2, [pc, #88]	; (8008814 <TIM_OC2_SetConfig+0x104>)
 80087ba:	4013      	ands	r3, r2
 80087bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	695b      	ldr	r3, [r3, #20]
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	693a      	ldr	r2, [r7, #16]
 80087c6:	4313      	orrs	r3, r2
 80087c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	699b      	ldr	r3, [r3, #24]
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	693a      	ldr	r2, [r7, #16]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	693a      	ldr	r2, [r7, #16]
 80087da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	68fa      	ldr	r2, [r7, #12]
 80087e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	685a      	ldr	r2, [r3, #4]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	697a      	ldr	r2, [r7, #20]
 80087ee:	621a      	str	r2, [r3, #32]
}
 80087f0:	46c0      	nop			; (mov r8, r8)
 80087f2:	46bd      	mov	sp, r7
 80087f4:	b006      	add	sp, #24
 80087f6:	bd80      	pop	{r7, pc}
 80087f8:	feff8fff 	.word	0xfeff8fff
 80087fc:	fffffcff 	.word	0xfffffcff
 8008800:	40012c00 	.word	0x40012c00
 8008804:	40014000 	.word	0x40014000
 8008808:	40014400 	.word	0x40014400
 800880c:	40014800 	.word	0x40014800
 8008810:	fffffbff 	.word	0xfffffbff
 8008814:	fffff7ff 	.word	0xfffff7ff

08008818 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b086      	sub	sp, #24
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6a1b      	ldr	r3, [r3, #32]
 8008826:	4a35      	ldr	r2, [pc, #212]	; (80088fc <TIM_OC3_SetConfig+0xe4>)
 8008828:	401a      	ands	r2, r3
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6a1b      	ldr	r3, [r3, #32]
 8008832:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	69db      	ldr	r3, [r3, #28]
 800883e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	4a2f      	ldr	r2, [pc, #188]	; (8008900 <TIM_OC3_SetConfig+0xe8>)
 8008844:	4013      	ands	r3, r2
 8008846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2203      	movs	r2, #3
 800884c:	4393      	bics	r3, r2
 800884e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	68fa      	ldr	r2, [r7, #12]
 8008856:	4313      	orrs	r3, r2
 8008858:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	4a29      	ldr	r2, [pc, #164]	; (8008904 <TIM_OC3_SetConfig+0xec>)
 800885e:	4013      	ands	r3, r2
 8008860:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	689b      	ldr	r3, [r3, #8]
 8008866:	021b      	lsls	r3, r3, #8
 8008868:	697a      	ldr	r2, [r7, #20]
 800886a:	4313      	orrs	r3, r2
 800886c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	4a25      	ldr	r2, [pc, #148]	; (8008908 <TIM_OC3_SetConfig+0xf0>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d10d      	bne.n	8008892 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	4a24      	ldr	r2, [pc, #144]	; (800890c <TIM_OC3_SetConfig+0xf4>)
 800887a:	4013      	ands	r3, r2
 800887c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	021b      	lsls	r3, r3, #8
 8008884:	697a      	ldr	r2, [r7, #20]
 8008886:	4313      	orrs	r3, r2
 8008888:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	4a20      	ldr	r2, [pc, #128]	; (8008910 <TIM_OC3_SetConfig+0xf8>)
 800888e:	4013      	ands	r3, r2
 8008890:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	4a1c      	ldr	r2, [pc, #112]	; (8008908 <TIM_OC3_SetConfig+0xf0>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d00b      	beq.n	80088b2 <TIM_OC3_SetConfig+0x9a>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	4a1d      	ldr	r2, [pc, #116]	; (8008914 <TIM_OC3_SetConfig+0xfc>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d007      	beq.n	80088b2 <TIM_OC3_SetConfig+0x9a>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	4a1c      	ldr	r2, [pc, #112]	; (8008918 <TIM_OC3_SetConfig+0x100>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d003      	beq.n	80088b2 <TIM_OC3_SetConfig+0x9a>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	4a1b      	ldr	r2, [pc, #108]	; (800891c <TIM_OC3_SetConfig+0x104>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d113      	bne.n	80088da <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	4a1a      	ldr	r2, [pc, #104]	; (8008920 <TIM_OC3_SetConfig+0x108>)
 80088b6:	4013      	ands	r3, r2
 80088b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	4a19      	ldr	r2, [pc, #100]	; (8008924 <TIM_OC3_SetConfig+0x10c>)
 80088be:	4013      	ands	r3, r2
 80088c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	695b      	ldr	r3, [r3, #20]
 80088c6:	011b      	lsls	r3, r3, #4
 80088c8:	693a      	ldr	r2, [r7, #16]
 80088ca:	4313      	orrs	r3, r2
 80088cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	699b      	ldr	r3, [r3, #24]
 80088d2:	011b      	lsls	r3, r3, #4
 80088d4:	693a      	ldr	r2, [r7, #16]
 80088d6:	4313      	orrs	r3, r2
 80088d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	693a      	ldr	r2, [r7, #16]
 80088de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	68fa      	ldr	r2, [r7, #12]
 80088e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	685a      	ldr	r2, [r3, #4]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	697a      	ldr	r2, [r7, #20]
 80088f2:	621a      	str	r2, [r3, #32]
}
 80088f4:	46c0      	nop			; (mov r8, r8)
 80088f6:	46bd      	mov	sp, r7
 80088f8:	b006      	add	sp, #24
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	fffffeff 	.word	0xfffffeff
 8008900:	fffeff8f 	.word	0xfffeff8f
 8008904:	fffffdff 	.word	0xfffffdff
 8008908:	40012c00 	.word	0x40012c00
 800890c:	fffff7ff 	.word	0xfffff7ff
 8008910:	fffffbff 	.word	0xfffffbff
 8008914:	40014000 	.word	0x40014000
 8008918:	40014400 	.word	0x40014400
 800891c:	40014800 	.word	0x40014800
 8008920:	ffffefff 	.word	0xffffefff
 8008924:	ffffdfff 	.word	0xffffdfff

08008928 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b086      	sub	sp, #24
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a1b      	ldr	r3, [r3, #32]
 8008936:	4a28      	ldr	r2, [pc, #160]	; (80089d8 <TIM_OC4_SetConfig+0xb0>)
 8008938:	401a      	ands	r2, r3
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6a1b      	ldr	r3, [r3, #32]
 8008942:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	69db      	ldr	r3, [r3, #28]
 800894e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	4a22      	ldr	r2, [pc, #136]	; (80089dc <TIM_OC4_SetConfig+0xb4>)
 8008954:	4013      	ands	r3, r2
 8008956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	4a21      	ldr	r2, [pc, #132]	; (80089e0 <TIM_OC4_SetConfig+0xb8>)
 800895c:	4013      	ands	r3, r2
 800895e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	021b      	lsls	r3, r3, #8
 8008966:	68fa      	ldr	r2, [r7, #12]
 8008968:	4313      	orrs	r3, r2
 800896a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	4a1d      	ldr	r2, [pc, #116]	; (80089e4 <TIM_OC4_SetConfig+0xbc>)
 8008970:	4013      	ands	r3, r2
 8008972:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	031b      	lsls	r3, r3, #12
 800897a:	693a      	ldr	r2, [r7, #16]
 800897c:	4313      	orrs	r3, r2
 800897e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	4a19      	ldr	r2, [pc, #100]	; (80089e8 <TIM_OC4_SetConfig+0xc0>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d00b      	beq.n	80089a0 <TIM_OC4_SetConfig+0x78>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	4a18      	ldr	r2, [pc, #96]	; (80089ec <TIM_OC4_SetConfig+0xc4>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d007      	beq.n	80089a0 <TIM_OC4_SetConfig+0x78>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	4a17      	ldr	r2, [pc, #92]	; (80089f0 <TIM_OC4_SetConfig+0xc8>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d003      	beq.n	80089a0 <TIM_OC4_SetConfig+0x78>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	4a16      	ldr	r2, [pc, #88]	; (80089f4 <TIM_OC4_SetConfig+0xcc>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d109      	bne.n	80089b4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	4a15      	ldr	r2, [pc, #84]	; (80089f8 <TIM_OC4_SetConfig+0xd0>)
 80089a4:	4013      	ands	r3, r2
 80089a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	695b      	ldr	r3, [r3, #20]
 80089ac:	019b      	lsls	r3, r3, #6
 80089ae:	697a      	ldr	r2, [r7, #20]
 80089b0:	4313      	orrs	r3, r2
 80089b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	697a      	ldr	r2, [r7, #20]
 80089b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	68fa      	ldr	r2, [r7, #12]
 80089be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	685a      	ldr	r2, [r3, #4]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	693a      	ldr	r2, [r7, #16]
 80089cc:	621a      	str	r2, [r3, #32]
}
 80089ce:	46c0      	nop			; (mov r8, r8)
 80089d0:	46bd      	mov	sp, r7
 80089d2:	b006      	add	sp, #24
 80089d4:	bd80      	pop	{r7, pc}
 80089d6:	46c0      	nop			; (mov r8, r8)
 80089d8:	ffffefff 	.word	0xffffefff
 80089dc:	feff8fff 	.word	0xfeff8fff
 80089e0:	fffffcff 	.word	0xfffffcff
 80089e4:	ffffdfff 	.word	0xffffdfff
 80089e8:	40012c00 	.word	0x40012c00
 80089ec:	40014000 	.word	0x40014000
 80089f0:	40014400 	.word	0x40014400
 80089f4:	40014800 	.word	0x40014800
 80089f8:	ffffbfff 	.word	0xffffbfff

080089fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b086      	sub	sp, #24
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6a1b      	ldr	r3, [r3, #32]
 8008a0a:	4a25      	ldr	r2, [pc, #148]	; (8008aa0 <TIM_OC5_SetConfig+0xa4>)
 8008a0c:	401a      	ands	r2, r3
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6a1b      	ldr	r3, [r3, #32]
 8008a16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	4a1f      	ldr	r2, [pc, #124]	; (8008aa4 <TIM_OC5_SetConfig+0xa8>)
 8008a28:	4013      	ands	r3, r2
 8008a2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	68fa      	ldr	r2, [r7, #12]
 8008a32:	4313      	orrs	r3, r2
 8008a34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	4a1b      	ldr	r2, [pc, #108]	; (8008aa8 <TIM_OC5_SetConfig+0xac>)
 8008a3a:	4013      	ands	r3, r2
 8008a3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	041b      	lsls	r3, r3, #16
 8008a44:	693a      	ldr	r2, [r7, #16]
 8008a46:	4313      	orrs	r3, r2
 8008a48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	4a17      	ldr	r2, [pc, #92]	; (8008aac <TIM_OC5_SetConfig+0xb0>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d00b      	beq.n	8008a6a <TIM_OC5_SetConfig+0x6e>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	4a16      	ldr	r2, [pc, #88]	; (8008ab0 <TIM_OC5_SetConfig+0xb4>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d007      	beq.n	8008a6a <TIM_OC5_SetConfig+0x6e>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	4a15      	ldr	r2, [pc, #84]	; (8008ab4 <TIM_OC5_SetConfig+0xb8>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d003      	beq.n	8008a6a <TIM_OC5_SetConfig+0x6e>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	4a14      	ldr	r2, [pc, #80]	; (8008ab8 <TIM_OC5_SetConfig+0xbc>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d109      	bne.n	8008a7e <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	4a0c      	ldr	r2, [pc, #48]	; (8008aa0 <TIM_OC5_SetConfig+0xa4>)
 8008a6e:	4013      	ands	r3, r2
 8008a70:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	695b      	ldr	r3, [r3, #20]
 8008a76:	021b      	lsls	r3, r3, #8
 8008a78:	697a      	ldr	r2, [r7, #20]
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	697a      	ldr	r2, [r7, #20]
 8008a82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	68fa      	ldr	r2, [r7, #12]
 8008a88:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	685a      	ldr	r2, [r3, #4]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	693a      	ldr	r2, [r7, #16]
 8008a96:	621a      	str	r2, [r3, #32]
}
 8008a98:	46c0      	nop			; (mov r8, r8)
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	b006      	add	sp, #24
 8008a9e:	bd80      	pop	{r7, pc}
 8008aa0:	fffeffff 	.word	0xfffeffff
 8008aa4:	fffeff8f 	.word	0xfffeff8f
 8008aa8:	fffdffff 	.word	0xfffdffff
 8008aac:	40012c00 	.word	0x40012c00
 8008ab0:	40014000 	.word	0x40014000
 8008ab4:	40014400 	.word	0x40014400
 8008ab8:	40014800 	.word	0x40014800

08008abc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b086      	sub	sp, #24
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6a1b      	ldr	r3, [r3, #32]
 8008aca:	4a26      	ldr	r2, [pc, #152]	; (8008b64 <TIM_OC6_SetConfig+0xa8>)
 8008acc:	401a      	ands	r2, r3
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6a1b      	ldr	r3, [r3, #32]
 8008ad6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	4a20      	ldr	r2, [pc, #128]	; (8008b68 <TIM_OC6_SetConfig+0xac>)
 8008ae8:	4013      	ands	r3, r2
 8008aea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	021b      	lsls	r3, r3, #8
 8008af2:	68fa      	ldr	r2, [r7, #12]
 8008af4:	4313      	orrs	r3, r2
 8008af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	4a1c      	ldr	r2, [pc, #112]	; (8008b6c <TIM_OC6_SetConfig+0xb0>)
 8008afc:	4013      	ands	r3, r2
 8008afe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	689b      	ldr	r3, [r3, #8]
 8008b04:	051b      	lsls	r3, r3, #20
 8008b06:	693a      	ldr	r2, [r7, #16]
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	4a18      	ldr	r2, [pc, #96]	; (8008b70 <TIM_OC6_SetConfig+0xb4>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d00b      	beq.n	8008b2c <TIM_OC6_SetConfig+0x70>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	4a17      	ldr	r2, [pc, #92]	; (8008b74 <TIM_OC6_SetConfig+0xb8>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d007      	beq.n	8008b2c <TIM_OC6_SetConfig+0x70>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	4a16      	ldr	r2, [pc, #88]	; (8008b78 <TIM_OC6_SetConfig+0xbc>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d003      	beq.n	8008b2c <TIM_OC6_SetConfig+0x70>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	4a15      	ldr	r2, [pc, #84]	; (8008b7c <TIM_OC6_SetConfig+0xc0>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d109      	bne.n	8008b40 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	4a14      	ldr	r2, [pc, #80]	; (8008b80 <TIM_OC6_SetConfig+0xc4>)
 8008b30:	4013      	ands	r3, r2
 8008b32:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	695b      	ldr	r3, [r3, #20]
 8008b38:	029b      	lsls	r3, r3, #10
 8008b3a:	697a      	ldr	r2, [r7, #20]
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	697a      	ldr	r2, [r7, #20]
 8008b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	68fa      	ldr	r2, [r7, #12]
 8008b4a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	685a      	ldr	r2, [r3, #4]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	693a      	ldr	r2, [r7, #16]
 8008b58:	621a      	str	r2, [r3, #32]
}
 8008b5a:	46c0      	nop			; (mov r8, r8)
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	b006      	add	sp, #24
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	46c0      	nop			; (mov r8, r8)
 8008b64:	ffefffff 	.word	0xffefffff
 8008b68:	feff8fff 	.word	0xfeff8fff
 8008b6c:	ffdfffff 	.word	0xffdfffff
 8008b70:	40012c00 	.word	0x40012c00
 8008b74:	40014000 	.word	0x40014000
 8008b78:	40014400 	.word	0x40014400
 8008b7c:	40014800 	.word	0x40014800
 8008b80:	fffbffff 	.word	0xfffbffff

08008b84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b086      	sub	sp, #24
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	60b9      	str	r1, [r7, #8]
 8008b8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	6a1b      	ldr	r3, [r3, #32]
 8008b94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	6a1b      	ldr	r3, [r3, #32]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	4393      	bics	r3, r2
 8008b9e:	001a      	movs	r2, r3
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	699b      	ldr	r3, [r3, #24]
 8008ba8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	22f0      	movs	r2, #240	; 0xf0
 8008bae:	4393      	bics	r3, r2
 8008bb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	011b      	lsls	r3, r3, #4
 8008bb6:	693a      	ldr	r2, [r7, #16]
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	220a      	movs	r2, #10
 8008bc0:	4393      	bics	r3, r2
 8008bc2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008bc4:	697a      	ldr	r2, [r7, #20]
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	693a      	ldr	r2, [r7, #16]
 8008bd0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	697a      	ldr	r2, [r7, #20]
 8008bd6:	621a      	str	r2, [r3, #32]
}
 8008bd8:	46c0      	nop			; (mov r8, r8)
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	b006      	add	sp, #24
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b086      	sub	sp, #24
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	60f8      	str	r0, [r7, #12]
 8008be8:	60b9      	str	r1, [r7, #8]
 8008bea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	6a1b      	ldr	r3, [r3, #32]
 8008bf0:	2210      	movs	r2, #16
 8008bf2:	4393      	bics	r3, r2
 8008bf4:	001a      	movs	r2, r3
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	699b      	ldr	r3, [r3, #24]
 8008bfe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	6a1b      	ldr	r3, [r3, #32]
 8008c04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	4a0d      	ldr	r2, [pc, #52]	; (8008c40 <TIM_TI2_ConfigInputStage+0x60>)
 8008c0a:	4013      	ands	r3, r2
 8008c0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	031b      	lsls	r3, r3, #12
 8008c12:	697a      	ldr	r2, [r7, #20]
 8008c14:	4313      	orrs	r3, r2
 8008c16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	22a0      	movs	r2, #160	; 0xa0
 8008c1c:	4393      	bics	r3, r2
 8008c1e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	011b      	lsls	r3, r3, #4
 8008c24:	693a      	ldr	r2, [r7, #16]
 8008c26:	4313      	orrs	r3, r2
 8008c28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	697a      	ldr	r2, [r7, #20]
 8008c2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	693a      	ldr	r2, [r7, #16]
 8008c34:	621a      	str	r2, [r3, #32]
}
 8008c36:	46c0      	nop			; (mov r8, r8)
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	b006      	add	sp, #24
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	46c0      	nop			; (mov r8, r8)
 8008c40:	ffff0fff 	.word	0xffff0fff

08008c44 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b084      	sub	sp, #16
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	4a08      	ldr	r2, [pc, #32]	; (8008c78 <TIM_ITRx_SetConfig+0x34>)
 8008c58:	4013      	ands	r3, r2
 8008c5a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c5c:	683a      	ldr	r2, [r7, #0]
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	4313      	orrs	r3, r2
 8008c62:	2207      	movs	r2, #7
 8008c64:	4313      	orrs	r3, r2
 8008c66:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	68fa      	ldr	r2, [r7, #12]
 8008c6c:	609a      	str	r2, [r3, #8]
}
 8008c6e:	46c0      	nop			; (mov r8, r8)
 8008c70:	46bd      	mov	sp, r7
 8008c72:	b004      	add	sp, #16
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	46c0      	nop			; (mov r8, r8)
 8008c78:	ffcfff8f 	.word	0xffcfff8f

08008c7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b086      	sub	sp, #24
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	60f8      	str	r0, [r7, #12]
 8008c84:	60b9      	str	r1, [r7, #8]
 8008c86:	607a      	str	r2, [r7, #4]
 8008c88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	4a09      	ldr	r2, [pc, #36]	; (8008cb8 <TIM_ETR_SetConfig+0x3c>)
 8008c94:	4013      	ands	r3, r2
 8008c96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	021a      	lsls	r2, r3, #8
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	431a      	orrs	r2, r3
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	697a      	ldr	r2, [r7, #20]
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	697a      	ldr	r2, [r7, #20]
 8008cae:	609a      	str	r2, [r3, #8]
}
 8008cb0:	46c0      	nop			; (mov r8, r8)
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	b006      	add	sp, #24
 8008cb6:	bd80      	pop	{r7, pc}
 8008cb8:	ffff00ff 	.word	0xffff00ff

08008cbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b086      	sub	sp, #24
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	60f8      	str	r0, [r7, #12]
 8008cc4:	60b9      	str	r1, [r7, #8]
 8008cc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	221f      	movs	r2, #31
 8008ccc:	4013      	ands	r3, r2
 8008cce:	2201      	movs	r2, #1
 8008cd0:	409a      	lsls	r2, r3
 8008cd2:	0013      	movs	r3, r2
 8008cd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	6a1b      	ldr	r3, [r3, #32]
 8008cda:	697a      	ldr	r2, [r7, #20]
 8008cdc:	43d2      	mvns	r2, r2
 8008cde:	401a      	ands	r2, r3
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6a1a      	ldr	r2, [r3, #32]
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	211f      	movs	r1, #31
 8008cec:	400b      	ands	r3, r1
 8008cee:	6879      	ldr	r1, [r7, #4]
 8008cf0:	4099      	lsls	r1, r3
 8008cf2:	000b      	movs	r3, r1
 8008cf4:	431a      	orrs	r2, r3
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	621a      	str	r2, [r3, #32]
}
 8008cfa:	46c0      	nop			; (mov r8, r8)
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	b006      	add	sp, #24
 8008d00:	bd80      	pop	{r7, pc}
	...

08008d04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	223c      	movs	r2, #60	; 0x3c
 8008d12:	5c9b      	ldrb	r3, [r3, r2]
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d101      	bne.n	8008d1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d18:	2302      	movs	r3, #2
 8008d1a:	e055      	b.n	8008dc8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	223c      	movs	r2, #60	; 0x3c
 8008d20:	2101      	movs	r1, #1
 8008d22:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	223d      	movs	r2, #61	; 0x3d
 8008d28:	2102      	movs	r1, #2
 8008d2a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	689b      	ldr	r3, [r3, #8]
 8008d3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a23      	ldr	r2, [pc, #140]	; (8008dd0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d108      	bne.n	8008d58 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	4a22      	ldr	r2, [pc, #136]	; (8008dd4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008d4a:	4013      	ands	r3, r2
 8008d4c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	68fa      	ldr	r2, [r7, #12]
 8008d54:	4313      	orrs	r3, r2
 8008d56:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2270      	movs	r2, #112	; 0x70
 8008d5c:	4393      	bics	r3, r2
 8008d5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	68fa      	ldr	r2, [r7, #12]
 8008d66:	4313      	orrs	r3, r2
 8008d68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	68fa      	ldr	r2, [r7, #12]
 8008d70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a16      	ldr	r2, [pc, #88]	; (8008dd0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d00f      	beq.n	8008d9c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681a      	ldr	r2, [r3, #0]
 8008d80:	2380      	movs	r3, #128	; 0x80
 8008d82:	05db      	lsls	r3, r3, #23
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d009      	beq.n	8008d9c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a12      	ldr	r2, [pc, #72]	; (8008dd8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d004      	beq.n	8008d9c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a11      	ldr	r2, [pc, #68]	; (8008ddc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d10c      	bne.n	8008db6 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	2280      	movs	r2, #128	; 0x80
 8008da0:	4393      	bics	r3, r2
 8008da2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	689b      	ldr	r3, [r3, #8]
 8008da8:	68ba      	ldr	r2, [r7, #8]
 8008daa:	4313      	orrs	r3, r2
 8008dac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	68ba      	ldr	r2, [r7, #8]
 8008db4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	223d      	movs	r2, #61	; 0x3d
 8008dba:	2101      	movs	r1, #1
 8008dbc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	223c      	movs	r2, #60	; 0x3c
 8008dc2:	2100      	movs	r1, #0
 8008dc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008dc6:	2300      	movs	r3, #0
}
 8008dc8:	0018      	movs	r0, r3
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	b004      	add	sp, #16
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	40012c00 	.word	0x40012c00
 8008dd4:	ff0fffff 	.word	0xff0fffff
 8008dd8:	40000400 	.word	0x40000400
 8008ddc:	40014000 	.word	0x40014000

08008de0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008dea:	2300      	movs	r3, #0
 8008dec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	223c      	movs	r2, #60	; 0x3c
 8008df2:	5c9b      	ldrb	r3, [r3, r2]
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d101      	bne.n	8008dfc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008df8:	2302      	movs	r3, #2
 8008dfa:	e079      	b.n	8008ef0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	223c      	movs	r2, #60	; 0x3c
 8008e00:	2101      	movs	r1, #1
 8008e02:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	22ff      	movs	r2, #255	; 0xff
 8008e08:	4393      	bics	r3, r2
 8008e0a:	001a      	movs	r2, r3
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	68db      	ldr	r3, [r3, #12]
 8008e10:	4313      	orrs	r3, r2
 8008e12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	4a38      	ldr	r2, [pc, #224]	; (8008ef8 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8008e18:	401a      	ands	r2, r3
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	689b      	ldr	r3, [r3, #8]
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	4a35      	ldr	r2, [pc, #212]	; (8008efc <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008e26:	401a      	ands	r2, r3
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	4a33      	ldr	r2, [pc, #204]	; (8008f00 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008e34:	401a      	ands	r2, r3
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	4a30      	ldr	r2, [pc, #192]	; (8008f04 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8008e42:	401a      	ands	r2, r3
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	691b      	ldr	r3, [r3, #16]
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	4a2e      	ldr	r2, [pc, #184]	; (8008f08 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8008e50:	401a      	ands	r2, r3
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	695b      	ldr	r3, [r3, #20]
 8008e56:	4313      	orrs	r3, r2
 8008e58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	4a2b      	ldr	r2, [pc, #172]	; (8008f0c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8008e5e:	401a      	ands	r2, r3
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e64:	4313      	orrs	r3, r2
 8008e66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	4a29      	ldr	r2, [pc, #164]	; (8008f10 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8008e6c:	401a      	ands	r2, r3
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	699b      	ldr	r3, [r3, #24]
 8008e72:	041b      	lsls	r3, r3, #16
 8008e74:	4313      	orrs	r3, r2
 8008e76:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a25      	ldr	r2, [pc, #148]	; (8008f14 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d106      	bne.n	8008e90 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	4a24      	ldr	r2, [pc, #144]	; (8008f18 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008e86:	401a      	ands	r2, r3
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	69db      	ldr	r3, [r3, #28]
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a1f      	ldr	r2, [pc, #124]	; (8008f14 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d121      	bne.n	8008ede <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	4a1f      	ldr	r2, [pc, #124]	; (8008f1c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008e9e:	401a      	ands	r2, r3
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ea4:	051b      	lsls	r3, r3, #20
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	4a1c      	ldr	r2, [pc, #112]	; (8008f20 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8008eae:	401a      	ands	r2, r3
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	6a1b      	ldr	r3, [r3, #32]
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	4a1a      	ldr	r2, [pc, #104]	; (8008f24 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8008ebc:	401a      	ands	r2, r3
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a12      	ldr	r2, [pc, #72]	; (8008f14 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d106      	bne.n	8008ede <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	4a15      	ldr	r2, [pc, #84]	; (8008f28 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8008ed4:	401a      	ands	r2, r3
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eda:	4313      	orrs	r3, r2
 8008edc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	68fa      	ldr	r2, [r7, #12]
 8008ee4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	223c      	movs	r2, #60	; 0x3c
 8008eea:	2100      	movs	r1, #0
 8008eec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008eee:	2300      	movs	r3, #0
}
 8008ef0:	0018      	movs	r0, r3
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	b004      	add	sp, #16
 8008ef6:	bd80      	pop	{r7, pc}
 8008ef8:	fffffcff 	.word	0xfffffcff
 8008efc:	fffffbff 	.word	0xfffffbff
 8008f00:	fffff7ff 	.word	0xfffff7ff
 8008f04:	ffffefff 	.word	0xffffefff
 8008f08:	ffffdfff 	.word	0xffffdfff
 8008f0c:	ffffbfff 	.word	0xffffbfff
 8008f10:	fff0ffff 	.word	0xfff0ffff
 8008f14:	40012c00 	.word	0x40012c00
 8008f18:	efffffff 	.word	0xefffffff
 8008f1c:	ff0fffff 	.word	0xff0fffff
 8008f20:	feffffff 	.word	0xfeffffff
 8008f24:	fdffffff 	.word	0xfdffffff
 8008f28:	dfffffff 	.word	0xdfffffff

08008f2c <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b08a      	sub	sp, #40	; 0x28
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	60f8      	str	r0, [r7, #12]
 8008f34:	60b9      	str	r1, [r7, #8]
 8008f36:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	223c      	movs	r2, #60	; 0x3c
 8008f3c:	5c9b      	ldrb	r3, [r3, r2]
 8008f3e:	2b01      	cmp	r3, #1
 8008f40:	d101      	bne.n	8008f46 <HAL_TIMEx_ConfigBreakInput+0x1a>
 8008f42:	2302      	movs	r3, #2
 8008f44:	e08e      	b.n	8009064 <HAL_TIMEx_ConfigBreakInput+0x138>
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	223c      	movs	r2, #60	; 0x3c
 8008f4a:	2101      	movs	r1, #1
 8008f4c:	5499      	strb	r1, [r3, r2]

  switch (sBreakInputConfig->Source)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	2b04      	cmp	r3, #4
 8008f54:	d019      	beq.n	8008f8a <HAL_TIMEx_ConfigBreakInput+0x5e>
 8008f56:	d822      	bhi.n	8008f9e <HAL_TIMEx_ConfigBreakInput+0x72>
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	d002      	beq.n	8008f62 <HAL_TIMEx_ConfigBreakInput+0x36>
 8008f5c:	2b02      	cmp	r3, #2
 8008f5e:	d00a      	beq.n	8008f76 <HAL_TIMEx_ConfigBreakInput+0x4a>
 8008f60:	e01d      	b.n	8008f9e <HAL_TIMEx_ConfigBreakInput+0x72>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 8008f62:	2301      	movs	r3, #1
 8008f64:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 8008f66:	2300      	movs	r3, #0
 8008f68:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 8008f6a:	2380      	movs	r3, #128	; 0x80
 8008f6c:	009b      	lsls	r3, r3, #2
 8008f6e:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 8008f70:	2309      	movs	r3, #9
 8008f72:	61bb      	str	r3, [r7, #24]
      break;
 8008f74:	e01c      	b.n	8008fb0 <HAL_TIMEx_ConfigBreakInput+0x84>
    }
#if defined(COMP1) && defined(COMP2)
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 8008f76:	2302      	movs	r3, #2
 8008f78:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 8008f7e:	2380      	movs	r3, #128	; 0x80
 8008f80:	00db      	lsls	r3, r3, #3
 8008f82:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 8008f84:	230a      	movs	r3, #10
 8008f86:	61bb      	str	r3, [r7, #24]
      break;
 8008f88:	e012      	b.n	8008fb0 <HAL_TIMEx_ConfigBreakInput+0x84>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 8008f8a:	2304      	movs	r3, #4
 8008f8c:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 8008f8e:	2302      	movs	r3, #2
 8008f90:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 8008f92:	2380      	movs	r3, #128	; 0x80
 8008f94:	011b      	lsls	r3, r3, #4
 8008f96:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 8008f98:	230b      	movs	r3, #11
 8008f9a:	61bb      	str	r3, [r7, #24]
      break;
 8008f9c:	e008      	b.n	8008fb0 <HAL_TIMEx_ConfigBreakInput+0x84>
    }
#endif /* COMP3 */

    default:
    {
      bkin_enable_mask = 0U;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_polarity_mask = 0U;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = 0U;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 8008faa:	2300      	movs	r3, #0
 8008fac:	61bb      	str	r3, [r7, #24]
      break;
 8008fae:	46c0      	nop			; (mov r8, r8)
    }
  }

  switch (BreakInput)
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	2b01      	cmp	r3, #1
 8008fb4:	d003      	beq.n	8008fbe <HAL_TIMEx_ConfigBreakInput+0x92>
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	2b02      	cmp	r3, #2
 8008fba:	d027      	beq.n	800900c <HAL_TIMEx_ConfigBreakInput+0xe0>
      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
      break;
    }
    default:
      break;
 8008fbc:	e04d      	b.n	800905a <HAL_TIMEx_ConfigBreakInput+0x12e>
      tmporx = htim->Instance->AF1;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fc4:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 8008fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc8:	43da      	mvns	r2, r3
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	4013      	ands	r3, r2
 8008fce:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	685a      	ldr	r2, [r3, #4]
 8008fd4:	69fb      	ldr	r3, [r7, #28]
 8008fd6:	409a      	lsls	r2, r3
 8008fd8:	0013      	movs	r3, r2
 8008fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fdc:	4013      	ands	r3, r2
 8008fde:	697a      	ldr	r2, [r7, #20]
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 8008fe4:	6a3b      	ldr	r3, [r7, #32]
 8008fe6:	43da      	mvns	r2, r3
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	4013      	ands	r3, r2
 8008fec:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	689a      	ldr	r2, [r3, #8]
 8008ff2:	69bb      	ldr	r3, [r7, #24]
 8008ff4:	409a      	lsls	r2, r3
 8008ff6:	0013      	movs	r3, r2
 8008ff8:	6a3a      	ldr	r2, [r7, #32]
 8008ffa:	4013      	ands	r3, r2
 8008ffc:	697a      	ldr	r2, [r7, #20]
 8008ffe:	4313      	orrs	r3, r2
 8009000:	617b      	str	r3, [r7, #20]
      htim->Instance->AF1 = tmporx;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	697a      	ldr	r2, [r7, #20]
 8009008:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 800900a:	e026      	b.n	800905a <HAL_TIMEx_ConfigBreakInput+0x12e>
      tmporx = htim->Instance->AF2;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009012:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 8009014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009016:	43da      	mvns	r2, r3
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	4013      	ands	r3, r2
 800901c:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	685a      	ldr	r2, [r3, #4]
 8009022:	69fb      	ldr	r3, [r7, #28]
 8009024:	409a      	lsls	r2, r3
 8009026:	0013      	movs	r3, r2
 8009028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800902a:	4013      	ands	r3, r2
 800902c:	697a      	ldr	r2, [r7, #20]
 800902e:	4313      	orrs	r3, r2
 8009030:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 8009032:	6a3b      	ldr	r3, [r7, #32]
 8009034:	43da      	mvns	r2, r3
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	4013      	ands	r3, r2
 800903a:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	689a      	ldr	r2, [r3, #8]
 8009040:	69bb      	ldr	r3, [r7, #24]
 8009042:	409a      	lsls	r2, r3
 8009044:	0013      	movs	r3, r2
 8009046:	6a3a      	ldr	r2, [r7, #32]
 8009048:	4013      	ands	r3, r2
 800904a:	697a      	ldr	r2, [r7, #20]
 800904c:	4313      	orrs	r3, r2
 800904e:	617b      	str	r3, [r7, #20]
      htim->Instance->AF2 = tmporx;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	697a      	ldr	r2, [r7, #20]
 8009056:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 8009058:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	223c      	movs	r2, #60	; 0x3c
 800905e:	2100      	movs	r1, #0
 8009060:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009062:	2300      	movs	r3, #0
}
 8009064:	0018      	movs	r0, r3
 8009066:	46bd      	mov	sp, r7
 8009068:	b00a      	add	sp, #40	; 0x28
 800906a:	bd80      	pop	{r7, pc}

0800906c <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b082      	sub	sp, #8
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d101      	bne.n	800907e <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800907a:	2301      	movs	r3, #1
 800907c:	e03f      	b.n	80090fe <HAL_USART_Init+0x92>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2259      	movs	r2, #89	; 0x59
 8009082:	5c9b      	ldrb	r3, [r3, r2]
 8009084:	b2db      	uxtb	r3, r3
 8009086:	2b00      	cmp	r3, #0
 8009088:	d107      	bne.n	800909a <HAL_USART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2258      	movs	r2, #88	; 0x58
 800908e:	2100      	movs	r1, #0
 8009090:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	0018      	movs	r0, r3
 8009096:	f7f9 fd95 	bl	8002bc4 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2259      	movs	r2, #89	; 0x59
 800909e:	2102      	movs	r1, #2
 80090a0:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	2101      	movs	r1, #1
 80090ae:	438a      	bics	r2, r1
 80090b0:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	0018      	movs	r0, r3
 80090b6:	f000 fbdb 	bl	8009870 <USART_SetConfig>
 80090ba:	0003      	movs	r3, r0
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d101      	bne.n	80090c4 <HAL_USART_Init+0x58>
  {
    return HAL_ERROR;
 80090c0:	2301      	movs	r3, #1
 80090c2:	e01c      	b.n	80090fe <HAL_USART_Init+0x92>
  }

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	685a      	ldr	r2, [r3, #4]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	490e      	ldr	r1, [pc, #56]	; (8009108 <HAL_USART_Init+0x9c>)
 80090d0:	400a      	ands	r2, r1
 80090d2:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	689a      	ldr	r2, [r3, #8]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	212a      	movs	r1, #42	; 0x2a
 80090e0:	438a      	bics	r2, r1
 80090e2:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	2101      	movs	r1, #1
 80090f0:	430a      	orrs	r2, r1
 80090f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	0018      	movs	r0, r3
 80090f8:	f000 fe56 	bl	8009da8 <USART_CheckIdleState>
 80090fc:	0003      	movs	r3, r0
}
 80090fe:	0018      	movs	r0, r3
 8009100:	46bd      	mov	sp, r7
 8009102:	b002      	add	sp, #8
 8009104:	bd80      	pop	{r7, pc}
 8009106:	46c0      	nop			; (mov r8, r8)
 8009108:	ffffbfff 	.word	0xffffbfff

0800910c <HAL_USART_Transmit>:
  * @param  Size Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b08a      	sub	sp, #40	; 0x28
 8009110:	af02      	add	r7, sp, #8
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	603b      	str	r3, [r7, #0]
 8009118:	1dbb      	adds	r3, r7, #6
 800911a:	801a      	strh	r2, [r3, #0]
  uint8_t  *ptxdata8bits;
  uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2259      	movs	r2, #89	; 0x59
 8009120:	5c9b      	ldrb	r3, [r3, r2]
 8009122:	b2db      	uxtb	r3, r3
 8009124:	2b01      	cmp	r3, #1
 8009126:	d000      	beq.n	800912a <HAL_USART_Transmit+0x1e>
 8009128:	e0a9      	b.n	800927e <HAL_USART_Transmit+0x172>
  {
    if ((pTxData == NULL) || (Size == 0U))
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d003      	beq.n	8009138 <HAL_USART_Transmit+0x2c>
 8009130:	1dbb      	adds	r3, r7, #6
 8009132:	881b      	ldrh	r3, [r3, #0]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d101      	bne.n	800913c <HAL_USART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009138:	2301      	movs	r3, #1
 800913a:	e0a1      	b.n	8009280 <HAL_USART_Transmit+0x174>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	689a      	ldr	r2, [r3, #8]
 8009140:	2380      	movs	r3, #128	; 0x80
 8009142:	015b      	lsls	r3, r3, #5
 8009144:	429a      	cmp	r2, r3
 8009146:	d109      	bne.n	800915c <HAL_USART_Transmit+0x50>
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	691b      	ldr	r3, [r3, #16]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d105      	bne.n	800915c <HAL_USART_Transmit+0x50>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	2201      	movs	r2, #1
 8009154:	4013      	ands	r3, r2
 8009156:	d001      	beq.n	800915c <HAL_USART_Transmit+0x50>
      {
        return  HAL_ERROR;
 8009158:	2301      	movs	r3, #1
 800915a:	e091      	b.n	8009280 <HAL_USART_Transmit+0x174>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2258      	movs	r2, #88	; 0x58
 8009160:	5c9b      	ldrb	r3, [r3, r2]
 8009162:	2b01      	cmp	r3, #1
 8009164:	d101      	bne.n	800916a <HAL_USART_Transmit+0x5e>
 8009166:	2302      	movs	r3, #2
 8009168:	e08a      	b.n	8009280 <HAL_USART_Transmit+0x174>
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2258      	movs	r2, #88	; 0x58
 800916e:	2101      	movs	r1, #1
 8009170:	5499      	strb	r1, [r3, r2]

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2200      	movs	r2, #0
 8009176:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2259      	movs	r2, #89	; 0x59
 800917c:	2112      	movs	r1, #18
 800917e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009180:	f7f9 ff9a 	bl	80030b8 <HAL_GetTick>
 8009184:	0003      	movs	r3, r0
 8009186:	617b      	str	r3, [r7, #20]

    husart->TxXferSize = Size;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	1dba      	adds	r2, r7, #6
 800918c:	8812      	ldrh	r2, [r2, #0]
 800918e:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	1dba      	adds	r2, r7, #6
 8009194:	8812      	ldrh	r2, [r2, #0]
 8009196:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	689a      	ldr	r2, [r3, #8]
 800919c:	2380      	movs	r3, #128	; 0x80
 800919e:	015b      	lsls	r3, r3, #5
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d108      	bne.n	80091b6 <HAL_USART_Transmit+0xaa>
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	691b      	ldr	r3, [r3, #16]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d104      	bne.n	80091b6 <HAL_USART_Transmit+0xaa>
    {
      ptxdata8bits  = NULL;
 80091ac:	2300      	movs	r3, #0
 80091ae:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (uint16_t *) pTxData;
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	61bb      	str	r3, [r7, #24]
 80091b4:	e003      	b.n	80091be <HAL_USART_Transmit+0xb2>
    }
    else
    {
      ptxdata8bits  = pTxData;
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 80091ba:	2300      	movs	r3, #0
 80091bc:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 80091be:	e02a      	b.n	8009216 <HAL_USART_Transmit+0x10a>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80091c0:	697a      	ldr	r2, [r7, #20]
 80091c2:	68f8      	ldr	r0, [r7, #12]
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	9300      	str	r3, [sp, #0]
 80091c8:	0013      	movs	r3, r2
 80091ca:	2200      	movs	r2, #0
 80091cc:	2180      	movs	r1, #128	; 0x80
 80091ce:	f000 fb19 	bl	8009804 <USART_WaitOnFlagUntilTimeout>
 80091d2:	1e03      	subs	r3, r0, #0
 80091d4:	d001      	beq.n	80091da <HAL_USART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 80091d6:	2303      	movs	r3, #3
 80091d8:	e052      	b.n	8009280 <HAL_USART_Transmit+0x174>
      }
      if (ptxdata8bits == NULL)
 80091da:	69fb      	ldr	r3, [r7, #28]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d10b      	bne.n	80091f8 <HAL_USART_Transmit+0xec>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 80091e0:	69bb      	ldr	r3, [r7, #24]
 80091e2:	881b      	ldrh	r3, [r3, #0]
 80091e4:	001a      	movs	r2, r3
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	05d2      	lsls	r2, r2, #23
 80091ec:	0dd2      	lsrs	r2, r2, #23
 80091ee:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 80091f0:	69bb      	ldr	r3, [r7, #24]
 80091f2:	3302      	adds	r3, #2
 80091f4:	61bb      	str	r3, [r7, #24]
 80091f6:	e007      	b.n	8009208 <HAL_USART_Transmit+0xfc>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 80091f8:	69fb      	ldr	r3, [r7, #28]
 80091fa:	781a      	ldrb	r2, [r3, #0]
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 8009202:	69fb      	ldr	r3, [r7, #28]
 8009204:	3301      	adds	r3, #1
 8009206:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800920c:	b29b      	uxth	r3, r3
 800920e:	3b01      	subs	r3, #1
 8009210:	b29a      	uxth	r2, r3
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (husart->TxXferCount > 0U)
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800921a:	b29b      	uxth	r3, r3
 800921c:	2b00      	cmp	r3, #0
 800921e:	d1cf      	bne.n	80091c0 <HAL_USART_Transmit+0xb4>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009220:	697a      	ldr	r2, [r7, #20]
 8009222:	68f8      	ldr	r0, [r7, #12]
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	9300      	str	r3, [sp, #0]
 8009228:	0013      	movs	r3, r2
 800922a:	2200      	movs	r2, #0
 800922c:	2140      	movs	r1, #64	; 0x40
 800922e:	f000 fae9 	bl	8009804 <USART_WaitOnFlagUntilTimeout>
 8009232:	1e03      	subs	r3, r0, #0
 8009234:	d001      	beq.n	800923a <HAL_USART_Transmit+0x12e>
    {
      return HAL_TIMEOUT;
 8009236:	2303      	movs	r3, #3
 8009238:	e022      	b.n	8009280 <HAL_USART_Transmit+0x174>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	2240      	movs	r2, #64	; 0x40
 8009240:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	2208      	movs	r2, #8
 8009248:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	699a      	ldr	r2, [r3, #24]
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	2108      	movs	r1, #8
 8009256:	430a      	orrs	r2, r1
 8009258:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	699a      	ldr	r2, [r3, #24]
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	2110      	movs	r1, #16
 8009266:	430a      	orrs	r2, r1
 8009268:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2259      	movs	r2, #89	; 0x59
 800926e:	2101      	movs	r1, #1
 8009270:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	2258      	movs	r2, #88	; 0x58
 8009276:	2100      	movs	r1, #0
 8009278:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800927a:	2300      	movs	r3, #0
 800927c:	e000      	b.n	8009280 <HAL_USART_Transmit+0x174>
  }
  else
  {
    return HAL_BUSY;
 800927e:	2302      	movs	r3, #2
  }
}
 8009280:	0018      	movs	r0, r3
 8009282:	46bd      	mov	sp, r7
 8009284:	b008      	add	sp, #32
 8009286:	bd80      	pop	{r7, pc}

08009288 <HAL_USART_Transmit_DMA>:
  * @param  pTxData pointer to data buffer (u8 or u16 data elements).
  * @param  Size amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit_DMA(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size)
{
 8009288:	b590      	push	{r4, r7, lr}
 800928a:	b087      	sub	sp, #28
 800928c:	af00      	add	r7, sp, #0
 800928e:	60f8      	str	r0, [r7, #12]
 8009290:	60b9      	str	r1, [r7, #8]
 8009292:	1dbb      	adds	r3, r7, #6
 8009294:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009296:	2317      	movs	r3, #23
 8009298:	18fb      	adds	r3, r7, r3
 800929a:	2200      	movs	r2, #0
 800929c:	701a      	strb	r2, [r3, #0]
  uint32_t *tmp;

  if (husart->State == HAL_USART_STATE_READY)
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2259      	movs	r2, #89	; 0x59
 80092a2:	5c9b      	ldrb	r3, [r3, r2]
 80092a4:	b2db      	uxtb	r3, r3
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d000      	beq.n	80092ac <HAL_USART_Transmit_DMA+0x24>
 80092aa:	e07d      	b.n	80093a8 <HAL_USART_Transmit_DMA+0x120>
  {
    if ((pTxData == NULL) || (Size == 0U))
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d003      	beq.n	80092ba <HAL_USART_Transmit_DMA+0x32>
 80092b2:	1dbb      	adds	r3, r7, #6
 80092b4:	881b      	ldrh	r3, [r3, #0]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d101      	bne.n	80092be <HAL_USART_Transmit_DMA+0x36>
    {
      return HAL_ERROR;
 80092ba:	2301      	movs	r3, #1
 80092bc:	e075      	b.n	80093aa <HAL_USART_Transmit_DMA+0x122>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	689a      	ldr	r2, [r3, #8]
 80092c2:	2380      	movs	r3, #128	; 0x80
 80092c4:	015b      	lsls	r3, r3, #5
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d10a      	bne.n	80092e0 <HAL_USART_Transmit_DMA+0x58>
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	691b      	ldr	r3, [r3, #16]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d106      	bne.n	80092e0 <HAL_USART_Transmit_DMA+0x58>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	001a      	movs	r2, r3
 80092d6:	2301      	movs	r3, #1
 80092d8:	4013      	ands	r3, r2
 80092da:	d001      	beq.n	80092e0 <HAL_USART_Transmit_DMA+0x58>
      {
        return  HAL_ERROR;
 80092dc:	2301      	movs	r3, #1
 80092de:	e064      	b.n	80093aa <HAL_USART_Transmit_DMA+0x122>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2258      	movs	r2, #88	; 0x58
 80092e4:	5c9b      	ldrb	r3, [r3, r2]
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d101      	bne.n	80092ee <HAL_USART_Transmit_DMA+0x66>
 80092ea:	2302      	movs	r3, #2
 80092ec:	e05d      	b.n	80093aa <HAL_USART_Transmit_DMA+0x122>
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2258      	movs	r2, #88	; 0x58
 80092f2:	2101      	movs	r1, #1
 80092f4:	5499      	strb	r1, [r3, r2]

    husart->pTxBuffPtr = pTxData;
 80092f6:	68ba      	ldr	r2, [r7, #8]
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	629a      	str	r2, [r3, #40]	; 0x28
    husart->TxXferSize = Size;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	1dba      	adds	r2, r7, #6
 8009300:	8812      	ldrh	r2, [r2, #0]
 8009302:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	1dba      	adds	r2, r7, #6
 8009308:	8812      	ldrh	r2, [r2, #0]
 800930a:	85da      	strh	r2, [r3, #46]	; 0x2e

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2200      	movs	r2, #0
 8009310:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	2259      	movs	r2, #89	; 0x59
 8009316:	2112      	movs	r1, #18
 8009318:	5499      	strb	r1, [r3, r2]

    if (husart->hdmatx != NULL)
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800931e:	2b00      	cmp	r3, #0
 8009320:	d01e      	beq.n	8009360 <HAL_USART_Transmit_DMA+0xd8>
    {
      /* Set the USART DMA transfer complete callback */
      husart->hdmatx->XferCpltCallback = USART_DMATransmitCplt;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009326:	4a23      	ldr	r2, [pc, #140]	; (80093b4 <HAL_USART_Transmit_DMA+0x12c>)
 8009328:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the USART DMA Half transfer complete callback */
      husart->hdmatx->XferHalfCpltCallback = USART_DMATxHalfCplt;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800932e:	4a22      	ldr	r2, [pc, #136]	; (80093b8 <HAL_USART_Transmit_DMA+0x130>)
 8009330:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      husart->hdmatx->XferErrorCallback = USART_DMAError;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009336:	4a21      	ldr	r2, [pc, #132]	; (80093bc <HAL_USART_Transmit_DMA+0x134>)
 8009338:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the USART transmit DMA channel */
      tmp = (uint32_t *)&pTxData;
 800933a:	2308      	movs	r3, #8
 800933c:	18fb      	adds	r3, r7, r3
 800933e:	613b      	str	r3, [r7, #16]
      status = HAL_DMA_Start_IT(husart->hdmatx, *(uint32_t *)tmp, (uint32_t)&husart->Instance->TDR, Size);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	6819      	ldr	r1, [r3, #0]
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	3328      	adds	r3, #40	; 0x28
 800934e:	001a      	movs	r2, r3
 8009350:	1dbb      	adds	r3, r7, #6
 8009352:	881b      	ldrh	r3, [r3, #0]
 8009354:	2417      	movs	r4, #23
 8009356:	193c      	adds	r4, r7, r4
 8009358:	f7fa faba 	bl	80038d0 <HAL_DMA_Start_IT>
 800935c:	0003      	movs	r3, r0
 800935e:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8009360:	2317      	movs	r3, #23
 8009362:	18fb      	adds	r3, r7, r3
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d111      	bne.n	800938e <HAL_USART_Transmit_DMA+0x106>
    {
      /* Clear the TC flag in the ICR register */
      __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	2240      	movs	r2, #64	; 0x40
 8009370:	621a      	str	r2, [r3, #32]

      /* Process Unlocked */
      __HAL_UNLOCK(husart);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2258      	movs	r2, #88	; 0x58
 8009376:	2100      	movs	r1, #0
 8009378:	5499      	strb	r1, [r3, r2]

      /* Enable the DMA transfer for transmit request by setting the DMAT bit
         in the USART CR3 register */
      SET_BIT(husart->Instance->CR3, USART_CR3_DMAT);
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	689a      	ldr	r2, [r3, #8]
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	2180      	movs	r1, #128	; 0x80
 8009386:	430a      	orrs	r2, r1
 8009388:	609a      	str	r2, [r3, #8]

      return HAL_OK;
 800938a:	2300      	movs	r3, #0
 800938c:	e00d      	b.n	80093aa <HAL_USART_Transmit_DMA+0x122>
    }
    else
    {
      /* Set error code to DMA */
      husart->ErrorCode = HAL_USART_ERROR_DMA;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2210      	movs	r2, #16
 8009392:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Process Unlocked */
      __HAL_UNLOCK(husart);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2258      	movs	r2, #88	; 0x58
 8009398:	2100      	movs	r1, #0
 800939a:	5499      	strb	r1, [r3, r2]

      /* Restore husart->State to ready */
      husart->State = HAL_USART_STATE_READY;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2259      	movs	r2, #89	; 0x59
 80093a0:	2101      	movs	r1, #1
 80093a2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80093a4:	2301      	movs	r3, #1
 80093a6:	e000      	b.n	80093aa <HAL_USART_Transmit_DMA+0x122>
    }
  }
  else
  {
    return HAL_BUSY;
 80093a8:	2302      	movs	r3, #2
  }
}
 80093aa:	0018      	movs	r0, r3
 80093ac:	46bd      	mov	sp, r7
 80093ae:	b007      	add	sp, #28
 80093b0:	bd90      	pop	{r4, r7, pc}
 80093b2:	46c0      	nop			; (mov r8, r8)
 80093b4:	0800970d 	.word	0x0800970d
 80093b8:	08009777 	.word	0x08009777
 80093bc:	08009795 	.word	0x08009795

080093c0 <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b088      	sub	sp, #32
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	69db      	ldr	r3, [r3, #28]
 80093ce:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	689b      	ldr	r3, [r3, #8]
 80093de:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_UDR));
 80093e0:	69fb      	ldr	r3, [r7, #28]
 80093e2:	4aab      	ldr	r2, [pc, #684]	; (8009690 <HAL_USART_IRQHandler+0x2d0>)
 80093e4:	4013      	ands	r3, r2
 80093e6:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d117      	bne.n	800941e <HAL_USART_IRQHandler+0x5e>
  {
    /* USART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80093ee:	69fb      	ldr	r3, [r7, #28]
 80093f0:	2220      	movs	r2, #32
 80093f2:	4013      	ands	r3, r2
 80093f4:	d013      	beq.n	800941e <HAL_USART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80093f6:	69bb      	ldr	r3, [r7, #24]
 80093f8:	2220      	movs	r2, #32
 80093fa:	4013      	ands	r3, r2
 80093fc:	d104      	bne.n	8009408 <HAL_USART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80093fe:	697a      	ldr	r2, [r7, #20]
 8009400:	2380      	movs	r3, #128	; 0x80
 8009402:	055b      	lsls	r3, r3, #21
 8009404:	4013      	ands	r3, r2
 8009406:	d00a      	beq.n	800941e <HAL_USART_IRQHandler+0x5e>
    {
      if (husart->RxISR != NULL)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800940c:	2b00      	cmp	r3, #0
 800940e:	d100      	bne.n	8009412 <HAL_USART_IRQHandler+0x52>
 8009410:	e135      	b.n	800967e <HAL_USART_IRQHandler+0x2be>
      {
        husart->RxISR(husart);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	0010      	movs	r0, r2
 800941a:	4798      	blx	r3
      }
      return;
 800941c:	e12f      	b.n	800967e <HAL_USART_IRQHandler+0x2be>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d100      	bne.n	8009426 <HAL_USART_IRQHandler+0x66>
 8009424:	e0eb      	b.n	80095fe <HAL_USART_IRQHandler+0x23e>
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	4a9a      	ldr	r2, [pc, #616]	; (8009694 <HAL_USART_IRQHandler+0x2d4>)
 800942a:	4013      	ands	r3, r2
 800942c:	d105      	bne.n	800943a <HAL_USART_IRQHandler+0x7a>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
 800942e:	69ba      	ldr	r2, [r7, #24]
 8009430:	2390      	movs	r3, #144	; 0x90
 8009432:	005b      	lsls	r3, r3, #1
 8009434:	4013      	ands	r3, r2
 8009436:	d100      	bne.n	800943a <HAL_USART_IRQHandler+0x7a>
 8009438:	e0e1      	b.n	80095fe <HAL_USART_IRQHandler+0x23e>
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800943a:	69fb      	ldr	r3, [r7, #28]
 800943c:	2201      	movs	r2, #1
 800943e:	4013      	ands	r3, r2
 8009440:	d00e      	beq.n	8009460 <HAL_USART_IRQHandler+0xa0>
 8009442:	69ba      	ldr	r2, [r7, #24]
 8009444:	2380      	movs	r3, #128	; 0x80
 8009446:	005b      	lsls	r3, r3, #1
 8009448:	4013      	ands	r3, r2
 800944a:	d009      	beq.n	8009460 <HAL_USART_IRQHandler+0xa0>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	2201      	movs	r2, #1
 8009452:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009458:	2201      	movs	r2, #1
 800945a:	431a      	orrs	r2, r3
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009460:	69fb      	ldr	r3, [r7, #28]
 8009462:	2202      	movs	r2, #2
 8009464:	4013      	ands	r3, r2
 8009466:	d00d      	beq.n	8009484 <HAL_USART_IRQHandler+0xc4>
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	2201      	movs	r2, #1
 800946c:	4013      	ands	r3, r2
 800946e:	d009      	beq.n	8009484 <HAL_USART_IRQHandler+0xc4>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	2202      	movs	r2, #2
 8009476:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800947c:	2204      	movs	r2, #4
 800947e:	431a      	orrs	r2, r3
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009484:	69fb      	ldr	r3, [r7, #28]
 8009486:	2204      	movs	r2, #4
 8009488:	4013      	ands	r3, r2
 800948a:	d00d      	beq.n	80094a8 <HAL_USART_IRQHandler+0xe8>
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	2201      	movs	r2, #1
 8009490:	4013      	ands	r3, r2
 8009492:	d009      	beq.n	80094a8 <HAL_USART_IRQHandler+0xe8>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	2204      	movs	r2, #4
 800949a:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094a0:	2202      	movs	r2, #2
 80094a2:	431a      	orrs	r2, r3
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80094a8:	69fb      	ldr	r3, [r7, #28]
 80094aa:	2208      	movs	r2, #8
 80094ac:	4013      	ands	r3, r2
 80094ae:	d011      	beq.n	80094d4 <HAL_USART_IRQHandler+0x114>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80094b0:	69bb      	ldr	r3, [r7, #24]
 80094b2:	2220      	movs	r2, #32
 80094b4:	4013      	ands	r3, r2
 80094b6:	d103      	bne.n	80094c0 <HAL_USART_IRQHandler+0x100>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	4a76      	ldr	r2, [pc, #472]	; (8009694 <HAL_USART_IRQHandler+0x2d4>)
 80094bc:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80094be:	d009      	beq.n	80094d4 <HAL_USART_IRQHandler+0x114>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	2208      	movs	r2, #8
 80094c6:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094cc:	2208      	movs	r2, #8
 80094ce:	431a      	orrs	r2, r3
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART SPI slave underrun error interrupt occurred -------------------------*/
    if (((isrflags & USART_ISR_UDR) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80094d4:	69fa      	ldr	r2, [r7, #28]
 80094d6:	2380      	movs	r3, #128	; 0x80
 80094d8:	019b      	lsls	r3, r3, #6
 80094da:	4013      	ands	r3, r2
 80094dc:	d01a      	beq.n	8009514 <HAL_USART_IRQHandler+0x154>
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	2201      	movs	r2, #1
 80094e2:	4013      	ands	r3, r2
 80094e4:	d016      	beq.n	8009514 <HAL_USART_IRQHandler+0x154>
    {
      /* Ignore SPI slave underrun errors when reception is going on */
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2259      	movs	r2, #89	; 0x59
 80094ea:	5c9b      	ldrb	r3, [r3, r2]
 80094ec:	b2db      	uxtb	r3, r3
 80094ee:	2b22      	cmp	r3, #34	; 0x22
 80094f0:	d105      	bne.n	80094fe <HAL_USART_IRQHandler+0x13e>
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	2280      	movs	r2, #128	; 0x80
 80094f8:	0192      	lsls	r2, r2, #6
 80094fa:	621a      	str	r2, [r3, #32]
        return;
 80094fc:	e0c4      	b.n	8009688 <HAL_USART_IRQHandler+0x2c8>
      }
      else
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	2280      	movs	r2, #128	; 0x80
 8009504:	0192      	lsls	r2, r2, #6
 8009506:	621a      	str	r2, [r3, #32]
        husart->ErrorCode |= HAL_USART_ERROR_UDR;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800950c:	2220      	movs	r2, #32
 800950e:	431a      	orrs	r2, r3
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009518:	2b00      	cmp	r3, #0
 800951a:	d100      	bne.n	800951e <HAL_USART_IRQHandler+0x15e>
 800951c:	e0b1      	b.n	8009682 <HAL_USART_IRQHandler+0x2c2>
    {
      /* USART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800951e:	69fb      	ldr	r3, [r7, #28]
 8009520:	2220      	movs	r2, #32
 8009522:	4013      	ands	r3, r2
 8009524:	d011      	beq.n	800954a <HAL_USART_IRQHandler+0x18a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009526:	69bb      	ldr	r3, [r7, #24]
 8009528:	2220      	movs	r2, #32
 800952a:	4013      	ands	r3, r2
 800952c:	d104      	bne.n	8009538 <HAL_USART_IRQHandler+0x178>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800952e:	697a      	ldr	r2, [r7, #20]
 8009530:	2380      	movs	r3, #128	; 0x80
 8009532:	055b      	lsls	r3, r3, #21
 8009534:	4013      	ands	r3, r2
 8009536:	d008      	beq.n	800954a <HAL_USART_IRQHandler+0x18a>
      {
        if (husart->RxISR != NULL)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800953c:	2b00      	cmp	r3, #0
 800953e:	d004      	beq.n	800954a <HAL_USART_IRQHandler+0x18a>
        {
          husart->RxISR(husart);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	0010      	movs	r0, r2
 8009548:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800954e:	2208      	movs	r2, #8
 8009550:	4013      	ands	r3, r2
 8009552:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	2240      	movs	r2, #64	; 0x40
 800955c:	4013      	ands	r3, r2
 800955e:	2b40      	cmp	r3, #64	; 0x40
 8009560:	d002      	beq.n	8009568 <HAL_USART_IRQHandler+0x1a8>
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d040      	beq.n	80095ea <HAL_USART_IRQHandler+0x22a>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	0018      	movs	r0, r3
 800956c:	f000 f8ae 	bl	80096cc <USART_EndTransfer>

        /* Disable the USART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	689b      	ldr	r3, [r3, #8]
 8009576:	2240      	movs	r2, #64	; 0x40
 8009578:	4013      	ands	r3, r2
 800957a:	2b40      	cmp	r3, #64	; 0x40
 800957c:	d130      	bne.n	80095e0 <HAL_USART_IRQHandler+0x220>
        {
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	689a      	ldr	r2, [r3, #8]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	2140      	movs	r1, #64	; 0x40
 800958a:	438a      	bics	r2, r1
 800958c:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009592:	2b00      	cmp	r3, #0
 8009594:	d008      	beq.n	80095a8 <HAL_USART_IRQHandler+0x1e8>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800959a:	2200      	movs	r2, #0
 800959c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095a2:	0018      	movs	r0, r3
 80095a4:	f7fa fa1a 	bl	80039dc <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d012      	beq.n	80095d6 <HAL_USART_IRQHandler+0x216>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095b4:	4a38      	ldr	r2, [pc, #224]	; (8009698 <HAL_USART_IRQHandler+0x2d8>)
 80095b6:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095bc:	0018      	movs	r0, r3
 80095be:	f7fa fa0d 	bl	80039dc <HAL_DMA_Abort_IT>
 80095c2:	1e03      	subs	r3, r0, #0
 80095c4:	d019      	beq.n	80095fa <HAL_USART_IRQHandler+0x23a>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095d0:	0018      	movs	r0, r3
 80095d2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80095d4:	e011      	b.n	80095fa <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	0018      	movs	r0, r3
 80095da:	f000 f86f 	bl	80096bc <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80095de:	e00c      	b.n	80095fa <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	0018      	movs	r0, r3
 80095e4:	f000 f86a 	bl	80096bc <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80095e8:	e007      	b.n	80095fa <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	0018      	movs	r0, r3
 80095ee:	f000 f865 	bl	80096bc <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2200      	movs	r2, #0
 80095f6:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }
    return;
 80095f8:	e043      	b.n	8009682 <HAL_USART_IRQHandler+0x2c2>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80095fa:	46c0      	nop			; (mov r8, r8)
    return;
 80095fc:	e041      	b.n	8009682 <HAL_USART_IRQHandler+0x2c2>

  } /* End if some error occurs */


  /* USART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80095fe:	69fb      	ldr	r3, [r7, #28]
 8009600:	2280      	movs	r2, #128	; 0x80
 8009602:	4013      	ands	r3, r2
 8009604:	d012      	beq.n	800962c <HAL_USART_IRQHandler+0x26c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009606:	69bb      	ldr	r3, [r7, #24]
 8009608:	2280      	movs	r2, #128	; 0x80
 800960a:	4013      	ands	r3, r2
 800960c:	d104      	bne.n	8009618 <HAL_USART_IRQHandler+0x258>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800960e:	697a      	ldr	r2, [r7, #20]
 8009610:	2380      	movs	r3, #128	; 0x80
 8009612:	041b      	lsls	r3, r3, #16
 8009614:	4013      	ands	r3, r2
 8009616:	d009      	beq.n	800962c <HAL_USART_IRQHandler+0x26c>
  {
    if (husart->TxISR != NULL)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800961c:	2b00      	cmp	r3, #0
 800961e:	d032      	beq.n	8009686 <HAL_USART_IRQHandler+0x2c6>
    {
      husart->TxISR(husart);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009624:	687a      	ldr	r2, [r7, #4]
 8009626:	0010      	movs	r0, r2
 8009628:	4798      	blx	r3
    }
    return;
 800962a:	e02c      	b.n	8009686 <HAL_USART_IRQHandler+0x2c6>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800962c:	69fb      	ldr	r3, [r7, #28]
 800962e:	2240      	movs	r2, #64	; 0x40
 8009630:	4013      	ands	r3, r2
 8009632:	d008      	beq.n	8009646 <HAL_USART_IRQHandler+0x286>
 8009634:	69bb      	ldr	r3, [r7, #24]
 8009636:	2240      	movs	r2, #64	; 0x40
 8009638:	4013      	ands	r3, r2
 800963a:	d004      	beq.n	8009646 <HAL_USART_IRQHandler+0x286>
  {
    USART_EndTransmit_IT(husart);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	0018      	movs	r0, r3
 8009640:	f000 fbf6 	bl	8009e30 <USART_EndTransmit_IT>
    return;
 8009644:	e020      	b.n	8009688 <HAL_USART_IRQHandler+0x2c8>
  }

  /* USART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009646:	69fa      	ldr	r2, [r7, #28]
 8009648:	2380      	movs	r3, #128	; 0x80
 800964a:	041b      	lsls	r3, r3, #16
 800964c:	4013      	ands	r3, r2
 800964e:	d009      	beq.n	8009664 <HAL_USART_IRQHandler+0x2a4>
 8009650:	69ba      	ldr	r2, [r7, #24]
 8009652:	2380      	movs	r3, #128	; 0x80
 8009654:	05db      	lsls	r3, r3, #23
 8009656:	4013      	ands	r3, r2
 8009658:	d004      	beq.n	8009664 <HAL_USART_IRQHandler+0x2a4>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    husart->TxFifoEmptyCallback(husart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_USARTEx_TxFifoEmptyCallback(husart);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	0018      	movs	r0, r3
 800965e:	f000 fc32 	bl	8009ec6 <HAL_USARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 8009662:	e011      	b.n	8009688 <HAL_USART_IRQHandler+0x2c8>
  }

  /* USART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009664:	69fa      	ldr	r2, [r7, #28]
 8009666:	2380      	movs	r3, #128	; 0x80
 8009668:	045b      	lsls	r3, r3, #17
 800966a:	4013      	ands	r3, r2
 800966c:	d00c      	beq.n	8009688 <HAL_USART_IRQHandler+0x2c8>
 800966e:	69bb      	ldr	r3, [r7, #24]
 8009670:	2b00      	cmp	r3, #0
 8009672:	da09      	bge.n	8009688 <HAL_USART_IRQHandler+0x2c8>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    husart->RxFifoFullCallback(husart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_USARTEx_RxFifoFullCallback(husart);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	0018      	movs	r0, r3
 8009678:	f000 fc1d 	bl	8009eb6 <HAL_USARTEx_RxFifoFullCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 800967c:	e004      	b.n	8009688 <HAL_USART_IRQHandler+0x2c8>
      return;
 800967e:	46c0      	nop			; (mov r8, r8)
 8009680:	e002      	b.n	8009688 <HAL_USART_IRQHandler+0x2c8>
    return;
 8009682:	46c0      	nop			; (mov r8, r8)
 8009684:	e000      	b.n	8009688 <HAL_USART_IRQHandler+0x2c8>
    return;
 8009686:	46c0      	nop			; (mov r8, r8)
  }
}
 8009688:	46bd      	mov	sp, r7
 800968a:	b008      	add	sp, #32
 800968c:	bd80      	pop	{r7, pc}
 800968e:	46c0      	nop			; (mov r8, r8)
 8009690:	0000200f 	.word	0x0000200f
 8009694:	10000001 	.word	0x10000001
 8009698:	080097db 	.word	0x080097db

0800969c <HAL_USART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxHalfCpltCallback(USART_HandleTypeDef *husart)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b082      	sub	sp, #8
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80096a4:	46c0      	nop			; (mov r8, r8)
 80096a6:	46bd      	mov	sp, r7
 80096a8:	b002      	add	sp, #8
 80096aa:	bd80      	pop	{r7, pc}

080096ac <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 80096b4:	46c0      	nop			; (mov r8, r8)
 80096b6:	46bd      	mov	sp, r7
 80096b8:	b002      	add	sp, #8
 80096ba:	bd80      	pop	{r7, pc}

080096bc <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b082      	sub	sp, #8
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 80096c4:	46c0      	nop			; (mov r8, r8)
 80096c6:	46bd      	mov	sp, r7
 80096c8:	b002      	add	sp, #8
 80096ca:	bd80      	pop	{r7, pc}

080096cc <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b082      	sub	sp, #8
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, RXFT, TXFT, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4909      	ldr	r1, [pc, #36]	; (8009704 <USART_EndTransfer+0x38>)
 80096e0:	400a      	ands	r2, r1
 80096e2:	601a      	str	r2, [r3, #0]
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	689a      	ldr	r2, [r3, #8]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4906      	ldr	r1, [pc, #24]	; (8009708 <USART_EndTransfer+0x3c>)
 80096f0:	400a      	ands	r2, r1
 80096f2:	609a      	str	r2, [r3, #8]

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2259      	movs	r2, #89	; 0x59
 80096f8:	2101      	movs	r1, #1
 80096fa:	5499      	strb	r1, [r3, r2]
}
 80096fc:	46c0      	nop			; (mov r8, r8)
 80096fe:	46bd      	mov	sp, r7
 8009700:	b002      	add	sp, #8
 8009702:	bd80      	pop	{r7, pc}
 8009704:	fffffe1f 	.word	0xfffffe1f
 8009708:	ef7ffffe 	.word	0xef7ffffe

0800970c <USART_DMATransmitCplt>:
  * @brief DMA USART transmit process complete callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b084      	sub	sp, #16
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009718:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	2220      	movs	r2, #32
 8009722:	4013      	ands	r3, r2
 8009724:	d119      	bne.n	800975a <USART_DMATransmitCplt+0x4e>
  {
    husart->TxXferCount = 0U;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	2200      	movs	r2, #0
 800972a:	85da      	strh	r2, [r3, #46]	; 0x2e

    if (husart->State == HAL_USART_STATE_BUSY_TX)
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2259      	movs	r2, #89	; 0x59
 8009730:	5c9b      	ldrb	r3, [r3, r2]
 8009732:	b2db      	uxtb	r3, r3
 8009734:	2b12      	cmp	r3, #18
 8009736:	d11a      	bne.n	800976e <USART_DMATransmitCplt+0x62>
    {
      /* Disable the DMA transfer for transmit request by resetting the DMAT bit
         in the USART CR3 register */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAT);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	689a      	ldr	r2, [r3, #8]
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	2180      	movs	r1, #128	; 0x80
 8009744:	438a      	bics	r2, r1
 8009746:	609a      	str	r2, [r3, #8]

      /* Enable the USART Transmit Complete Interrupt */
      __HAL_USART_ENABLE_IT(husart, USART_IT_TC);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	681a      	ldr	r2, [r3, #0]
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	2140      	movs	r1, #64	; 0x40
 8009754:	430a      	orrs	r2, r1
 8009756:	601a      	str	r2, [r3, #0]
      /* Call legacy weak Tx Complete Callback */
      HAL_USART_TxCpltCallback(husart);
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    }
  }
}
 8009758:	e009      	b.n	800976e <USART_DMATransmitCplt+0x62>
    if (husart->State == HAL_USART_STATE_BUSY_TX)
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2259      	movs	r2, #89	; 0x59
 800975e:	5c9b      	ldrb	r3, [r3, r2]
 8009760:	b2db      	uxtb	r3, r3
 8009762:	2b12      	cmp	r3, #18
 8009764:	d103      	bne.n	800976e <USART_DMATransmitCplt+0x62>
      HAL_USART_TxCpltCallback(husart);
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	0018      	movs	r0, r3
 800976a:	f7f7 fcbd 	bl	80010e8 <HAL_USART_TxCpltCallback>
}
 800976e:	46c0      	nop			; (mov r8, r8)
 8009770:	46bd      	mov	sp, r7
 8009772:	b004      	add	sp, #16
 8009774:	bd80      	pop	{r7, pc}

08009776 <USART_DMATxHalfCplt>:
  * @brief DMA USART transmit process half complete callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009776:	b580      	push	{r7, lr}
 8009778:	b084      	sub	sp, #16
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009782:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Tx Half Complete Callback */
  husart->TxHalfCpltCallback(husart);
#else
  /* Call legacy weak Tx Half Complete Callback */
  HAL_USART_TxHalfCpltCallback(husart);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	0018      	movs	r0, r3
 8009788:	f7ff ff88 	bl	800969c <HAL_USART_TxHalfCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 800978c:	46c0      	nop			; (mov r8, r8)
 800978e:	46bd      	mov	sp, r7
 8009790:	b004      	add	sp, #16
 8009792:	bd80      	pop	{r7, pc}

08009794 <USART_DMAError>:
  * @brief DMA USART communication error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097a0:	60fb      	str	r3, [r7, #12]

  husart->RxXferCount = 0U;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2200      	movs	r2, #0
 80097a6:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2200      	movs	r2, #0
 80097ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  USART_EndTransfer(husart);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	0018      	movs	r0, r3
 80097b2:	f7ff ff8b 	bl	80096cc <USART_EndTransfer>

  husart->ErrorCode |= HAL_USART_ERROR_DMA;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097ba:	2210      	movs	r2, #16
 80097bc:	431a      	orrs	r2, r3
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	65da      	str	r2, [r3, #92]	; 0x5c
  husart->State = HAL_USART_STATE_READY;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2259      	movs	r2, #89	; 0x59
 80097c6:	2101      	movs	r1, #1
 80097c8:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	0018      	movs	r0, r3
 80097ce:	f7ff ff75 	bl	80096bc <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 80097d2:	46c0      	nop			; (mov r8, r8)
 80097d4:	46bd      	mov	sp, r7
 80097d6:	b004      	add	sp, #16
 80097d8:	bd80      	pop	{r7, pc}

080097da <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80097da:	b580      	push	{r7, lr}
 80097dc:	b084      	sub	sp, #16
 80097de:	af00      	add	r7, sp, #0
 80097e0:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097e6:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2200      	movs	r2, #0
 80097ec:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2200      	movs	r2, #0
 80097f2:	85da      	strh	r2, [r3, #46]	; 0x2e
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	0018      	movs	r0, r3
 80097f8:	f7ff ff60 	bl	80096bc <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 80097fc:	46c0      	nop			; (mov r8, r8)
 80097fe:	46bd      	mov	sp, r7
 8009800:	b004      	add	sp, #16
 8009802:	bd80      	pop	{r7, pc}

08009804 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b084      	sub	sp, #16
 8009808:	af00      	add	r7, sp, #0
 800980a:	60f8      	str	r0, [r7, #12]
 800980c:	60b9      	str	r1, [r7, #8]
 800980e:	603b      	str	r3, [r7, #0]
 8009810:	1dfb      	adds	r3, r7, #7
 8009812:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8009814:	e017      	b.n	8009846 <USART_WaitOnFlagUntilTimeout+0x42>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009816:	69bb      	ldr	r3, [r7, #24]
 8009818:	3301      	adds	r3, #1
 800981a:	d014      	beq.n	8009846 <USART_WaitOnFlagUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800981c:	f7f9 fc4c 	bl	80030b8 <HAL_GetTick>
 8009820:	0002      	movs	r2, r0
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	1ad3      	subs	r3, r2, r3
 8009826:	69ba      	ldr	r2, [r7, #24]
 8009828:	429a      	cmp	r2, r3
 800982a:	d302      	bcc.n	8009832 <USART_WaitOnFlagUntilTimeout+0x2e>
 800982c:	69bb      	ldr	r3, [r7, #24]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d109      	bne.n	8009846 <USART_WaitOnFlagUntilTimeout+0x42>
      {
        husart->State = HAL_USART_STATE_READY;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2259      	movs	r2, #89	; 0x59
 8009836:	2101      	movs	r1, #1
 8009838:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2258      	movs	r2, #88	; 0x58
 800983e:	2100      	movs	r1, #0
 8009840:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009842:	2303      	movs	r3, #3
 8009844:	e00f      	b.n	8009866 <USART_WaitOnFlagUntilTimeout+0x62>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	69db      	ldr	r3, [r3, #28]
 800984c:	68ba      	ldr	r2, [r7, #8]
 800984e:	4013      	ands	r3, r2
 8009850:	68ba      	ldr	r2, [r7, #8]
 8009852:	1ad3      	subs	r3, r2, r3
 8009854:	425a      	negs	r2, r3
 8009856:	4153      	adcs	r3, r2
 8009858:	b2db      	uxtb	r3, r3
 800985a:	001a      	movs	r2, r3
 800985c:	1dfb      	adds	r3, r7, #7
 800985e:	781b      	ldrb	r3, [r3, #0]
 8009860:	429a      	cmp	r2, r3
 8009862:	d0d8      	beq.n	8009816 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009864:	2300      	movs	r3, #0
}
 8009866:	0018      	movs	r0, r3
 8009868:	46bd      	mov	sp, r7
 800986a:	b004      	add	sp, #16
 800986c:	bd80      	pop	{r7, pc}
	...

08009870 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b088      	sub	sp, #32
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8009878:	231e      	movs	r3, #30
 800987a:	18fb      	adds	r3, r7, r3
 800987c:	2200      	movs	r2, #0
 800987e:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8009880:	2300      	movs	r3, #0
 8009882:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	689a      	ldr	r2, [r3, #8]
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	691b      	ldr	r3, [r3, #16]
 800988c:	431a      	orrs	r2, r3
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	695b      	ldr	r3, [r3, #20]
 8009892:	4313      	orrs	r3, r2
 8009894:	2280      	movs	r2, #128	; 0x80
 8009896:	0212      	lsls	r2, r2, #8
 8009898:	4313      	orrs	r3, r2
 800989a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	4ab1      	ldr	r2, [pc, #708]	; (8009b68 <USART_SetConfig+0x2f8>)
 80098a4:	4013      	ands	r3, r2
 80098a6:	0019      	movs	r1, r3
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	697a      	ldr	r2, [r7, #20]
 80098ae:	430a      	orrs	r2, r1
 80098b0:	601a      	str	r2, [r3, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 80098b2:	2380      	movs	r3, #128	; 0x80
 80098b4:	011b      	lsls	r3, r3, #4
 80098b6:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6a1b      	ldr	r3, [r3, #32]
 80098bc:	697a      	ldr	r2, [r7, #20]
 80098be:	4313      	orrs	r3, r2
 80098c0:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	699a      	ldr	r2, [r3, #24]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	69db      	ldr	r3, [r3, #28]
 80098ca:	4313      	orrs	r3, r2
 80098cc:	697a      	ldr	r2, [r7, #20]
 80098ce:	4313      	orrs	r3, r2
 80098d0:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	68db      	ldr	r3, [r3, #12]
 80098d6:	697a      	ldr	r2, [r7, #20]
 80098d8:	4313      	orrs	r3, r2
 80098da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	4aa2      	ldr	r2, [pc, #648]	; (8009b6c <USART_SetConfig+0x2fc>)
 80098e4:	4013      	ands	r3, r2
 80098e6:	0019      	movs	r1, r3
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	697a      	ldr	r2, [r7, #20]
 80098ee:	430a      	orrs	r2, r1
 80098f0:	605a      	str	r2, [r3, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098f8:	220f      	movs	r2, #15
 80098fa:	4393      	bics	r3, r2
 80098fc:	0019      	movs	r1, r3
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	430a      	orrs	r2, r1
 8009908:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4a98      	ldr	r2, [pc, #608]	; (8009b70 <USART_SetConfig+0x300>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d127      	bne.n	8009964 <USART_SetConfig+0xf4>
 8009914:	4b97      	ldr	r3, [pc, #604]	; (8009b74 <USART_SetConfig+0x304>)
 8009916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009918:	2203      	movs	r2, #3
 800991a:	4013      	ands	r3, r2
 800991c:	2b03      	cmp	r3, #3
 800991e:	d017      	beq.n	8009950 <USART_SetConfig+0xe0>
 8009920:	d81b      	bhi.n	800995a <USART_SetConfig+0xea>
 8009922:	2b02      	cmp	r3, #2
 8009924:	d00a      	beq.n	800993c <USART_SetConfig+0xcc>
 8009926:	d818      	bhi.n	800995a <USART_SetConfig+0xea>
 8009928:	2b00      	cmp	r3, #0
 800992a:	d002      	beq.n	8009932 <USART_SetConfig+0xc2>
 800992c:	2b01      	cmp	r3, #1
 800992e:	d00a      	beq.n	8009946 <USART_SetConfig+0xd6>
 8009930:	e013      	b.n	800995a <USART_SetConfig+0xea>
 8009932:	231f      	movs	r3, #31
 8009934:	18fb      	adds	r3, r7, r3
 8009936:	2200      	movs	r2, #0
 8009938:	701a      	strb	r2, [r3, #0]
 800993a:	e058      	b.n	80099ee <USART_SetConfig+0x17e>
 800993c:	231f      	movs	r3, #31
 800993e:	18fb      	adds	r3, r7, r3
 8009940:	2202      	movs	r2, #2
 8009942:	701a      	strb	r2, [r3, #0]
 8009944:	e053      	b.n	80099ee <USART_SetConfig+0x17e>
 8009946:	231f      	movs	r3, #31
 8009948:	18fb      	adds	r3, r7, r3
 800994a:	2204      	movs	r2, #4
 800994c:	701a      	strb	r2, [r3, #0]
 800994e:	e04e      	b.n	80099ee <USART_SetConfig+0x17e>
 8009950:	231f      	movs	r3, #31
 8009952:	18fb      	adds	r3, r7, r3
 8009954:	2208      	movs	r2, #8
 8009956:	701a      	strb	r2, [r3, #0]
 8009958:	e049      	b.n	80099ee <USART_SetConfig+0x17e>
 800995a:	231f      	movs	r3, #31
 800995c:	18fb      	adds	r3, r7, r3
 800995e:	2210      	movs	r2, #16
 8009960:	701a      	strb	r2, [r3, #0]
 8009962:	e044      	b.n	80099ee <USART_SetConfig+0x17e>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	4a83      	ldr	r2, [pc, #524]	; (8009b78 <USART_SetConfig+0x308>)
 800996a:	4293      	cmp	r3, r2
 800996c:	d127      	bne.n	80099be <USART_SetConfig+0x14e>
 800996e:	4b81      	ldr	r3, [pc, #516]	; (8009b74 <USART_SetConfig+0x304>)
 8009970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009972:	220c      	movs	r2, #12
 8009974:	4013      	ands	r3, r2
 8009976:	2b0c      	cmp	r3, #12
 8009978:	d017      	beq.n	80099aa <USART_SetConfig+0x13a>
 800997a:	d81b      	bhi.n	80099b4 <USART_SetConfig+0x144>
 800997c:	2b08      	cmp	r3, #8
 800997e:	d00a      	beq.n	8009996 <USART_SetConfig+0x126>
 8009980:	d818      	bhi.n	80099b4 <USART_SetConfig+0x144>
 8009982:	2b00      	cmp	r3, #0
 8009984:	d002      	beq.n	800998c <USART_SetConfig+0x11c>
 8009986:	2b04      	cmp	r3, #4
 8009988:	d00a      	beq.n	80099a0 <USART_SetConfig+0x130>
 800998a:	e013      	b.n	80099b4 <USART_SetConfig+0x144>
 800998c:	231f      	movs	r3, #31
 800998e:	18fb      	adds	r3, r7, r3
 8009990:	2200      	movs	r2, #0
 8009992:	701a      	strb	r2, [r3, #0]
 8009994:	e02b      	b.n	80099ee <USART_SetConfig+0x17e>
 8009996:	231f      	movs	r3, #31
 8009998:	18fb      	adds	r3, r7, r3
 800999a:	2202      	movs	r2, #2
 800999c:	701a      	strb	r2, [r3, #0]
 800999e:	e026      	b.n	80099ee <USART_SetConfig+0x17e>
 80099a0:	231f      	movs	r3, #31
 80099a2:	18fb      	adds	r3, r7, r3
 80099a4:	2204      	movs	r2, #4
 80099a6:	701a      	strb	r2, [r3, #0]
 80099a8:	e021      	b.n	80099ee <USART_SetConfig+0x17e>
 80099aa:	231f      	movs	r3, #31
 80099ac:	18fb      	adds	r3, r7, r3
 80099ae:	2208      	movs	r2, #8
 80099b0:	701a      	strb	r2, [r3, #0]
 80099b2:	e01c      	b.n	80099ee <USART_SetConfig+0x17e>
 80099b4:	231f      	movs	r3, #31
 80099b6:	18fb      	adds	r3, r7, r3
 80099b8:	2210      	movs	r2, #16
 80099ba:	701a      	strb	r2, [r3, #0]
 80099bc:	e017      	b.n	80099ee <USART_SetConfig+0x17e>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	4a6e      	ldr	r2, [pc, #440]	; (8009b7c <USART_SetConfig+0x30c>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d104      	bne.n	80099d2 <USART_SetConfig+0x162>
 80099c8:	231f      	movs	r3, #31
 80099ca:	18fb      	adds	r3, r7, r3
 80099cc:	2200      	movs	r2, #0
 80099ce:	701a      	strb	r2, [r3, #0]
 80099d0:	e00d      	b.n	80099ee <USART_SetConfig+0x17e>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4a6a      	ldr	r2, [pc, #424]	; (8009b80 <USART_SetConfig+0x310>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d104      	bne.n	80099e6 <USART_SetConfig+0x176>
 80099dc:	231f      	movs	r3, #31
 80099de:	18fb      	adds	r3, r7, r3
 80099e0:	2200      	movs	r2, #0
 80099e2:	701a      	strb	r2, [r3, #0]
 80099e4:	e003      	b.n	80099ee <USART_SetConfig+0x17e>
 80099e6:	231f      	movs	r3, #31
 80099e8:	18fb      	adds	r3, r7, r3
 80099ea:	2210      	movs	r2, #16
 80099ec:	701a      	strb	r2, [r3, #0]

  switch (clocksource)
 80099ee:	231f      	movs	r3, #31
 80099f0:	18fb      	adds	r3, r7, r3
 80099f2:	781b      	ldrb	r3, [r3, #0]
 80099f4:	2b08      	cmp	r3, #8
 80099f6:	d100      	bne.n	80099fa <USART_SetConfig+0x18a>
 80099f8:	e139      	b.n	8009c6e <USART_SetConfig+0x3fe>
 80099fa:	dd00      	ble.n	80099fe <USART_SetConfig+0x18e>
 80099fc:	e195      	b.n	8009d2a <USART_SetConfig+0x4ba>
 80099fe:	2b04      	cmp	r3, #4
 8009a00:	d100      	bne.n	8009a04 <USART_SetConfig+0x194>
 8009a02:	e0d3      	b.n	8009bac <USART_SetConfig+0x33c>
 8009a04:	dd00      	ble.n	8009a08 <USART_SetConfig+0x198>
 8009a06:	e190      	b.n	8009d2a <USART_SetConfig+0x4ba>
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d003      	beq.n	8009a14 <USART_SetConfig+0x1a4>
 8009a0c:	2b02      	cmp	r3, #2
 8009a0e:	d100      	bne.n	8009a12 <USART_SetConfig+0x1a2>
 8009a10:	e061      	b.n	8009ad6 <USART_SetConfig+0x266>
 8009a12:	e18a      	b.n	8009d2a <USART_SetConfig+0x4ba>
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8009a14:	f7fc f904 	bl	8005c20 <HAL_RCC_GetPCLK1Freq>
 8009a18:	0003      	movs	r3, r0
 8009a1a:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d044      	beq.n	8009aae <USART_SetConfig+0x23e>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a28:	2b01      	cmp	r3, #1
 8009a2a:	d03e      	beq.n	8009aaa <USART_SetConfig+0x23a>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a30:	2b02      	cmp	r3, #2
 8009a32:	d038      	beq.n	8009aa6 <USART_SetConfig+0x236>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a38:	2b03      	cmp	r3, #3
 8009a3a:	d032      	beq.n	8009aa2 <USART_SetConfig+0x232>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a40:	2b04      	cmp	r3, #4
 8009a42:	d02c      	beq.n	8009a9e <USART_SetConfig+0x22e>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a48:	2b05      	cmp	r3, #5
 8009a4a:	d026      	beq.n	8009a9a <USART_SetConfig+0x22a>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a50:	2b06      	cmp	r3, #6
 8009a52:	d020      	beq.n	8009a96 <USART_SetConfig+0x226>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a58:	2b07      	cmp	r3, #7
 8009a5a:	d01a      	beq.n	8009a92 <USART_SetConfig+0x222>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a60:	2b08      	cmp	r3, #8
 8009a62:	d014      	beq.n	8009a8e <USART_SetConfig+0x21e>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a68:	2b09      	cmp	r3, #9
 8009a6a:	d00e      	beq.n	8009a8a <USART_SetConfig+0x21a>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a70:	2b0a      	cmp	r3, #10
 8009a72:	d008      	beq.n	8009a86 <USART_SetConfig+0x216>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a78:	2b0b      	cmp	r3, #11
 8009a7a:	d102      	bne.n	8009a82 <USART_SetConfig+0x212>
 8009a7c:	2380      	movs	r3, #128	; 0x80
 8009a7e:	005b      	lsls	r3, r3, #1
 8009a80:	e016      	b.n	8009ab0 <USART_SetConfig+0x240>
 8009a82:	2301      	movs	r3, #1
 8009a84:	e014      	b.n	8009ab0 <USART_SetConfig+0x240>
 8009a86:	2380      	movs	r3, #128	; 0x80
 8009a88:	e012      	b.n	8009ab0 <USART_SetConfig+0x240>
 8009a8a:	2340      	movs	r3, #64	; 0x40
 8009a8c:	e010      	b.n	8009ab0 <USART_SetConfig+0x240>
 8009a8e:	2320      	movs	r3, #32
 8009a90:	e00e      	b.n	8009ab0 <USART_SetConfig+0x240>
 8009a92:	2310      	movs	r3, #16
 8009a94:	e00c      	b.n	8009ab0 <USART_SetConfig+0x240>
 8009a96:	230c      	movs	r3, #12
 8009a98:	e00a      	b.n	8009ab0 <USART_SetConfig+0x240>
 8009a9a:	230a      	movs	r3, #10
 8009a9c:	e008      	b.n	8009ab0 <USART_SetConfig+0x240>
 8009a9e:	2308      	movs	r3, #8
 8009aa0:	e006      	b.n	8009ab0 <USART_SetConfig+0x240>
 8009aa2:	2306      	movs	r3, #6
 8009aa4:	e004      	b.n	8009ab0 <USART_SetConfig+0x240>
 8009aa6:	2304      	movs	r3, #4
 8009aa8:	e002      	b.n	8009ab0 <USART_SetConfig+0x240>
 8009aaa:	2302      	movs	r3, #2
 8009aac:	e000      	b.n	8009ab0 <USART_SetConfig+0x240>
 8009aae:	2301      	movs	r3, #1
 8009ab0:	0019      	movs	r1, r3
 8009ab2:	6938      	ldr	r0, [r7, #16]
 8009ab4:	f7f6 fb26 	bl	8000104 <__udivsi3>
 8009ab8:	0003      	movs	r3, r0
 8009aba:	005a      	lsls	r2, r3, #1
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	085b      	lsrs	r3, r3, #1
 8009ac2:	18d2      	adds	r2, r2, r3
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	0019      	movs	r1, r3
 8009aca:	0010      	movs	r0, r2
 8009acc:	f7f6 fb1a 	bl	8000104 <__udivsi3>
 8009ad0:	0003      	movs	r3, r0
 8009ad2:	61bb      	str	r3, [r7, #24]
      break;
 8009ad4:	e12e      	b.n	8009d34 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d052      	beq.n	8009b84 <USART_SetConfig+0x314>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d03e      	beq.n	8009b64 <USART_SetConfig+0x2f4>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aea:	2b02      	cmp	r3, #2
 8009aec:	d038      	beq.n	8009b60 <USART_SetConfig+0x2f0>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af2:	2b03      	cmp	r3, #3
 8009af4:	d032      	beq.n	8009b5c <USART_SetConfig+0x2ec>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009afa:	2b04      	cmp	r3, #4
 8009afc:	d02c      	beq.n	8009b58 <USART_SetConfig+0x2e8>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b02:	2b05      	cmp	r3, #5
 8009b04:	d026      	beq.n	8009b54 <USART_SetConfig+0x2e4>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b0a:	2b06      	cmp	r3, #6
 8009b0c:	d020      	beq.n	8009b50 <USART_SetConfig+0x2e0>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b12:	2b07      	cmp	r3, #7
 8009b14:	d01a      	beq.n	8009b4c <USART_SetConfig+0x2dc>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b1a:	2b08      	cmp	r3, #8
 8009b1c:	d014      	beq.n	8009b48 <USART_SetConfig+0x2d8>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b22:	2b09      	cmp	r3, #9
 8009b24:	d00e      	beq.n	8009b44 <USART_SetConfig+0x2d4>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b2a:	2b0a      	cmp	r3, #10
 8009b2c:	d008      	beq.n	8009b40 <USART_SetConfig+0x2d0>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b32:	2b0b      	cmp	r3, #11
 8009b34:	d102      	bne.n	8009b3c <USART_SetConfig+0x2cc>
 8009b36:	2380      	movs	r3, #128	; 0x80
 8009b38:	005b      	lsls	r3, r3, #1
 8009b3a:	e024      	b.n	8009b86 <USART_SetConfig+0x316>
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	e022      	b.n	8009b86 <USART_SetConfig+0x316>
 8009b40:	2380      	movs	r3, #128	; 0x80
 8009b42:	e020      	b.n	8009b86 <USART_SetConfig+0x316>
 8009b44:	2340      	movs	r3, #64	; 0x40
 8009b46:	e01e      	b.n	8009b86 <USART_SetConfig+0x316>
 8009b48:	2320      	movs	r3, #32
 8009b4a:	e01c      	b.n	8009b86 <USART_SetConfig+0x316>
 8009b4c:	2310      	movs	r3, #16
 8009b4e:	e01a      	b.n	8009b86 <USART_SetConfig+0x316>
 8009b50:	230c      	movs	r3, #12
 8009b52:	e018      	b.n	8009b86 <USART_SetConfig+0x316>
 8009b54:	230a      	movs	r3, #10
 8009b56:	e016      	b.n	8009b86 <USART_SetConfig+0x316>
 8009b58:	2308      	movs	r3, #8
 8009b5a:	e014      	b.n	8009b86 <USART_SetConfig+0x316>
 8009b5c:	2306      	movs	r3, #6
 8009b5e:	e012      	b.n	8009b86 <USART_SetConfig+0x316>
 8009b60:	2304      	movs	r3, #4
 8009b62:	e010      	b.n	8009b86 <USART_SetConfig+0x316>
 8009b64:	2302      	movs	r3, #2
 8009b66:	e00e      	b.n	8009b86 <USART_SetConfig+0x316>
 8009b68:	cfff69f3 	.word	0xcfff69f3
 8009b6c:	ffffc0f6 	.word	0xffffc0f6
 8009b70:	40013800 	.word	0x40013800
 8009b74:	40021000 	.word	0x40021000
 8009b78:	40004400 	.word	0x40004400
 8009b7c:	40004800 	.word	0x40004800
 8009b80:	40004c00 	.word	0x40004c00
 8009b84:	2301      	movs	r3, #1
 8009b86:	0019      	movs	r1, r3
 8009b88:	4886      	ldr	r0, [pc, #536]	; (8009da4 <USART_SetConfig+0x534>)
 8009b8a:	f7f6 fabb 	bl	8000104 <__udivsi3>
 8009b8e:	0003      	movs	r3, r0
 8009b90:	005a      	lsls	r2, r3, #1
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	685b      	ldr	r3, [r3, #4]
 8009b96:	085b      	lsrs	r3, r3, #1
 8009b98:	18d2      	adds	r2, r2, r3
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	0019      	movs	r1, r3
 8009ba0:	0010      	movs	r0, r2
 8009ba2:	f7f6 faaf 	bl	8000104 <__udivsi3>
 8009ba6:	0003      	movs	r3, r0
 8009ba8:	61bb      	str	r3, [r7, #24]
      break;
 8009baa:	e0c3      	b.n	8009d34 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8009bac:	f7fb ffac 	bl	8005b08 <HAL_RCC_GetSysClockFreq>
 8009bb0:	0003      	movs	r3, r0
 8009bb2:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d044      	beq.n	8009c46 <USART_SetConfig+0x3d6>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bc0:	2b01      	cmp	r3, #1
 8009bc2:	d03e      	beq.n	8009c42 <USART_SetConfig+0x3d2>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bc8:	2b02      	cmp	r3, #2
 8009bca:	d038      	beq.n	8009c3e <USART_SetConfig+0x3ce>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd0:	2b03      	cmp	r3, #3
 8009bd2:	d032      	beq.n	8009c3a <USART_SetConfig+0x3ca>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd8:	2b04      	cmp	r3, #4
 8009bda:	d02c      	beq.n	8009c36 <USART_SetConfig+0x3c6>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be0:	2b05      	cmp	r3, #5
 8009be2:	d026      	beq.n	8009c32 <USART_SetConfig+0x3c2>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be8:	2b06      	cmp	r3, #6
 8009bea:	d020      	beq.n	8009c2e <USART_SetConfig+0x3be>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf0:	2b07      	cmp	r3, #7
 8009bf2:	d01a      	beq.n	8009c2a <USART_SetConfig+0x3ba>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf8:	2b08      	cmp	r3, #8
 8009bfa:	d014      	beq.n	8009c26 <USART_SetConfig+0x3b6>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c00:	2b09      	cmp	r3, #9
 8009c02:	d00e      	beq.n	8009c22 <USART_SetConfig+0x3b2>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c08:	2b0a      	cmp	r3, #10
 8009c0a:	d008      	beq.n	8009c1e <USART_SetConfig+0x3ae>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c10:	2b0b      	cmp	r3, #11
 8009c12:	d102      	bne.n	8009c1a <USART_SetConfig+0x3aa>
 8009c14:	2380      	movs	r3, #128	; 0x80
 8009c16:	005b      	lsls	r3, r3, #1
 8009c18:	e016      	b.n	8009c48 <USART_SetConfig+0x3d8>
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	e014      	b.n	8009c48 <USART_SetConfig+0x3d8>
 8009c1e:	2380      	movs	r3, #128	; 0x80
 8009c20:	e012      	b.n	8009c48 <USART_SetConfig+0x3d8>
 8009c22:	2340      	movs	r3, #64	; 0x40
 8009c24:	e010      	b.n	8009c48 <USART_SetConfig+0x3d8>
 8009c26:	2320      	movs	r3, #32
 8009c28:	e00e      	b.n	8009c48 <USART_SetConfig+0x3d8>
 8009c2a:	2310      	movs	r3, #16
 8009c2c:	e00c      	b.n	8009c48 <USART_SetConfig+0x3d8>
 8009c2e:	230c      	movs	r3, #12
 8009c30:	e00a      	b.n	8009c48 <USART_SetConfig+0x3d8>
 8009c32:	230a      	movs	r3, #10
 8009c34:	e008      	b.n	8009c48 <USART_SetConfig+0x3d8>
 8009c36:	2308      	movs	r3, #8
 8009c38:	e006      	b.n	8009c48 <USART_SetConfig+0x3d8>
 8009c3a:	2306      	movs	r3, #6
 8009c3c:	e004      	b.n	8009c48 <USART_SetConfig+0x3d8>
 8009c3e:	2304      	movs	r3, #4
 8009c40:	e002      	b.n	8009c48 <USART_SetConfig+0x3d8>
 8009c42:	2302      	movs	r3, #2
 8009c44:	e000      	b.n	8009c48 <USART_SetConfig+0x3d8>
 8009c46:	2301      	movs	r3, #1
 8009c48:	0019      	movs	r1, r3
 8009c4a:	6938      	ldr	r0, [r7, #16]
 8009c4c:	f7f6 fa5a 	bl	8000104 <__udivsi3>
 8009c50:	0003      	movs	r3, r0
 8009c52:	005a      	lsls	r2, r3, #1
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	685b      	ldr	r3, [r3, #4]
 8009c58:	085b      	lsrs	r3, r3, #1
 8009c5a:	18d2      	adds	r2, r2, r3
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	0019      	movs	r1, r3
 8009c62:	0010      	movs	r0, r2
 8009c64:	f7f6 fa4e 	bl	8000104 <__udivsi3>
 8009c68:	0003      	movs	r3, r0
 8009c6a:	61bb      	str	r3, [r7, #24]
      break;
 8009c6c:	e062      	b.n	8009d34 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8((uint32_t)LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d044      	beq.n	8009d00 <USART_SetConfig+0x490>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c7a:	2b01      	cmp	r3, #1
 8009c7c:	d03e      	beq.n	8009cfc <USART_SetConfig+0x48c>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c82:	2b02      	cmp	r3, #2
 8009c84:	d038      	beq.n	8009cf8 <USART_SetConfig+0x488>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c8a:	2b03      	cmp	r3, #3
 8009c8c:	d032      	beq.n	8009cf4 <USART_SetConfig+0x484>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c92:	2b04      	cmp	r3, #4
 8009c94:	d02c      	beq.n	8009cf0 <USART_SetConfig+0x480>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c9a:	2b05      	cmp	r3, #5
 8009c9c:	d026      	beq.n	8009cec <USART_SetConfig+0x47c>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca2:	2b06      	cmp	r3, #6
 8009ca4:	d020      	beq.n	8009ce8 <USART_SetConfig+0x478>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009caa:	2b07      	cmp	r3, #7
 8009cac:	d01a      	beq.n	8009ce4 <USART_SetConfig+0x474>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb2:	2b08      	cmp	r3, #8
 8009cb4:	d014      	beq.n	8009ce0 <USART_SetConfig+0x470>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cba:	2b09      	cmp	r3, #9
 8009cbc:	d00e      	beq.n	8009cdc <USART_SetConfig+0x46c>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc2:	2b0a      	cmp	r3, #10
 8009cc4:	d008      	beq.n	8009cd8 <USART_SetConfig+0x468>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cca:	2b0b      	cmp	r3, #11
 8009ccc:	d102      	bne.n	8009cd4 <USART_SetConfig+0x464>
 8009cce:	2380      	movs	r3, #128	; 0x80
 8009cd0:	005b      	lsls	r3, r3, #1
 8009cd2:	e016      	b.n	8009d02 <USART_SetConfig+0x492>
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	e014      	b.n	8009d02 <USART_SetConfig+0x492>
 8009cd8:	2380      	movs	r3, #128	; 0x80
 8009cda:	e012      	b.n	8009d02 <USART_SetConfig+0x492>
 8009cdc:	2340      	movs	r3, #64	; 0x40
 8009cde:	e010      	b.n	8009d02 <USART_SetConfig+0x492>
 8009ce0:	2320      	movs	r3, #32
 8009ce2:	e00e      	b.n	8009d02 <USART_SetConfig+0x492>
 8009ce4:	2310      	movs	r3, #16
 8009ce6:	e00c      	b.n	8009d02 <USART_SetConfig+0x492>
 8009ce8:	230c      	movs	r3, #12
 8009cea:	e00a      	b.n	8009d02 <USART_SetConfig+0x492>
 8009cec:	230a      	movs	r3, #10
 8009cee:	e008      	b.n	8009d02 <USART_SetConfig+0x492>
 8009cf0:	2308      	movs	r3, #8
 8009cf2:	e006      	b.n	8009d02 <USART_SetConfig+0x492>
 8009cf4:	2306      	movs	r3, #6
 8009cf6:	e004      	b.n	8009d02 <USART_SetConfig+0x492>
 8009cf8:	2304      	movs	r3, #4
 8009cfa:	e002      	b.n	8009d02 <USART_SetConfig+0x492>
 8009cfc:	2302      	movs	r3, #2
 8009cfe:	e000      	b.n	8009d02 <USART_SetConfig+0x492>
 8009d00:	2301      	movs	r3, #1
 8009d02:	0019      	movs	r1, r3
 8009d04:	2380      	movs	r3, #128	; 0x80
 8009d06:	0218      	lsls	r0, r3, #8
 8009d08:	f7f6 f9fc 	bl	8000104 <__udivsi3>
 8009d0c:	0003      	movs	r3, r0
 8009d0e:	005a      	lsls	r2, r3, #1
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	085b      	lsrs	r3, r3, #1
 8009d16:	18d2      	adds	r2, r2, r3
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	0019      	movs	r1, r3
 8009d1e:	0010      	movs	r0, r2
 8009d20:	f7f6 f9f0 	bl	8000104 <__udivsi3>
 8009d24:	0003      	movs	r3, r0
 8009d26:	61bb      	str	r3, [r7, #24]
      break;
 8009d28:	e004      	b.n	8009d34 <USART_SetConfig+0x4c4>
    default:
      ret = HAL_ERROR;
 8009d2a:	231e      	movs	r3, #30
 8009d2c:	18fb      	adds	r3, r7, r3
 8009d2e:	2201      	movs	r2, #1
 8009d30:	701a      	strb	r2, [r3, #0]
      break;
 8009d32:	46c0      	nop			; (mov r8, r8)
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8009d34:	69bb      	ldr	r3, [r7, #24]
 8009d36:	2b0f      	cmp	r3, #15
 8009d38:	d91c      	bls.n	8009d74 <USART_SetConfig+0x504>
 8009d3a:	69ba      	ldr	r2, [r7, #24]
 8009d3c:	2380      	movs	r3, #128	; 0x80
 8009d3e:	025b      	lsls	r3, r3, #9
 8009d40:	429a      	cmp	r2, r3
 8009d42:	d217      	bcs.n	8009d74 <USART_SetConfig+0x504>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d44:	69bb      	ldr	r3, [r7, #24]
 8009d46:	b29a      	uxth	r2, r3
 8009d48:	200e      	movs	r0, #14
 8009d4a:	183b      	adds	r3, r7, r0
 8009d4c:	210f      	movs	r1, #15
 8009d4e:	438a      	bics	r2, r1
 8009d50:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d52:	69bb      	ldr	r3, [r7, #24]
 8009d54:	085b      	lsrs	r3, r3, #1
 8009d56:	b29b      	uxth	r3, r3
 8009d58:	2207      	movs	r2, #7
 8009d5a:	4013      	ands	r3, r2
 8009d5c:	b299      	uxth	r1, r3
 8009d5e:	183b      	adds	r3, r7, r0
 8009d60:	183a      	adds	r2, r7, r0
 8009d62:	8812      	ldrh	r2, [r2, #0]
 8009d64:	430a      	orrs	r2, r1
 8009d66:	801a      	strh	r2, [r3, #0]
    husart->Instance->BRR = brrtemp;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	183a      	adds	r2, r7, r0
 8009d6e:	8812      	ldrh	r2, [r2, #0]
 8009d70:	60da      	str	r2, [r3, #12]
 8009d72:	e003      	b.n	8009d7c <USART_SetConfig+0x50c>
  }
  else
  {
    ret = HAL_ERROR;
 8009d74:	231e      	movs	r3, #30
 8009d76:	18fb      	adds	r3, r7, r3
 8009d78:	2201      	movs	r2, #1
 8009d7a:	701a      	strb	r2, [r3, #0]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2201      	movs	r2, #1
 8009d80:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2201      	movs	r2, #1
 8009d86:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2200      	movs	r2, #0
 8009d92:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 8009d94:	231e      	movs	r3, #30
 8009d96:	18fb      	adds	r3, r7, r3
 8009d98:	781b      	ldrb	r3, [r3, #0]
}
 8009d9a:	0018      	movs	r0, r3
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	b008      	add	sp, #32
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	46c0      	nop			; (mov r8, r8)
 8009da4:	00f42400 	.word	0x00f42400

08009da8 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b086      	sub	sp, #24
 8009dac:	af02      	add	r7, sp, #8
 8009dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2200      	movs	r2, #0
 8009db4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009db6:	f7f9 f97f 	bl	80030b8 <HAL_GetTick>
 8009dba:	0003      	movs	r3, r0
 8009dbc:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	2208      	movs	r2, #8
 8009dc6:	4013      	ands	r3, r2
 8009dc8:	2b08      	cmp	r3, #8
 8009dca:	d10e      	bne.n	8009dea <USART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8009dcc:	68fa      	ldr	r2, [r7, #12]
 8009dce:	2380      	movs	r3, #128	; 0x80
 8009dd0:	0399      	lsls	r1, r3, #14
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	23fa      	movs	r3, #250	; 0xfa
 8009dd6:	009b      	lsls	r3, r3, #2
 8009dd8:	9300      	str	r3, [sp, #0]
 8009dda:	0013      	movs	r3, r2
 8009ddc:	2200      	movs	r2, #0
 8009dde:	f7ff fd11 	bl	8009804 <USART_WaitOnFlagUntilTimeout>
 8009de2:	1e03      	subs	r3, r0, #0
 8009de4:	d001      	beq.n	8009dea <USART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009de6:	2303      	movs	r3, #3
 8009de8:	e01e      	b.n	8009e28 <USART_CheckIdleState+0x80>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	2204      	movs	r2, #4
 8009df2:	4013      	ands	r3, r2
 8009df4:	2b04      	cmp	r3, #4
 8009df6:	d10e      	bne.n	8009e16 <USART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8009df8:	68fa      	ldr	r2, [r7, #12]
 8009dfa:	2380      	movs	r3, #128	; 0x80
 8009dfc:	03d9      	lsls	r1, r3, #15
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	23fa      	movs	r3, #250	; 0xfa
 8009e02:	009b      	lsls	r3, r3, #2
 8009e04:	9300      	str	r3, [sp, #0]
 8009e06:	0013      	movs	r3, r2
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f7ff fcfb 	bl	8009804 <USART_WaitOnFlagUntilTimeout>
 8009e0e:	1e03      	subs	r3, r0, #0
 8009e10:	d001      	beq.n	8009e16 <USART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e12:	2303      	movs	r3, #3
 8009e14:	e008      	b.n	8009e28 <USART_CheckIdleState+0x80>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2259      	movs	r2, #89	; 0x59
 8009e1a:	2101      	movs	r1, #1
 8009e1c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2258      	movs	r2, #88	; 0x58
 8009e22:	2100      	movs	r1, #0
 8009e24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009e26:	2300      	movs	r3, #0
}
 8009e28:	0018      	movs	r0, r3
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	b004      	add	sp, #16
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b082      	sub	sp, #8
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	681a      	ldr	r2, [r3, #0]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	2140      	movs	r1, #64	; 0x40
 8009e44:	438a      	bics	r2, r1
 8009e46:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	689a      	ldr	r2, [r3, #8]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	2101      	movs	r1, #1
 8009e54:	438a      	bics	r2, r1
 8009e56:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	64da      	str	r2, [r3, #76]	; 0x4c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2259      	movs	r2, #89	; 0x59
 8009e62:	5c9b      	ldrb	r3, [r3, r2]
 8009e64:	b2db      	uxtb	r3, r3
 8009e66:	2b12      	cmp	r3, #18
 8009e68:	d114      	bne.n	8009e94 <USART_EndTransmit_IT+0x64>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	2208      	movs	r2, #8
 8009e70:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	699a      	ldr	r2, [r3, #24]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	2108      	movs	r1, #8
 8009e7e:	430a      	orrs	r2, r1
 8009e80:	619a      	str	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2259      	movs	r2, #89	; 0x59
 8009e86:	2101      	movs	r1, #1
 8009e88:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	0018      	movs	r0, r3
 8009e8e:	f7f7 f92b 	bl	80010e8 <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009e92:	e00c      	b.n	8009eae <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d107      	bne.n	8009eae <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2259      	movs	r2, #89	; 0x59
 8009ea2:	2101      	movs	r1, #1
 8009ea4:	5499      	strb	r1, [r3, r2]
    HAL_USART_TxRxCpltCallback(husart);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	0018      	movs	r0, r3
 8009eaa:	f7ff fbff 	bl	80096ac <HAL_USART_TxRxCpltCallback>
}
 8009eae:	46c0      	nop			; (mov r8, r8)
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	b002      	add	sp, #8
 8009eb4:	bd80      	pop	{r7, pc}

08009eb6 <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
 8009eb6:	b580      	push	{r7, lr}
 8009eb8:	b082      	sub	sp, #8
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009ebe:	46c0      	nop			; (mov r8, r8)
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	b002      	add	sp, #8
 8009ec4:	bd80      	pop	{r7, pc}

08009ec6 <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
 8009ec6:	b580      	push	{r7, lr}
 8009ec8:	b082      	sub	sp, #8
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009ece:	46c0      	nop			; (mov r8, r8)
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	b002      	add	sp, #8
 8009ed4:	bd80      	pop	{r7, pc}

08009ed6 <LL_GPIO_SetPinMode>:
{
 8009ed6:	b580      	push	{r7, lr}
 8009ed8:	b084      	sub	sp, #16
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	60f8      	str	r0, [r7, #12]
 8009ede:	60b9      	str	r1, [r7, #8]
 8009ee0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	6819      	ldr	r1, [r3, #0]
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	435b      	muls	r3, r3
 8009eea:	001a      	movs	r2, r3
 8009eec:	0013      	movs	r3, r2
 8009eee:	005b      	lsls	r3, r3, #1
 8009ef0:	189b      	adds	r3, r3, r2
 8009ef2:	43db      	mvns	r3, r3
 8009ef4:	400b      	ands	r3, r1
 8009ef6:	001a      	movs	r2, r3
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	435b      	muls	r3, r3
 8009efc:	6879      	ldr	r1, [r7, #4]
 8009efe:	434b      	muls	r3, r1
 8009f00:	431a      	orrs	r2, r3
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	601a      	str	r2, [r3, #0]
}
 8009f06:	46c0      	nop			; (mov r8, r8)
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	b004      	add	sp, #16
 8009f0c:	bd80      	pop	{r7, pc}

08009f0e <LL_GPIO_SetPinOutputType>:
{
 8009f0e:	b580      	push	{r7, lr}
 8009f10:	b084      	sub	sp, #16
 8009f12:	af00      	add	r7, sp, #0
 8009f14:	60f8      	str	r0, [r7, #12]
 8009f16:	60b9      	str	r1, [r7, #8]
 8009f18:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	68ba      	ldr	r2, [r7, #8]
 8009f20:	43d2      	mvns	r2, r2
 8009f22:	401a      	ands	r2, r3
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	6879      	ldr	r1, [r7, #4]
 8009f28:	434b      	muls	r3, r1
 8009f2a:	431a      	orrs	r2, r3
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	605a      	str	r2, [r3, #4]
}
 8009f30:	46c0      	nop			; (mov r8, r8)
 8009f32:	46bd      	mov	sp, r7
 8009f34:	b004      	add	sp, #16
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <LL_GPIO_SetPinSpeed>:
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b084      	sub	sp, #16
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	6899      	ldr	r1, [r3, #8]
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	435b      	muls	r3, r3
 8009f4c:	001a      	movs	r2, r3
 8009f4e:	0013      	movs	r3, r2
 8009f50:	005b      	lsls	r3, r3, #1
 8009f52:	189b      	adds	r3, r3, r2
 8009f54:	43db      	mvns	r3, r3
 8009f56:	400b      	ands	r3, r1
 8009f58:	001a      	movs	r2, r3
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	435b      	muls	r3, r3
 8009f5e:	6879      	ldr	r1, [r7, #4]
 8009f60:	434b      	muls	r3, r1
 8009f62:	431a      	orrs	r2, r3
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	609a      	str	r2, [r3, #8]
}
 8009f68:	46c0      	nop			; (mov r8, r8)
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	b004      	add	sp, #16
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <LL_GPIO_SetPinPull>:
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	60b9      	str	r1, [r7, #8]
 8009f7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	68d9      	ldr	r1, [r3, #12]
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	435b      	muls	r3, r3
 8009f84:	001a      	movs	r2, r3
 8009f86:	0013      	movs	r3, r2
 8009f88:	005b      	lsls	r3, r3, #1
 8009f8a:	189b      	adds	r3, r3, r2
 8009f8c:	43db      	mvns	r3, r3
 8009f8e:	400b      	ands	r3, r1
 8009f90:	001a      	movs	r2, r3
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	435b      	muls	r3, r3
 8009f96:	6879      	ldr	r1, [r7, #4]
 8009f98:	434b      	muls	r3, r1
 8009f9a:	431a      	orrs	r2, r3
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	60da      	str	r2, [r3, #12]
}
 8009fa0:	46c0      	nop			; (mov r8, r8)
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	b004      	add	sp, #16
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <LL_GPIO_SetAFPin_0_7>:
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b084      	sub	sp, #16
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	60f8      	str	r0, [r7, #12]
 8009fb0:	60b9      	str	r1, [r7, #8]
 8009fb2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	6a19      	ldr	r1, [r3, #32]
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	435b      	muls	r3, r3
 8009fbc:	68ba      	ldr	r2, [r7, #8]
 8009fbe:	4353      	muls	r3, r2
 8009fc0:	68ba      	ldr	r2, [r7, #8]
 8009fc2:	435a      	muls	r2, r3
 8009fc4:	0013      	movs	r3, r2
 8009fc6:	011b      	lsls	r3, r3, #4
 8009fc8:	1a9b      	subs	r3, r3, r2
 8009fca:	43db      	mvns	r3, r3
 8009fcc:	400b      	ands	r3, r1
 8009fce:	001a      	movs	r2, r3
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	435b      	muls	r3, r3
 8009fd4:	68b9      	ldr	r1, [r7, #8]
 8009fd6:	434b      	muls	r3, r1
 8009fd8:	68b9      	ldr	r1, [r7, #8]
 8009fda:	434b      	muls	r3, r1
 8009fdc:	6879      	ldr	r1, [r7, #4]
 8009fde:	434b      	muls	r3, r1
 8009fe0:	431a      	orrs	r2, r3
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	621a      	str	r2, [r3, #32]
}
 8009fe6:	46c0      	nop			; (mov r8, r8)
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	b004      	add	sp, #16
 8009fec:	bd80      	pop	{r7, pc}

08009fee <LL_GPIO_SetAFPin_8_15>:
{
 8009fee:	b580      	push	{r7, lr}
 8009ff0:	b084      	sub	sp, #16
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	60f8      	str	r0, [r7, #12]
 8009ff6:	60b9      	str	r1, [r7, #8]
 8009ff8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	0a1b      	lsrs	r3, r3, #8
 800a002:	68ba      	ldr	r2, [r7, #8]
 800a004:	0a12      	lsrs	r2, r2, #8
 800a006:	4353      	muls	r3, r2
 800a008:	68ba      	ldr	r2, [r7, #8]
 800a00a:	0a12      	lsrs	r2, r2, #8
 800a00c:	4353      	muls	r3, r2
 800a00e:	68ba      	ldr	r2, [r7, #8]
 800a010:	0a12      	lsrs	r2, r2, #8
 800a012:	435a      	muls	r2, r3
 800a014:	0013      	movs	r3, r2
 800a016:	011b      	lsls	r3, r3, #4
 800a018:	1a9b      	subs	r3, r3, r2
 800a01a:	43db      	mvns	r3, r3
 800a01c:	400b      	ands	r3, r1
 800a01e:	001a      	movs	r2, r3
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	0a1b      	lsrs	r3, r3, #8
 800a024:	68b9      	ldr	r1, [r7, #8]
 800a026:	0a09      	lsrs	r1, r1, #8
 800a028:	434b      	muls	r3, r1
 800a02a:	68b9      	ldr	r1, [r7, #8]
 800a02c:	0a09      	lsrs	r1, r1, #8
 800a02e:	434b      	muls	r3, r1
 800a030:	68b9      	ldr	r1, [r7, #8]
 800a032:	0a09      	lsrs	r1, r1, #8
 800a034:	434b      	muls	r3, r1
 800a036:	6879      	ldr	r1, [r7, #4]
 800a038:	434b      	muls	r3, r1
 800a03a:	431a      	orrs	r2, r3
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a040:	46c0      	nop			; (mov r8, r8)
 800a042:	46bd      	mov	sp, r7
 800a044:	b004      	add	sp, #16
 800a046:	bd80      	pop	{r7, pc}

0800a048 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b084      	sub	sp, #16
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800a052:	2300      	movs	r3, #0
 800a054:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800a056:	e047      	b.n	800a0e8 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	2101      	movs	r1, #1
 800a05e:	68fa      	ldr	r2, [r7, #12]
 800a060:	4091      	lsls	r1, r2
 800a062:	000a      	movs	r2, r1
 800a064:	4013      	ands	r3, r2
 800a066:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d039      	beq.n	800a0e2 <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	2b01      	cmp	r3, #1
 800a074:	d003      	beq.n	800a07e <LL_GPIO_Init+0x36>
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	685b      	ldr	r3, [r3, #4]
 800a07a:	2b02      	cmp	r3, #2
 800a07c:	d10d      	bne.n	800a09a <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	689a      	ldr	r2, [r3, #8]
 800a082:	68b9      	ldr	r1, [r7, #8]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	0018      	movs	r0, r3
 800a088:	f7ff ff56 	bl	8009f38 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	68da      	ldr	r2, [r3, #12]
 800a090:	68b9      	ldr	r1, [r7, #8]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	0018      	movs	r0, r3
 800a096:	f7ff ff3a 	bl	8009f0e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	691a      	ldr	r2, [r3, #16]
 800a09e:	68b9      	ldr	r1, [r7, #8]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	0018      	movs	r0, r3
 800a0a4:	f7ff ff64 	bl	8009f70 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	2b02      	cmp	r3, #2
 800a0ae:	d111      	bne.n	800a0d4 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	2bff      	cmp	r3, #255	; 0xff
 800a0b4:	d807      	bhi.n	800a0c6 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	695a      	ldr	r2, [r3, #20]
 800a0ba:	68b9      	ldr	r1, [r7, #8]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	0018      	movs	r0, r3
 800a0c0:	f7ff ff72 	bl	8009fa8 <LL_GPIO_SetAFPin_0_7>
 800a0c4:	e006      	b.n	800a0d4 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	695a      	ldr	r2, [r3, #20]
 800a0ca:	68b9      	ldr	r1, [r7, #8]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	0018      	movs	r0, r3
 800a0d0:	f7ff ff8d 	bl	8009fee <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	685a      	ldr	r2, [r3, #4]
 800a0d8:	68b9      	ldr	r1, [r7, #8]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	0018      	movs	r0, r3
 800a0de:	f7ff fefa 	bl	8009ed6 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	3301      	adds	r3, #1
 800a0e6:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	681a      	ldr	r2, [r3, #0]
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	40da      	lsrs	r2, r3
 800a0f0:	1e13      	subs	r3, r2, #0
 800a0f2:	d1b1      	bne.n	800a058 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800a0f4:	2300      	movs	r3, #0
}
 800a0f6:	0018      	movs	r0, r3
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	b004      	add	sp, #16
 800a0fc:	bd80      	pop	{r7, pc}
	...

0800a100 <LL_RCC_HSI_IsReady>:
{
 800a100:	b580      	push	{r7, lr}
 800a102:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800a104:	4b07      	ldr	r3, [pc, #28]	; (800a124 <LL_RCC_HSI_IsReady+0x24>)
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	2380      	movs	r3, #128	; 0x80
 800a10a:	00db      	lsls	r3, r3, #3
 800a10c:	401a      	ands	r2, r3
 800a10e:	2380      	movs	r3, #128	; 0x80
 800a110:	00db      	lsls	r3, r3, #3
 800a112:	429a      	cmp	r2, r3
 800a114:	d101      	bne.n	800a11a <LL_RCC_HSI_IsReady+0x1a>
 800a116:	2301      	movs	r3, #1
 800a118:	e000      	b.n	800a11c <LL_RCC_HSI_IsReady+0x1c>
 800a11a:	2300      	movs	r3, #0
}
 800a11c:	0018      	movs	r0, r3
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
 800a122:	46c0      	nop			; (mov r8, r8)
 800a124:	40021000 	.word	0x40021000

0800a128 <LL_RCC_LSE_IsReady>:
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800a12c:	4b05      	ldr	r3, [pc, #20]	; (800a144 <LL_RCC_LSE_IsReady+0x1c>)
 800a12e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a130:	2202      	movs	r2, #2
 800a132:	4013      	ands	r3, r2
 800a134:	2b02      	cmp	r3, #2
 800a136:	d101      	bne.n	800a13c <LL_RCC_LSE_IsReady+0x14>
 800a138:	2301      	movs	r3, #1
 800a13a:	e000      	b.n	800a13e <LL_RCC_LSE_IsReady+0x16>
 800a13c:	2300      	movs	r3, #0
}
 800a13e:	0018      	movs	r0, r3
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}
 800a144:	40021000 	.word	0x40021000

0800a148 <LL_RCC_GetSysClkSource>:
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800a14c:	4b03      	ldr	r3, [pc, #12]	; (800a15c <LL_RCC_GetSysClkSource+0x14>)
 800a14e:	689b      	ldr	r3, [r3, #8]
 800a150:	2238      	movs	r2, #56	; 0x38
 800a152:	4013      	ands	r3, r2
}
 800a154:	0018      	movs	r0, r3
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}
 800a15a:	46c0      	nop			; (mov r8, r8)
 800a15c:	40021000 	.word	0x40021000

0800a160 <LL_RCC_GetAHBPrescaler>:
{
 800a160:	b580      	push	{r7, lr}
 800a162:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800a164:	4b03      	ldr	r3, [pc, #12]	; (800a174 <LL_RCC_GetAHBPrescaler+0x14>)
 800a166:	689a      	ldr	r2, [r3, #8]
 800a168:	23f0      	movs	r3, #240	; 0xf0
 800a16a:	011b      	lsls	r3, r3, #4
 800a16c:	4013      	ands	r3, r2
}
 800a16e:	0018      	movs	r0, r3
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}
 800a174:	40021000 	.word	0x40021000

0800a178 <LL_RCC_GetAPB1Prescaler>:
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800a17c:	4b03      	ldr	r3, [pc, #12]	; (800a18c <LL_RCC_GetAPB1Prescaler+0x14>)
 800a17e:	689a      	ldr	r2, [r3, #8]
 800a180:	23e0      	movs	r3, #224	; 0xe0
 800a182:	01db      	lsls	r3, r3, #7
 800a184:	4013      	ands	r3, r2
}
 800a186:	0018      	movs	r0, r3
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}
 800a18c:	40021000 	.word	0x40021000

0800a190 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  * (*) feature not available on all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b082      	sub	sp, #8
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800a198:	4b05      	ldr	r3, [pc, #20]	; (800a1b0 <LL_RCC_GetUSARTClockSource+0x20>)
 800a19a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a19c:	687a      	ldr	r2, [r7, #4]
 800a19e:	401a      	ands	r2, r3
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	041b      	lsls	r3, r3, #16
 800a1a4:	4313      	orrs	r3, r2
}
 800a1a6:	0018      	movs	r0, r3
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	b002      	add	sp, #8
 800a1ac:	bd80      	pop	{r7, pc}
 800a1ae:	46c0      	nop			; (mov r8, r8)
 800a1b0:	40021000 	.word	0x40021000

0800a1b4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800a1b8:	4b03      	ldr	r3, [pc, #12]	; (800a1c8 <LL_RCC_PLL_GetN+0x14>)
 800a1ba:	68db      	ldr	r3, [r3, #12]
 800a1bc:	0a1b      	lsrs	r3, r3, #8
 800a1be:	227f      	movs	r2, #127	; 0x7f
 800a1c0:	4013      	ands	r3, r2
}
 800a1c2:	0018      	movs	r0, r3
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}
 800a1c8:	40021000 	.word	0x40021000

0800a1cc <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800a1d0:	4b03      	ldr	r3, [pc, #12]	; (800a1e0 <LL_RCC_PLL_GetR+0x14>)
 800a1d2:	68db      	ldr	r3, [r3, #12]
 800a1d4:	0f5b      	lsrs	r3, r3, #29
 800a1d6:	075b      	lsls	r3, r3, #29
}
 800a1d8:	0018      	movs	r0, r3
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}
 800a1de:	46c0      	nop			; (mov r8, r8)
 800a1e0:	40021000 	.word	0x40021000

0800a1e4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800a1e8:	4b03      	ldr	r3, [pc, #12]	; (800a1f8 <LL_RCC_PLL_GetMainSource+0x14>)
 800a1ea:	68db      	ldr	r3, [r3, #12]
 800a1ec:	2203      	movs	r2, #3
 800a1ee:	4013      	ands	r3, r2
}
 800a1f0:	0018      	movs	r0, r3
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}
 800a1f6:	46c0      	nop			; (mov r8, r8)
 800a1f8:	40021000 	.word	0x40021000

0800a1fc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800a200:	4b03      	ldr	r3, [pc, #12]	; (800a210 <LL_RCC_PLL_GetDivider+0x14>)
 800a202:	68db      	ldr	r3, [r3, #12]
 800a204:	2270      	movs	r2, #112	; 0x70
 800a206:	4013      	ands	r3, r2
}
 800a208:	0018      	movs	r0, r3
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
 800a20e:	46c0      	nop			; (mov r8, r8)
 800a210:	40021000 	.word	0x40021000

0800a214 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b082      	sub	sp, #8
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800a21c:	f000 f8a8 	bl	800a370 <RCC_GetSystemClockFreq>
 800a220:	0002      	movs	r2, r0
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	0018      	movs	r0, r3
 800a22c:	f000 f8ce 	bl	800a3cc <RCC_GetHCLKClockFreq>
 800a230:	0002      	movs	r2, r0
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	0018      	movs	r0, r3
 800a23c:	f000 f8de 	bl	800a3fc <RCC_GetPCLK1ClockFreq>
 800a240:	0002      	movs	r2, r0
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	609a      	str	r2, [r3, #8]
}
 800a246:	46c0      	nop			; (mov r8, r8)
 800a248:	46bd      	mov	sp, r7
 800a24a:	b002      	add	sp, #8
 800a24c:	bd80      	pop	{r7, pc}
	...

0800a250 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b084      	sub	sp, #16
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800a258:	2300      	movs	r3, #0
 800a25a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2b03      	cmp	r3, #3
 800a260:	d134      	bne.n	800a2cc <LL_RCC_GetUSARTClockFreq+0x7c>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	0018      	movs	r0, r3
 800a266:	f7ff ff93 	bl	800a190 <LL_RCC_GetUSARTClockSource>
 800a26a:	0003      	movs	r3, r0
 800a26c:	4a39      	ldr	r2, [pc, #228]	; (800a354 <LL_RCC_GetUSARTClockFreq+0x104>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d016      	beq.n	800a2a0 <LL_RCC_GetUSARTClockFreq+0x50>
 800a272:	4a38      	ldr	r2, [pc, #224]	; (800a354 <LL_RCC_GetUSARTClockFreq+0x104>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d81c      	bhi.n	800a2b2 <LL_RCC_GetUSARTClockFreq+0x62>
 800a278:	4a37      	ldr	r2, [pc, #220]	; (800a358 <LL_RCC_GetUSARTClockFreq+0x108>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d003      	beq.n	800a286 <LL_RCC_GetUSARTClockFreq+0x36>
 800a27e:	4a37      	ldr	r2, [pc, #220]	; (800a35c <LL_RCC_GetUSARTClockFreq+0x10c>)
 800a280:	4293      	cmp	r3, r2
 800a282:	d005      	beq.n	800a290 <LL_RCC_GetUSARTClockFreq+0x40>
 800a284:	e015      	b.n	800a2b2 <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800a286:	f000 f873 	bl	800a370 <RCC_GetSystemClockFreq>
 800a28a:	0003      	movs	r3, r0
 800a28c:	60fb      	str	r3, [r7, #12]
        break;
 800a28e:	e05c      	b.n	800a34a <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800a290:	f7ff ff36 	bl	800a100 <LL_RCC_HSI_IsReady>
 800a294:	0003      	movs	r3, r0
 800a296:	2b01      	cmp	r3, #1
 800a298:	d150      	bne.n	800a33c <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = HSI_VALUE;
 800a29a:	4b31      	ldr	r3, [pc, #196]	; (800a360 <LL_RCC_GetUSARTClockFreq+0x110>)
 800a29c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a29e:	e04d      	b.n	800a33c <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800a2a0:	f7ff ff42 	bl	800a128 <LL_RCC_LSE_IsReady>
 800a2a4:	0003      	movs	r3, r0
 800a2a6:	2b01      	cmp	r3, #1
 800a2a8:	d14a      	bne.n	800a340 <LL_RCC_GetUSARTClockFreq+0xf0>
        {
          usart_frequency = LSE_VALUE;
 800a2aa:	2380      	movs	r3, #128	; 0x80
 800a2ac:	021b      	lsls	r3, r3, #8
 800a2ae:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a2b0:	e046      	b.n	800a340 <LL_RCC_GetUSARTClockFreq+0xf0>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800a2b2:	f000 f85d 	bl	800a370 <RCC_GetSystemClockFreq>
 800a2b6:	0003      	movs	r3, r0
 800a2b8:	0018      	movs	r0, r3
 800a2ba:	f000 f887 	bl	800a3cc <RCC_GetHCLKClockFreq>
 800a2be:	0003      	movs	r3, r0
 800a2c0:	0018      	movs	r0, r3
 800a2c2:	f000 f89b 	bl	800a3fc <RCC_GetPCLK1ClockFreq>
 800a2c6:	0003      	movs	r3, r0
 800a2c8:	60fb      	str	r3, [r7, #12]
        break;
 800a2ca:	e03e      	b.n	800a34a <LL_RCC_GetUSARTClockFreq+0xfa>
    }
  }
#if defined(RCC_CCIPR_USART2SEL)
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2b0c      	cmp	r3, #12
 800a2d0:	d13b      	bne.n	800a34a <LL_RCC_GetUSARTClockFreq+0xfa>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	0018      	movs	r0, r3
 800a2d6:	f7ff ff5b 	bl	800a190 <LL_RCC_GetUSARTClockSource>
 800a2da:	0003      	movs	r3, r0
 800a2dc:	4a21      	ldr	r2, [pc, #132]	; (800a364 <LL_RCC_GetUSARTClockFreq+0x114>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d016      	beq.n	800a310 <LL_RCC_GetUSARTClockFreq+0xc0>
 800a2e2:	4a20      	ldr	r2, [pc, #128]	; (800a364 <LL_RCC_GetUSARTClockFreq+0x114>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d81c      	bhi.n	800a322 <LL_RCC_GetUSARTClockFreq+0xd2>
 800a2e8:	4a1f      	ldr	r2, [pc, #124]	; (800a368 <LL_RCC_GetUSARTClockFreq+0x118>)
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d003      	beq.n	800a2f6 <LL_RCC_GetUSARTClockFreq+0xa6>
 800a2ee:	4a1f      	ldr	r2, [pc, #124]	; (800a36c <LL_RCC_GetUSARTClockFreq+0x11c>)
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d005      	beq.n	800a300 <LL_RCC_GetUSARTClockFreq+0xb0>
 800a2f4:	e015      	b.n	800a322 <LL_RCC_GetUSARTClockFreq+0xd2>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800a2f6:	f000 f83b 	bl	800a370 <RCC_GetSystemClockFreq>
 800a2fa:	0003      	movs	r3, r0
 800a2fc:	60fb      	str	r3, [r7, #12]
        break;
 800a2fe:	e024      	b.n	800a34a <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800a300:	f7ff fefe 	bl	800a100 <LL_RCC_HSI_IsReady>
 800a304:	0003      	movs	r3, r0
 800a306:	2b01      	cmp	r3, #1
 800a308:	d11c      	bne.n	800a344 <LL_RCC_GetUSARTClockFreq+0xf4>
        {
          usart_frequency = HSI_VALUE;
 800a30a:	4b15      	ldr	r3, [pc, #84]	; (800a360 <LL_RCC_GetUSARTClockFreq+0x110>)
 800a30c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a30e:	e019      	b.n	800a344 <LL_RCC_GetUSARTClockFreq+0xf4>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800a310:	f7ff ff0a 	bl	800a128 <LL_RCC_LSE_IsReady>
 800a314:	0003      	movs	r3, r0
 800a316:	2b01      	cmp	r3, #1
 800a318:	d116      	bne.n	800a348 <LL_RCC_GetUSARTClockFreq+0xf8>
        {
          usart_frequency = LSE_VALUE;
 800a31a:	2380      	movs	r3, #128	; 0x80
 800a31c:	021b      	lsls	r3, r3, #8
 800a31e:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a320:	e012      	b.n	800a348 <LL_RCC_GetUSARTClockFreq+0xf8>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800a322:	f000 f825 	bl	800a370 <RCC_GetSystemClockFreq>
 800a326:	0003      	movs	r3, r0
 800a328:	0018      	movs	r0, r3
 800a32a:	f000 f84f 	bl	800a3cc <RCC_GetHCLKClockFreq>
 800a32e:	0003      	movs	r3, r0
 800a330:	0018      	movs	r0, r3
 800a332:	f000 f863 	bl	800a3fc <RCC_GetPCLK1ClockFreq>
 800a336:	0003      	movs	r3, r0
 800a338:	60fb      	str	r3, [r7, #12]
        break;
 800a33a:	e006      	b.n	800a34a <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800a33c:	46c0      	nop			; (mov r8, r8)
 800a33e:	e004      	b.n	800a34a <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800a340:	46c0      	nop			; (mov r8, r8)
 800a342:	e002      	b.n	800a34a <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800a344:	46c0      	nop			; (mov r8, r8)
 800a346:	e000      	b.n	800a34a <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800a348:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 800a34a:	68fb      	ldr	r3, [r7, #12]
}
 800a34c:	0018      	movs	r0, r3
 800a34e:	46bd      	mov	sp, r7
 800a350:	b004      	add	sp, #16
 800a352:	bd80      	pop	{r7, pc}
 800a354:	00030003 	.word	0x00030003
 800a358:	00030001 	.word	0x00030001
 800a35c:	00030002 	.word	0x00030002
 800a360:	00f42400 	.word	0x00f42400
 800a364:	000c000c 	.word	0x000c000c
 800a368:	000c0004 	.word	0x000c0004
 800a36c:	000c0008 	.word	0x000c0008

0800a370 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b082      	sub	sp, #8
 800a374:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800a376:	f7ff fee7 	bl	800a148 <LL_RCC_GetSysClkSource>
 800a37a:	0003      	movs	r3, r0
 800a37c:	2b08      	cmp	r3, #8
 800a37e:	d002      	beq.n	800a386 <RCC_GetSystemClockFreq+0x16>
 800a380:	2b10      	cmp	r3, #16
 800a382:	d003      	beq.n	800a38c <RCC_GetSystemClockFreq+0x1c>
 800a384:	e007      	b.n	800a396 <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800a386:	4b0e      	ldr	r3, [pc, #56]	; (800a3c0 <RCC_GetSystemClockFreq+0x50>)
 800a388:	607b      	str	r3, [r7, #4]
      break;
 800a38a:	e014      	b.n	800a3b6 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800a38c:	f000 f84c 	bl	800a428 <RCC_PLL_GetFreqDomain_SYS>
 800a390:	0003      	movs	r3, r0
 800a392:	607b      	str	r3, [r7, #4]
      break;
 800a394:	e00f      	b.n	800a3b6 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800a396:	4b0b      	ldr	r3, [pc, #44]	; (800a3c4 <RCC_GetSystemClockFreq+0x54>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	0adb      	lsrs	r3, r3, #11
 800a39c:	2207      	movs	r2, #7
 800a39e:	4013      	ands	r3, r2
 800a3a0:	2201      	movs	r2, #1
 800a3a2:	409a      	lsls	r2, r3
 800a3a4:	0013      	movs	r3, r2
 800a3a6:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 800a3a8:	6839      	ldr	r1, [r7, #0]
 800a3aa:	4807      	ldr	r0, [pc, #28]	; (800a3c8 <RCC_GetSystemClockFreq+0x58>)
 800a3ac:	f7f5 feaa 	bl	8000104 <__udivsi3>
 800a3b0:	0003      	movs	r3, r0
 800a3b2:	607b      	str	r3, [r7, #4]
      break;
 800a3b4:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 800a3b6:	687b      	ldr	r3, [r7, #4]
}
 800a3b8:	0018      	movs	r0, r3
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	b002      	add	sp, #8
 800a3be:	bd80      	pop	{r7, pc}
 800a3c0:	007a1200 	.word	0x007a1200
 800a3c4:	40021000 	.word	0x40021000
 800a3c8:	00f42400 	.word	0x00f42400

0800a3cc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b082      	sub	sp, #8
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800a3d4:	f7ff fec4 	bl	800a160 <LL_RCC_GetAHBPrescaler>
 800a3d8:	0003      	movs	r3, r0
 800a3da:	0a1b      	lsrs	r3, r3, #8
 800a3dc:	220f      	movs	r2, #15
 800a3de:	401a      	ands	r2, r3
 800a3e0:	4b05      	ldr	r3, [pc, #20]	; (800a3f8 <RCC_GetHCLKClockFreq+0x2c>)
 800a3e2:	0092      	lsls	r2, r2, #2
 800a3e4:	58d3      	ldr	r3, [r2, r3]
 800a3e6:	221f      	movs	r2, #31
 800a3e8:	4013      	ands	r3, r2
 800a3ea:	687a      	ldr	r2, [r7, #4]
 800a3ec:	40da      	lsrs	r2, r3
 800a3ee:	0013      	movs	r3, r2
}
 800a3f0:	0018      	movs	r0, r3
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	b002      	add	sp, #8
 800a3f6:	bd80      	pop	{r7, pc}
 800a3f8:	0800a770 	.word	0x0800a770

0800a3fc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b082      	sub	sp, #8
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800a404:	f7ff feb8 	bl	800a178 <LL_RCC_GetAPB1Prescaler>
 800a408:	0003      	movs	r3, r0
 800a40a:	0b1a      	lsrs	r2, r3, #12
 800a40c:	4b05      	ldr	r3, [pc, #20]	; (800a424 <RCC_GetPCLK1ClockFreq+0x28>)
 800a40e:	0092      	lsls	r2, r2, #2
 800a410:	58d3      	ldr	r3, [r2, r3]
 800a412:	221f      	movs	r2, #31
 800a414:	4013      	ands	r3, r2
 800a416:	687a      	ldr	r2, [r7, #4]
 800a418:	40da      	lsrs	r2, r3
 800a41a:	0013      	movs	r3, r2
}
 800a41c:	0018      	movs	r0, r3
 800a41e:	46bd      	mov	sp, r7
 800a420:	b002      	add	sp, #8
 800a422:	bd80      	pop	{r7, pc}
 800a424:	0800a7b0 	.word	0x0800a7b0

0800a428 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800a428:	b590      	push	{r4, r7, lr}
 800a42a:	b083      	sub	sp, #12
 800a42c:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800a42e:	f7ff fed9 	bl	800a1e4 <LL_RCC_PLL_GetMainSource>
 800a432:	0003      	movs	r3, r0
 800a434:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	2b02      	cmp	r3, #2
 800a43a:	d003      	beq.n	800a444 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	2b03      	cmp	r3, #3
 800a440:	d003      	beq.n	800a44a <RCC_PLL_GetFreqDomain_SYS+0x22>
 800a442:	e005      	b.n	800a450 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800a444:	4b13      	ldr	r3, [pc, #76]	; (800a494 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800a446:	607b      	str	r3, [r7, #4]
      break;
 800a448:	e005      	b.n	800a456 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800a44a:	4b13      	ldr	r3, [pc, #76]	; (800a498 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 800a44c:	607b      	str	r3, [r7, #4]
      break;
 800a44e:	e002      	b.n	800a456 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 800a450:	4b10      	ldr	r3, [pc, #64]	; (800a494 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800a452:	607b      	str	r3, [r7, #4]
      break;
 800a454:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800a456:	f7ff fead 	bl	800a1b4 <LL_RCC_PLL_GetN>
 800a45a:	0002      	movs	r2, r0
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	4353      	muls	r3, r2
 800a460:	001c      	movs	r4, r3
 800a462:	f7ff fecb 	bl	800a1fc <LL_RCC_PLL_GetDivider>
 800a466:	0003      	movs	r3, r0
 800a468:	091b      	lsrs	r3, r3, #4
 800a46a:	3301      	adds	r3, #1
 800a46c:	0019      	movs	r1, r3
 800a46e:	0020      	movs	r0, r4
 800a470:	f7f5 fe48 	bl	8000104 <__udivsi3>
 800a474:	0003      	movs	r3, r0
 800a476:	001c      	movs	r4, r3
 800a478:	f7ff fea8 	bl	800a1cc <LL_RCC_PLL_GetR>
 800a47c:	0003      	movs	r3, r0
 800a47e:	0f5b      	lsrs	r3, r3, #29
 800a480:	3301      	adds	r3, #1
 800a482:	0019      	movs	r1, r3
 800a484:	0020      	movs	r0, r4
 800a486:	f7f5 fe3d 	bl	8000104 <__udivsi3>
 800a48a:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800a48c:	0018      	movs	r0, r3
 800a48e:	46bd      	mov	sp, r7
 800a490:	b003      	add	sp, #12
 800a492:	bd90      	pop	{r4, r7, pc}
 800a494:	00f42400 	.word	0x00f42400
 800a498:	007a1200 	.word	0x007a1200

0800a49c <LL_USART_IsEnabled>:
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b082      	sub	sp, #8
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	2201      	movs	r2, #1
 800a4aa:	4013      	ands	r3, r2
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d101      	bne.n	800a4b4 <LL_USART_IsEnabled+0x18>
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	e000      	b.n	800a4b6 <LL_USART_IsEnabled+0x1a>
 800a4b4:	2300      	movs	r3, #0
}
 800a4b6:	0018      	movs	r0, r3
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	b002      	add	sp, #8
 800a4bc:	bd80      	pop	{r7, pc}

0800a4be <LL_USART_SetPrescaler>:
{
 800a4be:	b580      	push	{r7, lr}
 800a4c0:	b082      	sub	sp, #8
 800a4c2:	af00      	add	r7, sp, #0
 800a4c4:	6078      	str	r0, [r7, #4]
 800a4c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4cc:	220f      	movs	r2, #15
 800a4ce:	4393      	bics	r3, r2
 800a4d0:	683a      	ldr	r2, [r7, #0]
 800a4d2:	b292      	uxth	r2, r2
 800a4d4:	431a      	orrs	r2, r3
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800a4da:	46c0      	nop			; (mov r8, r8)
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	b002      	add	sp, #8
 800a4e0:	bd80      	pop	{r7, pc}
	...

0800a4e4 <LL_USART_SetStopBitsLength>:
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b082      	sub	sp, #8
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	4a05      	ldr	r2, [pc, #20]	; (800a508 <LL_USART_SetStopBitsLength+0x24>)
 800a4f4:	401a      	ands	r2, r3
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	431a      	orrs	r2, r3
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	605a      	str	r2, [r3, #4]
}
 800a4fe:	46c0      	nop			; (mov r8, r8)
 800a500:	46bd      	mov	sp, r7
 800a502:	b002      	add	sp, #8
 800a504:	bd80      	pop	{r7, pc}
 800a506:	46c0      	nop			; (mov r8, r8)
 800a508:	ffffcfff 	.word	0xffffcfff

0800a50c <LL_USART_SetHWFlowCtrl>:
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b082      	sub	sp, #8
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	689b      	ldr	r3, [r3, #8]
 800a51a:	4a05      	ldr	r2, [pc, #20]	; (800a530 <LL_USART_SetHWFlowCtrl+0x24>)
 800a51c:	401a      	ands	r2, r3
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	431a      	orrs	r2, r3
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	609a      	str	r2, [r3, #8]
}
 800a526:	46c0      	nop			; (mov r8, r8)
 800a528:	46bd      	mov	sp, r7
 800a52a:	b002      	add	sp, #8
 800a52c:	bd80      	pop	{r7, pc}
 800a52e:	46c0      	nop			; (mov r8, r8)
 800a530:	fffffcff 	.word	0xfffffcff

0800a534 <LL_USART_SetBaudRate>:
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b086      	sub	sp, #24
 800a538:	af00      	add	r7, sp, #0
 800a53a:	60f8      	str	r0, [r7, #12]
 800a53c:	60b9      	str	r1, [r7, #8]
 800a53e:	607a      	str	r2, [r7, #4]
 800a540:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2b0b      	cmp	r3, #11
 800a546:	d843      	bhi.n	800a5d0 <LL_USART_SetBaudRate+0x9c>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800a548:	683a      	ldr	r2, [r7, #0]
 800a54a:	2380      	movs	r3, #128	; 0x80
 800a54c:	021b      	lsls	r3, r3, #8
 800a54e:	429a      	cmp	r2, r3
 800a550:	d126      	bne.n	800a5a0 <LL_USART_SetBaudRate+0x6c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	b2db      	uxtb	r3, r3
 800a556:	001a      	movs	r2, r3
 800a558:	4b1f      	ldr	r3, [pc, #124]	; (800a5d8 <LL_USART_SetBaudRate+0xa4>)
 800a55a:	0092      	lsls	r2, r2, #2
 800a55c:	58d3      	ldr	r3, [r2, r3]
 800a55e:	0019      	movs	r1, r3
 800a560:	68b8      	ldr	r0, [r7, #8]
 800a562:	f7f5 fdcf 	bl	8000104 <__udivsi3>
 800a566:	0003      	movs	r3, r0
 800a568:	005a      	lsls	r2, r3, #1
 800a56a:	6a3b      	ldr	r3, [r7, #32]
 800a56c:	085b      	lsrs	r3, r3, #1
 800a56e:	18d3      	adds	r3, r2, r3
 800a570:	6a39      	ldr	r1, [r7, #32]
 800a572:	0018      	movs	r0, r3
 800a574:	f7f5 fdc6 	bl	8000104 <__udivsi3>
 800a578:	0003      	movs	r3, r0
 800a57a:	b29b      	uxth	r3, r3
 800a57c:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	4a16      	ldr	r2, [pc, #88]	; (800a5dc <LL_USART_SetBaudRate+0xa8>)
 800a582:	4013      	ands	r3, r2
 800a584:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	085b      	lsrs	r3, r3, #1
 800a58a:	b29b      	uxth	r3, r3
 800a58c:	001a      	movs	r2, r3
 800a58e:	2307      	movs	r3, #7
 800a590:	4013      	ands	r3, r2
 800a592:	693a      	ldr	r2, [r7, #16]
 800a594:	4313      	orrs	r3, r2
 800a596:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	693a      	ldr	r2, [r7, #16]
 800a59c:	60da      	str	r2, [r3, #12]
}
 800a59e:	e017      	b.n	800a5d0 <LL_USART_SetBaudRate+0x9c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	b2db      	uxtb	r3, r3
 800a5a4:	001a      	movs	r2, r3
 800a5a6:	4b0c      	ldr	r3, [pc, #48]	; (800a5d8 <LL_USART_SetBaudRate+0xa4>)
 800a5a8:	0092      	lsls	r2, r2, #2
 800a5aa:	58d3      	ldr	r3, [r2, r3]
 800a5ac:	0019      	movs	r1, r3
 800a5ae:	68b8      	ldr	r0, [r7, #8]
 800a5b0:	f7f5 fda8 	bl	8000104 <__udivsi3>
 800a5b4:	0003      	movs	r3, r0
 800a5b6:	001a      	movs	r2, r3
 800a5b8:	6a3b      	ldr	r3, [r7, #32]
 800a5ba:	085b      	lsrs	r3, r3, #1
 800a5bc:	18d3      	adds	r3, r2, r3
 800a5be:	6a39      	ldr	r1, [r7, #32]
 800a5c0:	0018      	movs	r0, r3
 800a5c2:	f7f5 fd9f 	bl	8000104 <__udivsi3>
 800a5c6:	0003      	movs	r3, r0
 800a5c8:	b29b      	uxth	r3, r3
 800a5ca:	001a      	movs	r2, r3
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	60da      	str	r2, [r3, #12]
}
 800a5d0:	46c0      	nop			; (mov r8, r8)
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	b006      	add	sp, #24
 800a5d6:	bd80      	pop	{r7, pc}
 800a5d8:	0800a824 	.word	0x0800a824
 800a5dc:	0000fff0 	.word	0x0000fff0

0800a5e0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800a5e0:	b590      	push	{r4, r7, lr}
 800a5e2:	b08b      	sub	sp, #44	; 0x2c
 800a5e4:	af02      	add	r7, sp, #8
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800a5ea:	231f      	movs	r3, #31
 800a5ec:	18fb      	adds	r3, r7, r3
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	0018      	movs	r0, r3
 800a5fa:	f7ff ff4f 	bl	800a49c <LL_USART_IsEnabled>
 800a5fe:	1e03      	subs	r3, r0, #0
 800a600:	d16a      	bne.n	800a6d8 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	4a38      	ldr	r2, [pc, #224]	; (800a6e8 <LL_USART_Init+0x108>)
 800a608:	401a      	ands	r2, r3
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	6899      	ldr	r1, [r3, #8]
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	691b      	ldr	r3, [r3, #16]
 800a612:	4319      	orrs	r1, r3
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	695b      	ldr	r3, [r3, #20]
 800a618:	4319      	orrs	r1, r3
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	69db      	ldr	r3, [r3, #28]
 800a61e:	430b      	orrs	r3, r1
 800a620:	431a      	orrs	r2, r3
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	68da      	ldr	r2, [r3, #12]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	0011      	movs	r1, r2
 800a62e:	0018      	movs	r0, r3
 800a630:	f7ff ff58 	bl	800a4e4 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	699a      	ldr	r2, [r3, #24]
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	0011      	movs	r1, r2
 800a63c:	0018      	movs	r0, r3
 800a63e:	f7ff ff65 	bl	800a50c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	4a29      	ldr	r2, [pc, #164]	; (800a6ec <LL_USART_Init+0x10c>)
 800a646:	4293      	cmp	r3, r2
 800a648:	d105      	bne.n	800a656 <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800a64a:	2003      	movs	r0, #3
 800a64c:	f7ff fe00 	bl	800a250 <LL_RCC_GetUSARTClockFreq>
 800a650:	0003      	movs	r3, r0
 800a652:	61bb      	str	r3, [r7, #24]
 800a654:	e022      	b.n	800a69c <LL_USART_Init+0xbc>
    }
    else if (USARTx == USART2)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	4a25      	ldr	r2, [pc, #148]	; (800a6f0 <LL_USART_Init+0x110>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d105      	bne.n	800a66a <LL_USART_Init+0x8a>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800a65e:	200c      	movs	r0, #12
 800a660:	f7ff fdf6 	bl	800a250 <LL_RCC_GetUSARTClockFreq>
 800a664:	0003      	movs	r3, r0
 800a666:	61bb      	str	r3, [r7, #24]
 800a668:	e018      	b.n	800a69c <LL_USART_Init+0xbc>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* RCC_CCIPR_USART2SEL */
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	4a21      	ldr	r2, [pc, #132]	; (800a6f4 <LL_USART_Init+0x114>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d108      	bne.n	800a684 <LL_USART_Init+0xa4>
    {
#if defined(RCC_CCIPR_USART3SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800a672:	240c      	movs	r4, #12
 800a674:	193b      	adds	r3, r7, r4
 800a676:	0018      	movs	r0, r3
 800a678:	f7ff fdcc 	bl	800a214 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800a67c:	193b      	adds	r3, r7, r4
 800a67e:	689b      	ldr	r3, [r3, #8]
 800a680:	61bb      	str	r3, [r7, #24]
 800a682:	e00b      	b.n	800a69c <LL_USART_Init+0xbc>
#endif /* RCC_CCIPR_USART3SEL */
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	4a1c      	ldr	r2, [pc, #112]	; (800a6f8 <LL_USART_Init+0x118>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d107      	bne.n	800a69c <LL_USART_Init+0xbc>
    {
#if defined(RCC_CCIPR_USART4SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART4_CLKSOURCE);
#else
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800a68c:	240c      	movs	r4, #12
 800a68e:	193b      	adds	r3, r7, r4
 800a690:	0018      	movs	r0, r3
 800a692:	f7ff fdbf 	bl	800a214 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800a696:	193b      	adds	r3, r7, r4
 800a698:	689b      	ldr	r3, [r3, #8]
 800a69a:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800a69c:	69bb      	ldr	r3, [r7, #24]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d013      	beq.n	800a6ca <LL_USART_Init+0xea>
        && (USART_InitStruct->BaudRate != 0U))
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	685b      	ldr	r3, [r3, #4]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d00f      	beq.n	800a6ca <LL_USART_Init+0xea>
    {
      status = SUCCESS;
 800a6aa:	231f      	movs	r3, #31
 800a6ac:	18fb      	adds	r3, r7, r3
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	681a      	ldr	r2, [r3, #0]
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	69dc      	ldr	r4, [r3, #28]
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	69b9      	ldr	r1, [r7, #24]
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	9300      	str	r3, [sp, #0]
 800a6c4:	0023      	movs	r3, r4
 800a6c6:	f7ff ff35 	bl	800a534 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	681a      	ldr	r2, [r3, #0]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	0011      	movs	r1, r2
 800a6d2:	0018      	movs	r0, r3
 800a6d4:	f7ff fef3 	bl	800a4be <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800a6d8:	231f      	movs	r3, #31
 800a6da:	18fb      	adds	r3, r7, r3
 800a6dc:	781b      	ldrb	r3, [r3, #0]
}
 800a6de:	0018      	movs	r0, r3
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	b009      	add	sp, #36	; 0x24
 800a6e4:	bd90      	pop	{r4, r7, pc}
 800a6e6:	46c0      	nop			; (mov r8, r8)
 800a6e8:	efff69f3 	.word	0xefff69f3
 800a6ec:	40013800 	.word	0x40013800
 800a6f0:	40004400 	.word	0x40004400
 800a6f4:	40004800 	.word	0x40004800
 800a6f8:	40004c00 	.word	0x40004c00

0800a6fc <__libc_init_array>:
 800a6fc:	b570      	push	{r4, r5, r6, lr}
 800a6fe:	2600      	movs	r6, #0
 800a700:	4d0c      	ldr	r5, [pc, #48]	; (800a734 <__libc_init_array+0x38>)
 800a702:	4c0d      	ldr	r4, [pc, #52]	; (800a738 <__libc_init_array+0x3c>)
 800a704:	1b64      	subs	r4, r4, r5
 800a706:	10a4      	asrs	r4, r4, #2
 800a708:	42a6      	cmp	r6, r4
 800a70a:	d109      	bne.n	800a720 <__libc_init_array+0x24>
 800a70c:	2600      	movs	r6, #0
 800a70e:	f000 f821 	bl	800a754 <_init>
 800a712:	4d0a      	ldr	r5, [pc, #40]	; (800a73c <__libc_init_array+0x40>)
 800a714:	4c0a      	ldr	r4, [pc, #40]	; (800a740 <__libc_init_array+0x44>)
 800a716:	1b64      	subs	r4, r4, r5
 800a718:	10a4      	asrs	r4, r4, #2
 800a71a:	42a6      	cmp	r6, r4
 800a71c:	d105      	bne.n	800a72a <__libc_init_array+0x2e>
 800a71e:	bd70      	pop	{r4, r5, r6, pc}
 800a720:	00b3      	lsls	r3, r6, #2
 800a722:	58eb      	ldr	r3, [r5, r3]
 800a724:	4798      	blx	r3
 800a726:	3601      	adds	r6, #1
 800a728:	e7ee      	b.n	800a708 <__libc_init_array+0xc>
 800a72a:	00b3      	lsls	r3, r6, #2
 800a72c:	58eb      	ldr	r3, [r5, r3]
 800a72e:	4798      	blx	r3
 800a730:	3601      	adds	r6, #1
 800a732:	e7f2      	b.n	800a71a <__libc_init_array+0x1e>
 800a734:	0800a854 	.word	0x0800a854
 800a738:	0800a854 	.word	0x0800a854
 800a73c:	0800a854 	.word	0x0800a854
 800a740:	0800a858 	.word	0x0800a858

0800a744 <memset>:
 800a744:	0003      	movs	r3, r0
 800a746:	1882      	adds	r2, r0, r2
 800a748:	4293      	cmp	r3, r2
 800a74a:	d100      	bne.n	800a74e <memset+0xa>
 800a74c:	4770      	bx	lr
 800a74e:	7019      	strb	r1, [r3, #0]
 800a750:	3301      	adds	r3, #1
 800a752:	e7f9      	b.n	800a748 <memset+0x4>

0800a754 <_init>:
 800a754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a756:	46c0      	nop			; (mov r8, r8)
 800a758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a75a:	bc08      	pop	{r3}
 800a75c:	469e      	mov	lr, r3
 800a75e:	4770      	bx	lr

0800a760 <_fini>:
 800a760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a762:	46c0      	nop			; (mov r8, r8)
 800a764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a766:	bc08      	pop	{r3}
 800a768:	469e      	mov	lr, r3
 800a76a:	4770      	bx	lr
