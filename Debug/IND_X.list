
IND_X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e118  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  0800e1d8  0800e1d8  0001e1d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e518  0800e518  00023140  2**0
                  CONTENTS
  4 .ARM          00000000  0800e518  0800e518  00023140  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e518  0800e518  00023140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e518  0800e518  0001e518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e51c  0800e51c  0001e51c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00003140  20000000  0800e520  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024c4  20003140  08011660  00023140  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005604  08011660  00025604  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00023140  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019f54  00000000  00000000  00023168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034e8  00000000  00000000  0003d0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018b0  00000000  00000000  000405a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001738  00000000  00000000  00041e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c403  00000000  00000000  00043590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d230  00000000  00000000  0005f993  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae2c7  00000000  00000000  0007cbc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012ae8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e34  00000000  00000000  0012aee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20003140 	.word	0x20003140
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800e1bc 	.word	0x0800e1bc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20003144 	.word	0x20003144
 8000100:	0800e1bc 	.word	0x0800e1bc

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_cdrcmple>:
 80003f0:	4684      	mov	ip, r0
 80003f2:	1c10      	adds	r0, r2, #0
 80003f4:	4662      	mov	r2, ip
 80003f6:	468c      	mov	ip, r1
 80003f8:	1c19      	adds	r1, r3, #0
 80003fa:	4663      	mov	r3, ip
 80003fc:	e000      	b.n	8000400 <__aeabi_cdcmpeq>
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_cdcmpeq>:
 8000400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000402:	f000 ff51 	bl	80012a8 <__ledf2>
 8000406:	2800      	cmp	r0, #0
 8000408:	d401      	bmi.n	800040e <__aeabi_cdcmpeq+0xe>
 800040a:	2100      	movs	r1, #0
 800040c:	42c8      	cmn	r0, r1
 800040e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000410 <__aeabi_dcmpeq>:
 8000410:	b510      	push	{r4, lr}
 8000412:	f000 fe9b 	bl	800114c <__eqdf2>
 8000416:	4240      	negs	r0, r0
 8000418:	3001      	adds	r0, #1
 800041a:	bd10      	pop	{r4, pc}

0800041c <__aeabi_dcmplt>:
 800041c:	b510      	push	{r4, lr}
 800041e:	f000 ff43 	bl	80012a8 <__ledf2>
 8000422:	2800      	cmp	r0, #0
 8000424:	db01      	blt.n	800042a <__aeabi_dcmplt+0xe>
 8000426:	2000      	movs	r0, #0
 8000428:	bd10      	pop	{r4, pc}
 800042a:	2001      	movs	r0, #1
 800042c:	bd10      	pop	{r4, pc}
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__aeabi_dcmple>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f000 ff39 	bl	80012a8 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	dd01      	ble.n	800043e <__aeabi_dcmple+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_dcmpgt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 febd 	bl	80011c4 <__gedf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dc01      	bgt.n	8000452 <__aeabi_dcmpgt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmpge>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 feb3 	bl	80011c4 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	da01      	bge.n	8000466 <__aeabi_dcmpge+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_d2uiz>:
 800046c:	b570      	push	{r4, r5, r6, lr}
 800046e:	2200      	movs	r2, #0
 8000470:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <__aeabi_d2uiz+0x38>)
 8000472:	0004      	movs	r4, r0
 8000474:	000d      	movs	r5, r1
 8000476:	f7ff ffef 	bl	8000458 <__aeabi_dcmpge>
 800047a:	2800      	cmp	r0, #0
 800047c:	d104      	bne.n	8000488 <__aeabi_d2uiz+0x1c>
 800047e:	0020      	movs	r0, r4
 8000480:	0029      	movs	r1, r5
 8000482:	f001 fd7f 	bl	8001f84 <__aeabi_d2iz>
 8000486:	bd70      	pop	{r4, r5, r6, pc}
 8000488:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <__aeabi_d2uiz+0x38>)
 800048a:	2200      	movs	r2, #0
 800048c:	0020      	movs	r0, r4
 800048e:	0029      	movs	r1, r5
 8000490:	f001 f9e6 	bl	8001860 <__aeabi_dsub>
 8000494:	f001 fd76 	bl	8001f84 <__aeabi_d2iz>
 8000498:	2380      	movs	r3, #128	; 0x80
 800049a:	061b      	lsls	r3, r3, #24
 800049c:	469c      	mov	ip, r3
 800049e:	4460      	add	r0, ip
 80004a0:	e7f1      	b.n	8000486 <__aeabi_d2uiz+0x1a>
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	41e00000 	.word	0x41e00000

080004a8 <__aeabi_dadd>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	464f      	mov	r7, r9
 80004ac:	46d6      	mov	lr, sl
 80004ae:	4646      	mov	r6, r8
 80004b0:	000d      	movs	r5, r1
 80004b2:	0001      	movs	r1, r0
 80004b4:	0018      	movs	r0, r3
 80004b6:	b5c0      	push	{r6, r7, lr}
 80004b8:	0017      	movs	r7, r2
 80004ba:	032b      	lsls	r3, r5, #12
 80004bc:	0a5a      	lsrs	r2, r3, #9
 80004be:	0f4b      	lsrs	r3, r1, #29
 80004c0:	4313      	orrs	r3, r2
 80004c2:	00ca      	lsls	r2, r1, #3
 80004c4:	4691      	mov	r9, r2
 80004c6:	0302      	lsls	r2, r0, #12
 80004c8:	006e      	lsls	r6, r5, #1
 80004ca:	0041      	lsls	r1, r0, #1
 80004cc:	0a52      	lsrs	r2, r2, #9
 80004ce:	0fec      	lsrs	r4, r5, #31
 80004d0:	0f7d      	lsrs	r5, r7, #29
 80004d2:	4315      	orrs	r5, r2
 80004d4:	0d76      	lsrs	r6, r6, #21
 80004d6:	0d49      	lsrs	r1, r1, #21
 80004d8:	0fc0      	lsrs	r0, r0, #31
 80004da:	4682      	mov	sl, r0
 80004dc:	46ac      	mov	ip, r5
 80004de:	00ff      	lsls	r7, r7, #3
 80004e0:	1a72      	subs	r2, r6, r1
 80004e2:	4284      	cmp	r4, r0
 80004e4:	d100      	bne.n	80004e8 <__aeabi_dadd+0x40>
 80004e6:	e098      	b.n	800061a <__aeabi_dadd+0x172>
 80004e8:	2a00      	cmp	r2, #0
 80004ea:	dc00      	bgt.n	80004ee <__aeabi_dadd+0x46>
 80004ec:	e081      	b.n	80005f2 <__aeabi_dadd+0x14a>
 80004ee:	2900      	cmp	r1, #0
 80004f0:	d100      	bne.n	80004f4 <__aeabi_dadd+0x4c>
 80004f2:	e0b6      	b.n	8000662 <__aeabi_dadd+0x1ba>
 80004f4:	49c9      	ldr	r1, [pc, #804]	; (800081c <__aeabi_dadd+0x374>)
 80004f6:	428e      	cmp	r6, r1
 80004f8:	d100      	bne.n	80004fc <__aeabi_dadd+0x54>
 80004fa:	e172      	b.n	80007e2 <__aeabi_dadd+0x33a>
 80004fc:	2180      	movs	r1, #128	; 0x80
 80004fe:	0028      	movs	r0, r5
 8000500:	0409      	lsls	r1, r1, #16
 8000502:	4308      	orrs	r0, r1
 8000504:	4684      	mov	ip, r0
 8000506:	2a38      	cmp	r2, #56	; 0x38
 8000508:	dd00      	ble.n	800050c <__aeabi_dadd+0x64>
 800050a:	e15e      	b.n	80007ca <__aeabi_dadd+0x322>
 800050c:	2a1f      	cmp	r2, #31
 800050e:	dd00      	ble.n	8000512 <__aeabi_dadd+0x6a>
 8000510:	e1ee      	b.n	80008f0 <__aeabi_dadd+0x448>
 8000512:	2020      	movs	r0, #32
 8000514:	0039      	movs	r1, r7
 8000516:	4665      	mov	r5, ip
 8000518:	1a80      	subs	r0, r0, r2
 800051a:	4087      	lsls	r7, r0
 800051c:	40d1      	lsrs	r1, r2
 800051e:	4085      	lsls	r5, r0
 8000520:	430d      	orrs	r5, r1
 8000522:	0039      	movs	r1, r7
 8000524:	1e4f      	subs	r7, r1, #1
 8000526:	41b9      	sbcs	r1, r7
 8000528:	4667      	mov	r7, ip
 800052a:	40d7      	lsrs	r7, r2
 800052c:	4329      	orrs	r1, r5
 800052e:	1bdb      	subs	r3, r3, r7
 8000530:	464a      	mov	r2, r9
 8000532:	1a55      	subs	r5, r2, r1
 8000534:	45a9      	cmp	r9, r5
 8000536:	4189      	sbcs	r1, r1
 8000538:	4249      	negs	r1, r1
 800053a:	1a5b      	subs	r3, r3, r1
 800053c:	4698      	mov	r8, r3
 800053e:	4643      	mov	r3, r8
 8000540:	021b      	lsls	r3, r3, #8
 8000542:	d400      	bmi.n	8000546 <__aeabi_dadd+0x9e>
 8000544:	e0cc      	b.n	80006e0 <__aeabi_dadd+0x238>
 8000546:	4643      	mov	r3, r8
 8000548:	025b      	lsls	r3, r3, #9
 800054a:	0a5b      	lsrs	r3, r3, #9
 800054c:	4698      	mov	r8, r3
 800054e:	4643      	mov	r3, r8
 8000550:	2b00      	cmp	r3, #0
 8000552:	d100      	bne.n	8000556 <__aeabi_dadd+0xae>
 8000554:	e12c      	b.n	80007b0 <__aeabi_dadd+0x308>
 8000556:	4640      	mov	r0, r8
 8000558:	f001 fda0 	bl	800209c <__clzsi2>
 800055c:	0001      	movs	r1, r0
 800055e:	3908      	subs	r1, #8
 8000560:	2220      	movs	r2, #32
 8000562:	0028      	movs	r0, r5
 8000564:	4643      	mov	r3, r8
 8000566:	1a52      	subs	r2, r2, r1
 8000568:	408b      	lsls	r3, r1
 800056a:	40d0      	lsrs	r0, r2
 800056c:	408d      	lsls	r5, r1
 800056e:	4303      	orrs	r3, r0
 8000570:	428e      	cmp	r6, r1
 8000572:	dd00      	ble.n	8000576 <__aeabi_dadd+0xce>
 8000574:	e117      	b.n	80007a6 <__aeabi_dadd+0x2fe>
 8000576:	1b8e      	subs	r6, r1, r6
 8000578:	1c72      	adds	r2, r6, #1
 800057a:	2a1f      	cmp	r2, #31
 800057c:	dd00      	ble.n	8000580 <__aeabi_dadd+0xd8>
 800057e:	e1a7      	b.n	80008d0 <__aeabi_dadd+0x428>
 8000580:	2120      	movs	r1, #32
 8000582:	0018      	movs	r0, r3
 8000584:	002e      	movs	r6, r5
 8000586:	1a89      	subs	r1, r1, r2
 8000588:	408d      	lsls	r5, r1
 800058a:	4088      	lsls	r0, r1
 800058c:	40d6      	lsrs	r6, r2
 800058e:	40d3      	lsrs	r3, r2
 8000590:	1e69      	subs	r1, r5, #1
 8000592:	418d      	sbcs	r5, r1
 8000594:	4330      	orrs	r0, r6
 8000596:	4698      	mov	r8, r3
 8000598:	2600      	movs	r6, #0
 800059a:	4305      	orrs	r5, r0
 800059c:	076b      	lsls	r3, r5, #29
 800059e:	d009      	beq.n	80005b4 <__aeabi_dadd+0x10c>
 80005a0:	230f      	movs	r3, #15
 80005a2:	402b      	ands	r3, r5
 80005a4:	2b04      	cmp	r3, #4
 80005a6:	d005      	beq.n	80005b4 <__aeabi_dadd+0x10c>
 80005a8:	1d2b      	adds	r3, r5, #4
 80005aa:	42ab      	cmp	r3, r5
 80005ac:	41ad      	sbcs	r5, r5
 80005ae:	426d      	negs	r5, r5
 80005b0:	44a8      	add	r8, r5
 80005b2:	001d      	movs	r5, r3
 80005b4:	4643      	mov	r3, r8
 80005b6:	021b      	lsls	r3, r3, #8
 80005b8:	d400      	bmi.n	80005bc <__aeabi_dadd+0x114>
 80005ba:	e094      	b.n	80006e6 <__aeabi_dadd+0x23e>
 80005bc:	4b97      	ldr	r3, [pc, #604]	; (800081c <__aeabi_dadd+0x374>)
 80005be:	1c72      	adds	r2, r6, #1
 80005c0:	429a      	cmp	r2, r3
 80005c2:	d100      	bne.n	80005c6 <__aeabi_dadd+0x11e>
 80005c4:	e09d      	b.n	8000702 <__aeabi_dadd+0x25a>
 80005c6:	4641      	mov	r1, r8
 80005c8:	4b95      	ldr	r3, [pc, #596]	; (8000820 <__aeabi_dadd+0x378>)
 80005ca:	08ed      	lsrs	r5, r5, #3
 80005cc:	4019      	ands	r1, r3
 80005ce:	000b      	movs	r3, r1
 80005d0:	0552      	lsls	r2, r2, #21
 80005d2:	0749      	lsls	r1, r1, #29
 80005d4:	025b      	lsls	r3, r3, #9
 80005d6:	4329      	orrs	r1, r5
 80005d8:	0b1b      	lsrs	r3, r3, #12
 80005da:	0d52      	lsrs	r2, r2, #21
 80005dc:	0512      	lsls	r2, r2, #20
 80005de:	4313      	orrs	r3, r2
 80005e0:	07e4      	lsls	r4, r4, #31
 80005e2:	4323      	orrs	r3, r4
 80005e4:	0008      	movs	r0, r1
 80005e6:	0019      	movs	r1, r3
 80005e8:	bce0      	pop	{r5, r6, r7}
 80005ea:	46ba      	mov	sl, r7
 80005ec:	46b1      	mov	r9, r6
 80005ee:	46a8      	mov	r8, r5
 80005f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f2:	2a00      	cmp	r2, #0
 80005f4:	d043      	beq.n	800067e <__aeabi_dadd+0x1d6>
 80005f6:	1b8a      	subs	r2, r1, r6
 80005f8:	2e00      	cmp	r6, #0
 80005fa:	d000      	beq.n	80005fe <__aeabi_dadd+0x156>
 80005fc:	e12a      	b.n	8000854 <__aeabi_dadd+0x3ac>
 80005fe:	464c      	mov	r4, r9
 8000600:	431c      	orrs	r4, r3
 8000602:	d100      	bne.n	8000606 <__aeabi_dadd+0x15e>
 8000604:	e1d1      	b.n	80009aa <__aeabi_dadd+0x502>
 8000606:	1e54      	subs	r4, r2, #1
 8000608:	2a01      	cmp	r2, #1
 800060a:	d100      	bne.n	800060e <__aeabi_dadd+0x166>
 800060c:	e21f      	b.n	8000a4e <__aeabi_dadd+0x5a6>
 800060e:	4d83      	ldr	r5, [pc, #524]	; (800081c <__aeabi_dadd+0x374>)
 8000610:	42aa      	cmp	r2, r5
 8000612:	d100      	bne.n	8000616 <__aeabi_dadd+0x16e>
 8000614:	e272      	b.n	8000afc <__aeabi_dadd+0x654>
 8000616:	0022      	movs	r2, r4
 8000618:	e123      	b.n	8000862 <__aeabi_dadd+0x3ba>
 800061a:	2a00      	cmp	r2, #0
 800061c:	dc00      	bgt.n	8000620 <__aeabi_dadd+0x178>
 800061e:	e098      	b.n	8000752 <__aeabi_dadd+0x2aa>
 8000620:	2900      	cmp	r1, #0
 8000622:	d042      	beq.n	80006aa <__aeabi_dadd+0x202>
 8000624:	497d      	ldr	r1, [pc, #500]	; (800081c <__aeabi_dadd+0x374>)
 8000626:	428e      	cmp	r6, r1
 8000628:	d100      	bne.n	800062c <__aeabi_dadd+0x184>
 800062a:	e0da      	b.n	80007e2 <__aeabi_dadd+0x33a>
 800062c:	2180      	movs	r1, #128	; 0x80
 800062e:	0028      	movs	r0, r5
 8000630:	0409      	lsls	r1, r1, #16
 8000632:	4308      	orrs	r0, r1
 8000634:	4684      	mov	ip, r0
 8000636:	2a38      	cmp	r2, #56	; 0x38
 8000638:	dd00      	ble.n	800063c <__aeabi_dadd+0x194>
 800063a:	e129      	b.n	8000890 <__aeabi_dadd+0x3e8>
 800063c:	2a1f      	cmp	r2, #31
 800063e:	dc00      	bgt.n	8000642 <__aeabi_dadd+0x19a>
 8000640:	e187      	b.n	8000952 <__aeabi_dadd+0x4aa>
 8000642:	0011      	movs	r1, r2
 8000644:	4665      	mov	r5, ip
 8000646:	3920      	subs	r1, #32
 8000648:	40cd      	lsrs	r5, r1
 800064a:	2a20      	cmp	r2, #32
 800064c:	d004      	beq.n	8000658 <__aeabi_dadd+0x1b0>
 800064e:	2040      	movs	r0, #64	; 0x40
 8000650:	4661      	mov	r1, ip
 8000652:	1a82      	subs	r2, r0, r2
 8000654:	4091      	lsls	r1, r2
 8000656:	430f      	orrs	r7, r1
 8000658:	0039      	movs	r1, r7
 800065a:	1e4f      	subs	r7, r1, #1
 800065c:	41b9      	sbcs	r1, r7
 800065e:	430d      	orrs	r5, r1
 8000660:	e11b      	b.n	800089a <__aeabi_dadd+0x3f2>
 8000662:	0029      	movs	r1, r5
 8000664:	4339      	orrs	r1, r7
 8000666:	d100      	bne.n	800066a <__aeabi_dadd+0x1c2>
 8000668:	e0b5      	b.n	80007d6 <__aeabi_dadd+0x32e>
 800066a:	1e51      	subs	r1, r2, #1
 800066c:	2a01      	cmp	r2, #1
 800066e:	d100      	bne.n	8000672 <__aeabi_dadd+0x1ca>
 8000670:	e1ab      	b.n	80009ca <__aeabi_dadd+0x522>
 8000672:	486a      	ldr	r0, [pc, #424]	; (800081c <__aeabi_dadd+0x374>)
 8000674:	4282      	cmp	r2, r0
 8000676:	d100      	bne.n	800067a <__aeabi_dadd+0x1d2>
 8000678:	e1b2      	b.n	80009e0 <__aeabi_dadd+0x538>
 800067a:	000a      	movs	r2, r1
 800067c:	e743      	b.n	8000506 <__aeabi_dadd+0x5e>
 800067e:	4969      	ldr	r1, [pc, #420]	; (8000824 <__aeabi_dadd+0x37c>)
 8000680:	1c75      	adds	r5, r6, #1
 8000682:	420d      	tst	r5, r1
 8000684:	d000      	beq.n	8000688 <__aeabi_dadd+0x1e0>
 8000686:	e0cf      	b.n	8000828 <__aeabi_dadd+0x380>
 8000688:	2e00      	cmp	r6, #0
 800068a:	d000      	beq.n	800068e <__aeabi_dadd+0x1e6>
 800068c:	e193      	b.n	80009b6 <__aeabi_dadd+0x50e>
 800068e:	4649      	mov	r1, r9
 8000690:	4319      	orrs	r1, r3
 8000692:	d100      	bne.n	8000696 <__aeabi_dadd+0x1ee>
 8000694:	e1d1      	b.n	8000a3a <__aeabi_dadd+0x592>
 8000696:	4661      	mov	r1, ip
 8000698:	4339      	orrs	r1, r7
 800069a:	d000      	beq.n	800069e <__aeabi_dadd+0x1f6>
 800069c:	e1e3      	b.n	8000a66 <__aeabi_dadd+0x5be>
 800069e:	4649      	mov	r1, r9
 80006a0:	0758      	lsls	r0, r3, #29
 80006a2:	08c9      	lsrs	r1, r1, #3
 80006a4:	4301      	orrs	r1, r0
 80006a6:	08db      	lsrs	r3, r3, #3
 80006a8:	e026      	b.n	80006f8 <__aeabi_dadd+0x250>
 80006aa:	0029      	movs	r1, r5
 80006ac:	4339      	orrs	r1, r7
 80006ae:	d100      	bne.n	80006b2 <__aeabi_dadd+0x20a>
 80006b0:	e091      	b.n	80007d6 <__aeabi_dadd+0x32e>
 80006b2:	1e51      	subs	r1, r2, #1
 80006b4:	2a01      	cmp	r2, #1
 80006b6:	d005      	beq.n	80006c4 <__aeabi_dadd+0x21c>
 80006b8:	4858      	ldr	r0, [pc, #352]	; (800081c <__aeabi_dadd+0x374>)
 80006ba:	4282      	cmp	r2, r0
 80006bc:	d100      	bne.n	80006c0 <__aeabi_dadd+0x218>
 80006be:	e18f      	b.n	80009e0 <__aeabi_dadd+0x538>
 80006c0:	000a      	movs	r2, r1
 80006c2:	e7b8      	b.n	8000636 <__aeabi_dadd+0x18e>
 80006c4:	003d      	movs	r5, r7
 80006c6:	444d      	add	r5, r9
 80006c8:	454d      	cmp	r5, r9
 80006ca:	4189      	sbcs	r1, r1
 80006cc:	4463      	add	r3, ip
 80006ce:	4698      	mov	r8, r3
 80006d0:	4249      	negs	r1, r1
 80006d2:	4488      	add	r8, r1
 80006d4:	4643      	mov	r3, r8
 80006d6:	2602      	movs	r6, #2
 80006d8:	021b      	lsls	r3, r3, #8
 80006da:	d500      	bpl.n	80006de <__aeabi_dadd+0x236>
 80006dc:	e0eb      	b.n	80008b6 <__aeabi_dadd+0x40e>
 80006de:	3e01      	subs	r6, #1
 80006e0:	076b      	lsls	r3, r5, #29
 80006e2:	d000      	beq.n	80006e6 <__aeabi_dadd+0x23e>
 80006e4:	e75c      	b.n	80005a0 <__aeabi_dadd+0xf8>
 80006e6:	4643      	mov	r3, r8
 80006e8:	08e9      	lsrs	r1, r5, #3
 80006ea:	075a      	lsls	r2, r3, #29
 80006ec:	4311      	orrs	r1, r2
 80006ee:	0032      	movs	r2, r6
 80006f0:	08db      	lsrs	r3, r3, #3
 80006f2:	484a      	ldr	r0, [pc, #296]	; (800081c <__aeabi_dadd+0x374>)
 80006f4:	4282      	cmp	r2, r0
 80006f6:	d021      	beq.n	800073c <__aeabi_dadd+0x294>
 80006f8:	031b      	lsls	r3, r3, #12
 80006fa:	0552      	lsls	r2, r2, #21
 80006fc:	0b1b      	lsrs	r3, r3, #12
 80006fe:	0d52      	lsrs	r2, r2, #21
 8000700:	e76c      	b.n	80005dc <__aeabi_dadd+0x134>
 8000702:	2300      	movs	r3, #0
 8000704:	2100      	movs	r1, #0
 8000706:	e769      	b.n	80005dc <__aeabi_dadd+0x134>
 8000708:	002a      	movs	r2, r5
 800070a:	433a      	orrs	r2, r7
 800070c:	d069      	beq.n	80007e2 <__aeabi_dadd+0x33a>
 800070e:	464a      	mov	r2, r9
 8000710:	0758      	lsls	r0, r3, #29
 8000712:	08d1      	lsrs	r1, r2, #3
 8000714:	08da      	lsrs	r2, r3, #3
 8000716:	2380      	movs	r3, #128	; 0x80
 8000718:	031b      	lsls	r3, r3, #12
 800071a:	4308      	orrs	r0, r1
 800071c:	421a      	tst	r2, r3
 800071e:	d007      	beq.n	8000730 <__aeabi_dadd+0x288>
 8000720:	0029      	movs	r1, r5
 8000722:	08ed      	lsrs	r5, r5, #3
 8000724:	421d      	tst	r5, r3
 8000726:	d103      	bne.n	8000730 <__aeabi_dadd+0x288>
 8000728:	002a      	movs	r2, r5
 800072a:	08ff      	lsrs	r7, r7, #3
 800072c:	0748      	lsls	r0, r1, #29
 800072e:	4338      	orrs	r0, r7
 8000730:	0f43      	lsrs	r3, r0, #29
 8000732:	00c1      	lsls	r1, r0, #3
 8000734:	075b      	lsls	r3, r3, #29
 8000736:	08c9      	lsrs	r1, r1, #3
 8000738:	4319      	orrs	r1, r3
 800073a:	0013      	movs	r3, r2
 800073c:	000a      	movs	r2, r1
 800073e:	431a      	orrs	r2, r3
 8000740:	d100      	bne.n	8000744 <__aeabi_dadd+0x29c>
 8000742:	e213      	b.n	8000b6c <__aeabi_dadd+0x6c4>
 8000744:	2280      	movs	r2, #128	; 0x80
 8000746:	0312      	lsls	r2, r2, #12
 8000748:	4313      	orrs	r3, r2
 800074a:	031b      	lsls	r3, r3, #12
 800074c:	4a33      	ldr	r2, [pc, #204]	; (800081c <__aeabi_dadd+0x374>)
 800074e:	0b1b      	lsrs	r3, r3, #12
 8000750:	e744      	b.n	80005dc <__aeabi_dadd+0x134>
 8000752:	2a00      	cmp	r2, #0
 8000754:	d04b      	beq.n	80007ee <__aeabi_dadd+0x346>
 8000756:	1b8a      	subs	r2, r1, r6
 8000758:	2e00      	cmp	r6, #0
 800075a:	d100      	bne.n	800075e <__aeabi_dadd+0x2b6>
 800075c:	e0e7      	b.n	800092e <__aeabi_dadd+0x486>
 800075e:	482f      	ldr	r0, [pc, #188]	; (800081c <__aeabi_dadd+0x374>)
 8000760:	4281      	cmp	r1, r0
 8000762:	d100      	bne.n	8000766 <__aeabi_dadd+0x2be>
 8000764:	e195      	b.n	8000a92 <__aeabi_dadd+0x5ea>
 8000766:	2080      	movs	r0, #128	; 0x80
 8000768:	0400      	lsls	r0, r0, #16
 800076a:	4303      	orrs	r3, r0
 800076c:	2a38      	cmp	r2, #56	; 0x38
 800076e:	dd00      	ble.n	8000772 <__aeabi_dadd+0x2ca>
 8000770:	e143      	b.n	80009fa <__aeabi_dadd+0x552>
 8000772:	2a1f      	cmp	r2, #31
 8000774:	dd00      	ble.n	8000778 <__aeabi_dadd+0x2d0>
 8000776:	e1db      	b.n	8000b30 <__aeabi_dadd+0x688>
 8000778:	2020      	movs	r0, #32
 800077a:	001d      	movs	r5, r3
 800077c:	464e      	mov	r6, r9
 800077e:	1a80      	subs	r0, r0, r2
 8000780:	4085      	lsls	r5, r0
 8000782:	40d6      	lsrs	r6, r2
 8000784:	4335      	orrs	r5, r6
 8000786:	464e      	mov	r6, r9
 8000788:	4086      	lsls	r6, r0
 800078a:	0030      	movs	r0, r6
 800078c:	40d3      	lsrs	r3, r2
 800078e:	1e46      	subs	r6, r0, #1
 8000790:	41b0      	sbcs	r0, r6
 8000792:	449c      	add	ip, r3
 8000794:	4305      	orrs	r5, r0
 8000796:	19ed      	adds	r5, r5, r7
 8000798:	42bd      	cmp	r5, r7
 800079a:	419b      	sbcs	r3, r3
 800079c:	425b      	negs	r3, r3
 800079e:	4463      	add	r3, ip
 80007a0:	4698      	mov	r8, r3
 80007a2:	000e      	movs	r6, r1
 80007a4:	e07f      	b.n	80008a6 <__aeabi_dadd+0x3fe>
 80007a6:	4a1e      	ldr	r2, [pc, #120]	; (8000820 <__aeabi_dadd+0x378>)
 80007a8:	1a76      	subs	r6, r6, r1
 80007aa:	4013      	ands	r3, r2
 80007ac:	4698      	mov	r8, r3
 80007ae:	e6f5      	b.n	800059c <__aeabi_dadd+0xf4>
 80007b0:	0028      	movs	r0, r5
 80007b2:	f001 fc73 	bl	800209c <__clzsi2>
 80007b6:	0001      	movs	r1, r0
 80007b8:	3118      	adds	r1, #24
 80007ba:	291f      	cmp	r1, #31
 80007bc:	dc00      	bgt.n	80007c0 <__aeabi_dadd+0x318>
 80007be:	e6cf      	b.n	8000560 <__aeabi_dadd+0xb8>
 80007c0:	002b      	movs	r3, r5
 80007c2:	3808      	subs	r0, #8
 80007c4:	4083      	lsls	r3, r0
 80007c6:	2500      	movs	r5, #0
 80007c8:	e6d2      	b.n	8000570 <__aeabi_dadd+0xc8>
 80007ca:	4662      	mov	r2, ip
 80007cc:	433a      	orrs	r2, r7
 80007ce:	0011      	movs	r1, r2
 80007d0:	1e4f      	subs	r7, r1, #1
 80007d2:	41b9      	sbcs	r1, r7
 80007d4:	e6ac      	b.n	8000530 <__aeabi_dadd+0x88>
 80007d6:	4649      	mov	r1, r9
 80007d8:	0758      	lsls	r0, r3, #29
 80007da:	08c9      	lsrs	r1, r1, #3
 80007dc:	4301      	orrs	r1, r0
 80007de:	08db      	lsrs	r3, r3, #3
 80007e0:	e787      	b.n	80006f2 <__aeabi_dadd+0x24a>
 80007e2:	4649      	mov	r1, r9
 80007e4:	075a      	lsls	r2, r3, #29
 80007e6:	08c9      	lsrs	r1, r1, #3
 80007e8:	4311      	orrs	r1, r2
 80007ea:	08db      	lsrs	r3, r3, #3
 80007ec:	e7a6      	b.n	800073c <__aeabi_dadd+0x294>
 80007ee:	490d      	ldr	r1, [pc, #52]	; (8000824 <__aeabi_dadd+0x37c>)
 80007f0:	1c70      	adds	r0, r6, #1
 80007f2:	4208      	tst	r0, r1
 80007f4:	d000      	beq.n	80007f8 <__aeabi_dadd+0x350>
 80007f6:	e0bb      	b.n	8000970 <__aeabi_dadd+0x4c8>
 80007f8:	2e00      	cmp	r6, #0
 80007fa:	d000      	beq.n	80007fe <__aeabi_dadd+0x356>
 80007fc:	e114      	b.n	8000a28 <__aeabi_dadd+0x580>
 80007fe:	4649      	mov	r1, r9
 8000800:	4319      	orrs	r1, r3
 8000802:	d100      	bne.n	8000806 <__aeabi_dadd+0x35e>
 8000804:	e175      	b.n	8000af2 <__aeabi_dadd+0x64a>
 8000806:	0029      	movs	r1, r5
 8000808:	4339      	orrs	r1, r7
 800080a:	d000      	beq.n	800080e <__aeabi_dadd+0x366>
 800080c:	e17e      	b.n	8000b0c <__aeabi_dadd+0x664>
 800080e:	4649      	mov	r1, r9
 8000810:	0758      	lsls	r0, r3, #29
 8000812:	08c9      	lsrs	r1, r1, #3
 8000814:	4301      	orrs	r1, r0
 8000816:	08db      	lsrs	r3, r3, #3
 8000818:	e76e      	b.n	80006f8 <__aeabi_dadd+0x250>
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	000007ff 	.word	0x000007ff
 8000820:	ff7fffff 	.word	0xff7fffff
 8000824:	000007fe 	.word	0x000007fe
 8000828:	4649      	mov	r1, r9
 800082a:	1bcd      	subs	r5, r1, r7
 800082c:	4661      	mov	r1, ip
 800082e:	1a58      	subs	r0, r3, r1
 8000830:	45a9      	cmp	r9, r5
 8000832:	4189      	sbcs	r1, r1
 8000834:	4249      	negs	r1, r1
 8000836:	4688      	mov	r8, r1
 8000838:	0001      	movs	r1, r0
 800083a:	4640      	mov	r0, r8
 800083c:	1a09      	subs	r1, r1, r0
 800083e:	4688      	mov	r8, r1
 8000840:	0209      	lsls	r1, r1, #8
 8000842:	d500      	bpl.n	8000846 <__aeabi_dadd+0x39e>
 8000844:	e0a6      	b.n	8000994 <__aeabi_dadd+0x4ec>
 8000846:	4641      	mov	r1, r8
 8000848:	4329      	orrs	r1, r5
 800084a:	d000      	beq.n	800084e <__aeabi_dadd+0x3a6>
 800084c:	e67f      	b.n	800054e <__aeabi_dadd+0xa6>
 800084e:	2300      	movs	r3, #0
 8000850:	2400      	movs	r4, #0
 8000852:	e751      	b.n	80006f8 <__aeabi_dadd+0x250>
 8000854:	4cc7      	ldr	r4, [pc, #796]	; (8000b74 <__aeabi_dadd+0x6cc>)
 8000856:	42a1      	cmp	r1, r4
 8000858:	d100      	bne.n	800085c <__aeabi_dadd+0x3b4>
 800085a:	e0c7      	b.n	80009ec <__aeabi_dadd+0x544>
 800085c:	2480      	movs	r4, #128	; 0x80
 800085e:	0424      	lsls	r4, r4, #16
 8000860:	4323      	orrs	r3, r4
 8000862:	2a38      	cmp	r2, #56	; 0x38
 8000864:	dc54      	bgt.n	8000910 <__aeabi_dadd+0x468>
 8000866:	2a1f      	cmp	r2, #31
 8000868:	dd00      	ble.n	800086c <__aeabi_dadd+0x3c4>
 800086a:	e0cc      	b.n	8000a06 <__aeabi_dadd+0x55e>
 800086c:	2420      	movs	r4, #32
 800086e:	4648      	mov	r0, r9
 8000870:	1aa4      	subs	r4, r4, r2
 8000872:	001d      	movs	r5, r3
 8000874:	464e      	mov	r6, r9
 8000876:	40a0      	lsls	r0, r4
 8000878:	40d6      	lsrs	r6, r2
 800087a:	40a5      	lsls	r5, r4
 800087c:	0004      	movs	r4, r0
 800087e:	40d3      	lsrs	r3, r2
 8000880:	4662      	mov	r2, ip
 8000882:	4335      	orrs	r5, r6
 8000884:	1e66      	subs	r6, r4, #1
 8000886:	41b4      	sbcs	r4, r6
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	469c      	mov	ip, r3
 800088c:	4325      	orrs	r5, r4
 800088e:	e044      	b.n	800091a <__aeabi_dadd+0x472>
 8000890:	4662      	mov	r2, ip
 8000892:	433a      	orrs	r2, r7
 8000894:	0015      	movs	r5, r2
 8000896:	1e6f      	subs	r7, r5, #1
 8000898:	41bd      	sbcs	r5, r7
 800089a:	444d      	add	r5, r9
 800089c:	454d      	cmp	r5, r9
 800089e:	4189      	sbcs	r1, r1
 80008a0:	4249      	negs	r1, r1
 80008a2:	4688      	mov	r8, r1
 80008a4:	4498      	add	r8, r3
 80008a6:	4643      	mov	r3, r8
 80008a8:	021b      	lsls	r3, r3, #8
 80008aa:	d400      	bmi.n	80008ae <__aeabi_dadd+0x406>
 80008ac:	e718      	b.n	80006e0 <__aeabi_dadd+0x238>
 80008ae:	4bb1      	ldr	r3, [pc, #708]	; (8000b74 <__aeabi_dadd+0x6cc>)
 80008b0:	3601      	adds	r6, #1
 80008b2:	429e      	cmp	r6, r3
 80008b4:	d049      	beq.n	800094a <__aeabi_dadd+0x4a2>
 80008b6:	4642      	mov	r2, r8
 80008b8:	4baf      	ldr	r3, [pc, #700]	; (8000b78 <__aeabi_dadd+0x6d0>)
 80008ba:	2101      	movs	r1, #1
 80008bc:	401a      	ands	r2, r3
 80008be:	0013      	movs	r3, r2
 80008c0:	086a      	lsrs	r2, r5, #1
 80008c2:	400d      	ands	r5, r1
 80008c4:	4315      	orrs	r5, r2
 80008c6:	07d9      	lsls	r1, r3, #31
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	4698      	mov	r8, r3
 80008cc:	430d      	orrs	r5, r1
 80008ce:	e665      	b.n	800059c <__aeabi_dadd+0xf4>
 80008d0:	0018      	movs	r0, r3
 80008d2:	3e1f      	subs	r6, #31
 80008d4:	40f0      	lsrs	r0, r6
 80008d6:	2a20      	cmp	r2, #32
 80008d8:	d003      	beq.n	80008e2 <__aeabi_dadd+0x43a>
 80008da:	2140      	movs	r1, #64	; 0x40
 80008dc:	1a8a      	subs	r2, r1, r2
 80008de:	4093      	lsls	r3, r2
 80008e0:	431d      	orrs	r5, r3
 80008e2:	1e69      	subs	r1, r5, #1
 80008e4:	418d      	sbcs	r5, r1
 80008e6:	2300      	movs	r3, #0
 80008e8:	2600      	movs	r6, #0
 80008ea:	4698      	mov	r8, r3
 80008ec:	4305      	orrs	r5, r0
 80008ee:	e6f7      	b.n	80006e0 <__aeabi_dadd+0x238>
 80008f0:	0011      	movs	r1, r2
 80008f2:	4665      	mov	r5, ip
 80008f4:	3920      	subs	r1, #32
 80008f6:	40cd      	lsrs	r5, r1
 80008f8:	2a20      	cmp	r2, #32
 80008fa:	d004      	beq.n	8000906 <__aeabi_dadd+0x45e>
 80008fc:	2040      	movs	r0, #64	; 0x40
 80008fe:	4661      	mov	r1, ip
 8000900:	1a82      	subs	r2, r0, r2
 8000902:	4091      	lsls	r1, r2
 8000904:	430f      	orrs	r7, r1
 8000906:	0039      	movs	r1, r7
 8000908:	1e4f      	subs	r7, r1, #1
 800090a:	41b9      	sbcs	r1, r7
 800090c:	4329      	orrs	r1, r5
 800090e:	e60f      	b.n	8000530 <__aeabi_dadd+0x88>
 8000910:	464a      	mov	r2, r9
 8000912:	4313      	orrs	r3, r2
 8000914:	001d      	movs	r5, r3
 8000916:	1e6b      	subs	r3, r5, #1
 8000918:	419d      	sbcs	r5, r3
 800091a:	1b7d      	subs	r5, r7, r5
 800091c:	42af      	cmp	r7, r5
 800091e:	419b      	sbcs	r3, r3
 8000920:	4662      	mov	r2, ip
 8000922:	425b      	negs	r3, r3
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	4698      	mov	r8, r3
 8000928:	4654      	mov	r4, sl
 800092a:	000e      	movs	r6, r1
 800092c:	e607      	b.n	800053e <__aeabi_dadd+0x96>
 800092e:	4648      	mov	r0, r9
 8000930:	4318      	orrs	r0, r3
 8000932:	d100      	bne.n	8000936 <__aeabi_dadd+0x48e>
 8000934:	e0b3      	b.n	8000a9e <__aeabi_dadd+0x5f6>
 8000936:	1e50      	subs	r0, r2, #1
 8000938:	2a01      	cmp	r2, #1
 800093a:	d100      	bne.n	800093e <__aeabi_dadd+0x496>
 800093c:	e10d      	b.n	8000b5a <__aeabi_dadd+0x6b2>
 800093e:	4d8d      	ldr	r5, [pc, #564]	; (8000b74 <__aeabi_dadd+0x6cc>)
 8000940:	42aa      	cmp	r2, r5
 8000942:	d100      	bne.n	8000946 <__aeabi_dadd+0x49e>
 8000944:	e0a5      	b.n	8000a92 <__aeabi_dadd+0x5ea>
 8000946:	0002      	movs	r2, r0
 8000948:	e710      	b.n	800076c <__aeabi_dadd+0x2c4>
 800094a:	0032      	movs	r2, r6
 800094c:	2300      	movs	r3, #0
 800094e:	2100      	movs	r1, #0
 8000950:	e644      	b.n	80005dc <__aeabi_dadd+0x134>
 8000952:	2120      	movs	r1, #32
 8000954:	0038      	movs	r0, r7
 8000956:	1a89      	subs	r1, r1, r2
 8000958:	4665      	mov	r5, ip
 800095a:	408f      	lsls	r7, r1
 800095c:	408d      	lsls	r5, r1
 800095e:	40d0      	lsrs	r0, r2
 8000960:	1e79      	subs	r1, r7, #1
 8000962:	418f      	sbcs	r7, r1
 8000964:	4305      	orrs	r5, r0
 8000966:	433d      	orrs	r5, r7
 8000968:	4667      	mov	r7, ip
 800096a:	40d7      	lsrs	r7, r2
 800096c:	19db      	adds	r3, r3, r7
 800096e:	e794      	b.n	800089a <__aeabi_dadd+0x3f2>
 8000970:	4a80      	ldr	r2, [pc, #512]	; (8000b74 <__aeabi_dadd+0x6cc>)
 8000972:	4290      	cmp	r0, r2
 8000974:	d100      	bne.n	8000978 <__aeabi_dadd+0x4d0>
 8000976:	e0ec      	b.n	8000b52 <__aeabi_dadd+0x6aa>
 8000978:	0039      	movs	r1, r7
 800097a:	4449      	add	r1, r9
 800097c:	4549      	cmp	r1, r9
 800097e:	4192      	sbcs	r2, r2
 8000980:	4463      	add	r3, ip
 8000982:	4252      	negs	r2, r2
 8000984:	189b      	adds	r3, r3, r2
 8000986:	07dd      	lsls	r5, r3, #31
 8000988:	0849      	lsrs	r1, r1, #1
 800098a:	085b      	lsrs	r3, r3, #1
 800098c:	4698      	mov	r8, r3
 800098e:	0006      	movs	r6, r0
 8000990:	430d      	orrs	r5, r1
 8000992:	e6a5      	b.n	80006e0 <__aeabi_dadd+0x238>
 8000994:	464a      	mov	r2, r9
 8000996:	1abd      	subs	r5, r7, r2
 8000998:	42af      	cmp	r7, r5
 800099a:	4189      	sbcs	r1, r1
 800099c:	4662      	mov	r2, ip
 800099e:	4249      	negs	r1, r1
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	1a5b      	subs	r3, r3, r1
 80009a4:	4698      	mov	r8, r3
 80009a6:	4654      	mov	r4, sl
 80009a8:	e5d1      	b.n	800054e <__aeabi_dadd+0xa6>
 80009aa:	076c      	lsls	r4, r5, #29
 80009ac:	08f9      	lsrs	r1, r7, #3
 80009ae:	4321      	orrs	r1, r4
 80009b0:	08eb      	lsrs	r3, r5, #3
 80009b2:	0004      	movs	r4, r0
 80009b4:	e69d      	b.n	80006f2 <__aeabi_dadd+0x24a>
 80009b6:	464a      	mov	r2, r9
 80009b8:	431a      	orrs	r2, r3
 80009ba:	d175      	bne.n	8000aa8 <__aeabi_dadd+0x600>
 80009bc:	4661      	mov	r1, ip
 80009be:	4339      	orrs	r1, r7
 80009c0:	d114      	bne.n	80009ec <__aeabi_dadd+0x544>
 80009c2:	2380      	movs	r3, #128	; 0x80
 80009c4:	2400      	movs	r4, #0
 80009c6:	031b      	lsls	r3, r3, #12
 80009c8:	e6bc      	b.n	8000744 <__aeabi_dadd+0x29c>
 80009ca:	464a      	mov	r2, r9
 80009cc:	1bd5      	subs	r5, r2, r7
 80009ce:	45a9      	cmp	r9, r5
 80009d0:	4189      	sbcs	r1, r1
 80009d2:	4662      	mov	r2, ip
 80009d4:	4249      	negs	r1, r1
 80009d6:	1a9b      	subs	r3, r3, r2
 80009d8:	1a5b      	subs	r3, r3, r1
 80009da:	4698      	mov	r8, r3
 80009dc:	2601      	movs	r6, #1
 80009de:	e5ae      	b.n	800053e <__aeabi_dadd+0x96>
 80009e0:	464a      	mov	r2, r9
 80009e2:	08d1      	lsrs	r1, r2, #3
 80009e4:	075a      	lsls	r2, r3, #29
 80009e6:	4311      	orrs	r1, r2
 80009e8:	08db      	lsrs	r3, r3, #3
 80009ea:	e6a7      	b.n	800073c <__aeabi_dadd+0x294>
 80009ec:	4663      	mov	r3, ip
 80009ee:	08f9      	lsrs	r1, r7, #3
 80009f0:	075a      	lsls	r2, r3, #29
 80009f2:	4654      	mov	r4, sl
 80009f4:	4311      	orrs	r1, r2
 80009f6:	08db      	lsrs	r3, r3, #3
 80009f8:	e6a0      	b.n	800073c <__aeabi_dadd+0x294>
 80009fa:	464a      	mov	r2, r9
 80009fc:	4313      	orrs	r3, r2
 80009fe:	001d      	movs	r5, r3
 8000a00:	1e6b      	subs	r3, r5, #1
 8000a02:	419d      	sbcs	r5, r3
 8000a04:	e6c7      	b.n	8000796 <__aeabi_dadd+0x2ee>
 8000a06:	0014      	movs	r4, r2
 8000a08:	001e      	movs	r6, r3
 8000a0a:	3c20      	subs	r4, #32
 8000a0c:	40e6      	lsrs	r6, r4
 8000a0e:	2a20      	cmp	r2, #32
 8000a10:	d005      	beq.n	8000a1e <__aeabi_dadd+0x576>
 8000a12:	2440      	movs	r4, #64	; 0x40
 8000a14:	1aa2      	subs	r2, r4, r2
 8000a16:	4093      	lsls	r3, r2
 8000a18:	464a      	mov	r2, r9
 8000a1a:	431a      	orrs	r2, r3
 8000a1c:	4691      	mov	r9, r2
 8000a1e:	464d      	mov	r5, r9
 8000a20:	1e6b      	subs	r3, r5, #1
 8000a22:	419d      	sbcs	r5, r3
 8000a24:	4335      	orrs	r5, r6
 8000a26:	e778      	b.n	800091a <__aeabi_dadd+0x472>
 8000a28:	464a      	mov	r2, r9
 8000a2a:	431a      	orrs	r2, r3
 8000a2c:	d000      	beq.n	8000a30 <__aeabi_dadd+0x588>
 8000a2e:	e66b      	b.n	8000708 <__aeabi_dadd+0x260>
 8000a30:	076b      	lsls	r3, r5, #29
 8000a32:	08f9      	lsrs	r1, r7, #3
 8000a34:	4319      	orrs	r1, r3
 8000a36:	08eb      	lsrs	r3, r5, #3
 8000a38:	e680      	b.n	800073c <__aeabi_dadd+0x294>
 8000a3a:	4661      	mov	r1, ip
 8000a3c:	4339      	orrs	r1, r7
 8000a3e:	d054      	beq.n	8000aea <__aeabi_dadd+0x642>
 8000a40:	4663      	mov	r3, ip
 8000a42:	08f9      	lsrs	r1, r7, #3
 8000a44:	075c      	lsls	r4, r3, #29
 8000a46:	4321      	orrs	r1, r4
 8000a48:	08db      	lsrs	r3, r3, #3
 8000a4a:	0004      	movs	r4, r0
 8000a4c:	e654      	b.n	80006f8 <__aeabi_dadd+0x250>
 8000a4e:	464a      	mov	r2, r9
 8000a50:	1abd      	subs	r5, r7, r2
 8000a52:	42af      	cmp	r7, r5
 8000a54:	4189      	sbcs	r1, r1
 8000a56:	4662      	mov	r2, ip
 8000a58:	4249      	negs	r1, r1
 8000a5a:	1ad3      	subs	r3, r2, r3
 8000a5c:	1a5b      	subs	r3, r3, r1
 8000a5e:	4698      	mov	r8, r3
 8000a60:	0004      	movs	r4, r0
 8000a62:	2601      	movs	r6, #1
 8000a64:	e56b      	b.n	800053e <__aeabi_dadd+0x96>
 8000a66:	464a      	mov	r2, r9
 8000a68:	1bd5      	subs	r5, r2, r7
 8000a6a:	45a9      	cmp	r9, r5
 8000a6c:	4189      	sbcs	r1, r1
 8000a6e:	4662      	mov	r2, ip
 8000a70:	4249      	negs	r1, r1
 8000a72:	1a9a      	subs	r2, r3, r2
 8000a74:	1a52      	subs	r2, r2, r1
 8000a76:	4690      	mov	r8, r2
 8000a78:	0212      	lsls	r2, r2, #8
 8000a7a:	d532      	bpl.n	8000ae2 <__aeabi_dadd+0x63a>
 8000a7c:	464a      	mov	r2, r9
 8000a7e:	1abd      	subs	r5, r7, r2
 8000a80:	42af      	cmp	r7, r5
 8000a82:	4189      	sbcs	r1, r1
 8000a84:	4662      	mov	r2, ip
 8000a86:	4249      	negs	r1, r1
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	1a5b      	subs	r3, r3, r1
 8000a8c:	4698      	mov	r8, r3
 8000a8e:	0004      	movs	r4, r0
 8000a90:	e584      	b.n	800059c <__aeabi_dadd+0xf4>
 8000a92:	4663      	mov	r3, ip
 8000a94:	08f9      	lsrs	r1, r7, #3
 8000a96:	075a      	lsls	r2, r3, #29
 8000a98:	4311      	orrs	r1, r2
 8000a9a:	08db      	lsrs	r3, r3, #3
 8000a9c:	e64e      	b.n	800073c <__aeabi_dadd+0x294>
 8000a9e:	08f9      	lsrs	r1, r7, #3
 8000aa0:	0768      	lsls	r0, r5, #29
 8000aa2:	4301      	orrs	r1, r0
 8000aa4:	08eb      	lsrs	r3, r5, #3
 8000aa6:	e624      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000aa8:	4662      	mov	r2, ip
 8000aaa:	433a      	orrs	r2, r7
 8000aac:	d100      	bne.n	8000ab0 <__aeabi_dadd+0x608>
 8000aae:	e698      	b.n	80007e2 <__aeabi_dadd+0x33a>
 8000ab0:	464a      	mov	r2, r9
 8000ab2:	08d1      	lsrs	r1, r2, #3
 8000ab4:	075a      	lsls	r2, r3, #29
 8000ab6:	4311      	orrs	r1, r2
 8000ab8:	08da      	lsrs	r2, r3, #3
 8000aba:	2380      	movs	r3, #128	; 0x80
 8000abc:	031b      	lsls	r3, r3, #12
 8000abe:	421a      	tst	r2, r3
 8000ac0:	d008      	beq.n	8000ad4 <__aeabi_dadd+0x62c>
 8000ac2:	4660      	mov	r0, ip
 8000ac4:	08c5      	lsrs	r5, r0, #3
 8000ac6:	421d      	tst	r5, r3
 8000ac8:	d104      	bne.n	8000ad4 <__aeabi_dadd+0x62c>
 8000aca:	4654      	mov	r4, sl
 8000acc:	002a      	movs	r2, r5
 8000ace:	08f9      	lsrs	r1, r7, #3
 8000ad0:	0743      	lsls	r3, r0, #29
 8000ad2:	4319      	orrs	r1, r3
 8000ad4:	0f4b      	lsrs	r3, r1, #29
 8000ad6:	00c9      	lsls	r1, r1, #3
 8000ad8:	075b      	lsls	r3, r3, #29
 8000ada:	08c9      	lsrs	r1, r1, #3
 8000adc:	4319      	orrs	r1, r3
 8000ade:	0013      	movs	r3, r2
 8000ae0:	e62c      	b.n	800073c <__aeabi_dadd+0x294>
 8000ae2:	4641      	mov	r1, r8
 8000ae4:	4329      	orrs	r1, r5
 8000ae6:	d000      	beq.n	8000aea <__aeabi_dadd+0x642>
 8000ae8:	e5fa      	b.n	80006e0 <__aeabi_dadd+0x238>
 8000aea:	2300      	movs	r3, #0
 8000aec:	000a      	movs	r2, r1
 8000aee:	2400      	movs	r4, #0
 8000af0:	e602      	b.n	80006f8 <__aeabi_dadd+0x250>
 8000af2:	076b      	lsls	r3, r5, #29
 8000af4:	08f9      	lsrs	r1, r7, #3
 8000af6:	4319      	orrs	r1, r3
 8000af8:	08eb      	lsrs	r3, r5, #3
 8000afa:	e5fd      	b.n	80006f8 <__aeabi_dadd+0x250>
 8000afc:	4663      	mov	r3, ip
 8000afe:	08f9      	lsrs	r1, r7, #3
 8000b00:	075b      	lsls	r3, r3, #29
 8000b02:	4319      	orrs	r1, r3
 8000b04:	4663      	mov	r3, ip
 8000b06:	0004      	movs	r4, r0
 8000b08:	08db      	lsrs	r3, r3, #3
 8000b0a:	e617      	b.n	800073c <__aeabi_dadd+0x294>
 8000b0c:	003d      	movs	r5, r7
 8000b0e:	444d      	add	r5, r9
 8000b10:	4463      	add	r3, ip
 8000b12:	454d      	cmp	r5, r9
 8000b14:	4189      	sbcs	r1, r1
 8000b16:	4698      	mov	r8, r3
 8000b18:	4249      	negs	r1, r1
 8000b1a:	4488      	add	r8, r1
 8000b1c:	4643      	mov	r3, r8
 8000b1e:	021b      	lsls	r3, r3, #8
 8000b20:	d400      	bmi.n	8000b24 <__aeabi_dadd+0x67c>
 8000b22:	e5dd      	b.n	80006e0 <__aeabi_dadd+0x238>
 8000b24:	4642      	mov	r2, r8
 8000b26:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <__aeabi_dadd+0x6d0>)
 8000b28:	2601      	movs	r6, #1
 8000b2a:	401a      	ands	r2, r3
 8000b2c:	4690      	mov	r8, r2
 8000b2e:	e5d7      	b.n	80006e0 <__aeabi_dadd+0x238>
 8000b30:	0010      	movs	r0, r2
 8000b32:	001e      	movs	r6, r3
 8000b34:	3820      	subs	r0, #32
 8000b36:	40c6      	lsrs	r6, r0
 8000b38:	2a20      	cmp	r2, #32
 8000b3a:	d005      	beq.n	8000b48 <__aeabi_dadd+0x6a0>
 8000b3c:	2040      	movs	r0, #64	; 0x40
 8000b3e:	1a82      	subs	r2, r0, r2
 8000b40:	4093      	lsls	r3, r2
 8000b42:	464a      	mov	r2, r9
 8000b44:	431a      	orrs	r2, r3
 8000b46:	4691      	mov	r9, r2
 8000b48:	464d      	mov	r5, r9
 8000b4a:	1e6b      	subs	r3, r5, #1
 8000b4c:	419d      	sbcs	r5, r3
 8000b4e:	4335      	orrs	r5, r6
 8000b50:	e621      	b.n	8000796 <__aeabi_dadd+0x2ee>
 8000b52:	0002      	movs	r2, r0
 8000b54:	2300      	movs	r3, #0
 8000b56:	2100      	movs	r1, #0
 8000b58:	e540      	b.n	80005dc <__aeabi_dadd+0x134>
 8000b5a:	464a      	mov	r2, r9
 8000b5c:	19d5      	adds	r5, r2, r7
 8000b5e:	42bd      	cmp	r5, r7
 8000b60:	4189      	sbcs	r1, r1
 8000b62:	4463      	add	r3, ip
 8000b64:	4698      	mov	r8, r3
 8000b66:	4249      	negs	r1, r1
 8000b68:	4488      	add	r8, r1
 8000b6a:	e5b3      	b.n	80006d4 <__aeabi_dadd+0x22c>
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4a01      	ldr	r2, [pc, #4]	; (8000b74 <__aeabi_dadd+0x6cc>)
 8000b70:	000b      	movs	r3, r1
 8000b72:	e533      	b.n	80005dc <__aeabi_dadd+0x134>
 8000b74:	000007ff 	.word	0x000007ff
 8000b78:	ff7fffff 	.word	0xff7fffff

08000b7c <__aeabi_ddiv>:
 8000b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b7e:	4657      	mov	r7, sl
 8000b80:	464e      	mov	r6, r9
 8000b82:	4645      	mov	r5, r8
 8000b84:	46de      	mov	lr, fp
 8000b86:	b5e0      	push	{r5, r6, r7, lr}
 8000b88:	4681      	mov	r9, r0
 8000b8a:	0005      	movs	r5, r0
 8000b8c:	030c      	lsls	r4, r1, #12
 8000b8e:	0048      	lsls	r0, r1, #1
 8000b90:	4692      	mov	sl, r2
 8000b92:	001f      	movs	r7, r3
 8000b94:	b085      	sub	sp, #20
 8000b96:	0b24      	lsrs	r4, r4, #12
 8000b98:	0d40      	lsrs	r0, r0, #21
 8000b9a:	0fce      	lsrs	r6, r1, #31
 8000b9c:	2800      	cmp	r0, #0
 8000b9e:	d059      	beq.n	8000c54 <__aeabi_ddiv+0xd8>
 8000ba0:	4b87      	ldr	r3, [pc, #540]	; (8000dc0 <__aeabi_ddiv+0x244>)
 8000ba2:	4298      	cmp	r0, r3
 8000ba4:	d100      	bne.n	8000ba8 <__aeabi_ddiv+0x2c>
 8000ba6:	e098      	b.n	8000cda <__aeabi_ddiv+0x15e>
 8000ba8:	0f6b      	lsrs	r3, r5, #29
 8000baa:	00e4      	lsls	r4, r4, #3
 8000bac:	431c      	orrs	r4, r3
 8000bae:	2380      	movs	r3, #128	; 0x80
 8000bb0:	041b      	lsls	r3, r3, #16
 8000bb2:	4323      	orrs	r3, r4
 8000bb4:	4698      	mov	r8, r3
 8000bb6:	4b83      	ldr	r3, [pc, #524]	; (8000dc4 <__aeabi_ddiv+0x248>)
 8000bb8:	00ed      	lsls	r5, r5, #3
 8000bba:	469b      	mov	fp, r3
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	4699      	mov	r9, r3
 8000bc0:	4483      	add	fp, r0
 8000bc2:	9300      	str	r3, [sp, #0]
 8000bc4:	033c      	lsls	r4, r7, #12
 8000bc6:	007b      	lsls	r3, r7, #1
 8000bc8:	4650      	mov	r0, sl
 8000bca:	0b24      	lsrs	r4, r4, #12
 8000bcc:	0d5b      	lsrs	r3, r3, #21
 8000bce:	0fff      	lsrs	r7, r7, #31
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d067      	beq.n	8000ca4 <__aeabi_ddiv+0x128>
 8000bd4:	4a7a      	ldr	r2, [pc, #488]	; (8000dc0 <__aeabi_ddiv+0x244>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d018      	beq.n	8000c0c <__aeabi_ddiv+0x90>
 8000bda:	497a      	ldr	r1, [pc, #488]	; (8000dc4 <__aeabi_ddiv+0x248>)
 8000bdc:	0f42      	lsrs	r2, r0, #29
 8000bde:	468c      	mov	ip, r1
 8000be0:	00e4      	lsls	r4, r4, #3
 8000be2:	4659      	mov	r1, fp
 8000be4:	4314      	orrs	r4, r2
 8000be6:	2280      	movs	r2, #128	; 0x80
 8000be8:	4463      	add	r3, ip
 8000bea:	0412      	lsls	r2, r2, #16
 8000bec:	1acb      	subs	r3, r1, r3
 8000bee:	4314      	orrs	r4, r2
 8000bf0:	469b      	mov	fp, r3
 8000bf2:	00c2      	lsls	r2, r0, #3
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	0033      	movs	r3, r6
 8000bf8:	407b      	eors	r3, r7
 8000bfa:	469a      	mov	sl, r3
 8000bfc:	464b      	mov	r3, r9
 8000bfe:	2b0f      	cmp	r3, #15
 8000c00:	d900      	bls.n	8000c04 <__aeabi_ddiv+0x88>
 8000c02:	e0ef      	b.n	8000de4 <__aeabi_ddiv+0x268>
 8000c04:	4970      	ldr	r1, [pc, #448]	; (8000dc8 <__aeabi_ddiv+0x24c>)
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	58cb      	ldr	r3, [r1, r3]
 8000c0a:	469f      	mov	pc, r3
 8000c0c:	4b6f      	ldr	r3, [pc, #444]	; (8000dcc <__aeabi_ddiv+0x250>)
 8000c0e:	4652      	mov	r2, sl
 8000c10:	469c      	mov	ip, r3
 8000c12:	4322      	orrs	r2, r4
 8000c14:	44e3      	add	fp, ip
 8000c16:	2a00      	cmp	r2, #0
 8000c18:	d000      	beq.n	8000c1c <__aeabi_ddiv+0xa0>
 8000c1a:	e095      	b.n	8000d48 <__aeabi_ddiv+0x1cc>
 8000c1c:	4649      	mov	r1, r9
 8000c1e:	2302      	movs	r3, #2
 8000c20:	4319      	orrs	r1, r3
 8000c22:	4689      	mov	r9, r1
 8000c24:	2400      	movs	r4, #0
 8000c26:	2002      	movs	r0, #2
 8000c28:	e7e5      	b.n	8000bf6 <__aeabi_ddiv+0x7a>
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	2400      	movs	r4, #0
 8000c2e:	2500      	movs	r5, #0
 8000c30:	4652      	mov	r2, sl
 8000c32:	051b      	lsls	r3, r3, #20
 8000c34:	4323      	orrs	r3, r4
 8000c36:	07d2      	lsls	r2, r2, #31
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	0028      	movs	r0, r5
 8000c3c:	0019      	movs	r1, r3
 8000c3e:	b005      	add	sp, #20
 8000c40:	bcf0      	pop	{r4, r5, r6, r7}
 8000c42:	46bb      	mov	fp, r7
 8000c44:	46b2      	mov	sl, r6
 8000c46:	46a9      	mov	r9, r5
 8000c48:	46a0      	mov	r8, r4
 8000c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c4c:	2400      	movs	r4, #0
 8000c4e:	2500      	movs	r5, #0
 8000c50:	4b5b      	ldr	r3, [pc, #364]	; (8000dc0 <__aeabi_ddiv+0x244>)
 8000c52:	e7ed      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 8000c54:	464b      	mov	r3, r9
 8000c56:	4323      	orrs	r3, r4
 8000c58:	4698      	mov	r8, r3
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_ddiv+0xe2>
 8000c5c:	e089      	b.n	8000d72 <__aeabi_ddiv+0x1f6>
 8000c5e:	2c00      	cmp	r4, #0
 8000c60:	d100      	bne.n	8000c64 <__aeabi_ddiv+0xe8>
 8000c62:	e1e0      	b.n	8001026 <__aeabi_ddiv+0x4aa>
 8000c64:	0020      	movs	r0, r4
 8000c66:	f001 fa19 	bl	800209c <__clzsi2>
 8000c6a:	0001      	movs	r1, r0
 8000c6c:	0002      	movs	r2, r0
 8000c6e:	390b      	subs	r1, #11
 8000c70:	231d      	movs	r3, #29
 8000c72:	1a5b      	subs	r3, r3, r1
 8000c74:	4649      	mov	r1, r9
 8000c76:	0010      	movs	r0, r2
 8000c78:	40d9      	lsrs	r1, r3
 8000c7a:	3808      	subs	r0, #8
 8000c7c:	4084      	lsls	r4, r0
 8000c7e:	000b      	movs	r3, r1
 8000c80:	464d      	mov	r5, r9
 8000c82:	4323      	orrs	r3, r4
 8000c84:	4698      	mov	r8, r3
 8000c86:	4085      	lsls	r5, r0
 8000c88:	4851      	ldr	r0, [pc, #324]	; (8000dd0 <__aeabi_ddiv+0x254>)
 8000c8a:	033c      	lsls	r4, r7, #12
 8000c8c:	1a83      	subs	r3, r0, r2
 8000c8e:	469b      	mov	fp, r3
 8000c90:	2300      	movs	r3, #0
 8000c92:	4699      	mov	r9, r3
 8000c94:	9300      	str	r3, [sp, #0]
 8000c96:	007b      	lsls	r3, r7, #1
 8000c98:	4650      	mov	r0, sl
 8000c9a:	0b24      	lsrs	r4, r4, #12
 8000c9c:	0d5b      	lsrs	r3, r3, #21
 8000c9e:	0fff      	lsrs	r7, r7, #31
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d197      	bne.n	8000bd4 <__aeabi_ddiv+0x58>
 8000ca4:	4652      	mov	r2, sl
 8000ca6:	4322      	orrs	r2, r4
 8000ca8:	d055      	beq.n	8000d56 <__aeabi_ddiv+0x1da>
 8000caa:	2c00      	cmp	r4, #0
 8000cac:	d100      	bne.n	8000cb0 <__aeabi_ddiv+0x134>
 8000cae:	e1ca      	b.n	8001046 <__aeabi_ddiv+0x4ca>
 8000cb0:	0020      	movs	r0, r4
 8000cb2:	f001 f9f3 	bl	800209c <__clzsi2>
 8000cb6:	0002      	movs	r2, r0
 8000cb8:	3a0b      	subs	r2, #11
 8000cba:	231d      	movs	r3, #29
 8000cbc:	0001      	movs	r1, r0
 8000cbe:	1a9b      	subs	r3, r3, r2
 8000cc0:	4652      	mov	r2, sl
 8000cc2:	3908      	subs	r1, #8
 8000cc4:	40da      	lsrs	r2, r3
 8000cc6:	408c      	lsls	r4, r1
 8000cc8:	4314      	orrs	r4, r2
 8000cca:	4652      	mov	r2, sl
 8000ccc:	408a      	lsls	r2, r1
 8000cce:	4b41      	ldr	r3, [pc, #260]	; (8000dd4 <__aeabi_ddiv+0x258>)
 8000cd0:	4458      	add	r0, fp
 8000cd2:	469b      	mov	fp, r3
 8000cd4:	4483      	add	fp, r0
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	e78d      	b.n	8000bf6 <__aeabi_ddiv+0x7a>
 8000cda:	464b      	mov	r3, r9
 8000cdc:	4323      	orrs	r3, r4
 8000cde:	4698      	mov	r8, r3
 8000ce0:	d140      	bne.n	8000d64 <__aeabi_ddiv+0x1e8>
 8000ce2:	2308      	movs	r3, #8
 8000ce4:	4699      	mov	r9, r3
 8000ce6:	3b06      	subs	r3, #6
 8000ce8:	2500      	movs	r5, #0
 8000cea:	4683      	mov	fp, r0
 8000cec:	9300      	str	r3, [sp, #0]
 8000cee:	e769      	b.n	8000bc4 <__aeabi_ddiv+0x48>
 8000cf0:	46b2      	mov	sl, r6
 8000cf2:	9b00      	ldr	r3, [sp, #0]
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d0a9      	beq.n	8000c4c <__aeabi_ddiv+0xd0>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d100      	bne.n	8000cfe <__aeabi_ddiv+0x182>
 8000cfc:	e211      	b.n	8001122 <__aeabi_ddiv+0x5a6>
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d093      	beq.n	8000c2a <__aeabi_ddiv+0xae>
 8000d02:	4a35      	ldr	r2, [pc, #212]	; (8000dd8 <__aeabi_ddiv+0x25c>)
 8000d04:	445a      	add	r2, fp
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	dc00      	bgt.n	8000d0c <__aeabi_ddiv+0x190>
 8000d0a:	e13c      	b.n	8000f86 <__aeabi_ddiv+0x40a>
 8000d0c:	076b      	lsls	r3, r5, #29
 8000d0e:	d000      	beq.n	8000d12 <__aeabi_ddiv+0x196>
 8000d10:	e1a7      	b.n	8001062 <__aeabi_ddiv+0x4e6>
 8000d12:	08ed      	lsrs	r5, r5, #3
 8000d14:	4643      	mov	r3, r8
 8000d16:	01db      	lsls	r3, r3, #7
 8000d18:	d506      	bpl.n	8000d28 <__aeabi_ddiv+0x1ac>
 8000d1a:	4642      	mov	r2, r8
 8000d1c:	4b2f      	ldr	r3, [pc, #188]	; (8000ddc <__aeabi_ddiv+0x260>)
 8000d1e:	401a      	ands	r2, r3
 8000d20:	4690      	mov	r8, r2
 8000d22:	2280      	movs	r2, #128	; 0x80
 8000d24:	00d2      	lsls	r2, r2, #3
 8000d26:	445a      	add	r2, fp
 8000d28:	4b2d      	ldr	r3, [pc, #180]	; (8000de0 <__aeabi_ddiv+0x264>)
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	dc8e      	bgt.n	8000c4c <__aeabi_ddiv+0xd0>
 8000d2e:	4643      	mov	r3, r8
 8000d30:	0552      	lsls	r2, r2, #21
 8000d32:	0758      	lsls	r0, r3, #29
 8000d34:	025c      	lsls	r4, r3, #9
 8000d36:	4305      	orrs	r5, r0
 8000d38:	0b24      	lsrs	r4, r4, #12
 8000d3a:	0d53      	lsrs	r3, r2, #21
 8000d3c:	e778      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 8000d3e:	46ba      	mov	sl, r7
 8000d40:	46a0      	mov	r8, r4
 8000d42:	0015      	movs	r5, r2
 8000d44:	9000      	str	r0, [sp, #0]
 8000d46:	e7d4      	b.n	8000cf2 <__aeabi_ddiv+0x176>
 8000d48:	464a      	mov	r2, r9
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	431a      	orrs	r2, r3
 8000d4e:	4691      	mov	r9, r2
 8000d50:	2003      	movs	r0, #3
 8000d52:	4652      	mov	r2, sl
 8000d54:	e74f      	b.n	8000bf6 <__aeabi_ddiv+0x7a>
 8000d56:	4649      	mov	r1, r9
 8000d58:	2301      	movs	r3, #1
 8000d5a:	4319      	orrs	r1, r3
 8000d5c:	4689      	mov	r9, r1
 8000d5e:	2400      	movs	r4, #0
 8000d60:	2001      	movs	r0, #1
 8000d62:	e748      	b.n	8000bf6 <__aeabi_ddiv+0x7a>
 8000d64:	230c      	movs	r3, #12
 8000d66:	4699      	mov	r9, r3
 8000d68:	3b09      	subs	r3, #9
 8000d6a:	46a0      	mov	r8, r4
 8000d6c:	4683      	mov	fp, r0
 8000d6e:	9300      	str	r3, [sp, #0]
 8000d70:	e728      	b.n	8000bc4 <__aeabi_ddiv+0x48>
 8000d72:	2304      	movs	r3, #4
 8000d74:	4699      	mov	r9, r3
 8000d76:	2300      	movs	r3, #0
 8000d78:	469b      	mov	fp, r3
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	2500      	movs	r5, #0
 8000d7e:	9300      	str	r3, [sp, #0]
 8000d80:	e720      	b.n	8000bc4 <__aeabi_ddiv+0x48>
 8000d82:	2300      	movs	r3, #0
 8000d84:	2480      	movs	r4, #128	; 0x80
 8000d86:	469a      	mov	sl, r3
 8000d88:	2500      	movs	r5, #0
 8000d8a:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <__aeabi_ddiv+0x244>)
 8000d8c:	0324      	lsls	r4, r4, #12
 8000d8e:	e74f      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 8000d90:	2380      	movs	r3, #128	; 0x80
 8000d92:	4641      	mov	r1, r8
 8000d94:	031b      	lsls	r3, r3, #12
 8000d96:	4219      	tst	r1, r3
 8000d98:	d008      	beq.n	8000dac <__aeabi_ddiv+0x230>
 8000d9a:	421c      	tst	r4, r3
 8000d9c:	d106      	bne.n	8000dac <__aeabi_ddiv+0x230>
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	0324      	lsls	r4, r4, #12
 8000da2:	46ba      	mov	sl, r7
 8000da4:	0015      	movs	r5, r2
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <__aeabi_ddiv+0x244>)
 8000da8:	0b24      	lsrs	r4, r4, #12
 8000daa:	e741      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 8000dac:	2480      	movs	r4, #128	; 0x80
 8000dae:	4643      	mov	r3, r8
 8000db0:	0324      	lsls	r4, r4, #12
 8000db2:	431c      	orrs	r4, r3
 8000db4:	0324      	lsls	r4, r4, #12
 8000db6:	46b2      	mov	sl, r6
 8000db8:	4b01      	ldr	r3, [pc, #4]	; (8000dc0 <__aeabi_ddiv+0x244>)
 8000dba:	0b24      	lsrs	r4, r4, #12
 8000dbc:	e738      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	000007ff 	.word	0x000007ff
 8000dc4:	fffffc01 	.word	0xfffffc01
 8000dc8:	0800e1dc 	.word	0x0800e1dc
 8000dcc:	fffff801 	.word	0xfffff801
 8000dd0:	fffffc0d 	.word	0xfffffc0d
 8000dd4:	000003f3 	.word	0x000003f3
 8000dd8:	000003ff 	.word	0x000003ff
 8000ddc:	feffffff 	.word	0xfeffffff
 8000de0:	000007fe 	.word	0x000007fe
 8000de4:	4544      	cmp	r4, r8
 8000de6:	d200      	bcs.n	8000dea <__aeabi_ddiv+0x26e>
 8000de8:	e116      	b.n	8001018 <__aeabi_ddiv+0x49c>
 8000dea:	d100      	bne.n	8000dee <__aeabi_ddiv+0x272>
 8000dec:	e111      	b.n	8001012 <__aeabi_ddiv+0x496>
 8000dee:	2301      	movs	r3, #1
 8000df0:	425b      	negs	r3, r3
 8000df2:	469c      	mov	ip, r3
 8000df4:	002e      	movs	r6, r5
 8000df6:	4640      	mov	r0, r8
 8000df8:	2500      	movs	r5, #0
 8000dfa:	44e3      	add	fp, ip
 8000dfc:	0223      	lsls	r3, r4, #8
 8000dfe:	0e14      	lsrs	r4, r2, #24
 8000e00:	431c      	orrs	r4, r3
 8000e02:	0c1b      	lsrs	r3, r3, #16
 8000e04:	4699      	mov	r9, r3
 8000e06:	0423      	lsls	r3, r4, #16
 8000e08:	0c1f      	lsrs	r7, r3, #16
 8000e0a:	0212      	lsls	r2, r2, #8
 8000e0c:	4649      	mov	r1, r9
 8000e0e:	9200      	str	r2, [sp, #0]
 8000e10:	9701      	str	r7, [sp, #4]
 8000e12:	f7ff f9fd 	bl	8000210 <__aeabi_uidivmod>
 8000e16:	0002      	movs	r2, r0
 8000e18:	437a      	muls	r2, r7
 8000e1a:	040b      	lsls	r3, r1, #16
 8000e1c:	0c31      	lsrs	r1, r6, #16
 8000e1e:	4680      	mov	r8, r0
 8000e20:	4319      	orrs	r1, r3
 8000e22:	428a      	cmp	r2, r1
 8000e24:	d90b      	bls.n	8000e3e <__aeabi_ddiv+0x2c2>
 8000e26:	2301      	movs	r3, #1
 8000e28:	425b      	negs	r3, r3
 8000e2a:	469c      	mov	ip, r3
 8000e2c:	1909      	adds	r1, r1, r4
 8000e2e:	44e0      	add	r8, ip
 8000e30:	428c      	cmp	r4, r1
 8000e32:	d804      	bhi.n	8000e3e <__aeabi_ddiv+0x2c2>
 8000e34:	428a      	cmp	r2, r1
 8000e36:	d902      	bls.n	8000e3e <__aeabi_ddiv+0x2c2>
 8000e38:	1e83      	subs	r3, r0, #2
 8000e3a:	4698      	mov	r8, r3
 8000e3c:	1909      	adds	r1, r1, r4
 8000e3e:	1a88      	subs	r0, r1, r2
 8000e40:	4649      	mov	r1, r9
 8000e42:	f7ff f9e5 	bl	8000210 <__aeabi_uidivmod>
 8000e46:	0409      	lsls	r1, r1, #16
 8000e48:	468c      	mov	ip, r1
 8000e4a:	0431      	lsls	r1, r6, #16
 8000e4c:	4666      	mov	r6, ip
 8000e4e:	9a01      	ldr	r2, [sp, #4]
 8000e50:	0c09      	lsrs	r1, r1, #16
 8000e52:	4342      	muls	r2, r0
 8000e54:	0003      	movs	r3, r0
 8000e56:	4331      	orrs	r1, r6
 8000e58:	428a      	cmp	r2, r1
 8000e5a:	d904      	bls.n	8000e66 <__aeabi_ddiv+0x2ea>
 8000e5c:	1909      	adds	r1, r1, r4
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	428c      	cmp	r4, r1
 8000e62:	d800      	bhi.n	8000e66 <__aeabi_ddiv+0x2ea>
 8000e64:	e111      	b.n	800108a <__aeabi_ddiv+0x50e>
 8000e66:	1a89      	subs	r1, r1, r2
 8000e68:	4642      	mov	r2, r8
 8000e6a:	9e00      	ldr	r6, [sp, #0]
 8000e6c:	0412      	lsls	r2, r2, #16
 8000e6e:	431a      	orrs	r2, r3
 8000e70:	0c33      	lsrs	r3, r6, #16
 8000e72:	001f      	movs	r7, r3
 8000e74:	0c10      	lsrs	r0, r2, #16
 8000e76:	4690      	mov	r8, r2
 8000e78:	9302      	str	r3, [sp, #8]
 8000e7a:	0413      	lsls	r3, r2, #16
 8000e7c:	0432      	lsls	r2, r6, #16
 8000e7e:	0c16      	lsrs	r6, r2, #16
 8000e80:	0032      	movs	r2, r6
 8000e82:	0c1b      	lsrs	r3, r3, #16
 8000e84:	435a      	muls	r2, r3
 8000e86:	9603      	str	r6, [sp, #12]
 8000e88:	437b      	muls	r3, r7
 8000e8a:	4346      	muls	r6, r0
 8000e8c:	4378      	muls	r0, r7
 8000e8e:	0c17      	lsrs	r7, r2, #16
 8000e90:	46bc      	mov	ip, r7
 8000e92:	199b      	adds	r3, r3, r6
 8000e94:	4463      	add	r3, ip
 8000e96:	429e      	cmp	r6, r3
 8000e98:	d903      	bls.n	8000ea2 <__aeabi_ddiv+0x326>
 8000e9a:	2680      	movs	r6, #128	; 0x80
 8000e9c:	0276      	lsls	r6, r6, #9
 8000e9e:	46b4      	mov	ip, r6
 8000ea0:	4460      	add	r0, ip
 8000ea2:	0c1e      	lsrs	r6, r3, #16
 8000ea4:	1830      	adds	r0, r6, r0
 8000ea6:	0416      	lsls	r6, r2, #16
 8000ea8:	041b      	lsls	r3, r3, #16
 8000eaa:	0c36      	lsrs	r6, r6, #16
 8000eac:	199e      	adds	r6, r3, r6
 8000eae:	4281      	cmp	r1, r0
 8000eb0:	d200      	bcs.n	8000eb4 <__aeabi_ddiv+0x338>
 8000eb2:	e09c      	b.n	8000fee <__aeabi_ddiv+0x472>
 8000eb4:	d100      	bne.n	8000eb8 <__aeabi_ddiv+0x33c>
 8000eb6:	e097      	b.n	8000fe8 <__aeabi_ddiv+0x46c>
 8000eb8:	1bae      	subs	r6, r5, r6
 8000eba:	1a09      	subs	r1, r1, r0
 8000ebc:	42b5      	cmp	r5, r6
 8000ebe:	4180      	sbcs	r0, r0
 8000ec0:	4240      	negs	r0, r0
 8000ec2:	1a08      	subs	r0, r1, r0
 8000ec4:	4284      	cmp	r4, r0
 8000ec6:	d100      	bne.n	8000eca <__aeabi_ddiv+0x34e>
 8000ec8:	e111      	b.n	80010ee <__aeabi_ddiv+0x572>
 8000eca:	4649      	mov	r1, r9
 8000ecc:	f7ff f9a0 	bl	8000210 <__aeabi_uidivmod>
 8000ed0:	9a01      	ldr	r2, [sp, #4]
 8000ed2:	040b      	lsls	r3, r1, #16
 8000ed4:	4342      	muls	r2, r0
 8000ed6:	0c31      	lsrs	r1, r6, #16
 8000ed8:	0005      	movs	r5, r0
 8000eda:	4319      	orrs	r1, r3
 8000edc:	428a      	cmp	r2, r1
 8000ede:	d907      	bls.n	8000ef0 <__aeabi_ddiv+0x374>
 8000ee0:	1909      	adds	r1, r1, r4
 8000ee2:	3d01      	subs	r5, #1
 8000ee4:	428c      	cmp	r4, r1
 8000ee6:	d803      	bhi.n	8000ef0 <__aeabi_ddiv+0x374>
 8000ee8:	428a      	cmp	r2, r1
 8000eea:	d901      	bls.n	8000ef0 <__aeabi_ddiv+0x374>
 8000eec:	1e85      	subs	r5, r0, #2
 8000eee:	1909      	adds	r1, r1, r4
 8000ef0:	1a88      	subs	r0, r1, r2
 8000ef2:	4649      	mov	r1, r9
 8000ef4:	f7ff f98c 	bl	8000210 <__aeabi_uidivmod>
 8000ef8:	0409      	lsls	r1, r1, #16
 8000efa:	468c      	mov	ip, r1
 8000efc:	0431      	lsls	r1, r6, #16
 8000efe:	4666      	mov	r6, ip
 8000f00:	9a01      	ldr	r2, [sp, #4]
 8000f02:	0c09      	lsrs	r1, r1, #16
 8000f04:	4342      	muls	r2, r0
 8000f06:	0003      	movs	r3, r0
 8000f08:	4331      	orrs	r1, r6
 8000f0a:	428a      	cmp	r2, r1
 8000f0c:	d907      	bls.n	8000f1e <__aeabi_ddiv+0x3a2>
 8000f0e:	1909      	adds	r1, r1, r4
 8000f10:	3b01      	subs	r3, #1
 8000f12:	428c      	cmp	r4, r1
 8000f14:	d803      	bhi.n	8000f1e <__aeabi_ddiv+0x3a2>
 8000f16:	428a      	cmp	r2, r1
 8000f18:	d901      	bls.n	8000f1e <__aeabi_ddiv+0x3a2>
 8000f1a:	1e83      	subs	r3, r0, #2
 8000f1c:	1909      	adds	r1, r1, r4
 8000f1e:	9e03      	ldr	r6, [sp, #12]
 8000f20:	1a89      	subs	r1, r1, r2
 8000f22:	0032      	movs	r2, r6
 8000f24:	042d      	lsls	r5, r5, #16
 8000f26:	431d      	orrs	r5, r3
 8000f28:	9f02      	ldr	r7, [sp, #8]
 8000f2a:	042b      	lsls	r3, r5, #16
 8000f2c:	0c1b      	lsrs	r3, r3, #16
 8000f2e:	435a      	muls	r2, r3
 8000f30:	437b      	muls	r3, r7
 8000f32:	469c      	mov	ip, r3
 8000f34:	0c28      	lsrs	r0, r5, #16
 8000f36:	4346      	muls	r6, r0
 8000f38:	0c13      	lsrs	r3, r2, #16
 8000f3a:	44b4      	add	ip, r6
 8000f3c:	4463      	add	r3, ip
 8000f3e:	4378      	muls	r0, r7
 8000f40:	429e      	cmp	r6, r3
 8000f42:	d903      	bls.n	8000f4c <__aeabi_ddiv+0x3d0>
 8000f44:	2680      	movs	r6, #128	; 0x80
 8000f46:	0276      	lsls	r6, r6, #9
 8000f48:	46b4      	mov	ip, r6
 8000f4a:	4460      	add	r0, ip
 8000f4c:	0c1e      	lsrs	r6, r3, #16
 8000f4e:	0412      	lsls	r2, r2, #16
 8000f50:	041b      	lsls	r3, r3, #16
 8000f52:	0c12      	lsrs	r2, r2, #16
 8000f54:	1830      	adds	r0, r6, r0
 8000f56:	189b      	adds	r3, r3, r2
 8000f58:	4281      	cmp	r1, r0
 8000f5a:	d306      	bcc.n	8000f6a <__aeabi_ddiv+0x3ee>
 8000f5c:	d002      	beq.n	8000f64 <__aeabi_ddiv+0x3e8>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	431d      	orrs	r5, r3
 8000f62:	e6ce      	b.n	8000d02 <__aeabi_ddiv+0x186>
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d100      	bne.n	8000f6a <__aeabi_ddiv+0x3ee>
 8000f68:	e6cb      	b.n	8000d02 <__aeabi_ddiv+0x186>
 8000f6a:	1861      	adds	r1, r4, r1
 8000f6c:	1e6e      	subs	r6, r5, #1
 8000f6e:	42a1      	cmp	r1, r4
 8000f70:	d200      	bcs.n	8000f74 <__aeabi_ddiv+0x3f8>
 8000f72:	e0a4      	b.n	80010be <__aeabi_ddiv+0x542>
 8000f74:	4281      	cmp	r1, r0
 8000f76:	d200      	bcs.n	8000f7a <__aeabi_ddiv+0x3fe>
 8000f78:	e0c9      	b.n	800110e <__aeabi_ddiv+0x592>
 8000f7a:	d100      	bne.n	8000f7e <__aeabi_ddiv+0x402>
 8000f7c:	e0d9      	b.n	8001132 <__aeabi_ddiv+0x5b6>
 8000f7e:	0035      	movs	r5, r6
 8000f80:	e7ed      	b.n	8000f5e <__aeabi_ddiv+0x3e2>
 8000f82:	2501      	movs	r5, #1
 8000f84:	426d      	negs	r5, r5
 8000f86:	2101      	movs	r1, #1
 8000f88:	1a89      	subs	r1, r1, r2
 8000f8a:	2938      	cmp	r1, #56	; 0x38
 8000f8c:	dd00      	ble.n	8000f90 <__aeabi_ddiv+0x414>
 8000f8e:	e64c      	b.n	8000c2a <__aeabi_ddiv+0xae>
 8000f90:	291f      	cmp	r1, #31
 8000f92:	dc00      	bgt.n	8000f96 <__aeabi_ddiv+0x41a>
 8000f94:	e07f      	b.n	8001096 <__aeabi_ddiv+0x51a>
 8000f96:	231f      	movs	r3, #31
 8000f98:	425b      	negs	r3, r3
 8000f9a:	1a9a      	subs	r2, r3, r2
 8000f9c:	4643      	mov	r3, r8
 8000f9e:	40d3      	lsrs	r3, r2
 8000fa0:	2920      	cmp	r1, #32
 8000fa2:	d004      	beq.n	8000fae <__aeabi_ddiv+0x432>
 8000fa4:	4644      	mov	r4, r8
 8000fa6:	4a65      	ldr	r2, [pc, #404]	; (800113c <__aeabi_ddiv+0x5c0>)
 8000fa8:	445a      	add	r2, fp
 8000faa:	4094      	lsls	r4, r2
 8000fac:	4325      	orrs	r5, r4
 8000fae:	1e6a      	subs	r2, r5, #1
 8000fb0:	4195      	sbcs	r5, r2
 8000fb2:	2207      	movs	r2, #7
 8000fb4:	432b      	orrs	r3, r5
 8000fb6:	0015      	movs	r5, r2
 8000fb8:	2400      	movs	r4, #0
 8000fba:	401d      	ands	r5, r3
 8000fbc:	421a      	tst	r2, r3
 8000fbe:	d100      	bne.n	8000fc2 <__aeabi_ddiv+0x446>
 8000fc0:	e0a1      	b.n	8001106 <__aeabi_ddiv+0x58a>
 8000fc2:	220f      	movs	r2, #15
 8000fc4:	2400      	movs	r4, #0
 8000fc6:	401a      	ands	r2, r3
 8000fc8:	2a04      	cmp	r2, #4
 8000fca:	d100      	bne.n	8000fce <__aeabi_ddiv+0x452>
 8000fcc:	e098      	b.n	8001100 <__aeabi_ddiv+0x584>
 8000fce:	1d1a      	adds	r2, r3, #4
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	419b      	sbcs	r3, r3
 8000fd4:	425b      	negs	r3, r3
 8000fd6:	18e4      	adds	r4, r4, r3
 8000fd8:	0013      	movs	r3, r2
 8000fda:	0222      	lsls	r2, r4, #8
 8000fdc:	d400      	bmi.n	8000fe0 <__aeabi_ddiv+0x464>
 8000fde:	e08f      	b.n	8001100 <__aeabi_ddiv+0x584>
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	2400      	movs	r4, #0
 8000fe4:	2500      	movs	r5, #0
 8000fe6:	e623      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 8000fe8:	42b5      	cmp	r5, r6
 8000fea:	d300      	bcc.n	8000fee <__aeabi_ddiv+0x472>
 8000fec:	e764      	b.n	8000eb8 <__aeabi_ddiv+0x33c>
 8000fee:	4643      	mov	r3, r8
 8000ff0:	1e5a      	subs	r2, r3, #1
 8000ff2:	9b00      	ldr	r3, [sp, #0]
 8000ff4:	469c      	mov	ip, r3
 8000ff6:	4465      	add	r5, ip
 8000ff8:	001f      	movs	r7, r3
 8000ffa:	429d      	cmp	r5, r3
 8000ffc:	419b      	sbcs	r3, r3
 8000ffe:	425b      	negs	r3, r3
 8001000:	191b      	adds	r3, r3, r4
 8001002:	18c9      	adds	r1, r1, r3
 8001004:	428c      	cmp	r4, r1
 8001006:	d23a      	bcs.n	800107e <__aeabi_ddiv+0x502>
 8001008:	4288      	cmp	r0, r1
 800100a:	d863      	bhi.n	80010d4 <__aeabi_ddiv+0x558>
 800100c:	d060      	beq.n	80010d0 <__aeabi_ddiv+0x554>
 800100e:	4690      	mov	r8, r2
 8001010:	e752      	b.n	8000eb8 <__aeabi_ddiv+0x33c>
 8001012:	42aa      	cmp	r2, r5
 8001014:	d900      	bls.n	8001018 <__aeabi_ddiv+0x49c>
 8001016:	e6ea      	b.n	8000dee <__aeabi_ddiv+0x272>
 8001018:	4643      	mov	r3, r8
 800101a:	07de      	lsls	r6, r3, #31
 800101c:	0858      	lsrs	r0, r3, #1
 800101e:	086b      	lsrs	r3, r5, #1
 8001020:	431e      	orrs	r6, r3
 8001022:	07ed      	lsls	r5, r5, #31
 8001024:	e6ea      	b.n	8000dfc <__aeabi_ddiv+0x280>
 8001026:	4648      	mov	r0, r9
 8001028:	f001 f838 	bl	800209c <__clzsi2>
 800102c:	0001      	movs	r1, r0
 800102e:	0002      	movs	r2, r0
 8001030:	3115      	adds	r1, #21
 8001032:	3220      	adds	r2, #32
 8001034:	291c      	cmp	r1, #28
 8001036:	dc00      	bgt.n	800103a <__aeabi_ddiv+0x4be>
 8001038:	e61a      	b.n	8000c70 <__aeabi_ddiv+0xf4>
 800103a:	464b      	mov	r3, r9
 800103c:	3808      	subs	r0, #8
 800103e:	4083      	lsls	r3, r0
 8001040:	2500      	movs	r5, #0
 8001042:	4698      	mov	r8, r3
 8001044:	e620      	b.n	8000c88 <__aeabi_ddiv+0x10c>
 8001046:	f001 f829 	bl	800209c <__clzsi2>
 800104a:	0003      	movs	r3, r0
 800104c:	001a      	movs	r2, r3
 800104e:	3215      	adds	r2, #21
 8001050:	3020      	adds	r0, #32
 8001052:	2a1c      	cmp	r2, #28
 8001054:	dc00      	bgt.n	8001058 <__aeabi_ddiv+0x4dc>
 8001056:	e630      	b.n	8000cba <__aeabi_ddiv+0x13e>
 8001058:	4654      	mov	r4, sl
 800105a:	3b08      	subs	r3, #8
 800105c:	2200      	movs	r2, #0
 800105e:	409c      	lsls	r4, r3
 8001060:	e635      	b.n	8000cce <__aeabi_ddiv+0x152>
 8001062:	230f      	movs	r3, #15
 8001064:	402b      	ands	r3, r5
 8001066:	2b04      	cmp	r3, #4
 8001068:	d100      	bne.n	800106c <__aeabi_ddiv+0x4f0>
 800106a:	e652      	b.n	8000d12 <__aeabi_ddiv+0x196>
 800106c:	2305      	movs	r3, #5
 800106e:	425b      	negs	r3, r3
 8001070:	42ab      	cmp	r3, r5
 8001072:	419b      	sbcs	r3, r3
 8001074:	3504      	adds	r5, #4
 8001076:	425b      	negs	r3, r3
 8001078:	08ed      	lsrs	r5, r5, #3
 800107a:	4498      	add	r8, r3
 800107c:	e64a      	b.n	8000d14 <__aeabi_ddiv+0x198>
 800107e:	428c      	cmp	r4, r1
 8001080:	d1c5      	bne.n	800100e <__aeabi_ddiv+0x492>
 8001082:	42af      	cmp	r7, r5
 8001084:	d9c0      	bls.n	8001008 <__aeabi_ddiv+0x48c>
 8001086:	4690      	mov	r8, r2
 8001088:	e716      	b.n	8000eb8 <__aeabi_ddiv+0x33c>
 800108a:	428a      	cmp	r2, r1
 800108c:	d800      	bhi.n	8001090 <__aeabi_ddiv+0x514>
 800108e:	e6ea      	b.n	8000e66 <__aeabi_ddiv+0x2ea>
 8001090:	1e83      	subs	r3, r0, #2
 8001092:	1909      	adds	r1, r1, r4
 8001094:	e6e7      	b.n	8000e66 <__aeabi_ddiv+0x2ea>
 8001096:	4a2a      	ldr	r2, [pc, #168]	; (8001140 <__aeabi_ddiv+0x5c4>)
 8001098:	0028      	movs	r0, r5
 800109a:	445a      	add	r2, fp
 800109c:	4643      	mov	r3, r8
 800109e:	4095      	lsls	r5, r2
 80010a0:	4093      	lsls	r3, r2
 80010a2:	40c8      	lsrs	r0, r1
 80010a4:	1e6a      	subs	r2, r5, #1
 80010a6:	4195      	sbcs	r5, r2
 80010a8:	4644      	mov	r4, r8
 80010aa:	4303      	orrs	r3, r0
 80010ac:	432b      	orrs	r3, r5
 80010ae:	40cc      	lsrs	r4, r1
 80010b0:	075a      	lsls	r2, r3, #29
 80010b2:	d092      	beq.n	8000fda <__aeabi_ddiv+0x45e>
 80010b4:	220f      	movs	r2, #15
 80010b6:	401a      	ands	r2, r3
 80010b8:	2a04      	cmp	r2, #4
 80010ba:	d188      	bne.n	8000fce <__aeabi_ddiv+0x452>
 80010bc:	e78d      	b.n	8000fda <__aeabi_ddiv+0x45e>
 80010be:	0035      	movs	r5, r6
 80010c0:	4281      	cmp	r1, r0
 80010c2:	d000      	beq.n	80010c6 <__aeabi_ddiv+0x54a>
 80010c4:	e74b      	b.n	8000f5e <__aeabi_ddiv+0x3e2>
 80010c6:	9a00      	ldr	r2, [sp, #0]
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d000      	beq.n	80010ce <__aeabi_ddiv+0x552>
 80010cc:	e747      	b.n	8000f5e <__aeabi_ddiv+0x3e2>
 80010ce:	e618      	b.n	8000d02 <__aeabi_ddiv+0x186>
 80010d0:	42ae      	cmp	r6, r5
 80010d2:	d99c      	bls.n	800100e <__aeabi_ddiv+0x492>
 80010d4:	2302      	movs	r3, #2
 80010d6:	425b      	negs	r3, r3
 80010d8:	469c      	mov	ip, r3
 80010da:	9b00      	ldr	r3, [sp, #0]
 80010dc:	44e0      	add	r8, ip
 80010de:	469c      	mov	ip, r3
 80010e0:	4465      	add	r5, ip
 80010e2:	429d      	cmp	r5, r3
 80010e4:	419b      	sbcs	r3, r3
 80010e6:	425b      	negs	r3, r3
 80010e8:	191b      	adds	r3, r3, r4
 80010ea:	18c9      	adds	r1, r1, r3
 80010ec:	e6e4      	b.n	8000eb8 <__aeabi_ddiv+0x33c>
 80010ee:	4a15      	ldr	r2, [pc, #84]	; (8001144 <__aeabi_ddiv+0x5c8>)
 80010f0:	445a      	add	r2, fp
 80010f2:	2a00      	cmp	r2, #0
 80010f4:	dc00      	bgt.n	80010f8 <__aeabi_ddiv+0x57c>
 80010f6:	e744      	b.n	8000f82 <__aeabi_ddiv+0x406>
 80010f8:	2301      	movs	r3, #1
 80010fa:	2500      	movs	r5, #0
 80010fc:	4498      	add	r8, r3
 80010fe:	e609      	b.n	8000d14 <__aeabi_ddiv+0x198>
 8001100:	0765      	lsls	r5, r4, #29
 8001102:	0264      	lsls	r4, r4, #9
 8001104:	0b24      	lsrs	r4, r4, #12
 8001106:	08db      	lsrs	r3, r3, #3
 8001108:	431d      	orrs	r5, r3
 800110a:	2300      	movs	r3, #0
 800110c:	e590      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 800110e:	9e00      	ldr	r6, [sp, #0]
 8001110:	3d02      	subs	r5, #2
 8001112:	0072      	lsls	r2, r6, #1
 8001114:	42b2      	cmp	r2, r6
 8001116:	41bf      	sbcs	r7, r7
 8001118:	427f      	negs	r7, r7
 800111a:	193c      	adds	r4, r7, r4
 800111c:	1909      	adds	r1, r1, r4
 800111e:	9200      	str	r2, [sp, #0]
 8001120:	e7ce      	b.n	80010c0 <__aeabi_ddiv+0x544>
 8001122:	2480      	movs	r4, #128	; 0x80
 8001124:	4643      	mov	r3, r8
 8001126:	0324      	lsls	r4, r4, #12
 8001128:	431c      	orrs	r4, r3
 800112a:	0324      	lsls	r4, r4, #12
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <__aeabi_ddiv+0x5cc>)
 800112e:	0b24      	lsrs	r4, r4, #12
 8001130:	e57e      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 8001132:	9a00      	ldr	r2, [sp, #0]
 8001134:	429a      	cmp	r2, r3
 8001136:	d3ea      	bcc.n	800110e <__aeabi_ddiv+0x592>
 8001138:	0035      	movs	r5, r6
 800113a:	e7c4      	b.n	80010c6 <__aeabi_ddiv+0x54a>
 800113c:	0000043e 	.word	0x0000043e
 8001140:	0000041e 	.word	0x0000041e
 8001144:	000003ff 	.word	0x000003ff
 8001148:	000007ff 	.word	0x000007ff

0800114c <__eqdf2>:
 800114c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800114e:	464f      	mov	r7, r9
 8001150:	4646      	mov	r6, r8
 8001152:	46d6      	mov	lr, sl
 8001154:	4694      	mov	ip, r2
 8001156:	4691      	mov	r9, r2
 8001158:	031a      	lsls	r2, r3, #12
 800115a:	0b12      	lsrs	r2, r2, #12
 800115c:	4d18      	ldr	r5, [pc, #96]	; (80011c0 <__eqdf2+0x74>)
 800115e:	b5c0      	push	{r6, r7, lr}
 8001160:	004c      	lsls	r4, r1, #1
 8001162:	030f      	lsls	r7, r1, #12
 8001164:	4692      	mov	sl, r2
 8001166:	005a      	lsls	r2, r3, #1
 8001168:	0006      	movs	r6, r0
 800116a:	4680      	mov	r8, r0
 800116c:	0b3f      	lsrs	r7, r7, #12
 800116e:	2001      	movs	r0, #1
 8001170:	0d64      	lsrs	r4, r4, #21
 8001172:	0fc9      	lsrs	r1, r1, #31
 8001174:	0d52      	lsrs	r2, r2, #21
 8001176:	0fdb      	lsrs	r3, r3, #31
 8001178:	42ac      	cmp	r4, r5
 800117a:	d00a      	beq.n	8001192 <__eqdf2+0x46>
 800117c:	42aa      	cmp	r2, r5
 800117e:	d003      	beq.n	8001188 <__eqdf2+0x3c>
 8001180:	4294      	cmp	r4, r2
 8001182:	d101      	bne.n	8001188 <__eqdf2+0x3c>
 8001184:	4557      	cmp	r7, sl
 8001186:	d00d      	beq.n	80011a4 <__eqdf2+0x58>
 8001188:	bce0      	pop	{r5, r6, r7}
 800118a:	46ba      	mov	sl, r7
 800118c:	46b1      	mov	r9, r6
 800118e:	46a8      	mov	r8, r5
 8001190:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001192:	003d      	movs	r5, r7
 8001194:	4335      	orrs	r5, r6
 8001196:	d1f7      	bne.n	8001188 <__eqdf2+0x3c>
 8001198:	42a2      	cmp	r2, r4
 800119a:	d1f5      	bne.n	8001188 <__eqdf2+0x3c>
 800119c:	4652      	mov	r2, sl
 800119e:	4665      	mov	r5, ip
 80011a0:	432a      	orrs	r2, r5
 80011a2:	d1f1      	bne.n	8001188 <__eqdf2+0x3c>
 80011a4:	2001      	movs	r0, #1
 80011a6:	45c8      	cmp	r8, r9
 80011a8:	d1ee      	bne.n	8001188 <__eqdf2+0x3c>
 80011aa:	4299      	cmp	r1, r3
 80011ac:	d006      	beq.n	80011bc <__eqdf2+0x70>
 80011ae:	2c00      	cmp	r4, #0
 80011b0:	d1ea      	bne.n	8001188 <__eqdf2+0x3c>
 80011b2:	433e      	orrs	r6, r7
 80011b4:	0030      	movs	r0, r6
 80011b6:	1e46      	subs	r6, r0, #1
 80011b8:	41b0      	sbcs	r0, r6
 80011ba:	e7e5      	b.n	8001188 <__eqdf2+0x3c>
 80011bc:	2000      	movs	r0, #0
 80011be:	e7e3      	b.n	8001188 <__eqdf2+0x3c>
 80011c0:	000007ff 	.word	0x000007ff

080011c4 <__gedf2>:
 80011c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011c6:	464e      	mov	r6, r9
 80011c8:	4645      	mov	r5, r8
 80011ca:	4657      	mov	r7, sl
 80011cc:	46de      	mov	lr, fp
 80011ce:	0004      	movs	r4, r0
 80011d0:	0018      	movs	r0, r3
 80011d2:	b5e0      	push	{r5, r6, r7, lr}
 80011d4:	0016      	movs	r6, r2
 80011d6:	031b      	lsls	r3, r3, #12
 80011d8:	0b1b      	lsrs	r3, r3, #12
 80011da:	4d32      	ldr	r5, [pc, #200]	; (80012a4 <__gedf2+0xe0>)
 80011dc:	030f      	lsls	r7, r1, #12
 80011de:	004a      	lsls	r2, r1, #1
 80011e0:	4699      	mov	r9, r3
 80011e2:	0043      	lsls	r3, r0, #1
 80011e4:	46a4      	mov	ip, r4
 80011e6:	46b0      	mov	r8, r6
 80011e8:	0b3f      	lsrs	r7, r7, #12
 80011ea:	0d52      	lsrs	r2, r2, #21
 80011ec:	0fc9      	lsrs	r1, r1, #31
 80011ee:	0d5b      	lsrs	r3, r3, #21
 80011f0:	0fc0      	lsrs	r0, r0, #31
 80011f2:	42aa      	cmp	r2, r5
 80011f4:	d029      	beq.n	800124a <__gedf2+0x86>
 80011f6:	42ab      	cmp	r3, r5
 80011f8:	d018      	beq.n	800122c <__gedf2+0x68>
 80011fa:	2a00      	cmp	r2, #0
 80011fc:	d12a      	bne.n	8001254 <__gedf2+0x90>
 80011fe:	433c      	orrs	r4, r7
 8001200:	46a3      	mov	fp, r4
 8001202:	4265      	negs	r5, r4
 8001204:	4165      	adcs	r5, r4
 8001206:	2b00      	cmp	r3, #0
 8001208:	d102      	bne.n	8001210 <__gedf2+0x4c>
 800120a:	464c      	mov	r4, r9
 800120c:	4326      	orrs	r6, r4
 800120e:	d027      	beq.n	8001260 <__gedf2+0x9c>
 8001210:	2d00      	cmp	r5, #0
 8001212:	d115      	bne.n	8001240 <__gedf2+0x7c>
 8001214:	4281      	cmp	r1, r0
 8001216:	d028      	beq.n	800126a <__gedf2+0xa6>
 8001218:	2002      	movs	r0, #2
 800121a:	3901      	subs	r1, #1
 800121c:	4008      	ands	r0, r1
 800121e:	3801      	subs	r0, #1
 8001220:	bcf0      	pop	{r4, r5, r6, r7}
 8001222:	46bb      	mov	fp, r7
 8001224:	46b2      	mov	sl, r6
 8001226:	46a9      	mov	r9, r5
 8001228:	46a0      	mov	r8, r4
 800122a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800122c:	464d      	mov	r5, r9
 800122e:	432e      	orrs	r6, r5
 8001230:	d12f      	bne.n	8001292 <__gedf2+0xce>
 8001232:	2a00      	cmp	r2, #0
 8001234:	d1ee      	bne.n	8001214 <__gedf2+0x50>
 8001236:	433c      	orrs	r4, r7
 8001238:	4265      	negs	r5, r4
 800123a:	4165      	adcs	r5, r4
 800123c:	2d00      	cmp	r5, #0
 800123e:	d0e9      	beq.n	8001214 <__gedf2+0x50>
 8001240:	2800      	cmp	r0, #0
 8001242:	d1ed      	bne.n	8001220 <__gedf2+0x5c>
 8001244:	2001      	movs	r0, #1
 8001246:	4240      	negs	r0, r0
 8001248:	e7ea      	b.n	8001220 <__gedf2+0x5c>
 800124a:	003d      	movs	r5, r7
 800124c:	4325      	orrs	r5, r4
 800124e:	d120      	bne.n	8001292 <__gedf2+0xce>
 8001250:	4293      	cmp	r3, r2
 8001252:	d0eb      	beq.n	800122c <__gedf2+0x68>
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1dd      	bne.n	8001214 <__gedf2+0x50>
 8001258:	464c      	mov	r4, r9
 800125a:	4326      	orrs	r6, r4
 800125c:	d1da      	bne.n	8001214 <__gedf2+0x50>
 800125e:	e7db      	b.n	8001218 <__gedf2+0x54>
 8001260:	465b      	mov	r3, fp
 8001262:	2000      	movs	r0, #0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d0db      	beq.n	8001220 <__gedf2+0x5c>
 8001268:	e7d6      	b.n	8001218 <__gedf2+0x54>
 800126a:	429a      	cmp	r2, r3
 800126c:	dc0a      	bgt.n	8001284 <__gedf2+0xc0>
 800126e:	dbe7      	blt.n	8001240 <__gedf2+0x7c>
 8001270:	454f      	cmp	r7, r9
 8001272:	d8d1      	bhi.n	8001218 <__gedf2+0x54>
 8001274:	d010      	beq.n	8001298 <__gedf2+0xd4>
 8001276:	2000      	movs	r0, #0
 8001278:	454f      	cmp	r7, r9
 800127a:	d2d1      	bcs.n	8001220 <__gedf2+0x5c>
 800127c:	2900      	cmp	r1, #0
 800127e:	d0e1      	beq.n	8001244 <__gedf2+0x80>
 8001280:	0008      	movs	r0, r1
 8001282:	e7cd      	b.n	8001220 <__gedf2+0x5c>
 8001284:	4243      	negs	r3, r0
 8001286:	4158      	adcs	r0, r3
 8001288:	2302      	movs	r3, #2
 800128a:	4240      	negs	r0, r0
 800128c:	4018      	ands	r0, r3
 800128e:	3801      	subs	r0, #1
 8001290:	e7c6      	b.n	8001220 <__gedf2+0x5c>
 8001292:	2002      	movs	r0, #2
 8001294:	4240      	negs	r0, r0
 8001296:	e7c3      	b.n	8001220 <__gedf2+0x5c>
 8001298:	45c4      	cmp	ip, r8
 800129a:	d8bd      	bhi.n	8001218 <__gedf2+0x54>
 800129c:	2000      	movs	r0, #0
 800129e:	45c4      	cmp	ip, r8
 80012a0:	d2be      	bcs.n	8001220 <__gedf2+0x5c>
 80012a2:	e7eb      	b.n	800127c <__gedf2+0xb8>
 80012a4:	000007ff 	.word	0x000007ff

080012a8 <__ledf2>:
 80012a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012aa:	464e      	mov	r6, r9
 80012ac:	4645      	mov	r5, r8
 80012ae:	4657      	mov	r7, sl
 80012b0:	46de      	mov	lr, fp
 80012b2:	0004      	movs	r4, r0
 80012b4:	0018      	movs	r0, r3
 80012b6:	b5e0      	push	{r5, r6, r7, lr}
 80012b8:	0016      	movs	r6, r2
 80012ba:	031b      	lsls	r3, r3, #12
 80012bc:	0b1b      	lsrs	r3, r3, #12
 80012be:	4d31      	ldr	r5, [pc, #196]	; (8001384 <__ledf2+0xdc>)
 80012c0:	030f      	lsls	r7, r1, #12
 80012c2:	004a      	lsls	r2, r1, #1
 80012c4:	4699      	mov	r9, r3
 80012c6:	0043      	lsls	r3, r0, #1
 80012c8:	46a4      	mov	ip, r4
 80012ca:	46b0      	mov	r8, r6
 80012cc:	0b3f      	lsrs	r7, r7, #12
 80012ce:	0d52      	lsrs	r2, r2, #21
 80012d0:	0fc9      	lsrs	r1, r1, #31
 80012d2:	0d5b      	lsrs	r3, r3, #21
 80012d4:	0fc0      	lsrs	r0, r0, #31
 80012d6:	42aa      	cmp	r2, r5
 80012d8:	d011      	beq.n	80012fe <__ledf2+0x56>
 80012da:	42ab      	cmp	r3, r5
 80012dc:	d014      	beq.n	8001308 <__ledf2+0x60>
 80012de:	2a00      	cmp	r2, #0
 80012e0:	d12f      	bne.n	8001342 <__ledf2+0x9a>
 80012e2:	433c      	orrs	r4, r7
 80012e4:	46a3      	mov	fp, r4
 80012e6:	4265      	negs	r5, r4
 80012e8:	4165      	adcs	r5, r4
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d114      	bne.n	8001318 <__ledf2+0x70>
 80012ee:	464c      	mov	r4, r9
 80012f0:	4326      	orrs	r6, r4
 80012f2:	d111      	bne.n	8001318 <__ledf2+0x70>
 80012f4:	465b      	mov	r3, fp
 80012f6:	2000      	movs	r0, #0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d017      	beq.n	800132c <__ledf2+0x84>
 80012fc:	e010      	b.n	8001320 <__ledf2+0x78>
 80012fe:	003d      	movs	r5, r7
 8001300:	4325      	orrs	r5, r4
 8001302:	d112      	bne.n	800132a <__ledf2+0x82>
 8001304:	4293      	cmp	r3, r2
 8001306:	d11c      	bne.n	8001342 <__ledf2+0x9a>
 8001308:	464d      	mov	r5, r9
 800130a:	432e      	orrs	r6, r5
 800130c:	d10d      	bne.n	800132a <__ledf2+0x82>
 800130e:	2a00      	cmp	r2, #0
 8001310:	d104      	bne.n	800131c <__ledf2+0x74>
 8001312:	433c      	orrs	r4, r7
 8001314:	4265      	negs	r5, r4
 8001316:	4165      	adcs	r5, r4
 8001318:	2d00      	cmp	r5, #0
 800131a:	d10d      	bne.n	8001338 <__ledf2+0x90>
 800131c:	4281      	cmp	r1, r0
 800131e:	d016      	beq.n	800134e <__ledf2+0xa6>
 8001320:	2002      	movs	r0, #2
 8001322:	3901      	subs	r1, #1
 8001324:	4008      	ands	r0, r1
 8001326:	3801      	subs	r0, #1
 8001328:	e000      	b.n	800132c <__ledf2+0x84>
 800132a:	2002      	movs	r0, #2
 800132c:	bcf0      	pop	{r4, r5, r6, r7}
 800132e:	46bb      	mov	fp, r7
 8001330:	46b2      	mov	sl, r6
 8001332:	46a9      	mov	r9, r5
 8001334:	46a0      	mov	r8, r4
 8001336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001338:	2800      	cmp	r0, #0
 800133a:	d1f7      	bne.n	800132c <__ledf2+0x84>
 800133c:	2001      	movs	r0, #1
 800133e:	4240      	negs	r0, r0
 8001340:	e7f4      	b.n	800132c <__ledf2+0x84>
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1ea      	bne.n	800131c <__ledf2+0x74>
 8001346:	464c      	mov	r4, r9
 8001348:	4326      	orrs	r6, r4
 800134a:	d1e7      	bne.n	800131c <__ledf2+0x74>
 800134c:	e7e8      	b.n	8001320 <__ledf2+0x78>
 800134e:	429a      	cmp	r2, r3
 8001350:	dd06      	ble.n	8001360 <__ledf2+0xb8>
 8001352:	4243      	negs	r3, r0
 8001354:	4158      	adcs	r0, r3
 8001356:	2302      	movs	r3, #2
 8001358:	4240      	negs	r0, r0
 800135a:	4018      	ands	r0, r3
 800135c:	3801      	subs	r0, #1
 800135e:	e7e5      	b.n	800132c <__ledf2+0x84>
 8001360:	429a      	cmp	r2, r3
 8001362:	dbe9      	blt.n	8001338 <__ledf2+0x90>
 8001364:	454f      	cmp	r7, r9
 8001366:	d8db      	bhi.n	8001320 <__ledf2+0x78>
 8001368:	d006      	beq.n	8001378 <__ledf2+0xd0>
 800136a:	2000      	movs	r0, #0
 800136c:	454f      	cmp	r7, r9
 800136e:	d2dd      	bcs.n	800132c <__ledf2+0x84>
 8001370:	2900      	cmp	r1, #0
 8001372:	d0e3      	beq.n	800133c <__ledf2+0x94>
 8001374:	0008      	movs	r0, r1
 8001376:	e7d9      	b.n	800132c <__ledf2+0x84>
 8001378:	45c4      	cmp	ip, r8
 800137a:	d8d1      	bhi.n	8001320 <__ledf2+0x78>
 800137c:	2000      	movs	r0, #0
 800137e:	45c4      	cmp	ip, r8
 8001380:	d2d4      	bcs.n	800132c <__ledf2+0x84>
 8001382:	e7f5      	b.n	8001370 <__ledf2+0xc8>
 8001384:	000007ff 	.word	0x000007ff

08001388 <__aeabi_dmul>:
 8001388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800138a:	4657      	mov	r7, sl
 800138c:	464e      	mov	r6, r9
 800138e:	4645      	mov	r5, r8
 8001390:	46de      	mov	lr, fp
 8001392:	b5e0      	push	{r5, r6, r7, lr}
 8001394:	4698      	mov	r8, r3
 8001396:	030c      	lsls	r4, r1, #12
 8001398:	004b      	lsls	r3, r1, #1
 800139a:	0006      	movs	r6, r0
 800139c:	4692      	mov	sl, r2
 800139e:	b087      	sub	sp, #28
 80013a0:	0b24      	lsrs	r4, r4, #12
 80013a2:	0d5b      	lsrs	r3, r3, #21
 80013a4:	0fcf      	lsrs	r7, r1, #31
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d06c      	beq.n	8001484 <__aeabi_dmul+0xfc>
 80013aa:	4add      	ldr	r2, [pc, #884]	; (8001720 <__aeabi_dmul+0x398>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d100      	bne.n	80013b2 <__aeabi_dmul+0x2a>
 80013b0:	e086      	b.n	80014c0 <__aeabi_dmul+0x138>
 80013b2:	0f42      	lsrs	r2, r0, #29
 80013b4:	00e4      	lsls	r4, r4, #3
 80013b6:	4314      	orrs	r4, r2
 80013b8:	2280      	movs	r2, #128	; 0x80
 80013ba:	0412      	lsls	r2, r2, #16
 80013bc:	4314      	orrs	r4, r2
 80013be:	4ad9      	ldr	r2, [pc, #868]	; (8001724 <__aeabi_dmul+0x39c>)
 80013c0:	00c5      	lsls	r5, r0, #3
 80013c2:	4694      	mov	ip, r2
 80013c4:	4463      	add	r3, ip
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	2300      	movs	r3, #0
 80013ca:	4699      	mov	r9, r3
 80013cc:	469b      	mov	fp, r3
 80013ce:	4643      	mov	r3, r8
 80013d0:	4642      	mov	r2, r8
 80013d2:	031e      	lsls	r6, r3, #12
 80013d4:	0fd2      	lsrs	r2, r2, #31
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	4650      	mov	r0, sl
 80013da:	4690      	mov	r8, r2
 80013dc:	0b36      	lsrs	r6, r6, #12
 80013de:	0d5b      	lsrs	r3, r3, #21
 80013e0:	d100      	bne.n	80013e4 <__aeabi_dmul+0x5c>
 80013e2:	e078      	b.n	80014d6 <__aeabi_dmul+0x14e>
 80013e4:	4ace      	ldr	r2, [pc, #824]	; (8001720 <__aeabi_dmul+0x398>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d01d      	beq.n	8001426 <__aeabi_dmul+0x9e>
 80013ea:	49ce      	ldr	r1, [pc, #824]	; (8001724 <__aeabi_dmul+0x39c>)
 80013ec:	0f42      	lsrs	r2, r0, #29
 80013ee:	468c      	mov	ip, r1
 80013f0:	9900      	ldr	r1, [sp, #0]
 80013f2:	4463      	add	r3, ip
 80013f4:	00f6      	lsls	r6, r6, #3
 80013f6:	468c      	mov	ip, r1
 80013f8:	4316      	orrs	r6, r2
 80013fa:	2280      	movs	r2, #128	; 0x80
 80013fc:	449c      	add	ip, r3
 80013fe:	0412      	lsls	r2, r2, #16
 8001400:	4663      	mov	r3, ip
 8001402:	4316      	orrs	r6, r2
 8001404:	00c2      	lsls	r2, r0, #3
 8001406:	2000      	movs	r0, #0
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	9900      	ldr	r1, [sp, #0]
 800140c:	4643      	mov	r3, r8
 800140e:	3101      	adds	r1, #1
 8001410:	468c      	mov	ip, r1
 8001412:	4649      	mov	r1, r9
 8001414:	407b      	eors	r3, r7
 8001416:	9301      	str	r3, [sp, #4]
 8001418:	290f      	cmp	r1, #15
 800141a:	d900      	bls.n	800141e <__aeabi_dmul+0x96>
 800141c:	e07e      	b.n	800151c <__aeabi_dmul+0x194>
 800141e:	4bc2      	ldr	r3, [pc, #776]	; (8001728 <__aeabi_dmul+0x3a0>)
 8001420:	0089      	lsls	r1, r1, #2
 8001422:	5859      	ldr	r1, [r3, r1]
 8001424:	468f      	mov	pc, r1
 8001426:	4652      	mov	r2, sl
 8001428:	9b00      	ldr	r3, [sp, #0]
 800142a:	4332      	orrs	r2, r6
 800142c:	d000      	beq.n	8001430 <__aeabi_dmul+0xa8>
 800142e:	e156      	b.n	80016de <__aeabi_dmul+0x356>
 8001430:	49bb      	ldr	r1, [pc, #748]	; (8001720 <__aeabi_dmul+0x398>)
 8001432:	2600      	movs	r6, #0
 8001434:	468c      	mov	ip, r1
 8001436:	4463      	add	r3, ip
 8001438:	4649      	mov	r1, r9
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	2302      	movs	r3, #2
 800143e:	4319      	orrs	r1, r3
 8001440:	4689      	mov	r9, r1
 8001442:	2002      	movs	r0, #2
 8001444:	e7e1      	b.n	800140a <__aeabi_dmul+0x82>
 8001446:	4643      	mov	r3, r8
 8001448:	9301      	str	r3, [sp, #4]
 800144a:	0034      	movs	r4, r6
 800144c:	0015      	movs	r5, r2
 800144e:	4683      	mov	fp, r0
 8001450:	465b      	mov	r3, fp
 8001452:	2b02      	cmp	r3, #2
 8001454:	d05e      	beq.n	8001514 <__aeabi_dmul+0x18c>
 8001456:	2b03      	cmp	r3, #3
 8001458:	d100      	bne.n	800145c <__aeabi_dmul+0xd4>
 800145a:	e1f3      	b.n	8001844 <__aeabi_dmul+0x4bc>
 800145c:	2b01      	cmp	r3, #1
 800145e:	d000      	beq.n	8001462 <__aeabi_dmul+0xda>
 8001460:	e118      	b.n	8001694 <__aeabi_dmul+0x30c>
 8001462:	2200      	movs	r2, #0
 8001464:	2400      	movs	r4, #0
 8001466:	2500      	movs	r5, #0
 8001468:	9b01      	ldr	r3, [sp, #4]
 800146a:	0512      	lsls	r2, r2, #20
 800146c:	4322      	orrs	r2, r4
 800146e:	07db      	lsls	r3, r3, #31
 8001470:	431a      	orrs	r2, r3
 8001472:	0028      	movs	r0, r5
 8001474:	0011      	movs	r1, r2
 8001476:	b007      	add	sp, #28
 8001478:	bcf0      	pop	{r4, r5, r6, r7}
 800147a:	46bb      	mov	fp, r7
 800147c:	46b2      	mov	sl, r6
 800147e:	46a9      	mov	r9, r5
 8001480:	46a0      	mov	r8, r4
 8001482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001484:	0025      	movs	r5, r4
 8001486:	4305      	orrs	r5, r0
 8001488:	d100      	bne.n	800148c <__aeabi_dmul+0x104>
 800148a:	e141      	b.n	8001710 <__aeabi_dmul+0x388>
 800148c:	2c00      	cmp	r4, #0
 800148e:	d100      	bne.n	8001492 <__aeabi_dmul+0x10a>
 8001490:	e1ad      	b.n	80017ee <__aeabi_dmul+0x466>
 8001492:	0020      	movs	r0, r4
 8001494:	f000 fe02 	bl	800209c <__clzsi2>
 8001498:	0001      	movs	r1, r0
 800149a:	0002      	movs	r2, r0
 800149c:	390b      	subs	r1, #11
 800149e:	231d      	movs	r3, #29
 80014a0:	0010      	movs	r0, r2
 80014a2:	1a5b      	subs	r3, r3, r1
 80014a4:	0031      	movs	r1, r6
 80014a6:	0035      	movs	r5, r6
 80014a8:	3808      	subs	r0, #8
 80014aa:	4084      	lsls	r4, r0
 80014ac:	40d9      	lsrs	r1, r3
 80014ae:	4085      	lsls	r5, r0
 80014b0:	430c      	orrs	r4, r1
 80014b2:	489e      	ldr	r0, [pc, #632]	; (800172c <__aeabi_dmul+0x3a4>)
 80014b4:	1a83      	subs	r3, r0, r2
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	2300      	movs	r3, #0
 80014ba:	4699      	mov	r9, r3
 80014bc:	469b      	mov	fp, r3
 80014be:	e786      	b.n	80013ce <__aeabi_dmul+0x46>
 80014c0:	0005      	movs	r5, r0
 80014c2:	4325      	orrs	r5, r4
 80014c4:	d000      	beq.n	80014c8 <__aeabi_dmul+0x140>
 80014c6:	e11c      	b.n	8001702 <__aeabi_dmul+0x37a>
 80014c8:	2208      	movs	r2, #8
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	2302      	movs	r3, #2
 80014ce:	2400      	movs	r4, #0
 80014d0:	4691      	mov	r9, r2
 80014d2:	469b      	mov	fp, r3
 80014d4:	e77b      	b.n	80013ce <__aeabi_dmul+0x46>
 80014d6:	4652      	mov	r2, sl
 80014d8:	4332      	orrs	r2, r6
 80014da:	d100      	bne.n	80014de <__aeabi_dmul+0x156>
 80014dc:	e10a      	b.n	80016f4 <__aeabi_dmul+0x36c>
 80014de:	2e00      	cmp	r6, #0
 80014e0:	d100      	bne.n	80014e4 <__aeabi_dmul+0x15c>
 80014e2:	e176      	b.n	80017d2 <__aeabi_dmul+0x44a>
 80014e4:	0030      	movs	r0, r6
 80014e6:	f000 fdd9 	bl	800209c <__clzsi2>
 80014ea:	0002      	movs	r2, r0
 80014ec:	3a0b      	subs	r2, #11
 80014ee:	231d      	movs	r3, #29
 80014f0:	0001      	movs	r1, r0
 80014f2:	1a9b      	subs	r3, r3, r2
 80014f4:	4652      	mov	r2, sl
 80014f6:	3908      	subs	r1, #8
 80014f8:	40da      	lsrs	r2, r3
 80014fa:	408e      	lsls	r6, r1
 80014fc:	4316      	orrs	r6, r2
 80014fe:	4652      	mov	r2, sl
 8001500:	408a      	lsls	r2, r1
 8001502:	9b00      	ldr	r3, [sp, #0]
 8001504:	4989      	ldr	r1, [pc, #548]	; (800172c <__aeabi_dmul+0x3a4>)
 8001506:	1a18      	subs	r0, r3, r0
 8001508:	0003      	movs	r3, r0
 800150a:	468c      	mov	ip, r1
 800150c:	4463      	add	r3, ip
 800150e:	2000      	movs	r0, #0
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	e77a      	b.n	800140a <__aeabi_dmul+0x82>
 8001514:	2400      	movs	r4, #0
 8001516:	2500      	movs	r5, #0
 8001518:	4a81      	ldr	r2, [pc, #516]	; (8001720 <__aeabi_dmul+0x398>)
 800151a:	e7a5      	b.n	8001468 <__aeabi_dmul+0xe0>
 800151c:	0c2f      	lsrs	r7, r5, #16
 800151e:	042d      	lsls	r5, r5, #16
 8001520:	0c2d      	lsrs	r5, r5, #16
 8001522:	002b      	movs	r3, r5
 8001524:	0c11      	lsrs	r1, r2, #16
 8001526:	0412      	lsls	r2, r2, #16
 8001528:	0c12      	lsrs	r2, r2, #16
 800152a:	4353      	muls	r3, r2
 800152c:	4698      	mov	r8, r3
 800152e:	0013      	movs	r3, r2
 8001530:	0028      	movs	r0, r5
 8001532:	437b      	muls	r3, r7
 8001534:	4699      	mov	r9, r3
 8001536:	4348      	muls	r0, r1
 8001538:	4448      	add	r0, r9
 800153a:	4683      	mov	fp, r0
 800153c:	4640      	mov	r0, r8
 800153e:	000b      	movs	r3, r1
 8001540:	0c00      	lsrs	r0, r0, #16
 8001542:	4682      	mov	sl, r0
 8001544:	4658      	mov	r0, fp
 8001546:	437b      	muls	r3, r7
 8001548:	4450      	add	r0, sl
 800154a:	9302      	str	r3, [sp, #8]
 800154c:	4581      	cmp	r9, r0
 800154e:	d906      	bls.n	800155e <__aeabi_dmul+0x1d6>
 8001550:	469a      	mov	sl, r3
 8001552:	2380      	movs	r3, #128	; 0x80
 8001554:	025b      	lsls	r3, r3, #9
 8001556:	4699      	mov	r9, r3
 8001558:	44ca      	add	sl, r9
 800155a:	4653      	mov	r3, sl
 800155c:	9302      	str	r3, [sp, #8]
 800155e:	0c03      	lsrs	r3, r0, #16
 8001560:	469b      	mov	fp, r3
 8001562:	4643      	mov	r3, r8
 8001564:	041b      	lsls	r3, r3, #16
 8001566:	0400      	lsls	r0, r0, #16
 8001568:	0c1b      	lsrs	r3, r3, #16
 800156a:	4698      	mov	r8, r3
 800156c:	0003      	movs	r3, r0
 800156e:	4443      	add	r3, r8
 8001570:	9304      	str	r3, [sp, #16]
 8001572:	0c33      	lsrs	r3, r6, #16
 8001574:	4699      	mov	r9, r3
 8001576:	002b      	movs	r3, r5
 8001578:	0436      	lsls	r6, r6, #16
 800157a:	0c36      	lsrs	r6, r6, #16
 800157c:	4373      	muls	r3, r6
 800157e:	4698      	mov	r8, r3
 8001580:	0033      	movs	r3, r6
 8001582:	437b      	muls	r3, r7
 8001584:	469a      	mov	sl, r3
 8001586:	464b      	mov	r3, r9
 8001588:	435d      	muls	r5, r3
 800158a:	435f      	muls	r7, r3
 800158c:	4643      	mov	r3, r8
 800158e:	4455      	add	r5, sl
 8001590:	0c18      	lsrs	r0, r3, #16
 8001592:	1940      	adds	r0, r0, r5
 8001594:	4582      	cmp	sl, r0
 8001596:	d903      	bls.n	80015a0 <__aeabi_dmul+0x218>
 8001598:	2380      	movs	r3, #128	; 0x80
 800159a:	025b      	lsls	r3, r3, #9
 800159c:	469a      	mov	sl, r3
 800159e:	4457      	add	r7, sl
 80015a0:	0c05      	lsrs	r5, r0, #16
 80015a2:	19eb      	adds	r3, r5, r7
 80015a4:	9305      	str	r3, [sp, #20]
 80015a6:	4643      	mov	r3, r8
 80015a8:	041d      	lsls	r5, r3, #16
 80015aa:	0c2d      	lsrs	r5, r5, #16
 80015ac:	0400      	lsls	r0, r0, #16
 80015ae:	1940      	adds	r0, r0, r5
 80015b0:	0c25      	lsrs	r5, r4, #16
 80015b2:	0424      	lsls	r4, r4, #16
 80015b4:	0c24      	lsrs	r4, r4, #16
 80015b6:	0027      	movs	r7, r4
 80015b8:	4357      	muls	r7, r2
 80015ba:	436a      	muls	r2, r5
 80015bc:	4690      	mov	r8, r2
 80015be:	002a      	movs	r2, r5
 80015c0:	0c3b      	lsrs	r3, r7, #16
 80015c2:	469a      	mov	sl, r3
 80015c4:	434a      	muls	r2, r1
 80015c6:	4361      	muls	r1, r4
 80015c8:	4441      	add	r1, r8
 80015ca:	4451      	add	r1, sl
 80015cc:	4483      	add	fp, r0
 80015ce:	4588      	cmp	r8, r1
 80015d0:	d903      	bls.n	80015da <__aeabi_dmul+0x252>
 80015d2:	2380      	movs	r3, #128	; 0x80
 80015d4:	025b      	lsls	r3, r3, #9
 80015d6:	4698      	mov	r8, r3
 80015d8:	4442      	add	r2, r8
 80015da:	043f      	lsls	r7, r7, #16
 80015dc:	0c0b      	lsrs	r3, r1, #16
 80015de:	0c3f      	lsrs	r7, r7, #16
 80015e0:	0409      	lsls	r1, r1, #16
 80015e2:	19c9      	adds	r1, r1, r7
 80015e4:	0027      	movs	r7, r4
 80015e6:	4698      	mov	r8, r3
 80015e8:	464b      	mov	r3, r9
 80015ea:	4377      	muls	r7, r6
 80015ec:	435c      	muls	r4, r3
 80015ee:	436e      	muls	r6, r5
 80015f0:	435d      	muls	r5, r3
 80015f2:	0c3b      	lsrs	r3, r7, #16
 80015f4:	4699      	mov	r9, r3
 80015f6:	19a4      	adds	r4, r4, r6
 80015f8:	444c      	add	r4, r9
 80015fa:	4442      	add	r2, r8
 80015fc:	9503      	str	r5, [sp, #12]
 80015fe:	42a6      	cmp	r6, r4
 8001600:	d904      	bls.n	800160c <__aeabi_dmul+0x284>
 8001602:	2380      	movs	r3, #128	; 0x80
 8001604:	025b      	lsls	r3, r3, #9
 8001606:	4698      	mov	r8, r3
 8001608:	4445      	add	r5, r8
 800160a:	9503      	str	r5, [sp, #12]
 800160c:	9b02      	ldr	r3, [sp, #8]
 800160e:	043f      	lsls	r7, r7, #16
 8001610:	445b      	add	r3, fp
 8001612:	001e      	movs	r6, r3
 8001614:	4283      	cmp	r3, r0
 8001616:	4180      	sbcs	r0, r0
 8001618:	0423      	lsls	r3, r4, #16
 800161a:	4698      	mov	r8, r3
 800161c:	9b05      	ldr	r3, [sp, #20]
 800161e:	0c3f      	lsrs	r7, r7, #16
 8001620:	4447      	add	r7, r8
 8001622:	4698      	mov	r8, r3
 8001624:	1876      	adds	r6, r6, r1
 8001626:	428e      	cmp	r6, r1
 8001628:	4189      	sbcs	r1, r1
 800162a:	4447      	add	r7, r8
 800162c:	4240      	negs	r0, r0
 800162e:	183d      	adds	r5, r7, r0
 8001630:	46a8      	mov	r8, r5
 8001632:	4693      	mov	fp, r2
 8001634:	4249      	negs	r1, r1
 8001636:	468a      	mov	sl, r1
 8001638:	44c3      	add	fp, r8
 800163a:	429f      	cmp	r7, r3
 800163c:	41bf      	sbcs	r7, r7
 800163e:	4580      	cmp	r8, r0
 8001640:	4180      	sbcs	r0, r0
 8001642:	9b03      	ldr	r3, [sp, #12]
 8001644:	44da      	add	sl, fp
 8001646:	4698      	mov	r8, r3
 8001648:	4653      	mov	r3, sl
 800164a:	4240      	negs	r0, r0
 800164c:	427f      	negs	r7, r7
 800164e:	4307      	orrs	r7, r0
 8001650:	0c24      	lsrs	r4, r4, #16
 8001652:	4593      	cmp	fp, r2
 8001654:	4192      	sbcs	r2, r2
 8001656:	458a      	cmp	sl, r1
 8001658:	4189      	sbcs	r1, r1
 800165a:	193f      	adds	r7, r7, r4
 800165c:	0ddc      	lsrs	r4, r3, #23
 800165e:	9b04      	ldr	r3, [sp, #16]
 8001660:	0275      	lsls	r5, r6, #9
 8001662:	431d      	orrs	r5, r3
 8001664:	1e68      	subs	r0, r5, #1
 8001666:	4185      	sbcs	r5, r0
 8001668:	4653      	mov	r3, sl
 800166a:	4252      	negs	r2, r2
 800166c:	4249      	negs	r1, r1
 800166e:	430a      	orrs	r2, r1
 8001670:	18bf      	adds	r7, r7, r2
 8001672:	4447      	add	r7, r8
 8001674:	0df6      	lsrs	r6, r6, #23
 8001676:	027f      	lsls	r7, r7, #9
 8001678:	4335      	orrs	r5, r6
 800167a:	025a      	lsls	r2, r3, #9
 800167c:	433c      	orrs	r4, r7
 800167e:	4315      	orrs	r5, r2
 8001680:	01fb      	lsls	r3, r7, #7
 8001682:	d400      	bmi.n	8001686 <__aeabi_dmul+0x2fe>
 8001684:	e0c1      	b.n	800180a <__aeabi_dmul+0x482>
 8001686:	2101      	movs	r1, #1
 8001688:	086a      	lsrs	r2, r5, #1
 800168a:	400d      	ands	r5, r1
 800168c:	4315      	orrs	r5, r2
 800168e:	07e2      	lsls	r2, r4, #31
 8001690:	4315      	orrs	r5, r2
 8001692:	0864      	lsrs	r4, r4, #1
 8001694:	4926      	ldr	r1, [pc, #152]	; (8001730 <__aeabi_dmul+0x3a8>)
 8001696:	4461      	add	r1, ip
 8001698:	2900      	cmp	r1, #0
 800169a:	dd56      	ble.n	800174a <__aeabi_dmul+0x3c2>
 800169c:	076b      	lsls	r3, r5, #29
 800169e:	d009      	beq.n	80016b4 <__aeabi_dmul+0x32c>
 80016a0:	220f      	movs	r2, #15
 80016a2:	402a      	ands	r2, r5
 80016a4:	2a04      	cmp	r2, #4
 80016a6:	d005      	beq.n	80016b4 <__aeabi_dmul+0x32c>
 80016a8:	1d2a      	adds	r2, r5, #4
 80016aa:	42aa      	cmp	r2, r5
 80016ac:	41ad      	sbcs	r5, r5
 80016ae:	426d      	negs	r5, r5
 80016b0:	1964      	adds	r4, r4, r5
 80016b2:	0015      	movs	r5, r2
 80016b4:	01e3      	lsls	r3, r4, #7
 80016b6:	d504      	bpl.n	80016c2 <__aeabi_dmul+0x33a>
 80016b8:	2180      	movs	r1, #128	; 0x80
 80016ba:	4a1e      	ldr	r2, [pc, #120]	; (8001734 <__aeabi_dmul+0x3ac>)
 80016bc:	00c9      	lsls	r1, r1, #3
 80016be:	4014      	ands	r4, r2
 80016c0:	4461      	add	r1, ip
 80016c2:	4a1d      	ldr	r2, [pc, #116]	; (8001738 <__aeabi_dmul+0x3b0>)
 80016c4:	4291      	cmp	r1, r2
 80016c6:	dd00      	ble.n	80016ca <__aeabi_dmul+0x342>
 80016c8:	e724      	b.n	8001514 <__aeabi_dmul+0x18c>
 80016ca:	0762      	lsls	r2, r4, #29
 80016cc:	08ed      	lsrs	r5, r5, #3
 80016ce:	0264      	lsls	r4, r4, #9
 80016d0:	0549      	lsls	r1, r1, #21
 80016d2:	4315      	orrs	r5, r2
 80016d4:	0b24      	lsrs	r4, r4, #12
 80016d6:	0d4a      	lsrs	r2, r1, #21
 80016d8:	e6c6      	b.n	8001468 <__aeabi_dmul+0xe0>
 80016da:	9701      	str	r7, [sp, #4]
 80016dc:	e6b8      	b.n	8001450 <__aeabi_dmul+0xc8>
 80016de:	4a10      	ldr	r2, [pc, #64]	; (8001720 <__aeabi_dmul+0x398>)
 80016e0:	2003      	movs	r0, #3
 80016e2:	4694      	mov	ip, r2
 80016e4:	4463      	add	r3, ip
 80016e6:	464a      	mov	r2, r9
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	2303      	movs	r3, #3
 80016ec:	431a      	orrs	r2, r3
 80016ee:	4691      	mov	r9, r2
 80016f0:	4652      	mov	r2, sl
 80016f2:	e68a      	b.n	800140a <__aeabi_dmul+0x82>
 80016f4:	4649      	mov	r1, r9
 80016f6:	2301      	movs	r3, #1
 80016f8:	4319      	orrs	r1, r3
 80016fa:	4689      	mov	r9, r1
 80016fc:	2600      	movs	r6, #0
 80016fe:	2001      	movs	r0, #1
 8001700:	e683      	b.n	800140a <__aeabi_dmul+0x82>
 8001702:	220c      	movs	r2, #12
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	2303      	movs	r3, #3
 8001708:	0005      	movs	r5, r0
 800170a:	4691      	mov	r9, r2
 800170c:	469b      	mov	fp, r3
 800170e:	e65e      	b.n	80013ce <__aeabi_dmul+0x46>
 8001710:	2304      	movs	r3, #4
 8001712:	4699      	mov	r9, r3
 8001714:	2300      	movs	r3, #0
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	3301      	adds	r3, #1
 800171a:	2400      	movs	r4, #0
 800171c:	469b      	mov	fp, r3
 800171e:	e656      	b.n	80013ce <__aeabi_dmul+0x46>
 8001720:	000007ff 	.word	0x000007ff
 8001724:	fffffc01 	.word	0xfffffc01
 8001728:	0800e21c 	.word	0x0800e21c
 800172c:	fffffc0d 	.word	0xfffffc0d
 8001730:	000003ff 	.word	0x000003ff
 8001734:	feffffff 	.word	0xfeffffff
 8001738:	000007fe 	.word	0x000007fe
 800173c:	2300      	movs	r3, #0
 800173e:	2480      	movs	r4, #128	; 0x80
 8001740:	2500      	movs	r5, #0
 8001742:	4a44      	ldr	r2, [pc, #272]	; (8001854 <__aeabi_dmul+0x4cc>)
 8001744:	9301      	str	r3, [sp, #4]
 8001746:	0324      	lsls	r4, r4, #12
 8001748:	e68e      	b.n	8001468 <__aeabi_dmul+0xe0>
 800174a:	2001      	movs	r0, #1
 800174c:	1a40      	subs	r0, r0, r1
 800174e:	2838      	cmp	r0, #56	; 0x38
 8001750:	dd00      	ble.n	8001754 <__aeabi_dmul+0x3cc>
 8001752:	e686      	b.n	8001462 <__aeabi_dmul+0xda>
 8001754:	281f      	cmp	r0, #31
 8001756:	dd5b      	ble.n	8001810 <__aeabi_dmul+0x488>
 8001758:	221f      	movs	r2, #31
 800175a:	0023      	movs	r3, r4
 800175c:	4252      	negs	r2, r2
 800175e:	1a51      	subs	r1, r2, r1
 8001760:	40cb      	lsrs	r3, r1
 8001762:	0019      	movs	r1, r3
 8001764:	2820      	cmp	r0, #32
 8001766:	d003      	beq.n	8001770 <__aeabi_dmul+0x3e8>
 8001768:	4a3b      	ldr	r2, [pc, #236]	; (8001858 <__aeabi_dmul+0x4d0>)
 800176a:	4462      	add	r2, ip
 800176c:	4094      	lsls	r4, r2
 800176e:	4325      	orrs	r5, r4
 8001770:	1e6a      	subs	r2, r5, #1
 8001772:	4195      	sbcs	r5, r2
 8001774:	002a      	movs	r2, r5
 8001776:	430a      	orrs	r2, r1
 8001778:	2107      	movs	r1, #7
 800177a:	000d      	movs	r5, r1
 800177c:	2400      	movs	r4, #0
 800177e:	4015      	ands	r5, r2
 8001780:	4211      	tst	r1, r2
 8001782:	d05b      	beq.n	800183c <__aeabi_dmul+0x4b4>
 8001784:	210f      	movs	r1, #15
 8001786:	2400      	movs	r4, #0
 8001788:	4011      	ands	r1, r2
 800178a:	2904      	cmp	r1, #4
 800178c:	d053      	beq.n	8001836 <__aeabi_dmul+0x4ae>
 800178e:	1d11      	adds	r1, r2, #4
 8001790:	4291      	cmp	r1, r2
 8001792:	4192      	sbcs	r2, r2
 8001794:	4252      	negs	r2, r2
 8001796:	18a4      	adds	r4, r4, r2
 8001798:	000a      	movs	r2, r1
 800179a:	0223      	lsls	r3, r4, #8
 800179c:	d54b      	bpl.n	8001836 <__aeabi_dmul+0x4ae>
 800179e:	2201      	movs	r2, #1
 80017a0:	2400      	movs	r4, #0
 80017a2:	2500      	movs	r5, #0
 80017a4:	e660      	b.n	8001468 <__aeabi_dmul+0xe0>
 80017a6:	2380      	movs	r3, #128	; 0x80
 80017a8:	031b      	lsls	r3, r3, #12
 80017aa:	421c      	tst	r4, r3
 80017ac:	d009      	beq.n	80017c2 <__aeabi_dmul+0x43a>
 80017ae:	421e      	tst	r6, r3
 80017b0:	d107      	bne.n	80017c2 <__aeabi_dmul+0x43a>
 80017b2:	4333      	orrs	r3, r6
 80017b4:	031c      	lsls	r4, r3, #12
 80017b6:	4643      	mov	r3, r8
 80017b8:	0015      	movs	r5, r2
 80017ba:	0b24      	lsrs	r4, r4, #12
 80017bc:	4a25      	ldr	r2, [pc, #148]	; (8001854 <__aeabi_dmul+0x4cc>)
 80017be:	9301      	str	r3, [sp, #4]
 80017c0:	e652      	b.n	8001468 <__aeabi_dmul+0xe0>
 80017c2:	2280      	movs	r2, #128	; 0x80
 80017c4:	0312      	lsls	r2, r2, #12
 80017c6:	4314      	orrs	r4, r2
 80017c8:	0324      	lsls	r4, r4, #12
 80017ca:	4a22      	ldr	r2, [pc, #136]	; (8001854 <__aeabi_dmul+0x4cc>)
 80017cc:	0b24      	lsrs	r4, r4, #12
 80017ce:	9701      	str	r7, [sp, #4]
 80017d0:	e64a      	b.n	8001468 <__aeabi_dmul+0xe0>
 80017d2:	f000 fc63 	bl	800209c <__clzsi2>
 80017d6:	0003      	movs	r3, r0
 80017d8:	001a      	movs	r2, r3
 80017da:	3215      	adds	r2, #21
 80017dc:	3020      	adds	r0, #32
 80017de:	2a1c      	cmp	r2, #28
 80017e0:	dc00      	bgt.n	80017e4 <__aeabi_dmul+0x45c>
 80017e2:	e684      	b.n	80014ee <__aeabi_dmul+0x166>
 80017e4:	4656      	mov	r6, sl
 80017e6:	3b08      	subs	r3, #8
 80017e8:	2200      	movs	r2, #0
 80017ea:	409e      	lsls	r6, r3
 80017ec:	e689      	b.n	8001502 <__aeabi_dmul+0x17a>
 80017ee:	f000 fc55 	bl	800209c <__clzsi2>
 80017f2:	0001      	movs	r1, r0
 80017f4:	0002      	movs	r2, r0
 80017f6:	3115      	adds	r1, #21
 80017f8:	3220      	adds	r2, #32
 80017fa:	291c      	cmp	r1, #28
 80017fc:	dc00      	bgt.n	8001800 <__aeabi_dmul+0x478>
 80017fe:	e64e      	b.n	800149e <__aeabi_dmul+0x116>
 8001800:	0034      	movs	r4, r6
 8001802:	3808      	subs	r0, #8
 8001804:	2500      	movs	r5, #0
 8001806:	4084      	lsls	r4, r0
 8001808:	e653      	b.n	80014b2 <__aeabi_dmul+0x12a>
 800180a:	9b00      	ldr	r3, [sp, #0]
 800180c:	469c      	mov	ip, r3
 800180e:	e741      	b.n	8001694 <__aeabi_dmul+0x30c>
 8001810:	4912      	ldr	r1, [pc, #72]	; (800185c <__aeabi_dmul+0x4d4>)
 8001812:	0022      	movs	r2, r4
 8001814:	4461      	add	r1, ip
 8001816:	002e      	movs	r6, r5
 8001818:	408d      	lsls	r5, r1
 800181a:	408a      	lsls	r2, r1
 800181c:	40c6      	lsrs	r6, r0
 800181e:	1e69      	subs	r1, r5, #1
 8001820:	418d      	sbcs	r5, r1
 8001822:	4332      	orrs	r2, r6
 8001824:	432a      	orrs	r2, r5
 8001826:	40c4      	lsrs	r4, r0
 8001828:	0753      	lsls	r3, r2, #29
 800182a:	d0b6      	beq.n	800179a <__aeabi_dmul+0x412>
 800182c:	210f      	movs	r1, #15
 800182e:	4011      	ands	r1, r2
 8001830:	2904      	cmp	r1, #4
 8001832:	d1ac      	bne.n	800178e <__aeabi_dmul+0x406>
 8001834:	e7b1      	b.n	800179a <__aeabi_dmul+0x412>
 8001836:	0765      	lsls	r5, r4, #29
 8001838:	0264      	lsls	r4, r4, #9
 800183a:	0b24      	lsrs	r4, r4, #12
 800183c:	08d2      	lsrs	r2, r2, #3
 800183e:	4315      	orrs	r5, r2
 8001840:	2200      	movs	r2, #0
 8001842:	e611      	b.n	8001468 <__aeabi_dmul+0xe0>
 8001844:	2280      	movs	r2, #128	; 0x80
 8001846:	0312      	lsls	r2, r2, #12
 8001848:	4314      	orrs	r4, r2
 800184a:	0324      	lsls	r4, r4, #12
 800184c:	4a01      	ldr	r2, [pc, #4]	; (8001854 <__aeabi_dmul+0x4cc>)
 800184e:	0b24      	lsrs	r4, r4, #12
 8001850:	e60a      	b.n	8001468 <__aeabi_dmul+0xe0>
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	000007ff 	.word	0x000007ff
 8001858:	0000043e 	.word	0x0000043e
 800185c:	0000041e 	.word	0x0000041e

08001860 <__aeabi_dsub>:
 8001860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001862:	4657      	mov	r7, sl
 8001864:	464e      	mov	r6, r9
 8001866:	4645      	mov	r5, r8
 8001868:	46de      	mov	lr, fp
 800186a:	0004      	movs	r4, r0
 800186c:	b5e0      	push	{r5, r6, r7, lr}
 800186e:	001f      	movs	r7, r3
 8001870:	0010      	movs	r0, r2
 8001872:	030b      	lsls	r3, r1, #12
 8001874:	0f62      	lsrs	r2, r4, #29
 8001876:	004e      	lsls	r6, r1, #1
 8001878:	0fcd      	lsrs	r5, r1, #31
 800187a:	0a5b      	lsrs	r3, r3, #9
 800187c:	0339      	lsls	r1, r7, #12
 800187e:	4313      	orrs	r3, r2
 8001880:	0a49      	lsrs	r1, r1, #9
 8001882:	00e2      	lsls	r2, r4, #3
 8001884:	0f44      	lsrs	r4, r0, #29
 8001886:	4321      	orrs	r1, r4
 8001888:	4cc2      	ldr	r4, [pc, #776]	; (8001b94 <__aeabi_dsub+0x334>)
 800188a:	4691      	mov	r9, r2
 800188c:	4692      	mov	sl, r2
 800188e:	00c0      	lsls	r0, r0, #3
 8001890:	007a      	lsls	r2, r7, #1
 8001892:	4680      	mov	r8, r0
 8001894:	0d76      	lsrs	r6, r6, #21
 8001896:	0d52      	lsrs	r2, r2, #21
 8001898:	0fff      	lsrs	r7, r7, #31
 800189a:	42a2      	cmp	r2, r4
 800189c:	d100      	bne.n	80018a0 <__aeabi_dsub+0x40>
 800189e:	e0b4      	b.n	8001a0a <__aeabi_dsub+0x1aa>
 80018a0:	2401      	movs	r4, #1
 80018a2:	4067      	eors	r7, r4
 80018a4:	46bb      	mov	fp, r7
 80018a6:	42bd      	cmp	r5, r7
 80018a8:	d100      	bne.n	80018ac <__aeabi_dsub+0x4c>
 80018aa:	e088      	b.n	80019be <__aeabi_dsub+0x15e>
 80018ac:	1ab4      	subs	r4, r6, r2
 80018ae:	46a4      	mov	ip, r4
 80018b0:	2c00      	cmp	r4, #0
 80018b2:	dc00      	bgt.n	80018b6 <__aeabi_dsub+0x56>
 80018b4:	e0b2      	b.n	8001a1c <__aeabi_dsub+0x1bc>
 80018b6:	2a00      	cmp	r2, #0
 80018b8:	d100      	bne.n	80018bc <__aeabi_dsub+0x5c>
 80018ba:	e0c5      	b.n	8001a48 <__aeabi_dsub+0x1e8>
 80018bc:	4ab5      	ldr	r2, [pc, #724]	; (8001b94 <__aeabi_dsub+0x334>)
 80018be:	4296      	cmp	r6, r2
 80018c0:	d100      	bne.n	80018c4 <__aeabi_dsub+0x64>
 80018c2:	e28b      	b.n	8001ddc <__aeabi_dsub+0x57c>
 80018c4:	2280      	movs	r2, #128	; 0x80
 80018c6:	0412      	lsls	r2, r2, #16
 80018c8:	4311      	orrs	r1, r2
 80018ca:	4662      	mov	r2, ip
 80018cc:	2a38      	cmp	r2, #56	; 0x38
 80018ce:	dd00      	ble.n	80018d2 <__aeabi_dsub+0x72>
 80018d0:	e1a1      	b.n	8001c16 <__aeabi_dsub+0x3b6>
 80018d2:	2a1f      	cmp	r2, #31
 80018d4:	dd00      	ble.n	80018d8 <__aeabi_dsub+0x78>
 80018d6:	e216      	b.n	8001d06 <__aeabi_dsub+0x4a6>
 80018d8:	2720      	movs	r7, #32
 80018da:	000c      	movs	r4, r1
 80018dc:	1abf      	subs	r7, r7, r2
 80018de:	40bc      	lsls	r4, r7
 80018e0:	0002      	movs	r2, r0
 80018e2:	46a0      	mov	r8, r4
 80018e4:	4664      	mov	r4, ip
 80018e6:	40b8      	lsls	r0, r7
 80018e8:	40e2      	lsrs	r2, r4
 80018ea:	4644      	mov	r4, r8
 80018ec:	4314      	orrs	r4, r2
 80018ee:	0002      	movs	r2, r0
 80018f0:	1e50      	subs	r0, r2, #1
 80018f2:	4182      	sbcs	r2, r0
 80018f4:	4660      	mov	r0, ip
 80018f6:	40c1      	lsrs	r1, r0
 80018f8:	4322      	orrs	r2, r4
 80018fa:	1a5b      	subs	r3, r3, r1
 80018fc:	4649      	mov	r1, r9
 80018fe:	1a8c      	subs	r4, r1, r2
 8001900:	45a1      	cmp	r9, r4
 8001902:	4192      	sbcs	r2, r2
 8001904:	4252      	negs	r2, r2
 8001906:	1a9b      	subs	r3, r3, r2
 8001908:	4698      	mov	r8, r3
 800190a:	4643      	mov	r3, r8
 800190c:	021b      	lsls	r3, r3, #8
 800190e:	d400      	bmi.n	8001912 <__aeabi_dsub+0xb2>
 8001910:	e117      	b.n	8001b42 <__aeabi_dsub+0x2e2>
 8001912:	4643      	mov	r3, r8
 8001914:	025b      	lsls	r3, r3, #9
 8001916:	0a5b      	lsrs	r3, r3, #9
 8001918:	4698      	mov	r8, r3
 800191a:	4643      	mov	r3, r8
 800191c:	2b00      	cmp	r3, #0
 800191e:	d100      	bne.n	8001922 <__aeabi_dsub+0xc2>
 8001920:	e16c      	b.n	8001bfc <__aeabi_dsub+0x39c>
 8001922:	4640      	mov	r0, r8
 8001924:	f000 fbba 	bl	800209c <__clzsi2>
 8001928:	0002      	movs	r2, r0
 800192a:	3a08      	subs	r2, #8
 800192c:	2120      	movs	r1, #32
 800192e:	0020      	movs	r0, r4
 8001930:	4643      	mov	r3, r8
 8001932:	1a89      	subs	r1, r1, r2
 8001934:	4093      	lsls	r3, r2
 8001936:	40c8      	lsrs	r0, r1
 8001938:	4094      	lsls	r4, r2
 800193a:	4303      	orrs	r3, r0
 800193c:	4296      	cmp	r6, r2
 800193e:	dd00      	ble.n	8001942 <__aeabi_dsub+0xe2>
 8001940:	e157      	b.n	8001bf2 <__aeabi_dsub+0x392>
 8001942:	1b96      	subs	r6, r2, r6
 8001944:	1c71      	adds	r1, r6, #1
 8001946:	291f      	cmp	r1, #31
 8001948:	dd00      	ble.n	800194c <__aeabi_dsub+0xec>
 800194a:	e1cb      	b.n	8001ce4 <__aeabi_dsub+0x484>
 800194c:	2220      	movs	r2, #32
 800194e:	0018      	movs	r0, r3
 8001950:	0026      	movs	r6, r4
 8001952:	1a52      	subs	r2, r2, r1
 8001954:	4094      	lsls	r4, r2
 8001956:	4090      	lsls	r0, r2
 8001958:	40ce      	lsrs	r6, r1
 800195a:	40cb      	lsrs	r3, r1
 800195c:	1e62      	subs	r2, r4, #1
 800195e:	4194      	sbcs	r4, r2
 8001960:	4330      	orrs	r0, r6
 8001962:	4698      	mov	r8, r3
 8001964:	2600      	movs	r6, #0
 8001966:	4304      	orrs	r4, r0
 8001968:	0763      	lsls	r3, r4, #29
 800196a:	d009      	beq.n	8001980 <__aeabi_dsub+0x120>
 800196c:	230f      	movs	r3, #15
 800196e:	4023      	ands	r3, r4
 8001970:	2b04      	cmp	r3, #4
 8001972:	d005      	beq.n	8001980 <__aeabi_dsub+0x120>
 8001974:	1d23      	adds	r3, r4, #4
 8001976:	42a3      	cmp	r3, r4
 8001978:	41a4      	sbcs	r4, r4
 800197a:	4264      	negs	r4, r4
 800197c:	44a0      	add	r8, r4
 800197e:	001c      	movs	r4, r3
 8001980:	4643      	mov	r3, r8
 8001982:	021b      	lsls	r3, r3, #8
 8001984:	d400      	bmi.n	8001988 <__aeabi_dsub+0x128>
 8001986:	e0df      	b.n	8001b48 <__aeabi_dsub+0x2e8>
 8001988:	4b82      	ldr	r3, [pc, #520]	; (8001b94 <__aeabi_dsub+0x334>)
 800198a:	3601      	adds	r6, #1
 800198c:	429e      	cmp	r6, r3
 800198e:	d100      	bne.n	8001992 <__aeabi_dsub+0x132>
 8001990:	e0fb      	b.n	8001b8a <__aeabi_dsub+0x32a>
 8001992:	4642      	mov	r2, r8
 8001994:	4b80      	ldr	r3, [pc, #512]	; (8001b98 <__aeabi_dsub+0x338>)
 8001996:	08e4      	lsrs	r4, r4, #3
 8001998:	401a      	ands	r2, r3
 800199a:	0013      	movs	r3, r2
 800199c:	0571      	lsls	r1, r6, #21
 800199e:	0752      	lsls	r2, r2, #29
 80019a0:	025b      	lsls	r3, r3, #9
 80019a2:	4322      	orrs	r2, r4
 80019a4:	0b1b      	lsrs	r3, r3, #12
 80019a6:	0d49      	lsrs	r1, r1, #21
 80019a8:	0509      	lsls	r1, r1, #20
 80019aa:	07ed      	lsls	r5, r5, #31
 80019ac:	4319      	orrs	r1, r3
 80019ae:	4329      	orrs	r1, r5
 80019b0:	0010      	movs	r0, r2
 80019b2:	bcf0      	pop	{r4, r5, r6, r7}
 80019b4:	46bb      	mov	fp, r7
 80019b6:	46b2      	mov	sl, r6
 80019b8:	46a9      	mov	r9, r5
 80019ba:	46a0      	mov	r8, r4
 80019bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019be:	1ab4      	subs	r4, r6, r2
 80019c0:	46a4      	mov	ip, r4
 80019c2:	2c00      	cmp	r4, #0
 80019c4:	dd58      	ble.n	8001a78 <__aeabi_dsub+0x218>
 80019c6:	2a00      	cmp	r2, #0
 80019c8:	d100      	bne.n	80019cc <__aeabi_dsub+0x16c>
 80019ca:	e09e      	b.n	8001b0a <__aeabi_dsub+0x2aa>
 80019cc:	4a71      	ldr	r2, [pc, #452]	; (8001b94 <__aeabi_dsub+0x334>)
 80019ce:	4296      	cmp	r6, r2
 80019d0:	d100      	bne.n	80019d4 <__aeabi_dsub+0x174>
 80019d2:	e13b      	b.n	8001c4c <__aeabi_dsub+0x3ec>
 80019d4:	2280      	movs	r2, #128	; 0x80
 80019d6:	0412      	lsls	r2, r2, #16
 80019d8:	4311      	orrs	r1, r2
 80019da:	4662      	mov	r2, ip
 80019dc:	2a38      	cmp	r2, #56	; 0x38
 80019de:	dd00      	ble.n	80019e2 <__aeabi_dsub+0x182>
 80019e0:	e0c1      	b.n	8001b66 <__aeabi_dsub+0x306>
 80019e2:	2a1f      	cmp	r2, #31
 80019e4:	dc00      	bgt.n	80019e8 <__aeabi_dsub+0x188>
 80019e6:	e1bb      	b.n	8001d60 <__aeabi_dsub+0x500>
 80019e8:	000c      	movs	r4, r1
 80019ea:	3a20      	subs	r2, #32
 80019ec:	40d4      	lsrs	r4, r2
 80019ee:	0022      	movs	r2, r4
 80019f0:	4664      	mov	r4, ip
 80019f2:	2c20      	cmp	r4, #32
 80019f4:	d004      	beq.n	8001a00 <__aeabi_dsub+0x1a0>
 80019f6:	2740      	movs	r7, #64	; 0x40
 80019f8:	1b3f      	subs	r7, r7, r4
 80019fa:	40b9      	lsls	r1, r7
 80019fc:	4308      	orrs	r0, r1
 80019fe:	4680      	mov	r8, r0
 8001a00:	4644      	mov	r4, r8
 8001a02:	1e61      	subs	r1, r4, #1
 8001a04:	418c      	sbcs	r4, r1
 8001a06:	4314      	orrs	r4, r2
 8001a08:	e0b1      	b.n	8001b6e <__aeabi_dsub+0x30e>
 8001a0a:	000c      	movs	r4, r1
 8001a0c:	4304      	orrs	r4, r0
 8001a0e:	d02a      	beq.n	8001a66 <__aeabi_dsub+0x206>
 8001a10:	46bb      	mov	fp, r7
 8001a12:	42bd      	cmp	r5, r7
 8001a14:	d02d      	beq.n	8001a72 <__aeabi_dsub+0x212>
 8001a16:	4c61      	ldr	r4, [pc, #388]	; (8001b9c <__aeabi_dsub+0x33c>)
 8001a18:	46a4      	mov	ip, r4
 8001a1a:	44b4      	add	ip, r6
 8001a1c:	4664      	mov	r4, ip
 8001a1e:	2c00      	cmp	r4, #0
 8001a20:	d05c      	beq.n	8001adc <__aeabi_dsub+0x27c>
 8001a22:	1b94      	subs	r4, r2, r6
 8001a24:	46a4      	mov	ip, r4
 8001a26:	2e00      	cmp	r6, #0
 8001a28:	d000      	beq.n	8001a2c <__aeabi_dsub+0x1cc>
 8001a2a:	e115      	b.n	8001c58 <__aeabi_dsub+0x3f8>
 8001a2c:	464d      	mov	r5, r9
 8001a2e:	431d      	orrs	r5, r3
 8001a30:	d100      	bne.n	8001a34 <__aeabi_dsub+0x1d4>
 8001a32:	e1c3      	b.n	8001dbc <__aeabi_dsub+0x55c>
 8001a34:	1e65      	subs	r5, r4, #1
 8001a36:	2c01      	cmp	r4, #1
 8001a38:	d100      	bne.n	8001a3c <__aeabi_dsub+0x1dc>
 8001a3a:	e20c      	b.n	8001e56 <__aeabi_dsub+0x5f6>
 8001a3c:	4e55      	ldr	r6, [pc, #340]	; (8001b94 <__aeabi_dsub+0x334>)
 8001a3e:	42b4      	cmp	r4, r6
 8001a40:	d100      	bne.n	8001a44 <__aeabi_dsub+0x1e4>
 8001a42:	e1f8      	b.n	8001e36 <__aeabi_dsub+0x5d6>
 8001a44:	46ac      	mov	ip, r5
 8001a46:	e10e      	b.n	8001c66 <__aeabi_dsub+0x406>
 8001a48:	000a      	movs	r2, r1
 8001a4a:	4302      	orrs	r2, r0
 8001a4c:	d100      	bne.n	8001a50 <__aeabi_dsub+0x1f0>
 8001a4e:	e136      	b.n	8001cbe <__aeabi_dsub+0x45e>
 8001a50:	0022      	movs	r2, r4
 8001a52:	3a01      	subs	r2, #1
 8001a54:	2c01      	cmp	r4, #1
 8001a56:	d100      	bne.n	8001a5a <__aeabi_dsub+0x1fa>
 8001a58:	e1c6      	b.n	8001de8 <__aeabi_dsub+0x588>
 8001a5a:	4c4e      	ldr	r4, [pc, #312]	; (8001b94 <__aeabi_dsub+0x334>)
 8001a5c:	45a4      	cmp	ip, r4
 8001a5e:	d100      	bne.n	8001a62 <__aeabi_dsub+0x202>
 8001a60:	e0f4      	b.n	8001c4c <__aeabi_dsub+0x3ec>
 8001a62:	4694      	mov	ip, r2
 8001a64:	e731      	b.n	80018ca <__aeabi_dsub+0x6a>
 8001a66:	2401      	movs	r4, #1
 8001a68:	4067      	eors	r7, r4
 8001a6a:	46bb      	mov	fp, r7
 8001a6c:	42bd      	cmp	r5, r7
 8001a6e:	d000      	beq.n	8001a72 <__aeabi_dsub+0x212>
 8001a70:	e71c      	b.n	80018ac <__aeabi_dsub+0x4c>
 8001a72:	4c4a      	ldr	r4, [pc, #296]	; (8001b9c <__aeabi_dsub+0x33c>)
 8001a74:	46a4      	mov	ip, r4
 8001a76:	44b4      	add	ip, r6
 8001a78:	4664      	mov	r4, ip
 8001a7a:	2c00      	cmp	r4, #0
 8001a7c:	d100      	bne.n	8001a80 <__aeabi_dsub+0x220>
 8001a7e:	e0cf      	b.n	8001c20 <__aeabi_dsub+0x3c0>
 8001a80:	1b94      	subs	r4, r2, r6
 8001a82:	46a4      	mov	ip, r4
 8001a84:	2e00      	cmp	r6, #0
 8001a86:	d100      	bne.n	8001a8a <__aeabi_dsub+0x22a>
 8001a88:	e15c      	b.n	8001d44 <__aeabi_dsub+0x4e4>
 8001a8a:	4e42      	ldr	r6, [pc, #264]	; (8001b94 <__aeabi_dsub+0x334>)
 8001a8c:	42b2      	cmp	r2, r6
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_dsub+0x232>
 8001a90:	e1ec      	b.n	8001e6c <__aeabi_dsub+0x60c>
 8001a92:	2680      	movs	r6, #128	; 0x80
 8001a94:	0436      	lsls	r6, r6, #16
 8001a96:	4333      	orrs	r3, r6
 8001a98:	4664      	mov	r4, ip
 8001a9a:	2c38      	cmp	r4, #56	; 0x38
 8001a9c:	dd00      	ble.n	8001aa0 <__aeabi_dsub+0x240>
 8001a9e:	e1b3      	b.n	8001e08 <__aeabi_dsub+0x5a8>
 8001aa0:	2c1f      	cmp	r4, #31
 8001aa2:	dd00      	ble.n	8001aa6 <__aeabi_dsub+0x246>
 8001aa4:	e238      	b.n	8001f18 <__aeabi_dsub+0x6b8>
 8001aa6:	2620      	movs	r6, #32
 8001aa8:	1b36      	subs	r6, r6, r4
 8001aaa:	001c      	movs	r4, r3
 8001aac:	40b4      	lsls	r4, r6
 8001aae:	464f      	mov	r7, r9
 8001ab0:	46a0      	mov	r8, r4
 8001ab2:	4664      	mov	r4, ip
 8001ab4:	40e7      	lsrs	r7, r4
 8001ab6:	4644      	mov	r4, r8
 8001ab8:	433c      	orrs	r4, r7
 8001aba:	464f      	mov	r7, r9
 8001abc:	40b7      	lsls	r7, r6
 8001abe:	003e      	movs	r6, r7
 8001ac0:	1e77      	subs	r7, r6, #1
 8001ac2:	41be      	sbcs	r6, r7
 8001ac4:	4334      	orrs	r4, r6
 8001ac6:	4666      	mov	r6, ip
 8001ac8:	40f3      	lsrs	r3, r6
 8001aca:	18c9      	adds	r1, r1, r3
 8001acc:	1824      	adds	r4, r4, r0
 8001ace:	4284      	cmp	r4, r0
 8001ad0:	419b      	sbcs	r3, r3
 8001ad2:	425b      	negs	r3, r3
 8001ad4:	4698      	mov	r8, r3
 8001ad6:	0016      	movs	r6, r2
 8001ad8:	4488      	add	r8, r1
 8001ada:	e04e      	b.n	8001b7a <__aeabi_dsub+0x31a>
 8001adc:	4a30      	ldr	r2, [pc, #192]	; (8001ba0 <__aeabi_dsub+0x340>)
 8001ade:	1c74      	adds	r4, r6, #1
 8001ae0:	4214      	tst	r4, r2
 8001ae2:	d000      	beq.n	8001ae6 <__aeabi_dsub+0x286>
 8001ae4:	e0d6      	b.n	8001c94 <__aeabi_dsub+0x434>
 8001ae6:	464a      	mov	r2, r9
 8001ae8:	431a      	orrs	r2, r3
 8001aea:	2e00      	cmp	r6, #0
 8001aec:	d000      	beq.n	8001af0 <__aeabi_dsub+0x290>
 8001aee:	e15b      	b.n	8001da8 <__aeabi_dsub+0x548>
 8001af0:	2a00      	cmp	r2, #0
 8001af2:	d100      	bne.n	8001af6 <__aeabi_dsub+0x296>
 8001af4:	e1a5      	b.n	8001e42 <__aeabi_dsub+0x5e2>
 8001af6:	000a      	movs	r2, r1
 8001af8:	4302      	orrs	r2, r0
 8001afa:	d000      	beq.n	8001afe <__aeabi_dsub+0x29e>
 8001afc:	e1bb      	b.n	8001e76 <__aeabi_dsub+0x616>
 8001afe:	464a      	mov	r2, r9
 8001b00:	0759      	lsls	r1, r3, #29
 8001b02:	08d2      	lsrs	r2, r2, #3
 8001b04:	430a      	orrs	r2, r1
 8001b06:	08db      	lsrs	r3, r3, #3
 8001b08:	e027      	b.n	8001b5a <__aeabi_dsub+0x2fa>
 8001b0a:	000a      	movs	r2, r1
 8001b0c:	4302      	orrs	r2, r0
 8001b0e:	d100      	bne.n	8001b12 <__aeabi_dsub+0x2b2>
 8001b10:	e174      	b.n	8001dfc <__aeabi_dsub+0x59c>
 8001b12:	0022      	movs	r2, r4
 8001b14:	3a01      	subs	r2, #1
 8001b16:	2c01      	cmp	r4, #1
 8001b18:	d005      	beq.n	8001b26 <__aeabi_dsub+0x2c6>
 8001b1a:	4c1e      	ldr	r4, [pc, #120]	; (8001b94 <__aeabi_dsub+0x334>)
 8001b1c:	45a4      	cmp	ip, r4
 8001b1e:	d100      	bne.n	8001b22 <__aeabi_dsub+0x2c2>
 8001b20:	e094      	b.n	8001c4c <__aeabi_dsub+0x3ec>
 8001b22:	4694      	mov	ip, r2
 8001b24:	e759      	b.n	80019da <__aeabi_dsub+0x17a>
 8001b26:	4448      	add	r0, r9
 8001b28:	4548      	cmp	r0, r9
 8001b2a:	4192      	sbcs	r2, r2
 8001b2c:	185b      	adds	r3, r3, r1
 8001b2e:	4698      	mov	r8, r3
 8001b30:	0004      	movs	r4, r0
 8001b32:	4252      	negs	r2, r2
 8001b34:	4490      	add	r8, r2
 8001b36:	4643      	mov	r3, r8
 8001b38:	2602      	movs	r6, #2
 8001b3a:	021b      	lsls	r3, r3, #8
 8001b3c:	d500      	bpl.n	8001b40 <__aeabi_dsub+0x2e0>
 8001b3e:	e0c4      	b.n	8001cca <__aeabi_dsub+0x46a>
 8001b40:	3e01      	subs	r6, #1
 8001b42:	0763      	lsls	r3, r4, #29
 8001b44:	d000      	beq.n	8001b48 <__aeabi_dsub+0x2e8>
 8001b46:	e711      	b.n	800196c <__aeabi_dsub+0x10c>
 8001b48:	4643      	mov	r3, r8
 8001b4a:	46b4      	mov	ip, r6
 8001b4c:	0759      	lsls	r1, r3, #29
 8001b4e:	08e2      	lsrs	r2, r4, #3
 8001b50:	430a      	orrs	r2, r1
 8001b52:	08db      	lsrs	r3, r3, #3
 8001b54:	490f      	ldr	r1, [pc, #60]	; (8001b94 <__aeabi_dsub+0x334>)
 8001b56:	458c      	cmp	ip, r1
 8001b58:	d040      	beq.n	8001bdc <__aeabi_dsub+0x37c>
 8001b5a:	4661      	mov	r1, ip
 8001b5c:	031b      	lsls	r3, r3, #12
 8001b5e:	0549      	lsls	r1, r1, #21
 8001b60:	0b1b      	lsrs	r3, r3, #12
 8001b62:	0d49      	lsrs	r1, r1, #21
 8001b64:	e720      	b.n	80019a8 <__aeabi_dsub+0x148>
 8001b66:	4301      	orrs	r1, r0
 8001b68:	000c      	movs	r4, r1
 8001b6a:	1e61      	subs	r1, r4, #1
 8001b6c:	418c      	sbcs	r4, r1
 8001b6e:	444c      	add	r4, r9
 8001b70:	454c      	cmp	r4, r9
 8001b72:	4192      	sbcs	r2, r2
 8001b74:	4252      	negs	r2, r2
 8001b76:	4690      	mov	r8, r2
 8001b78:	4498      	add	r8, r3
 8001b7a:	4643      	mov	r3, r8
 8001b7c:	021b      	lsls	r3, r3, #8
 8001b7e:	d5e0      	bpl.n	8001b42 <__aeabi_dsub+0x2e2>
 8001b80:	4b04      	ldr	r3, [pc, #16]	; (8001b94 <__aeabi_dsub+0x334>)
 8001b82:	3601      	adds	r6, #1
 8001b84:	429e      	cmp	r6, r3
 8001b86:	d000      	beq.n	8001b8a <__aeabi_dsub+0x32a>
 8001b88:	e09f      	b.n	8001cca <__aeabi_dsub+0x46a>
 8001b8a:	0031      	movs	r1, r6
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	2200      	movs	r2, #0
 8001b90:	e70a      	b.n	80019a8 <__aeabi_dsub+0x148>
 8001b92:	46c0      	nop			; (mov r8, r8)
 8001b94:	000007ff 	.word	0x000007ff
 8001b98:	ff7fffff 	.word	0xff7fffff
 8001b9c:	fffff801 	.word	0xfffff801
 8001ba0:	000007fe 	.word	0x000007fe
 8001ba4:	2a00      	cmp	r2, #0
 8001ba6:	d100      	bne.n	8001baa <__aeabi_dsub+0x34a>
 8001ba8:	e160      	b.n	8001e6c <__aeabi_dsub+0x60c>
 8001baa:	000a      	movs	r2, r1
 8001bac:	4302      	orrs	r2, r0
 8001bae:	d04d      	beq.n	8001c4c <__aeabi_dsub+0x3ec>
 8001bb0:	464a      	mov	r2, r9
 8001bb2:	075c      	lsls	r4, r3, #29
 8001bb4:	08d2      	lsrs	r2, r2, #3
 8001bb6:	4322      	orrs	r2, r4
 8001bb8:	2480      	movs	r4, #128	; 0x80
 8001bba:	08db      	lsrs	r3, r3, #3
 8001bbc:	0324      	lsls	r4, r4, #12
 8001bbe:	4223      	tst	r3, r4
 8001bc0:	d007      	beq.n	8001bd2 <__aeabi_dsub+0x372>
 8001bc2:	08ce      	lsrs	r6, r1, #3
 8001bc4:	4226      	tst	r6, r4
 8001bc6:	d104      	bne.n	8001bd2 <__aeabi_dsub+0x372>
 8001bc8:	465d      	mov	r5, fp
 8001bca:	0033      	movs	r3, r6
 8001bcc:	08c2      	lsrs	r2, r0, #3
 8001bce:	0749      	lsls	r1, r1, #29
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	0f51      	lsrs	r1, r2, #29
 8001bd4:	00d2      	lsls	r2, r2, #3
 8001bd6:	08d2      	lsrs	r2, r2, #3
 8001bd8:	0749      	lsls	r1, r1, #29
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	0011      	movs	r1, r2
 8001bde:	4319      	orrs	r1, r3
 8001be0:	d100      	bne.n	8001be4 <__aeabi_dsub+0x384>
 8001be2:	e1c8      	b.n	8001f76 <__aeabi_dsub+0x716>
 8001be4:	2180      	movs	r1, #128	; 0x80
 8001be6:	0309      	lsls	r1, r1, #12
 8001be8:	430b      	orrs	r3, r1
 8001bea:	031b      	lsls	r3, r3, #12
 8001bec:	49d5      	ldr	r1, [pc, #852]	; (8001f44 <__aeabi_dsub+0x6e4>)
 8001bee:	0b1b      	lsrs	r3, r3, #12
 8001bf0:	e6da      	b.n	80019a8 <__aeabi_dsub+0x148>
 8001bf2:	49d5      	ldr	r1, [pc, #852]	; (8001f48 <__aeabi_dsub+0x6e8>)
 8001bf4:	1ab6      	subs	r6, r6, r2
 8001bf6:	400b      	ands	r3, r1
 8001bf8:	4698      	mov	r8, r3
 8001bfa:	e6b5      	b.n	8001968 <__aeabi_dsub+0x108>
 8001bfc:	0020      	movs	r0, r4
 8001bfe:	f000 fa4d 	bl	800209c <__clzsi2>
 8001c02:	0002      	movs	r2, r0
 8001c04:	3218      	adds	r2, #24
 8001c06:	2a1f      	cmp	r2, #31
 8001c08:	dc00      	bgt.n	8001c0c <__aeabi_dsub+0x3ac>
 8001c0a:	e68f      	b.n	800192c <__aeabi_dsub+0xcc>
 8001c0c:	0023      	movs	r3, r4
 8001c0e:	3808      	subs	r0, #8
 8001c10:	4083      	lsls	r3, r0
 8001c12:	2400      	movs	r4, #0
 8001c14:	e692      	b.n	800193c <__aeabi_dsub+0xdc>
 8001c16:	4308      	orrs	r0, r1
 8001c18:	0002      	movs	r2, r0
 8001c1a:	1e50      	subs	r0, r2, #1
 8001c1c:	4182      	sbcs	r2, r0
 8001c1e:	e66d      	b.n	80018fc <__aeabi_dsub+0x9c>
 8001c20:	4cca      	ldr	r4, [pc, #808]	; (8001f4c <__aeabi_dsub+0x6ec>)
 8001c22:	1c72      	adds	r2, r6, #1
 8001c24:	4222      	tst	r2, r4
 8001c26:	d000      	beq.n	8001c2a <__aeabi_dsub+0x3ca>
 8001c28:	e0ad      	b.n	8001d86 <__aeabi_dsub+0x526>
 8001c2a:	464a      	mov	r2, r9
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	2e00      	cmp	r6, #0
 8001c30:	d1b8      	bne.n	8001ba4 <__aeabi_dsub+0x344>
 8001c32:	2a00      	cmp	r2, #0
 8001c34:	d100      	bne.n	8001c38 <__aeabi_dsub+0x3d8>
 8001c36:	e158      	b.n	8001eea <__aeabi_dsub+0x68a>
 8001c38:	000a      	movs	r2, r1
 8001c3a:	4302      	orrs	r2, r0
 8001c3c:	d000      	beq.n	8001c40 <__aeabi_dsub+0x3e0>
 8001c3e:	e159      	b.n	8001ef4 <__aeabi_dsub+0x694>
 8001c40:	464a      	mov	r2, r9
 8001c42:	0759      	lsls	r1, r3, #29
 8001c44:	08d2      	lsrs	r2, r2, #3
 8001c46:	430a      	orrs	r2, r1
 8001c48:	08db      	lsrs	r3, r3, #3
 8001c4a:	e786      	b.n	8001b5a <__aeabi_dsub+0x2fa>
 8001c4c:	464a      	mov	r2, r9
 8001c4e:	0759      	lsls	r1, r3, #29
 8001c50:	08d2      	lsrs	r2, r2, #3
 8001c52:	430a      	orrs	r2, r1
 8001c54:	08db      	lsrs	r3, r3, #3
 8001c56:	e7c1      	b.n	8001bdc <__aeabi_dsub+0x37c>
 8001c58:	4dba      	ldr	r5, [pc, #744]	; (8001f44 <__aeabi_dsub+0x6e4>)
 8001c5a:	42aa      	cmp	r2, r5
 8001c5c:	d100      	bne.n	8001c60 <__aeabi_dsub+0x400>
 8001c5e:	e11e      	b.n	8001e9e <__aeabi_dsub+0x63e>
 8001c60:	2580      	movs	r5, #128	; 0x80
 8001c62:	042d      	lsls	r5, r5, #16
 8001c64:	432b      	orrs	r3, r5
 8001c66:	4664      	mov	r4, ip
 8001c68:	2c38      	cmp	r4, #56	; 0x38
 8001c6a:	dc5d      	bgt.n	8001d28 <__aeabi_dsub+0x4c8>
 8001c6c:	2c1f      	cmp	r4, #31
 8001c6e:	dd00      	ble.n	8001c72 <__aeabi_dsub+0x412>
 8001c70:	e0d0      	b.n	8001e14 <__aeabi_dsub+0x5b4>
 8001c72:	2520      	movs	r5, #32
 8001c74:	4667      	mov	r7, ip
 8001c76:	1b2d      	subs	r5, r5, r4
 8001c78:	464e      	mov	r6, r9
 8001c7a:	001c      	movs	r4, r3
 8001c7c:	40fe      	lsrs	r6, r7
 8001c7e:	40ac      	lsls	r4, r5
 8001c80:	4334      	orrs	r4, r6
 8001c82:	464e      	mov	r6, r9
 8001c84:	40ae      	lsls	r6, r5
 8001c86:	0035      	movs	r5, r6
 8001c88:	40fb      	lsrs	r3, r7
 8001c8a:	1e6e      	subs	r6, r5, #1
 8001c8c:	41b5      	sbcs	r5, r6
 8001c8e:	1ac9      	subs	r1, r1, r3
 8001c90:	432c      	orrs	r4, r5
 8001c92:	e04e      	b.n	8001d32 <__aeabi_dsub+0x4d2>
 8001c94:	464a      	mov	r2, r9
 8001c96:	1a14      	subs	r4, r2, r0
 8001c98:	45a1      	cmp	r9, r4
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	4252      	negs	r2, r2
 8001c9e:	4690      	mov	r8, r2
 8001ca0:	1a5f      	subs	r7, r3, r1
 8001ca2:	003a      	movs	r2, r7
 8001ca4:	4647      	mov	r7, r8
 8001ca6:	1bd2      	subs	r2, r2, r7
 8001ca8:	4690      	mov	r8, r2
 8001caa:	0212      	lsls	r2, r2, #8
 8001cac:	d500      	bpl.n	8001cb0 <__aeabi_dsub+0x450>
 8001cae:	e08b      	b.n	8001dc8 <__aeabi_dsub+0x568>
 8001cb0:	4642      	mov	r2, r8
 8001cb2:	4322      	orrs	r2, r4
 8001cb4:	d000      	beq.n	8001cb8 <__aeabi_dsub+0x458>
 8001cb6:	e630      	b.n	800191a <__aeabi_dsub+0xba>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	2500      	movs	r5, #0
 8001cbc:	e74d      	b.n	8001b5a <__aeabi_dsub+0x2fa>
 8001cbe:	464a      	mov	r2, r9
 8001cc0:	0759      	lsls	r1, r3, #29
 8001cc2:	08d2      	lsrs	r2, r2, #3
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	08db      	lsrs	r3, r3, #3
 8001cc8:	e744      	b.n	8001b54 <__aeabi_dsub+0x2f4>
 8001cca:	4642      	mov	r2, r8
 8001ccc:	4b9e      	ldr	r3, [pc, #632]	; (8001f48 <__aeabi_dsub+0x6e8>)
 8001cce:	0861      	lsrs	r1, r4, #1
 8001cd0:	401a      	ands	r2, r3
 8001cd2:	0013      	movs	r3, r2
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	4014      	ands	r4, r2
 8001cd8:	430c      	orrs	r4, r1
 8001cda:	07da      	lsls	r2, r3, #31
 8001cdc:	085b      	lsrs	r3, r3, #1
 8001cde:	4698      	mov	r8, r3
 8001ce0:	4314      	orrs	r4, r2
 8001ce2:	e641      	b.n	8001968 <__aeabi_dsub+0x108>
 8001ce4:	001a      	movs	r2, r3
 8001ce6:	3e1f      	subs	r6, #31
 8001ce8:	40f2      	lsrs	r2, r6
 8001cea:	0016      	movs	r6, r2
 8001cec:	2920      	cmp	r1, #32
 8001cee:	d003      	beq.n	8001cf8 <__aeabi_dsub+0x498>
 8001cf0:	2240      	movs	r2, #64	; 0x40
 8001cf2:	1a51      	subs	r1, r2, r1
 8001cf4:	408b      	lsls	r3, r1
 8001cf6:	431c      	orrs	r4, r3
 8001cf8:	1e62      	subs	r2, r4, #1
 8001cfa:	4194      	sbcs	r4, r2
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	4334      	orrs	r4, r6
 8001d00:	4698      	mov	r8, r3
 8001d02:	2600      	movs	r6, #0
 8001d04:	e71d      	b.n	8001b42 <__aeabi_dsub+0x2e2>
 8001d06:	000c      	movs	r4, r1
 8001d08:	3a20      	subs	r2, #32
 8001d0a:	40d4      	lsrs	r4, r2
 8001d0c:	0022      	movs	r2, r4
 8001d0e:	4664      	mov	r4, ip
 8001d10:	2c20      	cmp	r4, #32
 8001d12:	d004      	beq.n	8001d1e <__aeabi_dsub+0x4be>
 8001d14:	2740      	movs	r7, #64	; 0x40
 8001d16:	1b3f      	subs	r7, r7, r4
 8001d18:	40b9      	lsls	r1, r7
 8001d1a:	4308      	orrs	r0, r1
 8001d1c:	4680      	mov	r8, r0
 8001d1e:	4644      	mov	r4, r8
 8001d20:	1e61      	subs	r1, r4, #1
 8001d22:	418c      	sbcs	r4, r1
 8001d24:	4322      	orrs	r2, r4
 8001d26:	e5e9      	b.n	80018fc <__aeabi_dsub+0x9c>
 8001d28:	464c      	mov	r4, r9
 8001d2a:	4323      	orrs	r3, r4
 8001d2c:	001c      	movs	r4, r3
 8001d2e:	1e63      	subs	r3, r4, #1
 8001d30:	419c      	sbcs	r4, r3
 8001d32:	1b04      	subs	r4, r0, r4
 8001d34:	42a0      	cmp	r0, r4
 8001d36:	419b      	sbcs	r3, r3
 8001d38:	425b      	negs	r3, r3
 8001d3a:	1acb      	subs	r3, r1, r3
 8001d3c:	4698      	mov	r8, r3
 8001d3e:	465d      	mov	r5, fp
 8001d40:	0016      	movs	r6, r2
 8001d42:	e5e2      	b.n	800190a <__aeabi_dsub+0xaa>
 8001d44:	464e      	mov	r6, r9
 8001d46:	431e      	orrs	r6, r3
 8001d48:	d100      	bne.n	8001d4c <__aeabi_dsub+0x4ec>
 8001d4a:	e0ae      	b.n	8001eaa <__aeabi_dsub+0x64a>
 8001d4c:	1e66      	subs	r6, r4, #1
 8001d4e:	2c01      	cmp	r4, #1
 8001d50:	d100      	bne.n	8001d54 <__aeabi_dsub+0x4f4>
 8001d52:	e0fd      	b.n	8001f50 <__aeabi_dsub+0x6f0>
 8001d54:	4f7b      	ldr	r7, [pc, #492]	; (8001f44 <__aeabi_dsub+0x6e4>)
 8001d56:	42bc      	cmp	r4, r7
 8001d58:	d100      	bne.n	8001d5c <__aeabi_dsub+0x4fc>
 8001d5a:	e107      	b.n	8001f6c <__aeabi_dsub+0x70c>
 8001d5c:	46b4      	mov	ip, r6
 8001d5e:	e69b      	b.n	8001a98 <__aeabi_dsub+0x238>
 8001d60:	4664      	mov	r4, ip
 8001d62:	2220      	movs	r2, #32
 8001d64:	1b12      	subs	r2, r2, r4
 8001d66:	000c      	movs	r4, r1
 8001d68:	4094      	lsls	r4, r2
 8001d6a:	0007      	movs	r7, r0
 8001d6c:	4090      	lsls	r0, r2
 8001d6e:	46a0      	mov	r8, r4
 8001d70:	4664      	mov	r4, ip
 8001d72:	1e42      	subs	r2, r0, #1
 8001d74:	4190      	sbcs	r0, r2
 8001d76:	4662      	mov	r2, ip
 8001d78:	40e7      	lsrs	r7, r4
 8001d7a:	4644      	mov	r4, r8
 8001d7c:	40d1      	lsrs	r1, r2
 8001d7e:	433c      	orrs	r4, r7
 8001d80:	4304      	orrs	r4, r0
 8001d82:	185b      	adds	r3, r3, r1
 8001d84:	e6f3      	b.n	8001b6e <__aeabi_dsub+0x30e>
 8001d86:	4c6f      	ldr	r4, [pc, #444]	; (8001f44 <__aeabi_dsub+0x6e4>)
 8001d88:	42a2      	cmp	r2, r4
 8001d8a:	d100      	bne.n	8001d8e <__aeabi_dsub+0x52e>
 8001d8c:	e0d5      	b.n	8001f3a <__aeabi_dsub+0x6da>
 8001d8e:	4448      	add	r0, r9
 8001d90:	185b      	adds	r3, r3, r1
 8001d92:	4548      	cmp	r0, r9
 8001d94:	4189      	sbcs	r1, r1
 8001d96:	4249      	negs	r1, r1
 8001d98:	185b      	adds	r3, r3, r1
 8001d9a:	07dc      	lsls	r4, r3, #31
 8001d9c:	0840      	lsrs	r0, r0, #1
 8001d9e:	085b      	lsrs	r3, r3, #1
 8001da0:	4698      	mov	r8, r3
 8001da2:	0016      	movs	r6, r2
 8001da4:	4304      	orrs	r4, r0
 8001da6:	e6cc      	b.n	8001b42 <__aeabi_dsub+0x2e2>
 8001da8:	2a00      	cmp	r2, #0
 8001daa:	d000      	beq.n	8001dae <__aeabi_dsub+0x54e>
 8001dac:	e082      	b.n	8001eb4 <__aeabi_dsub+0x654>
 8001dae:	000a      	movs	r2, r1
 8001db0:	4302      	orrs	r2, r0
 8001db2:	d140      	bne.n	8001e36 <__aeabi_dsub+0x5d6>
 8001db4:	2380      	movs	r3, #128	; 0x80
 8001db6:	2500      	movs	r5, #0
 8001db8:	031b      	lsls	r3, r3, #12
 8001dba:	e713      	b.n	8001be4 <__aeabi_dsub+0x384>
 8001dbc:	074b      	lsls	r3, r1, #29
 8001dbe:	08c2      	lsrs	r2, r0, #3
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	465d      	mov	r5, fp
 8001dc4:	08cb      	lsrs	r3, r1, #3
 8001dc6:	e6c5      	b.n	8001b54 <__aeabi_dsub+0x2f4>
 8001dc8:	464a      	mov	r2, r9
 8001dca:	1a84      	subs	r4, r0, r2
 8001dcc:	42a0      	cmp	r0, r4
 8001dce:	4192      	sbcs	r2, r2
 8001dd0:	1acb      	subs	r3, r1, r3
 8001dd2:	4252      	negs	r2, r2
 8001dd4:	1a9b      	subs	r3, r3, r2
 8001dd6:	4698      	mov	r8, r3
 8001dd8:	465d      	mov	r5, fp
 8001dda:	e59e      	b.n	800191a <__aeabi_dsub+0xba>
 8001ddc:	464a      	mov	r2, r9
 8001dde:	0759      	lsls	r1, r3, #29
 8001de0:	08d2      	lsrs	r2, r2, #3
 8001de2:	430a      	orrs	r2, r1
 8001de4:	08db      	lsrs	r3, r3, #3
 8001de6:	e6f9      	b.n	8001bdc <__aeabi_dsub+0x37c>
 8001de8:	464a      	mov	r2, r9
 8001dea:	1a14      	subs	r4, r2, r0
 8001dec:	45a1      	cmp	r9, r4
 8001dee:	4192      	sbcs	r2, r2
 8001df0:	1a5b      	subs	r3, r3, r1
 8001df2:	4252      	negs	r2, r2
 8001df4:	1a9b      	subs	r3, r3, r2
 8001df6:	4698      	mov	r8, r3
 8001df8:	2601      	movs	r6, #1
 8001dfa:	e586      	b.n	800190a <__aeabi_dsub+0xaa>
 8001dfc:	464a      	mov	r2, r9
 8001dfe:	0759      	lsls	r1, r3, #29
 8001e00:	08d2      	lsrs	r2, r2, #3
 8001e02:	430a      	orrs	r2, r1
 8001e04:	08db      	lsrs	r3, r3, #3
 8001e06:	e6a5      	b.n	8001b54 <__aeabi_dsub+0x2f4>
 8001e08:	464c      	mov	r4, r9
 8001e0a:	4323      	orrs	r3, r4
 8001e0c:	001c      	movs	r4, r3
 8001e0e:	1e63      	subs	r3, r4, #1
 8001e10:	419c      	sbcs	r4, r3
 8001e12:	e65b      	b.n	8001acc <__aeabi_dsub+0x26c>
 8001e14:	4665      	mov	r5, ip
 8001e16:	001e      	movs	r6, r3
 8001e18:	3d20      	subs	r5, #32
 8001e1a:	40ee      	lsrs	r6, r5
 8001e1c:	2c20      	cmp	r4, #32
 8001e1e:	d005      	beq.n	8001e2c <__aeabi_dsub+0x5cc>
 8001e20:	2540      	movs	r5, #64	; 0x40
 8001e22:	1b2d      	subs	r5, r5, r4
 8001e24:	40ab      	lsls	r3, r5
 8001e26:	464c      	mov	r4, r9
 8001e28:	431c      	orrs	r4, r3
 8001e2a:	46a2      	mov	sl, r4
 8001e2c:	4654      	mov	r4, sl
 8001e2e:	1e63      	subs	r3, r4, #1
 8001e30:	419c      	sbcs	r4, r3
 8001e32:	4334      	orrs	r4, r6
 8001e34:	e77d      	b.n	8001d32 <__aeabi_dsub+0x4d2>
 8001e36:	074b      	lsls	r3, r1, #29
 8001e38:	08c2      	lsrs	r2, r0, #3
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	465d      	mov	r5, fp
 8001e3e:	08cb      	lsrs	r3, r1, #3
 8001e40:	e6cc      	b.n	8001bdc <__aeabi_dsub+0x37c>
 8001e42:	000a      	movs	r2, r1
 8001e44:	4302      	orrs	r2, r0
 8001e46:	d100      	bne.n	8001e4a <__aeabi_dsub+0x5ea>
 8001e48:	e736      	b.n	8001cb8 <__aeabi_dsub+0x458>
 8001e4a:	074b      	lsls	r3, r1, #29
 8001e4c:	08c2      	lsrs	r2, r0, #3
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	465d      	mov	r5, fp
 8001e52:	08cb      	lsrs	r3, r1, #3
 8001e54:	e681      	b.n	8001b5a <__aeabi_dsub+0x2fa>
 8001e56:	464a      	mov	r2, r9
 8001e58:	1a84      	subs	r4, r0, r2
 8001e5a:	42a0      	cmp	r0, r4
 8001e5c:	4192      	sbcs	r2, r2
 8001e5e:	1acb      	subs	r3, r1, r3
 8001e60:	4252      	negs	r2, r2
 8001e62:	1a9b      	subs	r3, r3, r2
 8001e64:	4698      	mov	r8, r3
 8001e66:	465d      	mov	r5, fp
 8001e68:	2601      	movs	r6, #1
 8001e6a:	e54e      	b.n	800190a <__aeabi_dsub+0xaa>
 8001e6c:	074b      	lsls	r3, r1, #29
 8001e6e:	08c2      	lsrs	r2, r0, #3
 8001e70:	431a      	orrs	r2, r3
 8001e72:	08cb      	lsrs	r3, r1, #3
 8001e74:	e6b2      	b.n	8001bdc <__aeabi_dsub+0x37c>
 8001e76:	464a      	mov	r2, r9
 8001e78:	1a14      	subs	r4, r2, r0
 8001e7a:	45a1      	cmp	r9, r4
 8001e7c:	4192      	sbcs	r2, r2
 8001e7e:	1a5f      	subs	r7, r3, r1
 8001e80:	4252      	negs	r2, r2
 8001e82:	1aba      	subs	r2, r7, r2
 8001e84:	4690      	mov	r8, r2
 8001e86:	0212      	lsls	r2, r2, #8
 8001e88:	d56b      	bpl.n	8001f62 <__aeabi_dsub+0x702>
 8001e8a:	464a      	mov	r2, r9
 8001e8c:	1a84      	subs	r4, r0, r2
 8001e8e:	42a0      	cmp	r0, r4
 8001e90:	4192      	sbcs	r2, r2
 8001e92:	1acb      	subs	r3, r1, r3
 8001e94:	4252      	negs	r2, r2
 8001e96:	1a9b      	subs	r3, r3, r2
 8001e98:	4698      	mov	r8, r3
 8001e9a:	465d      	mov	r5, fp
 8001e9c:	e564      	b.n	8001968 <__aeabi_dsub+0x108>
 8001e9e:	074b      	lsls	r3, r1, #29
 8001ea0:	08c2      	lsrs	r2, r0, #3
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	465d      	mov	r5, fp
 8001ea6:	08cb      	lsrs	r3, r1, #3
 8001ea8:	e698      	b.n	8001bdc <__aeabi_dsub+0x37c>
 8001eaa:	074b      	lsls	r3, r1, #29
 8001eac:	08c2      	lsrs	r2, r0, #3
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	08cb      	lsrs	r3, r1, #3
 8001eb2:	e64f      	b.n	8001b54 <__aeabi_dsub+0x2f4>
 8001eb4:	000a      	movs	r2, r1
 8001eb6:	4302      	orrs	r2, r0
 8001eb8:	d090      	beq.n	8001ddc <__aeabi_dsub+0x57c>
 8001eba:	464a      	mov	r2, r9
 8001ebc:	075c      	lsls	r4, r3, #29
 8001ebe:	08d2      	lsrs	r2, r2, #3
 8001ec0:	4314      	orrs	r4, r2
 8001ec2:	2280      	movs	r2, #128	; 0x80
 8001ec4:	08db      	lsrs	r3, r3, #3
 8001ec6:	0312      	lsls	r2, r2, #12
 8001ec8:	4213      	tst	r3, r2
 8001eca:	d008      	beq.n	8001ede <__aeabi_dsub+0x67e>
 8001ecc:	08ce      	lsrs	r6, r1, #3
 8001ece:	4216      	tst	r6, r2
 8001ed0:	d105      	bne.n	8001ede <__aeabi_dsub+0x67e>
 8001ed2:	08c0      	lsrs	r0, r0, #3
 8001ed4:	0749      	lsls	r1, r1, #29
 8001ed6:	4308      	orrs	r0, r1
 8001ed8:	0004      	movs	r4, r0
 8001eda:	465d      	mov	r5, fp
 8001edc:	0033      	movs	r3, r6
 8001ede:	0f61      	lsrs	r1, r4, #29
 8001ee0:	00e2      	lsls	r2, r4, #3
 8001ee2:	0749      	lsls	r1, r1, #29
 8001ee4:	08d2      	lsrs	r2, r2, #3
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	e678      	b.n	8001bdc <__aeabi_dsub+0x37c>
 8001eea:	074b      	lsls	r3, r1, #29
 8001eec:	08c2      	lsrs	r2, r0, #3
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	08cb      	lsrs	r3, r1, #3
 8001ef2:	e632      	b.n	8001b5a <__aeabi_dsub+0x2fa>
 8001ef4:	4448      	add	r0, r9
 8001ef6:	185b      	adds	r3, r3, r1
 8001ef8:	4548      	cmp	r0, r9
 8001efa:	4192      	sbcs	r2, r2
 8001efc:	4698      	mov	r8, r3
 8001efe:	4252      	negs	r2, r2
 8001f00:	4490      	add	r8, r2
 8001f02:	4643      	mov	r3, r8
 8001f04:	0004      	movs	r4, r0
 8001f06:	021b      	lsls	r3, r3, #8
 8001f08:	d400      	bmi.n	8001f0c <__aeabi_dsub+0x6ac>
 8001f0a:	e61a      	b.n	8001b42 <__aeabi_dsub+0x2e2>
 8001f0c:	4642      	mov	r2, r8
 8001f0e:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <__aeabi_dsub+0x6e8>)
 8001f10:	2601      	movs	r6, #1
 8001f12:	401a      	ands	r2, r3
 8001f14:	4690      	mov	r8, r2
 8001f16:	e614      	b.n	8001b42 <__aeabi_dsub+0x2e2>
 8001f18:	4666      	mov	r6, ip
 8001f1a:	001f      	movs	r7, r3
 8001f1c:	3e20      	subs	r6, #32
 8001f1e:	40f7      	lsrs	r7, r6
 8001f20:	2c20      	cmp	r4, #32
 8001f22:	d005      	beq.n	8001f30 <__aeabi_dsub+0x6d0>
 8001f24:	2640      	movs	r6, #64	; 0x40
 8001f26:	1b36      	subs	r6, r6, r4
 8001f28:	40b3      	lsls	r3, r6
 8001f2a:	464c      	mov	r4, r9
 8001f2c:	431c      	orrs	r4, r3
 8001f2e:	46a2      	mov	sl, r4
 8001f30:	4654      	mov	r4, sl
 8001f32:	1e63      	subs	r3, r4, #1
 8001f34:	419c      	sbcs	r4, r3
 8001f36:	433c      	orrs	r4, r7
 8001f38:	e5c8      	b.n	8001acc <__aeabi_dsub+0x26c>
 8001f3a:	0011      	movs	r1, r2
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	2200      	movs	r2, #0
 8001f40:	e532      	b.n	80019a8 <__aeabi_dsub+0x148>
 8001f42:	46c0      	nop			; (mov r8, r8)
 8001f44:	000007ff 	.word	0x000007ff
 8001f48:	ff7fffff 	.word	0xff7fffff
 8001f4c:	000007fe 	.word	0x000007fe
 8001f50:	464a      	mov	r2, r9
 8001f52:	1814      	adds	r4, r2, r0
 8001f54:	4284      	cmp	r4, r0
 8001f56:	4192      	sbcs	r2, r2
 8001f58:	185b      	adds	r3, r3, r1
 8001f5a:	4698      	mov	r8, r3
 8001f5c:	4252      	negs	r2, r2
 8001f5e:	4490      	add	r8, r2
 8001f60:	e5e9      	b.n	8001b36 <__aeabi_dsub+0x2d6>
 8001f62:	4642      	mov	r2, r8
 8001f64:	4322      	orrs	r2, r4
 8001f66:	d100      	bne.n	8001f6a <__aeabi_dsub+0x70a>
 8001f68:	e6a6      	b.n	8001cb8 <__aeabi_dsub+0x458>
 8001f6a:	e5ea      	b.n	8001b42 <__aeabi_dsub+0x2e2>
 8001f6c:	074b      	lsls	r3, r1, #29
 8001f6e:	08c2      	lsrs	r2, r0, #3
 8001f70:	431a      	orrs	r2, r3
 8001f72:	08cb      	lsrs	r3, r1, #3
 8001f74:	e632      	b.n	8001bdc <__aeabi_dsub+0x37c>
 8001f76:	2200      	movs	r2, #0
 8001f78:	4901      	ldr	r1, [pc, #4]	; (8001f80 <__aeabi_dsub+0x720>)
 8001f7a:	0013      	movs	r3, r2
 8001f7c:	e514      	b.n	80019a8 <__aeabi_dsub+0x148>
 8001f7e:	46c0      	nop			; (mov r8, r8)
 8001f80:	000007ff 	.word	0x000007ff

08001f84 <__aeabi_d2iz>:
 8001f84:	000a      	movs	r2, r1
 8001f86:	b530      	push	{r4, r5, lr}
 8001f88:	4c13      	ldr	r4, [pc, #76]	; (8001fd8 <__aeabi_d2iz+0x54>)
 8001f8a:	0053      	lsls	r3, r2, #1
 8001f8c:	0309      	lsls	r1, r1, #12
 8001f8e:	0005      	movs	r5, r0
 8001f90:	0b09      	lsrs	r1, r1, #12
 8001f92:	2000      	movs	r0, #0
 8001f94:	0d5b      	lsrs	r3, r3, #21
 8001f96:	0fd2      	lsrs	r2, r2, #31
 8001f98:	42a3      	cmp	r3, r4
 8001f9a:	dd04      	ble.n	8001fa6 <__aeabi_d2iz+0x22>
 8001f9c:	480f      	ldr	r0, [pc, #60]	; (8001fdc <__aeabi_d2iz+0x58>)
 8001f9e:	4283      	cmp	r3, r0
 8001fa0:	dd02      	ble.n	8001fa8 <__aeabi_d2iz+0x24>
 8001fa2:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <__aeabi_d2iz+0x5c>)
 8001fa4:	18d0      	adds	r0, r2, r3
 8001fa6:	bd30      	pop	{r4, r5, pc}
 8001fa8:	2080      	movs	r0, #128	; 0x80
 8001faa:	0340      	lsls	r0, r0, #13
 8001fac:	4301      	orrs	r1, r0
 8001fae:	480d      	ldr	r0, [pc, #52]	; (8001fe4 <__aeabi_d2iz+0x60>)
 8001fb0:	1ac0      	subs	r0, r0, r3
 8001fb2:	281f      	cmp	r0, #31
 8001fb4:	dd08      	ble.n	8001fc8 <__aeabi_d2iz+0x44>
 8001fb6:	480c      	ldr	r0, [pc, #48]	; (8001fe8 <__aeabi_d2iz+0x64>)
 8001fb8:	1ac3      	subs	r3, r0, r3
 8001fba:	40d9      	lsrs	r1, r3
 8001fbc:	000b      	movs	r3, r1
 8001fbe:	4258      	negs	r0, r3
 8001fc0:	2a00      	cmp	r2, #0
 8001fc2:	d1f0      	bne.n	8001fa6 <__aeabi_d2iz+0x22>
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	e7ee      	b.n	8001fa6 <__aeabi_d2iz+0x22>
 8001fc8:	4c08      	ldr	r4, [pc, #32]	; (8001fec <__aeabi_d2iz+0x68>)
 8001fca:	40c5      	lsrs	r5, r0
 8001fcc:	46a4      	mov	ip, r4
 8001fce:	4463      	add	r3, ip
 8001fd0:	4099      	lsls	r1, r3
 8001fd2:	000b      	movs	r3, r1
 8001fd4:	432b      	orrs	r3, r5
 8001fd6:	e7f2      	b.n	8001fbe <__aeabi_d2iz+0x3a>
 8001fd8:	000003fe 	.word	0x000003fe
 8001fdc:	0000041d 	.word	0x0000041d
 8001fe0:	7fffffff 	.word	0x7fffffff
 8001fe4:	00000433 	.word	0x00000433
 8001fe8:	00000413 	.word	0x00000413
 8001fec:	fffffbed 	.word	0xfffffbed

08001ff0 <__aeabi_i2d>:
 8001ff0:	b570      	push	{r4, r5, r6, lr}
 8001ff2:	2800      	cmp	r0, #0
 8001ff4:	d016      	beq.n	8002024 <__aeabi_i2d+0x34>
 8001ff6:	17c3      	asrs	r3, r0, #31
 8001ff8:	18c5      	adds	r5, r0, r3
 8001ffa:	405d      	eors	r5, r3
 8001ffc:	0fc4      	lsrs	r4, r0, #31
 8001ffe:	0028      	movs	r0, r5
 8002000:	f000 f84c 	bl	800209c <__clzsi2>
 8002004:	4a11      	ldr	r2, [pc, #68]	; (800204c <__aeabi_i2d+0x5c>)
 8002006:	1a12      	subs	r2, r2, r0
 8002008:	280a      	cmp	r0, #10
 800200a:	dc16      	bgt.n	800203a <__aeabi_i2d+0x4a>
 800200c:	0003      	movs	r3, r0
 800200e:	002e      	movs	r6, r5
 8002010:	3315      	adds	r3, #21
 8002012:	409e      	lsls	r6, r3
 8002014:	230b      	movs	r3, #11
 8002016:	1a18      	subs	r0, r3, r0
 8002018:	40c5      	lsrs	r5, r0
 800201a:	0553      	lsls	r3, r2, #21
 800201c:	032d      	lsls	r5, r5, #12
 800201e:	0b2d      	lsrs	r5, r5, #12
 8002020:	0d5b      	lsrs	r3, r3, #21
 8002022:	e003      	b.n	800202c <__aeabi_i2d+0x3c>
 8002024:	2400      	movs	r4, #0
 8002026:	2300      	movs	r3, #0
 8002028:	2500      	movs	r5, #0
 800202a:	2600      	movs	r6, #0
 800202c:	051b      	lsls	r3, r3, #20
 800202e:	432b      	orrs	r3, r5
 8002030:	07e4      	lsls	r4, r4, #31
 8002032:	4323      	orrs	r3, r4
 8002034:	0030      	movs	r0, r6
 8002036:	0019      	movs	r1, r3
 8002038:	bd70      	pop	{r4, r5, r6, pc}
 800203a:	380b      	subs	r0, #11
 800203c:	4085      	lsls	r5, r0
 800203e:	0553      	lsls	r3, r2, #21
 8002040:	032d      	lsls	r5, r5, #12
 8002042:	2600      	movs	r6, #0
 8002044:	0b2d      	lsrs	r5, r5, #12
 8002046:	0d5b      	lsrs	r3, r3, #21
 8002048:	e7f0      	b.n	800202c <__aeabi_i2d+0x3c>
 800204a:	46c0      	nop			; (mov r8, r8)
 800204c:	0000041e 	.word	0x0000041e

08002050 <__aeabi_ui2d>:
 8002050:	b510      	push	{r4, lr}
 8002052:	1e04      	subs	r4, r0, #0
 8002054:	d010      	beq.n	8002078 <__aeabi_ui2d+0x28>
 8002056:	f000 f821 	bl	800209c <__clzsi2>
 800205a:	4b0f      	ldr	r3, [pc, #60]	; (8002098 <__aeabi_ui2d+0x48>)
 800205c:	1a1b      	subs	r3, r3, r0
 800205e:	280a      	cmp	r0, #10
 8002060:	dc11      	bgt.n	8002086 <__aeabi_ui2d+0x36>
 8002062:	220b      	movs	r2, #11
 8002064:	0021      	movs	r1, r4
 8002066:	1a12      	subs	r2, r2, r0
 8002068:	40d1      	lsrs	r1, r2
 800206a:	3015      	adds	r0, #21
 800206c:	030a      	lsls	r2, r1, #12
 800206e:	055b      	lsls	r3, r3, #21
 8002070:	4084      	lsls	r4, r0
 8002072:	0b12      	lsrs	r2, r2, #12
 8002074:	0d5b      	lsrs	r3, r3, #21
 8002076:	e001      	b.n	800207c <__aeabi_ui2d+0x2c>
 8002078:	2300      	movs	r3, #0
 800207a:	2200      	movs	r2, #0
 800207c:	051b      	lsls	r3, r3, #20
 800207e:	4313      	orrs	r3, r2
 8002080:	0020      	movs	r0, r4
 8002082:	0019      	movs	r1, r3
 8002084:	bd10      	pop	{r4, pc}
 8002086:	0022      	movs	r2, r4
 8002088:	380b      	subs	r0, #11
 800208a:	4082      	lsls	r2, r0
 800208c:	055b      	lsls	r3, r3, #21
 800208e:	0312      	lsls	r2, r2, #12
 8002090:	2400      	movs	r4, #0
 8002092:	0b12      	lsrs	r2, r2, #12
 8002094:	0d5b      	lsrs	r3, r3, #21
 8002096:	e7f1      	b.n	800207c <__aeabi_ui2d+0x2c>
 8002098:	0000041e 	.word	0x0000041e

0800209c <__clzsi2>:
 800209c:	211c      	movs	r1, #28
 800209e:	2301      	movs	r3, #1
 80020a0:	041b      	lsls	r3, r3, #16
 80020a2:	4298      	cmp	r0, r3
 80020a4:	d301      	bcc.n	80020aa <__clzsi2+0xe>
 80020a6:	0c00      	lsrs	r0, r0, #16
 80020a8:	3910      	subs	r1, #16
 80020aa:	0a1b      	lsrs	r3, r3, #8
 80020ac:	4298      	cmp	r0, r3
 80020ae:	d301      	bcc.n	80020b4 <__clzsi2+0x18>
 80020b0:	0a00      	lsrs	r0, r0, #8
 80020b2:	3908      	subs	r1, #8
 80020b4:	091b      	lsrs	r3, r3, #4
 80020b6:	4298      	cmp	r0, r3
 80020b8:	d301      	bcc.n	80020be <__clzsi2+0x22>
 80020ba:	0900      	lsrs	r0, r0, #4
 80020bc:	3904      	subs	r1, #4
 80020be:	a202      	add	r2, pc, #8	; (adr r2, 80020c8 <__clzsi2+0x2c>)
 80020c0:	5c10      	ldrb	r0, [r2, r0]
 80020c2:	1840      	adds	r0, r0, r1
 80020c4:	4770      	bx	lr
 80020c6:	46c0      	nop			; (mov r8, r8)
 80020c8:	02020304 	.word	0x02020304
 80020cc:	01010101 	.word	0x01010101
	...

080020d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	0002      	movs	r2, r0
 80020e0:	1dfb      	adds	r3, r7, #7
 80020e2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80020e4:	1dfb      	adds	r3, r7, #7
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b7f      	cmp	r3, #127	; 0x7f
 80020ea:	d809      	bhi.n	8002100 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ec:	1dfb      	adds	r3, r7, #7
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	001a      	movs	r2, r3
 80020f2:	231f      	movs	r3, #31
 80020f4:	401a      	ands	r2, r3
 80020f6:	4b04      	ldr	r3, [pc, #16]	; (8002108 <__NVIC_EnableIRQ+0x30>)
 80020f8:	2101      	movs	r1, #1
 80020fa:	4091      	lsls	r1, r2
 80020fc:	000a      	movs	r2, r1
 80020fe:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002100:	46c0      	nop			; (mov r8, r8)
 8002102:	46bd      	mov	sp, r7
 8002104:	b002      	add	sp, #8
 8002106:	bd80      	pop	{r7, pc}
 8002108:	e000e100 	.word	0xe000e100

0800210c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800210c:	b590      	push	{r4, r7, lr}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	0002      	movs	r2, r0
 8002114:	6039      	str	r1, [r7, #0]
 8002116:	1dfb      	adds	r3, r7, #7
 8002118:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800211a:	1dfb      	adds	r3, r7, #7
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	2b7f      	cmp	r3, #127	; 0x7f
 8002120:	d828      	bhi.n	8002174 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002122:	4a2f      	ldr	r2, [pc, #188]	; (80021e0 <__NVIC_SetPriority+0xd4>)
 8002124:	1dfb      	adds	r3, r7, #7
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	b25b      	sxtb	r3, r3
 800212a:	089b      	lsrs	r3, r3, #2
 800212c:	33c0      	adds	r3, #192	; 0xc0
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	589b      	ldr	r3, [r3, r2]
 8002132:	1dfa      	adds	r2, r7, #7
 8002134:	7812      	ldrb	r2, [r2, #0]
 8002136:	0011      	movs	r1, r2
 8002138:	2203      	movs	r2, #3
 800213a:	400a      	ands	r2, r1
 800213c:	00d2      	lsls	r2, r2, #3
 800213e:	21ff      	movs	r1, #255	; 0xff
 8002140:	4091      	lsls	r1, r2
 8002142:	000a      	movs	r2, r1
 8002144:	43d2      	mvns	r2, r2
 8002146:	401a      	ands	r2, r3
 8002148:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	019b      	lsls	r3, r3, #6
 800214e:	22ff      	movs	r2, #255	; 0xff
 8002150:	401a      	ands	r2, r3
 8002152:	1dfb      	adds	r3, r7, #7
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	0018      	movs	r0, r3
 8002158:	2303      	movs	r3, #3
 800215a:	4003      	ands	r3, r0
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002160:	481f      	ldr	r0, [pc, #124]	; (80021e0 <__NVIC_SetPriority+0xd4>)
 8002162:	1dfb      	adds	r3, r7, #7
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	b25b      	sxtb	r3, r3
 8002168:	089b      	lsrs	r3, r3, #2
 800216a:	430a      	orrs	r2, r1
 800216c:	33c0      	adds	r3, #192	; 0xc0
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002172:	e031      	b.n	80021d8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002174:	4a1b      	ldr	r2, [pc, #108]	; (80021e4 <__NVIC_SetPriority+0xd8>)
 8002176:	1dfb      	adds	r3, r7, #7
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	0019      	movs	r1, r3
 800217c:	230f      	movs	r3, #15
 800217e:	400b      	ands	r3, r1
 8002180:	3b08      	subs	r3, #8
 8002182:	089b      	lsrs	r3, r3, #2
 8002184:	3306      	adds	r3, #6
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	18d3      	adds	r3, r2, r3
 800218a:	3304      	adds	r3, #4
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	1dfa      	adds	r2, r7, #7
 8002190:	7812      	ldrb	r2, [r2, #0]
 8002192:	0011      	movs	r1, r2
 8002194:	2203      	movs	r2, #3
 8002196:	400a      	ands	r2, r1
 8002198:	00d2      	lsls	r2, r2, #3
 800219a:	21ff      	movs	r1, #255	; 0xff
 800219c:	4091      	lsls	r1, r2
 800219e:	000a      	movs	r2, r1
 80021a0:	43d2      	mvns	r2, r2
 80021a2:	401a      	ands	r2, r3
 80021a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	019b      	lsls	r3, r3, #6
 80021aa:	22ff      	movs	r2, #255	; 0xff
 80021ac:	401a      	ands	r2, r3
 80021ae:	1dfb      	adds	r3, r7, #7
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	0018      	movs	r0, r3
 80021b4:	2303      	movs	r3, #3
 80021b6:	4003      	ands	r3, r0
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021bc:	4809      	ldr	r0, [pc, #36]	; (80021e4 <__NVIC_SetPriority+0xd8>)
 80021be:	1dfb      	adds	r3, r7, #7
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	001c      	movs	r4, r3
 80021c4:	230f      	movs	r3, #15
 80021c6:	4023      	ands	r3, r4
 80021c8:	3b08      	subs	r3, #8
 80021ca:	089b      	lsrs	r3, r3, #2
 80021cc:	430a      	orrs	r2, r1
 80021ce:	3306      	adds	r3, #6
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	18c3      	adds	r3, r0, r3
 80021d4:	3304      	adds	r3, #4
 80021d6:	601a      	str	r2, [r3, #0]
}
 80021d8:	46c0      	nop			; (mov r8, r8)
 80021da:	46bd      	mov	sp, r7
 80021dc:	b003      	add	sp, #12
 80021de:	bd90      	pop	{r4, r7, pc}
 80021e0:	e000e100 	.word	0xe000e100
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2201      	movs	r2, #1
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	601a      	str	r2, [r3, #0]
}
 80021fc:	46c0      	nop			; (mov r8, r8)
 80021fe:	46bd      	mov	sp, r7
 8002200:	b002      	add	sp, #8
 8002202:	bd80      	pop	{r7, pc}

08002204 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a03      	ldr	r2, [pc, #12]	; (8002220 <LL_USART_DisableFIFO+0x1c>)
 8002212:	401a      	ands	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	601a      	str	r2, [r3, #0]
}
 8002218:	46c0      	nop			; (mov r8, r8)
 800221a:	46bd      	mov	sp, r7
 800221c:	b002      	add	sp, #8
 800221e:	bd80      	pop	{r7, pc}
 8002220:	dfffffff 	.word	0xdfffffff

08002224 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	08da      	lsrs	r2, r3, #3
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	075b      	lsls	r3, r3, #29
 800223a:	431a      	orrs	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	609a      	str	r2, [r3, #8]
}
 8002240:	46c0      	nop			; (mov r8, r8)
 8002242:	46bd      	mov	sp, r7
 8002244:	b002      	add	sp, #8
 8002246:	bd80      	pop	{r7, pc}

08002248 <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	4a05      	ldr	r2, [pc, #20]	; (800226c <LL_USART_SetRXFIFOThreshold+0x24>)
 8002258:	401a      	ands	r2, r3
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	065b      	lsls	r3, r3, #25
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	609a      	str	r2, [r3, #8]
}
 8002264:	46c0      	nop			; (mov r8, r8)
 8002266:	46bd      	mov	sp, r7
 8002268:	b002      	add	sp, #8
 800226a:	bd80      	pop	{r7, pc}
 800226c:	f1ffffff 	.word	0xf1ffffff

08002270 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	4a07      	ldr	r2, [pc, #28]	; (800229c <LL_USART_ConfigAsyncMode+0x2c>)
 800227e:	401a      	ands	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	222a      	movs	r2, #42	; 0x2a
 800228a:	4393      	bics	r3, r2
 800228c:	001a      	movs	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	609a      	str	r2, [r3, #8]
}
 8002292:	46c0      	nop			; (mov r8, r8)
 8002294:	46bd      	mov	sp, r7
 8002296:	b002      	add	sp, #8
 8002298:	bd80      	pop	{r7, pc}
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	ffffb7ff 	.word	0xffffb7ff

080022a0 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	69da      	ldr	r2, [r3, #28]
 80022ac:	2380      	movs	r3, #128	; 0x80
 80022ae:	039b      	lsls	r3, r3, #14
 80022b0:	401a      	ands	r2, r3
 80022b2:	2380      	movs	r3, #128	; 0x80
 80022b4:	039b      	lsls	r3, r3, #14
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d101      	bne.n	80022be <LL_USART_IsActiveFlag_TEACK+0x1e>
 80022ba:	2301      	movs	r3, #1
 80022bc:	e000      	b.n	80022c0 <LL_USART_IsActiveFlag_TEACK+0x20>
 80022be:	2300      	movs	r3, #0
}
 80022c0:	0018      	movs	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	b002      	add	sp, #8
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	69da      	ldr	r2, [r3, #28]
 80022d4:	2380      	movs	r3, #128	; 0x80
 80022d6:	03db      	lsls	r3, r3, #15
 80022d8:	401a      	ands	r2, r3
 80022da:	2380      	movs	r3, #128	; 0x80
 80022dc:	03db      	lsls	r3, r3, #15
 80022de:	429a      	cmp	r2, r3
 80022e0:	d101      	bne.n	80022e6 <LL_USART_IsActiveFlag_REACK+0x1e>
 80022e2:	2301      	movs	r3, #1
 80022e4:	e000      	b.n	80022e8 <LL_USART_IsActiveFlag_REACK+0x20>
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	0018      	movs	r0, r3
 80022ea:	46bd      	mov	sp, r7
 80022ec:	b002      	add	sp, #8
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2220      	movs	r2, #32
 80022fe:	431a      	orrs	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	601a      	str	r2, [r3, #0]
}
 8002304:	46c0      	nop			; (mov r8, r8)
 8002306:	46bd      	mov	sp, r7
 8002308:	b002      	add	sp, #8
 800230a:	bd80      	pop	{r7, pc}

0800230c <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	2201      	movs	r2, #1
 800231a:	431a      	orrs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	609a      	str	r2, [r3, #8]
}
 8002320:	46c0      	nop			; (mov r8, r8)
 8002322:	46bd      	mov	sp, r7
 8002324:	b002      	add	sp, #8
 8002326:	bd80      	pop	{r7, pc}

08002328 <LL_USART_ReceiveData9>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData9
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
  */
__STATIC_INLINE uint16_t LL_USART_ReceiveData9(USART_TypeDef *USARTx)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002334:	b29b      	uxth	r3, r3
 8002336:	05db      	lsls	r3, r3, #23
 8002338:	0ddb      	lsrs	r3, r3, #23
 800233a:	b29b      	uxth	r3, r3
}
 800233c:	0018      	movs	r0, r3
 800233e:	46bd      	mov	sp, r7
 8002340:	b002      	add	sp, #8
 8002342:	bd80      	pop	{r7, pc}

08002344 <LL_SYSCFG_EnableFastModePlus>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 800234c:	4b04      	ldr	r3, [pc, #16]	; (8002360 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 800234e:	6819      	ldr	r1, [r3, #0]
 8002350:	4b03      	ldr	r3, [pc, #12]	; (8002360 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	430a      	orrs	r2, r1
 8002356:	601a      	str	r2, [r3, #0]
}
 8002358:	46c0      	nop			; (mov r8, r8)
 800235a:	46bd      	mov	sp, r7
 800235c:	b002      	add	sp, #8
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40010000 	.word	0x40010000

08002364 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	619a      	str	r2, [r3, #24]
}
 8002374:	46c0      	nop			; (mov r8, r8)
 8002376:	46bd      	mov	sp, r7
 8002378:	b002      	add	sp, #8
 800237a:	bd80      	pop	{r7, pc}

0800237c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800238c:	46c0      	nop			; (mov r8, r8)
 800238e:	46bd      	mov	sp, r7
 8002390:	b002      	add	sp, #8
 8002392:	bd80      	pop	{r7, pc}

08002394 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 800239c:	4b07      	ldr	r3, [pc, #28]	; (80023bc <LL_APB1_GRP1_EnableClock+0x28>)
 800239e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80023a0:	4b06      	ldr	r3, [pc, #24]	; (80023bc <LL_APB1_GRP1_EnableClock+0x28>)
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	430a      	orrs	r2, r1
 80023a6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80023a8:	4b04      	ldr	r3, [pc, #16]	; (80023bc <LL_APB1_GRP1_EnableClock+0x28>)
 80023aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	4013      	ands	r3, r2
 80023b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023b2:	68fb      	ldr	r3, [r7, #12]
}
 80023b4:	46c0      	nop			; (mov r8, r8)
 80023b6:	46bd      	mov	sp, r7
 80023b8:	b004      	add	sp, #16
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40021000 	.word	0x40021000

080023c0 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 80023c8:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <LL_IOP_GRP1_EnableClock+0x28>)
 80023ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023cc:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <LL_IOP_GRP1_EnableClock+0x28>)
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	430a      	orrs	r2, r1
 80023d2:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80023d4:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <LL_IOP_GRP1_EnableClock+0x28>)
 80023d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	4013      	ands	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023de:	68fb      	ldr	r3, [r7, #12]
}
 80023e0:	46c0      	nop			; (mov r8, r8)
 80023e2:	46bd      	mov	sp, r7
 80023e4:	b004      	add	sp, #16
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40021000 	.word	0x40021000

080023ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b088      	sub	sp, #32
 80023f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t testINPUT = 0;
 80023f2:	231e      	movs	r3, #30
 80023f4:	18fb      	adds	r3, r7, r3
 80023f6:	2200      	movs	r2, #0
 80023f8:	801a      	strh	r2, [r3, #0]
	uint16_t testAns = 0;
 80023fa:	231c      	movs	r3, #28
 80023fc:	18fb      	adds	r3, r7, r3
 80023fe:	2200      	movs	r2, #0
 8002400:	801a      	strh	r2, [r3, #0]
	uint16_t i = 0;
 8002402:	231a      	movs	r3, #26
 8002404:	18fb      	adds	r3, r7, r3
 8002406:	2200      	movs	r2, #0
 8002408:	801a      	strh	r2, [r3, #0]
	uint16_t beep1 = 0x0000;
 800240a:	2318      	movs	r3, #24
 800240c:	18fb      	adds	r3, r7, r3
 800240e:	2200      	movs	r2, #0
 8002410:	801a      	strh	r2, [r3, #0]
	uint16_t beep2 = 0xFFFF;
 8002412:	2316      	movs	r3, #22
 8002414:	18fb      	adds	r3, r7, r3
 8002416:	2201      	movs	r2, #1
 8002418:	4252      	negs	r2, r2
 800241a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800241c:	f002 ff5e 	bl	80052dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002420:	f000 f882 	bl	8002528 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002424:	4b3a      	ldr	r3, [pc, #232]	; (8002510 <main+0x124>)
 8002426:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002428:	4b39      	ldr	r3, [pc, #228]	; (8002510 <main+0x124>)
 800242a:	2101      	movs	r1, #1
 800242c:	430a      	orrs	r2, r1
 800242e:	635a      	str	r2, [r3, #52]	; 0x34
 8002430:	4b37      	ldr	r3, [pc, #220]	; (8002510 <main+0x124>)
 8002432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002434:	2201      	movs	r2, #1
 8002436:	4013      	ands	r3, r2
 8002438:	60bb      	str	r3, [r7, #8]
 800243a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800243c:	4b34      	ldr	r3, [pc, #208]	; (8002510 <main+0x124>)
 800243e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002440:	4b33      	ldr	r3, [pc, #204]	; (8002510 <main+0x124>)
 8002442:	2102      	movs	r1, #2
 8002444:	430a      	orrs	r2, r1
 8002446:	635a      	str	r2, [r3, #52]	; 0x34
 8002448:	4b31      	ldr	r3, [pc, #196]	; (8002510 <main+0x124>)
 800244a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800244c:	2202      	movs	r2, #2
 800244e:	4013      	ands	r3, r2
 8002450:	607b      	str	r3, [r7, #4]
 8002452:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002454:	4b2e      	ldr	r3, [pc, #184]	; (8002510 <main+0x124>)
 8002456:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002458:	4b2d      	ldr	r3, [pc, #180]	; (8002510 <main+0x124>)
 800245a:	2104      	movs	r1, #4
 800245c:	430a      	orrs	r2, r1
 800245e:	635a      	str	r2, [r3, #52]	; 0x34
 8002460:	4b2b      	ldr	r3, [pc, #172]	; (8002510 <main+0x124>)
 8002462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002464:	2204      	movs	r2, #4
 8002466:	4013      	ands	r3, r2
 8002468:	603b      	str	r3, [r7, #0]
 800246a:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800246c:	f000 fbc4 	bl	8002bf8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002470:	f000 fb94 	bl	8002b9c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002474:	f000 fab2 	bl	80029dc <MX_USART2_UART_Init>
  MX_COMP1_Init();
 8002478:	f000 f8d6 	bl	8002628 <MX_COMP1_Init>
  MX_TIM1_Init();
 800247c:	f000 f9b4 	bl	80027e8 <MX_TIM1_Init>
  MX_USART3_Init();
 8002480:	f000 fb4a 	bl	8002b18 <MX_USART3_Init>
  MX_I2S1_Init();
 8002484:	f000 f942 	bl	800270c <MX_I2S1_Init>
  MX_I2C1_Init();
 8002488:	f000 f900 	bl	800268c <MX_I2C1_Init>
  MX_SPI2_Init();
 800248c:	f000 f968 	bl	8002760 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	HAL_COMP_Start(&hcomp1);
 8002490:	4b20      	ldr	r3, [pc, #128]	; (8002514 <main+0x128>)
 8002492:	0018      	movs	r0, r3
 8002494:	f003 f9f0 	bl	8005878 <HAL_COMP_Start>
	HAL_Delay(100);
 8002498:	2064      	movs	r0, #100	; 0x64
 800249a:	f002 ffa5 	bl	80053e8 <HAL_Delay>
	uint8_t I2Cbuf[5];
	MEM_Reset();
 800249e:	f001 fd71 	bl	8003f84 <MEM_Reset>

	weoInit();
 80024a2:	f000 fe2d 	bl	8003100 <weoInit>
	HAL_Delay(1);
 80024a6:	2001      	movs	r0, #1
 80024a8:	f002 ff9e 	bl	80053e8 <HAL_Delay>
	weoClear();
 80024ac:	f000 fe94 	bl	80031d8 <weoClear>
	MEM_GetID();
 80024b0:	f001 fff8 	bl	80044a4 <MEM_GetID>
	soundSetup();
 80024b4:	f001 f898 	bl	80035e8 <soundSetup>

	USART2->CR1 |= (USART_CR1_UE | USART_CR1_RE | USART_CR1_TE|USART_CR1_M); // Enable USART, Receive and Transmit
 80024b8:	4b17      	ldr	r3, [pc, #92]	; (8002518 <main+0x12c>)
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	4b16      	ldr	r3, [pc, #88]	; (8002518 <main+0x12c>)
 80024be:	4917      	ldr	r1, [pc, #92]	; (800251c <main+0x130>)
 80024c0:	430a      	orrs	r2, r1
 80024c2:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	LL_USART_EnableIT_RXNE(USART2);
 80024c4:	4b14      	ldr	r3, [pc, #80]	; (8002518 <main+0x12c>)
 80024c6:	0018      	movs	r0, r3
 80024c8:	f7ff ff12 	bl	80022f0 <LL_USART_EnableIT_RXNE_RXFNE>
	LL_USART_EnableIT_ERROR(USART2);
 80024cc:	4b12      	ldr	r3, [pc, #72]	; (8002518 <main+0x12c>)
 80024ce:	0018      	movs	r0, r3
 80024d0:	f7ff ff1c 	bl	800230c <LL_USART_EnableIT_ERROR>

	USART2->ICR|=USART_ICR_ORECF;
 80024d4:	4b10      	ldr	r3, [pc, #64]	; (8002518 <main+0x12c>)
 80024d6:	6a1a      	ldr	r2, [r3, #32]
 80024d8:	4b0f      	ldr	r3, [pc, #60]	; (8002518 <main+0x12c>)
 80024da:	2108      	movs	r1, #8
 80024dc:	430a      	orrs	r2, r1
 80024de:	621a      	str	r2, [r3, #32]

	uint8_t x=0x05;
 80024e0:	2315      	movs	r3, #21
 80024e2:	18fb      	adds	r3, r7, r3
 80024e4:	2205      	movs	r2, #5
 80024e6:	701a      	strb	r2, [r3, #0]
	uint8_t y=0x03;
 80024e8:	2314      	movs	r3, #20
 80024ea:	18fb      	adds	r3, r7, r3
 80024ec:	2203      	movs	r2, #3
 80024ee:	701a      	strb	r2, [r3, #0]

//	squeak_single();
//    HAL_Delay(400);
//	squeak_double();
//    HAL_Delay(400);
    squeak_triple();
 80024f0:	f002 f9c0 	bl	8004874 <squeak_triple>

	GPIOC->ODR |= 1 << 6;
 80024f4:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <main+0x134>)
 80024f6:	695a      	ldr	r2, [r3, #20]
 80024f8:	4b09      	ldr	r3, [pc, #36]	; (8002520 <main+0x134>)
 80024fa:	2140      	movs	r1, #64	; 0x40
 80024fc:	430a      	orrs	r2, r1
 80024fe:	615a      	str	r2, [r3, #20]
	while (1) {
		cmdExecute(cmd2Execute);
 8002500:	4b08      	ldr	r3, [pc, #32]	; (8002524 <main+0x138>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	0018      	movs	r0, r3
 8002506:	f002 f835 	bl	8004574 <cmdExecute>
//		HAL_I2S_Transmit(&hi2s1, (uint16_t*)signal, nsamples, HAL_MAX_DELAY);
		Scount();
 800250a:	f002 f82d 	bl	8004568 <Scount>
		cmdExecute(cmd2Execute);
 800250e:	e7f7      	b.n	8002500 <main+0x114>
 8002510:	40021000 	.word	0x40021000
 8002514:	20003354 	.word	0x20003354
 8002518:	40004400 	.word	0x40004400
 800251c:	1000100d 	.word	0x1000100d
 8002520:	50000800 	.word	0x50000800
 8002524:	2000345e 	.word	0x2000345e

08002528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002528:	b590      	push	{r4, r7, lr}
 800252a:	b0a1      	sub	sp, #132	; 0x84
 800252c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800252e:	2448      	movs	r4, #72	; 0x48
 8002530:	193b      	adds	r3, r7, r4
 8002532:	0018      	movs	r0, r3
 8002534:	2338      	movs	r3, #56	; 0x38
 8002536:	001a      	movs	r2, r3
 8002538:	2100      	movs	r1, #0
 800253a:	f00a fe21 	bl	800d180 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800253e:	2338      	movs	r3, #56	; 0x38
 8002540:	18fb      	adds	r3, r7, r3
 8002542:	0018      	movs	r0, r3
 8002544:	2310      	movs	r3, #16
 8002546:	001a      	movs	r2, r3
 8002548:	2100      	movs	r1, #0
 800254a:	f00a fe19 	bl	800d180 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800254e:	1d3b      	adds	r3, r7, #4
 8002550:	0018      	movs	r0, r3
 8002552:	2334      	movs	r3, #52	; 0x34
 8002554:	001a      	movs	r2, r3
 8002556:	2100      	movs	r1, #0
 8002558:	f00a fe12 	bl	800d180 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800255c:	2380      	movs	r3, #128	; 0x80
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	0018      	movs	r0, r3
 8002562:	f005 fb7b 	bl	8007c5c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002566:	193b      	adds	r3, r7, r4
 8002568:	2202      	movs	r2, #2
 800256a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800256c:	193b      	adds	r3, r7, r4
 800256e:	2280      	movs	r2, #128	; 0x80
 8002570:	0052      	lsls	r2, r2, #1
 8002572:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002574:	0021      	movs	r1, r4
 8002576:	187b      	adds	r3, r7, r1
 8002578:	2200      	movs	r2, #0
 800257a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800257c:	187b      	adds	r3, r7, r1
 800257e:	2240      	movs	r2, #64	; 0x40
 8002580:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002582:	187b      	adds	r3, r7, r1
 8002584:	2202      	movs	r2, #2
 8002586:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002588:	187b      	adds	r3, r7, r1
 800258a:	2202      	movs	r2, #2
 800258c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800258e:	187b      	adds	r3, r7, r1
 8002590:	2200      	movs	r2, #0
 8002592:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002594:	187b      	adds	r3, r7, r1
 8002596:	2208      	movs	r2, #8
 8002598:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800259a:	187b      	adds	r3, r7, r1
 800259c:	2280      	movs	r2, #128	; 0x80
 800259e:	0292      	lsls	r2, r2, #10
 80025a0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80025a2:	187b      	adds	r3, r7, r1
 80025a4:	2280      	movs	r2, #128	; 0x80
 80025a6:	0492      	lsls	r2, r2, #18
 80025a8:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80025aa:	187b      	adds	r3, r7, r1
 80025ac:	2280      	movs	r2, #128	; 0x80
 80025ae:	0592      	lsls	r2, r2, #22
 80025b0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025b2:	187b      	adds	r3, r7, r1
 80025b4:	0018      	movs	r0, r3
 80025b6:	f005 fb9d 	bl	8007cf4 <HAL_RCC_OscConfig>
 80025ba:	1e03      	subs	r3, r0, #0
 80025bc:	d001      	beq.n	80025c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80025be:	f002 fa0b 	bl	80049d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025c2:	2138      	movs	r1, #56	; 0x38
 80025c4:	187b      	adds	r3, r7, r1
 80025c6:	2207      	movs	r2, #7
 80025c8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025ca:	187b      	adds	r3, r7, r1
 80025cc:	2202      	movs	r2, #2
 80025ce:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025d0:	187b      	adds	r3, r7, r1
 80025d2:	2200      	movs	r2, #0
 80025d4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025d6:	187b      	adds	r3, r7, r1
 80025d8:	2200      	movs	r2, #0
 80025da:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80025dc:	187b      	adds	r3, r7, r1
 80025de:	2102      	movs	r1, #2
 80025e0:	0018      	movs	r0, r3
 80025e2:	f005 fea7 	bl	8008334 <HAL_RCC_ClockConfig>
 80025e6:	1e03      	subs	r3, r0, #0
 80025e8:	d001      	beq.n	80025ee <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80025ea:	f002 f9f5 	bl	80049d8 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 80025ee:	1d3b      	adds	r3, r7, #4
 80025f0:	4a0c      	ldr	r2, [pc, #48]	; (8002624 <SystemClock_Config+0xfc>)
 80025f2:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2S1|RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80025f4:	1d3b      	adds	r3, r7, #4
 80025f6:	2200      	movs	r2, #0
 80025f8:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80025fa:	1d3b      	adds	r3, r7, #4
 80025fc:	2200      	movs	r2, #0
 80025fe:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8002600:	1d3b      	adds	r3, r7, #4
 8002602:	2200      	movs	r2, #0
 8002604:	615a      	str	r2, [r3, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8002606:	1d3b      	adds	r3, r7, #4
 8002608:	2200      	movs	r2, #0
 800260a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800260c:	1d3b      	adds	r3, r7, #4
 800260e:	0018      	movs	r0, r3
 8002610:	f006 f83a 	bl	8008688 <HAL_RCCEx_PeriphCLKConfig>
 8002614:	1e03      	subs	r3, r0, #0
 8002616:	d001      	beq.n	800261c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8002618:	f002 f9de 	bl	80049d8 <Error_Handler>
  }
}
 800261c:	46c0      	nop			; (mov r8, r8)
 800261e:	46bd      	mov	sp, r7
 8002620:	b021      	add	sp, #132	; 0x84
 8002622:	bd90      	pop	{r4, r7, pc}
 8002624:	00200822 	.word	0x00200822

08002628 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 800262c:	4b15      	ldr	r3, [pc, #84]	; (8002684 <MX_COMP1_Init+0x5c>)
 800262e:	4a16      	ldr	r2, [pc, #88]	; (8002688 <MX_COMP1_Init+0x60>)
 8002630:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 8002632:	4b14      	ldr	r3, [pc, #80]	; (8002684 <MX_COMP1_Init+0x5c>)
 8002634:	2280      	movs	r2, #128	; 0x80
 8002636:	0052      	lsls	r2, r2, #1
 8002638:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 800263a:	4b12      	ldr	r3, [pc, #72]	; (8002684 <MX_COMP1_Init+0x5c>)
 800263c:	2230      	movs	r2, #48	; 0x30
 800263e:	615a      	str	r2, [r3, #20]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8002640:	4b10      	ldr	r3, [pc, #64]	; (8002684 <MX_COMP1_Init+0x5c>)
 8002642:	2200      	movs	r2, #0
 8002644:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 8002646:	4b0f      	ldr	r3, [pc, #60]	; (8002684 <MX_COMP1_Init+0x5c>)
 8002648:	2200      	movs	r2, #0
 800264a:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800264c:	4b0d      	ldr	r3, [pc, #52]	; (8002684 <MX_COMP1_Init+0x5c>)
 800264e:	2200      	movs	r2, #0
 8002650:	619a      	str	r2, [r3, #24]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_TIM1_OC5;
 8002652:	4b0c      	ldr	r3, [pc, #48]	; (8002684 <MX_COMP1_Init+0x5c>)
 8002654:	2280      	movs	r2, #128	; 0x80
 8002656:	0392      	lsls	r2, r2, #14
 8002658:	621a      	str	r2, [r3, #32]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 800265a:	4b0a      	ldr	r3, [pc, #40]	; (8002684 <MX_COMP1_Init+0x5c>)
 800265c:	2200      	movs	r2, #0
 800265e:	60da      	str	r2, [r3, #12]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8002660:	4b08      	ldr	r3, [pc, #32]	; (8002684 <MX_COMP1_Init+0x5c>)
 8002662:	2200      	movs	r2, #0
 8002664:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_EVENT_RISING;
 8002666:	4b07      	ldr	r3, [pc, #28]	; (8002684 <MX_COMP1_Init+0x5c>)
 8002668:	2212      	movs	r2, #18
 800266a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800266c:	4b05      	ldr	r3, [pc, #20]	; (8002684 <MX_COMP1_Init+0x5c>)
 800266e:	0018      	movs	r0, r3
 8002670:	f002 ffa0 	bl	80055b4 <HAL_COMP_Init>
 8002674:	1e03      	subs	r3, r0, #0
 8002676:	d001      	beq.n	800267c <MX_COMP1_Init+0x54>
  {
    Error_Handler();
 8002678:	f002 f9ae 	bl	80049d8 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 800267c:	46c0      	nop			; (mov r8, r8)
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	46c0      	nop			; (mov r8, r8)
 8002684:	20003354 	.word	0x20003354
 8002688:	40010200 	.word	0x40010200

0800268c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002690:	4b1b      	ldr	r3, [pc, #108]	; (8002700 <MX_I2C1_Init+0x74>)
 8002692:	4a1c      	ldr	r2, [pc, #112]	; (8002704 <MX_I2C1_Init+0x78>)
 8002694:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x1094102C;
 8002696:	4b1a      	ldr	r3, [pc, #104]	; (8002700 <MX_I2C1_Init+0x74>)
 8002698:	4a1b      	ldr	r2, [pc, #108]	; (8002708 <MX_I2C1_Init+0x7c>)
 800269a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800269c:	4b18      	ldr	r3, [pc, #96]	; (8002700 <MX_I2C1_Init+0x74>)
 800269e:	2200      	movs	r2, #0
 80026a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026a2:	4b17      	ldr	r3, [pc, #92]	; (8002700 <MX_I2C1_Init+0x74>)
 80026a4:	2201      	movs	r2, #1
 80026a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026a8:	4b15      	ldr	r3, [pc, #84]	; (8002700 <MX_I2C1_Init+0x74>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80026ae:	4b14      	ldr	r3, [pc, #80]	; (8002700 <MX_I2C1_Init+0x74>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80026b4:	4b12      	ldr	r3, [pc, #72]	; (8002700 <MX_I2C1_Init+0x74>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026ba:	4b11      	ldr	r3, [pc, #68]	; (8002700 <MX_I2C1_Init+0x74>)
 80026bc:	2200      	movs	r2, #0
 80026be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026c0:	4b0f      	ldr	r3, [pc, #60]	; (8002700 <MX_I2C1_Init+0x74>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80026c6:	4b0e      	ldr	r3, [pc, #56]	; (8002700 <MX_I2C1_Init+0x74>)
 80026c8:	0018      	movs	r0, r3
 80026ca:	f003 fe31 	bl	8006330 <HAL_I2C_Init>
 80026ce:	1e03      	subs	r3, r0, #0
 80026d0:	d001      	beq.n	80026d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80026d2:	f002 f981 	bl	80049d8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80026d6:	4b0a      	ldr	r3, [pc, #40]	; (8002700 <MX_I2C1_Init+0x74>)
 80026d8:	2100      	movs	r1, #0
 80026da:	0018      	movs	r0, r3
 80026dc:	f004 ff1c 	bl	8007518 <HAL_I2CEx_ConfigAnalogFilter>
 80026e0:	1e03      	subs	r3, r0, #0
 80026e2:	d001      	beq.n	80026e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80026e4:	f002 f978 	bl	80049d8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80026e8:	4b05      	ldr	r3, [pc, #20]	; (8002700 <MX_I2C1_Init+0x74>)
 80026ea:	2100      	movs	r1, #0
 80026ec:	0018      	movs	r0, r3
 80026ee:	f004 ff5f 	bl	80075b0 <HAL_I2CEx_ConfigDigitalFilter>
 80026f2:	1e03      	subs	r3, r0, #0
 80026f4:	d001      	beq.n	80026fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80026f6:	f002 f96f 	bl	80049d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80026fa:	46c0      	nop			; (mov r8, r8)
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	20003234 	.word	0x20003234
 8002704:	40005400 	.word	0x40005400
 8002708:	1094102c 	.word	0x1094102c

0800270c <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8002710:	4b11      	ldr	r3, [pc, #68]	; (8002758 <MX_I2S1_Init+0x4c>)
 8002712:	4a12      	ldr	r2, [pc, #72]	; (800275c <MX_I2S1_Init+0x50>)
 8002714:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8002716:	4b10      	ldr	r3, [pc, #64]	; (8002758 <MX_I2S1_Init+0x4c>)
 8002718:	2280      	movs	r2, #128	; 0x80
 800271a:	0092      	lsls	r2, r2, #2
 800271c:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 800271e:	4b0e      	ldr	r3, [pc, #56]	; (8002758 <MX_I2S1_Init+0x4c>)
 8002720:	2200      	movs	r2, #0
 8002722:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002724:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <MX_I2S1_Init+0x4c>)
 8002726:	2200      	movs	r2, #0
 8002728:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800272a:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <MX_I2S1_Init+0x4c>)
 800272c:	2280      	movs	r2, #128	; 0x80
 800272e:	0092      	lsls	r2, r2, #2
 8002730:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8002732:	4b09      	ldr	r3, [pc, #36]	; (8002758 <MX_I2S1_Init+0x4c>)
 8002734:	22fa      	movs	r2, #250	; 0xfa
 8002736:	0192      	lsls	r2, r2, #6
 8002738:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 800273a:	4b07      	ldr	r3, [pc, #28]	; (8002758 <MX_I2S1_Init+0x4c>)
 800273c:	2200      	movs	r2, #0
 800273e:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8002740:	4b05      	ldr	r3, [pc, #20]	; (8002758 <MX_I2S1_Init+0x4c>)
 8002742:	0018      	movs	r0, r3
 8002744:	f004 ff80 	bl	8007648 <HAL_I2S_Init>
 8002748:	1e03      	subs	r3, r0, #0
 800274a:	d001      	beq.n	8002750 <MX_I2S1_Init+0x44>
  {
    Error_Handler();
 800274c:	f002 f944 	bl	80049d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8002750:	46c0      	nop			; (mov r8, r8)
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	46c0      	nop			; (mov r8, r8)
 8002758:	20003460 	.word	0x20003460
 800275c:	40013000 	.word	0x40013000

08002760 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002764:	4b1e      	ldr	r3, [pc, #120]	; (80027e0 <MX_SPI2_Init+0x80>)
 8002766:	2208      	movs	r2, #8
 8002768:	61da      	str	r2, [r3, #28]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800276a:	4b1d      	ldr	r3, [pc, #116]	; (80027e0 <MX_SPI2_Init+0x80>)
 800276c:	4a1d      	ldr	r2, [pc, #116]	; (80027e4 <MX_SPI2_Init+0x84>)
 800276e:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002770:	4b1b      	ldr	r3, [pc, #108]	; (80027e0 <MX_SPI2_Init+0x80>)
 8002772:	2282      	movs	r2, #130	; 0x82
 8002774:	0052      	lsls	r2, r2, #1
 8002776:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002778:	4b19      	ldr	r3, [pc, #100]	; (80027e0 <MX_SPI2_Init+0x80>)
 800277a:	2200      	movs	r2, #0
 800277c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800277e:	4b18      	ldr	r3, [pc, #96]	; (80027e0 <MX_SPI2_Init+0x80>)
 8002780:	22e0      	movs	r2, #224	; 0xe0
 8002782:	00d2      	lsls	r2, r2, #3
 8002784:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002786:	4b16      	ldr	r3, [pc, #88]	; (80027e0 <MX_SPI2_Init+0x80>)
 8002788:	2200      	movs	r2, #0
 800278a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800278c:	4b14      	ldr	r3, [pc, #80]	; (80027e0 <MX_SPI2_Init+0x80>)
 800278e:	2200      	movs	r2, #0
 8002790:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002792:	4b13      	ldr	r3, [pc, #76]	; (80027e0 <MX_SPI2_Init+0x80>)
 8002794:	2280      	movs	r2, #128	; 0x80
 8002796:	0092      	lsls	r2, r2, #2
 8002798:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800279a:	4b11      	ldr	r3, [pc, #68]	; (80027e0 <MX_SPI2_Init+0x80>)
 800279c:	2208      	movs	r2, #8
 800279e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027a0:	4b0f      	ldr	r3, [pc, #60]	; (80027e0 <MX_SPI2_Init+0x80>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80027a6:	4b0e      	ldr	r3, [pc, #56]	; (80027e0 <MX_SPI2_Init+0x80>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027ac:	4b0c      	ldr	r3, [pc, #48]	; (80027e0 <MX_SPI2_Init+0x80>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80027b2:	4b0b      	ldr	r3, [pc, #44]	; (80027e0 <MX_SPI2_Init+0x80>)
 80027b4:	2207      	movs	r2, #7
 80027b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80027b8:	4b09      	ldr	r3, [pc, #36]	; (80027e0 <MX_SPI2_Init+0x80>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80027be:	4b08      	ldr	r3, [pc, #32]	; (80027e0 <MX_SPI2_Init+0x80>)
 80027c0:	2208      	movs	r2, #8
 80027c2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80027c4:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <MX_SPI2_Init+0x80>)
 80027c6:	0018      	movs	r0, r3
 80027c8:	f006 fc5e 	bl	8009088 <HAL_SPI_Init>
 80027cc:	1e03      	subs	r3, r0, #0
 80027ce:	d001      	beq.n	80027d4 <MX_SPI2_Init+0x74>
  {
    Error_Handler();
 80027d0:	f002 f902 	bl	80049d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80027d4:	4b02      	ldr	r3, [pc, #8]	; (80027e0 <MX_SPI2_Init+0x80>)
 80027d6:	2208      	movs	r2, #8
 80027d8:	61da      	str	r2, [r3, #28]
  /* USER CODE END SPI2_Init 2 */

}
 80027da:	46c0      	nop			; (mov r8, r8)
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	200031b0 	.word	0x200031b0
 80027e4:	40003800 	.word	0x40003800

080027e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b09e      	sub	sp, #120	; 0x78
 80027ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027ee:	2368      	movs	r3, #104	; 0x68
 80027f0:	18fb      	adds	r3, r7, r3
 80027f2:	0018      	movs	r0, r3
 80027f4:	2310      	movs	r3, #16
 80027f6:	001a      	movs	r2, r3
 80027f8:	2100      	movs	r1, #0
 80027fa:	f00a fcc1 	bl	800d180 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027fe:	235c      	movs	r3, #92	; 0x5c
 8002800:	18fb      	adds	r3, r7, r3
 8002802:	0018      	movs	r0, r3
 8002804:	230c      	movs	r3, #12
 8002806:	001a      	movs	r2, r3
 8002808:	2100      	movs	r1, #0
 800280a:	f00a fcb9 	bl	800d180 <memset>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 800280e:	2350      	movs	r3, #80	; 0x50
 8002810:	18fb      	adds	r3, r7, r3
 8002812:	0018      	movs	r0, r3
 8002814:	230c      	movs	r3, #12
 8002816:	001a      	movs	r2, r3
 8002818:	2100      	movs	r1, #0
 800281a:	f00a fcb1 	bl	800d180 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800281e:	2334      	movs	r3, #52	; 0x34
 8002820:	18fb      	adds	r3, r7, r3
 8002822:	0018      	movs	r0, r3
 8002824:	231c      	movs	r3, #28
 8002826:	001a      	movs	r2, r3
 8002828:	2100      	movs	r1, #0
 800282a:	f00a fca9 	bl	800d180 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800282e:	003b      	movs	r3, r7
 8002830:	0018      	movs	r0, r3
 8002832:	2334      	movs	r3, #52	; 0x34
 8002834:	001a      	movs	r2, r3
 8002836:	2100      	movs	r1, #0
 8002838:	f00a fca2 	bl	800d180 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800283c:	4b64      	ldr	r3, [pc, #400]	; (80029d0 <MX_TIM1_Init+0x1e8>)
 800283e:	4a65      	ldr	r2, [pc, #404]	; (80029d4 <MX_TIM1_Init+0x1ec>)
 8002840:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002842:	4b63      	ldr	r3, [pc, #396]	; (80029d0 <MX_TIM1_Init+0x1e8>)
 8002844:	2200      	movs	r2, #0
 8002846:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002848:	4b61      	ldr	r3, [pc, #388]	; (80029d0 <MX_TIM1_Init+0x1e8>)
 800284a:	2200      	movs	r2, #0
 800284c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 639;
 800284e:	4b60      	ldr	r3, [pc, #384]	; (80029d0 <MX_TIM1_Init+0x1e8>)
 8002850:	4a61      	ldr	r2, [pc, #388]	; (80029d8 <MX_TIM1_Init+0x1f0>)
 8002852:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002854:	4b5e      	ldr	r3, [pc, #376]	; (80029d0 <MX_TIM1_Init+0x1e8>)
 8002856:	2200      	movs	r2, #0
 8002858:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800285a:	4b5d      	ldr	r3, [pc, #372]	; (80029d0 <MX_TIM1_Init+0x1e8>)
 800285c:	2200      	movs	r2, #0
 800285e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002860:	4b5b      	ldr	r3, [pc, #364]	; (80029d0 <MX_TIM1_Init+0x1e8>)
 8002862:	2280      	movs	r2, #128	; 0x80
 8002864:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002866:	4b5a      	ldr	r3, [pc, #360]	; (80029d0 <MX_TIM1_Init+0x1e8>)
 8002868:	0018      	movs	r0, r3
 800286a:	f008 f801 	bl	800a870 <HAL_TIM_Base_Init>
 800286e:	1e03      	subs	r3, r0, #0
 8002870:	d001      	beq.n	8002876 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8002872:	f002 f8b1 	bl	80049d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002876:	2168      	movs	r1, #104	; 0x68
 8002878:	187b      	adds	r3, r7, r1
 800287a:	2280      	movs	r2, #128	; 0x80
 800287c:	0152      	lsls	r2, r2, #5
 800287e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002880:	187a      	adds	r2, r7, r1
 8002882:	4b53      	ldr	r3, [pc, #332]	; (80029d0 <MX_TIM1_Init+0x1e8>)
 8002884:	0011      	movs	r1, r2
 8002886:	0018      	movs	r0, r3
 8002888:	f008 fa8a 	bl	800ada0 <HAL_TIM_ConfigClockSource>
 800288c:	1e03      	subs	r3, r0, #0
 800288e:	d001      	beq.n	8002894 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8002890:	f002 f8a2 	bl	80049d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002894:	4b4e      	ldr	r3, [pc, #312]	; (80029d0 <MX_TIM1_Init+0x1e8>)
 8002896:	0018      	movs	r0, r3
 8002898:	f008 f842 	bl	800a920 <HAL_TIM_PWM_Init>
 800289c:	1e03      	subs	r3, r0, #0
 800289e:	d001      	beq.n	80028a4 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80028a0:	f002 f89a 	bl	80049d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028a4:	215c      	movs	r1, #92	; 0x5c
 80028a6:	187b      	adds	r3, r7, r1
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80028ac:	187b      	adds	r3, r7, r1
 80028ae:	2200      	movs	r2, #0
 80028b0:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028b2:	187b      	adds	r3, r7, r1
 80028b4:	2200      	movs	r2, #0
 80028b6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80028b8:	187a      	adds	r2, r7, r1
 80028ba:	4b45      	ldr	r3, [pc, #276]	; (80029d0 <MX_TIM1_Init+0x1e8>)
 80028bc:	0011      	movs	r1, r2
 80028be:	0018      	movs	r0, r3
 80028c0:	f008 ff3e 	bl	800b740 <HAL_TIMEx_MasterConfigSynchronization>
 80028c4:	1e03      	subs	r3, r0, #0
 80028c6:	d001      	beq.n	80028cc <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 80028c8:	f002 f886 	bl	80049d8 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 80028cc:	2150      	movs	r1, #80	; 0x50
 80028ce:	187b      	adds	r3, r7, r1
 80028d0:	2202      	movs	r2, #2
 80028d2:	601a      	str	r2, [r3, #0]
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80028d4:	187b      	adds	r3, r7, r1
 80028d6:	2201      	movs	r2, #1
 80028d8:	605a      	str	r2, [r3, #4]
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 80028da:	187b      	adds	r3, r7, r1
 80028dc:	2200      	movs	r2, #0
 80028de:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80028e0:	187a      	adds	r2, r7, r1
 80028e2:	4b3b      	ldr	r3, [pc, #236]	; (80029d0 <MX_TIM1_Init+0x1e8>)
 80028e4:	2101      	movs	r1, #1
 80028e6:	0018      	movs	r0, r3
 80028e8:	f009 f83e 	bl	800b968 <HAL_TIMEx_ConfigBreakInput>
 80028ec:	1e03      	subs	r3, r0, #0
 80028ee:	d001      	beq.n	80028f4 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 80028f0:	f002 f872 	bl	80049d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028f4:	2134      	movs	r1, #52	; 0x34
 80028f6:	187b      	adds	r3, r7, r1
 80028f8:	2260      	movs	r2, #96	; 0x60
 80028fa:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 300;
 80028fc:	187b      	adds	r3, r7, r1
 80028fe:	2296      	movs	r2, #150	; 0x96
 8002900:	0052      	lsls	r2, r2, #1
 8002902:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002904:	187b      	adds	r3, r7, r1
 8002906:	2200      	movs	r2, #0
 8002908:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800290a:	187b      	adds	r3, r7, r1
 800290c:	2200      	movs	r2, #0
 800290e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002910:	187b      	adds	r3, r7, r1
 8002912:	2204      	movs	r2, #4
 8002914:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002916:	187b      	adds	r3, r7, r1
 8002918:	2200      	movs	r2, #0
 800291a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800291c:	187b      	adds	r3, r7, r1
 800291e:	2200      	movs	r2, #0
 8002920:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002922:	1879      	adds	r1, r7, r1
 8002924:	4b2a      	ldr	r3, [pc, #168]	; (80029d0 <MX_TIM1_Init+0x1e8>)
 8002926:	2200      	movs	r2, #0
 8002928:	0018      	movs	r0, r3
 800292a:	f008 f943 	bl	800abb4 <HAL_TIM_PWM_ConfigChannel>
 800292e:	1e03      	subs	r3, r0, #0
 8002930:	d001      	beq.n	8002936 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8002932:	f002 f851 	bl	80049d8 <Error_Handler>
  }
  sConfigOC.Pulse = 50;
 8002936:	2134      	movs	r1, #52	; 0x34
 8002938:	187b      	adds	r3, r7, r1
 800293a:	2232      	movs	r2, #50	; 0x32
 800293c:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 800293e:	1879      	adds	r1, r7, r1
 8002940:	4b23      	ldr	r3, [pc, #140]	; (80029d0 <MX_TIM1_Init+0x1e8>)
 8002942:	2210      	movs	r2, #16
 8002944:	0018      	movs	r0, r3
 8002946:	f008 f935 	bl	800abb4 <HAL_TIM_PWM_ConfigChannel>
 800294a:	1e03      	subs	r3, r0, #0
 800294c:	d001      	beq.n	8002952 <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 800294e:	f002 f843 	bl	80049d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8002952:	003b      	movs	r3, r7
 8002954:	2280      	movs	r2, #128	; 0x80
 8002956:	0112      	lsls	r2, r2, #4
 8002958:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 800295a:	003b      	movs	r3, r7
 800295c:	2280      	movs	r2, #128	; 0x80
 800295e:	00d2      	lsls	r2, r2, #3
 8002960:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002962:	003b      	movs	r3, r7
 8002964:	2200      	movs	r2, #0
 8002966:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002968:	003b      	movs	r3, r7
 800296a:	2200      	movs	r2, #0
 800296c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 800296e:	003b      	movs	r3, r7
 8002970:	2280      	movs	r2, #128	; 0x80
 8002972:	0152      	lsls	r2, r2, #5
 8002974:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002976:	003b      	movs	r3, r7
 8002978:	2280      	movs	r2, #128	; 0x80
 800297a:	0192      	lsls	r2, r2, #6
 800297c:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 10;
 800297e:	003b      	movs	r3, r7
 8002980:	220a      	movs	r2, #10
 8002982:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002984:	003b      	movs	r3, r7
 8002986:	2200      	movs	r2, #0
 8002988:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800298a:	003b      	movs	r3, r7
 800298c:	2200      	movs	r2, #0
 800298e:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002990:	003b      	movs	r3, r7
 8002992:	2280      	movs	r2, #128	; 0x80
 8002994:	0492      	lsls	r2, r2, #18
 8002996:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002998:	003b      	movs	r3, r7
 800299a:	2200      	movs	r2, #0
 800299c:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800299e:	003b      	movs	r3, r7
 80029a0:	2200      	movs	r2, #0
 80029a2:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 80029a4:	003b      	movs	r3, r7
 80029a6:	2280      	movs	r2, #128	; 0x80
 80029a8:	01d2      	lsls	r2, r2, #7
 80029aa:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80029ac:	003a      	movs	r2, r7
 80029ae:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <MX_TIM1_Init+0x1e8>)
 80029b0:	0011      	movs	r1, r2
 80029b2:	0018      	movs	r0, r3
 80029b4:	f008 ff32 	bl	800b81c <HAL_TIMEx_ConfigBreakDeadTime>
 80029b8:	1e03      	subs	r3, r0, #0
 80029ba:	d001      	beq.n	80029c0 <MX_TIM1_Init+0x1d8>
  {
    Error_Handler();
 80029bc:	f002 f80c 	bl	80049d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80029c0:	4b03      	ldr	r3, [pc, #12]	; (80029d0 <MX_TIM1_Init+0x1e8>)
 80029c2:	0018      	movs	r0, r3
 80029c4:	f002 fa4e 	bl	8004e64 <HAL_TIM_MspPostInit>

}
 80029c8:	46c0      	nop			; (mov r8, r8)
 80029ca:	46bd      	mov	sp, r7
 80029cc:	b01e      	add	sp, #120	; 0x78
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	20003408 	.word	0x20003408
 80029d4:	40012c00 	.word	0x40012c00
 80029d8:	0000027f 	.word	0x0000027f

080029dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80029dc:	b590      	push	{r4, r7, lr}
 80029de:	b08f      	sub	sp, #60	; 0x3c
 80029e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80029e2:	2418      	movs	r4, #24
 80029e4:	193b      	adds	r3, r7, r4
 80029e6:	0018      	movs	r0, r3
 80029e8:	2320      	movs	r3, #32
 80029ea:	001a      	movs	r2, r3
 80029ec:	2100      	movs	r1, #0
 80029ee:	f00a fbc7 	bl	800d180 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f2:	003b      	movs	r3, r7
 80029f4:	0018      	movs	r0, r3
 80029f6:	2318      	movs	r3, #24
 80029f8:	001a      	movs	r2, r3
 80029fa:	2100      	movs	r1, #0
 80029fc:	f00a fbc0 	bl	800d180 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002a00:	2380      	movs	r3, #128	; 0x80
 8002a02:	029b      	lsls	r3, r3, #10
 8002a04:	0018      	movs	r0, r3
 8002a06:	f7ff fcc5 	bl	8002394 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8002a0a:	2001      	movs	r0, #1
 8002a0c:	f7ff fcd8 	bl	80023c0 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8002a10:	003b      	movs	r3, r7
 8002a12:	2204      	movs	r2, #4
 8002a14:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002a16:	003b      	movs	r3, r7
 8002a18:	2202      	movs	r2, #2
 8002a1a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002a1c:	003b      	movs	r3, r7
 8002a1e:	2200      	movs	r2, #0
 8002a20:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002a22:	003b      	movs	r3, r7
 8002a24:	2200      	movs	r2, #0
 8002a26:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002a28:	003b      	movs	r3, r7
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8002a2e:	003b      	movs	r3, r7
 8002a30:	2201      	movs	r2, #1
 8002a32:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a34:	003a      	movs	r2, r7
 8002a36:	23a0      	movs	r3, #160	; 0xa0
 8002a38:	05db      	lsls	r3, r3, #23
 8002a3a:	0011      	movs	r1, r2
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	f00a f821 	bl	800ca84 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8002a42:	003b      	movs	r3, r7
 8002a44:	2208      	movs	r2, #8
 8002a46:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002a48:	003b      	movs	r3, r7
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002a4e:	003b      	movs	r3, r7
 8002a50:	2200      	movs	r2, #0
 8002a52:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002a54:	003b      	movs	r3, r7
 8002a56:	2200      	movs	r2, #0
 8002a58:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002a5a:	003b      	movs	r3, r7
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8002a60:	003b      	movs	r3, r7
 8002a62:	2201      	movs	r2, #1
 8002a64:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a66:	003a      	movs	r2, r7
 8002a68:	23a0      	movs	r3, #160	; 0xa0
 8002a6a:	05db      	lsls	r3, r3, #23
 8002a6c:	0011      	movs	r1, r2
 8002a6e:	0018      	movs	r0, r3
 8002a70:	f00a f808 	bl	800ca84 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8002a74:	2100      	movs	r1, #0
 8002a76:	201c      	movs	r0, #28
 8002a78:	f7ff fb48 	bl	800210c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8002a7c:	201c      	movs	r0, #28
 8002a7e:	f7ff fb2b 	bl	80020d8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8002a82:	193b      	adds	r3, r7, r4
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 57600;
 8002a88:	193b      	adds	r3, r7, r4
 8002a8a:	22e1      	movs	r2, #225	; 0xe1
 8002a8c:	0212      	lsls	r2, r2, #8
 8002a8e:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8002a90:	193b      	adds	r3, r7, r4
 8002a92:	2280      	movs	r2, #128	; 0x80
 8002a94:	0152      	lsls	r2, r2, #5
 8002a96:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002a98:	0021      	movs	r1, r4
 8002a9a:	187b      	adds	r3, r7, r1
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002aa0:	187b      	adds	r3, r7, r1
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002aa6:	187b      	adds	r3, r7, r1
 8002aa8:	220c      	movs	r2, #12
 8002aaa:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002aac:	187b      	adds	r3, r7, r1
 8002aae:	2200      	movs	r2, #0
 8002ab0:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002ab2:	187b      	adds	r3, r7, r1
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART2, &USART_InitStruct);
 8002ab8:	187b      	adds	r3, r7, r1
 8002aba:	4a16      	ldr	r2, [pc, #88]	; (8002b14 <MX_USART2_UART_Init+0x138>)
 8002abc:	0019      	movs	r1, r3
 8002abe:	0010      	movs	r0, r2
 8002ac0:	f00a faac 	bl	800d01c <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8002ac4:	4b13      	ldr	r3, [pc, #76]	; (8002b14 <MX_USART2_UART_Init+0x138>)
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	0018      	movs	r0, r3
 8002aca:	f7ff fbab 	bl	8002224 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8002ace:	4b11      	ldr	r3, [pc, #68]	; (8002b14 <MX_USART2_UART_Init+0x138>)
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	f7ff fbb8 	bl	8002248 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART2);
 8002ad8:	4b0e      	ldr	r3, [pc, #56]	; (8002b14 <MX_USART2_UART_Init+0x138>)
 8002ada:	0018      	movs	r0, r3
 8002adc:	f7ff fb92 	bl	8002204 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART2);
 8002ae0:	4b0c      	ldr	r3, [pc, #48]	; (8002b14 <MX_USART2_UART_Init+0x138>)
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	f7ff fbc4 	bl	8002270 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 8002ae8:	4b0a      	ldr	r3, [pc, #40]	; (8002b14 <MX_USART2_UART_Init+0x138>)
 8002aea:	0018      	movs	r0, r3
 8002aec:	f7ff fb7c 	bl	80021e8 <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 8002af0:	46c0      	nop			; (mov r8, r8)
 8002af2:	4b08      	ldr	r3, [pc, #32]	; (8002b14 <MX_USART2_UART_Init+0x138>)
 8002af4:	0018      	movs	r0, r3
 8002af6:	f7ff fbd3 	bl	80022a0 <LL_USART_IsActiveFlag_TEACK>
 8002afa:	1e03      	subs	r3, r0, #0
 8002afc:	d0f9      	beq.n	8002af2 <MX_USART2_UART_Init+0x116>
 8002afe:	4b05      	ldr	r3, [pc, #20]	; (8002b14 <MX_USART2_UART_Init+0x138>)
 8002b00:	0018      	movs	r0, r3
 8002b02:	f7ff fbe1 	bl	80022c8 <LL_USART_IsActiveFlag_REACK>
 8002b06:	1e03      	subs	r3, r0, #0
 8002b08:	d0f3      	beq.n	8002af2 <MX_USART2_UART_Init+0x116>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	46c0      	nop			; (mov r8, r8)
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	b00f      	add	sp, #60	; 0x3c
 8002b12:	bd90      	pop	{r4, r7, pc}
 8002b14:	40004400 	.word	0x40004400

08002b18 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */
//	USART3->CR2 &= ~(USART_CR1_UE);
	USART3->CR2|=USART_CR2_MSBFIRST;
 8002b1c:	4b1c      	ldr	r3, [pc, #112]	; (8002b90 <MX_USART3_Init+0x78>)
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	4b1b      	ldr	r3, [pc, #108]	; (8002b90 <MX_USART3_Init+0x78>)
 8002b22:	2180      	movs	r1, #128	; 0x80
 8002b24:	0309      	lsls	r1, r1, #12
 8002b26:	430a      	orrs	r2, r1
 8002b28:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8002b2a:	4b1a      	ldr	r3, [pc, #104]	; (8002b94 <MX_USART3_Init+0x7c>)
 8002b2c:	4a18      	ldr	r2, [pc, #96]	; (8002b90 <MX_USART3_Init+0x78>)
 8002b2e:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 8100000;
 8002b30:	4b18      	ldr	r3, [pc, #96]	; (8002b94 <MX_USART3_Init+0x7c>)
 8002b32:	4a19      	ldr	r2, [pc, #100]	; (8002b98 <MX_USART3_Init+0x80>)
 8002b34:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8002b36:	4b17      	ldr	r3, [pc, #92]	; (8002b94 <MX_USART3_Init+0x7c>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8002b3c:	4b15      	ldr	r3, [pc, #84]	; (8002b94 <MX_USART3_Init+0x7c>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8002b42:	4b14      	ldr	r3, [pc, #80]	; (8002b94 <MX_USART3_Init+0x7c>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX;
 8002b48:	4b12      	ldr	r3, [pc, #72]	; (8002b94 <MX_USART3_Init+0x7c>)
 8002b4a:	2208      	movs	r2, #8
 8002b4c:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_HIGH;
 8002b4e:	4b11      	ldr	r3, [pc, #68]	; (8002b94 <MX_USART3_Init+0x7c>)
 8002b50:	2280      	movs	r2, #128	; 0x80
 8002b52:	00d2      	lsls	r2, r2, #3
 8002b54:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_2EDGE;
 8002b56:	4b0f      	ldr	r3, [pc, #60]	; (8002b94 <MX_USART3_Init+0x7c>)
 8002b58:	2280      	movs	r2, #128	; 0x80
 8002b5a:	0092      	lsls	r2, r2, #2
 8002b5c:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_ENABLE;
 8002b5e:	4b0d      	ldr	r3, [pc, #52]	; (8002b94 <MX_USART3_Init+0x7c>)
 8002b60:	2280      	movs	r2, #128	; 0x80
 8002b62:	0052      	lsls	r2, r2, #1
 8002b64:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8002b66:	4b0b      	ldr	r3, [pc, #44]	; (8002b94 <MX_USART3_Init+0x7c>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 8002b6c:	4b09      	ldr	r3, [pc, #36]	; (8002b94 <MX_USART3_Init+0x7c>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8002b72:	4b08      	ldr	r3, [pc, #32]	; (8002b94 <MX_USART3_Init+0x7c>)
 8002b74:	0018      	movs	r0, r3
 8002b76:	f008 ff97 	bl	800baa8 <HAL_USART_Init>
 8002b7a:	1e03      	subs	r3, r0, #0
 8002b7c:	d001      	beq.n	8002b82 <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 8002b7e:	f001 ff2b 	bl	80049d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  husart3.Init.BaudRate = 8100000;
 8002b82:	4b04      	ldr	r3, [pc, #16]	; (8002b94 <MX_USART3_Init+0x7c>)
 8002b84:	4a04      	ldr	r2, [pc, #16]	; (8002b98 <MX_USART3_Init+0x80>)
 8002b86:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 2 */

}
 8002b88:	46c0      	nop			; (mov r8, r8)
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	46c0      	nop			; (mov r8, r8)
 8002b90:	40004800 	.word	0x40004800
 8002b94:	20003394 	.word	0x20003394
 8002b98:	007b98a0 	.word	0x007b98a0

08002b9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002ba2:	4b14      	ldr	r3, [pc, #80]	; (8002bf4 <MX_DMA_Init+0x58>)
 8002ba4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ba6:	4b13      	ldr	r3, [pc, #76]	; (8002bf4 <MX_DMA_Init+0x58>)
 8002ba8:	2101      	movs	r1, #1
 8002baa:	430a      	orrs	r2, r1
 8002bac:	639a      	str	r2, [r3, #56]	; 0x38
 8002bae:	4b11      	ldr	r3, [pc, #68]	; (8002bf4 <MX_DMA_Init+0x58>)
 8002bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	607b      	str	r3, [r7, #4]
 8002bb8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002bba:	2200      	movs	r2, #0
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	2009      	movs	r0, #9
 8002bc0:	f002 ff58 	bl	8005a74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002bc4:	2009      	movs	r0, #9
 8002bc6:	f002 ff6a 	bl	8005a9e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8002bca:	2200      	movs	r2, #0
 8002bcc:	2100      	movs	r1, #0
 8002bce:	200a      	movs	r0, #10
 8002bd0:	f002 ff50 	bl	8005a74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002bd4:	200a      	movs	r0, #10
 8002bd6:	f002 ff62 	bl	8005a9e <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 0, 0);
 8002bda:	2200      	movs	r2, #0
 8002bdc:	2100      	movs	r1, #0
 8002bde:	200b      	movs	r0, #11
 8002be0:	f002 ff48 	bl	8005a74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 8002be4:	200b      	movs	r0, #11
 8002be6:	f002 ff5a 	bl	8005a9e <HAL_NVIC_EnableIRQ>

}
 8002bea:	46c0      	nop			; (mov r8, r8)
 8002bec:	46bd      	mov	sp, r7
 8002bee:	b002      	add	sp, #8
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	46c0      	nop			; (mov r8, r8)
 8002bf4:	40021000 	.word	0x40021000

08002bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bfe:	003b      	movs	r3, r7
 8002c00:	0018      	movs	r0, r3
 8002c02:	2318      	movs	r3, #24
 8002c04:	001a      	movs	r2, r3
 8002c06:	2100      	movs	r1, #0
 8002c08:	f00a faba 	bl	800d180 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8002c0c:	2002      	movs	r0, #2
 8002c0e:	f7ff fbd7 	bl	80023c0 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8002c12:	2004      	movs	r0, #4
 8002c14:	f7ff fbd4 	bl	80023c0 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8002c18:	2001      	movs	r0, #1
 8002c1a:	f7ff fbd1 	bl	80023c0 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(MEM_HOLD_GPIO_Port, MEM_HOLD_Pin);
 8002c1e:	2380      	movs	r3, #128	; 0x80
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4aa0      	ldr	r2, [pc, #640]	; (8002ea4 <MX_GPIO_Init+0x2ac>)
 8002c24:	0019      	movs	r1, r3
 8002c26:	0010      	movs	r0, r2
 8002c28:	f7ff fb9c 	bl	8002364 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_WP_GPIO_Port, MEM_WP_Pin);
 8002c2c:	2380      	movs	r3, #128	; 0x80
 8002c2e:	01db      	lsls	r3, r3, #7
 8002c30:	4a9d      	ldr	r2, [pc, #628]	; (8002ea8 <MX_GPIO_Init+0x2b0>)
 8002c32:	0019      	movs	r1, r3
 8002c34:	0010      	movs	r0, r2
 8002c36:	f7ff fb95 	bl	8002364 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_CS_GPIO_Port, MEM_CS_Pin);
 8002c3a:	2380      	movs	r3, #128	; 0x80
 8002c3c:	021b      	lsls	r3, r3, #8
 8002c3e:	4a9a      	ldr	r2, [pc, #616]	; (8002ea8 <MX_GPIO_Init+0x2b0>)
 8002c40:	0019      	movs	r1, r3
 8002c42:	0010      	movs	r0, r2
 8002c44:	f7ff fb8e 	bl	8002364 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_CS_GPIO_Port, DISP_CS_Pin);
 8002c48:	23a0      	movs	r3, #160	; 0xa0
 8002c4a:	05db      	lsls	r3, r3, #23
 8002c4c:	2140      	movs	r1, #64	; 0x40
 8002c4e:	0018      	movs	r0, r3
 8002c50:	f7ff fb88 	bl	8002364 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_D_C_GPIO_Port, DISP_D_C_Pin);
 8002c54:	23a0      	movs	r3, #160	; 0xa0
 8002c56:	05db      	lsls	r3, r3, #23
 8002c58:	2180      	movs	r1, #128	; 0x80
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	f7ff fb82 	bl	8002364 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(BF_GPIO_Port, BF_Pin);
 8002c60:	4b91      	ldr	r3, [pc, #580]	; (8002ea8 <MX_GPIO_Init+0x2b0>)
 8002c62:	2140      	movs	r1, #64	; 0x40
 8002c64:	0018      	movs	r0, r3
 8002c66:	f7ff fb7d 	bl	8002364 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_1_GPIO_Port, TEST_1_Pin);
 8002c6a:	2380      	movs	r3, #128	; 0x80
 8002c6c:	011a      	lsls	r2, r3, #4
 8002c6e:	23a0      	movs	r3, #160	; 0xa0
 8002c70:	05db      	lsls	r3, r3, #23
 8002c72:	0011      	movs	r1, r2
 8002c74:	0018      	movs	r0, r3
 8002c76:	f7ff fb81 	bl	800237c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_2_GPIO_Port, TEST_2_Pin);
 8002c7a:	2380      	movs	r3, #128	; 0x80
 8002c7c:	015a      	lsls	r2, r3, #5
 8002c7e:	23a0      	movs	r3, #160	; 0xa0
 8002c80:	05db      	lsls	r3, r3, #23
 8002c82:	0011      	movs	r1, r2
 8002c84:	0018      	movs	r0, r3
 8002c86:	f7ff fb79 	bl	800237c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = MEM_HOLD_Pin;
 8002c8a:	003b      	movs	r3, r7
 8002c8c:	2280      	movs	r2, #128	; 0x80
 8002c8e:	0092      	lsls	r2, r2, #2
 8002c90:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002c92:	003b      	movs	r3, r7
 8002c94:	2201      	movs	r2, #1
 8002c96:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002c98:	003b      	movs	r3, r7
 8002c9a:	2203      	movs	r2, #3
 8002c9c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002c9e:	003b      	movs	r3, r7
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002ca4:	003b      	movs	r3, r7
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_HOLD_GPIO_Port, &GPIO_InitStruct);
 8002caa:	003b      	movs	r3, r7
 8002cac:	4a7d      	ldr	r2, [pc, #500]	; (8002ea4 <MX_GPIO_Init+0x2ac>)
 8002cae:	0019      	movs	r1, r3
 8002cb0:	0010      	movs	r0, r2
 8002cb2:	f009 fee7 	bl	800ca84 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_WP_Pin;
 8002cb6:	003b      	movs	r3, r7
 8002cb8:	2280      	movs	r2, #128	; 0x80
 8002cba:	01d2      	lsls	r2, r2, #7
 8002cbc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002cbe:	003b      	movs	r3, r7
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002cc4:	003b      	movs	r3, r7
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002cca:	003b      	movs	r3, r7
 8002ccc:	2200      	movs	r2, #0
 8002cce:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002cd0:	003b      	movs	r3, r7
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_WP_GPIO_Port, &GPIO_InitStruct);
 8002cd6:	003b      	movs	r3, r7
 8002cd8:	4a73      	ldr	r2, [pc, #460]	; (8002ea8 <MX_GPIO_Init+0x2b0>)
 8002cda:	0019      	movs	r1, r3
 8002cdc:	0010      	movs	r0, r2
 8002cde:	f009 fed1 	bl	800ca84 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_CS_Pin;
 8002ce2:	003b      	movs	r3, r7
 8002ce4:	2280      	movs	r2, #128	; 0x80
 8002ce6:	0212      	lsls	r2, r2, #8
 8002ce8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002cea:	003b      	movs	r3, r7
 8002cec:	2201      	movs	r2, #1
 8002cee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002cf0:	003b      	movs	r3, r7
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002cf6:	003b      	movs	r3, r7
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002cfc:	003b      	movs	r3, r7
 8002cfe:	2200      	movs	r2, #0
 8002d00:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_CS_GPIO_Port, &GPIO_InitStruct);
 8002d02:	003b      	movs	r3, r7
 8002d04:	4a68      	ldr	r2, [pc, #416]	; (8002ea8 <MX_GPIO_Init+0x2b0>)
 8002d06:	0019      	movs	r1, r3
 8002d08:	0010      	movs	r0, r2
 8002d0a:	f009 febb 	bl	800ca84 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_1_Pin;
 8002d0e:	003b      	movs	r3, r7
 8002d10:	2201      	movs	r2, #1
 8002d12:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002d14:	003b      	movs	r3, r7
 8002d16:	2200      	movs	r2, #0
 8002d18:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002d1a:	003b      	movs	r3, r7
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_1_GPIO_Port, &GPIO_InitStruct);
 8002d20:	003a      	movs	r2, r7
 8002d22:	23a0      	movs	r3, #160	; 0xa0
 8002d24:	05db      	lsls	r3, r3, #23
 8002d26:	0011      	movs	r1, r2
 8002d28:	0018      	movs	r0, r3
 8002d2a:	f009 feab 	bl	800ca84 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_2_Pin;
 8002d2e:	003b      	movs	r3, r7
 8002d30:	2202      	movs	r2, #2
 8002d32:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002d34:	003b      	movs	r3, r7
 8002d36:	2200      	movs	r2, #0
 8002d38:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002d3a:	003b      	movs	r3, r7
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_2_GPIO_Port, &GPIO_InitStruct);
 8002d40:	003a      	movs	r2, r7
 8002d42:	23a0      	movs	r3, #160	; 0xa0
 8002d44:	05db      	lsls	r3, r3, #23
 8002d46:	0011      	movs	r1, r2
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f009 fe9b 	bl	800ca84 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_3_Pin;
 8002d4e:	003b      	movs	r3, r7
 8002d50:	2210      	movs	r2, #16
 8002d52:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002d54:	003b      	movs	r3, r7
 8002d56:	2200      	movs	r2, #0
 8002d58:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002d5a:	003b      	movs	r3, r7
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_3_GPIO_Port, &GPIO_InitStruct);
 8002d60:	003a      	movs	r2, r7
 8002d62:	23a0      	movs	r3, #160	; 0xa0
 8002d64:	05db      	lsls	r3, r3, #23
 8002d66:	0011      	movs	r1, r2
 8002d68:	0018      	movs	r0, r3
 8002d6a:	f009 fe8b 	bl	800ca84 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 8002d6e:	003b      	movs	r3, r7
 8002d70:	2240      	movs	r2, #64	; 0x40
 8002d72:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002d74:	003b      	movs	r3, r7
 8002d76:	2201      	movs	r2, #1
 8002d78:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002d7a:	003b      	movs	r3, r7
 8002d7c:	2203      	movs	r2, #3
 8002d7e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002d80:	003b      	movs	r3, r7
 8002d82:	2200      	movs	r2, #0
 8002d84:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002d86:	003b      	movs	r3, r7
 8002d88:	2200      	movs	r2, #0
 8002d8a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 8002d8c:	003a      	movs	r2, r7
 8002d8e:	23a0      	movs	r3, #160	; 0xa0
 8002d90:	05db      	lsls	r3, r3, #23
 8002d92:	0011      	movs	r1, r2
 8002d94:	0018      	movs	r0, r3
 8002d96:	f009 fe75 	bl	800ca84 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_D_C_Pin;
 8002d9a:	003b      	movs	r3, r7
 8002d9c:	2280      	movs	r2, #128	; 0x80
 8002d9e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002da0:	003b      	movs	r3, r7
 8002da2:	2201      	movs	r2, #1
 8002da4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002da6:	003b      	movs	r3, r7
 8002da8:	2203      	movs	r2, #3
 8002daa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002dac:	003b      	movs	r3, r7
 8002dae:	2200      	movs	r2, #0
 8002db0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002db2:	003b      	movs	r3, r7
 8002db4:	2200      	movs	r2, #0
 8002db6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_D_C_GPIO_Port, &GPIO_InitStruct);
 8002db8:	003a      	movs	r2, r7
 8002dba:	23a0      	movs	r3, #160	; 0xa0
 8002dbc:	05db      	lsls	r3, r3, #23
 8002dbe:	0011      	movs	r1, r2
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	f009 fe5f 	bl	800ca84 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BF_Pin;
 8002dc6:	003b      	movs	r3, r7
 8002dc8:	2240      	movs	r2, #64	; 0x40
 8002dca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002dcc:	003b      	movs	r3, r7
 8002dce:	2201      	movs	r2, #1
 8002dd0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002dd2:	003b      	movs	r3, r7
 8002dd4:	2203      	movs	r2, #3
 8002dd6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002dd8:	003b      	movs	r3, r7
 8002dda:	2200      	movs	r2, #0
 8002ddc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002dde:	003b      	movs	r3, r7
 8002de0:	2200      	movs	r2, #0
 8002de2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BF_GPIO_Port, &GPIO_InitStruct);
 8002de4:	003b      	movs	r3, r7
 8002de6:	4a30      	ldr	r2, [pc, #192]	; (8002ea8 <MX_GPIO_Init+0x2b0>)
 8002de8:	0019      	movs	r1, r3
 8002dea:	0010      	movs	r0, r2
 8002dec:	f009 fe4a 	bl	800ca84 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_1_Pin;
 8002df0:	003b      	movs	r3, r7
 8002df2:	2280      	movs	r2, #128	; 0x80
 8002df4:	0112      	lsls	r2, r2, #4
 8002df6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002df8:	003b      	movs	r3, r7
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002dfe:	003b      	movs	r3, r7
 8002e00:	2203      	movs	r2, #3
 8002e02:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002e04:	003b      	movs	r3, r7
 8002e06:	2200      	movs	r2, #0
 8002e08:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002e0a:	003b      	movs	r3, r7
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_1_GPIO_Port, &GPIO_InitStruct);
 8002e10:	003a      	movs	r2, r7
 8002e12:	23a0      	movs	r3, #160	; 0xa0
 8002e14:	05db      	lsls	r3, r3, #23
 8002e16:	0011      	movs	r1, r2
 8002e18:	0018      	movs	r0, r3
 8002e1a:	f009 fe33 	bl	800ca84 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_2_Pin;
 8002e1e:	003b      	movs	r3, r7
 8002e20:	2280      	movs	r2, #128	; 0x80
 8002e22:	0152      	lsls	r2, r2, #5
 8002e24:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002e26:	003b      	movs	r3, r7
 8002e28:	2201      	movs	r2, #1
 8002e2a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002e2c:	003b      	movs	r3, r7
 8002e2e:	2203      	movs	r2, #3
 8002e30:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002e32:	003b      	movs	r3, r7
 8002e34:	2200      	movs	r2, #0
 8002e36:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002e38:	003b      	movs	r3, r7
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_2_GPIO_Port, &GPIO_InitStruct);
 8002e3e:	003a      	movs	r2, r7
 8002e40:	23a0      	movs	r3, #160	; 0xa0
 8002e42:	05db      	lsls	r3, r3, #23
 8002e44:	0011      	movs	r1, r2
 8002e46:	0018      	movs	r0, r3
 8002e48:	f009 fe1c 	bl	800ca84 <LL_GPIO_Init>
  	  GPIO_InitStruct.Pin = KEY_4_Pin;
 8002e4c:	003b      	movs	r3, r7
 8002e4e:	2280      	movs	r2, #128	; 0x80
 8002e50:	0192      	lsls	r2, r2, #6
 8002e52:	601a      	str	r2, [r3, #0]
  	  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002e54:	003b      	movs	r3, r7
 8002e56:	2200      	movs	r2, #0
 8002e58:	605a      	str	r2, [r3, #4]
  	  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002e5a:	003b      	movs	r3, r7
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	611a      	str	r2, [r3, #16]
  	  LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 8002e60:	003a      	movs	r2, r7
 8002e62:	23a0      	movs	r3, #160	; 0xa0
 8002e64:	05db      	lsls	r3, r3, #23
 8002e66:	0011      	movs	r1, r2
 8002e68:	0018      	movs	r0, r3
 8002e6a:	f009 fe0b 	bl	800ca84 <LL_GPIO_Init>
  	  /**/
  	    GPIO_InitStruct.Pin = KEY_5_Pin;
 8002e6e:	003b      	movs	r3, r7
 8002e70:	2280      	movs	r2, #128	; 0x80
 8002e72:	01d2      	lsls	r2, r2, #7
 8002e74:	601a      	str	r2, [r3, #0]
  	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002e76:	003b      	movs	r3, r7
 8002e78:	2200      	movs	r2, #0
 8002e7a:	605a      	str	r2, [r3, #4]
  	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002e7c:	003b      	movs	r3, r7
 8002e7e:	2201      	movs	r2, #1
 8002e80:	611a      	str	r2, [r3, #16]
  	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 8002e82:	003a      	movs	r2, r7
 8002e84:	23a0      	movs	r3, #160	; 0xa0
 8002e86:	05db      	lsls	r3, r3, #23
 8002e88:	0011      	movs	r1, r2
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	f009 fdfa 	bl	800ca84 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_EnableFastModePlus(LL_SYSCFG_I2C_FASTMODEPLUS_PB9);
 8002e90:	2380      	movs	r3, #128	; 0x80
 8002e92:	031b      	lsls	r3, r3, #12
 8002e94:	0018      	movs	r0, r3
 8002e96:	f7ff fa55 	bl	8002344 <LL_SYSCFG_EnableFastModePlus>

}
 8002e9a:	46c0      	nop			; (mov r8, r8)
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	b006      	add	sp, #24
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	46c0      	nop			; (mov r8, r8)
 8002ea4:	50000400 	.word	0x50000400
 8002ea8:	50000800 	.word	0x50000800

08002eac <USART2_RX_Callback>:
//	    GPIO_InitStruct.Pin = KEY_5_Pin;
//	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
//	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
//	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
void  USART2_RX_Callback(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0

  dt1 = LL_USART_ReceiveData9(USART2);// LL implementaion of 1 byte receive
 8002eb0:	4b16      	ldr	r3, [pc, #88]	; (8002f0c <USART2_RX_Callback+0x60>)
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	f7ff fa38 	bl	8002328 <LL_USART_ReceiveData9>
 8002eb8:	0003      	movs	r3, r0
 8002eba:	001a      	movs	r2, r3
 8002ebc:	4b14      	ldr	r3, [pc, #80]	; (8002f10 <USART2_RX_Callback+0x64>)
 8002ebe:	801a      	strh	r2, [r3, #0]
	dt1 = (uint16_t)(USART2->RDR & 0x01FF);//CMSIS implementaion of 1 byte receive
 8002ec0:	4b12      	ldr	r3, [pc, #72]	; (8002f0c <USART2_RX_Callback+0x60>)
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	05db      	lsls	r3, r3, #23
 8002ec8:	0ddb      	lsrs	r3, r3, #23
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	4b10      	ldr	r3, [pc, #64]	; (8002f10 <USART2_RX_Callback+0x64>)
 8002ece:	801a      	strh	r2, [r3, #0]
  ByteReceived=1;
 8002ed0:	4b10      	ldr	r3, [pc, #64]	; (8002f14 <USART2_RX_Callback+0x68>)
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	701a      	strb	r2, [r3, #0]
  if(dt1>0xFF){
 8002ed6:	4b0e      	ldr	r3, [pc, #56]	; (8002f10 <USART2_RX_Callback+0x64>)
 8002ed8:	881b      	ldrh	r3, [r3, #0]
 8002eda:	2bff      	cmp	r3, #255	; 0xff
 8002edc:	d90a      	bls.n	8002ef4 <USART2_RX_Callback+0x48>
	  cmd[0]=dt1;
 8002ede:	4b0c      	ldr	r3, [pc, #48]	; (8002f10 <USART2_RX_Callback+0x64>)
 8002ee0:	881b      	ldrh	r3, [r3, #0]
 8002ee2:	b2da      	uxtb	r2, r3
 8002ee4:	4b0c      	ldr	r3, [pc, #48]	; (8002f18 <USART2_RX_Callback+0x6c>)
 8002ee6:	701a      	strb	r2, [r3, #0]
	  ind = 0;
 8002ee8:	4b0c      	ldr	r3, [pc, #48]	; (8002f1c <USART2_RX_Callback+0x70>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	801a      	strh	r2, [r3, #0]
	  firstByteReceived=1;
 8002eee:	4b0c      	ldr	r3, [pc, #48]	; (8002f20 <USART2_RX_Callback+0x74>)
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	701a      	strb	r2, [r3, #0]
//  while (!LL_USART_IsActiveFlag_TXE(USART2)) {}
//  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
  }
//  cmdReceive();
  if(firstByteReceived==1){
 8002ef4:	4b0a      	ldr	r3, [pc, #40]	; (8002f20 <USART2_RX_Callback+0x74>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d104      	bne.n	8002f06 <USART2_RX_Callback+0x5a>
	  cmdReceive(dt1);
 8002efc:	4b04      	ldr	r3, [pc, #16]	; (8002f10 <USART2_RX_Callback+0x64>)
 8002efe:	881b      	ldrh	r3, [r3, #0]
 8002f00:	0018      	movs	r0, r3
 8002f02:	f000 f87f 	bl	8003004 <cmdReceive>
  }
}
 8002f06:	46c0      	nop			; (mov r8, r8)
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40004400 	.word	0x40004400
 8002f10:	200035de 	.word	0x200035de
 8002f14:	20003160 	.word	0x20003160
 8002f18:	200055e4 	.word	0x200055e4
 8002f1c:	20003162 	.word	0x20003162
 8002f20:	20003161 	.word	0x20003161

08002f24 <HAL_SPI_RxHalfCpltCallback>:
//====================================================================================================================
void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi2)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  	GPIOA->ODR |= 1 << 11;	//set test 1
 8002f2c:	23a0      	movs	r3, #160	; 0xa0
 8002f2e:	05db      	lsls	r3, r3, #23
 8002f30:	695a      	ldr	r2, [r3, #20]
 8002f32:	23a0      	movs	r3, #160	; 0xa0
 8002f34:	05db      	lsls	r3, r3, #23
 8002f36:	2180      	movs	r1, #128	; 0x80
 8002f38:	0109      	lsls	r1, r1, #4
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	615a      	str	r2, [r3, #20]
  	GPIOA->ODR &= ~(1 << 11);	//reset test 1
 8002f3e:	23a0      	movs	r3, #160	; 0xa0
 8002f40:	05db      	lsls	r3, r3, #23
 8002f42:	695a      	ldr	r2, [r3, #20]
 8002f44:	23a0      	movs	r3, #160	; 0xa0
 8002f46:	05db      	lsls	r3, r3, #23
 8002f48:	490e      	ldr	r1, [pc, #56]	; (8002f84 <HAL_SPI_RxHalfCpltCallback+0x60>)
 8002f4a:	400a      	ands	r2, r1
 8002f4c:	615a      	str	r2, [r3, #20]
//  	if(cmd2Execute==0x11){
  	GPIOA->ODR &= ~(1 << 6);	//reset cs of DISPLAY
 8002f4e:	23a0      	movs	r3, #160	; 0xa0
 8002f50:	05db      	lsls	r3, r3, #23
 8002f52:	695a      	ldr	r2, [r3, #20]
 8002f54:	23a0      	movs	r3, #160	; 0xa0
 8002f56:	05db      	lsls	r3, r3, #23
 8002f58:	2140      	movs	r1, #64	; 0x40
 8002f5a:	438a      	bics	r2, r1
 8002f5c:	615a      	str	r2, [r3, #20]
  		GPIOA->ODR |= 1 << 7;	//set   dc of DISPLAY
 8002f5e:	23a0      	movs	r3, #160	; 0xa0
 8002f60:	05db      	lsls	r3, r3, #23
 8002f62:	695a      	ldr	r2, [r3, #20]
 8002f64:	23a0      	movs	r3, #160	; 0xa0
 8002f66:	05db      	lsls	r3, r3, #23
 8002f68:	2180      	movs	r1, #128	; 0x80
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	615a      	str	r2, [r3, #20]
  		HAL_USART_Transmit_DMA(&husart3, MEM_Buffer,len);
 8002f6e:	4b06      	ldr	r3, [pc, #24]	; (8002f88 <HAL_SPI_RxHalfCpltCallback+0x64>)
 8002f70:	881a      	ldrh	r2, [r3, #0]
 8002f72:	4906      	ldr	r1, [pc, #24]	; (8002f8c <HAL_SPI_RxHalfCpltCallback+0x68>)
 8002f74:	4b06      	ldr	r3, [pc, #24]	; (8002f90 <HAL_SPI_RxHalfCpltCallback+0x6c>)
 8002f76:	0018      	movs	r0, r3
 8002f78:	f008 fea4 	bl	800bcc4 <HAL_USART_Transmit_DMA>
//  	if(cmd2Execute==0x13){
//
////  	  		HAL_SPI_Transmit_DMA(&hspi1, MEM_Buffer,len);
//  	  	}

}
 8002f7c:	46c0      	nop			; (mov r8, r8)
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	b002      	add	sp, #8
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	fffff7ff 	.word	0xfffff7ff
 8002f88:	200035dc 	.word	0x200035dc
 8002f8c:	200035e4 	.word	0x200035e4
 8002f90:	20003394 	.word	0x20003394

08002f94 <HAL_SPI_RxCpltCallback>:
//==========================================================
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi2)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
//	if(cmd2Execute==0x11){
		GPIOC->ODR |= 1 << 15; // set cs
 8002f9c:	4b05      	ldr	r3, [pc, #20]	; (8002fb4 <HAL_SPI_RxCpltCallback+0x20>)
 8002f9e:	695a      	ldr	r2, [r3, #20]
 8002fa0:	4b04      	ldr	r3, [pc, #16]	; (8002fb4 <HAL_SPI_RxCpltCallback+0x20>)
 8002fa2:	2180      	movs	r1, #128	; 0x80
 8002fa4:	0209      	lsls	r1, r1, #8
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	615a      	str	r2, [r3, #20]
//	}
//	if(cmd2Execute==0x13){
//
//	}
}
 8002faa:	46c0      	nop			; (mov r8, r8)
 8002fac:	46bd      	mov	sp, r7
 8002fae:	b002      	add	sp, #8
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	46c0      	nop			; (mov r8, r8)
 8002fb4:	50000800 	.word	0x50000800

08002fb8 <HAL_USART_TxCpltCallback>:
//==============================================================
void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart3)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
	GPIOA->ODR &= ~(1 << 7);	//reset dc
 8002fc0:	23a0      	movs	r3, #160	; 0xa0
 8002fc2:	05db      	lsls	r3, r3, #23
 8002fc4:	695a      	ldr	r2, [r3, #20]
 8002fc6:	23a0      	movs	r3, #160	; 0xa0
 8002fc8:	05db      	lsls	r3, r3, #23
 8002fca:	2180      	movs	r1, #128	; 0x80
 8002fcc:	438a      	bics	r2, r1
 8002fce:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= 1 << 6;	//set cs
 8002fd0:	23a0      	movs	r3, #160	; 0xa0
 8002fd2:	05db      	lsls	r3, r3, #23
 8002fd4:	695a      	ldr	r2, [r3, #20]
 8002fd6:	23a0      	movs	r3, #160	; 0xa0
 8002fd8:	05db      	lsls	r3, r3, #23
 8002fda:	2140      	movs	r1, #64	; 0x40
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	615a      	str	r2, [r3, #20]

	GPIOC->ODR |= 1 << 6;	//set BF
 8002fe0:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <HAL_USART_TxCpltCallback+0x44>)
 8002fe2:	695a      	ldr	r2, [r3, #20]
 8002fe4:	4b05      	ldr	r3, [pc, #20]	; (8002ffc <HAL_USART_TxCpltCallback+0x44>)
 8002fe6:	2140      	movs	r1, #64	; 0x40
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	615a      	str	r2, [r3, #20]
	cmd2Execute=0;
 8002fec:	4b04      	ldr	r3, [pc, #16]	; (8003000 <HAL_USART_TxCpltCallback+0x48>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	701a      	strb	r2, [r3, #0]
}
 8002ff2:	46c0      	nop			; (mov r8, r8)
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	b002      	add	sp, #8
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	46c0      	nop			; (mov r8, r8)
 8002ffc:	50000800 	.word	0x50000800
 8003000:	2000345e 	.word	0x2000345e

08003004 <cmdReceive>:
//	GPIOC->ODR |= 1 << 6;	//set BF
//	cmd2Execute=0;
}
//==============================================================
	void cmdReceive (uint16_t dt1)
	{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	0002      	movs	r2, r0
 800300c:	1dbb      	adds	r3, r7, #6
 800300e:	801a      	strh	r2, [r3, #0]
//	  uint8_t inputCS=0;
	  uint8_t i=0;
 8003010:	230f      	movs	r3, #15
 8003012:	18fb      	adds	r3, r7, r3
 8003014:	2200      	movs	r2, #0
 8003016:	701a      	strb	r2, [r3, #0]
	  while (!ByteReceived) {}
 8003018:	46c0      	nop			; (mov r8, r8)
 800301a:	4b2b      	ldr	r3, [pc, #172]	; (80030c8 <cmdReceive+0xc4>)
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0fb      	beq.n	800301a <cmdReceive+0x16>
	  ByteReceived=0;
 8003022:	4b29      	ldr	r3, [pc, #164]	; (80030c8 <cmdReceive+0xc4>)
 8003024:	2200      	movs	r2, #0
 8003026:	701a      	strb	r2, [r3, #0]
	  cmd[ind] = dt1;
 8003028:	4b28      	ldr	r3, [pc, #160]	; (80030cc <cmdReceive+0xc8>)
 800302a:	881b      	ldrh	r3, [r3, #0]
 800302c:	001a      	movs	r2, r3
 800302e:	1dbb      	adds	r3, r7, #6
 8003030:	881b      	ldrh	r3, [r3, #0]
 8003032:	b2d9      	uxtb	r1, r3
 8003034:	4b26      	ldr	r3, [pc, #152]	; (80030d0 <cmdReceive+0xcc>)
 8003036:	5499      	strb	r1, [r3, r2]
	  ind++;
 8003038:	4b24      	ldr	r3, [pc, #144]	; (80030cc <cmdReceive+0xc8>)
 800303a:	881b      	ldrh	r3, [r3, #0]
 800303c:	3301      	adds	r3, #1
 800303e:	b29a      	uxth	r2, r3
 8003040:	4b22      	ldr	r3, [pc, #136]	; (80030cc <cmdReceive+0xc8>)
 8003042:	801a      	strh	r2, [r3, #0]
	  if(ind>=1){
 8003044:	4b21      	ldr	r3, [pc, #132]	; (80030cc <cmdReceive+0xc8>)
 8003046:	881b      	ldrh	r3, [r3, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d033      	beq.n	80030b4 <cmdReceive+0xb0>
//		  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
		  if(ind>cmd[1]+1){
 800304c:	4b1f      	ldr	r3, [pc, #124]	; (80030cc <cmdReceive+0xc8>)
 800304e:	881b      	ldrh	r3, [r3, #0]
 8003050:	001a      	movs	r2, r3
 8003052:	4b1f      	ldr	r3, [pc, #124]	; (80030d0 <cmdReceive+0xcc>)
 8003054:	785b      	ldrb	r3, [r3, #1]
 8003056:	3301      	adds	r3, #1
 8003058:	429a      	cmp	r2, r3
 800305a:	dd2b      	ble.n	80030b4 <cmdReceive+0xb0>
//			  LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 for(i=0;i<(cmd[1]+2);i++){
 800305c:	230f      	movs	r3, #15
 800305e:	18fb      	adds	r3, r7, r3
 8003060:	2200      	movs	r2, #0
 8003062:	701a      	strb	r2, [r3, #0]
 8003064:	e00f      	b.n	8003086 <cmdReceive+0x82>
				 inputCS+=cmd[i];
 8003066:	210f      	movs	r1, #15
 8003068:	187b      	adds	r3, r7, r1
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	4a18      	ldr	r2, [pc, #96]	; (80030d0 <cmdReceive+0xcc>)
 800306e:	5cd2      	ldrb	r2, [r2, r3]
 8003070:	4b18      	ldr	r3, [pc, #96]	; (80030d4 <cmdReceive+0xd0>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	18d3      	adds	r3, r2, r3
 8003076:	b2da      	uxtb	r2, r3
 8003078:	4b16      	ldr	r3, [pc, #88]	; (80030d4 <cmdReceive+0xd0>)
 800307a:	701a      	strb	r2, [r3, #0]
			 for(i=0;i<(cmd[1]+2);i++){
 800307c:	187b      	adds	r3, r7, r1
 800307e:	781a      	ldrb	r2, [r3, #0]
 8003080:	187b      	adds	r3, r7, r1
 8003082:	3201      	adds	r2, #1
 8003084:	701a      	strb	r2, [r3, #0]
 8003086:	4b12      	ldr	r3, [pc, #72]	; (80030d0 <cmdReceive+0xcc>)
 8003088:	785b      	ldrb	r3, [r3, #1]
 800308a:	1c5a      	adds	r2, r3, #1
 800308c:	210f      	movs	r1, #15
 800308e:	187b      	adds	r3, r7, r1
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	429a      	cmp	r2, r3
 8003094:	dae7      	bge.n	8003066 <cmdReceive+0x62>
			 }
			 if((inputCS==0)&&(i==cmd[1]+2)){
 8003096:	4b0f      	ldr	r3, [pc, #60]	; (80030d4 <cmdReceive+0xd0>)
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10a      	bne.n	80030b4 <cmdReceive+0xb0>
 800309e:	187b      	adds	r3, r7, r1
 80030a0:	781a      	ldrb	r2, [r3, #0]
 80030a2:	4b0b      	ldr	r3, [pc, #44]	; (80030d0 <cmdReceive+0xcc>)
 80030a4:	785b      	ldrb	r3, [r3, #1]
 80030a6:	3302      	adds	r3, #2
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d103      	bne.n	80030b4 <cmdReceive+0xb0>
//			 	LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 	answer2CPU(cmd);
 80030ac:	4b08      	ldr	r3, [pc, #32]	; (80030d0 <cmdReceive+0xcc>)
 80030ae:	0018      	movs	r0, r3
 80030b0:	f000 fb24 	bl	80036fc <answer2CPU>
			 }
		  }
	  }
//	  ind = 0;
	  USART2->ICR|=USART_ICR_ORECF;
 80030b4:	4b08      	ldr	r3, [pc, #32]	; (80030d8 <cmdReceive+0xd4>)
 80030b6:	6a1a      	ldr	r2, [r3, #32]
 80030b8:	4b07      	ldr	r3, [pc, #28]	; (80030d8 <cmdReceive+0xd4>)
 80030ba:	2108      	movs	r1, #8
 80030bc:	430a      	orrs	r2, r1
 80030be:	621a      	str	r2, [r3, #32]
	}
 80030c0:	46c0      	nop			; (mov r8, r8)
 80030c2:	46bd      	mov	sp, r7
 80030c4:	b004      	add	sp, #16
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	20003160 	.word	0x20003160
 80030cc:	20003162 	.word	0x20003162
 80030d0:	200055e4 	.word	0x200055e4
 80030d4:	20003164 	.word	0x20003164
 80030d8:	40004400 	.word	0x40004400

080030dc <USART_AS_SPI_sendCMD>:
	void USART_AS_SPI_sendCMD(uint8_t byte) {
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	0002      	movs	r2, r0
 80030e4:	1dfb      	adds	r3, r7, #7
 80030e6:	701a      	strb	r2, [r3, #0]
			HAL_USART_Transmit(&husart3, (uint8_t*)&byte, 1, 10);
 80030e8:	1df9      	adds	r1, r7, #7
 80030ea:	4804      	ldr	r0, [pc, #16]	; (80030fc <USART_AS_SPI_sendCMD+0x20>)
 80030ec:	230a      	movs	r3, #10
 80030ee:	2201      	movs	r2, #1
 80030f0:	f008 fd2a 	bl	800bb48 <HAL_USART_Transmit>
		}
 80030f4:	46c0      	nop			; (mov r8, r8)
 80030f6:	46bd      	mov	sp, r7
 80030f8:	b002      	add	sp, #8
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	20003394 	.word	0x20003394

08003100 <weoInit>:
	void USART_AS_SPI_sendDAT(uint8_t byte) //(Without CS and D/C)
	{
		HAL_USART_Transmit(&husart3, (uint8_t*) &byte, 1, 10);
	}
	void weoInit(void) {
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0

		USART3->CR1 &= ~(USART_CR1_UE);
 8003104:	4b32      	ldr	r3, [pc, #200]	; (80031d0 <weoInit+0xd0>)
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	4b31      	ldr	r3, [pc, #196]	; (80031d0 <weoInit+0xd0>)
 800310a:	2101      	movs	r1, #1
 800310c:	438a      	bics	r2, r1
 800310e:	601a      	str	r2, [r3, #0]
		USART3->CR2 |= USART_CR2_MSBFIRST;
 8003110:	4b2f      	ldr	r3, [pc, #188]	; (80031d0 <weoInit+0xd0>)
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	4b2e      	ldr	r3, [pc, #184]	; (80031d0 <weoInit+0xd0>)
 8003116:	2180      	movs	r1, #128	; 0x80
 8003118:	0309      	lsls	r1, r1, #12
 800311a:	430a      	orrs	r2, r1
 800311c:	605a      	str	r2, [r3, #4]
		USART3->CR1 |= USART_CR1_UE;
 800311e:	4b2c      	ldr	r3, [pc, #176]	; (80031d0 <weoInit+0xd0>)
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	4b2b      	ldr	r3, [pc, #172]	; (80031d0 <weoInit+0xd0>)
 8003124:	2101      	movs	r1, #1
 8003126:	430a      	orrs	r2, r1
 8003128:	601a      	str	r2, [r3, #0]

		HAL_Delay(1);
 800312a:	2001      	movs	r0, #1
 800312c:	f002 f95c 	bl	80053e8 <HAL_Delay>
		HAL_Delay(1);
 8003130:	2001      	movs	r0, #1
 8003132:	f002 f959 	bl	80053e8 <HAL_Delay>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003136:	4b27      	ldr	r3, [pc, #156]	; (80031d4 <weoInit+0xd4>)
 8003138:	2100      	movs	r1, #0
 800313a:	0018      	movs	r0, r3
 800313c:	f007 fc50 	bl	800a9e0 <HAL_TIM_PWM_Start>
		HAL_Delay(1);
 8003140:	2001      	movs	r0, #1
 8003142:	f002 f951 	bl	80053e8 <HAL_Delay>

		GPIOA->ODR &= ~(1 << 6);	//reset cs
 8003146:	23a0      	movs	r3, #160	; 0xa0
 8003148:	05db      	lsls	r3, r3, #23
 800314a:	695a      	ldr	r2, [r3, #20]
 800314c:	23a0      	movs	r3, #160	; 0xa0
 800314e:	05db      	lsls	r3, r3, #23
 8003150:	2140      	movs	r1, #64	; 0x40
 8003152:	438a      	bics	r2, r1
 8003154:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1 << 7);	// reset dc
 8003156:	23a0      	movs	r3, #160	; 0xa0
 8003158:	05db      	lsls	r3, r3, #23
 800315a:	695a      	ldr	r2, [r3, #20]
 800315c:	23a0      	movs	r3, #160	; 0xa0
 800315e:	05db      	lsls	r3, r3, #23
 8003160:	2180      	movs	r1, #128	; 0x80
 8003162:	438a      	bics	r2, r1
 8003164:	615a      	str	r2, [r3, #20]
		USART_AS_SPI_sendCMD(0xAF);
 8003166:	20af      	movs	r0, #175	; 0xaf
 8003168:	f7ff ffb8 	bl	80030dc <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA0);	//Set Re-map
 800316c:	20a0      	movs	r0, #160	; 0xa0
 800316e:	f7ff ffb5 	bl	80030dc <USART_AS_SPI_sendCMD>
//		USART_AS_SPI_sendCMD(0x54);
//		USART_AS_SPI_sendCMD(0b00010100);
		USART_AS_SPI_sendCMD(0x51); //	0x51 is a proper remap!
 8003172:	2051      	movs	r0, #81	; 0x51
 8003174:	f7ff ffb2 	bl	80030dc <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 8003178:	2081      	movs	r0, #129	; 0x81
 800317a:	f7ff ffaf 	bl	80030dc <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xFF);
 800317e:	20ff      	movs	r0, #255	; 0xff
 8003180:	f7ff ffac 	bl	80030dc <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA1);	//Set Display Start Line
 8003184:	20a1      	movs	r0, #161	; 0xa1
 8003186:	f7ff ffa9 	bl	80030dc <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 800318a:	2000      	movs	r0, #0
 800318c:	f7ff ffa6 	bl	80030dc <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA2);	//Set Display Offset
 8003190:	20a2      	movs	r0, #162	; 0xa2
 8003192:	f7ff ffa3 	bl	80030dc <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 8003196:	2000      	movs	r0, #0
 8003198:	f7ff ffa0 	bl	80030dc <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA8);  // Select Multiplex Ratio
 800319c:	20a8      	movs	r0, #168	; 0xa8
 800319e:	f7ff ff9d 	bl	80030dc <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x7F); // Default => 0x3F (1/64 Duty)	0x1F(1/32 Duty)
 80031a2:	207f      	movs	r0, #127	; 0x7f
 80031a4:	f7ff ff9a 	bl	80030dc <USART_AS_SPI_sendCMD>
		GPIOA->ODR |= 1 << 7;	//set dc
 80031a8:	23a0      	movs	r3, #160	; 0xa0
 80031aa:	05db      	lsls	r3, r3, #23
 80031ac:	695a      	ldr	r2, [r3, #20]
 80031ae:	23a0      	movs	r3, #160	; 0xa0
 80031b0:	05db      	lsls	r3, r3, #23
 80031b2:	2180      	movs	r1, #128	; 0x80
 80031b4:	430a      	orrs	r2, r1
 80031b6:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= 1 << 6;	//set cs
 80031b8:	23a0      	movs	r3, #160	; 0xa0
 80031ba:	05db      	lsls	r3, r3, #23
 80031bc:	695a      	ldr	r2, [r3, #20]
 80031be:	23a0      	movs	r3, #160	; 0xa0
 80031c0:	05db      	lsls	r3, r3, #23
 80031c2:	2140      	movs	r1, #64	; 0x40
 80031c4:	430a      	orrs	r2, r1
 80031c6:	615a      	str	r2, [r3, #20]
		//=======================================================================================================
	}
 80031c8:	46c0      	nop			; (mov r8, r8)
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	46c0      	nop			; (mov r8, r8)
 80031d0:	40004800 	.word	0x40004800
 80031d4:	20003408 	.word	0x20003408

080031d8 <weoClear>:
	void weoClear(void) {
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
		uint16_t i;

					GPIOA->ODR &= ~(1 << 6);	//reset cs
 80031de:	23a0      	movs	r3, #160	; 0xa0
 80031e0:	05db      	lsls	r3, r3, #23
 80031e2:	695a      	ldr	r2, [r3, #20]
 80031e4:	23a0      	movs	r3, #160	; 0xa0
 80031e6:	05db      	lsls	r3, r3, #23
 80031e8:	2140      	movs	r1, #64	; 0x40
 80031ea:	438a      	bics	r2, r1
 80031ec:	615a      	str	r2, [r3, #20]
					GPIOA->ODR &= ~(1 << 7);	// reset dc
 80031ee:	23a0      	movs	r3, #160	; 0xa0
 80031f0:	05db      	lsls	r3, r3, #23
 80031f2:	695a      	ldr	r2, [r3, #20]
 80031f4:	23a0      	movs	r3, #160	; 0xa0
 80031f6:	05db      	lsls	r3, r3, #23
 80031f8:	2180      	movs	r1, #128	; 0x80
 80031fa:	438a      	bics	r2, r1
 80031fc:	615a      	str	r2, [r3, #20]
						USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 80031fe:	2075      	movs	r0, #117	; 0x75
 8003200:	f7ff ff6c 	bl	80030dc <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 8003204:	2000      	movs	r0, #0
 8003206:	f7ff ff69 	bl	80030dc <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 800320a:	207f      	movs	r0, #127	; 0x7f
 800320c:	f7ff ff66 	bl	80030dc <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 8003210:	2015      	movs	r0, #21
 8003212:	f7ff ff63 	bl	80030dc <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 8003216:	2000      	movs	r0, #0
 8003218:	f7ff ff60 	bl	80030dc <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 800321c:	207f      	movs	r0, #127	; 0x7f
 800321e:	f7ff ff5d 	bl	80030dc <USART_AS_SPI_sendCMD>
					GPIOA->ODR &= ~(1 << 6);	//reset cs
 8003222:	23a0      	movs	r3, #160	; 0xa0
 8003224:	05db      	lsls	r3, r3, #23
 8003226:	695a      	ldr	r2, [r3, #20]
 8003228:	23a0      	movs	r3, #160	; 0xa0
 800322a:	05db      	lsls	r3, r3, #23
 800322c:	2140      	movs	r1, #64	; 0x40
 800322e:	438a      	bics	r2, r1
 8003230:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 7;	// set dc
 8003232:	23a0      	movs	r3, #160	; 0xa0
 8003234:	05db      	lsls	r3, r3, #23
 8003236:	695a      	ldr	r2, [r3, #20]
 8003238:	23a0      	movs	r3, #160	; 0xa0
 800323a:	05db      	lsls	r3, r3, #23
 800323c:	2180      	movs	r1, #128	; 0x80
 800323e:	430a      	orrs	r2, r1
 8003240:	615a      	str	r2, [r3, #20]
					for (i = 0; i <= 8193;i++) {	//fullScreen + small reserve
 8003242:	1dbb      	adds	r3, r7, #6
 8003244:	2200      	movs	r2, #0
 8003246:	801a      	strh	r2, [r3, #0]
 8003248:	e00d      	b.n	8003266 <weoClear+0x8e>
						while(!(USART3->ISR & USART_ISR_TXE)){};
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	4b12      	ldr	r3, [pc, #72]	; (8003298 <weoClear+0xc0>)
 800324e:	69db      	ldr	r3, [r3, #28]
 8003250:	2280      	movs	r2, #128	; 0x80
 8003252:	4013      	ands	r3, r2
 8003254:	d0fa      	beq.n	800324c <weoClear+0x74>
						USART3->TDR = (uint8_t) 0x00;
 8003256:	4b10      	ldr	r3, [pc, #64]	; (8003298 <weoClear+0xc0>)
 8003258:	2200      	movs	r2, #0
 800325a:	629a      	str	r2, [r3, #40]	; 0x28
					for (i = 0; i <= 8193;i++) {	//fullScreen + small reserve
 800325c:	1dbb      	adds	r3, r7, #6
 800325e:	881a      	ldrh	r2, [r3, #0]
 8003260:	1dbb      	adds	r3, r7, #6
 8003262:	3201      	adds	r2, #1
 8003264:	801a      	strh	r2, [r3, #0]
 8003266:	1dbb      	adds	r3, r7, #6
 8003268:	881b      	ldrh	r3, [r3, #0]
 800326a:	4a0c      	ldr	r2, [pc, #48]	; (800329c <weoClear+0xc4>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d9ec      	bls.n	800324a <weoClear+0x72>
					}
					GPIOA->ODR &= ~(1 << 7);	//reset dc
 8003270:	23a0      	movs	r3, #160	; 0xa0
 8003272:	05db      	lsls	r3, r3, #23
 8003274:	695a      	ldr	r2, [r3, #20]
 8003276:	23a0      	movs	r3, #160	; 0xa0
 8003278:	05db      	lsls	r3, r3, #23
 800327a:	2180      	movs	r1, #128	; 0x80
 800327c:	438a      	bics	r2, r1
 800327e:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 6;	//set cs
 8003280:	23a0      	movs	r3, #160	; 0xa0
 8003282:	05db      	lsls	r3, r3, #23
 8003284:	695a      	ldr	r2, [r3, #20]
 8003286:	23a0      	movs	r3, #160	; 0xa0
 8003288:	05db      	lsls	r3, r3, #23
 800328a:	2140      	movs	r1, #64	; 0x40
 800328c:	430a      	orrs	r2, r1
 800328e:	615a      	str	r2, [r3, #20]
	}
 8003290:	46c0      	nop			; (mov r8, r8)
 8003292:	46bd      	mov	sp, r7
 8003294:	b002      	add	sp, #8
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40004800 	.word	0x40004800
 800329c:	00002001 	.word	0x00002001

080032a0 <weoDrawRectangleFilled>:
//========================================================================================================================
	void weoDrawRectangleFilled(unsigned char start_x, unsigned char start_y,
				unsigned char end_x, unsigned char end_y, unsigned char color,
				uint8_t MEM_Buffer[]) {
 80032a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	0005      	movs	r5, r0
 80032a8:	000c      	movs	r4, r1
 80032aa:	0010      	movs	r0, r2
 80032ac:	0019      	movs	r1, r3
 80032ae:	1dfb      	adds	r3, r7, #7
 80032b0:	1c2a      	adds	r2, r5, #0
 80032b2:	701a      	strb	r2, [r3, #0]
 80032b4:	1dbb      	adds	r3, r7, #6
 80032b6:	1c22      	adds	r2, r4, #0
 80032b8:	701a      	strb	r2, [r3, #0]
 80032ba:	1d7b      	adds	r3, r7, #5
 80032bc:	1c02      	adds	r2, r0, #0
 80032be:	701a      	strb	r2, [r3, #0]
 80032c0:	1d3b      	adds	r3, r7, #4
 80032c2:	1c0a      	adds	r2, r1, #0
 80032c4:	701a      	strb	r2, [r3, #0]
			uint16_t i = 0;
 80032c6:	240e      	movs	r4, #14
 80032c8:	193b      	adds	r3, r7, r4
 80032ca:	2200      	movs	r2, #0
 80032cc:	801a      	strh	r2, [r3, #0]
			uint8_t start_x_New,start_y_New,end_x_New,end_y_New;
			if (start_x > OLED_DIM_WIDTH || start_y > OLED_DIM_HEIGHT
 80032ce:	1dfb      	adds	r3, r7, #7
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	b25b      	sxtb	r3, r3
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	da00      	bge.n	80032da <weoDrawRectangleFilled+0x3a>
 80032d8:	e0b7      	b.n	800344a <weoDrawRectangleFilled+0x1aa>
 80032da:	1dbb      	adds	r3, r7, #6
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	b25b      	sxtb	r3, r3
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	da00      	bge.n	80032e6 <weoDrawRectangleFilled+0x46>
 80032e4:	e0b1      	b.n	800344a <weoDrawRectangleFilled+0x1aa>
					|| end_x > OLED_DIM_WIDTH || end_y > OLED_DIM_HEIGHT) {
 80032e6:	1d7b      	adds	r3, r7, #5
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	b25b      	sxtb	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	da00      	bge.n	80032f2 <weoDrawRectangleFilled+0x52>
 80032f0:	e0ab      	b.n	800344a <weoDrawRectangleFilled+0x1aa>
 80032f2:	1d3b      	adds	r3, r7, #4
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	b25b      	sxtb	r3, r3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	da00      	bge.n	80032fe <weoDrawRectangleFilled+0x5e>
 80032fc:	e0a5      	b.n	800344a <weoDrawRectangleFilled+0x1aa>
				return;
			}


			start_x_New=start_x;
 80032fe:	250d      	movs	r5, #13
 8003300:	197b      	adds	r3, r7, r5
 8003302:	1dfa      	adds	r2, r7, #7
 8003304:	7812      	ldrb	r2, [r2, #0]
 8003306:	701a      	strb	r2, [r3, #0]
			start_y_New=0x7F-end_y;
 8003308:	260c      	movs	r6, #12
 800330a:	19bb      	adds	r3, r7, r6
 800330c:	1d3a      	adds	r2, r7, #4
 800330e:	7812      	ldrb	r2, [r2, #0]
 8003310:	217f      	movs	r1, #127	; 0x7f
 8003312:	1a8a      	subs	r2, r1, r2
 8003314:	701a      	strb	r2, [r3, #0]
			end_x_New=end_x;
 8003316:	230b      	movs	r3, #11
 8003318:	18fb      	adds	r3, r7, r3
 800331a:	1d7a      	adds	r2, r7, #5
 800331c:	7812      	ldrb	r2, [r2, #0]
 800331e:	701a      	strb	r2, [r3, #0]
			end_y_New=0x7F-start_y;
 8003320:	220a      	movs	r2, #10
 8003322:	18bb      	adds	r3, r7, r2
 8003324:	1dba      	adds	r2, r7, #6
 8003326:	7812      	ldrb	r2, [r2, #0]
 8003328:	217f      	movs	r1, #127	; 0x7f
 800332a:	1a8a      	subs	r2, r1, r2
 800332c:	701a      	strb	r2, [r3, #0]

			GPIOA->ODR &= ~(1 << 6);	//reset cs
 800332e:	23a0      	movs	r3, #160	; 0xa0
 8003330:	05db      	lsls	r3, r3, #23
 8003332:	695a      	ldr	r2, [r3, #20]
 8003334:	23a0      	movs	r3, #160	; 0xa0
 8003336:	05db      	lsls	r3, r3, #23
 8003338:	2140      	movs	r1, #64	; 0x40
 800333a:	438a      	bics	r2, r1
 800333c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 800333e:	23a0      	movs	r3, #160	; 0xa0
 8003340:	05db      	lsls	r3, r3, #23
 8003342:	695a      	ldr	r2, [r3, #20]
 8003344:	23a0      	movs	r3, #160	; 0xa0
 8003346:	05db      	lsls	r3, r3, #23
 8003348:	2180      	movs	r1, #128	; 0x80
 800334a:	438a      	bics	r2, r1
 800334c:	615a      	str	r2, [r3, #20]
					USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 800334e:	2075      	movs	r0, #117	; 0x75
 8003350:	f7ff fec4 	bl	80030dc <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_x_New/1);
 8003354:	197b      	adds	r3, r7, r5
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	0018      	movs	r0, r3
 800335a:	f7ff febf 	bl	80030dc <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_x_New/1);
 800335e:	230b      	movs	r3, #11
 8003360:	18fb      	adds	r3, r7, r3
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	0018      	movs	r0, r3
 8003366:	f7ff feb9 	bl	80030dc <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 800336a:	2015      	movs	r0, #21
 800336c:	f7ff feb6 	bl	80030dc <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_y_New/2);
 8003370:	19bb      	adds	r3, r7, r6
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	085b      	lsrs	r3, r3, #1
 8003376:	b2db      	uxtb	r3, r3
 8003378:	0018      	movs	r0, r3
 800337a:	f7ff feaf 	bl	80030dc <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_y_New/2);
 800337e:	220a      	movs	r2, #10
 8003380:	18bb      	adds	r3, r7, r2
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	085b      	lsrs	r3, r3, #1
 8003386:	b2db      	uxtb	r3, r3
 8003388:	0018      	movs	r0, r3
 800338a:	f7ff fea7 	bl	80030dc <USART_AS_SPI_sendCMD>
			GPIOA->ODR |= 1 << 7;	//set dc
 800338e:	23a0      	movs	r3, #160	; 0xa0
 8003390:	05db      	lsls	r3, r3, #23
 8003392:	695a      	ldr	r2, [r3, #20]
 8003394:	23a0      	movs	r3, #160	; 0xa0
 8003396:	05db      	lsls	r3, r3, #23
 8003398:	2180      	movs	r1, #128	; 0x80
 800339a:	430a      	orrs	r2, r1
 800339c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 800339e:	23a0      	movs	r3, #160	; 0xa0
 80033a0:	05db      	lsls	r3, r3, #23
 80033a2:	695a      	ldr	r2, [r3, #20]
 80033a4:	23a0      	movs	r3, #160	; 0xa0
 80033a6:	05db      	lsls	r3, r3, #23
 80033a8:	2140      	movs	r1, #64	; 0x40
 80033aa:	430a      	orrs	r2, r1
 80033ac:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 6);	//reset cs
 80033ae:	23a0      	movs	r3, #160	; 0xa0
 80033b0:	05db      	lsls	r3, r3, #23
 80033b2:	695a      	ldr	r2, [r3, #20]
 80033b4:	23a0      	movs	r3, #160	; 0xa0
 80033b6:	05db      	lsls	r3, r3, #23
 80033b8:	2140      	movs	r1, #64	; 0x40
 80033ba:	438a      	bics	r2, r1
 80033bc:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 7;	// set dc
 80033be:	23a0      	movs	r3, #160	; 0xa0
 80033c0:	05db      	lsls	r3, r3, #23
 80033c2:	695a      	ldr	r2, [r3, #20]
 80033c4:	23a0      	movs	r3, #160	; 0xa0
 80033c6:	05db      	lsls	r3, r3, #23
 80033c8:	2180      	movs	r1, #128	; 0x80
 80033ca:	430a      	orrs	r2, r1
 80033cc:	615a      	str	r2, [r3, #20]

			for (i = 0; i < ((end_x_New - start_x_New + 1) * (end_y_New/2 - start_y_New /2 + 1));i++) {
 80033ce:	193b      	adds	r3, r7, r4
 80033d0:	2200      	movs	r2, #0
 80033d2:	801a      	strh	r2, [r3, #0]
 80033d4:	e012      	b.n	80033fc <weoDrawRectangleFilled+0x15c>
//			for (i = 0; i < len;i++) {
				while(!(USART3->ISR & USART_ISR_TXE)){};
 80033d6:	46c0      	nop			; (mov r8, r8)
 80033d8:	4b1e      	ldr	r3, [pc, #120]	; (8003454 <weoDrawRectangleFilled+0x1b4>)
 80033da:	69db      	ldr	r3, [r3, #28]
 80033dc:	2280      	movs	r2, #128	; 0x80
 80033de:	4013      	ands	r3, r2
 80033e0:	d0fa      	beq.n	80033d8 <weoDrawRectangleFilled+0x138>
				USART3->TDR =MEM_Buffer[i];
 80033e2:	210e      	movs	r1, #14
 80033e4:	187b      	adds	r3, r7, r1
 80033e6:	881b      	ldrh	r3, [r3, #0]
 80033e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033ea:	18d3      	adds	r3, r2, r3
 80033ec:	781a      	ldrb	r2, [r3, #0]
 80033ee:	4b19      	ldr	r3, [pc, #100]	; (8003454 <weoDrawRectangleFilled+0x1b4>)
 80033f0:	629a      	str	r2, [r3, #40]	; 0x28
			for (i = 0; i < ((end_x_New - start_x_New + 1) * (end_y_New/2 - start_y_New /2 + 1));i++) {
 80033f2:	187b      	adds	r3, r7, r1
 80033f4:	881a      	ldrh	r2, [r3, #0]
 80033f6:	187b      	adds	r3, r7, r1
 80033f8:	3201      	adds	r2, #1
 80033fa:	801a      	strh	r2, [r3, #0]
 80033fc:	230e      	movs	r3, #14
 80033fe:	18fb      	adds	r3, r7, r3
 8003400:	881a      	ldrh	r2, [r3, #0]
 8003402:	230b      	movs	r3, #11
 8003404:	18fb      	adds	r3, r7, r3
 8003406:	7819      	ldrb	r1, [r3, #0]
 8003408:	230d      	movs	r3, #13
 800340a:	18fb      	adds	r3, r7, r3
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	1acb      	subs	r3, r1, r3
 8003410:	3301      	adds	r3, #1
 8003412:	210a      	movs	r1, #10
 8003414:	1879      	adds	r1, r7, r1
 8003416:	7809      	ldrb	r1, [r1, #0]
 8003418:	0849      	lsrs	r1, r1, #1
 800341a:	b2c9      	uxtb	r1, r1
 800341c:	0008      	movs	r0, r1
 800341e:	210c      	movs	r1, #12
 8003420:	1879      	adds	r1, r7, r1
 8003422:	7809      	ldrb	r1, [r1, #0]
 8003424:	0849      	lsrs	r1, r1, #1
 8003426:	b2c9      	uxtb	r1, r1
 8003428:	1a41      	subs	r1, r0, r1
 800342a:	3101      	adds	r1, #1
 800342c:	434b      	muls	r3, r1
 800342e:	429a      	cmp	r2, r3
 8003430:	dbd1      	blt.n	80033d6 <weoDrawRectangleFilled+0x136>
			}
//			while(!(USART3->ISR & USART_ISR_TXE)){};
			HAL_Delay(1);
 8003432:	2001      	movs	r0, #1
 8003434:	f001 ffd8 	bl	80053e8 <HAL_Delay>
//			GPIOA->ODR &= ~(1 << 7);	//reset dc
			GPIOA->ODR |= 1 << 6;	//set cs
 8003438:	23a0      	movs	r3, #160	; 0xa0
 800343a:	05db      	lsls	r3, r3, #23
 800343c:	695a      	ldr	r2, [r3, #20]
 800343e:	23a0      	movs	r3, #160	; 0xa0
 8003440:	05db      	lsls	r3, r3, #23
 8003442:	2140      	movs	r1, #64	; 0x40
 8003444:	430a      	orrs	r2, r1
 8003446:	615a      	str	r2, [r3, #20]
 8003448:	e000      	b.n	800344c <weoDrawRectangleFilled+0x1ac>
				return;
 800344a:	46c0      	nop			; (mov r8, r8)
		}
 800344c:	46bd      	mov	sp, r7
 800344e:	b005      	add	sp, #20
 8003450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003452:	46c0      	nop			; (mov r8, r8)
 8003454:	40004800 	.word	0x40004800

08003458 <weoDrawRectangleInit>:
//========================================================================================================================
	void weoDrawRectangleInit(unsigned char start_x, unsigned char start_y,
				unsigned char end_x, unsigned char end_y) {
 8003458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	0005      	movs	r5, r0
 8003460:	000c      	movs	r4, r1
 8003462:	0010      	movs	r0, r2
 8003464:	0019      	movs	r1, r3
 8003466:	1dfb      	adds	r3, r7, #7
 8003468:	1c2a      	adds	r2, r5, #0
 800346a:	701a      	strb	r2, [r3, #0]
 800346c:	1dbb      	adds	r3, r7, #6
 800346e:	1c22      	adds	r2, r4, #0
 8003470:	701a      	strb	r2, [r3, #0]
 8003472:	1d7b      	adds	r3, r7, #5
 8003474:	1c02      	adds	r2, r0, #0
 8003476:	701a      	strb	r2, [r3, #0]
 8003478:	1d3b      	adds	r3, r7, #4
 800347a:	1c0a      	adds	r2, r1, #0
 800347c:	701a      	strb	r2, [r3, #0]
			uint16_t i = 0;
 800347e:	230e      	movs	r3, #14
 8003480:	18fb      	adds	r3, r7, r3
 8003482:	2200      	movs	r2, #0
 8003484:	801a      	strh	r2, [r3, #0]
			uint8_t start_x_New,start_y_New,end_x_New,end_y_New;
			if (start_x > OLED_DIM_WIDTH || start_y > OLED_DIM_HEIGHT
 8003486:	1dfb      	adds	r3, r7, #7
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	b25b      	sxtb	r3, r3
 800348c:	2b00      	cmp	r3, #0
 800348e:	db66      	blt.n	800355e <weoDrawRectangleInit+0x106>
 8003490:	1dbb      	adds	r3, r7, #6
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	b25b      	sxtb	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	db61      	blt.n	800355e <weoDrawRectangleInit+0x106>
					|| end_x > OLED_DIM_WIDTH || end_y > OLED_DIM_HEIGHT) {
 800349a:	1d7b      	adds	r3, r7, #5
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	b25b      	sxtb	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	db5c      	blt.n	800355e <weoDrawRectangleInit+0x106>
 80034a4:	1d3b      	adds	r3, r7, #4
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	b25b      	sxtb	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	db57      	blt.n	800355e <weoDrawRectangleInit+0x106>
				return;
			}
			start_x_New=start_x;
 80034ae:	240d      	movs	r4, #13
 80034b0:	193b      	adds	r3, r7, r4
 80034b2:	1dfa      	adds	r2, r7, #7
 80034b4:	7812      	ldrb	r2, [r2, #0]
 80034b6:	701a      	strb	r2, [r3, #0]
			start_y_New=0x7F-end_y;
 80034b8:	250c      	movs	r5, #12
 80034ba:	197b      	adds	r3, r7, r5
 80034bc:	1d3a      	adds	r2, r7, #4
 80034be:	7812      	ldrb	r2, [r2, #0]
 80034c0:	217f      	movs	r1, #127	; 0x7f
 80034c2:	1a8a      	subs	r2, r1, r2
 80034c4:	701a      	strb	r2, [r3, #0]
			end_x_New=end_x;
 80034c6:	260b      	movs	r6, #11
 80034c8:	19bb      	adds	r3, r7, r6
 80034ca:	1d7a      	adds	r2, r7, #5
 80034cc:	7812      	ldrb	r2, [r2, #0]
 80034ce:	701a      	strb	r2, [r3, #0]
			end_y_New=0x7F-start_y;
 80034d0:	230a      	movs	r3, #10
 80034d2:	18fb      	adds	r3, r7, r3
 80034d4:	1dba      	adds	r2, r7, #6
 80034d6:	7812      	ldrb	r2, [r2, #0]
 80034d8:	217f      	movs	r1, #127	; 0x7f
 80034da:	1a8a      	subs	r2, r1, r2
 80034dc:	701a      	strb	r2, [r3, #0]

			GPIOA->ODR &= ~(1 << 6);	//reset cs
 80034de:	23a0      	movs	r3, #160	; 0xa0
 80034e0:	05db      	lsls	r3, r3, #23
 80034e2:	695a      	ldr	r2, [r3, #20]
 80034e4:	23a0      	movs	r3, #160	; 0xa0
 80034e6:	05db      	lsls	r3, r3, #23
 80034e8:	2140      	movs	r1, #64	; 0x40
 80034ea:	438a      	bics	r2, r1
 80034ec:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 80034ee:	23a0      	movs	r3, #160	; 0xa0
 80034f0:	05db      	lsls	r3, r3, #23
 80034f2:	695a      	ldr	r2, [r3, #20]
 80034f4:	23a0      	movs	r3, #160	; 0xa0
 80034f6:	05db      	lsls	r3, r3, #23
 80034f8:	2180      	movs	r1, #128	; 0x80
 80034fa:	438a      	bics	r2, r1
 80034fc:	615a      	str	r2, [r3, #20]
					USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 80034fe:	2075      	movs	r0, #117	; 0x75
 8003500:	f7ff fdec 	bl	80030dc <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_x_New/1);
 8003504:	193b      	adds	r3, r7, r4
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	0018      	movs	r0, r3
 800350a:	f7ff fde7 	bl	80030dc <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_x_New/1);
 800350e:	19bb      	adds	r3, r7, r6
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	0018      	movs	r0, r3
 8003514:	f7ff fde2 	bl	80030dc <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 8003518:	2015      	movs	r0, #21
 800351a:	f7ff fddf 	bl	80030dc <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_y_New/2);
 800351e:	197b      	adds	r3, r7, r5
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	085b      	lsrs	r3, r3, #1
 8003524:	b2db      	uxtb	r3, r3
 8003526:	0018      	movs	r0, r3
 8003528:	f7ff fdd8 	bl	80030dc <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_y_New/2);
 800352c:	230a      	movs	r3, #10
 800352e:	18fb      	adds	r3, r7, r3
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	085b      	lsrs	r3, r3, #1
 8003534:	b2db      	uxtb	r3, r3
 8003536:	0018      	movs	r0, r3
 8003538:	f7ff fdd0 	bl	80030dc <USART_AS_SPI_sendCMD>
			GPIOA->ODR |= 1 << 7;	//set dc
 800353c:	23a0      	movs	r3, #160	; 0xa0
 800353e:	05db      	lsls	r3, r3, #23
 8003540:	695a      	ldr	r2, [r3, #20]
 8003542:	23a0      	movs	r3, #160	; 0xa0
 8003544:	05db      	lsls	r3, r3, #23
 8003546:	2180      	movs	r1, #128	; 0x80
 8003548:	430a      	orrs	r2, r1
 800354a:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 800354c:	23a0      	movs	r3, #160	; 0xa0
 800354e:	05db      	lsls	r3, r3, #23
 8003550:	695a      	ldr	r2, [r3, #20]
 8003552:	23a0      	movs	r3, #160	; 0xa0
 8003554:	05db      	lsls	r3, r3, #23
 8003556:	2140      	movs	r1, #64	; 0x40
 8003558:	430a      	orrs	r2, r1
 800355a:	615a      	str	r2, [r3, #20]
 800355c:	e000      	b.n	8003560 <weoDrawRectangleInit+0x108>
				return;
 800355e:	46c0      	nop			; (mov r8, r8)
		}
 8003560:	46bd      	mov	sp, r7
 8003562:	b005      	add	sp, #20
 8003564:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003568 <I2C_SOUND_ChangePage>:
//		LL_GPIO_ResetOutputPin(GPIOC, DISP_RES_Pin);
		HAL_Delay(1);
//		LL_GPIO_SetOutputPin(GPIOC, DISP_RES_Pin);
		HAL_Delay(1);
	}
	void I2C_SOUND_ChangePage(uint8_t pageNum) {
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af02      	add	r7, sp, #8
 800356e:	0002      	movs	r2, r0
 8003570:	1dfb      	adds	r3, r7, #7
 8003572:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { 0x00, pageNum };
 8003574:	210c      	movs	r1, #12
 8003576:	187b      	adds	r3, r7, r1
 8003578:	2200      	movs	r2, #0
 800357a:	701a      	strb	r2, [r3, #0]
 800357c:	187b      	adds	r3, r7, r1
 800357e:	1dfa      	adds	r2, r7, #7
 8003580:	7812      	ldrb	r2, [r2, #0]
 8003582:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x30, buf, 2, 1000);
 8003584:	187a      	adds	r2, r7, r1
 8003586:	4806      	ldr	r0, [pc, #24]	; (80035a0 <I2C_SOUND_ChangePage+0x38>)
 8003588:	23fa      	movs	r3, #250	; 0xfa
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	2302      	movs	r3, #2
 8003590:	2130      	movs	r1, #48	; 0x30
 8003592:	f002 ff63 	bl	800645c <HAL_I2C_Master_Transmit>
	}
 8003596:	46c0      	nop			; (mov r8, r8)
 8003598:	46bd      	mov	sp, r7
 800359a:	b004      	add	sp, #16
 800359c:	bd80      	pop	{r7, pc}
 800359e:	46c0      	nop			; (mov r8, r8)
 80035a0:	20003234 	.word	0x20003234

080035a4 <WriteReg_I2C_SOUND>:
	void WriteReg_I2C_SOUND(uint8_t reg, uint8_t data) {
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af02      	add	r7, sp, #8
 80035aa:	0002      	movs	r2, r0
 80035ac:	1dfb      	adds	r3, r7, #7
 80035ae:	701a      	strb	r2, [r3, #0]
 80035b0:	1dbb      	adds	r3, r7, #6
 80035b2:	1c0a      	adds	r2, r1, #0
 80035b4:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { reg, data };
 80035b6:	210c      	movs	r1, #12
 80035b8:	187b      	adds	r3, r7, r1
 80035ba:	1dfa      	adds	r2, r7, #7
 80035bc:	7812      	ldrb	r2, [r2, #0]
 80035be:	701a      	strb	r2, [r3, #0]
 80035c0:	187b      	adds	r3, r7, r1
 80035c2:	1dba      	adds	r2, r7, #6
 80035c4:	7812      	ldrb	r2, [r2, #0]
 80035c6:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x30, buf, 2, 1000);	//(uint8_t*)&
 80035c8:	187a      	adds	r2, r7, r1
 80035ca:	4806      	ldr	r0, [pc, #24]	; (80035e4 <WriteReg_I2C_SOUND+0x40>)
 80035cc:	23fa      	movs	r3, #250	; 0xfa
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	2302      	movs	r3, #2
 80035d4:	2130      	movs	r1, #48	; 0x30
 80035d6:	f002 ff41 	bl	800645c <HAL_I2C_Master_Transmit>
	}
 80035da:	46c0      	nop			; (mov r8, r8)
 80035dc:	46bd      	mov	sp, r7
 80035de:	b004      	add	sp, #16
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	46c0      	nop			; (mov r8, r8)
 80035e4:	20003234 	.word	0x20003234

080035e8 <soundSetup>:
	void soundSetup(void) {
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
		I2C_SOUND_ChangePage(0x00);
 80035ec:	2000      	movs	r0, #0
 80035ee:	f7ff ffbb 	bl	8003568 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x01);	//Assert Software reset (P0, R1, D0=1)
 80035f2:	2101      	movs	r1, #1
 80035f4:	2001      	movs	r0, #1
 80035f6:	f7ff ffd5 	bl	80035a4 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x01);
 80035fa:	2001      	movs	r0, #1
 80035fc:	f7ff ffb4 	bl	8003568 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x02, 0x00);	//LDO output programmed as 1.8V and Level shifters powered up. (P1, R2, D5-D4=00, D3=0)
 8003600:	2100      	movs	r1, #0
 8003602:	2002      	movs	r0, #2
 8003604:	f7ff ffce 	bl	80035a4 <WriteReg_I2C_SOUND>
		HAL_Delay(15);
 8003608:	200f      	movs	r0, #15
 800360a:	f001 feed 	bl	80053e8 <HAL_Delay>
		I2C_SOUND_ChangePage(0x00);
 800360e:	2000      	movs	r0, #0
 8003610:	f7ff ffaa 	bl	8003568 <I2C_SOUND_ChangePage>
	WriteReg_I2C_SOUND(0x04,0x03);//PLL_clkin = MCLK, codec_clkin = PLL_CLK, MCLK should be 11.2896MHz
 8003614:	2103      	movs	r1, #3
 8003616:	2004      	movs	r0, #4
 8003618:	f7ff ffc4 	bl	80035a4 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x05,0x91);//Power up PLL, set P=1, R=1
 800361c:	2191      	movs	r1, #145	; 0x91
 800361e:	2005      	movs	r0, #5
 8003620:	f7ff ffc0 	bl	80035a4 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x06,0x04);//Set J = 4
 8003624:	2104      	movs	r1, #4
 8003626:	2006      	movs	r0, #6
 8003628:	f7ff ffbc 	bl	80035a4 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x07,0x00);//SET D=0000
 800362c:	2100      	movs	r1, #0
 800362e:	2007      	movs	r0, #7
 8003630:	f7ff ffb8 	bl	80035a4 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x08,0x00);//SET D=0000
 8003634:	2100      	movs	r1, #0
 8003636:	2008      	movs	r0, #8
 8003638:	f7ff ffb4 	bl	80035a4 <WriteReg_I2C_SOUND>
	HAL_Delay(15);
 800363c:	200f      	movs	r0, #15
 800363e:	f001 fed3 	bl	80053e8 <HAL_Delay>
	WriteReg_I2C_SOUND(0x0B,0x84);//DAC NDAC Powered up, set NDAC = 4
 8003642:	2184      	movs	r1, #132	; 0x84
 8003644:	200b      	movs	r0, #11
 8003646:	f7ff ffad 	bl	80035a4 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0C,0x82);//DAC MDAC Powered up, set MDAC = 2
 800364a:	2182      	movs	r1, #130	; 0x82
 800364c:	200c      	movs	r0, #12
 800364e:	f7ff ffa9 	bl	80035a4 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0D,0x00);//DAC OSR(9:0)-> DOSR=128
 8003652:	2100      	movs	r1, #0
 8003654:	200d      	movs	r0, #13
 8003656:	f7ff ffa5 	bl	80035a4 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0E,0x80);//DAC OSR(9:0)
 800365a:	2180      	movs	r1, #128	; 0x80
 800365c:	200e      	movs	r0, #14
 800365e:	f7ff ffa1 	bl	80035a4 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x1B, 0x00);	//Codec Interface control Word length = 16bits, BCLK&WCLK inputs, I2S mode. (P0, R27, D7-D6=00, D5-D4=00, D3-D2=00)
 8003662:	2100      	movs	r1, #0
 8003664:	201b      	movs	r0, #27
 8003666:	f7ff ff9d 	bl	80035a4 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x1C,0x00);//Data slot offset
 800366a:	2100      	movs	r1, #0
 800366c:	201c      	movs	r0, #28
 800366e:	f7ff ff99 	bl	80035a4 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x3c,0x02);//Dac Instruction programming PRB #2 for Mono routing. Type interpolation (x8) and 3 programmable	Biquads. (P0, R60, D4-D0=0010)
 8003672:	2102      	movs	r1, #2
 8003674:	203c      	movs	r0, #60	; 0x3c
 8003676:	f7ff ff95 	bl	80035a4 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x01);
 800367a:	2001      	movs	r0, #1
 800367c:	f7ff ff74 	bl	8003568 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x10);	//Master Reference Powered on (P1, R1, D4=1)
 8003680:	2110      	movs	r1, #16
 8003682:	2001      	movs	r0, #1
 8003684:	f7ff ff8e 	bl	80035a4 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x0A, 0x00);	//Output common mode for DAC set to 0.9V (default) (P1, R10)
 8003688:	2100      	movs	r1, #0
 800368a:	200a      	movs	r0, #10
 800368c:	f7ff ff8a 	bl	80035a4 <WriteReg_I2C_SOUND>
		////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x0C, 0x00);	// No analog routing to headphone//0x0c,0x15 by SB
 8003690:	2100      	movs	r1, #0
 8003692:	200c      	movs	r0, #12
 8003694:	f7ff ff86 	bl	80035a4 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x16, 0x00);	// Headphone volume=0//0x16,0x75 by SB
 8003698:	2100      	movs	r1, #0
 800369a:	2016      	movs	r0, #22
 800369c:	f7ff ff82 	bl	80035a4 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x18, 0x00);	//No need to enable Mixer M and Mixer P, AINL Voulme, 0dB Gain 0x18,0x75 by SB
 80036a0:	2100      	movs	r1, #0
 80036a2:	2018      	movs	r0, #24
 80036a4:	f7ff ff7e 	bl	80035a4 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x19, 0x00);	//No need to enable Mixer M and Mixer P, AINR Voulme, 0dB Gain 0x19,0x75 by SB
 80036a8:	2100      	movs	r1, #0
 80036aa:	2019      	movs	r0, #25
 80036ac:	f7ff ff7a 	bl	80035a4 <WriteReg_I2C_SOUND>
		//////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x09, 0x00);	//AINL,AINR are powered down
 80036b0:	2100      	movs	r1, #0
 80036b2:	2009      	movs	r0, #9
 80036b4:	f7ff ff76 	bl	80035a4 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 80036b8:	2100      	movs	r1, #0
 80036ba:	2010      	movs	r0, #16
 80036bc:	f7ff ff72 	bl	80035a4 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x2E, 0x00);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000)
 80036c0:	2100      	movs	r1, #0
 80036c2:	202e      	movs	r0, #46	; 0x2e
 80036c4:	f7ff ff6e 	bl	80035a4 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x30, 0x10);	//SPK driver Gain=6.0dB (P1, R48, D6-D4=001)
 80036c8:	2110      	movs	r1, #16
 80036ca:	2030      	movs	r0, #48	; 0x30
 80036cc:	f7ff ff6a 	bl	80035a4 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x2D, 0x02);	//SPK powered up (P1, R45, D1=1)
 80036d0:	2102      	movs	r1, #2
 80036d2:	202d      	movs	r0, #45	; 0x2d
 80036d4:	f7ff ff66 	bl	80035a4 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x00);
 80036d8:	2000      	movs	r0, #0
 80036da:	f7ff ff45 	bl	8003568 <I2C_SOUND_ChangePage>
		//////////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x3F, 0x90);	//DAC powered up, Soft step 1 per Fs. (P0, R63, D7=1, D5-D4=01, D3-D2=00, D1-D0=00)
 80036de:	2190      	movs	r1, #144	; 0x90
 80036e0:	203f      	movs	r0, #63	; 0x3f
 80036e2:	f7ff ff5f 	bl	80035a4 <WriteReg_I2C_SOUND>
		// 1<<7|1<<4|2 by SB
		WriteReg_I2C_SOUND(0x41, 0x00);	//DAC digital gain 0dB (P0, R65, D7-D0=00000000) cnDacValueOn by SB
 80036e6:	2100      	movs	r1, #0
 80036e8:	2041      	movs	r0, #65	; 0x41
 80036ea:	f7ff ff5b 	bl	80035a4 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x40, 0x04);	//DAC volume not muted. (P0, R64, D3=0, D2=1) 1<<4 by SB
 80036ee:	2104      	movs	r1, #4
 80036f0:	2040      	movs	r0, #64	; 0x40
 80036f2:	f7ff ff57 	bl	80035a4 <WriteReg_I2C_SOUND>
	}
 80036f6:	46c0      	nop			; (mov r8, r8)
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <answer2CPU>:
//=============================================================================================
	uint8_t answer2CPU(uint8_t cmd[]) {
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
		uint8_t keyboard = 0xFF;
 8003704:	230f      	movs	r3, #15
 8003706:	18fb      	adds	r3, r7, r3
 8003708:	22ff      	movs	r2, #255	; 0xff
 800370a:	701a      	strb	r2, [r3, #0]
//		uint16_t ans[10];
		uint8_t i;
		uint8_t myCS = 0;					//   COMMON PART FOR EVERY COMMAND
 800370c:	230d      	movs	r3, #13
 800370e:	18fb      	adds	r3, r7, r3
 8003710:	2200      	movs	r2, #0
 8003712:	701a      	strb	r2, [r3, #0]
		uint8_t myLength;
		uint16_t ind = 0;
 8003714:	230a      	movs	r3, #10
 8003716:	18fb      	adds	r3, r7, r3
 8003718:	2200      	movs	r2, #0
 800371a:	801a      	strh	r2, [r3, #0]

		cmd2Execute=0;
 800371c:	4bd3      	ldr	r3, [pc, #844]	; (8003a6c <answer2CPU+0x370>)
 800371e:	2200      	movs	r2, #0
 8003720:	701a      	strb	r2, [r3, #0]
		if ((cmd[0] == 0x11)||(cmd[0] == 0x12)||(cmd[0] == 0x13)||(cmd[0] == 0x14)) {GPIOC->ODR &= ~(1 << 6);}//reset BF
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	2b11      	cmp	r3, #17
 8003728:	d00b      	beq.n	8003742 <answer2CPU+0x46>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	2b12      	cmp	r3, #18
 8003730:	d007      	beq.n	8003742 <answer2CPU+0x46>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	2b13      	cmp	r3, #19
 8003738:	d003      	beq.n	8003742 <answer2CPU+0x46>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	2b14      	cmp	r3, #20
 8003740:	d105      	bne.n	800374e <answer2CPU+0x52>
 8003742:	4bcb      	ldr	r3, [pc, #812]	; (8003a70 <answer2CPU+0x374>)
 8003744:	695a      	ldr	r2, [r3, #20]
 8003746:	4bca      	ldr	r3, [pc, #808]	; (8003a70 <answer2CPU+0x374>)
 8003748:	2140      	movs	r1, #64	; 0x40
 800374a:	438a      	bics	r2, r1
 800374c:	615a      	str	r2, [r3, #20]
		ans[0] = cmd[0]|0x80;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	2280      	movs	r2, #128	; 0x80
 8003754:	4252      	negs	r2, r2
 8003756:	4313      	orrs	r3, r2
 8003758:	b2db      	uxtb	r3, r3
 800375a:	b29a      	uxth	r2, r3
 800375c:	4bc5      	ldr	r3, [pc, #788]	; (8003a74 <answer2CPU+0x378>)
 800375e:	801a      	strh	r2, [r3, #0]
//==================================================================================================
			if ((cmd[0] >= 0x10)&&(cmd[0] < 0x16)) { //answer is keyboard + stuff information                  0003
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	2b0f      	cmp	r3, #15
 8003766:	d800      	bhi.n	800376a <answer2CPU+0x6e>
 8003768:	e150      	b.n	8003a0c <answer2CPU+0x310>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	2b15      	cmp	r3, #21
 8003770:	d900      	bls.n	8003774 <answer2CPU+0x78>
 8003772:	e14b      	b.n	8003a0c <answer2CPU+0x310>
				if ((GPIOA->IDR & (1 << 0)) == 0) {
 8003774:	23a0      	movs	r3, #160	; 0xa0
 8003776:	05db      	lsls	r3, r3, #23
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	2201      	movs	r2, #1
 800377c:	4013      	ands	r3, r2
 800377e:	d106      	bne.n	800378e <answer2CPU+0x92>
					keyboard &= 0b11111110;
 8003780:	220f      	movs	r2, #15
 8003782:	18bb      	adds	r3, r7, r2
 8003784:	18ba      	adds	r2, r7, r2
 8003786:	7812      	ldrb	r2, [r2, #0]
 8003788:	2101      	movs	r1, #1
 800378a:	438a      	bics	r2, r1
 800378c:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 1)) == 0) {
 800378e:	23a0      	movs	r3, #160	; 0xa0
 8003790:	05db      	lsls	r3, r3, #23
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	2202      	movs	r2, #2
 8003796:	4013      	ands	r3, r2
 8003798:	d106      	bne.n	80037a8 <answer2CPU+0xac>
					keyboard &= 0b11111101;
 800379a:	220f      	movs	r2, #15
 800379c:	18bb      	adds	r3, r7, r2
 800379e:	18ba      	adds	r2, r7, r2
 80037a0:	7812      	ldrb	r2, [r2, #0]
 80037a2:	2102      	movs	r1, #2
 80037a4:	438a      	bics	r2, r1
 80037a6:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 4)) == 0) {
 80037a8:	23a0      	movs	r3, #160	; 0xa0
 80037aa:	05db      	lsls	r3, r3, #23
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	2210      	movs	r2, #16
 80037b0:	4013      	ands	r3, r2
 80037b2:	d106      	bne.n	80037c2 <answer2CPU+0xc6>
					keyboard &= 0b11111011;
 80037b4:	220f      	movs	r2, #15
 80037b6:	18bb      	adds	r3, r7, r2
 80037b8:	18ba      	adds	r2, r7, r2
 80037ba:	7812      	ldrb	r2, [r2, #0]
 80037bc:	2104      	movs	r1, #4
 80037be:	438a      	bics	r2, r1
 80037c0:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 13)) == 0) {
 80037c2:	23a0      	movs	r3, #160	; 0xa0
 80037c4:	05db      	lsls	r3, r3, #23
 80037c6:	691a      	ldr	r2, [r3, #16]
 80037c8:	2380      	movs	r3, #128	; 0x80
 80037ca:	019b      	lsls	r3, r3, #6
 80037cc:	4013      	ands	r3, r2
 80037ce:	d106      	bne.n	80037de <answer2CPU+0xe2>
					keyboard &= 0b11110111;
 80037d0:	220f      	movs	r2, #15
 80037d2:	18bb      	adds	r3, r7, r2
 80037d4:	18ba      	adds	r2, r7, r2
 80037d6:	7812      	ldrb	r2, [r2, #0]
 80037d8:	2108      	movs	r1, #8
 80037da:	438a      	bics	r2, r1
 80037dc:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 14)) == 0) {
 80037de:	23a0      	movs	r3, #160	; 0xa0
 80037e0:	05db      	lsls	r3, r3, #23
 80037e2:	691a      	ldr	r2, [r3, #16]
 80037e4:	2380      	movs	r3, #128	; 0x80
 80037e6:	01db      	lsls	r3, r3, #7
 80037e8:	4013      	ands	r3, r2
 80037ea:	d106      	bne.n	80037fa <answer2CPU+0xfe>
					keyboard &= 0b11101111;
 80037ec:	220f      	movs	r2, #15
 80037ee:	18bb      	adds	r3, r7, r2
 80037f0:	18ba      	adds	r2, r7, r2
 80037f2:	7812      	ldrb	r2, [r2, #0]
 80037f4:	2110      	movs	r1, #16
 80037f6:	438a      	bics	r2, r1
 80037f8:	701a      	strb	r2, [r3, #0]
				}

				keyboard = ~keyboard;
 80037fa:	210f      	movs	r1, #15
 80037fc:	187b      	adds	r3, r7, r1
 80037fe:	187a      	adds	r2, r7, r1
 8003800:	7812      	ldrb	r2, [r2, #0]
 8003802:	43d2      	mvns	r2, r2
 8003804:	701a      	strb	r2, [r3, #0]
//				keyboard&=bf;
				myLength = 0x04;
 8003806:	2009      	movs	r0, #9
 8003808:	183b      	adds	r3, r7, r0
 800380a:	2204      	movs	r2, #4
 800380c:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 800380e:	183b      	adds	r3, r7, r0
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	b29b      	uxth	r3, r3
 8003814:	3b02      	subs	r3, #2
 8003816:	b29a      	uxth	r2, r3
 8003818:	4b96      	ldr	r3, [pc, #600]	; (8003a74 <answer2CPU+0x378>)
 800381a:	805a      	strh	r2, [r3, #2]
				ans[2] = keyboard;				//			MANAGEMENT COMMANDS
 800381c:	187b      	adds	r3, r7, r1
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	b29a      	uxth	r2, r3
 8003822:	4b94      	ldr	r3, [pc, #592]	; (8003a74 <answer2CPU+0x378>)
 8003824:	809a      	strh	r2, [r3, #4]

				for (i = 0; i < myLength-1; i++) {
 8003826:	230e      	movs	r3, #14
 8003828:	18fb      	adds	r3, r7, r3
 800382a:	2200      	movs	r2, #0
 800382c:	701a      	strb	r2, [r3, #0]
 800382e:	e011      	b.n	8003854 <answer2CPU+0x158>
					myCS = myCS + ans[i];
 8003830:	200e      	movs	r0, #14
 8003832:	183b      	adds	r3, r7, r0
 8003834:	781a      	ldrb	r2, [r3, #0]
 8003836:	4b8f      	ldr	r3, [pc, #572]	; (8003a74 <answer2CPU+0x378>)
 8003838:	0052      	lsls	r2, r2, #1
 800383a:	5ad3      	ldrh	r3, [r2, r3]
 800383c:	b2d9      	uxtb	r1, r3
 800383e:	220d      	movs	r2, #13
 8003840:	18bb      	adds	r3, r7, r2
 8003842:	18ba      	adds	r2, r7, r2
 8003844:	7812      	ldrb	r2, [r2, #0]
 8003846:	188a      	adds	r2, r1, r2
 8003848:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 800384a:	183b      	adds	r3, r7, r0
 800384c:	781a      	ldrb	r2, [r3, #0]
 800384e:	183b      	adds	r3, r7, r0
 8003850:	3201      	adds	r2, #1
 8003852:	701a      	strb	r2, [r3, #0]
 8003854:	200e      	movs	r0, #14
 8003856:	183b      	adds	r3, r7, r0
 8003858:	781a      	ldrb	r2, [r3, #0]
 800385a:	2309      	movs	r3, #9
 800385c:	18fb      	adds	r3, r7, r3
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	3b01      	subs	r3, #1
 8003862:	429a      	cmp	r2, r3
 8003864:	dbe4      	blt.n	8003830 <answer2CPU+0x134>
				}
				myCS = 0 - myCS;
 8003866:	210d      	movs	r1, #13
 8003868:	187b      	adds	r3, r7, r1
 800386a:	187a      	adds	r2, r7, r1
 800386c:	7812      	ldrb	r2, [r2, #0]
 800386e:	4252      	negs	r2, r2
 8003870:	701a      	strb	r2, [r3, #0]
				ans[3] = myCS;
 8003872:	187b      	adds	r3, r7, r1
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	b29a      	uxth	r2, r3
 8003878:	4b7e      	ldr	r3, [pc, #504]	; (8003a74 <answer2CPU+0x378>)
 800387a:	80da      	strh	r2, [r3, #6]
				i=0;
 800387c:	183b      	adds	r3, r7, r0
 800387e:	2200      	movs	r2, #0
 8003880:	701a      	strb	r2, [r3, #0]
//======================================================================================================================================
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8003882:	46c0      	nop			; (mov r8, r8)
 8003884:	4b7c      	ldr	r3, [pc, #496]	; (8003a78 <answer2CPU+0x37c>)
 8003886:	69db      	ldr	r3, [r3, #28]
 8003888:	2280      	movs	r2, #128	; 0x80
 800388a:	4013      	ands	r3, r2
 800388c:	d0fa      	beq.n	8003884 <answer2CPU+0x188>
				USART2->TDR = ans[0]|0x0100;
 800388e:	4b79      	ldr	r3, [pc, #484]	; (8003a74 <answer2CPU+0x378>)
 8003890:	881b      	ldrh	r3, [r3, #0]
 8003892:	2280      	movs	r2, #128	; 0x80
 8003894:	0052      	lsls	r2, r2, #1
 8003896:	4313      	orrs	r3, r2
 8003898:	b29a      	uxth	r2, r3
 800389a:	4b77      	ldr	r3, [pc, #476]	; (8003a78 <answer2CPU+0x37c>)
 800389c:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 800389e:	230e      	movs	r3, #14
 80038a0:	18fb      	adds	r3, r7, r3
 80038a2:	2201      	movs	r2, #1
 80038a4:	701a      	strb	r2, [r3, #0]
 80038a6:	e013      	b.n	80038d0 <answer2CPU+0x1d4>
				  {												//answer2cpu was given
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 80038a8:	46c0      	nop			; (mov r8, r8)
 80038aa:	4b73      	ldr	r3, [pc, #460]	; (8003a78 <answer2CPU+0x37c>)
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	2280      	movs	r2, #128	; 0x80
 80038b0:	4013      	ands	r3, r2
 80038b2:	d0fa      	beq.n	80038aa <answer2CPU+0x1ae>
				    USART2->TDR = (uint8_t)ans[i];
 80038b4:	210e      	movs	r1, #14
 80038b6:	187b      	adds	r3, r7, r1
 80038b8:	781a      	ldrb	r2, [r3, #0]
 80038ba:	4b6e      	ldr	r3, [pc, #440]	; (8003a74 <answer2CPU+0x378>)
 80038bc:	0052      	lsls	r2, r2, #1
 80038be:	5ad3      	ldrh	r3, [r2, r3]
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	4b6d      	ldr	r3, [pc, #436]	; (8003a78 <answer2CPU+0x37c>)
 80038c4:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 80038c6:	187b      	adds	r3, r7, r1
 80038c8:	781a      	ldrb	r2, [r3, #0]
 80038ca:	187b      	adds	r3, r7, r1
 80038cc:	3201      	adds	r2, #1
 80038ce:	701a      	strb	r2, [r3, #0]
 80038d0:	230e      	movs	r3, #14
 80038d2:	18fa      	adds	r2, r7, r3
 80038d4:	2309      	movs	r3, #9
 80038d6:	18fb      	adds	r3, r7, r3
 80038d8:	7812      	ldrb	r2, [r2, #0]
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d3e3      	bcc.n	80038a8 <answer2CPU+0x1ac>
				  }
//=======================================================================================================================================
				if (cmd[0] == 0x11) {//Show full screen background;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	2b11      	cmp	r3, #17
 80038e6:	d109      	bne.n	80038fc <answer2CPU+0x200>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					picNum = cmd[2];
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	789a      	ldrb	r2, [r3, #2]
 80038ec:	4b63      	ldr	r3, [pc, #396]	; (8003a7c <answer2CPU+0x380>)
 80038ee:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x11;
 80038f0:	4b5e      	ldr	r3, [pc, #376]	; (8003a6c <answer2CPU+0x370>)
 80038f2:	2211      	movs	r2, #17
 80038f4:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 80038f6:	4b62      	ldr	r3, [pc, #392]	; (8003a80 <answer2CPU+0x384>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	701a      	strb	r2, [r3, #0]
				}
//=======================================================================================================================================
				if (cmd[0] == 0x12) {				//show small image
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	2b12      	cmp	r3, #18
 8003902:	d115      	bne.n	8003930 <answer2CPU+0x234>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	3302      	adds	r3, #2
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	001a      	movs	r2, r3
 800390c:	4b5d      	ldr	r3, [pc, #372]	; (8003a84 <answer2CPU+0x388>)
 800390e:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	3303      	adds	r3, #3
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	001a      	movs	r2, r3
 8003918:	4b5b      	ldr	r3, [pc, #364]	; (8003a88 <answer2CPU+0x38c>)
 800391a:	601a      	str	r2, [r3, #0]
					picNum=cmd[4];
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	791a      	ldrb	r2, [r3, #4]
 8003920:	4b56      	ldr	r3, [pc, #344]	; (8003a7c <answer2CPU+0x380>)
 8003922:	701a      	strb	r2, [r3, #0]
//					weoShowSmallImage(dataASCII[i], ASCII_X, ASCII_Y);
					cmd2Execute=0x12;
 8003924:	4b51      	ldr	r3, [pc, #324]	; (8003a6c <answer2CPU+0x370>)
 8003926:	2212      	movs	r2, #18
 8003928:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 800392a:	4b55      	ldr	r3, [pc, #340]	; (8003a80 <answer2CPU+0x384>)
 800392c:	2200      	movs	r2, #0
 800392e:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x13) {			//show ASCII code(s)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	2b13      	cmp	r3, #19
 8003936:	d134      	bne.n	80039a2 <answer2CPU+0x2a6>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	3302      	adds	r3, #2
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	001a      	movs	r2, r3
 8003940:	4b50      	ldr	r3, [pc, #320]	; (8003a84 <answer2CPU+0x388>)
 8003942:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3303      	adds	r3, #3
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	001a      	movs	r2, r3
 800394c:	4b4e      	ldr	r3, [pc, #312]	; (8003a88 <answer2CPU+0x38c>)
 800394e:	601a      	str	r2, [r3, #0]
					strLen = cmd[1] -0x03;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	3301      	adds	r3, #1
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	3b03      	subs	r3, #3
 8003958:	b2da      	uxtb	r2, r3
 800395a:	4b4c      	ldr	r3, [pc, #304]	; (8003a8c <answer2CPU+0x390>)
 800395c:	701a      	strb	r2, [r3, #0]
					for (i = 0; i <strLen; i++) {
 800395e:	230e      	movs	r3, #14
 8003960:	18fb      	adds	r3, r7, r3
 8003962:	2200      	movs	r2, #0
 8003964:	701a      	strb	r2, [r3, #0]
 8003966:	e00f      	b.n	8003988 <answer2CPU+0x28c>
					dataASCII[i] = cmd[i+4];
 8003968:	200e      	movs	r0, #14
 800396a:	183b      	adds	r3, r7, r0
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	3304      	adds	r3, #4
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	18d2      	adds	r2, r2, r3
 8003974:	183b      	adds	r3, r7, r0
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	7811      	ldrb	r1, [r2, #0]
 800397a:	4a45      	ldr	r2, [pc, #276]	; (8003a90 <answer2CPU+0x394>)
 800397c:	54d1      	strb	r1, [r2, r3]
					for (i = 0; i <strLen; i++) {
 800397e:	183b      	adds	r3, r7, r0
 8003980:	781a      	ldrb	r2, [r3, #0]
 8003982:	183b      	adds	r3, r7, r0
 8003984:	3201      	adds	r2, #1
 8003986:	701a      	strb	r2, [r3, #0]
 8003988:	4b40      	ldr	r3, [pc, #256]	; (8003a8c <answer2CPU+0x390>)
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	220e      	movs	r2, #14
 800398e:	18ba      	adds	r2, r7, r2
 8003990:	7812      	ldrb	r2, [r2, #0]
 8003992:	429a      	cmp	r2, r3
 8003994:	d3e8      	bcc.n	8003968 <answer2CPU+0x26c>
				}
					cmd2Execute=0x13;
 8003996:	4b35      	ldr	r3, [pc, #212]	; (8003a6c <answer2CPU+0x370>)
 8003998:	2213      	movs	r2, #19
 800399a:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 800399c:	4b38      	ldr	r3, [pc, #224]	; (8003a80 <answer2CPU+0x384>)
 800399e:	2200      	movs	r2, #0
 80039a0:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x14) {			//издать звук
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	2b14      	cmp	r3, #20
 80039a8:	d10c      	bne.n	80039c4 <answer2CPU+0x2c8>
					numSound = cmd[3];
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	78da      	ldrb	r2, [r3, #3]
 80039ae:	4b39      	ldr	r3, [pc, #228]	; (8003a94 <answer2CPU+0x398>)
 80039b0:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x14;
 80039b2:	4b2e      	ldr	r3, [pc, #184]	; (8003a6c <answer2CPU+0x370>)
 80039b4:	2214      	movs	r2, #20
 80039b6:	701a      	strb	r2, [r3, #0]
					cmd[0]=0xFF;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	22ff      	movs	r2, #255	; 0xff
 80039bc:	701a      	strb	r2, [r3, #0]
					bf4me=0x00; //reset BF flag for me
 80039be:	4b30      	ldr	r3, [pc, #192]	; (8003a80 <answer2CPU+0x384>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x15) {
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	2b15      	cmp	r3, #21
 80039ca:	d10d      	bne.n	80039e8 <answer2CPU+0x2ec>
					volume = cmd[2];
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	789a      	ldrb	r2, [r3, #2]
 80039d0:	4b31      	ldr	r3, [pc, #196]	; (8003a98 <answer2CPU+0x39c>)
 80039d2:	701a      	strb	r2, [r3, #0]
					contrast = cmd[3];
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	78da      	ldrb	r2, [r3, #3]
 80039d8:	4b30      	ldr	r3, [pc, #192]	; (8003a9c <answer2CPU+0x3a0>)
 80039da:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x15;
 80039dc:	4b23      	ldr	r3, [pc, #140]	; (8003a6c <answer2CPU+0x370>)
 80039de:	2215      	movs	r2, #21
 80039e0:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 80039e2:	4b27      	ldr	r3, [pc, #156]	; (8003a80 <answer2CPU+0x384>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x16) {
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	2b16      	cmp	r3, #22
 80039ee:	d10d      	bne.n	8003a0c <answer2CPU+0x310>
					volume = cmd[3];
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	78da      	ldrb	r2, [r3, #3]
 80039f4:	4b28      	ldr	r3, [pc, #160]	; (8003a98 <answer2CPU+0x39c>)
 80039f6:	701a      	strb	r2, [r3, #0]
					contrast = cmd[4];
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	791a      	ldrb	r2, [r3, #4]
 80039fc:	4b27      	ldr	r3, [pc, #156]	; (8003a9c <answer2CPU+0x3a0>)
 80039fe:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x16;
 8003a00:	4b1a      	ldr	r3, [pc, #104]	; (8003a6c <answer2CPU+0x370>)
 8003a02:	2216      	movs	r2, #22
 8003a04:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8003a06:	4b1e      	ldr	r3, [pc, #120]	; (8003a80 <answer2CPU+0x384>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	701a      	strb	r2, [r3, #0]
				}
//				weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, Image);
//				USART2->ICR|=USART_ICR_ORECF;
			}
//==========================================================================================================================
			if (cmd[0] == 0x00) { //request of pcb type
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d000      	beq.n	8003a16 <answer2CPU+0x31a>
 8003a14:	e09c      	b.n	8003b50 <answer2CPU+0x454>
				myLength = 0x14; //20 bytes length answer
 8003a16:	2109      	movs	r1, #9
 8003a18:	187b      	adds	r3, r7, r1
 8003a1a:	2214      	movs	r2, #20
 8003a1c:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8003a1e:	187b      	adds	r3, r7, r1
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	3b02      	subs	r3, #2
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	4b12      	ldr	r3, [pc, #72]	; (8003a74 <answer2CPU+0x378>)
 8003a2a:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8003a2c:	230e      	movs	r3, #14
 8003a2e:	18fb      	adds	r3, r7, r3
 8003a30:	2200      	movs	r2, #0
 8003a32:	701a      	strb	r2, [r3, #0]
 8003a34:	e010      	b.n	8003a58 <answer2CPU+0x35c>
					ans[i + 2] = PCB_type[i];
 8003a36:	200e      	movs	r0, #14
 8003a38:	183b      	adds	r3, r7, r0
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	4a18      	ldr	r2, [pc, #96]	; (8003aa0 <answer2CPU+0x3a4>)
 8003a3e:	5cd1      	ldrb	r1, [r2, r3]
 8003a40:	183b      	adds	r3, r7, r0
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	1c9a      	adds	r2, r3, #2
 8003a46:	b289      	uxth	r1, r1
 8003a48:	4b0a      	ldr	r3, [pc, #40]	; (8003a74 <answer2CPU+0x378>)
 8003a4a:	0052      	lsls	r2, r2, #1
 8003a4c:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8003a4e:	183b      	adds	r3, r7, r0
 8003a50:	781a      	ldrb	r2, [r3, #0]
 8003a52:	183b      	adds	r3, r7, r0
 8003a54:	3201      	adds	r2, #1
 8003a56:	701a      	strb	r2, [r3, #0]
 8003a58:	220e      	movs	r2, #14
 8003a5a:	18bb      	adds	r3, r7, r2
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	2b10      	cmp	r3, #16
 8003a60:	d9e9      	bls.n	8003a36 <answer2CPU+0x33a>
				}
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8003a62:	18bb      	adds	r3, r7, r2
 8003a64:	2200      	movs	r2, #0
 8003a66:	701a      	strb	r2, [r3, #0]
 8003a68:	e02e      	b.n	8003ac8 <answer2CPU+0x3cc>
 8003a6a:	46c0      	nop			; (mov r8, r8)
 8003a6c:	2000345e 	.word	0x2000345e
 8003a70:	50000800 	.word	0x50000800
 8003a74:	200034a0 	.word	0x200034a0
 8003a78:	40004400 	.word	0x40004400
 8003a7c:	2000345d 	.word	0x2000345d
 8003a80:	200034b4 	.word	0x200034b4
 8003a84:	200032f4 	.word	0x200032f4
 8003a88:	20003388 	.word	0x20003388
 8003a8c:	2000349d 	.word	0x2000349d
 8003a90:	200031a0 	.word	0x200031a0
 8003a94:	2000351d 	.word	0x2000351d
 8003a98:	200032f1 	.word	0x200032f1
 8003a9c:	200033f4 	.word	0x200033f4
 8003aa0:	20003100 	.word	0x20003100
					myCS = myCS + ans[i];
 8003aa4:	200e      	movs	r0, #14
 8003aa6:	183b      	adds	r3, r7, r0
 8003aa8:	781a      	ldrb	r2, [r3, #0]
 8003aaa:	4bdb      	ldr	r3, [pc, #876]	; (8003e18 <answer2CPU+0x71c>)
 8003aac:	0052      	lsls	r2, r2, #1
 8003aae:	5ad3      	ldrh	r3, [r2, r3]
 8003ab0:	b2d9      	uxtb	r1, r3
 8003ab2:	220d      	movs	r2, #13
 8003ab4:	18bb      	adds	r3, r7, r2
 8003ab6:	18ba      	adds	r2, r7, r2
 8003ab8:	7812      	ldrb	r2, [r2, #0]
 8003aba:	188a      	adds	r2, r1, r2
 8003abc:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8003abe:	183b      	adds	r3, r7, r0
 8003ac0:	781a      	ldrb	r2, [r3, #0]
 8003ac2:	183b      	adds	r3, r7, r0
 8003ac4:	3201      	adds	r2, #1
 8003ac6:	701a      	strb	r2, [r3, #0]
 8003ac8:	230e      	movs	r3, #14
 8003aca:	18fb      	adds	r3, r7, r3
 8003acc:	781a      	ldrb	r2, [r3, #0]
 8003ace:	2009      	movs	r0, #9
 8003ad0:	183b      	adds	r3, r7, r0
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	dbe4      	blt.n	8003aa4 <answer2CPU+0x3a8>
				}
				myCS = 0 - myCS;
 8003ada:	210d      	movs	r1, #13
 8003adc:	187b      	adds	r3, r7, r1
 8003ade:	187a      	adds	r2, r7, r1
 8003ae0:	7812      	ldrb	r2, [r2, #0]
 8003ae2:	4252      	negs	r2, r2
 8003ae4:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8003ae6:	183b      	adds	r3, r7, r0
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	1e5a      	subs	r2, r3, #1
 8003aec:	187b      	adds	r3, r7, r1
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	b299      	uxth	r1, r3
 8003af2:	4bc9      	ldr	r3, [pc, #804]	; (8003e18 <answer2CPU+0x71c>)
 8003af4:	0052      	lsls	r2, r2, #1
 8003af6:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8003af8:	46c0      	nop			; (mov r8, r8)
 8003afa:	4bc8      	ldr	r3, [pc, #800]	; (8003e1c <answer2CPU+0x720>)
 8003afc:	69db      	ldr	r3, [r3, #28]
 8003afe:	2280      	movs	r2, #128	; 0x80
 8003b00:	4013      	ands	r3, r2
 8003b02:	d0fa      	beq.n	8003afa <answer2CPU+0x3fe>
				USART2->TDR = ans[0]|0x0100;
 8003b04:	4bc4      	ldr	r3, [pc, #784]	; (8003e18 <answer2CPU+0x71c>)
 8003b06:	881b      	ldrh	r3, [r3, #0]
 8003b08:	2280      	movs	r2, #128	; 0x80
 8003b0a:	0052      	lsls	r2, r2, #1
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	4bc2      	ldr	r3, [pc, #776]	; (8003e1c <answer2CPU+0x720>)
 8003b12:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8003b14:	e014      	b.n	8003b40 <answer2CPU+0x444>
				  {
				    i++;
 8003b16:	210e      	movs	r1, #14
 8003b18:	187b      	adds	r3, r7, r1
 8003b1a:	781a      	ldrb	r2, [r3, #0]
 8003b1c:	187b      	adds	r3, r7, r1
 8003b1e:	3201      	adds	r2, #1
 8003b20:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8003b22:	46c0      	nop			; (mov r8, r8)
 8003b24:	4bbd      	ldr	r3, [pc, #756]	; (8003e1c <answer2CPU+0x720>)
 8003b26:	69db      	ldr	r3, [r3, #28]
 8003b28:	2280      	movs	r2, #128	; 0x80
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	d0fa      	beq.n	8003b24 <answer2CPU+0x428>
				    USART2->TDR = (uint8_t)ans[i];
 8003b2e:	230e      	movs	r3, #14
 8003b30:	18fb      	adds	r3, r7, r3
 8003b32:	781a      	ldrb	r2, [r3, #0]
 8003b34:	4bb8      	ldr	r3, [pc, #736]	; (8003e18 <answer2CPU+0x71c>)
 8003b36:	0052      	lsls	r2, r2, #1
 8003b38:	5ad3      	ldrh	r3, [r2, r3]
 8003b3a:	b2da      	uxtb	r2, r3
 8003b3c:	4bb7      	ldr	r3, [pc, #732]	; (8003e1c <answer2CPU+0x720>)
 8003b3e:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8003b40:	230e      	movs	r3, #14
 8003b42:	18fb      	adds	r3, r7, r3
 8003b44:	781a      	ldrb	r2, [r3, #0]
 8003b46:	4bb4      	ldr	r3, [pc, #720]	; (8003e18 <answer2CPU+0x71c>)
 8003b48:	0052      	lsls	r2, r2, #1
 8003b4a:	5ad3      	ldrh	r3, [r2, r3]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1e2      	bne.n	8003b16 <answer2CPU+0x41a>
				  }
//				 cmd2Execute=0x00;
			}
//============================================================================================================================
			if (cmd[0] == 0x01) { //request of pcb revision
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d000      	beq.n	8003b5a <answer2CPU+0x45e>
 8003b58:	e07f      	b.n	8003c5a <answer2CPU+0x55e>
				myLength = 0x0B; //19 bytes length answer
 8003b5a:	2109      	movs	r1, #9
 8003b5c:	187b      	adds	r3, r7, r1
 8003b5e:	220b      	movs	r2, #11
 8003b60:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8003b62:	187b      	adds	r3, r7, r1
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	3b02      	subs	r3, #2
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	4baa      	ldr	r3, [pc, #680]	; (8003e18 <answer2CPU+0x71c>)
 8003b6e:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8003b70:	230e      	movs	r3, #14
 8003b72:	18fb      	adds	r3, r7, r3
 8003b74:	2200      	movs	r2, #0
 8003b76:	701a      	strb	r2, [r3, #0]
 8003b78:	e010      	b.n	8003b9c <answer2CPU+0x4a0>
					ans[i + 2] = PCB_rev[i];
 8003b7a:	200e      	movs	r0, #14
 8003b7c:	183b      	adds	r3, r7, r0
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	4aa7      	ldr	r2, [pc, #668]	; (8003e20 <answer2CPU+0x724>)
 8003b82:	5cd1      	ldrb	r1, [r2, r3]
 8003b84:	183b      	adds	r3, r7, r0
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	1c9a      	adds	r2, r3, #2
 8003b8a:	b289      	uxth	r1, r1
 8003b8c:	4ba2      	ldr	r3, [pc, #648]	; (8003e18 <answer2CPU+0x71c>)
 8003b8e:	0052      	lsls	r2, r2, #1
 8003b90:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8003b92:	183b      	adds	r3, r7, r0
 8003b94:	781a      	ldrb	r2, [r3, #0]
 8003b96:	183b      	adds	r3, r7, r0
 8003b98:	3201      	adds	r2, #1
 8003b9a:	701a      	strb	r2, [r3, #0]
 8003b9c:	220e      	movs	r2, #14
 8003b9e:	18bb      	adds	r3, r7, r2
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	2b10      	cmp	r3, #16
 8003ba4:	d9e9      	bls.n	8003b7a <answer2CPU+0x47e>
				}
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8003ba6:	18bb      	adds	r3, r7, r2
 8003ba8:	2200      	movs	r2, #0
 8003baa:	701a      	strb	r2, [r3, #0]
 8003bac:	e011      	b.n	8003bd2 <answer2CPU+0x4d6>
					myCS = myCS + ans[i];
 8003bae:	200e      	movs	r0, #14
 8003bb0:	183b      	adds	r3, r7, r0
 8003bb2:	781a      	ldrb	r2, [r3, #0]
 8003bb4:	4b98      	ldr	r3, [pc, #608]	; (8003e18 <answer2CPU+0x71c>)
 8003bb6:	0052      	lsls	r2, r2, #1
 8003bb8:	5ad3      	ldrh	r3, [r2, r3]
 8003bba:	b2d9      	uxtb	r1, r3
 8003bbc:	220d      	movs	r2, #13
 8003bbe:	18bb      	adds	r3, r7, r2
 8003bc0:	18ba      	adds	r2, r7, r2
 8003bc2:	7812      	ldrb	r2, [r2, #0]
 8003bc4:	188a      	adds	r2, r1, r2
 8003bc6:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8003bc8:	183b      	adds	r3, r7, r0
 8003bca:	781a      	ldrb	r2, [r3, #0]
 8003bcc:	183b      	adds	r3, r7, r0
 8003bce:	3201      	adds	r2, #1
 8003bd0:	701a      	strb	r2, [r3, #0]
 8003bd2:	230e      	movs	r3, #14
 8003bd4:	18fb      	adds	r3, r7, r3
 8003bd6:	781a      	ldrb	r2, [r3, #0]
 8003bd8:	2009      	movs	r0, #9
 8003bda:	183b      	adds	r3, r7, r0
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	3b01      	subs	r3, #1
 8003be0:	429a      	cmp	r2, r3
 8003be2:	dbe4      	blt.n	8003bae <answer2CPU+0x4b2>
				}
				myCS = 0 - myCS;
 8003be4:	210d      	movs	r1, #13
 8003be6:	187b      	adds	r3, r7, r1
 8003be8:	187a      	adds	r2, r7, r1
 8003bea:	7812      	ldrb	r2, [r2, #0]
 8003bec:	4252      	negs	r2, r2
 8003bee:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8003bf0:	183b      	adds	r3, r7, r0
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	1e5a      	subs	r2, r3, #1
 8003bf6:	187b      	adds	r3, r7, r1
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	b299      	uxth	r1, r3
 8003bfc:	4b86      	ldr	r3, [pc, #536]	; (8003e18 <answer2CPU+0x71c>)
 8003bfe:	0052      	lsls	r2, r2, #1
 8003c00:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8003c02:	46c0      	nop			; (mov r8, r8)
 8003c04:	4b85      	ldr	r3, [pc, #532]	; (8003e1c <answer2CPU+0x720>)
 8003c06:	69db      	ldr	r3, [r3, #28]
 8003c08:	2280      	movs	r2, #128	; 0x80
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	d0fa      	beq.n	8003c04 <answer2CPU+0x508>
				USART2->TDR = ans[0]|0x0100;
 8003c0e:	4b82      	ldr	r3, [pc, #520]	; (8003e18 <answer2CPU+0x71c>)
 8003c10:	881b      	ldrh	r3, [r3, #0]
 8003c12:	2280      	movs	r2, #128	; 0x80
 8003c14:	0052      	lsls	r2, r2, #1
 8003c16:	4313      	orrs	r3, r2
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	4b80      	ldr	r3, [pc, #512]	; (8003e1c <answer2CPU+0x720>)
 8003c1c:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8003c1e:	e014      	b.n	8003c4a <answer2CPU+0x54e>
					  {
					    i++;
 8003c20:	210e      	movs	r1, #14
 8003c22:	187b      	adds	r3, r7, r1
 8003c24:	781a      	ldrb	r2, [r3, #0]
 8003c26:	187b      	adds	r3, r7, r1
 8003c28:	3201      	adds	r2, #1
 8003c2a:	701a      	strb	r2, [r3, #0]
					    while(!(USART2->ISR & USART_ISR_TXE)){};
 8003c2c:	46c0      	nop			; (mov r8, r8)
 8003c2e:	4b7b      	ldr	r3, [pc, #492]	; (8003e1c <answer2CPU+0x720>)
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	2280      	movs	r2, #128	; 0x80
 8003c34:	4013      	ands	r3, r2
 8003c36:	d0fa      	beq.n	8003c2e <answer2CPU+0x532>
					    USART2->TDR = (uint8_t)ans[i];
 8003c38:	230e      	movs	r3, #14
 8003c3a:	18fb      	adds	r3, r7, r3
 8003c3c:	781a      	ldrb	r2, [r3, #0]
 8003c3e:	4b76      	ldr	r3, [pc, #472]	; (8003e18 <answer2CPU+0x71c>)
 8003c40:	0052      	lsls	r2, r2, #1
 8003c42:	5ad3      	ldrh	r3, [r2, r3]
 8003c44:	b2da      	uxtb	r2, r3
 8003c46:	4b75      	ldr	r3, [pc, #468]	; (8003e1c <answer2CPU+0x720>)
 8003c48:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8003c4a:	230e      	movs	r3, #14
 8003c4c:	18fb      	adds	r3, r7, r3
 8003c4e:	781a      	ldrb	r2, [r3, #0]
 8003c50:	4b71      	ldr	r3, [pc, #452]	; (8003e18 <answer2CPU+0x71c>)
 8003c52:	0052      	lsls	r2, r2, #1
 8003c54:	5ad3      	ldrh	r3, [r2, r3]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1e2      	bne.n	8003c20 <answer2CPU+0x524>
					  }
//				 cmd2Execute=0x01;
			}
//================================================================================================================================
			if (cmd[0] == 0x02) { //request of emitter SN
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d000      	beq.n	8003c64 <answer2CPU+0x568>
 8003c62:	e07f      	b.n	8003d64 <answer2CPU+0x668>
				myLength = 0x13; //19 bytes length answer
 8003c64:	2109      	movs	r1, #9
 8003c66:	187b      	adds	r3, r7, r1
 8003c68:	2213      	movs	r2, #19
 8003c6a:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8003c6c:	187b      	adds	r3, r7, r1
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	3b02      	subs	r3, #2
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	4b68      	ldr	r3, [pc, #416]	; (8003e18 <answer2CPU+0x71c>)
 8003c78:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8003c7a:	230e      	movs	r3, #14
 8003c7c:	18fb      	adds	r3, r7, r3
 8003c7e:	2200      	movs	r2, #0
 8003c80:	701a      	strb	r2, [r3, #0]
 8003c82:	e010      	b.n	8003ca6 <answer2CPU+0x5aa>
					ans[i + 2] = EmitterSN[i];
 8003c84:	200e      	movs	r0, #14
 8003c86:	183b      	adds	r3, r7, r0
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	4a66      	ldr	r2, [pc, #408]	; (8003e24 <answer2CPU+0x728>)
 8003c8c:	5cd1      	ldrb	r1, [r2, r3]
 8003c8e:	183b      	adds	r3, r7, r0
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	1c9a      	adds	r2, r3, #2
 8003c94:	b289      	uxth	r1, r1
 8003c96:	4b60      	ldr	r3, [pc, #384]	; (8003e18 <answer2CPU+0x71c>)
 8003c98:	0052      	lsls	r2, r2, #1
 8003c9a:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8003c9c:	183b      	adds	r3, r7, r0
 8003c9e:	781a      	ldrb	r2, [r3, #0]
 8003ca0:	183b      	adds	r3, r7, r0
 8003ca2:	3201      	adds	r2, #1
 8003ca4:	701a      	strb	r2, [r3, #0]
 8003ca6:	220e      	movs	r2, #14
 8003ca8:	18bb      	adds	r3, r7, r2
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	2b10      	cmp	r3, #16
 8003cae:	d9e9      	bls.n	8003c84 <answer2CPU+0x588>
				}
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8003cb0:	18bb      	adds	r3, r7, r2
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	701a      	strb	r2, [r3, #0]
 8003cb6:	e011      	b.n	8003cdc <answer2CPU+0x5e0>
					myCS = myCS + ans[i];
 8003cb8:	200e      	movs	r0, #14
 8003cba:	183b      	adds	r3, r7, r0
 8003cbc:	781a      	ldrb	r2, [r3, #0]
 8003cbe:	4b56      	ldr	r3, [pc, #344]	; (8003e18 <answer2CPU+0x71c>)
 8003cc0:	0052      	lsls	r2, r2, #1
 8003cc2:	5ad3      	ldrh	r3, [r2, r3]
 8003cc4:	b2d9      	uxtb	r1, r3
 8003cc6:	220d      	movs	r2, #13
 8003cc8:	18bb      	adds	r3, r7, r2
 8003cca:	18ba      	adds	r2, r7, r2
 8003ccc:	7812      	ldrb	r2, [r2, #0]
 8003cce:	188a      	adds	r2, r1, r2
 8003cd0:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8003cd2:	183b      	adds	r3, r7, r0
 8003cd4:	781a      	ldrb	r2, [r3, #0]
 8003cd6:	183b      	adds	r3, r7, r0
 8003cd8:	3201      	adds	r2, #1
 8003cda:	701a      	strb	r2, [r3, #0]
 8003cdc:	230e      	movs	r3, #14
 8003cde:	18fb      	adds	r3, r7, r3
 8003ce0:	781a      	ldrb	r2, [r3, #0]
 8003ce2:	2009      	movs	r0, #9
 8003ce4:	183b      	adds	r3, r7, r0
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	429a      	cmp	r2, r3
 8003cec:	dbe4      	blt.n	8003cb8 <answer2CPU+0x5bc>
				}
				myCS = 0 - myCS;
 8003cee:	210d      	movs	r1, #13
 8003cf0:	187b      	adds	r3, r7, r1
 8003cf2:	187a      	adds	r2, r7, r1
 8003cf4:	7812      	ldrb	r2, [r2, #0]
 8003cf6:	4252      	negs	r2, r2
 8003cf8:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8003cfa:	183b      	adds	r3, r7, r0
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	1e5a      	subs	r2, r3, #1
 8003d00:	187b      	adds	r3, r7, r1
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	b299      	uxth	r1, r3
 8003d06:	4b44      	ldr	r3, [pc, #272]	; (8003e18 <answer2CPU+0x71c>)
 8003d08:	0052      	lsls	r2, r2, #1
 8003d0a:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8003d0c:	46c0      	nop			; (mov r8, r8)
 8003d0e:	4b43      	ldr	r3, [pc, #268]	; (8003e1c <answer2CPU+0x720>)
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	2280      	movs	r2, #128	; 0x80
 8003d14:	4013      	ands	r3, r2
 8003d16:	d0fa      	beq.n	8003d0e <answer2CPU+0x612>
				USART2->TDR = ans[0]|0x0100;
 8003d18:	4b3f      	ldr	r3, [pc, #252]	; (8003e18 <answer2CPU+0x71c>)
 8003d1a:	881b      	ldrh	r3, [r3, #0]
 8003d1c:	2280      	movs	r2, #128	; 0x80
 8003d1e:	0052      	lsls	r2, r2, #1
 8003d20:	4313      	orrs	r3, r2
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	4b3d      	ldr	r3, [pc, #244]	; (8003e1c <answer2CPU+0x720>)
 8003d26:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8003d28:	e014      	b.n	8003d54 <answer2CPU+0x658>
				  {
				    i++;
 8003d2a:	210e      	movs	r1, #14
 8003d2c:	187b      	adds	r3, r7, r1
 8003d2e:	781a      	ldrb	r2, [r3, #0]
 8003d30:	187b      	adds	r3, r7, r1
 8003d32:	3201      	adds	r2, #1
 8003d34:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8003d36:	46c0      	nop			; (mov r8, r8)
 8003d38:	4b38      	ldr	r3, [pc, #224]	; (8003e1c <answer2CPU+0x720>)
 8003d3a:	69db      	ldr	r3, [r3, #28]
 8003d3c:	2280      	movs	r2, #128	; 0x80
 8003d3e:	4013      	ands	r3, r2
 8003d40:	d0fa      	beq.n	8003d38 <answer2CPU+0x63c>
				    	USART2->TDR = (uint8_t)ans[i];
 8003d42:	230e      	movs	r3, #14
 8003d44:	18fb      	adds	r3, r7, r3
 8003d46:	781a      	ldrb	r2, [r3, #0]
 8003d48:	4b33      	ldr	r3, [pc, #204]	; (8003e18 <answer2CPU+0x71c>)
 8003d4a:	0052      	lsls	r2, r2, #1
 8003d4c:	5ad3      	ldrh	r3, [r2, r3]
 8003d4e:	b2da      	uxtb	r2, r3
 8003d50:	4b32      	ldr	r3, [pc, #200]	; (8003e1c <answer2CPU+0x720>)
 8003d52:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8003d54:	230e      	movs	r3, #14
 8003d56:	18fb      	adds	r3, r7, r3
 8003d58:	781a      	ldrb	r2, [r3, #0]
 8003d5a:	4b2f      	ldr	r3, [pc, #188]	; (8003e18 <answer2CPU+0x71c>)
 8003d5c:	0052      	lsls	r2, r2, #1
 8003d5e:	5ad3      	ldrh	r3, [r2, r3]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1e2      	bne.n	8003d2a <answer2CPU+0x62e>
				  }
//				cmd2Execute=0x02;
			}
//===============================================================================================================================
			if (cmd[0] == 0x03) { //request of current consumption
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	2b03      	cmp	r3, #3
 8003d6a:	d000      	beq.n	8003d6e <answer2CPU+0x672>
 8003d6c:	e07b      	b.n	8003e66 <answer2CPU+0x76a>
				myLength = 0x04; //4 bytes length answer
 8003d6e:	2109      	movs	r1, #9
 8003d70:	187b      	adds	r3, r7, r1
 8003d72:	2204      	movs	r2, #4
 8003d74:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8003d76:	187b      	adds	r3, r7, r1
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	3b02      	subs	r3, #2
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	4b25      	ldr	r3, [pc, #148]	; (8003e18 <answer2CPU+0x71c>)
 8003d82:	805a      	strh	r2, [r3, #2]
				ans[2] = currentConsumption;
 8003d84:	4b28      	ldr	r3, [pc, #160]	; (8003e28 <answer2CPU+0x72c>)
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	4b23      	ldr	r3, [pc, #140]	; (8003e18 <answer2CPU+0x71c>)
 8003d8c:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8003d8e:	230d      	movs	r3, #13
 8003d90:	18fb      	adds	r3, r7, r3
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	4b20      	ldr	r3, [pc, #128]	; (8003e18 <answer2CPU+0x71c>)
 8003d98:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8003d9a:	230e      	movs	r3, #14
 8003d9c:	18fb      	adds	r3, r7, r3
 8003d9e:	2200      	movs	r2, #0
 8003da0:	701a      	strb	r2, [r3, #0]
 8003da2:	e011      	b.n	8003dc8 <answer2CPU+0x6cc>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8003da4:	200e      	movs	r0, #14
 8003da6:	183b      	adds	r3, r7, r0
 8003da8:	781a      	ldrb	r2, [r3, #0]
 8003daa:	4b1b      	ldr	r3, [pc, #108]	; (8003e18 <answer2CPU+0x71c>)
 8003dac:	0052      	lsls	r2, r2, #1
 8003dae:	5ad3      	ldrh	r3, [r2, r3]
 8003db0:	b2d9      	uxtb	r1, r3
 8003db2:	220d      	movs	r2, #13
 8003db4:	18bb      	adds	r3, r7, r2
 8003db6:	18ba      	adds	r2, r7, r2
 8003db8:	7812      	ldrb	r2, [r2, #0]
 8003dba:	188a      	adds	r2, r1, r2
 8003dbc:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8003dbe:	183b      	adds	r3, r7, r0
 8003dc0:	781a      	ldrb	r2, [r3, #0]
 8003dc2:	183b      	adds	r3, r7, r0
 8003dc4:	3201      	adds	r2, #1
 8003dc6:	701a      	strb	r2, [r3, #0]
 8003dc8:	230e      	movs	r3, #14
 8003dca:	18fb      	adds	r3, r7, r3
 8003dcc:	781a      	ldrb	r2, [r3, #0]
 8003dce:	2009      	movs	r0, #9
 8003dd0:	183b      	adds	r3, r7, r0
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	dbe4      	blt.n	8003da4 <answer2CPU+0x6a8>
				}
				myCS = 0 - myCS;
 8003dda:	210d      	movs	r1, #13
 8003ddc:	187b      	adds	r3, r7, r1
 8003dde:	187a      	adds	r2, r7, r1
 8003de0:	7812      	ldrb	r2, [r2, #0]
 8003de2:	4252      	negs	r2, r2
 8003de4:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8003de6:	183b      	adds	r3, r7, r0
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	1e5a      	subs	r2, r3, #1
 8003dec:	187b      	adds	r3, r7, r1
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	b299      	uxth	r1, r3
 8003df2:	4b09      	ldr	r3, [pc, #36]	; (8003e18 <answer2CPU+0x71c>)
 8003df4:	0052      	lsls	r2, r2, #1
 8003df6:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8003df8:	46c0      	nop			; (mov r8, r8)
 8003dfa:	4b08      	ldr	r3, [pc, #32]	; (8003e1c <answer2CPU+0x720>)
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	2280      	movs	r2, #128	; 0x80
 8003e00:	4013      	ands	r3, r2
 8003e02:	d0fa      	beq.n	8003dfa <answer2CPU+0x6fe>
					USART2->TDR = ans[0]|0x0100;
 8003e04:	4b04      	ldr	r3, [pc, #16]	; (8003e18 <answer2CPU+0x71c>)
 8003e06:	881b      	ldrh	r3, [r3, #0]
 8003e08:	2280      	movs	r2, #128	; 0x80
 8003e0a:	0052      	lsls	r2, r2, #1
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	4b02      	ldr	r3, [pc, #8]	; (8003e1c <answer2CPU+0x720>)
 8003e12:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8003e14:	e01f      	b.n	8003e56 <answer2CPU+0x75a>
 8003e16:	46c0      	nop			; (mov r8, r8)
 8003e18:	200034a0 	.word	0x200034a0
 8003e1c:	40004400 	.word	0x40004400
 8003e20:	20003114 	.word	0x20003114
 8003e24:	20003120 	.word	0x20003120
 8003e28:	2000311c 	.word	0x2000311c
						{
						  i++;
 8003e2c:	210e      	movs	r1, #14
 8003e2e:	187b      	adds	r3, r7, r1
 8003e30:	781a      	ldrb	r2, [r3, #0]
 8003e32:	187b      	adds	r3, r7, r1
 8003e34:	3201      	adds	r2, #1
 8003e36:	701a      	strb	r2, [r3, #0]
						  while(!(USART2->ISR & USART_ISR_TXE)){};
 8003e38:	46c0      	nop			; (mov r8, r8)
 8003e3a:	4b4e      	ldr	r3, [pc, #312]	; (8003f74 <answer2CPU+0x878>)
 8003e3c:	69db      	ldr	r3, [r3, #28]
 8003e3e:	2280      	movs	r2, #128	; 0x80
 8003e40:	4013      	ands	r3, r2
 8003e42:	d0fa      	beq.n	8003e3a <answer2CPU+0x73e>
						     USART2->TDR = (uint8_t)ans[i];
 8003e44:	230e      	movs	r3, #14
 8003e46:	18fb      	adds	r3, r7, r3
 8003e48:	781a      	ldrb	r2, [r3, #0]
 8003e4a:	4b4b      	ldr	r3, [pc, #300]	; (8003f78 <answer2CPU+0x87c>)
 8003e4c:	0052      	lsls	r2, r2, #1
 8003e4e:	5ad3      	ldrh	r3, [r2, r3]
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	4b48      	ldr	r3, [pc, #288]	; (8003f74 <answer2CPU+0x878>)
 8003e54:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8003e56:	230e      	movs	r3, #14
 8003e58:	18fb      	adds	r3, r7, r3
 8003e5a:	781a      	ldrb	r2, [r3, #0]
 8003e5c:	4b46      	ldr	r3, [pc, #280]	; (8003f78 <answer2CPU+0x87c>)
 8003e5e:	0052      	lsls	r2, r2, #1
 8003e60:	5ad3      	ldrh	r3, [r2, r3]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1e2      	bne.n	8003e2c <answer2CPU+0x730>
						}
//					cmd2Execute=0x03;
			}
			if (cmd[0] == 0x04) { //request of current consumption
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	2b04      	cmp	r3, #4
 8003e6c:	d000      	beq.n	8003e70 <answer2CPU+0x774>
 8003e6e:	e076      	b.n	8003f5e <answer2CPU+0x862>
				myLength = 0x04; //4 bytes length answer
 8003e70:	2109      	movs	r1, #9
 8003e72:	187b      	adds	r3, r7, r1
 8003e74:	2204      	movs	r2, #4
 8003e76:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8003e78:	187b      	adds	r3, r7, r1
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	3b02      	subs	r3, #2
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	4b3d      	ldr	r3, [pc, #244]	; (8003f78 <answer2CPU+0x87c>)
 8003e84:	805a      	strh	r2, [r3, #2]
				uartSpeed = cmd[2];
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	3302      	adds	r3, #2
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	001a      	movs	r2, r3
 8003e8e:	4b3b      	ldr	r3, [pc, #236]	; (8003f7c <answer2CPU+0x880>)
 8003e90:	601a      	str	r2, [r3, #0]
				ans[2] = currentUARTspeed;
 8003e92:	4b3b      	ldr	r3, [pc, #236]	; (8003f80 <answer2CPU+0x884>)
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	4b37      	ldr	r3, [pc, #220]	; (8003f78 <answer2CPU+0x87c>)
 8003e9a:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8003e9c:	230d      	movs	r3, #13
 8003e9e:	18fb      	adds	r3, r7, r3
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	4b34      	ldr	r3, [pc, #208]	; (8003f78 <answer2CPU+0x87c>)
 8003ea6:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8003ea8:	230e      	movs	r3, #14
 8003eaa:	18fb      	adds	r3, r7, r3
 8003eac:	2200      	movs	r2, #0
 8003eae:	701a      	strb	r2, [r3, #0]
 8003eb0:	e011      	b.n	8003ed6 <answer2CPU+0x7da>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8003eb2:	200e      	movs	r0, #14
 8003eb4:	183b      	adds	r3, r7, r0
 8003eb6:	781a      	ldrb	r2, [r3, #0]
 8003eb8:	4b2f      	ldr	r3, [pc, #188]	; (8003f78 <answer2CPU+0x87c>)
 8003eba:	0052      	lsls	r2, r2, #1
 8003ebc:	5ad3      	ldrh	r3, [r2, r3]
 8003ebe:	b2d9      	uxtb	r1, r3
 8003ec0:	220d      	movs	r2, #13
 8003ec2:	18bb      	adds	r3, r7, r2
 8003ec4:	18ba      	adds	r2, r7, r2
 8003ec6:	7812      	ldrb	r2, [r2, #0]
 8003ec8:	188a      	adds	r2, r1, r2
 8003eca:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8003ecc:	183b      	adds	r3, r7, r0
 8003ece:	781a      	ldrb	r2, [r3, #0]
 8003ed0:	183b      	adds	r3, r7, r0
 8003ed2:	3201      	adds	r2, #1
 8003ed4:	701a      	strb	r2, [r3, #0]
 8003ed6:	230e      	movs	r3, #14
 8003ed8:	18fb      	adds	r3, r7, r3
 8003eda:	781a      	ldrb	r2, [r3, #0]
 8003edc:	2009      	movs	r0, #9
 8003ede:	183b      	adds	r3, r7, r0
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	dbe4      	blt.n	8003eb2 <answer2CPU+0x7b6>
				}
				myCS = 0 - myCS;
 8003ee8:	210d      	movs	r1, #13
 8003eea:	187b      	adds	r3, r7, r1
 8003eec:	187a      	adds	r2, r7, r1
 8003eee:	7812      	ldrb	r2, [r2, #0]
 8003ef0:	4252      	negs	r2, r2
 8003ef2:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8003ef4:	183b      	adds	r3, r7, r0
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	1e5a      	subs	r2, r3, #1
 8003efa:	187b      	adds	r3, r7, r1
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	b299      	uxth	r1, r3
 8003f00:	4b1d      	ldr	r3, [pc, #116]	; (8003f78 <answer2CPU+0x87c>)
 8003f02:	0052      	lsls	r2, r2, #1
 8003f04:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8003f06:	46c0      	nop			; (mov r8, r8)
 8003f08:	4b1a      	ldr	r3, [pc, #104]	; (8003f74 <answer2CPU+0x878>)
 8003f0a:	69db      	ldr	r3, [r3, #28]
 8003f0c:	2280      	movs	r2, #128	; 0x80
 8003f0e:	4013      	ands	r3, r2
 8003f10:	d0fa      	beq.n	8003f08 <answer2CPU+0x80c>
				USART2->TDR = ans[0]|0x0100;
 8003f12:	4b19      	ldr	r3, [pc, #100]	; (8003f78 <answer2CPU+0x87c>)
 8003f14:	881b      	ldrh	r3, [r3, #0]
 8003f16:	2280      	movs	r2, #128	; 0x80
 8003f18:	0052      	lsls	r2, r2, #1
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	4b15      	ldr	r3, [pc, #84]	; (8003f74 <answer2CPU+0x878>)
 8003f20:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8003f22:	e014      	b.n	8003f4e <answer2CPU+0x852>
				{
				  i++;
 8003f24:	210e      	movs	r1, #14
 8003f26:	187b      	adds	r3, r7, r1
 8003f28:	781a      	ldrb	r2, [r3, #0]
 8003f2a:	187b      	adds	r3, r7, r1
 8003f2c:	3201      	adds	r2, #1
 8003f2e:	701a      	strb	r2, [r3, #0]
				  while(!(USART2->ISR & USART_ISR_TXE)){};
 8003f30:	46c0      	nop			; (mov r8, r8)
 8003f32:	4b10      	ldr	r3, [pc, #64]	; (8003f74 <answer2CPU+0x878>)
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	2280      	movs	r2, #128	; 0x80
 8003f38:	4013      	ands	r3, r2
 8003f3a:	d0fa      	beq.n	8003f32 <answer2CPU+0x836>
				  USART2->TDR = (uint8_t)ans[i];
 8003f3c:	230e      	movs	r3, #14
 8003f3e:	18fb      	adds	r3, r7, r3
 8003f40:	781a      	ldrb	r2, [r3, #0]
 8003f42:	4b0d      	ldr	r3, [pc, #52]	; (8003f78 <answer2CPU+0x87c>)
 8003f44:	0052      	lsls	r2, r2, #1
 8003f46:	5ad3      	ldrh	r3, [r2, r3]
 8003f48:	b2da      	uxtb	r2, r3
 8003f4a:	4b0a      	ldr	r3, [pc, #40]	; (8003f74 <answer2CPU+0x878>)
 8003f4c:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8003f4e:	230e      	movs	r3, #14
 8003f50:	18fb      	adds	r3, r7, r3
 8003f52:	781a      	ldrb	r2, [r3, #0]
 8003f54:	4b08      	ldr	r3, [pc, #32]	; (8003f78 <answer2CPU+0x87c>)
 8003f56:	0052      	lsls	r2, r2, #1
 8003f58:	5ad3      	ldrh	r3, [r2, r3]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1e2      	bne.n	8003f24 <answer2CPU+0x828>
				}
//				cmd2Execute=0x04;
			}
//			weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, coala);
			USART2->ICR|=USART_ICR_ORECF;
 8003f5e:	4b05      	ldr	r3, [pc, #20]	; (8003f74 <answer2CPU+0x878>)
 8003f60:	6a1a      	ldr	r2, [r3, #32]
 8003f62:	4b04      	ldr	r3, [pc, #16]	; (8003f74 <answer2CPU+0x878>)
 8003f64:	2108      	movs	r1, #8
 8003f66:	430a      	orrs	r2, r1
 8003f68:	621a      	str	r2, [r3, #32]
}
 8003f6a:	46c0      	nop			; (mov r8, r8)
 8003f6c:	0018      	movs	r0, r3
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	b004      	add	sp, #16
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	40004400 	.word	0x40004400
 8003f78:	200034a0 	.word	0x200034a0
 8003f7c:	200033fc 	.word	0x200033fc
 8003f80:	200032f2 	.word	0x200032f2

08003f84 <MEM_Reset>:
//==================================================================================================================================
	void MEM_Reset(void) {
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
		uint8_t memCMD;
		HAL_Delay(1); //200 ms by Andrew
 8003f8a:	2001      	movs	r0, #1
 8003f8c:	f001 fa2c 	bl	80053e8 <HAL_Delay>
		GPIOC->ODR &= ~(1 << 15); //reset cs
 8003f90:	4b28      	ldr	r3, [pc, #160]	; (8004034 <MEM_Reset+0xb0>)
 8003f92:	695a      	ldr	r2, [r3, #20]
 8003f94:	4b27      	ldr	r3, [pc, #156]	; (8004034 <MEM_Reset+0xb0>)
 8003f96:	4928      	ldr	r1, [pc, #160]	; (8004038 <MEM_Reset+0xb4>)
 8003f98:	400a      	ands	r2, r1
 8003f9a:	615a      	str	r2, [r3, #20]
		memCMD = 0x66;
 8003f9c:	1dfb      	adds	r3, r7, #7
 8003f9e:	2266      	movs	r2, #102	; 0x66
 8003fa0:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8003fa2:	1df9      	adds	r1, r7, #7
 8003fa4:	4825      	ldr	r0, [pc, #148]	; (800403c <MEM_Reset+0xb8>)
 8003fa6:	2305      	movs	r3, #5
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f005 f925 	bl	80091f8 <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8003fae:	4b21      	ldr	r3, [pc, #132]	; (8004034 <MEM_Reset+0xb0>)
 8003fb0:	695a      	ldr	r2, [r3, #20]
 8003fb2:	4b20      	ldr	r3, [pc, #128]	; (8004034 <MEM_Reset+0xb0>)
 8003fb4:	2180      	movs	r1, #128	; 0x80
 8003fb6:	0209      	lsls	r1, r1, #8
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	615a      	str	r2, [r3, #20]
		asm("NOP");
 8003fbc:	46c0      	nop			; (mov r8, r8)
		__NOP();
 8003fbe:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8003fc0:	46c0      	nop			; (mov r8, r8)
		__NOP();			//May be less NOPs?
 8003fc2:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8003fc4:	46c0      	nop			; (mov r8, r8)
		__NOP();
 8003fc6:	46c0      	nop			; (mov r8, r8)
		GPIOC->ODR &= ~(1 << 15);			//reset cs
 8003fc8:	4b1a      	ldr	r3, [pc, #104]	; (8004034 <MEM_Reset+0xb0>)
 8003fca:	695a      	ldr	r2, [r3, #20]
 8003fcc:	4b19      	ldr	r3, [pc, #100]	; (8004034 <MEM_Reset+0xb0>)
 8003fce:	491a      	ldr	r1, [pc, #104]	; (8004038 <MEM_Reset+0xb4>)
 8003fd0:	400a      	ands	r2, r1
 8003fd2:	615a      	str	r2, [r3, #20]
		memCMD = 0x99;
 8003fd4:	1dfb      	adds	r3, r7, #7
 8003fd6:	2299      	movs	r2, #153	; 0x99
 8003fd8:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset memory
 8003fda:	1df9      	adds	r1, r7, #7
 8003fdc:	4817      	ldr	r0, [pc, #92]	; (800403c <MEM_Reset+0xb8>)
 8003fde:	2305      	movs	r3, #5
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f005 f909 	bl	80091f8 <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8003fe6:	4b13      	ldr	r3, [pc, #76]	; (8004034 <MEM_Reset+0xb0>)
 8003fe8:	695a      	ldr	r2, [r3, #20]
 8003fea:	4b12      	ldr	r3, [pc, #72]	; (8004034 <MEM_Reset+0xb0>)
 8003fec:	2180      	movs	r1, #128	; 0x80
 8003fee:	0209      	lsls	r1, r1, #8
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8003ff4:	2001      	movs	r0, #1
 8003ff6:	f001 f9f7 	bl	80053e8 <HAL_Delay>
//=============================================================================================================
		memCMD = 0xB7;												//	Activation 0f 4-bytes address mode
 8003ffa:	1dfb      	adds	r3, r7, #7
 8003ffc:	22b7      	movs	r2, #183	; 0xb7
 8003ffe:	701a      	strb	r2, [r3, #0]
		GPIOC->ODR &= ~(1 << 15); //reset cs
 8004000:	4b0c      	ldr	r3, [pc, #48]	; (8004034 <MEM_Reset+0xb0>)
 8004002:	695a      	ldr	r2, [r3, #20]
 8004004:	4b0b      	ldr	r3, [pc, #44]	; (8004034 <MEM_Reset+0xb0>)
 8004006:	490c      	ldr	r1, [pc, #48]	; (8004038 <MEM_Reset+0xb4>)
 8004008:	400a      	ands	r2, r1
 800400a:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 800400c:	1df9      	adds	r1, r7, #7
 800400e:	480b      	ldr	r0, [pc, #44]	; (800403c <MEM_Reset+0xb8>)
 8004010:	2305      	movs	r3, #5
 8004012:	2201      	movs	r2, #1
 8004014:	f005 f8f0 	bl	80091f8 <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8004018:	4b06      	ldr	r3, [pc, #24]	; (8004034 <MEM_Reset+0xb0>)
 800401a:	695a      	ldr	r2, [r3, #20]
 800401c:	4b05      	ldr	r3, [pc, #20]	; (8004034 <MEM_Reset+0xb0>)
 800401e:	2180      	movs	r1, #128	; 0x80
 8004020:	0209      	lsls	r1, r1, #8
 8004022:	430a      	orrs	r2, r1
 8004024:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8004026:	2001      	movs	r0, #1
 8004028:	f001 f9de 	bl	80053e8 <HAL_Delay>
	}
 800402c:	46c0      	nop			; (mov r8, r8)
 800402e:	46bd      	mov	sp, r7
 8004030:	b002      	add	sp, #8
 8004032:	bd80      	pop	{r7, pc}
 8004034:	50000800 	.word	0x50000800
 8004038:	ffff7fff 	.word	0xffff7fff
 800403c:	200031b0 	.word	0x200031b0

08004040 <weoShowFullScreenDMA>:
		GPIOC->ODR |= 1 << 6;	//set BF
		cmd2Execute=0;
	}
//==========================================================================================================================

	uint8_t weoShowFullScreenDMA(uint8_t picNum) {
 8004040:	b590      	push	{r4, r7, lr}
 8004042:	4c41      	ldr	r4, [pc, #260]	; (8004148 <weoShowFullScreenDMA+0x108>)
 8004044:	44a5      	add	sp, r4
 8004046:	af00      	add	r7, sp, #0
 8004048:	0002      	movs	r2, r0
 800404a:	4b40      	ldr	r3, [pc, #256]	; (800414c <weoShowFullScreenDMA+0x10c>)
 800404c:	4940      	ldr	r1, [pc, #256]	; (8004150 <weoShowFullScreenDMA+0x110>)
 800404e:	468c      	mov	ip, r1
 8004050:	44bc      	add	ip, r7
 8004052:	4463      	add	r3, ip
 8004054:	701a      	strb	r2, [r3, #0]
//		uint8_t MEM_Buffer[8192];
		uint8_t DUMMY_Buffer[8192], firstImAddrArray[4],addrArray[4];
		uint16_t i;
		uint32_t addrInfo,addr;

		weoDrawRectangleInit(0x00, 0x00, 0x7F, 0x7F); // Здесь ещё работает
 8004056:	237f      	movs	r3, #127	; 0x7f
 8004058:	227f      	movs	r2, #127	; 0x7f
 800405a:	2100      	movs	r1, #0
 800405c:	2000      	movs	r0, #0
 800405e:	f7ff f9fb 	bl	8003458 <weoDrawRectangleInit>

		len=8192;
 8004062:	4b3c      	ldr	r3, [pc, #240]	; (8004154 <weoShowFullScreenDMA+0x114>)
 8004064:	2280      	movs	r2, #128	; 0x80
 8004066:	0192      	lsls	r2, r2, #6
 8004068:	801a      	strh	r2, [r3, #0]
		dma_spi_cnt=len;
 800406a:	4b3a      	ldr	r3, [pc, #232]	; (8004154 <weoShowFullScreenDMA+0x114>)
 800406c:	881a      	ldrh	r2, [r3, #0]
 800406e:	4b3a      	ldr	r3, [pc, #232]	; (8004158 <weoShowFullScreenDMA+0x118>)
 8004070:	801a      	strh	r2, [r3, #0]
		memCMD = 0x13; //read command with 4-byte address
 8004072:	483a      	ldr	r0, [pc, #232]	; (800415c <weoShowFullScreenDMA+0x11c>)
 8004074:	183b      	adds	r3, r7, r0
 8004076:	2213      	movs	r2, #19
 8004078:	701a      	strb	r2, [r3, #0]

		addr=((picNum)*0x2000);
 800407a:	4b34      	ldr	r3, [pc, #208]	; (800414c <weoShowFullScreenDMA+0x10c>)
 800407c:	4a34      	ldr	r2, [pc, #208]	; (8004150 <weoShowFullScreenDMA+0x110>)
 800407e:	4694      	mov	ip, r2
 8004080:	44bc      	add	ip, r7
 8004082:	4463      	add	r3, ip
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	035b      	lsls	r3, r3, #13
 8004088:	4935      	ldr	r1, [pc, #212]	; (8004160 <weoShowFullScreenDMA+0x120>)
 800408a:	187a      	adds	r2, r7, r1
 800408c:	6013      	str	r3, [r2, #0]

		addrArray[0]=addr & 0xFF;
 800408e:	187b      	adds	r3, r7, r1
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	b2da      	uxtb	r2, r3
 8004094:	4b33      	ldr	r3, [pc, #204]	; (8004164 <weoShowFullScreenDMA+0x124>)
 8004096:	4c2e      	ldr	r4, [pc, #184]	; (8004150 <weoShowFullScreenDMA+0x110>)
 8004098:	46a4      	mov	ip, r4
 800409a:	44bc      	add	ip, r7
 800409c:	4463      	add	r3, ip
 800409e:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 80040a0:	187b      	adds	r3, r7, r1
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	0a1b      	lsrs	r3, r3, #8
 80040a6:	b2da      	uxtb	r2, r3
 80040a8:	4b2e      	ldr	r3, [pc, #184]	; (8004164 <weoShowFullScreenDMA+0x124>)
 80040aa:	4c29      	ldr	r4, [pc, #164]	; (8004150 <weoShowFullScreenDMA+0x110>)
 80040ac:	46a4      	mov	ip, r4
 80040ae:	44bc      	add	ip, r7
 80040b0:	4463      	add	r3, ip
 80040b2:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 80040b4:	187b      	adds	r3, r7, r1
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	0c1b      	lsrs	r3, r3, #16
 80040ba:	b2da      	uxtb	r2, r3
 80040bc:	4b29      	ldr	r3, [pc, #164]	; (8004164 <weoShowFullScreenDMA+0x124>)
 80040be:	4c24      	ldr	r4, [pc, #144]	; (8004150 <weoShowFullScreenDMA+0x110>)
 80040c0:	46a4      	mov	ip, r4
 80040c2:	44bc      	add	ip, r7
 80040c4:	4463      	add	r3, ip
 80040c6:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 80040c8:	187b      	adds	r3, r7, r1
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	0e1b      	lsrs	r3, r3, #24
 80040ce:	b2da      	uxtb	r2, r3
 80040d0:	4b24      	ldr	r3, [pc, #144]	; (8004164 <weoShowFullScreenDMA+0x124>)
 80040d2:	491f      	ldr	r1, [pc, #124]	; (8004150 <weoShowFullScreenDMA+0x110>)
 80040d4:	468c      	mov	ip, r1
 80040d6:	44bc      	add	ip, r7
 80040d8:	4463      	add	r3, ip
 80040da:	70da      	strb	r2, [r3, #3]

		GPIOC->ODR &= ~(1 << 15); //reset cs
 80040dc:	4b22      	ldr	r3, [pc, #136]	; (8004168 <weoShowFullScreenDMA+0x128>)
 80040de:	695a      	ldr	r2, [r3, #20]
 80040e0:	4b21      	ldr	r3, [pc, #132]	; (8004168 <weoShowFullScreenDMA+0x128>)
 80040e2:	4922      	ldr	r1, [pc, #136]	; (800416c <weoShowFullScreenDMA+0x12c>)
 80040e4:	400a      	ands	r2, r1
 80040e6:	615a      	str	r2, [r3, #20]

		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 80040e8:	1839      	adds	r1, r7, r0
 80040ea:	4821      	ldr	r0, [pc, #132]	; (8004170 <weoShowFullScreenDMA+0x130>)
 80040ec:	2332      	movs	r3, #50	; 0x32
 80040ee:	2201      	movs	r2, #1
 80040f0:	f005 f882 	bl	80091f8 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 80040f4:	2408      	movs	r4, #8
 80040f6:	193b      	adds	r3, r7, r4
 80040f8:	1cd9      	adds	r1, r3, #3
 80040fa:	481d      	ldr	r0, [pc, #116]	; (8004170 <weoShowFullScreenDMA+0x130>)
 80040fc:	2332      	movs	r3, #50	; 0x32
 80040fe:	2201      	movs	r2, #1
 8004100:	f005 f87a 	bl	80091f8 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 8004104:	193b      	adds	r3, r7, r4
 8004106:	1c99      	adds	r1, r3, #2
 8004108:	4819      	ldr	r0, [pc, #100]	; (8004170 <weoShowFullScreenDMA+0x130>)
 800410a:	2332      	movs	r3, #50	; 0x32
 800410c:	2201      	movs	r2, #1
 800410e:	f005 f873 	bl	80091f8 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 8004112:	193b      	adds	r3, r7, r4
 8004114:	1c59      	adds	r1, r3, #1
 8004116:	4816      	ldr	r0, [pc, #88]	; (8004170 <weoShowFullScreenDMA+0x130>)
 8004118:	2332      	movs	r3, #50	; 0x32
 800411a:	2201      	movs	r2, #1
 800411c:	f005 f86c 	bl	80091f8 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 8004120:	1939      	adds	r1, r7, r4
 8004122:	4813      	ldr	r0, [pc, #76]	; (8004170 <weoShowFullScreenDMA+0x130>)
 8004124:	2332      	movs	r3, #50	; 0x32
 8004126:	2201      	movs	r2, #1
 8004128:	f005 f866 	bl	80091f8 <HAL_SPI_Transmit>
		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &MEM_Buffer ,len);
 800412c:	4b09      	ldr	r3, [pc, #36]	; (8004154 <weoShowFullScreenDMA+0x114>)
 800412e:	881a      	ldrh	r2, [r3, #0]
 8004130:	4910      	ldr	r1, [pc, #64]	; (8004174 <weoShowFullScreenDMA+0x134>)
 8004132:	4b0f      	ldr	r3, [pc, #60]	; (8004170 <weoShowFullScreenDMA+0x130>)
 8004134:	0018      	movs	r0, r3
 8004136:	f005 fcd5 	bl	8009ae4 <HAL_SPI_Receive_DMA>
	}
 800413a:	46c0      	nop			; (mov r8, r8)
 800413c:	0018      	movs	r0, r3
 800413e:	46bd      	mov	sp, r7
 8004140:	4b0d      	ldr	r3, [pc, #52]	; (8004178 <weoShowFullScreenDMA+0x138>)
 8004142:	449d      	add	sp, r3
 8004144:	bd90      	pop	{r4, r7, pc}
 8004146:	46c0      	nop			; (mov r8, r8)
 8004148:	ffffdfe4 	.word	0xffffdfe4
 800414c:	ffffdfef 	.word	0xffffdfef
 8004150:	00002018 	.word	0x00002018
 8004154:	200035dc 	.word	0x200035dc
 8004158:	20003132 	.word	0x20003132
 800415c:	00002013 	.word	0x00002013
 8004160:	00002014 	.word	0x00002014
 8004164:	ffffdff0 	.word	0xffffdff0
 8004168:	50000800 	.word	0x50000800
 800416c:	ffff7fff 	.word	0xffff7fff
 8004170:	200031b0 	.word	0x200031b0
 8004174:	200035e4 	.word	0x200035e4
 8004178:	0000201c 	.word	0x0000201c

0800417c <weoShowSmallImage>:
//==========================================================================================================================
	uint8_t weoShowSmallImage(uint8_t picNum, uint8_t imX, uint8_t imY) {
 800417c:	b590      	push	{r4, r7, lr}
 800417e:	4cb4      	ldr	r4, [pc, #720]	; (8004450 <weoShowSmallImage+0x2d4>)
 8004180:	44a5      	add	sp, r4
 8004182:	af02      	add	r7, sp, #8
 8004184:	0004      	movs	r4, r0
 8004186:	0008      	movs	r0, r1
 8004188:	0011      	movs	r1, r2
 800418a:	4bb2      	ldr	r3, [pc, #712]	; (8004454 <weoShowSmallImage+0x2d8>)
 800418c:	4ab2      	ldr	r2, [pc, #712]	; (8004458 <weoShowSmallImage+0x2dc>)
 800418e:	4694      	mov	ip, r2
 8004190:	44bc      	add	ip, r7
 8004192:	4463      	add	r3, ip
 8004194:	1c22      	adds	r2, r4, #0
 8004196:	701a      	strb	r2, [r3, #0]
 8004198:	4bb0      	ldr	r3, [pc, #704]	; (800445c <weoShowSmallImage+0x2e0>)
 800419a:	4aaf      	ldr	r2, [pc, #700]	; (8004458 <weoShowSmallImage+0x2dc>)
 800419c:	4694      	mov	ip, r2
 800419e:	44bc      	add	ip, r7
 80041a0:	4463      	add	r3, ip
 80041a2:	1c02      	adds	r2, r0, #0
 80041a4:	701a      	strb	r2, [r3, #0]
 80041a6:	4bae      	ldr	r3, [pc, #696]	; (8004460 <weoShowSmallImage+0x2e4>)
 80041a8:	4aab      	ldr	r2, [pc, #684]	; (8004458 <weoShowSmallImage+0x2dc>)
 80041aa:	4694      	mov	ip, r2
 80041ac:	44bc      	add	ip, r7
 80041ae:	4463      	add	r3, ip
 80041b0:	1c0a      	adds	r2, r1, #0
 80041b2:	701a      	strb	r2, [r3, #0]
		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H,decY;
		uint8_t MEM_Buffer[8192];
		uint8_t imInfo[2],addrArray[4];
		uint16_t i;
		uint32_t addr,addrData;
		addr=0x00000000;
 80041b4:	2300      	movs	r3, #0
 80041b6:	49ab      	ldr	r1, [pc, #684]	; (8004464 <weoShowSmallImage+0x2e8>)
 80041b8:	187a      	adds	r2, r7, r1
 80041ba:	6013      	str	r3, [r2, #0]
		memCMD = 0x13; //read command with 4-byte address
 80041bc:	48aa      	ldr	r0, [pc, #680]	; (8004468 <weoShowSmallImage+0x2ec>)
 80041be:	183b      	adds	r3, r7, r0
 80041c0:	2213      	movs	r2, #19
 80041c2:	701a      	strb	r2, [r3, #0]
		//look at info about image
		addr=(picNum*0x2000)+0x200000;// the right path is to multiply picNum * image repeat period!
 80041c4:	4ba3      	ldr	r3, [pc, #652]	; (8004454 <weoShowSmallImage+0x2d8>)
 80041c6:	4aa4      	ldr	r2, [pc, #656]	; (8004458 <weoShowSmallImage+0x2dc>)
 80041c8:	4694      	mov	ip, r2
 80041ca:	44bc      	add	ip, r7
 80041cc:	4463      	add	r3, ip
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	3301      	adds	r3, #1
 80041d2:	33ff      	adds	r3, #255	; 0xff
 80041d4:	035b      	lsls	r3, r3, #13
 80041d6:	187a      	adds	r2, r7, r1
 80041d8:	6013      	str	r3, [r2, #0]
//		addr=(picNum*0x2000);

		addrArray[0]=addr & 0xFF;
 80041da:	187b      	adds	r3, r7, r1
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	b2da      	uxtb	r2, r3
 80041e0:	4ba2      	ldr	r3, [pc, #648]	; (800446c <weoShowSmallImage+0x2f0>)
 80041e2:	4c9d      	ldr	r4, [pc, #628]	; (8004458 <weoShowSmallImage+0x2dc>)
 80041e4:	46a4      	mov	ip, r4
 80041e6:	44bc      	add	ip, r7
 80041e8:	4463      	add	r3, ip
 80041ea:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 80041ec:	187b      	adds	r3, r7, r1
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	0a1b      	lsrs	r3, r3, #8
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	4b9d      	ldr	r3, [pc, #628]	; (800446c <weoShowSmallImage+0x2f0>)
 80041f6:	4c98      	ldr	r4, [pc, #608]	; (8004458 <weoShowSmallImage+0x2dc>)
 80041f8:	46a4      	mov	ip, r4
 80041fa:	44bc      	add	ip, r7
 80041fc:	4463      	add	r3, ip
 80041fe:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 8004200:	187b      	adds	r3, r7, r1
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	0c1b      	lsrs	r3, r3, #16
 8004206:	b2da      	uxtb	r2, r3
 8004208:	4b98      	ldr	r3, [pc, #608]	; (800446c <weoShowSmallImage+0x2f0>)
 800420a:	4c93      	ldr	r4, [pc, #588]	; (8004458 <weoShowSmallImage+0x2dc>)
 800420c:	46a4      	mov	ip, r4
 800420e:	44bc      	add	ip, r7
 8004210:	4463      	add	r3, ip
 8004212:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 8004214:	187b      	adds	r3, r7, r1
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	0e1b      	lsrs	r3, r3, #24
 800421a:	b2da      	uxtb	r2, r3
 800421c:	4b93      	ldr	r3, [pc, #588]	; (800446c <weoShowSmallImage+0x2f0>)
 800421e:	498e      	ldr	r1, [pc, #568]	; (8004458 <weoShowSmallImage+0x2dc>)
 8004220:	468c      	mov	ip, r1
 8004222:	44bc      	add	ip, r7
 8004224:	4463      	add	r3, ip
 8004226:	70da      	strb	r2, [r3, #3]

		GPIOC->ODR &= ~(1 << 15); //reset cs
 8004228:	4b91      	ldr	r3, [pc, #580]	; (8004470 <weoShowSmallImage+0x2f4>)
 800422a:	695a      	ldr	r2, [r3, #20]
 800422c:	4b90      	ldr	r3, [pc, #576]	; (8004470 <weoShowSmallImage+0x2f4>)
 800422e:	4991      	ldr	r1, [pc, #580]	; (8004474 <weoShowSmallImage+0x2f8>)
 8004230:	400a      	ands	r2, r1
 8004232:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 8004234:	1839      	adds	r1, r7, r0
 8004236:	4890      	ldr	r0, [pc, #576]	; (8004478 <weoShowSmallImage+0x2fc>)
 8004238:	2332      	movs	r3, #50	; 0x32
 800423a:	2201      	movs	r2, #1
 800423c:	f004 ffdc 	bl	80091f8 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 8004240:	240c      	movs	r4, #12
 8004242:	193b      	adds	r3, r7, r4
 8004244:	1cd9      	adds	r1, r3, #3
 8004246:	488c      	ldr	r0, [pc, #560]	; (8004478 <weoShowSmallImage+0x2fc>)
 8004248:	2332      	movs	r3, #50	; 0x32
 800424a:	2201      	movs	r2, #1
 800424c:	f004 ffd4 	bl	80091f8 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 8004250:	193b      	adds	r3, r7, r4
 8004252:	1c99      	adds	r1, r3, #2
 8004254:	4888      	ldr	r0, [pc, #544]	; (8004478 <weoShowSmallImage+0x2fc>)
 8004256:	2332      	movs	r3, #50	; 0x32
 8004258:	2201      	movs	r2, #1
 800425a:	f004 ffcd 	bl	80091f8 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 800425e:	193b      	adds	r3, r7, r4
 8004260:	1c59      	adds	r1, r3, #1
 8004262:	4885      	ldr	r0, [pc, #532]	; (8004478 <weoShowSmallImage+0x2fc>)
 8004264:	2332      	movs	r3, #50	; 0x32
 8004266:	2201      	movs	r2, #1
 8004268:	f004 ffc6 	bl	80091f8 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 800426c:	1939      	adds	r1, r7, r4
 800426e:	4882      	ldr	r0, [pc, #520]	; (8004478 <weoShowSmallImage+0x2fc>)
 8004270:	2332      	movs	r3, #50	; 0x32
 8004272:	2201      	movs	r2, #1
 8004274:	f004 ffc0 	bl	80091f8 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &imInfo,2, 5000);
 8004278:	4b80      	ldr	r3, [pc, #512]	; (800447c <weoShowSmallImage+0x300>)
 800427a:	2210      	movs	r2, #16
 800427c:	18b9      	adds	r1, r7, r2
 800427e:	487e      	ldr	r0, [pc, #504]	; (8004478 <weoShowSmallImage+0x2fc>)
 8004280:	2202      	movs	r2, #2
 8004282:	f005 f911 	bl	80094a8 <HAL_SPI_Receive>
		GPIOC->ODR |= 1 << 15; // set cs
 8004286:	4b7a      	ldr	r3, [pc, #488]	; (8004470 <weoShowSmallImage+0x2f4>)
 8004288:	695a      	ldr	r2, [r3, #20]
 800428a:	4b79      	ldr	r3, [pc, #484]	; (8004470 <weoShowSmallImage+0x2f4>)
 800428c:	2180      	movs	r1, #128	; 0x80
 800428e:	0209      	lsls	r1, r1, #8
 8004290:	430a      	orrs	r2, r1
 8004292:	615a      	str	r2, [r3, #20]

		width=imInfo[0];
 8004294:	497a      	ldr	r1, [pc, #488]	; (8004480 <weoShowSmallImage+0x304>)
 8004296:	187b      	adds	r3, r7, r1
 8004298:	4a7a      	ldr	r2, [pc, #488]	; (8004484 <weoShowSmallImage+0x308>)
 800429a:	486f      	ldr	r0, [pc, #444]	; (8004458 <weoShowSmallImage+0x2dc>)
 800429c:	4684      	mov	ip, r0
 800429e:	44bc      	add	ip, r7
 80042a0:	4462      	add	r2, ip
 80042a2:	7812      	ldrb	r2, [r2, #0]
 80042a4:	701a      	strb	r2, [r3, #0]
		height=imInfo[1];
 80042a6:	4878      	ldr	r0, [pc, #480]	; (8004488 <weoShowSmallImage+0x30c>)
 80042a8:	183b      	adds	r3, r7, r0
 80042aa:	4a76      	ldr	r2, [pc, #472]	; (8004484 <weoShowSmallImage+0x308>)
 80042ac:	4c6a      	ldr	r4, [pc, #424]	; (8004458 <weoShowSmallImage+0x2dc>)
 80042ae:	46a4      	mov	ip, r4
 80042b0:	44bc      	add	ip, r7
 80042b2:	4462      	add	r2, ip
 80042b4:	7852      	ldrb	r2, [r2, #1]
 80042b6:	701a      	strb	r2, [r3, #0]

		len=width*height/2;
 80042b8:	187b      	adds	r3, r7, r1
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	183a      	adds	r2, r7, r0
 80042be:	7812      	ldrb	r2, [r2, #0]
 80042c0:	4353      	muls	r3, r2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	da00      	bge.n	80042c8 <weoShowSmallImage+0x14c>
 80042c6:	3301      	adds	r3, #1
 80042c8:	105b      	asrs	r3, r3, #1
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	4b6f      	ldr	r3, [pc, #444]	; (800448c <weoShowSmallImage+0x310>)
 80042ce:	801a      	strh	r2, [r3, #0]

		addrData=addr+0x02;
 80042d0:	4b64      	ldr	r3, [pc, #400]	; (8004464 <weoShowSmallImage+0x2e8>)
 80042d2:	18fb      	adds	r3, r7, r3
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	3302      	adds	r3, #2
 80042d8:	496d      	ldr	r1, [pc, #436]	; (8004490 <weoShowSmallImage+0x314>)
 80042da:	187a      	adds	r2, r7, r1
 80042dc:	6013      	str	r3, [r2, #0]
		addrArray[0]=addrData & 0xFF;
 80042de:	187b      	adds	r3, r7, r1
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	4b61      	ldr	r3, [pc, #388]	; (800446c <weoShowSmallImage+0x2f0>)
 80042e6:	485c      	ldr	r0, [pc, #368]	; (8004458 <weoShowSmallImage+0x2dc>)
 80042e8:	4684      	mov	ip, r0
 80042ea:	44bc      	add	ip, r7
 80042ec:	4463      	add	r3, ip
 80042ee:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addrData >> 8) & 0xFF;
 80042f0:	187b      	adds	r3, r7, r1
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	0a1b      	lsrs	r3, r3, #8
 80042f6:	b2da      	uxtb	r2, r3
 80042f8:	4b5c      	ldr	r3, [pc, #368]	; (800446c <weoShowSmallImage+0x2f0>)
 80042fa:	4857      	ldr	r0, [pc, #348]	; (8004458 <weoShowSmallImage+0x2dc>)
 80042fc:	4684      	mov	ip, r0
 80042fe:	44bc      	add	ip, r7
 8004300:	4463      	add	r3, ip
 8004302:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addrData >> 16) & 0xFF;
 8004304:	187b      	adds	r3, r7, r1
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	0c1b      	lsrs	r3, r3, #16
 800430a:	b2da      	uxtb	r2, r3
 800430c:	4b57      	ldr	r3, [pc, #348]	; (800446c <weoShowSmallImage+0x2f0>)
 800430e:	4852      	ldr	r0, [pc, #328]	; (8004458 <weoShowSmallImage+0x2dc>)
 8004310:	4684      	mov	ip, r0
 8004312:	44bc      	add	ip, r7
 8004314:	4463      	add	r3, ip
 8004316:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addrData >> 24) & 0xFF;
 8004318:	187b      	adds	r3, r7, r1
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	0e1b      	lsrs	r3, r3, #24
 800431e:	b2da      	uxtb	r2, r3
 8004320:	4b52      	ldr	r3, [pc, #328]	; (800446c <weoShowSmallImage+0x2f0>)
 8004322:	494d      	ldr	r1, [pc, #308]	; (8004458 <weoShowSmallImage+0x2dc>)
 8004324:	468c      	mov	ip, r1
 8004326:	44bc      	add	ip, r7
 8004328:	4463      	add	r3, ip
 800432a:	70da      	strb	r2, [r3, #3]

		USART2->ICR|=USART_ICR_ORECF;
 800432c:	4b59      	ldr	r3, [pc, #356]	; (8004494 <weoShowSmallImage+0x318>)
 800432e:	6a1a      	ldr	r2, [r3, #32]
 8004330:	4b58      	ldr	r3, [pc, #352]	; (8004494 <weoShowSmallImage+0x318>)
 8004332:	2108      	movs	r1, #8
 8004334:	430a      	orrs	r2, r1
 8004336:	621a      	str	r2, [r3, #32]
		memCMD = 0x13; //read command with 4-byte address
 8004338:	484b      	ldr	r0, [pc, #300]	; (8004468 <weoShowSmallImage+0x2ec>)
 800433a:	183b      	adds	r3, r7, r0
 800433c:	2213      	movs	r2, #19
 800433e:	701a      	strb	r2, [r3, #0]

		GPIOC->ODR &= ~(1 << 15);	//reset cs
 8004340:	4b4b      	ldr	r3, [pc, #300]	; (8004470 <weoShowSmallImage+0x2f4>)
 8004342:	695a      	ldr	r2, [r3, #20]
 8004344:	4b4a      	ldr	r3, [pc, #296]	; (8004470 <weoShowSmallImage+0x2f4>)
 8004346:	494b      	ldr	r1, [pc, #300]	; (8004474 <weoShowSmallImage+0x2f8>)
 8004348:	400a      	ands	r2, r1
 800434a:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50);//read command with 4-byte address
 800434c:	1839      	adds	r1, r7, r0
 800434e:	484a      	ldr	r0, [pc, #296]	; (8004478 <weoShowSmallImage+0x2fc>)
 8004350:	2332      	movs	r3, #50	; 0x32
 8004352:	2201      	movs	r2, #1
 8004354:	f004 ff50 	bl	80091f8 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3],1, 50);	//send address
 8004358:	240c      	movs	r4, #12
 800435a:	193b      	adds	r3, r7, r4
 800435c:	1cd9      	adds	r1, r3, #3
 800435e:	4846      	ldr	r0, [pc, #280]	; (8004478 <weoShowSmallImage+0x2fc>)
 8004360:	2332      	movs	r3, #50	; 0x32
 8004362:	2201      	movs	r2, #1
 8004364:	f004 ff48 	bl	80091f8 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2],1, 50);	//send address
 8004368:	193b      	adds	r3, r7, r4
 800436a:	1c99      	adds	r1, r3, #2
 800436c:	4842      	ldr	r0, [pc, #264]	; (8004478 <weoShowSmallImage+0x2fc>)
 800436e:	2332      	movs	r3, #50	; 0x32
 8004370:	2201      	movs	r2, #1
 8004372:	f004 ff41 	bl	80091f8 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1],1, 50);	//send address
 8004376:	193b      	adds	r3, r7, r4
 8004378:	1c59      	adds	r1, r3, #1
 800437a:	483f      	ldr	r0, [pc, #252]	; (8004478 <weoShowSmallImage+0x2fc>)
 800437c:	2332      	movs	r3, #50	; 0x32
 800437e:	2201      	movs	r2, #1
 8004380:	f004 ff3a 	bl	80091f8 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0],1, 50);	//send address
 8004384:	1939      	adds	r1, r7, r4
 8004386:	483c      	ldr	r0, [pc, #240]	; (8004478 <weoShowSmallImage+0x2fc>)
 8004388:	2332      	movs	r3, #50	; 0x32
 800438a:	2201      	movs	r2, #1
 800438c:	f004 ff34 	bl	80091f8 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,len, 5000);// 7 information bits about the image
 8004390:	4b3e      	ldr	r3, [pc, #248]	; (800448c <weoShowSmallImage+0x310>)
 8004392:	881a      	ldrh	r2, [r3, #0]
 8004394:	4b39      	ldr	r3, [pc, #228]	; (800447c <weoShowSmallImage+0x300>)
 8004396:	2114      	movs	r1, #20
 8004398:	1879      	adds	r1, r7, r1
 800439a:	4837      	ldr	r0, [pc, #220]	; (8004478 <weoShowSmallImage+0x2fc>)
 800439c:	f005 f884 	bl	80094a8 <HAL_SPI_Receive>
		GPIOC->ODR |= 1 << 15;	// set cs
 80043a0:	4b33      	ldr	r3, [pc, #204]	; (8004470 <weoShowSmallImage+0x2f4>)
 80043a2:	695a      	ldr	r2, [r3, #20]
 80043a4:	4b32      	ldr	r3, [pc, #200]	; (8004470 <weoShowSmallImage+0x2f4>)
 80043a6:	2180      	movs	r1, #128	; 0x80
 80043a8:	0209      	lsls	r1, r1, #8
 80043aa:	430a      	orrs	r2, r1
 80043ac:	615a      	str	r2, [r3, #20]

		decY=0x01;
 80043ae:	493a      	ldr	r1, [pc, #232]	; (8004498 <weoShowSmallImage+0x31c>)
 80043b0:	187b      	adds	r3, r7, r1
 80043b2:	2201      	movs	r2, #1
 80043b4:	701a      	strb	r2, [r3, #0]
		if(imY % 2 !=0){
 80043b6:	4b2a      	ldr	r3, [pc, #168]	; (8004460 <weoShowSmallImage+0x2e4>)
 80043b8:	4a27      	ldr	r2, [pc, #156]	; (8004458 <weoShowSmallImage+0x2dc>)
 80043ba:	4694      	mov	ip, r2
 80043bc:	44bc      	add	ip, r7
 80043be:	4463      	add	r3, ip
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	2201      	movs	r2, #1
 80043c4:	4013      	ands	r3, r2
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d002      	beq.n	80043d2 <weoShowSmallImage+0x256>
			decY=0x02;
 80043cc:	187b      	adds	r3, r7, r1
 80043ce:	2202      	movs	r2, #2
 80043d0:	701a      	strb	r2, [r3, #0]
		}
		weoDrawRectangleFilled(imX, imY, imX+width-1, imY+height-decY, 0xFF,MEM_Buffer);	// Здесь ещё работает 0xFF - затычка
 80043d2:	4b22      	ldr	r3, [pc, #136]	; (800445c <weoShowSmallImage+0x2e0>)
 80043d4:	4920      	ldr	r1, [pc, #128]	; (8004458 <weoShowSmallImage+0x2dc>)
 80043d6:	187a      	adds	r2, r7, r1
 80043d8:	18d2      	adds	r2, r2, r3
 80043da:	4b29      	ldr	r3, [pc, #164]	; (8004480 <weoShowSmallImage+0x304>)
 80043dc:	18fb      	adds	r3, r7, r3
 80043de:	7812      	ldrb	r2, [r2, #0]
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	18d3      	adds	r3, r2, r3
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	3b01      	subs	r3, #1
 80043e8:	b2dc      	uxtb	r4, r3
 80043ea:	4b1d      	ldr	r3, [pc, #116]	; (8004460 <weoShowSmallImage+0x2e4>)
 80043ec:	187a      	adds	r2, r7, r1
 80043ee:	18d2      	adds	r2, r2, r3
 80043f0:	4b25      	ldr	r3, [pc, #148]	; (8004488 <weoShowSmallImage+0x30c>)
 80043f2:	18fb      	adds	r3, r7, r3
 80043f4:	7812      	ldrb	r2, [r2, #0]
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	18d3      	adds	r3, r2, r3
 80043fa:	b2da      	uxtb	r2, r3
 80043fc:	4b26      	ldr	r3, [pc, #152]	; (8004498 <weoShowSmallImage+0x31c>)
 80043fe:	18fb      	adds	r3, r7, r3
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	b2da      	uxtb	r2, r3
 8004406:	4b16      	ldr	r3, [pc, #88]	; (8004460 <weoShowSmallImage+0x2e4>)
 8004408:	4913      	ldr	r1, [pc, #76]	; (8004458 <weoShowSmallImage+0x2dc>)
 800440a:	468c      	mov	ip, r1
 800440c:	44bc      	add	ip, r7
 800440e:	4463      	add	r3, ip
 8004410:	7819      	ldrb	r1, [r3, #0]
 8004412:	4b12      	ldr	r3, [pc, #72]	; (800445c <weoShowSmallImage+0x2e0>)
 8004414:	4810      	ldr	r0, [pc, #64]	; (8004458 <weoShowSmallImage+0x2dc>)
 8004416:	4684      	mov	ip, r0
 8004418:	44bc      	add	ip, r7
 800441a:	4463      	add	r3, ip
 800441c:	7818      	ldrb	r0, [r3, #0]
 800441e:	2314      	movs	r3, #20
 8004420:	18fb      	adds	r3, r7, r3
 8004422:	9301      	str	r3, [sp, #4]
 8004424:	23ff      	movs	r3, #255	; 0xff
 8004426:	9300      	str	r3, [sp, #0]
 8004428:	0013      	movs	r3, r2
 800442a:	0022      	movs	r2, r4
 800442c:	f7fe ff38 	bl	80032a0 <weoDrawRectangleFilled>
		GPIOC->ODR |= 1 << 6;	//set BF
 8004430:	4b0f      	ldr	r3, [pc, #60]	; (8004470 <weoShowSmallImage+0x2f4>)
 8004432:	695a      	ldr	r2, [r3, #20]
 8004434:	4b0e      	ldr	r3, [pc, #56]	; (8004470 <weoShowSmallImage+0x2f4>)
 8004436:	2140      	movs	r1, #64	; 0x40
 8004438:	430a      	orrs	r2, r1
 800443a:	615a      	str	r2, [r3, #20]
		cmd2Execute=0;
 800443c:	4b17      	ldr	r3, [pc, #92]	; (800449c <weoShowSmallImage+0x320>)
 800443e:	2200      	movs	r2, #0
 8004440:	701a      	strb	r2, [r3, #0]
	}
 8004442:	46c0      	nop			; (mov r8, r8)
 8004444:	0018      	movs	r0, r3
 8004446:	46bd      	mov	sp, r7
 8004448:	4b15      	ldr	r3, [pc, #84]	; (80044a0 <weoShowSmallImage+0x324>)
 800444a:	449d      	add	sp, r3
 800444c:	bd90      	pop	{r4, r7, pc}
 800444e:	46c0      	nop			; (mov r8, r8)
 8004450:	ffffdfcc 	.word	0xffffdfcc
 8004454:	ffffdfdf 	.word	0xffffdfdf
 8004458:	00002028 	.word	0x00002028
 800445c:	ffffdfde 	.word	0xffffdfde
 8004460:	ffffdfdd 	.word	0xffffdfdd
 8004464:	00002020 	.word	0x00002020
 8004468:	00002017 	.word	0x00002017
 800446c:	ffffdfe4 	.word	0xffffdfe4
 8004470:	50000800 	.word	0x50000800
 8004474:	ffff7fff 	.word	0xffff7fff
 8004478:	200031b0 	.word	0x200031b0
 800447c:	00001388 	.word	0x00001388
 8004480:	0000201f 	.word	0x0000201f
 8004484:	ffffdfe8 	.word	0xffffdfe8
 8004488:	0000201e 	.word	0x0000201e
 800448c:	200035dc 	.word	0x200035dc
 8004490:	00002018 	.word	0x00002018
 8004494:	40004400 	.word	0x40004400
 8004498:	00002027 	.word	0x00002027
 800449c:	2000345e 	.word	0x2000345e
 80044a0:	0000202c 	.word	0x0000202c

080044a4 <MEM_GetID>:
		dat = 0x04;
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 5);//write disable Is it neccessary, if WP pin is used????????????????????????????
		GPIOC->ODR |= 1 << 15;	// set cs
//    GPIOC->ODR &= ~(1 << 14);//Write Disable
	}
	uint32_t MEM_GetID(void) {
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
		uint8_t dat;
		uint8_t tmp[1] = { 0x00 };
 80044aa:	1d3b      	adds	r3, r7, #4
 80044ac:	4a29      	ldr	r2, [pc, #164]	; (8004554 <MEM_GetID+0xb0>)
 80044ae:	7812      	ldrb	r2, [r2, #0]
 80044b0:	701a      	strb	r2, [r3, #0]
		dat = 0x9E;
 80044b2:	1dfb      	adds	r3, r7, #7
 80044b4:	229e      	movs	r2, #158	; 0x9e
 80044b6:	701a      	strb	r2, [r3, #0]
		GPIOC->ODR &= ~(1 << 15);	//reset cs
 80044b8:	4b27      	ldr	r3, [pc, #156]	; (8004558 <MEM_GetID+0xb4>)
 80044ba:	695a      	ldr	r2, [r3, #20]
 80044bc:	4b26      	ldr	r3, [pc, #152]	; (8004558 <MEM_GetID+0xb4>)
 80044be:	4927      	ldr	r1, [pc, #156]	; (800455c <MEM_GetID+0xb8>)
 80044c0:	400a      	ands	r2, r1
 80044c2:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 50);	//read ID command
 80044c4:	1df9      	adds	r1, r7, #7
 80044c6:	4826      	ldr	r0, [pc, #152]	; (8004560 <MEM_GetID+0xbc>)
 80044c8:	2332      	movs	r3, #50	; 0x32
 80044ca:	2201      	movs	r2, #1
 80044cc:	f004 fe94 	bl	80091f8 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 80044d0:	23fa      	movs	r3, #250	; 0xfa
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	1d39      	adds	r1, r7, #4
 80044d6:	4822      	ldr	r0, [pc, #136]	; (8004560 <MEM_GetID+0xbc>)
 80044d8:	2201      	movs	r2, #1
 80044da:	f004 ffe5 	bl	80094a8 <HAL_SPI_Receive>
		MEM_ID = (uint32_t) tmp[0];
 80044de:	1d3b      	adds	r3, r7, #4
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	001a      	movs	r2, r3
 80044e4:	4b1f      	ldr	r3, [pc, #124]	; (8004564 <MEM_GetID+0xc0>)
 80044e6:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;                    			//MSB
 80044e8:	4b1e      	ldr	r3, [pc, #120]	; (8004564 <MEM_GetID+0xc0>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	021a      	lsls	r2, r3, #8
 80044ee:	4b1d      	ldr	r3, [pc, #116]	; (8004564 <MEM_GetID+0xc0>)
 80044f0:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 80044f2:	23fa      	movs	r3, #250	; 0xfa
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	1d39      	adds	r1, r7, #4
 80044f8:	4819      	ldr	r0, [pc, #100]	; (8004560 <MEM_GetID+0xbc>)
 80044fa:	2201      	movs	r2, #1
 80044fc:	f004 ffd4 	bl	80094a8 <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8004500:	1d3b      	adds	r3, r7, #4
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	001a      	movs	r2, r3
 8004506:	4b17      	ldr	r3, [pc, #92]	; (8004564 <MEM_GetID+0xc0>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	18d2      	adds	r2, r2, r3
 800450c:	4b15      	ldr	r3, [pc, #84]	; (8004564 <MEM_GetID+0xc0>)
 800450e:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;
 8004510:	4b14      	ldr	r3, [pc, #80]	; (8004564 <MEM_GetID+0xc0>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	021a      	lsls	r2, r3, #8
 8004516:	4b13      	ldr	r3, [pc, #76]	; (8004564 <MEM_GetID+0xc0>)
 8004518:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 800451a:	23fa      	movs	r3, #250	; 0xfa
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	1d39      	adds	r1, r7, #4
 8004520:	480f      	ldr	r0, [pc, #60]	; (8004560 <MEM_GetID+0xbc>)
 8004522:	2201      	movs	r2, #1
 8004524:	f004 ffc0 	bl	80094a8 <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8004528:	1d3b      	adds	r3, r7, #4
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	001a      	movs	r2, r3
 800452e:	4b0d      	ldr	r3, [pc, #52]	; (8004564 <MEM_GetID+0xc0>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	18d2      	adds	r2, r2, r3
 8004534:	4b0b      	ldr	r3, [pc, #44]	; (8004564 <MEM_GetID+0xc0>)
 8004536:	601a      	str	r2, [r3, #0]
		GPIOC->ODR |= 1 << 15;                    			// set cs
 8004538:	4b07      	ldr	r3, [pc, #28]	; (8004558 <MEM_GetID+0xb4>)
 800453a:	695a      	ldr	r2, [r3, #20]
 800453c:	4b06      	ldr	r3, [pc, #24]	; (8004558 <MEM_GetID+0xb4>)
 800453e:	2180      	movs	r1, #128	; 0x80
 8004540:	0209      	lsls	r1, r1, #8
 8004542:	430a      	orrs	r2, r1
 8004544:	615a      	str	r2, [r3, #20]
		return (MEM_ID);
 8004546:	4b07      	ldr	r3, [pc, #28]	; (8004564 <MEM_GetID+0xc0>)
 8004548:	681b      	ldr	r3, [r3, #0]
	}
 800454a:	0018      	movs	r0, r3
 800454c:	46bd      	mov	sp, r7
 800454e:	b002      	add	sp, #8
 8004550:	bd80      	pop	{r7, pc}
 8004552:	46c0      	nop			; (mov r8, r8)
 8004554:	0800e1d8 	.word	0x0800e1d8
 8004558:	50000800 	.word	0x50000800
 800455c:	ffff7fff 	.word	0xffff7fff
 8004560:	200031b0 	.word	0x200031b0
 8004564:	2000315c 	.word	0x2000315c

08004568 <Scount>:
		GPIOC->ODR |= 1 << 15;    // set cs
		//    GPIOC->ODR &= ~(1 << 14);//Write Disable
	}
//==================================================================================================================================

	uint16_t Scount(void){
 8004568:	b580      	push	{r7, lr}
 800456a:	af00      	add	r7, sp, #0

	}
 800456c:	46c0      	nop			; (mov r8, r8)
 800456e:	0018      	movs	r0, r3
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <cmdExecute>:
//====================================================================================================================
	uint8_t cmdExecute(uint8_t cmd2Execute){
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	0002      	movs	r2, r0
 800457c:	1dfb      	adds	r3, r7, #7
 800457e:	701a      	strb	r2, [r3, #0]
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 8004580:	4b55      	ldr	r3, [pc, #340]	; (80046d8 <cmdExecute+0x164>)
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	2b10      	cmp	r3, #16
 8004586:	d100      	bne.n	800458a <cmdExecute+0x16>
 8004588:	e09f      	b.n	80046ca <cmdExecute+0x156>
			if (bf4me!=0x00){return;}	// protection against false BF resets
 800458a:	4b54      	ldr	r3, [pc, #336]	; (80046dc <cmdExecute+0x168>)
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d000      	beq.n	8004594 <cmdExecute+0x20>
 8004592:	e09c      	b.n	80046ce <cmdExecute+0x15a>
		USART2->ICR|=USART_ICR_ORECF;
 8004594:	4b52      	ldr	r3, [pc, #328]	; (80046e0 <cmdExecute+0x16c>)
 8004596:	6a1a      	ldr	r2, [r3, #32]
 8004598:	4b51      	ldr	r3, [pc, #324]	; (80046e0 <cmdExecute+0x16c>)
 800459a:	2108      	movs	r1, #8
 800459c:	430a      	orrs	r2, r1
 800459e:	621a      	str	r2, [r3, #32]

				}
		if(cmd2Execute==0x10){

				}
		if(cmd2Execute==0x11){
 80045a0:	1dfb      	adds	r3, r7, #7
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	2b11      	cmp	r3, #17
 80045a6:	d107      	bne.n	80045b8 <cmdExecute+0x44>
			bf4me=0x11;	//set BF flag 4 me
 80045a8:	4b4c      	ldr	r3, [pc, #304]	; (80046dc <cmdExecute+0x168>)
 80045aa:	2211      	movs	r2, #17
 80045ac:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
//			weoShowFullScreen(picNum);
			weoShowFullScreenDMA(picNum);
 80045ae:	4b4d      	ldr	r3, [pc, #308]	; (80046e4 <cmdExecute+0x170>)
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	0018      	movs	r0, r3
 80045b4:	f7ff fd44 	bl	8004040 <weoShowFullScreenDMA>
				}
		if(cmd2Execute==0x12){
 80045b8:	1dfb      	adds	r3, r7, #7
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	2b12      	cmp	r3, #18
 80045be:	d10d      	bne.n	80045dc <cmdExecute+0x68>
			bf4me=0x12;	//set BF flag 4 me
 80045c0:	4b46      	ldr	r3, [pc, #280]	; (80046dc <cmdExecute+0x168>)
 80045c2:	2212      	movs	r2, #18
 80045c4:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
//			weoShowSmallImageDMA(picNum,imX,imY);
			weoShowSmallImage(picNum,imX,imY);
 80045c6:	4b47      	ldr	r3, [pc, #284]	; (80046e4 <cmdExecute+0x170>)
 80045c8:	7818      	ldrb	r0, [r3, #0]
 80045ca:	4b47      	ldr	r3, [pc, #284]	; (80046e8 <cmdExecute+0x174>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	b2d9      	uxtb	r1, r3
 80045d0:	4b46      	ldr	r3, [pc, #280]	; (80046ec <cmdExecute+0x178>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	001a      	movs	r2, r3
 80045d8:	f7ff fdd0 	bl	800417c <weoShowSmallImage>
				}
		if(cmd2Execute==0x13){
 80045dc:	1dfb      	adds	r3, r7, #7
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	2b13      	cmp	r3, #19
 80045e2:	d10d      	bne.n	8004600 <cmdExecute+0x8c>
			bf4me=0x13;	//set BF flag 4 me
 80045e4:	4b3d      	ldr	r3, [pc, #244]	; (80046dc <cmdExecute+0x168>)
 80045e6:	2213      	movs	r2, #19
 80045e8:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF

//			printASCIIarray_old(imX,imY, strLen,dataASCII);
			printASCIIarray(imX,imY, strLen,dataASCII);
 80045ea:	4b3f      	ldr	r3, [pc, #252]	; (80046e8 <cmdExecute+0x174>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	b2d8      	uxtb	r0, r3
 80045f0:	4b3e      	ldr	r3, [pc, #248]	; (80046ec <cmdExecute+0x178>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	b2d9      	uxtb	r1, r3
 80045f6:	4b3e      	ldr	r3, [pc, #248]	; (80046f0 <cmdExecute+0x17c>)
 80045f8:	781a      	ldrb	r2, [r3, #0]
 80045fa:	4b3e      	ldr	r3, [pc, #248]	; (80046f4 <cmdExecute+0x180>)
 80045fc:	f000 f880 	bl	8004700 <printASCIIarray>
				}
		if(cmd2Execute==0x14){
 8004600:	1dfb      	adds	r3, r7, #7
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	2b14      	cmp	r3, #20
 8004606:	d102      	bne.n	800460e <cmdExecute+0x9a>
			bf4me=0x14;	//set BF flag 4 me
 8004608:	4b34      	ldr	r3, [pc, #208]	; (80046dc <cmdExecute+0x168>)
 800460a:	2214      	movs	r2, #20
 800460c:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF


				}
		if(cmd2Execute==0x15){
 800460e:	1dfb      	adds	r3, r7, #7
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	2b15      	cmp	r3, #21
 8004614:	d148      	bne.n	80046a8 <cmdExecute+0x134>
			I2C_SOUND_ChangePage(0x01);
 8004616:	2001      	movs	r0, #1
 8004618:	f7fe ffa6 	bl	8003568 <I2C_SOUND_ChangePage>
			WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 800461c:	2100      	movs	r1, #0
 800461e:	2010      	movs	r0, #16
 8004620:	f7fe ffc0 	bl	80035a4 <WriteReg_I2C_SOUND>
			if(volume==0x00){
 8004624:	4b34      	ldr	r3, [pc, #208]	; (80046f8 <cmdExecute+0x184>)
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d103      	bne.n	8004634 <cmdExecute+0xc0>
				WriteReg_I2C_SOUND(0x2E,0xFF);//mute
 800462c:	21ff      	movs	r1, #255	; 0xff
 800462e:	202e      	movs	r0, #46	; 0x2e
 8004630:	f7fe ffb8 	bl	80035a4 <WriteReg_I2C_SOUND>
			}
			WriteReg_I2C_SOUND(0x2E, volume);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
 8004634:	4b30      	ldr	r3, [pc, #192]	; (80046f8 <cmdExecute+0x184>)
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	0019      	movs	r1, r3
 800463a:	202e      	movs	r0, #46	; 0x2e
 800463c:	f7fe ffb2 	bl	80035a4 <WriteReg_I2C_SOUND>

			if(contrast==0x00){
 8004640:	4b2e      	ldr	r3, [pc, #184]	; (80046fc <cmdExecute+0x188>)
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d102      	bne.n	800464e <cmdExecute+0xda>
				weoClear();
 8004648:	f7fe fdc6 	bl	80031d8 <weoClear>
 800464c:	e029      	b.n	80046a2 <cmdExecute+0x12e>
			}
			else{
				GPIOA->ODR &= ~(1 << 6);	//reset cs
 800464e:	23a0      	movs	r3, #160	; 0xa0
 8004650:	05db      	lsls	r3, r3, #23
 8004652:	695a      	ldr	r2, [r3, #20]
 8004654:	23a0      	movs	r3, #160	; 0xa0
 8004656:	05db      	lsls	r3, r3, #23
 8004658:	2140      	movs	r1, #64	; 0x40
 800465a:	438a      	bics	r2, r1
 800465c:	615a      	str	r2, [r3, #20]
				GPIOA->ODR &= ~(1 << 7);	// reset dc
 800465e:	23a0      	movs	r3, #160	; 0xa0
 8004660:	05db      	lsls	r3, r3, #23
 8004662:	695a      	ldr	r2, [r3, #20]
 8004664:	23a0      	movs	r3, #160	; 0xa0
 8004666:	05db      	lsls	r3, r3, #23
 8004668:	2180      	movs	r1, #128	; 0x80
 800466a:	438a      	bics	r2, r1
 800466c:	615a      	str	r2, [r3, #20]
				USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 800466e:	2081      	movs	r0, #129	; 0x81
 8004670:	f7fe fd34 	bl	80030dc <USART_AS_SPI_sendCMD>
				USART_AS_SPI_sendCMD(contrast<<1);
 8004674:	4b21      	ldr	r3, [pc, #132]	; (80046fc <cmdExecute+0x188>)
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	18db      	adds	r3, r3, r3
 800467a:	b2db      	uxtb	r3, r3
 800467c:	0018      	movs	r0, r3
 800467e:	f7fe fd2d 	bl	80030dc <USART_AS_SPI_sendCMD>
				GPIOA->ODR |= 1 << 7;	//set dc
 8004682:	23a0      	movs	r3, #160	; 0xa0
 8004684:	05db      	lsls	r3, r3, #23
 8004686:	695a      	ldr	r2, [r3, #20]
 8004688:	23a0      	movs	r3, #160	; 0xa0
 800468a:	05db      	lsls	r3, r3, #23
 800468c:	2180      	movs	r1, #128	; 0x80
 800468e:	430a      	orrs	r2, r1
 8004690:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= 1 << 6;	//set cs
 8004692:	23a0      	movs	r3, #160	; 0xa0
 8004694:	05db      	lsls	r3, r3, #23
 8004696:	695a      	ldr	r2, [r3, #20]
 8004698:	23a0      	movs	r3, #160	; 0xa0
 800469a:	05db      	lsls	r3, r3, #23
 800469c:	2140      	movs	r1, #64	; 0x40
 800469e:	430a      	orrs	r2, r1
 80046a0:	615a      	str	r2, [r3, #20]
			}
			bf4me=0x15;	//set BF flag 4 me
 80046a2:	4b0e      	ldr	r3, [pc, #56]	; (80046dc <cmdExecute+0x168>)
 80046a4:	2215      	movs	r2, #21
 80046a6:	701a      	strb	r2, [r3, #0]
		}
		if(cmd2Execute==0x16){
 80046a8:	1dfb      	adds	r3, r7, #7
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	2b16      	cmp	r3, #22
 80046ae:	d102      	bne.n	80046b6 <cmdExecute+0x142>
			bf4me=0x16;	//set BF flag 4 me
 80046b0:	4b0a      	ldr	r3, [pc, #40]	; (80046dc <cmdExecute+0x168>)
 80046b2:	2216      	movs	r2, #22
 80046b4:	701a      	strb	r2, [r3, #0]

				}
		if(cmd2Execute==0x00){

				}
		if(cmd2Execute=0x00){
 80046b6:	1dfb      	adds	r3, r7, #7
 80046b8:	2200      	movs	r2, #0
 80046ba:	701a      	strb	r2, [r3, #0]

				}
//			}
//		}
		USART2->ICR|=USART_ICR_ORECF;
 80046bc:	4b08      	ldr	r3, [pc, #32]	; (80046e0 <cmdExecute+0x16c>)
 80046be:	6a1a      	ldr	r2, [r3, #32]
 80046c0:	4b07      	ldr	r3, [pc, #28]	; (80046e0 <cmdExecute+0x16c>)
 80046c2:	2108      	movs	r1, #8
 80046c4:	430a      	orrs	r2, r1
 80046c6:	621a      	str	r2, [r3, #32]
 80046c8:	e002      	b.n	80046d0 <cmdExecute+0x15c>
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 80046ca:	46c0      	nop			; (mov r8, r8)
 80046cc:	e000      	b.n	80046d0 <cmdExecute+0x15c>
			if (bf4me!=0x00){return;}	// protection against false BF resets
 80046ce:	46c0      	nop			; (mov r8, r8)
	}
 80046d0:	0018      	movs	r0, r3
 80046d2:	46bd      	mov	sp, r7
 80046d4:	b002      	add	sp, #8
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	200055e4 	.word	0x200055e4
 80046dc:	200034b4 	.word	0x200034b4
 80046e0:	40004400 	.word	0x40004400
 80046e4:	2000345d 	.word	0x2000345d
 80046e8:	200032f4 	.word	0x200032f4
 80046ec:	20003388 	.word	0x20003388
 80046f0:	2000349d 	.word	0x2000349d
 80046f4:	200031a0 	.word	0x200031a0
 80046f8:	200032f1 	.word	0x200032f1
 80046fc:	200033f4 	.word	0x200033f4

08004700 <printASCIIarray>:
//========================================================================================================================
	uint8_t printASCIIarray(uint8_t imX,uint8_t imY,uint8_t strLen,uint8_t dataASCII[]){
 8004700:	b5b0      	push	{r4, r5, r7, lr}
 8004702:	b092      	sub	sp, #72	; 0x48
 8004704:	af02      	add	r7, sp, #8
 8004706:	0004      	movs	r4, r0
 8004708:	0008      	movs	r0, r1
 800470a:	0011      	movs	r1, r2
 800470c:	603b      	str	r3, [r7, #0]
 800470e:	1dfb      	adds	r3, r7, #7
 8004710:	1c22      	adds	r2, r4, #0
 8004712:	701a      	strb	r2, [r3, #0]
 8004714:	1dbb      	adds	r3, r7, #6
 8004716:	1c02      	adds	r2, r0, #0
 8004718:	701a      	strb	r2, [r3, #0]
 800471a:	1d7b      	adds	r3, r7, #5
 800471c:	1c0a      	adds	r2, r1, #0
 800471e:	701a      	strb	r2, [r3, #0]
			uint8_t j,Y_height,X_width,ASCII_X,decY;
			uint8_t weoBuffer[49];
			uint16_t i;
			ASCII_X=imX;
 8004720:	233e      	movs	r3, #62	; 0x3e
 8004722:	18fb      	adds	r3, r7, r3
 8004724:	1dfa      	adds	r2, r7, #7
 8004726:	7812      	ldrb	r2, [r2, #0]
 8004728:	701a      	strb	r2, [r3, #0]

			len=49;
 800472a:	4b4c      	ldr	r3, [pc, #304]	; (800485c <printASCIIarray+0x15c>)
 800472c:	2231      	movs	r2, #49	; 0x31
 800472e:	801a      	strh	r2, [r3, #0]

			decY=0x01;
 8004730:	213d      	movs	r1, #61	; 0x3d
 8004732:	187b      	adds	r3, r7, r1
 8004734:	2201      	movs	r2, #1
 8004736:	701a      	strb	r2, [r3, #0]
			if(imY % 2 !=0){
 8004738:	1dbb      	adds	r3, r7, #6
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	2201      	movs	r2, #1
 800473e:	4013      	ands	r3, r2
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d002      	beq.n	800474c <printASCIIarray+0x4c>
				decY=0x02;
 8004746:	187b      	adds	r3, r7, r1
 8004748:	2202      	movs	r2, #2
 800474a:	701a      	strb	r2, [r3, #0]
			}

			for (i=0;i<strLen;i++){
 800474c:	233a      	movs	r3, #58	; 0x3a
 800474e:	18fb      	adds	r3, r7, r3
 8004750:	2200      	movs	r2, #0
 8004752:	801a      	strh	r2, [r3, #0]
 8004754:	e054      	b.n	8004800 <printASCIIarray+0x100>
				for(j=0;j<49;j++){
 8004756:	233f      	movs	r3, #63	; 0x3f
 8004758:	18fb      	adds	r3, r7, r3
 800475a:	2200      	movs	r2, #0
 800475c:	701a      	strb	r2, [r3, #0]
 800475e:	e01b      	b.n	8004798 <printASCIIarray+0x98>
					weoBuffer[j]=FONT_X[dataASCII[i]][j];
 8004760:	233a      	movs	r3, #58	; 0x3a
 8004762:	18fb      	adds	r3, r7, r3
 8004764:	881b      	ldrh	r3, [r3, #0]
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	18d3      	adds	r3, r2, r3
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	001a      	movs	r2, r3
 800476e:	253f      	movs	r5, #63	; 0x3f
 8004770:	197b      	adds	r3, r7, r5
 8004772:	7818      	ldrb	r0, [r3, #0]
 8004774:	197b      	adds	r3, r7, r5
 8004776:	7819      	ldrb	r1, [r3, #0]
 8004778:	4c39      	ldr	r4, [pc, #228]	; (8004860 <printASCIIarray+0x160>)
 800477a:	0013      	movs	r3, r2
 800477c:	00db      	lsls	r3, r3, #3
 800477e:	1a9b      	subs	r3, r3, r2
 8004780:	00da      	lsls	r2, r3, #3
 8004782:	1ad2      	subs	r2, r2, r3
 8004784:	18a3      	adds	r3, r4, r2
 8004786:	5c1a      	ldrb	r2, [r3, r0]
 8004788:	2308      	movs	r3, #8
 800478a:	18fb      	adds	r3, r7, r3
 800478c:	545a      	strb	r2, [r3, r1]
				for(j=0;j<49;j++){
 800478e:	197b      	adds	r3, r7, r5
 8004790:	781a      	ldrb	r2, [r3, #0]
 8004792:	197b      	adds	r3, r7, r5
 8004794:	3201      	adds	r2, #1
 8004796:	701a      	strb	r2, [r3, #0]
 8004798:	233f      	movs	r3, #63	; 0x3f
 800479a:	18fb      	adds	r3, r7, r3
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	2b30      	cmp	r3, #48	; 0x30
 80047a0:	d9de      	bls.n	8004760 <printASCIIarray+0x60>
					}
				weoDrawRectangleFilled(ASCII_X,imY,ASCII_X+X_increment-0,imY+ASCII_height-decY,0xFF,weoBuffer);
 80047a2:	4b30      	ldr	r3, [pc, #192]	; (8004864 <printASCIIarray+0x164>)
 80047a4:	781a      	ldrb	r2, [r3, #0]
 80047a6:	203e      	movs	r0, #62	; 0x3e
 80047a8:	183b      	adds	r3, r7, r0
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	18d3      	adds	r3, r2, r3
 80047ae:	b2dc      	uxtb	r4, r3
 80047b0:	4b2d      	ldr	r3, [pc, #180]	; (8004868 <printASCIIarray+0x168>)
 80047b2:	781a      	ldrb	r2, [r3, #0]
 80047b4:	1dbb      	adds	r3, r7, #6
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	18d3      	adds	r3, r2, r3
 80047ba:	b2da      	uxtb	r2, r3
 80047bc:	233d      	movs	r3, #61	; 0x3d
 80047be:	18fb      	adds	r3, r7, r3
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	b2da      	uxtb	r2, r3
 80047c6:	1dbb      	adds	r3, r7, #6
 80047c8:	7819      	ldrb	r1, [r3, #0]
 80047ca:	0005      	movs	r5, r0
 80047cc:	183b      	adds	r3, r7, r0
 80047ce:	7818      	ldrb	r0, [r3, #0]
 80047d0:	2308      	movs	r3, #8
 80047d2:	18fb      	adds	r3, r7, r3
 80047d4:	9301      	str	r3, [sp, #4]
 80047d6:	23ff      	movs	r3, #255	; 0xff
 80047d8:	9300      	str	r3, [sp, #0]
 80047da:	0013      	movs	r3, r2
 80047dc:	0022      	movs	r2, r4
 80047de:	f7fe fd5f 	bl	80032a0 <weoDrawRectangleFilled>
				ASCII_X += X_increment+1;
 80047e2:	4b20      	ldr	r3, [pc, #128]	; (8004864 <printASCIIarray+0x164>)
 80047e4:	781a      	ldrb	r2, [r3, #0]
 80047e6:	197b      	adds	r3, r7, r5
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	18d3      	adds	r3, r2, r3
 80047ec:	b2da      	uxtb	r2, r3
 80047ee:	197b      	adds	r3, r7, r5
 80047f0:	3201      	adds	r2, #1
 80047f2:	701a      	strb	r2, [r3, #0]
			for (i=0;i<strLen;i++){
 80047f4:	213a      	movs	r1, #58	; 0x3a
 80047f6:	187b      	adds	r3, r7, r1
 80047f8:	881a      	ldrh	r2, [r3, #0]
 80047fa:	187b      	adds	r3, r7, r1
 80047fc:	3201      	adds	r2, #1
 80047fe:	801a      	strh	r2, [r3, #0]
 8004800:	1d7b      	adds	r3, r7, #5
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	b29b      	uxth	r3, r3
 8004806:	213a      	movs	r1, #58	; 0x3a
 8004808:	187a      	adds	r2, r7, r1
 800480a:	8812      	ldrh	r2, [r2, #0]
 800480c:	429a      	cmp	r2, r3
 800480e:	d3a2      	bcc.n	8004756 <printASCIIarray+0x56>
			}
			for(i=0;i<len;i++){
 8004810:	187b      	adds	r3, r7, r1
 8004812:	2200      	movs	r2, #0
 8004814:	801a      	strh	r2, [r3, #0]
 8004816:	e00c      	b.n	8004832 <printASCIIarray+0x132>
					weoBuffer[j]=0x00;
 8004818:	233f      	movs	r3, #63	; 0x3f
 800481a:	18fb      	adds	r3, r7, r3
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	2208      	movs	r2, #8
 8004820:	18ba      	adds	r2, r7, r2
 8004822:	2100      	movs	r1, #0
 8004824:	54d1      	strb	r1, [r2, r3]
			for(i=0;i<len;i++){
 8004826:	213a      	movs	r1, #58	; 0x3a
 8004828:	187b      	adds	r3, r7, r1
 800482a:	881a      	ldrh	r2, [r3, #0]
 800482c:	187b      	adds	r3, r7, r1
 800482e:	3201      	adds	r2, #1
 8004830:	801a      	strh	r2, [r3, #0]
 8004832:	4b0a      	ldr	r3, [pc, #40]	; (800485c <printASCIIarray+0x15c>)
 8004834:	881b      	ldrh	r3, [r3, #0]
 8004836:	223a      	movs	r2, #58	; 0x3a
 8004838:	18ba      	adds	r2, r7, r2
 800483a:	8812      	ldrh	r2, [r2, #0]
 800483c:	429a      	cmp	r2, r3
 800483e:	d3eb      	bcc.n	8004818 <printASCIIarray+0x118>
			}
			GPIOC->ODR |= 1 << 6;	//set BF
 8004840:	4b0a      	ldr	r3, [pc, #40]	; (800486c <printASCIIarray+0x16c>)
 8004842:	695a      	ldr	r2, [r3, #20]
 8004844:	4b09      	ldr	r3, [pc, #36]	; (800486c <printASCIIarray+0x16c>)
 8004846:	2140      	movs	r1, #64	; 0x40
 8004848:	430a      	orrs	r2, r1
 800484a:	615a      	str	r2, [r3, #20]
			cmd2Execute=0;
 800484c:	4b08      	ldr	r3, [pc, #32]	; (8004870 <printASCIIarray+0x170>)
 800484e:	2200      	movs	r2, #0
 8004850:	701a      	strb	r2, [r3, #0]
		}
 8004852:	46c0      	nop			; (mov r8, r8)
 8004854:	0018      	movs	r0, r3
 8004856:	46bd      	mov	sp, r7
 8004858:	b010      	add	sp, #64	; 0x40
 800485a:	bdb0      	pop	{r4, r5, r7, pc}
 800485c:	200035dc 	.word	0x200035dc
 8004860:	20000000 	.word	0x20000000
 8004864:	20003130 	.word	0x20003130
 8004868:	20003131 	.word	0x20003131
 800486c:	50000800 	.word	0x50000800
 8004870:	2000345e 	.word	0x2000345e

08004874 <squeak_triple>:
		HAL_I2S_Transmit(&hi2s1, (uint16_t*)signal, nsamples, HAL_MAX_DELAY);
		HAL_Delay(100);
		HAL_I2S_Transmit(&hi2s1, (uint16_t*)signal, nsamples, HAL_MAX_DELAY);
	}
//=============================================================================================================
	void squeak_triple(void){
 8004874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004876:	4c4e      	ldr	r4, [pc, #312]	; (80049b0 <squeak_triple+0x13c>)
 8004878:	44a5      	add	sp, r4
 800487a:	af00      	add	r7, sp, #0
		   uint16_t signal[2048];
		    uint16_t nsamples = sizeof(signal) / sizeof(signal[0]);
 800487c:	4b4d      	ldr	r3, [pc, #308]	; (80049b4 <squeak_triple+0x140>)
 800487e:	18fb      	adds	r3, r7, r3
 8004880:	2280      	movs	r2, #128	; 0x80
 8004882:	0112      	lsls	r2, r2, #4
 8004884:	801a      	strh	r2, [r3, #0]

		    uint16_t k = 0;
 8004886:	4b4c      	ldr	r3, [pc, #304]	; (80049b8 <squeak_triple+0x144>)
 8004888:	18fb      	adds	r3, r7, r3
 800488a:	2200      	movs	r2, #0
 800488c:	801a      	strh	r2, [r3, #0]
		    while(k < nsamples) {
 800488e:	e048      	b.n	8004922 <squeak_triple+0xae>
		        double t = ((double)k/2.0)/((double)nsamples);
 8004890:	4e49      	ldr	r6, [pc, #292]	; (80049b8 <squeak_triple+0x144>)
 8004892:	19bb      	adds	r3, r7, r6
 8004894:	881b      	ldrh	r3, [r3, #0]
 8004896:	0018      	movs	r0, r3
 8004898:	f7fd fbda 	bl	8002050 <__aeabi_ui2d>
 800489c:	2200      	movs	r2, #0
 800489e:	2380      	movs	r3, #128	; 0x80
 80048a0:	05db      	lsls	r3, r3, #23
 80048a2:	f7fc f96b 	bl	8000b7c <__aeabi_ddiv>
 80048a6:	0002      	movs	r2, r0
 80048a8:	000b      	movs	r3, r1
 80048aa:	0014      	movs	r4, r2
 80048ac:	001d      	movs	r5, r3
 80048ae:	4b41      	ldr	r3, [pc, #260]	; (80049b4 <squeak_triple+0x140>)
 80048b0:	18fb      	adds	r3, r7, r3
 80048b2:	881b      	ldrh	r3, [r3, #0]
 80048b4:	0018      	movs	r0, r3
 80048b6:	f7fd fbcb 	bl	8002050 <__aeabi_ui2d>
 80048ba:	0002      	movs	r2, r0
 80048bc:	000b      	movs	r3, r1
 80048be:	0020      	movs	r0, r4
 80048c0:	0029      	movs	r1, r5
 80048c2:	f7fc f95b 	bl	8000b7c <__aeabi_ddiv>
 80048c6:	0002      	movs	r2, r0
 80048c8:	000b      	movs	r3, r1
 80048ca:	2180      	movs	r1, #128	; 0x80
 80048cc:	0149      	lsls	r1, r1, #5
 80048ce:	1878      	adds	r0, r7, r1
 80048d0:	6002      	str	r2, [r0, #0]
 80048d2:	6043      	str	r3, [r0, #4]
		        signal[k] = 32767*sin(100.0 * TAU * t); // left
 80048d4:	4a39      	ldr	r2, [pc, #228]	; (80049bc <squeak_triple+0x148>)
 80048d6:	4b3a      	ldr	r3, [pc, #232]	; (80049c0 <squeak_triple+0x14c>)
 80048d8:	1879      	adds	r1, r7, r1
 80048da:	6808      	ldr	r0, [r1, #0]
 80048dc:	6849      	ldr	r1, [r1, #4]
 80048de:	f7fc fd53 	bl	8001388 <__aeabi_dmul>
 80048e2:	0002      	movs	r2, r0
 80048e4:	000b      	movs	r3, r1
 80048e6:	0010      	movs	r0, r2
 80048e8:	0019      	movs	r1, r3
 80048ea:	f008 fc51 	bl	800d190 <sin>
 80048ee:	2200      	movs	r2, #0
 80048f0:	4b34      	ldr	r3, [pc, #208]	; (80049c4 <squeak_triple+0x150>)
 80048f2:	f7fc fd49 	bl	8001388 <__aeabi_dmul>
 80048f6:	0002      	movs	r2, r0
 80048f8:	000b      	movs	r3, r1
 80048fa:	19b9      	adds	r1, r7, r6
 80048fc:	880c      	ldrh	r4, [r1, #0]
 80048fe:	0010      	movs	r0, r2
 8004900:	0019      	movs	r1, r3
 8004902:	f7fb fdb3 	bl	800046c <__aeabi_d2uiz>
 8004906:	0003      	movs	r3, r0
 8004908:	b299      	uxth	r1, r3
 800490a:	4b2f      	ldr	r3, [pc, #188]	; (80049c8 <squeak_triple+0x154>)
 800490c:	4a2f      	ldr	r2, [pc, #188]	; (80049cc <squeak_triple+0x158>)
 800490e:	4694      	mov	ip, r2
 8004910:	44bc      	add	ip, r7
 8004912:	4463      	add	r3, ip
 8004914:	0062      	lsls	r2, r4, #1
 8004916:	52d1      	strh	r1, [r2, r3]
		        k += 1;
 8004918:	19bb      	adds	r3, r7, r6
 800491a:	19ba      	adds	r2, r7, r6
 800491c:	8812      	ldrh	r2, [r2, #0]
 800491e:	3201      	adds	r2, #1
 8004920:	801a      	strh	r2, [r3, #0]
		    while(k < nsamples) {
 8004922:	4b25      	ldr	r3, [pc, #148]	; (80049b8 <squeak_triple+0x144>)
 8004924:	18fa      	adds	r2, r7, r3
 8004926:	4d23      	ldr	r5, [pc, #140]	; (80049b4 <squeak_triple+0x140>)
 8004928:	197b      	adds	r3, r7, r5
 800492a:	8812      	ldrh	r2, [r2, #0]
 800492c:	881b      	ldrh	r3, [r3, #0]
 800492e:	429a      	cmp	r2, r3
 8004930:	d3ae      	bcc.n	8004890 <squeak_triple+0x1c>
		    }
		I2C_SOUND_ChangePage(0x01);
 8004932:	2001      	movs	r0, #1
 8004934:	f7fe fe18 	bl	8003568 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x00);
 8004938:	2100      	movs	r1, #0
 800493a:	2001      	movs	r0, #1
 800493c:	f7fe fe32 	bl	80035a4 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x00);
 8004940:	2000      	movs	r0, #0
 8004942:	f7fe fe11 	bl	8003568 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x41, 0x30);// 0x81 - 0x30 available
 8004946:	2130      	movs	r1, #48	; 0x30
 8004948:	2041      	movs	r0, #65	; 0x41
 800494a:	f7fe fe2b 	bl	80035a4 <WriteReg_I2C_SOUND>
	//	I2C_SOUND_ChangePage(0x00);
		I2C_SOUND_ChangePage(0x01);
 800494e:	2001      	movs	r0, #1
 8004950:	f7fe fe0a 	bl	8003568 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 8004954:	2100      	movs	r1, #0
 8004956:	2010      	movs	r0, #16
 8004958:	f7fe fe24 	bl	80035a4 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x2E, 0x24);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
 800495c:	2124      	movs	r1, #36	; 0x24
 800495e:	202e      	movs	r0, #46	; 0x2e
 8004960:	f7fe fe20 	bl	80035a4 <WriteReg_I2C_SOUND>
		HAL_I2S_Transmit(&hi2s1, (uint16_t*)signal, nsamples, HAL_MAX_DELAY);
 8004964:	2301      	movs	r3, #1
 8004966:	425c      	negs	r4, r3
 8004968:	197b      	adds	r3, r7, r5
 800496a:	881a      	ldrh	r2, [r3, #0]
 800496c:	0039      	movs	r1, r7
 800496e:	4818      	ldr	r0, [pc, #96]	; (80049d0 <squeak_triple+0x15c>)
 8004970:	0023      	movs	r3, r4
 8004972:	f002 ff5f 	bl	8007834 <HAL_I2S_Transmit>
		HAL_Delay(100);
 8004976:	2064      	movs	r0, #100	; 0x64
 8004978:	f000 fd36 	bl	80053e8 <HAL_Delay>
		HAL_I2S_Transmit(&hi2s1, (uint16_t*)signal, nsamples, HAL_MAX_DELAY);
 800497c:	2301      	movs	r3, #1
 800497e:	425c      	negs	r4, r3
 8004980:	197b      	adds	r3, r7, r5
 8004982:	881a      	ldrh	r2, [r3, #0]
 8004984:	0039      	movs	r1, r7
 8004986:	4812      	ldr	r0, [pc, #72]	; (80049d0 <squeak_triple+0x15c>)
 8004988:	0023      	movs	r3, r4
 800498a:	f002 ff53 	bl	8007834 <HAL_I2S_Transmit>
		HAL_Delay(100);
 800498e:	2064      	movs	r0, #100	; 0x64
 8004990:	f000 fd2a 	bl	80053e8 <HAL_Delay>
		HAL_I2S_Transmit(&hi2s1, (uint16_t*)signal, nsamples, HAL_MAX_DELAY);
 8004994:	2301      	movs	r3, #1
 8004996:	425c      	negs	r4, r3
 8004998:	197b      	adds	r3, r7, r5
 800499a:	881a      	ldrh	r2, [r3, #0]
 800499c:	0039      	movs	r1, r7
 800499e:	480c      	ldr	r0, [pc, #48]	; (80049d0 <squeak_triple+0x15c>)
 80049a0:	0023      	movs	r3, r4
 80049a2:	f002 ff47 	bl	8007834 <HAL_I2S_Transmit>
	}
 80049a6:	46c0      	nop			; (mov r8, r8)
 80049a8:	46bd      	mov	sp, r7
 80049aa:	4b0a      	ldr	r3, [pc, #40]	; (80049d4 <squeak_triple+0x160>)
 80049ac:	449d      	add	sp, r3
 80049ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049b0:	ffffefec 	.word	0xffffefec
 80049b4:	0000100c 	.word	0x0000100c
 80049b8:	0000100e 	.word	0x0000100e
 80049bc:	59d5433b 	.word	0x59d5433b
 80049c0:	4083a28c 	.word	0x4083a28c
 80049c4:	40dfffc0 	.word	0x40dfffc0
 80049c8:	ffffeff0 	.word	0xffffeff0
 80049cc:	00001010 	.word	0x00001010
 80049d0:	20003460 	.word	0x20003460
 80049d4:	00001014 	.word	0x00001014

080049d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80049dc:	46c0      	nop			; (mov r8, r8)
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
	...

080049e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049ea:	4b11      	ldr	r3, [pc, #68]	; (8004a30 <HAL_MspInit+0x4c>)
 80049ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049ee:	4b10      	ldr	r3, [pc, #64]	; (8004a30 <HAL_MspInit+0x4c>)
 80049f0:	2101      	movs	r1, #1
 80049f2:	430a      	orrs	r2, r1
 80049f4:	641a      	str	r2, [r3, #64]	; 0x40
 80049f6:	4b0e      	ldr	r3, [pc, #56]	; (8004a30 <HAL_MspInit+0x4c>)
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	2201      	movs	r2, #1
 80049fc:	4013      	ands	r3, r2
 80049fe:	607b      	str	r3, [r7, #4]
 8004a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a02:	4b0b      	ldr	r3, [pc, #44]	; (8004a30 <HAL_MspInit+0x4c>)
 8004a04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a06:	4b0a      	ldr	r3, [pc, #40]	; (8004a30 <HAL_MspInit+0x4c>)
 8004a08:	2180      	movs	r1, #128	; 0x80
 8004a0a:	0549      	lsls	r1, r1, #21
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004a10:	4b07      	ldr	r3, [pc, #28]	; (8004a30 <HAL_MspInit+0x4c>)
 8004a12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a14:	2380      	movs	r3, #128	; 0x80
 8004a16:	055b      	lsls	r3, r3, #21
 8004a18:	4013      	ands	r3, r2
 8004a1a:	603b      	str	r3, [r7, #0]
 8004a1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 8004a1e:	2380      	movs	r3, #128	; 0x80
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	0018      	movs	r0, r3
 8004a24:	f000 fd04 	bl	8005430 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a28:	46c0      	nop			; (mov r8, r8)
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	b002      	add	sp, #8
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	40021000 	.word	0x40021000

08004a34 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8004a34:	b590      	push	{r4, r7, lr}
 8004a36:	b089      	sub	sp, #36	; 0x24
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a3c:	240c      	movs	r4, #12
 8004a3e:	193b      	adds	r3, r7, r4
 8004a40:	0018      	movs	r0, r3
 8004a42:	2314      	movs	r3, #20
 8004a44:	001a      	movs	r2, r3
 8004a46:	2100      	movs	r1, #0
 8004a48:	f008 fb9a 	bl	800d180 <memset>
  if(hcomp->Instance==COMP1)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a10      	ldr	r2, [pc, #64]	; (8004a94 <HAL_COMP_MspInit+0x60>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d11a      	bne.n	8004a8c <HAL_COMP_MspInit+0x58>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a56:	4b10      	ldr	r3, [pc, #64]	; (8004a98 <HAL_COMP_MspInit+0x64>)
 8004a58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a5a:	4b0f      	ldr	r3, [pc, #60]	; (8004a98 <HAL_COMP_MspInit+0x64>)
 8004a5c:	2102      	movs	r1, #2
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	635a      	str	r2, [r3, #52]	; 0x34
 8004a62:	4b0d      	ldr	r3, [pc, #52]	; (8004a98 <HAL_COMP_MspInit+0x64>)
 8004a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a66:	2202      	movs	r2, #2
 8004a68:	4013      	ands	r3, r2
 8004a6a:	60bb      	str	r3, [r7, #8]
 8004a6c:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004a6e:	193b      	adds	r3, r7, r4
 8004a70:	2204      	movs	r2, #4
 8004a72:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a74:	193b      	adds	r3, r7, r4
 8004a76:	2203      	movs	r2, #3
 8004a78:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a7a:	193b      	adds	r3, r7, r4
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a80:	193b      	adds	r3, r7, r4
 8004a82:	4a06      	ldr	r2, [pc, #24]	; (8004a9c <HAL_COMP_MspInit+0x68>)
 8004a84:	0019      	movs	r1, r3
 8004a86:	0010      	movs	r0, r2
 8004a88:	f001 faee 	bl	8006068 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 8004a8c:	46c0      	nop			; (mov r8, r8)
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	b009      	add	sp, #36	; 0x24
 8004a92:	bd90      	pop	{r4, r7, pc}
 8004a94:	40010200 	.word	0x40010200
 8004a98:	40021000 	.word	0x40021000
 8004a9c:	50000400 	.word	0x50000400

08004aa0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004aa0:	b590      	push	{r4, r7, lr}
 8004aa2:	b08b      	sub	sp, #44	; 0x2c
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004aa8:	2414      	movs	r4, #20
 8004aaa:	193b      	adds	r3, r7, r4
 8004aac:	0018      	movs	r0, r3
 8004aae:	2314      	movs	r3, #20
 8004ab0:	001a      	movs	r2, r3
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	f008 fb64 	bl	800d180 <memset>
  if(hi2c->Instance==I2C1)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a20      	ldr	r2, [pc, #128]	; (8004b40 <HAL_I2C_MspInit+0xa0>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d139      	bne.n	8004b36 <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ac2:	4b20      	ldr	r3, [pc, #128]	; (8004b44 <HAL_I2C_MspInit+0xa4>)
 8004ac4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ac6:	4b1f      	ldr	r3, [pc, #124]	; (8004b44 <HAL_I2C_MspInit+0xa4>)
 8004ac8:	2101      	movs	r1, #1
 8004aca:	430a      	orrs	r2, r1
 8004acc:	635a      	str	r2, [r3, #52]	; 0x34
 8004ace:	4b1d      	ldr	r3, [pc, #116]	; (8004b44 <HAL_I2C_MspInit+0xa4>)
 8004ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	613b      	str	r3, [r7, #16]
 8004ad8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004ada:	193b      	adds	r3, r7, r4
 8004adc:	22c0      	movs	r2, #192	; 0xc0
 8004ade:	00d2      	lsls	r2, r2, #3
 8004ae0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ae2:	0021      	movs	r1, r4
 8004ae4:	187b      	adds	r3, r7, r1
 8004ae6:	2212      	movs	r2, #18
 8004ae8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004aea:	187b      	adds	r3, r7, r1
 8004aec:	2201      	movs	r2, #1
 8004aee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004af0:	187b      	adds	r3, r7, r1
 8004af2:	2200      	movs	r2, #0
 8004af4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8004af6:	187b      	adds	r3, r7, r1
 8004af8:	2206      	movs	r2, #6
 8004afa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004afc:	187a      	adds	r2, r7, r1
 8004afe:	23a0      	movs	r3, #160	; 0xa0
 8004b00:	05db      	lsls	r3, r3, #23
 8004b02:	0011      	movs	r1, r2
 8004b04:	0018      	movs	r0, r3
 8004b06:	f001 faaf 	bl	8006068 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004b0a:	4b0e      	ldr	r3, [pc, #56]	; (8004b44 <HAL_I2C_MspInit+0xa4>)
 8004b0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b0e:	4b0d      	ldr	r3, [pc, #52]	; (8004b44 <HAL_I2C_MspInit+0xa4>)
 8004b10:	2180      	movs	r1, #128	; 0x80
 8004b12:	0389      	lsls	r1, r1, #14
 8004b14:	430a      	orrs	r2, r1
 8004b16:	63da      	str	r2, [r3, #60]	; 0x3c
 8004b18:	4b0a      	ldr	r3, [pc, #40]	; (8004b44 <HAL_I2C_MspInit+0xa4>)
 8004b1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b1c:	2380      	movs	r3, #128	; 0x80
 8004b1e:	039b      	lsls	r3, r3, #14
 8004b20:	4013      	ands	r3, r2
 8004b22:	60fb      	str	r3, [r7, #12]
 8004b24:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8004b26:	2200      	movs	r2, #0
 8004b28:	2100      	movs	r1, #0
 8004b2a:	2017      	movs	r0, #23
 8004b2c:	f000 ffa2 	bl	8005a74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8004b30:	2017      	movs	r0, #23
 8004b32:	f000 ffb4 	bl	8005a9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004b36:	46c0      	nop			; (mov r8, r8)
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	b00b      	add	sp, #44	; 0x2c
 8004b3c:	bd90      	pop	{r4, r7, pc}
 8004b3e:	46c0      	nop			; (mov r8, r8)
 8004b40:	40005400 	.word	0x40005400
 8004b44:	40021000 	.word	0x40021000

08004b48 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8004b48:	b590      	push	{r4, r7, lr}
 8004b4a:	b08b      	sub	sp, #44	; 0x2c
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b50:	2414      	movs	r4, #20
 8004b52:	193b      	adds	r3, r7, r4
 8004b54:	0018      	movs	r0, r3
 8004b56:	2314      	movs	r3, #20
 8004b58:	001a      	movs	r2, r3
 8004b5a:	2100      	movs	r1, #0
 8004b5c:	f008 fb10 	bl	800d180 <memset>
  if(hi2s->Instance==SPI1)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a47      	ldr	r2, [pc, #284]	; (8004c84 <HAL_I2S_MspInit+0x13c>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d000      	beq.n	8004b6c <HAL_I2S_MspInit+0x24>
 8004b6a:	e086      	b.n	8004c7a <HAL_I2S_MspInit+0x132>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004b6c:	4b46      	ldr	r3, [pc, #280]	; (8004c88 <HAL_I2S_MspInit+0x140>)
 8004b6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b70:	4b45      	ldr	r3, [pc, #276]	; (8004c88 <HAL_I2S_MspInit+0x140>)
 8004b72:	2180      	movs	r1, #128	; 0x80
 8004b74:	0149      	lsls	r1, r1, #5
 8004b76:	430a      	orrs	r2, r1
 8004b78:	641a      	str	r2, [r3, #64]	; 0x40
 8004b7a:	4b43      	ldr	r3, [pc, #268]	; (8004c88 <HAL_I2S_MspInit+0x140>)
 8004b7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b7e:	2380      	movs	r3, #128	; 0x80
 8004b80:	015b      	lsls	r3, r3, #5
 8004b82:	4013      	ands	r3, r2
 8004b84:	613b      	str	r3, [r7, #16]
 8004b86:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b88:	4b3f      	ldr	r3, [pc, #252]	; (8004c88 <HAL_I2S_MspInit+0x140>)
 8004b8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b8c:	4b3e      	ldr	r3, [pc, #248]	; (8004c88 <HAL_I2S_MspInit+0x140>)
 8004b8e:	2101      	movs	r1, #1
 8004b90:	430a      	orrs	r2, r1
 8004b92:	635a      	str	r2, [r3, #52]	; 0x34
 8004b94:	4b3c      	ldr	r3, [pc, #240]	; (8004c88 <HAL_I2S_MspInit+0x140>)
 8004b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b98:	2201      	movs	r2, #1
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	60fb      	str	r3, [r7, #12]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ba0:	4b39      	ldr	r3, [pc, #228]	; (8004c88 <HAL_I2S_MspInit+0x140>)
 8004ba2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ba4:	4b38      	ldr	r3, [pc, #224]	; (8004c88 <HAL_I2S_MspInit+0x140>)
 8004ba6:	2102      	movs	r1, #2
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	635a      	str	r2, [r3, #52]	; 0x34
 8004bac:	4b36      	ldr	r3, [pc, #216]	; (8004c88 <HAL_I2S_MspInit+0x140>)
 8004bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb0:	2202      	movs	r2, #2
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	60bb      	str	r3, [r7, #8]
 8004bb6:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> I2S1_WS
    PB3     ------> I2S1_CK
    PB4     ------> I2S1_MCK
    PB5     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004bb8:	193b      	adds	r3, r7, r4
 8004bba:	2280      	movs	r2, #128	; 0x80
 8004bbc:	0212      	lsls	r2, r2, #8
 8004bbe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bc0:	193b      	adds	r3, r7, r4
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bc6:	193b      	adds	r3, r7, r4
 8004bc8:	2200      	movs	r2, #0
 8004bca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bcc:	193b      	adds	r3, r7, r4
 8004bce:	2200      	movs	r2, #0
 8004bd0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004bd2:	193b      	adds	r3, r7, r4
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bd8:	193a      	adds	r2, r7, r4
 8004bda:	23a0      	movs	r3, #160	; 0xa0
 8004bdc:	05db      	lsls	r3, r3, #23
 8004bde:	0011      	movs	r1, r2
 8004be0:	0018      	movs	r0, r3
 8004be2:	f001 fa41 	bl	8006068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8004be6:	0021      	movs	r1, r4
 8004be8:	187b      	adds	r3, r7, r1
 8004bea:	2238      	movs	r2, #56	; 0x38
 8004bec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bee:	187b      	adds	r3, r7, r1
 8004bf0:	2202      	movs	r2, #2
 8004bf2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bf4:	187b      	adds	r3, r7, r1
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bfa:	187b      	adds	r3, r7, r1
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004c00:	187b      	adds	r3, r7, r1
 8004c02:	2200      	movs	r2, #0
 8004c04:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c06:	187b      	adds	r3, r7, r1
 8004c08:	4a20      	ldr	r2, [pc, #128]	; (8004c8c <HAL_I2S_MspInit+0x144>)
 8004c0a:	0019      	movs	r1, r3
 8004c0c:	0010      	movs	r0, r2
 8004c0e:	f001 fa2b 	bl	8006068 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8004c12:	4b1f      	ldr	r3, [pc, #124]	; (8004c90 <HAL_I2S_MspInit+0x148>)
 8004c14:	4a1f      	ldr	r2, [pc, #124]	; (8004c94 <HAL_I2S_MspInit+0x14c>)
 8004c16:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8004c18:	4b1d      	ldr	r3, [pc, #116]	; (8004c90 <HAL_I2S_MspInit+0x148>)
 8004c1a:	2211      	movs	r2, #17
 8004c1c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004c1e:	4b1c      	ldr	r3, [pc, #112]	; (8004c90 <HAL_I2S_MspInit+0x148>)
 8004c20:	2210      	movs	r2, #16
 8004c22:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c24:	4b1a      	ldr	r3, [pc, #104]	; (8004c90 <HAL_I2S_MspInit+0x148>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004c2a:	4b19      	ldr	r3, [pc, #100]	; (8004c90 <HAL_I2S_MspInit+0x148>)
 8004c2c:	2280      	movs	r2, #128	; 0x80
 8004c2e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004c30:	4b17      	ldr	r3, [pc, #92]	; (8004c90 <HAL_I2S_MspInit+0x148>)
 8004c32:	2280      	movs	r2, #128	; 0x80
 8004c34:	0052      	lsls	r2, r2, #1
 8004c36:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004c38:	4b15      	ldr	r3, [pc, #84]	; (8004c90 <HAL_I2S_MspInit+0x148>)
 8004c3a:	2280      	movs	r2, #128	; 0x80
 8004c3c:	00d2      	lsls	r2, r2, #3
 8004c3e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8004c40:	4b13      	ldr	r3, [pc, #76]	; (8004c90 <HAL_I2S_MspInit+0x148>)
 8004c42:	2220      	movs	r2, #32
 8004c44:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004c46:	4b12      	ldr	r3, [pc, #72]	; (8004c90 <HAL_I2S_MspInit+0x148>)
 8004c48:	22c0      	movs	r2, #192	; 0xc0
 8004c4a:	0192      	lsls	r2, r2, #6
 8004c4c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8004c4e:	4b10      	ldr	r3, [pc, #64]	; (8004c90 <HAL_I2S_MspInit+0x148>)
 8004c50:	0018      	movs	r0, r3
 8004c52:	f000 ff41 	bl	8005ad8 <HAL_DMA_Init>
 8004c56:	1e03      	subs	r3, r0, #0
 8004c58:	d001      	beq.n	8004c5e <HAL_I2S_MspInit+0x116>
    {
      Error_Handler();
 8004c5a:	f7ff febd 	bl	80049d8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a0b      	ldr	r2, [pc, #44]	; (8004c90 <HAL_I2S_MspInit+0x148>)
 8004c62:	62da      	str	r2, [r3, #44]	; 0x2c
 8004c64:	4b0a      	ldr	r3, [pc, #40]	; (8004c90 <HAL_I2S_MspInit+0x148>)
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	629a      	str	r2, [r3, #40]	; 0x28

    /* I2S1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	2019      	movs	r0, #25
 8004c70:	f000 ff00 	bl	8005a74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004c74:	2019      	movs	r0, #25
 8004c76:	f000 ff12 	bl	8005a9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004c7a:	46c0      	nop			; (mov r8, r8)
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	b00b      	add	sp, #44	; 0x2c
 8004c80:	bd90      	pop	{r4, r7, pc}
 8004c82:	46c0      	nop			; (mov r8, r8)
 8004c84:	40013000 	.word	0x40013000
 8004c88:	40021000 	.word	0x40021000
 8004c8c:	50000400 	.word	0x50000400
 8004c90:	20003580 	.word	0x20003580
 8004c94:	40020008 	.word	0x40020008

08004c98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004c98:	b590      	push	{r4, r7, lr}
 8004c9a:	b08b      	sub	sp, #44	; 0x2c
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ca0:	2414      	movs	r4, #20
 8004ca2:	193b      	adds	r3, r7, r4
 8004ca4:	0018      	movs	r0, r3
 8004ca6:	2314      	movs	r3, #20
 8004ca8:	001a      	movs	r2, r3
 8004caa:	2100      	movs	r1, #0
 8004cac:	f008 fa68 	bl	800d180 <memset>
  if(hspi->Instance==SPI2)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a54      	ldr	r2, [pc, #336]	; (8004e08 <HAL_SPI_MspInit+0x170>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d000      	beq.n	8004cbc <HAL_SPI_MspInit+0x24>
 8004cba:	e0a0      	b.n	8004dfe <HAL_SPI_MspInit+0x166>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004cbc:	4b53      	ldr	r3, [pc, #332]	; (8004e0c <HAL_SPI_MspInit+0x174>)
 8004cbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cc0:	4b52      	ldr	r3, [pc, #328]	; (8004e0c <HAL_SPI_MspInit+0x174>)
 8004cc2:	2180      	movs	r1, #128	; 0x80
 8004cc4:	01c9      	lsls	r1, r1, #7
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	63da      	str	r2, [r3, #60]	; 0x3c
 8004cca:	4b50      	ldr	r3, [pc, #320]	; (8004e0c <HAL_SPI_MspInit+0x174>)
 8004ccc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cce:	2380      	movs	r3, #128	; 0x80
 8004cd0:	01db      	lsls	r3, r3, #7
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	613b      	str	r3, [r7, #16]
 8004cd6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cd8:	4b4c      	ldr	r3, [pc, #304]	; (8004e0c <HAL_SPI_MspInit+0x174>)
 8004cda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cdc:	4b4b      	ldr	r3, [pc, #300]	; (8004e0c <HAL_SPI_MspInit+0x174>)
 8004cde:	2102      	movs	r1, #2
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	635a      	str	r2, [r3, #52]	; 0x34
 8004ce4:	4b49      	ldr	r3, [pc, #292]	; (8004e0c <HAL_SPI_MspInit+0x174>)
 8004ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce8:	2202      	movs	r2, #2
 8004cea:	4013      	ands	r3, r2
 8004cec:	60fb      	str	r3, [r7, #12]
 8004cee:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB6     ------> SPI2_MISO
    PB7     ------> SPI2_MOSI
    PB8     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004cf0:	193b      	adds	r3, r7, r4
 8004cf2:	2240      	movs	r2, #64	; 0x40
 8004cf4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cf6:	193b      	adds	r3, r7, r4
 8004cf8:	2202      	movs	r2, #2
 8004cfa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cfc:	193b      	adds	r3, r7, r4
 8004cfe:	2200      	movs	r2, #0
 8004d00:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d02:	193b      	adds	r3, r7, r4
 8004d04:	2200      	movs	r2, #0
 8004d06:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI2;
 8004d08:	193b      	adds	r3, r7, r4
 8004d0a:	2204      	movs	r2, #4
 8004d0c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d0e:	193b      	adds	r3, r7, r4
 8004d10:	4a3f      	ldr	r2, [pc, #252]	; (8004e10 <HAL_SPI_MspInit+0x178>)
 8004d12:	0019      	movs	r1, r3
 8004d14:	0010      	movs	r0, r2
 8004d16:	f001 f9a7 	bl	8006068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8004d1a:	0021      	movs	r1, r4
 8004d1c:	187b      	adds	r3, r7, r1
 8004d1e:	22c0      	movs	r2, #192	; 0xc0
 8004d20:	0052      	lsls	r2, r2, #1
 8004d22:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d24:	187b      	adds	r3, r7, r1
 8004d26:	2202      	movs	r2, #2
 8004d28:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d2a:	187b      	adds	r3, r7, r1
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d30:	187b      	adds	r3, r7, r1
 8004d32:	2200      	movs	r2, #0
 8004d34:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8004d36:	187b      	adds	r3, r7, r1
 8004d38:	2201      	movs	r2, #1
 8004d3a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d3c:	187b      	adds	r3, r7, r1
 8004d3e:	4a34      	ldr	r2, [pc, #208]	; (8004e10 <HAL_SPI_MspInit+0x178>)
 8004d40:	0019      	movs	r1, r3
 8004d42:	0010      	movs	r0, r2
 8004d44:	f001 f990 	bl	8006068 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel2;
 8004d48:	4b32      	ldr	r3, [pc, #200]	; (8004e14 <HAL_SPI_MspInit+0x17c>)
 8004d4a:	4a33      	ldr	r2, [pc, #204]	; (8004e18 <HAL_SPI_MspInit+0x180>)
 8004d4c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8004d4e:	4b31      	ldr	r3, [pc, #196]	; (8004e14 <HAL_SPI_MspInit+0x17c>)
 8004d50:	2212      	movs	r2, #18
 8004d52:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d54:	4b2f      	ldr	r3, [pc, #188]	; (8004e14 <HAL_SPI_MspInit+0x17c>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d5a:	4b2e      	ldr	r3, [pc, #184]	; (8004e14 <HAL_SPI_MspInit+0x17c>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004d60:	4b2c      	ldr	r3, [pc, #176]	; (8004e14 <HAL_SPI_MspInit+0x17c>)
 8004d62:	2280      	movs	r2, #128	; 0x80
 8004d64:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d66:	4b2b      	ldr	r3, [pc, #172]	; (8004e14 <HAL_SPI_MspInit+0x17c>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d6c:	4b29      	ldr	r3, [pc, #164]	; (8004e14 <HAL_SPI_MspInit+0x17c>)
 8004d6e:	2200      	movs	r2, #0
 8004d70:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8004d72:	4b28      	ldr	r3, [pc, #160]	; (8004e14 <HAL_SPI_MspInit+0x17c>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004d78:	4b26      	ldr	r3, [pc, #152]	; (8004e14 <HAL_SPI_MspInit+0x17c>)
 8004d7a:	2280      	movs	r2, #128	; 0x80
 8004d7c:	0192      	lsls	r2, r2, #6
 8004d7e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8004d80:	4b24      	ldr	r3, [pc, #144]	; (8004e14 <HAL_SPI_MspInit+0x17c>)
 8004d82:	0018      	movs	r0, r3
 8004d84:	f000 fea8 	bl	8005ad8 <HAL_DMA_Init>
 8004d88:	1e03      	subs	r3, r0, #0
 8004d8a:	d001      	beq.n	8004d90 <HAL_SPI_MspInit+0xf8>
    {
      Error_Handler();
 8004d8c:	f7ff fe24 	bl	80049d8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a20      	ldr	r2, [pc, #128]	; (8004e14 <HAL_SPI_MspInit+0x17c>)
 8004d94:	659a      	str	r2, [r3, #88]	; 0x58
 8004d96:	4b1f      	ldr	r3, [pc, #124]	; (8004e14 <HAL_SPI_MspInit+0x17c>)
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel3;
 8004d9c:	4b1f      	ldr	r3, [pc, #124]	; (8004e1c <HAL_SPI_MspInit+0x184>)
 8004d9e:	4a20      	ldr	r2, [pc, #128]	; (8004e20 <HAL_SPI_MspInit+0x188>)
 8004da0:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8004da2:	4b1e      	ldr	r3, [pc, #120]	; (8004e1c <HAL_SPI_MspInit+0x184>)
 8004da4:	2213      	movs	r2, #19
 8004da6:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004da8:	4b1c      	ldr	r3, [pc, #112]	; (8004e1c <HAL_SPI_MspInit+0x184>)
 8004daa:	2210      	movs	r2, #16
 8004dac:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004dae:	4b1b      	ldr	r3, [pc, #108]	; (8004e1c <HAL_SPI_MspInit+0x184>)
 8004db0:	2200      	movs	r2, #0
 8004db2:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004db4:	4b19      	ldr	r3, [pc, #100]	; (8004e1c <HAL_SPI_MspInit+0x184>)
 8004db6:	2280      	movs	r2, #128	; 0x80
 8004db8:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004dba:	4b18      	ldr	r3, [pc, #96]	; (8004e1c <HAL_SPI_MspInit+0x184>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004dc0:	4b16      	ldr	r3, [pc, #88]	; (8004e1c <HAL_SPI_MspInit+0x184>)
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8004dc6:	4b15      	ldr	r3, [pc, #84]	; (8004e1c <HAL_SPI_MspInit+0x184>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004dcc:	4b13      	ldr	r3, [pc, #76]	; (8004e1c <HAL_SPI_MspInit+0x184>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004dd2:	4b12      	ldr	r3, [pc, #72]	; (8004e1c <HAL_SPI_MspInit+0x184>)
 8004dd4:	0018      	movs	r0, r3
 8004dd6:	f000 fe7f 	bl	8005ad8 <HAL_DMA_Init>
 8004dda:	1e03      	subs	r3, r0, #0
 8004ddc:	d001      	beq.n	8004de2 <HAL_SPI_MspInit+0x14a>
    {
      Error_Handler();
 8004dde:	f7ff fdfb 	bl	80049d8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a0d      	ldr	r2, [pc, #52]	; (8004e1c <HAL_SPI_MspInit+0x184>)
 8004de6:	655a      	str	r2, [r3, #84]	; 0x54
 8004de8:	4b0c      	ldr	r3, [pc, #48]	; (8004e1c <HAL_SPI_MspInit+0x184>)
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8004dee:	2200      	movs	r2, #0
 8004df0:	2100      	movs	r1, #0
 8004df2:	201a      	movs	r0, #26
 8004df4:	f000 fe3e 	bl	8005a74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004df8:	201a      	movs	r0, #26
 8004dfa:	f000 fe50 	bl	8005a9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004dfe:	46c0      	nop			; (mov r8, r8)
 8004e00:	46bd      	mov	sp, r7
 8004e02:	b00b      	add	sp, #44	; 0x2c
 8004e04:	bd90      	pop	{r4, r7, pc}
 8004e06:	46c0      	nop			; (mov r8, r8)
 8004e08:	40003800 	.word	0x40003800
 8004e0c:	40021000 	.word	0x40021000
 8004e10:	50000400 	.word	0x50000400
 8004e14:	20003294 	.word	0x20003294
 8004e18:	4002001c 	.word	0x4002001c
 8004e1c:	20003520 	.word	0x20003520
 8004e20:	40020030 	.word	0x40020030

08004e24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a0a      	ldr	r2, [pc, #40]	; (8004e5c <HAL_TIM_Base_MspInit+0x38>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d10d      	bne.n	8004e52 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004e36:	4b0a      	ldr	r3, [pc, #40]	; (8004e60 <HAL_TIM_Base_MspInit+0x3c>)
 8004e38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e3a:	4b09      	ldr	r3, [pc, #36]	; (8004e60 <HAL_TIM_Base_MspInit+0x3c>)
 8004e3c:	2180      	movs	r1, #128	; 0x80
 8004e3e:	0109      	lsls	r1, r1, #4
 8004e40:	430a      	orrs	r2, r1
 8004e42:	641a      	str	r2, [r3, #64]	; 0x40
 8004e44:	4b06      	ldr	r3, [pc, #24]	; (8004e60 <HAL_TIM_Base_MspInit+0x3c>)
 8004e46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e48:	2380      	movs	r3, #128	; 0x80
 8004e4a:	011b      	lsls	r3, r3, #4
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	60fb      	str	r3, [r7, #12]
 8004e50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004e52:	46c0      	nop			; (mov r8, r8)
 8004e54:	46bd      	mov	sp, r7
 8004e56:	b004      	add	sp, #16
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	46c0      	nop			; (mov r8, r8)
 8004e5c:	40012c00 	.word	0x40012c00
 8004e60:	40021000 	.word	0x40021000

08004e64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004e64:	b590      	push	{r4, r7, lr}
 8004e66:	b089      	sub	sp, #36	; 0x24
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e6c:	240c      	movs	r4, #12
 8004e6e:	193b      	adds	r3, r7, r4
 8004e70:	0018      	movs	r0, r3
 8004e72:	2314      	movs	r3, #20
 8004e74:	001a      	movs	r2, r3
 8004e76:	2100      	movs	r1, #0
 8004e78:	f008 f982 	bl	800d180 <memset>
  if(htim->Instance==TIM1)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a15      	ldr	r2, [pc, #84]	; (8004ed8 <HAL_TIM_MspPostInit+0x74>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d123      	bne.n	8004ece <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e86:	4b15      	ldr	r3, [pc, #84]	; (8004edc <HAL_TIM_MspPostInit+0x78>)
 8004e88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e8a:	4b14      	ldr	r3, [pc, #80]	; (8004edc <HAL_TIM_MspPostInit+0x78>)
 8004e8c:	2101      	movs	r1, #1
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	635a      	str	r2, [r3, #52]	; 0x34
 8004e92:	4b12      	ldr	r3, [pc, #72]	; (8004edc <HAL_TIM_MspPostInit+0x78>)
 8004e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e96:	2201      	movs	r2, #1
 8004e98:	4013      	ands	r3, r2
 8004e9a:	60bb      	str	r3, [r7, #8]
 8004e9c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004e9e:	193b      	adds	r3, r7, r4
 8004ea0:	2280      	movs	r2, #128	; 0x80
 8004ea2:	0052      	lsls	r2, r2, #1
 8004ea4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ea6:	0021      	movs	r1, r4
 8004ea8:	187b      	adds	r3, r7, r1
 8004eaa:	2202      	movs	r2, #2
 8004eac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004eae:	187b      	adds	r3, r7, r1
 8004eb0:	2202      	movs	r2, #2
 8004eb2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004eb4:	187b      	adds	r3, r7, r1
 8004eb6:	2203      	movs	r2, #3
 8004eb8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004eba:	187b      	adds	r3, r7, r1
 8004ebc:	2202      	movs	r2, #2
 8004ebe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ec0:	187a      	adds	r2, r7, r1
 8004ec2:	23a0      	movs	r3, #160	; 0xa0
 8004ec4:	05db      	lsls	r3, r3, #23
 8004ec6:	0011      	movs	r1, r2
 8004ec8:	0018      	movs	r0, r3
 8004eca:	f001 f8cd 	bl	8006068 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004ece:	46c0      	nop			; (mov r8, r8)
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	b009      	add	sp, #36	; 0x24
 8004ed4:	bd90      	pop	{r4, r7, pc}
 8004ed6:	46c0      	nop			; (mov r8, r8)
 8004ed8:	40012c00 	.word	0x40012c00
 8004edc:	40021000 	.word	0x40021000

08004ee0 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8004ee0:	b590      	push	{r4, r7, lr}
 8004ee2:	b08b      	sub	sp, #44	; 0x2c
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ee8:	2414      	movs	r4, #20
 8004eea:	193b      	adds	r3, r7, r4
 8004eec:	0018      	movs	r0, r3
 8004eee:	2314      	movs	r3, #20
 8004ef0:	001a      	movs	r2, r3
 8004ef2:	2100      	movs	r1, #0
 8004ef4:	f008 f944 	bl	800d180 <memset>
  if(husart->Instance==USART3)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a45      	ldr	r2, [pc, #276]	; (8005014 <HAL_USART_MspInit+0x134>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d000      	beq.n	8004f04 <HAL_USART_MspInit+0x24>
 8004f02:	e083      	b.n	800500c <HAL_USART_MspInit+0x12c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004f04:	4b44      	ldr	r3, [pc, #272]	; (8005018 <HAL_USART_MspInit+0x138>)
 8004f06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f08:	4b43      	ldr	r3, [pc, #268]	; (8005018 <HAL_USART_MspInit+0x138>)
 8004f0a:	2180      	movs	r1, #128	; 0x80
 8004f0c:	02c9      	lsls	r1, r1, #11
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	63da      	str	r2, [r3, #60]	; 0x3c
 8004f12:	4b41      	ldr	r3, [pc, #260]	; (8005018 <HAL_USART_MspInit+0x138>)
 8004f14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f16:	2380      	movs	r3, #128	; 0x80
 8004f18:	02db      	lsls	r3, r3, #11
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	613b      	str	r3, [r7, #16]
 8004f1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f20:	4b3d      	ldr	r3, [pc, #244]	; (8005018 <HAL_USART_MspInit+0x138>)
 8004f22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f24:	4b3c      	ldr	r3, [pc, #240]	; (8005018 <HAL_USART_MspInit+0x138>)
 8004f26:	2101      	movs	r1, #1
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	635a      	str	r2, [r3, #52]	; 0x34
 8004f2c:	4b3a      	ldr	r3, [pc, #232]	; (8005018 <HAL_USART_MspInit+0x138>)
 8004f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f30:	2201      	movs	r2, #1
 8004f32:	4013      	ands	r3, r2
 8004f34:	60fb      	str	r3, [r7, #12]
 8004f36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f38:	4b37      	ldr	r3, [pc, #220]	; (8005018 <HAL_USART_MspInit+0x138>)
 8004f3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f3c:	4b36      	ldr	r3, [pc, #216]	; (8005018 <HAL_USART_MspInit+0x138>)
 8004f3e:	2102      	movs	r1, #2
 8004f40:	430a      	orrs	r2, r1
 8004f42:	635a      	str	r2, [r3, #52]	; 0x34
 8004f44:	4b34      	ldr	r3, [pc, #208]	; (8005018 <HAL_USART_MspInit+0x138>)
 8004f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f48:	2202      	movs	r2, #2
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	60bb      	str	r3, [r7, #8]
 8004f4e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA5     ------> USART3_TX
    PB0     ------> USART3_RX
    PB1     ------> USART3_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004f50:	193b      	adds	r3, r7, r4
 8004f52:	2220      	movs	r2, #32
 8004f54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f56:	193b      	adds	r3, r7, r4
 8004f58:	2202      	movs	r2, #2
 8004f5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f5c:	193b      	adds	r3, r7, r4
 8004f5e:	2200      	movs	r2, #0
 8004f60:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f62:	193b      	adds	r3, r7, r4
 8004f64:	2203      	movs	r2, #3
 8004f66:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8004f68:	193b      	adds	r3, r7, r4
 8004f6a:	2204      	movs	r2, #4
 8004f6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f6e:	193a      	adds	r2, r7, r4
 8004f70:	23a0      	movs	r3, #160	; 0xa0
 8004f72:	05db      	lsls	r3, r3, #23
 8004f74:	0011      	movs	r1, r2
 8004f76:	0018      	movs	r0, r3
 8004f78:	f001 f876 	bl	8006068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004f7c:	0021      	movs	r1, r4
 8004f7e:	187b      	adds	r3, r7, r1
 8004f80:	2203      	movs	r2, #3
 8004f82:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f84:	187b      	adds	r3, r7, r1
 8004f86:	2202      	movs	r2, #2
 8004f88:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f8a:	187b      	adds	r3, r7, r1
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f90:	187b      	adds	r3, r7, r1
 8004f92:	2203      	movs	r2, #3
 8004f94:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8004f96:	187b      	adds	r3, r7, r1
 8004f98:	2204      	movs	r2, #4
 8004f9a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f9c:	187b      	adds	r3, r7, r1
 8004f9e:	4a1f      	ldr	r2, [pc, #124]	; (800501c <HAL_USART_MspInit+0x13c>)
 8004fa0:	0019      	movs	r1, r3
 8004fa2:	0010      	movs	r0, r2
 8004fa4:	f001 f860 	bl	8006068 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel4;
 8004fa8:	4b1d      	ldr	r3, [pc, #116]	; (8005020 <HAL_USART_MspInit+0x140>)
 8004faa:	4a1e      	ldr	r2, [pc, #120]	; (8005024 <HAL_USART_MspInit+0x144>)
 8004fac:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8004fae:	4b1c      	ldr	r3, [pc, #112]	; (8005020 <HAL_USART_MspInit+0x140>)
 8004fb0:	2237      	movs	r2, #55	; 0x37
 8004fb2:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004fb4:	4b1a      	ldr	r3, [pc, #104]	; (8005020 <HAL_USART_MspInit+0x140>)
 8004fb6:	2210      	movs	r2, #16
 8004fb8:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004fba:	4b19      	ldr	r3, [pc, #100]	; (8005020 <HAL_USART_MspInit+0x140>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004fc0:	4b17      	ldr	r3, [pc, #92]	; (8005020 <HAL_USART_MspInit+0x140>)
 8004fc2:	2280      	movs	r2, #128	; 0x80
 8004fc4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004fc6:	4b16      	ldr	r3, [pc, #88]	; (8005020 <HAL_USART_MspInit+0x140>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004fcc:	4b14      	ldr	r3, [pc, #80]	; (8005020 <HAL_USART_MspInit+0x140>)
 8004fce:	2200      	movs	r2, #0
 8004fd0:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004fd2:	4b13      	ldr	r3, [pc, #76]	; (8005020 <HAL_USART_MspInit+0x140>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004fd8:	4b11      	ldr	r3, [pc, #68]	; (8005020 <HAL_USART_MspInit+0x140>)
 8004fda:	2280      	movs	r2, #128	; 0x80
 8004fdc:	0192      	lsls	r2, r2, #6
 8004fde:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004fe0:	4b0f      	ldr	r3, [pc, #60]	; (8005020 <HAL_USART_MspInit+0x140>)
 8004fe2:	0018      	movs	r0, r3
 8004fe4:	f000 fd78 	bl	8005ad8 <HAL_DMA_Init>
 8004fe8:	1e03      	subs	r3, r0, #0
 8004fea:	d001      	beq.n	8004ff0 <HAL_USART_MspInit+0x110>
    {
      Error_Handler();
 8004fec:	f7ff fcf4 	bl	80049d8 <Error_Handler>
    }

    __HAL_LINKDMA(husart,hdmatx,hdma_usart3_tx);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a0b      	ldr	r2, [pc, #44]	; (8005020 <HAL_USART_MspInit+0x140>)
 8004ff4:	651a      	str	r2, [r3, #80]	; 0x50
 8004ff6:	4b0a      	ldr	r3, [pc, #40]	; (8005020 <HAL_USART_MspInit+0x140>)
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	2100      	movs	r1, #0
 8005000:	201d      	movs	r0, #29
 8005002:	f000 fd37 	bl	8005a74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 8005006:	201d      	movs	r0, #29
 8005008:	f000 fd49 	bl	8005a9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800500c:	46c0      	nop			; (mov r8, r8)
 800500e:	46bd      	mov	sp, r7
 8005010:	b00b      	add	sp, #44	; 0x2c
 8005012:	bd90      	pop	{r4, r7, pc}
 8005014:	40004800 	.word	0x40004800
 8005018:	40021000 	.word	0x40021000
 800501c:	50000400 	.word	0x50000400
 8005020:	200032f8 	.word	0x200032f8
 8005024:	40020044 	.word	0x40020044

08005028 <LL_USART_IsActiveFlag_FE>:
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	69db      	ldr	r3, [r3, #28]
 8005034:	2202      	movs	r2, #2
 8005036:	4013      	ands	r3, r2
 8005038:	2b02      	cmp	r3, #2
 800503a:	d101      	bne.n	8005040 <LL_USART_IsActiveFlag_FE+0x18>
 800503c:	2301      	movs	r3, #1
 800503e:	e000      	b.n	8005042 <LL_USART_IsActiveFlag_FE+0x1a>
 8005040:	2300      	movs	r3, #0
}
 8005042:	0018      	movs	r0, r3
 8005044:	46bd      	mov	sp, r7
 8005046:	b002      	add	sp, #8
 8005048:	bd80      	pop	{r7, pc}

0800504a <LL_USART_IsActiveFlag_NE>:
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b082      	sub	sp, #8
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	69db      	ldr	r3, [r3, #28]
 8005056:	2204      	movs	r2, #4
 8005058:	4013      	ands	r3, r2
 800505a:	2b04      	cmp	r3, #4
 800505c:	d101      	bne.n	8005062 <LL_USART_IsActiveFlag_NE+0x18>
 800505e:	2301      	movs	r3, #1
 8005060:	e000      	b.n	8005064 <LL_USART_IsActiveFlag_NE+0x1a>
 8005062:	2300      	movs	r3, #0
}
 8005064:	0018      	movs	r0, r3
 8005066:	46bd      	mov	sp, r7
 8005068:	b002      	add	sp, #8
 800506a:	bd80      	pop	{r7, pc}

0800506c <LL_USART_IsActiveFlag_ORE>:
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	69db      	ldr	r3, [r3, #28]
 8005078:	2208      	movs	r2, #8
 800507a:	4013      	ands	r3, r2
 800507c:	2b08      	cmp	r3, #8
 800507e:	d101      	bne.n	8005084 <LL_USART_IsActiveFlag_ORE+0x18>
 8005080:	2301      	movs	r3, #1
 8005082:	e000      	b.n	8005086 <LL_USART_IsActiveFlag_ORE+0x1a>
 8005084:	2300      	movs	r3, #0
}
 8005086:	0018      	movs	r0, r3
 8005088:	46bd      	mov	sp, r7
 800508a:	b002      	add	sp, #8
 800508c:	bd80      	pop	{r7, pc}

0800508e <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 800508e:	b580      	push	{r7, lr}
 8005090:	b082      	sub	sp, #8
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	69db      	ldr	r3, [r3, #28]
 800509a:	2220      	movs	r2, #32
 800509c:	4013      	ands	r3, r2
 800509e:	2b20      	cmp	r3, #32
 80050a0:	d101      	bne.n	80050a6 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 80050a2:	2301      	movs	r3, #1
 80050a4:	e000      	b.n	80050a8 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	0018      	movs	r0, r3
 80050aa:	46bd      	mov	sp, r7
 80050ac:	b002      	add	sp, #8
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <LL_USART_IsEnabledIT_RXNE_RXFNE>:
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2220      	movs	r2, #32
 80050be:	4013      	ands	r3, r2
 80050c0:	2b20      	cmp	r3, #32
 80050c2:	d101      	bne.n	80050c8 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 80050c4:	2301      	movs	r3, #1
 80050c6:	e000      	b.n	80050ca <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	0018      	movs	r0, r3
 80050cc:	46bd      	mov	sp, r7
 80050ce:	b002      	add	sp, #8
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80050d6:	46c0      	nop			; (mov r8, r8)
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80050e0:	e7fe      	b.n	80050e0 <HardFault_Handler+0x4>

080050e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80050e2:	b580      	push	{r7, lr}
 80050e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80050e6:	46c0      	nop			; (mov r8, r8)
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80050f0:	46c0      	nop			; (mov r8, r8)
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80050fa:	f000 f959 	bl	80053b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80050fe:	46c0      	nop			; (mov r8, r8)
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8005108:	4b03      	ldr	r3, [pc, #12]	; (8005118 <DMA1_Channel1_IRQHandler+0x14>)
 800510a:	0018      	movs	r0, r3
 800510c:	f000 fe5e 	bl	8005dcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005110:	46c0      	nop			; (mov r8, r8)
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	46c0      	nop			; (mov r8, r8)
 8005118:	20003580 	.word	0x20003580

0800511c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

//	HAL_SPI_RxCpltCallback(&hspi2);
  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8005120:	4b05      	ldr	r3, [pc, #20]	; (8005138 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8005122:	0018      	movs	r0, r3
 8005124:	f000 fe52 	bl	8005dcc <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8005128:	4b04      	ldr	r3, [pc, #16]	; (800513c <DMA1_Channel2_3_IRQHandler+0x20>)
 800512a:	0018      	movs	r0, r3
 800512c:	f000 fe4e 	bl	8005dcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8005130:	46c0      	nop			; (mov r8, r8)
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	46c0      	nop			; (mov r8, r8)
 8005138:	20003294 	.word	0x20003294
 800513c:	20003520 	.word	0x20003520

08005140 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
//		GPIOA->ODR |= 1 << 11;	//set test 1
//		GPIOA->ODR &= ~(1 << 11);	//reset test 1
  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8005144:	4b03      	ldr	r3, [pc, #12]	; (8005154 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x14>)
 8005146:	0018      	movs	r0, r3
 8005148:	f000 fe40 	bl	8005dcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 800514c:	46c0      	nop			; (mov r8, r8)
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	46c0      	nop			; (mov r8, r8)
 8005154:	200032f8 	.word	0x200032f8

08005158 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 800515c:	4b09      	ldr	r3, [pc, #36]	; (8005184 <I2C1_IRQHandler+0x2c>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	699a      	ldr	r2, [r3, #24]
 8005162:	23e0      	movs	r3, #224	; 0xe0
 8005164:	00db      	lsls	r3, r3, #3
 8005166:	4013      	ands	r3, r2
 8005168:	d004      	beq.n	8005174 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800516a:	4b06      	ldr	r3, [pc, #24]	; (8005184 <I2C1_IRQHandler+0x2c>)
 800516c:	0018      	movs	r0, r3
 800516e:	f001 fa97 	bl	80066a0 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8005172:	e003      	b.n	800517c <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8005174:	4b03      	ldr	r3, [pc, #12]	; (8005184 <I2C1_IRQHandler+0x2c>)
 8005176:	0018      	movs	r0, r3
 8005178:	f001 fa78 	bl	800666c <HAL_I2C_EV_IRQHandler>
}
 800517c:	46c0      	nop			; (mov r8, r8)
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	46c0      	nop			; (mov r8, r8)
 8005184:	20003234 	.word	0x20003234

08005188 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s1);
 800518c:	4b03      	ldr	r3, [pc, #12]	; (800519c <SPI1_IRQHandler+0x14>)
 800518e:	0018      	movs	r0, r3
 8005190:	f002 fc48 	bl	8007a24 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8005194:	46c0      	nop			; (mov r8, r8)
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	46c0      	nop			; (mov r8, r8)
 800519c:	20003460 	.word	0x20003460

080051a0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80051a4:	4b03      	ldr	r3, [pc, #12]	; (80051b4 <SPI2_IRQHandler+0x14>)
 80051a6:	0018      	movs	r0, r3
 80051a8:	f004 ff8c 	bl	800a0c4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80051ac:	46c0      	nop			; (mov r8, r8)
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	46c0      	nop			; (mov r8, r8)
 80051b4:	200031b0 	.word	0x200031b0

080051b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART2->ICR|=USART_ICR_ORECF;
 80051bc:	4b25      	ldr	r3, [pc, #148]	; (8005254 <USART2_IRQHandler+0x9c>)
 80051be:	6a1a      	ldr	r2, [r3, #32]
 80051c0:	4b24      	ldr	r3, [pc, #144]	; (8005254 <USART2_IRQHandler+0x9c>)
 80051c2:	2108      	movs	r1, #8
 80051c4:	430a      	orrs	r2, r1
 80051c6:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_FECF;
 80051c8:	4b22      	ldr	r3, [pc, #136]	; (8005254 <USART2_IRQHandler+0x9c>)
 80051ca:	6a1a      	ldr	r2, [r3, #32]
 80051cc:	4b21      	ldr	r3, [pc, #132]	; (8005254 <USART2_IRQHandler+0x9c>)
 80051ce:	2102      	movs	r1, #2
 80051d0:	430a      	orrs	r2, r1
 80051d2:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_NECF;
 80051d4:	4b1f      	ldr	r3, [pc, #124]	; (8005254 <USART2_IRQHandler+0x9c>)
 80051d6:	6a1a      	ldr	r2, [r3, #32]
 80051d8:	4b1e      	ldr	r3, [pc, #120]	; (8005254 <USART2_IRQHandler+0x9c>)
 80051da:	2104      	movs	r1, #4
 80051dc:	430a      	orrs	r2, r1
 80051de:	621a      	str	r2, [r3, #32]
	if(LL_USART_IsActiveFlag_RXNE(USART2) && LL_USART_IsEnabledIT_RXNE(USART2))
 80051e0:	4b1c      	ldr	r3, [pc, #112]	; (8005254 <USART2_IRQHandler+0x9c>)
 80051e2:	0018      	movs	r0, r3
 80051e4:	f7ff ff53 	bl	800508e <LL_USART_IsActiveFlag_RXNE_RXFNE>
 80051e8:	1e03      	subs	r3, r0, #0
 80051ea:	d009      	beq.n	8005200 <USART2_IRQHandler+0x48>
 80051ec:	4b19      	ldr	r3, [pc, #100]	; (8005254 <USART2_IRQHandler+0x9c>)
 80051ee:	0018      	movs	r0, r3
 80051f0:	f7ff ff5e 	bl	80050b0 <LL_USART_IsEnabledIT_RXNE_RXFNE>
 80051f4:	1e03      	subs	r3, r0, #0
 80051f6:	d003      	beq.n	8005200 <USART2_IRQHandler+0x48>
	  {
	    USART2_RX_Callback();// launching the receiving callback function //LL implentation
 80051f8:	f7fd fe58 	bl	8002eac <USART2_RX_Callback>
	  {
 80051fc:	46c0      	nop			; (mov r8, r8)
	  }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80051fe:	e025      	b.n	800524c <USART2_IRQHandler+0x94>
		  USART2->ICR|=USART_ICR_ORECF;
 8005200:	4b14      	ldr	r3, [pc, #80]	; (8005254 <USART2_IRQHandler+0x9c>)
 8005202:	6a1a      	ldr	r2, [r3, #32]
 8005204:	4b13      	ldr	r3, [pc, #76]	; (8005254 <USART2_IRQHandler+0x9c>)
 8005206:	2108      	movs	r1, #8
 8005208:	430a      	orrs	r2, r1
 800520a:	621a      	str	r2, [r3, #32]
	    if(LL_USART_IsActiveFlag_ORE(USART2))//clear the overrun flag by reading from RDR
 800520c:	4b11      	ldr	r3, [pc, #68]	; (8005254 <USART2_IRQHandler+0x9c>)
 800520e:	0018      	movs	r0, r3
 8005210:	f7ff ff2c 	bl	800506c <LL_USART_IsActiveFlag_ORE>
 8005214:	1e03      	subs	r3, r0, #0
 8005216:	d008      	beq.n	800522a <USART2_IRQHandler+0x72>
	    	USART2->ICR|=USART_ICR_ORECF;
 8005218:	4b0e      	ldr	r3, [pc, #56]	; (8005254 <USART2_IRQHandler+0x9c>)
 800521a:	6a1a      	ldr	r2, [r3, #32]
 800521c:	4b0d      	ldr	r3, [pc, #52]	; (8005254 <USART2_IRQHandler+0x9c>)
 800521e:	2108      	movs	r1, #8
 8005220:	430a      	orrs	r2, r1
 8005222:	621a      	str	r2, [r3, #32]
	      (void) USART2->RDR;
 8005224:	4b0b      	ldr	r3, [pc, #44]	; (8005254 <USART2_IRQHandler+0x9c>)
 8005226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8005228:	e010      	b.n	800524c <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_FE(USART2))//clear another flag by reading from RDR
 800522a:	4b0a      	ldr	r3, [pc, #40]	; (8005254 <USART2_IRQHandler+0x9c>)
 800522c:	0018      	movs	r0, r3
 800522e:	f7ff fefb 	bl	8005028 <LL_USART_IsActiveFlag_FE>
 8005232:	1e03      	subs	r3, r0, #0
 8005234:	d002      	beq.n	800523c <USART2_IRQHandler+0x84>
	      (void) USART2->RDR;
 8005236:	4b07      	ldr	r3, [pc, #28]	; (8005254 <USART2_IRQHandler+0x9c>)
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800523a:	e007      	b.n	800524c <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_NE(USART2))//clear another flag by reading from RDR
 800523c:	4b05      	ldr	r3, [pc, #20]	; (8005254 <USART2_IRQHandler+0x9c>)
 800523e:	0018      	movs	r0, r3
 8005240:	f7ff ff03 	bl	800504a <LL_USART_IsActiveFlag_NE>
 8005244:	1e03      	subs	r3, r0, #0
 8005246:	d001      	beq.n	800524c <USART2_IRQHandler+0x94>
	      (void) USART2->RDR;
 8005248:	4b02      	ldr	r3, [pc, #8]	; (8005254 <USART2_IRQHandler+0x9c>)
 800524a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800524c:	46c0      	nop			; (mov r8, r8)
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	46c0      	nop			; (mov r8, r8)
 8005254:	40004400 	.word	0x40004400

08005258 <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_USART_IRQHandler(&husart3);
 800525c:	4b03      	ldr	r3, [pc, #12]	; (800526c <USART3_4_LPUART1_IRQHandler+0x14>)
 800525e:	0018      	movs	r0, r3
 8005260:	f006 fdcc 	bl	800bdfc <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 8005264:	46c0      	nop			; (mov r8, r8)
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	46c0      	nop			; (mov r8, r8)
 800526c:	20003394 	.word	0x20003394

08005270 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005274:	4b03      	ldr	r3, [pc, #12]	; (8005284 <SystemInit+0x14>)
 8005276:	2280      	movs	r2, #128	; 0x80
 8005278:	0512      	lsls	r2, r2, #20
 800527a:	609a      	str	r2, [r3, #8]
#endif
}
 800527c:	46c0      	nop			; (mov r8, r8)
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	46c0      	nop			; (mov r8, r8)
 8005284:	e000ed00 	.word	0xe000ed00

08005288 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005288:	480d      	ldr	r0, [pc, #52]	; (80052c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800528a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800528c:	f7ff fff0 	bl	8005270 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005290:	480c      	ldr	r0, [pc, #48]	; (80052c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8005292:	490d      	ldr	r1, [pc, #52]	; (80052c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005294:	4a0d      	ldr	r2, [pc, #52]	; (80052cc <LoopForever+0xe>)
  movs r3, #0
 8005296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005298:	e002      	b.n	80052a0 <LoopCopyDataInit>

0800529a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800529a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800529c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800529e:	3304      	adds	r3, #4

080052a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80052a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80052a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80052a4:	d3f9      	bcc.n	800529a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80052a6:	4a0a      	ldr	r2, [pc, #40]	; (80052d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80052a8:	4c0a      	ldr	r4, [pc, #40]	; (80052d4 <LoopForever+0x16>)
  movs r3, #0
 80052aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80052ac:	e001      	b.n	80052b2 <LoopFillZerobss>

080052ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80052ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80052b0:	3204      	adds	r2, #4

080052b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80052b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80052b4:	d3fb      	bcc.n	80052ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80052b6:	f007 ff3f 	bl	800d138 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80052ba:	f7fd f897 	bl	80023ec <main>

080052be <LoopForever>:

LoopForever:
  b LoopForever
 80052be:	e7fe      	b.n	80052be <LoopForever>
  ldr   r0, =_estack
 80052c0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80052c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80052c8:	20003140 	.word	0x20003140
  ldr r2, =_sidata
 80052cc:	0800e520 	.word	0x0800e520
  ldr r2, =_sbss
 80052d0:	20003140 	.word	0x20003140
  ldr r4, =_ebss
 80052d4:	20005604 	.word	0x20005604

080052d8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80052d8:	e7fe      	b.n	80052d8 <ADC1_COMP_IRQHandler>
	...

080052dc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80052e2:	1dfb      	adds	r3, r7, #7
 80052e4:	2200      	movs	r2, #0
 80052e6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80052e8:	4b0b      	ldr	r3, [pc, #44]	; (8005318 <HAL_Init+0x3c>)
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	4b0a      	ldr	r3, [pc, #40]	; (8005318 <HAL_Init+0x3c>)
 80052ee:	2180      	movs	r1, #128	; 0x80
 80052f0:	0049      	lsls	r1, r1, #1
 80052f2:	430a      	orrs	r2, r1
 80052f4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80052f6:	2000      	movs	r0, #0
 80052f8:	f000 f810 	bl	800531c <HAL_InitTick>
 80052fc:	1e03      	subs	r3, r0, #0
 80052fe:	d003      	beq.n	8005308 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8005300:	1dfb      	adds	r3, r7, #7
 8005302:	2201      	movs	r2, #1
 8005304:	701a      	strb	r2, [r3, #0]
 8005306:	e001      	b.n	800530c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8005308:	f7ff fb6c 	bl	80049e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800530c:	1dfb      	adds	r3, r7, #7
 800530e:	781b      	ldrb	r3, [r3, #0]
}
 8005310:	0018      	movs	r0, r3
 8005312:	46bd      	mov	sp, r7
 8005314:	b002      	add	sp, #8
 8005316:	bd80      	pop	{r7, pc}
 8005318:	40022000 	.word	0x40022000

0800531c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800531c:	b590      	push	{r4, r7, lr}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005324:	230f      	movs	r3, #15
 8005326:	18fb      	adds	r3, r7, r3
 8005328:	2200      	movs	r2, #0
 800532a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800532c:	4b1d      	ldr	r3, [pc, #116]	; (80053a4 <HAL_InitTick+0x88>)
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d02b      	beq.n	800538c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8005334:	4b1c      	ldr	r3, [pc, #112]	; (80053a8 <HAL_InitTick+0x8c>)
 8005336:	681c      	ldr	r4, [r3, #0]
 8005338:	4b1a      	ldr	r3, [pc, #104]	; (80053a4 <HAL_InitTick+0x88>)
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	0019      	movs	r1, r3
 800533e:	23fa      	movs	r3, #250	; 0xfa
 8005340:	0098      	lsls	r0, r3, #2
 8005342:	f7fa fedf 	bl	8000104 <__udivsi3>
 8005346:	0003      	movs	r3, r0
 8005348:	0019      	movs	r1, r3
 800534a:	0020      	movs	r0, r4
 800534c:	f7fa feda 	bl	8000104 <__udivsi3>
 8005350:	0003      	movs	r3, r0
 8005352:	0018      	movs	r0, r3
 8005354:	f000 fbb3 	bl	8005abe <HAL_SYSTICK_Config>
 8005358:	1e03      	subs	r3, r0, #0
 800535a:	d112      	bne.n	8005382 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b03      	cmp	r3, #3
 8005360:	d80a      	bhi.n	8005378 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005362:	6879      	ldr	r1, [r7, #4]
 8005364:	2301      	movs	r3, #1
 8005366:	425b      	negs	r3, r3
 8005368:	2200      	movs	r2, #0
 800536a:	0018      	movs	r0, r3
 800536c:	f000 fb82 	bl	8005a74 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005370:	4b0e      	ldr	r3, [pc, #56]	; (80053ac <HAL_InitTick+0x90>)
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	601a      	str	r2, [r3, #0]
 8005376:	e00d      	b.n	8005394 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8005378:	230f      	movs	r3, #15
 800537a:	18fb      	adds	r3, r7, r3
 800537c:	2201      	movs	r2, #1
 800537e:	701a      	strb	r2, [r3, #0]
 8005380:	e008      	b.n	8005394 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005382:	230f      	movs	r3, #15
 8005384:	18fb      	adds	r3, r7, r3
 8005386:	2201      	movs	r2, #1
 8005388:	701a      	strb	r2, [r3, #0]
 800538a:	e003      	b.n	8005394 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800538c:	230f      	movs	r3, #15
 800538e:	18fb      	adds	r3, r7, r3
 8005390:	2201      	movs	r2, #1
 8005392:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8005394:	230f      	movs	r3, #15
 8005396:	18fb      	adds	r3, r7, r3
 8005398:	781b      	ldrb	r3, [r3, #0]
}
 800539a:	0018      	movs	r0, r3
 800539c:	46bd      	mov	sp, r7
 800539e:	b005      	add	sp, #20
 80053a0:	bd90      	pop	{r4, r7, pc}
 80053a2:	46c0      	nop			; (mov r8, r8)
 80053a4:	2000313c 	.word	0x2000313c
 80053a8:	20003134 	.word	0x20003134
 80053ac:	20003138 	.word	0x20003138

080053b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80053b4:	4b05      	ldr	r3, [pc, #20]	; (80053cc <HAL_IncTick+0x1c>)
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	001a      	movs	r2, r3
 80053ba:	4b05      	ldr	r3, [pc, #20]	; (80053d0 <HAL_IncTick+0x20>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	18d2      	adds	r2, r2, r3
 80053c0:	4b03      	ldr	r3, [pc, #12]	; (80053d0 <HAL_IncTick+0x20>)
 80053c2:	601a      	str	r2, [r3, #0]
}
 80053c4:	46c0      	nop			; (mov r8, r8)
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	46c0      	nop			; (mov r8, r8)
 80053cc:	2000313c 	.word	0x2000313c
 80053d0:	20005600 	.word	0x20005600

080053d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	af00      	add	r7, sp, #0
  return uwTick;
 80053d8:	4b02      	ldr	r3, [pc, #8]	; (80053e4 <HAL_GetTick+0x10>)
 80053da:	681b      	ldr	r3, [r3, #0]
}
 80053dc:	0018      	movs	r0, r3
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	46c0      	nop			; (mov r8, r8)
 80053e4:	20005600 	.word	0x20005600

080053e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80053f0:	f7ff fff0 	bl	80053d4 <HAL_GetTick>
 80053f4:	0003      	movs	r3, r0
 80053f6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	3301      	adds	r3, #1
 8005400:	d005      	beq.n	800540e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005402:	4b0a      	ldr	r3, [pc, #40]	; (800542c <HAL_Delay+0x44>)
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	001a      	movs	r2, r3
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	189b      	adds	r3, r3, r2
 800540c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800540e:	46c0      	nop			; (mov r8, r8)
 8005410:	f7ff ffe0 	bl	80053d4 <HAL_GetTick>
 8005414:	0002      	movs	r2, r0
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	429a      	cmp	r2, r3
 800541e:	d8f7      	bhi.n	8005410 <HAL_Delay+0x28>
  {
  }
}
 8005420:	46c0      	nop			; (mov r8, r8)
 8005422:	46c0      	nop			; (mov r8, r8)
 8005424:	46bd      	mov	sp, r7
 8005426:	b004      	add	sp, #16
 8005428:	bd80      	pop	{r7, pc}
 800542a:	46c0      	nop			; (mov r8, r8)
 800542c:	2000313c 	.word	0x2000313c

08005430 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8005438:	4b06      	ldr	r3, [pc, #24]	; (8005454 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a06      	ldr	r2, [pc, #24]	; (8005458 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800543e:	4013      	ands	r3, r2
 8005440:	0019      	movs	r1, r3
 8005442:	4b04      	ldr	r3, [pc, #16]	; (8005454 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	430a      	orrs	r2, r1
 8005448:	601a      	str	r2, [r3, #0]
}
 800544a:	46c0      	nop			; (mov r8, r8)
 800544c:	46bd      	mov	sp, r7
 800544e:	b002      	add	sp, #8
 8005450:	bd80      	pop	{r7, pc}
 8005452:	46c0      	nop			; (mov r8, r8)
 8005454:	40010000 	.word	0x40010000
 8005458:	fffff9ff 	.word	0xfffff9ff

0800545c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8005464:	4a05      	ldr	r2, [pc, #20]	; (800547c <LL_EXTI_EnableIT_0_31+0x20>)
 8005466:	2380      	movs	r3, #128	; 0x80
 8005468:	58d2      	ldr	r2, [r2, r3]
 800546a:	4904      	ldr	r1, [pc, #16]	; (800547c <LL_EXTI_EnableIT_0_31+0x20>)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4313      	orrs	r3, r2
 8005470:	2280      	movs	r2, #128	; 0x80
 8005472:	508b      	str	r3, [r1, r2]
}
 8005474:	46c0      	nop			; (mov r8, r8)
 8005476:	46bd      	mov	sp, r7
 8005478:	b002      	add	sp, #8
 800547a:	bd80      	pop	{r7, pc}
 800547c:	40021800 	.word	0x40021800

08005480 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8005488:	4a06      	ldr	r2, [pc, #24]	; (80054a4 <LL_EXTI_DisableIT_0_31+0x24>)
 800548a:	2380      	movs	r3, #128	; 0x80
 800548c:	58d3      	ldr	r3, [r2, r3]
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	43d2      	mvns	r2, r2
 8005492:	4904      	ldr	r1, [pc, #16]	; (80054a4 <LL_EXTI_DisableIT_0_31+0x24>)
 8005494:	4013      	ands	r3, r2
 8005496:	2280      	movs	r2, #128	; 0x80
 8005498:	508b      	str	r3, [r1, r2]
}
 800549a:	46c0      	nop			; (mov r8, r8)
 800549c:	46bd      	mov	sp, r7
 800549e:	b002      	add	sp, #8
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	46c0      	nop			; (mov r8, r8)
 80054a4:	40021800 	.word	0x40021800

080054a8 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80054b0:	4a05      	ldr	r2, [pc, #20]	; (80054c8 <LL_EXTI_EnableEvent_0_31+0x20>)
 80054b2:	2384      	movs	r3, #132	; 0x84
 80054b4:	58d2      	ldr	r2, [r2, r3]
 80054b6:	4904      	ldr	r1, [pc, #16]	; (80054c8 <LL_EXTI_EnableEvent_0_31+0x20>)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	2284      	movs	r2, #132	; 0x84
 80054be:	508b      	str	r3, [r1, r2]

}
 80054c0:	46c0      	nop			; (mov r8, r8)
 80054c2:	46bd      	mov	sp, r7
 80054c4:	b002      	add	sp, #8
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	40021800 	.word	0x40021800

080054cc <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80054d4:	4a06      	ldr	r2, [pc, #24]	; (80054f0 <LL_EXTI_DisableEvent_0_31+0x24>)
 80054d6:	2384      	movs	r3, #132	; 0x84
 80054d8:	58d3      	ldr	r3, [r2, r3]
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	43d2      	mvns	r2, r2
 80054de:	4904      	ldr	r1, [pc, #16]	; (80054f0 <LL_EXTI_DisableEvent_0_31+0x24>)
 80054e0:	4013      	ands	r3, r2
 80054e2:	2284      	movs	r2, #132	; 0x84
 80054e4:	508b      	str	r3, [r1, r2]
}
 80054e6:	46c0      	nop			; (mov r8, r8)
 80054e8:	46bd      	mov	sp, r7
 80054ea:	b002      	add	sp, #8
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	46c0      	nop			; (mov r8, r8)
 80054f0:	40021800 	.word	0x40021800

080054f4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80054fc:	4b04      	ldr	r3, [pc, #16]	; (8005510 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 80054fe:	6819      	ldr	r1, [r3, #0]
 8005500:	4b03      	ldr	r3, [pc, #12]	; (8005510 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	430a      	orrs	r2, r1
 8005506:	601a      	str	r2, [r3, #0]

}
 8005508:	46c0      	nop			; (mov r8, r8)
 800550a:	46bd      	mov	sp, r7
 800550c:	b002      	add	sp, #8
 800550e:	bd80      	pop	{r7, pc}
 8005510:	40021800 	.word	0x40021800

08005514 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800551c:	4b05      	ldr	r3, [pc, #20]	; (8005534 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	43d9      	mvns	r1, r3
 8005524:	4b03      	ldr	r3, [pc, #12]	; (8005534 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8005526:	400a      	ands	r2, r1
 8005528:	601a      	str	r2, [r3, #0]

}
 800552a:	46c0      	nop			; (mov r8, r8)
 800552c:	46bd      	mov	sp, r7
 800552e:	b002      	add	sp, #8
 8005530:	bd80      	pop	{r7, pc}
 8005532:	46c0      	nop			; (mov r8, r8)
 8005534:	40021800 	.word	0x40021800

08005538 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8005540:	4b04      	ldr	r3, [pc, #16]	; (8005554 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8005542:	6859      	ldr	r1, [r3, #4]
 8005544:	4b03      	ldr	r3, [pc, #12]	; (8005554 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	430a      	orrs	r2, r1
 800554a:	605a      	str	r2, [r3, #4]
}
 800554c:	46c0      	nop			; (mov r8, r8)
 800554e:	46bd      	mov	sp, r7
 8005550:	b002      	add	sp, #8
 8005552:	bd80      	pop	{r7, pc}
 8005554:	40021800 	.word	0x40021800

08005558 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8005560:	4b05      	ldr	r3, [pc, #20]	; (8005578 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8005562:	685a      	ldr	r2, [r3, #4]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	43d9      	mvns	r1, r3
 8005568:	4b03      	ldr	r3, [pc, #12]	; (8005578 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800556a:	400a      	ands	r2, r1
 800556c:	605a      	str	r2, [r3, #4]
}
 800556e:	46c0      	nop			; (mov r8, r8)
 8005570:	46bd      	mov	sp, r7
 8005572:	b002      	add	sp, #8
 8005574:	bd80      	pop	{r7, pc}
 8005576:	46c0      	nop			; (mov r8, r8)
 8005578:	40021800 	.word	0x40021800

0800557c <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 8005584:	4b03      	ldr	r3, [pc, #12]	; (8005594 <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	611a      	str	r2, [r3, #16]
}
 800558a:	46c0      	nop			; (mov r8, r8)
 800558c:	46bd      	mov	sp, r7
 800558e:	b002      	add	sp, #8
 8005590:	bd80      	pop	{r7, pc}
 8005592:	46c0      	nop			; (mov r8, r8)
 8005594:	40021800 	.word	0x40021800

08005598 <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 80055a0:	4b03      	ldr	r3, [pc, #12]	; (80055b0 <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	60da      	str	r2, [r3, #12]
}
 80055a6:	46c0      	nop			; (mov r8, r8)
 80055a8:	46bd      	mov	sp, r7
 80055aa:	b002      	add	sp, #8
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	46c0      	nop			; (mov r8, r8)
 80055b0:	40021800 	.word	0x40021800

080055b4 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b088      	sub	sp, #32
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80055bc:	2300      	movs	r3, #0
 80055be:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80055c0:	211f      	movs	r1, #31
 80055c2:	187b      	adds	r3, r7, r1
 80055c4:	2200      	movs	r2, #0
 80055c6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t * comp_common_odd;
  __IO uint32_t * comp_common_even;
#endif

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d103      	bne.n	80055d6 <HAL_COMP_Init+0x22>
  {
    status = HAL_ERROR;
 80055ce:	187b      	adds	r3, r7, r1
 80055d0:	2201      	movs	r2, #1
 80055d2:	701a      	strb	r2, [r3, #0]
 80055d4:	e13d      	b.n	8005852 <HAL_COMP_Init+0x29e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	0fdb      	lsrs	r3, r3, #31
 80055de:	07da      	lsls	r2, r3, #31
 80055e0:	2380      	movs	r3, #128	; 0x80
 80055e2:	061b      	lsls	r3, r3, #24
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d104      	bne.n	80055f2 <HAL_COMP_Init+0x3e>
  {
    status = HAL_ERROR;
 80055e8:	231f      	movs	r3, #31
 80055ea:	18fb      	adds	r3, r7, r3
 80055ec:	2201      	movs	r2, #1
 80055ee:	701a      	strb	r2, [r3, #0]
 80055f0:	e12f      	b.n	8005852 <HAL_COMP_Init+0x29e>
    if(hcomp->Init.WindowMode != COMP_WINDOWMODE_DISABLE)
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2229      	movs	r2, #41	; 0x29
 80055f6:	5c9b      	ldrb	r3, [r3, r2]
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10a      	bne.n	8005614 <HAL_COMP_Init+0x60>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2228      	movs	r2, #40	; 0x28
 8005602:	2100      	movs	r1, #0
 8005604:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	0018      	movs	r0, r3
 8005610:	f7ff fa10 	bl	8004a34 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2230      	movs	r2, #48	; 0x30
 800561c:	4013      	ands	r3, r2
 800561e:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	69db      	ldr	r3, [r3, #28]
 800563a:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (  hcomp->Init.InputMinus
 8005640:	4313      	orrs	r3, r2
 8005642:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a85      	ldr	r2, [pc, #532]	; (8005860 <HAL_COMP_Init+0x2ac>)
 800564c:	4013      	ands	r3, r2
 800564e:	0019      	movs	r1, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	430a      	orrs	r2, r1
 8005658:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(*comp_common_odd, COMP_CSR_WINOUT);
        CLEAR_BIT(*comp_common_even, COMP_CSR_WINOUT);
        break;
    }
#else
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	2380      	movs	r3, #128	; 0x80
 8005660:	011b      	lsls	r3, r3, #4
 8005662:	429a      	cmp	r2, r3
 8005664:	d10d      	bne.n	8005682 <HAL_COMP_Init+0xce>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8005666:	4b7f      	ldr	r3, [pc, #508]	; (8005864 <HAL_COMP_Init+0x2b0>)
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	4b7e      	ldr	r3, [pc, #504]	; (8005864 <HAL_COMP_Init+0x2b0>)
 800566c:	497e      	ldr	r1, [pc, #504]	; (8005868 <HAL_COMP_Init+0x2b4>)
 800566e:	400a      	ands	r2, r1
 8005670:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8005672:	4b7c      	ldr	r3, [pc, #496]	; (8005864 <HAL_COMP_Init+0x2b0>)
 8005674:	685a      	ldr	r2, [r3, #4]
 8005676:	4b7b      	ldr	r3, [pc, #492]	; (8005864 <HAL_COMP_Init+0x2b0>)
 8005678:	2180      	movs	r1, #128	; 0x80
 800567a:	0109      	lsls	r1, r1, #4
 800567c:	430a      	orrs	r2, r1
 800567e:	605a      	str	r2, [r3, #4]
 8005680:	e01f      	b.n	80056c2 <HAL_COMP_Init+0x10e>
    }
    else if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685a      	ldr	r2, [r3, #4]
 8005686:	23c0      	movs	r3, #192	; 0xc0
 8005688:	015b      	lsls	r3, r3, #5
 800568a:	429a      	cmp	r2, r3
 800568c:	d10d      	bne.n	80056aa <HAL_COMP_Init+0xf6>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800568e:	4b75      	ldr	r3, [pc, #468]	; (8005864 <HAL_COMP_Init+0x2b0>)
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	4b74      	ldr	r3, [pc, #464]	; (8005864 <HAL_COMP_Init+0x2b0>)
 8005694:	2180      	movs	r1, #128	; 0x80
 8005696:	0109      	lsls	r1, r1, #4
 8005698:	430a      	orrs	r2, r1
 800569a:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800569c:	4b71      	ldr	r3, [pc, #452]	; (8005864 <HAL_COMP_Init+0x2b0>)
 800569e:	685a      	ldr	r2, [r3, #4]
 80056a0:	4b70      	ldr	r3, [pc, #448]	; (8005864 <HAL_COMP_Init+0x2b0>)
 80056a2:	4971      	ldr	r1, [pc, #452]	; (8005868 <HAL_COMP_Init+0x2b4>)
 80056a4:	400a      	ands	r2, r1
 80056a6:	605a      	str	r2, [r3, #4]
 80056a8:	e00b      	b.n	80056c2 <HAL_COMP_Init+0x10e>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 80056aa:	4b6e      	ldr	r3, [pc, #440]	; (8005864 <HAL_COMP_Init+0x2b0>)
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	4b6d      	ldr	r3, [pc, #436]	; (8005864 <HAL_COMP_Init+0x2b0>)
 80056b0:	496d      	ldr	r1, [pc, #436]	; (8005868 <HAL_COMP_Init+0x2b4>)
 80056b2:	400a      	ands	r2, r1
 80056b4:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 80056b6:	4b6b      	ldr	r3, [pc, #428]	; (8005864 <HAL_COMP_Init+0x2b0>)
 80056b8:	685a      	ldr	r2, [r3, #4]
 80056ba:	4b6a      	ldr	r3, [pc, #424]	; (8005864 <HAL_COMP_Init+0x2b0>)
 80056bc:	496a      	ldr	r1, [pc, #424]	; (8005868 <HAL_COMP_Init+0x2b4>)
 80056be:	400a      	ands	r2, r1
 80056c0:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	22a0      	movs	r2, #160	; 0xa0
 80056c8:	01d2      	lsls	r2, r2, #7
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d017      	beq.n	80056fe <HAL_COMP_Init+0x14a>
 80056ce:	22a0      	movs	r2, #160	; 0xa0
 80056d0:	01d2      	lsls	r2, r2, #7
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d830      	bhi.n	8005738 <HAL_COMP_Init+0x184>
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d01f      	beq.n	800571a <HAL_COMP_Init+0x166>
 80056da:	2280      	movs	r2, #128	; 0x80
 80056dc:	01d2      	lsls	r2, r2, #7
 80056de:	4293      	cmp	r3, r2
 80056e0:	d12a      	bne.n	8005738 <HAL_COMP_Init+0x184>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80056e2:	4b60      	ldr	r3, [pc, #384]	; (8005864 <HAL_COMP_Init+0x2b0>)
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	4b5f      	ldr	r3, [pc, #380]	; (8005864 <HAL_COMP_Init+0x2b0>)
 80056e8:	2180      	movs	r1, #128	; 0x80
 80056ea:	01c9      	lsls	r1, r1, #7
 80056ec:	430a      	orrs	r2, r1
 80056ee:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80056f0:	4b5c      	ldr	r3, [pc, #368]	; (8005864 <HAL_COMP_Init+0x2b0>)
 80056f2:	685a      	ldr	r2, [r3, #4]
 80056f4:	4b5b      	ldr	r3, [pc, #364]	; (8005864 <HAL_COMP_Init+0x2b0>)
 80056f6:	495d      	ldr	r1, [pc, #372]	; (800586c <HAL_COMP_Init+0x2b8>)
 80056f8:	400a      	ands	r2, r1
 80056fa:	605a      	str	r2, [r3, #4]
        break;
 80056fc:	e029      	b.n	8005752 <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80056fe:	4b59      	ldr	r3, [pc, #356]	; (8005864 <HAL_COMP_Init+0x2b0>)
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	4b58      	ldr	r3, [pc, #352]	; (8005864 <HAL_COMP_Init+0x2b0>)
 8005704:	4959      	ldr	r1, [pc, #356]	; (800586c <HAL_COMP_Init+0x2b8>)
 8005706:	400a      	ands	r2, r1
 8005708:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 800570a:	4b56      	ldr	r3, [pc, #344]	; (8005864 <HAL_COMP_Init+0x2b0>)
 800570c:	685a      	ldr	r2, [r3, #4]
 800570e:	4b55      	ldr	r3, [pc, #340]	; (8005864 <HAL_COMP_Init+0x2b0>)
 8005710:	2180      	movs	r1, #128	; 0x80
 8005712:	01c9      	lsls	r1, r1, #7
 8005714:	430a      	orrs	r2, r1
 8005716:	605a      	str	r2, [r3, #4]
        break;
 8005718:	e01b      	b.n	8005752 <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800571a:	4b52      	ldr	r3, [pc, #328]	; (8005864 <HAL_COMP_Init+0x2b0>)
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	4b51      	ldr	r3, [pc, #324]	; (8005864 <HAL_COMP_Init+0x2b0>)
 8005720:	2180      	movs	r1, #128	; 0x80
 8005722:	01c9      	lsls	r1, r1, #7
 8005724:	430a      	orrs	r2, r1
 8005726:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8005728:	4b4e      	ldr	r3, [pc, #312]	; (8005864 <HAL_COMP_Init+0x2b0>)
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	4b4d      	ldr	r3, [pc, #308]	; (8005864 <HAL_COMP_Init+0x2b0>)
 800572e:	2180      	movs	r1, #128	; 0x80
 8005730:	01c9      	lsls	r1, r1, #7
 8005732:	430a      	orrs	r2, r1
 8005734:	605a      	str	r2, [r3, #4]
        break;
 8005736:	e00c      	b.n	8005752 <HAL_COMP_Init+0x19e>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8005738:	4b4a      	ldr	r3, [pc, #296]	; (8005864 <HAL_COMP_Init+0x2b0>)
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	4b49      	ldr	r3, [pc, #292]	; (8005864 <HAL_COMP_Init+0x2b0>)
 800573e:	494b      	ldr	r1, [pc, #300]	; (800586c <HAL_COMP_Init+0x2b8>)
 8005740:	400a      	ands	r2, r1
 8005742:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8005744:	4b47      	ldr	r3, [pc, #284]	; (8005864 <HAL_COMP_Init+0x2b0>)
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	4b46      	ldr	r3, [pc, #280]	; (8005864 <HAL_COMP_Init+0x2b0>)
 800574a:	4948      	ldr	r1, [pc, #288]	; (800586c <HAL_COMP_Init+0x2b8>)
 800574c:	400a      	ands	r2, r1
 800574e:	605a      	str	r2, [r3, #4]
        break;
 8005750:	46c0      	nop			; (mov r8, r8)
    }
#endif

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2230      	movs	r2, #48	; 0x30
 800575a:	4013      	ands	r3, r2
 800575c:	d016      	beq.n	800578c <HAL_COMP_Init+0x1d8>
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d113      	bne.n	800578c <HAL_COMP_Init+0x1d8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005764:	4b42      	ldr	r3, [pc, #264]	; (8005870 <HAL_COMP_Init+0x2bc>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4942      	ldr	r1, [pc, #264]	; (8005874 <HAL_COMP_Init+0x2c0>)
 800576a:	0018      	movs	r0, r3
 800576c:	f7fa fcca 	bl	8000104 <__udivsi3>
 8005770:	0003      	movs	r3, r0
 8005772:	001a      	movs	r2, r3
 8005774:	0013      	movs	r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	189b      	adds	r3, r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800577e:	e002      	b.n	8005786 <HAL_COMP_Init+0x1d2>
      {
        wait_loop_index--;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	3b01      	subs	r3, #1
 8005784:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1f9      	bne.n	8005780 <HAL_COMP_Init+0x1cc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a34      	ldr	r2, [pc, #208]	; (8005864 <HAL_COMP_Init+0x2b0>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d102      	bne.n	800579c <HAL_COMP_Init+0x1e8>
 8005796:	2380      	movs	r3, #128	; 0x80
 8005798:	029b      	lsls	r3, r3, #10
 800579a:	e001      	b.n	80057a0 <HAL_COMP_Init+0x1ec>
 800579c:	2380      	movs	r3, #128	; 0x80
 800579e:	02db      	lsls	r3, r3, #11
 80057a0:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a6:	2203      	movs	r2, #3
 80057a8:	4013      	ands	r3, r2
 80057aa:	d040      	beq.n	800582e <HAL_COMP_Init+0x27a>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b0:	2210      	movs	r2, #16
 80057b2:	4013      	ands	r3, r2
 80057b4:	d004      	beq.n	80057c0 <HAL_COMP_Init+0x20c>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	0018      	movs	r0, r3
 80057ba:	f7ff fe9b 	bl	80054f4 <LL_EXTI_EnableRisingTrig_0_31>
 80057be:	e003      	b.n	80057c8 <HAL_COMP_Init+0x214>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	0018      	movs	r0, r3
 80057c4:	f7ff fea6 	bl	8005514 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057cc:	2220      	movs	r2, #32
 80057ce:	4013      	ands	r3, r2
 80057d0:	d004      	beq.n	80057dc <HAL_COMP_Init+0x228>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	0018      	movs	r0, r3
 80057d6:	f7ff feaf 	bl	8005538 <LL_EXTI_EnableFallingTrig_0_31>
 80057da:	e003      	b.n	80057e4 <HAL_COMP_Init+0x230>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	0018      	movs	r0, r3
 80057e0:	f7ff feba 	bl	8005558 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	0018      	movs	r0, r3
 80057e8:	f7ff fed6 	bl	8005598 <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	0018      	movs	r0, r3
 80057f0:	f7ff fec4 	bl	800557c <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f8:	2202      	movs	r2, #2
 80057fa:	4013      	ands	r3, r2
 80057fc:	d004      	beq.n	8005808 <HAL_COMP_Init+0x254>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	0018      	movs	r0, r3
 8005802:	f7ff fe51 	bl	80054a8 <LL_EXTI_EnableEvent_0_31>
 8005806:	e003      	b.n	8005810 <HAL_COMP_Init+0x25c>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	0018      	movs	r0, r3
 800580c:	f7ff fe5e 	bl	80054cc <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005814:	2201      	movs	r2, #1
 8005816:	4013      	ands	r3, r2
 8005818:	d004      	beq.n	8005824 <HAL_COMP_Init+0x270>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	0018      	movs	r0, r3
 800581e:	f7ff fe1d 	bl	800545c <LL_EXTI_EnableIT_0_31>
 8005822:	e00c      	b.n	800583e <HAL_COMP_Init+0x28a>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	0018      	movs	r0, r3
 8005828:	f7ff fe2a 	bl	8005480 <LL_EXTI_DisableIT_0_31>
 800582c:	e007      	b.n	800583e <HAL_COMP_Init+0x28a>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	0018      	movs	r0, r3
 8005832:	f7ff fe4b 	bl	80054cc <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	0018      	movs	r0, r3
 800583a:	f7ff fe21 	bl	8005480 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2229      	movs	r2, #41	; 0x29
 8005842:	5c9b      	ldrb	r3, [r3, r2]
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b00      	cmp	r3, #0
 8005848:	d103      	bne.n	8005852 <HAL_COMP_Init+0x29e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2229      	movs	r2, #41	; 0x29
 800584e:	2101      	movs	r1, #1
 8005850:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8005852:	231f      	movs	r3, #31
 8005854:	18fb      	adds	r3, r7, r3
 8005856:	781b      	ldrb	r3, [r3, #0]
}
 8005858:	0018      	movs	r0, r3
 800585a:	46bd      	mov	sp, r7
 800585c:	b008      	add	sp, #32
 800585e:	bd80      	pop	{r7, pc}
 8005860:	fe00740f 	.word	0xfe00740f
 8005864:	40010200 	.word	0x40010200
 8005868:	fffff7ff 	.word	0xfffff7ff
 800586c:	ffffbfff 	.word	0xffffbfff
 8005870:	20003134 	.word	0x20003134
 8005874:	00030d40 	.word	0x00030d40

08005878 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8005880:	2300      	movs	r3, #0
 8005882:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005884:	210f      	movs	r1, #15
 8005886:	187b      	adds	r3, r7, r1
 8005888:	2200      	movs	r2, #0
 800588a:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d103      	bne.n	800589a <HAL_COMP_Start+0x22>
  {
    status = HAL_ERROR;
 8005892:	187b      	adds	r3, r7, r1
 8005894:	2201      	movs	r2, #1
 8005896:	701a      	strb	r2, [r3, #0]
 8005898:	e034      	b.n	8005904 <HAL_COMP_Start+0x8c>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	0fdb      	lsrs	r3, r3, #31
 80058a2:	07da      	lsls	r2, r3, #31
 80058a4:	2380      	movs	r3, #128	; 0x80
 80058a6:	061b      	lsls	r3, r3, #24
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d104      	bne.n	80058b6 <HAL_COMP_Start+0x3e>
  {
    status = HAL_ERROR;
 80058ac:	230f      	movs	r3, #15
 80058ae:	18fb      	adds	r3, r7, r3
 80058b0:	2201      	movs	r2, #1
 80058b2:	701a      	strb	r2, [r3, #0]
 80058b4:	e026      	b.n	8005904 <HAL_COMP_Start+0x8c>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2229      	movs	r2, #41	; 0x29
 80058ba:	5c9b      	ldrb	r3, [r3, r2]
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d11c      	bne.n	80058fc <HAL_COMP_Start+0x84>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2101      	movs	r1, #1
 80058ce:	430a      	orrs	r2, r1
 80058d0:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2229      	movs	r2, #41	; 0x29
 80058d6:	2102      	movs	r1, #2
 80058d8:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80058da:	4b0e      	ldr	r3, [pc, #56]	; (8005914 <HAL_COMP_Start+0x9c>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	490e      	ldr	r1, [pc, #56]	; (8005918 <HAL_COMP_Start+0xa0>)
 80058e0:	0018      	movs	r0, r3
 80058e2:	f7fa fc0f 	bl	8000104 <__udivsi3>
 80058e6:	0003      	movs	r3, r0
 80058e8:	00db      	lsls	r3, r3, #3
 80058ea:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80058ec:	e002      	b.n	80058f4 <HAL_COMP_Start+0x7c>
      {
        wait_loop_index--;
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	3b01      	subs	r3, #1
 80058f2:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1f9      	bne.n	80058ee <HAL_COMP_Start+0x76>
 80058fa:	e003      	b.n	8005904 <HAL_COMP_Start+0x8c>
      }
    }
    else
    {
      status = HAL_ERROR;
 80058fc:	230f      	movs	r3, #15
 80058fe:	18fb      	adds	r3, r7, r3
 8005900:	2201      	movs	r2, #1
 8005902:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8005904:	230f      	movs	r3, #15
 8005906:	18fb      	adds	r3, r7, r3
 8005908:	781b      	ldrb	r3, [r3, #0]
}
 800590a:	0018      	movs	r0, r3
 800590c:	46bd      	mov	sp, r7
 800590e:	b004      	add	sp, #16
 8005910:	bd80      	pop	{r7, pc}
 8005912:	46c0      	nop			; (mov r8, r8)
 8005914:	20003134 	.word	0x20003134
 8005918:	00030d40 	.word	0x00030d40

0800591c <__NVIC_EnableIRQ>:
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
 8005922:	0002      	movs	r2, r0
 8005924:	1dfb      	adds	r3, r7, #7
 8005926:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005928:	1dfb      	adds	r3, r7, #7
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	2b7f      	cmp	r3, #127	; 0x7f
 800592e:	d809      	bhi.n	8005944 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005930:	1dfb      	adds	r3, r7, #7
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	001a      	movs	r2, r3
 8005936:	231f      	movs	r3, #31
 8005938:	401a      	ands	r2, r3
 800593a:	4b04      	ldr	r3, [pc, #16]	; (800594c <__NVIC_EnableIRQ+0x30>)
 800593c:	2101      	movs	r1, #1
 800593e:	4091      	lsls	r1, r2
 8005940:	000a      	movs	r2, r1
 8005942:	601a      	str	r2, [r3, #0]
}
 8005944:	46c0      	nop			; (mov r8, r8)
 8005946:	46bd      	mov	sp, r7
 8005948:	b002      	add	sp, #8
 800594a:	bd80      	pop	{r7, pc}
 800594c:	e000e100 	.word	0xe000e100

08005950 <__NVIC_SetPriority>:
{
 8005950:	b590      	push	{r4, r7, lr}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	0002      	movs	r2, r0
 8005958:	6039      	str	r1, [r7, #0]
 800595a:	1dfb      	adds	r3, r7, #7
 800595c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800595e:	1dfb      	adds	r3, r7, #7
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	2b7f      	cmp	r3, #127	; 0x7f
 8005964:	d828      	bhi.n	80059b8 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005966:	4a2f      	ldr	r2, [pc, #188]	; (8005a24 <__NVIC_SetPriority+0xd4>)
 8005968:	1dfb      	adds	r3, r7, #7
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	b25b      	sxtb	r3, r3
 800596e:	089b      	lsrs	r3, r3, #2
 8005970:	33c0      	adds	r3, #192	; 0xc0
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	589b      	ldr	r3, [r3, r2]
 8005976:	1dfa      	adds	r2, r7, #7
 8005978:	7812      	ldrb	r2, [r2, #0]
 800597a:	0011      	movs	r1, r2
 800597c:	2203      	movs	r2, #3
 800597e:	400a      	ands	r2, r1
 8005980:	00d2      	lsls	r2, r2, #3
 8005982:	21ff      	movs	r1, #255	; 0xff
 8005984:	4091      	lsls	r1, r2
 8005986:	000a      	movs	r2, r1
 8005988:	43d2      	mvns	r2, r2
 800598a:	401a      	ands	r2, r3
 800598c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	019b      	lsls	r3, r3, #6
 8005992:	22ff      	movs	r2, #255	; 0xff
 8005994:	401a      	ands	r2, r3
 8005996:	1dfb      	adds	r3, r7, #7
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	0018      	movs	r0, r3
 800599c:	2303      	movs	r3, #3
 800599e:	4003      	ands	r3, r0
 80059a0:	00db      	lsls	r3, r3, #3
 80059a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80059a4:	481f      	ldr	r0, [pc, #124]	; (8005a24 <__NVIC_SetPriority+0xd4>)
 80059a6:	1dfb      	adds	r3, r7, #7
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	b25b      	sxtb	r3, r3
 80059ac:	089b      	lsrs	r3, r3, #2
 80059ae:	430a      	orrs	r2, r1
 80059b0:	33c0      	adds	r3, #192	; 0xc0
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	501a      	str	r2, [r3, r0]
}
 80059b6:	e031      	b.n	8005a1c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80059b8:	4a1b      	ldr	r2, [pc, #108]	; (8005a28 <__NVIC_SetPriority+0xd8>)
 80059ba:	1dfb      	adds	r3, r7, #7
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	0019      	movs	r1, r3
 80059c0:	230f      	movs	r3, #15
 80059c2:	400b      	ands	r3, r1
 80059c4:	3b08      	subs	r3, #8
 80059c6:	089b      	lsrs	r3, r3, #2
 80059c8:	3306      	adds	r3, #6
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	18d3      	adds	r3, r2, r3
 80059ce:	3304      	adds	r3, #4
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	1dfa      	adds	r2, r7, #7
 80059d4:	7812      	ldrb	r2, [r2, #0]
 80059d6:	0011      	movs	r1, r2
 80059d8:	2203      	movs	r2, #3
 80059da:	400a      	ands	r2, r1
 80059dc:	00d2      	lsls	r2, r2, #3
 80059de:	21ff      	movs	r1, #255	; 0xff
 80059e0:	4091      	lsls	r1, r2
 80059e2:	000a      	movs	r2, r1
 80059e4:	43d2      	mvns	r2, r2
 80059e6:	401a      	ands	r2, r3
 80059e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	019b      	lsls	r3, r3, #6
 80059ee:	22ff      	movs	r2, #255	; 0xff
 80059f0:	401a      	ands	r2, r3
 80059f2:	1dfb      	adds	r3, r7, #7
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	0018      	movs	r0, r3
 80059f8:	2303      	movs	r3, #3
 80059fa:	4003      	ands	r3, r0
 80059fc:	00db      	lsls	r3, r3, #3
 80059fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005a00:	4809      	ldr	r0, [pc, #36]	; (8005a28 <__NVIC_SetPriority+0xd8>)
 8005a02:	1dfb      	adds	r3, r7, #7
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	001c      	movs	r4, r3
 8005a08:	230f      	movs	r3, #15
 8005a0a:	4023      	ands	r3, r4
 8005a0c:	3b08      	subs	r3, #8
 8005a0e:	089b      	lsrs	r3, r3, #2
 8005a10:	430a      	orrs	r2, r1
 8005a12:	3306      	adds	r3, #6
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	18c3      	adds	r3, r0, r3
 8005a18:	3304      	adds	r3, #4
 8005a1a:	601a      	str	r2, [r3, #0]
}
 8005a1c:	46c0      	nop			; (mov r8, r8)
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	b003      	add	sp, #12
 8005a22:	bd90      	pop	{r4, r7, pc}
 8005a24:	e000e100 	.word	0xe000e100
 8005a28:	e000ed00 	.word	0xe000ed00

08005a2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	1e5a      	subs	r2, r3, #1
 8005a38:	2380      	movs	r3, #128	; 0x80
 8005a3a:	045b      	lsls	r3, r3, #17
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d301      	bcc.n	8005a44 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a40:	2301      	movs	r3, #1
 8005a42:	e010      	b.n	8005a66 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a44:	4b0a      	ldr	r3, [pc, #40]	; (8005a70 <SysTick_Config+0x44>)
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	3a01      	subs	r2, #1
 8005a4a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	425b      	negs	r3, r3
 8005a50:	2103      	movs	r1, #3
 8005a52:	0018      	movs	r0, r3
 8005a54:	f7ff ff7c 	bl	8005950 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a58:	4b05      	ldr	r3, [pc, #20]	; (8005a70 <SysTick_Config+0x44>)
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a5e:	4b04      	ldr	r3, [pc, #16]	; (8005a70 <SysTick_Config+0x44>)
 8005a60:	2207      	movs	r2, #7
 8005a62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	0018      	movs	r0, r3
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	b002      	add	sp, #8
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	46c0      	nop			; (mov r8, r8)
 8005a70:	e000e010 	.word	0xe000e010

08005a74 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60b9      	str	r1, [r7, #8]
 8005a7c:	607a      	str	r2, [r7, #4]
 8005a7e:	210f      	movs	r1, #15
 8005a80:	187b      	adds	r3, r7, r1
 8005a82:	1c02      	adds	r2, r0, #0
 8005a84:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8005a86:	68ba      	ldr	r2, [r7, #8]
 8005a88:	187b      	adds	r3, r7, r1
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	b25b      	sxtb	r3, r3
 8005a8e:	0011      	movs	r1, r2
 8005a90:	0018      	movs	r0, r3
 8005a92:	f7ff ff5d 	bl	8005950 <__NVIC_SetPriority>
}
 8005a96:	46c0      	nop			; (mov r8, r8)
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	b004      	add	sp, #16
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b082      	sub	sp, #8
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	0002      	movs	r2, r0
 8005aa6:	1dfb      	adds	r3, r7, #7
 8005aa8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005aaa:	1dfb      	adds	r3, r7, #7
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	b25b      	sxtb	r3, r3
 8005ab0:	0018      	movs	r0, r3
 8005ab2:	f7ff ff33 	bl	800591c <__NVIC_EnableIRQ>
}
 8005ab6:	46c0      	nop			; (mov r8, r8)
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	b002      	add	sp, #8
 8005abc:	bd80      	pop	{r7, pc}

08005abe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b082      	sub	sp, #8
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	0018      	movs	r0, r3
 8005aca:	f7ff ffaf 	bl	8005a2c <SysTick_Config>
 8005ace:	0003      	movs	r3, r0
}
 8005ad0:	0018      	movs	r0, r3
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	b002      	add	sp, #8
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d101      	bne.n	8005aea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e077      	b.n	8005bda <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a3d      	ldr	r2, [pc, #244]	; (8005be4 <HAL_DMA_Init+0x10c>)
 8005af0:	4694      	mov	ip, r2
 8005af2:	4463      	add	r3, ip
 8005af4:	2114      	movs	r1, #20
 8005af6:	0018      	movs	r0, r3
 8005af8:	f7fa fb04 	bl	8000104 <__udivsi3>
 8005afc:	0003      	movs	r3, r0
 8005afe:	009a      	lsls	r2, r3, #2
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2225      	movs	r2, #37	; 0x25
 8005b08:	2102      	movs	r1, #2
 8005b0a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4934      	ldr	r1, [pc, #208]	; (8005be8 <HAL_DMA_Init+0x110>)
 8005b18:	400a      	ands	r2, r1
 8005b1a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6819      	ldr	r1, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	689a      	ldr	r2, [r3, #8]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	431a      	orrs	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	431a      	orrs	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	431a      	orrs	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	431a      	orrs	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	69db      	ldr	r3, [r3, #28]
 8005b42:	431a      	orrs	r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a1b      	ldr	r3, [r3, #32]
 8005b48:	431a      	orrs	r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	0018      	movs	r0, r3
 8005b56:	f000 fa37 	bl	8005fc8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	689a      	ldr	r2, [r3, #8]
 8005b5e:	2380      	movs	r3, #128	; 0x80
 8005b60:	01db      	lsls	r3, r3, #7
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d102      	bne.n	8005b6c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685a      	ldr	r2, [r3, #4]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b74:	213f      	movs	r1, #63	; 0x3f
 8005b76:	400a      	ands	r2, r1
 8005b78:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005b82:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d011      	beq.n	8005bb0 <HAL_DMA_Init+0xd8>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	2b04      	cmp	r3, #4
 8005b92:	d80d      	bhi.n	8005bb0 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	0018      	movs	r0, r3
 8005b98:	f000 fa42 	bl	8006020 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005bac:	605a      	str	r2, [r3, #4]
 8005bae:	e008      	b.n	8005bc2 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2225      	movs	r2, #37	; 0x25
 8005bcc:	2101      	movs	r1, #1
 8005bce:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2224      	movs	r2, #36	; 0x24
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	0018      	movs	r0, r3
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	b002      	add	sp, #8
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	46c0      	nop			; (mov r8, r8)
 8005be4:	bffdfff8 	.word	0xbffdfff8
 8005be8:	ffff800f 	.word	0xffff800f

08005bec <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]
 8005bf8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bfa:	2317      	movs	r3, #23
 8005bfc:	18fb      	adds	r3, r7, r3
 8005bfe:	2200      	movs	r2, #0
 8005c00:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2224      	movs	r2, #36	; 0x24
 8005c06:	5c9b      	ldrb	r3, [r3, r2]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d101      	bne.n	8005c10 <HAL_DMA_Start_IT+0x24>
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	e06f      	b.n	8005cf0 <HAL_DMA_Start_IT+0x104>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2224      	movs	r2, #36	; 0x24
 8005c14:	2101      	movs	r1, #1
 8005c16:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2225      	movs	r2, #37	; 0x25
 8005c1c:	5c9b      	ldrb	r3, [r3, r2]
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d157      	bne.n	8005cd4 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2225      	movs	r2, #37	; 0x25
 8005c28:	2102      	movs	r1, #2
 8005c2a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2101      	movs	r1, #1
 8005c3e:	438a      	bics	r2, r1
 8005c40:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	68b9      	ldr	r1, [r7, #8]
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f000 f97d 	bl	8005f48 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d008      	beq.n	8005c68 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	210e      	movs	r1, #14
 8005c62:	430a      	orrs	r2, r1
 8005c64:	601a      	str	r2, [r3, #0]
 8005c66:	e00f      	b.n	8005c88 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2104      	movs	r1, #4
 8005c74:	438a      	bics	r2, r1
 8005c76:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	210a      	movs	r1, #10
 8005c84:	430a      	orrs	r2, r1
 8005c86:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	2380      	movs	r3, #128	; 0x80
 8005c90:	025b      	lsls	r3, r3, #9
 8005c92:	4013      	ands	r3, r2
 8005c94:	d008      	beq.n	8005ca8 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ca0:	2180      	movs	r1, #128	; 0x80
 8005ca2:	0049      	lsls	r1, r1, #1
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d008      	beq.n	8005cc2 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cba:	2180      	movs	r1, #128	; 0x80
 8005cbc:	0049      	lsls	r1, r1, #1
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2101      	movs	r1, #1
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	601a      	str	r2, [r3, #0]
 8005cd2:	e00a      	b.n	8005cea <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2280      	movs	r2, #128	; 0x80
 8005cd8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2224      	movs	r2, #36	; 0x24
 8005cde:	2100      	movs	r1, #0
 8005ce0:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8005ce2:	2317      	movs	r3, #23
 8005ce4:	18fb      	adds	r3, r7, r3
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8005cea:	2317      	movs	r3, #23
 8005cec:	18fb      	adds	r3, r7, r3
 8005cee:	781b      	ldrb	r3, [r3, #0]
}
 8005cf0:	0018      	movs	r0, r3
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	b006      	add	sp, #24
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d00:	210f      	movs	r1, #15
 8005d02:	187b      	adds	r3, r7, r1
 8005d04:	2200      	movs	r2, #0
 8005d06:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2225      	movs	r2, #37	; 0x25
 8005d0c:	5c9b      	ldrb	r3, [r3, r2]
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	d006      	beq.n	8005d22 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2204      	movs	r2, #4
 8005d18:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005d1a:	187b      	adds	r3, r7, r1
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	701a      	strb	r2, [r3, #0]
 8005d20:	e049      	b.n	8005db6 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	210e      	movs	r1, #14
 8005d2e:	438a      	bics	r2, r1
 8005d30:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2101      	movs	r1, #1
 8005d3e:	438a      	bics	r2, r1
 8005d40:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d4c:	491d      	ldr	r1, [pc, #116]	; (8005dc4 <HAL_DMA_Abort_IT+0xcc>)
 8005d4e:	400a      	ands	r2, r1
 8005d50:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8005d52:	4b1d      	ldr	r3, [pc, #116]	; (8005dc8 <HAL_DMA_Abort_IT+0xd0>)
 8005d54:	6859      	ldr	r1, [r3, #4]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5a:	221c      	movs	r2, #28
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	2201      	movs	r2, #1
 8005d60:	409a      	lsls	r2, r3
 8005d62:	4b19      	ldr	r3, [pc, #100]	; (8005dc8 <HAL_DMA_Abort_IT+0xd0>)
 8005d64:	430a      	orrs	r2, r1
 8005d66:	605a      	str	r2, [r3, #4]
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005d70:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00c      	beq.n	8005d94 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d84:	490f      	ldr	r1, [pc, #60]	; (8005dc4 <HAL_DMA_Abort_IT+0xcc>)
 8005d86:	400a      	ands	r2, r1
 8005d88:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005d92:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2225      	movs	r2, #37	; 0x25
 8005d98:	2101      	movs	r1, #1
 8005d9a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2224      	movs	r2, #36	; 0x24
 8005da0:	2100      	movs	r1, #0
 8005da2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d004      	beq.n	8005db6 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	0010      	movs	r0, r2
 8005db4:	4798      	blx	r3
    }
  }
  return status;
 8005db6:	230f      	movs	r3, #15
 8005db8:	18fb      	adds	r3, r7, r3
 8005dba:	781b      	ldrb	r3, [r3, #0]
}
 8005dbc:	0018      	movs	r0, r3
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	b004      	add	sp, #16
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	fffffeff 	.word	0xfffffeff
 8005dc8:	40020000 	.word	0x40020000

08005dcc <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8005dd4:	4b55      	ldr	r3, [pc, #340]	; (8005f2c <HAL_DMA_IRQHandler+0x160>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t source_it = hdma->Instance->CCR;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de6:	221c      	movs	r2, #28
 8005de8:	4013      	ands	r3, r2
 8005dea:	2204      	movs	r2, #4
 8005dec:	409a      	lsls	r2, r3
 8005dee:	0013      	movs	r3, r2
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	4013      	ands	r3, r2
 8005df4:	d027      	beq.n	8005e46 <HAL_DMA_IRQHandler+0x7a>
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	2204      	movs	r2, #4
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	d023      	beq.n	8005e46 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2220      	movs	r2, #32
 8005e06:	4013      	ands	r3, r2
 8005e08:	d107      	bne.n	8005e1a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2104      	movs	r1, #4
 8005e16:	438a      	bics	r2, r1
 8005e18:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8005e1a:	4b44      	ldr	r3, [pc, #272]	; (8005f2c <HAL_DMA_IRQHandler+0x160>)
 8005e1c:	6859      	ldr	r1, [r3, #4]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e22:	221c      	movs	r2, #28
 8005e24:	4013      	ands	r3, r2
 8005e26:	2204      	movs	r2, #4
 8005e28:	409a      	lsls	r2, r3
 8005e2a:	4b40      	ldr	r3, [pc, #256]	; (8005f2c <HAL_DMA_IRQHandler+0x160>)
 8005e2c:	430a      	orrs	r2, r1
 8005e2e:	605a      	str	r2, [r3, #4]
#endif

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d100      	bne.n	8005e3a <HAL_DMA_IRQHandler+0x6e>
 8005e38:	e073      	b.n	8005f22 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	0010      	movs	r0, r2
 8005e42:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8005e44:	e06d      	b.n	8005f22 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4a:	221c      	movs	r2, #28
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	2202      	movs	r2, #2
 8005e50:	409a      	lsls	r2, r3
 8005e52:	0013      	movs	r3, r2
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	4013      	ands	r3, r2
 8005e58:	d02e      	beq.n	8005eb8 <HAL_DMA_IRQHandler+0xec>
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	2202      	movs	r2, #2
 8005e5e:	4013      	ands	r3, r2
 8005e60:	d02a      	beq.n	8005eb8 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2220      	movs	r2, #32
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	d10b      	bne.n	8005e86 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	210a      	movs	r1, #10
 8005e7a:	438a      	bics	r2, r1
 8005e7c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2225      	movs	r2, #37	; 0x25
 8005e82:	2101      	movs	r1, #1
 8005e84:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8005e86:	4b29      	ldr	r3, [pc, #164]	; (8005f2c <HAL_DMA_IRQHandler+0x160>)
 8005e88:	6859      	ldr	r1, [r3, #4]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8e:	221c      	movs	r2, #28
 8005e90:	4013      	ands	r3, r2
 8005e92:	2202      	movs	r2, #2
 8005e94:	409a      	lsls	r2, r3
 8005e96:	4b25      	ldr	r3, [pc, #148]	; (8005f2c <HAL_DMA_IRQHandler+0x160>)
 8005e98:	430a      	orrs	r2, r1
 8005e9a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2224      	movs	r2, #36	; 0x24
 8005ea0:	2100      	movs	r1, #0
 8005ea2:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d03a      	beq.n	8005f22 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	0010      	movs	r0, r2
 8005eb4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8005eb6:	e034      	b.n	8005f22 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebc:	221c      	movs	r2, #28
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	2208      	movs	r2, #8
 8005ec2:	409a      	lsls	r2, r3
 8005ec4:	0013      	movs	r3, r2
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	4013      	ands	r3, r2
 8005eca:	d02b      	beq.n	8005f24 <HAL_DMA_IRQHandler+0x158>
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	2208      	movs	r2, #8
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	d027      	beq.n	8005f24 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	210e      	movs	r1, #14
 8005ee0:	438a      	bics	r2, r1
 8005ee2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8005ee4:	4b11      	ldr	r3, [pc, #68]	; (8005f2c <HAL_DMA_IRQHandler+0x160>)
 8005ee6:	6859      	ldr	r1, [r3, #4]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eec:	221c      	movs	r2, #28
 8005eee:	4013      	ands	r3, r2
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	409a      	lsls	r2, r3
 8005ef4:	4b0d      	ldr	r3, [pc, #52]	; (8005f2c <HAL_DMA_IRQHandler+0x160>)
 8005ef6:	430a      	orrs	r2, r1
 8005ef8:	605a      	str	r2, [r3, #4]
#endif

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2201      	movs	r2, #1
 8005efe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2225      	movs	r2, #37	; 0x25
 8005f04:	2101      	movs	r1, #1
 8005f06:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2224      	movs	r2, #36	; 0x24
 8005f0c:	2100      	movs	r1, #0
 8005f0e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d005      	beq.n	8005f24 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	0010      	movs	r0, r2
 8005f20:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005f22:	46c0      	nop			; (mov r8, r8)
 8005f24:	46c0      	nop			; (mov r8, r8)
}
 8005f26:	46bd      	mov	sp, r7
 8005f28:	b004      	add	sp, #16
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	40020000 	.word	0x40020000

08005f30 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2225      	movs	r2, #37	; 0x25
 8005f3c:	5c9b      	ldrb	r3, [r3, r2]
 8005f3e:	b2db      	uxtb	r3, r3
}
 8005f40:	0018      	movs	r0, r3
 8005f42:	46bd      	mov	sp, r7
 8005f44:	b002      	add	sp, #8
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	607a      	str	r2, [r7, #4]
 8005f54:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005f5e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d004      	beq.n	8005f72 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005f70:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8005f72:	4b14      	ldr	r3, [pc, #80]	; (8005fc4 <DMA_SetConfig+0x7c>)
 8005f74:	6859      	ldr	r1, [r3, #4]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7a:	221c      	movs	r2, #28
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	2201      	movs	r2, #1
 8005f80:	409a      	lsls	r2, r3
 8005f82:	4b10      	ldr	r3, [pc, #64]	; (8005fc4 <DMA_SetConfig+0x7c>)
 8005f84:	430a      	orrs	r2, r1
 8005f86:	605a      	str	r2, [r3, #4]
#endif

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	683a      	ldr	r2, [r7, #0]
 8005f8e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	2b10      	cmp	r3, #16
 8005f96:	d108      	bne.n	8005faa <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68ba      	ldr	r2, [r7, #8]
 8005fa6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005fa8:	e007      	b.n	8005fba <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	60da      	str	r2, [r3, #12]
}
 8005fba:	46c0      	nop			; (mov r8, r8)
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	b004      	add	sp, #16
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	46c0      	nop			; (mov r8, r8)
 8005fc4:	40020000 	.word	0x40020000

08005fc8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd4:	089b      	lsrs	r3, r3, #2
 8005fd6:	4a10      	ldr	r2, [pc, #64]	; (8006018 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8005fd8:	4694      	mov	ip, r2
 8005fda:	4463      	add	r3, ip
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	001a      	movs	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	001a      	movs	r2, r3
 8005fea:	23ff      	movs	r3, #255	; 0xff
 8005fec:	4013      	ands	r3, r2
 8005fee:	3b08      	subs	r3, #8
 8005ff0:	2114      	movs	r1, #20
 8005ff2:	0018      	movs	r0, r3
 8005ff4:	f7fa f886 	bl	8000104 <__udivsi3>
 8005ff8:	0003      	movs	r3, r0
 8005ffa:	60fb      	str	r3, [r7, #12]
#endif

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a07      	ldr	r2, [pc, #28]	; (800601c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8006000:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	221f      	movs	r2, #31
 8006006:	4013      	ands	r3, r2
 8006008:	2201      	movs	r2, #1
 800600a:	409a      	lsls	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8006010:	46c0      	nop			; (mov r8, r8)
 8006012:	46bd      	mov	sp, r7
 8006014:	b004      	add	sp, #16
 8006016:	bd80      	pop	{r7, pc}
 8006018:	10008200 	.word	0x10008200
 800601c:	40020880 	.word	0x40020880

08006020 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	223f      	movs	r2, #63	; 0x3f
 800602e:	4013      	ands	r3, r2
 8006030:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	4a0a      	ldr	r2, [pc, #40]	; (8006060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006036:	4694      	mov	ip, r2
 8006038:	4463      	add	r3, ip
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	001a      	movs	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a07      	ldr	r2, [pc, #28]	; (8006064 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006046:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	3b01      	subs	r3, #1
 800604c:	2203      	movs	r2, #3
 800604e:	4013      	ands	r3, r2
 8006050:	2201      	movs	r2, #1
 8006052:	409a      	lsls	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	659a      	str	r2, [r3, #88]	; 0x58
}
 8006058:	46c0      	nop			; (mov r8, r8)
 800605a:	46bd      	mov	sp, r7
 800605c:	b004      	add	sp, #16
 800605e:	bd80      	pop	{r7, pc}
 8006060:	1000823f 	.word	0x1000823f
 8006064:	40020940 	.word	0x40020940

08006068 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b086      	sub	sp, #24
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006072:	2300      	movs	r3, #0
 8006074:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006076:	e147      	b.n	8006308 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2101      	movs	r1, #1
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	4091      	lsls	r1, r2
 8006082:	000a      	movs	r2, r1
 8006084:	4013      	ands	r3, r2
 8006086:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d100      	bne.n	8006090 <HAL_GPIO_Init+0x28>
 800608e:	e138      	b.n	8006302 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	2b01      	cmp	r3, #1
 8006096:	d00b      	beq.n	80060b0 <HAL_GPIO_Init+0x48>
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	2b02      	cmp	r3, #2
 800609e:	d007      	beq.n	80060b0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80060a4:	2b11      	cmp	r3, #17
 80060a6:	d003      	beq.n	80060b0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	2b12      	cmp	r3, #18
 80060ae:	d130      	bne.n	8006112 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	005b      	lsls	r3, r3, #1
 80060ba:	2203      	movs	r2, #3
 80060bc:	409a      	lsls	r2, r3
 80060be:	0013      	movs	r3, r2
 80060c0:	43da      	mvns	r2, r3
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	4013      	ands	r3, r2
 80060c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	68da      	ldr	r2, [r3, #12]
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	005b      	lsls	r3, r3, #1
 80060d0:	409a      	lsls	r2, r3
 80060d2:	0013      	movs	r3, r2
 80060d4:	693a      	ldr	r2, [r7, #16]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	693a      	ldr	r2, [r7, #16]
 80060de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80060e6:	2201      	movs	r2, #1
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	409a      	lsls	r2, r3
 80060ec:	0013      	movs	r3, r2
 80060ee:	43da      	mvns	r2, r3
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	4013      	ands	r3, r2
 80060f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	091b      	lsrs	r3, r3, #4
 80060fc:	2201      	movs	r2, #1
 80060fe:	401a      	ands	r2, r3
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	409a      	lsls	r2, r3
 8006104:	0013      	movs	r3, r2
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	4313      	orrs	r3, r2
 800610a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	693a      	ldr	r2, [r7, #16]
 8006110:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	005b      	lsls	r3, r3, #1
 800611c:	2203      	movs	r2, #3
 800611e:	409a      	lsls	r2, r3
 8006120:	0013      	movs	r3, r2
 8006122:	43da      	mvns	r2, r3
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	4013      	ands	r3, r2
 8006128:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	689a      	ldr	r2, [r3, #8]
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	005b      	lsls	r3, r3, #1
 8006132:	409a      	lsls	r2, r3
 8006134:	0013      	movs	r3, r2
 8006136:	693a      	ldr	r2, [r7, #16]
 8006138:	4313      	orrs	r3, r2
 800613a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	2b02      	cmp	r3, #2
 8006148:	d003      	beq.n	8006152 <HAL_GPIO_Init+0xea>
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	2b12      	cmp	r3, #18
 8006150:	d123      	bne.n	800619a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	08da      	lsrs	r2, r3, #3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	3208      	adds	r2, #8
 800615a:	0092      	lsls	r2, r2, #2
 800615c:	58d3      	ldr	r3, [r2, r3]
 800615e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	2207      	movs	r2, #7
 8006164:	4013      	ands	r3, r2
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	220f      	movs	r2, #15
 800616a:	409a      	lsls	r2, r3
 800616c:	0013      	movs	r3, r2
 800616e:	43da      	mvns	r2, r3
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	4013      	ands	r3, r2
 8006174:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	691a      	ldr	r2, [r3, #16]
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	2107      	movs	r1, #7
 800617e:	400b      	ands	r3, r1
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	409a      	lsls	r2, r3
 8006184:	0013      	movs	r3, r2
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	4313      	orrs	r3, r2
 800618a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	08da      	lsrs	r2, r3, #3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	3208      	adds	r2, #8
 8006194:	0092      	lsls	r2, r2, #2
 8006196:	6939      	ldr	r1, [r7, #16]
 8006198:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	005b      	lsls	r3, r3, #1
 80061a4:	2203      	movs	r2, #3
 80061a6:	409a      	lsls	r2, r3
 80061a8:	0013      	movs	r3, r2
 80061aa:	43da      	mvns	r2, r3
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	4013      	ands	r3, r2
 80061b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	2203      	movs	r2, #3
 80061b8:	401a      	ands	r2, r3
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	005b      	lsls	r3, r3, #1
 80061be:	409a      	lsls	r2, r3
 80061c0:	0013      	movs	r3, r2
 80061c2:	693a      	ldr	r2, [r7, #16]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	693a      	ldr	r2, [r7, #16]
 80061cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	685a      	ldr	r2, [r3, #4]
 80061d2:	2380      	movs	r3, #128	; 0x80
 80061d4:	055b      	lsls	r3, r3, #21
 80061d6:	4013      	ands	r3, r2
 80061d8:	d100      	bne.n	80061dc <HAL_GPIO_Init+0x174>
 80061da:	e092      	b.n	8006302 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80061dc:	4a50      	ldr	r2, [pc, #320]	; (8006320 <HAL_GPIO_Init+0x2b8>)
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	089b      	lsrs	r3, r3, #2
 80061e2:	3318      	adds	r3, #24
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	589b      	ldr	r3, [r3, r2]
 80061e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	2203      	movs	r2, #3
 80061ee:	4013      	ands	r3, r2
 80061f0:	00db      	lsls	r3, r3, #3
 80061f2:	220f      	movs	r2, #15
 80061f4:	409a      	lsls	r2, r3
 80061f6:	0013      	movs	r3, r2
 80061f8:	43da      	mvns	r2, r3
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	4013      	ands	r3, r2
 80061fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	23a0      	movs	r3, #160	; 0xa0
 8006204:	05db      	lsls	r3, r3, #23
 8006206:	429a      	cmp	r2, r3
 8006208:	d013      	beq.n	8006232 <HAL_GPIO_Init+0x1ca>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a45      	ldr	r2, [pc, #276]	; (8006324 <HAL_GPIO_Init+0x2bc>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d00d      	beq.n	800622e <HAL_GPIO_Init+0x1c6>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a44      	ldr	r2, [pc, #272]	; (8006328 <HAL_GPIO_Init+0x2c0>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d007      	beq.n	800622a <HAL_GPIO_Init+0x1c2>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a43      	ldr	r2, [pc, #268]	; (800632c <HAL_GPIO_Init+0x2c4>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d101      	bne.n	8006226 <HAL_GPIO_Init+0x1be>
 8006222:	2303      	movs	r3, #3
 8006224:	e006      	b.n	8006234 <HAL_GPIO_Init+0x1cc>
 8006226:	2305      	movs	r3, #5
 8006228:	e004      	b.n	8006234 <HAL_GPIO_Init+0x1cc>
 800622a:	2302      	movs	r3, #2
 800622c:	e002      	b.n	8006234 <HAL_GPIO_Init+0x1cc>
 800622e:	2301      	movs	r3, #1
 8006230:	e000      	b.n	8006234 <HAL_GPIO_Init+0x1cc>
 8006232:	2300      	movs	r3, #0
 8006234:	697a      	ldr	r2, [r7, #20]
 8006236:	2103      	movs	r1, #3
 8006238:	400a      	ands	r2, r1
 800623a:	00d2      	lsls	r2, r2, #3
 800623c:	4093      	lsls	r3, r2
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	4313      	orrs	r3, r2
 8006242:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8006244:	4936      	ldr	r1, [pc, #216]	; (8006320 <HAL_GPIO_Init+0x2b8>)
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	089b      	lsrs	r3, r3, #2
 800624a:	3318      	adds	r3, #24
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	693a      	ldr	r2, [r7, #16]
 8006250:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006252:	4a33      	ldr	r2, [pc, #204]	; (8006320 <HAL_GPIO_Init+0x2b8>)
 8006254:	2380      	movs	r3, #128	; 0x80
 8006256:	58d3      	ldr	r3, [r2, r3]
 8006258:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	43da      	mvns	r2, r3
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	4013      	ands	r3, r2
 8006262:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	685a      	ldr	r2, [r3, #4]
 8006268:	2380      	movs	r3, #128	; 0x80
 800626a:	025b      	lsls	r3, r3, #9
 800626c:	4013      	ands	r3, r2
 800626e:	d003      	beq.n	8006278 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	4313      	orrs	r3, r2
 8006276:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006278:	4929      	ldr	r1, [pc, #164]	; (8006320 <HAL_GPIO_Init+0x2b8>)
 800627a:	2280      	movs	r2, #128	; 0x80
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8006280:	4a27      	ldr	r2, [pc, #156]	; (8006320 <HAL_GPIO_Init+0x2b8>)
 8006282:	2384      	movs	r3, #132	; 0x84
 8006284:	58d3      	ldr	r3, [r2, r3]
 8006286:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	43da      	mvns	r2, r3
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	4013      	ands	r3, r2
 8006290:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	685a      	ldr	r2, [r3, #4]
 8006296:	2380      	movs	r3, #128	; 0x80
 8006298:	029b      	lsls	r3, r3, #10
 800629a:	4013      	ands	r3, r2
 800629c:	d003      	beq.n	80062a6 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 800629e:	693a      	ldr	r2, [r7, #16]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80062a6:	491e      	ldr	r1, [pc, #120]	; (8006320 <HAL_GPIO_Init+0x2b8>)
 80062a8:	2284      	movs	r2, #132	; 0x84
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80062ae:	4b1c      	ldr	r3, [pc, #112]	; (8006320 <HAL_GPIO_Init+0x2b8>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	43da      	mvns	r2, r3
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	4013      	ands	r3, r2
 80062bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	685a      	ldr	r2, [r3, #4]
 80062c2:	2380      	movs	r3, #128	; 0x80
 80062c4:	035b      	lsls	r3, r3, #13
 80062c6:	4013      	ands	r3, r2
 80062c8:	d003      	beq.n	80062d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80062ca:	693a      	ldr	r2, [r7, #16]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80062d2:	4b13      	ldr	r3, [pc, #76]	; (8006320 <HAL_GPIO_Init+0x2b8>)
 80062d4:	693a      	ldr	r2, [r7, #16]
 80062d6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80062d8:	4b11      	ldr	r3, [pc, #68]	; (8006320 <HAL_GPIO_Init+0x2b8>)
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	43da      	mvns	r2, r3
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	4013      	ands	r3, r2
 80062e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	685a      	ldr	r2, [r3, #4]
 80062ec:	2380      	movs	r3, #128	; 0x80
 80062ee:	039b      	lsls	r3, r3, #14
 80062f0:	4013      	ands	r3, r2
 80062f2:	d003      	beq.n	80062fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80062f4:	693a      	ldr	r2, [r7, #16]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80062fc:	4b08      	ldr	r3, [pc, #32]	; (8006320 <HAL_GPIO_Init+0x2b8>)
 80062fe:	693a      	ldr	r2, [r7, #16]
 8006300:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	3301      	adds	r3, #1
 8006306:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	40da      	lsrs	r2, r3
 8006310:	1e13      	subs	r3, r2, #0
 8006312:	d000      	beq.n	8006316 <HAL_GPIO_Init+0x2ae>
 8006314:	e6b0      	b.n	8006078 <HAL_GPIO_Init+0x10>
  }
}
 8006316:	46c0      	nop			; (mov r8, r8)
 8006318:	46c0      	nop			; (mov r8, r8)
 800631a:	46bd      	mov	sp, r7
 800631c:	b006      	add	sp, #24
 800631e:	bd80      	pop	{r7, pc}
 8006320:	40021800 	.word	0x40021800
 8006324:	50000400 	.word	0x50000400
 8006328:	50000800 	.word	0x50000800
 800632c:	50000c00 	.word	0x50000c00

08006330 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e082      	b.n	8006448 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2241      	movs	r2, #65	; 0x41
 8006346:	5c9b      	ldrb	r3, [r3, r2]
 8006348:	b2db      	uxtb	r3, r3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d107      	bne.n	800635e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2240      	movs	r2, #64	; 0x40
 8006352:	2100      	movs	r1, #0
 8006354:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	0018      	movs	r0, r3
 800635a:	f7fe fba1 	bl	8004aa0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2241      	movs	r2, #65	; 0x41
 8006362:	2124      	movs	r1, #36	; 0x24
 8006364:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2101      	movs	r1, #1
 8006372:	438a      	bics	r2, r1
 8006374:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	685a      	ldr	r2, [r3, #4]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4934      	ldr	r1, [pc, #208]	; (8006450 <HAL_I2C_Init+0x120>)
 8006380:	400a      	ands	r2, r1
 8006382:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	689a      	ldr	r2, [r3, #8]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4931      	ldr	r1, [pc, #196]	; (8006454 <HAL_I2C_Init+0x124>)
 8006390:	400a      	ands	r2, r1
 8006392:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	2b01      	cmp	r3, #1
 800639a:	d108      	bne.n	80063ae <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	689a      	ldr	r2, [r3, #8]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2180      	movs	r1, #128	; 0x80
 80063a6:	0209      	lsls	r1, r1, #8
 80063a8:	430a      	orrs	r2, r1
 80063aa:	609a      	str	r2, [r3, #8]
 80063ac:	e007      	b.n	80063be <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	689a      	ldr	r2, [r3, #8]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2184      	movs	r1, #132	; 0x84
 80063b8:	0209      	lsls	r1, r1, #8
 80063ba:	430a      	orrs	r2, r1
 80063bc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d104      	bne.n	80063d0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2280      	movs	r2, #128	; 0x80
 80063cc:	0112      	lsls	r2, r2, #4
 80063ce:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	685a      	ldr	r2, [r3, #4]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	491f      	ldr	r1, [pc, #124]	; (8006458 <HAL_I2C_Init+0x128>)
 80063dc:	430a      	orrs	r2, r1
 80063de:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68da      	ldr	r2, [r3, #12]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	491a      	ldr	r1, [pc, #104]	; (8006454 <HAL_I2C_Init+0x124>)
 80063ec:	400a      	ands	r2, r1
 80063ee:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	691a      	ldr	r2, [r3, #16]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	695b      	ldr	r3, [r3, #20]
 80063f8:	431a      	orrs	r2, r3
 80063fa:	0011      	movs	r1, r2
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	699b      	ldr	r3, [r3, #24]
 8006400:	021a      	lsls	r2, r3, #8
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	430a      	orrs	r2, r1
 8006408:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	69d9      	ldr	r1, [r3, #28]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a1a      	ldr	r2, [r3, #32]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	430a      	orrs	r2, r1
 8006418:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2101      	movs	r1, #1
 8006426:	430a      	orrs	r2, r1
 8006428:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2241      	movs	r2, #65	; 0x41
 8006434:	2120      	movs	r1, #32
 8006436:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2242      	movs	r2, #66	; 0x42
 8006442:	2100      	movs	r1, #0
 8006444:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	0018      	movs	r0, r3
 800644a:	46bd      	mov	sp, r7
 800644c:	b002      	add	sp, #8
 800644e:	bd80      	pop	{r7, pc}
 8006450:	f0ffffff 	.word	0xf0ffffff
 8006454:	ffff7fff 	.word	0xffff7fff
 8006458:	02008000 	.word	0x02008000

0800645c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800645c:	b590      	push	{r4, r7, lr}
 800645e:	b089      	sub	sp, #36	; 0x24
 8006460:	af02      	add	r7, sp, #8
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	0008      	movs	r0, r1
 8006466:	607a      	str	r2, [r7, #4]
 8006468:	0019      	movs	r1, r3
 800646a:	230a      	movs	r3, #10
 800646c:	18fb      	adds	r3, r7, r3
 800646e:	1c02      	adds	r2, r0, #0
 8006470:	801a      	strh	r2, [r3, #0]
 8006472:	2308      	movs	r3, #8
 8006474:	18fb      	adds	r3, r7, r3
 8006476:	1c0a      	adds	r2, r1, #0
 8006478:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2241      	movs	r2, #65	; 0x41
 800647e:	5c9b      	ldrb	r3, [r3, r2]
 8006480:	b2db      	uxtb	r3, r3
 8006482:	2b20      	cmp	r3, #32
 8006484:	d000      	beq.n	8006488 <HAL_I2C_Master_Transmit+0x2c>
 8006486:	e0e7      	b.n	8006658 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2240      	movs	r2, #64	; 0x40
 800648c:	5c9b      	ldrb	r3, [r3, r2]
 800648e:	2b01      	cmp	r3, #1
 8006490:	d101      	bne.n	8006496 <HAL_I2C_Master_Transmit+0x3a>
 8006492:	2302      	movs	r3, #2
 8006494:	e0e1      	b.n	800665a <HAL_I2C_Master_Transmit+0x1fe>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2240      	movs	r2, #64	; 0x40
 800649a:	2101      	movs	r1, #1
 800649c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800649e:	f7fe ff99 	bl	80053d4 <HAL_GetTick>
 80064a2:	0003      	movs	r3, r0
 80064a4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80064a6:	2380      	movs	r3, #128	; 0x80
 80064a8:	0219      	lsls	r1, r3, #8
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	2319      	movs	r3, #25
 80064b2:	2201      	movs	r2, #1
 80064b4:	f000 fe76 	bl	80071a4 <I2C_WaitOnFlagUntilTimeout>
 80064b8:	1e03      	subs	r3, r0, #0
 80064ba:	d001      	beq.n	80064c0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	e0cc      	b.n	800665a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2241      	movs	r2, #65	; 0x41
 80064c4:	2121      	movs	r1, #33	; 0x21
 80064c6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2242      	movs	r2, #66	; 0x42
 80064cc:	2110      	movs	r1, #16
 80064ce:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2208      	movs	r2, #8
 80064e0:	18ba      	adds	r2, r7, r2
 80064e2:	8812      	ldrh	r2, [r2, #0]
 80064e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	2bff      	cmp	r3, #255	; 0xff
 80064f4:	d911      	bls.n	800651a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	22ff      	movs	r2, #255	; 0xff
 80064fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006500:	b2da      	uxtb	r2, r3
 8006502:	2380      	movs	r3, #128	; 0x80
 8006504:	045c      	lsls	r4, r3, #17
 8006506:	230a      	movs	r3, #10
 8006508:	18fb      	adds	r3, r7, r3
 800650a:	8819      	ldrh	r1, [r3, #0]
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	4b55      	ldr	r3, [pc, #340]	; (8006664 <HAL_I2C_Master_Transmit+0x208>)
 8006510:	9300      	str	r3, [sp, #0]
 8006512:	0023      	movs	r3, r4
 8006514:	f000 ff66 	bl	80073e4 <I2C_TransferConfig>
 8006518:	e075      	b.n	8006606 <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800651e:	b29a      	uxth	r2, r3
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006528:	b2da      	uxtb	r2, r3
 800652a:	2380      	movs	r3, #128	; 0x80
 800652c:	049c      	lsls	r4, r3, #18
 800652e:	230a      	movs	r3, #10
 8006530:	18fb      	adds	r3, r7, r3
 8006532:	8819      	ldrh	r1, [r3, #0]
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	4b4b      	ldr	r3, [pc, #300]	; (8006664 <HAL_I2C_Master_Transmit+0x208>)
 8006538:	9300      	str	r3, [sp, #0]
 800653a:	0023      	movs	r3, r4
 800653c:	f000 ff52 	bl	80073e4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8006540:	e061      	b.n	8006606 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006542:	697a      	ldr	r2, [r7, #20]
 8006544:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	0018      	movs	r0, r3
 800654a:	f000 fe6a 	bl	8007222 <I2C_WaitOnTXISFlagUntilTimeout>
 800654e:	1e03      	subs	r3, r0, #0
 8006550:	d001      	beq.n	8006556 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e081      	b.n	800665a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655a:	781a      	ldrb	r2, [r3, #0]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006566:	1c5a      	adds	r2, r3, #1
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006570:	b29b      	uxth	r3, r3
 8006572:	3b01      	subs	r3, #1
 8006574:	b29a      	uxth	r2, r3
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800657e:	3b01      	subs	r3, #1
 8006580:	b29a      	uxth	r2, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800658a:	b29b      	uxth	r3, r3
 800658c:	2b00      	cmp	r3, #0
 800658e:	d03a      	beq.n	8006606 <HAL_I2C_Master_Transmit+0x1aa>
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006594:	2b00      	cmp	r3, #0
 8006596:	d136      	bne.n	8006606 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006598:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	9300      	str	r3, [sp, #0]
 80065a0:	0013      	movs	r3, r2
 80065a2:	2200      	movs	r2, #0
 80065a4:	2180      	movs	r1, #128	; 0x80
 80065a6:	f000 fdfd 	bl	80071a4 <I2C_WaitOnFlagUntilTimeout>
 80065aa:	1e03      	subs	r3, r0, #0
 80065ac:	d001      	beq.n	80065b2 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e053      	b.n	800665a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	2bff      	cmp	r3, #255	; 0xff
 80065ba:	d911      	bls.n	80065e0 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	22ff      	movs	r2, #255	; 0xff
 80065c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065c6:	b2da      	uxtb	r2, r3
 80065c8:	2380      	movs	r3, #128	; 0x80
 80065ca:	045c      	lsls	r4, r3, #17
 80065cc:	230a      	movs	r3, #10
 80065ce:	18fb      	adds	r3, r7, r3
 80065d0:	8819      	ldrh	r1, [r3, #0]
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	2300      	movs	r3, #0
 80065d6:	9300      	str	r3, [sp, #0]
 80065d8:	0023      	movs	r3, r4
 80065da:	f000 ff03 	bl	80073e4 <I2C_TransferConfig>
 80065de:	e012      	b.n	8006606 <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065e4:	b29a      	uxth	r2, r3
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065ee:	b2da      	uxtb	r2, r3
 80065f0:	2380      	movs	r3, #128	; 0x80
 80065f2:	049c      	lsls	r4, r3, #18
 80065f4:	230a      	movs	r3, #10
 80065f6:	18fb      	adds	r3, r7, r3
 80065f8:	8819      	ldrh	r1, [r3, #0]
 80065fa:	68f8      	ldr	r0, [r7, #12]
 80065fc:	2300      	movs	r3, #0
 80065fe:	9300      	str	r3, [sp, #0]
 8006600:	0023      	movs	r3, r4
 8006602:	f000 feef 	bl	80073e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800660a:	b29b      	uxth	r3, r3
 800660c:	2b00      	cmp	r3, #0
 800660e:	d198      	bne.n	8006542 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	0018      	movs	r0, r3
 8006618:	f000 fe42 	bl	80072a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800661c:	1e03      	subs	r3, r0, #0
 800661e:	d001      	beq.n	8006624 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e01a      	b.n	800665a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2220      	movs	r2, #32
 800662a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	685a      	ldr	r2, [r3, #4]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	490c      	ldr	r1, [pc, #48]	; (8006668 <HAL_I2C_Master_Transmit+0x20c>)
 8006638:	400a      	ands	r2, r1
 800663a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2241      	movs	r2, #65	; 0x41
 8006640:	2120      	movs	r1, #32
 8006642:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2242      	movs	r2, #66	; 0x42
 8006648:	2100      	movs	r1, #0
 800664a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2240      	movs	r2, #64	; 0x40
 8006650:	2100      	movs	r1, #0
 8006652:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006654:	2300      	movs	r3, #0
 8006656:	e000      	b.n	800665a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8006658:	2302      	movs	r3, #2
  }
}
 800665a:	0018      	movs	r0, r3
 800665c:	46bd      	mov	sp, r7
 800665e:	b007      	add	sp, #28
 8006660:	bd90      	pop	{r4, r7, pc}
 8006662:	46c0      	nop			; (mov r8, r8)
 8006664:	80002000 	.word	0x80002000
 8006668:	fe00e800 	.word	0xfe00e800

0800666c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006688:	2b00      	cmp	r3, #0
 800668a:	d005      	beq.n	8006698 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	68f9      	ldr	r1, [r7, #12]
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	4798      	blx	r3
  }
}
 8006698:	46c0      	nop			; (mov r8, r8)
 800669a:	46bd      	mov	sp, r7
 800669c:	b004      	add	sp, #16
 800669e:	bd80      	pop	{r7, pc}

080066a0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b086      	sub	sp, #24
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	0a1b      	lsrs	r3, r3, #8
 80066bc:	001a      	movs	r2, r3
 80066be:	2301      	movs	r3, #1
 80066c0:	4013      	ands	r3, r2
 80066c2:	d010      	beq.n	80066e6 <HAL_I2C_ER_IRQHandler+0x46>
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	09db      	lsrs	r3, r3, #7
 80066c8:	001a      	movs	r2, r3
 80066ca:	2301      	movs	r3, #1
 80066cc:	4013      	ands	r3, r2
 80066ce:	d00a      	beq.n	80066e6 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d4:	2201      	movs	r2, #1
 80066d6:	431a      	orrs	r2, r3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2280      	movs	r2, #128	; 0x80
 80066e2:	0052      	lsls	r2, r2, #1
 80066e4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	0a9b      	lsrs	r3, r3, #10
 80066ea:	001a      	movs	r2, r3
 80066ec:	2301      	movs	r3, #1
 80066ee:	4013      	ands	r3, r2
 80066f0:	d010      	beq.n	8006714 <HAL_I2C_ER_IRQHandler+0x74>
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	09db      	lsrs	r3, r3, #7
 80066f6:	001a      	movs	r2, r3
 80066f8:	2301      	movs	r3, #1
 80066fa:	4013      	ands	r3, r2
 80066fc:	d00a      	beq.n	8006714 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006702:	2208      	movs	r2, #8
 8006704:	431a      	orrs	r2, r3
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2280      	movs	r2, #128	; 0x80
 8006710:	00d2      	lsls	r2, r2, #3
 8006712:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	0a5b      	lsrs	r3, r3, #9
 8006718:	001a      	movs	r2, r3
 800671a:	2301      	movs	r3, #1
 800671c:	4013      	ands	r3, r2
 800671e:	d010      	beq.n	8006742 <HAL_I2C_ER_IRQHandler+0xa2>
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	09db      	lsrs	r3, r3, #7
 8006724:	001a      	movs	r2, r3
 8006726:	2301      	movs	r3, #1
 8006728:	4013      	ands	r3, r2
 800672a:	d00a      	beq.n	8006742 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006730:	2202      	movs	r2, #2
 8006732:	431a      	orrs	r2, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2280      	movs	r2, #128	; 0x80
 800673e:	0092      	lsls	r2, r2, #2
 8006740:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006746:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	220b      	movs	r2, #11
 800674c:	4013      	ands	r3, r2
 800674e:	d005      	beq.n	800675c <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	0011      	movs	r1, r2
 8006756:	0018      	movs	r0, r3
 8006758:	f000 fbd8 	bl	8006f0c <I2C_ITError>
  }
}
 800675c:	46c0      	nop			; (mov r8, r8)
 800675e:	46bd      	mov	sp, r7
 8006760:	b006      	add	sp, #24
 8006762:	bd80      	pop	{r7, pc}

08006764 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800676c:	46c0      	nop			; (mov r8, r8)
 800676e:	46bd      	mov	sp, r7
 8006770:	b002      	add	sp, #8
 8006772:	bd80      	pop	{r7, pc}

08006774 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800677c:	46c0      	nop			; (mov r8, r8)
 800677e:	46bd      	mov	sp, r7
 8006780:	b002      	add	sp, #8
 8006782:	bd80      	pop	{r7, pc}

08006784 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	0008      	movs	r0, r1
 800678e:	0011      	movs	r1, r2
 8006790:	1cfb      	adds	r3, r7, #3
 8006792:	1c02      	adds	r2, r0, #0
 8006794:	701a      	strb	r2, [r3, #0]
 8006796:	003b      	movs	r3, r7
 8006798:	1c0a      	adds	r2, r1, #0
 800679a:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800679c:	46c0      	nop			; (mov r8, r8)
 800679e:	46bd      	mov	sp, r7
 80067a0:	b002      	add	sp, #8
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80067ac:	46c0      	nop			; (mov r8, r8)
 80067ae:	46bd      	mov	sp, r7
 80067b0:	b002      	add	sp, #8
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80067bc:	46c0      	nop			; (mov r8, r8)
 80067be:	46bd      	mov	sp, r7
 80067c0:	b002      	add	sp, #8
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b082      	sub	sp, #8
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80067cc:	46c0      	nop			; (mov r8, r8)
 80067ce:	46bd      	mov	sp, r7
 80067d0:	b002      	add	sp, #8
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b086      	sub	sp, #24
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2240      	movs	r2, #64	; 0x40
 80067ee:	5c9b      	ldrb	r3, [r3, r2]
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d101      	bne.n	80067f8 <I2C_Slave_ISR_IT+0x24>
 80067f4:	2302      	movs	r3, #2
 80067f6:	e0fa      	b.n	80069ee <I2C_Slave_ISR_IT+0x21a>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2240      	movs	r2, #64	; 0x40
 80067fc:	2101      	movs	r1, #1
 80067fe:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	095b      	lsrs	r3, r3, #5
 8006804:	001a      	movs	r2, r3
 8006806:	2301      	movs	r3, #1
 8006808:	4013      	ands	r3, r2
 800680a:	d00b      	beq.n	8006824 <I2C_Slave_ISR_IT+0x50>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	095b      	lsrs	r3, r3, #5
 8006810:	001a      	movs	r2, r3
 8006812:	2301      	movs	r3, #1
 8006814:	4013      	ands	r3, r2
 8006816:	d005      	beq.n	8006824 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	0011      	movs	r1, r2
 800681e:	0018      	movs	r0, r3
 8006820:	f000 f9f6 	bl	8006c10 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	091b      	lsrs	r3, r3, #4
 8006828:	001a      	movs	r2, r3
 800682a:	2301      	movs	r3, #1
 800682c:	4013      	ands	r3, r2
 800682e:	d054      	beq.n	80068da <I2C_Slave_ISR_IT+0x106>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	091b      	lsrs	r3, r3, #4
 8006834:	001a      	movs	r2, r3
 8006836:	2301      	movs	r3, #1
 8006838:	4013      	ands	r3, r2
 800683a:	d04e      	beq.n	80068da <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006840:	b29b      	uxth	r3, r3
 8006842:	2b00      	cmp	r3, #0
 8006844:	d12d      	bne.n	80068a2 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2241      	movs	r2, #65	; 0x41
 800684a:	5c9b      	ldrb	r3, [r3, r2]
 800684c:	b2db      	uxtb	r3, r3
 800684e:	2b28      	cmp	r3, #40	; 0x28
 8006850:	d10b      	bne.n	800686a <I2C_Slave_ISR_IT+0x96>
 8006852:	697a      	ldr	r2, [r7, #20]
 8006854:	2380      	movs	r3, #128	; 0x80
 8006856:	049b      	lsls	r3, r3, #18
 8006858:	429a      	cmp	r2, r3
 800685a:	d106      	bne.n	800686a <I2C_Slave_ISR_IT+0x96>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800685c:	693a      	ldr	r2, [r7, #16]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	0011      	movs	r1, r2
 8006862:	0018      	movs	r0, r3
 8006864:	f000 faf8 	bl	8006e58 <I2C_ITListenCplt>
 8006868:	e036      	b.n	80068d8 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2241      	movs	r2, #65	; 0x41
 800686e:	5c9b      	ldrb	r3, [r3, r2]
 8006870:	b2db      	uxtb	r3, r3
 8006872:	2b29      	cmp	r3, #41	; 0x29
 8006874:	d110      	bne.n	8006898 <I2C_Slave_ISR_IT+0xc4>
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	4a5f      	ldr	r2, [pc, #380]	; (80069f8 <I2C_Slave_ISR_IT+0x224>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d00c      	beq.n	8006898 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	2210      	movs	r2, #16
 8006884:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	0018      	movs	r0, r3
 800688a:	f000 fc4a 	bl	8007122 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	0018      	movs	r0, r3
 8006892:	f000 f957 	bl	8006b44 <I2C_ITSlaveSeqCplt>
 8006896:	e01f      	b.n	80068d8 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2210      	movs	r2, #16
 800689e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80068a0:	e09d      	b.n	80069de <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2210      	movs	r2, #16
 80068a8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ae:	2204      	movs	r2, #4
 80068b0:	431a      	orrs	r2, r3
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d005      	beq.n	80068c8 <I2C_Slave_ISR_IT+0xf4>
 80068bc:	697a      	ldr	r2, [r7, #20]
 80068be:	2380      	movs	r3, #128	; 0x80
 80068c0:	045b      	lsls	r3, r3, #17
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d000      	beq.n	80068c8 <I2C_Slave_ISR_IT+0xf4>
 80068c6:	e08a      	b.n	80069de <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	0011      	movs	r1, r2
 80068d0:	0018      	movs	r0, r3
 80068d2:	f000 fb1b 	bl	8006f0c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80068d6:	e082      	b.n	80069de <I2C_Slave_ISR_IT+0x20a>
 80068d8:	e081      	b.n	80069de <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	089b      	lsrs	r3, r3, #2
 80068de:	001a      	movs	r2, r3
 80068e0:	2301      	movs	r3, #1
 80068e2:	4013      	ands	r3, r2
 80068e4:	d031      	beq.n	800694a <I2C_Slave_ISR_IT+0x176>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	089b      	lsrs	r3, r3, #2
 80068ea:	001a      	movs	r2, r3
 80068ec:	2301      	movs	r3, #1
 80068ee:	4013      	ands	r3, r2
 80068f0:	d02b      	beq.n	800694a <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d018      	beq.n	800692e <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006906:	b2d2      	uxtb	r2, r2
 8006908:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690e:	1c5a      	adds	r2, r3, #1
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006918:	3b01      	subs	r3, #1
 800691a:	b29a      	uxth	r2, r3
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006924:	b29b      	uxth	r3, r3
 8006926:	3b01      	subs	r3, #1
 8006928:	b29a      	uxth	r2, r3
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006932:	b29b      	uxth	r3, r3
 8006934:	2b00      	cmp	r3, #0
 8006936:	d154      	bne.n	80069e2 <I2C_Slave_ISR_IT+0x20e>
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	4a2f      	ldr	r2, [pc, #188]	; (80069f8 <I2C_Slave_ISR_IT+0x224>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d050      	beq.n	80069e2 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	0018      	movs	r0, r3
 8006944:	f000 f8fe 	bl	8006b44 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006948:	e04b      	b.n	80069e2 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	08db      	lsrs	r3, r3, #3
 800694e:	001a      	movs	r2, r3
 8006950:	2301      	movs	r3, #1
 8006952:	4013      	ands	r3, r2
 8006954:	d00c      	beq.n	8006970 <I2C_Slave_ISR_IT+0x19c>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	08db      	lsrs	r3, r3, #3
 800695a:	001a      	movs	r2, r3
 800695c:	2301      	movs	r3, #1
 800695e:	4013      	ands	r3, r2
 8006960:	d006      	beq.n	8006970 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006962:	693a      	ldr	r2, [r7, #16]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	0011      	movs	r1, r2
 8006968:	0018      	movs	r0, r3
 800696a:	f000 f847 	bl	80069fc <I2C_ITAddrCplt>
 800696e:	e039      	b.n	80069e4 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	085b      	lsrs	r3, r3, #1
 8006974:	001a      	movs	r2, r3
 8006976:	2301      	movs	r3, #1
 8006978:	4013      	ands	r3, r2
 800697a:	d033      	beq.n	80069e4 <I2C_Slave_ISR_IT+0x210>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	085b      	lsrs	r3, r3, #1
 8006980:	001a      	movs	r2, r3
 8006982:	2301      	movs	r3, #1
 8006984:	4013      	ands	r3, r2
 8006986:	d02d      	beq.n	80069e4 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800698c:	b29b      	uxth	r3, r3
 800698e:	2b00      	cmp	r3, #0
 8006990:	d018      	beq.n	80069c4 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006996:	781a      	ldrb	r2, [r3, #0]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a2:	1c5a      	adds	r2, r3, #1
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	3b01      	subs	r3, #1
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069ba:	3b01      	subs	r3, #1
 80069bc:	b29a      	uxth	r2, r3
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	851a      	strh	r2, [r3, #40]	; 0x28
 80069c2:	e00f      	b.n	80069e4 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80069c4:	697a      	ldr	r2, [r7, #20]
 80069c6:	2380      	movs	r3, #128	; 0x80
 80069c8:	045b      	lsls	r3, r3, #17
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d002      	beq.n	80069d4 <I2C_Slave_ISR_IT+0x200>
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d107      	bne.n	80069e4 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	0018      	movs	r0, r3
 80069d8:	f000 f8b4 	bl	8006b44 <I2C_ITSlaveSeqCplt>
 80069dc:	e002      	b.n	80069e4 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 80069de:	46c0      	nop			; (mov r8, r8)
 80069e0:	e000      	b.n	80069e4 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 80069e2:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2240      	movs	r2, #64	; 0x40
 80069e8:	2100      	movs	r1, #0
 80069ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	0018      	movs	r0, r3
 80069f0:	46bd      	mov	sp, r7
 80069f2:	b006      	add	sp, #24
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	46c0      	nop			; (mov r8, r8)
 80069f8:	ffff0000 	.word	0xffff0000

080069fc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80069fc:	b5b0      	push	{r4, r5, r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2241      	movs	r2, #65	; 0x41
 8006a0a:	5c9b      	ldrb	r3, [r3, r2]
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	001a      	movs	r2, r3
 8006a10:	2328      	movs	r3, #40	; 0x28
 8006a12:	4013      	ands	r3, r2
 8006a14:	2b28      	cmp	r3, #40	; 0x28
 8006a16:	d000      	beq.n	8006a1a <I2C_ITAddrCplt+0x1e>
 8006a18:	e088      	b.n	8006b2c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	699b      	ldr	r3, [r3, #24]
 8006a20:	0c1b      	lsrs	r3, r3, #16
 8006a22:	b2da      	uxtb	r2, r3
 8006a24:	250f      	movs	r5, #15
 8006a26:	197b      	adds	r3, r7, r5
 8006a28:	2101      	movs	r1, #1
 8006a2a:	400a      	ands	r2, r1
 8006a2c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	699b      	ldr	r3, [r3, #24]
 8006a34:	0c1b      	lsrs	r3, r3, #16
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	200c      	movs	r0, #12
 8006a3a:	183b      	adds	r3, r7, r0
 8006a3c:	21fe      	movs	r1, #254	; 0xfe
 8006a3e:	400a      	ands	r2, r1
 8006a40:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	b29a      	uxth	r2, r3
 8006a4a:	240a      	movs	r4, #10
 8006a4c:	193b      	adds	r3, r7, r4
 8006a4e:	0592      	lsls	r2, r2, #22
 8006a50:	0d92      	lsrs	r2, r2, #22
 8006a52:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	b29a      	uxth	r2, r3
 8006a5c:	2308      	movs	r3, #8
 8006a5e:	18fb      	adds	r3, r7, r3
 8006a60:	21fe      	movs	r1, #254	; 0xfe
 8006a62:	400a      	ands	r2, r1
 8006a64:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	2b02      	cmp	r3, #2
 8006a6c:	d148      	bne.n	8006b00 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8006a6e:	0021      	movs	r1, r4
 8006a70:	187b      	adds	r3, r7, r1
 8006a72:	881b      	ldrh	r3, [r3, #0]
 8006a74:	09db      	lsrs	r3, r3, #7
 8006a76:	b29a      	uxth	r2, r3
 8006a78:	183b      	adds	r3, r7, r0
 8006a7a:	881b      	ldrh	r3, [r3, #0]
 8006a7c:	4053      	eors	r3, r2
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	001a      	movs	r2, r3
 8006a82:	2306      	movs	r3, #6
 8006a84:	4013      	ands	r3, r2
 8006a86:	d120      	bne.n	8006aca <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8006a88:	183b      	adds	r3, r7, r0
 8006a8a:	187a      	adds	r2, r7, r1
 8006a8c:	8812      	ldrh	r2, [r2, #0]
 8006a8e:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a94:	1c5a      	adds	r2, r3, #1
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	d14c      	bne.n	8006b3c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2208      	movs	r2, #8
 8006aae:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2240      	movs	r2, #64	; 0x40
 8006ab4:	2100      	movs	r1, #0
 8006ab6:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006ab8:	183b      	adds	r3, r7, r0
 8006aba:	881a      	ldrh	r2, [r3, #0]
 8006abc:	197b      	adds	r3, r7, r5
 8006abe:	7819      	ldrb	r1, [r3, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	0018      	movs	r0, r3
 8006ac4:	f7ff fe5e 	bl	8006784 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006ac8:	e038      	b.n	8006b3c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8006aca:	240c      	movs	r4, #12
 8006acc:	193b      	adds	r3, r7, r4
 8006ace:	2208      	movs	r2, #8
 8006ad0:	18ba      	adds	r2, r7, r2
 8006ad2:	8812      	ldrh	r2, [r2, #0]
 8006ad4:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006ad6:	2380      	movs	r3, #128	; 0x80
 8006ad8:	021a      	lsls	r2, r3, #8
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	0011      	movs	r1, r2
 8006ade:	0018      	movs	r0, r3
 8006ae0:	f000 fcb6 	bl	8007450 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2240      	movs	r2, #64	; 0x40
 8006ae8:	2100      	movs	r1, #0
 8006aea:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006aec:	193b      	adds	r3, r7, r4
 8006aee:	881a      	ldrh	r2, [r3, #0]
 8006af0:	230f      	movs	r3, #15
 8006af2:	18fb      	adds	r3, r7, r3
 8006af4:	7819      	ldrb	r1, [r3, #0]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	0018      	movs	r0, r3
 8006afa:	f7ff fe43 	bl	8006784 <HAL_I2C_AddrCallback>
}
 8006afe:	e01d      	b.n	8006b3c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006b00:	2380      	movs	r3, #128	; 0x80
 8006b02:	021a      	lsls	r2, r3, #8
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	0011      	movs	r1, r2
 8006b08:	0018      	movs	r0, r3
 8006b0a:	f000 fca1 	bl	8007450 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2240      	movs	r2, #64	; 0x40
 8006b12:	2100      	movs	r1, #0
 8006b14:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006b16:	230c      	movs	r3, #12
 8006b18:	18fb      	adds	r3, r7, r3
 8006b1a:	881a      	ldrh	r2, [r3, #0]
 8006b1c:	230f      	movs	r3, #15
 8006b1e:	18fb      	adds	r3, r7, r3
 8006b20:	7819      	ldrb	r1, [r3, #0]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	0018      	movs	r0, r3
 8006b26:	f7ff fe2d 	bl	8006784 <HAL_I2C_AddrCallback>
}
 8006b2a:	e007      	b.n	8006b3c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2208      	movs	r2, #8
 8006b32:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2240      	movs	r2, #64	; 0x40
 8006b38:	2100      	movs	r1, #0
 8006b3a:	5499      	strb	r1, [r3, r2]
}
 8006b3c:	46c0      	nop			; (mov r8, r8)
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	b004      	add	sp, #16
 8006b42:	bdb0      	pop	{r4, r5, r7, pc}

08006b44 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2242      	movs	r2, #66	; 0x42
 8006b58:	2100      	movs	r1, #0
 8006b5a:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	0b9b      	lsrs	r3, r3, #14
 8006b60:	001a      	movs	r2, r3
 8006b62:	2301      	movs	r3, #1
 8006b64:	4013      	ands	r3, r2
 8006b66:	d008      	beq.n	8006b7a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4925      	ldr	r1, [pc, #148]	; (8006c08 <I2C_ITSlaveSeqCplt+0xc4>)
 8006b74:	400a      	ands	r2, r1
 8006b76:	601a      	str	r2, [r3, #0]
 8006b78:	e00d      	b.n	8006b96 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	0bdb      	lsrs	r3, r3, #15
 8006b7e:	001a      	movs	r2, r3
 8006b80:	2301      	movs	r3, #1
 8006b82:	4013      	ands	r3, r2
 8006b84:	d007      	beq.n	8006b96 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	491e      	ldr	r1, [pc, #120]	; (8006c0c <I2C_ITSlaveSeqCplt+0xc8>)
 8006b92:	400a      	ands	r2, r1
 8006b94:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2241      	movs	r2, #65	; 0x41
 8006b9a:	5c9b      	ldrb	r3, [r3, r2]
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	2b29      	cmp	r3, #41	; 0x29
 8006ba0:	d114      	bne.n	8006bcc <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2241      	movs	r2, #65	; 0x41
 8006ba6:	2128      	movs	r1, #40	; 0x28
 8006ba8:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2221      	movs	r2, #33	; 0x21
 8006bae:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2101      	movs	r1, #1
 8006bb4:	0018      	movs	r0, r3
 8006bb6:	f000 fc4b 	bl	8007450 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2240      	movs	r2, #64	; 0x40
 8006bbe:	2100      	movs	r1, #0
 8006bc0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	0018      	movs	r0, r3
 8006bc6:	f7ff fdcd 	bl	8006764 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006bca:	e019      	b.n	8006c00 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2241      	movs	r2, #65	; 0x41
 8006bd0:	5c9b      	ldrb	r3, [r3, r2]
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	2b2a      	cmp	r3, #42	; 0x2a
 8006bd6:	d113      	bne.n	8006c00 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2241      	movs	r2, #65	; 0x41
 8006bdc:	2128      	movs	r1, #40	; 0x28
 8006bde:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2222      	movs	r2, #34	; 0x22
 8006be4:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2102      	movs	r1, #2
 8006bea:	0018      	movs	r0, r3
 8006bec:	f000 fc30 	bl	8007450 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2240      	movs	r2, #64	; 0x40
 8006bf4:	2100      	movs	r1, #0
 8006bf6:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	0018      	movs	r0, r3
 8006bfc:	f7ff fdba 	bl	8006774 <HAL_I2C_SlaveRxCpltCallback>
}
 8006c00:	46c0      	nop			; (mov r8, r8)
 8006c02:	46bd      	mov	sp, r7
 8006c04:	b004      	add	sp, #16
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	ffffbfff 	.word	0xffffbfff
 8006c0c:	ffff7fff 	.word	0xffff7fff

08006c10 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b086      	sub	sp, #24
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006c26:	200f      	movs	r0, #15
 8006c28:	183b      	adds	r3, r7, r0
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	2141      	movs	r1, #65	; 0x41
 8006c2e:	5c52      	ldrb	r2, [r2, r1]
 8006c30:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2220      	movs	r2, #32
 8006c38:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006c3a:	183b      	adds	r3, r7, r0
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	2b21      	cmp	r3, #33	; 0x21
 8006c40:	d003      	beq.n	8006c4a <I2C_ITSlaveCplt+0x3a>
 8006c42:	183b      	adds	r3, r7, r0
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	2b29      	cmp	r3, #41	; 0x29
 8006c48:	d109      	bne.n	8006c5e <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006c4a:	4a7d      	ldr	r2, [pc, #500]	; (8006e40 <I2C_ITSlaveCplt+0x230>)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	0011      	movs	r1, r2
 8006c50:	0018      	movs	r0, r3
 8006c52:	f000 fbfd 	bl	8007450 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2221      	movs	r2, #33	; 0x21
 8006c5a:	631a      	str	r2, [r3, #48]	; 0x30
 8006c5c:	e011      	b.n	8006c82 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006c5e:	220f      	movs	r2, #15
 8006c60:	18bb      	adds	r3, r7, r2
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	2b22      	cmp	r3, #34	; 0x22
 8006c66:	d003      	beq.n	8006c70 <I2C_ITSlaveCplt+0x60>
 8006c68:	18bb      	adds	r3, r7, r2
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	2b2a      	cmp	r3, #42	; 0x2a
 8006c6e:	d108      	bne.n	8006c82 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006c70:	4a74      	ldr	r2, [pc, #464]	; (8006e44 <I2C_ITSlaveCplt+0x234>)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	0011      	movs	r1, r2
 8006c76:	0018      	movs	r0, r3
 8006c78:	f000 fbea 	bl	8007450 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2222      	movs	r2, #34	; 0x22
 8006c80:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	685a      	ldr	r2, [r3, #4]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2180      	movs	r1, #128	; 0x80
 8006c8e:	0209      	lsls	r1, r1, #8
 8006c90:	430a      	orrs	r2, r1
 8006c92:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	685a      	ldr	r2, [r3, #4]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	496a      	ldr	r1, [pc, #424]	; (8006e48 <I2C_ITSlaveCplt+0x238>)
 8006ca0:	400a      	ands	r2, r1
 8006ca2:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	0018      	movs	r0, r3
 8006ca8:	f000 fa3b 	bl	8007122 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	0b9b      	lsrs	r3, r3, #14
 8006cb0:	001a      	movs	r2, r3
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	d013      	beq.n	8006ce0 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4962      	ldr	r1, [pc, #392]	; (8006e4c <I2C_ITSlaveCplt+0x23c>)
 8006cc4:	400a      	ands	r2, r1
 8006cc6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d020      	beq.n	8006d12 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	b29a      	uxth	r2, r3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006cde:	e018      	b.n	8006d12 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	0bdb      	lsrs	r3, r3, #15
 8006ce4:	001a      	movs	r2, r3
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	4013      	ands	r3, r2
 8006cea:	d012      	beq.n	8006d12 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4956      	ldr	r1, [pc, #344]	; (8006e50 <I2C_ITSlaveCplt+0x240>)
 8006cf8:	400a      	ands	r2, r1
 8006cfa:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d006      	beq.n	8006d12 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	089b      	lsrs	r3, r3, #2
 8006d16:	001a      	movs	r2, r3
 8006d18:	2301      	movs	r3, #1
 8006d1a:	4013      	ands	r3, r2
 8006d1c:	d020      	beq.n	8006d60 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	2204      	movs	r2, #4
 8006d22:	4393      	bics	r3, r2
 8006d24:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d30:	b2d2      	uxtb	r2, r2
 8006d32:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d38:	1c5a      	adds	r2, r3, #1
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d00c      	beq.n	8006d60 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	b29a      	uxth	r2, r3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	3b01      	subs	r3, #1
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d005      	beq.n	8006d76 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d6e:	2204      	movs	r2, #4
 8006d70:	431a      	orrs	r2, r3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2242      	movs	r2, #66	; 0x42
 8006d7a:	2100      	movs	r1, #0
 8006d7c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d013      	beq.n	8006db4 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	0011      	movs	r1, r2
 8006d94:	0018      	movs	r0, r3
 8006d96:	f000 f8b9 	bl	8006f0c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2241      	movs	r2, #65	; 0x41
 8006d9e:	5c9b      	ldrb	r3, [r3, r2]
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	2b28      	cmp	r3, #40	; 0x28
 8006da4:	d147      	bne.n	8006e36 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	0011      	movs	r1, r2
 8006dac:	0018      	movs	r0, r3
 8006dae:	f000 f853 	bl	8006e58 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006db2:	e040      	b.n	8006e36 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db8:	4a26      	ldr	r2, [pc, #152]	; (8006e54 <I2C_ITSlaveCplt+0x244>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d016      	beq.n	8006dec <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	0018      	movs	r0, r3
 8006dc2:	f7ff febf 	bl	8006b44 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a22      	ldr	r2, [pc, #136]	; (8006e54 <I2C_ITSlaveCplt+0x244>)
 8006dca:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2241      	movs	r2, #65	; 0x41
 8006dd0:	2120      	movs	r1, #32
 8006dd2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2240      	movs	r2, #64	; 0x40
 8006dde:	2100      	movs	r1, #0
 8006de0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	0018      	movs	r0, r3
 8006de6:	f7ff fcdd 	bl	80067a4 <HAL_I2C_ListenCpltCallback>
}
 8006dea:	e024      	b.n	8006e36 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2241      	movs	r2, #65	; 0x41
 8006df0:	5c9b      	ldrb	r3, [r3, r2]
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	2b22      	cmp	r3, #34	; 0x22
 8006df6:	d10f      	bne.n	8006e18 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2241      	movs	r2, #65	; 0x41
 8006dfc:	2120      	movs	r1, #32
 8006dfe:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2240      	movs	r2, #64	; 0x40
 8006e0a:	2100      	movs	r1, #0
 8006e0c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	0018      	movs	r0, r3
 8006e12:	f7ff fcaf 	bl	8006774 <HAL_I2C_SlaveRxCpltCallback>
}
 8006e16:	e00e      	b.n	8006e36 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2241      	movs	r2, #65	; 0x41
 8006e1c:	2120      	movs	r1, #32
 8006e1e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2240      	movs	r2, #64	; 0x40
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	0018      	movs	r0, r3
 8006e32:	f7ff fc97 	bl	8006764 <HAL_I2C_SlaveTxCpltCallback>
}
 8006e36:	46c0      	nop			; (mov r8, r8)
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	b006      	add	sp, #24
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	46c0      	nop			; (mov r8, r8)
 8006e40:	00008001 	.word	0x00008001
 8006e44:	00008002 	.word	0x00008002
 8006e48:	fe00e800 	.word	0xfe00e800
 8006e4c:	ffffbfff 	.word	0xffffbfff
 8006e50:	ffff7fff 	.word	0xffff7fff
 8006e54:	ffff0000 	.word	0xffff0000

08006e58 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a27      	ldr	r2, [pc, #156]	; (8006f04 <I2C_ITListenCplt+0xac>)
 8006e66:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2241      	movs	r2, #65	; 0x41
 8006e72:	2120      	movs	r1, #32
 8006e74:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2242      	movs	r2, #66	; 0x42
 8006e7a:	2100      	movs	r1, #0
 8006e7c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	089b      	lsrs	r3, r3, #2
 8006e88:	001a      	movs	r2, r3
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	d022      	beq.n	8006ed6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9a:	b2d2      	uxtb	r2, r2
 8006e9c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea2:	1c5a      	adds	r2, r3, #1
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d012      	beq.n	8006ed6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eb4:	3b01      	subs	r3, #1
 8006eb6:	b29a      	uxth	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	b29a      	uxth	r2, r3
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ece:	2204      	movs	r2, #4
 8006ed0:	431a      	orrs	r2, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006ed6:	4a0c      	ldr	r2, [pc, #48]	; (8006f08 <I2C_ITListenCplt+0xb0>)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	0011      	movs	r1, r2
 8006edc:	0018      	movs	r0, r3
 8006ede:	f000 fab7 	bl	8007450 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2210      	movs	r2, #16
 8006ee8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2240      	movs	r2, #64	; 0x40
 8006eee:	2100      	movs	r1, #0
 8006ef0:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	0018      	movs	r0, r3
 8006ef6:	f7ff fc55 	bl	80067a4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006efa:	46c0      	nop			; (mov r8, r8)
 8006efc:	46bd      	mov	sp, r7
 8006efe:	b002      	add	sp, #8
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	46c0      	nop			; (mov r8, r8)
 8006f04:	ffff0000 	.word	0xffff0000
 8006f08:	00008003 	.word	0x00008003

08006f0c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006f16:	200f      	movs	r0, #15
 8006f18:	183b      	adds	r3, r7, r0
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	2141      	movs	r1, #65	; 0x41
 8006f1e:	5c52      	ldrb	r2, [r2, r1]
 8006f20:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2242      	movs	r2, #66	; 0x42
 8006f26:	2100      	movs	r1, #0
 8006f28:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4a62      	ldr	r2, [pc, #392]	; (80070b8 <I2C_ITError+0x1ac>)
 8006f2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	431a      	orrs	r2, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006f42:	183b      	adds	r3, r7, r0
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	2b28      	cmp	r3, #40	; 0x28
 8006f48:	d007      	beq.n	8006f5a <I2C_ITError+0x4e>
 8006f4a:	183b      	adds	r3, r7, r0
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	2b29      	cmp	r3, #41	; 0x29
 8006f50:	d003      	beq.n	8006f5a <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006f52:	183b      	adds	r3, r7, r0
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	2b2a      	cmp	r3, #42	; 0x2a
 8006f58:	d10c      	bne.n	8006f74 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2103      	movs	r1, #3
 8006f5e:	0018      	movs	r0, r3
 8006f60:	f000 fa76 	bl	8007450 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2241      	movs	r2, #65	; 0x41
 8006f68:	2128      	movs	r1, #40	; 0x28
 8006f6a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a53      	ldr	r2, [pc, #332]	; (80070bc <I2C_ITError+0x1b0>)
 8006f70:	635a      	str	r2, [r3, #52]	; 0x34
 8006f72:	e012      	b.n	8006f9a <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006f74:	4a52      	ldr	r2, [pc, #328]	; (80070c0 <I2C_ITError+0x1b4>)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	0011      	movs	r1, r2
 8006f7a:	0018      	movs	r0, r3
 8006f7c:	f000 fa68 	bl	8007450 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2241      	movs	r2, #65	; 0x41
 8006f84:	5c9b      	ldrb	r3, [r3, r2]
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	2b60      	cmp	r3, #96	; 0x60
 8006f8a:	d003      	beq.n	8006f94 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2241      	movs	r2, #65	; 0x41
 8006f90:	2120      	movs	r1, #32
 8006f92:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f9e:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d03b      	beq.n	8007020 <I2C_ITError+0x114>
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	2b11      	cmp	r3, #17
 8006fac:	d002      	beq.n	8006fb4 <I2C_ITError+0xa8>
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	2b21      	cmp	r3, #33	; 0x21
 8006fb2:	d135      	bne.n	8007020 <I2C_ITError+0x114>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	2380      	movs	r3, #128	; 0x80
 8006fbc:	01db      	lsls	r3, r3, #7
 8006fbe:	401a      	ands	r2, r3
 8006fc0:	2380      	movs	r3, #128	; 0x80
 8006fc2:	01db      	lsls	r3, r3, #7
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d107      	bne.n	8006fd8 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	493c      	ldr	r1, [pc, #240]	; (80070c4 <I2C_ITError+0x1b8>)
 8006fd4:	400a      	ands	r2, r1
 8006fd6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fdc:	0018      	movs	r0, r3
 8006fde:	f7fe ffa7 	bl	8005f30 <HAL_DMA_GetState>
 8006fe2:	0003      	movs	r3, r0
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d016      	beq.n	8007016 <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fec:	4a36      	ldr	r2, [pc, #216]	; (80070c8 <I2C_ITError+0x1bc>)
 8006fee:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2240      	movs	r2, #64	; 0x40
 8006ff4:	2100      	movs	r1, #0
 8006ff6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ffc:	0018      	movs	r0, r3
 8006ffe:	f7fe fe7b 	bl	8005cf8 <HAL_DMA_Abort_IT>
 8007002:	1e03      	subs	r3, r0, #0
 8007004:	d051      	beq.n	80070aa <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800700a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007010:	0018      	movs	r0, r3
 8007012:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007014:	e049      	b.n	80070aa <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	0018      	movs	r0, r3
 800701a:	f000 f859 	bl	80070d0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800701e:	e044      	b.n	80070aa <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007024:	2b00      	cmp	r3, #0
 8007026:	d03b      	beq.n	80070a0 <I2C_ITError+0x194>
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	2b12      	cmp	r3, #18
 800702c:	d002      	beq.n	8007034 <I2C_ITError+0x128>
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	2b22      	cmp	r3, #34	; 0x22
 8007032:	d135      	bne.n	80070a0 <I2C_ITError+0x194>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	2380      	movs	r3, #128	; 0x80
 800703c:	021b      	lsls	r3, r3, #8
 800703e:	401a      	ands	r2, r3
 8007040:	2380      	movs	r3, #128	; 0x80
 8007042:	021b      	lsls	r3, r3, #8
 8007044:	429a      	cmp	r2, r3
 8007046:	d107      	bne.n	8007058 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	491e      	ldr	r1, [pc, #120]	; (80070cc <I2C_ITError+0x1c0>)
 8007054:	400a      	ands	r2, r1
 8007056:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800705c:	0018      	movs	r0, r3
 800705e:	f7fe ff67 	bl	8005f30 <HAL_DMA_GetState>
 8007062:	0003      	movs	r3, r0
 8007064:	2b01      	cmp	r3, #1
 8007066:	d016      	beq.n	8007096 <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800706c:	4a16      	ldr	r2, [pc, #88]	; (80070c8 <I2C_ITError+0x1bc>)
 800706e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2240      	movs	r2, #64	; 0x40
 8007074:	2100      	movs	r1, #0
 8007076:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800707c:	0018      	movs	r0, r3
 800707e:	f7fe fe3b 	bl	8005cf8 <HAL_DMA_Abort_IT>
 8007082:	1e03      	subs	r3, r0, #0
 8007084:	d013      	beq.n	80070ae <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800708a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007090:	0018      	movs	r0, r3
 8007092:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007094:	e00b      	b.n	80070ae <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	0018      	movs	r0, r3
 800709a:	f000 f819 	bl	80070d0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800709e:	e006      	b.n	80070ae <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	0018      	movs	r0, r3
 80070a4:	f000 f814 	bl	80070d0 <I2C_TreatErrorCallback>
  }
}
 80070a8:	e002      	b.n	80070b0 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80070aa:	46c0      	nop			; (mov r8, r8)
 80070ac:	e000      	b.n	80070b0 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80070ae:	46c0      	nop			; (mov r8, r8)
}
 80070b0:	46c0      	nop			; (mov r8, r8)
 80070b2:	46bd      	mov	sp, r7
 80070b4:	b004      	add	sp, #16
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	ffff0000 	.word	0xffff0000
 80070bc:	080067d5 	.word	0x080067d5
 80070c0:	00008003 	.word	0x00008003
 80070c4:	ffffbfff 	.word	0xffffbfff
 80070c8:	08007167 	.word	0x08007167
 80070cc:	ffff7fff 	.word	0xffff7fff

080070d0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2241      	movs	r2, #65	; 0x41
 80070dc:	5c9b      	ldrb	r3, [r3, r2]
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	2b60      	cmp	r3, #96	; 0x60
 80070e2:	d10f      	bne.n	8007104 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2241      	movs	r2, #65	; 0x41
 80070e8:	2120      	movs	r1, #32
 80070ea:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2240      	movs	r2, #64	; 0x40
 80070f6:	2100      	movs	r1, #0
 80070f8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	0018      	movs	r0, r3
 80070fe:	f7ff fb61 	bl	80067c4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007102:	e00a      	b.n	800711a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2240      	movs	r2, #64	; 0x40
 800710e:	2100      	movs	r1, #0
 8007110:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	0018      	movs	r0, r3
 8007116:	f7ff fb4d 	bl	80067b4 <HAL_I2C_ErrorCallback>
}
 800711a:	46c0      	nop			; (mov r8, r8)
 800711c:	46bd      	mov	sp, r7
 800711e:	b002      	add	sp, #8
 8007120:	bd80      	pop	{r7, pc}

08007122 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b082      	sub	sp, #8
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	699b      	ldr	r3, [r3, #24]
 8007130:	2202      	movs	r2, #2
 8007132:	4013      	ands	r3, r2
 8007134:	2b02      	cmp	r3, #2
 8007136:	d103      	bne.n	8007140 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2200      	movs	r2, #0
 800713e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	699b      	ldr	r3, [r3, #24]
 8007146:	2201      	movs	r2, #1
 8007148:	4013      	ands	r3, r2
 800714a:	2b01      	cmp	r3, #1
 800714c:	d007      	beq.n	800715e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	699a      	ldr	r2, [r3, #24]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2101      	movs	r1, #1
 800715a:	430a      	orrs	r2, r1
 800715c:	619a      	str	r2, [r3, #24]
  }
}
 800715e:	46c0      	nop			; (mov r8, r8)
 8007160:	46bd      	mov	sp, r7
 8007162:	b002      	add	sp, #8
 8007164:	bd80      	pop	{r7, pc}

08007166 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b084      	sub	sp, #16
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007172:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007178:	2b00      	cmp	r3, #0
 800717a:	d003      	beq.n	8007184 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007180:	2200      	movs	r2, #0
 8007182:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007188:	2b00      	cmp	r3, #0
 800718a:	d003      	beq.n	8007194 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007190:	2200      	movs	r2, #0
 8007192:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	0018      	movs	r0, r3
 8007198:	f7ff ff9a 	bl	80070d0 <I2C_TreatErrorCallback>
}
 800719c:	46c0      	nop			; (mov r8, r8)
 800719e:	46bd      	mov	sp, r7
 80071a0:	b004      	add	sp, #16
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	603b      	str	r3, [r7, #0]
 80071b0:	1dfb      	adds	r3, r7, #7
 80071b2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80071b4:	e021      	b.n	80071fa <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	3301      	adds	r3, #1
 80071ba:	d01e      	beq.n	80071fa <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071bc:	f7fe f90a 	bl	80053d4 <HAL_GetTick>
 80071c0:	0002      	movs	r2, r0
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	1ad3      	subs	r3, r2, r3
 80071c6:	683a      	ldr	r2, [r7, #0]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d302      	bcc.n	80071d2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d113      	bne.n	80071fa <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071d6:	2220      	movs	r2, #32
 80071d8:	431a      	orrs	r2, r3
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2241      	movs	r2, #65	; 0x41
 80071e2:	2120      	movs	r1, #32
 80071e4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2242      	movs	r2, #66	; 0x42
 80071ea:	2100      	movs	r1, #0
 80071ec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2240      	movs	r2, #64	; 0x40
 80071f2:	2100      	movs	r1, #0
 80071f4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	e00f      	b.n	800721a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	699b      	ldr	r3, [r3, #24]
 8007200:	68ba      	ldr	r2, [r7, #8]
 8007202:	4013      	ands	r3, r2
 8007204:	68ba      	ldr	r2, [r7, #8]
 8007206:	1ad3      	subs	r3, r2, r3
 8007208:	425a      	negs	r2, r3
 800720a:	4153      	adcs	r3, r2
 800720c:	b2db      	uxtb	r3, r3
 800720e:	001a      	movs	r2, r3
 8007210:	1dfb      	adds	r3, r7, #7
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	429a      	cmp	r2, r3
 8007216:	d0ce      	beq.n	80071b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007218:	2300      	movs	r3, #0
}
 800721a:	0018      	movs	r0, r3
 800721c:	46bd      	mov	sp, r7
 800721e:	b004      	add	sp, #16
 8007220:	bd80      	pop	{r7, pc}

08007222 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b084      	sub	sp, #16
 8007226:	af00      	add	r7, sp, #0
 8007228:	60f8      	str	r0, [r7, #12]
 800722a:	60b9      	str	r1, [r7, #8]
 800722c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800722e:	e02b      	b.n	8007288 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	68b9      	ldr	r1, [r7, #8]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	0018      	movs	r0, r3
 8007238:	f000 f86e 	bl	8007318 <I2C_IsAcknowledgeFailed>
 800723c:	1e03      	subs	r3, r0, #0
 800723e:	d001      	beq.n	8007244 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	e029      	b.n	8007298 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	3301      	adds	r3, #1
 8007248:	d01e      	beq.n	8007288 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800724a:	f7fe f8c3 	bl	80053d4 <HAL_GetTick>
 800724e:	0002      	movs	r2, r0
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	1ad3      	subs	r3, r2, r3
 8007254:	68ba      	ldr	r2, [r7, #8]
 8007256:	429a      	cmp	r2, r3
 8007258:	d302      	bcc.n	8007260 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d113      	bne.n	8007288 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007264:	2220      	movs	r2, #32
 8007266:	431a      	orrs	r2, r3
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2241      	movs	r2, #65	; 0x41
 8007270:	2120      	movs	r1, #32
 8007272:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2242      	movs	r2, #66	; 0x42
 8007278:	2100      	movs	r1, #0
 800727a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2240      	movs	r2, #64	; 0x40
 8007280:	2100      	movs	r1, #0
 8007282:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	e007      	b.n	8007298 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	699b      	ldr	r3, [r3, #24]
 800728e:	2202      	movs	r2, #2
 8007290:	4013      	ands	r3, r2
 8007292:	2b02      	cmp	r3, #2
 8007294:	d1cc      	bne.n	8007230 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007296:	2300      	movs	r3, #0
}
 8007298:	0018      	movs	r0, r3
 800729a:	46bd      	mov	sp, r7
 800729c:	b004      	add	sp, #16
 800729e:	bd80      	pop	{r7, pc}

080072a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80072ac:	e028      	b.n	8007300 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	68b9      	ldr	r1, [r7, #8]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	0018      	movs	r0, r3
 80072b6:	f000 f82f 	bl	8007318 <I2C_IsAcknowledgeFailed>
 80072ba:	1e03      	subs	r3, r0, #0
 80072bc:	d001      	beq.n	80072c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	e026      	b.n	8007310 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072c2:	f7fe f887 	bl	80053d4 <HAL_GetTick>
 80072c6:	0002      	movs	r2, r0
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	1ad3      	subs	r3, r2, r3
 80072cc:	68ba      	ldr	r2, [r7, #8]
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d302      	bcc.n	80072d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d113      	bne.n	8007300 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072dc:	2220      	movs	r2, #32
 80072de:	431a      	orrs	r2, r3
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2241      	movs	r2, #65	; 0x41
 80072e8:	2120      	movs	r1, #32
 80072ea:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2242      	movs	r2, #66	; 0x42
 80072f0:	2100      	movs	r1, #0
 80072f2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2240      	movs	r2, #64	; 0x40
 80072f8:	2100      	movs	r1, #0
 80072fa:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	e007      	b.n	8007310 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	2220      	movs	r2, #32
 8007308:	4013      	ands	r3, r2
 800730a:	2b20      	cmp	r3, #32
 800730c:	d1cf      	bne.n	80072ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800730e:	2300      	movs	r3, #0
}
 8007310:	0018      	movs	r0, r3
 8007312:	46bd      	mov	sp, r7
 8007314:	b004      	add	sp, #16
 8007316:	bd80      	pop	{r7, pc}

08007318 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	699b      	ldr	r3, [r3, #24]
 800732a:	2210      	movs	r2, #16
 800732c:	4013      	ands	r3, r2
 800732e:	2b10      	cmp	r3, #16
 8007330:	d151      	bne.n	80073d6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007332:	e021      	b.n	8007378 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	3301      	adds	r3, #1
 8007338:	d01e      	beq.n	8007378 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800733a:	f7fe f84b 	bl	80053d4 <HAL_GetTick>
 800733e:	0002      	movs	r2, r0
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	68ba      	ldr	r2, [r7, #8]
 8007346:	429a      	cmp	r2, r3
 8007348:	d302      	bcc.n	8007350 <I2C_IsAcknowledgeFailed+0x38>
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d113      	bne.n	8007378 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007354:	2220      	movs	r2, #32
 8007356:	431a      	orrs	r2, r3
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2241      	movs	r2, #65	; 0x41
 8007360:	2120      	movs	r1, #32
 8007362:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2242      	movs	r2, #66	; 0x42
 8007368:	2100      	movs	r1, #0
 800736a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2240      	movs	r2, #64	; 0x40
 8007370:	2100      	movs	r1, #0
 8007372:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	e02f      	b.n	80073d8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	2220      	movs	r2, #32
 8007380:	4013      	ands	r3, r2
 8007382:	2b20      	cmp	r3, #32
 8007384:	d1d6      	bne.n	8007334 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2210      	movs	r2, #16
 800738c:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2220      	movs	r2, #32
 8007394:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	0018      	movs	r0, r3
 800739a:	f7ff fec2 	bl	8007122 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	685a      	ldr	r2, [r3, #4]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	490d      	ldr	r1, [pc, #52]	; (80073e0 <I2C_IsAcknowledgeFailed+0xc8>)
 80073aa:	400a      	ands	r2, r1
 80073ac:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073b2:	2204      	movs	r2, #4
 80073b4:	431a      	orrs	r2, r3
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2241      	movs	r2, #65	; 0x41
 80073be:	2120      	movs	r1, #32
 80073c0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2242      	movs	r2, #66	; 0x42
 80073c6:	2100      	movs	r1, #0
 80073c8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2240      	movs	r2, #64	; 0x40
 80073ce:	2100      	movs	r1, #0
 80073d0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	e000      	b.n	80073d8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	0018      	movs	r0, r3
 80073da:	46bd      	mov	sp, r7
 80073dc:	b004      	add	sp, #16
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	fe00e800 	.word	0xfe00e800

080073e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80073e4:	b590      	push	{r4, r7, lr}
 80073e6:	b085      	sub	sp, #20
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	0008      	movs	r0, r1
 80073ee:	0011      	movs	r1, r2
 80073f0:	607b      	str	r3, [r7, #4]
 80073f2:	240a      	movs	r4, #10
 80073f4:	193b      	adds	r3, r7, r4
 80073f6:	1c02      	adds	r2, r0, #0
 80073f8:	801a      	strh	r2, [r3, #0]
 80073fa:	2009      	movs	r0, #9
 80073fc:	183b      	adds	r3, r7, r0
 80073fe:	1c0a      	adds	r2, r1, #0
 8007400:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	6a3a      	ldr	r2, [r7, #32]
 800740a:	0d51      	lsrs	r1, r2, #21
 800740c:	2280      	movs	r2, #128	; 0x80
 800740e:	00d2      	lsls	r2, r2, #3
 8007410:	400a      	ands	r2, r1
 8007412:	490e      	ldr	r1, [pc, #56]	; (800744c <I2C_TransferConfig+0x68>)
 8007414:	430a      	orrs	r2, r1
 8007416:	43d2      	mvns	r2, r2
 8007418:	401a      	ands	r2, r3
 800741a:	0011      	movs	r1, r2
 800741c:	193b      	adds	r3, r7, r4
 800741e:	881b      	ldrh	r3, [r3, #0]
 8007420:	059b      	lsls	r3, r3, #22
 8007422:	0d9a      	lsrs	r2, r3, #22
 8007424:	183b      	adds	r3, r7, r0
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	0418      	lsls	r0, r3, #16
 800742a:	23ff      	movs	r3, #255	; 0xff
 800742c:	041b      	lsls	r3, r3, #16
 800742e:	4003      	ands	r3, r0
 8007430:	431a      	orrs	r2, r3
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	431a      	orrs	r2, r3
 8007436:	6a3b      	ldr	r3, [r7, #32]
 8007438:	431a      	orrs	r2, r3
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	430a      	orrs	r2, r1
 8007440:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8007442:	46c0      	nop			; (mov r8, r8)
 8007444:	46bd      	mov	sp, r7
 8007446:	b005      	add	sp, #20
 8007448:	bd90      	pop	{r4, r7, pc}
 800744a:	46c0      	nop			; (mov r8, r8)
 800744c:	03ff63ff 	.word	0x03ff63ff

08007450 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	000a      	movs	r2, r1
 800745a:	1cbb      	adds	r3, r7, #2
 800745c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800745e:	2300      	movs	r3, #0
 8007460:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007462:	1cbb      	adds	r3, r7, #2
 8007464:	881b      	ldrh	r3, [r3, #0]
 8007466:	2201      	movs	r2, #1
 8007468:	4013      	ands	r3, r2
 800746a:	d010      	beq.n	800748e <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2242      	movs	r2, #66	; 0x42
 8007470:	4313      	orrs	r3, r2
 8007472:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2241      	movs	r2, #65	; 0x41
 8007478:	5c9b      	ldrb	r3, [r3, r2]
 800747a:	b2db      	uxtb	r3, r3
 800747c:	001a      	movs	r2, r3
 800747e:	2328      	movs	r3, #40	; 0x28
 8007480:	4013      	ands	r3, r2
 8007482:	2b28      	cmp	r3, #40	; 0x28
 8007484:	d003      	beq.n	800748e <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	22b0      	movs	r2, #176	; 0xb0
 800748a:	4313      	orrs	r3, r2
 800748c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800748e:	1cbb      	adds	r3, r7, #2
 8007490:	881b      	ldrh	r3, [r3, #0]
 8007492:	2202      	movs	r2, #2
 8007494:	4013      	ands	r3, r2
 8007496:	d010      	beq.n	80074ba <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2244      	movs	r2, #68	; 0x44
 800749c:	4313      	orrs	r3, r2
 800749e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2241      	movs	r2, #65	; 0x41
 80074a4:	5c9b      	ldrb	r3, [r3, r2]
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	001a      	movs	r2, r3
 80074aa:	2328      	movs	r3, #40	; 0x28
 80074ac:	4013      	ands	r3, r2
 80074ae:	2b28      	cmp	r3, #40	; 0x28
 80074b0:	d003      	beq.n	80074ba <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	22b0      	movs	r2, #176	; 0xb0
 80074b6:	4313      	orrs	r3, r2
 80074b8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80074ba:	1cbb      	adds	r3, r7, #2
 80074bc:	2200      	movs	r2, #0
 80074be:	5e9b      	ldrsh	r3, [r3, r2]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	da03      	bge.n	80074cc <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	22b8      	movs	r2, #184	; 0xb8
 80074c8:	4313      	orrs	r3, r2
 80074ca:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80074cc:	1cbb      	adds	r3, r7, #2
 80074ce:	881b      	ldrh	r3, [r3, #0]
 80074d0:	2b10      	cmp	r3, #16
 80074d2:	d103      	bne.n	80074dc <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2290      	movs	r2, #144	; 0x90
 80074d8:	4313      	orrs	r3, r2
 80074da:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80074dc:	1cbb      	adds	r3, r7, #2
 80074de:	881b      	ldrh	r3, [r3, #0]
 80074e0:	2b20      	cmp	r3, #32
 80074e2:	d103      	bne.n	80074ec <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2220      	movs	r2, #32
 80074e8:	4313      	orrs	r3, r2
 80074ea:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80074ec:	1cbb      	adds	r3, r7, #2
 80074ee:	881b      	ldrh	r3, [r3, #0]
 80074f0:	2b40      	cmp	r3, #64	; 0x40
 80074f2:	d103      	bne.n	80074fc <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2240      	movs	r2, #64	; 0x40
 80074f8:	4313      	orrs	r3, r2
 80074fa:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	43d9      	mvns	r1, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	400a      	ands	r2, r1
 800750c:	601a      	str	r2, [r3, #0]
}
 800750e:	46c0      	nop			; (mov r8, r8)
 8007510:	46bd      	mov	sp, r7
 8007512:	b004      	add	sp, #16
 8007514:	bd80      	pop	{r7, pc}
	...

08007518 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2241      	movs	r2, #65	; 0x41
 8007526:	5c9b      	ldrb	r3, [r3, r2]
 8007528:	b2db      	uxtb	r3, r3
 800752a:	2b20      	cmp	r3, #32
 800752c:	d138      	bne.n	80075a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2240      	movs	r2, #64	; 0x40
 8007532:	5c9b      	ldrb	r3, [r3, r2]
 8007534:	2b01      	cmp	r3, #1
 8007536:	d101      	bne.n	800753c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007538:	2302      	movs	r3, #2
 800753a:	e032      	b.n	80075a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2240      	movs	r2, #64	; 0x40
 8007540:	2101      	movs	r1, #1
 8007542:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2241      	movs	r2, #65	; 0x41
 8007548:	2124      	movs	r1, #36	; 0x24
 800754a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2101      	movs	r1, #1
 8007558:	438a      	bics	r2, r1
 800755a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4911      	ldr	r1, [pc, #68]	; (80075ac <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8007568:	400a      	ands	r2, r1
 800756a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	6819      	ldr	r1, [r3, #0]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	683a      	ldr	r2, [r7, #0]
 8007578:	430a      	orrs	r2, r1
 800757a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2101      	movs	r1, #1
 8007588:	430a      	orrs	r2, r1
 800758a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2241      	movs	r2, #65	; 0x41
 8007590:	2120      	movs	r1, #32
 8007592:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2240      	movs	r2, #64	; 0x40
 8007598:	2100      	movs	r1, #0
 800759a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800759c:	2300      	movs	r3, #0
 800759e:	e000      	b.n	80075a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80075a0:	2302      	movs	r3, #2
  }
}
 80075a2:	0018      	movs	r0, r3
 80075a4:	46bd      	mov	sp, r7
 80075a6:	b002      	add	sp, #8
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	46c0      	nop			; (mov r8, r8)
 80075ac:	ffffefff 	.word	0xffffefff

080075b0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2241      	movs	r2, #65	; 0x41
 80075be:	5c9b      	ldrb	r3, [r3, r2]
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	2b20      	cmp	r3, #32
 80075c4:	d139      	bne.n	800763a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2240      	movs	r2, #64	; 0x40
 80075ca:	5c9b      	ldrb	r3, [r3, r2]
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d101      	bne.n	80075d4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80075d0:	2302      	movs	r3, #2
 80075d2:	e033      	b.n	800763c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2240      	movs	r2, #64	; 0x40
 80075d8:	2101      	movs	r1, #1
 80075da:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2241      	movs	r2, #65	; 0x41
 80075e0:	2124      	movs	r1, #36	; 0x24
 80075e2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2101      	movs	r1, #1
 80075f0:	438a      	bics	r2, r1
 80075f2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	4a11      	ldr	r2, [pc, #68]	; (8007644 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8007600:	4013      	ands	r3, r2
 8007602:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	021b      	lsls	r3, r3, #8
 8007608:	68fa      	ldr	r2, [r7, #12]
 800760a:	4313      	orrs	r3, r2
 800760c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2101      	movs	r1, #1
 8007622:	430a      	orrs	r2, r1
 8007624:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2241      	movs	r2, #65	; 0x41
 800762a:	2120      	movs	r1, #32
 800762c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2240      	movs	r2, #64	; 0x40
 8007632:	2100      	movs	r1, #0
 8007634:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007636:	2300      	movs	r3, #0
 8007638:	e000      	b.n	800763c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800763a:	2302      	movs	r3, #2
  }
}
 800763c:	0018      	movs	r0, r3
 800763e:	46bd      	mov	sp, r7
 8007640:	b004      	add	sp, #16
 8007642:	bd80      	pop	{r7, pc}
 8007644:	fffff0ff 	.word	0xfffff0ff

08007648 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b088      	sub	sp, #32
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d101      	bne.n	800765a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	e0e5      	b.n	8007826 <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2235      	movs	r2, #53	; 0x35
 800765e:	5c9b      	ldrb	r3, [r3, r2]
 8007660:	b2db      	uxtb	r3, r3
 8007662:	2b00      	cmp	r3, #0
 8007664:	d107      	bne.n	8007676 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2234      	movs	r2, #52	; 0x34
 800766a:	2100      	movs	r1, #0
 800766c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	0018      	movs	r0, r3
 8007672:	f7fd fa69 	bl	8004b48 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2235      	movs	r2, #53	; 0x35
 800767a:	2102      	movs	r1, #2
 800767c:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	69da      	ldr	r2, [r3, #28]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4969      	ldr	r1, [pc, #420]	; (8007830 <HAL_I2S_Init+0x1e8>)
 800768a:	400a      	ands	r2, r1
 800768c:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2202      	movs	r2, #2
 8007694:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	695b      	ldr	r3, [r3, #20]
 800769a:	2b02      	cmp	r3, #2
 800769c:	d100      	bne.n	80076a0 <HAL_I2S_Init+0x58>
 800769e:	e076      	b.n	800778e <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d102      	bne.n	80076ae <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80076a8:	2310      	movs	r3, #16
 80076aa:	617b      	str	r3, [r7, #20]
 80076ac:	e001      	b.n	80076b2 <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80076ae:	2320      	movs	r3, #32
 80076b0:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	2b20      	cmp	r3, #32
 80076b8:	d802      	bhi.n	80076c0 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	005b      	lsls	r3, r3, #1
 80076be:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 80076c0:	2380      	movs	r3, #128	; 0x80
 80076c2:	011b      	lsls	r3, r3, #4
 80076c4:	0018      	movs	r0, r3
 80076c6:	f001 f997 	bl	80089f8 <HAL_RCCEx_GetPeriphCLKFreq>
 80076ca:	0003      	movs	r3, r0
 80076cc:	60fb      	str	r3, [r7, #12]
#endif
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	691a      	ldr	r2, [r3, #16]
 80076d2:	2380      	movs	r3, #128	; 0x80
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d131      	bne.n	800773e <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d016      	beq.n	8007710 <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	0019      	movs	r1, r3
 80076e8:	68f8      	ldr	r0, [r7, #12]
 80076ea:	f7f8 fd0b 	bl	8000104 <__udivsi3>
 80076ee:	0003      	movs	r3, r0
 80076f0:	001a      	movs	r2, r3
 80076f2:	0013      	movs	r3, r2
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	189b      	adds	r3, r3, r2
 80076f8:	005b      	lsls	r3, r3, #1
 80076fa:	001a      	movs	r2, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	695b      	ldr	r3, [r3, #20]
 8007700:	0019      	movs	r1, r3
 8007702:	0010      	movs	r0, r2
 8007704:	f7f8 fcfe 	bl	8000104 <__udivsi3>
 8007708:	0003      	movs	r3, r0
 800770a:	3305      	adds	r3, #5
 800770c:	613b      	str	r3, [r7, #16]
 800770e:	e02a      	b.n	8007766 <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	00db      	lsls	r3, r3, #3
 8007714:	0019      	movs	r1, r3
 8007716:	68f8      	ldr	r0, [r7, #12]
 8007718:	f7f8 fcf4 	bl	8000104 <__udivsi3>
 800771c:	0003      	movs	r3, r0
 800771e:	001a      	movs	r2, r3
 8007720:	0013      	movs	r3, r2
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	189b      	adds	r3, r3, r2
 8007726:	005b      	lsls	r3, r3, #1
 8007728:	001a      	movs	r2, r3
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	695b      	ldr	r3, [r3, #20]
 800772e:	0019      	movs	r1, r3
 8007730:	0010      	movs	r0, r2
 8007732:	f7f8 fce7 	bl	8000104 <__udivsi3>
 8007736:	0003      	movs	r3, r0
 8007738:	3305      	adds	r3, #5
 800773a:	613b      	str	r3, [r7, #16]
 800773c:	e013      	b.n	8007766 <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800773e:	6979      	ldr	r1, [r7, #20]
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f7f8 fcdf 	bl	8000104 <__udivsi3>
 8007746:	0003      	movs	r3, r0
 8007748:	001a      	movs	r2, r3
 800774a:	0013      	movs	r3, r2
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	189b      	adds	r3, r3, r2
 8007750:	005b      	lsls	r3, r3, #1
 8007752:	001a      	movs	r2, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	695b      	ldr	r3, [r3, #20]
 8007758:	0019      	movs	r1, r3
 800775a:	0010      	movs	r0, r2
 800775c:	f7f8 fcd2 	bl	8000104 <__udivsi3>
 8007760:	0003      	movs	r3, r0
 8007762:	3305      	adds	r3, #5
 8007764:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	210a      	movs	r1, #10
 800776a:	0018      	movs	r0, r3
 800776c:	f7f8 fcca 	bl	8000104 <__udivsi3>
 8007770:	0003      	movs	r3, r0
 8007772:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	2201      	movs	r2, #1
 8007778:	4013      	ands	r3, r2
 800777a:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800777c:	693a      	ldr	r2, [r7, #16]
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	1ad3      	subs	r3, r2, r3
 8007782:	085b      	lsrs	r3, r3, #1
 8007784:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8007786:	69bb      	ldr	r3, [r7, #24]
 8007788:	021b      	lsls	r3, r3, #8
 800778a:	61bb      	str	r3, [r7, #24]
 800778c:	e003      	b.n	8007796 <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800778e:	2302      	movs	r3, #2
 8007790:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8007792:	2300      	movs	r3, #0
 8007794:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	2b01      	cmp	r3, #1
 800779a:	d902      	bls.n	80077a2 <HAL_I2S_Init+0x15a>
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	2bff      	cmp	r3, #255	; 0xff
 80077a0:	d907      	bls.n	80077b2 <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a6:	2210      	movs	r2, #16
 80077a8:	431a      	orrs	r2, r3
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	e039      	b.n	8007826 <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	691a      	ldr	r2, [r3, #16]
 80077b6:	69bb      	ldr	r3, [r7, #24]
 80077b8:	431a      	orrs	r2, r3
 80077ba:	0011      	movs	r1, r2
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	69fa      	ldr	r2, [r7, #28]
 80077c2:	430a      	orrs	r2, r1
 80077c4:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	69db      	ldr	r3, [r3, #28]
 80077cc:	4a18      	ldr	r2, [pc, #96]	; (8007830 <HAL_I2S_Init+0x1e8>)
 80077ce:	401a      	ands	r2, r3
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6859      	ldr	r1, [r3, #4]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	4319      	orrs	r1, r3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	4319      	orrs	r1, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	699b      	ldr	r3, [r3, #24]
 80077e4:	430b      	orrs	r3, r1
 80077e6:	431a      	orrs	r2, r3
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2180      	movs	r1, #128	; 0x80
 80077ee:	0109      	lsls	r1, r1, #4
 80077f0:	430a      	orrs	r2, r1
 80077f2:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	2b30      	cmp	r3, #48	; 0x30
 80077fa:	d003      	beq.n	8007804 <HAL_I2S_Init+0x1bc>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	2bb0      	cmp	r3, #176	; 0xb0
 8007802:	d108      	bne.n	8007816 <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	69da      	ldr	r2, [r3, #28]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2180      	movs	r1, #128	; 0x80
 8007810:	0149      	lsls	r1, r1, #5
 8007812:	430a      	orrs	r2, r1
 8007814:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2235      	movs	r2, #53	; 0x35
 8007820:	2101      	movs	r1, #1
 8007822:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007824:	2300      	movs	r3, #0
}
 8007826:	0018      	movs	r0, r3
 8007828:	46bd      	mov	sp, r7
 800782a:	b008      	add	sp, #32
 800782c:	bd80      	pop	{r7, pc}
 800782e:	46c0      	nop			; (mov r8, r8)
 8007830:	fffff040 	.word	0xfffff040

08007834 <HAL_I2S_Transmit>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b086      	sub	sp, #24
 8007838:	af00      	add	r7, sp, #0
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	603b      	str	r3, [r7, #0]
 8007840:	1dbb      	adds	r3, r7, #6
 8007842:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d003      	beq.n	8007852 <HAL_I2S_Transmit+0x1e>
 800784a:	1dbb      	adds	r3, r7, #6
 800784c:	881b      	ldrh	r3, [r3, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d101      	bne.n	8007856 <HAL_I2S_Transmit+0x22>
  {
    return  HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	e0e2      	b.n	8007a1c <HAL_I2S_Transmit+0x1e8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2234      	movs	r2, #52	; 0x34
 800785a:	5c9b      	ldrb	r3, [r3, r2]
 800785c:	b2db      	uxtb	r3, r3
 800785e:	2b01      	cmp	r3, #1
 8007860:	d101      	bne.n	8007866 <HAL_I2S_Transmit+0x32>
 8007862:	2302      	movs	r3, #2
 8007864:	e0da      	b.n	8007a1c <HAL_I2S_Transmit+0x1e8>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2234      	movs	r2, #52	; 0x34
 800786a:	2101      	movs	r1, #1
 800786c:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2235      	movs	r2, #53	; 0x35
 8007872:	5c9b      	ldrb	r3, [r3, r2]
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b01      	cmp	r3, #1
 8007878:	d005      	beq.n	8007886 <HAL_I2S_Transmit+0x52>
  {
    __HAL_UNLOCK(hi2s);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2234      	movs	r2, #52	; 0x34
 800787e:	2100      	movs	r1, #0
 8007880:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8007882:	2302      	movs	r3, #2
 8007884:	e0ca      	b.n	8007a1c <HAL_I2S_Transmit+0x1e8>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2235      	movs	r2, #53	; 0x35
 800788a:	2103      	movs	r1, #3
 800788c:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->pTxBuffPtr = pData;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	68ba      	ldr	r2, [r7, #8]
 8007898:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	69db      	ldr	r3, [r3, #28]
 80078a0:	2207      	movs	r2, #7
 80078a2:	4013      	ands	r3, r2
 80078a4:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	2b03      	cmp	r3, #3
 80078aa:	d002      	beq.n	80078b2 <HAL_I2S_Transmit+0x7e>
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	2b05      	cmp	r3, #5
 80078b0:	d10c      	bne.n	80078cc <HAL_I2S_Transmit+0x98>
  {
    hi2s->TxXferSize = (Size << 1U);
 80078b2:	1dbb      	adds	r3, r7, #6
 80078b4:	881b      	ldrh	r3, [r3, #0]
 80078b6:	18db      	adds	r3, r3, r3
 80078b8:	b29a      	uxth	r2, r3
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 80078be:	1dbb      	adds	r3, r7, #6
 80078c0:	881b      	ldrh	r3, [r3, #0]
 80078c2:	18db      	adds	r3, r3, r3
 80078c4:	b29a      	uxth	r2, r3
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	845a      	strh	r2, [r3, #34]	; 0x22
 80078ca:	e007      	b.n	80078dc <HAL_I2S_Transmit+0xa8>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	1dba      	adds	r2, r7, #6
 80078d0:	8812      	ldrh	r2, [r2, #0]
 80078d2:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	1dba      	adds	r2, r7, #6
 80078d8:	8812      	ldrh	r2, [r2, #0]
 80078da:	845a      	strh	r2, [r3, #34]	; 0x22
  }

  tmpreg_cfgr = hi2s->Instance->I2SCFGR;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	69db      	ldr	r3, [r3, #28]
 80078e2:	617b      	str	r3, [r7, #20]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	69da      	ldr	r2, [r3, #28]
 80078ea:	2380      	movs	r3, #128	; 0x80
 80078ec:	00db      	lsls	r3, r3, #3
 80078ee:	401a      	ands	r2, r3
 80078f0:	2380      	movs	r3, #128	; 0x80
 80078f2:	00db      	lsls	r3, r3, #3
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d008      	beq.n	800790a <HAL_I2S_Transmit+0xd6>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	69da      	ldr	r2, [r3, #28]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2180      	movs	r1, #128	; 0x80
 8007904:	00c9      	lsls	r1, r1, #3
 8007906:	430a      	orrs	r2, r1
 8007908:	61da      	str	r2, [r3, #28]
  }

  /* Wait until TXE flag is set */
  if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	68f8      	ldr	r0, [r7, #12]
 800790e:	2201      	movs	r2, #1
 8007910:	2102      	movs	r1, #2
 8007912:	f000 f969 	bl	8007be8 <I2S_WaitFlagStateUntilTimeout>
 8007916:	1e03      	subs	r3, r0, #0
 8007918:	d04d      	beq.n	80079b6 <HAL_I2S_Transmit+0x182>
  {
    /* Set the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800791e:	2201      	movs	r2, #1
 8007920:	431a      	orrs	r2, r3
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	639a      	str	r2, [r3, #56]	; 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2235      	movs	r2, #53	; 0x35
 800792a:	2101      	movs	r1, #1
 800792c:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(hi2s);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2234      	movs	r2, #52	; 0x34
 8007932:	2100      	movs	r1, #0
 8007934:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	e070      	b.n	8007a1c <HAL_I2S_Transmit+0x1e8>
  }

  while (hi2s->TxXferCount > 0U)
  {
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	69db      	ldr	r3, [r3, #28]
 800793e:	881a      	ldrh	r2, [r3, #0]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	60da      	str	r2, [r3, #12]
    hi2s->pTxBuffPtr++;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	69db      	ldr	r3, [r3, #28]
 800794a:	1c9a      	adds	r2, r3, #2
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	61da      	str	r2, [r3, #28]
    hi2s->TxXferCount--;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8007954:	b29b      	uxth	r3, r3
 8007956:	3b01      	subs	r3, #1
 8007958:	b29a      	uxth	r2, r3
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	845a      	strh	r2, [r3, #34]	; 0x22

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	2201      	movs	r2, #1
 8007964:	2102      	movs	r1, #2
 8007966:	f000 f93f 	bl	8007be8 <I2S_WaitFlagStateUntilTimeout>
 800796a:	1e03      	subs	r3, r0, #0
 800796c:	d00f      	beq.n	800798e <HAL_I2S_Transmit+0x15a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007972:	2201      	movs	r2, #1
 8007974:	431a      	orrs	r2, r3
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	639a      	str	r2, [r3, #56]	; 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2235      	movs	r2, #53	; 0x35
 800797e:	2101      	movs	r1, #1
 8007980:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2s);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2234      	movs	r2, #52	; 0x34
 8007986:	2100      	movs	r1, #0
 8007988:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	e046      	b.n	8007a1c <HAL_I2S_Transmit+0x1e8>
    }

    /* Check if an underrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	2208      	movs	r2, #8
 8007996:	4013      	ands	r3, r2
 8007998:	2b08      	cmp	r3, #8
 800799a:	d10c      	bne.n	80079b6 <HAL_I2S_Transmit+0x182>
    {
      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800799c:	2300      	movs	r3, #0
 800799e:	613b      	str	r3, [r7, #16]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	613b      	str	r3, [r7, #16]
 80079a8:	693b      	ldr	r3, [r7, #16]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ae:	2204      	movs	r2, #4
 80079b0:	431a      	orrs	r2, r3
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	639a      	str	r2, [r3, #56]	; 0x38
  while (hi2s->TxXferCount > 0U)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d1bc      	bne.n	800793a <HAL_I2S_Transmit+0x106>
    }
  }

  /* Check if Slave mode is selected */
  if (((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX)
 80079c0:	697a      	ldr	r2, [r7, #20]
 80079c2:	23c0      	movs	r3, #192	; 0xc0
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	4013      	ands	r3, r2
 80079c8:	d007      	beq.n	80079da <HAL_I2S_Transmit+0x1a6>
      || ((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_RX))
 80079ca:	697a      	ldr	r2, [r7, #20]
 80079cc:	23c0      	movs	r3, #192	; 0xc0
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	401a      	ands	r2, r3
 80079d2:	2380      	movs	r3, #128	; 0x80
 80079d4:	005b      	lsls	r3, r3, #1
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d117      	bne.n	8007a0a <HAL_I2S_Transmit+0x1d6>
  {
    /* Wait until Busy flag is reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, Timeout) != HAL_OK)
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	2200      	movs	r2, #0
 80079e0:	2180      	movs	r1, #128	; 0x80
 80079e2:	f000 f901 	bl	8007be8 <I2S_WaitFlagStateUntilTimeout>
 80079e6:	1e03      	subs	r3, r0, #0
 80079e8:	d00f      	beq.n	8007a0a <HAL_I2S_Transmit+0x1d6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ee:	2201      	movs	r2, #1
 80079f0:	431a      	orrs	r2, r3
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	639a      	str	r2, [r3, #56]	; 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2235      	movs	r2, #53	; 0x35
 80079fa:	2101      	movs	r1, #1
 80079fc:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2s);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2234      	movs	r2, #52	; 0x34
 8007a02:	2100      	movs	r1, #0
 8007a04:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	e008      	b.n	8007a1c <HAL_I2S_Transmit+0x1e8>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2235      	movs	r2, #53	; 0x35
 8007a0e:	2101      	movs	r1, #1
 8007a10:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hi2s);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2234      	movs	r2, #52	; 0x34
 8007a16:	2100      	movs	r1, #0
 8007a18:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8007a1a:	2300      	movs	r3, #0
}
 8007a1c:	0018      	movs	r0, r3
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	b006      	add	sp, #24
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hi2s->Instance->CR2;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hi2s->Instance->SR;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	60bb      	str	r3, [r7, #8]

  /* I2S in mode Receiver ------------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	099b      	lsrs	r3, r3, #6
 8007a40:	001a      	movs	r2, r3
 8007a42:	2301      	movs	r3, #1
 8007a44:	4013      	ands	r3, r2
 8007a46:	d10e      	bne.n	8007a66 <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	4013      	ands	r3, r2
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8007a4e:	d00a      	beq.n	8007a66 <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	099b      	lsrs	r3, r3, #6
 8007a54:	001a      	movs	r2, r3
 8007a56:	2301      	movs	r3, #1
 8007a58:	4013      	ands	r3, r2
 8007a5a:	d004      	beq.n	8007a66 <HAL_I2S_IRQHandler+0x42>
  {
    I2S_Receive_IT(hi2s);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	0018      	movs	r0, r3
 8007a60:	f000 f892 	bl	8007b88 <I2S_Receive_IT>
    return;
 8007a64:	e046      	b.n	8007af4 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S in mode Tramitter -----------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_TXE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_TXE) != RESET))
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	085b      	lsrs	r3, r3, #1
 8007a6a:	001a      	movs	r2, r3
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	4013      	ands	r3, r2
 8007a70:	d00a      	beq.n	8007a88 <HAL_I2S_IRQHandler+0x64>
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	09db      	lsrs	r3, r3, #7
 8007a76:	001a      	movs	r2, r3
 8007a78:	2301      	movs	r3, #1
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	d004      	beq.n	8007a88 <HAL_I2S_IRQHandler+0x64>
  {
    I2S_Transmit_IT(hi2s);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	0018      	movs	r0, r3
 8007a82:	f000 f852 	bl	8007b2a <I2S_Transmit_IT>
    return;
 8007a86:	e035      	b.n	8007af4 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S interrupt error -------------------------------------------------*/
  if (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_ERR) != RESET)
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	095b      	lsrs	r3, r3, #5
 8007a8c:	001a      	movs	r2, r3
 8007a8e:	2301      	movs	r3, #1
 8007a90:	4013      	ands	r3, r2
 8007a92:	d02f      	beq.n	8007af4 <HAL_I2S_IRQHandler+0xd0>
  {
    /* I2S Overrun error interrupt occurred ---------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) != RESET)
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	099b      	lsrs	r3, r3, #6
 8007a98:	001a      	movs	r2, r3
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	4013      	ands	r3, r2
 8007a9e:	d00d      	beq.n	8007abc <HAL_I2S_IRQHandler+0x98>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	685a      	ldr	r2, [r3, #4]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	2160      	movs	r1, #96	; 0x60
 8007aac:	438a      	bics	r2, r1
 8007aae:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab4:	2202      	movs	r2, #2
 8007ab6:	431a      	orrs	r2, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_UDR) != RESET)
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	08db      	lsrs	r3, r3, #3
 8007ac0:	001a      	movs	r2, r3
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	4013      	ands	r3, r2
 8007ac6:	d00d      	beq.n	8007ae4 <HAL_I2S_IRQHandler+0xc0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	685a      	ldr	r2, [r3, #4]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	21a0      	movs	r1, #160	; 0xa0
 8007ad4:	438a      	bics	r2, r1
 8007ad6:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007adc:	2204      	movs	r2, #4
 8007ade:	431a      	orrs	r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Set the I2S State ready */
    hi2s->State = HAL_I2S_STATE_READY;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2235      	movs	r2, #53	; 0x35
 8007ae8:	2101      	movs	r1, #1
 8007aea:	5499      	strb	r1, [r3, r2]

    /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->ErrorCallback(hi2s);
#else
    HAL_I2S_ErrorCallback(hi2s);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	0018      	movs	r0, r3
 8007af0:	f000 f813 	bl	8007b1a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007af4:	46bd      	mov	sp, r7
 8007af6:	b004      	add	sp, #16
 8007af8:	bd80      	pop	{r7, pc}

08007afa <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007afa:	b580      	push	{r7, lr}
 8007afc:	b082      	sub	sp, #8
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8007b02:	46c0      	nop			; (mov r8, r8)
 8007b04:	46bd      	mov	sp, r7
 8007b06:	b002      	add	sp, #8
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007b0a:	b580      	push	{r7, lr}
 8007b0c:	b082      	sub	sp, #8
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8007b12:	46c0      	nop			; (mov r8, r8)
 8007b14:	46bd      	mov	sp, r7
 8007b16:	b002      	add	sp, #8
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b082      	sub	sp, #8
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8007b22:	46c0      	nop			; (mov r8, r8)
 8007b24:	46bd      	mov	sp, r7
 8007b26:	b002      	add	sp, #8
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b082      	sub	sp, #8
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	69db      	ldr	r3, [r3, #28]
 8007b36:	881a      	ldrh	r2, [r3, #0]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	69db      	ldr	r3, [r3, #28]
 8007b42:	1c9a      	adds	r2, r3, #2
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	61da      	str	r2, [r3, #28]
  hi2s->TxXferCount--;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	3b01      	subs	r3, #1
 8007b50:	b29a      	uxth	r2, r3
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	845a      	strh	r2, [r3, #34]	; 0x22

  if (hi2s->TxXferCount == 0U)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d10f      	bne.n	8007b80 <I2S_Transmit_IT+0x56>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	685a      	ldr	r2, [r3, #4]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	21a0      	movs	r1, #160	; 0xa0
 8007b6c:	438a      	bics	r2, r1
 8007b6e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2235      	movs	r2, #53	; 0x35
 8007b74:	2101      	movs	r1, #1
 8007b76:	5499      	strb	r1, [r3, r2]
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	0018      	movs	r0, r3
 8007b7c:	f7ff ffbd 	bl	8007afa <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007b80:	46c0      	nop			; (mov r8, r8)
 8007b82:	46bd      	mov	sp, r7
 8007b84:	b002      	add	sp, #8
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	68da      	ldr	r2, [r3, #12]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9a:	b292      	uxth	r2, r2
 8007b9c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba2:	1c9a      	adds	r2, r3, #2
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->RxXferCount--;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	3b01      	subs	r3, #1
 8007bb0:	b29a      	uxth	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->RxXferCount == 0U)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d10f      	bne.n	8007be0 <I2S_Receive_IT+0x58>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	685a      	ldr	r2, [r3, #4]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2160      	movs	r1, #96	; 0x60
 8007bcc:	438a      	bics	r2, r1
 8007bce:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2235      	movs	r2, #53	; 0x35
 8007bd4:	2101      	movs	r1, #1
 8007bd6:	5499      	strb	r1, [r3, r2]
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	0018      	movs	r0, r3
 8007bdc:	f7ff ff95 	bl	8007b0a <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007be0:	46c0      	nop			; (mov r8, r8)
 8007be2:	46bd      	mov	sp, r7
 8007be4:	b002      	add	sp, #8
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b086      	sub	sp, #24
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	60f8      	str	r0, [r7, #12]
 8007bf0:	60b9      	str	r1, [r7, #8]
 8007bf2:	603b      	str	r3, [r7, #0]
 8007bf4:	1dfb      	adds	r3, r7, #7
 8007bf6:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8007bf8:	f7fd fbec 	bl	80053d4 <HAL_GetTick>
 8007bfc:	0003      	movs	r3, r0
 8007bfe:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8007c00:	e017      	b.n	8007c32 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	3301      	adds	r3, #1
 8007c06:	d014      	beq.n	8007c32 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8007c08:	f7fd fbe4 	bl	80053d4 <HAL_GetTick>
 8007c0c:	0002      	movs	r2, r0
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	1ad3      	subs	r3, r2, r3
 8007c12:	683a      	ldr	r2, [r7, #0]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d902      	bls.n	8007c1e <I2S_WaitFlagStateUntilTimeout+0x36>
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d109      	bne.n	8007c32 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2235      	movs	r2, #53	; 0x35
 8007c22:	2101      	movs	r1, #1
 8007c24:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2234      	movs	r2, #52	; 0x34
 8007c2a:	2100      	movs	r1, #0
 8007c2c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007c2e:	2303      	movs	r3, #3
 8007c30:	e00f      	b.n	8007c52 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	68ba      	ldr	r2, [r7, #8]
 8007c3a:	4013      	ands	r3, r2
 8007c3c:	68ba      	ldr	r2, [r7, #8]
 8007c3e:	1ad3      	subs	r3, r2, r3
 8007c40:	425a      	negs	r2, r3
 8007c42:	4153      	adcs	r3, r2
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	001a      	movs	r2, r3
 8007c48:	1dfb      	adds	r3, r7, #7
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d1d8      	bne.n	8007c02 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	0018      	movs	r0, r3
 8007c54:	46bd      	mov	sp, r7
 8007c56:	b006      	add	sp, #24
 8007c58:	bd80      	pop	{r7, pc}
	...

08007c5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8007c64:	4b19      	ldr	r3, [pc, #100]	; (8007ccc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a19      	ldr	r2, [pc, #100]	; (8007cd0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8007c6a:	4013      	ands	r3, r2
 8007c6c:	0019      	movs	r1, r3
 8007c6e:	4b17      	ldr	r3, [pc, #92]	; (8007ccc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	430a      	orrs	r2, r1
 8007c74:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	2380      	movs	r3, #128	; 0x80
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d11f      	bne.n	8007cc0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8007c80:	4b14      	ldr	r3, [pc, #80]	; (8007cd4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	0013      	movs	r3, r2
 8007c86:	005b      	lsls	r3, r3, #1
 8007c88:	189b      	adds	r3, r3, r2
 8007c8a:	005b      	lsls	r3, r3, #1
 8007c8c:	4912      	ldr	r1, [pc, #72]	; (8007cd8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8007c8e:	0018      	movs	r0, r3
 8007c90:	f7f8 fa38 	bl	8000104 <__udivsi3>
 8007c94:	0003      	movs	r3, r0
 8007c96:	3301      	adds	r3, #1
 8007c98:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007c9a:	e008      	b.n	8007cae <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d003      	beq.n	8007caa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	3b01      	subs	r3, #1
 8007ca6:	60fb      	str	r3, [r7, #12]
 8007ca8:	e001      	b.n	8007cae <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8007caa:	2303      	movs	r3, #3
 8007cac:	e009      	b.n	8007cc2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007cae:	4b07      	ldr	r3, [pc, #28]	; (8007ccc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007cb0:	695a      	ldr	r2, [r3, #20]
 8007cb2:	2380      	movs	r3, #128	; 0x80
 8007cb4:	00db      	lsls	r3, r3, #3
 8007cb6:	401a      	ands	r2, r3
 8007cb8:	2380      	movs	r3, #128	; 0x80
 8007cba:	00db      	lsls	r3, r3, #3
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d0ed      	beq.n	8007c9c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	0018      	movs	r0, r3
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	b004      	add	sp, #16
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	46c0      	nop			; (mov r8, r8)
 8007ccc:	40007000 	.word	0x40007000
 8007cd0:	fffff9ff 	.word	0xfffff9ff
 8007cd4:	20003134 	.word	0x20003134
 8007cd8:	000f4240 	.word	0x000f4240

08007cdc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8007ce0:	4b03      	ldr	r3, [pc, #12]	; (8007cf0 <LL_RCC_GetAPB1Prescaler+0x14>)
 8007ce2:	689a      	ldr	r2, [r3, #8]
 8007ce4:	23e0      	movs	r3, #224	; 0xe0
 8007ce6:	01db      	lsls	r3, r3, #7
 8007ce8:	4013      	ands	r3, r2
}
 8007cea:	0018      	movs	r0, r3
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	40021000 	.word	0x40021000

08007cf4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b088      	sub	sp, #32
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d101      	bne.n	8007d06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	e304      	b.n	8008310 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	4013      	ands	r3, r2
 8007d0e:	d100      	bne.n	8007d12 <HAL_RCC_OscConfig+0x1e>
 8007d10:	e07c      	b.n	8007e0c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d12:	4bc3      	ldr	r3, [pc, #780]	; (8008020 <HAL_RCC_OscConfig+0x32c>)
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	2238      	movs	r2, #56	; 0x38
 8007d18:	4013      	ands	r3, r2
 8007d1a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007d1c:	4bc0      	ldr	r3, [pc, #768]	; (8008020 <HAL_RCC_OscConfig+0x32c>)
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	2203      	movs	r2, #3
 8007d22:	4013      	ands	r3, r2
 8007d24:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8007d26:	69bb      	ldr	r3, [r7, #24]
 8007d28:	2b10      	cmp	r3, #16
 8007d2a:	d102      	bne.n	8007d32 <HAL_RCC_OscConfig+0x3e>
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	2b03      	cmp	r3, #3
 8007d30:	d002      	beq.n	8007d38 <HAL_RCC_OscConfig+0x44>
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	2b08      	cmp	r3, #8
 8007d36:	d10b      	bne.n	8007d50 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d38:	4bb9      	ldr	r3, [pc, #740]	; (8008020 <HAL_RCC_OscConfig+0x32c>)
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	2380      	movs	r3, #128	; 0x80
 8007d3e:	029b      	lsls	r3, r3, #10
 8007d40:	4013      	ands	r3, r2
 8007d42:	d062      	beq.n	8007e0a <HAL_RCC_OscConfig+0x116>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d15e      	bne.n	8007e0a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e2df      	b.n	8008310 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	685a      	ldr	r2, [r3, #4]
 8007d54:	2380      	movs	r3, #128	; 0x80
 8007d56:	025b      	lsls	r3, r3, #9
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d107      	bne.n	8007d6c <HAL_RCC_OscConfig+0x78>
 8007d5c:	4bb0      	ldr	r3, [pc, #704]	; (8008020 <HAL_RCC_OscConfig+0x32c>)
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	4baf      	ldr	r3, [pc, #700]	; (8008020 <HAL_RCC_OscConfig+0x32c>)
 8007d62:	2180      	movs	r1, #128	; 0x80
 8007d64:	0249      	lsls	r1, r1, #9
 8007d66:	430a      	orrs	r2, r1
 8007d68:	601a      	str	r2, [r3, #0]
 8007d6a:	e020      	b.n	8007dae <HAL_RCC_OscConfig+0xba>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	685a      	ldr	r2, [r3, #4]
 8007d70:	23a0      	movs	r3, #160	; 0xa0
 8007d72:	02db      	lsls	r3, r3, #11
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d10e      	bne.n	8007d96 <HAL_RCC_OscConfig+0xa2>
 8007d78:	4ba9      	ldr	r3, [pc, #676]	; (8008020 <HAL_RCC_OscConfig+0x32c>)
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	4ba8      	ldr	r3, [pc, #672]	; (8008020 <HAL_RCC_OscConfig+0x32c>)
 8007d7e:	2180      	movs	r1, #128	; 0x80
 8007d80:	02c9      	lsls	r1, r1, #11
 8007d82:	430a      	orrs	r2, r1
 8007d84:	601a      	str	r2, [r3, #0]
 8007d86:	4ba6      	ldr	r3, [pc, #664]	; (8008020 <HAL_RCC_OscConfig+0x32c>)
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	4ba5      	ldr	r3, [pc, #660]	; (8008020 <HAL_RCC_OscConfig+0x32c>)
 8007d8c:	2180      	movs	r1, #128	; 0x80
 8007d8e:	0249      	lsls	r1, r1, #9
 8007d90:	430a      	orrs	r2, r1
 8007d92:	601a      	str	r2, [r3, #0]
 8007d94:	e00b      	b.n	8007dae <HAL_RCC_OscConfig+0xba>
 8007d96:	4ba2      	ldr	r3, [pc, #648]	; (8008020 <HAL_RCC_OscConfig+0x32c>)
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	4ba1      	ldr	r3, [pc, #644]	; (8008020 <HAL_RCC_OscConfig+0x32c>)
 8007d9c:	49a1      	ldr	r1, [pc, #644]	; (8008024 <HAL_RCC_OscConfig+0x330>)
 8007d9e:	400a      	ands	r2, r1
 8007da0:	601a      	str	r2, [r3, #0]
 8007da2:	4b9f      	ldr	r3, [pc, #636]	; (8008020 <HAL_RCC_OscConfig+0x32c>)
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	4b9e      	ldr	r3, [pc, #632]	; (8008020 <HAL_RCC_OscConfig+0x32c>)
 8007da8:	499f      	ldr	r1, [pc, #636]	; (8008028 <HAL_RCC_OscConfig+0x334>)
 8007daa:	400a      	ands	r2, r1
 8007dac:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d014      	beq.n	8007de0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007db6:	f7fd fb0d 	bl	80053d4 <HAL_GetTick>
 8007dba:	0003      	movs	r3, r0
 8007dbc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007dbe:	e008      	b.n	8007dd2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007dc0:	f7fd fb08 	bl	80053d4 <HAL_GetTick>
 8007dc4:	0002      	movs	r2, r0
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	1ad3      	subs	r3, r2, r3
 8007dca:	2b64      	cmp	r3, #100	; 0x64
 8007dcc:	d901      	bls.n	8007dd2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8007dce:	2303      	movs	r3, #3
 8007dd0:	e29e      	b.n	8008310 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007dd2:	4b93      	ldr	r3, [pc, #588]	; (8008020 <HAL_RCC_OscConfig+0x32c>)
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	2380      	movs	r3, #128	; 0x80
 8007dd8:	029b      	lsls	r3, r3, #10
 8007dda:	4013      	ands	r3, r2
 8007ddc:	d0f0      	beq.n	8007dc0 <HAL_RCC_OscConfig+0xcc>
 8007dde:	e015      	b.n	8007e0c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007de0:	f7fd faf8 	bl	80053d4 <HAL_GetTick>
 8007de4:	0003      	movs	r3, r0
 8007de6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007de8:	e008      	b.n	8007dfc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007dea:	f7fd faf3 	bl	80053d4 <HAL_GetTick>
 8007dee:	0002      	movs	r2, r0
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	1ad3      	subs	r3, r2, r3
 8007df4:	2b64      	cmp	r3, #100	; 0x64
 8007df6:	d901      	bls.n	8007dfc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007df8:	2303      	movs	r3, #3
 8007dfa:	e289      	b.n	8008310 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007dfc:	4b88      	ldr	r3, [pc, #544]	; (8008020 <HAL_RCC_OscConfig+0x32c>)
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	2380      	movs	r3, #128	; 0x80
 8007e02:	029b      	lsls	r3, r3, #10
 8007e04:	4013      	ands	r3, r2
 8007e06:	d1f0      	bne.n	8007dea <HAL_RCC_OscConfig+0xf6>
 8007e08:	e000      	b.n	8007e0c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e0a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	2202      	movs	r2, #2
 8007e12:	4013      	ands	r3, r2
 8007e14:	d100      	bne.n	8007e18 <HAL_RCC_OscConfig+0x124>
 8007e16:	e099      	b.n	8007f4c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e18:	4b81      	ldr	r3, [pc, #516]	; (8008020 <HAL_RCC_OscConfig+0x32c>)
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	2238      	movs	r2, #56	; 0x38
 8007e1e:	4013      	ands	r3, r2
 8007e20:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007e22:	4b7f      	ldr	r3, [pc, #508]	; (8008020 <HAL_RCC_OscConfig+0x32c>)
 8007e24:	68db      	ldr	r3, [r3, #12]
 8007e26:	2203      	movs	r2, #3
 8007e28:	4013      	ands	r3, r2
 8007e2a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8007e2c:	69bb      	ldr	r3, [r7, #24]
 8007e2e:	2b10      	cmp	r3, #16
 8007e30:	d102      	bne.n	8007e38 <HAL_RCC_OscConfig+0x144>
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	2b02      	cmp	r3, #2
 8007e36:	d002      	beq.n	8007e3e <HAL_RCC_OscConfig+0x14a>
 8007e38:	69bb      	ldr	r3, [r7, #24]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d135      	bne.n	8007eaa <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e3e:	4b78      	ldr	r3, [pc, #480]	; (8008020 <HAL_RCC_OscConfig+0x32c>)
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	2380      	movs	r3, #128	; 0x80
 8007e44:	00db      	lsls	r3, r3, #3
 8007e46:	4013      	ands	r3, r2
 8007e48:	d005      	beq.n	8007e56 <HAL_RCC_OscConfig+0x162>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d101      	bne.n	8007e56 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	e25c      	b.n	8008310 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e56:	4b72      	ldr	r3, [pc, #456]	; (8008020 <HAL_RCC_OscConfig+0x32c>)
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	4a74      	ldr	r2, [pc, #464]	; (800802c <HAL_RCC_OscConfig+0x338>)
 8007e5c:	4013      	ands	r3, r2
 8007e5e:	0019      	movs	r1, r3
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	695b      	ldr	r3, [r3, #20]
 8007e64:	021a      	lsls	r2, r3, #8
 8007e66:	4b6e      	ldr	r3, [pc, #440]	; (8008020 <HAL_RCC_OscConfig+0x32c>)
 8007e68:	430a      	orrs	r2, r1
 8007e6a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007e6c:	69bb      	ldr	r3, [r7, #24]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d112      	bne.n	8007e98 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8007e72:	4b6b      	ldr	r3, [pc, #428]	; (8008020 <HAL_RCC_OscConfig+0x32c>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a6e      	ldr	r2, [pc, #440]	; (8008030 <HAL_RCC_OscConfig+0x33c>)
 8007e78:	4013      	ands	r3, r2
 8007e7a:	0019      	movs	r1, r3
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	691a      	ldr	r2, [r3, #16]
 8007e80:	4b67      	ldr	r3, [pc, #412]	; (8008020 <HAL_RCC_OscConfig+0x32c>)
 8007e82:	430a      	orrs	r2, r1
 8007e84:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8007e86:	4b66      	ldr	r3, [pc, #408]	; (8008020 <HAL_RCC_OscConfig+0x32c>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	0adb      	lsrs	r3, r3, #11
 8007e8c:	2207      	movs	r2, #7
 8007e8e:	4013      	ands	r3, r2
 8007e90:	4a68      	ldr	r2, [pc, #416]	; (8008034 <HAL_RCC_OscConfig+0x340>)
 8007e92:	40da      	lsrs	r2, r3
 8007e94:	4b68      	ldr	r3, [pc, #416]	; (8008038 <HAL_RCC_OscConfig+0x344>)
 8007e96:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007e98:	4b68      	ldr	r3, [pc, #416]	; (800803c <HAL_RCC_OscConfig+0x348>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	0018      	movs	r0, r3
 8007e9e:	f7fd fa3d 	bl	800531c <HAL_InitTick>
 8007ea2:	1e03      	subs	r3, r0, #0
 8007ea4:	d051      	beq.n	8007f4a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e232      	b.n	8008310 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d030      	beq.n	8007f14 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8007eb2:	4b5b      	ldr	r3, [pc, #364]	; (8008020 <HAL_RCC_OscConfig+0x32c>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a5e      	ldr	r2, [pc, #376]	; (8008030 <HAL_RCC_OscConfig+0x33c>)
 8007eb8:	4013      	ands	r3, r2
 8007eba:	0019      	movs	r1, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	691a      	ldr	r2, [r3, #16]
 8007ec0:	4b57      	ldr	r3, [pc, #348]	; (8008020 <HAL_RCC_OscConfig+0x32c>)
 8007ec2:	430a      	orrs	r2, r1
 8007ec4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8007ec6:	4b56      	ldr	r3, [pc, #344]	; (8008020 <HAL_RCC_OscConfig+0x32c>)
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	4b55      	ldr	r3, [pc, #340]	; (8008020 <HAL_RCC_OscConfig+0x32c>)
 8007ecc:	2180      	movs	r1, #128	; 0x80
 8007ece:	0049      	lsls	r1, r1, #1
 8007ed0:	430a      	orrs	r2, r1
 8007ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ed4:	f7fd fa7e 	bl	80053d4 <HAL_GetTick>
 8007ed8:	0003      	movs	r3, r0
 8007eda:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007edc:	e008      	b.n	8007ef0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ede:	f7fd fa79 	bl	80053d4 <HAL_GetTick>
 8007ee2:	0002      	movs	r2, r0
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	1ad3      	subs	r3, r2, r3
 8007ee8:	2b02      	cmp	r3, #2
 8007eea:	d901      	bls.n	8007ef0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007eec:	2303      	movs	r3, #3
 8007eee:	e20f      	b.n	8008310 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007ef0:	4b4b      	ldr	r3, [pc, #300]	; (8008020 <HAL_RCC_OscConfig+0x32c>)
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	2380      	movs	r3, #128	; 0x80
 8007ef6:	00db      	lsls	r3, r3, #3
 8007ef8:	4013      	ands	r3, r2
 8007efa:	d0f0      	beq.n	8007ede <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007efc:	4b48      	ldr	r3, [pc, #288]	; (8008020 <HAL_RCC_OscConfig+0x32c>)
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	4a4a      	ldr	r2, [pc, #296]	; (800802c <HAL_RCC_OscConfig+0x338>)
 8007f02:	4013      	ands	r3, r2
 8007f04:	0019      	movs	r1, r3
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	695b      	ldr	r3, [r3, #20]
 8007f0a:	021a      	lsls	r2, r3, #8
 8007f0c:	4b44      	ldr	r3, [pc, #272]	; (8008020 <HAL_RCC_OscConfig+0x32c>)
 8007f0e:	430a      	orrs	r2, r1
 8007f10:	605a      	str	r2, [r3, #4]
 8007f12:	e01b      	b.n	8007f4c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8007f14:	4b42      	ldr	r3, [pc, #264]	; (8008020 <HAL_RCC_OscConfig+0x32c>)
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	4b41      	ldr	r3, [pc, #260]	; (8008020 <HAL_RCC_OscConfig+0x32c>)
 8007f1a:	4949      	ldr	r1, [pc, #292]	; (8008040 <HAL_RCC_OscConfig+0x34c>)
 8007f1c:	400a      	ands	r2, r1
 8007f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f20:	f7fd fa58 	bl	80053d4 <HAL_GetTick>
 8007f24:	0003      	movs	r3, r0
 8007f26:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007f28:	e008      	b.n	8007f3c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f2a:	f7fd fa53 	bl	80053d4 <HAL_GetTick>
 8007f2e:	0002      	movs	r2, r0
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	1ad3      	subs	r3, r2, r3
 8007f34:	2b02      	cmp	r3, #2
 8007f36:	d901      	bls.n	8007f3c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007f38:	2303      	movs	r3, #3
 8007f3a:	e1e9      	b.n	8008310 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007f3c:	4b38      	ldr	r3, [pc, #224]	; (8008020 <HAL_RCC_OscConfig+0x32c>)
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	2380      	movs	r3, #128	; 0x80
 8007f42:	00db      	lsls	r3, r3, #3
 8007f44:	4013      	ands	r3, r2
 8007f46:	d1f0      	bne.n	8007f2a <HAL_RCC_OscConfig+0x236>
 8007f48:	e000      	b.n	8007f4c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f4a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2208      	movs	r2, #8
 8007f52:	4013      	ands	r3, r2
 8007f54:	d047      	beq.n	8007fe6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007f56:	4b32      	ldr	r3, [pc, #200]	; (8008020 <HAL_RCC_OscConfig+0x32c>)
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	2238      	movs	r2, #56	; 0x38
 8007f5c:	4013      	ands	r3, r2
 8007f5e:	2b18      	cmp	r3, #24
 8007f60:	d10a      	bne.n	8007f78 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8007f62:	4b2f      	ldr	r3, [pc, #188]	; (8008020 <HAL_RCC_OscConfig+0x32c>)
 8007f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f66:	2202      	movs	r2, #2
 8007f68:	4013      	ands	r3, r2
 8007f6a:	d03c      	beq.n	8007fe6 <HAL_RCC_OscConfig+0x2f2>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	699b      	ldr	r3, [r3, #24]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d138      	bne.n	8007fe6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	e1cb      	b.n	8008310 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	699b      	ldr	r3, [r3, #24]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d019      	beq.n	8007fb4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8007f80:	4b27      	ldr	r3, [pc, #156]	; (8008020 <HAL_RCC_OscConfig+0x32c>)
 8007f82:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007f84:	4b26      	ldr	r3, [pc, #152]	; (8008020 <HAL_RCC_OscConfig+0x32c>)
 8007f86:	2101      	movs	r1, #1
 8007f88:	430a      	orrs	r2, r1
 8007f8a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f8c:	f7fd fa22 	bl	80053d4 <HAL_GetTick>
 8007f90:	0003      	movs	r3, r0
 8007f92:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007f94:	e008      	b.n	8007fa8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f96:	f7fd fa1d 	bl	80053d4 <HAL_GetTick>
 8007f9a:	0002      	movs	r2, r0
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	1ad3      	subs	r3, r2, r3
 8007fa0:	2b02      	cmp	r3, #2
 8007fa2:	d901      	bls.n	8007fa8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8007fa4:	2303      	movs	r3, #3
 8007fa6:	e1b3      	b.n	8008310 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007fa8:	4b1d      	ldr	r3, [pc, #116]	; (8008020 <HAL_RCC_OscConfig+0x32c>)
 8007faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fac:	2202      	movs	r2, #2
 8007fae:	4013      	ands	r3, r2
 8007fb0:	d0f1      	beq.n	8007f96 <HAL_RCC_OscConfig+0x2a2>
 8007fb2:	e018      	b.n	8007fe6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8007fb4:	4b1a      	ldr	r3, [pc, #104]	; (8008020 <HAL_RCC_OscConfig+0x32c>)
 8007fb6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007fb8:	4b19      	ldr	r3, [pc, #100]	; (8008020 <HAL_RCC_OscConfig+0x32c>)
 8007fba:	2101      	movs	r1, #1
 8007fbc:	438a      	bics	r2, r1
 8007fbe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fc0:	f7fd fa08 	bl	80053d4 <HAL_GetTick>
 8007fc4:	0003      	movs	r3, r0
 8007fc6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007fc8:	e008      	b.n	8007fdc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007fca:	f7fd fa03 	bl	80053d4 <HAL_GetTick>
 8007fce:	0002      	movs	r2, r0
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	1ad3      	subs	r3, r2, r3
 8007fd4:	2b02      	cmp	r3, #2
 8007fd6:	d901      	bls.n	8007fdc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8007fd8:	2303      	movs	r3, #3
 8007fda:	e199      	b.n	8008310 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007fdc:	4b10      	ldr	r3, [pc, #64]	; (8008020 <HAL_RCC_OscConfig+0x32c>)
 8007fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fe0:	2202      	movs	r2, #2
 8007fe2:	4013      	ands	r3, r2
 8007fe4:	d1f1      	bne.n	8007fca <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	2204      	movs	r2, #4
 8007fec:	4013      	ands	r3, r2
 8007fee:	d100      	bne.n	8007ff2 <HAL_RCC_OscConfig+0x2fe>
 8007ff0:	e0c6      	b.n	8008180 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007ff2:	231f      	movs	r3, #31
 8007ff4:	18fb      	adds	r3, r7, r3
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8007ffa:	4b09      	ldr	r3, [pc, #36]	; (8008020 <HAL_RCC_OscConfig+0x32c>)
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	2238      	movs	r2, #56	; 0x38
 8008000:	4013      	ands	r3, r2
 8008002:	2b20      	cmp	r3, #32
 8008004:	d11e      	bne.n	8008044 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8008006:	4b06      	ldr	r3, [pc, #24]	; (8008020 <HAL_RCC_OscConfig+0x32c>)
 8008008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800800a:	2202      	movs	r2, #2
 800800c:	4013      	ands	r3, r2
 800800e:	d100      	bne.n	8008012 <HAL_RCC_OscConfig+0x31e>
 8008010:	e0b6      	b.n	8008180 <HAL_RCC_OscConfig+0x48c>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d000      	beq.n	800801c <HAL_RCC_OscConfig+0x328>
 800801a:	e0b1      	b.n	8008180 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800801c:	2301      	movs	r3, #1
 800801e:	e177      	b.n	8008310 <HAL_RCC_OscConfig+0x61c>
 8008020:	40021000 	.word	0x40021000
 8008024:	fffeffff 	.word	0xfffeffff
 8008028:	fffbffff 	.word	0xfffbffff
 800802c:	ffff80ff 	.word	0xffff80ff
 8008030:	ffffc7ff 	.word	0xffffc7ff
 8008034:	00f42400 	.word	0x00f42400
 8008038:	20003134 	.word	0x20003134
 800803c:	20003138 	.word	0x20003138
 8008040:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008044:	4bb4      	ldr	r3, [pc, #720]	; (8008318 <HAL_RCC_OscConfig+0x624>)
 8008046:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008048:	2380      	movs	r3, #128	; 0x80
 800804a:	055b      	lsls	r3, r3, #21
 800804c:	4013      	ands	r3, r2
 800804e:	d101      	bne.n	8008054 <HAL_RCC_OscConfig+0x360>
 8008050:	2301      	movs	r3, #1
 8008052:	e000      	b.n	8008056 <HAL_RCC_OscConfig+0x362>
 8008054:	2300      	movs	r3, #0
 8008056:	2b00      	cmp	r3, #0
 8008058:	d011      	beq.n	800807e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800805a:	4baf      	ldr	r3, [pc, #700]	; (8008318 <HAL_RCC_OscConfig+0x624>)
 800805c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800805e:	4bae      	ldr	r3, [pc, #696]	; (8008318 <HAL_RCC_OscConfig+0x624>)
 8008060:	2180      	movs	r1, #128	; 0x80
 8008062:	0549      	lsls	r1, r1, #21
 8008064:	430a      	orrs	r2, r1
 8008066:	63da      	str	r2, [r3, #60]	; 0x3c
 8008068:	4bab      	ldr	r3, [pc, #684]	; (8008318 <HAL_RCC_OscConfig+0x624>)
 800806a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800806c:	2380      	movs	r3, #128	; 0x80
 800806e:	055b      	lsls	r3, r3, #21
 8008070:	4013      	ands	r3, r2
 8008072:	60fb      	str	r3, [r7, #12]
 8008074:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8008076:	231f      	movs	r3, #31
 8008078:	18fb      	adds	r3, r7, r3
 800807a:	2201      	movs	r2, #1
 800807c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800807e:	4ba7      	ldr	r3, [pc, #668]	; (800831c <HAL_RCC_OscConfig+0x628>)
 8008080:	681a      	ldr	r2, [r3, #0]
 8008082:	2380      	movs	r3, #128	; 0x80
 8008084:	005b      	lsls	r3, r3, #1
 8008086:	4013      	ands	r3, r2
 8008088:	d11a      	bne.n	80080c0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800808a:	4ba4      	ldr	r3, [pc, #656]	; (800831c <HAL_RCC_OscConfig+0x628>)
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	4ba3      	ldr	r3, [pc, #652]	; (800831c <HAL_RCC_OscConfig+0x628>)
 8008090:	2180      	movs	r1, #128	; 0x80
 8008092:	0049      	lsls	r1, r1, #1
 8008094:	430a      	orrs	r2, r1
 8008096:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8008098:	f7fd f99c 	bl	80053d4 <HAL_GetTick>
 800809c:	0003      	movs	r3, r0
 800809e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80080a0:	e008      	b.n	80080b4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080a2:	f7fd f997 	bl	80053d4 <HAL_GetTick>
 80080a6:	0002      	movs	r2, r0
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	1ad3      	subs	r3, r2, r3
 80080ac:	2b02      	cmp	r3, #2
 80080ae:	d901      	bls.n	80080b4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80080b0:	2303      	movs	r3, #3
 80080b2:	e12d      	b.n	8008310 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80080b4:	4b99      	ldr	r3, [pc, #612]	; (800831c <HAL_RCC_OscConfig+0x628>)
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	2380      	movs	r3, #128	; 0x80
 80080ba:	005b      	lsls	r3, r3, #1
 80080bc:	4013      	ands	r3, r2
 80080be:	d0f0      	beq.n	80080a2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d106      	bne.n	80080d6 <HAL_RCC_OscConfig+0x3e2>
 80080c8:	4b93      	ldr	r3, [pc, #588]	; (8008318 <HAL_RCC_OscConfig+0x624>)
 80080ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80080cc:	4b92      	ldr	r3, [pc, #584]	; (8008318 <HAL_RCC_OscConfig+0x624>)
 80080ce:	2101      	movs	r1, #1
 80080d0:	430a      	orrs	r2, r1
 80080d2:	65da      	str	r2, [r3, #92]	; 0x5c
 80080d4:	e01c      	b.n	8008110 <HAL_RCC_OscConfig+0x41c>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	2b05      	cmp	r3, #5
 80080dc:	d10c      	bne.n	80080f8 <HAL_RCC_OscConfig+0x404>
 80080de:	4b8e      	ldr	r3, [pc, #568]	; (8008318 <HAL_RCC_OscConfig+0x624>)
 80080e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80080e2:	4b8d      	ldr	r3, [pc, #564]	; (8008318 <HAL_RCC_OscConfig+0x624>)
 80080e4:	2104      	movs	r1, #4
 80080e6:	430a      	orrs	r2, r1
 80080e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80080ea:	4b8b      	ldr	r3, [pc, #556]	; (8008318 <HAL_RCC_OscConfig+0x624>)
 80080ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80080ee:	4b8a      	ldr	r3, [pc, #552]	; (8008318 <HAL_RCC_OscConfig+0x624>)
 80080f0:	2101      	movs	r1, #1
 80080f2:	430a      	orrs	r2, r1
 80080f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80080f6:	e00b      	b.n	8008110 <HAL_RCC_OscConfig+0x41c>
 80080f8:	4b87      	ldr	r3, [pc, #540]	; (8008318 <HAL_RCC_OscConfig+0x624>)
 80080fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80080fc:	4b86      	ldr	r3, [pc, #536]	; (8008318 <HAL_RCC_OscConfig+0x624>)
 80080fe:	2101      	movs	r1, #1
 8008100:	438a      	bics	r2, r1
 8008102:	65da      	str	r2, [r3, #92]	; 0x5c
 8008104:	4b84      	ldr	r3, [pc, #528]	; (8008318 <HAL_RCC_OscConfig+0x624>)
 8008106:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008108:	4b83      	ldr	r3, [pc, #524]	; (8008318 <HAL_RCC_OscConfig+0x624>)
 800810a:	2104      	movs	r1, #4
 800810c:	438a      	bics	r2, r1
 800810e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d014      	beq.n	8008142 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008118:	f7fd f95c 	bl	80053d4 <HAL_GetTick>
 800811c:	0003      	movs	r3, r0
 800811e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008120:	e009      	b.n	8008136 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008122:	f7fd f957 	bl	80053d4 <HAL_GetTick>
 8008126:	0002      	movs	r2, r0
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	1ad3      	subs	r3, r2, r3
 800812c:	4a7c      	ldr	r2, [pc, #496]	; (8008320 <HAL_RCC_OscConfig+0x62c>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d901      	bls.n	8008136 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8008132:	2303      	movs	r3, #3
 8008134:	e0ec      	b.n	8008310 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008136:	4b78      	ldr	r3, [pc, #480]	; (8008318 <HAL_RCC_OscConfig+0x624>)
 8008138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800813a:	2202      	movs	r2, #2
 800813c:	4013      	ands	r3, r2
 800813e:	d0f0      	beq.n	8008122 <HAL_RCC_OscConfig+0x42e>
 8008140:	e013      	b.n	800816a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008142:	f7fd f947 	bl	80053d4 <HAL_GetTick>
 8008146:	0003      	movs	r3, r0
 8008148:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800814a:	e009      	b.n	8008160 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800814c:	f7fd f942 	bl	80053d4 <HAL_GetTick>
 8008150:	0002      	movs	r2, r0
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	1ad3      	subs	r3, r2, r3
 8008156:	4a72      	ldr	r2, [pc, #456]	; (8008320 <HAL_RCC_OscConfig+0x62c>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d901      	bls.n	8008160 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800815c:	2303      	movs	r3, #3
 800815e:	e0d7      	b.n	8008310 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008160:	4b6d      	ldr	r3, [pc, #436]	; (8008318 <HAL_RCC_OscConfig+0x624>)
 8008162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008164:	2202      	movs	r2, #2
 8008166:	4013      	ands	r3, r2
 8008168:	d1f0      	bne.n	800814c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800816a:	231f      	movs	r3, #31
 800816c:	18fb      	adds	r3, r7, r3
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	2b01      	cmp	r3, #1
 8008172:	d105      	bne.n	8008180 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8008174:	4b68      	ldr	r3, [pc, #416]	; (8008318 <HAL_RCC_OscConfig+0x624>)
 8008176:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008178:	4b67      	ldr	r3, [pc, #412]	; (8008318 <HAL_RCC_OscConfig+0x624>)
 800817a:	496a      	ldr	r1, [pc, #424]	; (8008324 <HAL_RCC_OscConfig+0x630>)
 800817c:	400a      	ands	r2, r1
 800817e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	69db      	ldr	r3, [r3, #28]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d100      	bne.n	800818a <HAL_RCC_OscConfig+0x496>
 8008188:	e0c1      	b.n	800830e <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800818a:	4b63      	ldr	r3, [pc, #396]	; (8008318 <HAL_RCC_OscConfig+0x624>)
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	2238      	movs	r2, #56	; 0x38
 8008190:	4013      	ands	r3, r2
 8008192:	2b10      	cmp	r3, #16
 8008194:	d100      	bne.n	8008198 <HAL_RCC_OscConfig+0x4a4>
 8008196:	e081      	b.n	800829c <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	69db      	ldr	r3, [r3, #28]
 800819c:	2b02      	cmp	r3, #2
 800819e:	d156      	bne.n	800824e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081a0:	4b5d      	ldr	r3, [pc, #372]	; (8008318 <HAL_RCC_OscConfig+0x624>)
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	4b5c      	ldr	r3, [pc, #368]	; (8008318 <HAL_RCC_OscConfig+0x624>)
 80081a6:	4960      	ldr	r1, [pc, #384]	; (8008328 <HAL_RCC_OscConfig+0x634>)
 80081a8:	400a      	ands	r2, r1
 80081aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081ac:	f7fd f912 	bl	80053d4 <HAL_GetTick>
 80081b0:	0003      	movs	r3, r0
 80081b2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80081b4:	e008      	b.n	80081c8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081b6:	f7fd f90d 	bl	80053d4 <HAL_GetTick>
 80081ba:	0002      	movs	r2, r0
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	1ad3      	subs	r3, r2, r3
 80081c0:	2b02      	cmp	r3, #2
 80081c2:	d901      	bls.n	80081c8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80081c4:	2303      	movs	r3, #3
 80081c6:	e0a3      	b.n	8008310 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80081c8:	4b53      	ldr	r3, [pc, #332]	; (8008318 <HAL_RCC_OscConfig+0x624>)
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	2380      	movs	r3, #128	; 0x80
 80081ce:	049b      	lsls	r3, r3, #18
 80081d0:	4013      	ands	r3, r2
 80081d2:	d1f0      	bne.n	80081b6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80081d4:	4b50      	ldr	r3, [pc, #320]	; (8008318 <HAL_RCC_OscConfig+0x624>)
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	4a54      	ldr	r2, [pc, #336]	; (800832c <HAL_RCC_OscConfig+0x638>)
 80081da:	4013      	ands	r3, r2
 80081dc:	0019      	movs	r1, r3
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6a1a      	ldr	r2, [r3, #32]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e6:	431a      	orrs	r2, r3
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ec:	021b      	lsls	r3, r3, #8
 80081ee:	431a      	orrs	r2, r3
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f4:	431a      	orrs	r2, r3
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081fa:	431a      	orrs	r2, r3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008200:	431a      	orrs	r2, r3
 8008202:	4b45      	ldr	r3, [pc, #276]	; (8008318 <HAL_RCC_OscConfig+0x624>)
 8008204:	430a      	orrs	r2, r1
 8008206:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008208:	4b43      	ldr	r3, [pc, #268]	; (8008318 <HAL_RCC_OscConfig+0x624>)
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	4b42      	ldr	r3, [pc, #264]	; (8008318 <HAL_RCC_OscConfig+0x624>)
 800820e:	2180      	movs	r1, #128	; 0x80
 8008210:	0449      	lsls	r1, r1, #17
 8008212:	430a      	orrs	r2, r1
 8008214:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8008216:	4b40      	ldr	r3, [pc, #256]	; (8008318 <HAL_RCC_OscConfig+0x624>)
 8008218:	68da      	ldr	r2, [r3, #12]
 800821a:	4b3f      	ldr	r3, [pc, #252]	; (8008318 <HAL_RCC_OscConfig+0x624>)
 800821c:	2180      	movs	r1, #128	; 0x80
 800821e:	0549      	lsls	r1, r1, #21
 8008220:	430a      	orrs	r2, r1
 8008222:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008224:	f7fd f8d6 	bl	80053d4 <HAL_GetTick>
 8008228:	0003      	movs	r3, r0
 800822a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800822c:	e008      	b.n	8008240 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800822e:	f7fd f8d1 	bl	80053d4 <HAL_GetTick>
 8008232:	0002      	movs	r2, r0
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	1ad3      	subs	r3, r2, r3
 8008238:	2b02      	cmp	r3, #2
 800823a:	d901      	bls.n	8008240 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800823c:	2303      	movs	r3, #3
 800823e:	e067      	b.n	8008310 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008240:	4b35      	ldr	r3, [pc, #212]	; (8008318 <HAL_RCC_OscConfig+0x624>)
 8008242:	681a      	ldr	r2, [r3, #0]
 8008244:	2380      	movs	r3, #128	; 0x80
 8008246:	049b      	lsls	r3, r3, #18
 8008248:	4013      	ands	r3, r2
 800824a:	d0f0      	beq.n	800822e <HAL_RCC_OscConfig+0x53a>
 800824c:	e05f      	b.n	800830e <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800824e:	4b32      	ldr	r3, [pc, #200]	; (8008318 <HAL_RCC_OscConfig+0x624>)
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	4b31      	ldr	r3, [pc, #196]	; (8008318 <HAL_RCC_OscConfig+0x624>)
 8008254:	4934      	ldr	r1, [pc, #208]	; (8008328 <HAL_RCC_OscConfig+0x634>)
 8008256:	400a      	ands	r2, r1
 8008258:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800825a:	4b2f      	ldr	r3, [pc, #188]	; (8008318 <HAL_RCC_OscConfig+0x624>)
 800825c:	68da      	ldr	r2, [r3, #12]
 800825e:	4b2e      	ldr	r3, [pc, #184]	; (8008318 <HAL_RCC_OscConfig+0x624>)
 8008260:	2103      	movs	r1, #3
 8008262:	438a      	bics	r2, r1
 8008264:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8008266:	4b2c      	ldr	r3, [pc, #176]	; (8008318 <HAL_RCC_OscConfig+0x624>)
 8008268:	68da      	ldr	r2, [r3, #12]
 800826a:	4b2b      	ldr	r3, [pc, #172]	; (8008318 <HAL_RCC_OscConfig+0x624>)
 800826c:	4930      	ldr	r1, [pc, #192]	; (8008330 <HAL_RCC_OscConfig+0x63c>)
 800826e:	400a      	ands	r2, r1
 8008270:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008272:	f7fd f8af 	bl	80053d4 <HAL_GetTick>
 8008276:	0003      	movs	r3, r0
 8008278:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800827a:	e008      	b.n	800828e <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800827c:	f7fd f8aa 	bl	80053d4 <HAL_GetTick>
 8008280:	0002      	movs	r2, r0
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	1ad3      	subs	r3, r2, r3
 8008286:	2b02      	cmp	r3, #2
 8008288:	d901      	bls.n	800828e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800828a:	2303      	movs	r3, #3
 800828c:	e040      	b.n	8008310 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800828e:	4b22      	ldr	r3, [pc, #136]	; (8008318 <HAL_RCC_OscConfig+0x624>)
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	2380      	movs	r3, #128	; 0x80
 8008294:	049b      	lsls	r3, r3, #18
 8008296:	4013      	ands	r3, r2
 8008298:	d1f0      	bne.n	800827c <HAL_RCC_OscConfig+0x588>
 800829a:	e038      	b.n	800830e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	69db      	ldr	r3, [r3, #28]
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d101      	bne.n	80082a8 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 80082a4:	2301      	movs	r3, #1
 80082a6:	e033      	b.n	8008310 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80082a8:	4b1b      	ldr	r3, [pc, #108]	; (8008318 <HAL_RCC_OscConfig+0x624>)
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	2203      	movs	r2, #3
 80082b2:	401a      	ands	r2, r3
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6a1b      	ldr	r3, [r3, #32]
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d126      	bne.n	800830a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	2270      	movs	r2, #112	; 0x70
 80082c0:	401a      	ands	r2, r3
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d11f      	bne.n	800830a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80082ca:	697a      	ldr	r2, [r7, #20]
 80082cc:	23fe      	movs	r3, #254	; 0xfe
 80082ce:	01db      	lsls	r3, r3, #7
 80082d0:	401a      	ands	r2, r3
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082d6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80082d8:	429a      	cmp	r2, r3
 80082da:	d116      	bne.n	800830a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80082dc:	697a      	ldr	r2, [r7, #20]
 80082de:	23f8      	movs	r3, #248	; 0xf8
 80082e0:	039b      	lsls	r3, r3, #14
 80082e2:	401a      	ands	r2, r3
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d10e      	bne.n	800830a <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80082ec:	697a      	ldr	r2, [r7, #20]
 80082ee:	23e0      	movs	r3, #224	; 0xe0
 80082f0:	051b      	lsls	r3, r3, #20
 80082f2:	401a      	ands	r2, r3
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d106      	bne.n	800830a <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	0f5b      	lsrs	r3, r3, #29
 8008300:	075a      	lsls	r2, r3, #29
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008306:	429a      	cmp	r2, r3
 8008308:	d001      	beq.n	800830e <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800830a:	2301      	movs	r3, #1
 800830c:	e000      	b.n	8008310 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 800830e:	2300      	movs	r3, #0
}
 8008310:	0018      	movs	r0, r3
 8008312:	46bd      	mov	sp, r7
 8008314:	b008      	add	sp, #32
 8008316:	bd80      	pop	{r7, pc}
 8008318:	40021000 	.word	0x40021000
 800831c:	40007000 	.word	0x40007000
 8008320:	00001388 	.word	0x00001388
 8008324:	efffffff 	.word	0xefffffff
 8008328:	feffffff 	.word	0xfeffffff
 800832c:	11c1808c 	.word	0x11c1808c
 8008330:	eefeffff 	.word	0xeefeffff

08008334 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b084      	sub	sp, #16
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d101      	bne.n	8008348 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008344:	2301      	movs	r3, #1
 8008346:	e0e9      	b.n	800851c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008348:	4b76      	ldr	r3, [pc, #472]	; (8008524 <HAL_RCC_ClockConfig+0x1f0>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	2207      	movs	r2, #7
 800834e:	4013      	ands	r3, r2
 8008350:	683a      	ldr	r2, [r7, #0]
 8008352:	429a      	cmp	r2, r3
 8008354:	d91e      	bls.n	8008394 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008356:	4b73      	ldr	r3, [pc, #460]	; (8008524 <HAL_RCC_ClockConfig+0x1f0>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2207      	movs	r2, #7
 800835c:	4393      	bics	r3, r2
 800835e:	0019      	movs	r1, r3
 8008360:	4b70      	ldr	r3, [pc, #448]	; (8008524 <HAL_RCC_ClockConfig+0x1f0>)
 8008362:	683a      	ldr	r2, [r7, #0]
 8008364:	430a      	orrs	r2, r1
 8008366:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008368:	f7fd f834 	bl	80053d4 <HAL_GetTick>
 800836c:	0003      	movs	r3, r0
 800836e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008370:	e009      	b.n	8008386 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008372:	f7fd f82f 	bl	80053d4 <HAL_GetTick>
 8008376:	0002      	movs	r2, r0
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	1ad3      	subs	r3, r2, r3
 800837c:	4a6a      	ldr	r2, [pc, #424]	; (8008528 <HAL_RCC_ClockConfig+0x1f4>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d901      	bls.n	8008386 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8008382:	2303      	movs	r3, #3
 8008384:	e0ca      	b.n	800851c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008386:	4b67      	ldr	r3, [pc, #412]	; (8008524 <HAL_RCC_ClockConfig+0x1f0>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	2207      	movs	r2, #7
 800838c:	4013      	ands	r3, r2
 800838e:	683a      	ldr	r2, [r7, #0]
 8008390:	429a      	cmp	r2, r3
 8008392:	d1ee      	bne.n	8008372 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2202      	movs	r2, #2
 800839a:	4013      	ands	r3, r2
 800839c:	d015      	beq.n	80083ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2204      	movs	r2, #4
 80083a4:	4013      	ands	r3, r2
 80083a6:	d006      	beq.n	80083b6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80083a8:	4b60      	ldr	r3, [pc, #384]	; (800852c <HAL_RCC_ClockConfig+0x1f8>)
 80083aa:	689a      	ldr	r2, [r3, #8]
 80083ac:	4b5f      	ldr	r3, [pc, #380]	; (800852c <HAL_RCC_ClockConfig+0x1f8>)
 80083ae:	21e0      	movs	r1, #224	; 0xe0
 80083b0:	01c9      	lsls	r1, r1, #7
 80083b2:	430a      	orrs	r2, r1
 80083b4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80083b6:	4b5d      	ldr	r3, [pc, #372]	; (800852c <HAL_RCC_ClockConfig+0x1f8>)
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	4a5d      	ldr	r2, [pc, #372]	; (8008530 <HAL_RCC_ClockConfig+0x1fc>)
 80083bc:	4013      	ands	r3, r2
 80083be:	0019      	movs	r1, r3
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	689a      	ldr	r2, [r3, #8]
 80083c4:	4b59      	ldr	r3, [pc, #356]	; (800852c <HAL_RCC_ClockConfig+0x1f8>)
 80083c6:	430a      	orrs	r2, r1
 80083c8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	2201      	movs	r2, #1
 80083d0:	4013      	ands	r3, r2
 80083d2:	d057      	beq.n	8008484 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d107      	bne.n	80083ec <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80083dc:	4b53      	ldr	r3, [pc, #332]	; (800852c <HAL_RCC_ClockConfig+0x1f8>)
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	2380      	movs	r3, #128	; 0x80
 80083e2:	029b      	lsls	r3, r3, #10
 80083e4:	4013      	ands	r3, r2
 80083e6:	d12b      	bne.n	8008440 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80083e8:	2301      	movs	r3, #1
 80083ea:	e097      	b.n	800851c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	2b02      	cmp	r3, #2
 80083f2:	d107      	bne.n	8008404 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80083f4:	4b4d      	ldr	r3, [pc, #308]	; (800852c <HAL_RCC_ClockConfig+0x1f8>)
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	2380      	movs	r3, #128	; 0x80
 80083fa:	049b      	lsls	r3, r3, #18
 80083fc:	4013      	ands	r3, r2
 80083fe:	d11f      	bne.n	8008440 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	e08b      	b.n	800851c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d107      	bne.n	800841c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800840c:	4b47      	ldr	r3, [pc, #284]	; (800852c <HAL_RCC_ClockConfig+0x1f8>)
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	2380      	movs	r3, #128	; 0x80
 8008412:	00db      	lsls	r3, r3, #3
 8008414:	4013      	ands	r3, r2
 8008416:	d113      	bne.n	8008440 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008418:	2301      	movs	r3, #1
 800841a:	e07f      	b.n	800851c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	2b03      	cmp	r3, #3
 8008422:	d106      	bne.n	8008432 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008424:	4b41      	ldr	r3, [pc, #260]	; (800852c <HAL_RCC_ClockConfig+0x1f8>)
 8008426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008428:	2202      	movs	r2, #2
 800842a:	4013      	ands	r3, r2
 800842c:	d108      	bne.n	8008440 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800842e:	2301      	movs	r3, #1
 8008430:	e074      	b.n	800851c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008432:	4b3e      	ldr	r3, [pc, #248]	; (800852c <HAL_RCC_ClockConfig+0x1f8>)
 8008434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008436:	2202      	movs	r2, #2
 8008438:	4013      	ands	r3, r2
 800843a:	d101      	bne.n	8008440 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	e06d      	b.n	800851c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008440:	4b3a      	ldr	r3, [pc, #232]	; (800852c <HAL_RCC_ClockConfig+0x1f8>)
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	2207      	movs	r2, #7
 8008446:	4393      	bics	r3, r2
 8008448:	0019      	movs	r1, r3
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	685a      	ldr	r2, [r3, #4]
 800844e:	4b37      	ldr	r3, [pc, #220]	; (800852c <HAL_RCC_ClockConfig+0x1f8>)
 8008450:	430a      	orrs	r2, r1
 8008452:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008454:	f7fc ffbe 	bl	80053d4 <HAL_GetTick>
 8008458:	0003      	movs	r3, r0
 800845a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800845c:	e009      	b.n	8008472 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800845e:	f7fc ffb9 	bl	80053d4 <HAL_GetTick>
 8008462:	0002      	movs	r2, r0
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	1ad3      	subs	r3, r2, r3
 8008468:	4a2f      	ldr	r2, [pc, #188]	; (8008528 <HAL_RCC_ClockConfig+0x1f4>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d901      	bls.n	8008472 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800846e:	2303      	movs	r3, #3
 8008470:	e054      	b.n	800851c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008472:	4b2e      	ldr	r3, [pc, #184]	; (800852c <HAL_RCC_ClockConfig+0x1f8>)
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	2238      	movs	r2, #56	; 0x38
 8008478:	401a      	ands	r2, r3
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	00db      	lsls	r3, r3, #3
 8008480:	429a      	cmp	r2, r3
 8008482:	d1ec      	bne.n	800845e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008484:	4b27      	ldr	r3, [pc, #156]	; (8008524 <HAL_RCC_ClockConfig+0x1f0>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	2207      	movs	r2, #7
 800848a:	4013      	ands	r3, r2
 800848c:	683a      	ldr	r2, [r7, #0]
 800848e:	429a      	cmp	r2, r3
 8008490:	d21e      	bcs.n	80084d0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008492:	4b24      	ldr	r3, [pc, #144]	; (8008524 <HAL_RCC_ClockConfig+0x1f0>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	2207      	movs	r2, #7
 8008498:	4393      	bics	r3, r2
 800849a:	0019      	movs	r1, r3
 800849c:	4b21      	ldr	r3, [pc, #132]	; (8008524 <HAL_RCC_ClockConfig+0x1f0>)
 800849e:	683a      	ldr	r2, [r7, #0]
 80084a0:	430a      	orrs	r2, r1
 80084a2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80084a4:	f7fc ff96 	bl	80053d4 <HAL_GetTick>
 80084a8:	0003      	movs	r3, r0
 80084aa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80084ac:	e009      	b.n	80084c2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80084ae:	f7fc ff91 	bl	80053d4 <HAL_GetTick>
 80084b2:	0002      	movs	r2, r0
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	1ad3      	subs	r3, r2, r3
 80084b8:	4a1b      	ldr	r2, [pc, #108]	; (8008528 <HAL_RCC_ClockConfig+0x1f4>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d901      	bls.n	80084c2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80084be:	2303      	movs	r3, #3
 80084c0:	e02c      	b.n	800851c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80084c2:	4b18      	ldr	r3, [pc, #96]	; (8008524 <HAL_RCC_ClockConfig+0x1f0>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	2207      	movs	r2, #7
 80084c8:	4013      	ands	r3, r2
 80084ca:	683a      	ldr	r2, [r7, #0]
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d1ee      	bne.n	80084ae <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2204      	movs	r2, #4
 80084d6:	4013      	ands	r3, r2
 80084d8:	d009      	beq.n	80084ee <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80084da:	4b14      	ldr	r3, [pc, #80]	; (800852c <HAL_RCC_ClockConfig+0x1f8>)
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	4a15      	ldr	r2, [pc, #84]	; (8008534 <HAL_RCC_ClockConfig+0x200>)
 80084e0:	4013      	ands	r3, r2
 80084e2:	0019      	movs	r1, r3
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	68da      	ldr	r2, [r3, #12]
 80084e8:	4b10      	ldr	r3, [pc, #64]	; (800852c <HAL_RCC_ClockConfig+0x1f8>)
 80084ea:	430a      	orrs	r2, r1
 80084ec:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80084ee:	f000 f829 	bl	8008544 <HAL_RCC_GetSysClockFreq>
 80084f2:	0001      	movs	r1, r0
 80084f4:	4b0d      	ldr	r3, [pc, #52]	; (800852c <HAL_RCC_ClockConfig+0x1f8>)
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	0a1b      	lsrs	r3, r3, #8
 80084fa:	220f      	movs	r2, #15
 80084fc:	401a      	ands	r2, r3
 80084fe:	4b0e      	ldr	r3, [pc, #56]	; (8008538 <HAL_RCC_ClockConfig+0x204>)
 8008500:	0092      	lsls	r2, r2, #2
 8008502:	58d3      	ldr	r3, [r2, r3]
 8008504:	221f      	movs	r2, #31
 8008506:	4013      	ands	r3, r2
 8008508:	000a      	movs	r2, r1
 800850a:	40da      	lsrs	r2, r3
 800850c:	4b0b      	ldr	r3, [pc, #44]	; (800853c <HAL_RCC_ClockConfig+0x208>)
 800850e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008510:	4b0b      	ldr	r3, [pc, #44]	; (8008540 <HAL_RCC_ClockConfig+0x20c>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	0018      	movs	r0, r3
 8008516:	f7fc ff01 	bl	800531c <HAL_InitTick>
 800851a:	0003      	movs	r3, r0
}
 800851c:	0018      	movs	r0, r3
 800851e:	46bd      	mov	sp, r7
 8008520:	b004      	add	sp, #16
 8008522:	bd80      	pop	{r7, pc}
 8008524:	40022000 	.word	0x40022000
 8008528:	00001388 	.word	0x00001388
 800852c:	40021000 	.word	0x40021000
 8008530:	fffff0ff 	.word	0xfffff0ff
 8008534:	ffff8fff 	.word	0xffff8fff
 8008538:	0800e25c 	.word	0x0800e25c
 800853c:	20003134 	.word	0x20003134
 8008540:	20003138 	.word	0x20003138

08008544 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b086      	sub	sp, #24
 8008548:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800854a:	4b3c      	ldr	r3, [pc, #240]	; (800863c <HAL_RCC_GetSysClockFreq+0xf8>)
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	2238      	movs	r2, #56	; 0x38
 8008550:	4013      	ands	r3, r2
 8008552:	d10f      	bne.n	8008574 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8008554:	4b39      	ldr	r3, [pc, #228]	; (800863c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	0adb      	lsrs	r3, r3, #11
 800855a:	2207      	movs	r2, #7
 800855c:	4013      	ands	r3, r2
 800855e:	2201      	movs	r2, #1
 8008560:	409a      	lsls	r2, r3
 8008562:	0013      	movs	r3, r2
 8008564:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8008566:	6839      	ldr	r1, [r7, #0]
 8008568:	4835      	ldr	r0, [pc, #212]	; (8008640 <HAL_RCC_GetSysClockFreq+0xfc>)
 800856a:	f7f7 fdcb 	bl	8000104 <__udivsi3>
 800856e:	0003      	movs	r3, r0
 8008570:	613b      	str	r3, [r7, #16]
 8008572:	e05d      	b.n	8008630 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008574:	4b31      	ldr	r3, [pc, #196]	; (800863c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	2238      	movs	r2, #56	; 0x38
 800857a:	4013      	ands	r3, r2
 800857c:	2b08      	cmp	r3, #8
 800857e:	d102      	bne.n	8008586 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008580:	4b30      	ldr	r3, [pc, #192]	; (8008644 <HAL_RCC_GetSysClockFreq+0x100>)
 8008582:	613b      	str	r3, [r7, #16]
 8008584:	e054      	b.n	8008630 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008586:	4b2d      	ldr	r3, [pc, #180]	; (800863c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008588:	689b      	ldr	r3, [r3, #8]
 800858a:	2238      	movs	r2, #56	; 0x38
 800858c:	4013      	ands	r3, r2
 800858e:	2b10      	cmp	r3, #16
 8008590:	d138      	bne.n	8008604 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8008592:	4b2a      	ldr	r3, [pc, #168]	; (800863c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008594:	68db      	ldr	r3, [r3, #12]
 8008596:	2203      	movs	r2, #3
 8008598:	4013      	ands	r3, r2
 800859a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800859c:	4b27      	ldr	r3, [pc, #156]	; (800863c <HAL_RCC_GetSysClockFreq+0xf8>)
 800859e:	68db      	ldr	r3, [r3, #12]
 80085a0:	091b      	lsrs	r3, r3, #4
 80085a2:	2207      	movs	r2, #7
 80085a4:	4013      	ands	r3, r2
 80085a6:	3301      	adds	r3, #1
 80085a8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2b03      	cmp	r3, #3
 80085ae:	d10d      	bne.n	80085cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80085b0:	68b9      	ldr	r1, [r7, #8]
 80085b2:	4824      	ldr	r0, [pc, #144]	; (8008644 <HAL_RCC_GetSysClockFreq+0x100>)
 80085b4:	f7f7 fda6 	bl	8000104 <__udivsi3>
 80085b8:	0003      	movs	r3, r0
 80085ba:	0019      	movs	r1, r3
 80085bc:	4b1f      	ldr	r3, [pc, #124]	; (800863c <HAL_RCC_GetSysClockFreq+0xf8>)
 80085be:	68db      	ldr	r3, [r3, #12]
 80085c0:	0a1b      	lsrs	r3, r3, #8
 80085c2:	227f      	movs	r2, #127	; 0x7f
 80085c4:	4013      	ands	r3, r2
 80085c6:	434b      	muls	r3, r1
 80085c8:	617b      	str	r3, [r7, #20]
        break;
 80085ca:	e00d      	b.n	80085e8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80085cc:	68b9      	ldr	r1, [r7, #8]
 80085ce:	481c      	ldr	r0, [pc, #112]	; (8008640 <HAL_RCC_GetSysClockFreq+0xfc>)
 80085d0:	f7f7 fd98 	bl	8000104 <__udivsi3>
 80085d4:	0003      	movs	r3, r0
 80085d6:	0019      	movs	r1, r3
 80085d8:	4b18      	ldr	r3, [pc, #96]	; (800863c <HAL_RCC_GetSysClockFreq+0xf8>)
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	0a1b      	lsrs	r3, r3, #8
 80085de:	227f      	movs	r2, #127	; 0x7f
 80085e0:	4013      	ands	r3, r2
 80085e2:	434b      	muls	r3, r1
 80085e4:	617b      	str	r3, [r7, #20]
        break;
 80085e6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80085e8:	4b14      	ldr	r3, [pc, #80]	; (800863c <HAL_RCC_GetSysClockFreq+0xf8>)
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	0f5b      	lsrs	r3, r3, #29
 80085ee:	2207      	movs	r2, #7
 80085f0:	4013      	ands	r3, r2
 80085f2:	3301      	adds	r3, #1
 80085f4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80085f6:	6879      	ldr	r1, [r7, #4]
 80085f8:	6978      	ldr	r0, [r7, #20]
 80085fa:	f7f7 fd83 	bl	8000104 <__udivsi3>
 80085fe:	0003      	movs	r3, r0
 8008600:	613b      	str	r3, [r7, #16]
 8008602:	e015      	b.n	8008630 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008604:	4b0d      	ldr	r3, [pc, #52]	; (800863c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	2238      	movs	r2, #56	; 0x38
 800860a:	4013      	ands	r3, r2
 800860c:	2b20      	cmp	r3, #32
 800860e:	d103      	bne.n	8008618 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8008610:	2380      	movs	r3, #128	; 0x80
 8008612:	021b      	lsls	r3, r3, #8
 8008614:	613b      	str	r3, [r7, #16]
 8008616:	e00b      	b.n	8008630 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008618:	4b08      	ldr	r3, [pc, #32]	; (800863c <HAL_RCC_GetSysClockFreq+0xf8>)
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	2238      	movs	r2, #56	; 0x38
 800861e:	4013      	ands	r3, r2
 8008620:	2b18      	cmp	r3, #24
 8008622:	d103      	bne.n	800862c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8008624:	23fa      	movs	r3, #250	; 0xfa
 8008626:	01db      	lsls	r3, r3, #7
 8008628:	613b      	str	r3, [r7, #16]
 800862a:	e001      	b.n	8008630 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800862c:	2300      	movs	r3, #0
 800862e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008630:	693b      	ldr	r3, [r7, #16]
}
 8008632:	0018      	movs	r0, r3
 8008634:	46bd      	mov	sp, r7
 8008636:	b006      	add	sp, #24
 8008638:	bd80      	pop	{r7, pc}
 800863a:	46c0      	nop			; (mov r8, r8)
 800863c:	40021000 	.word	0x40021000
 8008640:	00f42400 	.word	0x00f42400
 8008644:	007a1200 	.word	0x007a1200

08008648 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800864c:	4b02      	ldr	r3, [pc, #8]	; (8008658 <HAL_RCC_GetHCLKFreq+0x10>)
 800864e:	681b      	ldr	r3, [r3, #0]
}
 8008650:	0018      	movs	r0, r3
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
 8008656:	46c0      	nop			; (mov r8, r8)
 8008658:	20003134 	.word	0x20003134

0800865c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800865c:	b5b0      	push	{r4, r5, r7, lr}
 800865e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8008660:	f7ff fff2 	bl	8008648 <HAL_RCC_GetHCLKFreq>
 8008664:	0004      	movs	r4, r0
 8008666:	f7ff fb39 	bl	8007cdc <LL_RCC_GetAPB1Prescaler>
 800866a:	0003      	movs	r3, r0
 800866c:	0b1a      	lsrs	r2, r3, #12
 800866e:	4b05      	ldr	r3, [pc, #20]	; (8008684 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008670:	0092      	lsls	r2, r2, #2
 8008672:	58d3      	ldr	r3, [r2, r3]
 8008674:	221f      	movs	r2, #31
 8008676:	4013      	ands	r3, r2
 8008678:	40dc      	lsrs	r4, r3
 800867a:	0023      	movs	r3, r4
}
 800867c:	0018      	movs	r0, r3
 800867e:	46bd      	mov	sp, r7
 8008680:	bdb0      	pop	{r4, r5, r7, pc}
 8008682:	46c0      	nop			; (mov r8, r8)
 8008684:	0800e29c 	.word	0x0800e29c

08008688 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b086      	sub	sp, #24
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8008690:	2313      	movs	r3, #19
 8008692:	18fb      	adds	r3, r7, r3
 8008694:	2200      	movs	r2, #0
 8008696:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008698:	2312      	movs	r3, #18
 800869a:	18fb      	adds	r3, r7, r3
 800869c:	2200      	movs	r2, #0
 800869e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681a      	ldr	r2, [r3, #0]
 80086a4:	2380      	movs	r3, #128	; 0x80
 80086a6:	029b      	lsls	r3, r3, #10
 80086a8:	4013      	ands	r3, r2
 80086aa:	d100      	bne.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x26>
 80086ac:	e0a3      	b.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80086ae:	2011      	movs	r0, #17
 80086b0:	183b      	adds	r3, r7, r0
 80086b2:	2200      	movs	r2, #0
 80086b4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80086b6:	4bc3      	ldr	r3, [pc, #780]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80086b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086ba:	2380      	movs	r3, #128	; 0x80
 80086bc:	055b      	lsls	r3, r3, #21
 80086be:	4013      	ands	r3, r2
 80086c0:	d110      	bne.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80086c2:	4bc0      	ldr	r3, [pc, #768]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80086c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086c6:	4bbf      	ldr	r3, [pc, #764]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80086c8:	2180      	movs	r1, #128	; 0x80
 80086ca:	0549      	lsls	r1, r1, #21
 80086cc:	430a      	orrs	r2, r1
 80086ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80086d0:	4bbc      	ldr	r3, [pc, #752]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80086d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086d4:	2380      	movs	r3, #128	; 0x80
 80086d6:	055b      	lsls	r3, r3, #21
 80086d8:	4013      	ands	r3, r2
 80086da:	60bb      	str	r3, [r7, #8]
 80086dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80086de:	183b      	adds	r3, r7, r0
 80086e0:	2201      	movs	r2, #1
 80086e2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80086e4:	4bb8      	ldr	r3, [pc, #736]	; (80089c8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80086e6:	681a      	ldr	r2, [r3, #0]
 80086e8:	4bb7      	ldr	r3, [pc, #732]	; (80089c8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80086ea:	2180      	movs	r1, #128	; 0x80
 80086ec:	0049      	lsls	r1, r1, #1
 80086ee:	430a      	orrs	r2, r1
 80086f0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80086f2:	f7fc fe6f 	bl	80053d4 <HAL_GetTick>
 80086f6:	0003      	movs	r3, r0
 80086f8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80086fa:	e00b      	b.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80086fc:	f7fc fe6a 	bl	80053d4 <HAL_GetTick>
 8008700:	0002      	movs	r2, r0
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	1ad3      	subs	r3, r2, r3
 8008706:	2b02      	cmp	r3, #2
 8008708:	d904      	bls.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800870a:	2313      	movs	r3, #19
 800870c:	18fb      	adds	r3, r7, r3
 800870e:	2203      	movs	r2, #3
 8008710:	701a      	strb	r2, [r3, #0]
        break;
 8008712:	e005      	b.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008714:	4bac      	ldr	r3, [pc, #688]	; (80089c8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	2380      	movs	r3, #128	; 0x80
 800871a:	005b      	lsls	r3, r3, #1
 800871c:	4013      	ands	r3, r2
 800871e:	d0ed      	beq.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8008720:	2313      	movs	r3, #19
 8008722:	18fb      	adds	r3, r7, r3
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d154      	bne.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800872a:	4ba6      	ldr	r3, [pc, #664]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800872c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800872e:	23c0      	movs	r3, #192	; 0xc0
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	4013      	ands	r3, r2
 8008734:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d019      	beq.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008740:	697a      	ldr	r2, [r7, #20]
 8008742:	429a      	cmp	r2, r3
 8008744:	d014      	beq.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008746:	4b9f      	ldr	r3, [pc, #636]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800874a:	4aa0      	ldr	r2, [pc, #640]	; (80089cc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800874c:	4013      	ands	r3, r2
 800874e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008750:	4b9c      	ldr	r3, [pc, #624]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008752:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008754:	4b9b      	ldr	r3, [pc, #620]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008756:	2180      	movs	r1, #128	; 0x80
 8008758:	0249      	lsls	r1, r1, #9
 800875a:	430a      	orrs	r2, r1
 800875c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800875e:	4b99      	ldr	r3, [pc, #612]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008760:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008762:	4b98      	ldr	r3, [pc, #608]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008764:	499a      	ldr	r1, [pc, #616]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8008766:	400a      	ands	r2, r1
 8008768:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800876a:	4b96      	ldr	r3, [pc, #600]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800876c:	697a      	ldr	r2, [r7, #20]
 800876e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	2201      	movs	r2, #1
 8008774:	4013      	ands	r3, r2
 8008776:	d016      	beq.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008778:	f7fc fe2c 	bl	80053d4 <HAL_GetTick>
 800877c:	0003      	movs	r3, r0
 800877e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008780:	e00c      	b.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008782:	f7fc fe27 	bl	80053d4 <HAL_GetTick>
 8008786:	0002      	movs	r2, r0
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	1ad3      	subs	r3, r2, r3
 800878c:	4a91      	ldr	r2, [pc, #580]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d904      	bls.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8008792:	2313      	movs	r3, #19
 8008794:	18fb      	adds	r3, r7, r3
 8008796:	2203      	movs	r2, #3
 8008798:	701a      	strb	r2, [r3, #0]
            break;
 800879a:	e004      	b.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800879c:	4b89      	ldr	r3, [pc, #548]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800879e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087a0:	2202      	movs	r2, #2
 80087a2:	4013      	ands	r3, r2
 80087a4:	d0ed      	beq.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80087a6:	2313      	movs	r3, #19
 80087a8:	18fb      	adds	r3, r7, r3
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d10a      	bne.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80087b0:	4b84      	ldr	r3, [pc, #528]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80087b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087b4:	4a85      	ldr	r2, [pc, #532]	; (80089cc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80087b6:	4013      	ands	r3, r2
 80087b8:	0019      	movs	r1, r3
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087be:	4b81      	ldr	r3, [pc, #516]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80087c0:	430a      	orrs	r2, r1
 80087c2:	65da      	str	r2, [r3, #92]	; 0x5c
 80087c4:	e00c      	b.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80087c6:	2312      	movs	r3, #18
 80087c8:	18fb      	adds	r3, r7, r3
 80087ca:	2213      	movs	r2, #19
 80087cc:	18ba      	adds	r2, r7, r2
 80087ce:	7812      	ldrb	r2, [r2, #0]
 80087d0:	701a      	strb	r2, [r3, #0]
 80087d2:	e005      	b.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087d4:	2312      	movs	r3, #18
 80087d6:	18fb      	adds	r3, r7, r3
 80087d8:	2213      	movs	r2, #19
 80087da:	18ba      	adds	r2, r7, r2
 80087dc:	7812      	ldrb	r2, [r2, #0]
 80087de:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80087e0:	2311      	movs	r3, #17
 80087e2:	18fb      	adds	r3, r7, r3
 80087e4:	781b      	ldrb	r3, [r3, #0]
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	d105      	bne.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80087ea:	4b76      	ldr	r3, [pc, #472]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80087ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087ee:	4b75      	ldr	r3, [pc, #468]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80087f0:	4979      	ldr	r1, [pc, #484]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80087f2:	400a      	ands	r2, r1
 80087f4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2201      	movs	r2, #1
 80087fc:	4013      	ands	r3, r2
 80087fe:	d009      	beq.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008800:	4b70      	ldr	r3, [pc, #448]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008804:	2203      	movs	r2, #3
 8008806:	4393      	bics	r3, r2
 8008808:	0019      	movs	r1, r3
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	685a      	ldr	r2, [r3, #4]
 800880e:	4b6d      	ldr	r3, [pc, #436]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008810:	430a      	orrs	r2, r1
 8008812:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	2202      	movs	r2, #2
 800881a:	4013      	ands	r3, r2
 800881c:	d009      	beq.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800881e:	4b69      	ldr	r3, [pc, #420]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008822:	220c      	movs	r2, #12
 8008824:	4393      	bics	r3, r2
 8008826:	0019      	movs	r1, r3
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	689a      	ldr	r2, [r3, #8]
 800882c:	4b65      	ldr	r3, [pc, #404]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800882e:	430a      	orrs	r2, r1
 8008830:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	2210      	movs	r2, #16
 8008838:	4013      	ands	r3, r2
 800883a:	d009      	beq.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800883c:	4b61      	ldr	r3, [pc, #388]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800883e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008840:	4a66      	ldr	r2, [pc, #408]	; (80089dc <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8008842:	4013      	ands	r3, r2
 8008844:	0019      	movs	r1, r3
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	68da      	ldr	r2, [r3, #12]
 800884a:	4b5e      	ldr	r3, [pc, #376]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800884c:	430a      	orrs	r2, r1
 800884e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	2380      	movs	r3, #128	; 0x80
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	4013      	ands	r3, r2
 800885a:	d009      	beq.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800885c:	4b59      	ldr	r3, [pc, #356]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800885e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008860:	4a5f      	ldr	r2, [pc, #380]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008862:	4013      	ands	r3, r2
 8008864:	0019      	movs	r1, r3
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	699a      	ldr	r2, [r3, #24]
 800886a:	4b56      	ldr	r3, [pc, #344]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800886c:	430a      	orrs	r2, r1
 800886e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	2380      	movs	r3, #128	; 0x80
 8008876:	00db      	lsls	r3, r3, #3
 8008878:	4013      	ands	r3, r2
 800887a:	d009      	beq.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800887c:	4b51      	ldr	r3, [pc, #324]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800887e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008880:	4a58      	ldr	r2, [pc, #352]	; (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008882:	4013      	ands	r3, r2
 8008884:	0019      	movs	r1, r3
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	69da      	ldr	r2, [r3, #28]
 800888a:	4b4e      	ldr	r3, [pc, #312]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800888c:	430a      	orrs	r2, r1
 800888e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2220      	movs	r2, #32
 8008896:	4013      	ands	r3, r2
 8008898:	d009      	beq.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800889a:	4b4a      	ldr	r3, [pc, #296]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800889c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800889e:	4a52      	ldr	r2, [pc, #328]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80088a0:	4013      	ands	r3, r2
 80088a2:	0019      	movs	r1, r3
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	691a      	ldr	r2, [r3, #16]
 80088a8:	4b46      	ldr	r3, [pc, #280]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80088aa:	430a      	orrs	r2, r1
 80088ac:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	2380      	movs	r3, #128	; 0x80
 80088b4:	01db      	lsls	r3, r3, #7
 80088b6:	4013      	ands	r3, r2
 80088b8:	d015      	beq.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80088ba:	4b42      	ldr	r3, [pc, #264]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80088bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	0899      	lsrs	r1, r3, #2
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6a1a      	ldr	r2, [r3, #32]
 80088c6:	4b3f      	ldr	r3, [pc, #252]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80088c8:	430a      	orrs	r2, r1
 80088ca:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6a1a      	ldr	r2, [r3, #32]
 80088d0:	2380      	movs	r3, #128	; 0x80
 80088d2:	05db      	lsls	r3, r3, #23
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d106      	bne.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80088d8:	4b3a      	ldr	r3, [pc, #232]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80088da:	68da      	ldr	r2, [r3, #12]
 80088dc:	4b39      	ldr	r3, [pc, #228]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80088de:	2180      	movs	r1, #128	; 0x80
 80088e0:	0249      	lsls	r1, r1, #9
 80088e2:	430a      	orrs	r2, r1
 80088e4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	2380      	movs	r3, #128	; 0x80
 80088ec:	031b      	lsls	r3, r3, #12
 80088ee:	4013      	ands	r3, r2
 80088f0:	d009      	beq.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80088f2:	4b34      	ldr	r3, [pc, #208]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80088f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088f6:	2240      	movs	r2, #64	; 0x40
 80088f8:	4393      	bics	r3, r2
 80088fa:	0019      	movs	r1, r3
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008900:	4b30      	ldr	r3, [pc, #192]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008902:	430a      	orrs	r2, r1
 8008904:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	2380      	movs	r3, #128	; 0x80
 800890c:	039b      	lsls	r3, r3, #14
 800890e:	4013      	ands	r3, r2
 8008910:	d016      	beq.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8008912:	4b2c      	ldr	r3, [pc, #176]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008916:	4a35      	ldr	r2, [pc, #212]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8008918:	4013      	ands	r3, r2
 800891a:	0019      	movs	r1, r3
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008920:	4b28      	ldr	r3, [pc, #160]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008922:	430a      	orrs	r2, r1
 8008924:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800892a:	2380      	movs	r3, #128	; 0x80
 800892c:	03db      	lsls	r3, r3, #15
 800892e:	429a      	cmp	r2, r3
 8008930:	d106      	bne.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008932:	4b24      	ldr	r3, [pc, #144]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008934:	68da      	ldr	r2, [r3, #12]
 8008936:	4b23      	ldr	r3, [pc, #140]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008938:	2180      	movs	r1, #128	; 0x80
 800893a:	0449      	lsls	r1, r1, #17
 800893c:	430a      	orrs	r2, r1
 800893e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681a      	ldr	r2, [r3, #0]
 8008944:	2380      	movs	r3, #128	; 0x80
 8008946:	03db      	lsls	r3, r3, #15
 8008948:	4013      	ands	r3, r2
 800894a:	d016      	beq.n	800897a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800894c:	4b1d      	ldr	r3, [pc, #116]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800894e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008950:	4a27      	ldr	r2, [pc, #156]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8008952:	4013      	ands	r3, r2
 8008954:	0019      	movs	r1, r3
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800895a:	4b1a      	ldr	r3, [pc, #104]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800895c:	430a      	orrs	r2, r1
 800895e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008964:	2380      	movs	r3, #128	; 0x80
 8008966:	045b      	lsls	r3, r3, #17
 8008968:	429a      	cmp	r2, r3
 800896a:	d106      	bne.n	800897a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800896c:	4b15      	ldr	r3, [pc, #84]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800896e:	68da      	ldr	r2, [r3, #12]
 8008970:	4b14      	ldr	r3, [pc, #80]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008972:	2180      	movs	r1, #128	; 0x80
 8008974:	0449      	lsls	r1, r1, #17
 8008976:	430a      	orrs	r2, r1
 8008978:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	2380      	movs	r3, #128	; 0x80
 8008980:	011b      	lsls	r3, r3, #4
 8008982:	4013      	ands	r3, r2
 8008984:	d016      	beq.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8008986:	4b0f      	ldr	r3, [pc, #60]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800898a:	4a1a      	ldr	r2, [pc, #104]	; (80089f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800898c:	4013      	ands	r3, r2
 800898e:	0019      	movs	r1, r3
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	695a      	ldr	r2, [r3, #20]
 8008994:	4b0b      	ldr	r3, [pc, #44]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008996:	430a      	orrs	r2, r1
 8008998:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	695a      	ldr	r2, [r3, #20]
 800899e:	2380      	movs	r3, #128	; 0x80
 80089a0:	01db      	lsls	r3, r3, #7
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d106      	bne.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80089a6:	4b07      	ldr	r3, [pc, #28]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089a8:	68da      	ldr	r2, [r3, #12]
 80089aa:	4b06      	ldr	r3, [pc, #24]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089ac:	2180      	movs	r1, #128	; 0x80
 80089ae:	0249      	lsls	r1, r1, #9
 80089b0:	430a      	orrs	r2, r1
 80089b2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80089b4:	2312      	movs	r3, #18
 80089b6:	18fb      	adds	r3, r7, r3
 80089b8:	781b      	ldrb	r3, [r3, #0]
}
 80089ba:	0018      	movs	r0, r3
 80089bc:	46bd      	mov	sp, r7
 80089be:	b006      	add	sp, #24
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	46c0      	nop			; (mov r8, r8)
 80089c4:	40021000 	.word	0x40021000
 80089c8:	40007000 	.word	0x40007000
 80089cc:	fffffcff 	.word	0xfffffcff
 80089d0:	fffeffff 	.word	0xfffeffff
 80089d4:	00001388 	.word	0x00001388
 80089d8:	efffffff 	.word	0xefffffff
 80089dc:	fffff3ff 	.word	0xfffff3ff
 80089e0:	fff3ffff 	.word	0xfff3ffff
 80089e4:	ffcfffff 	.word	0xffcfffff
 80089e8:	ffffcfff 	.word	0xffffcfff
 80089ec:	ffbfffff 	.word	0xffbfffff
 80089f0:	feffffff 	.word	0xfeffffff
 80089f4:	ffff3fff 	.word	0xffff3fff

080089f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b086      	sub	sp, #24
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8008a00:	2300      	movs	r3, #0
 8008a02:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	2380      	movs	r3, #128	; 0x80
 8008a08:	029b      	lsls	r3, r3, #10
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d136      	bne.n	8008a7c <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8008a0e:	4bcd      	ldr	r3, [pc, #820]	; (8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008a10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008a12:	23c0      	movs	r3, #192	; 0xc0
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	4013      	ands	r3, r2
 8008a18:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8008a1a:	4bca      	ldr	r3, [pc, #808]	; (8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a1e:	2202      	movs	r2, #2
 8008a20:	4013      	ands	r3, r2
 8008a22:	2b02      	cmp	r3, #2
 8008a24:	d108      	bne.n	8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8008a26:	68fa      	ldr	r2, [r7, #12]
 8008a28:	2380      	movs	r3, #128	; 0x80
 8008a2a:	005b      	lsls	r3, r3, #1
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d103      	bne.n	8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8008a30:	2380      	movs	r3, #128	; 0x80
 8008a32:	021b      	lsls	r3, r3, #8
 8008a34:	617b      	str	r3, [r7, #20]
 8008a36:	e31c      	b.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8008a38:	4bc2      	ldr	r3, [pc, #776]	; (8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a3c:	2202      	movs	r2, #2
 8008a3e:	4013      	ands	r3, r2
 8008a40:	2b02      	cmp	r3, #2
 8008a42:	d108      	bne.n	8008a56 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8008a44:	68fa      	ldr	r2, [r7, #12]
 8008a46:	2380      	movs	r3, #128	; 0x80
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d103      	bne.n	8008a56 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 8008a4e:	23fa      	movs	r3, #250	; 0xfa
 8008a50:	01db      	lsls	r3, r3, #7
 8008a52:	617b      	str	r3, [r7, #20]
 8008a54:	e30d      	b.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8008a56:	4bbb      	ldr	r3, [pc, #748]	; (8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	2380      	movs	r3, #128	; 0x80
 8008a5c:	029b      	lsls	r3, r3, #10
 8008a5e:	401a      	ands	r2, r3
 8008a60:	2380      	movs	r3, #128	; 0x80
 8008a62:	029b      	lsls	r3, r3, #10
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d000      	beq.n	8008a6a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 8008a68:	e303      	b.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
 8008a6a:	68fa      	ldr	r2, [r7, #12]
 8008a6c:	23c0      	movs	r3, #192	; 0xc0
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d000      	beq.n	8008a76 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 8008a74:	e2fd      	b.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    {
      frequency = HSE_VALUE / 32U;
 8008a76:	4bb4      	ldr	r3, [pc, #720]	; (8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8008a78:	617b      	str	r3, [r7, #20]
 8008a7a:	e2fa      	b.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 8008a7c:	4bb1      	ldr	r3, [pc, #708]	; (8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	2203      	movs	r2, #3
 8008a82:	4013      	ands	r3, r2
 8008a84:	2b02      	cmp	r3, #2
 8008a86:	d102      	bne.n	8008a8e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 8008a88:	4bb0      	ldr	r3, [pc, #704]	; (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008a8a:	613b      	str	r3, [r7, #16]
 8008a8c:	e00a      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 8008a8e:	4bad      	ldr	r3, [pc, #692]	; (8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008a90:	68db      	ldr	r3, [r3, #12]
 8008a92:	2203      	movs	r2, #3
 8008a94:	4013      	ands	r3, r2
 8008a96:	2b03      	cmp	r3, #3
 8008a98:	d102      	bne.n	8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 8008a9a:	4bad      	ldr	r3, [pc, #692]	; (8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8008a9c:	613b      	str	r3, [r7, #16]
 8008a9e:	e001      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008aa4:	4ba7      	ldr	r3, [pc, #668]	; (8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008aa6:	68db      	ldr	r3, [r3, #12]
 8008aa8:	091b      	lsrs	r3, r3, #4
 8008aaa:	2207      	movs	r2, #7
 8008aac:	4013      	ands	r3, r2
 8008aae:	3301      	adds	r3, #1
 8008ab0:	0019      	movs	r1, r3
 8008ab2:	6938      	ldr	r0, [r7, #16]
 8008ab4:	f7f7 fb26 	bl	8000104 <__udivsi3>
 8008ab8:	0003      	movs	r3, r0
 8008aba:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 8008abc:	687a      	ldr	r2, [r7, #4]
 8008abe:	2380      	movs	r3, #128	; 0x80
 8008ac0:	03db      	lsls	r3, r3, #15
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d100      	bne.n	8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 8008ac6:	e28e      	b.n	8008fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	2380      	movs	r3, #128	; 0x80
 8008acc:	03db      	lsls	r3, r3, #15
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d900      	bls.n	8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8008ad2:	e2b7      	b.n	8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	2380      	movs	r3, #128	; 0x80
 8008ad8:	039b      	lsls	r3, r3, #14
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d100      	bne.n	8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8008ade:	e253      	b.n	8008f88 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 8008ae0:	687a      	ldr	r2, [r7, #4]
 8008ae2:	2380      	movs	r3, #128	; 0x80
 8008ae4:	039b      	lsls	r3, r3, #14
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d900      	bls.n	8008aec <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8008aea:	e2ab      	b.n	8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	2380      	movs	r3, #128	; 0x80
 8008af0:	031b      	lsls	r3, r3, #12
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d100      	bne.n	8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8008af6:	e0b2      	b.n	8008c5e <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	2380      	movs	r3, #128	; 0x80
 8008afc:	031b      	lsls	r3, r3, #12
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d900      	bls.n	8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8008b02:	e29f      	b.n	8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	2380      	movs	r3, #128	; 0x80
 8008b08:	01db      	lsls	r3, r3, #7
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d100      	bne.n	8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 8008b0e:	e103      	b.n	8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8008b10:	687a      	ldr	r2, [r7, #4]
 8008b12:	2380      	movs	r3, #128	; 0x80
 8008b14:	01db      	lsls	r3, r3, #7
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d900      	bls.n	8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008b1a:	e293      	b.n	8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	2380      	movs	r3, #128	; 0x80
 8008b20:	011b      	lsls	r3, r3, #4
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d100      	bne.n	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8008b26:	e165      	b.n	8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8008b28:	687a      	ldr	r2, [r7, #4]
 8008b2a:	2380      	movs	r3, #128	; 0x80
 8008b2c:	011b      	lsls	r3, r3, #4
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d900      	bls.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8008b32:	e287      	b.n	8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	2380      	movs	r3, #128	; 0x80
 8008b38:	00db      	lsls	r3, r3, #3
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d100      	bne.n	8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8008b3e:	e1e3      	b.n	8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	2380      	movs	r3, #128	; 0x80
 8008b44:	00db      	lsls	r3, r3, #3
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d900      	bls.n	8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8008b4a:	e27b      	b.n	8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008b4c:	687a      	ldr	r2, [r7, #4]
 8008b4e:	2380      	movs	r3, #128	; 0x80
 8008b50:	009b      	lsls	r3, r3, #2
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d100      	bne.n	8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8008b56:	e197      	b.n	8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	2380      	movs	r3, #128	; 0x80
 8008b5c:	009b      	lsls	r3, r3, #2
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d900      	bls.n	8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8008b62:	e26f      	b.n	8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2b20      	cmp	r3, #32
 8008b68:	d100      	bne.n	8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 8008b6a:	e118      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2b20      	cmp	r3, #32
 8008b70:	d900      	bls.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
 8008b72:	e267      	b.n	8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2b10      	cmp	r3, #16
 8008b78:	d100      	bne.n	8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8008b7a:	e093      	b.n	8008ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2b10      	cmp	r3, #16
 8008b80:	d900      	bls.n	8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8008b82:	e25f      	b.n	8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d003      	beq.n	8008b92 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2b02      	cmp	r3, #2
 8008b8e:	d033      	beq.n	8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 8008b90:	e258      	b.n	8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008b92:	4b6c      	ldr	r3, [pc, #432]	; (8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b96:	2203      	movs	r2, #3
 8008b98:	4013      	ands	r3, r2
 8008b9a:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d104      	bne.n	8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008ba2:	f7ff fd5b 	bl	800865c <HAL_RCC_GetPCLK1Freq>
 8008ba6:	0003      	movs	r3, r0
 8008ba8:	617b      	str	r3, [r7, #20]
        break;
 8008baa:	e24d      	b.n	8009048 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d104      	bne.n	8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
          frequency = HAL_RCC_GetSysClockFreq();
 8008bb2:	f7ff fcc7 	bl	8008544 <HAL_RCC_GetSysClockFreq>
 8008bb6:	0003      	movs	r3, r0
 8008bb8:	617b      	str	r3, [r7, #20]
        break;
 8008bba:	e245      	b.n	8009048 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8008bbc:	4b61      	ldr	r3, [pc, #388]	; (8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008bbe:	681a      	ldr	r2, [r3, #0]
 8008bc0:	2380      	movs	r3, #128	; 0x80
 8008bc2:	00db      	lsls	r3, r3, #3
 8008bc4:	401a      	ands	r2, r3
 8008bc6:	2380      	movs	r3, #128	; 0x80
 8008bc8:	00db      	lsls	r3, r3, #3
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d105      	bne.n	8008bda <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2b02      	cmp	r3, #2
 8008bd2:	d102      	bne.n	8008bda <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
          frequency = HSI_VALUE;
 8008bd4:	4b5d      	ldr	r3, [pc, #372]	; (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008bd6:	617b      	str	r3, [r7, #20]
        break;
 8008bd8:	e236      	b.n	8009048 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008bda:	4b5a      	ldr	r3, [pc, #360]	; (8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bde:	2202      	movs	r2, #2
 8008be0:	4013      	ands	r3, r2
 8008be2:	2b02      	cmp	r3, #2
 8008be4:	d000      	beq.n	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
 8008be6:	e22f      	b.n	8009048 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2b03      	cmp	r3, #3
 8008bec:	d000      	beq.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>
 8008bee:	e22b      	b.n	8009048 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          frequency = LSE_VALUE;
 8008bf0:	2380      	movs	r3, #128	; 0x80
 8008bf2:	021b      	lsls	r3, r3, #8
 8008bf4:	617b      	str	r3, [r7, #20]
        break;
 8008bf6:	e227      	b.n	8009048 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008bf8:	4b52      	ldr	r3, [pc, #328]	; (8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bfc:	220c      	movs	r2, #12
 8008bfe:	4013      	ands	r3, r2
 8008c00:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d104      	bne.n	8008c12 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008c08:	f7ff fd28 	bl	800865c <HAL_RCC_GetPCLK1Freq>
 8008c0c:	0003      	movs	r3, r0
 8008c0e:	617b      	str	r3, [r7, #20]
        break;
 8008c10:	e21c      	b.n	800904c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2b04      	cmp	r3, #4
 8008c16:	d104      	bne.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          frequency = HAL_RCC_GetSysClockFreq();
 8008c18:	f7ff fc94 	bl	8008544 <HAL_RCC_GetSysClockFreq>
 8008c1c:	0003      	movs	r3, r0
 8008c1e:	617b      	str	r3, [r7, #20]
        break;
 8008c20:	e214      	b.n	800904c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8008c22:	4b48      	ldr	r3, [pc, #288]	; (8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	2380      	movs	r3, #128	; 0x80
 8008c28:	00db      	lsls	r3, r3, #3
 8008c2a:	401a      	ands	r2, r3
 8008c2c:	2380      	movs	r3, #128	; 0x80
 8008c2e:	00db      	lsls	r3, r3, #3
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d105      	bne.n	8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2b08      	cmp	r3, #8
 8008c38:	d102      	bne.n	8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
          frequency = HSI_VALUE;
 8008c3a:	4b44      	ldr	r3, [pc, #272]	; (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008c3c:	617b      	str	r3, [r7, #20]
        break;
 8008c3e:	e205      	b.n	800904c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008c40:	4b40      	ldr	r3, [pc, #256]	; (8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c44:	2202      	movs	r2, #2
 8008c46:	4013      	ands	r3, r2
 8008c48:	2b02      	cmp	r3, #2
 8008c4a:	d000      	beq.n	8008c4e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8008c4c:	e1fe      	b.n	800904c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2b0c      	cmp	r3, #12
 8008c52:	d000      	beq.n	8008c56 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8008c54:	e1fa      	b.n	800904c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
          frequency = LSE_VALUE;
 8008c56:	2380      	movs	r3, #128	; 0x80
 8008c58:	021b      	lsls	r3, r3, #8
 8008c5a:	617b      	str	r3, [r7, #20]
        break;
 8008c5c:	e1f6      	b.n	800904c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8008c5e:	4b39      	ldr	r3, [pc, #228]	; (8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c62:	2240      	movs	r2, #64	; 0x40
 8008c64:	4013      	ands	r3, r2
 8008c66:	60fb      	str	r3, [r7, #12]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_CECCLKSOURCE_HSI_DIV488))
 8008c68:	4b36      	ldr	r3, [pc, #216]	; (8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	2380      	movs	r3, #128	; 0x80
 8008c6e:	00db      	lsls	r3, r3, #3
 8008c70:	401a      	ands	r2, r3
 8008c72:	2380      	movs	r3, #128	; 0x80
 8008c74:	00db      	lsls	r3, r3, #3
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d105      	bne.n	8008c86 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d102      	bne.n	8008c86 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
          frequency = (HSI_VALUE / 488U);
 8008c80:	4b34      	ldr	r3, [pc, #208]	; (8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 8008c82:	617b      	str	r3, [r7, #20]
        break;
 8008c84:	e1e4      	b.n	8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8008c86:	4b2f      	ldr	r3, [pc, #188]	; (8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c8a:	2202      	movs	r2, #2
 8008c8c:	4013      	ands	r3, r2
 8008c8e:	2b02      	cmp	r3, #2
 8008c90:	d000      	beq.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 8008c92:	e1dd      	b.n	8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2b40      	cmp	r3, #64	; 0x40
 8008c98:	d000      	beq.n	8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 8008c9a:	e1d9      	b.n	8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
          frequency = LSE_VALUE;
 8008c9c:	2380      	movs	r3, #128	; 0x80
 8008c9e:	021b      	lsls	r3, r3, #8
 8008ca0:	617b      	str	r3, [r7, #20]
        break;
 8008ca2:	e1d5      	b.n	8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008ca4:	4b27      	ldr	r3, [pc, #156]	; (8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008ca6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ca8:	23c0      	movs	r3, #192	; 0xc0
 8008caa:	011b      	lsls	r3, r3, #4
 8008cac:	4013      	ands	r3, r2
 8008cae:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d104      	bne.n	8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008cb6:	f7ff fcd1 	bl	800865c <HAL_RCC_GetPCLK1Freq>
 8008cba:	0003      	movs	r3, r0
 8008cbc:	617b      	str	r3, [r7, #20]
        break;
 8008cbe:	e1c9      	b.n	8009054 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8008cc0:	68fa      	ldr	r2, [r7, #12]
 8008cc2:	2380      	movs	r3, #128	; 0x80
 8008cc4:	00db      	lsls	r3, r3, #3
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d104      	bne.n	8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>
          frequency = HAL_RCC_GetSysClockFreq();
 8008cca:	f7ff fc3b 	bl	8008544 <HAL_RCC_GetSysClockFreq>
 8008cce:	0003      	movs	r3, r0
 8008cd0:	617b      	str	r3, [r7, #20]
        break;
 8008cd2:	e1bf      	b.n	8009054 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8008cd4:	4b1b      	ldr	r3, [pc, #108]	; (8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	2380      	movs	r3, #128	; 0x80
 8008cda:	00db      	lsls	r3, r3, #3
 8008cdc:	401a      	ands	r2, r3
 8008cde:	2380      	movs	r3, #128	; 0x80
 8008ce0:	00db      	lsls	r3, r3, #3
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d107      	bne.n	8008cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
 8008ce6:	68fa      	ldr	r2, [r7, #12]
 8008ce8:	2380      	movs	r3, #128	; 0x80
 8008cea:	011b      	lsls	r3, r3, #4
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d102      	bne.n	8008cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
          frequency = HSI_VALUE;
 8008cf0:	4b16      	ldr	r3, [pc, #88]	; (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008cf2:	617b      	str	r3, [r7, #20]
        break;
 8008cf4:	e1ae      	b.n	8009054 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8008cf6:	4b13      	ldr	r3, [pc, #76]	; (8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cfa:	2202      	movs	r2, #2
 8008cfc:	4013      	ands	r3, r2
 8008cfe:	2b02      	cmp	r3, #2
 8008d00:	d000      	beq.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8008d02:	e1a7      	b.n	8009054 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8008d04:	68fa      	ldr	r2, [r7, #12]
 8008d06:	23c0      	movs	r3, #192	; 0xc0
 8008d08:	011b      	lsls	r3, r3, #4
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d000      	beq.n	8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8008d0e:	e1a1      	b.n	8009054 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
          frequency = LSE_VALUE;
 8008d10:	2380      	movs	r3, #128	; 0x80
 8008d12:	021b      	lsls	r3, r3, #8
 8008d14:	617b      	str	r3, [r7, #20]
        break;
 8008d16:	e19d      	b.n	8009054 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008d18:	4b0a      	ldr	r3, [pc, #40]	; (8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d1c:	0f9b      	lsrs	r3, r3, #30
 8008d1e:	079b      	lsls	r3, r3, #30
 8008d20:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d104      	bne.n	8008d32 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
          frequency = HAL_RCC_GetSysClockFreq();
 8008d28:	f7ff fc0c 	bl	8008544 <HAL_RCC_GetSysClockFreq>
 8008d2c:	0003      	movs	r3, r0
 8008d2e:	617b      	str	r3, [r7, #20]
        break;
 8008d30:	e192      	b.n	8009058 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 8008d32:	68fa      	ldr	r2, [r7, #12]
 8008d34:	2380      	movs	r3, #128	; 0x80
 8008d36:	061b      	lsls	r3, r3, #24
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d10d      	bne.n	8008d58 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
          frequency = HSI_VALUE;
 8008d3c:	4b03      	ldr	r3, [pc, #12]	; (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008d3e:	617b      	str	r3, [r7, #20]
        break;
 8008d40:	e18a      	b.n	8009058 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008d42:	46c0      	nop			; (mov r8, r8)
 8008d44:	40021000 	.word	0x40021000
 8008d48:	0003d090 	.word	0x0003d090
 8008d4c:	00f42400 	.word	0x00f42400
 8008d50:	007a1200 	.word	0x007a1200
 8008d54:	00008012 	.word	0x00008012
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 8008d58:	68fa      	ldr	r2, [r7, #12]
 8008d5a:	2380      	movs	r3, #128	; 0x80
 8008d5c:	05db      	lsls	r3, r3, #23
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d000      	beq.n	8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
 8008d62:	e179      	b.n	8009058 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8008d64:	4bc5      	ldr	r3, [pc, #788]	; (800907c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008d66:	68da      	ldr	r2, [r3, #12]
 8008d68:	2380      	movs	r3, #128	; 0x80
 8008d6a:	025b      	lsls	r3, r3, #9
 8008d6c:	4013      	ands	r3, r2
 8008d6e:	d100      	bne.n	8008d72 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8008d70:	e172      	b.n	8009058 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008d72:	4bc2      	ldr	r3, [pc, #776]	; (800907c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008d74:	68db      	ldr	r3, [r3, #12]
 8008d76:	0a1b      	lsrs	r3, r3, #8
 8008d78:	227f      	movs	r2, #127	; 0x7f
 8008d7a:	4013      	ands	r3, r2
 8008d7c:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	68ba      	ldr	r2, [r7, #8]
 8008d82:	435a      	muls	r2, r3
 8008d84:	4bbd      	ldr	r3, [pc, #756]	; (800907c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008d86:	68db      	ldr	r3, [r3, #12]
 8008d88:	0c5b      	lsrs	r3, r3, #17
 8008d8a:	211f      	movs	r1, #31
 8008d8c:	400b      	ands	r3, r1
 8008d8e:	3301      	adds	r3, #1
 8008d90:	0019      	movs	r1, r3
 8008d92:	0010      	movs	r0, r2
 8008d94:	f7f7 f9b6 	bl	8000104 <__udivsi3>
 8008d98:	0003      	movs	r3, r0
 8008d9a:	617b      	str	r3, [r7, #20]
        break;
 8008d9c:	e15c      	b.n	8009058 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008d9e:	4bb7      	ldr	r3, [pc, #732]	; (800907c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008da0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008da2:	23c0      	movs	r3, #192	; 0xc0
 8008da4:	019b      	lsls	r3, r3, #6
 8008da6:	4013      	ands	r3, r2
 8008da8:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d104      	bne.n	8008dba <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008db0:	f7ff fc54 	bl	800865c <HAL_RCC_GetPCLK1Freq>
 8008db4:	0003      	movs	r3, r0
 8008db6:	617b      	str	r3, [r7, #20]
        break;
 8008db8:	e150      	b.n	800905c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8008dba:	68fa      	ldr	r2, [r7, #12]
 8008dbc:	2380      	movs	r3, #128	; 0x80
 8008dbe:	015b      	lsls	r3, r3, #5
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d104      	bne.n	8008dce <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          frequency = HAL_RCC_GetSysClockFreq();
 8008dc4:	f7ff fbbe 	bl	8008544 <HAL_RCC_GetSysClockFreq>
 8008dc8:	0003      	movs	r3, r0
 8008dca:	617b      	str	r3, [r7, #20]
        break;
 8008dcc:	e146      	b.n	800905c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8008dce:	4bab      	ldr	r3, [pc, #684]	; (800907c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	2380      	movs	r3, #128	; 0x80
 8008dd4:	00db      	lsls	r3, r3, #3
 8008dd6:	401a      	ands	r2, r3
 8008dd8:	2380      	movs	r3, #128	; 0x80
 8008dda:	00db      	lsls	r3, r3, #3
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d000      	beq.n	8008de2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 8008de0:	e13c      	b.n	800905c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8008de2:	68fa      	ldr	r2, [r7, #12]
 8008de4:	2380      	movs	r3, #128	; 0x80
 8008de6:	019b      	lsls	r3, r3, #6
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d000      	beq.n	8008dee <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 8008dec:	e136      	b.n	800905c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HSI_VALUE;
 8008dee:	4ba4      	ldr	r3, [pc, #656]	; (8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8008df0:	617b      	str	r3, [r7, #20]
        break;
 8008df2:	e133      	b.n	800905c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 8008df4:	4ba1      	ldr	r3, [pc, #644]	; (800907c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008df6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008df8:	23c0      	movs	r3, #192	; 0xc0
 8008dfa:	021b      	lsls	r3, r3, #8
 8008dfc:	4013      	ands	r3, r2
 8008dfe:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 8008e00:	68fa      	ldr	r2, [r7, #12]
 8008e02:	2380      	movs	r3, #128	; 0x80
 8008e04:	01db      	lsls	r3, r3, #7
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d11c      	bne.n	8008e44 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8008e0a:	4b9c      	ldr	r3, [pc, #624]	; (800907c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008e0c:	68da      	ldr	r2, [r3, #12]
 8008e0e:	2380      	movs	r3, #128	; 0x80
 8008e10:	025b      	lsls	r3, r3, #9
 8008e12:	4013      	ands	r3, r2
 8008e14:	d100      	bne.n	8008e18 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 8008e16:	e123      	b.n	8009060 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008e18:	4b98      	ldr	r3, [pc, #608]	; (800907c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008e1a:	68db      	ldr	r3, [r3, #12]
 8008e1c:	0a1b      	lsrs	r3, r3, #8
 8008e1e:	227f      	movs	r2, #127	; 0x7f
 8008e20:	4013      	ands	r3, r2
 8008e22:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	68ba      	ldr	r2, [r7, #8]
 8008e28:	435a      	muls	r2, r3
 8008e2a:	4b94      	ldr	r3, [pc, #592]	; (800907c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008e2c:	68db      	ldr	r3, [r3, #12]
 8008e2e:	0c5b      	lsrs	r3, r3, #17
 8008e30:	211f      	movs	r1, #31
 8008e32:	400b      	ands	r3, r1
 8008e34:	3301      	adds	r3, #1
 8008e36:	0019      	movs	r1, r3
 8008e38:	0010      	movs	r0, r2
 8008e3a:	f7f7 f963 	bl	8000104 <__udivsi3>
 8008e3e:	0003      	movs	r3, r0
 8008e40:	617b      	str	r3, [r7, #20]
        break;
 8008e42:	e10d      	b.n	8009060 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d104      	bne.n	8008e54 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
          frequency = HAL_RCC_GetSysClockFreq();
 8008e4a:	f7ff fb7b 	bl	8008544 <HAL_RCC_GetSysClockFreq>
 8008e4e:	0003      	movs	r3, r0
 8008e50:	617b      	str	r3, [r7, #20]
        break;
 8008e52:	e105      	b.n	8009060 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 8008e54:	4b89      	ldr	r3, [pc, #548]	; (800907c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	2380      	movs	r3, #128	; 0x80
 8008e5a:	00db      	lsls	r3, r3, #3
 8008e5c:	401a      	ands	r2, r3
 8008e5e:	2380      	movs	r3, #128	; 0x80
 8008e60:	00db      	lsls	r3, r3, #3
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d107      	bne.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
 8008e66:	68fa      	ldr	r2, [r7, #12]
 8008e68:	2380      	movs	r3, #128	; 0x80
 8008e6a:	021b      	lsls	r3, r3, #8
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d102      	bne.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          frequency = HSI_VALUE;
 8008e70:	4b83      	ldr	r3, [pc, #524]	; (8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8008e72:	617b      	str	r3, [r7, #20]
        break;
 8008e74:	e0f4      	b.n	8009060 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 8008e76:	68fa      	ldr	r2, [r7, #12]
 8008e78:	23c0      	movs	r3, #192	; 0xc0
 8008e7a:	021b      	lsls	r3, r3, #8
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d000      	beq.n	8008e82 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008e80:	e0ee      	b.n	8009060 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 8008e82:	4b80      	ldr	r3, [pc, #512]	; (8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8008e84:	617b      	str	r3, [r7, #20]
        break;
 8008e86:	e0eb      	b.n	8009060 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008e88:	4b7c      	ldr	r3, [pc, #496]	; (800907c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008e8a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e8c:	23c0      	movs	r3, #192	; 0xc0
 8008e8e:	031b      	lsls	r3, r3, #12
 8008e90:	4013      	ands	r3, r2
 8008e92:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d104      	bne.n	8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008e9a:	f7ff fbdf 	bl	800865c <HAL_RCC_GetPCLK1Freq>
 8008e9e:	0003      	movs	r3, r0
 8008ea0:	617b      	str	r3, [r7, #20]
        break;
 8008ea2:	e0df      	b.n	8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8008ea4:	4b75      	ldr	r3, [pc, #468]	; (800907c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008ea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ea8:	2202      	movs	r2, #2
 8008eaa:	4013      	ands	r3, r2
 8008eac:	2b02      	cmp	r3, #2
 8008eae:	d108      	bne.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 8008eb0:	68fa      	ldr	r2, [r7, #12]
 8008eb2:	2380      	movs	r3, #128	; 0x80
 8008eb4:	02db      	lsls	r3, r3, #11
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d103      	bne.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          frequency = LSI_VALUE;
 8008eba:	23fa      	movs	r3, #250	; 0xfa
 8008ebc:	01db      	lsls	r3, r3, #7
 8008ebe:	617b      	str	r3, [r7, #20]
 8008ec0:	e021      	b.n	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8008ec2:	4b6e      	ldr	r3, [pc, #440]	; (800907c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	2380      	movs	r3, #128	; 0x80
 8008ec8:	00db      	lsls	r3, r3, #3
 8008eca:	401a      	ands	r2, r3
 8008ecc:	2380      	movs	r3, #128	; 0x80
 8008ece:	00db      	lsls	r3, r3, #3
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d107      	bne.n	8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8008ed4:	68fa      	ldr	r2, [r7, #12]
 8008ed6:	2380      	movs	r3, #128	; 0x80
 8008ed8:	031b      	lsls	r3, r3, #12
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d102      	bne.n	8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          frequency = HSI_VALUE;
 8008ede:	4b68      	ldr	r3, [pc, #416]	; (8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8008ee0:	617b      	str	r3, [r7, #20]
 8008ee2:	e010      	b.n	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8008ee4:	4b65      	ldr	r3, [pc, #404]	; (800907c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ee8:	2202      	movs	r2, #2
 8008eea:	4013      	ands	r3, r2
 8008eec:	2b02      	cmp	r3, #2
 8008eee:	d000      	beq.n	8008ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008ef0:	e0b8      	b.n	8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8008ef2:	68fa      	ldr	r2, [r7, #12]
 8008ef4:	23c0      	movs	r3, #192	; 0xc0
 8008ef6:	031b      	lsls	r3, r3, #12
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d000      	beq.n	8008efe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008efc:	e0b2      	b.n	8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          frequency = LSE_VALUE;
 8008efe:	2380      	movs	r3, #128	; 0x80
 8008f00:	021b      	lsls	r3, r3, #8
 8008f02:	617b      	str	r3, [r7, #20]
        break;
 8008f04:	e0ae      	b.n	8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8008f06:	e0ad      	b.n	8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008f08:	4b5c      	ldr	r3, [pc, #368]	; (800907c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008f0a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f0c:	23c0      	movs	r3, #192	; 0xc0
 8008f0e:	039b      	lsls	r3, r3, #14
 8008f10:	4013      	ands	r3, r2
 8008f12:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d104      	bne.n	8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008f1a:	f7ff fb9f 	bl	800865c <HAL_RCC_GetPCLK1Freq>
 8008f1e:	0003      	movs	r3, r0
 8008f20:	617b      	str	r3, [r7, #20]
        break;
 8008f22:	e0a1      	b.n	8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8008f24:	4b55      	ldr	r3, [pc, #340]	; (800907c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f28:	2202      	movs	r2, #2
 8008f2a:	4013      	ands	r3, r2
 8008f2c:	2b02      	cmp	r3, #2
 8008f2e:	d108      	bne.n	8008f42 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 8008f30:	68fa      	ldr	r2, [r7, #12]
 8008f32:	2380      	movs	r3, #128	; 0x80
 8008f34:	035b      	lsls	r3, r3, #13
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d103      	bne.n	8008f42 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = LSI_VALUE;
 8008f3a:	23fa      	movs	r3, #250	; 0xfa
 8008f3c:	01db      	lsls	r3, r3, #7
 8008f3e:	617b      	str	r3, [r7, #20]
 8008f40:	e021      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8008f42:	4b4e      	ldr	r3, [pc, #312]	; (800907c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	2380      	movs	r3, #128	; 0x80
 8008f48:	00db      	lsls	r3, r3, #3
 8008f4a:	401a      	ands	r2, r3
 8008f4c:	2380      	movs	r3, #128	; 0x80
 8008f4e:	00db      	lsls	r3, r3, #3
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d107      	bne.n	8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 8008f54:	68fa      	ldr	r2, [r7, #12]
 8008f56:	2380      	movs	r3, #128	; 0x80
 8008f58:	039b      	lsls	r3, r3, #14
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d102      	bne.n	8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
          frequency = HSI_VALUE;
 8008f5e:	4b48      	ldr	r3, [pc, #288]	; (8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8008f60:	617b      	str	r3, [r7, #20]
 8008f62:	e010      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8008f64:	4b45      	ldr	r3, [pc, #276]	; (800907c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f68:	2202      	movs	r2, #2
 8008f6a:	4013      	ands	r3, r2
 8008f6c:	2b02      	cmp	r3, #2
 8008f6e:	d000      	beq.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8008f70:	e07a      	b.n	8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 8008f72:	68fa      	ldr	r2, [r7, #12]
 8008f74:	23c0      	movs	r3, #192	; 0xc0
 8008f76:	039b      	lsls	r3, r3, #14
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d000      	beq.n	8008f7e <HAL_RCCEx_GetPeriphCLKFreq+0x586>
 8008f7c:	e074      	b.n	8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          frequency = LSE_VALUE;
 8008f7e:	2380      	movs	r3, #128	; 0x80
 8008f80:	021b      	lsls	r3, r3, #8
 8008f82:	617b      	str	r3, [r7, #20]
        break;
 8008f84:	e070      	b.n	8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 8008f86:	e06f      	b.n	8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 8008f88:	4b3c      	ldr	r3, [pc, #240]	; (800907c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008f8a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f8c:	2380      	movs	r3, #128	; 0x80
 8008f8e:	03db      	lsls	r3, r3, #15
 8008f90:	4013      	ands	r3, r2
 8008f92:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 8008f94:	68fa      	ldr	r2, [r7, #12]
 8008f96:	2380      	movs	r3, #128	; 0x80
 8008f98:	03db      	lsls	r3, r3, #15
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d11b      	bne.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8008f9e:	4b37      	ldr	r3, [pc, #220]	; (800907c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008fa0:	68da      	ldr	r2, [r3, #12]
 8008fa2:	2380      	movs	r3, #128	; 0x80
 8008fa4:	045b      	lsls	r3, r3, #17
 8008fa6:	4013      	ands	r3, r2
 8008fa8:	d060      	beq.n	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008faa:	4b34      	ldr	r3, [pc, #208]	; (800907c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008fac:	68db      	ldr	r3, [r3, #12]
 8008fae:	0a1b      	lsrs	r3, r3, #8
 8008fb0:	227f      	movs	r2, #127	; 0x7f
 8008fb2:	4013      	ands	r3, r2
 8008fb4:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	68ba      	ldr	r2, [r7, #8]
 8008fba:	435a      	muls	r2, r3
 8008fbc:	4b2f      	ldr	r3, [pc, #188]	; (800907c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008fbe:	68db      	ldr	r3, [r3, #12]
 8008fc0:	0e5b      	lsrs	r3, r3, #25
 8008fc2:	2107      	movs	r1, #7
 8008fc4:	400b      	ands	r3, r1
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	0019      	movs	r1, r3
 8008fca:	0010      	movs	r0, r2
 8008fcc:	f7f7 f89a 	bl	8000104 <__udivsi3>
 8008fd0:	0003      	movs	r3, r0
 8008fd2:	617b      	str	r3, [r7, #20]
        break;
 8008fd4:	e04a      	b.n	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d147      	bne.n	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008fdc:	f7ff fb3e 	bl	800865c <HAL_RCC_GetPCLK1Freq>
 8008fe0:	0003      	movs	r3, r0
 8008fe2:	617b      	str	r3, [r7, #20]
        break;
 8008fe4:	e042      	b.n	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM15SEL);
 8008fe6:	4b25      	ldr	r3, [pc, #148]	; (800907c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008fe8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008fea:	2380      	movs	r3, #128	; 0x80
 8008fec:	045b      	lsls	r3, r3, #17
 8008fee:	4013      	ands	r3, r2
 8008ff0:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM15CLKSOURCE_PLL) /* PLL ? */
 8008ff2:	68fa      	ldr	r2, [r7, #12]
 8008ff4:	2380      	movs	r3, #128	; 0x80
 8008ff6:	045b      	lsls	r3, r3, #17
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d11b      	bne.n	8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8008ffc:	4b1f      	ldr	r3, [pc, #124]	; (800907c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008ffe:	68da      	ldr	r2, [r3, #12]
 8009000:	2380      	movs	r3, #128	; 0x80
 8009002:	045b      	lsls	r3, r3, #17
 8009004:	4013      	ands	r3, r2
 8009006:	d033      	beq.n	8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8009008:	4b1c      	ldr	r3, [pc, #112]	; (800907c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800900a:	68db      	ldr	r3, [r3, #12]
 800900c:	0a1b      	lsrs	r3, r3, #8
 800900e:	227f      	movs	r2, #127	; 0x7f
 8009010:	4013      	ands	r3, r2
 8009012:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	68ba      	ldr	r2, [r7, #8]
 8009018:	435a      	muls	r2, r3
 800901a:	4b18      	ldr	r3, [pc, #96]	; (800907c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	0e5b      	lsrs	r3, r3, #25
 8009020:	2107      	movs	r1, #7
 8009022:	400b      	ands	r3, r1
 8009024:	3301      	adds	r3, #1
 8009026:	0019      	movs	r1, r3
 8009028:	0010      	movs	r0, r2
 800902a:	f7f7 f86b 	bl	8000104 <__udivsi3>
 800902e:	0003      	movs	r3, r0
 8009030:	617b      	str	r3, [r7, #20]
        break;
 8009032:	e01d      	b.n	8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        else if (srcclk == RCC_TIM15CLKSOURCE_PCLK1) /* PCLK1 ? */
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d11a      	bne.n	8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
          frequency = HAL_RCC_GetPCLK1Freq();
 800903a:	f7ff fb0f 	bl	800865c <HAL_RCC_GetPCLK1Freq>
 800903e:	0003      	movs	r3, r0
 8009040:	617b      	str	r3, [r7, #20]
        break;
 8009042:	e015      	b.n	8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        break;
 8009044:	46c0      	nop			; (mov r8, r8)
 8009046:	e014      	b.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009048:	46c0      	nop			; (mov r8, r8)
 800904a:	e012      	b.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800904c:	46c0      	nop			; (mov r8, r8)
 800904e:	e010      	b.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009050:	46c0      	nop			; (mov r8, r8)
 8009052:	e00e      	b.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009054:	46c0      	nop			; (mov r8, r8)
 8009056:	e00c      	b.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009058:	46c0      	nop			; (mov r8, r8)
 800905a:	e00a      	b.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800905c:	46c0      	nop			; (mov r8, r8)
 800905e:	e008      	b.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009060:	46c0      	nop			; (mov r8, r8)
 8009062:	e006      	b.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009064:	46c0      	nop			; (mov r8, r8)
 8009066:	e004      	b.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009068:	46c0      	nop			; (mov r8, r8)
 800906a:	e002      	b.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800906c:	46c0      	nop			; (mov r8, r8)
 800906e:	e000      	b.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009070:	46c0      	nop			; (mov r8, r8)
    }
  }

  return (frequency);
 8009072:	697b      	ldr	r3, [r7, #20]
}
 8009074:	0018      	movs	r0, r3
 8009076:	46bd      	mov	sp, r7
 8009078:	b006      	add	sp, #24
 800907a:	bd80      	pop	{r7, pc}
 800907c:	40021000 	.word	0x40021000
 8009080:	00f42400 	.word	0x00f42400
 8009084:	0000bb80 	.word	0x0000bb80

08009088 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b084      	sub	sp, #16
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d101      	bne.n	800909a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009096:	2301      	movs	r3, #1
 8009098:	e0a8      	b.n	80091ec <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d109      	bne.n	80090b6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	685a      	ldr	r2, [r3, #4]
 80090a6:	2382      	movs	r3, #130	; 0x82
 80090a8:	005b      	lsls	r3, r3, #1
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d009      	beq.n	80090c2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	61da      	str	r2, [r3, #28]
 80090b4:	e005      	b.n	80090c2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2200      	movs	r2, #0
 80090ba:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	225d      	movs	r2, #93	; 0x5d
 80090cc:	5c9b      	ldrb	r3, [r3, r2]
 80090ce:	b2db      	uxtb	r3, r3
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d107      	bne.n	80090e4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	225c      	movs	r2, #92	; 0x5c
 80090d8:	2100      	movs	r1, #0
 80090da:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	0018      	movs	r0, r3
 80090e0:	f7fb fdda 	bl	8004c98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	225d      	movs	r2, #93	; 0x5d
 80090e8:	2102      	movs	r1, #2
 80090ea:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	681a      	ldr	r2, [r3, #0]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	2140      	movs	r1, #64	; 0x40
 80090f8:	438a      	bics	r2, r1
 80090fa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	68da      	ldr	r2, [r3, #12]
 8009100:	23e0      	movs	r3, #224	; 0xe0
 8009102:	00db      	lsls	r3, r3, #3
 8009104:	429a      	cmp	r2, r3
 8009106:	d902      	bls.n	800910e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009108:	2300      	movs	r3, #0
 800910a:	60fb      	str	r3, [r7, #12]
 800910c:	e002      	b.n	8009114 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800910e:	2380      	movs	r3, #128	; 0x80
 8009110:	015b      	lsls	r3, r3, #5
 8009112:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	68da      	ldr	r2, [r3, #12]
 8009118:	23f0      	movs	r3, #240	; 0xf0
 800911a:	011b      	lsls	r3, r3, #4
 800911c:	429a      	cmp	r2, r3
 800911e:	d008      	beq.n	8009132 <HAL_SPI_Init+0xaa>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	68da      	ldr	r2, [r3, #12]
 8009124:	23e0      	movs	r3, #224	; 0xe0
 8009126:	00db      	lsls	r3, r3, #3
 8009128:	429a      	cmp	r2, r3
 800912a:	d002      	beq.n	8009132 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	685a      	ldr	r2, [r3, #4]
 8009136:	2382      	movs	r3, #130	; 0x82
 8009138:	005b      	lsls	r3, r3, #1
 800913a:	401a      	ands	r2, r3
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6899      	ldr	r1, [r3, #8]
 8009140:	2384      	movs	r3, #132	; 0x84
 8009142:	021b      	lsls	r3, r3, #8
 8009144:	400b      	ands	r3, r1
 8009146:	431a      	orrs	r2, r3
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	691b      	ldr	r3, [r3, #16]
 800914c:	2102      	movs	r1, #2
 800914e:	400b      	ands	r3, r1
 8009150:	431a      	orrs	r2, r3
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	695b      	ldr	r3, [r3, #20]
 8009156:	2101      	movs	r1, #1
 8009158:	400b      	ands	r3, r1
 800915a:	431a      	orrs	r2, r3
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6999      	ldr	r1, [r3, #24]
 8009160:	2380      	movs	r3, #128	; 0x80
 8009162:	009b      	lsls	r3, r3, #2
 8009164:	400b      	ands	r3, r1
 8009166:	431a      	orrs	r2, r3
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	69db      	ldr	r3, [r3, #28]
 800916c:	2138      	movs	r1, #56	; 0x38
 800916e:	400b      	ands	r3, r1
 8009170:	431a      	orrs	r2, r3
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6a1b      	ldr	r3, [r3, #32]
 8009176:	2180      	movs	r1, #128	; 0x80
 8009178:	400b      	ands	r3, r1
 800917a:	431a      	orrs	r2, r3
 800917c:	0011      	movs	r1, r2
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009182:	2380      	movs	r3, #128	; 0x80
 8009184:	019b      	lsls	r3, r3, #6
 8009186:	401a      	ands	r2, r3
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	430a      	orrs	r2, r1
 800918e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	699b      	ldr	r3, [r3, #24]
 8009194:	0c1b      	lsrs	r3, r3, #16
 8009196:	2204      	movs	r2, #4
 8009198:	401a      	ands	r2, r3
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800919e:	2110      	movs	r1, #16
 80091a0:	400b      	ands	r3, r1
 80091a2:	431a      	orrs	r2, r3
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091a8:	2108      	movs	r1, #8
 80091aa:	400b      	ands	r3, r1
 80091ac:	431a      	orrs	r2, r3
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	68d9      	ldr	r1, [r3, #12]
 80091b2:	23f0      	movs	r3, #240	; 0xf0
 80091b4:	011b      	lsls	r3, r3, #4
 80091b6:	400b      	ands	r3, r1
 80091b8:	431a      	orrs	r2, r3
 80091ba:	0011      	movs	r1, r2
 80091bc:	68fa      	ldr	r2, [r7, #12]
 80091be:	2380      	movs	r3, #128	; 0x80
 80091c0:	015b      	lsls	r3, r3, #5
 80091c2:	401a      	ands	r2, r3
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	430a      	orrs	r2, r1
 80091ca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	69da      	ldr	r2, [r3, #28]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4907      	ldr	r1, [pc, #28]	; (80091f4 <HAL_SPI_Init+0x16c>)
 80091d8:	400a      	ands	r2, r1
 80091da:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2200      	movs	r2, #0
 80091e0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	225d      	movs	r2, #93	; 0x5d
 80091e6:	2101      	movs	r1, #1
 80091e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80091ea:	2300      	movs	r3, #0
}
 80091ec:	0018      	movs	r0, r3
 80091ee:	46bd      	mov	sp, r7
 80091f0:	b004      	add	sp, #16
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	fffff7ff 	.word	0xfffff7ff

080091f8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b088      	sub	sp, #32
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	60f8      	str	r0, [r7, #12]
 8009200:	60b9      	str	r1, [r7, #8]
 8009202:	603b      	str	r3, [r7, #0]
 8009204:	1dbb      	adds	r3, r7, #6
 8009206:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009208:	231f      	movs	r3, #31
 800920a:	18fb      	adds	r3, r7, r3
 800920c:	2200      	movs	r2, #0
 800920e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	225c      	movs	r2, #92	; 0x5c
 8009214:	5c9b      	ldrb	r3, [r3, r2]
 8009216:	2b01      	cmp	r3, #1
 8009218:	d101      	bne.n	800921e <HAL_SPI_Transmit+0x26>
 800921a:	2302      	movs	r3, #2
 800921c:	e140      	b.n	80094a0 <HAL_SPI_Transmit+0x2a8>
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	225c      	movs	r2, #92	; 0x5c
 8009222:	2101      	movs	r1, #1
 8009224:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009226:	f7fc f8d5 	bl	80053d4 <HAL_GetTick>
 800922a:	0003      	movs	r3, r0
 800922c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800922e:	2316      	movs	r3, #22
 8009230:	18fb      	adds	r3, r7, r3
 8009232:	1dba      	adds	r2, r7, #6
 8009234:	8812      	ldrh	r2, [r2, #0]
 8009236:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	225d      	movs	r2, #93	; 0x5d
 800923c:	5c9b      	ldrb	r3, [r3, r2]
 800923e:	b2db      	uxtb	r3, r3
 8009240:	2b01      	cmp	r3, #1
 8009242:	d004      	beq.n	800924e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8009244:	231f      	movs	r3, #31
 8009246:	18fb      	adds	r3, r7, r3
 8009248:	2202      	movs	r2, #2
 800924a:	701a      	strb	r2, [r3, #0]
    goto error;
 800924c:	e11d      	b.n	800948a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d003      	beq.n	800925c <HAL_SPI_Transmit+0x64>
 8009254:	1dbb      	adds	r3, r7, #6
 8009256:	881b      	ldrh	r3, [r3, #0]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d104      	bne.n	8009266 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800925c:	231f      	movs	r3, #31
 800925e:	18fb      	adds	r3, r7, r3
 8009260:	2201      	movs	r2, #1
 8009262:	701a      	strb	r2, [r3, #0]
    goto error;
 8009264:	e111      	b.n	800948a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	225d      	movs	r2, #93	; 0x5d
 800926a:	2103      	movs	r1, #3
 800926c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2200      	movs	r2, #0
 8009272:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	68ba      	ldr	r2, [r7, #8]
 8009278:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	1dba      	adds	r2, r7, #6
 800927e:	8812      	ldrh	r2, [r2, #0]
 8009280:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	1dba      	adds	r2, r7, #6
 8009286:	8812      	ldrh	r2, [r2, #0]
 8009288:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2200      	movs	r2, #0
 800928e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2244      	movs	r2, #68	; 0x44
 8009294:	2100      	movs	r1, #0
 8009296:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2246      	movs	r2, #70	; 0x46
 800929c:	2100      	movs	r1, #0
 800929e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	2200      	movs	r2, #0
 80092a4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2200      	movs	r2, #0
 80092aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	689a      	ldr	r2, [r3, #8]
 80092b0:	2380      	movs	r3, #128	; 0x80
 80092b2:	021b      	lsls	r3, r3, #8
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d110      	bne.n	80092da <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	2140      	movs	r1, #64	; 0x40
 80092c4:	438a      	bics	r2, r1
 80092c6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	2180      	movs	r1, #128	; 0x80
 80092d4:	01c9      	lsls	r1, r1, #7
 80092d6:	430a      	orrs	r2, r1
 80092d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	2240      	movs	r2, #64	; 0x40
 80092e2:	4013      	ands	r3, r2
 80092e4:	2b40      	cmp	r3, #64	; 0x40
 80092e6:	d007      	beq.n	80092f8 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	2140      	movs	r1, #64	; 0x40
 80092f4:	430a      	orrs	r2, r1
 80092f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	68da      	ldr	r2, [r3, #12]
 80092fc:	23e0      	movs	r3, #224	; 0xe0
 80092fe:	00db      	lsls	r3, r3, #3
 8009300:	429a      	cmp	r2, r3
 8009302:	d94e      	bls.n	80093a2 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d004      	beq.n	8009316 <HAL_SPI_Transmit+0x11e>
 800930c:	2316      	movs	r3, #22
 800930e:	18fb      	adds	r3, r7, r3
 8009310:	881b      	ldrh	r3, [r3, #0]
 8009312:	2b01      	cmp	r3, #1
 8009314:	d13f      	bne.n	8009396 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800931a:	881a      	ldrh	r2, [r3, #0]
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009326:	1c9a      	adds	r2, r3, #2
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009330:	b29b      	uxth	r3, r3
 8009332:	3b01      	subs	r3, #1
 8009334:	b29a      	uxth	r2, r3
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800933a:	e02c      	b.n	8009396 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	689b      	ldr	r3, [r3, #8]
 8009342:	2202      	movs	r2, #2
 8009344:	4013      	ands	r3, r2
 8009346:	2b02      	cmp	r3, #2
 8009348:	d112      	bne.n	8009370 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800934e:	881a      	ldrh	r2, [r3, #0]
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800935a:	1c9a      	adds	r2, r3, #2
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009364:	b29b      	uxth	r3, r3
 8009366:	3b01      	subs	r3, #1
 8009368:	b29a      	uxth	r2, r3
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800936e:	e012      	b.n	8009396 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009370:	f7fc f830 	bl	80053d4 <HAL_GetTick>
 8009374:	0002      	movs	r2, r0
 8009376:	69bb      	ldr	r3, [r7, #24]
 8009378:	1ad3      	subs	r3, r2, r3
 800937a:	683a      	ldr	r2, [r7, #0]
 800937c:	429a      	cmp	r2, r3
 800937e:	d802      	bhi.n	8009386 <HAL_SPI_Transmit+0x18e>
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	3301      	adds	r3, #1
 8009384:	d102      	bne.n	800938c <HAL_SPI_Transmit+0x194>
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d104      	bne.n	8009396 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 800938c:	231f      	movs	r3, #31
 800938e:	18fb      	adds	r3, r7, r3
 8009390:	2203      	movs	r2, #3
 8009392:	701a      	strb	r2, [r3, #0]
          goto error;
 8009394:	e079      	b.n	800948a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800939a:	b29b      	uxth	r3, r3
 800939c:	2b00      	cmp	r3, #0
 800939e:	d1cd      	bne.n	800933c <HAL_SPI_Transmit+0x144>
 80093a0:	e04f      	b.n	8009442 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	685b      	ldr	r3, [r3, #4]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d004      	beq.n	80093b4 <HAL_SPI_Transmit+0x1bc>
 80093aa:	2316      	movs	r3, #22
 80093ac:	18fb      	adds	r3, r7, r3
 80093ae:	881b      	ldrh	r3, [r3, #0]
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d141      	bne.n	8009438 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	330c      	adds	r3, #12
 80093be:	7812      	ldrb	r2, [r2, #0]
 80093c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c6:	1c5a      	adds	r2, r3, #1
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093d0:	b29b      	uxth	r3, r3
 80093d2:	3b01      	subs	r3, #1
 80093d4:	b29a      	uxth	r2, r3
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80093da:	e02d      	b.n	8009438 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	689b      	ldr	r3, [r3, #8]
 80093e2:	2202      	movs	r2, #2
 80093e4:	4013      	ands	r3, r2
 80093e6:	2b02      	cmp	r3, #2
 80093e8:	d113      	bne.n	8009412 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	330c      	adds	r3, #12
 80093f4:	7812      	ldrb	r2, [r2, #0]
 80093f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093fc:	1c5a      	adds	r2, r3, #1
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009406:	b29b      	uxth	r3, r3
 8009408:	3b01      	subs	r3, #1
 800940a:	b29a      	uxth	r2, r3
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009410:	e012      	b.n	8009438 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009412:	f7fb ffdf 	bl	80053d4 <HAL_GetTick>
 8009416:	0002      	movs	r2, r0
 8009418:	69bb      	ldr	r3, [r7, #24]
 800941a:	1ad3      	subs	r3, r2, r3
 800941c:	683a      	ldr	r2, [r7, #0]
 800941e:	429a      	cmp	r2, r3
 8009420:	d802      	bhi.n	8009428 <HAL_SPI_Transmit+0x230>
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	3301      	adds	r3, #1
 8009426:	d102      	bne.n	800942e <HAL_SPI_Transmit+0x236>
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d104      	bne.n	8009438 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800942e:	231f      	movs	r3, #31
 8009430:	18fb      	adds	r3, r7, r3
 8009432:	2203      	movs	r2, #3
 8009434:	701a      	strb	r2, [r3, #0]
          goto error;
 8009436:	e028      	b.n	800948a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800943c:	b29b      	uxth	r3, r3
 800943e:	2b00      	cmp	r3, #0
 8009440:	d1cc      	bne.n	80093dc <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009442:	69ba      	ldr	r2, [r7, #24]
 8009444:	6839      	ldr	r1, [r7, #0]
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	0018      	movs	r0, r3
 800944a:	f001 f9cb 	bl	800a7e4 <SPI_EndRxTxTransaction>
 800944e:	1e03      	subs	r3, r0, #0
 8009450:	d002      	beq.n	8009458 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2220      	movs	r2, #32
 8009456:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	689b      	ldr	r3, [r3, #8]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d10a      	bne.n	8009476 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009460:	2300      	movs	r3, #0
 8009462:	613b      	str	r3, [r7, #16]
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	68db      	ldr	r3, [r3, #12]
 800946a:	613b      	str	r3, [r7, #16]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	613b      	str	r3, [r7, #16]
 8009474:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800947a:	2b00      	cmp	r3, #0
 800947c:	d004      	beq.n	8009488 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800947e:	231f      	movs	r3, #31
 8009480:	18fb      	adds	r3, r7, r3
 8009482:	2201      	movs	r2, #1
 8009484:	701a      	strb	r2, [r3, #0]
 8009486:	e000      	b.n	800948a <HAL_SPI_Transmit+0x292>
  }

error:
 8009488:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	225d      	movs	r2, #93	; 0x5d
 800948e:	2101      	movs	r1, #1
 8009490:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	225c      	movs	r2, #92	; 0x5c
 8009496:	2100      	movs	r1, #0
 8009498:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800949a:	231f      	movs	r3, #31
 800949c:	18fb      	adds	r3, r7, r3
 800949e:	781b      	ldrb	r3, [r3, #0]
}
 80094a0:	0018      	movs	r0, r3
 80094a2:	46bd      	mov	sp, r7
 80094a4:	b008      	add	sp, #32
 80094a6:	bd80      	pop	{r7, pc}

080094a8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80094a8:	b590      	push	{r4, r7, lr}
 80094aa:	b089      	sub	sp, #36	; 0x24
 80094ac:	af02      	add	r7, sp, #8
 80094ae:	60f8      	str	r0, [r7, #12]
 80094b0:	60b9      	str	r1, [r7, #8]
 80094b2:	603b      	str	r3, [r7, #0]
 80094b4:	1dbb      	adds	r3, r7, #6
 80094b6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80094b8:	2317      	movs	r3, #23
 80094ba:	18fb      	adds	r3, r7, r3
 80094bc:	2200      	movs	r2, #0
 80094be:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	685a      	ldr	r2, [r3, #4]
 80094c4:	2382      	movs	r3, #130	; 0x82
 80094c6:	005b      	lsls	r3, r3, #1
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d113      	bne.n	80094f4 <HAL_SPI_Receive+0x4c>
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	689b      	ldr	r3, [r3, #8]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d10f      	bne.n	80094f4 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	225d      	movs	r2, #93	; 0x5d
 80094d8:	2104      	movs	r1, #4
 80094da:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80094dc:	1dbb      	adds	r3, r7, #6
 80094de:	881c      	ldrh	r4, [r3, #0]
 80094e0:	68ba      	ldr	r2, [r7, #8]
 80094e2:	68b9      	ldr	r1, [r7, #8]
 80094e4:	68f8      	ldr	r0, [r7, #12]
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	9300      	str	r3, [sp, #0]
 80094ea:	0023      	movs	r3, r4
 80094ec:	f000 f928 	bl	8009740 <HAL_SPI_TransmitReceive>
 80094f0:	0003      	movs	r3, r0
 80094f2:	e11c      	b.n	800972e <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	225c      	movs	r2, #92	; 0x5c
 80094f8:	5c9b      	ldrb	r3, [r3, r2]
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d101      	bne.n	8009502 <HAL_SPI_Receive+0x5a>
 80094fe:	2302      	movs	r3, #2
 8009500:	e115      	b.n	800972e <HAL_SPI_Receive+0x286>
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	225c      	movs	r2, #92	; 0x5c
 8009506:	2101      	movs	r1, #1
 8009508:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800950a:	f7fb ff63 	bl	80053d4 <HAL_GetTick>
 800950e:	0003      	movs	r3, r0
 8009510:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	225d      	movs	r2, #93	; 0x5d
 8009516:	5c9b      	ldrb	r3, [r3, r2]
 8009518:	b2db      	uxtb	r3, r3
 800951a:	2b01      	cmp	r3, #1
 800951c:	d004      	beq.n	8009528 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800951e:	2317      	movs	r3, #23
 8009520:	18fb      	adds	r3, r7, r3
 8009522:	2202      	movs	r2, #2
 8009524:	701a      	strb	r2, [r3, #0]
    goto error;
 8009526:	e0f7      	b.n	8009718 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d003      	beq.n	8009536 <HAL_SPI_Receive+0x8e>
 800952e:	1dbb      	adds	r3, r7, #6
 8009530:	881b      	ldrh	r3, [r3, #0]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d104      	bne.n	8009540 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8009536:	2317      	movs	r3, #23
 8009538:	18fb      	adds	r3, r7, r3
 800953a:	2201      	movs	r2, #1
 800953c:	701a      	strb	r2, [r3, #0]
    goto error;
 800953e:	e0eb      	b.n	8009718 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	225d      	movs	r2, #93	; 0x5d
 8009544:	2104      	movs	r1, #4
 8009546:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2200      	movs	r2, #0
 800954c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	68ba      	ldr	r2, [r7, #8]
 8009552:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	1dba      	adds	r2, r7, #6
 8009558:	2144      	movs	r1, #68	; 0x44
 800955a:	8812      	ldrh	r2, [r2, #0]
 800955c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	1dba      	adds	r2, r7, #6
 8009562:	2146      	movs	r1, #70	; 0x46
 8009564:	8812      	ldrh	r2, [r2, #0]
 8009566:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2200      	movs	r2, #0
 800956c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2200      	movs	r2, #0
 8009572:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2200      	movs	r2, #0
 8009578:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2200      	movs	r2, #0
 800957e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2200      	movs	r2, #0
 8009584:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	68da      	ldr	r2, [r3, #12]
 800958a:	23e0      	movs	r3, #224	; 0xe0
 800958c:	00db      	lsls	r3, r3, #3
 800958e:	429a      	cmp	r2, r3
 8009590:	d908      	bls.n	80095a4 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	685a      	ldr	r2, [r3, #4]
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4966      	ldr	r1, [pc, #408]	; (8009738 <HAL_SPI_Receive+0x290>)
 800959e:	400a      	ands	r2, r1
 80095a0:	605a      	str	r2, [r3, #4]
 80095a2:	e008      	b.n	80095b6 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	685a      	ldr	r2, [r3, #4]
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	2180      	movs	r1, #128	; 0x80
 80095b0:	0149      	lsls	r1, r1, #5
 80095b2:	430a      	orrs	r2, r1
 80095b4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	689a      	ldr	r2, [r3, #8]
 80095ba:	2380      	movs	r3, #128	; 0x80
 80095bc:	021b      	lsls	r3, r3, #8
 80095be:	429a      	cmp	r2, r3
 80095c0:	d10f      	bne.n	80095e2 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	681a      	ldr	r2, [r3, #0]
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	2140      	movs	r1, #64	; 0x40
 80095ce:	438a      	bics	r2, r1
 80095d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	681a      	ldr	r2, [r3, #0]
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4957      	ldr	r1, [pc, #348]	; (800973c <HAL_SPI_Receive+0x294>)
 80095de:	400a      	ands	r2, r1
 80095e0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	2240      	movs	r2, #64	; 0x40
 80095ea:	4013      	ands	r3, r2
 80095ec:	2b40      	cmp	r3, #64	; 0x40
 80095ee:	d007      	beq.n	8009600 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	681a      	ldr	r2, [r3, #0]
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	2140      	movs	r1, #64	; 0x40
 80095fc:	430a      	orrs	r2, r1
 80095fe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	68da      	ldr	r2, [r3, #12]
 8009604:	23e0      	movs	r3, #224	; 0xe0
 8009606:	00db      	lsls	r3, r3, #3
 8009608:	429a      	cmp	r2, r3
 800960a:	d900      	bls.n	800960e <HAL_SPI_Receive+0x166>
 800960c:	e069      	b.n	80096e2 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800960e:	e031      	b.n	8009674 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	689b      	ldr	r3, [r3, #8]
 8009616:	2201      	movs	r2, #1
 8009618:	4013      	ands	r3, r2
 800961a:	2b01      	cmp	r3, #1
 800961c:	d117      	bne.n	800964e <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	330c      	adds	r3, #12
 8009624:	001a      	movs	r2, r3
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800962a:	7812      	ldrb	r2, [r2, #0]
 800962c:	b2d2      	uxtb	r2, r2
 800962e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009634:	1c5a      	adds	r2, r3, #1
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2246      	movs	r2, #70	; 0x46
 800963e:	5a9b      	ldrh	r3, [r3, r2]
 8009640:	b29b      	uxth	r3, r3
 8009642:	3b01      	subs	r3, #1
 8009644:	b299      	uxth	r1, r3
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2246      	movs	r2, #70	; 0x46
 800964a:	5299      	strh	r1, [r3, r2]
 800964c:	e012      	b.n	8009674 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800964e:	f7fb fec1 	bl	80053d4 <HAL_GetTick>
 8009652:	0002      	movs	r2, r0
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	1ad3      	subs	r3, r2, r3
 8009658:	683a      	ldr	r2, [r7, #0]
 800965a:	429a      	cmp	r2, r3
 800965c:	d802      	bhi.n	8009664 <HAL_SPI_Receive+0x1bc>
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	3301      	adds	r3, #1
 8009662:	d102      	bne.n	800966a <HAL_SPI_Receive+0x1c2>
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d104      	bne.n	8009674 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 800966a:	2317      	movs	r3, #23
 800966c:	18fb      	adds	r3, r7, r3
 800966e:	2203      	movs	r2, #3
 8009670:	701a      	strb	r2, [r3, #0]
          goto error;
 8009672:	e051      	b.n	8009718 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2246      	movs	r2, #70	; 0x46
 8009678:	5a9b      	ldrh	r3, [r3, r2]
 800967a:	b29b      	uxth	r3, r3
 800967c:	2b00      	cmp	r3, #0
 800967e:	d1c7      	bne.n	8009610 <HAL_SPI_Receive+0x168>
 8009680:	e035      	b.n	80096ee <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	689b      	ldr	r3, [r3, #8]
 8009688:	2201      	movs	r2, #1
 800968a:	4013      	ands	r3, r2
 800968c:	2b01      	cmp	r3, #1
 800968e:	d115      	bne.n	80096bc <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	68da      	ldr	r2, [r3, #12]
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800969a:	b292      	uxth	r2, r2
 800969c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096a2:	1c9a      	adds	r2, r3, #2
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2246      	movs	r2, #70	; 0x46
 80096ac:	5a9b      	ldrh	r3, [r3, r2]
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	3b01      	subs	r3, #1
 80096b2:	b299      	uxth	r1, r3
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2246      	movs	r2, #70	; 0x46
 80096b8:	5299      	strh	r1, [r3, r2]
 80096ba:	e012      	b.n	80096e2 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80096bc:	f7fb fe8a 	bl	80053d4 <HAL_GetTick>
 80096c0:	0002      	movs	r2, r0
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	1ad3      	subs	r3, r2, r3
 80096c6:	683a      	ldr	r2, [r7, #0]
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d802      	bhi.n	80096d2 <HAL_SPI_Receive+0x22a>
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	3301      	adds	r3, #1
 80096d0:	d102      	bne.n	80096d8 <HAL_SPI_Receive+0x230>
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d104      	bne.n	80096e2 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 80096d8:	2317      	movs	r3, #23
 80096da:	18fb      	adds	r3, r7, r3
 80096dc:	2203      	movs	r2, #3
 80096de:	701a      	strb	r2, [r3, #0]
          goto error;
 80096e0:	e01a      	b.n	8009718 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2246      	movs	r2, #70	; 0x46
 80096e6:	5a9b      	ldrh	r3, [r3, r2]
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d1c9      	bne.n	8009682 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80096ee:	693a      	ldr	r2, [r7, #16]
 80096f0:	6839      	ldr	r1, [r7, #0]
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	0018      	movs	r0, r3
 80096f6:	f001 f817 	bl	800a728 <SPI_EndRxTransaction>
 80096fa:	1e03      	subs	r3, r0, #0
 80096fc:	d002      	beq.n	8009704 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2220      	movs	r2, #32
 8009702:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009708:	2b00      	cmp	r3, #0
 800970a:	d004      	beq.n	8009716 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 800970c:	2317      	movs	r3, #23
 800970e:	18fb      	adds	r3, r7, r3
 8009710:	2201      	movs	r2, #1
 8009712:	701a      	strb	r2, [r3, #0]
 8009714:	e000      	b.n	8009718 <HAL_SPI_Receive+0x270>
  }

error :
 8009716:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	225d      	movs	r2, #93	; 0x5d
 800971c:	2101      	movs	r1, #1
 800971e:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	225c      	movs	r2, #92	; 0x5c
 8009724:	2100      	movs	r1, #0
 8009726:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009728:	2317      	movs	r3, #23
 800972a:	18fb      	adds	r3, r7, r3
 800972c:	781b      	ldrb	r3, [r3, #0]
}
 800972e:	0018      	movs	r0, r3
 8009730:	46bd      	mov	sp, r7
 8009732:	b007      	add	sp, #28
 8009734:	bd90      	pop	{r4, r7, pc}
 8009736:	46c0      	nop			; (mov r8, r8)
 8009738:	ffffefff 	.word	0xffffefff
 800973c:	ffffbfff 	.word	0xffffbfff

08009740 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b08a      	sub	sp, #40	; 0x28
 8009744:	af00      	add	r7, sp, #0
 8009746:	60f8      	str	r0, [r7, #12]
 8009748:	60b9      	str	r1, [r7, #8]
 800974a:	607a      	str	r2, [r7, #4]
 800974c:	001a      	movs	r2, r3
 800974e:	1cbb      	adds	r3, r7, #2
 8009750:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009752:	2301      	movs	r3, #1
 8009754:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009756:	2323      	movs	r3, #35	; 0x23
 8009758:	18fb      	adds	r3, r7, r3
 800975a:	2200      	movs	r2, #0
 800975c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	225c      	movs	r2, #92	; 0x5c
 8009762:	5c9b      	ldrb	r3, [r3, r2]
 8009764:	2b01      	cmp	r3, #1
 8009766:	d101      	bne.n	800976c <HAL_SPI_TransmitReceive+0x2c>
 8009768:	2302      	movs	r3, #2
 800976a:	e1b5      	b.n	8009ad8 <HAL_SPI_TransmitReceive+0x398>
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	225c      	movs	r2, #92	; 0x5c
 8009770:	2101      	movs	r1, #1
 8009772:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009774:	f7fb fe2e 	bl	80053d4 <HAL_GetTick>
 8009778:	0003      	movs	r3, r0
 800977a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800977c:	201b      	movs	r0, #27
 800977e:	183b      	adds	r3, r7, r0
 8009780:	68fa      	ldr	r2, [r7, #12]
 8009782:	215d      	movs	r1, #93	; 0x5d
 8009784:	5c52      	ldrb	r2, [r2, r1]
 8009786:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800978e:	2312      	movs	r3, #18
 8009790:	18fb      	adds	r3, r7, r3
 8009792:	1cba      	adds	r2, r7, #2
 8009794:	8812      	ldrh	r2, [r2, #0]
 8009796:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009798:	183b      	adds	r3, r7, r0
 800979a:	781b      	ldrb	r3, [r3, #0]
 800979c:	2b01      	cmp	r3, #1
 800979e:	d011      	beq.n	80097c4 <HAL_SPI_TransmitReceive+0x84>
 80097a0:	697a      	ldr	r2, [r7, #20]
 80097a2:	2382      	movs	r3, #130	; 0x82
 80097a4:	005b      	lsls	r3, r3, #1
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d107      	bne.n	80097ba <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	689b      	ldr	r3, [r3, #8]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d103      	bne.n	80097ba <HAL_SPI_TransmitReceive+0x7a>
 80097b2:	183b      	adds	r3, r7, r0
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	2b04      	cmp	r3, #4
 80097b8:	d004      	beq.n	80097c4 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80097ba:	2323      	movs	r3, #35	; 0x23
 80097bc:	18fb      	adds	r3, r7, r3
 80097be:	2202      	movs	r2, #2
 80097c0:	701a      	strb	r2, [r3, #0]
    goto error;
 80097c2:	e17e      	b.n	8009ac2 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d006      	beq.n	80097d8 <HAL_SPI_TransmitReceive+0x98>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d003      	beq.n	80097d8 <HAL_SPI_TransmitReceive+0x98>
 80097d0:	1cbb      	adds	r3, r7, #2
 80097d2:	881b      	ldrh	r3, [r3, #0]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d104      	bne.n	80097e2 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80097d8:	2323      	movs	r3, #35	; 0x23
 80097da:	18fb      	adds	r3, r7, r3
 80097dc:	2201      	movs	r2, #1
 80097de:	701a      	strb	r2, [r3, #0]
    goto error;
 80097e0:	e16f      	b.n	8009ac2 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	225d      	movs	r2, #93	; 0x5d
 80097e6:	5c9b      	ldrb	r3, [r3, r2]
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	2b04      	cmp	r3, #4
 80097ec:	d003      	beq.n	80097f6 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	225d      	movs	r2, #93	; 0x5d
 80097f2:	2105      	movs	r1, #5
 80097f4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2200      	movs	r2, #0
 80097fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	687a      	ldr	r2, [r7, #4]
 8009800:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	1cba      	adds	r2, r7, #2
 8009806:	2146      	movs	r1, #70	; 0x46
 8009808:	8812      	ldrh	r2, [r2, #0]
 800980a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	1cba      	adds	r2, r7, #2
 8009810:	2144      	movs	r1, #68	; 0x44
 8009812:	8812      	ldrh	r2, [r2, #0]
 8009814:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	68ba      	ldr	r2, [r7, #8]
 800981a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	1cba      	adds	r2, r7, #2
 8009820:	8812      	ldrh	r2, [r2, #0]
 8009822:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	1cba      	adds	r2, r7, #2
 8009828:	8812      	ldrh	r2, [r2, #0]
 800982a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2200      	movs	r2, #0
 8009830:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2200      	movs	r2, #0
 8009836:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	68da      	ldr	r2, [r3, #12]
 800983c:	23e0      	movs	r3, #224	; 0xe0
 800983e:	00db      	lsls	r3, r3, #3
 8009840:	429a      	cmp	r2, r3
 8009842:	d908      	bls.n	8009856 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	685a      	ldr	r2, [r3, #4]
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	49a4      	ldr	r1, [pc, #656]	; (8009ae0 <HAL_SPI_TransmitReceive+0x3a0>)
 8009850:	400a      	ands	r2, r1
 8009852:	605a      	str	r2, [r3, #4]
 8009854:	e008      	b.n	8009868 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	685a      	ldr	r2, [r3, #4]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	2180      	movs	r1, #128	; 0x80
 8009862:	0149      	lsls	r1, r1, #5
 8009864:	430a      	orrs	r2, r1
 8009866:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	2240      	movs	r2, #64	; 0x40
 8009870:	4013      	ands	r3, r2
 8009872:	2b40      	cmp	r3, #64	; 0x40
 8009874:	d007      	beq.n	8009886 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	2140      	movs	r1, #64	; 0x40
 8009882:	430a      	orrs	r2, r1
 8009884:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	68da      	ldr	r2, [r3, #12]
 800988a:	23e0      	movs	r3, #224	; 0xe0
 800988c:	00db      	lsls	r3, r3, #3
 800988e:	429a      	cmp	r2, r3
 8009890:	d800      	bhi.n	8009894 <HAL_SPI_TransmitReceive+0x154>
 8009892:	e07f      	b.n	8009994 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d005      	beq.n	80098a8 <HAL_SPI_TransmitReceive+0x168>
 800989c:	2312      	movs	r3, #18
 800989e:	18fb      	adds	r3, r7, r3
 80098a0:	881b      	ldrh	r3, [r3, #0]
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d000      	beq.n	80098a8 <HAL_SPI_TransmitReceive+0x168>
 80098a6:	e069      	b.n	800997c <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ac:	881a      	ldrh	r2, [r3, #0]
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098b8:	1c9a      	adds	r2, r3, #2
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	3b01      	subs	r3, #1
 80098c6:	b29a      	uxth	r2, r3
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80098cc:	e056      	b.n	800997c <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	689b      	ldr	r3, [r3, #8]
 80098d4:	2202      	movs	r2, #2
 80098d6:	4013      	ands	r3, r2
 80098d8:	2b02      	cmp	r3, #2
 80098da:	d11b      	bne.n	8009914 <HAL_SPI_TransmitReceive+0x1d4>
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d016      	beq.n	8009914 <HAL_SPI_TransmitReceive+0x1d4>
 80098e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d113      	bne.n	8009914 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098f0:	881a      	ldrh	r2, [r3, #0]
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098fc:	1c9a      	adds	r2, r3, #2
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009906:	b29b      	uxth	r3, r3
 8009908:	3b01      	subs	r3, #1
 800990a:	b29a      	uxth	r2, r3
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009910:	2300      	movs	r3, #0
 8009912:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	689b      	ldr	r3, [r3, #8]
 800991a:	2201      	movs	r2, #1
 800991c:	4013      	ands	r3, r2
 800991e:	2b01      	cmp	r3, #1
 8009920:	d11c      	bne.n	800995c <HAL_SPI_TransmitReceive+0x21c>
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2246      	movs	r2, #70	; 0x46
 8009926:	5a9b      	ldrh	r3, [r3, r2]
 8009928:	b29b      	uxth	r3, r3
 800992a:	2b00      	cmp	r3, #0
 800992c:	d016      	beq.n	800995c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	68da      	ldr	r2, [r3, #12]
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009938:	b292      	uxth	r2, r2
 800993a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009940:	1c9a      	adds	r2, r3, #2
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	2246      	movs	r2, #70	; 0x46
 800994a:	5a9b      	ldrh	r3, [r3, r2]
 800994c:	b29b      	uxth	r3, r3
 800994e:	3b01      	subs	r3, #1
 8009950:	b299      	uxth	r1, r3
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	2246      	movs	r2, #70	; 0x46
 8009956:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009958:	2301      	movs	r3, #1
 800995a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800995c:	f7fb fd3a 	bl	80053d4 <HAL_GetTick>
 8009960:	0002      	movs	r2, r0
 8009962:	69fb      	ldr	r3, [r7, #28]
 8009964:	1ad3      	subs	r3, r2, r3
 8009966:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009968:	429a      	cmp	r2, r3
 800996a:	d807      	bhi.n	800997c <HAL_SPI_TransmitReceive+0x23c>
 800996c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800996e:	3301      	adds	r3, #1
 8009970:	d004      	beq.n	800997c <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8009972:	2323      	movs	r3, #35	; 0x23
 8009974:	18fb      	adds	r3, r7, r3
 8009976:	2203      	movs	r2, #3
 8009978:	701a      	strb	r2, [r3, #0]
        goto error;
 800997a:	e0a2      	b.n	8009ac2 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009980:	b29b      	uxth	r3, r3
 8009982:	2b00      	cmp	r3, #0
 8009984:	d1a3      	bne.n	80098ce <HAL_SPI_TransmitReceive+0x18e>
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2246      	movs	r2, #70	; 0x46
 800998a:	5a9b      	ldrh	r3, [r3, r2]
 800998c:	b29b      	uxth	r3, r3
 800998e:	2b00      	cmp	r3, #0
 8009990:	d19d      	bne.n	80098ce <HAL_SPI_TransmitReceive+0x18e>
 8009992:	e085      	b.n	8009aa0 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d005      	beq.n	80099a8 <HAL_SPI_TransmitReceive+0x268>
 800999c:	2312      	movs	r3, #18
 800999e:	18fb      	adds	r3, r7, r3
 80099a0:	881b      	ldrh	r3, [r3, #0]
 80099a2:	2b01      	cmp	r3, #1
 80099a4:	d000      	beq.n	80099a8 <HAL_SPI_TransmitReceive+0x268>
 80099a6:	e070      	b.n	8009a8a <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	330c      	adds	r3, #12
 80099b2:	7812      	ldrb	r2, [r2, #0]
 80099b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ba:	1c5a      	adds	r2, r3, #1
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099c4:	b29b      	uxth	r3, r3
 80099c6:	3b01      	subs	r3, #1
 80099c8:	b29a      	uxth	r2, r3
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80099ce:	e05c      	b.n	8009a8a <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	689b      	ldr	r3, [r3, #8]
 80099d6:	2202      	movs	r2, #2
 80099d8:	4013      	ands	r3, r2
 80099da:	2b02      	cmp	r3, #2
 80099dc:	d11c      	bne.n	8009a18 <HAL_SPI_TransmitReceive+0x2d8>
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099e2:	b29b      	uxth	r3, r3
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d017      	beq.n	8009a18 <HAL_SPI_TransmitReceive+0x2d8>
 80099e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ea:	2b01      	cmp	r3, #1
 80099ec:	d114      	bne.n	8009a18 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	330c      	adds	r3, #12
 80099f8:	7812      	ldrb	r2, [r2, #0]
 80099fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a00:	1c5a      	adds	r2, r3, #1
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	3b01      	subs	r3, #1
 8009a0e:	b29a      	uxth	r2, r3
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009a14:	2300      	movs	r3, #0
 8009a16:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	689b      	ldr	r3, [r3, #8]
 8009a1e:	2201      	movs	r2, #1
 8009a20:	4013      	ands	r3, r2
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d11e      	bne.n	8009a64 <HAL_SPI_TransmitReceive+0x324>
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	2246      	movs	r2, #70	; 0x46
 8009a2a:	5a9b      	ldrh	r3, [r3, r2]
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d018      	beq.n	8009a64 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	330c      	adds	r3, #12
 8009a38:	001a      	movs	r2, r3
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a3e:	7812      	ldrb	r2, [r2, #0]
 8009a40:	b2d2      	uxtb	r2, r2
 8009a42:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a48:	1c5a      	adds	r2, r3, #1
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2246      	movs	r2, #70	; 0x46
 8009a52:	5a9b      	ldrh	r3, [r3, r2]
 8009a54:	b29b      	uxth	r3, r3
 8009a56:	3b01      	subs	r3, #1
 8009a58:	b299      	uxth	r1, r3
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2246      	movs	r2, #70	; 0x46
 8009a5e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009a60:	2301      	movs	r3, #1
 8009a62:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009a64:	f7fb fcb6 	bl	80053d4 <HAL_GetTick>
 8009a68:	0002      	movs	r2, r0
 8009a6a:	69fb      	ldr	r3, [r7, #28]
 8009a6c:	1ad3      	subs	r3, r2, r3
 8009a6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d802      	bhi.n	8009a7a <HAL_SPI_TransmitReceive+0x33a>
 8009a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a76:	3301      	adds	r3, #1
 8009a78:	d102      	bne.n	8009a80 <HAL_SPI_TransmitReceive+0x340>
 8009a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d104      	bne.n	8009a8a <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8009a80:	2323      	movs	r3, #35	; 0x23
 8009a82:	18fb      	adds	r3, r7, r3
 8009a84:	2203      	movs	r2, #3
 8009a86:	701a      	strb	r2, [r3, #0]
        goto error;
 8009a88:	e01b      	b.n	8009ac2 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a8e:	b29b      	uxth	r3, r3
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d19d      	bne.n	80099d0 <HAL_SPI_TransmitReceive+0x290>
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2246      	movs	r2, #70	; 0x46
 8009a98:	5a9b      	ldrh	r3, [r3, r2]
 8009a9a:	b29b      	uxth	r3, r3
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d197      	bne.n	80099d0 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009aa0:	69fa      	ldr	r2, [r7, #28]
 8009aa2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	0018      	movs	r0, r3
 8009aa8:	f000 fe9c 	bl	800a7e4 <SPI_EndRxTxTransaction>
 8009aac:	1e03      	subs	r3, r0, #0
 8009aae:	d007      	beq.n	8009ac0 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8009ab0:	2323      	movs	r3, #35	; 0x23
 8009ab2:	18fb      	adds	r3, r7, r3
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2220      	movs	r2, #32
 8009abc:	661a      	str	r2, [r3, #96]	; 0x60
 8009abe:	e000      	b.n	8009ac2 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8009ac0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	225d      	movs	r2, #93	; 0x5d
 8009ac6:	2101      	movs	r1, #1
 8009ac8:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	225c      	movs	r2, #92	; 0x5c
 8009ace:	2100      	movs	r1, #0
 8009ad0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009ad2:	2323      	movs	r3, #35	; 0x23
 8009ad4:	18fb      	adds	r3, r7, r3
 8009ad6:	781b      	ldrb	r3, [r3, #0]
}
 8009ad8:	0018      	movs	r0, r3
 8009ada:	46bd      	mov	sp, r7
 8009adc:	b00a      	add	sp, #40	; 0x28
 8009ade:	bd80      	pop	{r7, pc}
 8009ae0:	ffffefff 	.word	0xffffefff

08009ae4 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009ae4:	b590      	push	{r4, r7, lr}
 8009ae6:	b087      	sub	sp, #28
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	60f8      	str	r0, [r7, #12]
 8009aec:	60b9      	str	r1, [r7, #8]
 8009aee:	1dbb      	adds	r3, r7, #6
 8009af0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009af2:	2317      	movs	r3, #23
 8009af4:	18fb      	adds	r3, r7, r3
 8009af6:	2200      	movs	r2, #0
 8009af8:	701a      	strb	r2, [r3, #0]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	689b      	ldr	r3, [r3, #8]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d112      	bne.n	8009b28 <HAL_SPI_Receive_DMA+0x44>
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	685a      	ldr	r2, [r3, #4]
 8009b06:	2382      	movs	r3, #130	; 0x82
 8009b08:	005b      	lsls	r3, r3, #1
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d10c      	bne.n	8009b28 <HAL_SPI_Receive_DMA+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	225d      	movs	r2, #93	; 0x5d
 8009b12:	2104      	movs	r1, #4
 8009b14:	5499      	strb	r1, [r3, r2]

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8009b16:	1dbb      	adds	r3, r7, #6
 8009b18:	881b      	ldrh	r3, [r3, #0]
 8009b1a:	68ba      	ldr	r2, [r7, #8]
 8009b1c:	68b9      	ldr	r1, [r7, #8]
 8009b1e:	68f8      	ldr	r0, [r7, #12]
 8009b20:	f000 f91e 	bl	8009d60 <HAL_SPI_TransmitReceive_DMA>
 8009b24:	0003      	movs	r3, r0
 8009b26:	e10b      	b.n	8009d40 <HAL_SPI_Receive_DMA+0x25c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	225c      	movs	r2, #92	; 0x5c
 8009b2c:	5c9b      	ldrb	r3, [r3, r2]
 8009b2e:	2b01      	cmp	r3, #1
 8009b30:	d101      	bne.n	8009b36 <HAL_SPI_Receive_DMA+0x52>
 8009b32:	2302      	movs	r3, #2
 8009b34:	e104      	b.n	8009d40 <HAL_SPI_Receive_DMA+0x25c>
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	225c      	movs	r2, #92	; 0x5c
 8009b3a:	2101      	movs	r1, #1
 8009b3c:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	225d      	movs	r2, #93	; 0x5d
 8009b42:	5c9b      	ldrb	r3, [r3, r2]
 8009b44:	b2db      	uxtb	r3, r3
 8009b46:	2b01      	cmp	r3, #1
 8009b48:	d004      	beq.n	8009b54 <HAL_SPI_Receive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 8009b4a:	2317      	movs	r3, #23
 8009b4c:	18fb      	adds	r3, r7, r3
 8009b4e:	2202      	movs	r2, #2
 8009b50:	701a      	strb	r2, [r3, #0]
    goto error;
 8009b52:	e0ee      	b.n	8009d32 <HAL_SPI_Receive_DMA+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d003      	beq.n	8009b62 <HAL_SPI_Receive_DMA+0x7e>
 8009b5a:	1dbb      	adds	r3, r7, #6
 8009b5c:	881b      	ldrh	r3, [r3, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d104      	bne.n	8009b6c <HAL_SPI_Receive_DMA+0x88>
  {
    errorcode = HAL_ERROR;
 8009b62:	2317      	movs	r3, #23
 8009b64:	18fb      	adds	r3, r7, r3
 8009b66:	2201      	movs	r2, #1
 8009b68:	701a      	strb	r2, [r3, #0]
    goto error;
 8009b6a:	e0e2      	b.n	8009d32 <HAL_SPI_Receive_DMA+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	225d      	movs	r2, #93	; 0x5d
 8009b70:	2104      	movs	r1, #4
 8009b72:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2200      	movs	r2, #0
 8009b78:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	68ba      	ldr	r2, [r7, #8]
 8009b7e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	1dba      	adds	r2, r7, #6
 8009b84:	2144      	movs	r1, #68	; 0x44
 8009b86:	8812      	ldrh	r2, [r2, #0]
 8009b88:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	1dba      	adds	r2, r7, #6
 8009b8e:	2146      	movs	r1, #70	; 0x46
 8009b90:	8812      	ldrh	r2, [r2, #0]
 8009b92:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2200      	movs	r2, #0
 8009b98:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	689a      	ldr	r2, [r3, #8]
 8009bb0:	2380      	movs	r3, #128	; 0x80
 8009bb2:	021b      	lsls	r3, r3, #8
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	d10f      	bne.n	8009bd8 <HAL_SPI_Receive_DMA+0xf4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	2140      	movs	r1, #64	; 0x40
 8009bc4:	438a      	bics	r2, r1
 8009bc6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	495d      	ldr	r1, [pc, #372]	; (8009d48 <HAL_SPI_Receive_DMA+0x264>)
 8009bd4:	400a      	ands	r2, r1
 8009bd6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	685a      	ldr	r2, [r3, #4]
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	495a      	ldr	r1, [pc, #360]	; (8009d4c <HAL_SPI_Receive_DMA+0x268>)
 8009be4:	400a      	ands	r2, r1
 8009be6:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	68da      	ldr	r2, [r3, #12]
 8009bec:	23e0      	movs	r3, #224	; 0xe0
 8009bee:	00db      	lsls	r3, r3, #3
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d908      	bls.n	8009c06 <HAL_SPI_Receive_DMA+0x122>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	685a      	ldr	r2, [r3, #4]
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	4954      	ldr	r1, [pc, #336]	; (8009d50 <HAL_SPI_Receive_DMA+0x26c>)
 8009c00:	400a      	ands	r2, r1
 8009c02:	605a      	str	r2, [r3, #4]
 8009c04:	e045      	b.n	8009c92 <HAL_SPI_Receive_DMA+0x1ae>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	685a      	ldr	r2, [r3, #4]
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	2180      	movs	r1, #128	; 0x80
 8009c12:	0149      	lsls	r1, r1, #5
 8009c14:	430a      	orrs	r2, r1
 8009c16:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c1c:	699a      	ldr	r2, [r3, #24]
 8009c1e:	2380      	movs	r3, #128	; 0x80
 8009c20:	00db      	lsls	r3, r3, #3
 8009c22:	429a      	cmp	r2, r3
 8009c24:	d135      	bne.n	8009c92 <HAL_SPI_Receive_DMA+0x1ae>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	685a      	ldr	r2, [r3, #4]
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4947      	ldr	r1, [pc, #284]	; (8009d50 <HAL_SPI_Receive_DMA+0x26c>)
 8009c32:	400a      	ands	r2, r1
 8009c34:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2246      	movs	r2, #70	; 0x46
 8009c3a:	5a9b      	ldrh	r3, [r3, r2]
 8009c3c:	b29b      	uxth	r3, r3
 8009c3e:	001a      	movs	r2, r3
 8009c40:	2301      	movs	r3, #1
 8009c42:	4013      	ands	r3, r2
 8009c44:	d111      	bne.n	8009c6a <HAL_SPI_Receive_DMA+0x186>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	685a      	ldr	r2, [r3, #4]
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	493e      	ldr	r1, [pc, #248]	; (8009d4c <HAL_SPI_Receive_DMA+0x268>)
 8009c52:	400a      	ands	r2, r1
 8009c54:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2246      	movs	r2, #70	; 0x46
 8009c5a:	5a9b      	ldrh	r3, [r3, r2]
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	085b      	lsrs	r3, r3, #1
 8009c60:	b299      	uxth	r1, r3
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	2246      	movs	r2, #70	; 0x46
 8009c66:	5299      	strh	r1, [r3, r2]
 8009c68:	e013      	b.n	8009c92 <HAL_SPI_Receive_DMA+0x1ae>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	685a      	ldr	r2, [r3, #4]
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	2180      	movs	r1, #128	; 0x80
 8009c76:	0189      	lsls	r1, r1, #6
 8009c78:	430a      	orrs	r2, r1
 8009c7a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	2246      	movs	r2, #70	; 0x46
 8009c80:	5a9b      	ldrh	r3, [r3, r2]
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	085b      	lsrs	r3, r3, #1
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	3301      	adds	r3, #1
 8009c8a:	b299      	uxth	r1, r3
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2246      	movs	r2, #70	; 0x46
 8009c90:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c96:	4a2f      	ldr	r2, [pc, #188]	; (8009d54 <HAL_SPI_Receive_DMA+0x270>)
 8009c98:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c9e:	4a2e      	ldr	r2, [pc, #184]	; (8009d58 <HAL_SPI_Receive_DMA+0x274>)
 8009ca0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ca6:	4a2d      	ldr	r2, [pc, #180]	; (8009d5c <HAL_SPI_Receive_DMA+0x278>)
 8009ca8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cae:	2200      	movs	r2, #0
 8009cb0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	330c      	adds	r3, #12
 8009cbc:	0019      	movs	r1, r3
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cc2:	001c      	movs	r4, r3
                                 hspi->RxXferCount))
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2246      	movs	r2, #70	; 0x46
 8009cc8:	5a9b      	ldrh	r3, [r3, r2]
 8009cca:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009ccc:	0022      	movs	r2, r4
 8009cce:	f7fb ff8d 	bl	8005bec <HAL_DMA_Start_IT>
 8009cd2:	1e03      	subs	r3, r0, #0
 8009cd4:	d00e      	beq.n	8009cf4 <HAL_SPI_Receive_DMA+0x210>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cda:	2210      	movs	r2, #16
 8009cdc:	431a      	orrs	r2, r3
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8009ce2:	2317      	movs	r3, #23
 8009ce4:	18fb      	adds	r3, r7, r3
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	225d      	movs	r2, #93	; 0x5d
 8009cee:	2101      	movs	r1, #1
 8009cf0:	5499      	strb	r1, [r3, r2]
    goto error;
 8009cf2:	e01e      	b.n	8009d32 <HAL_SPI_Receive_DMA+0x24e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	2240      	movs	r2, #64	; 0x40
 8009cfc:	4013      	ands	r3, r2
 8009cfe:	2b40      	cmp	r3, #64	; 0x40
 8009d00:	d007      	beq.n	8009d12 <HAL_SPI_Receive_DMA+0x22e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	681a      	ldr	r2, [r3, #0]
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	2140      	movs	r1, #64	; 0x40
 8009d0e:	430a      	orrs	r2, r1
 8009d10:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	685a      	ldr	r2, [r3, #4]
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	2120      	movs	r1, #32
 8009d1e:	430a      	orrs	r2, r1
 8009d20:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	685a      	ldr	r2, [r3, #4]
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	2101      	movs	r1, #1
 8009d2e:	430a      	orrs	r2, r1
 8009d30:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	225c      	movs	r2, #92	; 0x5c
 8009d36:	2100      	movs	r1, #0
 8009d38:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009d3a:	2317      	movs	r3, #23
 8009d3c:	18fb      	adds	r3, r7, r3
 8009d3e:	781b      	ldrb	r3, [r3, #0]
}
 8009d40:	0018      	movs	r0, r3
 8009d42:	46bd      	mov	sp, r7
 8009d44:	b007      	add	sp, #28
 8009d46:	bd90      	pop	{r4, r7, pc}
 8009d48:	ffffbfff 	.word	0xffffbfff
 8009d4c:	ffffdfff 	.word	0xffffdfff
 8009d50:	ffffefff 	.word	0xffffefff
 8009d54:	0800a437 	.word	0x0800a437
 8009d58:	0800a2f1 	.word	0x0800a2f1
 8009d5c:	0800a473 	.word	0x0800a473

08009d60 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8009d60:	b590      	push	{r4, r7, lr}
 8009d62:	b087      	sub	sp, #28
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	60f8      	str	r0, [r7, #12]
 8009d68:	60b9      	str	r1, [r7, #8]
 8009d6a:	607a      	str	r2, [r7, #4]
 8009d6c:	001a      	movs	r2, r3
 8009d6e:	1cbb      	adds	r3, r7, #2
 8009d70:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009d72:	2317      	movs	r3, #23
 8009d74:	18fb      	adds	r3, r7, r3
 8009d76:	2200      	movs	r2, #0
 8009d78:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	225c      	movs	r2, #92	; 0x5c
 8009d7e:	5c9b      	ldrb	r3, [r3, r2]
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d101      	bne.n	8009d88 <HAL_SPI_TransmitReceive_DMA+0x28>
 8009d84:	2302      	movs	r3, #2
 8009d86:	e186      	b.n	800a096 <HAL_SPI_TransmitReceive_DMA+0x336>
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	225c      	movs	r2, #92	; 0x5c
 8009d8c:	2101      	movs	r1, #1
 8009d8e:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009d90:	2016      	movs	r0, #22
 8009d92:	183b      	adds	r3, r7, r0
 8009d94:	68fa      	ldr	r2, [r7, #12]
 8009d96:	215d      	movs	r1, #93	; 0x5d
 8009d98:	5c52      	ldrb	r2, [r2, r1]
 8009d9a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8009da2:	0001      	movs	r1, r0
 8009da4:	187b      	adds	r3, r7, r1
 8009da6:	781b      	ldrb	r3, [r3, #0]
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d011      	beq.n	8009dd0 <HAL_SPI_TransmitReceive_DMA+0x70>
 8009dac:	693a      	ldr	r2, [r7, #16]
 8009dae:	2382      	movs	r3, #130	; 0x82
 8009db0:	005b      	lsls	r3, r3, #1
 8009db2:	429a      	cmp	r2, r3
 8009db4:	d107      	bne.n	8009dc6 <HAL_SPI_TransmitReceive_DMA+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	689b      	ldr	r3, [r3, #8]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d103      	bne.n	8009dc6 <HAL_SPI_TransmitReceive_DMA+0x66>
 8009dbe:	187b      	adds	r3, r7, r1
 8009dc0:	781b      	ldrb	r3, [r3, #0]
 8009dc2:	2b04      	cmp	r3, #4
 8009dc4:	d004      	beq.n	8009dd0 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 8009dc6:	2317      	movs	r3, #23
 8009dc8:	18fb      	adds	r3, r7, r3
 8009dca:	2202      	movs	r2, #2
 8009dcc:	701a      	strb	r2, [r3, #0]
    goto error;
 8009dce:	e15b      	b.n	800a088 <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d006      	beq.n	8009de4 <HAL_SPI_TransmitReceive_DMA+0x84>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d003      	beq.n	8009de4 <HAL_SPI_TransmitReceive_DMA+0x84>
 8009ddc:	1cbb      	adds	r3, r7, #2
 8009dde:	881b      	ldrh	r3, [r3, #0]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d104      	bne.n	8009dee <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    errorcode = HAL_ERROR;
 8009de4:	2317      	movs	r3, #23
 8009de6:	18fb      	adds	r3, r7, r3
 8009de8:	2201      	movs	r2, #1
 8009dea:	701a      	strb	r2, [r3, #0]
    goto error;
 8009dec:	e14c      	b.n	800a088 <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	225d      	movs	r2, #93	; 0x5d
 8009df2:	5c9b      	ldrb	r3, [r3, r2]
 8009df4:	b2db      	uxtb	r3, r3
 8009df6:	2b04      	cmp	r3, #4
 8009df8:	d003      	beq.n	8009e02 <HAL_SPI_TransmitReceive_DMA+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	225d      	movs	r2, #93	; 0x5d
 8009dfe:	2105      	movs	r1, #5
 8009e00:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	2200      	movs	r2, #0
 8009e06:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	68ba      	ldr	r2, [r7, #8]
 8009e0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	1cba      	adds	r2, r7, #2
 8009e12:	8812      	ldrh	r2, [r2, #0]
 8009e14:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	1cba      	adds	r2, r7, #2
 8009e1a:	8812      	ldrh	r2, [r2, #0]
 8009e1c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	687a      	ldr	r2, [r7, #4]
 8009e22:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	1cba      	adds	r2, r7, #2
 8009e28:	2144      	movs	r1, #68	; 0x44
 8009e2a:	8812      	ldrh	r2, [r2, #0]
 8009e2c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	1cba      	adds	r2, r7, #2
 8009e32:	2146      	movs	r1, #70	; 0x46
 8009e34:	8812      	ldrh	r2, [r2, #0]
 8009e36:	525a      	strh	r2, [r3, r1]

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2200      	movs	r2, #0
 8009e42:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	685a      	ldr	r2, [r3, #4]
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4994      	ldr	r1, [pc, #592]	; (800a0a0 <HAL_SPI_TransmitReceive_DMA+0x340>)
 8009e50:	400a      	ands	r2, r1
 8009e52:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	68da      	ldr	r2, [r3, #12]
 8009e58:	23e0      	movs	r3, #224	; 0xe0
 8009e5a:	00db      	lsls	r3, r3, #3
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	d908      	bls.n	8009e72 <HAL_SPI_TransmitReceive_DMA+0x112>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	685a      	ldr	r2, [r3, #4]
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	498e      	ldr	r1, [pc, #568]	; (800a0a4 <HAL_SPI_TransmitReceive_DMA+0x344>)
 8009e6c:	400a      	ands	r2, r1
 8009e6e:	605a      	str	r2, [r3, #4]
 8009e70:	e074      	b.n	8009f5c <HAL_SPI_TransmitReceive_DMA+0x1fc>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	685a      	ldr	r2, [r3, #4]
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	2180      	movs	r1, #128	; 0x80
 8009e7e:	0149      	lsls	r1, r1, #5
 8009e80:	430a      	orrs	r2, r1
 8009e82:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e88:	699a      	ldr	r2, [r3, #24]
 8009e8a:	2380      	movs	r3, #128	; 0x80
 8009e8c:	00db      	lsls	r3, r3, #3
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	d127      	bne.n	8009ee2 <HAL_SPI_TransmitReceive_DMA+0x182>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8009e96:	001a      	movs	r2, r3
 8009e98:	2301      	movs	r3, #1
 8009e9a:	4013      	ands	r3, r2
 8009e9c:	d10f      	bne.n	8009ebe <HAL_SPI_TransmitReceive_DMA+0x15e>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	685a      	ldr	r2, [r3, #4]
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	497f      	ldr	r1, [pc, #508]	; (800a0a8 <HAL_SPI_TransmitReceive_DMA+0x348>)
 8009eaa:	400a      	ands	r2, r1
 8009eac:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009eb2:	b29b      	uxth	r3, r3
 8009eb4:	085b      	lsrs	r3, r3, #1
 8009eb6:	b29a      	uxth	r2, r3
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009ebc:	e011      	b.n	8009ee2 <HAL_SPI_TransmitReceive_DMA+0x182>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	685a      	ldr	r2, [r3, #4]
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	2180      	movs	r1, #128	; 0x80
 8009eca:	01c9      	lsls	r1, r1, #7
 8009ecc:	430a      	orrs	r2, r1
 8009ece:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ed4:	b29b      	uxth	r3, r3
 8009ed6:	085b      	lsrs	r3, r3, #1
 8009ed8:	b29b      	uxth	r3, r3
 8009eda:	3301      	adds	r3, #1
 8009edc:	b29a      	uxth	r2, r3
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ee6:	699a      	ldr	r2, [r3, #24]
 8009ee8:	2380      	movs	r3, #128	; 0x80
 8009eea:	00db      	lsls	r3, r3, #3
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d135      	bne.n	8009f5c <HAL_SPI_TransmitReceive_DMA+0x1fc>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	685a      	ldr	r2, [r3, #4]
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	496a      	ldr	r1, [pc, #424]	; (800a0a4 <HAL_SPI_TransmitReceive_DMA+0x344>)
 8009efc:	400a      	ands	r2, r1
 8009efe:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2246      	movs	r2, #70	; 0x46
 8009f04:	5a9b      	ldrh	r3, [r3, r2]
 8009f06:	b29b      	uxth	r3, r3
 8009f08:	001a      	movs	r2, r3
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	4013      	ands	r3, r2
 8009f0e:	d111      	bne.n	8009f34 <HAL_SPI_TransmitReceive_DMA+0x1d4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	685a      	ldr	r2, [r3, #4]
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4964      	ldr	r1, [pc, #400]	; (800a0ac <HAL_SPI_TransmitReceive_DMA+0x34c>)
 8009f1c:	400a      	ands	r2, r1
 8009f1e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	2246      	movs	r2, #70	; 0x46
 8009f24:	5a9b      	ldrh	r3, [r3, r2]
 8009f26:	b29b      	uxth	r3, r3
 8009f28:	085b      	lsrs	r3, r3, #1
 8009f2a:	b299      	uxth	r1, r3
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	2246      	movs	r2, #70	; 0x46
 8009f30:	5299      	strh	r1, [r3, r2]
 8009f32:	e013      	b.n	8009f5c <HAL_SPI_TransmitReceive_DMA+0x1fc>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	685a      	ldr	r2, [r3, #4]
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	2180      	movs	r1, #128	; 0x80
 8009f40:	0189      	lsls	r1, r1, #6
 8009f42:	430a      	orrs	r2, r1
 8009f44:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2246      	movs	r2, #70	; 0x46
 8009f4a:	5a9b      	ldrh	r3, [r3, r2]
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	085b      	lsrs	r3, r3, #1
 8009f50:	b29b      	uxth	r3, r3
 8009f52:	3301      	adds	r3, #1
 8009f54:	b299      	uxth	r1, r3
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2246      	movs	r2, #70	; 0x46
 8009f5a:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	225d      	movs	r2, #93	; 0x5d
 8009f60:	5c9b      	ldrb	r3, [r3, r2]
 8009f62:	b2db      	uxtb	r3, r3
 8009f64:	2b04      	cmp	r3, #4
 8009f66:	d108      	bne.n	8009f7a <HAL_SPI_TransmitReceive_DMA+0x21a>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f6c:	4a50      	ldr	r2, [pc, #320]	; (800a0b0 <HAL_SPI_TransmitReceive_DMA+0x350>)
 8009f6e:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f74:	4a4f      	ldr	r2, [pc, #316]	; (800a0b4 <HAL_SPI_TransmitReceive_DMA+0x354>)
 8009f76:	62da      	str	r2, [r3, #44]	; 0x2c
 8009f78:	e007      	b.n	8009f8a <HAL_SPI_TransmitReceive_DMA+0x22a>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f7e:	4a4e      	ldr	r2, [pc, #312]	; (800a0b8 <HAL_SPI_TransmitReceive_DMA+0x358>)
 8009f80:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f86:	4a4d      	ldr	r2, [pc, #308]	; (800a0bc <HAL_SPI_TransmitReceive_DMA+0x35c>)
 8009f88:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f8e:	4a4c      	ldr	r2, [pc, #304]	; (800a0c0 <HAL_SPI_TransmitReceive_DMA+0x360>)
 8009f90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f96:	2200      	movs	r2, #0
 8009f98:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	330c      	adds	r3, #12
 8009fa4:	0019      	movs	r1, r3
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009faa:	001c      	movs	r4, r3
                                 hspi->RxXferCount))
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	2246      	movs	r2, #70	; 0x46
 8009fb0:	5a9b      	ldrh	r3, [r3, r2]
 8009fb2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009fb4:	0022      	movs	r2, r4
 8009fb6:	f7fb fe19 	bl	8005bec <HAL_DMA_Start_IT>
 8009fba:	1e03      	subs	r3, r0, #0
 8009fbc:	d00e      	beq.n	8009fdc <HAL_SPI_TransmitReceive_DMA+0x27c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fc2:	2210      	movs	r2, #16
 8009fc4:	431a      	orrs	r2, r3
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8009fca:	2317      	movs	r3, #23
 8009fcc:	18fb      	adds	r3, r7, r3
 8009fce:	2201      	movs	r2, #1
 8009fd0:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	225d      	movs	r2, #93	; 0x5d
 8009fd6:	2101      	movs	r1, #1
 8009fd8:	5499      	strb	r1, [r3, r2]
    goto error;
 8009fda:	e055      	b.n	800a088 <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	685a      	ldr	r2, [r3, #4]
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	2101      	movs	r1, #1
 8009fe8:	430a      	orrs	r2, r1
 8009fea:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a000:	2200      	movs	r2, #0
 800a002:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a008:	2200      	movs	r2, #0
 800a00a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a014:	0019      	movs	r1, r3
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	330c      	adds	r3, #12
 800a01c:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a022:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a024:	f7fb fde2 	bl	8005bec <HAL_DMA_Start_IT>
 800a028:	1e03      	subs	r3, r0, #0
 800a02a:	d00e      	beq.n	800a04a <HAL_SPI_TransmitReceive_DMA+0x2ea>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a030:	2210      	movs	r2, #16
 800a032:	431a      	orrs	r2, r3
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800a038:	2317      	movs	r3, #23
 800a03a:	18fb      	adds	r3, r7, r3
 800a03c:	2201      	movs	r2, #1
 800a03e:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	225d      	movs	r2, #93	; 0x5d
 800a044:	2101      	movs	r1, #1
 800a046:	5499      	strb	r1, [r3, r2]
    goto error;
 800a048:	e01e      	b.n	800a088 <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	2240      	movs	r2, #64	; 0x40
 800a052:	4013      	ands	r3, r2
 800a054:	2b40      	cmp	r3, #64	; 0x40
 800a056:	d007      	beq.n	800a068 <HAL_SPI_TransmitReceive_DMA+0x308>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	681a      	ldr	r2, [r3, #0]
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	2140      	movs	r1, #64	; 0x40
 800a064:	430a      	orrs	r2, r1
 800a066:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	685a      	ldr	r2, [r3, #4]
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	2120      	movs	r1, #32
 800a074:	430a      	orrs	r2, r1
 800a076:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	685a      	ldr	r2, [r3, #4]
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	2102      	movs	r1, #2
 800a084:	430a      	orrs	r2, r1
 800a086:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	225c      	movs	r2, #92	; 0x5c
 800a08c:	2100      	movs	r1, #0
 800a08e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800a090:	2317      	movs	r3, #23
 800a092:	18fb      	adds	r3, r7, r3
 800a094:	781b      	ldrb	r3, [r3, #0]
}
 800a096:	0018      	movs	r0, r3
 800a098:	46bd      	mov	sp, r7
 800a09a:	b007      	add	sp, #28
 800a09c:	bd90      	pop	{r4, r7, pc}
 800a09e:	46c0      	nop			; (mov r8, r8)
 800a0a0:	ffff9fff 	.word	0xffff9fff
 800a0a4:	ffffefff 	.word	0xffffefff
 800a0a8:	ffffbfff 	.word	0xffffbfff
 800a0ac:	ffffdfff 	.word	0xffffdfff
 800a0b0:	0800a437 	.word	0x0800a437
 800a0b4:	0800a2f1 	.word	0x0800a2f1
 800a0b8:	0800a455 	.word	0x0800a455
 800a0bc:	0800a3a1 	.word	0x0800a3a1
 800a0c0:	0800a473 	.word	0x0800a473

0800a0c4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b088      	sub	sp, #32
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	685b      	ldr	r3, [r3, #4]
 800a0d2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	689b      	ldr	r3, [r3, #8]
 800a0da:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a0dc:	69bb      	ldr	r3, [r7, #24]
 800a0de:	099b      	lsrs	r3, r3, #6
 800a0e0:	001a      	movs	r2, r3
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	4013      	ands	r3, r2
 800a0e6:	d10f      	bne.n	800a108 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a0e8:	69bb      	ldr	r3, [r7, #24]
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a0ee:	d00b      	beq.n	800a108 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a0f0:	69fb      	ldr	r3, [r7, #28]
 800a0f2:	099b      	lsrs	r3, r3, #6
 800a0f4:	001a      	movs	r2, r3
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	4013      	ands	r3, r2
 800a0fa:	d005      	beq.n	800a108 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a100:	687a      	ldr	r2, [r7, #4]
 800a102:	0010      	movs	r0, r2
 800a104:	4798      	blx	r3
    return;
 800a106:	e0d5      	b.n	800a2b4 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a108:	69bb      	ldr	r3, [r7, #24]
 800a10a:	085b      	lsrs	r3, r3, #1
 800a10c:	001a      	movs	r2, r3
 800a10e:	2301      	movs	r3, #1
 800a110:	4013      	ands	r3, r2
 800a112:	d00b      	beq.n	800a12c <HAL_SPI_IRQHandler+0x68>
 800a114:	69fb      	ldr	r3, [r7, #28]
 800a116:	09db      	lsrs	r3, r3, #7
 800a118:	001a      	movs	r2, r3
 800a11a:	2301      	movs	r3, #1
 800a11c:	4013      	ands	r3, r2
 800a11e:	d005      	beq.n	800a12c <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a124:	687a      	ldr	r2, [r7, #4]
 800a126:	0010      	movs	r0, r2
 800a128:	4798      	blx	r3
    return;
 800a12a:	e0c3      	b.n	800a2b4 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a12c:	69bb      	ldr	r3, [r7, #24]
 800a12e:	095b      	lsrs	r3, r3, #5
 800a130:	001a      	movs	r2, r3
 800a132:	2301      	movs	r3, #1
 800a134:	4013      	ands	r3, r2
 800a136:	d10c      	bne.n	800a152 <HAL_SPI_IRQHandler+0x8e>
 800a138:	69bb      	ldr	r3, [r7, #24]
 800a13a:	099b      	lsrs	r3, r3, #6
 800a13c:	001a      	movs	r2, r3
 800a13e:	2301      	movs	r3, #1
 800a140:	4013      	ands	r3, r2
 800a142:	d106      	bne.n	800a152 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a144:	69bb      	ldr	r3, [r7, #24]
 800a146:	0a1b      	lsrs	r3, r3, #8
 800a148:	001a      	movs	r2, r3
 800a14a:	2301      	movs	r3, #1
 800a14c:	4013      	ands	r3, r2
 800a14e:	d100      	bne.n	800a152 <HAL_SPI_IRQHandler+0x8e>
 800a150:	e0b0      	b.n	800a2b4 <HAL_SPI_IRQHandler+0x1f0>
 800a152:	69fb      	ldr	r3, [r7, #28]
 800a154:	095b      	lsrs	r3, r3, #5
 800a156:	001a      	movs	r2, r3
 800a158:	2301      	movs	r3, #1
 800a15a:	4013      	ands	r3, r2
 800a15c:	d100      	bne.n	800a160 <HAL_SPI_IRQHandler+0x9c>
 800a15e:	e0a9      	b.n	800a2b4 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a160:	69bb      	ldr	r3, [r7, #24]
 800a162:	099b      	lsrs	r3, r3, #6
 800a164:	001a      	movs	r2, r3
 800a166:	2301      	movs	r3, #1
 800a168:	4013      	ands	r3, r2
 800a16a:	d023      	beq.n	800a1b4 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	225d      	movs	r2, #93	; 0x5d
 800a170:	5c9b      	ldrb	r3, [r3, r2]
 800a172:	b2db      	uxtb	r3, r3
 800a174:	2b03      	cmp	r3, #3
 800a176:	d011      	beq.n	800a19c <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a17c:	2204      	movs	r2, #4
 800a17e:	431a      	orrs	r2, r3
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a184:	2300      	movs	r3, #0
 800a186:	617b      	str	r3, [r7, #20]
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	68db      	ldr	r3, [r3, #12]
 800a18e:	617b      	str	r3, [r7, #20]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	689b      	ldr	r3, [r3, #8]
 800a196:	617b      	str	r3, [r7, #20]
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	e00b      	b.n	800a1b4 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a19c:	2300      	movs	r3, #0
 800a19e:	613b      	str	r3, [r7, #16]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	68db      	ldr	r3, [r3, #12]
 800a1a6:	613b      	str	r3, [r7, #16]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	689b      	ldr	r3, [r3, #8]
 800a1ae:	613b      	str	r3, [r7, #16]
 800a1b0:	693b      	ldr	r3, [r7, #16]
        return;
 800a1b2:	e07f      	b.n	800a2b4 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a1b4:	69bb      	ldr	r3, [r7, #24]
 800a1b6:	095b      	lsrs	r3, r3, #5
 800a1b8:	001a      	movs	r2, r3
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	4013      	ands	r3, r2
 800a1be:	d014      	beq.n	800a1ea <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1c4:	2201      	movs	r2, #1
 800a1c6:	431a      	orrs	r2, r3
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	60fb      	str	r3, [r7, #12]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	689b      	ldr	r3, [r3, #8]
 800a1d6:	60fb      	str	r3, [r7, #12]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	681a      	ldr	r2, [r3, #0]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	2140      	movs	r1, #64	; 0x40
 800a1e4:	438a      	bics	r2, r1
 800a1e6:	601a      	str	r2, [r3, #0]
 800a1e8:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a1ea:	69bb      	ldr	r3, [r7, #24]
 800a1ec:	0a1b      	lsrs	r3, r3, #8
 800a1ee:	001a      	movs	r2, r3
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	4013      	ands	r3, r2
 800a1f4:	d00c      	beq.n	800a210 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1fa:	2208      	movs	r2, #8
 800a1fc:	431a      	orrs	r2, r3
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a202:	2300      	movs	r3, #0
 800a204:	60bb      	str	r3, [r7, #8]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	689b      	ldr	r3, [r3, #8]
 800a20c:	60bb      	str	r3, [r7, #8]
 800a20e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a214:	2b00      	cmp	r3, #0
 800a216:	d04c      	beq.n	800a2b2 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	685a      	ldr	r2, [r3, #4]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	21e0      	movs	r1, #224	; 0xe0
 800a224:	438a      	bics	r2, r1
 800a226:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	225d      	movs	r2, #93	; 0x5d
 800a22c:	2101      	movs	r1, #1
 800a22e:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a230:	69fb      	ldr	r3, [r7, #28]
 800a232:	2202      	movs	r2, #2
 800a234:	4013      	ands	r3, r2
 800a236:	d103      	bne.n	800a240 <HAL_SPI_IRQHandler+0x17c>
 800a238:	69fb      	ldr	r3, [r7, #28]
 800a23a:	2201      	movs	r2, #1
 800a23c:	4013      	ands	r3, r2
 800a23e:	d032      	beq.n	800a2a6 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	685a      	ldr	r2, [r3, #4]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	2103      	movs	r1, #3
 800a24c:	438a      	bics	r2, r1
 800a24e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a254:	2b00      	cmp	r3, #0
 800a256:	d010      	beq.n	800a27a <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a25c:	4a17      	ldr	r2, [pc, #92]	; (800a2bc <HAL_SPI_IRQHandler+0x1f8>)
 800a25e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a264:	0018      	movs	r0, r3
 800a266:	f7fb fd47 	bl	8005cf8 <HAL_DMA_Abort_IT>
 800a26a:	1e03      	subs	r3, r0, #0
 800a26c:	d005      	beq.n	800a27a <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a272:	2240      	movs	r2, #64	; 0x40
 800a274:	431a      	orrs	r2, r3
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d016      	beq.n	800a2b0 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a286:	4a0d      	ldr	r2, [pc, #52]	; (800a2bc <HAL_SPI_IRQHandler+0x1f8>)
 800a288:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a28e:	0018      	movs	r0, r3
 800a290:	f7fb fd32 	bl	8005cf8 <HAL_DMA_Abort_IT>
 800a294:	1e03      	subs	r3, r0, #0
 800a296:	d00b      	beq.n	800a2b0 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a29c:	2240      	movs	r2, #64	; 0x40
 800a29e:	431a      	orrs	r2, r3
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800a2a4:	e004      	b.n	800a2b0 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	0018      	movs	r0, r3
 800a2aa:	f000 f819 	bl	800a2e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a2ae:	e000      	b.n	800a2b2 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 800a2b0:	46c0      	nop			; (mov r8, r8)
    return;
 800a2b2:	46c0      	nop			; (mov r8, r8)
  }
}
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	b008      	add	sp, #32
 800a2b8:	bd80      	pop	{r7, pc}
 800a2ba:	46c0      	nop			; (mov r8, r8)
 800a2bc:	0800a4b5 	.word	0x0800a4b5

0800a2c0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b082      	sub	sp, #8
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800a2c8:	46c0      	nop			; (mov r8, r8)
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	b002      	add	sp, #8
 800a2ce:	bd80      	pop	{r7, pc}

0800a2d0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b082      	sub	sp, #8
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800a2d8:	46c0      	nop			; (mov r8, r8)
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	b002      	add	sp, #8
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b082      	sub	sp, #8
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a2e8:	46c0      	nop			; (mov r8, r8)
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	b002      	add	sp, #8
 800a2ee:	bd80      	pop	{r7, pc}

0800a2f0 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b084      	sub	sp, #16
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2fc:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a2fe:	f7fb f869 	bl	80053d4 <HAL_GetTick>
 800a302:	0003      	movs	r3, r0
 800a304:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	2220      	movs	r2, #32
 800a30e:	4013      	ands	r3, r2
 800a310:	2b20      	cmp	r3, #32
 800a312:	d03e      	beq.n	800a392 <SPI_DMAReceiveCplt+0xa2>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	685a      	ldr	r2, [r3, #4]
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	2120      	movs	r1, #32
 800a320:	438a      	bics	r2, r1
 800a322:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	689b      	ldr	r3, [r3, #8]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d10e      	bne.n	800a34a <SPI_DMAReceiveCplt+0x5a>
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	685a      	ldr	r2, [r3, #4]
 800a330:	2382      	movs	r3, #130	; 0x82
 800a332:	005b      	lsls	r3, r3, #1
 800a334:	429a      	cmp	r2, r3
 800a336:	d108      	bne.n	800a34a <SPI_DMAReceiveCplt+0x5a>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	685a      	ldr	r2, [r3, #4]
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	2103      	movs	r1, #3
 800a344:	438a      	bics	r2, r1
 800a346:	605a      	str	r2, [r3, #4]
 800a348:	e007      	b.n	800a35a <SPI_DMAReceiveCplt+0x6a>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	685a      	ldr	r2, [r3, #4]
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	2101      	movs	r1, #1
 800a356:	438a      	bics	r2, r1
 800a358:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a35a:	68ba      	ldr	r2, [r7, #8]
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2164      	movs	r1, #100	; 0x64
 800a360:	0018      	movs	r0, r3
 800a362:	f000 f9e1 	bl	800a728 <SPI_EndRxTransaction>
 800a366:	1e03      	subs	r3, r0, #0
 800a368:	d002      	beq.n	800a370 <SPI_DMAReceiveCplt+0x80>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2220      	movs	r2, #32
 800a36e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	2246      	movs	r2, #70	; 0x46
 800a374:	2100      	movs	r1, #0
 800a376:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	225d      	movs	r2, #93	; 0x5d
 800a37c:	2101      	movs	r1, #1
 800a37e:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a384:	2b00      	cmp	r3, #0
 800a386:	d004      	beq.n	800a392 <SPI_DMAReceiveCplt+0xa2>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	0018      	movs	r0, r3
 800a38c:	f7ff ffa8 	bl	800a2e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a390:	e003      	b.n	800a39a <SPI_DMAReceiveCplt+0xaa>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	0018      	movs	r0, r3
 800a396:	f7f8 fdfd 	bl	8002f94 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a39a:	46bd      	mov	sp, r7
 800a39c:	b004      	add	sp, #16
 800a39e:	bd80      	pop	{r7, pc}

0800a3a0 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b084      	sub	sp, #16
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3ac:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a3ae:	f7fb f811 	bl	80053d4 <HAL_GetTick>
 800a3b2:	0003      	movs	r3, r0
 800a3b4:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	2220      	movs	r2, #32
 800a3be:	4013      	ands	r3, r2
 800a3c0:	2b20      	cmp	r3, #32
 800a3c2:	d031      	beq.n	800a428 <SPI_DMATransmitReceiveCplt+0x88>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	685a      	ldr	r2, [r3, #4]
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	2120      	movs	r1, #32
 800a3d0:	438a      	bics	r2, r1
 800a3d2:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a3d4:	68ba      	ldr	r2, [r7, #8]
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2164      	movs	r1, #100	; 0x64
 800a3da:	0018      	movs	r0, r3
 800a3dc:	f000 fa02 	bl	800a7e4 <SPI_EndRxTxTransaction>
 800a3e0:	1e03      	subs	r3, r0, #0
 800a3e2:	d005      	beq.n	800a3f0 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3e8:	2220      	movs	r2, #32
 800a3ea:	431a      	orrs	r2, r3
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	685a      	ldr	r2, [r3, #4]
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	2103      	movs	r1, #3
 800a3fc:	438a      	bics	r2, r1
 800a3fe:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2200      	movs	r2, #0
 800a404:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2246      	movs	r2, #70	; 0x46
 800a40a:	2100      	movs	r1, #0
 800a40c:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	225d      	movs	r2, #93	; 0x5d
 800a412:	2101      	movs	r1, #1
 800a414:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d004      	beq.n	800a428 <SPI_DMATransmitReceiveCplt+0x88>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	0018      	movs	r0, r3
 800a422:	f7ff ff5d 	bl	800a2e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a426:	e003      	b.n	800a430 <SPI_DMATransmitReceiveCplt+0x90>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	0018      	movs	r0, r3
 800a42c:	f7ff ff48 	bl	800a2c0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a430:	46bd      	mov	sp, r7
 800a432:	b004      	add	sp, #16
 800a434:	bd80      	pop	{r7, pc}

0800a436 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a436:	b580      	push	{r7, lr}
 800a438:	b084      	sub	sp, #16
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a442:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	0018      	movs	r0, r3
 800a448:	f7f8 fd6c 	bl	8002f24 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a44c:	46c0      	nop			; (mov r8, r8)
 800a44e:	46bd      	mov	sp, r7
 800a450:	b004      	add	sp, #16
 800a452:	bd80      	pop	{r7, pc}

0800a454 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b084      	sub	sp, #16
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a460:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	0018      	movs	r0, r3
 800a466:	f7ff ff33 	bl	800a2d0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a46a:	46c0      	nop			; (mov r8, r8)
 800a46c:	46bd      	mov	sp, r7
 800a46e:	b004      	add	sp, #16
 800a470:	bd80      	pop	{r7, pc}

0800a472 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a472:	b580      	push	{r7, lr}
 800a474:	b084      	sub	sp, #16
 800a476:	af00      	add	r7, sp, #0
 800a478:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a47e:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	685a      	ldr	r2, [r3, #4]
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	2103      	movs	r1, #3
 800a48c:	438a      	bics	r2, r1
 800a48e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a494:	2210      	movs	r2, #16
 800a496:	431a      	orrs	r2, r3
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	225d      	movs	r2, #93	; 0x5d
 800a4a0:	2101      	movs	r1, #1
 800a4a2:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	0018      	movs	r0, r3
 800a4a8:	f7ff ff1a 	bl	800a2e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a4ac:	46c0      	nop			; (mov r8, r8)
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	b004      	add	sp, #16
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b084      	sub	sp, #16
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4c0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	2246      	movs	r2, #70	; 0x46
 800a4c6:	2100      	movs	r1, #0
 800a4c8:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	0018      	movs	r0, r3
 800a4d4:	f7ff ff04 	bl	800a2e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a4d8:	46c0      	nop			; (mov r8, r8)
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	b004      	add	sp, #16
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b088      	sub	sp, #32
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	60b9      	str	r1, [r7, #8]
 800a4ea:	603b      	str	r3, [r7, #0]
 800a4ec:	1dfb      	adds	r3, r7, #7
 800a4ee:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a4f0:	f7fa ff70 	bl	80053d4 <HAL_GetTick>
 800a4f4:	0002      	movs	r2, r0
 800a4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f8:	1a9b      	subs	r3, r3, r2
 800a4fa:	683a      	ldr	r2, [r7, #0]
 800a4fc:	18d3      	adds	r3, r2, r3
 800a4fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a500:	f7fa ff68 	bl	80053d4 <HAL_GetTick>
 800a504:	0003      	movs	r3, r0
 800a506:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a508:	4b3a      	ldr	r3, [pc, #232]	; (800a5f4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	015b      	lsls	r3, r3, #5
 800a50e:	0d1b      	lsrs	r3, r3, #20
 800a510:	69fa      	ldr	r2, [r7, #28]
 800a512:	4353      	muls	r3, r2
 800a514:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a516:	e058      	b.n	800a5ca <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	3301      	adds	r3, #1
 800a51c:	d055      	beq.n	800a5ca <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a51e:	f7fa ff59 	bl	80053d4 <HAL_GetTick>
 800a522:	0002      	movs	r2, r0
 800a524:	69bb      	ldr	r3, [r7, #24]
 800a526:	1ad3      	subs	r3, r2, r3
 800a528:	69fa      	ldr	r2, [r7, #28]
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d902      	bls.n	800a534 <SPI_WaitFlagStateUntilTimeout+0x54>
 800a52e:	69fb      	ldr	r3, [r7, #28]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d142      	bne.n	800a5ba <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	685a      	ldr	r2, [r3, #4]
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	21e0      	movs	r1, #224	; 0xe0
 800a540:	438a      	bics	r2, r1
 800a542:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	685a      	ldr	r2, [r3, #4]
 800a548:	2382      	movs	r3, #130	; 0x82
 800a54a:	005b      	lsls	r3, r3, #1
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d113      	bne.n	800a578 <SPI_WaitFlagStateUntilTimeout+0x98>
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	689a      	ldr	r2, [r3, #8]
 800a554:	2380      	movs	r3, #128	; 0x80
 800a556:	021b      	lsls	r3, r3, #8
 800a558:	429a      	cmp	r2, r3
 800a55a:	d005      	beq.n	800a568 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	689a      	ldr	r2, [r3, #8]
 800a560:	2380      	movs	r3, #128	; 0x80
 800a562:	00db      	lsls	r3, r3, #3
 800a564:	429a      	cmp	r2, r3
 800a566:	d107      	bne.n	800a578 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	681a      	ldr	r2, [r3, #0]
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	2140      	movs	r1, #64	; 0x40
 800a574:	438a      	bics	r2, r1
 800a576:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a57c:	2380      	movs	r3, #128	; 0x80
 800a57e:	019b      	lsls	r3, r3, #6
 800a580:	429a      	cmp	r2, r3
 800a582:	d110      	bne.n	800a5a6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	681a      	ldr	r2, [r3, #0]
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	491a      	ldr	r1, [pc, #104]	; (800a5f8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800a590:	400a      	ands	r2, r1
 800a592:	601a      	str	r2, [r3, #0]
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	681a      	ldr	r2, [r3, #0]
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	2180      	movs	r1, #128	; 0x80
 800a5a0:	0189      	lsls	r1, r1, #6
 800a5a2:	430a      	orrs	r2, r1
 800a5a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	225d      	movs	r2, #93	; 0x5d
 800a5aa:	2101      	movs	r1, #1
 800a5ac:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	225c      	movs	r2, #92	; 0x5c
 800a5b2:	2100      	movs	r1, #0
 800a5b4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a5b6:	2303      	movs	r3, #3
 800a5b8:	e017      	b.n	800a5ea <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d101      	bne.n	800a5c4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	3b01      	subs	r3, #1
 800a5c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	689b      	ldr	r3, [r3, #8]
 800a5d0:	68ba      	ldr	r2, [r7, #8]
 800a5d2:	4013      	ands	r3, r2
 800a5d4:	68ba      	ldr	r2, [r7, #8]
 800a5d6:	1ad3      	subs	r3, r2, r3
 800a5d8:	425a      	negs	r2, r3
 800a5da:	4153      	adcs	r3, r2
 800a5dc:	b2db      	uxtb	r3, r3
 800a5de:	001a      	movs	r2, r3
 800a5e0:	1dfb      	adds	r3, r7, #7
 800a5e2:	781b      	ldrb	r3, [r3, #0]
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d197      	bne.n	800a518 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a5e8:	2300      	movs	r3, #0
}
 800a5ea:	0018      	movs	r0, r3
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	b008      	add	sp, #32
 800a5f0:	bd80      	pop	{r7, pc}
 800a5f2:	46c0      	nop			; (mov r8, r8)
 800a5f4:	20003134 	.word	0x20003134
 800a5f8:	ffffdfff 	.word	0xffffdfff

0800a5fc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b088      	sub	sp, #32
 800a600:	af00      	add	r7, sp, #0
 800a602:	60f8      	str	r0, [r7, #12]
 800a604:	60b9      	str	r1, [r7, #8]
 800a606:	607a      	str	r2, [r7, #4]
 800a608:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a60a:	f7fa fee3 	bl	80053d4 <HAL_GetTick>
 800a60e:	0002      	movs	r2, r0
 800a610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a612:	1a9b      	subs	r3, r3, r2
 800a614:	683a      	ldr	r2, [r7, #0]
 800a616:	18d3      	adds	r3, r2, r3
 800a618:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a61a:	f7fa fedb 	bl	80053d4 <HAL_GetTick>
 800a61e:	0003      	movs	r3, r0
 800a620:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a622:	4b3f      	ldr	r3, [pc, #252]	; (800a720 <SPI_WaitFifoStateUntilTimeout+0x124>)
 800a624:	681a      	ldr	r2, [r3, #0]
 800a626:	0013      	movs	r3, r2
 800a628:	009b      	lsls	r3, r3, #2
 800a62a:	189b      	adds	r3, r3, r2
 800a62c:	00da      	lsls	r2, r3, #3
 800a62e:	1ad3      	subs	r3, r2, r3
 800a630:	0d1b      	lsrs	r3, r3, #20
 800a632:	69fa      	ldr	r2, [r7, #28]
 800a634:	4353      	muls	r3, r2
 800a636:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 800a638:	e064      	b.n	800a704 <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a63a:	68ba      	ldr	r2, [r7, #8]
 800a63c:	23c0      	movs	r3, #192	; 0xc0
 800a63e:	00db      	lsls	r3, r3, #3
 800a640:	429a      	cmp	r2, r3
 800a642:	d106      	bne.n	800a652 <SPI_WaitFifoStateUntilTimeout+0x56>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d103      	bne.n	800a652 <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	330c      	adds	r3, #12
 800a650:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	3301      	adds	r3, #1
 800a656:	d055      	beq.n	800a704 <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a658:	f7fa febc 	bl	80053d4 <HAL_GetTick>
 800a65c:	0002      	movs	r2, r0
 800a65e:	69bb      	ldr	r3, [r7, #24]
 800a660:	1ad3      	subs	r3, r2, r3
 800a662:	69fa      	ldr	r2, [r7, #28]
 800a664:	429a      	cmp	r2, r3
 800a666:	d902      	bls.n	800a66e <SPI_WaitFifoStateUntilTimeout+0x72>
 800a668:	69fb      	ldr	r3, [r7, #28]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d142      	bne.n	800a6f4 <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	685a      	ldr	r2, [r3, #4]
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	21e0      	movs	r1, #224	; 0xe0
 800a67a:	438a      	bics	r2, r1
 800a67c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	685a      	ldr	r2, [r3, #4]
 800a682:	2382      	movs	r3, #130	; 0x82
 800a684:	005b      	lsls	r3, r3, #1
 800a686:	429a      	cmp	r2, r3
 800a688:	d113      	bne.n	800a6b2 <SPI_WaitFifoStateUntilTimeout+0xb6>
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	689a      	ldr	r2, [r3, #8]
 800a68e:	2380      	movs	r3, #128	; 0x80
 800a690:	021b      	lsls	r3, r3, #8
 800a692:	429a      	cmp	r2, r3
 800a694:	d005      	beq.n	800a6a2 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	689a      	ldr	r2, [r3, #8]
 800a69a:	2380      	movs	r3, #128	; 0x80
 800a69c:	00db      	lsls	r3, r3, #3
 800a69e:	429a      	cmp	r2, r3
 800a6a0:	d107      	bne.n	800a6b2 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	681a      	ldr	r2, [r3, #0]
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	2140      	movs	r1, #64	; 0x40
 800a6ae:	438a      	bics	r2, r1
 800a6b0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a6b6:	2380      	movs	r3, #128	; 0x80
 800a6b8:	019b      	lsls	r3, r3, #6
 800a6ba:	429a      	cmp	r2, r3
 800a6bc:	d110      	bne.n	800a6e0 <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	681a      	ldr	r2, [r3, #0]
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	4916      	ldr	r1, [pc, #88]	; (800a724 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a6ca:	400a      	ands	r2, r1
 800a6cc:	601a      	str	r2, [r3, #0]
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	681a      	ldr	r2, [r3, #0]
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	2180      	movs	r1, #128	; 0x80
 800a6da:	0189      	lsls	r1, r1, #6
 800a6dc:	430a      	orrs	r2, r1
 800a6de:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	225d      	movs	r2, #93	; 0x5d
 800a6e4:	2101      	movs	r1, #1
 800a6e6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	225c      	movs	r2, #92	; 0x5c
 800a6ec:	2100      	movs	r1, #0
 800a6ee:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a6f0:	2303      	movs	r3, #3
 800a6f2:	e010      	b.n	800a716 <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d101      	bne.n	800a6fe <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	3b01      	subs	r3, #1
 800a702:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	689b      	ldr	r3, [r3, #8]
 800a70a:	68ba      	ldr	r2, [r7, #8]
 800a70c:	4013      	ands	r3, r2
 800a70e:	687a      	ldr	r2, [r7, #4]
 800a710:	429a      	cmp	r2, r3
 800a712:	d192      	bne.n	800a63a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800a714:	2300      	movs	r3, #0
}
 800a716:	0018      	movs	r0, r3
 800a718:	46bd      	mov	sp, r7
 800a71a:	b008      	add	sp, #32
 800a71c:	bd80      	pop	{r7, pc}
 800a71e:	46c0      	nop			; (mov r8, r8)
 800a720:	20003134 	.word	0x20003134
 800a724:	ffffdfff 	.word	0xffffdfff

0800a728 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b086      	sub	sp, #24
 800a72c:	af02      	add	r7, sp, #8
 800a72e:	60f8      	str	r0, [r7, #12]
 800a730:	60b9      	str	r1, [r7, #8]
 800a732:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	685a      	ldr	r2, [r3, #4]
 800a738:	2382      	movs	r3, #130	; 0x82
 800a73a:	005b      	lsls	r3, r3, #1
 800a73c:	429a      	cmp	r2, r3
 800a73e:	d113      	bne.n	800a768 <SPI_EndRxTransaction+0x40>
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	689a      	ldr	r2, [r3, #8]
 800a744:	2380      	movs	r3, #128	; 0x80
 800a746:	021b      	lsls	r3, r3, #8
 800a748:	429a      	cmp	r2, r3
 800a74a:	d005      	beq.n	800a758 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	689a      	ldr	r2, [r3, #8]
 800a750:	2380      	movs	r3, #128	; 0x80
 800a752:	00db      	lsls	r3, r3, #3
 800a754:	429a      	cmp	r2, r3
 800a756:	d107      	bne.n	800a768 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	681a      	ldr	r2, [r3, #0]
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	2140      	movs	r1, #64	; 0x40
 800a764:	438a      	bics	r2, r1
 800a766:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a768:	68ba      	ldr	r2, [r7, #8]
 800a76a:	68f8      	ldr	r0, [r7, #12]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	9300      	str	r3, [sp, #0]
 800a770:	0013      	movs	r3, r2
 800a772:	2200      	movs	r2, #0
 800a774:	2180      	movs	r1, #128	; 0x80
 800a776:	f7ff feb3 	bl	800a4e0 <SPI_WaitFlagStateUntilTimeout>
 800a77a:	1e03      	subs	r3, r0, #0
 800a77c:	d007      	beq.n	800a78e <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a782:	2220      	movs	r2, #32
 800a784:	431a      	orrs	r2, r3
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a78a:	2303      	movs	r3, #3
 800a78c:	e026      	b.n	800a7dc <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	685a      	ldr	r2, [r3, #4]
 800a792:	2382      	movs	r3, #130	; 0x82
 800a794:	005b      	lsls	r3, r3, #1
 800a796:	429a      	cmp	r2, r3
 800a798:	d11f      	bne.n	800a7da <SPI_EndRxTransaction+0xb2>
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	689a      	ldr	r2, [r3, #8]
 800a79e:	2380      	movs	r3, #128	; 0x80
 800a7a0:	021b      	lsls	r3, r3, #8
 800a7a2:	429a      	cmp	r2, r3
 800a7a4:	d005      	beq.n	800a7b2 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	689a      	ldr	r2, [r3, #8]
 800a7aa:	2380      	movs	r3, #128	; 0x80
 800a7ac:	00db      	lsls	r3, r3, #3
 800a7ae:	429a      	cmp	r2, r3
 800a7b0:	d113      	bne.n	800a7da <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a7b2:	68ba      	ldr	r2, [r7, #8]
 800a7b4:	23c0      	movs	r3, #192	; 0xc0
 800a7b6:	00d9      	lsls	r1, r3, #3
 800a7b8:	68f8      	ldr	r0, [r7, #12]
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	9300      	str	r3, [sp, #0]
 800a7be:	0013      	movs	r3, r2
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	f7ff ff1b 	bl	800a5fc <SPI_WaitFifoStateUntilTimeout>
 800a7c6:	1e03      	subs	r3, r0, #0
 800a7c8:	d007      	beq.n	800a7da <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7ce:	2220      	movs	r2, #32
 800a7d0:	431a      	orrs	r2, r3
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800a7d6:	2303      	movs	r3, #3
 800a7d8:	e000      	b.n	800a7dc <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800a7da:	2300      	movs	r3, #0
}
 800a7dc:	0018      	movs	r0, r3
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	b004      	add	sp, #16
 800a7e2:	bd80      	pop	{r7, pc}

0800a7e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b086      	sub	sp, #24
 800a7e8:	af02      	add	r7, sp, #8
 800a7ea:	60f8      	str	r0, [r7, #12]
 800a7ec:	60b9      	str	r1, [r7, #8]
 800a7ee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a7f0:	68ba      	ldr	r2, [r7, #8]
 800a7f2:	23c0      	movs	r3, #192	; 0xc0
 800a7f4:	0159      	lsls	r1, r3, #5
 800a7f6:	68f8      	ldr	r0, [r7, #12]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	9300      	str	r3, [sp, #0]
 800a7fc:	0013      	movs	r3, r2
 800a7fe:	2200      	movs	r2, #0
 800a800:	f7ff fefc 	bl	800a5fc <SPI_WaitFifoStateUntilTimeout>
 800a804:	1e03      	subs	r3, r0, #0
 800a806:	d007      	beq.n	800a818 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a80c:	2220      	movs	r2, #32
 800a80e:	431a      	orrs	r2, r3
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a814:	2303      	movs	r3, #3
 800a816:	e027      	b.n	800a868 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a818:	68ba      	ldr	r2, [r7, #8]
 800a81a:	68f8      	ldr	r0, [r7, #12]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	9300      	str	r3, [sp, #0]
 800a820:	0013      	movs	r3, r2
 800a822:	2200      	movs	r2, #0
 800a824:	2180      	movs	r1, #128	; 0x80
 800a826:	f7ff fe5b 	bl	800a4e0 <SPI_WaitFlagStateUntilTimeout>
 800a82a:	1e03      	subs	r3, r0, #0
 800a82c:	d007      	beq.n	800a83e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a832:	2220      	movs	r2, #32
 800a834:	431a      	orrs	r2, r3
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a83a:	2303      	movs	r3, #3
 800a83c:	e014      	b.n	800a868 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a83e:	68ba      	ldr	r2, [r7, #8]
 800a840:	23c0      	movs	r3, #192	; 0xc0
 800a842:	00d9      	lsls	r1, r3, #3
 800a844:	68f8      	ldr	r0, [r7, #12]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	9300      	str	r3, [sp, #0]
 800a84a:	0013      	movs	r3, r2
 800a84c:	2200      	movs	r2, #0
 800a84e:	f7ff fed5 	bl	800a5fc <SPI_WaitFifoStateUntilTimeout>
 800a852:	1e03      	subs	r3, r0, #0
 800a854:	d007      	beq.n	800a866 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a85a:	2220      	movs	r2, #32
 800a85c:	431a      	orrs	r2, r3
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a862:	2303      	movs	r3, #3
 800a864:	e000      	b.n	800a868 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a866:	2300      	movs	r3, #0
}
 800a868:	0018      	movs	r0, r3
 800a86a:	46bd      	mov	sp, r7
 800a86c:	b004      	add	sp, #16
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b082      	sub	sp, #8
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d101      	bne.n	800a882 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a87e:	2301      	movs	r3, #1
 800a880:	e04a      	b.n	800a918 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	223d      	movs	r2, #61	; 0x3d
 800a886:	5c9b      	ldrb	r3, [r3, r2]
 800a888:	b2db      	uxtb	r3, r3
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d107      	bne.n	800a89e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	223c      	movs	r2, #60	; 0x3c
 800a892:	2100      	movs	r1, #0
 800a894:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	0018      	movs	r0, r3
 800a89a:	f7fa fac3 	bl	8004e24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	223d      	movs	r2, #61	; 0x3d
 800a8a2:	2102      	movs	r1, #2
 800a8a4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681a      	ldr	r2, [r3, #0]
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	3304      	adds	r3, #4
 800a8ae:	0019      	movs	r1, r3
 800a8b0:	0010      	movs	r0, r2
 800a8b2:	f000 fb41 	bl	800af38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2248      	movs	r2, #72	; 0x48
 800a8ba:	2101      	movs	r1, #1
 800a8bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	223e      	movs	r2, #62	; 0x3e
 800a8c2:	2101      	movs	r1, #1
 800a8c4:	5499      	strb	r1, [r3, r2]
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	223f      	movs	r2, #63	; 0x3f
 800a8ca:	2101      	movs	r1, #1
 800a8cc:	5499      	strb	r1, [r3, r2]
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2240      	movs	r2, #64	; 0x40
 800a8d2:	2101      	movs	r1, #1
 800a8d4:	5499      	strb	r1, [r3, r2]
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2241      	movs	r2, #65	; 0x41
 800a8da:	2101      	movs	r1, #1
 800a8dc:	5499      	strb	r1, [r3, r2]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2242      	movs	r2, #66	; 0x42
 800a8e2:	2101      	movs	r1, #1
 800a8e4:	5499      	strb	r1, [r3, r2]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2243      	movs	r2, #67	; 0x43
 800a8ea:	2101      	movs	r1, #1
 800a8ec:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2244      	movs	r2, #68	; 0x44
 800a8f2:	2101      	movs	r1, #1
 800a8f4:	5499      	strb	r1, [r3, r2]
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2245      	movs	r2, #69	; 0x45
 800a8fa:	2101      	movs	r1, #1
 800a8fc:	5499      	strb	r1, [r3, r2]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2246      	movs	r2, #70	; 0x46
 800a902:	2101      	movs	r1, #1
 800a904:	5499      	strb	r1, [r3, r2]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2247      	movs	r2, #71	; 0x47
 800a90a:	2101      	movs	r1, #1
 800a90c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	223d      	movs	r2, #61	; 0x3d
 800a912:	2101      	movs	r1, #1
 800a914:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a916:	2300      	movs	r3, #0
}
 800a918:	0018      	movs	r0, r3
 800a91a:	46bd      	mov	sp, r7
 800a91c:	b002      	add	sp, #8
 800a91e:	bd80      	pop	{r7, pc}

0800a920 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b082      	sub	sp, #8
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d101      	bne.n	800a932 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a92e:	2301      	movs	r3, #1
 800a930:	e04a      	b.n	800a9c8 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	223d      	movs	r2, #61	; 0x3d
 800a936:	5c9b      	ldrb	r3, [r3, r2]
 800a938:	b2db      	uxtb	r3, r3
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d107      	bne.n	800a94e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	223c      	movs	r2, #60	; 0x3c
 800a942:	2100      	movs	r1, #0
 800a944:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	0018      	movs	r0, r3
 800a94a:	f000 f841 	bl	800a9d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	223d      	movs	r2, #61	; 0x3d
 800a952:	2102      	movs	r1, #2
 800a954:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681a      	ldr	r2, [r3, #0]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	3304      	adds	r3, #4
 800a95e:	0019      	movs	r1, r3
 800a960:	0010      	movs	r0, r2
 800a962:	f000 fae9 	bl	800af38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2248      	movs	r2, #72	; 0x48
 800a96a:	2101      	movs	r1, #1
 800a96c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	223e      	movs	r2, #62	; 0x3e
 800a972:	2101      	movs	r1, #1
 800a974:	5499      	strb	r1, [r3, r2]
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	223f      	movs	r2, #63	; 0x3f
 800a97a:	2101      	movs	r1, #1
 800a97c:	5499      	strb	r1, [r3, r2]
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2240      	movs	r2, #64	; 0x40
 800a982:	2101      	movs	r1, #1
 800a984:	5499      	strb	r1, [r3, r2]
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2241      	movs	r2, #65	; 0x41
 800a98a:	2101      	movs	r1, #1
 800a98c:	5499      	strb	r1, [r3, r2]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2242      	movs	r2, #66	; 0x42
 800a992:	2101      	movs	r1, #1
 800a994:	5499      	strb	r1, [r3, r2]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2243      	movs	r2, #67	; 0x43
 800a99a:	2101      	movs	r1, #1
 800a99c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2244      	movs	r2, #68	; 0x44
 800a9a2:	2101      	movs	r1, #1
 800a9a4:	5499      	strb	r1, [r3, r2]
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2245      	movs	r2, #69	; 0x45
 800a9aa:	2101      	movs	r1, #1
 800a9ac:	5499      	strb	r1, [r3, r2]
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2246      	movs	r2, #70	; 0x46
 800a9b2:	2101      	movs	r1, #1
 800a9b4:	5499      	strb	r1, [r3, r2]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2247      	movs	r2, #71	; 0x47
 800a9ba:	2101      	movs	r1, #1
 800a9bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	223d      	movs	r2, #61	; 0x3d
 800a9c2:	2101      	movs	r1, #1
 800a9c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a9c6:	2300      	movs	r3, #0
}
 800a9c8:	0018      	movs	r0, r3
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	b002      	add	sp, #8
 800a9ce:	bd80      	pop	{r7, pc}

0800a9d0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b082      	sub	sp, #8
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a9d8:	46c0      	nop			; (mov r8, r8)
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	b002      	add	sp, #8
 800a9de:	bd80      	pop	{r7, pc}

0800a9e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b084      	sub	sp, #16
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d108      	bne.n	800aa02 <HAL_TIM_PWM_Start+0x22>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	223e      	movs	r2, #62	; 0x3e
 800a9f4:	5c9b      	ldrb	r3, [r3, r2]
 800a9f6:	b2db      	uxtb	r3, r3
 800a9f8:	3b01      	subs	r3, #1
 800a9fa:	1e5a      	subs	r2, r3, #1
 800a9fc:	4193      	sbcs	r3, r2
 800a9fe:	b2db      	uxtb	r3, r3
 800aa00:	e037      	b.n	800aa72 <HAL_TIM_PWM_Start+0x92>
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	2b04      	cmp	r3, #4
 800aa06:	d108      	bne.n	800aa1a <HAL_TIM_PWM_Start+0x3a>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	223f      	movs	r2, #63	; 0x3f
 800aa0c:	5c9b      	ldrb	r3, [r3, r2]
 800aa0e:	b2db      	uxtb	r3, r3
 800aa10:	3b01      	subs	r3, #1
 800aa12:	1e5a      	subs	r2, r3, #1
 800aa14:	4193      	sbcs	r3, r2
 800aa16:	b2db      	uxtb	r3, r3
 800aa18:	e02b      	b.n	800aa72 <HAL_TIM_PWM_Start+0x92>
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	2b08      	cmp	r3, #8
 800aa1e:	d108      	bne.n	800aa32 <HAL_TIM_PWM_Start+0x52>
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2240      	movs	r2, #64	; 0x40
 800aa24:	5c9b      	ldrb	r3, [r3, r2]
 800aa26:	b2db      	uxtb	r3, r3
 800aa28:	3b01      	subs	r3, #1
 800aa2a:	1e5a      	subs	r2, r3, #1
 800aa2c:	4193      	sbcs	r3, r2
 800aa2e:	b2db      	uxtb	r3, r3
 800aa30:	e01f      	b.n	800aa72 <HAL_TIM_PWM_Start+0x92>
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	2b0c      	cmp	r3, #12
 800aa36:	d108      	bne.n	800aa4a <HAL_TIM_PWM_Start+0x6a>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2241      	movs	r2, #65	; 0x41
 800aa3c:	5c9b      	ldrb	r3, [r3, r2]
 800aa3e:	b2db      	uxtb	r3, r3
 800aa40:	3b01      	subs	r3, #1
 800aa42:	1e5a      	subs	r2, r3, #1
 800aa44:	4193      	sbcs	r3, r2
 800aa46:	b2db      	uxtb	r3, r3
 800aa48:	e013      	b.n	800aa72 <HAL_TIM_PWM_Start+0x92>
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	2b10      	cmp	r3, #16
 800aa4e:	d108      	bne.n	800aa62 <HAL_TIM_PWM_Start+0x82>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2242      	movs	r2, #66	; 0x42
 800aa54:	5c9b      	ldrb	r3, [r3, r2]
 800aa56:	b2db      	uxtb	r3, r3
 800aa58:	3b01      	subs	r3, #1
 800aa5a:	1e5a      	subs	r2, r3, #1
 800aa5c:	4193      	sbcs	r3, r2
 800aa5e:	b2db      	uxtb	r3, r3
 800aa60:	e007      	b.n	800aa72 <HAL_TIM_PWM_Start+0x92>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2243      	movs	r2, #67	; 0x43
 800aa66:	5c9b      	ldrb	r3, [r3, r2]
 800aa68:	b2db      	uxtb	r3, r3
 800aa6a:	3b01      	subs	r3, #1
 800aa6c:	1e5a      	subs	r2, r3, #1
 800aa6e:	4193      	sbcs	r3, r2
 800aa70:	b2db      	uxtb	r3, r3
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d001      	beq.n	800aa7a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800aa76:	2301      	movs	r3, #1
 800aa78:	e08b      	b.n	800ab92 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d104      	bne.n	800aa8a <HAL_TIM_PWM_Start+0xaa>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	223e      	movs	r2, #62	; 0x3e
 800aa84:	2102      	movs	r1, #2
 800aa86:	5499      	strb	r1, [r3, r2]
 800aa88:	e023      	b.n	800aad2 <HAL_TIM_PWM_Start+0xf2>
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	2b04      	cmp	r3, #4
 800aa8e:	d104      	bne.n	800aa9a <HAL_TIM_PWM_Start+0xba>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	223f      	movs	r2, #63	; 0x3f
 800aa94:	2102      	movs	r1, #2
 800aa96:	5499      	strb	r1, [r3, r2]
 800aa98:	e01b      	b.n	800aad2 <HAL_TIM_PWM_Start+0xf2>
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	2b08      	cmp	r3, #8
 800aa9e:	d104      	bne.n	800aaaa <HAL_TIM_PWM_Start+0xca>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2240      	movs	r2, #64	; 0x40
 800aaa4:	2102      	movs	r1, #2
 800aaa6:	5499      	strb	r1, [r3, r2]
 800aaa8:	e013      	b.n	800aad2 <HAL_TIM_PWM_Start+0xf2>
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	2b0c      	cmp	r3, #12
 800aaae:	d104      	bne.n	800aaba <HAL_TIM_PWM_Start+0xda>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2241      	movs	r2, #65	; 0x41
 800aab4:	2102      	movs	r1, #2
 800aab6:	5499      	strb	r1, [r3, r2]
 800aab8:	e00b      	b.n	800aad2 <HAL_TIM_PWM_Start+0xf2>
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	2b10      	cmp	r3, #16
 800aabe:	d104      	bne.n	800aaca <HAL_TIM_PWM_Start+0xea>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2242      	movs	r2, #66	; 0x42
 800aac4:	2102      	movs	r1, #2
 800aac6:	5499      	strb	r1, [r3, r2]
 800aac8:	e003      	b.n	800aad2 <HAL_TIM_PWM_Start+0xf2>
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2243      	movs	r2, #67	; 0x43
 800aace:	2102      	movs	r1, #2
 800aad0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	6839      	ldr	r1, [r7, #0]
 800aad8:	2201      	movs	r2, #1
 800aada:	0018      	movs	r0, r3
 800aadc:	f000 fe0c 	bl	800b6f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	4a2d      	ldr	r2, [pc, #180]	; (800ab9c <HAL_TIM_PWM_Start+0x1bc>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d00e      	beq.n	800ab08 <HAL_TIM_PWM_Start+0x128>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	4a2c      	ldr	r2, [pc, #176]	; (800aba0 <HAL_TIM_PWM_Start+0x1c0>)
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d009      	beq.n	800ab08 <HAL_TIM_PWM_Start+0x128>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4a2a      	ldr	r2, [pc, #168]	; (800aba4 <HAL_TIM_PWM_Start+0x1c4>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d004      	beq.n	800ab08 <HAL_TIM_PWM_Start+0x128>
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	4a29      	ldr	r2, [pc, #164]	; (800aba8 <HAL_TIM_PWM_Start+0x1c8>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d101      	bne.n	800ab0c <HAL_TIM_PWM_Start+0x12c>
 800ab08:	2301      	movs	r3, #1
 800ab0a:	e000      	b.n	800ab0e <HAL_TIM_PWM_Start+0x12e>
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d008      	beq.n	800ab24 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	2180      	movs	r1, #128	; 0x80
 800ab1e:	0209      	lsls	r1, r1, #8
 800ab20:	430a      	orrs	r2, r1
 800ab22:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	4a1c      	ldr	r2, [pc, #112]	; (800ab9c <HAL_TIM_PWM_Start+0x1bc>)
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	d00f      	beq.n	800ab4e <HAL_TIM_PWM_Start+0x16e>
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681a      	ldr	r2, [r3, #0]
 800ab32:	2380      	movs	r3, #128	; 0x80
 800ab34:	05db      	lsls	r3, r3, #23
 800ab36:	429a      	cmp	r2, r3
 800ab38:	d009      	beq.n	800ab4e <HAL_TIM_PWM_Start+0x16e>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	4a1b      	ldr	r2, [pc, #108]	; (800abac <HAL_TIM_PWM_Start+0x1cc>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d004      	beq.n	800ab4e <HAL_TIM_PWM_Start+0x16e>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	4a15      	ldr	r2, [pc, #84]	; (800aba0 <HAL_TIM_PWM_Start+0x1c0>)
 800ab4a:	4293      	cmp	r3, r2
 800ab4c:	d116      	bne.n	800ab7c <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	689b      	ldr	r3, [r3, #8]
 800ab54:	4a16      	ldr	r2, [pc, #88]	; (800abb0 <HAL_TIM_PWM_Start+0x1d0>)
 800ab56:	4013      	ands	r3, r2
 800ab58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	2b06      	cmp	r3, #6
 800ab5e:	d016      	beq.n	800ab8e <HAL_TIM_PWM_Start+0x1ae>
 800ab60:	68fa      	ldr	r2, [r7, #12]
 800ab62:	2380      	movs	r3, #128	; 0x80
 800ab64:	025b      	lsls	r3, r3, #9
 800ab66:	429a      	cmp	r2, r3
 800ab68:	d011      	beq.n	800ab8e <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	681a      	ldr	r2, [r3, #0]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	2101      	movs	r1, #1
 800ab76:	430a      	orrs	r2, r1
 800ab78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab7a:	e008      	b.n	800ab8e <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	681a      	ldr	r2, [r3, #0]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	2101      	movs	r1, #1
 800ab88:	430a      	orrs	r2, r1
 800ab8a:	601a      	str	r2, [r3, #0]
 800ab8c:	e000      	b.n	800ab90 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab8e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800ab90:	2300      	movs	r3, #0
}
 800ab92:	0018      	movs	r0, r3
 800ab94:	46bd      	mov	sp, r7
 800ab96:	b004      	add	sp, #16
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	46c0      	nop			; (mov r8, r8)
 800ab9c:	40012c00 	.word	0x40012c00
 800aba0:	40014000 	.word	0x40014000
 800aba4:	40014400 	.word	0x40014400
 800aba8:	40014800 	.word	0x40014800
 800abac:	40000400 	.word	0x40000400
 800abb0:	00010007 	.word	0x00010007

0800abb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b084      	sub	sp, #16
 800abb8:	af00      	add	r7, sp, #0
 800abba:	60f8      	str	r0, [r7, #12]
 800abbc:	60b9      	str	r1, [r7, #8]
 800abbe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	223c      	movs	r2, #60	; 0x3c
 800abc4:	5c9b      	ldrb	r3, [r3, r2]
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	d101      	bne.n	800abce <HAL_TIM_PWM_ConfigChannel+0x1a>
 800abca:	2302      	movs	r3, #2
 800abcc:	e0df      	b.n	800ad8e <HAL_TIM_PWM_ConfigChannel+0x1da>
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	223c      	movs	r2, #60	; 0x3c
 800abd2:	2101      	movs	r1, #1
 800abd4:	5499      	strb	r1, [r3, r2]
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2b14      	cmp	r3, #20
 800abda:	d900      	bls.n	800abde <HAL_TIM_PWM_ConfigChannel+0x2a>
 800abdc:	e0d1      	b.n	800ad82 <HAL_TIM_PWM_ConfigChannel+0x1ce>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	009a      	lsls	r2, r3, #2
 800abe2:	4b6d      	ldr	r3, [pc, #436]	; (800ad98 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 800abe4:	18d3      	adds	r3, r2, r3
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	68ba      	ldr	r2, [r7, #8]
 800abf0:	0011      	movs	r1, r2
 800abf2:	0018      	movs	r0, r3
 800abf4:	f000 fa20 	bl	800b038 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	699a      	ldr	r2, [r3, #24]
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	2108      	movs	r1, #8
 800ac04:	430a      	orrs	r2, r1
 800ac06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	699a      	ldr	r2, [r3, #24]
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	2104      	movs	r1, #4
 800ac14:	438a      	bics	r2, r1
 800ac16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	6999      	ldr	r1, [r3, #24]
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	691a      	ldr	r2, [r3, #16]
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	430a      	orrs	r2, r1
 800ac28:	619a      	str	r2, [r3, #24]
      break;
 800ac2a:	e0ab      	b.n	800ad84 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	68ba      	ldr	r2, [r7, #8]
 800ac32:	0011      	movs	r1, r2
 800ac34:	0018      	movs	r0, r3
 800ac36:	f000 fa89 	bl	800b14c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	699a      	ldr	r2, [r3, #24]
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	2180      	movs	r1, #128	; 0x80
 800ac46:	0109      	lsls	r1, r1, #4
 800ac48:	430a      	orrs	r2, r1
 800ac4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	699a      	ldr	r2, [r3, #24]
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	4951      	ldr	r1, [pc, #324]	; (800ad9c <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 800ac58:	400a      	ands	r2, r1
 800ac5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	6999      	ldr	r1, [r3, #24]
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	691b      	ldr	r3, [r3, #16]
 800ac66:	021a      	lsls	r2, r3, #8
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	430a      	orrs	r2, r1
 800ac6e:	619a      	str	r2, [r3, #24]
      break;
 800ac70:	e088      	b.n	800ad84 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	68ba      	ldr	r2, [r7, #8]
 800ac78:	0011      	movs	r1, r2
 800ac7a:	0018      	movs	r0, r3
 800ac7c:	f000 faea 	bl	800b254 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	69da      	ldr	r2, [r3, #28]
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	2108      	movs	r1, #8
 800ac8c:	430a      	orrs	r2, r1
 800ac8e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	69da      	ldr	r2, [r3, #28]
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	2104      	movs	r1, #4
 800ac9c:	438a      	bics	r2, r1
 800ac9e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	69d9      	ldr	r1, [r3, #28]
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	691a      	ldr	r2, [r3, #16]
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	430a      	orrs	r2, r1
 800acb0:	61da      	str	r2, [r3, #28]
      break;
 800acb2:	e067      	b.n	800ad84 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	68ba      	ldr	r2, [r7, #8]
 800acba:	0011      	movs	r1, r2
 800acbc:	0018      	movs	r0, r3
 800acbe:	f000 fb51 	bl	800b364 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	69da      	ldr	r2, [r3, #28]
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	2180      	movs	r1, #128	; 0x80
 800acce:	0109      	lsls	r1, r1, #4
 800acd0:	430a      	orrs	r2, r1
 800acd2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	69da      	ldr	r2, [r3, #28]
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	492f      	ldr	r1, [pc, #188]	; (800ad9c <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 800ace0:	400a      	ands	r2, r1
 800ace2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	69d9      	ldr	r1, [r3, #28]
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	691b      	ldr	r3, [r3, #16]
 800acee:	021a      	lsls	r2, r3, #8
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	430a      	orrs	r2, r1
 800acf6:	61da      	str	r2, [r3, #28]
      break;
 800acf8:	e044      	b.n	800ad84 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	68ba      	ldr	r2, [r7, #8]
 800ad00:	0011      	movs	r1, r2
 800ad02:	0018      	movs	r0, r3
 800ad04:	f000 fb98 	bl	800b438 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	2108      	movs	r1, #8
 800ad14:	430a      	orrs	r2, r1
 800ad16:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	2104      	movs	r1, #4
 800ad24:	438a      	bics	r2, r1
 800ad26:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	691a      	ldr	r2, [r3, #16]
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	430a      	orrs	r2, r1
 800ad38:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ad3a:	e023      	b.n	800ad84 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	68ba      	ldr	r2, [r7, #8]
 800ad42:	0011      	movs	r1, r2
 800ad44:	0018      	movs	r0, r3
 800ad46:	f000 fbd7 	bl	800b4f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	2180      	movs	r1, #128	; 0x80
 800ad56:	0109      	lsls	r1, r1, #4
 800ad58:	430a      	orrs	r2, r1
 800ad5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	490d      	ldr	r1, [pc, #52]	; (800ad9c <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 800ad68:	400a      	ands	r2, r1
 800ad6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	691b      	ldr	r3, [r3, #16]
 800ad76:	021a      	lsls	r2, r3, #8
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	430a      	orrs	r2, r1
 800ad7e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ad80:	e000      	b.n	800ad84 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 800ad82:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	223c      	movs	r2, #60	; 0x3c
 800ad88:	2100      	movs	r1, #0
 800ad8a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ad8c:	2300      	movs	r3, #0
}
 800ad8e:	0018      	movs	r0, r3
 800ad90:	46bd      	mov	sp, r7
 800ad92:	b004      	add	sp, #16
 800ad94:	bd80      	pop	{r7, pc}
 800ad96:	46c0      	nop			; (mov r8, r8)
 800ad98:	0800e2bc 	.word	0x0800e2bc
 800ad9c:	fffffbff 	.word	0xfffffbff

0800ada0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b084      	sub	sp, #16
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	223c      	movs	r2, #60	; 0x3c
 800adae:	5c9b      	ldrb	r3, [r3, r2]
 800adb0:	2b01      	cmp	r3, #1
 800adb2:	d101      	bne.n	800adb8 <HAL_TIM_ConfigClockSource+0x18>
 800adb4:	2302      	movs	r3, #2
 800adb6:	e0b7      	b.n	800af28 <HAL_TIM_ConfigClockSource+0x188>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	223c      	movs	r2, #60	; 0x3c
 800adbc:	2101      	movs	r1, #1
 800adbe:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	223d      	movs	r2, #61	; 0x3d
 800adc4:	2102      	movs	r1, #2
 800adc6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	689b      	ldr	r3, [r3, #8]
 800adce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	4a57      	ldr	r2, [pc, #348]	; (800af30 <HAL_TIM_ConfigClockSource+0x190>)
 800add4:	4013      	ands	r3, r2
 800add6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	4a56      	ldr	r2, [pc, #344]	; (800af34 <HAL_TIM_ConfigClockSource+0x194>)
 800addc:	4013      	ands	r3, r2
 800adde:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	68fa      	ldr	r2, [r7, #12]
 800ade6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	2280      	movs	r2, #128	; 0x80
 800adee:	0192      	lsls	r2, r2, #6
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d040      	beq.n	800ae76 <HAL_TIM_ConfigClockSource+0xd6>
 800adf4:	2280      	movs	r2, #128	; 0x80
 800adf6:	0192      	lsls	r2, r2, #6
 800adf8:	4293      	cmp	r3, r2
 800adfa:	d900      	bls.n	800adfe <HAL_TIM_ConfigClockSource+0x5e>
 800adfc:	e088      	b.n	800af10 <HAL_TIM_ConfigClockSource+0x170>
 800adfe:	2280      	movs	r2, #128	; 0x80
 800ae00:	0152      	lsls	r2, r2, #5
 800ae02:	4293      	cmp	r3, r2
 800ae04:	d100      	bne.n	800ae08 <HAL_TIM_ConfigClockSource+0x68>
 800ae06:	e085      	b.n	800af14 <HAL_TIM_ConfigClockSource+0x174>
 800ae08:	2280      	movs	r2, #128	; 0x80
 800ae0a:	0152      	lsls	r2, r2, #5
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d900      	bls.n	800ae12 <HAL_TIM_ConfigClockSource+0x72>
 800ae10:	e07e      	b.n	800af10 <HAL_TIM_ConfigClockSource+0x170>
 800ae12:	2b70      	cmp	r3, #112	; 0x70
 800ae14:	d018      	beq.n	800ae48 <HAL_TIM_ConfigClockSource+0xa8>
 800ae16:	d900      	bls.n	800ae1a <HAL_TIM_ConfigClockSource+0x7a>
 800ae18:	e07a      	b.n	800af10 <HAL_TIM_ConfigClockSource+0x170>
 800ae1a:	2b60      	cmp	r3, #96	; 0x60
 800ae1c:	d04f      	beq.n	800aebe <HAL_TIM_ConfigClockSource+0x11e>
 800ae1e:	d900      	bls.n	800ae22 <HAL_TIM_ConfigClockSource+0x82>
 800ae20:	e076      	b.n	800af10 <HAL_TIM_ConfigClockSource+0x170>
 800ae22:	2b50      	cmp	r3, #80	; 0x50
 800ae24:	d03b      	beq.n	800ae9e <HAL_TIM_ConfigClockSource+0xfe>
 800ae26:	d900      	bls.n	800ae2a <HAL_TIM_ConfigClockSource+0x8a>
 800ae28:	e072      	b.n	800af10 <HAL_TIM_ConfigClockSource+0x170>
 800ae2a:	2b40      	cmp	r3, #64	; 0x40
 800ae2c:	d057      	beq.n	800aede <HAL_TIM_ConfigClockSource+0x13e>
 800ae2e:	d900      	bls.n	800ae32 <HAL_TIM_ConfigClockSource+0x92>
 800ae30:	e06e      	b.n	800af10 <HAL_TIM_ConfigClockSource+0x170>
 800ae32:	2b30      	cmp	r3, #48	; 0x30
 800ae34:	d063      	beq.n	800aefe <HAL_TIM_ConfigClockSource+0x15e>
 800ae36:	d86b      	bhi.n	800af10 <HAL_TIM_ConfigClockSource+0x170>
 800ae38:	2b20      	cmp	r3, #32
 800ae3a:	d060      	beq.n	800aefe <HAL_TIM_ConfigClockSource+0x15e>
 800ae3c:	d868      	bhi.n	800af10 <HAL_TIM_ConfigClockSource+0x170>
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d05d      	beq.n	800aefe <HAL_TIM_ConfigClockSource+0x15e>
 800ae42:	2b10      	cmp	r3, #16
 800ae44:	d05b      	beq.n	800aefe <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800ae46:	e063      	b.n	800af10 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6818      	ldr	r0, [r3, #0]
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	6899      	ldr	r1, [r3, #8]
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	685a      	ldr	r2, [r3, #4]
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	68db      	ldr	r3, [r3, #12]
 800ae58:	f000 fc2e 	bl	800b6b8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	689b      	ldr	r3, [r3, #8]
 800ae62:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	2277      	movs	r2, #119	; 0x77
 800ae68:	4313      	orrs	r3, r2
 800ae6a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	68fa      	ldr	r2, [r7, #12]
 800ae72:	609a      	str	r2, [r3, #8]
      break;
 800ae74:	e04f      	b.n	800af16 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6818      	ldr	r0, [r3, #0]
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	6899      	ldr	r1, [r3, #8]
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	685a      	ldr	r2, [r3, #4]
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	68db      	ldr	r3, [r3, #12]
 800ae86:	f000 fc17 	bl	800b6b8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	689a      	ldr	r2, [r3, #8]
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	2180      	movs	r1, #128	; 0x80
 800ae96:	01c9      	lsls	r1, r1, #7
 800ae98:	430a      	orrs	r2, r1
 800ae9a:	609a      	str	r2, [r3, #8]
      break;
 800ae9c:	e03b      	b.n	800af16 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6818      	ldr	r0, [r3, #0]
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	6859      	ldr	r1, [r3, #4]
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	68db      	ldr	r3, [r3, #12]
 800aeaa:	001a      	movs	r2, r3
 800aeac:	f000 fb88 	bl	800b5c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	2150      	movs	r1, #80	; 0x50
 800aeb6:	0018      	movs	r0, r3
 800aeb8:	f000 fbe2 	bl	800b680 <TIM_ITRx_SetConfig>
      break;
 800aebc:	e02b      	b.n	800af16 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6818      	ldr	r0, [r3, #0]
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	6859      	ldr	r1, [r3, #4]
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	68db      	ldr	r3, [r3, #12]
 800aeca:	001a      	movs	r2, r3
 800aecc:	f000 fba6 	bl	800b61c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	2160      	movs	r1, #96	; 0x60
 800aed6:	0018      	movs	r0, r3
 800aed8:	f000 fbd2 	bl	800b680 <TIM_ITRx_SetConfig>
      break;
 800aedc:	e01b      	b.n	800af16 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6818      	ldr	r0, [r3, #0]
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	6859      	ldr	r1, [r3, #4]
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	68db      	ldr	r3, [r3, #12]
 800aeea:	001a      	movs	r2, r3
 800aeec:	f000 fb68 	bl	800b5c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	2140      	movs	r1, #64	; 0x40
 800aef6:	0018      	movs	r0, r3
 800aef8:	f000 fbc2 	bl	800b680 <TIM_ITRx_SetConfig>
      break;
 800aefc:	e00b      	b.n	800af16 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681a      	ldr	r2, [r3, #0]
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	0019      	movs	r1, r3
 800af08:	0010      	movs	r0, r2
 800af0a:	f000 fbb9 	bl	800b680 <TIM_ITRx_SetConfig>
        break;
 800af0e:	e002      	b.n	800af16 <HAL_TIM_ConfigClockSource+0x176>
      break;
 800af10:	46c0      	nop			; (mov r8, r8)
 800af12:	e000      	b.n	800af16 <HAL_TIM_ConfigClockSource+0x176>
      break;
 800af14:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	223d      	movs	r2, #61	; 0x3d
 800af1a:	2101      	movs	r1, #1
 800af1c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	223c      	movs	r2, #60	; 0x3c
 800af22:	2100      	movs	r1, #0
 800af24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800af26:	2300      	movs	r3, #0
}
 800af28:	0018      	movs	r0, r3
 800af2a:	46bd      	mov	sp, r7
 800af2c:	b004      	add	sp, #16
 800af2e:	bd80      	pop	{r7, pc}
 800af30:	ffceff88 	.word	0xffceff88
 800af34:	ffff00ff 	.word	0xffff00ff

0800af38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b084      	sub	sp, #16
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	4a34      	ldr	r2, [pc, #208]	; (800b01c <TIM_Base_SetConfig+0xe4>)
 800af4c:	4293      	cmp	r3, r2
 800af4e:	d008      	beq.n	800af62 <TIM_Base_SetConfig+0x2a>
 800af50:	687a      	ldr	r2, [r7, #4]
 800af52:	2380      	movs	r3, #128	; 0x80
 800af54:	05db      	lsls	r3, r3, #23
 800af56:	429a      	cmp	r2, r3
 800af58:	d003      	beq.n	800af62 <TIM_Base_SetConfig+0x2a>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	4a30      	ldr	r2, [pc, #192]	; (800b020 <TIM_Base_SetConfig+0xe8>)
 800af5e:	4293      	cmp	r3, r2
 800af60:	d108      	bne.n	800af74 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	2270      	movs	r2, #112	; 0x70
 800af66:	4393      	bics	r3, r2
 800af68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	685b      	ldr	r3, [r3, #4]
 800af6e:	68fa      	ldr	r2, [r7, #12]
 800af70:	4313      	orrs	r3, r2
 800af72:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	4a29      	ldr	r2, [pc, #164]	; (800b01c <TIM_Base_SetConfig+0xe4>)
 800af78:	4293      	cmp	r3, r2
 800af7a:	d018      	beq.n	800afae <TIM_Base_SetConfig+0x76>
 800af7c:	687a      	ldr	r2, [r7, #4]
 800af7e:	2380      	movs	r3, #128	; 0x80
 800af80:	05db      	lsls	r3, r3, #23
 800af82:	429a      	cmp	r2, r3
 800af84:	d013      	beq.n	800afae <TIM_Base_SetConfig+0x76>
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	4a25      	ldr	r2, [pc, #148]	; (800b020 <TIM_Base_SetConfig+0xe8>)
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d00f      	beq.n	800afae <TIM_Base_SetConfig+0x76>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	4a24      	ldr	r2, [pc, #144]	; (800b024 <TIM_Base_SetConfig+0xec>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d00b      	beq.n	800afae <TIM_Base_SetConfig+0x76>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	4a23      	ldr	r2, [pc, #140]	; (800b028 <TIM_Base_SetConfig+0xf0>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d007      	beq.n	800afae <TIM_Base_SetConfig+0x76>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	4a22      	ldr	r2, [pc, #136]	; (800b02c <TIM_Base_SetConfig+0xf4>)
 800afa2:	4293      	cmp	r3, r2
 800afa4:	d003      	beq.n	800afae <TIM_Base_SetConfig+0x76>
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	4a21      	ldr	r2, [pc, #132]	; (800b030 <TIM_Base_SetConfig+0xf8>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d108      	bne.n	800afc0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	4a20      	ldr	r2, [pc, #128]	; (800b034 <TIM_Base_SetConfig+0xfc>)
 800afb2:	4013      	ands	r3, r2
 800afb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	68db      	ldr	r3, [r3, #12]
 800afba:	68fa      	ldr	r2, [r7, #12]
 800afbc:	4313      	orrs	r3, r2
 800afbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	2280      	movs	r2, #128	; 0x80
 800afc4:	4393      	bics	r3, r2
 800afc6:	001a      	movs	r2, r3
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	695b      	ldr	r3, [r3, #20]
 800afcc:	4313      	orrs	r3, r2
 800afce:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	68fa      	ldr	r2, [r7, #12]
 800afd4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	689a      	ldr	r2, [r3, #8]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	681a      	ldr	r2, [r3, #0]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	4a0c      	ldr	r2, [pc, #48]	; (800b01c <TIM_Base_SetConfig+0xe4>)
 800afea:	4293      	cmp	r3, r2
 800afec:	d00b      	beq.n	800b006 <TIM_Base_SetConfig+0xce>
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	4a0d      	ldr	r2, [pc, #52]	; (800b028 <TIM_Base_SetConfig+0xf0>)
 800aff2:	4293      	cmp	r3, r2
 800aff4:	d007      	beq.n	800b006 <TIM_Base_SetConfig+0xce>
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	4a0c      	ldr	r2, [pc, #48]	; (800b02c <TIM_Base_SetConfig+0xf4>)
 800affa:	4293      	cmp	r3, r2
 800affc:	d003      	beq.n	800b006 <TIM_Base_SetConfig+0xce>
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	4a0b      	ldr	r2, [pc, #44]	; (800b030 <TIM_Base_SetConfig+0xf8>)
 800b002:	4293      	cmp	r3, r2
 800b004:	d103      	bne.n	800b00e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	691a      	ldr	r2, [r3, #16]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2201      	movs	r2, #1
 800b012:	615a      	str	r2, [r3, #20]
}
 800b014:	46c0      	nop			; (mov r8, r8)
 800b016:	46bd      	mov	sp, r7
 800b018:	b004      	add	sp, #16
 800b01a:	bd80      	pop	{r7, pc}
 800b01c:	40012c00 	.word	0x40012c00
 800b020:	40000400 	.word	0x40000400
 800b024:	40002000 	.word	0x40002000
 800b028:	40014000 	.word	0x40014000
 800b02c:	40014400 	.word	0x40014400
 800b030:	40014800 	.word	0x40014800
 800b034:	fffffcff 	.word	0xfffffcff

0800b038 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b086      	sub	sp, #24
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6a1b      	ldr	r3, [r3, #32]
 800b046:	2201      	movs	r2, #1
 800b048:	4393      	bics	r3, r2
 800b04a:	001a      	movs	r2, r3
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6a1b      	ldr	r3, [r3, #32]
 800b054:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	699b      	ldr	r3, [r3, #24]
 800b060:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	4a32      	ldr	r2, [pc, #200]	; (800b130 <TIM_OC1_SetConfig+0xf8>)
 800b066:	4013      	ands	r3, r2
 800b068:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	2203      	movs	r2, #3
 800b06e:	4393      	bics	r3, r2
 800b070:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	68fa      	ldr	r2, [r7, #12]
 800b078:	4313      	orrs	r3, r2
 800b07a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b07c:	697b      	ldr	r3, [r7, #20]
 800b07e:	2202      	movs	r2, #2
 800b080:	4393      	bics	r3, r2
 800b082:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	689b      	ldr	r3, [r3, #8]
 800b088:	697a      	ldr	r2, [r7, #20]
 800b08a:	4313      	orrs	r3, r2
 800b08c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	4a28      	ldr	r2, [pc, #160]	; (800b134 <TIM_OC1_SetConfig+0xfc>)
 800b092:	4293      	cmp	r3, r2
 800b094:	d00b      	beq.n	800b0ae <TIM_OC1_SetConfig+0x76>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	4a27      	ldr	r2, [pc, #156]	; (800b138 <TIM_OC1_SetConfig+0x100>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d007      	beq.n	800b0ae <TIM_OC1_SetConfig+0x76>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	4a26      	ldr	r2, [pc, #152]	; (800b13c <TIM_OC1_SetConfig+0x104>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d003      	beq.n	800b0ae <TIM_OC1_SetConfig+0x76>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	4a25      	ldr	r2, [pc, #148]	; (800b140 <TIM_OC1_SetConfig+0x108>)
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d10c      	bne.n	800b0c8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	2208      	movs	r2, #8
 800b0b2:	4393      	bics	r3, r2
 800b0b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	68db      	ldr	r3, [r3, #12]
 800b0ba:	697a      	ldr	r2, [r7, #20]
 800b0bc:	4313      	orrs	r3, r2
 800b0be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b0c0:	697b      	ldr	r3, [r7, #20]
 800b0c2:	2204      	movs	r2, #4
 800b0c4:	4393      	bics	r3, r2
 800b0c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	4a1a      	ldr	r2, [pc, #104]	; (800b134 <TIM_OC1_SetConfig+0xfc>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d00b      	beq.n	800b0e8 <TIM_OC1_SetConfig+0xb0>
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	4a19      	ldr	r2, [pc, #100]	; (800b138 <TIM_OC1_SetConfig+0x100>)
 800b0d4:	4293      	cmp	r3, r2
 800b0d6:	d007      	beq.n	800b0e8 <TIM_OC1_SetConfig+0xb0>
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	4a18      	ldr	r2, [pc, #96]	; (800b13c <TIM_OC1_SetConfig+0x104>)
 800b0dc:	4293      	cmp	r3, r2
 800b0de:	d003      	beq.n	800b0e8 <TIM_OC1_SetConfig+0xb0>
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	4a17      	ldr	r2, [pc, #92]	; (800b140 <TIM_OC1_SetConfig+0x108>)
 800b0e4:	4293      	cmp	r3, r2
 800b0e6:	d111      	bne.n	800b10c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	4a16      	ldr	r2, [pc, #88]	; (800b144 <TIM_OC1_SetConfig+0x10c>)
 800b0ec:	4013      	ands	r3, r2
 800b0ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	4a15      	ldr	r2, [pc, #84]	; (800b148 <TIM_OC1_SetConfig+0x110>)
 800b0f4:	4013      	ands	r3, r2
 800b0f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	695b      	ldr	r3, [r3, #20]
 800b0fc:	693a      	ldr	r2, [r7, #16]
 800b0fe:	4313      	orrs	r3, r2
 800b100:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	699b      	ldr	r3, [r3, #24]
 800b106:	693a      	ldr	r2, [r7, #16]
 800b108:	4313      	orrs	r3, r2
 800b10a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	693a      	ldr	r2, [r7, #16]
 800b110:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	68fa      	ldr	r2, [r7, #12]
 800b116:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	685a      	ldr	r2, [r3, #4]
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	697a      	ldr	r2, [r7, #20]
 800b124:	621a      	str	r2, [r3, #32]
}
 800b126:	46c0      	nop			; (mov r8, r8)
 800b128:	46bd      	mov	sp, r7
 800b12a:	b006      	add	sp, #24
 800b12c:	bd80      	pop	{r7, pc}
 800b12e:	46c0      	nop			; (mov r8, r8)
 800b130:	fffeff8f 	.word	0xfffeff8f
 800b134:	40012c00 	.word	0x40012c00
 800b138:	40014000 	.word	0x40014000
 800b13c:	40014400 	.word	0x40014400
 800b140:	40014800 	.word	0x40014800
 800b144:	fffffeff 	.word	0xfffffeff
 800b148:	fffffdff 	.word	0xfffffdff

0800b14c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b086      	sub	sp, #24
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6a1b      	ldr	r3, [r3, #32]
 800b15a:	2210      	movs	r2, #16
 800b15c:	4393      	bics	r3, r2
 800b15e:	001a      	movs	r2, r3
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6a1b      	ldr	r3, [r3, #32]
 800b168:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	699b      	ldr	r3, [r3, #24]
 800b174:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	4a2e      	ldr	r2, [pc, #184]	; (800b234 <TIM_OC2_SetConfig+0xe8>)
 800b17a:	4013      	ands	r3, r2
 800b17c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	4a2d      	ldr	r2, [pc, #180]	; (800b238 <TIM_OC2_SetConfig+0xec>)
 800b182:	4013      	ands	r3, r2
 800b184:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	021b      	lsls	r3, r3, #8
 800b18c:	68fa      	ldr	r2, [r7, #12]
 800b18e:	4313      	orrs	r3, r2
 800b190:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	2220      	movs	r2, #32
 800b196:	4393      	bics	r3, r2
 800b198:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	689b      	ldr	r3, [r3, #8]
 800b19e:	011b      	lsls	r3, r3, #4
 800b1a0:	697a      	ldr	r2, [r7, #20]
 800b1a2:	4313      	orrs	r3, r2
 800b1a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	4a24      	ldr	r2, [pc, #144]	; (800b23c <TIM_OC2_SetConfig+0xf0>)
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	d10d      	bne.n	800b1ca <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	2280      	movs	r2, #128	; 0x80
 800b1b2:	4393      	bics	r3, r2
 800b1b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	68db      	ldr	r3, [r3, #12]
 800b1ba:	011b      	lsls	r3, r3, #4
 800b1bc:	697a      	ldr	r2, [r7, #20]
 800b1be:	4313      	orrs	r3, r2
 800b1c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	2240      	movs	r2, #64	; 0x40
 800b1c6:	4393      	bics	r3, r2
 800b1c8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	4a1b      	ldr	r2, [pc, #108]	; (800b23c <TIM_OC2_SetConfig+0xf0>)
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	d00b      	beq.n	800b1ea <TIM_OC2_SetConfig+0x9e>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	4a1a      	ldr	r2, [pc, #104]	; (800b240 <TIM_OC2_SetConfig+0xf4>)
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	d007      	beq.n	800b1ea <TIM_OC2_SetConfig+0x9e>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	4a19      	ldr	r2, [pc, #100]	; (800b244 <TIM_OC2_SetConfig+0xf8>)
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	d003      	beq.n	800b1ea <TIM_OC2_SetConfig+0x9e>
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	4a18      	ldr	r2, [pc, #96]	; (800b248 <TIM_OC2_SetConfig+0xfc>)
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d113      	bne.n	800b212 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b1ea:	693b      	ldr	r3, [r7, #16]
 800b1ec:	4a17      	ldr	r2, [pc, #92]	; (800b24c <TIM_OC2_SetConfig+0x100>)
 800b1ee:	4013      	ands	r3, r2
 800b1f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	4a16      	ldr	r2, [pc, #88]	; (800b250 <TIM_OC2_SetConfig+0x104>)
 800b1f6:	4013      	ands	r3, r2
 800b1f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	695b      	ldr	r3, [r3, #20]
 800b1fe:	009b      	lsls	r3, r3, #2
 800b200:	693a      	ldr	r2, [r7, #16]
 800b202:	4313      	orrs	r3, r2
 800b204:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	699b      	ldr	r3, [r3, #24]
 800b20a:	009b      	lsls	r3, r3, #2
 800b20c:	693a      	ldr	r2, [r7, #16]
 800b20e:	4313      	orrs	r3, r2
 800b210:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	693a      	ldr	r2, [r7, #16]
 800b216:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	68fa      	ldr	r2, [r7, #12]
 800b21c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	685a      	ldr	r2, [r3, #4]
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	697a      	ldr	r2, [r7, #20]
 800b22a:	621a      	str	r2, [r3, #32]
}
 800b22c:	46c0      	nop			; (mov r8, r8)
 800b22e:	46bd      	mov	sp, r7
 800b230:	b006      	add	sp, #24
 800b232:	bd80      	pop	{r7, pc}
 800b234:	feff8fff 	.word	0xfeff8fff
 800b238:	fffffcff 	.word	0xfffffcff
 800b23c:	40012c00 	.word	0x40012c00
 800b240:	40014000 	.word	0x40014000
 800b244:	40014400 	.word	0x40014400
 800b248:	40014800 	.word	0x40014800
 800b24c:	fffffbff 	.word	0xfffffbff
 800b250:	fffff7ff 	.word	0xfffff7ff

0800b254 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b086      	sub	sp, #24
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
 800b25c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6a1b      	ldr	r3, [r3, #32]
 800b262:	4a35      	ldr	r2, [pc, #212]	; (800b338 <TIM_OC3_SetConfig+0xe4>)
 800b264:	401a      	ands	r2, r3
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6a1b      	ldr	r3, [r3, #32]
 800b26e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	685b      	ldr	r3, [r3, #4]
 800b274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	69db      	ldr	r3, [r3, #28]
 800b27a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	4a2f      	ldr	r2, [pc, #188]	; (800b33c <TIM_OC3_SetConfig+0xe8>)
 800b280:	4013      	ands	r3, r2
 800b282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	2203      	movs	r2, #3
 800b288:	4393      	bics	r3, r2
 800b28a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	68fa      	ldr	r2, [r7, #12]
 800b292:	4313      	orrs	r3, r2
 800b294:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	4a29      	ldr	r2, [pc, #164]	; (800b340 <TIM_OC3_SetConfig+0xec>)
 800b29a:	4013      	ands	r3, r2
 800b29c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	689b      	ldr	r3, [r3, #8]
 800b2a2:	021b      	lsls	r3, r3, #8
 800b2a4:	697a      	ldr	r2, [r7, #20]
 800b2a6:	4313      	orrs	r3, r2
 800b2a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	4a25      	ldr	r2, [pc, #148]	; (800b344 <TIM_OC3_SetConfig+0xf0>)
 800b2ae:	4293      	cmp	r3, r2
 800b2b0:	d10d      	bne.n	800b2ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	4a24      	ldr	r2, [pc, #144]	; (800b348 <TIM_OC3_SetConfig+0xf4>)
 800b2b6:	4013      	ands	r3, r2
 800b2b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	68db      	ldr	r3, [r3, #12]
 800b2be:	021b      	lsls	r3, r3, #8
 800b2c0:	697a      	ldr	r2, [r7, #20]
 800b2c2:	4313      	orrs	r3, r2
 800b2c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	4a20      	ldr	r2, [pc, #128]	; (800b34c <TIM_OC3_SetConfig+0xf8>)
 800b2ca:	4013      	ands	r3, r2
 800b2cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	4a1c      	ldr	r2, [pc, #112]	; (800b344 <TIM_OC3_SetConfig+0xf0>)
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d00b      	beq.n	800b2ee <TIM_OC3_SetConfig+0x9a>
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	4a1d      	ldr	r2, [pc, #116]	; (800b350 <TIM_OC3_SetConfig+0xfc>)
 800b2da:	4293      	cmp	r3, r2
 800b2dc:	d007      	beq.n	800b2ee <TIM_OC3_SetConfig+0x9a>
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	4a1c      	ldr	r2, [pc, #112]	; (800b354 <TIM_OC3_SetConfig+0x100>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d003      	beq.n	800b2ee <TIM_OC3_SetConfig+0x9a>
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	4a1b      	ldr	r2, [pc, #108]	; (800b358 <TIM_OC3_SetConfig+0x104>)
 800b2ea:	4293      	cmp	r3, r2
 800b2ec:	d113      	bne.n	800b316 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	4a1a      	ldr	r2, [pc, #104]	; (800b35c <TIM_OC3_SetConfig+0x108>)
 800b2f2:	4013      	ands	r3, r2
 800b2f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	4a19      	ldr	r2, [pc, #100]	; (800b360 <TIM_OC3_SetConfig+0x10c>)
 800b2fa:	4013      	ands	r3, r2
 800b2fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	695b      	ldr	r3, [r3, #20]
 800b302:	011b      	lsls	r3, r3, #4
 800b304:	693a      	ldr	r2, [r7, #16]
 800b306:	4313      	orrs	r3, r2
 800b308:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	699b      	ldr	r3, [r3, #24]
 800b30e:	011b      	lsls	r3, r3, #4
 800b310:	693a      	ldr	r2, [r7, #16]
 800b312:	4313      	orrs	r3, r2
 800b314:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	693a      	ldr	r2, [r7, #16]
 800b31a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	68fa      	ldr	r2, [r7, #12]
 800b320:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	685a      	ldr	r2, [r3, #4]
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	697a      	ldr	r2, [r7, #20]
 800b32e:	621a      	str	r2, [r3, #32]
}
 800b330:	46c0      	nop			; (mov r8, r8)
 800b332:	46bd      	mov	sp, r7
 800b334:	b006      	add	sp, #24
 800b336:	bd80      	pop	{r7, pc}
 800b338:	fffffeff 	.word	0xfffffeff
 800b33c:	fffeff8f 	.word	0xfffeff8f
 800b340:	fffffdff 	.word	0xfffffdff
 800b344:	40012c00 	.word	0x40012c00
 800b348:	fffff7ff 	.word	0xfffff7ff
 800b34c:	fffffbff 	.word	0xfffffbff
 800b350:	40014000 	.word	0x40014000
 800b354:	40014400 	.word	0x40014400
 800b358:	40014800 	.word	0x40014800
 800b35c:	ffffefff 	.word	0xffffefff
 800b360:	ffffdfff 	.word	0xffffdfff

0800b364 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b086      	sub	sp, #24
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6a1b      	ldr	r3, [r3, #32]
 800b372:	4a28      	ldr	r2, [pc, #160]	; (800b414 <TIM_OC4_SetConfig+0xb0>)
 800b374:	401a      	ands	r2, r3
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6a1b      	ldr	r3, [r3, #32]
 800b37e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	685b      	ldr	r3, [r3, #4]
 800b384:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	69db      	ldr	r3, [r3, #28]
 800b38a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	4a22      	ldr	r2, [pc, #136]	; (800b418 <TIM_OC4_SetConfig+0xb4>)
 800b390:	4013      	ands	r3, r2
 800b392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	4a21      	ldr	r2, [pc, #132]	; (800b41c <TIM_OC4_SetConfig+0xb8>)
 800b398:	4013      	ands	r3, r2
 800b39a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	021b      	lsls	r3, r3, #8
 800b3a2:	68fa      	ldr	r2, [r7, #12]
 800b3a4:	4313      	orrs	r3, r2
 800b3a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b3a8:	693b      	ldr	r3, [r7, #16]
 800b3aa:	4a1d      	ldr	r2, [pc, #116]	; (800b420 <TIM_OC4_SetConfig+0xbc>)
 800b3ac:	4013      	ands	r3, r2
 800b3ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	689b      	ldr	r3, [r3, #8]
 800b3b4:	031b      	lsls	r3, r3, #12
 800b3b6:	693a      	ldr	r2, [r7, #16]
 800b3b8:	4313      	orrs	r3, r2
 800b3ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	4a19      	ldr	r2, [pc, #100]	; (800b424 <TIM_OC4_SetConfig+0xc0>)
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	d00b      	beq.n	800b3dc <TIM_OC4_SetConfig+0x78>
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	4a18      	ldr	r2, [pc, #96]	; (800b428 <TIM_OC4_SetConfig+0xc4>)
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	d007      	beq.n	800b3dc <TIM_OC4_SetConfig+0x78>
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	4a17      	ldr	r2, [pc, #92]	; (800b42c <TIM_OC4_SetConfig+0xc8>)
 800b3d0:	4293      	cmp	r3, r2
 800b3d2:	d003      	beq.n	800b3dc <TIM_OC4_SetConfig+0x78>
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	4a16      	ldr	r2, [pc, #88]	; (800b430 <TIM_OC4_SetConfig+0xcc>)
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	d109      	bne.n	800b3f0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	4a15      	ldr	r2, [pc, #84]	; (800b434 <TIM_OC4_SetConfig+0xd0>)
 800b3e0:	4013      	ands	r3, r2
 800b3e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	695b      	ldr	r3, [r3, #20]
 800b3e8:	019b      	lsls	r3, r3, #6
 800b3ea:	697a      	ldr	r2, [r7, #20]
 800b3ec:	4313      	orrs	r3, r2
 800b3ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	697a      	ldr	r2, [r7, #20]
 800b3f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	68fa      	ldr	r2, [r7, #12]
 800b3fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	685a      	ldr	r2, [r3, #4]
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	693a      	ldr	r2, [r7, #16]
 800b408:	621a      	str	r2, [r3, #32]
}
 800b40a:	46c0      	nop			; (mov r8, r8)
 800b40c:	46bd      	mov	sp, r7
 800b40e:	b006      	add	sp, #24
 800b410:	bd80      	pop	{r7, pc}
 800b412:	46c0      	nop			; (mov r8, r8)
 800b414:	ffffefff 	.word	0xffffefff
 800b418:	feff8fff 	.word	0xfeff8fff
 800b41c:	fffffcff 	.word	0xfffffcff
 800b420:	ffffdfff 	.word	0xffffdfff
 800b424:	40012c00 	.word	0x40012c00
 800b428:	40014000 	.word	0x40014000
 800b42c:	40014400 	.word	0x40014400
 800b430:	40014800 	.word	0x40014800
 800b434:	ffffbfff 	.word	0xffffbfff

0800b438 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b086      	sub	sp, #24
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
 800b440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6a1b      	ldr	r3, [r3, #32]
 800b446:	4a25      	ldr	r2, [pc, #148]	; (800b4dc <TIM_OC5_SetConfig+0xa4>)
 800b448:	401a      	ands	r2, r3
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6a1b      	ldr	r3, [r3, #32]
 800b452:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	685b      	ldr	r3, [r3, #4]
 800b458:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b45e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	4a1f      	ldr	r2, [pc, #124]	; (800b4e0 <TIM_OC5_SetConfig+0xa8>)
 800b464:	4013      	ands	r3, r2
 800b466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	68fa      	ldr	r2, [r7, #12]
 800b46e:	4313      	orrs	r3, r2
 800b470:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	4a1b      	ldr	r2, [pc, #108]	; (800b4e4 <TIM_OC5_SetConfig+0xac>)
 800b476:	4013      	ands	r3, r2
 800b478:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	689b      	ldr	r3, [r3, #8]
 800b47e:	041b      	lsls	r3, r3, #16
 800b480:	693a      	ldr	r2, [r7, #16]
 800b482:	4313      	orrs	r3, r2
 800b484:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	4a17      	ldr	r2, [pc, #92]	; (800b4e8 <TIM_OC5_SetConfig+0xb0>)
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d00b      	beq.n	800b4a6 <TIM_OC5_SetConfig+0x6e>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	4a16      	ldr	r2, [pc, #88]	; (800b4ec <TIM_OC5_SetConfig+0xb4>)
 800b492:	4293      	cmp	r3, r2
 800b494:	d007      	beq.n	800b4a6 <TIM_OC5_SetConfig+0x6e>
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	4a15      	ldr	r2, [pc, #84]	; (800b4f0 <TIM_OC5_SetConfig+0xb8>)
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d003      	beq.n	800b4a6 <TIM_OC5_SetConfig+0x6e>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	4a14      	ldr	r2, [pc, #80]	; (800b4f4 <TIM_OC5_SetConfig+0xbc>)
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	d109      	bne.n	800b4ba <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	4a0c      	ldr	r2, [pc, #48]	; (800b4dc <TIM_OC5_SetConfig+0xa4>)
 800b4aa:	4013      	ands	r3, r2
 800b4ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	695b      	ldr	r3, [r3, #20]
 800b4b2:	021b      	lsls	r3, r3, #8
 800b4b4:	697a      	ldr	r2, [r7, #20]
 800b4b6:	4313      	orrs	r3, r2
 800b4b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	697a      	ldr	r2, [r7, #20]
 800b4be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	68fa      	ldr	r2, [r7, #12]
 800b4c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	685a      	ldr	r2, [r3, #4]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	693a      	ldr	r2, [r7, #16]
 800b4d2:	621a      	str	r2, [r3, #32]
}
 800b4d4:	46c0      	nop			; (mov r8, r8)
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	b006      	add	sp, #24
 800b4da:	bd80      	pop	{r7, pc}
 800b4dc:	fffeffff 	.word	0xfffeffff
 800b4e0:	fffeff8f 	.word	0xfffeff8f
 800b4e4:	fffdffff 	.word	0xfffdffff
 800b4e8:	40012c00 	.word	0x40012c00
 800b4ec:	40014000 	.word	0x40014000
 800b4f0:	40014400 	.word	0x40014400
 800b4f4:	40014800 	.word	0x40014800

0800b4f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b086      	sub	sp, #24
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
 800b500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6a1b      	ldr	r3, [r3, #32]
 800b506:	4a26      	ldr	r2, [pc, #152]	; (800b5a0 <TIM_OC6_SetConfig+0xa8>)
 800b508:	401a      	ands	r2, r3
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6a1b      	ldr	r3, [r3, #32]
 800b512:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	685b      	ldr	r3, [r3, #4]
 800b518:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b51e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	4a20      	ldr	r2, [pc, #128]	; (800b5a4 <TIM_OC6_SetConfig+0xac>)
 800b524:	4013      	ands	r3, r2
 800b526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	021b      	lsls	r3, r3, #8
 800b52e:	68fa      	ldr	r2, [r7, #12]
 800b530:	4313      	orrs	r3, r2
 800b532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b534:	693b      	ldr	r3, [r7, #16]
 800b536:	4a1c      	ldr	r2, [pc, #112]	; (800b5a8 <TIM_OC6_SetConfig+0xb0>)
 800b538:	4013      	ands	r3, r2
 800b53a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	689b      	ldr	r3, [r3, #8]
 800b540:	051b      	lsls	r3, r3, #20
 800b542:	693a      	ldr	r2, [r7, #16]
 800b544:	4313      	orrs	r3, r2
 800b546:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	4a18      	ldr	r2, [pc, #96]	; (800b5ac <TIM_OC6_SetConfig+0xb4>)
 800b54c:	4293      	cmp	r3, r2
 800b54e:	d00b      	beq.n	800b568 <TIM_OC6_SetConfig+0x70>
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	4a17      	ldr	r2, [pc, #92]	; (800b5b0 <TIM_OC6_SetConfig+0xb8>)
 800b554:	4293      	cmp	r3, r2
 800b556:	d007      	beq.n	800b568 <TIM_OC6_SetConfig+0x70>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	4a16      	ldr	r2, [pc, #88]	; (800b5b4 <TIM_OC6_SetConfig+0xbc>)
 800b55c:	4293      	cmp	r3, r2
 800b55e:	d003      	beq.n	800b568 <TIM_OC6_SetConfig+0x70>
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	4a15      	ldr	r2, [pc, #84]	; (800b5b8 <TIM_OC6_SetConfig+0xc0>)
 800b564:	4293      	cmp	r3, r2
 800b566:	d109      	bne.n	800b57c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b568:	697b      	ldr	r3, [r7, #20]
 800b56a:	4a14      	ldr	r2, [pc, #80]	; (800b5bc <TIM_OC6_SetConfig+0xc4>)
 800b56c:	4013      	ands	r3, r2
 800b56e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	695b      	ldr	r3, [r3, #20]
 800b574:	029b      	lsls	r3, r3, #10
 800b576:	697a      	ldr	r2, [r7, #20]
 800b578:	4313      	orrs	r3, r2
 800b57a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	697a      	ldr	r2, [r7, #20]
 800b580:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	68fa      	ldr	r2, [r7, #12]
 800b586:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	685a      	ldr	r2, [r3, #4]
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	693a      	ldr	r2, [r7, #16]
 800b594:	621a      	str	r2, [r3, #32]
}
 800b596:	46c0      	nop			; (mov r8, r8)
 800b598:	46bd      	mov	sp, r7
 800b59a:	b006      	add	sp, #24
 800b59c:	bd80      	pop	{r7, pc}
 800b59e:	46c0      	nop			; (mov r8, r8)
 800b5a0:	ffefffff 	.word	0xffefffff
 800b5a4:	feff8fff 	.word	0xfeff8fff
 800b5a8:	ffdfffff 	.word	0xffdfffff
 800b5ac:	40012c00 	.word	0x40012c00
 800b5b0:	40014000 	.word	0x40014000
 800b5b4:	40014400 	.word	0x40014400
 800b5b8:	40014800 	.word	0x40014800
 800b5bc:	fffbffff 	.word	0xfffbffff

0800b5c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b086      	sub	sp, #24
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	60f8      	str	r0, [r7, #12]
 800b5c8:	60b9      	str	r1, [r7, #8]
 800b5ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	6a1b      	ldr	r3, [r3, #32]
 800b5d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	6a1b      	ldr	r3, [r3, #32]
 800b5d6:	2201      	movs	r2, #1
 800b5d8:	4393      	bics	r3, r2
 800b5da:	001a      	movs	r2, r3
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	699b      	ldr	r3, [r3, #24]
 800b5e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	22f0      	movs	r2, #240	; 0xf0
 800b5ea:	4393      	bics	r3, r2
 800b5ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	011b      	lsls	r3, r3, #4
 800b5f2:	693a      	ldr	r2, [r7, #16]
 800b5f4:	4313      	orrs	r3, r2
 800b5f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	220a      	movs	r2, #10
 800b5fc:	4393      	bics	r3, r2
 800b5fe:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b600:	697a      	ldr	r2, [r7, #20]
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	4313      	orrs	r3, r2
 800b606:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	693a      	ldr	r2, [r7, #16]
 800b60c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	697a      	ldr	r2, [r7, #20]
 800b612:	621a      	str	r2, [r3, #32]
}
 800b614:	46c0      	nop			; (mov r8, r8)
 800b616:	46bd      	mov	sp, r7
 800b618:	b006      	add	sp, #24
 800b61a:	bd80      	pop	{r7, pc}

0800b61c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b086      	sub	sp, #24
 800b620:	af00      	add	r7, sp, #0
 800b622:	60f8      	str	r0, [r7, #12]
 800b624:	60b9      	str	r1, [r7, #8]
 800b626:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	6a1b      	ldr	r3, [r3, #32]
 800b62c:	2210      	movs	r2, #16
 800b62e:	4393      	bics	r3, r2
 800b630:	001a      	movs	r2, r3
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	699b      	ldr	r3, [r3, #24]
 800b63a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	6a1b      	ldr	r3, [r3, #32]
 800b640:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	4a0d      	ldr	r2, [pc, #52]	; (800b67c <TIM_TI2_ConfigInputStage+0x60>)
 800b646:	4013      	ands	r3, r2
 800b648:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	031b      	lsls	r3, r3, #12
 800b64e:	697a      	ldr	r2, [r7, #20]
 800b650:	4313      	orrs	r3, r2
 800b652:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b654:	693b      	ldr	r3, [r7, #16]
 800b656:	22a0      	movs	r2, #160	; 0xa0
 800b658:	4393      	bics	r3, r2
 800b65a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	011b      	lsls	r3, r3, #4
 800b660:	693a      	ldr	r2, [r7, #16]
 800b662:	4313      	orrs	r3, r2
 800b664:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	697a      	ldr	r2, [r7, #20]
 800b66a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	693a      	ldr	r2, [r7, #16]
 800b670:	621a      	str	r2, [r3, #32]
}
 800b672:	46c0      	nop			; (mov r8, r8)
 800b674:	46bd      	mov	sp, r7
 800b676:	b006      	add	sp, #24
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	46c0      	nop			; (mov r8, r8)
 800b67c:	ffff0fff 	.word	0xffff0fff

0800b680 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b084      	sub	sp, #16
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
 800b688:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	689b      	ldr	r3, [r3, #8]
 800b68e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	4a08      	ldr	r2, [pc, #32]	; (800b6b4 <TIM_ITRx_SetConfig+0x34>)
 800b694:	4013      	ands	r3, r2
 800b696:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b698:	683a      	ldr	r2, [r7, #0]
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	4313      	orrs	r3, r2
 800b69e:	2207      	movs	r2, #7
 800b6a0:	4313      	orrs	r3, r2
 800b6a2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	68fa      	ldr	r2, [r7, #12]
 800b6a8:	609a      	str	r2, [r3, #8]
}
 800b6aa:	46c0      	nop			; (mov r8, r8)
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	b004      	add	sp, #16
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	46c0      	nop			; (mov r8, r8)
 800b6b4:	ffcfff8f 	.word	0xffcfff8f

0800b6b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b086      	sub	sp, #24
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	60f8      	str	r0, [r7, #12]
 800b6c0:	60b9      	str	r1, [r7, #8]
 800b6c2:	607a      	str	r2, [r7, #4]
 800b6c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	689b      	ldr	r3, [r3, #8]
 800b6ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	4a09      	ldr	r2, [pc, #36]	; (800b6f4 <TIM_ETR_SetConfig+0x3c>)
 800b6d0:	4013      	ands	r3, r2
 800b6d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	021a      	lsls	r2, r3, #8
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	431a      	orrs	r2, r3
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	4313      	orrs	r3, r2
 800b6e0:	697a      	ldr	r2, [r7, #20]
 800b6e2:	4313      	orrs	r3, r2
 800b6e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	697a      	ldr	r2, [r7, #20]
 800b6ea:	609a      	str	r2, [r3, #8]
}
 800b6ec:	46c0      	nop			; (mov r8, r8)
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	b006      	add	sp, #24
 800b6f2:	bd80      	pop	{r7, pc}
 800b6f4:	ffff00ff 	.word	0xffff00ff

0800b6f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b086      	sub	sp, #24
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	60f8      	str	r0, [r7, #12]
 800b700:	60b9      	str	r1, [r7, #8]
 800b702:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	221f      	movs	r2, #31
 800b708:	4013      	ands	r3, r2
 800b70a:	2201      	movs	r2, #1
 800b70c:	409a      	lsls	r2, r3
 800b70e:	0013      	movs	r3, r2
 800b710:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	6a1b      	ldr	r3, [r3, #32]
 800b716:	697a      	ldr	r2, [r7, #20]
 800b718:	43d2      	mvns	r2, r2
 800b71a:	401a      	ands	r2, r3
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	6a1a      	ldr	r2, [r3, #32]
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	211f      	movs	r1, #31
 800b728:	400b      	ands	r3, r1
 800b72a:	6879      	ldr	r1, [r7, #4]
 800b72c:	4099      	lsls	r1, r3
 800b72e:	000b      	movs	r3, r1
 800b730:	431a      	orrs	r2, r3
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	621a      	str	r2, [r3, #32]
}
 800b736:	46c0      	nop			; (mov r8, r8)
 800b738:	46bd      	mov	sp, r7
 800b73a:	b006      	add	sp, #24
 800b73c:	bd80      	pop	{r7, pc}
	...

0800b740 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b084      	sub	sp, #16
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
 800b748:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	223c      	movs	r2, #60	; 0x3c
 800b74e:	5c9b      	ldrb	r3, [r3, r2]
 800b750:	2b01      	cmp	r3, #1
 800b752:	d101      	bne.n	800b758 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b754:	2302      	movs	r3, #2
 800b756:	e055      	b.n	800b804 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	223c      	movs	r2, #60	; 0x3c
 800b75c:	2101      	movs	r1, #1
 800b75e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	223d      	movs	r2, #61	; 0x3d
 800b764:	2102      	movs	r1, #2
 800b766:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	685b      	ldr	r3, [r3, #4]
 800b76e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	689b      	ldr	r3, [r3, #8]
 800b776:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	4a23      	ldr	r2, [pc, #140]	; (800b80c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b77e:	4293      	cmp	r3, r2
 800b780:	d108      	bne.n	800b794 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	4a22      	ldr	r2, [pc, #136]	; (800b810 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b786:	4013      	ands	r3, r2
 800b788:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	685b      	ldr	r3, [r3, #4]
 800b78e:	68fa      	ldr	r2, [r7, #12]
 800b790:	4313      	orrs	r3, r2
 800b792:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	2270      	movs	r2, #112	; 0x70
 800b798:	4393      	bics	r3, r2
 800b79a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	68fa      	ldr	r2, [r7, #12]
 800b7a2:	4313      	orrs	r3, r2
 800b7a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	68fa      	ldr	r2, [r7, #12]
 800b7ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	4a16      	ldr	r2, [pc, #88]	; (800b80c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b7b4:	4293      	cmp	r3, r2
 800b7b6:	d00f      	beq.n	800b7d8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681a      	ldr	r2, [r3, #0]
 800b7bc:	2380      	movs	r3, #128	; 0x80
 800b7be:	05db      	lsls	r3, r3, #23
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	d009      	beq.n	800b7d8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	4a12      	ldr	r2, [pc, #72]	; (800b814 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	d004      	beq.n	800b7d8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	4a11      	ldr	r2, [pc, #68]	; (800b818 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b7d4:	4293      	cmp	r3, r2
 800b7d6:	d10c      	bne.n	800b7f2 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	2280      	movs	r2, #128	; 0x80
 800b7dc:	4393      	bics	r3, r2
 800b7de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	689b      	ldr	r3, [r3, #8]
 800b7e4:	68ba      	ldr	r2, [r7, #8]
 800b7e6:	4313      	orrs	r3, r2
 800b7e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	68ba      	ldr	r2, [r7, #8]
 800b7f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	223d      	movs	r2, #61	; 0x3d
 800b7f6:	2101      	movs	r1, #1
 800b7f8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	223c      	movs	r2, #60	; 0x3c
 800b7fe:	2100      	movs	r1, #0
 800b800:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b802:	2300      	movs	r3, #0
}
 800b804:	0018      	movs	r0, r3
 800b806:	46bd      	mov	sp, r7
 800b808:	b004      	add	sp, #16
 800b80a:	bd80      	pop	{r7, pc}
 800b80c:	40012c00 	.word	0x40012c00
 800b810:	ff0fffff 	.word	0xff0fffff
 800b814:	40000400 	.word	0x40000400
 800b818:	40014000 	.word	0x40014000

0800b81c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b084      	sub	sp, #16
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
 800b824:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b826:	2300      	movs	r3, #0
 800b828:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	223c      	movs	r2, #60	; 0x3c
 800b82e:	5c9b      	ldrb	r3, [r3, r2]
 800b830:	2b01      	cmp	r3, #1
 800b832:	d101      	bne.n	800b838 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b834:	2302      	movs	r3, #2
 800b836:	e079      	b.n	800b92c <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	223c      	movs	r2, #60	; 0x3c
 800b83c:	2101      	movs	r1, #1
 800b83e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	22ff      	movs	r2, #255	; 0xff
 800b844:	4393      	bics	r3, r2
 800b846:	001a      	movs	r2, r3
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	68db      	ldr	r3, [r3, #12]
 800b84c:	4313      	orrs	r3, r2
 800b84e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	4a38      	ldr	r2, [pc, #224]	; (800b934 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800b854:	401a      	ands	r2, r3
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	689b      	ldr	r3, [r3, #8]
 800b85a:	4313      	orrs	r3, r2
 800b85c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	4a35      	ldr	r2, [pc, #212]	; (800b938 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b862:	401a      	ands	r2, r3
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	685b      	ldr	r3, [r3, #4]
 800b868:	4313      	orrs	r3, r2
 800b86a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	4a33      	ldr	r2, [pc, #204]	; (800b93c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800b870:	401a      	ands	r2, r3
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	4313      	orrs	r3, r2
 800b878:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	4a30      	ldr	r2, [pc, #192]	; (800b940 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b87e:	401a      	ands	r2, r3
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	691b      	ldr	r3, [r3, #16]
 800b884:	4313      	orrs	r3, r2
 800b886:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	4a2e      	ldr	r2, [pc, #184]	; (800b944 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800b88c:	401a      	ands	r2, r3
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	695b      	ldr	r3, [r3, #20]
 800b892:	4313      	orrs	r3, r2
 800b894:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	4a2b      	ldr	r2, [pc, #172]	; (800b948 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800b89a:	401a      	ands	r2, r3
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8a0:	4313      	orrs	r3, r2
 800b8a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	4a29      	ldr	r2, [pc, #164]	; (800b94c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800b8a8:	401a      	ands	r2, r3
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	699b      	ldr	r3, [r3, #24]
 800b8ae:	041b      	lsls	r3, r3, #16
 800b8b0:	4313      	orrs	r3, r2
 800b8b2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	4a25      	ldr	r2, [pc, #148]	; (800b950 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800b8ba:	4293      	cmp	r3, r2
 800b8bc:	d106      	bne.n	800b8cc <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	4a24      	ldr	r2, [pc, #144]	; (800b954 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b8c2:	401a      	ands	r2, r3
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	69db      	ldr	r3, [r3, #28]
 800b8c8:	4313      	orrs	r3, r2
 800b8ca:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	4a1f      	ldr	r2, [pc, #124]	; (800b950 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800b8d2:	4293      	cmp	r3, r2
 800b8d4:	d121      	bne.n	800b91a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	4a1f      	ldr	r2, [pc, #124]	; (800b958 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b8da:	401a      	ands	r2, r3
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8e0:	051b      	lsls	r3, r3, #20
 800b8e2:	4313      	orrs	r3, r2
 800b8e4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	4a1c      	ldr	r2, [pc, #112]	; (800b95c <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800b8ea:	401a      	ands	r2, r3
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	6a1b      	ldr	r3, [r3, #32]
 800b8f0:	4313      	orrs	r3, r2
 800b8f2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	4a1a      	ldr	r2, [pc, #104]	; (800b960 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 800b8f8:	401a      	ands	r2, r3
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8fe:	4313      	orrs	r3, r2
 800b900:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	4a12      	ldr	r2, [pc, #72]	; (800b950 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800b908:	4293      	cmp	r3, r2
 800b90a:	d106      	bne.n	800b91a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	4a15      	ldr	r2, [pc, #84]	; (800b964 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 800b910:	401a      	ands	r2, r3
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b916:	4313      	orrs	r3, r2
 800b918:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	68fa      	ldr	r2, [r7, #12]
 800b920:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	223c      	movs	r2, #60	; 0x3c
 800b926:	2100      	movs	r1, #0
 800b928:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b92a:	2300      	movs	r3, #0
}
 800b92c:	0018      	movs	r0, r3
 800b92e:	46bd      	mov	sp, r7
 800b930:	b004      	add	sp, #16
 800b932:	bd80      	pop	{r7, pc}
 800b934:	fffffcff 	.word	0xfffffcff
 800b938:	fffffbff 	.word	0xfffffbff
 800b93c:	fffff7ff 	.word	0xfffff7ff
 800b940:	ffffefff 	.word	0xffffefff
 800b944:	ffffdfff 	.word	0xffffdfff
 800b948:	ffffbfff 	.word	0xffffbfff
 800b94c:	fff0ffff 	.word	0xfff0ffff
 800b950:	40012c00 	.word	0x40012c00
 800b954:	efffffff 	.word	0xefffffff
 800b958:	ff0fffff 	.word	0xff0fffff
 800b95c:	feffffff 	.word	0xfeffffff
 800b960:	fdffffff 	.word	0xfdffffff
 800b964:	dfffffff 	.word	0xdfffffff

0800b968 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b08a      	sub	sp, #40	; 0x28
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	60f8      	str	r0, [r7, #12]
 800b970:	60b9      	str	r1, [r7, #8]
 800b972:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	223c      	movs	r2, #60	; 0x3c
 800b978:	5c9b      	ldrb	r3, [r3, r2]
 800b97a:	2b01      	cmp	r3, #1
 800b97c:	d101      	bne.n	800b982 <HAL_TIMEx_ConfigBreakInput+0x1a>
 800b97e:	2302      	movs	r3, #2
 800b980:	e08e      	b.n	800baa0 <HAL_TIMEx_ConfigBreakInput+0x138>
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	223c      	movs	r2, #60	; 0x3c
 800b986:	2101      	movs	r1, #1
 800b988:	5499      	strb	r1, [r3, r2]

  switch (sBreakInputConfig->Source)
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	2b04      	cmp	r3, #4
 800b990:	d019      	beq.n	800b9c6 <HAL_TIMEx_ConfigBreakInput+0x5e>
 800b992:	d822      	bhi.n	800b9da <HAL_TIMEx_ConfigBreakInput+0x72>
 800b994:	2b01      	cmp	r3, #1
 800b996:	d002      	beq.n	800b99e <HAL_TIMEx_ConfigBreakInput+0x36>
 800b998:	2b02      	cmp	r3, #2
 800b99a:	d00a      	beq.n	800b9b2 <HAL_TIMEx_ConfigBreakInput+0x4a>
 800b99c:	e01d      	b.n	800b9da <HAL_TIMEx_ConfigBreakInput+0x72>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 800b99e:	2301      	movs	r3, #1
 800b9a0:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 800b9a6:	2380      	movs	r3, #128	; 0x80
 800b9a8:	009b      	lsls	r3, r3, #2
 800b9aa:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 800b9ac:	2309      	movs	r3, #9
 800b9ae:	61bb      	str	r3, [r7, #24]
      break;
 800b9b0:	e01c      	b.n	800b9ec <HAL_TIMEx_ConfigBreakInput+0x84>
    }
#if defined(COMP1) && defined(COMP2)
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 800b9b2:	2302      	movs	r3, #2
 800b9b4:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 800b9ba:	2380      	movs	r3, #128	; 0x80
 800b9bc:	00db      	lsls	r3, r3, #3
 800b9be:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 800b9c0:	230a      	movs	r3, #10
 800b9c2:	61bb      	str	r3, [r7, #24]
      break;
 800b9c4:	e012      	b.n	800b9ec <HAL_TIMEx_ConfigBreakInput+0x84>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 800b9c6:	2304      	movs	r3, #4
 800b9c8:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 800b9ca:	2302      	movs	r3, #2
 800b9cc:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 800b9ce:	2380      	movs	r3, #128	; 0x80
 800b9d0:	011b      	lsls	r3, r3, #4
 800b9d2:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 800b9d4:	230b      	movs	r3, #11
 800b9d6:	61bb      	str	r3, [r7, #24]
      break;
 800b9d8:	e008      	b.n	800b9ec <HAL_TIMEx_ConfigBreakInput+0x84>
    }
#endif /* COMP3 */

    default:
    {
      bkin_enable_mask = 0U;
 800b9da:	2300      	movs	r3, #0
 800b9dc:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_polarity_mask = 0U;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = 0U;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	61bb      	str	r3, [r7, #24]
      break;
 800b9ea:	46c0      	nop			; (mov r8, r8)
    }
  }

  switch (BreakInput)
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	2b01      	cmp	r3, #1
 800b9f0:	d003      	beq.n	800b9fa <HAL_TIMEx_ConfigBreakInput+0x92>
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	2b02      	cmp	r3, #2
 800b9f6:	d027      	beq.n	800ba48 <HAL_TIMEx_ConfigBreakInput+0xe0>
      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
      break;
    }
    default:
      break;
 800b9f8:	e04d      	b.n	800ba96 <HAL_TIMEx_ConfigBreakInput+0x12e>
      tmporx = htim->Instance->AF1;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba00:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 800ba02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba04:	43da      	mvns	r2, r3
 800ba06:	697b      	ldr	r3, [r7, #20]
 800ba08:	4013      	ands	r3, r2
 800ba0a:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	685a      	ldr	r2, [r3, #4]
 800ba10:	69fb      	ldr	r3, [r7, #28]
 800ba12:	409a      	lsls	r2, r3
 800ba14:	0013      	movs	r3, r2
 800ba16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba18:	4013      	ands	r3, r2
 800ba1a:	697a      	ldr	r2, [r7, #20]
 800ba1c:	4313      	orrs	r3, r2
 800ba1e:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 800ba20:	6a3b      	ldr	r3, [r7, #32]
 800ba22:	43da      	mvns	r2, r3
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	4013      	ands	r3, r2
 800ba28:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	689a      	ldr	r2, [r3, #8]
 800ba2e:	69bb      	ldr	r3, [r7, #24]
 800ba30:	409a      	lsls	r2, r3
 800ba32:	0013      	movs	r3, r2
 800ba34:	6a3a      	ldr	r2, [r7, #32]
 800ba36:	4013      	ands	r3, r2
 800ba38:	697a      	ldr	r2, [r7, #20]
 800ba3a:	4313      	orrs	r3, r2
 800ba3c:	617b      	str	r3, [r7, #20]
      htim->Instance->AF1 = tmporx;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	697a      	ldr	r2, [r7, #20]
 800ba44:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 800ba46:	e026      	b.n	800ba96 <HAL_TIMEx_ConfigBreakInput+0x12e>
      tmporx = htim->Instance->AF2;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba4e:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 800ba50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba52:	43da      	mvns	r2, r3
 800ba54:	697b      	ldr	r3, [r7, #20]
 800ba56:	4013      	ands	r3, r2
 800ba58:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	685a      	ldr	r2, [r3, #4]
 800ba5e:	69fb      	ldr	r3, [r7, #28]
 800ba60:	409a      	lsls	r2, r3
 800ba62:	0013      	movs	r3, r2
 800ba64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba66:	4013      	ands	r3, r2
 800ba68:	697a      	ldr	r2, [r7, #20]
 800ba6a:	4313      	orrs	r3, r2
 800ba6c:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 800ba6e:	6a3b      	ldr	r3, [r7, #32]
 800ba70:	43da      	mvns	r2, r3
 800ba72:	697b      	ldr	r3, [r7, #20]
 800ba74:	4013      	ands	r3, r2
 800ba76:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	689a      	ldr	r2, [r3, #8]
 800ba7c:	69bb      	ldr	r3, [r7, #24]
 800ba7e:	409a      	lsls	r2, r3
 800ba80:	0013      	movs	r3, r2
 800ba82:	6a3a      	ldr	r2, [r7, #32]
 800ba84:	4013      	ands	r3, r2
 800ba86:	697a      	ldr	r2, [r7, #20]
 800ba88:	4313      	orrs	r3, r2
 800ba8a:	617b      	str	r3, [r7, #20]
      htim->Instance->AF2 = tmporx;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	697a      	ldr	r2, [r7, #20]
 800ba92:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800ba94:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	223c      	movs	r2, #60	; 0x3c
 800ba9a:	2100      	movs	r1, #0
 800ba9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ba9e:	2300      	movs	r3, #0
}
 800baa0:	0018      	movs	r0, r3
 800baa2:	46bd      	mov	sp, r7
 800baa4:	b00a      	add	sp, #40	; 0x28
 800baa6:	bd80      	pop	{r7, pc}

0800baa8 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b082      	sub	sp, #8
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d101      	bne.n	800baba <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800bab6:	2301      	movs	r3, #1
 800bab8:	e03f      	b.n	800bb3a <HAL_USART_Init+0x92>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2259      	movs	r2, #89	; 0x59
 800babe:	5c9b      	ldrb	r3, [r3, r2]
 800bac0:	b2db      	uxtb	r3, r3
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d107      	bne.n	800bad6 <HAL_USART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2258      	movs	r2, #88	; 0x58
 800baca:	2100      	movs	r1, #0
 800bacc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	0018      	movs	r0, r3
 800bad2:	f7f9 fa05 	bl	8004ee0 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2259      	movs	r2, #89	; 0x59
 800bada:	2102      	movs	r1, #2
 800badc:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	681a      	ldr	r2, [r3, #0]
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	2101      	movs	r1, #1
 800baea:	438a      	bics	r2, r1
 800baec:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	0018      	movs	r0, r3
 800baf2:	f000 fbdb 	bl	800c2ac <USART_SetConfig>
 800baf6:	0003      	movs	r3, r0
 800baf8:	2b01      	cmp	r3, #1
 800bafa:	d101      	bne.n	800bb00 <HAL_USART_Init+0x58>
  {
    return HAL_ERROR;
 800bafc:	2301      	movs	r3, #1
 800bafe:	e01c      	b.n	800bb3a <HAL_USART_Init+0x92>
  }

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	685a      	ldr	r2, [r3, #4]
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	490e      	ldr	r1, [pc, #56]	; (800bb44 <HAL_USART_Init+0x9c>)
 800bb0c:	400a      	ands	r2, r1
 800bb0e:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	689a      	ldr	r2, [r3, #8]
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	212a      	movs	r1, #42	; 0x2a
 800bb1c:	438a      	bics	r2, r1
 800bb1e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	681a      	ldr	r2, [r3, #0]
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	2101      	movs	r1, #1
 800bb2c:	430a      	orrs	r2, r1
 800bb2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	0018      	movs	r0, r3
 800bb34:	f000 fe56 	bl	800c7e4 <USART_CheckIdleState>
 800bb38:	0003      	movs	r3, r0
}
 800bb3a:	0018      	movs	r0, r3
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	b002      	add	sp, #8
 800bb40:	bd80      	pop	{r7, pc}
 800bb42:	46c0      	nop			; (mov r8, r8)
 800bb44:	ffffbfff 	.word	0xffffbfff

0800bb48 <HAL_USART_Transmit>:
  * @param  Size Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b08a      	sub	sp, #40	; 0x28
 800bb4c:	af02      	add	r7, sp, #8
 800bb4e:	60f8      	str	r0, [r7, #12]
 800bb50:	60b9      	str	r1, [r7, #8]
 800bb52:	603b      	str	r3, [r7, #0]
 800bb54:	1dbb      	adds	r3, r7, #6
 800bb56:	801a      	strh	r2, [r3, #0]
  uint8_t  *ptxdata8bits;
  uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	2259      	movs	r2, #89	; 0x59
 800bb5c:	5c9b      	ldrb	r3, [r3, r2]
 800bb5e:	b2db      	uxtb	r3, r3
 800bb60:	2b01      	cmp	r3, #1
 800bb62:	d000      	beq.n	800bb66 <HAL_USART_Transmit+0x1e>
 800bb64:	e0a9      	b.n	800bcba <HAL_USART_Transmit+0x172>
  {
    if ((pTxData == NULL) || (Size == 0U))
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d003      	beq.n	800bb74 <HAL_USART_Transmit+0x2c>
 800bb6c:	1dbb      	adds	r3, r7, #6
 800bb6e:	881b      	ldrh	r3, [r3, #0]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d101      	bne.n	800bb78 <HAL_USART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800bb74:	2301      	movs	r3, #1
 800bb76:	e0a1      	b.n	800bcbc <HAL_USART_Transmit+0x174>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	689a      	ldr	r2, [r3, #8]
 800bb7c:	2380      	movs	r3, #128	; 0x80
 800bb7e:	015b      	lsls	r3, r3, #5
 800bb80:	429a      	cmp	r2, r3
 800bb82:	d109      	bne.n	800bb98 <HAL_USART_Transmit+0x50>
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	691b      	ldr	r3, [r3, #16]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d105      	bne.n	800bb98 <HAL_USART_Transmit+0x50>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	2201      	movs	r2, #1
 800bb90:	4013      	ands	r3, r2
 800bb92:	d001      	beq.n	800bb98 <HAL_USART_Transmit+0x50>
      {
        return  HAL_ERROR;
 800bb94:	2301      	movs	r3, #1
 800bb96:	e091      	b.n	800bcbc <HAL_USART_Transmit+0x174>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	2258      	movs	r2, #88	; 0x58
 800bb9c:	5c9b      	ldrb	r3, [r3, r2]
 800bb9e:	2b01      	cmp	r3, #1
 800bba0:	d101      	bne.n	800bba6 <HAL_USART_Transmit+0x5e>
 800bba2:	2302      	movs	r3, #2
 800bba4:	e08a      	b.n	800bcbc <HAL_USART_Transmit+0x174>
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	2258      	movs	r2, #88	; 0x58
 800bbaa:	2101      	movs	r1, #1
 800bbac:	5499      	strb	r1, [r3, r2]

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	2259      	movs	r2, #89	; 0x59
 800bbb8:	2112      	movs	r1, #18
 800bbba:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bbbc:	f7f9 fc0a 	bl	80053d4 <HAL_GetTick>
 800bbc0:	0003      	movs	r3, r0
 800bbc2:	617b      	str	r3, [r7, #20]

    husart->TxXferSize = Size;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	1dba      	adds	r2, r7, #6
 800bbc8:	8812      	ldrh	r2, [r2, #0]
 800bbca:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	1dba      	adds	r2, r7, #6
 800bbd0:	8812      	ldrh	r2, [r2, #0]
 800bbd2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	689a      	ldr	r2, [r3, #8]
 800bbd8:	2380      	movs	r3, #128	; 0x80
 800bbda:	015b      	lsls	r3, r3, #5
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	d108      	bne.n	800bbf2 <HAL_USART_Transmit+0xaa>
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	691b      	ldr	r3, [r3, #16]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d104      	bne.n	800bbf2 <HAL_USART_Transmit+0xaa>
    {
      ptxdata8bits  = NULL;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (uint16_t *) pTxData;
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	61bb      	str	r3, [r7, #24]
 800bbf0:	e003      	b.n	800bbfa <HAL_USART_Transmit+0xb2>
    }
    else
    {
      ptxdata8bits  = pTxData;
 800bbf2:	68bb      	ldr	r3, [r7, #8]
 800bbf4:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 800bbfa:	e02a      	b.n	800bc52 <HAL_USART_Transmit+0x10a>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bbfc:	697a      	ldr	r2, [r7, #20]
 800bbfe:	68f8      	ldr	r0, [r7, #12]
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	9300      	str	r3, [sp, #0]
 800bc04:	0013      	movs	r3, r2
 800bc06:	2200      	movs	r2, #0
 800bc08:	2180      	movs	r1, #128	; 0x80
 800bc0a:	f000 fb19 	bl	800c240 <USART_WaitOnFlagUntilTimeout>
 800bc0e:	1e03      	subs	r3, r0, #0
 800bc10:	d001      	beq.n	800bc16 <HAL_USART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 800bc12:	2303      	movs	r3, #3
 800bc14:	e052      	b.n	800bcbc <HAL_USART_Transmit+0x174>
      }
      if (ptxdata8bits == NULL)
 800bc16:	69fb      	ldr	r3, [r7, #28]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d10b      	bne.n	800bc34 <HAL_USART_Transmit+0xec>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 800bc1c:	69bb      	ldr	r3, [r7, #24]
 800bc1e:	881b      	ldrh	r3, [r3, #0]
 800bc20:	001a      	movs	r2, r3
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	05d2      	lsls	r2, r2, #23
 800bc28:	0dd2      	lsrs	r2, r2, #23
 800bc2a:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 800bc2c:	69bb      	ldr	r3, [r7, #24]
 800bc2e:	3302      	adds	r3, #2
 800bc30:	61bb      	str	r3, [r7, #24]
 800bc32:	e007      	b.n	800bc44 <HAL_USART_Transmit+0xfc>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 800bc34:	69fb      	ldr	r3, [r7, #28]
 800bc36:	781a      	ldrb	r2, [r3, #0]
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 800bc3e:	69fb      	ldr	r3, [r7, #28]
 800bc40:	3301      	adds	r3, #1
 800bc42:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bc48:	b29b      	uxth	r3, r3
 800bc4a:	3b01      	subs	r3, #1
 800bc4c:	b29a      	uxth	r2, r3
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (husart->TxXferCount > 0U)
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bc56:	b29b      	uxth	r3, r3
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d1cf      	bne.n	800bbfc <HAL_USART_Transmit+0xb4>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bc5c:	697a      	ldr	r2, [r7, #20]
 800bc5e:	68f8      	ldr	r0, [r7, #12]
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	9300      	str	r3, [sp, #0]
 800bc64:	0013      	movs	r3, r2
 800bc66:	2200      	movs	r2, #0
 800bc68:	2140      	movs	r1, #64	; 0x40
 800bc6a:	f000 fae9 	bl	800c240 <USART_WaitOnFlagUntilTimeout>
 800bc6e:	1e03      	subs	r3, r0, #0
 800bc70:	d001      	beq.n	800bc76 <HAL_USART_Transmit+0x12e>
    {
      return HAL_TIMEOUT;
 800bc72:	2303      	movs	r3, #3
 800bc74:	e022      	b.n	800bcbc <HAL_USART_Transmit+0x174>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	2240      	movs	r2, #64	; 0x40
 800bc7c:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	2208      	movs	r2, #8
 800bc84:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	699a      	ldr	r2, [r3, #24]
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	2108      	movs	r1, #8
 800bc92:	430a      	orrs	r2, r1
 800bc94:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	699a      	ldr	r2, [r3, #24]
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	2110      	movs	r1, #16
 800bca2:	430a      	orrs	r2, r1
 800bca4:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	2259      	movs	r2, #89	; 0x59
 800bcaa:	2101      	movs	r1, #1
 800bcac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2258      	movs	r2, #88	; 0x58
 800bcb2:	2100      	movs	r1, #0
 800bcb4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	e000      	b.n	800bcbc <HAL_USART_Transmit+0x174>
  }
  else
  {
    return HAL_BUSY;
 800bcba:	2302      	movs	r3, #2
  }
}
 800bcbc:	0018      	movs	r0, r3
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	b008      	add	sp, #32
 800bcc2:	bd80      	pop	{r7, pc}

0800bcc4 <HAL_USART_Transmit_DMA>:
  * @param  pTxData pointer to data buffer (u8 or u16 data elements).
  * @param  Size amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit_DMA(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size)
{
 800bcc4:	b590      	push	{r4, r7, lr}
 800bcc6:	b087      	sub	sp, #28
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	60f8      	str	r0, [r7, #12]
 800bccc:	60b9      	str	r1, [r7, #8]
 800bcce:	1dbb      	adds	r3, r7, #6
 800bcd0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bcd2:	2317      	movs	r3, #23
 800bcd4:	18fb      	adds	r3, r7, r3
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	701a      	strb	r2, [r3, #0]
  uint32_t *tmp;

  if (husart->State == HAL_USART_STATE_READY)
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	2259      	movs	r2, #89	; 0x59
 800bcde:	5c9b      	ldrb	r3, [r3, r2]
 800bce0:	b2db      	uxtb	r3, r3
 800bce2:	2b01      	cmp	r3, #1
 800bce4:	d000      	beq.n	800bce8 <HAL_USART_Transmit_DMA+0x24>
 800bce6:	e07d      	b.n	800bde4 <HAL_USART_Transmit_DMA+0x120>
  {
    if ((pTxData == NULL) || (Size == 0U))
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d003      	beq.n	800bcf6 <HAL_USART_Transmit_DMA+0x32>
 800bcee:	1dbb      	adds	r3, r7, #6
 800bcf0:	881b      	ldrh	r3, [r3, #0]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d101      	bne.n	800bcfa <HAL_USART_Transmit_DMA+0x36>
    {
      return HAL_ERROR;
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	e075      	b.n	800bde6 <HAL_USART_Transmit_DMA+0x122>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	689a      	ldr	r2, [r3, #8]
 800bcfe:	2380      	movs	r3, #128	; 0x80
 800bd00:	015b      	lsls	r3, r3, #5
 800bd02:	429a      	cmp	r2, r3
 800bd04:	d10a      	bne.n	800bd1c <HAL_USART_Transmit_DMA+0x58>
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	691b      	ldr	r3, [r3, #16]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d106      	bne.n	800bd1c <HAL_USART_Transmit_DMA+0x58>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	001a      	movs	r2, r3
 800bd12:	2301      	movs	r3, #1
 800bd14:	4013      	ands	r3, r2
 800bd16:	d001      	beq.n	800bd1c <HAL_USART_Transmit_DMA+0x58>
      {
        return  HAL_ERROR;
 800bd18:	2301      	movs	r3, #1
 800bd1a:	e064      	b.n	800bde6 <HAL_USART_Transmit_DMA+0x122>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	2258      	movs	r2, #88	; 0x58
 800bd20:	5c9b      	ldrb	r3, [r3, r2]
 800bd22:	2b01      	cmp	r3, #1
 800bd24:	d101      	bne.n	800bd2a <HAL_USART_Transmit_DMA+0x66>
 800bd26:	2302      	movs	r3, #2
 800bd28:	e05d      	b.n	800bde6 <HAL_USART_Transmit_DMA+0x122>
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	2258      	movs	r2, #88	; 0x58
 800bd2e:	2101      	movs	r1, #1
 800bd30:	5499      	strb	r1, [r3, r2]

    husart->pTxBuffPtr = pTxData;
 800bd32:	68ba      	ldr	r2, [r7, #8]
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	629a      	str	r2, [r3, #40]	; 0x28
    husart->TxXferSize = Size;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	1dba      	adds	r2, r7, #6
 800bd3c:	8812      	ldrh	r2, [r2, #0]
 800bd3e:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	1dba      	adds	r2, r7, #6
 800bd44:	8812      	ldrh	r2, [r2, #0]
 800bd46:	85da      	strh	r2, [r3, #46]	; 0x2e

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	2259      	movs	r2, #89	; 0x59
 800bd52:	2112      	movs	r1, #18
 800bd54:	5499      	strb	r1, [r3, r2]

    if (husart->hdmatx != NULL)
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d01e      	beq.n	800bd9c <HAL_USART_Transmit_DMA+0xd8>
    {
      /* Set the USART DMA transfer complete callback */
      husart->hdmatx->XferCpltCallback = USART_DMATransmitCplt;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd62:	4a23      	ldr	r2, [pc, #140]	; (800bdf0 <HAL_USART_Transmit_DMA+0x12c>)
 800bd64:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the USART DMA Half transfer complete callback */
      husart->hdmatx->XferHalfCpltCallback = USART_DMATxHalfCplt;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd6a:	4a22      	ldr	r2, [pc, #136]	; (800bdf4 <HAL_USART_Transmit_DMA+0x130>)
 800bd6c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      husart->hdmatx->XferErrorCallback = USART_DMAError;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd72:	4a21      	ldr	r2, [pc, #132]	; (800bdf8 <HAL_USART_Transmit_DMA+0x134>)
 800bd74:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the USART transmit DMA channel */
      tmp = (uint32_t *)&pTxData;
 800bd76:	2308      	movs	r3, #8
 800bd78:	18fb      	adds	r3, r7, r3
 800bd7a:	613b      	str	r3, [r7, #16]
      status = HAL_DMA_Start_IT(husart->hdmatx, *(uint32_t *)tmp, (uint32_t)&husart->Instance->TDR, Size);
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800bd80:	693b      	ldr	r3, [r7, #16]
 800bd82:	6819      	ldr	r1, [r3, #0]
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	3328      	adds	r3, #40	; 0x28
 800bd8a:	001a      	movs	r2, r3
 800bd8c:	1dbb      	adds	r3, r7, #6
 800bd8e:	881b      	ldrh	r3, [r3, #0]
 800bd90:	2417      	movs	r4, #23
 800bd92:	193c      	adds	r4, r7, r4
 800bd94:	f7f9 ff2a 	bl	8005bec <HAL_DMA_Start_IT>
 800bd98:	0003      	movs	r3, r0
 800bd9a:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 800bd9c:	2317      	movs	r3, #23
 800bd9e:	18fb      	adds	r3, r7, r3
 800bda0:	781b      	ldrb	r3, [r3, #0]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d111      	bne.n	800bdca <HAL_USART_Transmit_DMA+0x106>
    {
      /* Clear the TC flag in the ICR register */
      __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	2240      	movs	r2, #64	; 0x40
 800bdac:	621a      	str	r2, [r3, #32]

      /* Process Unlocked */
      __HAL_UNLOCK(husart);
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	2258      	movs	r2, #88	; 0x58
 800bdb2:	2100      	movs	r1, #0
 800bdb4:	5499      	strb	r1, [r3, r2]

      /* Enable the DMA transfer for transmit request by setting the DMAT bit
         in the USART CR3 register */
      SET_BIT(husart->Instance->CR3, USART_CR3_DMAT);
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	689a      	ldr	r2, [r3, #8]
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	2180      	movs	r1, #128	; 0x80
 800bdc2:	430a      	orrs	r2, r1
 800bdc4:	609a      	str	r2, [r3, #8]

      return HAL_OK;
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	e00d      	b.n	800bde6 <HAL_USART_Transmit_DMA+0x122>
    }
    else
    {
      /* Set error code to DMA */
      husart->ErrorCode = HAL_USART_ERROR_DMA;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	2210      	movs	r2, #16
 800bdce:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Process Unlocked */
      __HAL_UNLOCK(husart);
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	2258      	movs	r2, #88	; 0x58
 800bdd4:	2100      	movs	r1, #0
 800bdd6:	5499      	strb	r1, [r3, r2]

      /* Restore husart->State to ready */
      husart->State = HAL_USART_STATE_READY;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	2259      	movs	r2, #89	; 0x59
 800bddc:	2101      	movs	r1, #1
 800bdde:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800bde0:	2301      	movs	r3, #1
 800bde2:	e000      	b.n	800bde6 <HAL_USART_Transmit_DMA+0x122>
    }
  }
  else
  {
    return HAL_BUSY;
 800bde4:	2302      	movs	r3, #2
  }
}
 800bde6:	0018      	movs	r0, r3
 800bde8:	46bd      	mov	sp, r7
 800bdea:	b007      	add	sp, #28
 800bdec:	bd90      	pop	{r4, r7, pc}
 800bdee:	46c0      	nop			; (mov r8, r8)
 800bdf0:	0800c149 	.word	0x0800c149
 800bdf4:	0800c1b3 	.word	0x0800c1b3
 800bdf8:	0800c1d1 	.word	0x0800c1d1

0800bdfc <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b088      	sub	sp, #32
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	69db      	ldr	r3, [r3, #28]
 800be0a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	689b      	ldr	r3, [r3, #8]
 800be1a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_UDR));
 800be1c:	69fb      	ldr	r3, [r7, #28]
 800be1e:	4aab      	ldr	r2, [pc, #684]	; (800c0cc <HAL_USART_IRQHandler+0x2d0>)
 800be20:	4013      	ands	r3, r2
 800be22:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800be24:	693b      	ldr	r3, [r7, #16]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d117      	bne.n	800be5a <HAL_USART_IRQHandler+0x5e>
  {
    /* USART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800be2a:	69fb      	ldr	r3, [r7, #28]
 800be2c:	2220      	movs	r2, #32
 800be2e:	4013      	ands	r3, r2
 800be30:	d013      	beq.n	800be5a <HAL_USART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800be32:	69bb      	ldr	r3, [r7, #24]
 800be34:	2220      	movs	r2, #32
 800be36:	4013      	ands	r3, r2
 800be38:	d104      	bne.n	800be44 <HAL_USART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800be3a:	697a      	ldr	r2, [r7, #20]
 800be3c:	2380      	movs	r3, #128	; 0x80
 800be3e:	055b      	lsls	r3, r3, #21
 800be40:	4013      	ands	r3, r2
 800be42:	d00a      	beq.n	800be5a <HAL_USART_IRQHandler+0x5e>
    {
      if (husart->RxISR != NULL)
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d100      	bne.n	800be4e <HAL_USART_IRQHandler+0x52>
 800be4c:	e135      	b.n	800c0ba <HAL_USART_IRQHandler+0x2be>
      {
        husart->RxISR(husart);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be52:	687a      	ldr	r2, [r7, #4]
 800be54:	0010      	movs	r0, r2
 800be56:	4798      	blx	r3
      }
      return;
 800be58:	e12f      	b.n	800c0ba <HAL_USART_IRQHandler+0x2be>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800be5a:	693b      	ldr	r3, [r7, #16]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d100      	bne.n	800be62 <HAL_USART_IRQHandler+0x66>
 800be60:	e0eb      	b.n	800c03a <HAL_USART_IRQHandler+0x23e>
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800be62:	697b      	ldr	r3, [r7, #20]
 800be64:	4a9a      	ldr	r2, [pc, #616]	; (800c0d0 <HAL_USART_IRQHandler+0x2d4>)
 800be66:	4013      	ands	r3, r2
 800be68:	d105      	bne.n	800be76 <HAL_USART_IRQHandler+0x7a>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
 800be6a:	69ba      	ldr	r2, [r7, #24]
 800be6c:	2390      	movs	r3, #144	; 0x90
 800be6e:	005b      	lsls	r3, r3, #1
 800be70:	4013      	ands	r3, r2
 800be72:	d100      	bne.n	800be76 <HAL_USART_IRQHandler+0x7a>
 800be74:	e0e1      	b.n	800c03a <HAL_USART_IRQHandler+0x23e>
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800be76:	69fb      	ldr	r3, [r7, #28]
 800be78:	2201      	movs	r2, #1
 800be7a:	4013      	ands	r3, r2
 800be7c:	d00e      	beq.n	800be9c <HAL_USART_IRQHandler+0xa0>
 800be7e:	69ba      	ldr	r2, [r7, #24]
 800be80:	2380      	movs	r3, #128	; 0x80
 800be82:	005b      	lsls	r3, r3, #1
 800be84:	4013      	ands	r3, r2
 800be86:	d009      	beq.n	800be9c <HAL_USART_IRQHandler+0xa0>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	2201      	movs	r2, #1
 800be8e:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be94:	2201      	movs	r2, #1
 800be96:	431a      	orrs	r2, r3
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800be9c:	69fb      	ldr	r3, [r7, #28]
 800be9e:	2202      	movs	r2, #2
 800bea0:	4013      	ands	r3, r2
 800bea2:	d00d      	beq.n	800bec0 <HAL_USART_IRQHandler+0xc4>
 800bea4:	697b      	ldr	r3, [r7, #20]
 800bea6:	2201      	movs	r2, #1
 800bea8:	4013      	ands	r3, r2
 800beaa:	d009      	beq.n	800bec0 <HAL_USART_IRQHandler+0xc4>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	2202      	movs	r2, #2
 800beb2:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800beb8:	2204      	movs	r2, #4
 800beba:	431a      	orrs	r2, r3
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bec0:	69fb      	ldr	r3, [r7, #28]
 800bec2:	2204      	movs	r2, #4
 800bec4:	4013      	ands	r3, r2
 800bec6:	d00d      	beq.n	800bee4 <HAL_USART_IRQHandler+0xe8>
 800bec8:	697b      	ldr	r3, [r7, #20]
 800beca:	2201      	movs	r2, #1
 800becc:	4013      	ands	r3, r2
 800bece:	d009      	beq.n	800bee4 <HAL_USART_IRQHandler+0xe8>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	2204      	movs	r2, #4
 800bed6:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bedc:	2202      	movs	r2, #2
 800bede:	431a      	orrs	r2, r3
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bee4:	69fb      	ldr	r3, [r7, #28]
 800bee6:	2208      	movs	r2, #8
 800bee8:	4013      	ands	r3, r2
 800beea:	d011      	beq.n	800bf10 <HAL_USART_IRQHandler+0x114>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800beec:	69bb      	ldr	r3, [r7, #24]
 800beee:	2220      	movs	r2, #32
 800bef0:	4013      	ands	r3, r2
 800bef2:	d103      	bne.n	800befc <HAL_USART_IRQHandler+0x100>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bef4:	697b      	ldr	r3, [r7, #20]
 800bef6:	4a76      	ldr	r2, [pc, #472]	; (800c0d0 <HAL_USART_IRQHandler+0x2d4>)
 800bef8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800befa:	d009      	beq.n	800bf10 <HAL_USART_IRQHandler+0x114>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	2208      	movs	r2, #8
 800bf02:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf08:	2208      	movs	r2, #8
 800bf0a:	431a      	orrs	r2, r3
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART SPI slave underrun error interrupt occurred -------------------------*/
    if (((isrflags & USART_ISR_UDR) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bf10:	69fa      	ldr	r2, [r7, #28]
 800bf12:	2380      	movs	r3, #128	; 0x80
 800bf14:	019b      	lsls	r3, r3, #6
 800bf16:	4013      	ands	r3, r2
 800bf18:	d01a      	beq.n	800bf50 <HAL_USART_IRQHandler+0x154>
 800bf1a:	697b      	ldr	r3, [r7, #20]
 800bf1c:	2201      	movs	r2, #1
 800bf1e:	4013      	ands	r3, r2
 800bf20:	d016      	beq.n	800bf50 <HAL_USART_IRQHandler+0x154>
    {
      /* Ignore SPI slave underrun errors when reception is going on */
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2259      	movs	r2, #89	; 0x59
 800bf26:	5c9b      	ldrb	r3, [r3, r2]
 800bf28:	b2db      	uxtb	r3, r3
 800bf2a:	2b22      	cmp	r3, #34	; 0x22
 800bf2c:	d105      	bne.n	800bf3a <HAL_USART_IRQHandler+0x13e>
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	2280      	movs	r2, #128	; 0x80
 800bf34:	0192      	lsls	r2, r2, #6
 800bf36:	621a      	str	r2, [r3, #32]
        return;
 800bf38:	e0c4      	b.n	800c0c4 <HAL_USART_IRQHandler+0x2c8>
      }
      else
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	2280      	movs	r2, #128	; 0x80
 800bf40:	0192      	lsls	r2, r2, #6
 800bf42:	621a      	str	r2, [r3, #32]
        husart->ErrorCode |= HAL_USART_ERROR_UDR;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf48:	2220      	movs	r2, #32
 800bf4a:	431a      	orrs	r2, r3
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d100      	bne.n	800bf5a <HAL_USART_IRQHandler+0x15e>
 800bf58:	e0b1      	b.n	800c0be <HAL_USART_IRQHandler+0x2c2>
    {
      /* USART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bf5a:	69fb      	ldr	r3, [r7, #28]
 800bf5c:	2220      	movs	r2, #32
 800bf5e:	4013      	ands	r3, r2
 800bf60:	d011      	beq.n	800bf86 <HAL_USART_IRQHandler+0x18a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bf62:	69bb      	ldr	r3, [r7, #24]
 800bf64:	2220      	movs	r2, #32
 800bf66:	4013      	ands	r3, r2
 800bf68:	d104      	bne.n	800bf74 <HAL_USART_IRQHandler+0x178>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bf6a:	697a      	ldr	r2, [r7, #20]
 800bf6c:	2380      	movs	r3, #128	; 0x80
 800bf6e:	055b      	lsls	r3, r3, #21
 800bf70:	4013      	ands	r3, r2
 800bf72:	d008      	beq.n	800bf86 <HAL_USART_IRQHandler+0x18a>
      {
        if (husart->RxISR != NULL)
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d004      	beq.n	800bf86 <HAL_USART_IRQHandler+0x18a>
        {
          husart->RxISR(husart);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf80:	687a      	ldr	r2, [r7, #4]
 800bf82:	0010      	movs	r0, r2
 800bf84:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf8a:	2208      	movs	r2, #8
 800bf8c:	4013      	ands	r3, r2
 800bf8e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	689b      	ldr	r3, [r3, #8]
 800bf96:	2240      	movs	r2, #64	; 0x40
 800bf98:	4013      	ands	r3, r2
 800bf9a:	2b40      	cmp	r3, #64	; 0x40
 800bf9c:	d002      	beq.n	800bfa4 <HAL_USART_IRQHandler+0x1a8>
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d040      	beq.n	800c026 <HAL_USART_IRQHandler+0x22a>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	0018      	movs	r0, r3
 800bfa8:	f000 f8ae 	bl	800c108 <USART_EndTransfer>

        /* Disable the USART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	689b      	ldr	r3, [r3, #8]
 800bfb2:	2240      	movs	r2, #64	; 0x40
 800bfb4:	4013      	ands	r3, r2
 800bfb6:	2b40      	cmp	r3, #64	; 0x40
 800bfb8:	d130      	bne.n	800c01c <HAL_USART_IRQHandler+0x220>
        {
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	689a      	ldr	r2, [r3, #8]
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	2140      	movs	r1, #64	; 0x40
 800bfc6:	438a      	bics	r2, r1
 800bfc8:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d008      	beq.n	800bfe4 <HAL_USART_IRQHandler+0x1e8>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfde:	0018      	movs	r0, r3
 800bfe0:	f7f9 fe8a 	bl	8005cf8 <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d012      	beq.n	800c012 <HAL_USART_IRQHandler+0x216>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bff0:	4a38      	ldr	r2, [pc, #224]	; (800c0d4 <HAL_USART_IRQHandler+0x2d8>)
 800bff2:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bff8:	0018      	movs	r0, r3
 800bffa:	f7f9 fe7d 	bl	8005cf8 <HAL_DMA_Abort_IT>
 800bffe:	1e03      	subs	r3, r0, #0
 800c000:	d019      	beq.n	800c036 <HAL_USART_IRQHandler+0x23a>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c006:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c00c:	0018      	movs	r0, r3
 800c00e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800c010:	e011      	b.n	800c036 <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	0018      	movs	r0, r3
 800c016:	f000 f86f 	bl	800c0f8 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800c01a:	e00c      	b.n	800c036 <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	0018      	movs	r0, r3
 800c020:	f000 f86a 	bl	800c0f8 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800c024:	e007      	b.n	800c036 <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	0018      	movs	r0, r3
 800c02a:	f000 f865 	bl	800c0f8 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2200      	movs	r2, #0
 800c032:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }
    return;
 800c034:	e043      	b.n	800c0be <HAL_USART_IRQHandler+0x2c2>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800c036:	46c0      	nop			; (mov r8, r8)
    return;
 800c038:	e041      	b.n	800c0be <HAL_USART_IRQHandler+0x2c2>

  } /* End if some error occurs */


  /* USART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c03a:	69fb      	ldr	r3, [r7, #28]
 800c03c:	2280      	movs	r2, #128	; 0x80
 800c03e:	4013      	ands	r3, r2
 800c040:	d012      	beq.n	800c068 <HAL_USART_IRQHandler+0x26c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c042:	69bb      	ldr	r3, [r7, #24]
 800c044:	2280      	movs	r2, #128	; 0x80
 800c046:	4013      	ands	r3, r2
 800c048:	d104      	bne.n	800c054 <HAL_USART_IRQHandler+0x258>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c04a:	697a      	ldr	r2, [r7, #20]
 800c04c:	2380      	movs	r3, #128	; 0x80
 800c04e:	041b      	lsls	r3, r3, #16
 800c050:	4013      	ands	r3, r2
 800c052:	d009      	beq.n	800c068 <HAL_USART_IRQHandler+0x26c>
  {
    if (husart->TxISR != NULL)
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d032      	beq.n	800c0c2 <HAL_USART_IRQHandler+0x2c6>
    {
      husart->TxISR(husart);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c060:	687a      	ldr	r2, [r7, #4]
 800c062:	0010      	movs	r0, r2
 800c064:	4798      	blx	r3
    }
    return;
 800c066:	e02c      	b.n	800c0c2 <HAL_USART_IRQHandler+0x2c6>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c068:	69fb      	ldr	r3, [r7, #28]
 800c06a:	2240      	movs	r2, #64	; 0x40
 800c06c:	4013      	ands	r3, r2
 800c06e:	d008      	beq.n	800c082 <HAL_USART_IRQHandler+0x286>
 800c070:	69bb      	ldr	r3, [r7, #24]
 800c072:	2240      	movs	r2, #64	; 0x40
 800c074:	4013      	ands	r3, r2
 800c076:	d004      	beq.n	800c082 <HAL_USART_IRQHandler+0x286>
  {
    USART_EndTransmit_IT(husart);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	0018      	movs	r0, r3
 800c07c:	f000 fbf6 	bl	800c86c <USART_EndTransmit_IT>
    return;
 800c080:	e020      	b.n	800c0c4 <HAL_USART_IRQHandler+0x2c8>
  }

  /* USART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c082:	69fa      	ldr	r2, [r7, #28]
 800c084:	2380      	movs	r3, #128	; 0x80
 800c086:	041b      	lsls	r3, r3, #16
 800c088:	4013      	ands	r3, r2
 800c08a:	d009      	beq.n	800c0a0 <HAL_USART_IRQHandler+0x2a4>
 800c08c:	69ba      	ldr	r2, [r7, #24]
 800c08e:	2380      	movs	r3, #128	; 0x80
 800c090:	05db      	lsls	r3, r3, #23
 800c092:	4013      	ands	r3, r2
 800c094:	d004      	beq.n	800c0a0 <HAL_USART_IRQHandler+0x2a4>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    husart->TxFifoEmptyCallback(husart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_USARTEx_TxFifoEmptyCallback(husart);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	0018      	movs	r0, r3
 800c09a:	f000 fc32 	bl	800c902 <HAL_USARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 800c09e:	e011      	b.n	800c0c4 <HAL_USART_IRQHandler+0x2c8>
  }

  /* USART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c0a0:	69fa      	ldr	r2, [r7, #28]
 800c0a2:	2380      	movs	r3, #128	; 0x80
 800c0a4:	045b      	lsls	r3, r3, #17
 800c0a6:	4013      	ands	r3, r2
 800c0a8:	d00c      	beq.n	800c0c4 <HAL_USART_IRQHandler+0x2c8>
 800c0aa:	69bb      	ldr	r3, [r7, #24]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	da09      	bge.n	800c0c4 <HAL_USART_IRQHandler+0x2c8>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    husart->RxFifoFullCallback(husart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_USARTEx_RxFifoFullCallback(husart);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	0018      	movs	r0, r3
 800c0b4:	f000 fc1d 	bl	800c8f2 <HAL_USARTEx_RxFifoFullCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 800c0b8:	e004      	b.n	800c0c4 <HAL_USART_IRQHandler+0x2c8>
      return;
 800c0ba:	46c0      	nop			; (mov r8, r8)
 800c0bc:	e002      	b.n	800c0c4 <HAL_USART_IRQHandler+0x2c8>
    return;
 800c0be:	46c0      	nop			; (mov r8, r8)
 800c0c0:	e000      	b.n	800c0c4 <HAL_USART_IRQHandler+0x2c8>
    return;
 800c0c2:	46c0      	nop			; (mov r8, r8)
  }
}
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	b008      	add	sp, #32
 800c0c8:	bd80      	pop	{r7, pc}
 800c0ca:	46c0      	nop			; (mov r8, r8)
 800c0cc:	0000200f 	.word	0x0000200f
 800c0d0:	10000001 	.word	0x10000001
 800c0d4:	0800c217 	.word	0x0800c217

0800c0d8 <HAL_USART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxHalfCpltCallback(USART_HandleTypeDef *husart)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b082      	sub	sp, #8
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c0e0:	46c0      	nop			; (mov r8, r8)
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	b002      	add	sp, #8
 800c0e6:	bd80      	pop	{r7, pc}

0800c0e8 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b082      	sub	sp, #8
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 800c0f0:	46c0      	nop			; (mov r8, r8)
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	b002      	add	sp, #8
 800c0f6:	bd80      	pop	{r7, pc}

0800c0f8 <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b082      	sub	sp, #8
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 800c100:	46c0      	nop			; (mov r8, r8)
 800c102:	46bd      	mov	sp, r7
 800c104:	b002      	add	sp, #8
 800c106:	bd80      	pop	{r7, pc}

0800c108 <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b082      	sub	sp, #8
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, RXFT, TXFT, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	681a      	ldr	r2, [r3, #0]
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	4909      	ldr	r1, [pc, #36]	; (800c140 <USART_EndTransfer+0x38>)
 800c11c:	400a      	ands	r2, r1
 800c11e:	601a      	str	r2, [r3, #0]
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	689a      	ldr	r2, [r3, #8]
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	4906      	ldr	r1, [pc, #24]	; (800c144 <USART_EndTransfer+0x3c>)
 800c12c:	400a      	ands	r2, r1
 800c12e:	609a      	str	r2, [r3, #8]

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2259      	movs	r2, #89	; 0x59
 800c134:	2101      	movs	r1, #1
 800c136:	5499      	strb	r1, [r3, r2]
}
 800c138:	46c0      	nop			; (mov r8, r8)
 800c13a:	46bd      	mov	sp, r7
 800c13c:	b002      	add	sp, #8
 800c13e:	bd80      	pop	{r7, pc}
 800c140:	fffffe1f 	.word	0xfffffe1f
 800c144:	ef7ffffe 	.word	0xef7ffffe

0800c148 <USART_DMATransmitCplt>:
  * @brief DMA USART transmit process complete callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b084      	sub	sp, #16
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c154:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	2220      	movs	r2, #32
 800c15e:	4013      	ands	r3, r2
 800c160:	d119      	bne.n	800c196 <USART_DMATransmitCplt+0x4e>
  {
    husart->TxXferCount = 0U;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	2200      	movs	r2, #0
 800c166:	85da      	strh	r2, [r3, #46]	; 0x2e

    if (husart->State == HAL_USART_STATE_BUSY_TX)
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	2259      	movs	r2, #89	; 0x59
 800c16c:	5c9b      	ldrb	r3, [r3, r2]
 800c16e:	b2db      	uxtb	r3, r3
 800c170:	2b12      	cmp	r3, #18
 800c172:	d11a      	bne.n	800c1aa <USART_DMATransmitCplt+0x62>
    {
      /* Disable the DMA transfer for transmit request by resetting the DMAT bit
         in the USART CR3 register */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAT);
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	689a      	ldr	r2, [r3, #8]
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	2180      	movs	r1, #128	; 0x80
 800c180:	438a      	bics	r2, r1
 800c182:	609a      	str	r2, [r3, #8]

      /* Enable the USART Transmit Complete Interrupt */
      __HAL_USART_ENABLE_IT(husart, USART_IT_TC);
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	681a      	ldr	r2, [r3, #0]
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	2140      	movs	r1, #64	; 0x40
 800c190:	430a      	orrs	r2, r1
 800c192:	601a      	str	r2, [r3, #0]
      /* Call legacy weak Tx Complete Callback */
      HAL_USART_TxCpltCallback(husart);
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    }
  }
}
 800c194:	e009      	b.n	800c1aa <USART_DMATransmitCplt+0x62>
    if (husart->State == HAL_USART_STATE_BUSY_TX)
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	2259      	movs	r2, #89	; 0x59
 800c19a:	5c9b      	ldrb	r3, [r3, r2]
 800c19c:	b2db      	uxtb	r3, r3
 800c19e:	2b12      	cmp	r3, #18
 800c1a0:	d103      	bne.n	800c1aa <USART_DMATransmitCplt+0x62>
      HAL_USART_TxCpltCallback(husart);
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	0018      	movs	r0, r3
 800c1a6:	f7f6 ff07 	bl	8002fb8 <HAL_USART_TxCpltCallback>
}
 800c1aa:	46c0      	nop			; (mov r8, r8)
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	b004      	add	sp, #16
 800c1b0:	bd80      	pop	{r7, pc}

0800c1b2 <USART_DMATxHalfCplt>:
  * @brief DMA USART transmit process half complete callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c1b2:	b580      	push	{r7, lr}
 800c1b4:	b084      	sub	sp, #16
 800c1b6:	af00      	add	r7, sp, #0
 800c1b8:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1be:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Tx Half Complete Callback */
  husart->TxHalfCpltCallback(husart);
#else
  /* Call legacy weak Tx Half Complete Callback */
  HAL_USART_TxHalfCpltCallback(husart);
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	0018      	movs	r0, r3
 800c1c4:	f7ff ff88 	bl	800c0d8 <HAL_USART_TxHalfCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 800c1c8:	46c0      	nop			; (mov r8, r8)
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	b004      	add	sp, #16
 800c1ce:	bd80      	pop	{r7, pc}

0800c1d0 <USART_DMAError>:
  * @brief DMA USART communication error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b084      	sub	sp, #16
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1dc:	60fb      	str	r3, [r7, #12]

  husart->RxXferCount = 0U;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	85da      	strh	r2, [r3, #46]	; 0x2e
  USART_EndTransfer(husart);
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	0018      	movs	r0, r3
 800c1ee:	f7ff ff8b 	bl	800c108 <USART_EndTransfer>

  husart->ErrorCode |= HAL_USART_ERROR_DMA;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c1f6:	2210      	movs	r2, #16
 800c1f8:	431a      	orrs	r2, r3
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	65da      	str	r2, [r3, #92]	; 0x5c
  husart->State = HAL_USART_STATE_READY;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	2259      	movs	r2, #89	; 0x59
 800c202:	2101      	movs	r1, #1
 800c204:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	0018      	movs	r0, r3
 800c20a:	f7ff ff75 	bl	800c0f8 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 800c20e:	46c0      	nop			; (mov r8, r8)
 800c210:	46bd      	mov	sp, r7
 800c212:	b004      	add	sp, #16
 800c214:	bd80      	pop	{r7, pc}

0800c216 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c216:	b580      	push	{r7, lr}
 800c218:	b084      	sub	sp, #16
 800c21a:	af00      	add	r7, sp, #0
 800c21c:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c222:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	2200      	movs	r2, #0
 800c228:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	2200      	movs	r2, #0
 800c22e:	85da      	strh	r2, [r3, #46]	; 0x2e
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	0018      	movs	r0, r3
 800c234:	f7ff ff60 	bl	800c0f8 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 800c238:	46c0      	nop			; (mov r8, r8)
 800c23a:	46bd      	mov	sp, r7
 800c23c:	b004      	add	sp, #16
 800c23e:	bd80      	pop	{r7, pc}

0800c240 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b084      	sub	sp, #16
 800c244:	af00      	add	r7, sp, #0
 800c246:	60f8      	str	r0, [r7, #12]
 800c248:	60b9      	str	r1, [r7, #8]
 800c24a:	603b      	str	r3, [r7, #0]
 800c24c:	1dfb      	adds	r3, r7, #7
 800c24e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800c250:	e017      	b.n	800c282 <USART_WaitOnFlagUntilTimeout+0x42>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c252:	69bb      	ldr	r3, [r7, #24]
 800c254:	3301      	adds	r3, #1
 800c256:	d014      	beq.n	800c282 <USART_WaitOnFlagUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c258:	f7f9 f8bc 	bl	80053d4 <HAL_GetTick>
 800c25c:	0002      	movs	r2, r0
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	1ad3      	subs	r3, r2, r3
 800c262:	69ba      	ldr	r2, [r7, #24]
 800c264:	429a      	cmp	r2, r3
 800c266:	d302      	bcc.n	800c26e <USART_WaitOnFlagUntilTimeout+0x2e>
 800c268:	69bb      	ldr	r3, [r7, #24]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d109      	bne.n	800c282 <USART_WaitOnFlagUntilTimeout+0x42>
      {
        husart->State = HAL_USART_STATE_READY;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	2259      	movs	r2, #89	; 0x59
 800c272:	2101      	movs	r1, #1
 800c274:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	2258      	movs	r2, #88	; 0x58
 800c27a:	2100      	movs	r1, #0
 800c27c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800c27e:	2303      	movs	r3, #3
 800c280:	e00f      	b.n	800c2a2 <USART_WaitOnFlagUntilTimeout+0x62>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	69db      	ldr	r3, [r3, #28]
 800c288:	68ba      	ldr	r2, [r7, #8]
 800c28a:	4013      	ands	r3, r2
 800c28c:	68ba      	ldr	r2, [r7, #8]
 800c28e:	1ad3      	subs	r3, r2, r3
 800c290:	425a      	negs	r2, r3
 800c292:	4153      	adcs	r3, r2
 800c294:	b2db      	uxtb	r3, r3
 800c296:	001a      	movs	r2, r3
 800c298:	1dfb      	adds	r3, r7, #7
 800c29a:	781b      	ldrb	r3, [r3, #0]
 800c29c:	429a      	cmp	r2, r3
 800c29e:	d0d8      	beq.n	800c252 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c2a0:	2300      	movs	r3, #0
}
 800c2a2:	0018      	movs	r0, r3
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	b004      	add	sp, #16
 800c2a8:	bd80      	pop	{r7, pc}
	...

0800c2ac <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b088      	sub	sp, #32
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800c2b4:	231e      	movs	r3, #30
 800c2b6:	18fb      	adds	r3, r7, r3
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800c2bc:	2300      	movs	r3, #0
 800c2be:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	689a      	ldr	r2, [r3, #8]
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	691b      	ldr	r3, [r3, #16]
 800c2c8:	431a      	orrs	r2, r3
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	695b      	ldr	r3, [r3, #20]
 800c2ce:	4313      	orrs	r3, r2
 800c2d0:	2280      	movs	r2, #128	; 0x80
 800c2d2:	0212      	lsls	r2, r2, #8
 800c2d4:	4313      	orrs	r3, r2
 800c2d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	4ab1      	ldr	r2, [pc, #708]	; (800c5a4 <USART_SetConfig+0x2f8>)
 800c2e0:	4013      	ands	r3, r2
 800c2e2:	0019      	movs	r1, r3
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	697a      	ldr	r2, [r7, #20]
 800c2ea:	430a      	orrs	r2, r1
 800c2ec:	601a      	str	r2, [r3, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800c2ee:	2380      	movs	r3, #128	; 0x80
 800c2f0:	011b      	lsls	r3, r3, #4
 800c2f2:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	6a1b      	ldr	r3, [r3, #32]
 800c2f8:	697a      	ldr	r2, [r7, #20]
 800c2fa:	4313      	orrs	r3, r2
 800c2fc:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	699a      	ldr	r2, [r3, #24]
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	69db      	ldr	r3, [r3, #28]
 800c306:	4313      	orrs	r3, r2
 800c308:	697a      	ldr	r2, [r7, #20]
 800c30a:	4313      	orrs	r3, r2
 800c30c:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	68db      	ldr	r3, [r3, #12]
 800c312:	697a      	ldr	r2, [r7, #20]
 800c314:	4313      	orrs	r3, r2
 800c316:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	685b      	ldr	r3, [r3, #4]
 800c31e:	4aa2      	ldr	r2, [pc, #648]	; (800c5a8 <USART_SetConfig+0x2fc>)
 800c320:	4013      	ands	r3, r2
 800c322:	0019      	movs	r1, r3
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	697a      	ldr	r2, [r7, #20]
 800c32a:	430a      	orrs	r2, r1
 800c32c:	605a      	str	r2, [r3, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c334:	220f      	movs	r2, #15
 800c336:	4393      	bics	r3, r2
 800c338:	0019      	movs	r1, r3
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	430a      	orrs	r2, r1
 800c344:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	4a98      	ldr	r2, [pc, #608]	; (800c5ac <USART_SetConfig+0x300>)
 800c34c:	4293      	cmp	r3, r2
 800c34e:	d127      	bne.n	800c3a0 <USART_SetConfig+0xf4>
 800c350:	4b97      	ldr	r3, [pc, #604]	; (800c5b0 <USART_SetConfig+0x304>)
 800c352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c354:	2203      	movs	r2, #3
 800c356:	4013      	ands	r3, r2
 800c358:	2b03      	cmp	r3, #3
 800c35a:	d017      	beq.n	800c38c <USART_SetConfig+0xe0>
 800c35c:	d81b      	bhi.n	800c396 <USART_SetConfig+0xea>
 800c35e:	2b02      	cmp	r3, #2
 800c360:	d00a      	beq.n	800c378 <USART_SetConfig+0xcc>
 800c362:	d818      	bhi.n	800c396 <USART_SetConfig+0xea>
 800c364:	2b00      	cmp	r3, #0
 800c366:	d002      	beq.n	800c36e <USART_SetConfig+0xc2>
 800c368:	2b01      	cmp	r3, #1
 800c36a:	d00a      	beq.n	800c382 <USART_SetConfig+0xd6>
 800c36c:	e013      	b.n	800c396 <USART_SetConfig+0xea>
 800c36e:	231f      	movs	r3, #31
 800c370:	18fb      	adds	r3, r7, r3
 800c372:	2200      	movs	r2, #0
 800c374:	701a      	strb	r2, [r3, #0]
 800c376:	e058      	b.n	800c42a <USART_SetConfig+0x17e>
 800c378:	231f      	movs	r3, #31
 800c37a:	18fb      	adds	r3, r7, r3
 800c37c:	2202      	movs	r2, #2
 800c37e:	701a      	strb	r2, [r3, #0]
 800c380:	e053      	b.n	800c42a <USART_SetConfig+0x17e>
 800c382:	231f      	movs	r3, #31
 800c384:	18fb      	adds	r3, r7, r3
 800c386:	2204      	movs	r2, #4
 800c388:	701a      	strb	r2, [r3, #0]
 800c38a:	e04e      	b.n	800c42a <USART_SetConfig+0x17e>
 800c38c:	231f      	movs	r3, #31
 800c38e:	18fb      	adds	r3, r7, r3
 800c390:	2208      	movs	r2, #8
 800c392:	701a      	strb	r2, [r3, #0]
 800c394:	e049      	b.n	800c42a <USART_SetConfig+0x17e>
 800c396:	231f      	movs	r3, #31
 800c398:	18fb      	adds	r3, r7, r3
 800c39a:	2210      	movs	r2, #16
 800c39c:	701a      	strb	r2, [r3, #0]
 800c39e:	e044      	b.n	800c42a <USART_SetConfig+0x17e>
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	4a83      	ldr	r2, [pc, #524]	; (800c5b4 <USART_SetConfig+0x308>)
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	d127      	bne.n	800c3fa <USART_SetConfig+0x14e>
 800c3aa:	4b81      	ldr	r3, [pc, #516]	; (800c5b0 <USART_SetConfig+0x304>)
 800c3ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3ae:	220c      	movs	r2, #12
 800c3b0:	4013      	ands	r3, r2
 800c3b2:	2b0c      	cmp	r3, #12
 800c3b4:	d017      	beq.n	800c3e6 <USART_SetConfig+0x13a>
 800c3b6:	d81b      	bhi.n	800c3f0 <USART_SetConfig+0x144>
 800c3b8:	2b08      	cmp	r3, #8
 800c3ba:	d00a      	beq.n	800c3d2 <USART_SetConfig+0x126>
 800c3bc:	d818      	bhi.n	800c3f0 <USART_SetConfig+0x144>
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d002      	beq.n	800c3c8 <USART_SetConfig+0x11c>
 800c3c2:	2b04      	cmp	r3, #4
 800c3c4:	d00a      	beq.n	800c3dc <USART_SetConfig+0x130>
 800c3c6:	e013      	b.n	800c3f0 <USART_SetConfig+0x144>
 800c3c8:	231f      	movs	r3, #31
 800c3ca:	18fb      	adds	r3, r7, r3
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	701a      	strb	r2, [r3, #0]
 800c3d0:	e02b      	b.n	800c42a <USART_SetConfig+0x17e>
 800c3d2:	231f      	movs	r3, #31
 800c3d4:	18fb      	adds	r3, r7, r3
 800c3d6:	2202      	movs	r2, #2
 800c3d8:	701a      	strb	r2, [r3, #0]
 800c3da:	e026      	b.n	800c42a <USART_SetConfig+0x17e>
 800c3dc:	231f      	movs	r3, #31
 800c3de:	18fb      	adds	r3, r7, r3
 800c3e0:	2204      	movs	r2, #4
 800c3e2:	701a      	strb	r2, [r3, #0]
 800c3e4:	e021      	b.n	800c42a <USART_SetConfig+0x17e>
 800c3e6:	231f      	movs	r3, #31
 800c3e8:	18fb      	adds	r3, r7, r3
 800c3ea:	2208      	movs	r2, #8
 800c3ec:	701a      	strb	r2, [r3, #0]
 800c3ee:	e01c      	b.n	800c42a <USART_SetConfig+0x17e>
 800c3f0:	231f      	movs	r3, #31
 800c3f2:	18fb      	adds	r3, r7, r3
 800c3f4:	2210      	movs	r2, #16
 800c3f6:	701a      	strb	r2, [r3, #0]
 800c3f8:	e017      	b.n	800c42a <USART_SetConfig+0x17e>
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	4a6e      	ldr	r2, [pc, #440]	; (800c5b8 <USART_SetConfig+0x30c>)
 800c400:	4293      	cmp	r3, r2
 800c402:	d104      	bne.n	800c40e <USART_SetConfig+0x162>
 800c404:	231f      	movs	r3, #31
 800c406:	18fb      	adds	r3, r7, r3
 800c408:	2200      	movs	r2, #0
 800c40a:	701a      	strb	r2, [r3, #0]
 800c40c:	e00d      	b.n	800c42a <USART_SetConfig+0x17e>
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	4a6a      	ldr	r2, [pc, #424]	; (800c5bc <USART_SetConfig+0x310>)
 800c414:	4293      	cmp	r3, r2
 800c416:	d104      	bne.n	800c422 <USART_SetConfig+0x176>
 800c418:	231f      	movs	r3, #31
 800c41a:	18fb      	adds	r3, r7, r3
 800c41c:	2200      	movs	r2, #0
 800c41e:	701a      	strb	r2, [r3, #0]
 800c420:	e003      	b.n	800c42a <USART_SetConfig+0x17e>
 800c422:	231f      	movs	r3, #31
 800c424:	18fb      	adds	r3, r7, r3
 800c426:	2210      	movs	r2, #16
 800c428:	701a      	strb	r2, [r3, #0]

  switch (clocksource)
 800c42a:	231f      	movs	r3, #31
 800c42c:	18fb      	adds	r3, r7, r3
 800c42e:	781b      	ldrb	r3, [r3, #0]
 800c430:	2b08      	cmp	r3, #8
 800c432:	d100      	bne.n	800c436 <USART_SetConfig+0x18a>
 800c434:	e139      	b.n	800c6aa <USART_SetConfig+0x3fe>
 800c436:	dd00      	ble.n	800c43a <USART_SetConfig+0x18e>
 800c438:	e195      	b.n	800c766 <USART_SetConfig+0x4ba>
 800c43a:	2b04      	cmp	r3, #4
 800c43c:	d100      	bne.n	800c440 <USART_SetConfig+0x194>
 800c43e:	e0d3      	b.n	800c5e8 <USART_SetConfig+0x33c>
 800c440:	dd00      	ble.n	800c444 <USART_SetConfig+0x198>
 800c442:	e190      	b.n	800c766 <USART_SetConfig+0x4ba>
 800c444:	2b00      	cmp	r3, #0
 800c446:	d003      	beq.n	800c450 <USART_SetConfig+0x1a4>
 800c448:	2b02      	cmp	r3, #2
 800c44a:	d100      	bne.n	800c44e <USART_SetConfig+0x1a2>
 800c44c:	e061      	b.n	800c512 <USART_SetConfig+0x266>
 800c44e:	e18a      	b.n	800c766 <USART_SetConfig+0x4ba>
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800c450:	f7fc f904 	bl	800865c <HAL_RCC_GetPCLK1Freq>
 800c454:	0003      	movs	r3, r0
 800c456:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d044      	beq.n	800c4ea <USART_SetConfig+0x23e>
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c464:	2b01      	cmp	r3, #1
 800c466:	d03e      	beq.n	800c4e6 <USART_SetConfig+0x23a>
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c46c:	2b02      	cmp	r3, #2
 800c46e:	d038      	beq.n	800c4e2 <USART_SetConfig+0x236>
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c474:	2b03      	cmp	r3, #3
 800c476:	d032      	beq.n	800c4de <USART_SetConfig+0x232>
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c47c:	2b04      	cmp	r3, #4
 800c47e:	d02c      	beq.n	800c4da <USART_SetConfig+0x22e>
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c484:	2b05      	cmp	r3, #5
 800c486:	d026      	beq.n	800c4d6 <USART_SetConfig+0x22a>
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c48c:	2b06      	cmp	r3, #6
 800c48e:	d020      	beq.n	800c4d2 <USART_SetConfig+0x226>
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c494:	2b07      	cmp	r3, #7
 800c496:	d01a      	beq.n	800c4ce <USART_SetConfig+0x222>
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c49c:	2b08      	cmp	r3, #8
 800c49e:	d014      	beq.n	800c4ca <USART_SetConfig+0x21e>
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4a4:	2b09      	cmp	r3, #9
 800c4a6:	d00e      	beq.n	800c4c6 <USART_SetConfig+0x21a>
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4ac:	2b0a      	cmp	r3, #10
 800c4ae:	d008      	beq.n	800c4c2 <USART_SetConfig+0x216>
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4b4:	2b0b      	cmp	r3, #11
 800c4b6:	d102      	bne.n	800c4be <USART_SetConfig+0x212>
 800c4b8:	2380      	movs	r3, #128	; 0x80
 800c4ba:	005b      	lsls	r3, r3, #1
 800c4bc:	e016      	b.n	800c4ec <USART_SetConfig+0x240>
 800c4be:	2301      	movs	r3, #1
 800c4c0:	e014      	b.n	800c4ec <USART_SetConfig+0x240>
 800c4c2:	2380      	movs	r3, #128	; 0x80
 800c4c4:	e012      	b.n	800c4ec <USART_SetConfig+0x240>
 800c4c6:	2340      	movs	r3, #64	; 0x40
 800c4c8:	e010      	b.n	800c4ec <USART_SetConfig+0x240>
 800c4ca:	2320      	movs	r3, #32
 800c4cc:	e00e      	b.n	800c4ec <USART_SetConfig+0x240>
 800c4ce:	2310      	movs	r3, #16
 800c4d0:	e00c      	b.n	800c4ec <USART_SetConfig+0x240>
 800c4d2:	230c      	movs	r3, #12
 800c4d4:	e00a      	b.n	800c4ec <USART_SetConfig+0x240>
 800c4d6:	230a      	movs	r3, #10
 800c4d8:	e008      	b.n	800c4ec <USART_SetConfig+0x240>
 800c4da:	2308      	movs	r3, #8
 800c4dc:	e006      	b.n	800c4ec <USART_SetConfig+0x240>
 800c4de:	2306      	movs	r3, #6
 800c4e0:	e004      	b.n	800c4ec <USART_SetConfig+0x240>
 800c4e2:	2304      	movs	r3, #4
 800c4e4:	e002      	b.n	800c4ec <USART_SetConfig+0x240>
 800c4e6:	2302      	movs	r3, #2
 800c4e8:	e000      	b.n	800c4ec <USART_SetConfig+0x240>
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	0019      	movs	r1, r3
 800c4ee:	6938      	ldr	r0, [r7, #16]
 800c4f0:	f7f3 fe08 	bl	8000104 <__udivsi3>
 800c4f4:	0003      	movs	r3, r0
 800c4f6:	005a      	lsls	r2, r3, #1
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	685b      	ldr	r3, [r3, #4]
 800c4fc:	085b      	lsrs	r3, r3, #1
 800c4fe:	18d2      	adds	r2, r2, r3
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	685b      	ldr	r3, [r3, #4]
 800c504:	0019      	movs	r1, r3
 800c506:	0010      	movs	r0, r2
 800c508:	f7f3 fdfc 	bl	8000104 <__udivsi3>
 800c50c:	0003      	movs	r3, r0
 800c50e:	61bb      	str	r3, [r7, #24]
      break;
 800c510:	e12e      	b.n	800c770 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c516:	2b00      	cmp	r3, #0
 800c518:	d052      	beq.n	800c5c0 <USART_SetConfig+0x314>
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c51e:	2b01      	cmp	r3, #1
 800c520:	d03e      	beq.n	800c5a0 <USART_SetConfig+0x2f4>
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c526:	2b02      	cmp	r3, #2
 800c528:	d038      	beq.n	800c59c <USART_SetConfig+0x2f0>
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c52e:	2b03      	cmp	r3, #3
 800c530:	d032      	beq.n	800c598 <USART_SetConfig+0x2ec>
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c536:	2b04      	cmp	r3, #4
 800c538:	d02c      	beq.n	800c594 <USART_SetConfig+0x2e8>
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c53e:	2b05      	cmp	r3, #5
 800c540:	d026      	beq.n	800c590 <USART_SetConfig+0x2e4>
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c546:	2b06      	cmp	r3, #6
 800c548:	d020      	beq.n	800c58c <USART_SetConfig+0x2e0>
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c54e:	2b07      	cmp	r3, #7
 800c550:	d01a      	beq.n	800c588 <USART_SetConfig+0x2dc>
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c556:	2b08      	cmp	r3, #8
 800c558:	d014      	beq.n	800c584 <USART_SetConfig+0x2d8>
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c55e:	2b09      	cmp	r3, #9
 800c560:	d00e      	beq.n	800c580 <USART_SetConfig+0x2d4>
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c566:	2b0a      	cmp	r3, #10
 800c568:	d008      	beq.n	800c57c <USART_SetConfig+0x2d0>
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c56e:	2b0b      	cmp	r3, #11
 800c570:	d102      	bne.n	800c578 <USART_SetConfig+0x2cc>
 800c572:	2380      	movs	r3, #128	; 0x80
 800c574:	005b      	lsls	r3, r3, #1
 800c576:	e024      	b.n	800c5c2 <USART_SetConfig+0x316>
 800c578:	2301      	movs	r3, #1
 800c57a:	e022      	b.n	800c5c2 <USART_SetConfig+0x316>
 800c57c:	2380      	movs	r3, #128	; 0x80
 800c57e:	e020      	b.n	800c5c2 <USART_SetConfig+0x316>
 800c580:	2340      	movs	r3, #64	; 0x40
 800c582:	e01e      	b.n	800c5c2 <USART_SetConfig+0x316>
 800c584:	2320      	movs	r3, #32
 800c586:	e01c      	b.n	800c5c2 <USART_SetConfig+0x316>
 800c588:	2310      	movs	r3, #16
 800c58a:	e01a      	b.n	800c5c2 <USART_SetConfig+0x316>
 800c58c:	230c      	movs	r3, #12
 800c58e:	e018      	b.n	800c5c2 <USART_SetConfig+0x316>
 800c590:	230a      	movs	r3, #10
 800c592:	e016      	b.n	800c5c2 <USART_SetConfig+0x316>
 800c594:	2308      	movs	r3, #8
 800c596:	e014      	b.n	800c5c2 <USART_SetConfig+0x316>
 800c598:	2306      	movs	r3, #6
 800c59a:	e012      	b.n	800c5c2 <USART_SetConfig+0x316>
 800c59c:	2304      	movs	r3, #4
 800c59e:	e010      	b.n	800c5c2 <USART_SetConfig+0x316>
 800c5a0:	2302      	movs	r3, #2
 800c5a2:	e00e      	b.n	800c5c2 <USART_SetConfig+0x316>
 800c5a4:	cfff69f3 	.word	0xcfff69f3
 800c5a8:	ffffc0f6 	.word	0xffffc0f6
 800c5ac:	40013800 	.word	0x40013800
 800c5b0:	40021000 	.word	0x40021000
 800c5b4:	40004400 	.word	0x40004400
 800c5b8:	40004800 	.word	0x40004800
 800c5bc:	40004c00 	.word	0x40004c00
 800c5c0:	2301      	movs	r3, #1
 800c5c2:	0019      	movs	r1, r3
 800c5c4:	4886      	ldr	r0, [pc, #536]	; (800c7e0 <USART_SetConfig+0x534>)
 800c5c6:	f7f3 fd9d 	bl	8000104 <__udivsi3>
 800c5ca:	0003      	movs	r3, r0
 800c5cc:	005a      	lsls	r2, r3, #1
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	685b      	ldr	r3, [r3, #4]
 800c5d2:	085b      	lsrs	r3, r3, #1
 800c5d4:	18d2      	adds	r2, r2, r3
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	685b      	ldr	r3, [r3, #4]
 800c5da:	0019      	movs	r1, r3
 800c5dc:	0010      	movs	r0, r2
 800c5de:	f7f3 fd91 	bl	8000104 <__udivsi3>
 800c5e2:	0003      	movs	r3, r0
 800c5e4:	61bb      	str	r3, [r7, #24]
      break;
 800c5e6:	e0c3      	b.n	800c770 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 800c5e8:	f7fb ffac 	bl	8008544 <HAL_RCC_GetSysClockFreq>
 800c5ec:	0003      	movs	r3, r0
 800c5ee:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d044      	beq.n	800c682 <USART_SetConfig+0x3d6>
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5fc:	2b01      	cmp	r3, #1
 800c5fe:	d03e      	beq.n	800c67e <USART_SetConfig+0x3d2>
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c604:	2b02      	cmp	r3, #2
 800c606:	d038      	beq.n	800c67a <USART_SetConfig+0x3ce>
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c60c:	2b03      	cmp	r3, #3
 800c60e:	d032      	beq.n	800c676 <USART_SetConfig+0x3ca>
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c614:	2b04      	cmp	r3, #4
 800c616:	d02c      	beq.n	800c672 <USART_SetConfig+0x3c6>
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c61c:	2b05      	cmp	r3, #5
 800c61e:	d026      	beq.n	800c66e <USART_SetConfig+0x3c2>
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c624:	2b06      	cmp	r3, #6
 800c626:	d020      	beq.n	800c66a <USART_SetConfig+0x3be>
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c62c:	2b07      	cmp	r3, #7
 800c62e:	d01a      	beq.n	800c666 <USART_SetConfig+0x3ba>
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c634:	2b08      	cmp	r3, #8
 800c636:	d014      	beq.n	800c662 <USART_SetConfig+0x3b6>
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c63c:	2b09      	cmp	r3, #9
 800c63e:	d00e      	beq.n	800c65e <USART_SetConfig+0x3b2>
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c644:	2b0a      	cmp	r3, #10
 800c646:	d008      	beq.n	800c65a <USART_SetConfig+0x3ae>
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c64c:	2b0b      	cmp	r3, #11
 800c64e:	d102      	bne.n	800c656 <USART_SetConfig+0x3aa>
 800c650:	2380      	movs	r3, #128	; 0x80
 800c652:	005b      	lsls	r3, r3, #1
 800c654:	e016      	b.n	800c684 <USART_SetConfig+0x3d8>
 800c656:	2301      	movs	r3, #1
 800c658:	e014      	b.n	800c684 <USART_SetConfig+0x3d8>
 800c65a:	2380      	movs	r3, #128	; 0x80
 800c65c:	e012      	b.n	800c684 <USART_SetConfig+0x3d8>
 800c65e:	2340      	movs	r3, #64	; 0x40
 800c660:	e010      	b.n	800c684 <USART_SetConfig+0x3d8>
 800c662:	2320      	movs	r3, #32
 800c664:	e00e      	b.n	800c684 <USART_SetConfig+0x3d8>
 800c666:	2310      	movs	r3, #16
 800c668:	e00c      	b.n	800c684 <USART_SetConfig+0x3d8>
 800c66a:	230c      	movs	r3, #12
 800c66c:	e00a      	b.n	800c684 <USART_SetConfig+0x3d8>
 800c66e:	230a      	movs	r3, #10
 800c670:	e008      	b.n	800c684 <USART_SetConfig+0x3d8>
 800c672:	2308      	movs	r3, #8
 800c674:	e006      	b.n	800c684 <USART_SetConfig+0x3d8>
 800c676:	2306      	movs	r3, #6
 800c678:	e004      	b.n	800c684 <USART_SetConfig+0x3d8>
 800c67a:	2304      	movs	r3, #4
 800c67c:	e002      	b.n	800c684 <USART_SetConfig+0x3d8>
 800c67e:	2302      	movs	r3, #2
 800c680:	e000      	b.n	800c684 <USART_SetConfig+0x3d8>
 800c682:	2301      	movs	r3, #1
 800c684:	0019      	movs	r1, r3
 800c686:	6938      	ldr	r0, [r7, #16]
 800c688:	f7f3 fd3c 	bl	8000104 <__udivsi3>
 800c68c:	0003      	movs	r3, r0
 800c68e:	005a      	lsls	r2, r3, #1
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	685b      	ldr	r3, [r3, #4]
 800c694:	085b      	lsrs	r3, r3, #1
 800c696:	18d2      	adds	r2, r2, r3
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	685b      	ldr	r3, [r3, #4]
 800c69c:	0019      	movs	r1, r3
 800c69e:	0010      	movs	r0, r2
 800c6a0:	f7f3 fd30 	bl	8000104 <__udivsi3>
 800c6a4:	0003      	movs	r3, r0
 800c6a6:	61bb      	str	r3, [r7, #24]
      break;
 800c6a8:	e062      	b.n	800c770 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8((uint32_t)LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d044      	beq.n	800c73c <USART_SetConfig+0x490>
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6b6:	2b01      	cmp	r3, #1
 800c6b8:	d03e      	beq.n	800c738 <USART_SetConfig+0x48c>
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6be:	2b02      	cmp	r3, #2
 800c6c0:	d038      	beq.n	800c734 <USART_SetConfig+0x488>
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6c6:	2b03      	cmp	r3, #3
 800c6c8:	d032      	beq.n	800c730 <USART_SetConfig+0x484>
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6ce:	2b04      	cmp	r3, #4
 800c6d0:	d02c      	beq.n	800c72c <USART_SetConfig+0x480>
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6d6:	2b05      	cmp	r3, #5
 800c6d8:	d026      	beq.n	800c728 <USART_SetConfig+0x47c>
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6de:	2b06      	cmp	r3, #6
 800c6e0:	d020      	beq.n	800c724 <USART_SetConfig+0x478>
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6e6:	2b07      	cmp	r3, #7
 800c6e8:	d01a      	beq.n	800c720 <USART_SetConfig+0x474>
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6ee:	2b08      	cmp	r3, #8
 800c6f0:	d014      	beq.n	800c71c <USART_SetConfig+0x470>
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6f6:	2b09      	cmp	r3, #9
 800c6f8:	d00e      	beq.n	800c718 <USART_SetConfig+0x46c>
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6fe:	2b0a      	cmp	r3, #10
 800c700:	d008      	beq.n	800c714 <USART_SetConfig+0x468>
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c706:	2b0b      	cmp	r3, #11
 800c708:	d102      	bne.n	800c710 <USART_SetConfig+0x464>
 800c70a:	2380      	movs	r3, #128	; 0x80
 800c70c:	005b      	lsls	r3, r3, #1
 800c70e:	e016      	b.n	800c73e <USART_SetConfig+0x492>
 800c710:	2301      	movs	r3, #1
 800c712:	e014      	b.n	800c73e <USART_SetConfig+0x492>
 800c714:	2380      	movs	r3, #128	; 0x80
 800c716:	e012      	b.n	800c73e <USART_SetConfig+0x492>
 800c718:	2340      	movs	r3, #64	; 0x40
 800c71a:	e010      	b.n	800c73e <USART_SetConfig+0x492>
 800c71c:	2320      	movs	r3, #32
 800c71e:	e00e      	b.n	800c73e <USART_SetConfig+0x492>
 800c720:	2310      	movs	r3, #16
 800c722:	e00c      	b.n	800c73e <USART_SetConfig+0x492>
 800c724:	230c      	movs	r3, #12
 800c726:	e00a      	b.n	800c73e <USART_SetConfig+0x492>
 800c728:	230a      	movs	r3, #10
 800c72a:	e008      	b.n	800c73e <USART_SetConfig+0x492>
 800c72c:	2308      	movs	r3, #8
 800c72e:	e006      	b.n	800c73e <USART_SetConfig+0x492>
 800c730:	2306      	movs	r3, #6
 800c732:	e004      	b.n	800c73e <USART_SetConfig+0x492>
 800c734:	2304      	movs	r3, #4
 800c736:	e002      	b.n	800c73e <USART_SetConfig+0x492>
 800c738:	2302      	movs	r3, #2
 800c73a:	e000      	b.n	800c73e <USART_SetConfig+0x492>
 800c73c:	2301      	movs	r3, #1
 800c73e:	0019      	movs	r1, r3
 800c740:	2380      	movs	r3, #128	; 0x80
 800c742:	0218      	lsls	r0, r3, #8
 800c744:	f7f3 fcde 	bl	8000104 <__udivsi3>
 800c748:	0003      	movs	r3, r0
 800c74a:	005a      	lsls	r2, r3, #1
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	685b      	ldr	r3, [r3, #4]
 800c750:	085b      	lsrs	r3, r3, #1
 800c752:	18d2      	adds	r2, r2, r3
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	685b      	ldr	r3, [r3, #4]
 800c758:	0019      	movs	r1, r3
 800c75a:	0010      	movs	r0, r2
 800c75c:	f7f3 fcd2 	bl	8000104 <__udivsi3>
 800c760:	0003      	movs	r3, r0
 800c762:	61bb      	str	r3, [r7, #24]
      break;
 800c764:	e004      	b.n	800c770 <USART_SetConfig+0x4c4>
    default:
      ret = HAL_ERROR;
 800c766:	231e      	movs	r3, #30
 800c768:	18fb      	adds	r3, r7, r3
 800c76a:	2201      	movs	r2, #1
 800c76c:	701a      	strb	r2, [r3, #0]
      break;
 800c76e:	46c0      	nop			; (mov r8, r8)
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800c770:	69bb      	ldr	r3, [r7, #24]
 800c772:	2b0f      	cmp	r3, #15
 800c774:	d91c      	bls.n	800c7b0 <USART_SetConfig+0x504>
 800c776:	69ba      	ldr	r2, [r7, #24]
 800c778:	2380      	movs	r3, #128	; 0x80
 800c77a:	025b      	lsls	r3, r3, #9
 800c77c:	429a      	cmp	r2, r3
 800c77e:	d217      	bcs.n	800c7b0 <USART_SetConfig+0x504>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c780:	69bb      	ldr	r3, [r7, #24]
 800c782:	b29a      	uxth	r2, r3
 800c784:	200e      	movs	r0, #14
 800c786:	183b      	adds	r3, r7, r0
 800c788:	210f      	movs	r1, #15
 800c78a:	438a      	bics	r2, r1
 800c78c:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c78e:	69bb      	ldr	r3, [r7, #24]
 800c790:	085b      	lsrs	r3, r3, #1
 800c792:	b29b      	uxth	r3, r3
 800c794:	2207      	movs	r2, #7
 800c796:	4013      	ands	r3, r2
 800c798:	b299      	uxth	r1, r3
 800c79a:	183b      	adds	r3, r7, r0
 800c79c:	183a      	adds	r2, r7, r0
 800c79e:	8812      	ldrh	r2, [r2, #0]
 800c7a0:	430a      	orrs	r2, r1
 800c7a2:	801a      	strh	r2, [r3, #0]
    husart->Instance->BRR = brrtemp;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	183a      	adds	r2, r7, r0
 800c7aa:	8812      	ldrh	r2, [r2, #0]
 800c7ac:	60da      	str	r2, [r3, #12]
 800c7ae:	e003      	b.n	800c7b8 <USART_SetConfig+0x50c>
  }
  else
  {
    ret = HAL_ERROR;
 800c7b0:	231e      	movs	r3, #30
 800c7b2:	18fb      	adds	r3, r7, r3
 800c7b4:	2201      	movs	r2, #1
 800c7b6:	701a      	strb	r2, [r3, #0]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2201      	movs	r2, #1
 800c7bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2201      	movs	r2, #1
 800c7c2:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 800c7d0:	231e      	movs	r3, #30
 800c7d2:	18fb      	adds	r3, r7, r3
 800c7d4:	781b      	ldrb	r3, [r3, #0]
}
 800c7d6:	0018      	movs	r0, r3
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	b008      	add	sp, #32
 800c7dc:	bd80      	pop	{r7, pc}
 800c7de:	46c0      	nop			; (mov r8, r8)
 800c7e0:	00f42400 	.word	0x00f42400

0800c7e4 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b086      	sub	sp, #24
 800c7e8:	af02      	add	r7, sp, #8
 800c7ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c7f2:	f7f8 fdef 	bl	80053d4 <HAL_GetTick>
 800c7f6:	0003      	movs	r3, r0
 800c7f8:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	2208      	movs	r2, #8
 800c802:	4013      	ands	r3, r2
 800c804:	2b08      	cmp	r3, #8
 800c806:	d10e      	bne.n	800c826 <USART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800c808:	68fa      	ldr	r2, [r7, #12]
 800c80a:	2380      	movs	r3, #128	; 0x80
 800c80c:	0399      	lsls	r1, r3, #14
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	23fa      	movs	r3, #250	; 0xfa
 800c812:	009b      	lsls	r3, r3, #2
 800c814:	9300      	str	r3, [sp, #0]
 800c816:	0013      	movs	r3, r2
 800c818:	2200      	movs	r2, #0
 800c81a:	f7ff fd11 	bl	800c240 <USART_WaitOnFlagUntilTimeout>
 800c81e:	1e03      	subs	r3, r0, #0
 800c820:	d001      	beq.n	800c826 <USART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c822:	2303      	movs	r3, #3
 800c824:	e01e      	b.n	800c864 <USART_CheckIdleState+0x80>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	2204      	movs	r2, #4
 800c82e:	4013      	ands	r3, r2
 800c830:	2b04      	cmp	r3, #4
 800c832:	d10e      	bne.n	800c852 <USART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800c834:	68fa      	ldr	r2, [r7, #12]
 800c836:	2380      	movs	r3, #128	; 0x80
 800c838:	03d9      	lsls	r1, r3, #15
 800c83a:	6878      	ldr	r0, [r7, #4]
 800c83c:	23fa      	movs	r3, #250	; 0xfa
 800c83e:	009b      	lsls	r3, r3, #2
 800c840:	9300      	str	r3, [sp, #0]
 800c842:	0013      	movs	r3, r2
 800c844:	2200      	movs	r2, #0
 800c846:	f7ff fcfb 	bl	800c240 <USART_WaitOnFlagUntilTimeout>
 800c84a:	1e03      	subs	r3, r0, #0
 800c84c:	d001      	beq.n	800c852 <USART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c84e:	2303      	movs	r3, #3
 800c850:	e008      	b.n	800c864 <USART_CheckIdleState+0x80>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2259      	movs	r2, #89	; 0x59
 800c856:	2101      	movs	r1, #1
 800c858:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2258      	movs	r2, #88	; 0x58
 800c85e:	2100      	movs	r1, #0
 800c860:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c862:	2300      	movs	r3, #0
}
 800c864:	0018      	movs	r0, r3
 800c866:	46bd      	mov	sp, r7
 800c868:	b004      	add	sp, #16
 800c86a:	bd80      	pop	{r7, pc}

0800c86c <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b082      	sub	sp, #8
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	681a      	ldr	r2, [r3, #0]
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	2140      	movs	r1, #64	; 0x40
 800c880:	438a      	bics	r2, r1
 800c882:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	689a      	ldr	r2, [r3, #8]
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	2101      	movs	r1, #1
 800c890:	438a      	bics	r2, r1
 800c892:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2200      	movs	r2, #0
 800c898:	64da      	str	r2, [r3, #76]	; 0x4c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2259      	movs	r2, #89	; 0x59
 800c89e:	5c9b      	ldrb	r3, [r3, r2]
 800c8a0:	b2db      	uxtb	r3, r3
 800c8a2:	2b12      	cmp	r3, #18
 800c8a4:	d114      	bne.n	800c8d0 <USART_EndTransmit_IT+0x64>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	2208      	movs	r2, #8
 800c8ac:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	699a      	ldr	r2, [r3, #24]
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	2108      	movs	r1, #8
 800c8ba:	430a      	orrs	r2, r1
 800c8bc:	619a      	str	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2259      	movs	r2, #89	; 0x59
 800c8c2:	2101      	movs	r1, #1
 800c8c4:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	0018      	movs	r0, r3
 800c8ca:	f7f6 fb75 	bl	8002fb8 <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c8ce:	e00c      	b.n	800c8ea <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c8d4:	b29b      	uxth	r3, r3
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d107      	bne.n	800c8ea <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2259      	movs	r2, #89	; 0x59
 800c8de:	2101      	movs	r1, #1
 800c8e0:	5499      	strb	r1, [r3, r2]
    HAL_USART_TxRxCpltCallback(husart);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	0018      	movs	r0, r3
 800c8e6:	f7ff fbff 	bl	800c0e8 <HAL_USART_TxRxCpltCallback>
}
 800c8ea:	46c0      	nop			; (mov r8, r8)
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	b002      	add	sp, #8
 800c8f0:	bd80      	pop	{r7, pc}

0800c8f2 <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
 800c8f2:	b580      	push	{r7, lr}
 800c8f4:	b082      	sub	sp, #8
 800c8f6:	af00      	add	r7, sp, #0
 800c8f8:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c8fa:	46c0      	nop			; (mov r8, r8)
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	b002      	add	sp, #8
 800c900:	bd80      	pop	{r7, pc}

0800c902 <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
 800c902:	b580      	push	{r7, lr}
 800c904:	b082      	sub	sp, #8
 800c906:	af00      	add	r7, sp, #0
 800c908:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c90a:	46c0      	nop			; (mov r8, r8)
 800c90c:	46bd      	mov	sp, r7
 800c90e:	b002      	add	sp, #8
 800c910:	bd80      	pop	{r7, pc}

0800c912 <LL_GPIO_SetPinMode>:
{
 800c912:	b580      	push	{r7, lr}
 800c914:	b084      	sub	sp, #16
 800c916:	af00      	add	r7, sp, #0
 800c918:	60f8      	str	r0, [r7, #12]
 800c91a:	60b9      	str	r1, [r7, #8]
 800c91c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	6819      	ldr	r1, [r3, #0]
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	435b      	muls	r3, r3
 800c926:	001a      	movs	r2, r3
 800c928:	0013      	movs	r3, r2
 800c92a:	005b      	lsls	r3, r3, #1
 800c92c:	189b      	adds	r3, r3, r2
 800c92e:	43db      	mvns	r3, r3
 800c930:	400b      	ands	r3, r1
 800c932:	001a      	movs	r2, r3
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	435b      	muls	r3, r3
 800c938:	6879      	ldr	r1, [r7, #4]
 800c93a:	434b      	muls	r3, r1
 800c93c:	431a      	orrs	r2, r3
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	601a      	str	r2, [r3, #0]
}
 800c942:	46c0      	nop			; (mov r8, r8)
 800c944:	46bd      	mov	sp, r7
 800c946:	b004      	add	sp, #16
 800c948:	bd80      	pop	{r7, pc}

0800c94a <LL_GPIO_SetPinOutputType>:
{
 800c94a:	b580      	push	{r7, lr}
 800c94c:	b084      	sub	sp, #16
 800c94e:	af00      	add	r7, sp, #0
 800c950:	60f8      	str	r0, [r7, #12]
 800c952:	60b9      	str	r1, [r7, #8]
 800c954:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	685b      	ldr	r3, [r3, #4]
 800c95a:	68ba      	ldr	r2, [r7, #8]
 800c95c:	43d2      	mvns	r2, r2
 800c95e:	401a      	ands	r2, r3
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	6879      	ldr	r1, [r7, #4]
 800c964:	434b      	muls	r3, r1
 800c966:	431a      	orrs	r2, r3
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	605a      	str	r2, [r3, #4]
}
 800c96c:	46c0      	nop			; (mov r8, r8)
 800c96e:	46bd      	mov	sp, r7
 800c970:	b004      	add	sp, #16
 800c972:	bd80      	pop	{r7, pc}

0800c974 <LL_GPIO_SetPinSpeed>:
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b084      	sub	sp, #16
 800c978:	af00      	add	r7, sp, #0
 800c97a:	60f8      	str	r0, [r7, #12]
 800c97c:	60b9      	str	r1, [r7, #8]
 800c97e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	6899      	ldr	r1, [r3, #8]
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	435b      	muls	r3, r3
 800c988:	001a      	movs	r2, r3
 800c98a:	0013      	movs	r3, r2
 800c98c:	005b      	lsls	r3, r3, #1
 800c98e:	189b      	adds	r3, r3, r2
 800c990:	43db      	mvns	r3, r3
 800c992:	400b      	ands	r3, r1
 800c994:	001a      	movs	r2, r3
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	435b      	muls	r3, r3
 800c99a:	6879      	ldr	r1, [r7, #4]
 800c99c:	434b      	muls	r3, r1
 800c99e:	431a      	orrs	r2, r3
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	609a      	str	r2, [r3, #8]
}
 800c9a4:	46c0      	nop			; (mov r8, r8)
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	b004      	add	sp, #16
 800c9aa:	bd80      	pop	{r7, pc}

0800c9ac <LL_GPIO_SetPinPull>:
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b084      	sub	sp, #16
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	60f8      	str	r0, [r7, #12]
 800c9b4:	60b9      	str	r1, [r7, #8]
 800c9b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	68d9      	ldr	r1, [r3, #12]
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	435b      	muls	r3, r3
 800c9c0:	001a      	movs	r2, r3
 800c9c2:	0013      	movs	r3, r2
 800c9c4:	005b      	lsls	r3, r3, #1
 800c9c6:	189b      	adds	r3, r3, r2
 800c9c8:	43db      	mvns	r3, r3
 800c9ca:	400b      	ands	r3, r1
 800c9cc:	001a      	movs	r2, r3
 800c9ce:	68bb      	ldr	r3, [r7, #8]
 800c9d0:	435b      	muls	r3, r3
 800c9d2:	6879      	ldr	r1, [r7, #4]
 800c9d4:	434b      	muls	r3, r1
 800c9d6:	431a      	orrs	r2, r3
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	60da      	str	r2, [r3, #12]
}
 800c9dc:	46c0      	nop			; (mov r8, r8)
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	b004      	add	sp, #16
 800c9e2:	bd80      	pop	{r7, pc}

0800c9e4 <LL_GPIO_SetAFPin_0_7>:
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b084      	sub	sp, #16
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	60f8      	str	r0, [r7, #12]
 800c9ec:	60b9      	str	r1, [r7, #8]
 800c9ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	6a19      	ldr	r1, [r3, #32]
 800c9f4:	68bb      	ldr	r3, [r7, #8]
 800c9f6:	435b      	muls	r3, r3
 800c9f8:	68ba      	ldr	r2, [r7, #8]
 800c9fa:	4353      	muls	r3, r2
 800c9fc:	68ba      	ldr	r2, [r7, #8]
 800c9fe:	435a      	muls	r2, r3
 800ca00:	0013      	movs	r3, r2
 800ca02:	011b      	lsls	r3, r3, #4
 800ca04:	1a9b      	subs	r3, r3, r2
 800ca06:	43db      	mvns	r3, r3
 800ca08:	400b      	ands	r3, r1
 800ca0a:	001a      	movs	r2, r3
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	435b      	muls	r3, r3
 800ca10:	68b9      	ldr	r1, [r7, #8]
 800ca12:	434b      	muls	r3, r1
 800ca14:	68b9      	ldr	r1, [r7, #8]
 800ca16:	434b      	muls	r3, r1
 800ca18:	6879      	ldr	r1, [r7, #4]
 800ca1a:	434b      	muls	r3, r1
 800ca1c:	431a      	orrs	r2, r3
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	621a      	str	r2, [r3, #32]
}
 800ca22:	46c0      	nop			; (mov r8, r8)
 800ca24:	46bd      	mov	sp, r7
 800ca26:	b004      	add	sp, #16
 800ca28:	bd80      	pop	{r7, pc}

0800ca2a <LL_GPIO_SetAFPin_8_15>:
{
 800ca2a:	b580      	push	{r7, lr}
 800ca2c:	b084      	sub	sp, #16
 800ca2e:	af00      	add	r7, sp, #0
 800ca30:	60f8      	str	r0, [r7, #12]
 800ca32:	60b9      	str	r1, [r7, #8]
 800ca34:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800ca3a:	68bb      	ldr	r3, [r7, #8]
 800ca3c:	0a1b      	lsrs	r3, r3, #8
 800ca3e:	68ba      	ldr	r2, [r7, #8]
 800ca40:	0a12      	lsrs	r2, r2, #8
 800ca42:	4353      	muls	r3, r2
 800ca44:	68ba      	ldr	r2, [r7, #8]
 800ca46:	0a12      	lsrs	r2, r2, #8
 800ca48:	4353      	muls	r3, r2
 800ca4a:	68ba      	ldr	r2, [r7, #8]
 800ca4c:	0a12      	lsrs	r2, r2, #8
 800ca4e:	435a      	muls	r2, r3
 800ca50:	0013      	movs	r3, r2
 800ca52:	011b      	lsls	r3, r3, #4
 800ca54:	1a9b      	subs	r3, r3, r2
 800ca56:	43db      	mvns	r3, r3
 800ca58:	400b      	ands	r3, r1
 800ca5a:	001a      	movs	r2, r3
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	0a1b      	lsrs	r3, r3, #8
 800ca60:	68b9      	ldr	r1, [r7, #8]
 800ca62:	0a09      	lsrs	r1, r1, #8
 800ca64:	434b      	muls	r3, r1
 800ca66:	68b9      	ldr	r1, [r7, #8]
 800ca68:	0a09      	lsrs	r1, r1, #8
 800ca6a:	434b      	muls	r3, r1
 800ca6c:	68b9      	ldr	r1, [r7, #8]
 800ca6e:	0a09      	lsrs	r1, r1, #8
 800ca70:	434b      	muls	r3, r1
 800ca72:	6879      	ldr	r1, [r7, #4]
 800ca74:	434b      	muls	r3, r1
 800ca76:	431a      	orrs	r2, r3
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800ca7c:	46c0      	nop			; (mov r8, r8)
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	b004      	add	sp, #16
 800ca82:	bd80      	pop	{r7, pc}

0800ca84 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b084      	sub	sp, #16
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800ca92:	e047      	b.n	800cb24 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	2101      	movs	r1, #1
 800ca9a:	68fa      	ldr	r2, [r7, #12]
 800ca9c:	4091      	lsls	r1, r2
 800ca9e:	000a      	movs	r2, r1
 800caa0:	4013      	ands	r3, r2
 800caa2:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d039      	beq.n	800cb1e <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	685b      	ldr	r3, [r3, #4]
 800caae:	2b01      	cmp	r3, #1
 800cab0:	d003      	beq.n	800caba <LL_GPIO_Init+0x36>
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	685b      	ldr	r3, [r3, #4]
 800cab6:	2b02      	cmp	r3, #2
 800cab8:	d10d      	bne.n	800cad6 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	689a      	ldr	r2, [r3, #8]
 800cabe:	68b9      	ldr	r1, [r7, #8]
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	0018      	movs	r0, r3
 800cac4:	f7ff ff56 	bl	800c974 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	68da      	ldr	r2, [r3, #12]
 800cacc:	68b9      	ldr	r1, [r7, #8]
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	0018      	movs	r0, r3
 800cad2:	f7ff ff3a 	bl	800c94a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	691a      	ldr	r2, [r3, #16]
 800cada:	68b9      	ldr	r1, [r7, #8]
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	0018      	movs	r0, r3
 800cae0:	f7ff ff64 	bl	800c9ac <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	685b      	ldr	r3, [r3, #4]
 800cae8:	2b02      	cmp	r3, #2
 800caea:	d111      	bne.n	800cb10 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800caec:	68bb      	ldr	r3, [r7, #8]
 800caee:	2bff      	cmp	r3, #255	; 0xff
 800caf0:	d807      	bhi.n	800cb02 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	695a      	ldr	r2, [r3, #20]
 800caf6:	68b9      	ldr	r1, [r7, #8]
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	0018      	movs	r0, r3
 800cafc:	f7ff ff72 	bl	800c9e4 <LL_GPIO_SetAFPin_0_7>
 800cb00:	e006      	b.n	800cb10 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	695a      	ldr	r2, [r3, #20]
 800cb06:	68b9      	ldr	r1, [r7, #8]
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	0018      	movs	r0, r3
 800cb0c:	f7ff ff8d 	bl	800ca2a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	685a      	ldr	r2, [r3, #4]
 800cb14:	68b9      	ldr	r1, [r7, #8]
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	0018      	movs	r0, r3
 800cb1a:	f7ff fefa 	bl	800c912 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	3301      	adds	r3, #1
 800cb22:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	681a      	ldr	r2, [r3, #0]
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	40da      	lsrs	r2, r3
 800cb2c:	1e13      	subs	r3, r2, #0
 800cb2e:	d1b1      	bne.n	800ca94 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800cb30:	2300      	movs	r3, #0
}
 800cb32:	0018      	movs	r0, r3
 800cb34:	46bd      	mov	sp, r7
 800cb36:	b004      	add	sp, #16
 800cb38:	bd80      	pop	{r7, pc}
	...

0800cb3c <LL_RCC_HSI_IsReady>:
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800cb40:	4b07      	ldr	r3, [pc, #28]	; (800cb60 <LL_RCC_HSI_IsReady+0x24>)
 800cb42:	681a      	ldr	r2, [r3, #0]
 800cb44:	2380      	movs	r3, #128	; 0x80
 800cb46:	00db      	lsls	r3, r3, #3
 800cb48:	401a      	ands	r2, r3
 800cb4a:	2380      	movs	r3, #128	; 0x80
 800cb4c:	00db      	lsls	r3, r3, #3
 800cb4e:	429a      	cmp	r2, r3
 800cb50:	d101      	bne.n	800cb56 <LL_RCC_HSI_IsReady+0x1a>
 800cb52:	2301      	movs	r3, #1
 800cb54:	e000      	b.n	800cb58 <LL_RCC_HSI_IsReady+0x1c>
 800cb56:	2300      	movs	r3, #0
}
 800cb58:	0018      	movs	r0, r3
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}
 800cb5e:	46c0      	nop			; (mov r8, r8)
 800cb60:	40021000 	.word	0x40021000

0800cb64 <LL_RCC_LSE_IsReady>:
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800cb68:	4b05      	ldr	r3, [pc, #20]	; (800cb80 <LL_RCC_LSE_IsReady+0x1c>)
 800cb6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb6c:	2202      	movs	r2, #2
 800cb6e:	4013      	ands	r3, r2
 800cb70:	2b02      	cmp	r3, #2
 800cb72:	d101      	bne.n	800cb78 <LL_RCC_LSE_IsReady+0x14>
 800cb74:	2301      	movs	r3, #1
 800cb76:	e000      	b.n	800cb7a <LL_RCC_LSE_IsReady+0x16>
 800cb78:	2300      	movs	r3, #0
}
 800cb7a:	0018      	movs	r0, r3
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd80      	pop	{r7, pc}
 800cb80:	40021000 	.word	0x40021000

0800cb84 <LL_RCC_GetSysClkSource>:
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800cb88:	4b03      	ldr	r3, [pc, #12]	; (800cb98 <LL_RCC_GetSysClkSource+0x14>)
 800cb8a:	689b      	ldr	r3, [r3, #8]
 800cb8c:	2238      	movs	r2, #56	; 0x38
 800cb8e:	4013      	ands	r3, r2
}
 800cb90:	0018      	movs	r0, r3
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bd80      	pop	{r7, pc}
 800cb96:	46c0      	nop			; (mov r8, r8)
 800cb98:	40021000 	.word	0x40021000

0800cb9c <LL_RCC_GetAHBPrescaler>:
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800cba0:	4b03      	ldr	r3, [pc, #12]	; (800cbb0 <LL_RCC_GetAHBPrescaler+0x14>)
 800cba2:	689a      	ldr	r2, [r3, #8]
 800cba4:	23f0      	movs	r3, #240	; 0xf0
 800cba6:	011b      	lsls	r3, r3, #4
 800cba8:	4013      	ands	r3, r2
}
 800cbaa:	0018      	movs	r0, r3
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd80      	pop	{r7, pc}
 800cbb0:	40021000 	.word	0x40021000

0800cbb4 <LL_RCC_GetAPB1Prescaler>:
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800cbb8:	4b03      	ldr	r3, [pc, #12]	; (800cbc8 <LL_RCC_GetAPB1Prescaler+0x14>)
 800cbba:	689a      	ldr	r2, [r3, #8]
 800cbbc:	23e0      	movs	r3, #224	; 0xe0
 800cbbe:	01db      	lsls	r3, r3, #7
 800cbc0:	4013      	ands	r3, r2
}
 800cbc2:	0018      	movs	r0, r3
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}
 800cbc8:	40021000 	.word	0x40021000

0800cbcc <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  * (*) feature not available on all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b082      	sub	sp, #8
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800cbd4:	4b05      	ldr	r3, [pc, #20]	; (800cbec <LL_RCC_GetUSARTClockSource+0x20>)
 800cbd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbd8:	687a      	ldr	r2, [r7, #4]
 800cbda:	401a      	ands	r2, r3
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	041b      	lsls	r3, r3, #16
 800cbe0:	4313      	orrs	r3, r2
}
 800cbe2:	0018      	movs	r0, r3
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	b002      	add	sp, #8
 800cbe8:	bd80      	pop	{r7, pc}
 800cbea:	46c0      	nop			; (mov r8, r8)
 800cbec:	40021000 	.word	0x40021000

0800cbf0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800cbf4:	4b03      	ldr	r3, [pc, #12]	; (800cc04 <LL_RCC_PLL_GetN+0x14>)
 800cbf6:	68db      	ldr	r3, [r3, #12]
 800cbf8:	0a1b      	lsrs	r3, r3, #8
 800cbfa:	227f      	movs	r2, #127	; 0x7f
 800cbfc:	4013      	ands	r3, r2
}
 800cbfe:	0018      	movs	r0, r3
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd80      	pop	{r7, pc}
 800cc04:	40021000 	.word	0x40021000

0800cc08 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800cc0c:	4b03      	ldr	r3, [pc, #12]	; (800cc1c <LL_RCC_PLL_GetR+0x14>)
 800cc0e:	68db      	ldr	r3, [r3, #12]
 800cc10:	0f5b      	lsrs	r3, r3, #29
 800cc12:	075b      	lsls	r3, r3, #29
}
 800cc14:	0018      	movs	r0, r3
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}
 800cc1a:	46c0      	nop			; (mov r8, r8)
 800cc1c:	40021000 	.word	0x40021000

0800cc20 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800cc24:	4b03      	ldr	r3, [pc, #12]	; (800cc34 <LL_RCC_PLL_GetMainSource+0x14>)
 800cc26:	68db      	ldr	r3, [r3, #12]
 800cc28:	2203      	movs	r2, #3
 800cc2a:	4013      	ands	r3, r2
}
 800cc2c:	0018      	movs	r0, r3
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}
 800cc32:	46c0      	nop			; (mov r8, r8)
 800cc34:	40021000 	.word	0x40021000

0800cc38 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800cc3c:	4b03      	ldr	r3, [pc, #12]	; (800cc4c <LL_RCC_PLL_GetDivider+0x14>)
 800cc3e:	68db      	ldr	r3, [r3, #12]
 800cc40:	2270      	movs	r2, #112	; 0x70
 800cc42:	4013      	ands	r3, r2
}
 800cc44:	0018      	movs	r0, r3
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}
 800cc4a:	46c0      	nop			; (mov r8, r8)
 800cc4c:	40021000 	.word	0x40021000

0800cc50 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b082      	sub	sp, #8
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800cc58:	f000 f8a8 	bl	800cdac <RCC_GetSystemClockFreq>
 800cc5c:	0002      	movs	r2, r0
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	0018      	movs	r0, r3
 800cc68:	f000 f8ce 	bl	800ce08 <RCC_GetHCLKClockFreq>
 800cc6c:	0002      	movs	r2, r0
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	685b      	ldr	r3, [r3, #4]
 800cc76:	0018      	movs	r0, r3
 800cc78:	f000 f8de 	bl	800ce38 <RCC_GetPCLK1ClockFreq>
 800cc7c:	0002      	movs	r2, r0
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	609a      	str	r2, [r3, #8]
}
 800cc82:	46c0      	nop			; (mov r8, r8)
 800cc84:	46bd      	mov	sp, r7
 800cc86:	b002      	add	sp, #8
 800cc88:	bd80      	pop	{r7, pc}
	...

0800cc8c <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b084      	sub	sp, #16
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800cc94:	2300      	movs	r3, #0
 800cc96:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	2b03      	cmp	r3, #3
 800cc9c:	d134      	bne.n	800cd08 <LL_RCC_GetUSARTClockFreq+0x7c>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	0018      	movs	r0, r3
 800cca2:	f7ff ff93 	bl	800cbcc <LL_RCC_GetUSARTClockSource>
 800cca6:	0003      	movs	r3, r0
 800cca8:	4a39      	ldr	r2, [pc, #228]	; (800cd90 <LL_RCC_GetUSARTClockFreq+0x104>)
 800ccaa:	4293      	cmp	r3, r2
 800ccac:	d016      	beq.n	800ccdc <LL_RCC_GetUSARTClockFreq+0x50>
 800ccae:	4a38      	ldr	r2, [pc, #224]	; (800cd90 <LL_RCC_GetUSARTClockFreq+0x104>)
 800ccb0:	4293      	cmp	r3, r2
 800ccb2:	d81c      	bhi.n	800ccee <LL_RCC_GetUSARTClockFreq+0x62>
 800ccb4:	4a37      	ldr	r2, [pc, #220]	; (800cd94 <LL_RCC_GetUSARTClockFreq+0x108>)
 800ccb6:	4293      	cmp	r3, r2
 800ccb8:	d003      	beq.n	800ccc2 <LL_RCC_GetUSARTClockFreq+0x36>
 800ccba:	4a37      	ldr	r2, [pc, #220]	; (800cd98 <LL_RCC_GetUSARTClockFreq+0x10c>)
 800ccbc:	4293      	cmp	r3, r2
 800ccbe:	d005      	beq.n	800cccc <LL_RCC_GetUSARTClockFreq+0x40>
 800ccc0:	e015      	b.n	800ccee <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800ccc2:	f000 f873 	bl	800cdac <RCC_GetSystemClockFreq>
 800ccc6:	0003      	movs	r3, r0
 800ccc8:	60fb      	str	r3, [r7, #12]
        break;
 800ccca:	e05c      	b.n	800cd86 <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800cccc:	f7ff ff36 	bl	800cb3c <LL_RCC_HSI_IsReady>
 800ccd0:	0003      	movs	r3, r0
 800ccd2:	2b01      	cmp	r3, #1
 800ccd4:	d150      	bne.n	800cd78 <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = HSI_VALUE;
 800ccd6:	4b31      	ldr	r3, [pc, #196]	; (800cd9c <LL_RCC_GetUSARTClockFreq+0x110>)
 800ccd8:	60fb      	str	r3, [r7, #12]
        }
        break;
 800ccda:	e04d      	b.n	800cd78 <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800ccdc:	f7ff ff42 	bl	800cb64 <LL_RCC_LSE_IsReady>
 800cce0:	0003      	movs	r3, r0
 800cce2:	2b01      	cmp	r3, #1
 800cce4:	d14a      	bne.n	800cd7c <LL_RCC_GetUSARTClockFreq+0xf0>
        {
          usart_frequency = LSE_VALUE;
 800cce6:	2380      	movs	r3, #128	; 0x80
 800cce8:	021b      	lsls	r3, r3, #8
 800ccea:	60fb      	str	r3, [r7, #12]
        }
        break;
 800ccec:	e046      	b.n	800cd7c <LL_RCC_GetUSARTClockFreq+0xf0>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800ccee:	f000 f85d 	bl	800cdac <RCC_GetSystemClockFreq>
 800ccf2:	0003      	movs	r3, r0
 800ccf4:	0018      	movs	r0, r3
 800ccf6:	f000 f887 	bl	800ce08 <RCC_GetHCLKClockFreq>
 800ccfa:	0003      	movs	r3, r0
 800ccfc:	0018      	movs	r0, r3
 800ccfe:	f000 f89b 	bl	800ce38 <RCC_GetPCLK1ClockFreq>
 800cd02:	0003      	movs	r3, r0
 800cd04:	60fb      	str	r3, [r7, #12]
        break;
 800cd06:	e03e      	b.n	800cd86 <LL_RCC_GetUSARTClockFreq+0xfa>
    }
  }
#if defined(RCC_CCIPR_USART2SEL)
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	2b0c      	cmp	r3, #12
 800cd0c:	d13b      	bne.n	800cd86 <LL_RCC_GetUSARTClockFreq+0xfa>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	0018      	movs	r0, r3
 800cd12:	f7ff ff5b 	bl	800cbcc <LL_RCC_GetUSARTClockSource>
 800cd16:	0003      	movs	r3, r0
 800cd18:	4a21      	ldr	r2, [pc, #132]	; (800cda0 <LL_RCC_GetUSARTClockFreq+0x114>)
 800cd1a:	4293      	cmp	r3, r2
 800cd1c:	d016      	beq.n	800cd4c <LL_RCC_GetUSARTClockFreq+0xc0>
 800cd1e:	4a20      	ldr	r2, [pc, #128]	; (800cda0 <LL_RCC_GetUSARTClockFreq+0x114>)
 800cd20:	4293      	cmp	r3, r2
 800cd22:	d81c      	bhi.n	800cd5e <LL_RCC_GetUSARTClockFreq+0xd2>
 800cd24:	4a1f      	ldr	r2, [pc, #124]	; (800cda4 <LL_RCC_GetUSARTClockFreq+0x118>)
 800cd26:	4293      	cmp	r3, r2
 800cd28:	d003      	beq.n	800cd32 <LL_RCC_GetUSARTClockFreq+0xa6>
 800cd2a:	4a1f      	ldr	r2, [pc, #124]	; (800cda8 <LL_RCC_GetUSARTClockFreq+0x11c>)
 800cd2c:	4293      	cmp	r3, r2
 800cd2e:	d005      	beq.n	800cd3c <LL_RCC_GetUSARTClockFreq+0xb0>
 800cd30:	e015      	b.n	800cd5e <LL_RCC_GetUSARTClockFreq+0xd2>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800cd32:	f000 f83b 	bl	800cdac <RCC_GetSystemClockFreq>
 800cd36:	0003      	movs	r3, r0
 800cd38:	60fb      	str	r3, [r7, #12]
        break;
 800cd3a:	e024      	b.n	800cd86 <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800cd3c:	f7ff fefe 	bl	800cb3c <LL_RCC_HSI_IsReady>
 800cd40:	0003      	movs	r3, r0
 800cd42:	2b01      	cmp	r3, #1
 800cd44:	d11c      	bne.n	800cd80 <LL_RCC_GetUSARTClockFreq+0xf4>
        {
          usart_frequency = HSI_VALUE;
 800cd46:	4b15      	ldr	r3, [pc, #84]	; (800cd9c <LL_RCC_GetUSARTClockFreq+0x110>)
 800cd48:	60fb      	str	r3, [r7, #12]
        }
        break;
 800cd4a:	e019      	b.n	800cd80 <LL_RCC_GetUSARTClockFreq+0xf4>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800cd4c:	f7ff ff0a 	bl	800cb64 <LL_RCC_LSE_IsReady>
 800cd50:	0003      	movs	r3, r0
 800cd52:	2b01      	cmp	r3, #1
 800cd54:	d116      	bne.n	800cd84 <LL_RCC_GetUSARTClockFreq+0xf8>
        {
          usart_frequency = LSE_VALUE;
 800cd56:	2380      	movs	r3, #128	; 0x80
 800cd58:	021b      	lsls	r3, r3, #8
 800cd5a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800cd5c:	e012      	b.n	800cd84 <LL_RCC_GetUSARTClockFreq+0xf8>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800cd5e:	f000 f825 	bl	800cdac <RCC_GetSystemClockFreq>
 800cd62:	0003      	movs	r3, r0
 800cd64:	0018      	movs	r0, r3
 800cd66:	f000 f84f 	bl	800ce08 <RCC_GetHCLKClockFreq>
 800cd6a:	0003      	movs	r3, r0
 800cd6c:	0018      	movs	r0, r3
 800cd6e:	f000 f863 	bl	800ce38 <RCC_GetPCLK1ClockFreq>
 800cd72:	0003      	movs	r3, r0
 800cd74:	60fb      	str	r3, [r7, #12]
        break;
 800cd76:	e006      	b.n	800cd86 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800cd78:	46c0      	nop			; (mov r8, r8)
 800cd7a:	e004      	b.n	800cd86 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800cd7c:	46c0      	nop			; (mov r8, r8)
 800cd7e:	e002      	b.n	800cd86 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800cd80:	46c0      	nop			; (mov r8, r8)
 800cd82:	e000      	b.n	800cd86 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800cd84:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 800cd86:	68fb      	ldr	r3, [r7, #12]
}
 800cd88:	0018      	movs	r0, r3
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	b004      	add	sp, #16
 800cd8e:	bd80      	pop	{r7, pc}
 800cd90:	00030003 	.word	0x00030003
 800cd94:	00030001 	.word	0x00030001
 800cd98:	00030002 	.word	0x00030002
 800cd9c:	00f42400 	.word	0x00f42400
 800cda0:	000c000c 	.word	0x000c000c
 800cda4:	000c0004 	.word	0x000c0004
 800cda8:	000c0008 	.word	0x000c0008

0800cdac <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b082      	sub	sp, #8
 800cdb0:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800cdb2:	f7ff fee7 	bl	800cb84 <LL_RCC_GetSysClkSource>
 800cdb6:	0003      	movs	r3, r0
 800cdb8:	2b08      	cmp	r3, #8
 800cdba:	d002      	beq.n	800cdc2 <RCC_GetSystemClockFreq+0x16>
 800cdbc:	2b10      	cmp	r3, #16
 800cdbe:	d003      	beq.n	800cdc8 <RCC_GetSystemClockFreq+0x1c>
 800cdc0:	e007      	b.n	800cdd2 <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800cdc2:	4b0e      	ldr	r3, [pc, #56]	; (800cdfc <RCC_GetSystemClockFreq+0x50>)
 800cdc4:	607b      	str	r3, [r7, #4]
      break;
 800cdc6:	e014      	b.n	800cdf2 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800cdc8:	f000 f84c 	bl	800ce64 <RCC_PLL_GetFreqDomain_SYS>
 800cdcc:	0003      	movs	r3, r0
 800cdce:	607b      	str	r3, [r7, #4]
      break;
 800cdd0:	e00f      	b.n	800cdf2 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800cdd2:	4b0b      	ldr	r3, [pc, #44]	; (800ce00 <RCC_GetSystemClockFreq+0x54>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	0adb      	lsrs	r3, r3, #11
 800cdd8:	2207      	movs	r2, #7
 800cdda:	4013      	ands	r3, r2
 800cddc:	2201      	movs	r2, #1
 800cdde:	409a      	lsls	r2, r3
 800cde0:	0013      	movs	r3, r2
 800cde2:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 800cde4:	6839      	ldr	r1, [r7, #0]
 800cde6:	4807      	ldr	r0, [pc, #28]	; (800ce04 <RCC_GetSystemClockFreq+0x58>)
 800cde8:	f7f3 f98c 	bl	8000104 <__udivsi3>
 800cdec:	0003      	movs	r3, r0
 800cdee:	607b      	str	r3, [r7, #4]
      break;
 800cdf0:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 800cdf2:	687b      	ldr	r3, [r7, #4]
}
 800cdf4:	0018      	movs	r0, r3
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	b002      	add	sp, #8
 800cdfa:	bd80      	pop	{r7, pc}
 800cdfc:	007a1200 	.word	0x007a1200
 800ce00:	40021000 	.word	0x40021000
 800ce04:	00f42400 	.word	0x00f42400

0800ce08 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b082      	sub	sp, #8
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800ce10:	f7ff fec4 	bl	800cb9c <LL_RCC_GetAHBPrescaler>
 800ce14:	0003      	movs	r3, r0
 800ce16:	0a1b      	lsrs	r3, r3, #8
 800ce18:	220f      	movs	r2, #15
 800ce1a:	401a      	ands	r2, r3
 800ce1c:	4b05      	ldr	r3, [pc, #20]	; (800ce34 <RCC_GetHCLKClockFreq+0x2c>)
 800ce1e:	0092      	lsls	r2, r2, #2
 800ce20:	58d3      	ldr	r3, [r2, r3]
 800ce22:	221f      	movs	r2, #31
 800ce24:	4013      	ands	r3, r2
 800ce26:	687a      	ldr	r2, [r7, #4]
 800ce28:	40da      	lsrs	r2, r3
 800ce2a:	0013      	movs	r3, r2
}
 800ce2c:	0018      	movs	r0, r3
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	b002      	add	sp, #8
 800ce32:	bd80      	pop	{r7, pc}
 800ce34:	0800e25c 	.word	0x0800e25c

0800ce38 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b082      	sub	sp, #8
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800ce40:	f7ff feb8 	bl	800cbb4 <LL_RCC_GetAPB1Prescaler>
 800ce44:	0003      	movs	r3, r0
 800ce46:	0b1a      	lsrs	r2, r3, #12
 800ce48:	4b05      	ldr	r3, [pc, #20]	; (800ce60 <RCC_GetPCLK1ClockFreq+0x28>)
 800ce4a:	0092      	lsls	r2, r2, #2
 800ce4c:	58d3      	ldr	r3, [r2, r3]
 800ce4e:	221f      	movs	r2, #31
 800ce50:	4013      	ands	r3, r2
 800ce52:	687a      	ldr	r2, [r7, #4]
 800ce54:	40da      	lsrs	r2, r3
 800ce56:	0013      	movs	r3, r2
}
 800ce58:	0018      	movs	r0, r3
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	b002      	add	sp, #8
 800ce5e:	bd80      	pop	{r7, pc}
 800ce60:	0800e29c 	.word	0x0800e29c

0800ce64 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800ce64:	b590      	push	{r4, r7, lr}
 800ce66:	b083      	sub	sp, #12
 800ce68:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800ce6a:	f7ff fed9 	bl	800cc20 <LL_RCC_PLL_GetMainSource>
 800ce6e:	0003      	movs	r3, r0
 800ce70:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 800ce72:	683b      	ldr	r3, [r7, #0]
 800ce74:	2b02      	cmp	r3, #2
 800ce76:	d003      	beq.n	800ce80 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	2b03      	cmp	r3, #3
 800ce7c:	d003      	beq.n	800ce86 <RCC_PLL_GetFreqDomain_SYS+0x22>
 800ce7e:	e005      	b.n	800ce8c <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800ce80:	4b13      	ldr	r3, [pc, #76]	; (800ced0 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800ce82:	607b      	str	r3, [r7, #4]
      break;
 800ce84:	e005      	b.n	800ce92 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800ce86:	4b13      	ldr	r3, [pc, #76]	; (800ced4 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 800ce88:	607b      	str	r3, [r7, #4]
      break;
 800ce8a:	e002      	b.n	800ce92 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 800ce8c:	4b10      	ldr	r3, [pc, #64]	; (800ced0 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800ce8e:	607b      	str	r3, [r7, #4]
      break;
 800ce90:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800ce92:	f7ff fead 	bl	800cbf0 <LL_RCC_PLL_GetN>
 800ce96:	0002      	movs	r2, r0
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	4353      	muls	r3, r2
 800ce9c:	001c      	movs	r4, r3
 800ce9e:	f7ff fecb 	bl	800cc38 <LL_RCC_PLL_GetDivider>
 800cea2:	0003      	movs	r3, r0
 800cea4:	091b      	lsrs	r3, r3, #4
 800cea6:	3301      	adds	r3, #1
 800cea8:	0019      	movs	r1, r3
 800ceaa:	0020      	movs	r0, r4
 800ceac:	f7f3 f92a 	bl	8000104 <__udivsi3>
 800ceb0:	0003      	movs	r3, r0
 800ceb2:	001c      	movs	r4, r3
 800ceb4:	f7ff fea8 	bl	800cc08 <LL_RCC_PLL_GetR>
 800ceb8:	0003      	movs	r3, r0
 800ceba:	0f5b      	lsrs	r3, r3, #29
 800cebc:	3301      	adds	r3, #1
 800cebe:	0019      	movs	r1, r3
 800cec0:	0020      	movs	r0, r4
 800cec2:	f7f3 f91f 	bl	8000104 <__udivsi3>
 800cec6:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800cec8:	0018      	movs	r0, r3
 800ceca:	46bd      	mov	sp, r7
 800cecc:	b003      	add	sp, #12
 800cece:	bd90      	pop	{r4, r7, pc}
 800ced0:	00f42400 	.word	0x00f42400
 800ced4:	007a1200 	.word	0x007a1200

0800ced8 <LL_USART_IsEnabled>:
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b082      	sub	sp, #8
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	2201      	movs	r2, #1
 800cee6:	4013      	ands	r3, r2
 800cee8:	2b01      	cmp	r3, #1
 800ceea:	d101      	bne.n	800cef0 <LL_USART_IsEnabled+0x18>
 800ceec:	2301      	movs	r3, #1
 800ceee:	e000      	b.n	800cef2 <LL_USART_IsEnabled+0x1a>
 800cef0:	2300      	movs	r3, #0
}
 800cef2:	0018      	movs	r0, r3
 800cef4:	46bd      	mov	sp, r7
 800cef6:	b002      	add	sp, #8
 800cef8:	bd80      	pop	{r7, pc}

0800cefa <LL_USART_SetPrescaler>:
{
 800cefa:	b580      	push	{r7, lr}
 800cefc:	b082      	sub	sp, #8
 800cefe:	af00      	add	r7, sp, #0
 800cf00:	6078      	str	r0, [r7, #4]
 800cf02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf08:	220f      	movs	r2, #15
 800cf0a:	4393      	bics	r3, r2
 800cf0c:	683a      	ldr	r2, [r7, #0]
 800cf0e:	b292      	uxth	r2, r2
 800cf10:	431a      	orrs	r2, r3
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800cf16:	46c0      	nop			; (mov r8, r8)
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	b002      	add	sp, #8
 800cf1c:	bd80      	pop	{r7, pc}
	...

0800cf20 <LL_USART_SetStopBitsLength>:
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b082      	sub	sp, #8
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
 800cf28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	685b      	ldr	r3, [r3, #4]
 800cf2e:	4a05      	ldr	r2, [pc, #20]	; (800cf44 <LL_USART_SetStopBitsLength+0x24>)
 800cf30:	401a      	ands	r2, r3
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	431a      	orrs	r2, r3
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	605a      	str	r2, [r3, #4]
}
 800cf3a:	46c0      	nop			; (mov r8, r8)
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	b002      	add	sp, #8
 800cf40:	bd80      	pop	{r7, pc}
 800cf42:	46c0      	nop			; (mov r8, r8)
 800cf44:	ffffcfff 	.word	0xffffcfff

0800cf48 <LL_USART_SetHWFlowCtrl>:
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b082      	sub	sp, #8
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
 800cf50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	689b      	ldr	r3, [r3, #8]
 800cf56:	4a05      	ldr	r2, [pc, #20]	; (800cf6c <LL_USART_SetHWFlowCtrl+0x24>)
 800cf58:	401a      	ands	r2, r3
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	431a      	orrs	r2, r3
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	609a      	str	r2, [r3, #8]
}
 800cf62:	46c0      	nop			; (mov r8, r8)
 800cf64:	46bd      	mov	sp, r7
 800cf66:	b002      	add	sp, #8
 800cf68:	bd80      	pop	{r7, pc}
 800cf6a:	46c0      	nop			; (mov r8, r8)
 800cf6c:	fffffcff 	.word	0xfffffcff

0800cf70 <LL_USART_SetBaudRate>:
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b086      	sub	sp, #24
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	60f8      	str	r0, [r7, #12]
 800cf78:	60b9      	str	r1, [r7, #8]
 800cf7a:	607a      	str	r2, [r7, #4]
 800cf7c:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2b0b      	cmp	r3, #11
 800cf82:	d843      	bhi.n	800d00c <LL_USART_SetBaudRate+0x9c>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800cf84:	683a      	ldr	r2, [r7, #0]
 800cf86:	2380      	movs	r3, #128	; 0x80
 800cf88:	021b      	lsls	r3, r3, #8
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d126      	bne.n	800cfdc <LL_USART_SetBaudRate+0x6c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	b2db      	uxtb	r3, r3
 800cf92:	001a      	movs	r2, r3
 800cf94:	4b1f      	ldr	r3, [pc, #124]	; (800d014 <LL_USART_SetBaudRate+0xa4>)
 800cf96:	0092      	lsls	r2, r2, #2
 800cf98:	58d3      	ldr	r3, [r2, r3]
 800cf9a:	0019      	movs	r1, r3
 800cf9c:	68b8      	ldr	r0, [r7, #8]
 800cf9e:	f7f3 f8b1 	bl	8000104 <__udivsi3>
 800cfa2:	0003      	movs	r3, r0
 800cfa4:	005a      	lsls	r2, r3, #1
 800cfa6:	6a3b      	ldr	r3, [r7, #32]
 800cfa8:	085b      	lsrs	r3, r3, #1
 800cfaa:	18d3      	adds	r3, r2, r3
 800cfac:	6a39      	ldr	r1, [r7, #32]
 800cfae:	0018      	movs	r0, r3
 800cfb0:	f7f3 f8a8 	bl	8000104 <__udivsi3>
 800cfb4:	0003      	movs	r3, r0
 800cfb6:	b29b      	uxth	r3, r3
 800cfb8:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800cfba:	697b      	ldr	r3, [r7, #20]
 800cfbc:	4a16      	ldr	r2, [pc, #88]	; (800d018 <LL_USART_SetBaudRate+0xa8>)
 800cfbe:	4013      	ands	r3, r2
 800cfc0:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cfc2:	697b      	ldr	r3, [r7, #20]
 800cfc4:	085b      	lsrs	r3, r3, #1
 800cfc6:	b29b      	uxth	r3, r3
 800cfc8:	001a      	movs	r2, r3
 800cfca:	2307      	movs	r3, #7
 800cfcc:	4013      	ands	r3, r2
 800cfce:	693a      	ldr	r2, [r7, #16]
 800cfd0:	4313      	orrs	r3, r2
 800cfd2:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	693a      	ldr	r2, [r7, #16]
 800cfd8:	60da      	str	r2, [r3, #12]
}
 800cfda:	e017      	b.n	800d00c <LL_USART_SetBaudRate+0x9c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	b2db      	uxtb	r3, r3
 800cfe0:	001a      	movs	r2, r3
 800cfe2:	4b0c      	ldr	r3, [pc, #48]	; (800d014 <LL_USART_SetBaudRate+0xa4>)
 800cfe4:	0092      	lsls	r2, r2, #2
 800cfe6:	58d3      	ldr	r3, [r2, r3]
 800cfe8:	0019      	movs	r1, r3
 800cfea:	68b8      	ldr	r0, [r7, #8]
 800cfec:	f7f3 f88a 	bl	8000104 <__udivsi3>
 800cff0:	0003      	movs	r3, r0
 800cff2:	001a      	movs	r2, r3
 800cff4:	6a3b      	ldr	r3, [r7, #32]
 800cff6:	085b      	lsrs	r3, r3, #1
 800cff8:	18d3      	adds	r3, r2, r3
 800cffa:	6a39      	ldr	r1, [r7, #32]
 800cffc:	0018      	movs	r0, r3
 800cffe:	f7f3 f881 	bl	8000104 <__udivsi3>
 800d002:	0003      	movs	r3, r0
 800d004:	b29b      	uxth	r3, r3
 800d006:	001a      	movs	r2, r3
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	60da      	str	r2, [r3, #12]
}
 800d00c:	46c0      	nop			; (mov r8, r8)
 800d00e:	46bd      	mov	sp, r7
 800d010:	b006      	add	sp, #24
 800d012:	bd80      	pop	{r7, pc}
 800d014:	0800e310 	.word	0x0800e310
 800d018:	0000fff0 	.word	0x0000fff0

0800d01c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800d01c:	b590      	push	{r4, r7, lr}
 800d01e:	b08b      	sub	sp, #44	; 0x2c
 800d020:	af02      	add	r7, sp, #8
 800d022:	6078      	str	r0, [r7, #4]
 800d024:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800d026:	231f      	movs	r3, #31
 800d028:	18fb      	adds	r3, r7, r3
 800d02a:	2201      	movs	r2, #1
 800d02c:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800d02e:	2300      	movs	r3, #0
 800d030:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	0018      	movs	r0, r3
 800d036:	f7ff ff4f 	bl	800ced8 <LL_USART_IsEnabled>
 800d03a:	1e03      	subs	r3, r0, #0
 800d03c:	d16a      	bne.n	800d114 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	4a38      	ldr	r2, [pc, #224]	; (800d124 <LL_USART_Init+0x108>)
 800d044:	401a      	ands	r2, r3
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	6899      	ldr	r1, [r3, #8]
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	691b      	ldr	r3, [r3, #16]
 800d04e:	4319      	orrs	r1, r3
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	695b      	ldr	r3, [r3, #20]
 800d054:	4319      	orrs	r1, r3
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	69db      	ldr	r3, [r3, #28]
 800d05a:	430b      	orrs	r3, r1
 800d05c:	431a      	orrs	r2, r3
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	68da      	ldr	r2, [r3, #12]
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	0011      	movs	r1, r2
 800d06a:	0018      	movs	r0, r3
 800d06c:	f7ff ff58 	bl	800cf20 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	699a      	ldr	r2, [r3, #24]
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	0011      	movs	r1, r2
 800d078:	0018      	movs	r0, r3
 800d07a:	f7ff ff65 	bl	800cf48 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	4a29      	ldr	r2, [pc, #164]	; (800d128 <LL_USART_Init+0x10c>)
 800d082:	4293      	cmp	r3, r2
 800d084:	d105      	bne.n	800d092 <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800d086:	2003      	movs	r0, #3
 800d088:	f7ff fe00 	bl	800cc8c <LL_RCC_GetUSARTClockFreq>
 800d08c:	0003      	movs	r3, r0
 800d08e:	61bb      	str	r3, [r7, #24]
 800d090:	e022      	b.n	800d0d8 <LL_USART_Init+0xbc>
    }
    else if (USARTx == USART2)
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	4a25      	ldr	r2, [pc, #148]	; (800d12c <LL_USART_Init+0x110>)
 800d096:	4293      	cmp	r3, r2
 800d098:	d105      	bne.n	800d0a6 <LL_USART_Init+0x8a>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800d09a:	200c      	movs	r0, #12
 800d09c:	f7ff fdf6 	bl	800cc8c <LL_RCC_GetUSARTClockFreq>
 800d0a0:	0003      	movs	r3, r0
 800d0a2:	61bb      	str	r3, [r7, #24]
 800d0a4:	e018      	b.n	800d0d8 <LL_USART_Init+0xbc>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* RCC_CCIPR_USART2SEL */
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	4a21      	ldr	r2, [pc, #132]	; (800d130 <LL_USART_Init+0x114>)
 800d0aa:	4293      	cmp	r3, r2
 800d0ac:	d108      	bne.n	800d0c0 <LL_USART_Init+0xa4>
    {
#if defined(RCC_CCIPR_USART3SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800d0ae:	240c      	movs	r4, #12
 800d0b0:	193b      	adds	r3, r7, r4
 800d0b2:	0018      	movs	r0, r3
 800d0b4:	f7ff fdcc 	bl	800cc50 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800d0b8:	193b      	adds	r3, r7, r4
 800d0ba:	689b      	ldr	r3, [r3, #8]
 800d0bc:	61bb      	str	r3, [r7, #24]
 800d0be:	e00b      	b.n	800d0d8 <LL_USART_Init+0xbc>
#endif /* RCC_CCIPR_USART3SEL */
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	4a1c      	ldr	r2, [pc, #112]	; (800d134 <LL_USART_Init+0x118>)
 800d0c4:	4293      	cmp	r3, r2
 800d0c6:	d107      	bne.n	800d0d8 <LL_USART_Init+0xbc>
    {
#if defined(RCC_CCIPR_USART4SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART4_CLKSOURCE);
#else
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800d0c8:	240c      	movs	r4, #12
 800d0ca:	193b      	adds	r3, r7, r4
 800d0cc:	0018      	movs	r0, r3
 800d0ce:	f7ff fdbf 	bl	800cc50 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800d0d2:	193b      	adds	r3, r7, r4
 800d0d4:	689b      	ldr	r3, [r3, #8]
 800d0d6:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800d0d8:	69bb      	ldr	r3, [r7, #24]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d013      	beq.n	800d106 <LL_USART_Init+0xea>
        && (USART_InitStruct->BaudRate != 0U))
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	685b      	ldr	r3, [r3, #4]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d00f      	beq.n	800d106 <LL_USART_Init+0xea>
    {
      status = SUCCESS;
 800d0e6:	231f      	movs	r3, #31
 800d0e8:	18fb      	adds	r3, r7, r3
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	681a      	ldr	r2, [r3, #0]
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	69dc      	ldr	r4, [r3, #28]
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	685b      	ldr	r3, [r3, #4]
 800d0fa:	69b9      	ldr	r1, [r7, #24]
 800d0fc:	6878      	ldr	r0, [r7, #4]
 800d0fe:	9300      	str	r3, [sp, #0]
 800d100:	0023      	movs	r3, r4
 800d102:	f7ff ff35 	bl	800cf70 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	681a      	ldr	r2, [r3, #0]
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	0011      	movs	r1, r2
 800d10e:	0018      	movs	r0, r3
 800d110:	f7ff fef3 	bl	800cefa <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800d114:	231f      	movs	r3, #31
 800d116:	18fb      	adds	r3, r7, r3
 800d118:	781b      	ldrb	r3, [r3, #0]
}
 800d11a:	0018      	movs	r0, r3
 800d11c:	46bd      	mov	sp, r7
 800d11e:	b009      	add	sp, #36	; 0x24
 800d120:	bd90      	pop	{r4, r7, pc}
 800d122:	46c0      	nop			; (mov r8, r8)
 800d124:	efff69f3 	.word	0xefff69f3
 800d128:	40013800 	.word	0x40013800
 800d12c:	40004400 	.word	0x40004400
 800d130:	40004800 	.word	0x40004800
 800d134:	40004c00 	.word	0x40004c00

0800d138 <__libc_init_array>:
 800d138:	b570      	push	{r4, r5, r6, lr}
 800d13a:	2600      	movs	r6, #0
 800d13c:	4d0c      	ldr	r5, [pc, #48]	; (800d170 <__libc_init_array+0x38>)
 800d13e:	4c0d      	ldr	r4, [pc, #52]	; (800d174 <__libc_init_array+0x3c>)
 800d140:	1b64      	subs	r4, r4, r5
 800d142:	10a4      	asrs	r4, r4, #2
 800d144:	42a6      	cmp	r6, r4
 800d146:	d109      	bne.n	800d15c <__libc_init_array+0x24>
 800d148:	2600      	movs	r6, #0
 800d14a:	f001 f837 	bl	800e1bc <_init>
 800d14e:	4d0a      	ldr	r5, [pc, #40]	; (800d178 <__libc_init_array+0x40>)
 800d150:	4c0a      	ldr	r4, [pc, #40]	; (800d17c <__libc_init_array+0x44>)
 800d152:	1b64      	subs	r4, r4, r5
 800d154:	10a4      	asrs	r4, r4, #2
 800d156:	42a6      	cmp	r6, r4
 800d158:	d105      	bne.n	800d166 <__libc_init_array+0x2e>
 800d15a:	bd70      	pop	{r4, r5, r6, pc}
 800d15c:	00b3      	lsls	r3, r6, #2
 800d15e:	58eb      	ldr	r3, [r5, r3]
 800d160:	4798      	blx	r3
 800d162:	3601      	adds	r6, #1
 800d164:	e7ee      	b.n	800d144 <__libc_init_array+0xc>
 800d166:	00b3      	lsls	r3, r6, #2
 800d168:	58eb      	ldr	r3, [r5, r3]
 800d16a:	4798      	blx	r3
 800d16c:	3601      	adds	r6, #1
 800d16e:	e7f2      	b.n	800d156 <__libc_init_array+0x1e>
 800d170:	0800e518 	.word	0x0800e518
 800d174:	0800e518 	.word	0x0800e518
 800d178:	0800e518 	.word	0x0800e518
 800d17c:	0800e51c 	.word	0x0800e51c

0800d180 <memset>:
 800d180:	0003      	movs	r3, r0
 800d182:	1882      	adds	r2, r0, r2
 800d184:	4293      	cmp	r3, r2
 800d186:	d100      	bne.n	800d18a <memset+0xa>
 800d188:	4770      	bx	lr
 800d18a:	7019      	strb	r1, [r3, #0]
 800d18c:	3301      	adds	r3, #1
 800d18e:	e7f9      	b.n	800d184 <memset+0x4>

0800d190 <sin>:
 800d190:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d192:	4a20      	ldr	r2, [pc, #128]	; (800d214 <sin+0x84>)
 800d194:	004b      	lsls	r3, r1, #1
 800d196:	b087      	sub	sp, #28
 800d198:	085b      	lsrs	r3, r3, #1
 800d19a:	4293      	cmp	r3, r2
 800d19c:	dc06      	bgt.n	800d1ac <sin+0x1c>
 800d19e:	2300      	movs	r3, #0
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	9300      	str	r3, [sp, #0]
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	f000 fe5b 	bl	800de60 <__kernel_sin>
 800d1aa:	e006      	b.n	800d1ba <sin+0x2a>
 800d1ac:	4a1a      	ldr	r2, [pc, #104]	; (800d218 <sin+0x88>)
 800d1ae:	4293      	cmp	r3, r2
 800d1b0:	dd05      	ble.n	800d1be <sin+0x2e>
 800d1b2:	0002      	movs	r2, r0
 800d1b4:	000b      	movs	r3, r1
 800d1b6:	f7f4 fb53 	bl	8001860 <__aeabi_dsub>
 800d1ba:	b007      	add	sp, #28
 800d1bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1be:	aa02      	add	r2, sp, #8
 800d1c0:	f000 f82c 	bl	800d21c <__ieee754_rem_pio2>
 800d1c4:	9c04      	ldr	r4, [sp, #16]
 800d1c6:	9d05      	ldr	r5, [sp, #20]
 800d1c8:	2303      	movs	r3, #3
 800d1ca:	4003      	ands	r3, r0
 800d1cc:	2b01      	cmp	r3, #1
 800d1ce:	d00a      	beq.n	800d1e6 <sin+0x56>
 800d1d0:	9802      	ldr	r0, [sp, #8]
 800d1d2:	9903      	ldr	r1, [sp, #12]
 800d1d4:	2b02      	cmp	r3, #2
 800d1d6:	d00d      	beq.n	800d1f4 <sin+0x64>
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d115      	bne.n	800d208 <sin+0x78>
 800d1dc:	3301      	adds	r3, #1
 800d1de:	9300      	str	r3, [sp, #0]
 800d1e0:	0022      	movs	r2, r4
 800d1e2:	002b      	movs	r3, r5
 800d1e4:	e7df      	b.n	800d1a6 <sin+0x16>
 800d1e6:	0022      	movs	r2, r4
 800d1e8:	9802      	ldr	r0, [sp, #8]
 800d1ea:	9903      	ldr	r1, [sp, #12]
 800d1ec:	002b      	movs	r3, r5
 800d1ee:	f000 fa01 	bl	800d5f4 <__kernel_cos>
 800d1f2:	e7e2      	b.n	800d1ba <sin+0x2a>
 800d1f4:	2301      	movs	r3, #1
 800d1f6:	0022      	movs	r2, r4
 800d1f8:	9300      	str	r3, [sp, #0]
 800d1fa:	002b      	movs	r3, r5
 800d1fc:	f000 fe30 	bl	800de60 <__kernel_sin>
 800d200:	2380      	movs	r3, #128	; 0x80
 800d202:	061b      	lsls	r3, r3, #24
 800d204:	18c9      	adds	r1, r1, r3
 800d206:	e7d8      	b.n	800d1ba <sin+0x2a>
 800d208:	0022      	movs	r2, r4
 800d20a:	002b      	movs	r3, r5
 800d20c:	f000 f9f2 	bl	800d5f4 <__kernel_cos>
 800d210:	e7f6      	b.n	800d200 <sin+0x70>
 800d212:	46c0      	nop			; (mov r8, r8)
 800d214:	3fe921fb 	.word	0x3fe921fb
 800d218:	7fefffff 	.word	0x7fefffff

0800d21c <__ieee754_rem_pio2>:
 800d21c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d21e:	004b      	lsls	r3, r1, #1
 800d220:	b091      	sub	sp, #68	; 0x44
 800d222:	085b      	lsrs	r3, r3, #1
 800d224:	9302      	str	r3, [sp, #8]
 800d226:	0017      	movs	r7, r2
 800d228:	4bb6      	ldr	r3, [pc, #728]	; (800d504 <__ieee754_rem_pio2+0x2e8>)
 800d22a:	9a02      	ldr	r2, [sp, #8]
 800d22c:	0004      	movs	r4, r0
 800d22e:	000d      	movs	r5, r1
 800d230:	9109      	str	r1, [sp, #36]	; 0x24
 800d232:	429a      	cmp	r2, r3
 800d234:	dc09      	bgt.n	800d24a <__ieee754_rem_pio2+0x2e>
 800d236:	0002      	movs	r2, r0
 800d238:	000b      	movs	r3, r1
 800d23a:	603a      	str	r2, [r7, #0]
 800d23c:	607b      	str	r3, [r7, #4]
 800d23e:	2200      	movs	r2, #0
 800d240:	2300      	movs	r3, #0
 800d242:	60ba      	str	r2, [r7, #8]
 800d244:	60fb      	str	r3, [r7, #12]
 800d246:	2600      	movs	r6, #0
 800d248:	e025      	b.n	800d296 <__ieee754_rem_pio2+0x7a>
 800d24a:	4baf      	ldr	r3, [pc, #700]	; (800d508 <__ieee754_rem_pio2+0x2ec>)
 800d24c:	9a02      	ldr	r2, [sp, #8]
 800d24e:	429a      	cmp	r2, r3
 800d250:	dd00      	ble.n	800d254 <__ieee754_rem_pio2+0x38>
 800d252:	e06e      	b.n	800d332 <__ieee754_rem_pio2+0x116>
 800d254:	4ead      	ldr	r6, [pc, #692]	; (800d50c <__ieee754_rem_pio2+0x2f0>)
 800d256:	4aae      	ldr	r2, [pc, #696]	; (800d510 <__ieee754_rem_pio2+0x2f4>)
 800d258:	2d00      	cmp	r5, #0
 800d25a:	dd35      	ble.n	800d2c8 <__ieee754_rem_pio2+0xac>
 800d25c:	0020      	movs	r0, r4
 800d25e:	0029      	movs	r1, r5
 800d260:	4baa      	ldr	r3, [pc, #680]	; (800d50c <__ieee754_rem_pio2+0x2f0>)
 800d262:	f7f4 fafd 	bl	8001860 <__aeabi_dsub>
 800d266:	9b02      	ldr	r3, [sp, #8]
 800d268:	0004      	movs	r4, r0
 800d26a:	000d      	movs	r5, r1
 800d26c:	42b3      	cmp	r3, r6
 800d26e:	d015      	beq.n	800d29c <__ieee754_rem_pio2+0x80>
 800d270:	4aa8      	ldr	r2, [pc, #672]	; (800d514 <__ieee754_rem_pio2+0x2f8>)
 800d272:	4ba9      	ldr	r3, [pc, #676]	; (800d518 <__ieee754_rem_pio2+0x2fc>)
 800d274:	f7f4 faf4 	bl	8001860 <__aeabi_dsub>
 800d278:	0002      	movs	r2, r0
 800d27a:	000b      	movs	r3, r1
 800d27c:	0020      	movs	r0, r4
 800d27e:	603a      	str	r2, [r7, #0]
 800d280:	607b      	str	r3, [r7, #4]
 800d282:	0029      	movs	r1, r5
 800d284:	f7f4 faec 	bl	8001860 <__aeabi_dsub>
 800d288:	4aa2      	ldr	r2, [pc, #648]	; (800d514 <__ieee754_rem_pio2+0x2f8>)
 800d28a:	4ba3      	ldr	r3, [pc, #652]	; (800d518 <__ieee754_rem_pio2+0x2fc>)
 800d28c:	f7f4 fae8 	bl	8001860 <__aeabi_dsub>
 800d290:	2601      	movs	r6, #1
 800d292:	60b8      	str	r0, [r7, #8]
 800d294:	60f9      	str	r1, [r7, #12]
 800d296:	0030      	movs	r0, r6
 800d298:	b011      	add	sp, #68	; 0x44
 800d29a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d29c:	22d3      	movs	r2, #211	; 0xd3
 800d29e:	4b9e      	ldr	r3, [pc, #632]	; (800d518 <__ieee754_rem_pio2+0x2fc>)
 800d2a0:	0552      	lsls	r2, r2, #21
 800d2a2:	f7f4 fadd 	bl	8001860 <__aeabi_dsub>
 800d2a6:	4a9d      	ldr	r2, [pc, #628]	; (800d51c <__ieee754_rem_pio2+0x300>)
 800d2a8:	4b9d      	ldr	r3, [pc, #628]	; (800d520 <__ieee754_rem_pio2+0x304>)
 800d2aa:	0004      	movs	r4, r0
 800d2ac:	000d      	movs	r5, r1
 800d2ae:	f7f4 fad7 	bl	8001860 <__aeabi_dsub>
 800d2b2:	0002      	movs	r2, r0
 800d2b4:	000b      	movs	r3, r1
 800d2b6:	0020      	movs	r0, r4
 800d2b8:	603a      	str	r2, [r7, #0]
 800d2ba:	607b      	str	r3, [r7, #4]
 800d2bc:	0029      	movs	r1, r5
 800d2be:	f7f4 facf 	bl	8001860 <__aeabi_dsub>
 800d2c2:	4a96      	ldr	r2, [pc, #600]	; (800d51c <__ieee754_rem_pio2+0x300>)
 800d2c4:	4b96      	ldr	r3, [pc, #600]	; (800d520 <__ieee754_rem_pio2+0x304>)
 800d2c6:	e7e1      	b.n	800d28c <__ieee754_rem_pio2+0x70>
 800d2c8:	0020      	movs	r0, r4
 800d2ca:	0029      	movs	r1, r5
 800d2cc:	4b8f      	ldr	r3, [pc, #572]	; (800d50c <__ieee754_rem_pio2+0x2f0>)
 800d2ce:	f7f3 f8eb 	bl	80004a8 <__aeabi_dadd>
 800d2d2:	9b02      	ldr	r3, [sp, #8]
 800d2d4:	0004      	movs	r4, r0
 800d2d6:	000d      	movs	r5, r1
 800d2d8:	42b3      	cmp	r3, r6
 800d2da:	d014      	beq.n	800d306 <__ieee754_rem_pio2+0xea>
 800d2dc:	4a8d      	ldr	r2, [pc, #564]	; (800d514 <__ieee754_rem_pio2+0x2f8>)
 800d2de:	4b8e      	ldr	r3, [pc, #568]	; (800d518 <__ieee754_rem_pio2+0x2fc>)
 800d2e0:	f7f3 f8e2 	bl	80004a8 <__aeabi_dadd>
 800d2e4:	0002      	movs	r2, r0
 800d2e6:	000b      	movs	r3, r1
 800d2e8:	0020      	movs	r0, r4
 800d2ea:	603a      	str	r2, [r7, #0]
 800d2ec:	607b      	str	r3, [r7, #4]
 800d2ee:	0029      	movs	r1, r5
 800d2f0:	f7f4 fab6 	bl	8001860 <__aeabi_dsub>
 800d2f4:	4a87      	ldr	r2, [pc, #540]	; (800d514 <__ieee754_rem_pio2+0x2f8>)
 800d2f6:	4b88      	ldr	r3, [pc, #544]	; (800d518 <__ieee754_rem_pio2+0x2fc>)
 800d2f8:	f7f3 f8d6 	bl	80004a8 <__aeabi_dadd>
 800d2fc:	2601      	movs	r6, #1
 800d2fe:	60b8      	str	r0, [r7, #8]
 800d300:	60f9      	str	r1, [r7, #12]
 800d302:	4276      	negs	r6, r6
 800d304:	e7c7      	b.n	800d296 <__ieee754_rem_pio2+0x7a>
 800d306:	22d3      	movs	r2, #211	; 0xd3
 800d308:	4b83      	ldr	r3, [pc, #524]	; (800d518 <__ieee754_rem_pio2+0x2fc>)
 800d30a:	0552      	lsls	r2, r2, #21
 800d30c:	f7f3 f8cc 	bl	80004a8 <__aeabi_dadd>
 800d310:	4a82      	ldr	r2, [pc, #520]	; (800d51c <__ieee754_rem_pio2+0x300>)
 800d312:	4b83      	ldr	r3, [pc, #524]	; (800d520 <__ieee754_rem_pio2+0x304>)
 800d314:	0004      	movs	r4, r0
 800d316:	000d      	movs	r5, r1
 800d318:	f7f3 f8c6 	bl	80004a8 <__aeabi_dadd>
 800d31c:	0002      	movs	r2, r0
 800d31e:	000b      	movs	r3, r1
 800d320:	0020      	movs	r0, r4
 800d322:	603a      	str	r2, [r7, #0]
 800d324:	607b      	str	r3, [r7, #4]
 800d326:	0029      	movs	r1, r5
 800d328:	f7f4 fa9a 	bl	8001860 <__aeabi_dsub>
 800d32c:	4a7b      	ldr	r2, [pc, #492]	; (800d51c <__ieee754_rem_pio2+0x300>)
 800d32e:	4b7c      	ldr	r3, [pc, #496]	; (800d520 <__ieee754_rem_pio2+0x304>)
 800d330:	e7e2      	b.n	800d2f8 <__ieee754_rem_pio2+0xdc>
 800d332:	4b7c      	ldr	r3, [pc, #496]	; (800d524 <__ieee754_rem_pio2+0x308>)
 800d334:	9a02      	ldr	r2, [sp, #8]
 800d336:	429a      	cmp	r2, r3
 800d338:	dd00      	ble.n	800d33c <__ieee754_rem_pio2+0x120>
 800d33a:	e0d3      	b.n	800d4e4 <__ieee754_rem_pio2+0x2c8>
 800d33c:	0020      	movs	r0, r4
 800d33e:	0029      	movs	r1, r5
 800d340:	f000 fe3a 	bl	800dfb8 <fabs>
 800d344:	4a78      	ldr	r2, [pc, #480]	; (800d528 <__ieee754_rem_pio2+0x30c>)
 800d346:	4b79      	ldr	r3, [pc, #484]	; (800d52c <__ieee754_rem_pio2+0x310>)
 800d348:	0004      	movs	r4, r0
 800d34a:	000d      	movs	r5, r1
 800d34c:	f7f4 f81c 	bl	8001388 <__aeabi_dmul>
 800d350:	2200      	movs	r2, #0
 800d352:	4b77      	ldr	r3, [pc, #476]	; (800d530 <__ieee754_rem_pio2+0x314>)
 800d354:	f7f3 f8a8 	bl	80004a8 <__aeabi_dadd>
 800d358:	f7f4 fe14 	bl	8001f84 <__aeabi_d2iz>
 800d35c:	0006      	movs	r6, r0
 800d35e:	f7f4 fe47 	bl	8001ff0 <__aeabi_i2d>
 800d362:	4a6b      	ldr	r2, [pc, #428]	; (800d510 <__ieee754_rem_pio2+0x2f4>)
 800d364:	4b69      	ldr	r3, [pc, #420]	; (800d50c <__ieee754_rem_pio2+0x2f0>)
 800d366:	9006      	str	r0, [sp, #24]
 800d368:	9107      	str	r1, [sp, #28]
 800d36a:	f7f4 f80d 	bl	8001388 <__aeabi_dmul>
 800d36e:	0002      	movs	r2, r0
 800d370:	000b      	movs	r3, r1
 800d372:	0020      	movs	r0, r4
 800d374:	0029      	movs	r1, r5
 800d376:	f7f4 fa73 	bl	8001860 <__aeabi_dsub>
 800d37a:	4a66      	ldr	r2, [pc, #408]	; (800d514 <__ieee754_rem_pio2+0x2f8>)
 800d37c:	9004      	str	r0, [sp, #16]
 800d37e:	9105      	str	r1, [sp, #20]
 800d380:	9806      	ldr	r0, [sp, #24]
 800d382:	9907      	ldr	r1, [sp, #28]
 800d384:	4b64      	ldr	r3, [pc, #400]	; (800d518 <__ieee754_rem_pio2+0x2fc>)
 800d386:	f7f3 ffff 	bl	8001388 <__aeabi_dmul>
 800d38a:	0004      	movs	r4, r0
 800d38c:	000d      	movs	r5, r1
 800d38e:	2e1f      	cmp	r6, #31
 800d390:	dc0f      	bgt.n	800d3b2 <__ieee754_rem_pio2+0x196>
 800d392:	4a68      	ldr	r2, [pc, #416]	; (800d534 <__ieee754_rem_pio2+0x318>)
 800d394:	1e73      	subs	r3, r6, #1
 800d396:	009b      	lsls	r3, r3, #2
 800d398:	589b      	ldr	r3, [r3, r2]
 800d39a:	9a02      	ldr	r2, [sp, #8]
 800d39c:	4293      	cmp	r3, r2
 800d39e:	d008      	beq.n	800d3b2 <__ieee754_rem_pio2+0x196>
 800d3a0:	9804      	ldr	r0, [sp, #16]
 800d3a2:	9905      	ldr	r1, [sp, #20]
 800d3a4:	0022      	movs	r2, r4
 800d3a6:	002b      	movs	r3, r5
 800d3a8:	f7f4 fa5a 	bl	8001860 <__aeabi_dsub>
 800d3ac:	6038      	str	r0, [r7, #0]
 800d3ae:	6079      	str	r1, [r7, #4]
 800d3b0:	e012      	b.n	800d3d8 <__ieee754_rem_pio2+0x1bc>
 800d3b2:	0022      	movs	r2, r4
 800d3b4:	9804      	ldr	r0, [sp, #16]
 800d3b6:	9905      	ldr	r1, [sp, #20]
 800d3b8:	002b      	movs	r3, r5
 800d3ba:	f7f4 fa51 	bl	8001860 <__aeabi_dsub>
 800d3be:	9b02      	ldr	r3, [sp, #8]
 800d3c0:	151b      	asrs	r3, r3, #20
 800d3c2:	9308      	str	r3, [sp, #32]
 800d3c4:	9a08      	ldr	r2, [sp, #32]
 800d3c6:	004b      	lsls	r3, r1, #1
 800d3c8:	0d5b      	lsrs	r3, r3, #21
 800d3ca:	1ad3      	subs	r3, r2, r3
 800d3cc:	2b10      	cmp	r3, #16
 800d3ce:	dc21      	bgt.n	800d414 <__ieee754_rem_pio2+0x1f8>
 800d3d0:	0002      	movs	r2, r0
 800d3d2:	000b      	movs	r3, r1
 800d3d4:	603a      	str	r2, [r7, #0]
 800d3d6:	607b      	str	r3, [r7, #4]
 800d3d8:	9804      	ldr	r0, [sp, #16]
 800d3da:	9905      	ldr	r1, [sp, #20]
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	683a      	ldr	r2, [r7, #0]
 800d3e0:	9302      	str	r3, [sp, #8]
 800d3e2:	9b02      	ldr	r3, [sp, #8]
 800d3e4:	f7f4 fa3c 	bl	8001860 <__aeabi_dsub>
 800d3e8:	0022      	movs	r2, r4
 800d3ea:	002b      	movs	r3, r5
 800d3ec:	f7f4 fa38 	bl	8001860 <__aeabi_dsub>
 800d3f0:	000b      	movs	r3, r1
 800d3f2:	0002      	movs	r2, r0
 800d3f4:	60ba      	str	r2, [r7, #8]
 800d3f6:	60fb      	str	r3, [r7, #12]
 800d3f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	db00      	blt.n	800d400 <__ieee754_rem_pio2+0x1e4>
 800d3fe:	e74a      	b.n	800d296 <__ieee754_rem_pio2+0x7a>
 800d400:	2280      	movs	r2, #128	; 0x80
 800d402:	0612      	lsls	r2, r2, #24
 800d404:	4694      	mov	ip, r2
 800d406:	9b02      	ldr	r3, [sp, #8]
 800d408:	1889      	adds	r1, r1, r2
 800d40a:	4463      	add	r3, ip
 800d40c:	607b      	str	r3, [r7, #4]
 800d40e:	60b8      	str	r0, [r7, #8]
 800d410:	60f9      	str	r1, [r7, #12]
 800d412:	e776      	b.n	800d302 <__ieee754_rem_pio2+0xe6>
 800d414:	22d3      	movs	r2, #211	; 0xd3
 800d416:	9806      	ldr	r0, [sp, #24]
 800d418:	9907      	ldr	r1, [sp, #28]
 800d41a:	4b3f      	ldr	r3, [pc, #252]	; (800d518 <__ieee754_rem_pio2+0x2fc>)
 800d41c:	0552      	lsls	r2, r2, #21
 800d41e:	f7f3 ffb3 	bl	8001388 <__aeabi_dmul>
 800d422:	0004      	movs	r4, r0
 800d424:	000d      	movs	r5, r1
 800d426:	0002      	movs	r2, r0
 800d428:	000b      	movs	r3, r1
 800d42a:	9804      	ldr	r0, [sp, #16]
 800d42c:	9905      	ldr	r1, [sp, #20]
 800d42e:	f7f4 fa17 	bl	8001860 <__aeabi_dsub>
 800d432:	0002      	movs	r2, r0
 800d434:	000b      	movs	r3, r1
 800d436:	9002      	str	r0, [sp, #8]
 800d438:	9103      	str	r1, [sp, #12]
 800d43a:	9804      	ldr	r0, [sp, #16]
 800d43c:	9905      	ldr	r1, [sp, #20]
 800d43e:	f7f4 fa0f 	bl	8001860 <__aeabi_dsub>
 800d442:	0022      	movs	r2, r4
 800d444:	002b      	movs	r3, r5
 800d446:	f7f4 fa0b 	bl	8001860 <__aeabi_dsub>
 800d44a:	0004      	movs	r4, r0
 800d44c:	000d      	movs	r5, r1
 800d44e:	9806      	ldr	r0, [sp, #24]
 800d450:	9907      	ldr	r1, [sp, #28]
 800d452:	4a32      	ldr	r2, [pc, #200]	; (800d51c <__ieee754_rem_pio2+0x300>)
 800d454:	4b32      	ldr	r3, [pc, #200]	; (800d520 <__ieee754_rem_pio2+0x304>)
 800d456:	f7f3 ff97 	bl	8001388 <__aeabi_dmul>
 800d45a:	0022      	movs	r2, r4
 800d45c:	002b      	movs	r3, r5
 800d45e:	f7f4 f9ff 	bl	8001860 <__aeabi_dsub>
 800d462:	0002      	movs	r2, r0
 800d464:	000b      	movs	r3, r1
 800d466:	0004      	movs	r4, r0
 800d468:	000d      	movs	r5, r1
 800d46a:	9802      	ldr	r0, [sp, #8]
 800d46c:	9903      	ldr	r1, [sp, #12]
 800d46e:	f7f4 f9f7 	bl	8001860 <__aeabi_dsub>
 800d472:	9a08      	ldr	r2, [sp, #32]
 800d474:	004b      	lsls	r3, r1, #1
 800d476:	0d5b      	lsrs	r3, r3, #21
 800d478:	1ad3      	subs	r3, r2, r3
 800d47a:	2b31      	cmp	r3, #49	; 0x31
 800d47c:	dc08      	bgt.n	800d490 <__ieee754_rem_pio2+0x274>
 800d47e:	0002      	movs	r2, r0
 800d480:	000b      	movs	r3, r1
 800d482:	603a      	str	r2, [r7, #0]
 800d484:	607b      	str	r3, [r7, #4]
 800d486:	9a02      	ldr	r2, [sp, #8]
 800d488:	9b03      	ldr	r3, [sp, #12]
 800d48a:	9204      	str	r2, [sp, #16]
 800d48c:	9305      	str	r3, [sp, #20]
 800d48e:	e7a3      	b.n	800d3d8 <__ieee754_rem_pio2+0x1bc>
 800d490:	22b8      	movs	r2, #184	; 0xb8
 800d492:	9806      	ldr	r0, [sp, #24]
 800d494:	9907      	ldr	r1, [sp, #28]
 800d496:	4b22      	ldr	r3, [pc, #136]	; (800d520 <__ieee754_rem_pio2+0x304>)
 800d498:	0592      	lsls	r2, r2, #22
 800d49a:	f7f3 ff75 	bl	8001388 <__aeabi_dmul>
 800d49e:	0004      	movs	r4, r0
 800d4a0:	000d      	movs	r5, r1
 800d4a2:	0002      	movs	r2, r0
 800d4a4:	000b      	movs	r3, r1
 800d4a6:	9802      	ldr	r0, [sp, #8]
 800d4a8:	9903      	ldr	r1, [sp, #12]
 800d4aa:	f7f4 f9d9 	bl	8001860 <__aeabi_dsub>
 800d4ae:	0002      	movs	r2, r0
 800d4b0:	000b      	movs	r3, r1
 800d4b2:	9004      	str	r0, [sp, #16]
 800d4b4:	9105      	str	r1, [sp, #20]
 800d4b6:	9802      	ldr	r0, [sp, #8]
 800d4b8:	9903      	ldr	r1, [sp, #12]
 800d4ba:	f7f4 f9d1 	bl	8001860 <__aeabi_dsub>
 800d4be:	0022      	movs	r2, r4
 800d4c0:	002b      	movs	r3, r5
 800d4c2:	f7f4 f9cd 	bl	8001860 <__aeabi_dsub>
 800d4c6:	0004      	movs	r4, r0
 800d4c8:	000d      	movs	r5, r1
 800d4ca:	9806      	ldr	r0, [sp, #24]
 800d4cc:	9907      	ldr	r1, [sp, #28]
 800d4ce:	4a1a      	ldr	r2, [pc, #104]	; (800d538 <__ieee754_rem_pio2+0x31c>)
 800d4d0:	4b1a      	ldr	r3, [pc, #104]	; (800d53c <__ieee754_rem_pio2+0x320>)
 800d4d2:	f7f3 ff59 	bl	8001388 <__aeabi_dmul>
 800d4d6:	0022      	movs	r2, r4
 800d4d8:	002b      	movs	r3, r5
 800d4da:	f7f4 f9c1 	bl	8001860 <__aeabi_dsub>
 800d4de:	0004      	movs	r4, r0
 800d4e0:	000d      	movs	r5, r1
 800d4e2:	e75d      	b.n	800d3a0 <__ieee754_rem_pio2+0x184>
 800d4e4:	4b16      	ldr	r3, [pc, #88]	; (800d540 <__ieee754_rem_pio2+0x324>)
 800d4e6:	9a02      	ldr	r2, [sp, #8]
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	dd2b      	ble.n	800d544 <__ieee754_rem_pio2+0x328>
 800d4ec:	0022      	movs	r2, r4
 800d4ee:	002b      	movs	r3, r5
 800d4f0:	0020      	movs	r0, r4
 800d4f2:	0029      	movs	r1, r5
 800d4f4:	f7f4 f9b4 	bl	8001860 <__aeabi_dsub>
 800d4f8:	60b8      	str	r0, [r7, #8]
 800d4fa:	60f9      	str	r1, [r7, #12]
 800d4fc:	6038      	str	r0, [r7, #0]
 800d4fe:	6079      	str	r1, [r7, #4]
 800d500:	e6a1      	b.n	800d246 <__ieee754_rem_pio2+0x2a>
 800d502:	46c0      	nop			; (mov r8, r8)
 800d504:	3fe921fb 	.word	0x3fe921fb
 800d508:	4002d97b 	.word	0x4002d97b
 800d50c:	3ff921fb 	.word	0x3ff921fb
 800d510:	54400000 	.word	0x54400000
 800d514:	1a626331 	.word	0x1a626331
 800d518:	3dd0b461 	.word	0x3dd0b461
 800d51c:	2e037073 	.word	0x2e037073
 800d520:	3ba3198a 	.word	0x3ba3198a
 800d524:	413921fb 	.word	0x413921fb
 800d528:	6dc9c883 	.word	0x6dc9c883
 800d52c:	3fe45f30 	.word	0x3fe45f30
 800d530:	3fe00000 	.word	0x3fe00000
 800d534:	0800e340 	.word	0x0800e340
 800d538:	252049c1 	.word	0x252049c1
 800d53c:	397b839a 	.word	0x397b839a
 800d540:	7fefffff 	.word	0x7fefffff
 800d544:	9a02      	ldr	r2, [sp, #8]
 800d546:	0020      	movs	r0, r4
 800d548:	1516      	asrs	r6, r2, #20
 800d54a:	4a27      	ldr	r2, [pc, #156]	; (800d5e8 <__ieee754_rem_pio2+0x3cc>)
 800d54c:	18b6      	adds	r6, r6, r2
 800d54e:	9a02      	ldr	r2, [sp, #8]
 800d550:	0533      	lsls	r3, r6, #20
 800d552:	1ad5      	subs	r5, r2, r3
 800d554:	0029      	movs	r1, r5
 800d556:	f7f4 fd15 	bl	8001f84 <__aeabi_d2iz>
 800d55a:	f7f4 fd49 	bl	8001ff0 <__aeabi_i2d>
 800d55e:	0002      	movs	r2, r0
 800d560:	000b      	movs	r3, r1
 800d562:	0020      	movs	r0, r4
 800d564:	0029      	movs	r1, r5
 800d566:	920a      	str	r2, [sp, #40]	; 0x28
 800d568:	930b      	str	r3, [sp, #44]	; 0x2c
 800d56a:	f7f4 f979 	bl	8001860 <__aeabi_dsub>
 800d56e:	2200      	movs	r2, #0
 800d570:	4b1e      	ldr	r3, [pc, #120]	; (800d5ec <__ieee754_rem_pio2+0x3d0>)
 800d572:	f7f3 ff09 	bl	8001388 <__aeabi_dmul>
 800d576:	000d      	movs	r5, r1
 800d578:	0004      	movs	r4, r0
 800d57a:	f7f4 fd03 	bl	8001f84 <__aeabi_d2iz>
 800d57e:	f7f4 fd37 	bl	8001ff0 <__aeabi_i2d>
 800d582:	0002      	movs	r2, r0
 800d584:	000b      	movs	r3, r1
 800d586:	0020      	movs	r0, r4
 800d588:	0029      	movs	r1, r5
 800d58a:	920c      	str	r2, [sp, #48]	; 0x30
 800d58c:	930d      	str	r3, [sp, #52]	; 0x34
 800d58e:	f7f4 f967 	bl	8001860 <__aeabi_dsub>
 800d592:	2200      	movs	r2, #0
 800d594:	4b15      	ldr	r3, [pc, #84]	; (800d5ec <__ieee754_rem_pio2+0x3d0>)
 800d596:	f7f3 fef7 	bl	8001388 <__aeabi_dmul>
 800d59a:	2503      	movs	r5, #3
 800d59c:	900e      	str	r0, [sp, #56]	; 0x38
 800d59e:	910f      	str	r1, [sp, #60]	; 0x3c
 800d5a0:	ac0a      	add	r4, sp, #40	; 0x28
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	6920      	ldr	r0, [r4, #16]
 800d5a6:	6961      	ldr	r1, [r4, #20]
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	9502      	str	r5, [sp, #8]
 800d5ac:	3c08      	subs	r4, #8
 800d5ae:	3d01      	subs	r5, #1
 800d5b0:	f7f2 ff2e 	bl	8000410 <__aeabi_dcmpeq>
 800d5b4:	2800      	cmp	r0, #0
 800d5b6:	d1f4      	bne.n	800d5a2 <__ieee754_rem_pio2+0x386>
 800d5b8:	4b0d      	ldr	r3, [pc, #52]	; (800d5f0 <__ieee754_rem_pio2+0x3d4>)
 800d5ba:	0032      	movs	r2, r6
 800d5bc:	9301      	str	r3, [sp, #4]
 800d5be:	2302      	movs	r3, #2
 800d5c0:	0039      	movs	r1, r7
 800d5c2:	9300      	str	r3, [sp, #0]
 800d5c4:	a80a      	add	r0, sp, #40	; 0x28
 800d5c6:	9b02      	ldr	r3, [sp, #8]
 800d5c8:	f000 f8d4 	bl	800d774 <__kernel_rem_pio2>
 800d5cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5ce:	0006      	movs	r6, r0
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	db00      	blt.n	800d5d6 <__ieee754_rem_pio2+0x3ba>
 800d5d4:	e65f      	b.n	800d296 <__ieee754_rem_pio2+0x7a>
 800d5d6:	2280      	movs	r2, #128	; 0x80
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	0612      	lsls	r2, r2, #24
 800d5dc:	189b      	adds	r3, r3, r2
 800d5de:	607b      	str	r3, [r7, #4]
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	189b      	adds	r3, r3, r2
 800d5e4:	60fb      	str	r3, [r7, #12]
 800d5e6:	e68c      	b.n	800d302 <__ieee754_rem_pio2+0xe6>
 800d5e8:	fffffbea 	.word	0xfffffbea
 800d5ec:	41700000 	.word	0x41700000
 800d5f0:	0800e3c0 	.word	0x0800e3c0

0800d5f4 <__kernel_cos>:
 800d5f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5f6:	b087      	sub	sp, #28
 800d5f8:	9204      	str	r2, [sp, #16]
 800d5fa:	9305      	str	r3, [sp, #20]
 800d5fc:	004b      	lsls	r3, r1, #1
 800d5fe:	085b      	lsrs	r3, r3, #1
 800d600:	9300      	str	r3, [sp, #0]
 800d602:	23f9      	movs	r3, #249	; 0xf9
 800d604:	9a00      	ldr	r2, [sp, #0]
 800d606:	0007      	movs	r7, r0
 800d608:	000e      	movs	r6, r1
 800d60a:	059b      	lsls	r3, r3, #22
 800d60c:	429a      	cmp	r2, r3
 800d60e:	da04      	bge.n	800d61a <__kernel_cos+0x26>
 800d610:	f7f4 fcb8 	bl	8001f84 <__aeabi_d2iz>
 800d614:	2800      	cmp	r0, #0
 800d616:	d100      	bne.n	800d61a <__kernel_cos+0x26>
 800d618:	e084      	b.n	800d724 <__kernel_cos+0x130>
 800d61a:	003a      	movs	r2, r7
 800d61c:	0033      	movs	r3, r6
 800d61e:	0038      	movs	r0, r7
 800d620:	0031      	movs	r1, r6
 800d622:	f7f3 feb1 	bl	8001388 <__aeabi_dmul>
 800d626:	2200      	movs	r2, #0
 800d628:	4b40      	ldr	r3, [pc, #256]	; (800d72c <__kernel_cos+0x138>)
 800d62a:	0004      	movs	r4, r0
 800d62c:	000d      	movs	r5, r1
 800d62e:	f7f3 feab 	bl	8001388 <__aeabi_dmul>
 800d632:	4a3f      	ldr	r2, [pc, #252]	; (800d730 <__kernel_cos+0x13c>)
 800d634:	9002      	str	r0, [sp, #8]
 800d636:	9103      	str	r1, [sp, #12]
 800d638:	4b3e      	ldr	r3, [pc, #248]	; (800d734 <__kernel_cos+0x140>)
 800d63a:	0020      	movs	r0, r4
 800d63c:	0029      	movs	r1, r5
 800d63e:	f7f3 fea3 	bl	8001388 <__aeabi_dmul>
 800d642:	4a3d      	ldr	r2, [pc, #244]	; (800d738 <__kernel_cos+0x144>)
 800d644:	4b3d      	ldr	r3, [pc, #244]	; (800d73c <__kernel_cos+0x148>)
 800d646:	f7f2 ff2f 	bl	80004a8 <__aeabi_dadd>
 800d64a:	0022      	movs	r2, r4
 800d64c:	002b      	movs	r3, r5
 800d64e:	f7f3 fe9b 	bl	8001388 <__aeabi_dmul>
 800d652:	4a3b      	ldr	r2, [pc, #236]	; (800d740 <__kernel_cos+0x14c>)
 800d654:	4b3b      	ldr	r3, [pc, #236]	; (800d744 <__kernel_cos+0x150>)
 800d656:	f7f4 f903 	bl	8001860 <__aeabi_dsub>
 800d65a:	0022      	movs	r2, r4
 800d65c:	002b      	movs	r3, r5
 800d65e:	f7f3 fe93 	bl	8001388 <__aeabi_dmul>
 800d662:	4a39      	ldr	r2, [pc, #228]	; (800d748 <__kernel_cos+0x154>)
 800d664:	4b39      	ldr	r3, [pc, #228]	; (800d74c <__kernel_cos+0x158>)
 800d666:	f7f2 ff1f 	bl	80004a8 <__aeabi_dadd>
 800d66a:	0022      	movs	r2, r4
 800d66c:	002b      	movs	r3, r5
 800d66e:	f7f3 fe8b 	bl	8001388 <__aeabi_dmul>
 800d672:	4a37      	ldr	r2, [pc, #220]	; (800d750 <__kernel_cos+0x15c>)
 800d674:	4b37      	ldr	r3, [pc, #220]	; (800d754 <__kernel_cos+0x160>)
 800d676:	f7f4 f8f3 	bl	8001860 <__aeabi_dsub>
 800d67a:	0022      	movs	r2, r4
 800d67c:	002b      	movs	r3, r5
 800d67e:	f7f3 fe83 	bl	8001388 <__aeabi_dmul>
 800d682:	4a35      	ldr	r2, [pc, #212]	; (800d758 <__kernel_cos+0x164>)
 800d684:	4b35      	ldr	r3, [pc, #212]	; (800d75c <__kernel_cos+0x168>)
 800d686:	f7f2 ff0f 	bl	80004a8 <__aeabi_dadd>
 800d68a:	0022      	movs	r2, r4
 800d68c:	002b      	movs	r3, r5
 800d68e:	f7f3 fe7b 	bl	8001388 <__aeabi_dmul>
 800d692:	0022      	movs	r2, r4
 800d694:	002b      	movs	r3, r5
 800d696:	f7f3 fe77 	bl	8001388 <__aeabi_dmul>
 800d69a:	9a04      	ldr	r2, [sp, #16]
 800d69c:	9b05      	ldr	r3, [sp, #20]
 800d69e:	0004      	movs	r4, r0
 800d6a0:	000d      	movs	r5, r1
 800d6a2:	0038      	movs	r0, r7
 800d6a4:	0031      	movs	r1, r6
 800d6a6:	f7f3 fe6f 	bl	8001388 <__aeabi_dmul>
 800d6aa:	0002      	movs	r2, r0
 800d6ac:	000b      	movs	r3, r1
 800d6ae:	0020      	movs	r0, r4
 800d6b0:	0029      	movs	r1, r5
 800d6b2:	f7f4 f8d5 	bl	8001860 <__aeabi_dsub>
 800d6b6:	4b2a      	ldr	r3, [pc, #168]	; (800d760 <__kernel_cos+0x16c>)
 800d6b8:	9a00      	ldr	r2, [sp, #0]
 800d6ba:	0004      	movs	r4, r0
 800d6bc:	000d      	movs	r5, r1
 800d6be:	429a      	cmp	r2, r3
 800d6c0:	dc0d      	bgt.n	800d6de <__kernel_cos+0xea>
 800d6c2:	0002      	movs	r2, r0
 800d6c4:	000b      	movs	r3, r1
 800d6c6:	9802      	ldr	r0, [sp, #8]
 800d6c8:	9903      	ldr	r1, [sp, #12]
 800d6ca:	f7f4 f8c9 	bl	8001860 <__aeabi_dsub>
 800d6ce:	0002      	movs	r2, r0
 800d6d0:	2000      	movs	r0, #0
 800d6d2:	000b      	movs	r3, r1
 800d6d4:	4923      	ldr	r1, [pc, #140]	; (800d764 <__kernel_cos+0x170>)
 800d6d6:	f7f4 f8c3 	bl	8001860 <__aeabi_dsub>
 800d6da:	b007      	add	sp, #28
 800d6dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6de:	4b22      	ldr	r3, [pc, #136]	; (800d768 <__kernel_cos+0x174>)
 800d6e0:	9a00      	ldr	r2, [sp, #0]
 800d6e2:	2600      	movs	r6, #0
 800d6e4:	429a      	cmp	r2, r3
 800d6e6:	dc1b      	bgt.n	800d720 <__kernel_cos+0x12c>
 800d6e8:	0013      	movs	r3, r2
 800d6ea:	4a20      	ldr	r2, [pc, #128]	; (800d76c <__kernel_cos+0x178>)
 800d6ec:	4694      	mov	ip, r2
 800d6ee:	4463      	add	r3, ip
 800d6f0:	001f      	movs	r7, r3
 800d6f2:	0032      	movs	r2, r6
 800d6f4:	003b      	movs	r3, r7
 800d6f6:	2000      	movs	r0, #0
 800d6f8:	491a      	ldr	r1, [pc, #104]	; (800d764 <__kernel_cos+0x170>)
 800d6fa:	f7f4 f8b1 	bl	8001860 <__aeabi_dsub>
 800d6fe:	0032      	movs	r2, r6
 800d700:	003b      	movs	r3, r7
 800d702:	9000      	str	r0, [sp, #0]
 800d704:	9101      	str	r1, [sp, #4]
 800d706:	9802      	ldr	r0, [sp, #8]
 800d708:	9903      	ldr	r1, [sp, #12]
 800d70a:	f7f4 f8a9 	bl	8001860 <__aeabi_dsub>
 800d70e:	0022      	movs	r2, r4
 800d710:	002b      	movs	r3, r5
 800d712:	f7f4 f8a5 	bl	8001860 <__aeabi_dsub>
 800d716:	0002      	movs	r2, r0
 800d718:	000b      	movs	r3, r1
 800d71a:	9800      	ldr	r0, [sp, #0]
 800d71c:	9901      	ldr	r1, [sp, #4]
 800d71e:	e7da      	b.n	800d6d6 <__kernel_cos+0xe2>
 800d720:	4f13      	ldr	r7, [pc, #76]	; (800d770 <__kernel_cos+0x17c>)
 800d722:	e7e6      	b.n	800d6f2 <__kernel_cos+0xfe>
 800d724:	2000      	movs	r0, #0
 800d726:	490f      	ldr	r1, [pc, #60]	; (800d764 <__kernel_cos+0x170>)
 800d728:	e7d7      	b.n	800d6da <__kernel_cos+0xe6>
 800d72a:	46c0      	nop			; (mov r8, r8)
 800d72c:	3fe00000 	.word	0x3fe00000
 800d730:	be8838d4 	.word	0xbe8838d4
 800d734:	bda8fae9 	.word	0xbda8fae9
 800d738:	bdb4b1c4 	.word	0xbdb4b1c4
 800d73c:	3e21ee9e 	.word	0x3e21ee9e
 800d740:	809c52ad 	.word	0x809c52ad
 800d744:	3e927e4f 	.word	0x3e927e4f
 800d748:	19cb1590 	.word	0x19cb1590
 800d74c:	3efa01a0 	.word	0x3efa01a0
 800d750:	16c15177 	.word	0x16c15177
 800d754:	3f56c16c 	.word	0x3f56c16c
 800d758:	5555554c 	.word	0x5555554c
 800d75c:	3fa55555 	.word	0x3fa55555
 800d760:	3fd33332 	.word	0x3fd33332
 800d764:	3ff00000 	.word	0x3ff00000
 800d768:	3fe90000 	.word	0x3fe90000
 800d76c:	ffe00000 	.word	0xffe00000
 800d770:	3fd20000 	.word	0x3fd20000

0800d774 <__kernel_rem_pio2>:
 800d774:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d776:	4cd0      	ldr	r4, [pc, #832]	; (800dab8 <__kernel_rem_pio2+0x344>)
 800d778:	44a5      	add	sp, r4
 800d77a:	930d      	str	r3, [sp, #52]	; 0x34
 800d77c:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d77e:	0014      	movs	r4, r2
 800d780:	009a      	lsls	r2, r3, #2
 800d782:	4bce      	ldr	r3, [pc, #824]	; (800dabc <__kernel_rem_pio2+0x348>)
 800d784:	900e      	str	r0, [sp, #56]	; 0x38
 800d786:	58d3      	ldr	r3, [r2, r3]
 800d788:	9107      	str	r1, [sp, #28]
 800d78a:	9308      	str	r3, [sp, #32]
 800d78c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d78e:	3b01      	subs	r3, #1
 800d790:	930c      	str	r3, [sp, #48]	; 0x30
 800d792:	2300      	movs	r3, #0
 800d794:	9300      	str	r3, [sp, #0]
 800d796:	0023      	movs	r3, r4
 800d798:	3314      	adds	r3, #20
 800d79a:	db04      	blt.n	800d7a6 <__kernel_rem_pio2+0x32>
 800d79c:	2118      	movs	r1, #24
 800d79e:	1ee0      	subs	r0, r4, #3
 800d7a0:	f7f2 fd3a 	bl	8000218 <__divsi3>
 800d7a4:	9000      	str	r0, [sp, #0]
 800d7a6:	2218      	movs	r2, #24
 800d7a8:	9b00      	ldr	r3, [sp, #0]
 800d7aa:	4252      	negs	r2, r2
 800d7ac:	3301      	adds	r3, #1
 800d7ae:	435a      	muls	r2, r3
 800d7b0:	1913      	adds	r3, r2, r4
 800d7b2:	9302      	str	r3, [sp, #8]
 800d7b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d7b6:	9b00      	ldr	r3, [sp, #0]
 800d7b8:	ae26      	add	r6, sp, #152	; 0x98
 800d7ba:	1a9d      	subs	r5, r3, r2
 800d7bc:	002c      	movs	r4, r5
 800d7be:	9b08      	ldr	r3, [sp, #32]
 800d7c0:	189f      	adds	r7, r3, r2
 800d7c2:	1b63      	subs	r3, r4, r5
 800d7c4:	429f      	cmp	r7, r3
 800d7c6:	da17      	bge.n	800d7f8 <__kernel_rem_pio2+0x84>
 800d7c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d7ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d7cc:	9304      	str	r3, [sp, #16]
 800d7ce:	ab76      	add	r3, sp, #472	; 0x1d8
 800d7d0:	930a      	str	r3, [sp, #40]	; 0x28
 800d7d2:	2301      	movs	r3, #1
 800d7d4:	1a9b      	subs	r3, r3, r2
 800d7d6:	930b      	str	r3, [sp, #44]	; 0x2c
 800d7d8:	ab28      	add	r3, sp, #160	; 0xa0
 800d7da:	930f      	str	r3, [sp, #60]	; 0x3c
 800d7dc:	9a04      	ldr	r2, [sp, #16]
 800d7de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d7e0:	189b      	adds	r3, r3, r2
 800d7e2:	9a08      	ldr	r2, [sp, #32]
 800d7e4:	429a      	cmp	r2, r3
 800d7e6:	db31      	blt.n	800d84c <__kernel_rem_pio2+0xd8>
 800d7e8:	9b04      	ldr	r3, [sp, #16]
 800d7ea:	2400      	movs	r4, #0
 800d7ec:	00de      	lsls	r6, r3, #3
 800d7ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d7f0:	2500      	movs	r5, #0
 800d7f2:	2700      	movs	r7, #0
 800d7f4:	199e      	adds	r6, r3, r6
 800d7f6:	e01e      	b.n	800d836 <__kernel_rem_pio2+0xc2>
 800d7f8:	2c00      	cmp	r4, #0
 800d7fa:	db07      	blt.n	800d80c <__kernel_rem_pio2+0x98>
 800d7fc:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 800d7fe:	00a3      	lsls	r3, r4, #2
 800d800:	58d0      	ldr	r0, [r2, r3]
 800d802:	f7f4 fbf5 	bl	8001ff0 <__aeabi_i2d>
 800d806:	c603      	stmia	r6!, {r0, r1}
 800d808:	3401      	adds	r4, #1
 800d80a:	e7da      	b.n	800d7c2 <__kernel_rem_pio2+0x4e>
 800d80c:	2000      	movs	r0, #0
 800d80e:	2100      	movs	r1, #0
 800d810:	e7f9      	b.n	800d806 <__kernel_rem_pio2+0x92>
 800d812:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d814:	00f9      	lsls	r1, r7, #3
 800d816:	1859      	adds	r1, r3, r1
 800d818:	6808      	ldr	r0, [r1, #0]
 800d81a:	6849      	ldr	r1, [r1, #4]
 800d81c:	6832      	ldr	r2, [r6, #0]
 800d81e:	6873      	ldr	r3, [r6, #4]
 800d820:	f7f3 fdb2 	bl	8001388 <__aeabi_dmul>
 800d824:	0002      	movs	r2, r0
 800d826:	000b      	movs	r3, r1
 800d828:	0020      	movs	r0, r4
 800d82a:	0029      	movs	r1, r5
 800d82c:	f7f2 fe3c 	bl	80004a8 <__aeabi_dadd>
 800d830:	0004      	movs	r4, r0
 800d832:	000d      	movs	r5, r1
 800d834:	3701      	adds	r7, #1
 800d836:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d838:	3e08      	subs	r6, #8
 800d83a:	429f      	cmp	r7, r3
 800d83c:	dde9      	ble.n	800d812 <__kernel_rem_pio2+0x9e>
 800d83e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d840:	c330      	stmia	r3!, {r4, r5}
 800d842:	930a      	str	r3, [sp, #40]	; 0x28
 800d844:	9b04      	ldr	r3, [sp, #16]
 800d846:	3301      	adds	r3, #1
 800d848:	9304      	str	r3, [sp, #16]
 800d84a:	e7c7      	b.n	800d7dc <__kernel_rem_pio2+0x68>
 800d84c:	9b08      	ldr	r3, [sp, #32]
 800d84e:	aa12      	add	r2, sp, #72	; 0x48
 800d850:	009b      	lsls	r3, r3, #2
 800d852:	189b      	adds	r3, r3, r2
 800d854:	9310      	str	r3, [sp, #64]	; 0x40
 800d856:	9b00      	ldr	r3, [sp, #0]
 800d858:	0098      	lsls	r0, r3, #2
 800d85a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800d85c:	181b      	adds	r3, r3, r0
 800d85e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d860:	9b08      	ldr	r3, [sp, #32]
 800d862:	9304      	str	r3, [sp, #16]
 800d864:	9b04      	ldr	r3, [sp, #16]
 800d866:	aa76      	add	r2, sp, #472	; 0x1d8
 800d868:	00db      	lsls	r3, r3, #3
 800d86a:	18d3      	adds	r3, r2, r3
 800d86c:	681c      	ldr	r4, [r3, #0]
 800d86e:	685d      	ldr	r5, [r3, #4]
 800d870:	ab12      	add	r3, sp, #72	; 0x48
 800d872:	9300      	str	r3, [sp, #0]
 800d874:	930b      	str	r3, [sp, #44]	; 0x2c
 800d876:	9b04      	ldr	r3, [sp, #16]
 800d878:	9211      	str	r2, [sp, #68]	; 0x44
 800d87a:	930a      	str	r3, [sp, #40]	; 0x28
 800d87c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d87e:	2b00      	cmp	r3, #0
 800d880:	dc74      	bgt.n	800d96c <__kernel_rem_pio2+0x1f8>
 800d882:	0020      	movs	r0, r4
 800d884:	0029      	movs	r1, r5
 800d886:	9a02      	ldr	r2, [sp, #8]
 800d888:	f000 fc24 	bl	800e0d4 <scalbn>
 800d88c:	23ff      	movs	r3, #255	; 0xff
 800d88e:	2200      	movs	r2, #0
 800d890:	059b      	lsls	r3, r3, #22
 800d892:	0004      	movs	r4, r0
 800d894:	000d      	movs	r5, r1
 800d896:	f7f3 fd77 	bl	8001388 <__aeabi_dmul>
 800d89a:	f000 fb91 	bl	800dfc0 <floor>
 800d89e:	2200      	movs	r2, #0
 800d8a0:	4b87      	ldr	r3, [pc, #540]	; (800dac0 <__kernel_rem_pio2+0x34c>)
 800d8a2:	f7f3 fd71 	bl	8001388 <__aeabi_dmul>
 800d8a6:	0002      	movs	r2, r0
 800d8a8:	000b      	movs	r3, r1
 800d8aa:	0020      	movs	r0, r4
 800d8ac:	0029      	movs	r1, r5
 800d8ae:	f7f3 ffd7 	bl	8001860 <__aeabi_dsub>
 800d8b2:	000d      	movs	r5, r1
 800d8b4:	0004      	movs	r4, r0
 800d8b6:	f7f4 fb65 	bl	8001f84 <__aeabi_d2iz>
 800d8ba:	900b      	str	r0, [sp, #44]	; 0x2c
 800d8bc:	f7f4 fb98 	bl	8001ff0 <__aeabi_i2d>
 800d8c0:	000b      	movs	r3, r1
 800d8c2:	0002      	movs	r2, r0
 800d8c4:	0029      	movs	r1, r5
 800d8c6:	0020      	movs	r0, r4
 800d8c8:	f7f3 ffca 	bl	8001860 <__aeabi_dsub>
 800d8cc:	9b02      	ldr	r3, [sp, #8]
 800d8ce:	0006      	movs	r6, r0
 800d8d0:	000f      	movs	r7, r1
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	dd74      	ble.n	800d9c0 <__kernel_rem_pio2+0x24c>
 800d8d6:	2118      	movs	r1, #24
 800d8d8:	9b04      	ldr	r3, [sp, #16]
 800d8da:	aa12      	add	r2, sp, #72	; 0x48
 800d8dc:	3b01      	subs	r3, #1
 800d8de:	009b      	lsls	r3, r3, #2
 800d8e0:	589a      	ldr	r2, [r3, r2]
 800d8e2:	9802      	ldr	r0, [sp, #8]
 800d8e4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800d8e6:	1a09      	subs	r1, r1, r0
 800d8e8:	0010      	movs	r0, r2
 800d8ea:	4108      	asrs	r0, r1
 800d8ec:	1824      	adds	r4, r4, r0
 800d8ee:	4088      	lsls	r0, r1
 800d8f0:	a912      	add	r1, sp, #72	; 0x48
 800d8f2:	1a12      	subs	r2, r2, r0
 800d8f4:	505a      	str	r2, [r3, r1]
 800d8f6:	2317      	movs	r3, #23
 800d8f8:	9902      	ldr	r1, [sp, #8]
 800d8fa:	940b      	str	r4, [sp, #44]	; 0x2c
 800d8fc:	1a5b      	subs	r3, r3, r1
 800d8fe:	411a      	asrs	r2, r3
 800d900:	920a      	str	r2, [sp, #40]	; 0x28
 800d902:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d904:	2b00      	cmp	r3, #0
 800d906:	dd6d      	ble.n	800d9e4 <__kernel_rem_pio2+0x270>
 800d908:	2200      	movs	r2, #0
 800d90a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d90c:	2080      	movs	r0, #128	; 0x80
 800d90e:	3301      	adds	r3, #1
 800d910:	930b      	str	r3, [sp, #44]	; 0x2c
 800d912:	4b6c      	ldr	r3, [pc, #432]	; (800dac4 <__kernel_rem_pio2+0x350>)
 800d914:	0014      	movs	r4, r2
 800d916:	469c      	mov	ip, r3
 800d918:	2501      	movs	r5, #1
 800d91a:	0440      	lsls	r0, r0, #17
 800d91c:	9b04      	ldr	r3, [sp, #16]
 800d91e:	4293      	cmp	r3, r2
 800d920:	dd00      	ble.n	800d924 <__kernel_rem_pio2+0x1b0>
 800d922:	e098      	b.n	800da56 <__kernel_rem_pio2+0x2e2>
 800d924:	9b02      	ldr	r3, [sp, #8]
 800d926:	2b00      	cmp	r3, #0
 800d928:	dd05      	ble.n	800d936 <__kernel_rem_pio2+0x1c2>
 800d92a:	2b01      	cmp	r3, #1
 800d92c:	d100      	bne.n	800d930 <__kernel_rem_pio2+0x1bc>
 800d92e:	e0a8      	b.n	800da82 <__kernel_rem_pio2+0x30e>
 800d930:	2b02      	cmp	r3, #2
 800d932:	d100      	bne.n	800d936 <__kernel_rem_pio2+0x1c2>
 800d934:	e0b0      	b.n	800da98 <__kernel_rem_pio2+0x324>
 800d936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d938:	2b02      	cmp	r3, #2
 800d93a:	d153      	bne.n	800d9e4 <__kernel_rem_pio2+0x270>
 800d93c:	0032      	movs	r2, r6
 800d93e:	003b      	movs	r3, r7
 800d940:	2000      	movs	r0, #0
 800d942:	4961      	ldr	r1, [pc, #388]	; (800dac8 <__kernel_rem_pio2+0x354>)
 800d944:	f7f3 ff8c 	bl	8001860 <__aeabi_dsub>
 800d948:	0006      	movs	r6, r0
 800d94a:	000f      	movs	r7, r1
 800d94c:	2c00      	cmp	r4, #0
 800d94e:	d049      	beq.n	800d9e4 <__kernel_rem_pio2+0x270>
 800d950:	9a02      	ldr	r2, [sp, #8]
 800d952:	2000      	movs	r0, #0
 800d954:	495c      	ldr	r1, [pc, #368]	; (800dac8 <__kernel_rem_pio2+0x354>)
 800d956:	f000 fbbd 	bl	800e0d4 <scalbn>
 800d95a:	0002      	movs	r2, r0
 800d95c:	000b      	movs	r3, r1
 800d95e:	0030      	movs	r0, r6
 800d960:	0039      	movs	r1, r7
 800d962:	f7f3 ff7d 	bl	8001860 <__aeabi_dsub>
 800d966:	0006      	movs	r6, r0
 800d968:	000f      	movs	r7, r1
 800d96a:	e03b      	b.n	800d9e4 <__kernel_rem_pio2+0x270>
 800d96c:	2200      	movs	r2, #0
 800d96e:	4b57      	ldr	r3, [pc, #348]	; (800dacc <__kernel_rem_pio2+0x358>)
 800d970:	0020      	movs	r0, r4
 800d972:	0029      	movs	r1, r5
 800d974:	f7f3 fd08 	bl	8001388 <__aeabi_dmul>
 800d978:	f7f4 fb04 	bl	8001f84 <__aeabi_d2iz>
 800d97c:	f7f4 fb38 	bl	8001ff0 <__aeabi_i2d>
 800d980:	2200      	movs	r2, #0
 800d982:	4b53      	ldr	r3, [pc, #332]	; (800dad0 <__kernel_rem_pio2+0x35c>)
 800d984:	0006      	movs	r6, r0
 800d986:	000f      	movs	r7, r1
 800d988:	f7f3 fcfe 	bl	8001388 <__aeabi_dmul>
 800d98c:	0002      	movs	r2, r0
 800d98e:	000b      	movs	r3, r1
 800d990:	0020      	movs	r0, r4
 800d992:	0029      	movs	r1, r5
 800d994:	f7f3 ff64 	bl	8001860 <__aeabi_dsub>
 800d998:	f7f4 faf4 	bl	8001f84 <__aeabi_d2iz>
 800d99c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d99e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d9a0:	c301      	stmia	r3!, {r0}
 800d9a2:	930b      	str	r3, [sp, #44]	; 0x2c
 800d9a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9a6:	0030      	movs	r0, r6
 800d9a8:	3b01      	subs	r3, #1
 800d9aa:	930a      	str	r3, [sp, #40]	; 0x28
 800d9ac:	00db      	lsls	r3, r3, #3
 800d9ae:	18d3      	adds	r3, r2, r3
 800d9b0:	0039      	movs	r1, r7
 800d9b2:	681a      	ldr	r2, [r3, #0]
 800d9b4:	685b      	ldr	r3, [r3, #4]
 800d9b6:	f7f2 fd77 	bl	80004a8 <__aeabi_dadd>
 800d9ba:	0004      	movs	r4, r0
 800d9bc:	000d      	movs	r5, r1
 800d9be:	e75d      	b.n	800d87c <__kernel_rem_pio2+0x108>
 800d9c0:	9b02      	ldr	r3, [sp, #8]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d107      	bne.n	800d9d6 <__kernel_rem_pio2+0x262>
 800d9c6:	9b04      	ldr	r3, [sp, #16]
 800d9c8:	aa12      	add	r2, sp, #72	; 0x48
 800d9ca:	3b01      	subs	r3, #1
 800d9cc:	009b      	lsls	r3, r3, #2
 800d9ce:	5898      	ldr	r0, [r3, r2]
 800d9d0:	15c3      	asrs	r3, r0, #23
 800d9d2:	930a      	str	r3, [sp, #40]	; 0x28
 800d9d4:	e795      	b.n	800d902 <__kernel_rem_pio2+0x18e>
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	4b3e      	ldr	r3, [pc, #248]	; (800dad4 <__kernel_rem_pio2+0x360>)
 800d9da:	f7f2 fd3d 	bl	8000458 <__aeabi_dcmpge>
 800d9de:	2800      	cmp	r0, #0
 800d9e0:	d136      	bne.n	800da50 <__kernel_rem_pio2+0x2dc>
 800d9e2:	900a      	str	r0, [sp, #40]	; 0x28
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	0030      	movs	r0, r6
 800d9ea:	0039      	movs	r1, r7
 800d9ec:	f7f2 fd10 	bl	8000410 <__aeabi_dcmpeq>
 800d9f0:	2800      	cmp	r0, #0
 800d9f2:	d100      	bne.n	800d9f6 <__kernel_rem_pio2+0x282>
 800d9f4:	e0b9      	b.n	800db6a <__kernel_rem_pio2+0x3f6>
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	9b04      	ldr	r3, [sp, #16]
 800d9fa:	3b01      	subs	r3, #1
 800d9fc:	9300      	str	r3, [sp, #0]
 800d9fe:	9908      	ldr	r1, [sp, #32]
 800da00:	428b      	cmp	r3, r1
 800da02:	da52      	bge.n	800daaa <__kernel_rem_pio2+0x336>
 800da04:	2a00      	cmp	r2, #0
 800da06:	d100      	bne.n	800da0a <__kernel_rem_pio2+0x296>
 800da08:	e095      	b.n	800db36 <__kernel_rem_pio2+0x3c2>
 800da0a:	9b02      	ldr	r3, [sp, #8]
 800da0c:	aa12      	add	r2, sp, #72	; 0x48
 800da0e:	3b18      	subs	r3, #24
 800da10:	9302      	str	r3, [sp, #8]
 800da12:	9b00      	ldr	r3, [sp, #0]
 800da14:	009b      	lsls	r3, r3, #2
 800da16:	589b      	ldr	r3, [r3, r2]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d100      	bne.n	800da1e <__kernel_rem_pio2+0x2aa>
 800da1c:	e0a1      	b.n	800db62 <__kernel_rem_pio2+0x3ee>
 800da1e:	2000      	movs	r0, #0
 800da20:	9a02      	ldr	r2, [sp, #8]
 800da22:	4929      	ldr	r1, [pc, #164]	; (800dac8 <__kernel_rem_pio2+0x354>)
 800da24:	f000 fb56 	bl	800e0d4 <scalbn>
 800da28:	0006      	movs	r6, r0
 800da2a:	000f      	movs	r7, r1
 800da2c:	9c00      	ldr	r4, [sp, #0]
 800da2e:	2c00      	cmp	r4, #0
 800da30:	db00      	blt.n	800da34 <__kernel_rem_pio2+0x2c0>
 800da32:	e0d9      	b.n	800dbe8 <__kernel_rem_pio2+0x474>
 800da34:	2600      	movs	r6, #0
 800da36:	9d00      	ldr	r5, [sp, #0]
 800da38:	2d00      	cmp	r5, #0
 800da3a:	da00      	bge.n	800da3e <__kernel_rem_pio2+0x2ca>
 800da3c:	e10c      	b.n	800dc58 <__kernel_rem_pio2+0x4e4>
 800da3e:	ab76      	add	r3, sp, #472	; 0x1d8
 800da40:	00ef      	lsls	r7, r5, #3
 800da42:	2400      	movs	r4, #0
 800da44:	18ff      	adds	r7, r7, r3
 800da46:	2300      	movs	r3, #0
 800da48:	9302      	str	r3, [sp, #8]
 800da4a:	9403      	str	r4, [sp, #12]
 800da4c:	2400      	movs	r4, #0
 800da4e:	e0f4      	b.n	800dc3a <__kernel_rem_pio2+0x4c6>
 800da50:	2302      	movs	r3, #2
 800da52:	930a      	str	r3, [sp, #40]	; 0x28
 800da54:	e758      	b.n	800d908 <__kernel_rem_pio2+0x194>
 800da56:	9b00      	ldr	r3, [sp, #0]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	2c00      	cmp	r4, #0
 800da5c:	d10b      	bne.n	800da76 <__kernel_rem_pio2+0x302>
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d003      	beq.n	800da6a <__kernel_rem_pio2+0x2f6>
 800da62:	9c00      	ldr	r4, [sp, #0]
 800da64:	1ac3      	subs	r3, r0, r3
 800da66:	6023      	str	r3, [r4, #0]
 800da68:	002b      	movs	r3, r5
 800da6a:	9c00      	ldr	r4, [sp, #0]
 800da6c:	3201      	adds	r2, #1
 800da6e:	3404      	adds	r4, #4
 800da70:	9400      	str	r4, [sp, #0]
 800da72:	001c      	movs	r4, r3
 800da74:	e752      	b.n	800d91c <__kernel_rem_pio2+0x1a8>
 800da76:	4661      	mov	r1, ip
 800da78:	1acb      	subs	r3, r1, r3
 800da7a:	9900      	ldr	r1, [sp, #0]
 800da7c:	600b      	str	r3, [r1, #0]
 800da7e:	0023      	movs	r3, r4
 800da80:	e7f3      	b.n	800da6a <__kernel_rem_pio2+0x2f6>
 800da82:	9b04      	ldr	r3, [sp, #16]
 800da84:	aa12      	add	r2, sp, #72	; 0x48
 800da86:	3b01      	subs	r3, #1
 800da88:	009b      	lsls	r3, r3, #2
 800da8a:	589a      	ldr	r2, [r3, r2]
 800da8c:	9200      	str	r2, [sp, #0]
 800da8e:	0252      	lsls	r2, r2, #9
 800da90:	0a52      	lsrs	r2, r2, #9
 800da92:	a912      	add	r1, sp, #72	; 0x48
 800da94:	505a      	str	r2, [r3, r1]
 800da96:	e74e      	b.n	800d936 <__kernel_rem_pio2+0x1c2>
 800da98:	9b04      	ldr	r3, [sp, #16]
 800da9a:	aa12      	add	r2, sp, #72	; 0x48
 800da9c:	3b01      	subs	r3, #1
 800da9e:	009b      	lsls	r3, r3, #2
 800daa0:	589a      	ldr	r2, [r3, r2]
 800daa2:	9200      	str	r2, [sp, #0]
 800daa4:	0292      	lsls	r2, r2, #10
 800daa6:	0a92      	lsrs	r2, r2, #10
 800daa8:	e7f3      	b.n	800da92 <__kernel_rem_pio2+0x31e>
 800daaa:	0099      	lsls	r1, r3, #2
 800daac:	a812      	add	r0, sp, #72	; 0x48
 800daae:	5809      	ldr	r1, [r1, r0]
 800dab0:	3b01      	subs	r3, #1
 800dab2:	430a      	orrs	r2, r1
 800dab4:	e7a3      	b.n	800d9fe <__kernel_rem_pio2+0x28a>
 800dab6:	46c0      	nop			; (mov r8, r8)
 800dab8:	fffffd84 	.word	0xfffffd84
 800dabc:	0800e508 	.word	0x0800e508
 800dac0:	40200000 	.word	0x40200000
 800dac4:	00ffffff 	.word	0x00ffffff
 800dac8:	3ff00000 	.word	0x3ff00000
 800dacc:	3e700000 	.word	0x3e700000
 800dad0:	41700000 	.word	0x41700000
 800dad4:	3fe00000 	.word	0x3fe00000
 800dad8:	3301      	adds	r3, #1
 800dada:	9910      	ldr	r1, [sp, #64]	; 0x40
 800dadc:	009a      	lsls	r2, r3, #2
 800dade:	4252      	negs	r2, r2
 800dae0:	588a      	ldr	r2, [r1, r2]
 800dae2:	2a00      	cmp	r2, #0
 800dae4:	d0f8      	beq.n	800dad8 <__kernel_rem_pio2+0x364>
 800dae6:	9a04      	ldr	r2, [sp, #16]
 800dae8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800daea:	1c57      	adds	r7, r2, #1
 800daec:	1854      	adds	r4, r2, r1
 800daee:	00e4      	lsls	r4, r4, #3
 800daf0:	aa26      	add	r2, sp, #152	; 0x98
 800daf2:	1914      	adds	r4, r2, r4
 800daf4:	9a04      	ldr	r2, [sp, #16]
 800daf6:	18d3      	adds	r3, r2, r3
 800daf8:	9304      	str	r3, [sp, #16]
 800dafa:	9b04      	ldr	r3, [sp, #16]
 800dafc:	42bb      	cmp	r3, r7
 800dafe:	da00      	bge.n	800db02 <__kernel_rem_pio2+0x38e>
 800db00:	e6b0      	b.n	800d864 <__kernel_rem_pio2+0xf0>
 800db02:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800db04:	00bb      	lsls	r3, r7, #2
 800db06:	58d0      	ldr	r0, [r2, r3]
 800db08:	f7f4 fa72 	bl	8001ff0 <__aeabi_i2d>
 800db0c:	2200      	movs	r2, #0
 800db0e:	2300      	movs	r3, #0
 800db10:	0026      	movs	r6, r4
 800db12:	2500      	movs	r5, #0
 800db14:	6020      	str	r0, [r4, #0]
 800db16:	6061      	str	r1, [r4, #4]
 800db18:	9200      	str	r2, [sp, #0]
 800db1a:	9301      	str	r3, [sp, #4]
 800db1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db1e:	429d      	cmp	r5, r3
 800db20:	dd0b      	ble.n	800db3a <__kernel_rem_pio2+0x3c6>
 800db22:	00fb      	lsls	r3, r7, #3
 800db24:	aa76      	add	r2, sp, #472	; 0x1d8
 800db26:	18d3      	adds	r3, r2, r3
 800db28:	3701      	adds	r7, #1
 800db2a:	9900      	ldr	r1, [sp, #0]
 800db2c:	9a01      	ldr	r2, [sp, #4]
 800db2e:	3408      	adds	r4, #8
 800db30:	6019      	str	r1, [r3, #0]
 800db32:	605a      	str	r2, [r3, #4]
 800db34:	e7e1      	b.n	800dafa <__kernel_rem_pio2+0x386>
 800db36:	2301      	movs	r3, #1
 800db38:	e7cf      	b.n	800dada <__kernel_rem_pio2+0x366>
 800db3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db3c:	00e9      	lsls	r1, r5, #3
 800db3e:	1859      	adds	r1, r3, r1
 800db40:	6808      	ldr	r0, [r1, #0]
 800db42:	6849      	ldr	r1, [r1, #4]
 800db44:	6832      	ldr	r2, [r6, #0]
 800db46:	6873      	ldr	r3, [r6, #4]
 800db48:	f7f3 fc1e 	bl	8001388 <__aeabi_dmul>
 800db4c:	0002      	movs	r2, r0
 800db4e:	000b      	movs	r3, r1
 800db50:	9800      	ldr	r0, [sp, #0]
 800db52:	9901      	ldr	r1, [sp, #4]
 800db54:	f7f2 fca8 	bl	80004a8 <__aeabi_dadd>
 800db58:	3501      	adds	r5, #1
 800db5a:	9000      	str	r0, [sp, #0]
 800db5c:	9101      	str	r1, [sp, #4]
 800db5e:	3e08      	subs	r6, #8
 800db60:	e7dc      	b.n	800db1c <__kernel_rem_pio2+0x3a8>
 800db62:	9b00      	ldr	r3, [sp, #0]
 800db64:	3b01      	subs	r3, #1
 800db66:	9300      	str	r3, [sp, #0]
 800db68:	e74f      	b.n	800da0a <__kernel_rem_pio2+0x296>
 800db6a:	9b02      	ldr	r3, [sp, #8]
 800db6c:	0030      	movs	r0, r6
 800db6e:	425a      	negs	r2, r3
 800db70:	0039      	movs	r1, r7
 800db72:	f000 faaf 	bl	800e0d4 <scalbn>
 800db76:	2200      	movs	r2, #0
 800db78:	4bb6      	ldr	r3, [pc, #728]	; (800de54 <__kernel_rem_pio2+0x6e0>)
 800db7a:	0004      	movs	r4, r0
 800db7c:	000d      	movs	r5, r1
 800db7e:	f7f2 fc6b 	bl	8000458 <__aeabi_dcmpge>
 800db82:	2800      	cmp	r0, #0
 800db84:	d025      	beq.n	800dbd2 <__kernel_rem_pio2+0x45e>
 800db86:	2200      	movs	r2, #0
 800db88:	4bb3      	ldr	r3, [pc, #716]	; (800de58 <__kernel_rem_pio2+0x6e4>)
 800db8a:	0020      	movs	r0, r4
 800db8c:	0029      	movs	r1, r5
 800db8e:	f7f3 fbfb 	bl	8001388 <__aeabi_dmul>
 800db92:	f7f4 f9f7 	bl	8001f84 <__aeabi_d2iz>
 800db96:	9b04      	ldr	r3, [sp, #16]
 800db98:	0006      	movs	r6, r0
 800db9a:	009f      	lsls	r7, r3, #2
 800db9c:	f7f4 fa28 	bl	8001ff0 <__aeabi_i2d>
 800dba0:	2200      	movs	r2, #0
 800dba2:	4bac      	ldr	r3, [pc, #688]	; (800de54 <__kernel_rem_pio2+0x6e0>)
 800dba4:	f7f3 fbf0 	bl	8001388 <__aeabi_dmul>
 800dba8:	0002      	movs	r2, r0
 800dbaa:	000b      	movs	r3, r1
 800dbac:	0020      	movs	r0, r4
 800dbae:	0029      	movs	r1, r5
 800dbb0:	f7f3 fe56 	bl	8001860 <__aeabi_dsub>
 800dbb4:	f7f4 f9e6 	bl	8001f84 <__aeabi_d2iz>
 800dbb8:	ab12      	add	r3, sp, #72	; 0x48
 800dbba:	51d8      	str	r0, [r3, r7]
 800dbbc:	9b04      	ldr	r3, [sp, #16]
 800dbbe:	aa12      	add	r2, sp, #72	; 0x48
 800dbc0:	3301      	adds	r3, #1
 800dbc2:	9300      	str	r3, [sp, #0]
 800dbc4:	9b02      	ldr	r3, [sp, #8]
 800dbc6:	3318      	adds	r3, #24
 800dbc8:	9302      	str	r3, [sp, #8]
 800dbca:	9b00      	ldr	r3, [sp, #0]
 800dbcc:	009b      	lsls	r3, r3, #2
 800dbce:	509e      	str	r6, [r3, r2]
 800dbd0:	e725      	b.n	800da1e <__kernel_rem_pio2+0x2aa>
 800dbd2:	9b04      	ldr	r3, [sp, #16]
 800dbd4:	0020      	movs	r0, r4
 800dbd6:	0029      	movs	r1, r5
 800dbd8:	009e      	lsls	r6, r3, #2
 800dbda:	f7f4 f9d3 	bl	8001f84 <__aeabi_d2iz>
 800dbde:	ab12      	add	r3, sp, #72	; 0x48
 800dbe0:	5198      	str	r0, [r3, r6]
 800dbe2:	9b04      	ldr	r3, [sp, #16]
 800dbe4:	9300      	str	r3, [sp, #0]
 800dbe6:	e71a      	b.n	800da1e <__kernel_rem_pio2+0x2aa>
 800dbe8:	00e5      	lsls	r5, r4, #3
 800dbea:	ab76      	add	r3, sp, #472	; 0x1d8
 800dbec:	aa12      	add	r2, sp, #72	; 0x48
 800dbee:	195d      	adds	r5, r3, r5
 800dbf0:	00a3      	lsls	r3, r4, #2
 800dbf2:	5898      	ldr	r0, [r3, r2]
 800dbf4:	f7f4 f9fc 	bl	8001ff0 <__aeabi_i2d>
 800dbf8:	0032      	movs	r2, r6
 800dbfa:	003b      	movs	r3, r7
 800dbfc:	f7f3 fbc4 	bl	8001388 <__aeabi_dmul>
 800dc00:	2200      	movs	r2, #0
 800dc02:	6028      	str	r0, [r5, #0]
 800dc04:	6069      	str	r1, [r5, #4]
 800dc06:	4b94      	ldr	r3, [pc, #592]	; (800de58 <__kernel_rem_pio2+0x6e4>)
 800dc08:	0030      	movs	r0, r6
 800dc0a:	0039      	movs	r1, r7
 800dc0c:	f7f3 fbbc 	bl	8001388 <__aeabi_dmul>
 800dc10:	3c01      	subs	r4, #1
 800dc12:	0006      	movs	r6, r0
 800dc14:	000f      	movs	r7, r1
 800dc16:	e70a      	b.n	800da2e <__kernel_rem_pio2+0x2ba>
 800dc18:	4b90      	ldr	r3, [pc, #576]	; (800de5c <__kernel_rem_pio2+0x6e8>)
 800dc1a:	00e1      	lsls	r1, r4, #3
 800dc1c:	1859      	adds	r1, r3, r1
 800dc1e:	6808      	ldr	r0, [r1, #0]
 800dc20:	6849      	ldr	r1, [r1, #4]
 800dc22:	cf0c      	ldmia	r7!, {r2, r3}
 800dc24:	f7f3 fbb0 	bl	8001388 <__aeabi_dmul>
 800dc28:	0002      	movs	r2, r0
 800dc2a:	000b      	movs	r3, r1
 800dc2c:	9802      	ldr	r0, [sp, #8]
 800dc2e:	9903      	ldr	r1, [sp, #12]
 800dc30:	f7f2 fc3a 	bl	80004a8 <__aeabi_dadd>
 800dc34:	9002      	str	r0, [sp, #8]
 800dc36:	9103      	str	r1, [sp, #12]
 800dc38:	3401      	adds	r4, #1
 800dc3a:	9b08      	ldr	r3, [sp, #32]
 800dc3c:	429c      	cmp	r4, r3
 800dc3e:	dc01      	bgt.n	800dc44 <__kernel_rem_pio2+0x4d0>
 800dc40:	42a6      	cmp	r6, r4
 800dc42:	dae9      	bge.n	800dc18 <__kernel_rem_pio2+0x4a4>
 800dc44:	00f3      	lsls	r3, r6, #3
 800dc46:	aa4e      	add	r2, sp, #312	; 0x138
 800dc48:	18d3      	adds	r3, r2, r3
 800dc4a:	3d01      	subs	r5, #1
 800dc4c:	9902      	ldr	r1, [sp, #8]
 800dc4e:	9a03      	ldr	r2, [sp, #12]
 800dc50:	3601      	adds	r6, #1
 800dc52:	6019      	str	r1, [r3, #0]
 800dc54:	605a      	str	r2, [r3, #4]
 800dc56:	e6ef      	b.n	800da38 <__kernel_rem_pio2+0x2c4>
 800dc58:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800dc5a:	2b02      	cmp	r3, #2
 800dc5c:	dc0b      	bgt.n	800dc76 <__kernel_rem_pio2+0x502>
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	dd00      	ble.n	800dc64 <__kernel_rem_pio2+0x4f0>
 800dc62:	e08a      	b.n	800dd7a <__kernel_rem_pio2+0x606>
 800dc64:	d055      	beq.n	800dd12 <__kernel_rem_pio2+0x59e>
 800dc66:	2007      	movs	r0, #7
 800dc68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc6a:	4003      	ands	r3, r0
 800dc6c:	0018      	movs	r0, r3
 800dc6e:	239f      	movs	r3, #159	; 0x9f
 800dc70:	009b      	lsls	r3, r3, #2
 800dc72:	449d      	add	sp, r3
 800dc74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc76:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800dc78:	2b03      	cmp	r3, #3
 800dc7a:	d1f4      	bne.n	800dc66 <__kernel_rem_pio2+0x4f2>
 800dc7c:	9b00      	ldr	r3, [sp, #0]
 800dc7e:	00dc      	lsls	r4, r3, #3
 800dc80:	ab4e      	add	r3, sp, #312	; 0x138
 800dc82:	191c      	adds	r4, r3, r4
 800dc84:	0025      	movs	r5, r4
 800dc86:	9b00      	ldr	r3, [sp, #0]
 800dc88:	9302      	str	r3, [sp, #8]
 800dc8a:	9b02      	ldr	r3, [sp, #8]
 800dc8c:	3d08      	subs	r5, #8
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	dd00      	ble.n	800dc94 <__kernel_rem_pio2+0x520>
 800dc92:	e083      	b.n	800dd9c <__kernel_rem_pio2+0x628>
 800dc94:	9d00      	ldr	r5, [sp, #0]
 800dc96:	3c08      	subs	r4, #8
 800dc98:	2d01      	cmp	r5, #1
 800dc9a:	dd00      	ble.n	800dc9e <__kernel_rem_pio2+0x52a>
 800dc9c:	e0a0      	b.n	800dde0 <__kernel_rem_pio2+0x66c>
 800dc9e:	2400      	movs	r4, #0
 800dca0:	0021      	movs	r1, r4
 800dca2:	9b00      	ldr	r3, [sp, #0]
 800dca4:	2b01      	cmp	r3, #1
 800dca6:	dd00      	ble.n	800dcaa <__kernel_rem_pio2+0x536>
 800dca8:	e0b8      	b.n	800de1c <__kernel_rem_pio2+0x6a8>
 800dcaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcac:	9f4e      	ldr	r7, [sp, #312]	; 0x138
 800dcae:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
 800dcb0:	9d50      	ldr	r5, [sp, #320]	; 0x140
 800dcb2:	9851      	ldr	r0, [sp, #324]	; 0x144
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d000      	beq.n	800dcba <__kernel_rem_pio2+0x546>
 800dcb8:	e0be      	b.n	800de38 <__kernel_rem_pio2+0x6c4>
 800dcba:	0033      	movs	r3, r6
 800dcbc:	003a      	movs	r2, r7
 800dcbe:	9e07      	ldr	r6, [sp, #28]
 800dcc0:	6032      	str	r2, [r6, #0]
 800dcc2:	6073      	str	r3, [r6, #4]
 800dcc4:	002a      	movs	r2, r5
 800dcc6:	0003      	movs	r3, r0
 800dcc8:	60b2      	str	r2, [r6, #8]
 800dcca:	60f3      	str	r3, [r6, #12]
 800dccc:	0022      	movs	r2, r4
 800dcce:	000b      	movs	r3, r1
 800dcd0:	6132      	str	r2, [r6, #16]
 800dcd2:	6173      	str	r3, [r6, #20]
 800dcd4:	e7c7      	b.n	800dc66 <__kernel_rem_pio2+0x4f2>
 800dcd6:	9b00      	ldr	r3, [sp, #0]
 800dcd8:	aa4e      	add	r2, sp, #312	; 0x138
 800dcda:	00db      	lsls	r3, r3, #3
 800dcdc:	18d3      	adds	r3, r2, r3
 800dcde:	0028      	movs	r0, r5
 800dce0:	681a      	ldr	r2, [r3, #0]
 800dce2:	685b      	ldr	r3, [r3, #4]
 800dce4:	0021      	movs	r1, r4
 800dce6:	f7f2 fbdf 	bl	80004a8 <__aeabi_dadd>
 800dcea:	0005      	movs	r5, r0
 800dcec:	000c      	movs	r4, r1
 800dcee:	9b00      	ldr	r3, [sp, #0]
 800dcf0:	3b01      	subs	r3, #1
 800dcf2:	9300      	str	r3, [sp, #0]
 800dcf4:	9b00      	ldr	r3, [sp, #0]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	daed      	bge.n	800dcd6 <__kernel_rem_pio2+0x562>
 800dcfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d002      	beq.n	800dd06 <__kernel_rem_pio2+0x592>
 800dd00:	2380      	movs	r3, #128	; 0x80
 800dd02:	061b      	lsls	r3, r3, #24
 800dd04:	18e4      	adds	r4, r4, r3
 800dd06:	002a      	movs	r2, r5
 800dd08:	0023      	movs	r3, r4
 800dd0a:	9907      	ldr	r1, [sp, #28]
 800dd0c:	600a      	str	r2, [r1, #0]
 800dd0e:	604b      	str	r3, [r1, #4]
 800dd10:	e7a9      	b.n	800dc66 <__kernel_rem_pio2+0x4f2>
 800dd12:	9da4      	ldr	r5, [sp, #656]	; 0x290
 800dd14:	002c      	movs	r4, r5
 800dd16:	e7ed      	b.n	800dcf4 <__kernel_rem_pio2+0x580>
 800dd18:	00e3      	lsls	r3, r4, #3
 800dd1a:	aa4e      	add	r2, sp, #312	; 0x138
 800dd1c:	18d3      	adds	r3, r2, r3
 800dd1e:	0030      	movs	r0, r6
 800dd20:	681a      	ldr	r2, [r3, #0]
 800dd22:	685b      	ldr	r3, [r3, #4]
 800dd24:	0029      	movs	r1, r5
 800dd26:	f7f2 fbbf 	bl	80004a8 <__aeabi_dadd>
 800dd2a:	0006      	movs	r6, r0
 800dd2c:	000d      	movs	r5, r1
 800dd2e:	3c01      	subs	r4, #1
 800dd30:	2c00      	cmp	r4, #0
 800dd32:	daf1      	bge.n	800dd18 <__kernel_rem_pio2+0x5a4>
 800dd34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd36:	0029      	movs	r1, r5
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d002      	beq.n	800dd42 <__kernel_rem_pio2+0x5ce>
 800dd3c:	2380      	movs	r3, #128	; 0x80
 800dd3e:	061b      	lsls	r3, r3, #24
 800dd40:	18e9      	adds	r1, r5, r3
 800dd42:	0032      	movs	r2, r6
 800dd44:	000b      	movs	r3, r1
 800dd46:	9907      	ldr	r1, [sp, #28]
 800dd48:	2401      	movs	r4, #1
 800dd4a:	600a      	str	r2, [r1, #0]
 800dd4c:	604b      	str	r3, [r1, #4]
 800dd4e:	984e      	ldr	r0, [sp, #312]	; 0x138
 800dd50:	994f      	ldr	r1, [sp, #316]	; 0x13c
 800dd52:	002b      	movs	r3, r5
 800dd54:	f7f3 fd84 	bl	8001860 <__aeabi_dsub>
 800dd58:	0006      	movs	r6, r0
 800dd5a:	000d      	movs	r5, r1
 800dd5c:	9b00      	ldr	r3, [sp, #0]
 800dd5e:	42a3      	cmp	r3, r4
 800dd60:	da0f      	bge.n	800dd82 <__kernel_rem_pio2+0x60e>
 800dd62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d002      	beq.n	800dd6e <__kernel_rem_pio2+0x5fa>
 800dd68:	2380      	movs	r3, #128	; 0x80
 800dd6a:	061b      	lsls	r3, r3, #24
 800dd6c:	18ed      	adds	r5, r5, r3
 800dd6e:	0032      	movs	r2, r6
 800dd70:	002b      	movs	r3, r5
 800dd72:	9907      	ldr	r1, [sp, #28]
 800dd74:	608a      	str	r2, [r1, #8]
 800dd76:	60cb      	str	r3, [r1, #12]
 800dd78:	e775      	b.n	800dc66 <__kernel_rem_pio2+0x4f2>
 800dd7a:	2600      	movs	r6, #0
 800dd7c:	9c00      	ldr	r4, [sp, #0]
 800dd7e:	0035      	movs	r5, r6
 800dd80:	e7d6      	b.n	800dd30 <__kernel_rem_pio2+0x5bc>
 800dd82:	00e3      	lsls	r3, r4, #3
 800dd84:	aa4e      	add	r2, sp, #312	; 0x138
 800dd86:	18d3      	adds	r3, r2, r3
 800dd88:	0030      	movs	r0, r6
 800dd8a:	681a      	ldr	r2, [r3, #0]
 800dd8c:	685b      	ldr	r3, [r3, #4]
 800dd8e:	0029      	movs	r1, r5
 800dd90:	f7f2 fb8a 	bl	80004a8 <__aeabi_dadd>
 800dd94:	3401      	adds	r4, #1
 800dd96:	0006      	movs	r6, r0
 800dd98:	000d      	movs	r5, r1
 800dd9a:	e7df      	b.n	800dd5c <__kernel_rem_pio2+0x5e8>
 800dd9c:	9b02      	ldr	r3, [sp, #8]
 800dd9e:	68ae      	ldr	r6, [r5, #8]
 800dda0:	68ef      	ldr	r7, [r5, #12]
 800dda2:	3b01      	subs	r3, #1
 800dda4:	9302      	str	r3, [sp, #8]
 800dda6:	682a      	ldr	r2, [r5, #0]
 800dda8:	686b      	ldr	r3, [r5, #4]
 800ddaa:	9204      	str	r2, [sp, #16]
 800ddac:	9305      	str	r3, [sp, #20]
 800ddae:	9804      	ldr	r0, [sp, #16]
 800ddb0:	9905      	ldr	r1, [sp, #20]
 800ddb2:	0032      	movs	r2, r6
 800ddb4:	003b      	movs	r3, r7
 800ddb6:	f7f2 fb77 	bl	80004a8 <__aeabi_dadd>
 800ddba:	0002      	movs	r2, r0
 800ddbc:	000b      	movs	r3, r1
 800ddbe:	9008      	str	r0, [sp, #32]
 800ddc0:	9109      	str	r1, [sp, #36]	; 0x24
 800ddc2:	9804      	ldr	r0, [sp, #16]
 800ddc4:	9905      	ldr	r1, [sp, #20]
 800ddc6:	f7f3 fd4b 	bl	8001860 <__aeabi_dsub>
 800ddca:	0032      	movs	r2, r6
 800ddcc:	003b      	movs	r3, r7
 800ddce:	f7f2 fb6b 	bl	80004a8 <__aeabi_dadd>
 800ddd2:	9a08      	ldr	r2, [sp, #32]
 800ddd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddd6:	60a8      	str	r0, [r5, #8]
 800ddd8:	60e9      	str	r1, [r5, #12]
 800ddda:	602a      	str	r2, [r5, #0]
 800dddc:	606b      	str	r3, [r5, #4]
 800ddde:	e754      	b.n	800dc8a <__kernel_rem_pio2+0x516>
 800dde0:	6826      	ldr	r6, [r4, #0]
 800dde2:	6867      	ldr	r7, [r4, #4]
 800dde4:	68a2      	ldr	r2, [r4, #8]
 800dde6:	68e3      	ldr	r3, [r4, #12]
 800dde8:	0030      	movs	r0, r6
 800ddea:	0039      	movs	r1, r7
 800ddec:	9202      	str	r2, [sp, #8]
 800ddee:	9303      	str	r3, [sp, #12]
 800ddf0:	f7f2 fb5a 	bl	80004a8 <__aeabi_dadd>
 800ddf4:	0002      	movs	r2, r0
 800ddf6:	000b      	movs	r3, r1
 800ddf8:	9004      	str	r0, [sp, #16]
 800ddfa:	9105      	str	r1, [sp, #20]
 800ddfc:	0030      	movs	r0, r6
 800ddfe:	0039      	movs	r1, r7
 800de00:	f7f3 fd2e 	bl	8001860 <__aeabi_dsub>
 800de04:	9a02      	ldr	r2, [sp, #8]
 800de06:	9b03      	ldr	r3, [sp, #12]
 800de08:	f7f2 fb4e 	bl	80004a8 <__aeabi_dadd>
 800de0c:	9a04      	ldr	r2, [sp, #16]
 800de0e:	9b05      	ldr	r3, [sp, #20]
 800de10:	60a0      	str	r0, [r4, #8]
 800de12:	60e1      	str	r1, [r4, #12]
 800de14:	6022      	str	r2, [r4, #0]
 800de16:	6063      	str	r3, [r4, #4]
 800de18:	3d01      	subs	r5, #1
 800de1a:	e73c      	b.n	800dc96 <__kernel_rem_pio2+0x522>
 800de1c:	9b00      	ldr	r3, [sp, #0]
 800de1e:	aa4e      	add	r2, sp, #312	; 0x138
 800de20:	00db      	lsls	r3, r3, #3
 800de22:	18d3      	adds	r3, r2, r3
 800de24:	0020      	movs	r0, r4
 800de26:	681a      	ldr	r2, [r3, #0]
 800de28:	685b      	ldr	r3, [r3, #4]
 800de2a:	f7f2 fb3d 	bl	80004a8 <__aeabi_dadd>
 800de2e:	9b00      	ldr	r3, [sp, #0]
 800de30:	0004      	movs	r4, r0
 800de32:	3b01      	subs	r3, #1
 800de34:	9300      	str	r3, [sp, #0]
 800de36:	e734      	b.n	800dca2 <__kernel_rem_pio2+0x52e>
 800de38:	9b07      	ldr	r3, [sp, #28]
 800de3a:	9a07      	ldr	r2, [sp, #28]
 800de3c:	601f      	str	r7, [r3, #0]
 800de3e:	2380      	movs	r3, #128	; 0x80
 800de40:	061b      	lsls	r3, r3, #24
 800de42:	18f6      	adds	r6, r6, r3
 800de44:	18c0      	adds	r0, r0, r3
 800de46:	18c9      	adds	r1, r1, r3
 800de48:	6056      	str	r6, [r2, #4]
 800de4a:	6095      	str	r5, [r2, #8]
 800de4c:	60d0      	str	r0, [r2, #12]
 800de4e:	6114      	str	r4, [r2, #16]
 800de50:	6151      	str	r1, [r2, #20]
 800de52:	e708      	b.n	800dc66 <__kernel_rem_pio2+0x4f2>
 800de54:	41700000 	.word	0x41700000
 800de58:	3e700000 	.word	0x3e700000
 800de5c:	0800e4c8 	.word	0x0800e4c8

0800de60 <__kernel_sin>:
 800de60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de62:	b089      	sub	sp, #36	; 0x24
 800de64:	9202      	str	r2, [sp, #8]
 800de66:	9303      	str	r3, [sp, #12]
 800de68:	22f9      	movs	r2, #249	; 0xf9
 800de6a:	004b      	lsls	r3, r1, #1
 800de6c:	0007      	movs	r7, r0
 800de6e:	000e      	movs	r6, r1
 800de70:	085b      	lsrs	r3, r3, #1
 800de72:	0592      	lsls	r2, r2, #22
 800de74:	4293      	cmp	r3, r2
 800de76:	da03      	bge.n	800de80 <__kernel_sin+0x20>
 800de78:	f7f4 f884 	bl	8001f84 <__aeabi_d2iz>
 800de7c:	2800      	cmp	r0, #0
 800de7e:	d04c      	beq.n	800df1a <__kernel_sin+0xba>
 800de80:	003a      	movs	r2, r7
 800de82:	0033      	movs	r3, r6
 800de84:	0038      	movs	r0, r7
 800de86:	0031      	movs	r1, r6
 800de88:	f7f3 fa7e 	bl	8001388 <__aeabi_dmul>
 800de8c:	0004      	movs	r4, r0
 800de8e:	000d      	movs	r5, r1
 800de90:	0002      	movs	r2, r0
 800de92:	000b      	movs	r3, r1
 800de94:	0038      	movs	r0, r7
 800de96:	0031      	movs	r1, r6
 800de98:	f7f3 fa76 	bl	8001388 <__aeabi_dmul>
 800de9c:	4a39      	ldr	r2, [pc, #228]	; (800df84 <__kernel_sin+0x124>)
 800de9e:	9000      	str	r0, [sp, #0]
 800dea0:	9101      	str	r1, [sp, #4]
 800dea2:	4b39      	ldr	r3, [pc, #228]	; (800df88 <__kernel_sin+0x128>)
 800dea4:	0020      	movs	r0, r4
 800dea6:	0029      	movs	r1, r5
 800dea8:	f7f3 fa6e 	bl	8001388 <__aeabi_dmul>
 800deac:	4a37      	ldr	r2, [pc, #220]	; (800df8c <__kernel_sin+0x12c>)
 800deae:	4b38      	ldr	r3, [pc, #224]	; (800df90 <__kernel_sin+0x130>)
 800deb0:	f7f3 fcd6 	bl	8001860 <__aeabi_dsub>
 800deb4:	0022      	movs	r2, r4
 800deb6:	002b      	movs	r3, r5
 800deb8:	f7f3 fa66 	bl	8001388 <__aeabi_dmul>
 800debc:	4a35      	ldr	r2, [pc, #212]	; (800df94 <__kernel_sin+0x134>)
 800debe:	4b36      	ldr	r3, [pc, #216]	; (800df98 <__kernel_sin+0x138>)
 800dec0:	f7f2 faf2 	bl	80004a8 <__aeabi_dadd>
 800dec4:	0022      	movs	r2, r4
 800dec6:	002b      	movs	r3, r5
 800dec8:	f7f3 fa5e 	bl	8001388 <__aeabi_dmul>
 800decc:	4a33      	ldr	r2, [pc, #204]	; (800df9c <__kernel_sin+0x13c>)
 800dece:	4b34      	ldr	r3, [pc, #208]	; (800dfa0 <__kernel_sin+0x140>)
 800ded0:	f7f3 fcc6 	bl	8001860 <__aeabi_dsub>
 800ded4:	0022      	movs	r2, r4
 800ded6:	002b      	movs	r3, r5
 800ded8:	f7f3 fa56 	bl	8001388 <__aeabi_dmul>
 800dedc:	4b31      	ldr	r3, [pc, #196]	; (800dfa4 <__kernel_sin+0x144>)
 800dede:	4a32      	ldr	r2, [pc, #200]	; (800dfa8 <__kernel_sin+0x148>)
 800dee0:	f7f2 fae2 	bl	80004a8 <__aeabi_dadd>
 800dee4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dee6:	9004      	str	r0, [sp, #16]
 800dee8:	9105      	str	r1, [sp, #20]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d119      	bne.n	800df22 <__kernel_sin+0xc2>
 800deee:	0002      	movs	r2, r0
 800def0:	000b      	movs	r3, r1
 800def2:	0020      	movs	r0, r4
 800def4:	0029      	movs	r1, r5
 800def6:	f7f3 fa47 	bl	8001388 <__aeabi_dmul>
 800defa:	4a2c      	ldr	r2, [pc, #176]	; (800dfac <__kernel_sin+0x14c>)
 800defc:	4b2c      	ldr	r3, [pc, #176]	; (800dfb0 <__kernel_sin+0x150>)
 800defe:	f7f3 fcaf 	bl	8001860 <__aeabi_dsub>
 800df02:	9a00      	ldr	r2, [sp, #0]
 800df04:	9b01      	ldr	r3, [sp, #4]
 800df06:	f7f3 fa3f 	bl	8001388 <__aeabi_dmul>
 800df0a:	0002      	movs	r2, r0
 800df0c:	000b      	movs	r3, r1
 800df0e:	0038      	movs	r0, r7
 800df10:	0031      	movs	r1, r6
 800df12:	f7f2 fac9 	bl	80004a8 <__aeabi_dadd>
 800df16:	0007      	movs	r7, r0
 800df18:	000e      	movs	r6, r1
 800df1a:	0038      	movs	r0, r7
 800df1c:	0031      	movs	r1, r6
 800df1e:	b009      	add	sp, #36	; 0x24
 800df20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df22:	2200      	movs	r2, #0
 800df24:	9802      	ldr	r0, [sp, #8]
 800df26:	9903      	ldr	r1, [sp, #12]
 800df28:	4b22      	ldr	r3, [pc, #136]	; (800dfb4 <__kernel_sin+0x154>)
 800df2a:	f7f3 fa2d 	bl	8001388 <__aeabi_dmul>
 800df2e:	9a04      	ldr	r2, [sp, #16]
 800df30:	9b05      	ldr	r3, [sp, #20]
 800df32:	9006      	str	r0, [sp, #24]
 800df34:	9107      	str	r1, [sp, #28]
 800df36:	9800      	ldr	r0, [sp, #0]
 800df38:	9901      	ldr	r1, [sp, #4]
 800df3a:	f7f3 fa25 	bl	8001388 <__aeabi_dmul>
 800df3e:	0002      	movs	r2, r0
 800df40:	000b      	movs	r3, r1
 800df42:	9806      	ldr	r0, [sp, #24]
 800df44:	9907      	ldr	r1, [sp, #28]
 800df46:	f7f3 fc8b 	bl	8001860 <__aeabi_dsub>
 800df4a:	0022      	movs	r2, r4
 800df4c:	002b      	movs	r3, r5
 800df4e:	f7f3 fa1b 	bl	8001388 <__aeabi_dmul>
 800df52:	9a02      	ldr	r2, [sp, #8]
 800df54:	9b03      	ldr	r3, [sp, #12]
 800df56:	f7f3 fc83 	bl	8001860 <__aeabi_dsub>
 800df5a:	4a14      	ldr	r2, [pc, #80]	; (800dfac <__kernel_sin+0x14c>)
 800df5c:	0004      	movs	r4, r0
 800df5e:	000d      	movs	r5, r1
 800df60:	9800      	ldr	r0, [sp, #0]
 800df62:	9901      	ldr	r1, [sp, #4]
 800df64:	4b12      	ldr	r3, [pc, #72]	; (800dfb0 <__kernel_sin+0x150>)
 800df66:	f7f3 fa0f 	bl	8001388 <__aeabi_dmul>
 800df6a:	0002      	movs	r2, r0
 800df6c:	000b      	movs	r3, r1
 800df6e:	0020      	movs	r0, r4
 800df70:	0029      	movs	r1, r5
 800df72:	f7f2 fa99 	bl	80004a8 <__aeabi_dadd>
 800df76:	0002      	movs	r2, r0
 800df78:	000b      	movs	r3, r1
 800df7a:	0038      	movs	r0, r7
 800df7c:	0031      	movs	r1, r6
 800df7e:	f7f3 fc6f 	bl	8001860 <__aeabi_dsub>
 800df82:	e7c8      	b.n	800df16 <__kernel_sin+0xb6>
 800df84:	5acfd57c 	.word	0x5acfd57c
 800df88:	3de5d93a 	.word	0x3de5d93a
 800df8c:	8a2b9ceb 	.word	0x8a2b9ceb
 800df90:	3e5ae5e6 	.word	0x3e5ae5e6
 800df94:	57b1fe7d 	.word	0x57b1fe7d
 800df98:	3ec71de3 	.word	0x3ec71de3
 800df9c:	19c161d5 	.word	0x19c161d5
 800dfa0:	3f2a01a0 	.word	0x3f2a01a0
 800dfa4:	3f811111 	.word	0x3f811111
 800dfa8:	1110f8a6 	.word	0x1110f8a6
 800dfac:	55555549 	.word	0x55555549
 800dfb0:	3fc55555 	.word	0x3fc55555
 800dfb4:	3fe00000 	.word	0x3fe00000

0800dfb8 <fabs>:
 800dfb8:	004b      	lsls	r3, r1, #1
 800dfba:	0859      	lsrs	r1, r3, #1
 800dfbc:	4770      	bx	lr
	...

0800dfc0 <floor>:
 800dfc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dfc2:	004b      	lsls	r3, r1, #1
 800dfc4:	4a3d      	ldr	r2, [pc, #244]	; (800e0bc <floor+0xfc>)
 800dfc6:	0d5b      	lsrs	r3, r3, #21
 800dfc8:	189f      	adds	r7, r3, r2
 800dfca:	4684      	mov	ip, r0
 800dfcc:	000e      	movs	r6, r1
 800dfce:	000d      	movs	r5, r1
 800dfd0:	0004      	movs	r4, r0
 800dfd2:	9001      	str	r0, [sp, #4]
 800dfd4:	2f13      	cmp	r7, #19
 800dfd6:	dc34      	bgt.n	800e042 <floor+0x82>
 800dfd8:	2f00      	cmp	r7, #0
 800dfda:	da16      	bge.n	800e00a <floor+0x4a>
 800dfdc:	4a38      	ldr	r2, [pc, #224]	; (800e0c0 <floor+0x100>)
 800dfde:	4b39      	ldr	r3, [pc, #228]	; (800e0c4 <floor+0x104>)
 800dfe0:	4660      	mov	r0, ip
 800dfe2:	0031      	movs	r1, r6
 800dfe4:	f7f2 fa60 	bl	80004a8 <__aeabi_dadd>
 800dfe8:	2200      	movs	r2, #0
 800dfea:	2300      	movs	r3, #0
 800dfec:	f7f2 fa2a 	bl	8000444 <__aeabi_dcmpgt>
 800dff0:	2800      	cmp	r0, #0
 800dff2:	d007      	beq.n	800e004 <floor+0x44>
 800dff4:	2e00      	cmp	r6, #0
 800dff6:	da5d      	bge.n	800e0b4 <floor+0xf4>
 800dff8:	0073      	lsls	r3, r6, #1
 800dffa:	085b      	lsrs	r3, r3, #1
 800dffc:	431c      	orrs	r4, r3
 800dffe:	d001      	beq.n	800e004 <floor+0x44>
 800e000:	2400      	movs	r4, #0
 800e002:	4d31      	ldr	r5, [pc, #196]	; (800e0c8 <floor+0x108>)
 800e004:	46a4      	mov	ip, r4
 800e006:	002e      	movs	r6, r5
 800e008:	e029      	b.n	800e05e <floor+0x9e>
 800e00a:	4b30      	ldr	r3, [pc, #192]	; (800e0cc <floor+0x10c>)
 800e00c:	413b      	asrs	r3, r7
 800e00e:	9300      	str	r3, [sp, #0]
 800e010:	400b      	ands	r3, r1
 800e012:	4303      	orrs	r3, r0
 800e014:	d023      	beq.n	800e05e <floor+0x9e>
 800e016:	4a2a      	ldr	r2, [pc, #168]	; (800e0c0 <floor+0x100>)
 800e018:	4b2a      	ldr	r3, [pc, #168]	; (800e0c4 <floor+0x104>)
 800e01a:	4660      	mov	r0, ip
 800e01c:	0031      	movs	r1, r6
 800e01e:	f7f2 fa43 	bl	80004a8 <__aeabi_dadd>
 800e022:	2200      	movs	r2, #0
 800e024:	2300      	movs	r3, #0
 800e026:	f7f2 fa0d 	bl	8000444 <__aeabi_dcmpgt>
 800e02a:	2800      	cmp	r0, #0
 800e02c:	d0ea      	beq.n	800e004 <floor+0x44>
 800e02e:	2e00      	cmp	r6, #0
 800e030:	da03      	bge.n	800e03a <floor+0x7a>
 800e032:	2380      	movs	r3, #128	; 0x80
 800e034:	035b      	lsls	r3, r3, #13
 800e036:	413b      	asrs	r3, r7
 800e038:	18f5      	adds	r5, r6, r3
 800e03a:	9b00      	ldr	r3, [sp, #0]
 800e03c:	2400      	movs	r4, #0
 800e03e:	439d      	bics	r5, r3
 800e040:	e7e0      	b.n	800e004 <floor+0x44>
 800e042:	2f33      	cmp	r7, #51	; 0x33
 800e044:	dd0f      	ble.n	800e066 <floor+0xa6>
 800e046:	2380      	movs	r3, #128	; 0x80
 800e048:	00db      	lsls	r3, r3, #3
 800e04a:	429f      	cmp	r7, r3
 800e04c:	d107      	bne.n	800e05e <floor+0x9e>
 800e04e:	0002      	movs	r2, r0
 800e050:	000b      	movs	r3, r1
 800e052:	4660      	mov	r0, ip
 800e054:	0031      	movs	r1, r6
 800e056:	f7f2 fa27 	bl	80004a8 <__aeabi_dadd>
 800e05a:	4684      	mov	ip, r0
 800e05c:	000e      	movs	r6, r1
 800e05e:	4660      	mov	r0, ip
 800e060:	0031      	movs	r1, r6
 800e062:	b003      	add	sp, #12
 800e064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e066:	4a1a      	ldr	r2, [pc, #104]	; (800e0d0 <floor+0x110>)
 800e068:	189b      	adds	r3, r3, r2
 800e06a:	2201      	movs	r2, #1
 800e06c:	4252      	negs	r2, r2
 800e06e:	40da      	lsrs	r2, r3
 800e070:	9200      	str	r2, [sp, #0]
 800e072:	4210      	tst	r0, r2
 800e074:	d0f3      	beq.n	800e05e <floor+0x9e>
 800e076:	4a12      	ldr	r2, [pc, #72]	; (800e0c0 <floor+0x100>)
 800e078:	4b12      	ldr	r3, [pc, #72]	; (800e0c4 <floor+0x104>)
 800e07a:	4660      	mov	r0, ip
 800e07c:	0031      	movs	r1, r6
 800e07e:	f7f2 fa13 	bl	80004a8 <__aeabi_dadd>
 800e082:	2200      	movs	r2, #0
 800e084:	2300      	movs	r3, #0
 800e086:	f7f2 f9dd 	bl	8000444 <__aeabi_dcmpgt>
 800e08a:	2800      	cmp	r0, #0
 800e08c:	d0ba      	beq.n	800e004 <floor+0x44>
 800e08e:	2e00      	cmp	r6, #0
 800e090:	da02      	bge.n	800e098 <floor+0xd8>
 800e092:	2f14      	cmp	r7, #20
 800e094:	d103      	bne.n	800e09e <floor+0xde>
 800e096:	3501      	adds	r5, #1
 800e098:	9b00      	ldr	r3, [sp, #0]
 800e09a:	439c      	bics	r4, r3
 800e09c:	e7b2      	b.n	800e004 <floor+0x44>
 800e09e:	2334      	movs	r3, #52	; 0x34
 800e0a0:	1bdf      	subs	r7, r3, r7
 800e0a2:	3b33      	subs	r3, #51	; 0x33
 800e0a4:	40bb      	lsls	r3, r7
 800e0a6:	18e4      	adds	r4, r4, r3
 800e0a8:	9b01      	ldr	r3, [sp, #4]
 800e0aa:	429c      	cmp	r4, r3
 800e0ac:	419b      	sbcs	r3, r3
 800e0ae:	425b      	negs	r3, r3
 800e0b0:	18f5      	adds	r5, r6, r3
 800e0b2:	e7f1      	b.n	800e098 <floor+0xd8>
 800e0b4:	2400      	movs	r4, #0
 800e0b6:	0025      	movs	r5, r4
 800e0b8:	e7a4      	b.n	800e004 <floor+0x44>
 800e0ba:	46c0      	nop			; (mov r8, r8)
 800e0bc:	fffffc01 	.word	0xfffffc01
 800e0c0:	8800759c 	.word	0x8800759c
 800e0c4:	7e37e43c 	.word	0x7e37e43c
 800e0c8:	bff00000 	.word	0xbff00000
 800e0cc:	000fffff 	.word	0x000fffff
 800e0d0:	fffffbed 	.word	0xfffffbed

0800e0d4 <scalbn>:
 800e0d4:	004b      	lsls	r3, r1, #1
 800e0d6:	b570      	push	{r4, r5, r6, lr}
 800e0d8:	0d5b      	lsrs	r3, r3, #21
 800e0da:	0014      	movs	r4, r2
 800e0dc:	000a      	movs	r2, r1
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d10d      	bne.n	800e0fe <scalbn+0x2a>
 800e0e2:	004b      	lsls	r3, r1, #1
 800e0e4:	085b      	lsrs	r3, r3, #1
 800e0e6:	4303      	orrs	r3, r0
 800e0e8:	d010      	beq.n	800e10c <scalbn+0x38>
 800e0ea:	4b27      	ldr	r3, [pc, #156]	; (800e188 <scalbn+0xb4>)
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	f7f3 f94b 	bl	8001388 <__aeabi_dmul>
 800e0f2:	4b26      	ldr	r3, [pc, #152]	; (800e18c <scalbn+0xb8>)
 800e0f4:	429c      	cmp	r4, r3
 800e0f6:	da0a      	bge.n	800e10e <scalbn+0x3a>
 800e0f8:	4a25      	ldr	r2, [pc, #148]	; (800e190 <scalbn+0xbc>)
 800e0fa:	4b26      	ldr	r3, [pc, #152]	; (800e194 <scalbn+0xc0>)
 800e0fc:	e019      	b.n	800e132 <scalbn+0x5e>
 800e0fe:	4d26      	ldr	r5, [pc, #152]	; (800e198 <scalbn+0xc4>)
 800e100:	42ab      	cmp	r3, r5
 800e102:	d108      	bne.n	800e116 <scalbn+0x42>
 800e104:	0002      	movs	r2, r0
 800e106:	000b      	movs	r3, r1
 800e108:	f7f2 f9ce 	bl	80004a8 <__aeabi_dadd>
 800e10c:	bd70      	pop	{r4, r5, r6, pc}
 800e10e:	000a      	movs	r2, r1
 800e110:	004b      	lsls	r3, r1, #1
 800e112:	0d5b      	lsrs	r3, r3, #21
 800e114:	3b36      	subs	r3, #54	; 0x36
 800e116:	4d21      	ldr	r5, [pc, #132]	; (800e19c <scalbn+0xc8>)
 800e118:	18e3      	adds	r3, r4, r3
 800e11a:	42ab      	cmp	r3, r5
 800e11c:	dd0c      	ble.n	800e138 <scalbn+0x64>
 800e11e:	4c20      	ldr	r4, [pc, #128]	; (800e1a0 <scalbn+0xcc>)
 800e120:	4d20      	ldr	r5, [pc, #128]	; (800e1a4 <scalbn+0xd0>)
 800e122:	2900      	cmp	r1, #0
 800e124:	da01      	bge.n	800e12a <scalbn+0x56>
 800e126:	4c1e      	ldr	r4, [pc, #120]	; (800e1a0 <scalbn+0xcc>)
 800e128:	4d1f      	ldr	r5, [pc, #124]	; (800e1a8 <scalbn+0xd4>)
 800e12a:	0020      	movs	r0, r4
 800e12c:	0029      	movs	r1, r5
 800e12e:	4a1c      	ldr	r2, [pc, #112]	; (800e1a0 <scalbn+0xcc>)
 800e130:	4b1c      	ldr	r3, [pc, #112]	; (800e1a4 <scalbn+0xd0>)
 800e132:	f7f3 f929 	bl	8001388 <__aeabi_dmul>
 800e136:	e7e9      	b.n	800e10c <scalbn+0x38>
 800e138:	2b00      	cmp	r3, #0
 800e13a:	dd05      	ble.n	800e148 <scalbn+0x74>
 800e13c:	4c1b      	ldr	r4, [pc, #108]	; (800e1ac <scalbn+0xd8>)
 800e13e:	051b      	lsls	r3, r3, #20
 800e140:	4022      	ands	r2, r4
 800e142:	431a      	orrs	r2, r3
 800e144:	0011      	movs	r1, r2
 800e146:	e7e1      	b.n	800e10c <scalbn+0x38>
 800e148:	001d      	movs	r5, r3
 800e14a:	3535      	adds	r5, #53	; 0x35
 800e14c:	da13      	bge.n	800e176 <scalbn+0xa2>
 800e14e:	4a18      	ldr	r2, [pc, #96]	; (800e1b0 <scalbn+0xdc>)
 800e150:	0fcb      	lsrs	r3, r1, #31
 800e152:	4294      	cmp	r4, r2
 800e154:	dd08      	ble.n	800e168 <scalbn+0x94>
 800e156:	4812      	ldr	r0, [pc, #72]	; (800e1a0 <scalbn+0xcc>)
 800e158:	4912      	ldr	r1, [pc, #72]	; (800e1a4 <scalbn+0xd0>)
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d001      	beq.n	800e162 <scalbn+0x8e>
 800e15e:	4810      	ldr	r0, [pc, #64]	; (800e1a0 <scalbn+0xcc>)
 800e160:	4911      	ldr	r1, [pc, #68]	; (800e1a8 <scalbn+0xd4>)
 800e162:	4a0f      	ldr	r2, [pc, #60]	; (800e1a0 <scalbn+0xcc>)
 800e164:	4b0f      	ldr	r3, [pc, #60]	; (800e1a4 <scalbn+0xd0>)
 800e166:	e7e4      	b.n	800e132 <scalbn+0x5e>
 800e168:	4809      	ldr	r0, [pc, #36]	; (800e190 <scalbn+0xbc>)
 800e16a:	490a      	ldr	r1, [pc, #40]	; (800e194 <scalbn+0xc0>)
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d0c3      	beq.n	800e0f8 <scalbn+0x24>
 800e170:	4807      	ldr	r0, [pc, #28]	; (800e190 <scalbn+0xbc>)
 800e172:	4910      	ldr	r1, [pc, #64]	; (800e1b4 <scalbn+0xe0>)
 800e174:	e7c0      	b.n	800e0f8 <scalbn+0x24>
 800e176:	4c0d      	ldr	r4, [pc, #52]	; (800e1ac <scalbn+0xd8>)
 800e178:	3336      	adds	r3, #54	; 0x36
 800e17a:	4022      	ands	r2, r4
 800e17c:	051b      	lsls	r3, r3, #20
 800e17e:	4313      	orrs	r3, r2
 800e180:	0019      	movs	r1, r3
 800e182:	2200      	movs	r2, #0
 800e184:	4b0c      	ldr	r3, [pc, #48]	; (800e1b8 <scalbn+0xe4>)
 800e186:	e7d4      	b.n	800e132 <scalbn+0x5e>
 800e188:	43500000 	.word	0x43500000
 800e18c:	ffff3cb0 	.word	0xffff3cb0
 800e190:	c2f8f359 	.word	0xc2f8f359
 800e194:	01a56e1f 	.word	0x01a56e1f
 800e198:	000007ff 	.word	0x000007ff
 800e19c:	000007fe 	.word	0x000007fe
 800e1a0:	8800759c 	.word	0x8800759c
 800e1a4:	7e37e43c 	.word	0x7e37e43c
 800e1a8:	fe37e43c 	.word	0xfe37e43c
 800e1ac:	800fffff 	.word	0x800fffff
 800e1b0:	0000c350 	.word	0x0000c350
 800e1b4:	81a56e1f 	.word	0x81a56e1f
 800e1b8:	3c900000 	.word	0x3c900000

0800e1bc <_init>:
 800e1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1be:	46c0      	nop			; (mov r8, r8)
 800e1c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1c2:	bc08      	pop	{r3}
 800e1c4:	469e      	mov	lr, r3
 800e1c6:	4770      	bx	lr

0800e1c8 <_fini>:
 800e1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1ca:	46c0      	nop			; (mov r8, r8)
 800e1cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1ce:	bc08      	pop	{r3}
 800e1d0:	469e      	mov	lr, r3
 800e1d2:	4770      	bx	lr
