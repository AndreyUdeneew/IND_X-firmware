
IND_X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6e8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800a7a4  0800a7a4  0001a7a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a88c  0800a88c  00023140  2**0
                  CONTENTS
  4 .ARM          00000000  0800a88c  0800a88c  00023140  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a88c  0800a88c  00023140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a88c  0800a88c  0001a88c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a890  0800a890  0001a890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00003140  20000000  0800a894  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024c0  20003140  0800d9d4  00023140  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005600  0800d9d4  00025600  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00023140  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d43  00000000  00000000  00023168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034d5  00000000  00000000  0003ceab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001890  00000000  00000000  00040380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001718  00000000  00000000  00041c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c3f7  00000000  00000000  00043328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d099  00000000  00000000  0005f71f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae248  00000000  00000000  0007c7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012aa00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059d8  00000000  00000000  0012aa54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20003140 	.word	0x20003140
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800a78c 	.word	0x0800a78c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20003144 	.word	0x20003144
 8000100:	0800a78c 	.word	0x0800a78c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b7f      	cmp	r3, #127	; 0x7f
 800022e:	d809      	bhi.n	8000244 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000230:	1dfb      	adds	r3, r7, #7
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	001a      	movs	r2, r3
 8000236:	231f      	movs	r3, #31
 8000238:	401a      	ands	r2, r3
 800023a:	4b04      	ldr	r3, [pc, #16]	; (800024c <__NVIC_EnableIRQ+0x30>)
 800023c:	2101      	movs	r1, #1
 800023e:	4091      	lsls	r1, r2
 8000240:	000a      	movs	r2, r1
 8000242:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e100 	.word	0xe000e100

08000250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	0002      	movs	r2, r0
 8000258:	6039      	str	r1, [r7, #0]
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b7f      	cmp	r3, #127	; 0x7f
 8000264:	d828      	bhi.n	80002b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000266:	4a2f      	ldr	r2, [pc, #188]	; (8000324 <__NVIC_SetPriority+0xd4>)
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	b25b      	sxtb	r3, r3
 800026e:	089b      	lsrs	r3, r3, #2
 8000270:	33c0      	adds	r3, #192	; 0xc0
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	589b      	ldr	r3, [r3, r2]
 8000276:	1dfa      	adds	r2, r7, #7
 8000278:	7812      	ldrb	r2, [r2, #0]
 800027a:	0011      	movs	r1, r2
 800027c:	2203      	movs	r2, #3
 800027e:	400a      	ands	r2, r1
 8000280:	00d2      	lsls	r2, r2, #3
 8000282:	21ff      	movs	r1, #255	; 0xff
 8000284:	4091      	lsls	r1, r2
 8000286:	000a      	movs	r2, r1
 8000288:	43d2      	mvns	r2, r2
 800028a:	401a      	ands	r2, r3
 800028c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	019b      	lsls	r3, r3, #6
 8000292:	22ff      	movs	r2, #255	; 0xff
 8000294:	401a      	ands	r2, r3
 8000296:	1dfb      	adds	r3, r7, #7
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	0018      	movs	r0, r3
 800029c:	2303      	movs	r3, #3
 800029e:	4003      	ands	r3, r0
 80002a0:	00db      	lsls	r3, r3, #3
 80002a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a4:	481f      	ldr	r0, [pc, #124]	; (8000324 <__NVIC_SetPriority+0xd4>)
 80002a6:	1dfb      	adds	r3, r7, #7
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	b25b      	sxtb	r3, r3
 80002ac:	089b      	lsrs	r3, r3, #2
 80002ae:	430a      	orrs	r2, r1
 80002b0:	33c0      	adds	r3, #192	; 0xc0
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002b6:	e031      	b.n	800031c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <__NVIC_SetPriority+0xd8>)
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	0019      	movs	r1, r3
 80002c0:	230f      	movs	r3, #15
 80002c2:	400b      	ands	r3, r1
 80002c4:	3b08      	subs	r3, #8
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	3306      	adds	r3, #6
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	18d3      	adds	r3, r2, r3
 80002ce:	3304      	adds	r3, #4
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1dfa      	adds	r2, r7, #7
 80002d4:	7812      	ldrb	r2, [r2, #0]
 80002d6:	0011      	movs	r1, r2
 80002d8:	2203      	movs	r2, #3
 80002da:	400a      	ands	r2, r1
 80002dc:	00d2      	lsls	r2, r2, #3
 80002de:	21ff      	movs	r1, #255	; 0xff
 80002e0:	4091      	lsls	r1, r2
 80002e2:	000a      	movs	r2, r1
 80002e4:	43d2      	mvns	r2, r2
 80002e6:	401a      	ands	r2, r3
 80002e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	019b      	lsls	r3, r3, #6
 80002ee:	22ff      	movs	r2, #255	; 0xff
 80002f0:	401a      	ands	r2, r3
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	0018      	movs	r0, r3
 80002f8:	2303      	movs	r3, #3
 80002fa:	4003      	ands	r3, r0
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	4809      	ldr	r0, [pc, #36]	; (8000328 <__NVIC_SetPriority+0xd8>)
 8000302:	1dfb      	adds	r3, r7, #7
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	001c      	movs	r4, r3
 8000308:	230f      	movs	r3, #15
 800030a:	4023      	ands	r3, r4
 800030c:	3b08      	subs	r3, #8
 800030e:	089b      	lsrs	r3, r3, #2
 8000310:	430a      	orrs	r2, r1
 8000312:	3306      	adds	r3, #6
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	18c3      	adds	r3, r0, r3
 8000318:	3304      	adds	r3, #4
 800031a:	601a      	str	r2, [r3, #0]
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b003      	add	sp, #12
 8000322:	bd90      	pop	{r4, r7, pc}
 8000324:	e000e100 	.word	0xe000e100
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2201      	movs	r2, #1
 800033a:	431a      	orrs	r2, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	601a      	str	r2, [r3, #0]
}
 8000340:	46c0      	nop			; (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	b002      	add	sp, #8
 8000346:	bd80      	pop	{r7, pc}

08000348 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a03      	ldr	r2, [pc, #12]	; (8000364 <LL_USART_DisableFIFO+0x1c>)
 8000356:	401a      	ands	r2, r3
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	601a      	str	r2, [r3, #0]
}
 800035c:	46c0      	nop			; (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	b002      	add	sp, #8
 8000362:	bd80      	pop	{r7, pc}
 8000364:	dfffffff 	.word	0xdfffffff

08000368 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	689b      	ldr	r3, [r3, #8]
 8000376:	00db      	lsls	r3, r3, #3
 8000378:	08da      	lsrs	r2, r3, #3
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	075b      	lsls	r3, r3, #29
 800037e:	431a      	orrs	r2, r3
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	609a      	str	r2, [r3, #8]
}
 8000384:	46c0      	nop			; (mov r8, r8)
 8000386:	46bd      	mov	sp, r7
 8000388:	b002      	add	sp, #8
 800038a:	bd80      	pop	{r7, pc}

0800038c <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	689b      	ldr	r3, [r3, #8]
 800039a:	4a05      	ldr	r2, [pc, #20]	; (80003b0 <LL_USART_SetRXFIFOThreshold+0x24>)
 800039c:	401a      	ands	r2, r3
 800039e:	683b      	ldr	r3, [r7, #0]
 80003a0:	065b      	lsls	r3, r3, #25
 80003a2:	431a      	orrs	r2, r3
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	609a      	str	r2, [r3, #8]
}
 80003a8:	46c0      	nop			; (mov r8, r8)
 80003aa:	46bd      	mov	sp, r7
 80003ac:	b002      	add	sp, #8
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	f1ffffff 	.word	0xf1ffffff

080003b4 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	685b      	ldr	r3, [r3, #4]
 80003c0:	4a07      	ldr	r2, [pc, #28]	; (80003e0 <LL_USART_ConfigAsyncMode+0x2c>)
 80003c2:	401a      	ands	r2, r3
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	689b      	ldr	r3, [r3, #8]
 80003cc:	222a      	movs	r2, #42	; 0x2a
 80003ce:	4393      	bics	r3, r2
 80003d0:	001a      	movs	r2, r3
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	609a      	str	r2, [r3, #8]
}
 80003d6:	46c0      	nop			; (mov r8, r8)
 80003d8:	46bd      	mov	sp, r7
 80003da:	b002      	add	sp, #8
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	46c0      	nop			; (mov r8, r8)
 80003e0:	ffffb7ff 	.word	0xffffb7ff

080003e4 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	69da      	ldr	r2, [r3, #28]
 80003f0:	2380      	movs	r3, #128	; 0x80
 80003f2:	039b      	lsls	r3, r3, #14
 80003f4:	401a      	ands	r2, r3
 80003f6:	2380      	movs	r3, #128	; 0x80
 80003f8:	039b      	lsls	r3, r3, #14
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d101      	bne.n	8000402 <LL_USART_IsActiveFlag_TEACK+0x1e>
 80003fe:	2301      	movs	r3, #1
 8000400:	e000      	b.n	8000404 <LL_USART_IsActiveFlag_TEACK+0x20>
 8000402:	2300      	movs	r3, #0
}
 8000404:	0018      	movs	r0, r3
 8000406:	46bd      	mov	sp, r7
 8000408:	b002      	add	sp, #8
 800040a:	bd80      	pop	{r7, pc}

0800040c <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	69da      	ldr	r2, [r3, #28]
 8000418:	2380      	movs	r3, #128	; 0x80
 800041a:	03db      	lsls	r3, r3, #15
 800041c:	401a      	ands	r2, r3
 800041e:	2380      	movs	r3, #128	; 0x80
 8000420:	03db      	lsls	r3, r3, #15
 8000422:	429a      	cmp	r2, r3
 8000424:	d101      	bne.n	800042a <LL_USART_IsActiveFlag_REACK+0x1e>
 8000426:	2301      	movs	r3, #1
 8000428:	e000      	b.n	800042c <LL_USART_IsActiveFlag_REACK+0x20>
 800042a:	2300      	movs	r3, #0
}
 800042c:	0018      	movs	r0, r3
 800042e:	46bd      	mov	sp, r7
 8000430:	b002      	add	sp, #8
 8000432:	bd80      	pop	{r7, pc}

08000434 <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	2220      	movs	r2, #32
 8000442:	431a      	orrs	r2, r3
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	601a      	str	r2, [r3, #0]
}
 8000448:	46c0      	nop			; (mov r8, r8)
 800044a:	46bd      	mov	sp, r7
 800044c:	b002      	add	sp, #8
 800044e:	bd80      	pop	{r7, pc}

08000450 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	689b      	ldr	r3, [r3, #8]
 800045c:	2201      	movs	r2, #1
 800045e:	431a      	orrs	r2, r3
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	609a      	str	r2, [r3, #8]
}
 8000464:	46c0      	nop			; (mov r8, r8)
 8000466:	46bd      	mov	sp, r7
 8000468:	b002      	add	sp, #8
 800046a:	bd80      	pop	{r7, pc}

0800046c <LL_USART_ReceiveData9>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData9
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
  */
__STATIC_INLINE uint16_t LL_USART_ReceiveData9(USART_TypeDef *USARTx)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000478:	b29b      	uxth	r3, r3
 800047a:	05db      	lsls	r3, r3, #23
 800047c:	0ddb      	lsrs	r3, r3, #23
 800047e:	b29b      	uxth	r3, r3
}
 8000480:	0018      	movs	r0, r3
 8000482:	46bd      	mov	sp, r7
 8000484:	b002      	add	sp, #8
 8000486:	bd80      	pop	{r7, pc}

08000488 <LL_SYSCFG_EnableFastModePlus>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 8000490:	4b04      	ldr	r3, [pc, #16]	; (80004a4 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8000492:	6819      	ldr	r1, [r3, #0]
 8000494:	4b03      	ldr	r3, [pc, #12]	; (80004a4 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8000496:	687a      	ldr	r2, [r7, #4]
 8000498:	430a      	orrs	r2, r1
 800049a:	601a      	str	r2, [r3, #0]
}
 800049c:	46c0      	nop			; (mov r8, r8)
 800049e:	46bd      	mov	sp, r7
 80004a0:	b002      	add	sp, #8
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	40010000 	.word	0x40010000

080004a8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	683a      	ldr	r2, [r7, #0]
 80004b6:	619a      	str	r2, [r3, #24]
}
 80004b8:	46c0      	nop			; (mov r8, r8)
 80004ba:	46bd      	mov	sp, r7
 80004bc:	b002      	add	sp, #8
 80004be:	bd80      	pop	{r7, pc}

080004c0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	683a      	ldr	r2, [r7, #0]
 80004ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80004d0:	46c0      	nop			; (mov r8, r8)
 80004d2:	46bd      	mov	sp, r7
 80004d4:	b002      	add	sp, #8
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 80004e0:	4b07      	ldr	r3, [pc, #28]	; (8000500 <LL_APB1_GRP1_EnableClock+0x28>)
 80004e2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80004e4:	4b06      	ldr	r3, [pc, #24]	; (8000500 <LL_APB1_GRP1_EnableClock+0x28>)
 80004e6:	687a      	ldr	r2, [r7, #4]
 80004e8:	430a      	orrs	r2, r1
 80004ea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80004ec:	4b04      	ldr	r3, [pc, #16]	; (8000500 <LL_APB1_GRP1_EnableClock+0x28>)
 80004ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	4013      	ands	r3, r2
 80004f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004f6:	68fb      	ldr	r3, [r7, #12]
}
 80004f8:	46c0      	nop			; (mov r8, r8)
 80004fa:	46bd      	mov	sp, r7
 80004fc:	b004      	add	sp, #16
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40021000 	.word	0x40021000

08000504 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 800050c:	4b07      	ldr	r3, [pc, #28]	; (800052c <LL_IOP_GRP1_EnableClock+0x28>)
 800050e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000510:	4b06      	ldr	r3, [pc, #24]	; (800052c <LL_IOP_GRP1_EnableClock+0x28>)
 8000512:	687a      	ldr	r2, [r7, #4]
 8000514:	430a      	orrs	r2, r1
 8000516:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000518:	4b04      	ldr	r3, [pc, #16]	; (800052c <LL_IOP_GRP1_EnableClock+0x28>)
 800051a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800051c:	687a      	ldr	r2, [r7, #4]
 800051e:	4013      	ands	r3, r2
 8000520:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000522:	68fb      	ldr	r3, [r7, #12]
}
 8000524:	46c0      	nop			; (mov r8, r8)
 8000526:	46bd      	mov	sp, r7
 8000528:	b004      	add	sp, #16
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40021000 	.word	0x40021000

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b086      	sub	sp, #24
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t testINPUT = 0;
 8000536:	2316      	movs	r3, #22
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	2200      	movs	r2, #0
 800053c:	801a      	strh	r2, [r3, #0]
	uint16_t testAns = 0;
 800053e:	2314      	movs	r3, #20
 8000540:	18fb      	adds	r3, r7, r3
 8000542:	2200      	movs	r2, #0
 8000544:	801a      	strh	r2, [r3, #0]
	uint16_t i = 0;
 8000546:	2312      	movs	r3, #18
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	2200      	movs	r2, #0
 800054c:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054e:	f002 fd53 	bl	8002ff8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000552:	f000 f875 	bl	8000640 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	4b34      	ldr	r3, [pc, #208]	; (8000628 <main+0xf8>)
 8000558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800055a:	4b33      	ldr	r3, [pc, #204]	; (8000628 <main+0xf8>)
 800055c:	2101      	movs	r1, #1
 800055e:	430a      	orrs	r2, r1
 8000560:	635a      	str	r2, [r3, #52]	; 0x34
 8000562:	4b31      	ldr	r3, [pc, #196]	; (8000628 <main+0xf8>)
 8000564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000566:	2201      	movs	r2, #1
 8000568:	4013      	ands	r3, r2
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800056e:	4b2e      	ldr	r3, [pc, #184]	; (8000628 <main+0xf8>)
 8000570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000572:	4b2d      	ldr	r3, [pc, #180]	; (8000628 <main+0xf8>)
 8000574:	2102      	movs	r1, #2
 8000576:	430a      	orrs	r2, r1
 8000578:	635a      	str	r2, [r3, #52]	; 0x34
 800057a:	4b2b      	ldr	r3, [pc, #172]	; (8000628 <main+0xf8>)
 800057c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800057e:	2202      	movs	r2, #2
 8000580:	4013      	ands	r3, r2
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000586:	4b28      	ldr	r3, [pc, #160]	; (8000628 <main+0xf8>)
 8000588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800058a:	4b27      	ldr	r3, [pc, #156]	; (8000628 <main+0xf8>)
 800058c:	2104      	movs	r1, #4
 800058e:	430a      	orrs	r2, r1
 8000590:	635a      	str	r2, [r3, #52]	; 0x34
 8000592:	4b25      	ldr	r3, [pc, #148]	; (8000628 <main+0xf8>)
 8000594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000596:	2204      	movs	r2, #4
 8000598:	4013      	ands	r3, r2
 800059a:	603b      	str	r3, [r7, #0]
 800059c:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 fbb7 	bl	8000d10 <MX_GPIO_Init>
  MX_DMA_Init();
 80005a2:	f000 fb87 	bl	8000cb4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005a6:	f000 faa5 	bl	8000af4 <MX_USART2_UART_Init>
  MX_COMP1_Init();
 80005aa:	f000 f8c9 	bl	8000740 <MX_COMP1_Init>
  MX_TIM1_Init();
 80005ae:	f000 f9a7 	bl	8000900 <MX_TIM1_Init>
  MX_USART3_Init();
 80005b2:	f000 fb3d 	bl	8000c30 <MX_USART3_Init>
  MX_I2S1_Init();
 80005b6:	f000 f935 	bl	8000824 <MX_I2S1_Init>
  MX_I2C1_Init();
 80005ba:	f000 f8f3 	bl	80007a4 <MX_I2C1_Init>
  MX_SPI2_Init();
 80005be:	f000 f95b 	bl	8000878 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	HAL_COMP_Start(&hcomp1);
 80005c2:	4b1a      	ldr	r3, [pc, #104]	; (800062c <main+0xfc>)
 80005c4:	0018      	movs	r0, r3
 80005c6:	f002 ffe5 	bl	8003594 <HAL_COMP_Start>
	HAL_Delay(100);
 80005ca:	2064      	movs	r0, #100	; 0x64
 80005cc:	f002 fd9a 	bl	8003104 <HAL_Delay>
	uint8_t I2Cbuf[5];
	MEM_Reset();
 80005d0:	f001 fc9a 	bl	8001f08 <MEM_Reset>

	weoInit();
 80005d4:	f000 fe20 	bl	8001218 <weoInit>
	HAL_Delay(1);
 80005d8:	2001      	movs	r0, #1
 80005da:	f002 fd93 	bl	8003104 <HAL_Delay>
	weoClear();
 80005de:	f000 fe87 	bl	80012f0 <weoClear>
	MEM_GetID();
 80005e2:	f001 ff0b 	bl	80023fc <MEM_GetID>

	USART2->CR1 |= (USART_CR1_UE | USART_CR1_RE | USART_CR1_TE|USART_CR1_M); // Enable USART, Receive and Transmit
 80005e6:	4b12      	ldr	r3, [pc, #72]	; (8000630 <main+0x100>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	4b11      	ldr	r3, [pc, #68]	; (8000630 <main+0x100>)
 80005ec:	4911      	ldr	r1, [pc, #68]	; (8000634 <main+0x104>)
 80005ee:	430a      	orrs	r2, r1
 80005f0:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	LL_USART_EnableIT_RXNE(USART2);
 80005f2:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <main+0x100>)
 80005f4:	0018      	movs	r0, r3
 80005f6:	f7ff ff1d 	bl	8000434 <LL_USART_EnableIT_RXNE_RXFNE>
	LL_USART_EnableIT_ERROR(USART2);
 80005fa:	4b0d      	ldr	r3, [pc, #52]	; (8000630 <main+0x100>)
 80005fc:	0018      	movs	r0, r3
 80005fe:	f7ff ff27 	bl	8000450 <LL_USART_EnableIT_ERROR>

	USART2->ICR|=USART_ICR_ORECF;
 8000602:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <main+0x100>)
 8000604:	6a1a      	ldr	r2, [r3, #32]
 8000606:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <main+0x100>)
 8000608:	2108      	movs	r1, #8
 800060a:	430a      	orrs	r2, r1
 800060c:	621a      	str	r2, [r3, #32]
//	USART3->CR1 |= USART_CR1_UE;
//	weoDrawRectangleFilled(0x00,0x00,0x7F,0x7F,0xFF,h1);
//	USART3->CR1 &= ~(USART_CR1_UE);
//		USART3->CR2 |= USART_CR2_MSBFIRST;
//		USART3->CR1 |= USART_CR1_UE;
	GPIOC->ODR |= 1 << 6;
 800060e:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <main+0x108>)
 8000610:	695a      	ldr	r2, [r3, #20]
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <main+0x108>)
 8000614:	2140      	movs	r1, #64	; 0x40
 8000616:	430a      	orrs	r2, r1
 8000618:	615a      	str	r2, [r3, #20]
	while (1) {
//		while(!(USART3->ISR & USART_ISR_TXE)){};
//						USART3->TDR = 0xF0;
		cmdExecute(cmd2Execute);
 800061a:	4b08      	ldr	r3, [pc, #32]	; (800063c <main+0x10c>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	0018      	movs	r0, r3
 8000620:	f001 ff4e 	bl	80024c0 <cmdExecute>
 8000624:	e7f9      	b.n	800061a <main+0xea>
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	40021000 	.word	0x40021000
 800062c:	20003350 	.word	0x20003350
 8000630:	40004400 	.word	0x40004400
 8000634:	1000100d 	.word	0x1000100d
 8000638:	50000800 	.word	0x50000800
 800063c:	2000345a 	.word	0x2000345a

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b590      	push	{r4, r7, lr}
 8000642:	b0a1      	sub	sp, #132	; 0x84
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	2448      	movs	r4, #72	; 0x48
 8000648:	193b      	adds	r3, r7, r4
 800064a:	0018      	movs	r0, r3
 800064c:	2338      	movs	r3, #56	; 0x38
 800064e:	001a      	movs	r2, r3
 8000650:	2100      	movs	r1, #0
 8000652:	f00a f893 	bl	800a77c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000656:	2338      	movs	r3, #56	; 0x38
 8000658:	18fb      	adds	r3, r7, r3
 800065a:	0018      	movs	r0, r3
 800065c:	2310      	movs	r3, #16
 800065e:	001a      	movs	r2, r3
 8000660:	2100      	movs	r1, #0
 8000662:	f00a f88b 	bl	800a77c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	0018      	movs	r0, r3
 800066a:	2334      	movs	r3, #52	; 0x34
 800066c:	001a      	movs	r2, r3
 800066e:	2100      	movs	r1, #0
 8000670:	f00a f884 	bl	800a77c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000674:	2380      	movs	r3, #128	; 0x80
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	0018      	movs	r0, r3
 800067a:	f004 fded 	bl	8005258 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800067e:	193b      	adds	r3, r7, r4
 8000680:	2202      	movs	r2, #2
 8000682:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000684:	193b      	adds	r3, r7, r4
 8000686:	2280      	movs	r2, #128	; 0x80
 8000688:	0052      	lsls	r2, r2, #1
 800068a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800068c:	0021      	movs	r1, r4
 800068e:	187b      	adds	r3, r7, r1
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000694:	187b      	adds	r3, r7, r1
 8000696:	2240      	movs	r2, #64	; 0x40
 8000698:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069a:	187b      	adds	r3, r7, r1
 800069c:	2202      	movs	r2, #2
 800069e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	2202      	movs	r2, #2
 80006a4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	2200      	movs	r2, #0
 80006aa:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	2208      	movs	r2, #8
 80006b0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2280      	movs	r2, #128	; 0x80
 80006b6:	0292      	lsls	r2, r2, #10
 80006b8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	2280      	movs	r2, #128	; 0x80
 80006be:	0492      	lsls	r2, r2, #18
 80006c0:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	2280      	movs	r2, #128	; 0x80
 80006c6:	0592      	lsls	r2, r2, #22
 80006c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	0018      	movs	r0, r3
 80006ce:	f004 fe0f 	bl	80052f0 <HAL_RCC_OscConfig>
 80006d2:	1e03      	subs	r3, r0, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006d6:	f002 f80d 	bl	80026f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006da:	2138      	movs	r1, #56	; 0x38
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	2207      	movs	r2, #7
 80006e0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	2202      	movs	r2, #2
 80006e6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2200      	movs	r2, #0
 80006f2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2102      	movs	r1, #2
 80006f8:	0018      	movs	r0, r3
 80006fa:	f005 f919 	bl	8005930 <HAL_RCC_ClockConfig>
 80006fe:	1e03      	subs	r3, r0, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000702:	f001 fff7 	bl	80026f4 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	4a0c      	ldr	r2, [pc, #48]	; (800073c <SystemClock_Config+0xfc>)
 800070a:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2S1|RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2200      	movs	r2, #0
 800071c:	615a      	str	r2, [r3, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	2200      	movs	r2, #0
 8000722:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	0018      	movs	r0, r3
 8000728:	f005 faac 	bl	8005c84 <HAL_RCCEx_PeriphCLKConfig>
 800072c:	1e03      	subs	r3, r0, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000730:	f001 ffe0 	bl	80026f4 <Error_Handler>
  }
}
 8000734:	46c0      	nop			; (mov r8, r8)
 8000736:	46bd      	mov	sp, r7
 8000738:	b021      	add	sp, #132	; 0x84
 800073a:	bd90      	pop	{r4, r7, pc}
 800073c:	00200822 	.word	0x00200822

08000740 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8000744:	4b15      	ldr	r3, [pc, #84]	; (800079c <MX_COMP1_Init+0x5c>)
 8000746:	4a16      	ldr	r2, [pc, #88]	; (80007a0 <MX_COMP1_Init+0x60>)
 8000748:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 800074a:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_COMP1_Init+0x5c>)
 800074c:	2280      	movs	r2, #128	; 0x80
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8000752:	4b12      	ldr	r3, [pc, #72]	; (800079c <MX_COMP1_Init+0x5c>)
 8000754:	2230      	movs	r2, #48	; 0x30
 8000756:	615a      	str	r2, [r3, #20]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000758:	4b10      	ldr	r3, [pc, #64]	; (800079c <MX_COMP1_Init+0x5c>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_COMP1_Init+0x5c>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000764:	4b0d      	ldr	r3, [pc, #52]	; (800079c <MX_COMP1_Init+0x5c>)
 8000766:	2200      	movs	r2, #0
 8000768:	619a      	str	r2, [r3, #24]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_TIM1_OC5;
 800076a:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_COMP1_Init+0x5c>)
 800076c:	2280      	movs	r2, #128	; 0x80
 800076e:	0392      	lsls	r2, r2, #14
 8000770:	621a      	str	r2, [r3, #32]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000772:	4b0a      	ldr	r3, [pc, #40]	; (800079c <MX_COMP1_Init+0x5c>)
 8000774:	2200      	movs	r2, #0
 8000776:	60da      	str	r2, [r3, #12]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000778:	4b08      	ldr	r3, [pc, #32]	; (800079c <MX_COMP1_Init+0x5c>)
 800077a:	2200      	movs	r2, #0
 800077c:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_EVENT_RISING;
 800077e:	4b07      	ldr	r3, [pc, #28]	; (800079c <MX_COMP1_Init+0x5c>)
 8000780:	2212      	movs	r2, #18
 8000782:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <MX_COMP1_Init+0x5c>)
 8000786:	0018      	movs	r0, r3
 8000788:	f002 fda2 	bl	80032d0 <HAL_COMP_Init>
 800078c:	1e03      	subs	r3, r0, #0
 800078e:	d001      	beq.n	8000794 <MX_COMP1_Init+0x54>
  {
    Error_Handler();
 8000790:	f001 ffb0 	bl	80026f4 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8000794:	46c0      	nop			; (mov r8, r8)
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	20003350 	.word	0x20003350
 80007a0:	40010200 	.word	0x40010200

080007a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007a8:	4b1b      	ldr	r3, [pc, #108]	; (8000818 <MX_I2C1_Init+0x74>)
 80007aa:	4a1c      	ldr	r2, [pc, #112]	; (800081c <MX_I2C1_Init+0x78>)
 80007ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x1094102C;
 80007ae:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <MX_I2C1_Init+0x74>)
 80007b0:	4a1b      	ldr	r2, [pc, #108]	; (8000820 <MX_I2C1_Init+0x7c>)
 80007b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007b4:	4b18      	ldr	r3, [pc, #96]	; (8000818 <MX_I2C1_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ba:	4b17      	ldr	r3, [pc, #92]	; (8000818 <MX_I2C1_Init+0x74>)
 80007bc:	2201      	movs	r2, #1
 80007be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c0:	4b15      	ldr	r3, [pc, #84]	; (8000818 <MX_I2C1_Init+0x74>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007c6:	4b14      	ldr	r3, [pc, #80]	; (8000818 <MX_I2C1_Init+0x74>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <MX_I2C1_Init+0x74>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_I2C1_Init+0x74>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_I2C1_Init+0x74>)
 80007da:	2200      	movs	r2, #0
 80007dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_I2C1_Init+0x74>)
 80007e0:	0018      	movs	r0, r3
 80007e2:	f003 fc33 	bl	800404c <HAL_I2C_Init>
 80007e6:	1e03      	subs	r3, r0, #0
 80007e8:	d001      	beq.n	80007ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007ea:	f001 ff83 	bl	80026f4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ee:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <MX_I2C1_Init+0x74>)
 80007f0:	2100      	movs	r1, #0
 80007f2:	0018      	movs	r0, r3
 80007f4:	f004 fac0 	bl	8004d78 <HAL_I2CEx_ConfigAnalogFilter>
 80007f8:	1e03      	subs	r3, r0, #0
 80007fa:	d001      	beq.n	8000800 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007fc:	f001 ff7a 	bl	80026f4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000800:	4b05      	ldr	r3, [pc, #20]	; (8000818 <MX_I2C1_Init+0x74>)
 8000802:	2100      	movs	r1, #0
 8000804:	0018      	movs	r0, r3
 8000806:	f004 fb03 	bl	8004e10 <HAL_I2CEx_ConfigDigitalFilter>
 800080a:	1e03      	subs	r3, r0, #0
 800080c:	d001      	beq.n	8000812 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800080e:	f001 ff71 	bl	80026f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20003230 	.word	0x20003230
 800081c:	40005400 	.word	0x40005400
 8000820:	1094102c 	.word	0x1094102c

08000824 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000828:	4b11      	ldr	r3, [pc, #68]	; (8000870 <MX_I2S1_Init+0x4c>)
 800082a:	4a12      	ldr	r2, [pc, #72]	; (8000874 <MX_I2S1_Init+0x50>)
 800082c:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 800082e:	4b10      	ldr	r3, [pc, #64]	; (8000870 <MX_I2S1_Init+0x4c>)
 8000830:	2280      	movs	r2, #128	; 0x80
 8000832:	0092      	lsls	r2, r2, #2
 8000834:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <MX_I2S1_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <MX_I2S1_Init+0x4c>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <MX_I2S1_Init+0x4c>)
 8000844:	2280      	movs	r2, #128	; 0x80
 8000846:	0092      	lsls	r2, r2, #2
 8000848:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 800084a:	4b09      	ldr	r3, [pc, #36]	; (8000870 <MX_I2S1_Init+0x4c>)
 800084c:	22fa      	movs	r2, #250	; 0xfa
 800084e:	0192      	lsls	r2, r2, #6
 8000850:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000852:	4b07      	ldr	r3, [pc, #28]	; (8000870 <MX_I2S1_Init+0x4c>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <MX_I2S1_Init+0x4c>)
 800085a:	0018      	movs	r0, r3
 800085c:	f004 fb24 	bl	8004ea8 <HAL_I2S_Init>
 8000860:	1e03      	subs	r3, r0, #0
 8000862:	d001      	beq.n	8000868 <MX_I2S1_Init+0x44>
  {
    Error_Handler();
 8000864:	f001 ff46 	bl	80026f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000868:	46c0      	nop			; (mov r8, r8)
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	2000345c 	.word	0x2000345c
 8000874:	40013000 	.word	0x40013000

08000878 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800087c:	4b1e      	ldr	r3, [pc, #120]	; (80008f8 <MX_SPI2_Init+0x80>)
 800087e:	2208      	movs	r2, #8
 8000880:	61da      	str	r2, [r3, #28]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000882:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <MX_SPI2_Init+0x80>)
 8000884:	4a1d      	ldr	r2, [pc, #116]	; (80008fc <MX_SPI2_Init+0x84>)
 8000886:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000888:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <MX_SPI2_Init+0x80>)
 800088a:	2282      	movs	r2, #130	; 0x82
 800088c:	0052      	lsls	r2, r2, #1
 800088e:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000890:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <MX_SPI2_Init+0x80>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000896:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <MX_SPI2_Init+0x80>)
 8000898:	22e0      	movs	r2, #224	; 0xe0
 800089a:	00d2      	lsls	r2, r2, #3
 800089c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800089e:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <MX_SPI2_Init+0x80>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a4:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <MX_SPI2_Init+0x80>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008aa:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <MX_SPI2_Init+0x80>)
 80008ac:	2280      	movs	r2, #128	; 0x80
 80008ae:	0092      	lsls	r2, r2, #2
 80008b0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_SPI2_Init+0x80>)
 80008b4:	2208      	movs	r2, #8
 80008b6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <MX_SPI2_Init+0x80>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_SPI2_Init+0x80>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_SPI2_Init+0x80>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <MX_SPI2_Init+0x80>)
 80008cc:	2207      	movs	r2, #7
 80008ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008d0:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_SPI2_Init+0x80>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <MX_SPI2_Init+0x80>)
 80008d8:	2208      	movs	r2, #8
 80008da:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_SPI2_Init+0x80>)
 80008de:	0018      	movs	r0, r3
 80008e0:	f005 fed0 	bl	8006684 <HAL_SPI_Init>
 80008e4:	1e03      	subs	r3, r0, #0
 80008e6:	d001      	beq.n	80008ec <MX_SPI2_Init+0x74>
  {
    Error_Handler();
 80008e8:	f001 ff04 	bl	80026f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80008ec:	4b02      	ldr	r3, [pc, #8]	; (80008f8 <MX_SPI2_Init+0x80>)
 80008ee:	2208      	movs	r2, #8
 80008f0:	61da      	str	r2, [r3, #28]
  /* USER CODE END SPI2_Init 2 */

}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	200031b0 	.word	0x200031b0
 80008fc:	40003800 	.word	0x40003800

08000900 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b09e      	sub	sp, #120	; 0x78
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000906:	2368      	movs	r3, #104	; 0x68
 8000908:	18fb      	adds	r3, r7, r3
 800090a:	0018      	movs	r0, r3
 800090c:	2310      	movs	r3, #16
 800090e:	001a      	movs	r2, r3
 8000910:	2100      	movs	r1, #0
 8000912:	f009 ff33 	bl	800a77c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000916:	235c      	movs	r3, #92	; 0x5c
 8000918:	18fb      	adds	r3, r7, r3
 800091a:	0018      	movs	r0, r3
 800091c:	230c      	movs	r3, #12
 800091e:	001a      	movs	r2, r3
 8000920:	2100      	movs	r1, #0
 8000922:	f009 ff2b 	bl	800a77c <memset>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8000926:	2350      	movs	r3, #80	; 0x50
 8000928:	18fb      	adds	r3, r7, r3
 800092a:	0018      	movs	r0, r3
 800092c:	230c      	movs	r3, #12
 800092e:	001a      	movs	r2, r3
 8000930:	2100      	movs	r1, #0
 8000932:	f009 ff23 	bl	800a77c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000936:	2334      	movs	r3, #52	; 0x34
 8000938:	18fb      	adds	r3, r7, r3
 800093a:	0018      	movs	r0, r3
 800093c:	231c      	movs	r3, #28
 800093e:	001a      	movs	r2, r3
 8000940:	2100      	movs	r1, #0
 8000942:	f009 ff1b 	bl	800a77c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000946:	003b      	movs	r3, r7
 8000948:	0018      	movs	r0, r3
 800094a:	2334      	movs	r3, #52	; 0x34
 800094c:	001a      	movs	r2, r3
 800094e:	2100      	movs	r1, #0
 8000950:	f009 ff14 	bl	800a77c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000954:	4b64      	ldr	r3, [pc, #400]	; (8000ae8 <MX_TIM1_Init+0x1e8>)
 8000956:	4a65      	ldr	r2, [pc, #404]	; (8000aec <MX_TIM1_Init+0x1ec>)
 8000958:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800095a:	4b63      	ldr	r3, [pc, #396]	; (8000ae8 <MX_TIM1_Init+0x1e8>)
 800095c:	2200      	movs	r2, #0
 800095e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000960:	4b61      	ldr	r3, [pc, #388]	; (8000ae8 <MX_TIM1_Init+0x1e8>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 639;
 8000966:	4b60      	ldr	r3, [pc, #384]	; (8000ae8 <MX_TIM1_Init+0x1e8>)
 8000968:	4a61      	ldr	r2, [pc, #388]	; (8000af0 <MX_TIM1_Init+0x1f0>)
 800096a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800096c:	4b5e      	ldr	r3, [pc, #376]	; (8000ae8 <MX_TIM1_Init+0x1e8>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000972:	4b5d      	ldr	r3, [pc, #372]	; (8000ae8 <MX_TIM1_Init+0x1e8>)
 8000974:	2200      	movs	r2, #0
 8000976:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000978:	4b5b      	ldr	r3, [pc, #364]	; (8000ae8 <MX_TIM1_Init+0x1e8>)
 800097a:	2280      	movs	r2, #128	; 0x80
 800097c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800097e:	4b5a      	ldr	r3, [pc, #360]	; (8000ae8 <MX_TIM1_Init+0x1e8>)
 8000980:	0018      	movs	r0, r3
 8000982:	f007 fa73 	bl	8007e6c <HAL_TIM_Base_Init>
 8000986:	1e03      	subs	r3, r0, #0
 8000988:	d001      	beq.n	800098e <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800098a:	f001 feb3 	bl	80026f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800098e:	2168      	movs	r1, #104	; 0x68
 8000990:	187b      	adds	r3, r7, r1
 8000992:	2280      	movs	r2, #128	; 0x80
 8000994:	0152      	lsls	r2, r2, #5
 8000996:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000998:	187a      	adds	r2, r7, r1
 800099a:	4b53      	ldr	r3, [pc, #332]	; (8000ae8 <MX_TIM1_Init+0x1e8>)
 800099c:	0011      	movs	r1, r2
 800099e:	0018      	movs	r0, r3
 80009a0:	f007 fcfc 	bl	800839c <HAL_TIM_ConfigClockSource>
 80009a4:	1e03      	subs	r3, r0, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80009a8:	f001 fea4 	bl	80026f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009ac:	4b4e      	ldr	r3, [pc, #312]	; (8000ae8 <MX_TIM1_Init+0x1e8>)
 80009ae:	0018      	movs	r0, r3
 80009b0:	f007 fab4 	bl	8007f1c <HAL_TIM_PWM_Init>
 80009b4:	1e03      	subs	r3, r0, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80009b8:	f001 fe9c 	bl	80026f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009bc:	215c      	movs	r1, #92	; 0x5c
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	2200      	movs	r2, #0
 80009c8:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009d0:	187a      	adds	r2, r7, r1
 80009d2:	4b45      	ldr	r3, [pc, #276]	; (8000ae8 <MX_TIM1_Init+0x1e8>)
 80009d4:	0011      	movs	r1, r2
 80009d6:	0018      	movs	r0, r3
 80009d8:	f008 f9b0 	bl	8008d3c <HAL_TIMEx_MasterConfigSynchronization>
 80009dc:	1e03      	subs	r3, r0, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 80009e0:	f001 fe88 	bl	80026f4 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 80009e4:	2150      	movs	r1, #80	; 0x50
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	2202      	movs	r2, #2
 80009ea:	601a      	str	r2, [r3, #0]
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	2201      	movs	r2, #1
 80009f0:	605a      	str	r2, [r3, #4]
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80009f8:	187a      	adds	r2, r7, r1
 80009fa:	4b3b      	ldr	r3, [pc, #236]	; (8000ae8 <MX_TIM1_Init+0x1e8>)
 80009fc:	2101      	movs	r1, #1
 80009fe:	0018      	movs	r0, r3
 8000a00:	f008 fab0 	bl	8008f64 <HAL_TIMEx_ConfigBreakInput>
 8000a04:	1e03      	subs	r3, r0, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000a08:	f001 fe74 	bl	80026f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a0c:	2134      	movs	r1, #52	; 0x34
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2260      	movs	r2, #96	; 0x60
 8000a12:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 300;
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	2296      	movs	r2, #150	; 0x96
 8000a18:	0052      	lsls	r2, r2, #1
 8000a1a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a1c:	187b      	adds	r3, r7, r1
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a22:	187b      	adds	r3, r7, r1
 8000a24:	2200      	movs	r2, #0
 8000a26:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000a28:	187b      	adds	r3, r7, r1
 8000a2a:	2204      	movs	r2, #4
 8000a2c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a2e:	187b      	adds	r3, r7, r1
 8000a30:	2200      	movs	r2, #0
 8000a32:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	2200      	movs	r2, #0
 8000a38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a3a:	1879      	adds	r1, r7, r1
 8000a3c:	4b2a      	ldr	r3, [pc, #168]	; (8000ae8 <MX_TIM1_Init+0x1e8>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	0018      	movs	r0, r3
 8000a42:	f007 fbb5 	bl	80081b0 <HAL_TIM_PWM_ConfigChannel>
 8000a46:	1e03      	subs	r3, r0, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8000a4a:	f001 fe53 	bl	80026f4 <Error_Handler>
  }
  sConfigOC.Pulse = 50;
 8000a4e:	2134      	movs	r1, #52	; 0x34
 8000a50:	187b      	adds	r3, r7, r1
 8000a52:	2232      	movs	r2, #50	; 0x32
 8000a54:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 8000a56:	1879      	adds	r1, r7, r1
 8000a58:	4b23      	ldr	r3, [pc, #140]	; (8000ae8 <MX_TIM1_Init+0x1e8>)
 8000a5a:	2210      	movs	r2, #16
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f007 fba7 	bl	80081b0 <HAL_TIM_PWM_ConfigChannel>
 8000a62:	1e03      	subs	r3, r0, #0
 8000a64:	d001      	beq.n	8000a6a <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 8000a66:	f001 fe45 	bl	80026f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000a6a:	003b      	movs	r3, r7
 8000a6c:	2280      	movs	r2, #128	; 0x80
 8000a6e:	0112      	lsls	r2, r2, #4
 8000a70:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000a72:	003b      	movs	r3, r7
 8000a74:	2280      	movs	r2, #128	; 0x80
 8000a76:	00d2      	lsls	r2, r2, #3
 8000a78:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a7a:	003b      	movs	r3, r7
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a80:	003b      	movs	r3, r7
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000a86:	003b      	movs	r3, r7
 8000a88:	2280      	movs	r2, #128	; 0x80
 8000a8a:	0152      	lsls	r2, r2, #5
 8000a8c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a8e:	003b      	movs	r3, r7
 8000a90:	2280      	movs	r2, #128	; 0x80
 8000a92:	0192      	lsls	r2, r2, #6
 8000a94:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 10;
 8000a96:	003b      	movs	r3, r7
 8000a98:	220a      	movs	r2, #10
 8000a9a:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a9c:	003b      	movs	r3, r7
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000aa2:	003b      	movs	r3, r7
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000aa8:	003b      	movs	r3, r7
 8000aaa:	2280      	movs	r2, #128	; 0x80
 8000aac:	0492      	lsls	r2, r2, #18
 8000aae:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ab0:	003b      	movs	r3, r7
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000ab6:	003b      	movs	r3, r7
 8000ab8:	2200      	movs	r2, #0
 8000aba:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000abc:	003b      	movs	r3, r7
 8000abe:	2280      	movs	r2, #128	; 0x80
 8000ac0:	01d2      	lsls	r2, r2, #7
 8000ac2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ac4:	003a      	movs	r2, r7
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <MX_TIM1_Init+0x1e8>)
 8000ac8:	0011      	movs	r1, r2
 8000aca:	0018      	movs	r0, r3
 8000acc:	f008 f9a4 	bl	8008e18 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ad0:	1e03      	subs	r3, r0, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM1_Init+0x1d8>
  {
    Error_Handler();
 8000ad4:	f001 fe0e 	bl	80026f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ad8:	4b03      	ldr	r3, [pc, #12]	; (8000ae8 <MX_TIM1_Init+0x1e8>)
 8000ada:	0018      	movs	r0, r3
 8000adc:	f002 f850 	bl	8002b80 <HAL_TIM_MspPostInit>

}
 8000ae0:	46c0      	nop			; (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	b01e      	add	sp, #120	; 0x78
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20003404 	.word	0x20003404
 8000aec:	40012c00 	.word	0x40012c00
 8000af0:	0000027f 	.word	0x0000027f

08000af4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000af4:	b590      	push	{r4, r7, lr}
 8000af6:	b08f      	sub	sp, #60	; 0x3c
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000afa:	2418      	movs	r4, #24
 8000afc:	193b      	adds	r3, r7, r4
 8000afe:	0018      	movs	r0, r3
 8000b00:	2320      	movs	r3, #32
 8000b02:	001a      	movs	r2, r3
 8000b04:	2100      	movs	r1, #0
 8000b06:	f009 fe39 	bl	800a77c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0a:	003b      	movs	r3, r7
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	2318      	movs	r3, #24
 8000b10:	001a      	movs	r2, r3
 8000b12:	2100      	movs	r1, #0
 8000b14:	f009 fe32 	bl	800a77c <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	029b      	lsls	r3, r3, #10
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f7ff fcdb 	bl	80004d8 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000b22:	2001      	movs	r0, #1
 8000b24:	f7ff fcee 	bl	8000504 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000b28:	003b      	movs	r3, r7
 8000b2a:	2204      	movs	r2, #4
 8000b2c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b2e:	003b      	movs	r3, r7
 8000b30:	2202      	movs	r2, #2
 8000b32:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b34:	003b      	movs	r3, r7
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b3a:	003b      	movs	r3, r7
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b40:	003b      	movs	r3, r7
 8000b42:	2200      	movs	r2, #0
 8000b44:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000b46:	003b      	movs	r3, r7
 8000b48:	2201      	movs	r2, #1
 8000b4a:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4c:	003a      	movs	r2, r7
 8000b4e:	23a0      	movs	r3, #160	; 0xa0
 8000b50:	05db      	lsls	r3, r3, #23
 8000b52:	0011      	movs	r1, r2
 8000b54:	0018      	movs	r0, r3
 8000b56:	f009 fa93 	bl	800a080 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000b5a:	003b      	movs	r3, r7
 8000b5c:	2208      	movs	r2, #8
 8000b5e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b60:	003b      	movs	r3, r7
 8000b62:	2202      	movs	r2, #2
 8000b64:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b66:	003b      	movs	r3, r7
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b6c:	003b      	movs	r3, r7
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b72:	003b      	movs	r3, r7
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000b78:	003b      	movs	r3, r7
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7e:	003a      	movs	r2, r7
 8000b80:	23a0      	movs	r3, #160	; 0xa0
 8000b82:	05db      	lsls	r3, r3, #23
 8000b84:	0011      	movs	r1, r2
 8000b86:	0018      	movs	r0, r3
 8000b88:	f009 fa7a 	bl	800a080 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	201c      	movs	r0, #28
 8000b90:	f7ff fb5e 	bl	8000250 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000b94:	201c      	movs	r0, #28
 8000b96:	f7ff fb41 	bl	800021c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000b9a:	193b      	adds	r3, r7, r4
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 57600;
 8000ba0:	193b      	adds	r3, r7, r4
 8000ba2:	22e1      	movs	r2, #225	; 0xe1
 8000ba4:	0212      	lsls	r2, r2, #8
 8000ba6:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8000ba8:	193b      	adds	r3, r7, r4
 8000baa:	2280      	movs	r2, #128	; 0x80
 8000bac:	0152      	lsls	r2, r2, #5
 8000bae:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000bb0:	0021      	movs	r1, r4
 8000bb2:	187b      	adds	r3, r7, r1
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	2200      	movs	r2, #0
 8000bbc:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000bbe:	187b      	adds	r3, r7, r1
 8000bc0:	220c      	movs	r2, #12
 8000bc2:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000bca:	187b      	adds	r3, r7, r1
 8000bcc:	2200      	movs	r2, #0
 8000bce:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART2, &USART_InitStruct);
 8000bd0:	187b      	adds	r3, r7, r1
 8000bd2:	4a16      	ldr	r2, [pc, #88]	; (8000c2c <MX_USART2_UART_Init+0x138>)
 8000bd4:	0019      	movs	r1, r3
 8000bd6:	0010      	movs	r0, r2
 8000bd8:	f009 fd1e 	bl	800a618 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000bdc:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <MX_USART2_UART_Init+0x138>)
 8000bde:	2100      	movs	r1, #0
 8000be0:	0018      	movs	r0, r3
 8000be2:	f7ff fbc1 	bl	8000368 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000be6:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <MX_USART2_UART_Init+0x138>)
 8000be8:	2100      	movs	r1, #0
 8000bea:	0018      	movs	r0, r3
 8000bec:	f7ff fbce 	bl	800038c <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART2);
 8000bf0:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <MX_USART2_UART_Init+0x138>)
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f7ff fba8 	bl	8000348 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART2);
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <MX_USART2_UART_Init+0x138>)
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f7ff fbda 	bl	80003b4 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 8000c00:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <MX_USART2_UART_Init+0x138>)
 8000c02:	0018      	movs	r0, r3
 8000c04:	f7ff fb92 	bl	800032c <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 8000c08:	46c0      	nop			; (mov r8, r8)
 8000c0a:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <MX_USART2_UART_Init+0x138>)
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f7ff fbe9 	bl	80003e4 <LL_USART_IsActiveFlag_TEACK>
 8000c12:	1e03      	subs	r3, r0, #0
 8000c14:	d0f9      	beq.n	8000c0a <MX_USART2_UART_Init+0x116>
 8000c16:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <MX_USART2_UART_Init+0x138>)
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f7ff fbf7 	bl	800040c <LL_USART_IsActiveFlag_REACK>
 8000c1e:	1e03      	subs	r3, r0, #0
 8000c20:	d0f3      	beq.n	8000c0a <MX_USART2_UART_Init+0x116>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	46c0      	nop			; (mov r8, r8)
 8000c26:	46bd      	mov	sp, r7
 8000c28:	b00f      	add	sp, #60	; 0x3c
 8000c2a:	bd90      	pop	{r4, r7, pc}
 8000c2c:	40004400 	.word	0x40004400

08000c30 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */
//	USART3->CR2 &= ~(USART_CR1_UE);
	USART3->CR2|=USART_CR2_MSBFIRST;
 8000c34:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <MX_USART3_Init+0x78>)
 8000c36:	685a      	ldr	r2, [r3, #4]
 8000c38:	4b1b      	ldr	r3, [pc, #108]	; (8000ca8 <MX_USART3_Init+0x78>)
 8000c3a:	2180      	movs	r1, #128	; 0x80
 8000c3c:	0309      	lsls	r1, r1, #12
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8000c42:	4b1a      	ldr	r3, [pc, #104]	; (8000cac <MX_USART3_Init+0x7c>)
 8000c44:	4a18      	ldr	r2, [pc, #96]	; (8000ca8 <MX_USART3_Init+0x78>)
 8000c46:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 8100000;
 8000c48:	4b18      	ldr	r3, [pc, #96]	; (8000cac <MX_USART3_Init+0x7c>)
 8000c4a:	4a19      	ldr	r2, [pc, #100]	; (8000cb0 <MX_USART3_Init+0x80>)
 8000c4c:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8000c4e:	4b17      	ldr	r3, [pc, #92]	; (8000cac <MX_USART3_Init+0x7c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8000c54:	4b15      	ldr	r3, [pc, #84]	; (8000cac <MX_USART3_Init+0x7c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8000c5a:	4b14      	ldr	r3, [pc, #80]	; (8000cac <MX_USART3_Init+0x7c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX;
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <MX_USART3_Init+0x7c>)
 8000c62:	2208      	movs	r2, #8
 8000c64:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_HIGH;
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <MX_USART3_Init+0x7c>)
 8000c68:	2280      	movs	r2, #128	; 0x80
 8000c6a:	00d2      	lsls	r2, r2, #3
 8000c6c:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_2EDGE;
 8000c6e:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <MX_USART3_Init+0x7c>)
 8000c70:	2280      	movs	r2, #128	; 0x80
 8000c72:	0092      	lsls	r2, r2, #2
 8000c74:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_ENABLE;
 8000c76:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <MX_USART3_Init+0x7c>)
 8000c78:	2280      	movs	r2, #128	; 0x80
 8000c7a:	0052      	lsls	r2, r2, #1
 8000c7c:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <MX_USART3_Init+0x7c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 8000c84:	4b09      	ldr	r3, [pc, #36]	; (8000cac <MX_USART3_Init+0x7c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8000c8a:	4b08      	ldr	r3, [pc, #32]	; (8000cac <MX_USART3_Init+0x7c>)
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f008 fa09 	bl	80090a4 <HAL_USART_Init>
 8000c92:	1e03      	subs	r3, r0, #0
 8000c94:	d001      	beq.n	8000c9a <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 8000c96:	f001 fd2d 	bl	80026f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  husart3.Init.BaudRate = 8100000;
 8000c9a:	4b04      	ldr	r3, [pc, #16]	; (8000cac <MX_USART3_Init+0x7c>)
 8000c9c:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <MX_USART3_Init+0x80>)
 8000c9e:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 2 */

}
 8000ca0:	46c0      	nop			; (mov r8, r8)
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	40004800 	.word	0x40004800
 8000cac:	20003390 	.word	0x20003390
 8000cb0:	007b98a0 	.word	0x007b98a0

08000cb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cba:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <MX_DMA_Init+0x58>)
 8000cbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000cbe:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <MX_DMA_Init+0x58>)
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	639a      	str	r2, [r3, #56]	; 0x38
 8000cc6:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <MX_DMA_Init+0x58>)
 8000cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cca:	2201      	movs	r2, #1
 8000ccc:	4013      	ands	r3, r2
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	2009      	movs	r0, #9
 8000cd8:	f002 fd5a 	bl	8003790 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000cdc:	2009      	movs	r0, #9
 8000cde:	f002 fd6c 	bl	80037ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	200a      	movs	r0, #10
 8000ce8:	f002 fd52 	bl	8003790 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000cec:	200a      	movs	r0, #10
 8000cee:	f002 fd64 	bl	80037ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 0, 0);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	200b      	movs	r0, #11
 8000cf8:	f002 fd4a 	bl	8003790 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 8000cfc:	200b      	movs	r0, #11
 8000cfe:	f002 fd5c 	bl	80037ba <HAL_NVIC_EnableIRQ>

}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	46bd      	mov	sp, r7
 8000d06:	b002      	add	sp, #8
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	40021000 	.word	0x40021000

08000d10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d16:	003b      	movs	r3, r7
 8000d18:	0018      	movs	r0, r3
 8000d1a:	2318      	movs	r3, #24
 8000d1c:	001a      	movs	r2, r3
 8000d1e:	2100      	movs	r1, #0
 8000d20:	f009 fd2c 	bl	800a77c <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000d24:	2002      	movs	r0, #2
 8000d26:	f7ff fbed 	bl	8000504 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000d2a:	2004      	movs	r0, #4
 8000d2c:	f7ff fbea 	bl	8000504 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000d30:	2001      	movs	r0, #1
 8000d32:	f7ff fbe7 	bl	8000504 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(MEM_HOLD_GPIO_Port, MEM_HOLD_Pin);
 8000d36:	2380      	movs	r3, #128	; 0x80
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	4aa0      	ldr	r2, [pc, #640]	; (8000fbc <MX_GPIO_Init+0x2ac>)
 8000d3c:	0019      	movs	r1, r3
 8000d3e:	0010      	movs	r0, r2
 8000d40:	f7ff fbb2 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_WP_GPIO_Port, MEM_WP_Pin);
 8000d44:	2380      	movs	r3, #128	; 0x80
 8000d46:	01db      	lsls	r3, r3, #7
 8000d48:	4a9d      	ldr	r2, [pc, #628]	; (8000fc0 <MX_GPIO_Init+0x2b0>)
 8000d4a:	0019      	movs	r1, r3
 8000d4c:	0010      	movs	r0, r2
 8000d4e:	f7ff fbab 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_CS_GPIO_Port, MEM_CS_Pin);
 8000d52:	2380      	movs	r3, #128	; 0x80
 8000d54:	021b      	lsls	r3, r3, #8
 8000d56:	4a9a      	ldr	r2, [pc, #616]	; (8000fc0 <MX_GPIO_Init+0x2b0>)
 8000d58:	0019      	movs	r1, r3
 8000d5a:	0010      	movs	r0, r2
 8000d5c:	f7ff fba4 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_CS_GPIO_Port, DISP_CS_Pin);
 8000d60:	23a0      	movs	r3, #160	; 0xa0
 8000d62:	05db      	lsls	r3, r3, #23
 8000d64:	2140      	movs	r1, #64	; 0x40
 8000d66:	0018      	movs	r0, r3
 8000d68:	f7ff fb9e 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_D_C_GPIO_Port, DISP_D_C_Pin);
 8000d6c:	23a0      	movs	r3, #160	; 0xa0
 8000d6e:	05db      	lsls	r3, r3, #23
 8000d70:	2180      	movs	r1, #128	; 0x80
 8000d72:	0018      	movs	r0, r3
 8000d74:	f7ff fb98 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(BF_GPIO_Port, BF_Pin);
 8000d78:	4b91      	ldr	r3, [pc, #580]	; (8000fc0 <MX_GPIO_Init+0x2b0>)
 8000d7a:	2140      	movs	r1, #64	; 0x40
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f7ff fb93 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_1_GPIO_Port, TEST_1_Pin);
 8000d82:	2380      	movs	r3, #128	; 0x80
 8000d84:	011a      	lsls	r2, r3, #4
 8000d86:	23a0      	movs	r3, #160	; 0xa0
 8000d88:	05db      	lsls	r3, r3, #23
 8000d8a:	0011      	movs	r1, r2
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f7ff fb97 	bl	80004c0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_2_GPIO_Port, TEST_2_Pin);
 8000d92:	2380      	movs	r3, #128	; 0x80
 8000d94:	015a      	lsls	r2, r3, #5
 8000d96:	23a0      	movs	r3, #160	; 0xa0
 8000d98:	05db      	lsls	r3, r3, #23
 8000d9a:	0011      	movs	r1, r2
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f7ff fb8f 	bl	80004c0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = MEM_HOLD_Pin;
 8000da2:	003b      	movs	r3, r7
 8000da4:	2280      	movs	r2, #128	; 0x80
 8000da6:	0092      	lsls	r2, r2, #2
 8000da8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000daa:	003b      	movs	r3, r7
 8000dac:	2201      	movs	r2, #1
 8000dae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000db0:	003b      	movs	r3, r7
 8000db2:	2203      	movs	r2, #3
 8000db4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000db6:	003b      	movs	r3, r7
 8000db8:	2200      	movs	r2, #0
 8000dba:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000dbc:	003b      	movs	r3, r7
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_HOLD_GPIO_Port, &GPIO_InitStruct);
 8000dc2:	003b      	movs	r3, r7
 8000dc4:	4a7d      	ldr	r2, [pc, #500]	; (8000fbc <MX_GPIO_Init+0x2ac>)
 8000dc6:	0019      	movs	r1, r3
 8000dc8:	0010      	movs	r0, r2
 8000dca:	f009 f959 	bl	800a080 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_WP_Pin;
 8000dce:	003b      	movs	r3, r7
 8000dd0:	2280      	movs	r2, #128	; 0x80
 8000dd2:	01d2      	lsls	r2, r2, #7
 8000dd4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000dd6:	003b      	movs	r3, r7
 8000dd8:	2201      	movs	r2, #1
 8000dda:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ddc:	003b      	movs	r3, r7
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000de2:	003b      	movs	r3, r7
 8000de4:	2200      	movs	r2, #0
 8000de6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000de8:	003b      	movs	r3, r7
 8000dea:	2200      	movs	r2, #0
 8000dec:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_WP_GPIO_Port, &GPIO_InitStruct);
 8000dee:	003b      	movs	r3, r7
 8000df0:	4a73      	ldr	r2, [pc, #460]	; (8000fc0 <MX_GPIO_Init+0x2b0>)
 8000df2:	0019      	movs	r1, r3
 8000df4:	0010      	movs	r0, r2
 8000df6:	f009 f943 	bl	800a080 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_CS_Pin;
 8000dfa:	003b      	movs	r3, r7
 8000dfc:	2280      	movs	r2, #128	; 0x80
 8000dfe:	0212      	lsls	r2, r2, #8
 8000e00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e02:	003b      	movs	r3, r7
 8000e04:	2201      	movs	r2, #1
 8000e06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e08:	003b      	movs	r3, r7
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e0e:	003b      	movs	r3, r7
 8000e10:	2200      	movs	r2, #0
 8000e12:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e14:	003b      	movs	r3, r7
 8000e16:	2200      	movs	r2, #0
 8000e18:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_CS_GPIO_Port, &GPIO_InitStruct);
 8000e1a:	003b      	movs	r3, r7
 8000e1c:	4a68      	ldr	r2, [pc, #416]	; (8000fc0 <MX_GPIO_Init+0x2b0>)
 8000e1e:	0019      	movs	r1, r3
 8000e20:	0010      	movs	r0, r2
 8000e22:	f009 f92d 	bl	800a080 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_1_Pin;
 8000e26:	003b      	movs	r3, r7
 8000e28:	2201      	movs	r2, #1
 8000e2a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e2c:	003b      	movs	r3, r7
 8000e2e:	2200      	movs	r2, #0
 8000e30:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e32:	003b      	movs	r3, r7
 8000e34:	2201      	movs	r2, #1
 8000e36:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_1_GPIO_Port, &GPIO_InitStruct);
 8000e38:	003a      	movs	r2, r7
 8000e3a:	23a0      	movs	r3, #160	; 0xa0
 8000e3c:	05db      	lsls	r3, r3, #23
 8000e3e:	0011      	movs	r1, r2
 8000e40:	0018      	movs	r0, r3
 8000e42:	f009 f91d 	bl	800a080 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_2_Pin;
 8000e46:	003b      	movs	r3, r7
 8000e48:	2202      	movs	r2, #2
 8000e4a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e4c:	003b      	movs	r3, r7
 8000e4e:	2200      	movs	r2, #0
 8000e50:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e52:	003b      	movs	r3, r7
 8000e54:	2201      	movs	r2, #1
 8000e56:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_2_GPIO_Port, &GPIO_InitStruct);
 8000e58:	003a      	movs	r2, r7
 8000e5a:	23a0      	movs	r3, #160	; 0xa0
 8000e5c:	05db      	lsls	r3, r3, #23
 8000e5e:	0011      	movs	r1, r2
 8000e60:	0018      	movs	r0, r3
 8000e62:	f009 f90d 	bl	800a080 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_3_Pin;
 8000e66:	003b      	movs	r3, r7
 8000e68:	2210      	movs	r2, #16
 8000e6a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e6c:	003b      	movs	r3, r7
 8000e6e:	2200      	movs	r2, #0
 8000e70:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e72:	003b      	movs	r3, r7
 8000e74:	2201      	movs	r2, #1
 8000e76:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_3_GPIO_Port, &GPIO_InitStruct);
 8000e78:	003a      	movs	r2, r7
 8000e7a:	23a0      	movs	r3, #160	; 0xa0
 8000e7c:	05db      	lsls	r3, r3, #23
 8000e7e:	0011      	movs	r1, r2
 8000e80:	0018      	movs	r0, r3
 8000e82:	f009 f8fd 	bl	800a080 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 8000e86:	003b      	movs	r3, r7
 8000e88:	2240      	movs	r2, #64	; 0x40
 8000e8a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e8c:	003b      	movs	r3, r7
 8000e8e:	2201      	movs	r2, #1
 8000e90:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e92:	003b      	movs	r3, r7
 8000e94:	2203      	movs	r2, #3
 8000e96:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e98:	003b      	movs	r3, r7
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e9e:	003b      	movs	r3, r7
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 8000ea4:	003a      	movs	r2, r7
 8000ea6:	23a0      	movs	r3, #160	; 0xa0
 8000ea8:	05db      	lsls	r3, r3, #23
 8000eaa:	0011      	movs	r1, r2
 8000eac:	0018      	movs	r0, r3
 8000eae:	f009 f8e7 	bl	800a080 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_D_C_Pin;
 8000eb2:	003b      	movs	r3, r7
 8000eb4:	2280      	movs	r2, #128	; 0x80
 8000eb6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000eb8:	003b      	movs	r3, r7
 8000eba:	2201      	movs	r2, #1
 8000ebc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000ebe:	003b      	movs	r3, r7
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ec4:	003b      	movs	r3, r7
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000eca:	003b      	movs	r3, r7
 8000ecc:	2200      	movs	r2, #0
 8000ece:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_D_C_GPIO_Port, &GPIO_InitStruct);
 8000ed0:	003a      	movs	r2, r7
 8000ed2:	23a0      	movs	r3, #160	; 0xa0
 8000ed4:	05db      	lsls	r3, r3, #23
 8000ed6:	0011      	movs	r1, r2
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f009 f8d1 	bl	800a080 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BF_Pin;
 8000ede:	003b      	movs	r3, r7
 8000ee0:	2240      	movs	r2, #64	; 0x40
 8000ee2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ee4:	003b      	movs	r3, r7
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000eea:	003b      	movs	r3, r7
 8000eec:	2203      	movs	r2, #3
 8000eee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ef0:	003b      	movs	r3, r7
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ef6:	003b      	movs	r3, r7
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BF_GPIO_Port, &GPIO_InitStruct);
 8000efc:	003b      	movs	r3, r7
 8000efe:	4a30      	ldr	r2, [pc, #192]	; (8000fc0 <MX_GPIO_Init+0x2b0>)
 8000f00:	0019      	movs	r1, r3
 8000f02:	0010      	movs	r0, r2
 8000f04:	f009 f8bc 	bl	800a080 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_1_Pin;
 8000f08:	003b      	movs	r3, r7
 8000f0a:	2280      	movs	r2, #128	; 0x80
 8000f0c:	0112      	lsls	r2, r2, #4
 8000f0e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f10:	003b      	movs	r3, r7
 8000f12:	2201      	movs	r2, #1
 8000f14:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f16:	003b      	movs	r3, r7
 8000f18:	2203      	movs	r2, #3
 8000f1a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f1c:	003b      	movs	r3, r7
 8000f1e:	2200      	movs	r2, #0
 8000f20:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f22:	003b      	movs	r3, r7
 8000f24:	2200      	movs	r2, #0
 8000f26:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_1_GPIO_Port, &GPIO_InitStruct);
 8000f28:	003a      	movs	r2, r7
 8000f2a:	23a0      	movs	r3, #160	; 0xa0
 8000f2c:	05db      	lsls	r3, r3, #23
 8000f2e:	0011      	movs	r1, r2
 8000f30:	0018      	movs	r0, r3
 8000f32:	f009 f8a5 	bl	800a080 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_2_Pin;
 8000f36:	003b      	movs	r3, r7
 8000f38:	2280      	movs	r2, #128	; 0x80
 8000f3a:	0152      	lsls	r2, r2, #5
 8000f3c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f3e:	003b      	movs	r3, r7
 8000f40:	2201      	movs	r2, #1
 8000f42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f44:	003b      	movs	r3, r7
 8000f46:	2203      	movs	r2, #3
 8000f48:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f4a:	003b      	movs	r3, r7
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f50:	003b      	movs	r3, r7
 8000f52:	2200      	movs	r2, #0
 8000f54:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_2_GPIO_Port, &GPIO_InitStruct);
 8000f56:	003a      	movs	r2, r7
 8000f58:	23a0      	movs	r3, #160	; 0xa0
 8000f5a:	05db      	lsls	r3, r3, #23
 8000f5c:	0011      	movs	r1, r2
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f009 f88e 	bl	800a080 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = KEY_4_Pin;
 8000f64:	003b      	movs	r3, r7
 8000f66:	2280      	movs	r2, #128	; 0x80
 8000f68:	0192      	lsls	r2, r2, #6
 8000f6a:	601a      	str	r2, [r3, #0]
  	  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000f6c:	003b      	movs	r3, r7
 8000f6e:	2200      	movs	r2, #0
 8000f70:	605a      	str	r2, [r3, #4]
  	  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000f72:	003b      	movs	r3, r7
 8000f74:	2201      	movs	r2, #1
 8000f76:	611a      	str	r2, [r3, #16]
  	  LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 8000f78:	003a      	movs	r2, r7
 8000f7a:	23a0      	movs	r3, #160	; 0xa0
 8000f7c:	05db      	lsls	r3, r3, #23
 8000f7e:	0011      	movs	r1, r2
 8000f80:	0018      	movs	r0, r3
 8000f82:	f009 f87d 	bl	800a080 <LL_GPIO_Init>
  	  /**/
  	    GPIO_InitStruct.Pin = KEY_5_Pin;
 8000f86:	003b      	movs	r3, r7
 8000f88:	2280      	movs	r2, #128	; 0x80
 8000f8a:	01d2      	lsls	r2, r2, #7
 8000f8c:	601a      	str	r2, [r3, #0]
  	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000f8e:	003b      	movs	r3, r7
 8000f90:	2200      	movs	r2, #0
 8000f92:	605a      	str	r2, [r3, #4]
  	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000f94:	003b      	movs	r3, r7
 8000f96:	2201      	movs	r2, #1
 8000f98:	611a      	str	r2, [r3, #16]
  	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 8000f9a:	003a      	movs	r2, r7
 8000f9c:	23a0      	movs	r3, #160	; 0xa0
 8000f9e:	05db      	lsls	r3, r3, #23
 8000fa0:	0011      	movs	r1, r2
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f009 f86c 	bl	800a080 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_EnableFastModePlus(LL_SYSCFG_I2C_FASTMODEPLUS_PB9);
 8000fa8:	2380      	movs	r3, #128	; 0x80
 8000faa:	031b      	lsls	r3, r3, #12
 8000fac:	0018      	movs	r0, r3
 8000fae:	f7ff fa6b 	bl	8000488 <LL_SYSCFG_EnableFastModePlus>

}
 8000fb2:	46c0      	nop			; (mov r8, r8)
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	b006      	add	sp, #24
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	50000400 	.word	0x50000400
 8000fc0:	50000800 	.word	0x50000800

08000fc4 <USART2_RX_Callback>:
//	    GPIO_InitStruct.Pin = KEY_5_Pin;
//	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
//	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
//	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
void  USART2_RX_Callback(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0

  dt1 = LL_USART_ReceiveData9(USART2);// LL implementaion of 1 byte receive
 8000fc8:	4b16      	ldr	r3, [pc, #88]	; (8001024 <USART2_RX_Callback+0x60>)
 8000fca:	0018      	movs	r0, r3
 8000fcc:	f7ff fa4e 	bl	800046c <LL_USART_ReceiveData9>
 8000fd0:	0003      	movs	r3, r0
 8000fd2:	001a      	movs	r2, r3
 8000fd4:	4b14      	ldr	r3, [pc, #80]	; (8001028 <USART2_RX_Callback+0x64>)
 8000fd6:	801a      	strh	r2, [r3, #0]
	dt1 = (uint16_t)(USART2->RDR & 0x01FF);//CMSIS implementaion of 1 byte receive
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <USART2_RX_Callback+0x60>)
 8000fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	05db      	lsls	r3, r3, #23
 8000fe0:	0ddb      	lsrs	r3, r3, #23
 8000fe2:	b29a      	uxth	r2, r3
 8000fe4:	4b10      	ldr	r3, [pc, #64]	; (8001028 <USART2_RX_Callback+0x64>)
 8000fe6:	801a      	strh	r2, [r3, #0]
  ByteReceived=1;
 8000fe8:	4b10      	ldr	r3, [pc, #64]	; (800102c <USART2_RX_Callback+0x68>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	701a      	strb	r2, [r3, #0]
  if(dt1>0xFF){
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <USART2_RX_Callback+0x64>)
 8000ff0:	881b      	ldrh	r3, [r3, #0]
 8000ff2:	2bff      	cmp	r3, #255	; 0xff
 8000ff4:	d90a      	bls.n	800100c <USART2_RX_Callback+0x48>
	  cmd[0]=dt1;
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <USART2_RX_Callback+0x64>)
 8000ff8:	881b      	ldrh	r3, [r3, #0]
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <USART2_RX_Callback+0x6c>)
 8000ffe:	701a      	strb	r2, [r3, #0]
	  ind = 0;
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <USART2_RX_Callback+0x70>)
 8001002:	2200      	movs	r2, #0
 8001004:	801a      	strh	r2, [r3, #0]
	  firstByteReceived=1;
 8001006:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <USART2_RX_Callback+0x74>)
 8001008:	2201      	movs	r2, #1
 800100a:	701a      	strb	r2, [r3, #0]
//  while (!LL_USART_IsActiveFlag_TXE(USART2)) {}
//  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
  }
//  cmdReceive();
  if(firstByteReceived==1){
 800100c:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <USART2_RX_Callback+0x74>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d104      	bne.n	800101e <USART2_RX_Callback+0x5a>
	  cmdReceive(dt1);
 8001014:	4b04      	ldr	r3, [pc, #16]	; (8001028 <USART2_RX_Callback+0x64>)
 8001016:	881b      	ldrh	r3, [r3, #0]
 8001018:	0018      	movs	r0, r3
 800101a:	f000 f87f 	bl	800111c <cmdReceive>
  }
}
 800101e:	46c0      	nop			; (mov r8, r8)
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40004400 	.word	0x40004400
 8001028:	200035da 	.word	0x200035da
 800102c:	20003160 	.word	0x20003160
 8001030:	200055e0 	.word	0x200055e0
 8001034:	20003162 	.word	0x20003162
 8001038:	20003161 	.word	0x20003161

0800103c <HAL_SPI_RxHalfCpltCallback>:
//====================================================================================================================
void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi2)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  	GPIOA->ODR |= 1 << 11;	//set test 1
 8001044:	23a0      	movs	r3, #160	; 0xa0
 8001046:	05db      	lsls	r3, r3, #23
 8001048:	695a      	ldr	r2, [r3, #20]
 800104a:	23a0      	movs	r3, #160	; 0xa0
 800104c:	05db      	lsls	r3, r3, #23
 800104e:	2180      	movs	r1, #128	; 0x80
 8001050:	0109      	lsls	r1, r1, #4
 8001052:	430a      	orrs	r2, r1
 8001054:	615a      	str	r2, [r3, #20]
  	GPIOA->ODR &= ~(1 << 11);	//reset test 1
 8001056:	23a0      	movs	r3, #160	; 0xa0
 8001058:	05db      	lsls	r3, r3, #23
 800105a:	695a      	ldr	r2, [r3, #20]
 800105c:	23a0      	movs	r3, #160	; 0xa0
 800105e:	05db      	lsls	r3, r3, #23
 8001060:	490e      	ldr	r1, [pc, #56]	; (800109c <HAL_SPI_RxHalfCpltCallback+0x60>)
 8001062:	400a      	ands	r2, r1
 8001064:	615a      	str	r2, [r3, #20]
  	GPIOA->ODR &= ~(1 << 6);	//reset cs
 8001066:	23a0      	movs	r3, #160	; 0xa0
 8001068:	05db      	lsls	r3, r3, #23
 800106a:	695a      	ldr	r2, [r3, #20]
 800106c:	23a0      	movs	r3, #160	; 0xa0
 800106e:	05db      	lsls	r3, r3, #23
 8001070:	2140      	movs	r1, #64	; 0x40
 8001072:	438a      	bics	r2, r1
 8001074:	615a      	str	r2, [r3, #20]
  		GPIOA->ODR |= 1 << 7;	// reset dc
 8001076:	23a0      	movs	r3, #160	; 0xa0
 8001078:	05db      	lsls	r3, r3, #23
 800107a:	695a      	ldr	r2, [r3, #20]
 800107c:	23a0      	movs	r3, #160	; 0xa0
 800107e:	05db      	lsls	r3, r3, #23
 8001080:	2180      	movs	r1, #128	; 0x80
 8001082:	430a      	orrs	r2, r1
 8001084:	615a      	str	r2, [r3, #20]
  		HAL_USART_Transmit_DMA(&husart3, MEM_Buffer,len);
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <HAL_SPI_RxHalfCpltCallback+0x64>)
 8001088:	881a      	ldrh	r2, [r3, #0]
 800108a:	4906      	ldr	r1, [pc, #24]	; (80010a4 <HAL_SPI_RxHalfCpltCallback+0x68>)
 800108c:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <HAL_SPI_RxHalfCpltCallback+0x6c>)
 800108e:	0018      	movs	r0, r3
 8001090:	f008 f916 	bl	80092c0 <HAL_USART_Transmit_DMA>

}
 8001094:	46c0      	nop			; (mov r8, r8)
 8001096:	46bd      	mov	sp, r7
 8001098:	b002      	add	sp, #8
 800109a:	bd80      	pop	{r7, pc}
 800109c:	fffff7ff 	.word	0xfffff7ff
 80010a0:	200035d8 	.word	0x200035d8
 80010a4:	200035e0 	.word	0x200035e0
 80010a8:	20003390 	.word	0x20003390

080010ac <HAL_SPI_RxCpltCallback>:
//==========================================================
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi2)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  	GPIOC->ODR |= 1 << 15; // set cs
 80010b4:	4b05      	ldr	r3, [pc, #20]	; (80010cc <HAL_SPI_RxCpltCallback+0x20>)
 80010b6:	695a      	ldr	r2, [r3, #20]
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <HAL_SPI_RxCpltCallback+0x20>)
 80010ba:	2180      	movs	r1, #128	; 0x80
 80010bc:	0209      	lsls	r1, r1, #8
 80010be:	430a      	orrs	r2, r1
 80010c0:	615a      	str	r2, [r3, #20]
}
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	46bd      	mov	sp, r7
 80010c6:	b002      	add	sp, #8
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	50000800 	.word	0x50000800

080010d0 <HAL_USART_TxCpltCallback>:
//==============================================================
void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart3)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	GPIOA->ODR &= ~(1 << 7);	//reset dc
 80010d8:	23a0      	movs	r3, #160	; 0xa0
 80010da:	05db      	lsls	r3, r3, #23
 80010dc:	695a      	ldr	r2, [r3, #20]
 80010de:	23a0      	movs	r3, #160	; 0xa0
 80010e0:	05db      	lsls	r3, r3, #23
 80010e2:	2180      	movs	r1, #128	; 0x80
 80010e4:	438a      	bics	r2, r1
 80010e6:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= 1 << 6;	//set cs
 80010e8:	23a0      	movs	r3, #160	; 0xa0
 80010ea:	05db      	lsls	r3, r3, #23
 80010ec:	695a      	ldr	r2, [r3, #20]
 80010ee:	23a0      	movs	r3, #160	; 0xa0
 80010f0:	05db      	lsls	r3, r3, #23
 80010f2:	2140      	movs	r1, #64	; 0x40
 80010f4:	430a      	orrs	r2, r1
 80010f6:	615a      	str	r2, [r3, #20]

	GPIOC->ODR |= 1 << 6;	//set BF
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_USART_TxCpltCallback+0x44>)
 80010fa:	695a      	ldr	r2, [r3, #20]
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <HAL_USART_TxCpltCallback+0x44>)
 80010fe:	2140      	movs	r1, #64	; 0x40
 8001100:	430a      	orrs	r2, r1
 8001102:	615a      	str	r2, [r3, #20]
	cmd2Execute=0;
 8001104:	4b04      	ldr	r3, [pc, #16]	; (8001118 <HAL_USART_TxCpltCallback+0x48>)
 8001106:	2200      	movs	r2, #0
 8001108:	701a      	strb	r2, [r3, #0]
}
 800110a:	46c0      	nop			; (mov r8, r8)
 800110c:	46bd      	mov	sp, r7
 800110e:	b002      	add	sp, #8
 8001110:	bd80      	pop	{r7, pc}
 8001112:	46c0      	nop			; (mov r8, r8)
 8001114:	50000800 	.word	0x50000800
 8001118:	2000345a 	.word	0x2000345a

0800111c <cmdReceive>:
//==============================================================
	void cmdReceive (uint16_t dt1)
	{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	0002      	movs	r2, r0
 8001124:	1dbb      	adds	r3, r7, #6
 8001126:	801a      	strh	r2, [r3, #0]
//	  uint8_t inputCS=0;
	  uint8_t i=0;
 8001128:	230f      	movs	r3, #15
 800112a:	18fb      	adds	r3, r7, r3
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
	  while (!ByteReceived) {}
 8001130:	46c0      	nop			; (mov r8, r8)
 8001132:	4b2b      	ldr	r3, [pc, #172]	; (80011e0 <cmdReceive+0xc4>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d0fb      	beq.n	8001132 <cmdReceive+0x16>
	  ByteReceived=0;
 800113a:	4b29      	ldr	r3, [pc, #164]	; (80011e0 <cmdReceive+0xc4>)
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]
	  cmd[ind] = dt1;
 8001140:	4b28      	ldr	r3, [pc, #160]	; (80011e4 <cmdReceive+0xc8>)
 8001142:	881b      	ldrh	r3, [r3, #0]
 8001144:	001a      	movs	r2, r3
 8001146:	1dbb      	adds	r3, r7, #6
 8001148:	881b      	ldrh	r3, [r3, #0]
 800114a:	b2d9      	uxtb	r1, r3
 800114c:	4b26      	ldr	r3, [pc, #152]	; (80011e8 <cmdReceive+0xcc>)
 800114e:	5499      	strb	r1, [r3, r2]
	  ind++;
 8001150:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <cmdReceive+0xc8>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	3301      	adds	r3, #1
 8001156:	b29a      	uxth	r2, r3
 8001158:	4b22      	ldr	r3, [pc, #136]	; (80011e4 <cmdReceive+0xc8>)
 800115a:	801a      	strh	r2, [r3, #0]
	  if(ind>=1){
 800115c:	4b21      	ldr	r3, [pc, #132]	; (80011e4 <cmdReceive+0xc8>)
 800115e:	881b      	ldrh	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d033      	beq.n	80011cc <cmdReceive+0xb0>
//		  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
		  if(ind>cmd[1]+1){
 8001164:	4b1f      	ldr	r3, [pc, #124]	; (80011e4 <cmdReceive+0xc8>)
 8001166:	881b      	ldrh	r3, [r3, #0]
 8001168:	001a      	movs	r2, r3
 800116a:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <cmdReceive+0xcc>)
 800116c:	785b      	ldrb	r3, [r3, #1]
 800116e:	3301      	adds	r3, #1
 8001170:	429a      	cmp	r2, r3
 8001172:	dd2b      	ble.n	80011cc <cmdReceive+0xb0>
//			  LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 for(i=0;i<(cmd[1]+2);i++){
 8001174:	230f      	movs	r3, #15
 8001176:	18fb      	adds	r3, r7, r3
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
 800117c:	e00f      	b.n	800119e <cmdReceive+0x82>
				 inputCS+=cmd[i];
 800117e:	210f      	movs	r1, #15
 8001180:	187b      	adds	r3, r7, r1
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	4a18      	ldr	r2, [pc, #96]	; (80011e8 <cmdReceive+0xcc>)
 8001186:	5cd2      	ldrb	r2, [r2, r3]
 8001188:	4b18      	ldr	r3, [pc, #96]	; (80011ec <cmdReceive+0xd0>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	18d3      	adds	r3, r2, r3
 800118e:	b2da      	uxtb	r2, r3
 8001190:	4b16      	ldr	r3, [pc, #88]	; (80011ec <cmdReceive+0xd0>)
 8001192:	701a      	strb	r2, [r3, #0]
			 for(i=0;i<(cmd[1]+2);i++){
 8001194:	187b      	adds	r3, r7, r1
 8001196:	781a      	ldrb	r2, [r3, #0]
 8001198:	187b      	adds	r3, r7, r1
 800119a:	3201      	adds	r2, #1
 800119c:	701a      	strb	r2, [r3, #0]
 800119e:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <cmdReceive+0xcc>)
 80011a0:	785b      	ldrb	r3, [r3, #1]
 80011a2:	1c5a      	adds	r2, r3, #1
 80011a4:	210f      	movs	r1, #15
 80011a6:	187b      	adds	r3, r7, r1
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	dae7      	bge.n	800117e <cmdReceive+0x62>
			 }
			 if((inputCS==0)&&(i==cmd[1]+2)){
 80011ae:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <cmdReceive+0xd0>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d10a      	bne.n	80011cc <cmdReceive+0xb0>
 80011b6:	187b      	adds	r3, r7, r1
 80011b8:	781a      	ldrb	r2, [r3, #0]
 80011ba:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <cmdReceive+0xcc>)
 80011bc:	785b      	ldrb	r3, [r3, #1]
 80011be:	3302      	adds	r3, #2
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d103      	bne.n	80011cc <cmdReceive+0xb0>
//			 	LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 	answer2CPU(cmd);
 80011c4:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <cmdReceive+0xcc>)
 80011c6:	0018      	movs	r0, r3
 80011c8:	f000 fa5e 	bl	8001688 <answer2CPU>
			 }
		  }
	  }
//	  ind = 0;
	  USART2->ICR|=USART_ICR_ORECF;
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <cmdReceive+0xd4>)
 80011ce:	6a1a      	ldr	r2, [r3, #32]
 80011d0:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <cmdReceive+0xd4>)
 80011d2:	2108      	movs	r1, #8
 80011d4:	430a      	orrs	r2, r1
 80011d6:	621a      	str	r2, [r3, #32]
	}
 80011d8:	46c0      	nop			; (mov r8, r8)
 80011da:	46bd      	mov	sp, r7
 80011dc:	b004      	add	sp, #16
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20003160 	.word	0x20003160
 80011e4:	20003162 	.word	0x20003162
 80011e8:	200055e0 	.word	0x200055e0
 80011ec:	20003164 	.word	0x20003164
 80011f0:	40004400 	.word	0x40004400

080011f4 <USART_AS_SPI_sendCMD>:
	void USART_AS_SPI_sendCMD(uint8_t byte) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	0002      	movs	r2, r0
 80011fc:	1dfb      	adds	r3, r7, #7
 80011fe:	701a      	strb	r2, [r3, #0]
			HAL_USART_Transmit(&husart3, (uint8_t*)&byte, 1, 10);
 8001200:	1df9      	adds	r1, r7, #7
 8001202:	4804      	ldr	r0, [pc, #16]	; (8001214 <USART_AS_SPI_sendCMD+0x20>)
 8001204:	230a      	movs	r3, #10
 8001206:	2201      	movs	r2, #1
 8001208:	f007 ff9c 	bl	8009144 <HAL_USART_Transmit>
		}
 800120c:	46c0      	nop			; (mov r8, r8)
 800120e:	46bd      	mov	sp, r7
 8001210:	b002      	add	sp, #8
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20003390 	.word	0x20003390

08001218 <weoInit>:
	void USART_AS_SPI_sendDAT(uint8_t byte) //(Without CS and D/C)
	{
		HAL_USART_Transmit(&husart3, (uint8_t*) &byte, 1, 10);
	}
	void weoInit(void) {
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0

		USART3->CR1 &= ~(USART_CR1_UE);
 800121c:	4b32      	ldr	r3, [pc, #200]	; (80012e8 <weoInit+0xd0>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4b31      	ldr	r3, [pc, #196]	; (80012e8 <weoInit+0xd0>)
 8001222:	2101      	movs	r1, #1
 8001224:	438a      	bics	r2, r1
 8001226:	601a      	str	r2, [r3, #0]
		USART3->CR2 |= USART_CR2_MSBFIRST;
 8001228:	4b2f      	ldr	r3, [pc, #188]	; (80012e8 <weoInit+0xd0>)
 800122a:	685a      	ldr	r2, [r3, #4]
 800122c:	4b2e      	ldr	r3, [pc, #184]	; (80012e8 <weoInit+0xd0>)
 800122e:	2180      	movs	r1, #128	; 0x80
 8001230:	0309      	lsls	r1, r1, #12
 8001232:	430a      	orrs	r2, r1
 8001234:	605a      	str	r2, [r3, #4]
		USART3->CR1 |= USART_CR1_UE;
 8001236:	4b2c      	ldr	r3, [pc, #176]	; (80012e8 <weoInit+0xd0>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	4b2b      	ldr	r3, [pc, #172]	; (80012e8 <weoInit+0xd0>)
 800123c:	2101      	movs	r1, #1
 800123e:	430a      	orrs	r2, r1
 8001240:	601a      	str	r2, [r3, #0]

		HAL_Delay(1);
 8001242:	2001      	movs	r0, #1
 8001244:	f001 ff5e 	bl	8003104 <HAL_Delay>
		HAL_Delay(1);
 8001248:	2001      	movs	r0, #1
 800124a:	f001 ff5b 	bl	8003104 <HAL_Delay>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800124e:	4b27      	ldr	r3, [pc, #156]	; (80012ec <weoInit+0xd4>)
 8001250:	2100      	movs	r1, #0
 8001252:	0018      	movs	r0, r3
 8001254:	f006 fec2 	bl	8007fdc <HAL_TIM_PWM_Start>
		HAL_Delay(1);
 8001258:	2001      	movs	r0, #1
 800125a:	f001 ff53 	bl	8003104 <HAL_Delay>

		GPIOA->ODR &= ~(1 << 6);	//reset cs
 800125e:	23a0      	movs	r3, #160	; 0xa0
 8001260:	05db      	lsls	r3, r3, #23
 8001262:	695a      	ldr	r2, [r3, #20]
 8001264:	23a0      	movs	r3, #160	; 0xa0
 8001266:	05db      	lsls	r3, r3, #23
 8001268:	2140      	movs	r1, #64	; 0x40
 800126a:	438a      	bics	r2, r1
 800126c:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1 << 7);	// reset dc
 800126e:	23a0      	movs	r3, #160	; 0xa0
 8001270:	05db      	lsls	r3, r3, #23
 8001272:	695a      	ldr	r2, [r3, #20]
 8001274:	23a0      	movs	r3, #160	; 0xa0
 8001276:	05db      	lsls	r3, r3, #23
 8001278:	2180      	movs	r1, #128	; 0x80
 800127a:	438a      	bics	r2, r1
 800127c:	615a      	str	r2, [r3, #20]
		USART_AS_SPI_sendCMD(0xAF);
 800127e:	20af      	movs	r0, #175	; 0xaf
 8001280:	f7ff ffb8 	bl	80011f4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA0);	//Set Re-map
 8001284:	20a0      	movs	r0, #160	; 0xa0
 8001286:	f7ff ffb5 	bl	80011f4 <USART_AS_SPI_sendCMD>
//		USART_AS_SPI_sendCMD(0x54);
//		USART_AS_SPI_sendCMD(0b00010100);
		USART_AS_SPI_sendCMD(0x51); //	0x51 is a proper remap!
 800128a:	2051      	movs	r0, #81	; 0x51
 800128c:	f7ff ffb2 	bl	80011f4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 8001290:	2081      	movs	r0, #129	; 0x81
 8001292:	f7ff ffaf 	bl	80011f4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xFF);
 8001296:	20ff      	movs	r0, #255	; 0xff
 8001298:	f7ff ffac 	bl	80011f4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA1);	//Set Display Start Line
 800129c:	20a1      	movs	r0, #161	; 0xa1
 800129e:	f7ff ffa9 	bl	80011f4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 80012a2:	2000      	movs	r0, #0
 80012a4:	f7ff ffa6 	bl	80011f4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA2);	//Set Display Offset
 80012a8:	20a2      	movs	r0, #162	; 0xa2
 80012aa:	f7ff ffa3 	bl	80011f4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 80012ae:	2000      	movs	r0, #0
 80012b0:	f7ff ffa0 	bl	80011f4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA8);  // Select Multiplex Ratio
 80012b4:	20a8      	movs	r0, #168	; 0xa8
 80012b6:	f7ff ff9d 	bl	80011f4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x7F); // Default => 0x3F (1/64 Duty)	0x1F(1/32 Duty)
 80012ba:	207f      	movs	r0, #127	; 0x7f
 80012bc:	f7ff ff9a 	bl	80011f4 <USART_AS_SPI_sendCMD>
		GPIOA->ODR |= 1 << 7;	//set dc
 80012c0:	23a0      	movs	r3, #160	; 0xa0
 80012c2:	05db      	lsls	r3, r3, #23
 80012c4:	695a      	ldr	r2, [r3, #20]
 80012c6:	23a0      	movs	r3, #160	; 0xa0
 80012c8:	05db      	lsls	r3, r3, #23
 80012ca:	2180      	movs	r1, #128	; 0x80
 80012cc:	430a      	orrs	r2, r1
 80012ce:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= 1 << 6;	//set cs
 80012d0:	23a0      	movs	r3, #160	; 0xa0
 80012d2:	05db      	lsls	r3, r3, #23
 80012d4:	695a      	ldr	r2, [r3, #20]
 80012d6:	23a0      	movs	r3, #160	; 0xa0
 80012d8:	05db      	lsls	r3, r3, #23
 80012da:	2140      	movs	r1, #64	; 0x40
 80012dc:	430a      	orrs	r2, r1
 80012de:	615a      	str	r2, [r3, #20]
		//=======================================================================================================
	}
 80012e0:	46c0      	nop			; (mov r8, r8)
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	46c0      	nop			; (mov r8, r8)
 80012e8:	40004800 	.word	0x40004800
 80012ec:	20003404 	.word	0x20003404

080012f0 <weoClear>:
	void weoClear(void) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
		uint16_t i;

					GPIOA->ODR &= ~(1 << 6);	//reset cs
 80012f6:	23a0      	movs	r3, #160	; 0xa0
 80012f8:	05db      	lsls	r3, r3, #23
 80012fa:	695a      	ldr	r2, [r3, #20]
 80012fc:	23a0      	movs	r3, #160	; 0xa0
 80012fe:	05db      	lsls	r3, r3, #23
 8001300:	2140      	movs	r1, #64	; 0x40
 8001302:	438a      	bics	r2, r1
 8001304:	615a      	str	r2, [r3, #20]
					GPIOA->ODR &= ~(1 << 7);	// reset dc
 8001306:	23a0      	movs	r3, #160	; 0xa0
 8001308:	05db      	lsls	r3, r3, #23
 800130a:	695a      	ldr	r2, [r3, #20]
 800130c:	23a0      	movs	r3, #160	; 0xa0
 800130e:	05db      	lsls	r3, r3, #23
 8001310:	2180      	movs	r1, #128	; 0x80
 8001312:	438a      	bics	r2, r1
 8001314:	615a      	str	r2, [r3, #20]
						USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 8001316:	2075      	movs	r0, #117	; 0x75
 8001318:	f7ff ff6c 	bl	80011f4 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 800131c:	2000      	movs	r0, #0
 800131e:	f7ff ff69 	bl	80011f4 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 8001322:	207f      	movs	r0, #127	; 0x7f
 8001324:	f7ff ff66 	bl	80011f4 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 8001328:	2015      	movs	r0, #21
 800132a:	f7ff ff63 	bl	80011f4 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 800132e:	2000      	movs	r0, #0
 8001330:	f7ff ff60 	bl	80011f4 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 8001334:	207f      	movs	r0, #127	; 0x7f
 8001336:	f7ff ff5d 	bl	80011f4 <USART_AS_SPI_sendCMD>
					GPIOA->ODR &= ~(1 << 6);	//reset cs
 800133a:	23a0      	movs	r3, #160	; 0xa0
 800133c:	05db      	lsls	r3, r3, #23
 800133e:	695a      	ldr	r2, [r3, #20]
 8001340:	23a0      	movs	r3, #160	; 0xa0
 8001342:	05db      	lsls	r3, r3, #23
 8001344:	2140      	movs	r1, #64	; 0x40
 8001346:	438a      	bics	r2, r1
 8001348:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 7;	// set dc
 800134a:	23a0      	movs	r3, #160	; 0xa0
 800134c:	05db      	lsls	r3, r3, #23
 800134e:	695a      	ldr	r2, [r3, #20]
 8001350:	23a0      	movs	r3, #160	; 0xa0
 8001352:	05db      	lsls	r3, r3, #23
 8001354:	2180      	movs	r1, #128	; 0x80
 8001356:	430a      	orrs	r2, r1
 8001358:	615a      	str	r2, [r3, #20]
					for (i = 0; i <= 8193;i++) {	//fullScreen + small reserve
 800135a:	1dbb      	adds	r3, r7, #6
 800135c:	2200      	movs	r2, #0
 800135e:	801a      	strh	r2, [r3, #0]
 8001360:	e00d      	b.n	800137e <weoClear+0x8e>
						while(!(USART3->ISR & USART_ISR_TXE)){};
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <weoClear+0xc0>)
 8001366:	69db      	ldr	r3, [r3, #28]
 8001368:	2280      	movs	r2, #128	; 0x80
 800136a:	4013      	ands	r3, r2
 800136c:	d0fa      	beq.n	8001364 <weoClear+0x74>
						USART3->TDR = (uint8_t) 0x00;
 800136e:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <weoClear+0xc0>)
 8001370:	2200      	movs	r2, #0
 8001372:	629a      	str	r2, [r3, #40]	; 0x28
					for (i = 0; i <= 8193;i++) {	//fullScreen + small reserve
 8001374:	1dbb      	adds	r3, r7, #6
 8001376:	881a      	ldrh	r2, [r3, #0]
 8001378:	1dbb      	adds	r3, r7, #6
 800137a:	3201      	adds	r2, #1
 800137c:	801a      	strh	r2, [r3, #0]
 800137e:	1dbb      	adds	r3, r7, #6
 8001380:	881b      	ldrh	r3, [r3, #0]
 8001382:	4a0c      	ldr	r2, [pc, #48]	; (80013b4 <weoClear+0xc4>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d9ec      	bls.n	8001362 <weoClear+0x72>
					}
					GPIOA->ODR &= ~(1 << 7);	//reset dc
 8001388:	23a0      	movs	r3, #160	; 0xa0
 800138a:	05db      	lsls	r3, r3, #23
 800138c:	695a      	ldr	r2, [r3, #20]
 800138e:	23a0      	movs	r3, #160	; 0xa0
 8001390:	05db      	lsls	r3, r3, #23
 8001392:	2180      	movs	r1, #128	; 0x80
 8001394:	438a      	bics	r2, r1
 8001396:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 6;	//set cs
 8001398:	23a0      	movs	r3, #160	; 0xa0
 800139a:	05db      	lsls	r3, r3, #23
 800139c:	695a      	ldr	r2, [r3, #20]
 800139e:	23a0      	movs	r3, #160	; 0xa0
 80013a0:	05db      	lsls	r3, r3, #23
 80013a2:	2140      	movs	r1, #64	; 0x40
 80013a4:	430a      	orrs	r2, r1
 80013a6:	615a      	str	r2, [r3, #20]
	}
 80013a8:	46c0      	nop			; (mov r8, r8)
 80013aa:	46bd      	mov	sp, r7
 80013ac:	b002      	add	sp, #8
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40004800 	.word	0x40004800
 80013b4:	00002001 	.word	0x00002001

080013b8 <weoDrawRectangleFilled>:
//========================================================================================================================
	void weoDrawRectangleFilled(unsigned char start_x, unsigned char start_y,
				unsigned char end_x, unsigned char end_y, unsigned char color,
				uint8_t MEM_Buffer[]) {
 80013b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	0005      	movs	r5, r0
 80013c0:	000c      	movs	r4, r1
 80013c2:	0010      	movs	r0, r2
 80013c4:	0019      	movs	r1, r3
 80013c6:	1dfb      	adds	r3, r7, #7
 80013c8:	1c2a      	adds	r2, r5, #0
 80013ca:	701a      	strb	r2, [r3, #0]
 80013cc:	1dbb      	adds	r3, r7, #6
 80013ce:	1c22      	adds	r2, r4, #0
 80013d0:	701a      	strb	r2, [r3, #0]
 80013d2:	1d7b      	adds	r3, r7, #5
 80013d4:	1c02      	adds	r2, r0, #0
 80013d6:	701a      	strb	r2, [r3, #0]
 80013d8:	1d3b      	adds	r3, r7, #4
 80013da:	1c0a      	adds	r2, r1, #0
 80013dc:	701a      	strb	r2, [r3, #0]
			uint16_t i = 0;
 80013de:	240e      	movs	r4, #14
 80013e0:	193b      	adds	r3, r7, r4
 80013e2:	2200      	movs	r2, #0
 80013e4:	801a      	strh	r2, [r3, #0]
			uint8_t start_x_New,start_y_New,end_x_New,end_y_New;
			if (start_x > OLED_DIM_WIDTH || start_y > OLED_DIM_HEIGHT
 80013e6:	1dfb      	adds	r3, r7, #7
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	b25b      	sxtb	r3, r3
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	da00      	bge.n	80013f2 <weoDrawRectangleFilled+0x3a>
 80013f0:	e0bc      	b.n	800156c <weoDrawRectangleFilled+0x1b4>
 80013f2:	1dbb      	adds	r3, r7, #6
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	b25b      	sxtb	r3, r3
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	da00      	bge.n	80013fe <weoDrawRectangleFilled+0x46>
 80013fc:	e0b6      	b.n	800156c <weoDrawRectangleFilled+0x1b4>
					|| end_x > OLED_DIM_WIDTH || end_y > OLED_DIM_HEIGHT) {
 80013fe:	1d7b      	adds	r3, r7, #5
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	b25b      	sxtb	r3, r3
 8001404:	2b00      	cmp	r3, #0
 8001406:	da00      	bge.n	800140a <weoDrawRectangleFilled+0x52>
 8001408:	e0b0      	b.n	800156c <weoDrawRectangleFilled+0x1b4>
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	b25b      	sxtb	r3, r3
 8001410:	2b00      	cmp	r3, #0
 8001412:	da00      	bge.n	8001416 <weoDrawRectangleFilled+0x5e>
 8001414:	e0aa      	b.n	800156c <weoDrawRectangleFilled+0x1b4>
				return;
			}


			start_x_New=start_x;
 8001416:	250d      	movs	r5, #13
 8001418:	197b      	adds	r3, r7, r5
 800141a:	1dfa      	adds	r2, r7, #7
 800141c:	7812      	ldrb	r2, [r2, #0]
 800141e:	701a      	strb	r2, [r3, #0]
			start_y_New=0x7F-end_y;
 8001420:	260c      	movs	r6, #12
 8001422:	19bb      	adds	r3, r7, r6
 8001424:	1d3a      	adds	r2, r7, #4
 8001426:	7812      	ldrb	r2, [r2, #0]
 8001428:	217f      	movs	r1, #127	; 0x7f
 800142a:	1a8a      	subs	r2, r1, r2
 800142c:	701a      	strb	r2, [r3, #0]
			end_x_New=end_x;
 800142e:	230b      	movs	r3, #11
 8001430:	18fb      	adds	r3, r7, r3
 8001432:	1d7a      	adds	r2, r7, #5
 8001434:	7812      	ldrb	r2, [r2, #0]
 8001436:	701a      	strb	r2, [r3, #0]
			end_y_New=0x7F-start_y;
 8001438:	220a      	movs	r2, #10
 800143a:	18bb      	adds	r3, r7, r2
 800143c:	1dba      	adds	r2, r7, #6
 800143e:	7812      	ldrb	r2, [r2, #0]
 8001440:	217f      	movs	r1, #127	; 0x7f
 8001442:	1a8a      	subs	r2, r1, r2
 8001444:	701a      	strb	r2, [r3, #0]

			GPIOA->ODR &= ~(1 << 6);	//reset cs
 8001446:	23a0      	movs	r3, #160	; 0xa0
 8001448:	05db      	lsls	r3, r3, #23
 800144a:	695a      	ldr	r2, [r3, #20]
 800144c:	23a0      	movs	r3, #160	; 0xa0
 800144e:	05db      	lsls	r3, r3, #23
 8001450:	2140      	movs	r1, #64	; 0x40
 8001452:	438a      	bics	r2, r1
 8001454:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 8001456:	23a0      	movs	r3, #160	; 0xa0
 8001458:	05db      	lsls	r3, r3, #23
 800145a:	695a      	ldr	r2, [r3, #20]
 800145c:	23a0      	movs	r3, #160	; 0xa0
 800145e:	05db      	lsls	r3, r3, #23
 8001460:	2180      	movs	r1, #128	; 0x80
 8001462:	438a      	bics	r2, r1
 8001464:	615a      	str	r2, [r3, #20]
					USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 8001466:	2075      	movs	r0, #117	; 0x75
 8001468:	f7ff fec4 	bl	80011f4 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_x_New/1);
 800146c:	197b      	adds	r3, r7, r5
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	0018      	movs	r0, r3
 8001472:	f7ff febf 	bl	80011f4 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_x_New/1);
 8001476:	230b      	movs	r3, #11
 8001478:	18fb      	adds	r3, r7, r3
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	0018      	movs	r0, r3
 800147e:	f7ff feb9 	bl	80011f4 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 8001482:	2015      	movs	r0, #21
 8001484:	f7ff feb6 	bl	80011f4 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_y_New/2);
 8001488:	19bb      	adds	r3, r7, r6
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	085b      	lsrs	r3, r3, #1
 800148e:	b2db      	uxtb	r3, r3
 8001490:	0018      	movs	r0, r3
 8001492:	f7ff feaf 	bl	80011f4 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_y_New/2);
 8001496:	220a      	movs	r2, #10
 8001498:	18bb      	adds	r3, r7, r2
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	085b      	lsrs	r3, r3, #1
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	0018      	movs	r0, r3
 80014a2:	f7ff fea7 	bl	80011f4 <USART_AS_SPI_sendCMD>
			GPIOA->ODR |= 1 << 7;	//set dc
 80014a6:	23a0      	movs	r3, #160	; 0xa0
 80014a8:	05db      	lsls	r3, r3, #23
 80014aa:	695a      	ldr	r2, [r3, #20]
 80014ac:	23a0      	movs	r3, #160	; 0xa0
 80014ae:	05db      	lsls	r3, r3, #23
 80014b0:	2180      	movs	r1, #128	; 0x80
 80014b2:	430a      	orrs	r2, r1
 80014b4:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 80014b6:	23a0      	movs	r3, #160	; 0xa0
 80014b8:	05db      	lsls	r3, r3, #23
 80014ba:	695a      	ldr	r2, [r3, #20]
 80014bc:	23a0      	movs	r3, #160	; 0xa0
 80014be:	05db      	lsls	r3, r3, #23
 80014c0:	2140      	movs	r1, #64	; 0x40
 80014c2:	430a      	orrs	r2, r1
 80014c4:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 6);	//reset cs
 80014c6:	23a0      	movs	r3, #160	; 0xa0
 80014c8:	05db      	lsls	r3, r3, #23
 80014ca:	695a      	ldr	r2, [r3, #20]
 80014cc:	23a0      	movs	r3, #160	; 0xa0
 80014ce:	05db      	lsls	r3, r3, #23
 80014d0:	2140      	movs	r1, #64	; 0x40
 80014d2:	438a      	bics	r2, r1
 80014d4:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 7;	// set dc
 80014d6:	23a0      	movs	r3, #160	; 0xa0
 80014d8:	05db      	lsls	r3, r3, #23
 80014da:	695a      	ldr	r2, [r3, #20]
 80014dc:	23a0      	movs	r3, #160	; 0xa0
 80014de:	05db      	lsls	r3, r3, #23
 80014e0:	2180      	movs	r1, #128	; 0x80
 80014e2:	430a      	orrs	r2, r1
 80014e4:	615a      	str	r2, [r3, #20]

			for (i = 0; i <= ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New/2 - start_y_New /2 + 1));i++) {
 80014e6:	193b      	adds	r3, r7, r4
 80014e8:	2200      	movs	r2, #0
 80014ea:	801a      	strh	r2, [r3, #0]
 80014ec:	e012      	b.n	8001514 <weoDrawRectangleFilled+0x15c>
				while(!(USART3->ISR & USART_ISR_TXE)){};
 80014ee:	46c0      	nop			; (mov r8, r8)
 80014f0:	4b20      	ldr	r3, [pc, #128]	; (8001574 <weoDrawRectangleFilled+0x1bc>)
 80014f2:	69db      	ldr	r3, [r3, #28]
 80014f4:	2280      	movs	r2, #128	; 0x80
 80014f6:	4013      	ands	r3, r2
 80014f8:	d0fa      	beq.n	80014f0 <weoDrawRectangleFilled+0x138>
				USART3->TDR =MEM_Buffer[i];
 80014fa:	210e      	movs	r1, #14
 80014fc:	187b      	adds	r3, r7, r1
 80014fe:	881b      	ldrh	r3, [r3, #0]
 8001500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001502:	18d3      	adds	r3, r2, r3
 8001504:	781a      	ldrb	r2, [r3, #0]
 8001506:	4b1b      	ldr	r3, [pc, #108]	; (8001574 <weoDrawRectangleFilled+0x1bc>)
 8001508:	629a      	str	r2, [r3, #40]	; 0x28
			for (i = 0; i <= ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New/2 - start_y_New /2 + 1));i++) {
 800150a:	187b      	adds	r3, r7, r1
 800150c:	881a      	ldrh	r2, [r3, #0]
 800150e:	187b      	adds	r3, r7, r1
 8001510:	3201      	adds	r2, #1
 8001512:	801a      	strh	r2, [r3, #0]
 8001514:	230e      	movs	r3, #14
 8001516:	18fb      	adds	r3, r7, r3
 8001518:	881a      	ldrh	r2, [r3, #0]
 800151a:	230b      	movs	r3, #11
 800151c:	18fb      	adds	r3, r7, r3
 800151e:	7819      	ldrb	r1, [r3, #0]
 8001520:	230d      	movs	r3, #13
 8001522:	18fb      	adds	r3, r7, r3
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	1acb      	subs	r3, r1, r3
 8001528:	3301      	adds	r3, #1
 800152a:	210a      	movs	r1, #10
 800152c:	1879      	adds	r1, r7, r1
 800152e:	7809      	ldrb	r1, [r1, #0]
 8001530:	0849      	lsrs	r1, r1, #1
 8001532:	b2c9      	uxtb	r1, r1
 8001534:	0008      	movs	r0, r1
 8001536:	210c      	movs	r1, #12
 8001538:	1879      	adds	r1, r7, r1
 800153a:	7809      	ldrb	r1, [r1, #0]
 800153c:	0849      	lsrs	r1, r1, #1
 800153e:	b2c9      	uxtb	r1, r1
 8001540:	1a41      	subs	r1, r0, r1
 8001542:	3101      	adds	r1, #1
 8001544:	434b      	muls	r3, r1
 8001546:	429a      	cmp	r2, r3
 8001548:	ddd1      	ble.n	80014ee <weoDrawRectangleFilled+0x136>
			}
			GPIOA->ODR &= ~(1 << 7);	//reset dc
 800154a:	23a0      	movs	r3, #160	; 0xa0
 800154c:	05db      	lsls	r3, r3, #23
 800154e:	695a      	ldr	r2, [r3, #20]
 8001550:	23a0      	movs	r3, #160	; 0xa0
 8001552:	05db      	lsls	r3, r3, #23
 8001554:	2180      	movs	r1, #128	; 0x80
 8001556:	438a      	bics	r2, r1
 8001558:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 800155a:	23a0      	movs	r3, #160	; 0xa0
 800155c:	05db      	lsls	r3, r3, #23
 800155e:	695a      	ldr	r2, [r3, #20]
 8001560:	23a0      	movs	r3, #160	; 0xa0
 8001562:	05db      	lsls	r3, r3, #23
 8001564:	2140      	movs	r1, #64	; 0x40
 8001566:	430a      	orrs	r2, r1
 8001568:	615a      	str	r2, [r3, #20]
 800156a:	e000      	b.n	800156e <weoDrawRectangleFilled+0x1b6>
				return;
 800156c:	46c0      	nop			; (mov r8, r8)
		}
 800156e:	46bd      	mov	sp, r7
 8001570:	b005      	add	sp, #20
 8001572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001574:	40004800 	.word	0x40004800

08001578 <weoDrawRectangleInit>:
//========================================================================================================================
	void weoDrawRectangleInit(unsigned char start_x, unsigned char start_y,
				unsigned char end_x, unsigned char end_y) {
 8001578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	0005      	movs	r5, r0
 8001580:	000c      	movs	r4, r1
 8001582:	0010      	movs	r0, r2
 8001584:	0019      	movs	r1, r3
 8001586:	1dfb      	adds	r3, r7, #7
 8001588:	1c2a      	adds	r2, r5, #0
 800158a:	701a      	strb	r2, [r3, #0]
 800158c:	1dbb      	adds	r3, r7, #6
 800158e:	1c22      	adds	r2, r4, #0
 8001590:	701a      	strb	r2, [r3, #0]
 8001592:	1d7b      	adds	r3, r7, #5
 8001594:	1c02      	adds	r2, r0, #0
 8001596:	701a      	strb	r2, [r3, #0]
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	1c0a      	adds	r2, r1, #0
 800159c:	701a      	strb	r2, [r3, #0]
			uint16_t i = 0;
 800159e:	230e      	movs	r3, #14
 80015a0:	18fb      	adds	r3, r7, r3
 80015a2:	2200      	movs	r2, #0
 80015a4:	801a      	strh	r2, [r3, #0]
			uint8_t start_x_New,start_y_New,end_x_New,end_y_New;
			if (start_x > OLED_DIM_WIDTH || start_y > OLED_DIM_HEIGHT
 80015a6:	1dfb      	adds	r3, r7, #7
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	b25b      	sxtb	r3, r3
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	db66      	blt.n	800167e <weoDrawRectangleInit+0x106>
 80015b0:	1dbb      	adds	r3, r7, #6
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	b25b      	sxtb	r3, r3
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	db61      	blt.n	800167e <weoDrawRectangleInit+0x106>
					|| end_x > OLED_DIM_WIDTH || end_y > OLED_DIM_HEIGHT) {
 80015ba:	1d7b      	adds	r3, r7, #5
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	b25b      	sxtb	r3, r3
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	db5c      	blt.n	800167e <weoDrawRectangleInit+0x106>
 80015c4:	1d3b      	adds	r3, r7, #4
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	b25b      	sxtb	r3, r3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	db57      	blt.n	800167e <weoDrawRectangleInit+0x106>
				return;
			}
			start_x_New=start_x;
 80015ce:	240d      	movs	r4, #13
 80015d0:	193b      	adds	r3, r7, r4
 80015d2:	1dfa      	adds	r2, r7, #7
 80015d4:	7812      	ldrb	r2, [r2, #0]
 80015d6:	701a      	strb	r2, [r3, #0]
			start_y_New=0x7F-end_y;
 80015d8:	250c      	movs	r5, #12
 80015da:	197b      	adds	r3, r7, r5
 80015dc:	1d3a      	adds	r2, r7, #4
 80015de:	7812      	ldrb	r2, [r2, #0]
 80015e0:	217f      	movs	r1, #127	; 0x7f
 80015e2:	1a8a      	subs	r2, r1, r2
 80015e4:	701a      	strb	r2, [r3, #0]
			end_x_New=end_x;
 80015e6:	260b      	movs	r6, #11
 80015e8:	19bb      	adds	r3, r7, r6
 80015ea:	1d7a      	adds	r2, r7, #5
 80015ec:	7812      	ldrb	r2, [r2, #0]
 80015ee:	701a      	strb	r2, [r3, #0]
			end_y_New=0x7F-start_y;
 80015f0:	230a      	movs	r3, #10
 80015f2:	18fb      	adds	r3, r7, r3
 80015f4:	1dba      	adds	r2, r7, #6
 80015f6:	7812      	ldrb	r2, [r2, #0]
 80015f8:	217f      	movs	r1, #127	; 0x7f
 80015fa:	1a8a      	subs	r2, r1, r2
 80015fc:	701a      	strb	r2, [r3, #0]

			GPIOA->ODR &= ~(1 << 6);	//reset cs
 80015fe:	23a0      	movs	r3, #160	; 0xa0
 8001600:	05db      	lsls	r3, r3, #23
 8001602:	695a      	ldr	r2, [r3, #20]
 8001604:	23a0      	movs	r3, #160	; 0xa0
 8001606:	05db      	lsls	r3, r3, #23
 8001608:	2140      	movs	r1, #64	; 0x40
 800160a:	438a      	bics	r2, r1
 800160c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 800160e:	23a0      	movs	r3, #160	; 0xa0
 8001610:	05db      	lsls	r3, r3, #23
 8001612:	695a      	ldr	r2, [r3, #20]
 8001614:	23a0      	movs	r3, #160	; 0xa0
 8001616:	05db      	lsls	r3, r3, #23
 8001618:	2180      	movs	r1, #128	; 0x80
 800161a:	438a      	bics	r2, r1
 800161c:	615a      	str	r2, [r3, #20]
					USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 800161e:	2075      	movs	r0, #117	; 0x75
 8001620:	f7ff fde8 	bl	80011f4 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_x_New/1);
 8001624:	193b      	adds	r3, r7, r4
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	0018      	movs	r0, r3
 800162a:	f7ff fde3 	bl	80011f4 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_x_New/1);
 800162e:	19bb      	adds	r3, r7, r6
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	0018      	movs	r0, r3
 8001634:	f7ff fdde 	bl	80011f4 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 8001638:	2015      	movs	r0, #21
 800163a:	f7ff fddb 	bl	80011f4 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_y_New/2);
 800163e:	197b      	adds	r3, r7, r5
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	085b      	lsrs	r3, r3, #1
 8001644:	b2db      	uxtb	r3, r3
 8001646:	0018      	movs	r0, r3
 8001648:	f7ff fdd4 	bl	80011f4 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_y_New/2);
 800164c:	230a      	movs	r3, #10
 800164e:	18fb      	adds	r3, r7, r3
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	085b      	lsrs	r3, r3, #1
 8001654:	b2db      	uxtb	r3, r3
 8001656:	0018      	movs	r0, r3
 8001658:	f7ff fdcc 	bl	80011f4 <USART_AS_SPI_sendCMD>
			GPIOA->ODR |= 1 << 7;	//set dc
 800165c:	23a0      	movs	r3, #160	; 0xa0
 800165e:	05db      	lsls	r3, r3, #23
 8001660:	695a      	ldr	r2, [r3, #20]
 8001662:	23a0      	movs	r3, #160	; 0xa0
 8001664:	05db      	lsls	r3, r3, #23
 8001666:	2180      	movs	r1, #128	; 0x80
 8001668:	430a      	orrs	r2, r1
 800166a:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 800166c:	23a0      	movs	r3, #160	; 0xa0
 800166e:	05db      	lsls	r3, r3, #23
 8001670:	695a      	ldr	r2, [r3, #20]
 8001672:	23a0      	movs	r3, #160	; 0xa0
 8001674:	05db      	lsls	r3, r3, #23
 8001676:	2140      	movs	r1, #64	; 0x40
 8001678:	430a      	orrs	r2, r1
 800167a:	615a      	str	r2, [r3, #20]
 800167c:	e000      	b.n	8001680 <weoDrawRectangleInit+0x108>
				return;
 800167e:	46c0      	nop			; (mov r8, r8)
		}
 8001680:	46bd      	mov	sp, r7
 8001682:	b005      	add	sp, #20
 8001684:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001688 <answer2CPU>:
		WriteReg_I2C_SOUND(0x3F, 0x90);	//DAC powered up, Soft step 1 per Fs. (P0, R63, D7=1, D5-D4=01, D3-D2=00, D1-D0=00)
		WriteReg_I2C_SOUND(0x41, 0x00);	//DAC digital gain 0dB (P0, R65, D7-D0=00000000)
		WriteReg_I2C_SOUND(0x40, 0x04);	//DAC volume not muted. (P0, R64, D3=0, D2=1)
	}
//=============================================================================================
	uint8_t answer2CPU(uint8_t cmd[]) {
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
		uint8_t keyboard = 0xFF;
 8001690:	230f      	movs	r3, #15
 8001692:	18fb      	adds	r3, r7, r3
 8001694:	22ff      	movs	r2, #255	; 0xff
 8001696:	701a      	strb	r2, [r3, #0]
//		uint16_t ans[10];
		uint8_t i;
		uint8_t myCS = 0;					//   COMMON PART FOR EVERY COMMAND
 8001698:	230d      	movs	r3, #13
 800169a:	18fb      	adds	r3, r7, r3
 800169c:	2200      	movs	r2, #0
 800169e:	701a      	strb	r2, [r3, #0]
		uint8_t myLength;
		uint16_t ind = 0;
 80016a0:	230a      	movs	r3, #10
 80016a2:	18fb      	adds	r3, r7, r3
 80016a4:	2200      	movs	r2, #0
 80016a6:	801a      	strh	r2, [r3, #0]

		cmd2Execute=0;
 80016a8:	4bd1      	ldr	r3, [pc, #836]	; (80019f0 <answer2CPU+0x368>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	701a      	strb	r2, [r3, #0]
		if ((cmd[0] == 0x11)||(cmd[0] == 0x12)||(cmd[0] == 0x14)) {GPIOC->ODR &= ~(1 << 6);}//reset BF
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	2b11      	cmp	r3, #17
 80016b4:	d007      	beq.n	80016c6 <answer2CPU+0x3e>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b12      	cmp	r3, #18
 80016bc:	d003      	beq.n	80016c6 <answer2CPU+0x3e>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b14      	cmp	r3, #20
 80016c4:	d105      	bne.n	80016d2 <answer2CPU+0x4a>
 80016c6:	4bcb      	ldr	r3, [pc, #812]	; (80019f4 <answer2CPU+0x36c>)
 80016c8:	695a      	ldr	r2, [r3, #20]
 80016ca:	4bca      	ldr	r3, [pc, #808]	; (80019f4 <answer2CPU+0x36c>)
 80016cc:	2140      	movs	r1, #64	; 0x40
 80016ce:	438a      	bics	r2, r1
 80016d0:	615a      	str	r2, [r3, #20]
		ans[0] = cmd[0]|0x80;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2280      	movs	r2, #128	; 0x80
 80016d8:	4252      	negs	r2, r2
 80016da:	4313      	orrs	r3, r2
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	b29a      	uxth	r2, r3
 80016e0:	4bc5      	ldr	r3, [pc, #788]	; (80019f8 <answer2CPU+0x370>)
 80016e2:	801a      	strh	r2, [r3, #0]
//==================================================================================================
			if ((cmd[0] >= 0x10)&&(cmd[0] < 0x16)) { //answer is keyboard + stuff information                  0003
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b0f      	cmp	r3, #15
 80016ea:	d800      	bhi.n	80016ee <answer2CPU+0x66>
 80016ec:	e150      	b.n	8001990 <answer2CPU+0x308>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b15      	cmp	r3, #21
 80016f4:	d900      	bls.n	80016f8 <answer2CPU+0x70>
 80016f6:	e14b      	b.n	8001990 <answer2CPU+0x308>
				if ((GPIOA->IDR & (1 << 0)) == 0) {
 80016f8:	23a0      	movs	r3, #160	; 0xa0
 80016fa:	05db      	lsls	r3, r3, #23
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	2201      	movs	r2, #1
 8001700:	4013      	ands	r3, r2
 8001702:	d106      	bne.n	8001712 <answer2CPU+0x8a>
					keyboard &= 0b11111110;
 8001704:	220f      	movs	r2, #15
 8001706:	18bb      	adds	r3, r7, r2
 8001708:	18ba      	adds	r2, r7, r2
 800170a:	7812      	ldrb	r2, [r2, #0]
 800170c:	2101      	movs	r1, #1
 800170e:	438a      	bics	r2, r1
 8001710:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 1)) == 0) {
 8001712:	23a0      	movs	r3, #160	; 0xa0
 8001714:	05db      	lsls	r3, r3, #23
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	2202      	movs	r2, #2
 800171a:	4013      	ands	r3, r2
 800171c:	d106      	bne.n	800172c <answer2CPU+0xa4>
					keyboard &= 0b11111101;
 800171e:	220f      	movs	r2, #15
 8001720:	18bb      	adds	r3, r7, r2
 8001722:	18ba      	adds	r2, r7, r2
 8001724:	7812      	ldrb	r2, [r2, #0]
 8001726:	2102      	movs	r1, #2
 8001728:	438a      	bics	r2, r1
 800172a:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 4)) == 0) {
 800172c:	23a0      	movs	r3, #160	; 0xa0
 800172e:	05db      	lsls	r3, r3, #23
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	2210      	movs	r2, #16
 8001734:	4013      	ands	r3, r2
 8001736:	d106      	bne.n	8001746 <answer2CPU+0xbe>
					keyboard &= 0b11111011;
 8001738:	220f      	movs	r2, #15
 800173a:	18bb      	adds	r3, r7, r2
 800173c:	18ba      	adds	r2, r7, r2
 800173e:	7812      	ldrb	r2, [r2, #0]
 8001740:	2104      	movs	r1, #4
 8001742:	438a      	bics	r2, r1
 8001744:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 13)) == 0) {
 8001746:	23a0      	movs	r3, #160	; 0xa0
 8001748:	05db      	lsls	r3, r3, #23
 800174a:	691a      	ldr	r2, [r3, #16]
 800174c:	2380      	movs	r3, #128	; 0x80
 800174e:	019b      	lsls	r3, r3, #6
 8001750:	4013      	ands	r3, r2
 8001752:	d106      	bne.n	8001762 <answer2CPU+0xda>
					keyboard &= 0b11110111;
 8001754:	220f      	movs	r2, #15
 8001756:	18bb      	adds	r3, r7, r2
 8001758:	18ba      	adds	r2, r7, r2
 800175a:	7812      	ldrb	r2, [r2, #0]
 800175c:	2108      	movs	r1, #8
 800175e:	438a      	bics	r2, r1
 8001760:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 14)) == 0) {
 8001762:	23a0      	movs	r3, #160	; 0xa0
 8001764:	05db      	lsls	r3, r3, #23
 8001766:	691a      	ldr	r2, [r3, #16]
 8001768:	2380      	movs	r3, #128	; 0x80
 800176a:	01db      	lsls	r3, r3, #7
 800176c:	4013      	ands	r3, r2
 800176e:	d106      	bne.n	800177e <answer2CPU+0xf6>
					keyboard &= 0b11101111;
 8001770:	220f      	movs	r2, #15
 8001772:	18bb      	adds	r3, r7, r2
 8001774:	18ba      	adds	r2, r7, r2
 8001776:	7812      	ldrb	r2, [r2, #0]
 8001778:	2110      	movs	r1, #16
 800177a:	438a      	bics	r2, r1
 800177c:	701a      	strb	r2, [r3, #0]
				}

				keyboard = ~keyboard;
 800177e:	210f      	movs	r1, #15
 8001780:	187b      	adds	r3, r7, r1
 8001782:	187a      	adds	r2, r7, r1
 8001784:	7812      	ldrb	r2, [r2, #0]
 8001786:	43d2      	mvns	r2, r2
 8001788:	701a      	strb	r2, [r3, #0]
//				keyboard&=bf;
				myLength = 0x04;
 800178a:	2009      	movs	r0, #9
 800178c:	183b      	adds	r3, r7, r0
 800178e:	2204      	movs	r2, #4
 8001790:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001792:	183b      	adds	r3, r7, r0
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	b29b      	uxth	r3, r3
 8001798:	3b02      	subs	r3, #2
 800179a:	b29a      	uxth	r2, r3
 800179c:	4b96      	ldr	r3, [pc, #600]	; (80019f8 <answer2CPU+0x370>)
 800179e:	805a      	strh	r2, [r3, #2]
				ans[2] = keyboard;				//			MANAGEMENT COMMANDS
 80017a0:	187b      	adds	r3, r7, r1
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	4b94      	ldr	r3, [pc, #592]	; (80019f8 <answer2CPU+0x370>)
 80017a8:	809a      	strh	r2, [r3, #4]

				for (i = 0; i < myLength-1; i++) {
 80017aa:	230e      	movs	r3, #14
 80017ac:	18fb      	adds	r3, r7, r3
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]
 80017b2:	e011      	b.n	80017d8 <answer2CPU+0x150>
					myCS = myCS + ans[i];
 80017b4:	200e      	movs	r0, #14
 80017b6:	183b      	adds	r3, r7, r0
 80017b8:	781a      	ldrb	r2, [r3, #0]
 80017ba:	4b8f      	ldr	r3, [pc, #572]	; (80019f8 <answer2CPU+0x370>)
 80017bc:	0052      	lsls	r2, r2, #1
 80017be:	5ad3      	ldrh	r3, [r2, r3]
 80017c0:	b2d9      	uxtb	r1, r3
 80017c2:	220d      	movs	r2, #13
 80017c4:	18bb      	adds	r3, r7, r2
 80017c6:	18ba      	adds	r2, r7, r2
 80017c8:	7812      	ldrb	r2, [r2, #0]
 80017ca:	188a      	adds	r2, r1, r2
 80017cc:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 80017ce:	183b      	adds	r3, r7, r0
 80017d0:	781a      	ldrb	r2, [r3, #0]
 80017d2:	183b      	adds	r3, r7, r0
 80017d4:	3201      	adds	r2, #1
 80017d6:	701a      	strb	r2, [r3, #0]
 80017d8:	200e      	movs	r0, #14
 80017da:	183b      	adds	r3, r7, r0
 80017dc:	781a      	ldrb	r2, [r3, #0]
 80017de:	2309      	movs	r3, #9
 80017e0:	18fb      	adds	r3, r7, r3
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	3b01      	subs	r3, #1
 80017e6:	429a      	cmp	r2, r3
 80017e8:	dbe4      	blt.n	80017b4 <answer2CPU+0x12c>
				}
				myCS = 0 - myCS;
 80017ea:	210d      	movs	r1, #13
 80017ec:	187b      	adds	r3, r7, r1
 80017ee:	187a      	adds	r2, r7, r1
 80017f0:	7812      	ldrb	r2, [r2, #0]
 80017f2:	4252      	negs	r2, r2
 80017f4:	701a      	strb	r2, [r3, #0]
				ans[3] = myCS;
 80017f6:	187b      	adds	r3, r7, r1
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	4b7e      	ldr	r3, [pc, #504]	; (80019f8 <answer2CPU+0x370>)
 80017fe:	80da      	strh	r2, [r3, #6]
				i=0;
 8001800:	183b      	adds	r3, r7, r0
 8001802:	2200      	movs	r2, #0
 8001804:	701a      	strb	r2, [r3, #0]
//======================================================================================================================================
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001806:	46c0      	nop			; (mov r8, r8)
 8001808:	4b7c      	ldr	r3, [pc, #496]	; (80019fc <answer2CPU+0x374>)
 800180a:	69db      	ldr	r3, [r3, #28]
 800180c:	2280      	movs	r2, #128	; 0x80
 800180e:	4013      	ands	r3, r2
 8001810:	d0fa      	beq.n	8001808 <answer2CPU+0x180>
				USART2->TDR = ans[0]|0x0100;
 8001812:	4b79      	ldr	r3, [pc, #484]	; (80019f8 <answer2CPU+0x370>)
 8001814:	881b      	ldrh	r3, [r3, #0]
 8001816:	2280      	movs	r2, #128	; 0x80
 8001818:	0052      	lsls	r2, r2, #1
 800181a:	4313      	orrs	r3, r2
 800181c:	b29a      	uxth	r2, r3
 800181e:	4b77      	ldr	r3, [pc, #476]	; (80019fc <answer2CPU+0x374>)
 8001820:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 8001822:	230e      	movs	r3, #14
 8001824:	18fb      	adds	r3, r7, r3
 8001826:	2201      	movs	r2, #1
 8001828:	701a      	strb	r2, [r3, #0]
 800182a:	e013      	b.n	8001854 <answer2CPU+0x1cc>
				  {												//answer2cpu was given
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 800182c:	46c0      	nop			; (mov r8, r8)
 800182e:	4b73      	ldr	r3, [pc, #460]	; (80019fc <answer2CPU+0x374>)
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	2280      	movs	r2, #128	; 0x80
 8001834:	4013      	ands	r3, r2
 8001836:	d0fa      	beq.n	800182e <answer2CPU+0x1a6>
				    USART2->TDR = (uint8_t)ans[i];
 8001838:	210e      	movs	r1, #14
 800183a:	187b      	adds	r3, r7, r1
 800183c:	781a      	ldrb	r2, [r3, #0]
 800183e:	4b6e      	ldr	r3, [pc, #440]	; (80019f8 <answer2CPU+0x370>)
 8001840:	0052      	lsls	r2, r2, #1
 8001842:	5ad3      	ldrh	r3, [r2, r3]
 8001844:	b2da      	uxtb	r2, r3
 8001846:	4b6d      	ldr	r3, [pc, #436]	; (80019fc <answer2CPU+0x374>)
 8001848:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 800184a:	187b      	adds	r3, r7, r1
 800184c:	781a      	ldrb	r2, [r3, #0]
 800184e:	187b      	adds	r3, r7, r1
 8001850:	3201      	adds	r2, #1
 8001852:	701a      	strb	r2, [r3, #0]
 8001854:	230e      	movs	r3, #14
 8001856:	18fa      	adds	r2, r7, r3
 8001858:	2309      	movs	r3, #9
 800185a:	18fb      	adds	r3, r7, r3
 800185c:	7812      	ldrb	r2, [r2, #0]
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	429a      	cmp	r2, r3
 8001862:	d3e3      	bcc.n	800182c <answer2CPU+0x1a4>
				  }
//=======================================================================================================================================
				if (cmd[0] == 0x11) {//Show full screen background;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b11      	cmp	r3, #17
 800186a:	d109      	bne.n	8001880 <answer2CPU+0x1f8>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					picNum = cmd[2];
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	789a      	ldrb	r2, [r3, #2]
 8001870:	4b63      	ldr	r3, [pc, #396]	; (8001a00 <answer2CPU+0x378>)
 8001872:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x11;
 8001874:	4b5e      	ldr	r3, [pc, #376]	; (80019f0 <answer2CPU+0x368>)
 8001876:	2211      	movs	r2, #17
 8001878:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 800187a:	4b62      	ldr	r3, [pc, #392]	; (8001a04 <answer2CPU+0x37c>)
 800187c:	2200      	movs	r2, #0
 800187e:	701a      	strb	r2, [r3, #0]
				}
//=======================================================================================================================================
				if (cmd[0] == 0x12) {				//show small image
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b12      	cmp	r3, #18
 8001886:	d115      	bne.n	80018b4 <answer2CPU+0x22c>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3302      	adds	r3, #2
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	001a      	movs	r2, r3
 8001890:	4b5d      	ldr	r3, [pc, #372]	; (8001a08 <answer2CPU+0x380>)
 8001892:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3303      	adds	r3, #3
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	001a      	movs	r2, r3
 800189c:	4b5b      	ldr	r3, [pc, #364]	; (8001a0c <answer2CPU+0x384>)
 800189e:	601a      	str	r2, [r3, #0]
					picNum=cmd[4];
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	791a      	ldrb	r2, [r3, #4]
 80018a4:	4b56      	ldr	r3, [pc, #344]	; (8001a00 <answer2CPU+0x378>)
 80018a6:	701a      	strb	r2, [r3, #0]
//					weoShowSmallImage(dataASCII[i], ASCII_X, ASCII_Y);
					cmd2Execute=0x12;
 80018a8:	4b51      	ldr	r3, [pc, #324]	; (80019f0 <answer2CPU+0x368>)
 80018aa:	2212      	movs	r2, #18
 80018ac:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 80018ae:	4b55      	ldr	r3, [pc, #340]	; (8001a04 <answer2CPU+0x37c>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x13) {			//show ASCII code(s)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b13      	cmp	r3, #19
 80018ba:	d134      	bne.n	8001926 <answer2CPU+0x29e>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3302      	adds	r3, #2
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	001a      	movs	r2, r3
 80018c4:	4b50      	ldr	r3, [pc, #320]	; (8001a08 <answer2CPU+0x380>)
 80018c6:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3303      	adds	r3, #3
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	001a      	movs	r2, r3
 80018d0:	4b4e      	ldr	r3, [pc, #312]	; (8001a0c <answer2CPU+0x384>)
 80018d2:	601a      	str	r2, [r3, #0]
					strLen = cmd[1] -0x03;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3301      	adds	r3, #1
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	3b03      	subs	r3, #3
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	4b4c      	ldr	r3, [pc, #304]	; (8001a10 <answer2CPU+0x388>)
 80018e0:	701a      	strb	r2, [r3, #0]
					for (i = 0; i <strLen; i++) {
 80018e2:	230e      	movs	r3, #14
 80018e4:	18fb      	adds	r3, r7, r3
 80018e6:	2200      	movs	r2, #0
 80018e8:	701a      	strb	r2, [r3, #0]
 80018ea:	e00f      	b.n	800190c <answer2CPU+0x284>
					dataASCII[i] = cmd[i+4];
 80018ec:	200e      	movs	r0, #14
 80018ee:	183b      	adds	r3, r7, r0
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	3304      	adds	r3, #4
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	18d2      	adds	r2, r2, r3
 80018f8:	183b      	adds	r3, r7, r0
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	7811      	ldrb	r1, [r2, #0]
 80018fe:	4a45      	ldr	r2, [pc, #276]	; (8001a14 <answer2CPU+0x38c>)
 8001900:	54d1      	strb	r1, [r2, r3]
					for (i = 0; i <strLen; i++) {
 8001902:	183b      	adds	r3, r7, r0
 8001904:	781a      	ldrb	r2, [r3, #0]
 8001906:	183b      	adds	r3, r7, r0
 8001908:	3201      	adds	r2, #1
 800190a:	701a      	strb	r2, [r3, #0]
 800190c:	4b40      	ldr	r3, [pc, #256]	; (8001a10 <answer2CPU+0x388>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	220e      	movs	r2, #14
 8001912:	18ba      	adds	r2, r7, r2
 8001914:	7812      	ldrb	r2, [r2, #0]
 8001916:	429a      	cmp	r2, r3
 8001918:	d3e8      	bcc.n	80018ec <answer2CPU+0x264>
				}
					cmd2Execute=0x13;
 800191a:	4b35      	ldr	r3, [pc, #212]	; (80019f0 <answer2CPU+0x368>)
 800191c:	2213      	movs	r2, #19
 800191e:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001920:	4b38      	ldr	r3, [pc, #224]	; (8001a04 <answer2CPU+0x37c>)
 8001922:	2200      	movs	r2, #0
 8001924:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x14) {			//издать звук
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	2b14      	cmp	r3, #20
 800192c:	d10c      	bne.n	8001948 <answer2CPU+0x2c0>
					numSound = cmd[3];
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	78da      	ldrb	r2, [r3, #3]
 8001932:	4b39      	ldr	r3, [pc, #228]	; (8001a18 <answer2CPU+0x390>)
 8001934:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x14;
 8001936:	4b2e      	ldr	r3, [pc, #184]	; (80019f0 <answer2CPU+0x368>)
 8001938:	2214      	movs	r2, #20
 800193a:	701a      	strb	r2, [r3, #0]
					cmd[0]=0xFF;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	22ff      	movs	r2, #255	; 0xff
 8001940:	701a      	strb	r2, [r3, #0]
					bf4me=0x00; //reset BF flag for me
 8001942:	4b30      	ldr	r3, [pc, #192]	; (8001a04 <answer2CPU+0x37c>)
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x15) {
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b15      	cmp	r3, #21
 800194e:	d10d      	bne.n	800196c <answer2CPU+0x2e4>
					volume = cmd[2];
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	789a      	ldrb	r2, [r3, #2]
 8001954:	4b31      	ldr	r3, [pc, #196]	; (8001a1c <answer2CPU+0x394>)
 8001956:	701a      	strb	r2, [r3, #0]
					contrast = cmd[3];
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	78da      	ldrb	r2, [r3, #3]
 800195c:	4b30      	ldr	r3, [pc, #192]	; (8001a20 <answer2CPU+0x398>)
 800195e:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x15;
 8001960:	4b23      	ldr	r3, [pc, #140]	; (80019f0 <answer2CPU+0x368>)
 8001962:	2215      	movs	r2, #21
 8001964:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001966:	4b27      	ldr	r3, [pc, #156]	; (8001a04 <answer2CPU+0x37c>)
 8001968:	2200      	movs	r2, #0
 800196a:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x16) {
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b16      	cmp	r3, #22
 8001972:	d10d      	bne.n	8001990 <answer2CPU+0x308>
					volume = cmd[3];
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	78da      	ldrb	r2, [r3, #3]
 8001978:	4b28      	ldr	r3, [pc, #160]	; (8001a1c <answer2CPU+0x394>)
 800197a:	701a      	strb	r2, [r3, #0]
					contrast = cmd[4];
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	791a      	ldrb	r2, [r3, #4]
 8001980:	4b27      	ldr	r3, [pc, #156]	; (8001a20 <answer2CPU+0x398>)
 8001982:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x16;
 8001984:	4b1a      	ldr	r3, [pc, #104]	; (80019f0 <answer2CPU+0x368>)
 8001986:	2216      	movs	r2, #22
 8001988:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 800198a:	4b1e      	ldr	r3, [pc, #120]	; (8001a04 <answer2CPU+0x37c>)
 800198c:	2200      	movs	r2, #0
 800198e:	701a      	strb	r2, [r3, #0]
				}
//				weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, Image);
//				USART2->ICR|=USART_ICR_ORECF;
			}
//==========================================================================================================================
			if (cmd[0] == 0x00) { //request of pcb type
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d000      	beq.n	800199a <answer2CPU+0x312>
 8001998:	e09c      	b.n	8001ad4 <answer2CPU+0x44c>
				myLength = 0x14; //20 bytes length answer
 800199a:	2109      	movs	r1, #9
 800199c:	187b      	adds	r3, r7, r1
 800199e:	2214      	movs	r2, #20
 80019a0:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 80019a2:	187b      	adds	r3, r7, r1
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	3b02      	subs	r3, #2
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <answer2CPU+0x370>)
 80019ae:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 80019b0:	230e      	movs	r3, #14
 80019b2:	18fb      	adds	r3, r7, r3
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]
 80019b8:	e010      	b.n	80019dc <answer2CPU+0x354>
					ans[i + 2] = PCB_type[i];
 80019ba:	200e      	movs	r0, #14
 80019bc:	183b      	adds	r3, r7, r0
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	4a18      	ldr	r2, [pc, #96]	; (8001a24 <answer2CPU+0x39c>)
 80019c2:	5cd1      	ldrb	r1, [r2, r3]
 80019c4:	183b      	adds	r3, r7, r0
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	1c9a      	adds	r2, r3, #2
 80019ca:	b289      	uxth	r1, r1
 80019cc:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <answer2CPU+0x370>)
 80019ce:	0052      	lsls	r2, r2, #1
 80019d0:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 80019d2:	183b      	adds	r3, r7, r0
 80019d4:	781a      	ldrb	r2, [r3, #0]
 80019d6:	183b      	adds	r3, r7, r0
 80019d8:	3201      	adds	r2, #1
 80019da:	701a      	strb	r2, [r3, #0]
 80019dc:	220e      	movs	r2, #14
 80019de:	18bb      	adds	r3, r7, r2
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b10      	cmp	r3, #16
 80019e4:	d9e9      	bls.n	80019ba <answer2CPU+0x332>
				}
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 80019e6:	18bb      	adds	r3, r7, r2
 80019e8:	2200      	movs	r2, #0
 80019ea:	701a      	strb	r2, [r3, #0]
 80019ec:	e02e      	b.n	8001a4c <answer2CPU+0x3c4>
 80019ee:	46c0      	nop			; (mov r8, r8)
 80019f0:	2000345a 	.word	0x2000345a
 80019f4:	50000800 	.word	0x50000800
 80019f8:	2000349c 	.word	0x2000349c
 80019fc:	40004400 	.word	0x40004400
 8001a00:	20003459 	.word	0x20003459
 8001a04:	200034b0 	.word	0x200034b0
 8001a08:	200032f0 	.word	0x200032f0
 8001a0c:	20003384 	.word	0x20003384
 8001a10:	20003499 	.word	0x20003499
 8001a14:	200031a0 	.word	0x200031a0
 8001a18:	20003519 	.word	0x20003519
 8001a1c:	200032ed 	.word	0x200032ed
 8001a20:	200033f0 	.word	0x200033f0
 8001a24:	20003100 	.word	0x20003100
					myCS = myCS + ans[i];
 8001a28:	200e      	movs	r0, #14
 8001a2a:	183b      	adds	r3, r7, r0
 8001a2c:	781a      	ldrb	r2, [r3, #0]
 8001a2e:	4bdb      	ldr	r3, [pc, #876]	; (8001d9c <answer2CPU+0x714>)
 8001a30:	0052      	lsls	r2, r2, #1
 8001a32:	5ad3      	ldrh	r3, [r2, r3]
 8001a34:	b2d9      	uxtb	r1, r3
 8001a36:	220d      	movs	r2, #13
 8001a38:	18bb      	adds	r3, r7, r2
 8001a3a:	18ba      	adds	r2, r7, r2
 8001a3c:	7812      	ldrb	r2, [r2, #0]
 8001a3e:	188a      	adds	r2, r1, r2
 8001a40:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8001a42:	183b      	adds	r3, r7, r0
 8001a44:	781a      	ldrb	r2, [r3, #0]
 8001a46:	183b      	adds	r3, r7, r0
 8001a48:	3201      	adds	r2, #1
 8001a4a:	701a      	strb	r2, [r3, #0]
 8001a4c:	230e      	movs	r3, #14
 8001a4e:	18fb      	adds	r3, r7, r3
 8001a50:	781a      	ldrb	r2, [r3, #0]
 8001a52:	2009      	movs	r0, #9
 8001a54:	183b      	adds	r3, r7, r0
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	dbe4      	blt.n	8001a28 <answer2CPU+0x3a0>
				}
				myCS = 0 - myCS;
 8001a5e:	210d      	movs	r1, #13
 8001a60:	187b      	adds	r3, r7, r1
 8001a62:	187a      	adds	r2, r7, r1
 8001a64:	7812      	ldrb	r2, [r2, #0]
 8001a66:	4252      	negs	r2, r2
 8001a68:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001a6a:	183b      	adds	r3, r7, r0
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	1e5a      	subs	r2, r3, #1
 8001a70:	187b      	adds	r3, r7, r1
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	b299      	uxth	r1, r3
 8001a76:	4bc9      	ldr	r3, [pc, #804]	; (8001d9c <answer2CPU+0x714>)
 8001a78:	0052      	lsls	r2, r2, #1
 8001a7a:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001a7c:	46c0      	nop			; (mov r8, r8)
 8001a7e:	4bc8      	ldr	r3, [pc, #800]	; (8001da0 <answer2CPU+0x718>)
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	2280      	movs	r2, #128	; 0x80
 8001a84:	4013      	ands	r3, r2
 8001a86:	d0fa      	beq.n	8001a7e <answer2CPU+0x3f6>
				USART2->TDR = ans[0]|0x0100;
 8001a88:	4bc4      	ldr	r3, [pc, #784]	; (8001d9c <answer2CPU+0x714>)
 8001a8a:	881b      	ldrh	r3, [r3, #0]
 8001a8c:	2280      	movs	r2, #128	; 0x80
 8001a8e:	0052      	lsls	r2, r2, #1
 8001a90:	4313      	orrs	r3, r2
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	4bc2      	ldr	r3, [pc, #776]	; (8001da0 <answer2CPU+0x718>)
 8001a96:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001a98:	e014      	b.n	8001ac4 <answer2CPU+0x43c>
				  {
				    i++;
 8001a9a:	210e      	movs	r1, #14
 8001a9c:	187b      	adds	r3, r7, r1
 8001a9e:	781a      	ldrb	r2, [r3, #0]
 8001aa0:	187b      	adds	r3, r7, r1
 8001aa2:	3201      	adds	r2, #1
 8001aa4:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001aa6:	46c0      	nop			; (mov r8, r8)
 8001aa8:	4bbd      	ldr	r3, [pc, #756]	; (8001da0 <answer2CPU+0x718>)
 8001aaa:	69db      	ldr	r3, [r3, #28]
 8001aac:	2280      	movs	r2, #128	; 0x80
 8001aae:	4013      	ands	r3, r2
 8001ab0:	d0fa      	beq.n	8001aa8 <answer2CPU+0x420>
				    USART2->TDR = (uint8_t)ans[i];
 8001ab2:	230e      	movs	r3, #14
 8001ab4:	18fb      	adds	r3, r7, r3
 8001ab6:	781a      	ldrb	r2, [r3, #0]
 8001ab8:	4bb8      	ldr	r3, [pc, #736]	; (8001d9c <answer2CPU+0x714>)
 8001aba:	0052      	lsls	r2, r2, #1
 8001abc:	5ad3      	ldrh	r3, [r2, r3]
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	4bb7      	ldr	r3, [pc, #732]	; (8001da0 <answer2CPU+0x718>)
 8001ac2:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001ac4:	230e      	movs	r3, #14
 8001ac6:	18fb      	adds	r3, r7, r3
 8001ac8:	781a      	ldrb	r2, [r3, #0]
 8001aca:	4bb4      	ldr	r3, [pc, #720]	; (8001d9c <answer2CPU+0x714>)
 8001acc:	0052      	lsls	r2, r2, #1
 8001ace:	5ad3      	ldrh	r3, [r2, r3]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1e2      	bne.n	8001a9a <answer2CPU+0x412>
				  }
//				 cmd2Execute=0x00;
			}
//============================================================================================================================
			if (cmd[0] == 0x01) { //request of pcb revision
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d000      	beq.n	8001ade <answer2CPU+0x456>
 8001adc:	e07f      	b.n	8001bde <answer2CPU+0x556>
				myLength = 0x0B; //19 bytes length answer
 8001ade:	2109      	movs	r1, #9
 8001ae0:	187b      	adds	r3, r7, r1
 8001ae2:	220b      	movs	r2, #11
 8001ae4:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001ae6:	187b      	adds	r3, r7, r1
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	3b02      	subs	r3, #2
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	4baa      	ldr	r3, [pc, #680]	; (8001d9c <answer2CPU+0x714>)
 8001af2:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001af4:	230e      	movs	r3, #14
 8001af6:	18fb      	adds	r3, r7, r3
 8001af8:	2200      	movs	r2, #0
 8001afa:	701a      	strb	r2, [r3, #0]
 8001afc:	e010      	b.n	8001b20 <answer2CPU+0x498>
					ans[i + 2] = PCB_rev[i];
 8001afe:	200e      	movs	r0, #14
 8001b00:	183b      	adds	r3, r7, r0
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	4aa7      	ldr	r2, [pc, #668]	; (8001da4 <answer2CPU+0x71c>)
 8001b06:	5cd1      	ldrb	r1, [r2, r3]
 8001b08:	183b      	adds	r3, r7, r0
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	1c9a      	adds	r2, r3, #2
 8001b0e:	b289      	uxth	r1, r1
 8001b10:	4ba2      	ldr	r3, [pc, #648]	; (8001d9c <answer2CPU+0x714>)
 8001b12:	0052      	lsls	r2, r2, #1
 8001b14:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001b16:	183b      	adds	r3, r7, r0
 8001b18:	781a      	ldrb	r2, [r3, #0]
 8001b1a:	183b      	adds	r3, r7, r0
 8001b1c:	3201      	adds	r2, #1
 8001b1e:	701a      	strb	r2, [r3, #0]
 8001b20:	220e      	movs	r2, #14
 8001b22:	18bb      	adds	r3, r7, r2
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	2b10      	cmp	r3, #16
 8001b28:	d9e9      	bls.n	8001afe <answer2CPU+0x476>
				}
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001b2a:	18bb      	adds	r3, r7, r2
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	701a      	strb	r2, [r3, #0]
 8001b30:	e011      	b.n	8001b56 <answer2CPU+0x4ce>
					myCS = myCS + ans[i];
 8001b32:	200e      	movs	r0, #14
 8001b34:	183b      	adds	r3, r7, r0
 8001b36:	781a      	ldrb	r2, [r3, #0]
 8001b38:	4b98      	ldr	r3, [pc, #608]	; (8001d9c <answer2CPU+0x714>)
 8001b3a:	0052      	lsls	r2, r2, #1
 8001b3c:	5ad3      	ldrh	r3, [r2, r3]
 8001b3e:	b2d9      	uxtb	r1, r3
 8001b40:	220d      	movs	r2, #13
 8001b42:	18bb      	adds	r3, r7, r2
 8001b44:	18ba      	adds	r2, r7, r2
 8001b46:	7812      	ldrb	r2, [r2, #0]
 8001b48:	188a      	adds	r2, r1, r2
 8001b4a:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001b4c:	183b      	adds	r3, r7, r0
 8001b4e:	781a      	ldrb	r2, [r3, #0]
 8001b50:	183b      	adds	r3, r7, r0
 8001b52:	3201      	adds	r2, #1
 8001b54:	701a      	strb	r2, [r3, #0]
 8001b56:	230e      	movs	r3, #14
 8001b58:	18fb      	adds	r3, r7, r3
 8001b5a:	781a      	ldrb	r2, [r3, #0]
 8001b5c:	2009      	movs	r0, #9
 8001b5e:	183b      	adds	r3, r7, r0
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	3b01      	subs	r3, #1
 8001b64:	429a      	cmp	r2, r3
 8001b66:	dbe4      	blt.n	8001b32 <answer2CPU+0x4aa>
				}
				myCS = 0 - myCS;
 8001b68:	210d      	movs	r1, #13
 8001b6a:	187b      	adds	r3, r7, r1
 8001b6c:	187a      	adds	r2, r7, r1
 8001b6e:	7812      	ldrb	r2, [r2, #0]
 8001b70:	4252      	negs	r2, r2
 8001b72:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001b74:	183b      	adds	r3, r7, r0
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	1e5a      	subs	r2, r3, #1
 8001b7a:	187b      	adds	r3, r7, r1
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	b299      	uxth	r1, r3
 8001b80:	4b86      	ldr	r3, [pc, #536]	; (8001d9c <answer2CPU+0x714>)
 8001b82:	0052      	lsls	r2, r2, #1
 8001b84:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001b86:	46c0      	nop			; (mov r8, r8)
 8001b88:	4b85      	ldr	r3, [pc, #532]	; (8001da0 <answer2CPU+0x718>)
 8001b8a:	69db      	ldr	r3, [r3, #28]
 8001b8c:	2280      	movs	r2, #128	; 0x80
 8001b8e:	4013      	ands	r3, r2
 8001b90:	d0fa      	beq.n	8001b88 <answer2CPU+0x500>
				USART2->TDR = ans[0]|0x0100;
 8001b92:	4b82      	ldr	r3, [pc, #520]	; (8001d9c <answer2CPU+0x714>)
 8001b94:	881b      	ldrh	r3, [r3, #0]
 8001b96:	2280      	movs	r2, #128	; 0x80
 8001b98:	0052      	lsls	r2, r2, #1
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	4b80      	ldr	r3, [pc, #512]	; (8001da0 <answer2CPU+0x718>)
 8001ba0:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001ba2:	e014      	b.n	8001bce <answer2CPU+0x546>
					  {
					    i++;
 8001ba4:	210e      	movs	r1, #14
 8001ba6:	187b      	adds	r3, r7, r1
 8001ba8:	781a      	ldrb	r2, [r3, #0]
 8001baa:	187b      	adds	r3, r7, r1
 8001bac:	3201      	adds	r2, #1
 8001bae:	701a      	strb	r2, [r3, #0]
					    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001bb0:	46c0      	nop			; (mov r8, r8)
 8001bb2:	4b7b      	ldr	r3, [pc, #492]	; (8001da0 <answer2CPU+0x718>)
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	2280      	movs	r2, #128	; 0x80
 8001bb8:	4013      	ands	r3, r2
 8001bba:	d0fa      	beq.n	8001bb2 <answer2CPU+0x52a>
					    USART2->TDR = (uint8_t)ans[i];
 8001bbc:	230e      	movs	r3, #14
 8001bbe:	18fb      	adds	r3, r7, r3
 8001bc0:	781a      	ldrb	r2, [r3, #0]
 8001bc2:	4b76      	ldr	r3, [pc, #472]	; (8001d9c <answer2CPU+0x714>)
 8001bc4:	0052      	lsls	r2, r2, #1
 8001bc6:	5ad3      	ldrh	r3, [r2, r3]
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	4b75      	ldr	r3, [pc, #468]	; (8001da0 <answer2CPU+0x718>)
 8001bcc:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001bce:	230e      	movs	r3, #14
 8001bd0:	18fb      	adds	r3, r7, r3
 8001bd2:	781a      	ldrb	r2, [r3, #0]
 8001bd4:	4b71      	ldr	r3, [pc, #452]	; (8001d9c <answer2CPU+0x714>)
 8001bd6:	0052      	lsls	r2, r2, #1
 8001bd8:	5ad3      	ldrh	r3, [r2, r3]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1e2      	bne.n	8001ba4 <answer2CPU+0x51c>
					  }
//				 cmd2Execute=0x01;
			}
//================================================================================================================================
			if (cmd[0] == 0x02) { //request of emitter SN
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d000      	beq.n	8001be8 <answer2CPU+0x560>
 8001be6:	e07f      	b.n	8001ce8 <answer2CPU+0x660>
				myLength = 0x13; //19 bytes length answer
 8001be8:	2109      	movs	r1, #9
 8001bea:	187b      	adds	r3, r7, r1
 8001bec:	2213      	movs	r2, #19
 8001bee:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001bf0:	187b      	adds	r3, r7, r1
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	3b02      	subs	r3, #2
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	4b68      	ldr	r3, [pc, #416]	; (8001d9c <answer2CPU+0x714>)
 8001bfc:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001bfe:	230e      	movs	r3, #14
 8001c00:	18fb      	adds	r3, r7, r3
 8001c02:	2200      	movs	r2, #0
 8001c04:	701a      	strb	r2, [r3, #0]
 8001c06:	e010      	b.n	8001c2a <answer2CPU+0x5a2>
					ans[i + 2] = EmitterSN[i];
 8001c08:	200e      	movs	r0, #14
 8001c0a:	183b      	adds	r3, r7, r0
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	4a66      	ldr	r2, [pc, #408]	; (8001da8 <answer2CPU+0x720>)
 8001c10:	5cd1      	ldrb	r1, [r2, r3]
 8001c12:	183b      	adds	r3, r7, r0
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	1c9a      	adds	r2, r3, #2
 8001c18:	b289      	uxth	r1, r1
 8001c1a:	4b60      	ldr	r3, [pc, #384]	; (8001d9c <answer2CPU+0x714>)
 8001c1c:	0052      	lsls	r2, r2, #1
 8001c1e:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001c20:	183b      	adds	r3, r7, r0
 8001c22:	781a      	ldrb	r2, [r3, #0]
 8001c24:	183b      	adds	r3, r7, r0
 8001c26:	3201      	adds	r2, #1
 8001c28:	701a      	strb	r2, [r3, #0]
 8001c2a:	220e      	movs	r2, #14
 8001c2c:	18bb      	adds	r3, r7, r2
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b10      	cmp	r3, #16
 8001c32:	d9e9      	bls.n	8001c08 <answer2CPU+0x580>
				}
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001c34:	18bb      	adds	r3, r7, r2
 8001c36:	2200      	movs	r2, #0
 8001c38:	701a      	strb	r2, [r3, #0]
 8001c3a:	e011      	b.n	8001c60 <answer2CPU+0x5d8>
					myCS = myCS + ans[i];
 8001c3c:	200e      	movs	r0, #14
 8001c3e:	183b      	adds	r3, r7, r0
 8001c40:	781a      	ldrb	r2, [r3, #0]
 8001c42:	4b56      	ldr	r3, [pc, #344]	; (8001d9c <answer2CPU+0x714>)
 8001c44:	0052      	lsls	r2, r2, #1
 8001c46:	5ad3      	ldrh	r3, [r2, r3]
 8001c48:	b2d9      	uxtb	r1, r3
 8001c4a:	220d      	movs	r2, #13
 8001c4c:	18bb      	adds	r3, r7, r2
 8001c4e:	18ba      	adds	r2, r7, r2
 8001c50:	7812      	ldrb	r2, [r2, #0]
 8001c52:	188a      	adds	r2, r1, r2
 8001c54:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001c56:	183b      	adds	r3, r7, r0
 8001c58:	781a      	ldrb	r2, [r3, #0]
 8001c5a:	183b      	adds	r3, r7, r0
 8001c5c:	3201      	adds	r2, #1
 8001c5e:	701a      	strb	r2, [r3, #0]
 8001c60:	230e      	movs	r3, #14
 8001c62:	18fb      	adds	r3, r7, r3
 8001c64:	781a      	ldrb	r2, [r3, #0]
 8001c66:	2009      	movs	r0, #9
 8001c68:	183b      	adds	r3, r7, r0
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	dbe4      	blt.n	8001c3c <answer2CPU+0x5b4>
				}
				myCS = 0 - myCS;
 8001c72:	210d      	movs	r1, #13
 8001c74:	187b      	adds	r3, r7, r1
 8001c76:	187a      	adds	r2, r7, r1
 8001c78:	7812      	ldrb	r2, [r2, #0]
 8001c7a:	4252      	negs	r2, r2
 8001c7c:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001c7e:	183b      	adds	r3, r7, r0
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	1e5a      	subs	r2, r3, #1
 8001c84:	187b      	adds	r3, r7, r1
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	b299      	uxth	r1, r3
 8001c8a:	4b44      	ldr	r3, [pc, #272]	; (8001d9c <answer2CPU+0x714>)
 8001c8c:	0052      	lsls	r2, r2, #1
 8001c8e:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001c90:	46c0      	nop			; (mov r8, r8)
 8001c92:	4b43      	ldr	r3, [pc, #268]	; (8001da0 <answer2CPU+0x718>)
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	2280      	movs	r2, #128	; 0x80
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d0fa      	beq.n	8001c92 <answer2CPU+0x60a>
				USART2->TDR = ans[0]|0x0100;
 8001c9c:	4b3f      	ldr	r3, [pc, #252]	; (8001d9c <answer2CPU+0x714>)
 8001c9e:	881b      	ldrh	r3, [r3, #0]
 8001ca0:	2280      	movs	r2, #128	; 0x80
 8001ca2:	0052      	lsls	r2, r2, #1
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	4b3d      	ldr	r3, [pc, #244]	; (8001da0 <answer2CPU+0x718>)
 8001caa:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001cac:	e014      	b.n	8001cd8 <answer2CPU+0x650>
				  {
				    i++;
 8001cae:	210e      	movs	r1, #14
 8001cb0:	187b      	adds	r3, r7, r1
 8001cb2:	781a      	ldrb	r2, [r3, #0]
 8001cb4:	187b      	adds	r3, r7, r1
 8001cb6:	3201      	adds	r2, #1
 8001cb8:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001cba:	46c0      	nop			; (mov r8, r8)
 8001cbc:	4b38      	ldr	r3, [pc, #224]	; (8001da0 <answer2CPU+0x718>)
 8001cbe:	69db      	ldr	r3, [r3, #28]
 8001cc0:	2280      	movs	r2, #128	; 0x80
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d0fa      	beq.n	8001cbc <answer2CPU+0x634>
				    	USART2->TDR = (uint8_t)ans[i];
 8001cc6:	230e      	movs	r3, #14
 8001cc8:	18fb      	adds	r3, r7, r3
 8001cca:	781a      	ldrb	r2, [r3, #0]
 8001ccc:	4b33      	ldr	r3, [pc, #204]	; (8001d9c <answer2CPU+0x714>)
 8001cce:	0052      	lsls	r2, r2, #1
 8001cd0:	5ad3      	ldrh	r3, [r2, r3]
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	4b32      	ldr	r3, [pc, #200]	; (8001da0 <answer2CPU+0x718>)
 8001cd6:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001cd8:	230e      	movs	r3, #14
 8001cda:	18fb      	adds	r3, r7, r3
 8001cdc:	781a      	ldrb	r2, [r3, #0]
 8001cde:	4b2f      	ldr	r3, [pc, #188]	; (8001d9c <answer2CPU+0x714>)
 8001ce0:	0052      	lsls	r2, r2, #1
 8001ce2:	5ad3      	ldrh	r3, [r2, r3]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1e2      	bne.n	8001cae <answer2CPU+0x626>
				  }
//				cmd2Execute=0x02;
			}
//===============================================================================================================================
			if (cmd[0] == 0x03) { //request of current consumption
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b03      	cmp	r3, #3
 8001cee:	d000      	beq.n	8001cf2 <answer2CPU+0x66a>
 8001cf0:	e07b      	b.n	8001dea <answer2CPU+0x762>
				myLength = 0x04; //4 bytes length answer
 8001cf2:	2109      	movs	r1, #9
 8001cf4:	187b      	adds	r3, r7, r1
 8001cf6:	2204      	movs	r2, #4
 8001cf8:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001cfa:	187b      	adds	r3, r7, r1
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	3b02      	subs	r3, #2
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	4b25      	ldr	r3, [pc, #148]	; (8001d9c <answer2CPU+0x714>)
 8001d06:	805a      	strh	r2, [r3, #2]
				ans[2] = currentConsumption;
 8001d08:	4b28      	ldr	r3, [pc, #160]	; (8001dac <answer2CPU+0x724>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	4b23      	ldr	r3, [pc, #140]	; (8001d9c <answer2CPU+0x714>)
 8001d10:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8001d12:	230d      	movs	r3, #13
 8001d14:	18fb      	adds	r3, r7, r3
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	4b20      	ldr	r3, [pc, #128]	; (8001d9c <answer2CPU+0x714>)
 8001d1c:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8001d1e:	230e      	movs	r3, #14
 8001d20:	18fb      	adds	r3, r7, r3
 8001d22:	2200      	movs	r2, #0
 8001d24:	701a      	strb	r2, [r3, #0]
 8001d26:	e011      	b.n	8001d4c <answer2CPU+0x6c4>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8001d28:	200e      	movs	r0, #14
 8001d2a:	183b      	adds	r3, r7, r0
 8001d2c:	781a      	ldrb	r2, [r3, #0]
 8001d2e:	4b1b      	ldr	r3, [pc, #108]	; (8001d9c <answer2CPU+0x714>)
 8001d30:	0052      	lsls	r2, r2, #1
 8001d32:	5ad3      	ldrh	r3, [r2, r3]
 8001d34:	b2d9      	uxtb	r1, r3
 8001d36:	220d      	movs	r2, #13
 8001d38:	18bb      	adds	r3, r7, r2
 8001d3a:	18ba      	adds	r2, r7, r2
 8001d3c:	7812      	ldrb	r2, [r2, #0]
 8001d3e:	188a      	adds	r2, r1, r2
 8001d40:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001d42:	183b      	adds	r3, r7, r0
 8001d44:	781a      	ldrb	r2, [r3, #0]
 8001d46:	183b      	adds	r3, r7, r0
 8001d48:	3201      	adds	r2, #1
 8001d4a:	701a      	strb	r2, [r3, #0]
 8001d4c:	230e      	movs	r3, #14
 8001d4e:	18fb      	adds	r3, r7, r3
 8001d50:	781a      	ldrb	r2, [r3, #0]
 8001d52:	2009      	movs	r0, #9
 8001d54:	183b      	adds	r3, r7, r0
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	dbe4      	blt.n	8001d28 <answer2CPU+0x6a0>
				}
				myCS = 0 - myCS;
 8001d5e:	210d      	movs	r1, #13
 8001d60:	187b      	adds	r3, r7, r1
 8001d62:	187a      	adds	r2, r7, r1
 8001d64:	7812      	ldrb	r2, [r2, #0]
 8001d66:	4252      	negs	r2, r2
 8001d68:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001d6a:	183b      	adds	r3, r7, r0
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	1e5a      	subs	r2, r3, #1
 8001d70:	187b      	adds	r3, r7, r1
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	b299      	uxth	r1, r3
 8001d76:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <answer2CPU+0x714>)
 8001d78:	0052      	lsls	r2, r2, #1
 8001d7a:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001d7c:	46c0      	nop			; (mov r8, r8)
 8001d7e:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <answer2CPU+0x718>)
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	2280      	movs	r2, #128	; 0x80
 8001d84:	4013      	ands	r3, r2
 8001d86:	d0fa      	beq.n	8001d7e <answer2CPU+0x6f6>
					USART2->TDR = ans[0]|0x0100;
 8001d88:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <answer2CPU+0x714>)
 8001d8a:	881b      	ldrh	r3, [r3, #0]
 8001d8c:	2280      	movs	r2, #128	; 0x80
 8001d8e:	0052      	lsls	r2, r2, #1
 8001d90:	4313      	orrs	r3, r2
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	4b02      	ldr	r3, [pc, #8]	; (8001da0 <answer2CPU+0x718>)
 8001d96:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8001d98:	e01f      	b.n	8001dda <answer2CPU+0x752>
 8001d9a:	46c0      	nop			; (mov r8, r8)
 8001d9c:	2000349c 	.word	0x2000349c
 8001da0:	40004400 	.word	0x40004400
 8001da4:	20003114 	.word	0x20003114
 8001da8:	20003120 	.word	0x20003120
 8001dac:	2000311c 	.word	0x2000311c
						{
						  i++;
 8001db0:	210e      	movs	r1, #14
 8001db2:	187b      	adds	r3, r7, r1
 8001db4:	781a      	ldrb	r2, [r3, #0]
 8001db6:	187b      	adds	r3, r7, r1
 8001db8:	3201      	adds	r2, #1
 8001dba:	701a      	strb	r2, [r3, #0]
						  while(!(USART2->ISR & USART_ISR_TXE)){};
 8001dbc:	46c0      	nop			; (mov r8, r8)
 8001dbe:	4b4e      	ldr	r3, [pc, #312]	; (8001ef8 <answer2CPU+0x870>)
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	2280      	movs	r2, #128	; 0x80
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d0fa      	beq.n	8001dbe <answer2CPU+0x736>
						     USART2->TDR = (uint8_t)ans[i];
 8001dc8:	230e      	movs	r3, #14
 8001dca:	18fb      	adds	r3, r7, r3
 8001dcc:	781a      	ldrb	r2, [r3, #0]
 8001dce:	4b4b      	ldr	r3, [pc, #300]	; (8001efc <answer2CPU+0x874>)
 8001dd0:	0052      	lsls	r2, r2, #1
 8001dd2:	5ad3      	ldrh	r3, [r2, r3]
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	4b48      	ldr	r3, [pc, #288]	; (8001ef8 <answer2CPU+0x870>)
 8001dd8:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8001dda:	230e      	movs	r3, #14
 8001ddc:	18fb      	adds	r3, r7, r3
 8001dde:	781a      	ldrb	r2, [r3, #0]
 8001de0:	4b46      	ldr	r3, [pc, #280]	; (8001efc <answer2CPU+0x874>)
 8001de2:	0052      	lsls	r2, r2, #1
 8001de4:	5ad3      	ldrh	r3, [r2, r3]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1e2      	bne.n	8001db0 <answer2CPU+0x728>
						}
//					cmd2Execute=0x03;
			}
			if (cmd[0] == 0x04) { //request of current consumption
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	d000      	beq.n	8001df4 <answer2CPU+0x76c>
 8001df2:	e076      	b.n	8001ee2 <answer2CPU+0x85a>
				myLength = 0x04; //4 bytes length answer
 8001df4:	2109      	movs	r1, #9
 8001df6:	187b      	adds	r3, r7, r1
 8001df8:	2204      	movs	r2, #4
 8001dfa:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001dfc:	187b      	adds	r3, r7, r1
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	3b02      	subs	r3, #2
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	4b3d      	ldr	r3, [pc, #244]	; (8001efc <answer2CPU+0x874>)
 8001e08:	805a      	strh	r2, [r3, #2]
				uartSpeed = cmd[2];
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	3302      	adds	r3, #2
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	001a      	movs	r2, r3
 8001e12:	4b3b      	ldr	r3, [pc, #236]	; (8001f00 <answer2CPU+0x878>)
 8001e14:	601a      	str	r2, [r3, #0]
				ans[2] = currentUARTspeed;
 8001e16:	4b3b      	ldr	r3, [pc, #236]	; (8001f04 <answer2CPU+0x87c>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	4b37      	ldr	r3, [pc, #220]	; (8001efc <answer2CPU+0x874>)
 8001e1e:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8001e20:	230d      	movs	r3, #13
 8001e22:	18fb      	adds	r3, r7, r3
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	4b34      	ldr	r3, [pc, #208]	; (8001efc <answer2CPU+0x874>)
 8001e2a:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8001e2c:	230e      	movs	r3, #14
 8001e2e:	18fb      	adds	r3, r7, r3
 8001e30:	2200      	movs	r2, #0
 8001e32:	701a      	strb	r2, [r3, #0]
 8001e34:	e011      	b.n	8001e5a <answer2CPU+0x7d2>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8001e36:	200e      	movs	r0, #14
 8001e38:	183b      	adds	r3, r7, r0
 8001e3a:	781a      	ldrb	r2, [r3, #0]
 8001e3c:	4b2f      	ldr	r3, [pc, #188]	; (8001efc <answer2CPU+0x874>)
 8001e3e:	0052      	lsls	r2, r2, #1
 8001e40:	5ad3      	ldrh	r3, [r2, r3]
 8001e42:	b2d9      	uxtb	r1, r3
 8001e44:	220d      	movs	r2, #13
 8001e46:	18bb      	adds	r3, r7, r2
 8001e48:	18ba      	adds	r2, r7, r2
 8001e4a:	7812      	ldrb	r2, [r2, #0]
 8001e4c:	188a      	adds	r2, r1, r2
 8001e4e:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001e50:	183b      	adds	r3, r7, r0
 8001e52:	781a      	ldrb	r2, [r3, #0]
 8001e54:	183b      	adds	r3, r7, r0
 8001e56:	3201      	adds	r2, #1
 8001e58:	701a      	strb	r2, [r3, #0]
 8001e5a:	230e      	movs	r3, #14
 8001e5c:	18fb      	adds	r3, r7, r3
 8001e5e:	781a      	ldrb	r2, [r3, #0]
 8001e60:	2009      	movs	r0, #9
 8001e62:	183b      	adds	r3, r7, r0
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	3b01      	subs	r3, #1
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	dbe4      	blt.n	8001e36 <answer2CPU+0x7ae>
				}
				myCS = 0 - myCS;
 8001e6c:	210d      	movs	r1, #13
 8001e6e:	187b      	adds	r3, r7, r1
 8001e70:	187a      	adds	r2, r7, r1
 8001e72:	7812      	ldrb	r2, [r2, #0]
 8001e74:	4252      	negs	r2, r2
 8001e76:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001e78:	183b      	adds	r3, r7, r0
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	1e5a      	subs	r2, r3, #1
 8001e7e:	187b      	adds	r3, r7, r1
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	b299      	uxth	r1, r3
 8001e84:	4b1d      	ldr	r3, [pc, #116]	; (8001efc <answer2CPU+0x874>)
 8001e86:	0052      	lsls	r2, r2, #1
 8001e88:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001e8a:	46c0      	nop			; (mov r8, r8)
 8001e8c:	4b1a      	ldr	r3, [pc, #104]	; (8001ef8 <answer2CPU+0x870>)
 8001e8e:	69db      	ldr	r3, [r3, #28]
 8001e90:	2280      	movs	r2, #128	; 0x80
 8001e92:	4013      	ands	r3, r2
 8001e94:	d0fa      	beq.n	8001e8c <answer2CPU+0x804>
				USART2->TDR = ans[0]|0x0100;
 8001e96:	4b19      	ldr	r3, [pc, #100]	; (8001efc <answer2CPU+0x874>)
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	2280      	movs	r2, #128	; 0x80
 8001e9c:	0052      	lsls	r2, r2, #1
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	4b15      	ldr	r3, [pc, #84]	; (8001ef8 <answer2CPU+0x870>)
 8001ea4:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001ea6:	e014      	b.n	8001ed2 <answer2CPU+0x84a>
				{
				  i++;
 8001ea8:	210e      	movs	r1, #14
 8001eaa:	187b      	adds	r3, r7, r1
 8001eac:	781a      	ldrb	r2, [r3, #0]
 8001eae:	187b      	adds	r3, r7, r1
 8001eb0:	3201      	adds	r2, #1
 8001eb2:	701a      	strb	r2, [r3, #0]
				  while(!(USART2->ISR & USART_ISR_TXE)){};
 8001eb4:	46c0      	nop			; (mov r8, r8)
 8001eb6:	4b10      	ldr	r3, [pc, #64]	; (8001ef8 <answer2CPU+0x870>)
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	2280      	movs	r2, #128	; 0x80
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d0fa      	beq.n	8001eb6 <answer2CPU+0x82e>
				  USART2->TDR = (uint8_t)ans[i];
 8001ec0:	230e      	movs	r3, #14
 8001ec2:	18fb      	adds	r3, r7, r3
 8001ec4:	781a      	ldrb	r2, [r3, #0]
 8001ec6:	4b0d      	ldr	r3, [pc, #52]	; (8001efc <answer2CPU+0x874>)
 8001ec8:	0052      	lsls	r2, r2, #1
 8001eca:	5ad3      	ldrh	r3, [r2, r3]
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <answer2CPU+0x870>)
 8001ed0:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001ed2:	230e      	movs	r3, #14
 8001ed4:	18fb      	adds	r3, r7, r3
 8001ed6:	781a      	ldrb	r2, [r3, #0]
 8001ed8:	4b08      	ldr	r3, [pc, #32]	; (8001efc <answer2CPU+0x874>)
 8001eda:	0052      	lsls	r2, r2, #1
 8001edc:	5ad3      	ldrh	r3, [r2, r3]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1e2      	bne.n	8001ea8 <answer2CPU+0x820>
				}
//				cmd2Execute=0x04;
			}
//			weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, coala);
			USART2->ICR|=USART_ICR_ORECF;
 8001ee2:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <answer2CPU+0x870>)
 8001ee4:	6a1a      	ldr	r2, [r3, #32]
 8001ee6:	4b04      	ldr	r3, [pc, #16]	; (8001ef8 <answer2CPU+0x870>)
 8001ee8:	2108      	movs	r1, #8
 8001eea:	430a      	orrs	r2, r1
 8001eec:	621a      	str	r2, [r3, #32]
}
 8001eee:	46c0      	nop			; (mov r8, r8)
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	b004      	add	sp, #16
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40004400 	.word	0x40004400
 8001efc:	2000349c 	.word	0x2000349c
 8001f00:	200033f8 	.word	0x200033f8
 8001f04:	200032ee 	.word	0x200032ee

08001f08 <MEM_Reset>:
//==================================================================================================================================
	void MEM_Reset(void) {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
		uint8_t memCMD;
		HAL_Delay(1); //200 ms by Andrew
 8001f0e:	2001      	movs	r0, #1
 8001f10:	f001 f8f8 	bl	8003104 <HAL_Delay>
		GPIOC->ODR &= ~(1 << 15); //reset cs
 8001f14:	4b28      	ldr	r3, [pc, #160]	; (8001fb8 <MEM_Reset+0xb0>)
 8001f16:	695a      	ldr	r2, [r3, #20]
 8001f18:	4b27      	ldr	r3, [pc, #156]	; (8001fb8 <MEM_Reset+0xb0>)
 8001f1a:	4928      	ldr	r1, [pc, #160]	; (8001fbc <MEM_Reset+0xb4>)
 8001f1c:	400a      	ands	r2, r1
 8001f1e:	615a      	str	r2, [r3, #20]
		memCMD = 0x66;
 8001f20:	1dfb      	adds	r3, r7, #7
 8001f22:	2266      	movs	r2, #102	; 0x66
 8001f24:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8001f26:	1df9      	adds	r1, r7, #7
 8001f28:	4825      	ldr	r0, [pc, #148]	; (8001fc0 <MEM_Reset+0xb8>)
 8001f2a:	2305      	movs	r3, #5
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f004 fc61 	bl	80067f4 <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8001f32:	4b21      	ldr	r3, [pc, #132]	; (8001fb8 <MEM_Reset+0xb0>)
 8001f34:	695a      	ldr	r2, [r3, #20]
 8001f36:	4b20      	ldr	r3, [pc, #128]	; (8001fb8 <MEM_Reset+0xb0>)
 8001f38:	2180      	movs	r1, #128	; 0x80
 8001f3a:	0209      	lsls	r1, r1, #8
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	615a      	str	r2, [r3, #20]
		asm("NOP");
 8001f40:	46c0      	nop			; (mov r8, r8)
		__NOP();
 8001f42:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8001f44:	46c0      	nop			; (mov r8, r8)
		__NOP();			//May be less NOPs?
 8001f46:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8001f48:	46c0      	nop			; (mov r8, r8)
		__NOP();
 8001f4a:	46c0      	nop			; (mov r8, r8)
		GPIOC->ODR &= ~(1 << 15);			//reset cs
 8001f4c:	4b1a      	ldr	r3, [pc, #104]	; (8001fb8 <MEM_Reset+0xb0>)
 8001f4e:	695a      	ldr	r2, [r3, #20]
 8001f50:	4b19      	ldr	r3, [pc, #100]	; (8001fb8 <MEM_Reset+0xb0>)
 8001f52:	491a      	ldr	r1, [pc, #104]	; (8001fbc <MEM_Reset+0xb4>)
 8001f54:	400a      	ands	r2, r1
 8001f56:	615a      	str	r2, [r3, #20]
		memCMD = 0x99;
 8001f58:	1dfb      	adds	r3, r7, #7
 8001f5a:	2299      	movs	r2, #153	; 0x99
 8001f5c:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset memory
 8001f5e:	1df9      	adds	r1, r7, #7
 8001f60:	4817      	ldr	r0, [pc, #92]	; (8001fc0 <MEM_Reset+0xb8>)
 8001f62:	2305      	movs	r3, #5
 8001f64:	2201      	movs	r2, #1
 8001f66:	f004 fc45 	bl	80067f4 <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8001f6a:	4b13      	ldr	r3, [pc, #76]	; (8001fb8 <MEM_Reset+0xb0>)
 8001f6c:	695a      	ldr	r2, [r3, #20]
 8001f6e:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <MEM_Reset+0xb0>)
 8001f70:	2180      	movs	r1, #128	; 0x80
 8001f72:	0209      	lsls	r1, r1, #8
 8001f74:	430a      	orrs	r2, r1
 8001f76:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8001f78:	2001      	movs	r0, #1
 8001f7a:	f001 f8c3 	bl	8003104 <HAL_Delay>
//=============================================================================================================
		memCMD = 0xB7;												//	Activation 0f 4-bytes address mode
 8001f7e:	1dfb      	adds	r3, r7, #7
 8001f80:	22b7      	movs	r2, #183	; 0xb7
 8001f82:	701a      	strb	r2, [r3, #0]
		GPIOC->ODR &= ~(1 << 15); //reset cs
 8001f84:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <MEM_Reset+0xb0>)
 8001f86:	695a      	ldr	r2, [r3, #20]
 8001f88:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <MEM_Reset+0xb0>)
 8001f8a:	490c      	ldr	r1, [pc, #48]	; (8001fbc <MEM_Reset+0xb4>)
 8001f8c:	400a      	ands	r2, r1
 8001f8e:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8001f90:	1df9      	adds	r1, r7, #7
 8001f92:	480b      	ldr	r0, [pc, #44]	; (8001fc0 <MEM_Reset+0xb8>)
 8001f94:	2305      	movs	r3, #5
 8001f96:	2201      	movs	r2, #1
 8001f98:	f004 fc2c 	bl	80067f4 <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8001f9c:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <MEM_Reset+0xb0>)
 8001f9e:	695a      	ldr	r2, [r3, #20]
 8001fa0:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <MEM_Reset+0xb0>)
 8001fa2:	2180      	movs	r1, #128	; 0x80
 8001fa4:	0209      	lsls	r1, r1, #8
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8001faa:	2001      	movs	r0, #1
 8001fac:	f001 f8aa 	bl	8003104 <HAL_Delay>
	}
 8001fb0:	46c0      	nop			; (mov r8, r8)
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	b002      	add	sp, #8
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	50000800 	.word	0x50000800
 8001fbc:	ffff7fff 	.word	0xffff7fff
 8001fc0:	200031b0 	.word	0x200031b0

08001fc4 <weoShowFullScreenDMA>:
		GPIOC->ODR |= 1 << 6;	//set BF
		cmd2Execute=0;
	}
//==========================================================================================================================

	uint8_t weoShowFullScreenDMA(uint8_t picNum) {
 8001fc4:	b590      	push	{r4, r7, lr}
 8001fc6:	4c41      	ldr	r4, [pc, #260]	; (80020cc <weoShowFullScreenDMA+0x108>)
 8001fc8:	44a5      	add	sp, r4
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	0002      	movs	r2, r0
 8001fce:	4b40      	ldr	r3, [pc, #256]	; (80020d0 <weoShowFullScreenDMA+0x10c>)
 8001fd0:	4940      	ldr	r1, [pc, #256]	; (80020d4 <weoShowFullScreenDMA+0x110>)
 8001fd2:	468c      	mov	ip, r1
 8001fd4:	44bc      	add	ip, r7
 8001fd6:	4463      	add	r3, ip
 8001fd8:	701a      	strb	r2, [r3, #0]
//		uint8_t MEM_Buffer[8192];
		uint8_t DUMMY_Buffer[8192], firstImAddrArray[4],addrArray[4];
		uint16_t i;
		uint32_t addrInfo,addr;

		weoDrawRectangleInit(0x00, 0x00, 0x7F, 0x7F); // Здесь ещё работает
 8001fda:	237f      	movs	r3, #127	; 0x7f
 8001fdc:	227f      	movs	r2, #127	; 0x7f
 8001fde:	2100      	movs	r1, #0
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	f7ff fac9 	bl	8001578 <weoDrawRectangleInit>

		len=8192;
 8001fe6:	4b3c      	ldr	r3, [pc, #240]	; (80020d8 <weoShowFullScreenDMA+0x114>)
 8001fe8:	2280      	movs	r2, #128	; 0x80
 8001fea:	0192      	lsls	r2, r2, #6
 8001fec:	801a      	strh	r2, [r3, #0]
		dma_spi_cnt=len;
 8001fee:	4b3a      	ldr	r3, [pc, #232]	; (80020d8 <weoShowFullScreenDMA+0x114>)
 8001ff0:	881a      	ldrh	r2, [r3, #0]
 8001ff2:	4b3a      	ldr	r3, [pc, #232]	; (80020dc <weoShowFullScreenDMA+0x118>)
 8001ff4:	801a      	strh	r2, [r3, #0]
		memCMD = 0x13; //read command with 4-byte address
 8001ff6:	483a      	ldr	r0, [pc, #232]	; (80020e0 <weoShowFullScreenDMA+0x11c>)
 8001ff8:	183b      	adds	r3, r7, r0
 8001ffa:	2213      	movs	r2, #19
 8001ffc:	701a      	strb	r2, [r3, #0]

		addr=((picNum)*0x2000);
 8001ffe:	4b34      	ldr	r3, [pc, #208]	; (80020d0 <weoShowFullScreenDMA+0x10c>)
 8002000:	4a34      	ldr	r2, [pc, #208]	; (80020d4 <weoShowFullScreenDMA+0x110>)
 8002002:	4694      	mov	ip, r2
 8002004:	44bc      	add	ip, r7
 8002006:	4463      	add	r3, ip
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	035b      	lsls	r3, r3, #13
 800200c:	4935      	ldr	r1, [pc, #212]	; (80020e4 <weoShowFullScreenDMA+0x120>)
 800200e:	187a      	adds	r2, r7, r1
 8002010:	6013      	str	r3, [r2, #0]

		addrArray[0]=addr & 0xFF;
 8002012:	187b      	adds	r3, r7, r1
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	b2da      	uxtb	r2, r3
 8002018:	4b33      	ldr	r3, [pc, #204]	; (80020e8 <weoShowFullScreenDMA+0x124>)
 800201a:	4c2e      	ldr	r4, [pc, #184]	; (80020d4 <weoShowFullScreenDMA+0x110>)
 800201c:	46a4      	mov	ip, r4
 800201e:	44bc      	add	ip, r7
 8002020:	4463      	add	r3, ip
 8002022:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 8002024:	187b      	adds	r3, r7, r1
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	0a1b      	lsrs	r3, r3, #8
 800202a:	b2da      	uxtb	r2, r3
 800202c:	4b2e      	ldr	r3, [pc, #184]	; (80020e8 <weoShowFullScreenDMA+0x124>)
 800202e:	4c29      	ldr	r4, [pc, #164]	; (80020d4 <weoShowFullScreenDMA+0x110>)
 8002030:	46a4      	mov	ip, r4
 8002032:	44bc      	add	ip, r7
 8002034:	4463      	add	r3, ip
 8002036:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 8002038:	187b      	adds	r3, r7, r1
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	0c1b      	lsrs	r3, r3, #16
 800203e:	b2da      	uxtb	r2, r3
 8002040:	4b29      	ldr	r3, [pc, #164]	; (80020e8 <weoShowFullScreenDMA+0x124>)
 8002042:	4c24      	ldr	r4, [pc, #144]	; (80020d4 <weoShowFullScreenDMA+0x110>)
 8002044:	46a4      	mov	ip, r4
 8002046:	44bc      	add	ip, r7
 8002048:	4463      	add	r3, ip
 800204a:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 800204c:	187b      	adds	r3, r7, r1
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	0e1b      	lsrs	r3, r3, #24
 8002052:	b2da      	uxtb	r2, r3
 8002054:	4b24      	ldr	r3, [pc, #144]	; (80020e8 <weoShowFullScreenDMA+0x124>)
 8002056:	491f      	ldr	r1, [pc, #124]	; (80020d4 <weoShowFullScreenDMA+0x110>)
 8002058:	468c      	mov	ip, r1
 800205a:	44bc      	add	ip, r7
 800205c:	4463      	add	r3, ip
 800205e:	70da      	strb	r2, [r3, #3]

		GPIOC->ODR &= ~(1 << 15); //reset cs
 8002060:	4b22      	ldr	r3, [pc, #136]	; (80020ec <weoShowFullScreenDMA+0x128>)
 8002062:	695a      	ldr	r2, [r3, #20]
 8002064:	4b21      	ldr	r3, [pc, #132]	; (80020ec <weoShowFullScreenDMA+0x128>)
 8002066:	4922      	ldr	r1, [pc, #136]	; (80020f0 <weoShowFullScreenDMA+0x12c>)
 8002068:	400a      	ands	r2, r1
 800206a:	615a      	str	r2, [r3, #20]

		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 800206c:	1839      	adds	r1, r7, r0
 800206e:	4821      	ldr	r0, [pc, #132]	; (80020f4 <weoShowFullScreenDMA+0x130>)
 8002070:	2332      	movs	r3, #50	; 0x32
 8002072:	2201      	movs	r2, #1
 8002074:	f004 fbbe 	bl	80067f4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 8002078:	2408      	movs	r4, #8
 800207a:	193b      	adds	r3, r7, r4
 800207c:	1cd9      	adds	r1, r3, #3
 800207e:	481d      	ldr	r0, [pc, #116]	; (80020f4 <weoShowFullScreenDMA+0x130>)
 8002080:	2332      	movs	r3, #50	; 0x32
 8002082:	2201      	movs	r2, #1
 8002084:	f004 fbb6 	bl	80067f4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 8002088:	193b      	adds	r3, r7, r4
 800208a:	1c99      	adds	r1, r3, #2
 800208c:	4819      	ldr	r0, [pc, #100]	; (80020f4 <weoShowFullScreenDMA+0x130>)
 800208e:	2332      	movs	r3, #50	; 0x32
 8002090:	2201      	movs	r2, #1
 8002092:	f004 fbaf 	bl	80067f4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 8002096:	193b      	adds	r3, r7, r4
 8002098:	1c59      	adds	r1, r3, #1
 800209a:	4816      	ldr	r0, [pc, #88]	; (80020f4 <weoShowFullScreenDMA+0x130>)
 800209c:	2332      	movs	r3, #50	; 0x32
 800209e:	2201      	movs	r2, #1
 80020a0:	f004 fba8 	bl	80067f4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 80020a4:	1939      	adds	r1, r7, r4
 80020a6:	4813      	ldr	r0, [pc, #76]	; (80020f4 <weoShowFullScreenDMA+0x130>)
 80020a8:	2332      	movs	r3, #50	; 0x32
 80020aa:	2201      	movs	r2, #1
 80020ac:	f004 fba2 	bl	80067f4 <HAL_SPI_Transmit>
		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &MEM_Buffer ,len);
 80020b0:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <weoShowFullScreenDMA+0x114>)
 80020b2:	881a      	ldrh	r2, [r3, #0]
 80020b4:	4910      	ldr	r1, [pc, #64]	; (80020f8 <weoShowFullScreenDMA+0x134>)
 80020b6:	4b0f      	ldr	r3, [pc, #60]	; (80020f4 <weoShowFullScreenDMA+0x130>)
 80020b8:	0018      	movs	r0, r3
 80020ba:	f005 f811 	bl	80070e0 <HAL_SPI_Receive_DMA>
	}
 80020be:	46c0      	nop			; (mov r8, r8)
 80020c0:	0018      	movs	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	4b0d      	ldr	r3, [pc, #52]	; (80020fc <weoShowFullScreenDMA+0x138>)
 80020c6:	449d      	add	sp, r3
 80020c8:	bd90      	pop	{r4, r7, pc}
 80020ca:	46c0      	nop			; (mov r8, r8)
 80020cc:	ffffdfe4 	.word	0xffffdfe4
 80020d0:	ffffdfef 	.word	0xffffdfef
 80020d4:	00002018 	.word	0x00002018
 80020d8:	200035d8 	.word	0x200035d8
 80020dc:	20003132 	.word	0x20003132
 80020e0:	00002013 	.word	0x00002013
 80020e4:	00002014 	.word	0x00002014
 80020e8:	ffffdff0 	.word	0xffffdff0
 80020ec:	50000800 	.word	0x50000800
 80020f0:	ffff7fff 	.word	0xffff7fff
 80020f4:	200031b0 	.word	0x200031b0
 80020f8:	200035e0 	.word	0x200035e0
 80020fc:	0000201c 	.word	0x0000201c

08002100 <weoShowSmallImage>:
//==========================================================================================================================
	uint8_t weoShowSmallImage(uint8_t picNum, uint8_t imX, uint8_t imY) {
 8002100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002102:	46c6      	mov	lr, r8
 8002104:	b500      	push	{lr}
 8002106:	4caa      	ldr	r4, [pc, #680]	; (80023b0 <weoShowSmallImage+0x2b0>)
 8002108:	44a5      	add	sp, r4
 800210a:	af02      	add	r7, sp, #8
 800210c:	0004      	movs	r4, r0
 800210e:	0008      	movs	r0, r1
 8002110:	0011      	movs	r1, r2
 8002112:	4ba8      	ldr	r3, [pc, #672]	; (80023b4 <weoShowSmallImage+0x2b4>)
 8002114:	4aa8      	ldr	r2, [pc, #672]	; (80023b8 <weoShowSmallImage+0x2b8>)
 8002116:	4694      	mov	ip, r2
 8002118:	44bc      	add	ip, r7
 800211a:	4463      	add	r3, ip
 800211c:	1c22      	adds	r2, r4, #0
 800211e:	701a      	strb	r2, [r3, #0]
 8002120:	4ba6      	ldr	r3, [pc, #664]	; (80023bc <weoShowSmallImage+0x2bc>)
 8002122:	4aa5      	ldr	r2, [pc, #660]	; (80023b8 <weoShowSmallImage+0x2b8>)
 8002124:	4694      	mov	ip, r2
 8002126:	44bc      	add	ip, r7
 8002128:	4463      	add	r3, ip
 800212a:	1c02      	adds	r2, r0, #0
 800212c:	701a      	strb	r2, [r3, #0]
 800212e:	4ba4      	ldr	r3, [pc, #656]	; (80023c0 <weoShowSmallImage+0x2c0>)
 8002130:	4aa1      	ldr	r2, [pc, #644]	; (80023b8 <weoShowSmallImage+0x2b8>)
 8002132:	4694      	mov	ip, r2
 8002134:	44bc      	add	ip, r7
 8002136:	4463      	add	r3, ip
 8002138:	1c0a      	adds	r2, r1, #0
 800213a:	701a      	strb	r2, [r3, #0]
		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H;
		uint8_t MEM_Buffer[8192];
		uint8_t imInfo[2],addrArray[4];
		uint16_t i, len;
		uint32_t addr,addrData;
		addr=0x00000000;
 800213c:	2300      	movs	r3, #0
 800213e:	49a1      	ldr	r1, [pc, #644]	; (80023c4 <weoShowSmallImage+0x2c4>)
 8002140:	187a      	adds	r2, r7, r1
 8002142:	6013      	str	r3, [r2, #0]
		memCMD = 0x13; //read command with 4-byte address
 8002144:	4ea0      	ldr	r6, [pc, #640]	; (80023c8 <weoShowSmallImage+0x2c8>)
 8002146:	19bb      	adds	r3, r7, r6
 8002148:	2213      	movs	r2, #19
 800214a:	701a      	strb	r2, [r3, #0]
		//look at info about image
		addr=(picNum*0x2000)+0x3C000;// the right path is to multiply picNum * image repeat period!
 800214c:	4b99      	ldr	r3, [pc, #612]	; (80023b4 <weoShowSmallImage+0x2b4>)
 800214e:	4a9a      	ldr	r2, [pc, #616]	; (80023b8 <weoShowSmallImage+0x2b8>)
 8002150:	4694      	mov	ip, r2
 8002152:	44bc      	add	ip, r7
 8002154:	4463      	add	r3, ip
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	331e      	adds	r3, #30
 800215a:	035b      	lsls	r3, r3, #13
 800215c:	187a      	adds	r2, r7, r1
 800215e:	6013      	str	r3, [r2, #0]
//		addr=(picNum*0x2000);

		addrData=addr+0x02;
 8002160:	187b      	adds	r3, r7, r1
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	3302      	adds	r3, #2
 8002166:	4d99      	ldr	r5, [pc, #612]	; (80023cc <weoShowSmallImage+0x2cc>)
 8002168:	197a      	adds	r2, r7, r5
 800216a:	6013      	str	r3, [r2, #0]

		addrArray[0]=addr & 0xFF;
 800216c:	187b      	adds	r3, r7, r1
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	b2da      	uxtb	r2, r3
 8002172:	4b97      	ldr	r3, [pc, #604]	; (80023d0 <weoShowSmallImage+0x2d0>)
 8002174:	4890      	ldr	r0, [pc, #576]	; (80023b8 <weoShowSmallImage+0x2b8>)
 8002176:	4684      	mov	ip, r0
 8002178:	44bc      	add	ip, r7
 800217a:	4463      	add	r3, ip
 800217c:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 800217e:	187b      	adds	r3, r7, r1
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	0a1b      	lsrs	r3, r3, #8
 8002184:	b2da      	uxtb	r2, r3
 8002186:	4b92      	ldr	r3, [pc, #584]	; (80023d0 <weoShowSmallImage+0x2d0>)
 8002188:	488b      	ldr	r0, [pc, #556]	; (80023b8 <weoShowSmallImage+0x2b8>)
 800218a:	4684      	mov	ip, r0
 800218c:	44bc      	add	ip, r7
 800218e:	4463      	add	r3, ip
 8002190:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 8002192:	187b      	adds	r3, r7, r1
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	0c1b      	lsrs	r3, r3, #16
 8002198:	b2da      	uxtb	r2, r3
 800219a:	4b8d      	ldr	r3, [pc, #564]	; (80023d0 <weoShowSmallImage+0x2d0>)
 800219c:	4886      	ldr	r0, [pc, #536]	; (80023b8 <weoShowSmallImage+0x2b8>)
 800219e:	4684      	mov	ip, r0
 80021a0:	44bc      	add	ip, r7
 80021a2:	4463      	add	r3, ip
 80021a4:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 80021a6:	187b      	adds	r3, r7, r1
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	0e1b      	lsrs	r3, r3, #24
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	4b88      	ldr	r3, [pc, #544]	; (80023d0 <weoShowSmallImage+0x2d0>)
 80021b0:	4981      	ldr	r1, [pc, #516]	; (80023b8 <weoShowSmallImage+0x2b8>)
 80021b2:	468c      	mov	ip, r1
 80021b4:	44bc      	add	ip, r7
 80021b6:	4463      	add	r3, ip
 80021b8:	70da      	strb	r2, [r3, #3]

		GPIOC->ODR &= ~(1 << 15); //reset cs
 80021ba:	4b86      	ldr	r3, [pc, #536]	; (80023d4 <weoShowSmallImage+0x2d4>)
 80021bc:	695a      	ldr	r2, [r3, #20]
 80021be:	4b85      	ldr	r3, [pc, #532]	; (80023d4 <weoShowSmallImage+0x2d4>)
 80021c0:	4985      	ldr	r1, [pc, #532]	; (80023d8 <weoShowSmallImage+0x2d8>)
 80021c2:	400a      	ands	r2, r1
 80021c4:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 80021c6:	19b9      	adds	r1, r7, r6
 80021c8:	4884      	ldr	r0, [pc, #528]	; (80023dc <weoShowSmallImage+0x2dc>)
 80021ca:	2332      	movs	r3, #50	; 0x32
 80021cc:	2201      	movs	r2, #1
 80021ce:	f004 fb11 	bl	80067f4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 80021d2:	2408      	movs	r4, #8
 80021d4:	193b      	adds	r3, r7, r4
 80021d6:	1cd9      	adds	r1, r3, #3
 80021d8:	4880      	ldr	r0, [pc, #512]	; (80023dc <weoShowSmallImage+0x2dc>)
 80021da:	2332      	movs	r3, #50	; 0x32
 80021dc:	2201      	movs	r2, #1
 80021de:	f004 fb09 	bl	80067f4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 80021e2:	193b      	adds	r3, r7, r4
 80021e4:	1c99      	adds	r1, r3, #2
 80021e6:	487d      	ldr	r0, [pc, #500]	; (80023dc <weoShowSmallImage+0x2dc>)
 80021e8:	2332      	movs	r3, #50	; 0x32
 80021ea:	2201      	movs	r2, #1
 80021ec:	f004 fb02 	bl	80067f4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 80021f0:	193b      	adds	r3, r7, r4
 80021f2:	1c59      	adds	r1, r3, #1
 80021f4:	4879      	ldr	r0, [pc, #484]	; (80023dc <weoShowSmallImage+0x2dc>)
 80021f6:	2332      	movs	r3, #50	; 0x32
 80021f8:	2201      	movs	r2, #1
 80021fa:	f004 fafb 	bl	80067f4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 80021fe:	1939      	adds	r1, r7, r4
 8002200:	4876      	ldr	r0, [pc, #472]	; (80023dc <weoShowSmallImage+0x2dc>)
 8002202:	2332      	movs	r3, #50	; 0x32
 8002204:	2201      	movs	r2, #1
 8002206:	f004 faf5 	bl	80067f4 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &imInfo,2, 5000);
 800220a:	4b75      	ldr	r3, [pc, #468]	; (80023e0 <weoShowSmallImage+0x2e0>)
 800220c:	220c      	movs	r2, #12
 800220e:	18b9      	adds	r1, r7, r2
 8002210:	4872      	ldr	r0, [pc, #456]	; (80023dc <weoShowSmallImage+0x2dc>)
 8002212:	2202      	movs	r2, #2
 8002214:	f004 fc46 	bl	8006aa4 <HAL_SPI_Receive>
		GPIOC->ODR |= 1 << 15; // set cs
 8002218:	4b6e      	ldr	r3, [pc, #440]	; (80023d4 <weoShowSmallImage+0x2d4>)
 800221a:	695a      	ldr	r2, [r3, #20]
 800221c:	4b6d      	ldr	r3, [pc, #436]	; (80023d4 <weoShowSmallImage+0x2d4>)
 800221e:	2180      	movs	r1, #128	; 0x80
 8002220:	0209      	lsls	r1, r1, #8
 8002222:	430a      	orrs	r2, r1
 8002224:	615a      	str	r2, [r3, #20]

		width=imInfo[0];
 8002226:	496f      	ldr	r1, [pc, #444]	; (80023e4 <weoShowSmallImage+0x2e4>)
 8002228:	187b      	adds	r3, r7, r1
 800222a:	4a6f      	ldr	r2, [pc, #444]	; (80023e8 <weoShowSmallImage+0x2e8>)
 800222c:	4862      	ldr	r0, [pc, #392]	; (80023b8 <weoShowSmallImage+0x2b8>)
 800222e:	4684      	mov	ip, r0
 8002230:	44bc      	add	ip, r7
 8002232:	4462      	add	r2, ip
 8002234:	7812      	ldrb	r2, [r2, #0]
 8002236:	701a      	strb	r2, [r3, #0]
		height=imInfo[1];
 8002238:	486c      	ldr	r0, [pc, #432]	; (80023ec <weoShowSmallImage+0x2ec>)
 800223a:	4680      	mov	r8, r0
 800223c:	44b8      	add	r8, r7
 800223e:	4a6a      	ldr	r2, [pc, #424]	; (80023e8 <weoShowSmallImage+0x2e8>)
 8002240:	4b5d      	ldr	r3, [pc, #372]	; (80023b8 <weoShowSmallImage+0x2b8>)
 8002242:	469c      	mov	ip, r3
 8002244:	44bc      	add	ip, r7
 8002246:	4462      	add	r2, ip
 8002248:	7852      	ldrb	r2, [r2, #1]
 800224a:	4643      	mov	r3, r8
 800224c:	701a      	strb	r2, [r3, #0]

		len=((width/2)*(height+1));
 800224e:	187b      	adds	r3, r7, r1
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	085b      	lsrs	r3, r3, #1
 8002254:	b2db      	uxtb	r3, r3
 8002256:	b29a      	uxth	r2, r3
 8002258:	183b      	adds	r3, r7, r0
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	3301      	adds	r3, #1
 800225e:	b299      	uxth	r1, r3
 8002260:	4b63      	ldr	r3, [pc, #396]	; (80023f0 <weoShowSmallImage+0x2f0>)
 8002262:	18fb      	adds	r3, r7, r3
 8002264:	434a      	muls	r2, r1
 8002266:	801a      	strh	r2, [r3, #0]
		addrArray[0]=addrData & 0xFF;
 8002268:	197a      	adds	r2, r7, r5
 800226a:	6813      	ldr	r3, [r2, #0]
 800226c:	b2da      	uxtb	r2, r3
 800226e:	4b58      	ldr	r3, [pc, #352]	; (80023d0 <weoShowSmallImage+0x2d0>)
 8002270:	4951      	ldr	r1, [pc, #324]	; (80023b8 <weoShowSmallImage+0x2b8>)
 8002272:	468c      	mov	ip, r1
 8002274:	44bc      	add	ip, r7
 8002276:	4463      	add	r3, ip
 8002278:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addrData >> 8) & 0xFF;
 800227a:	197a      	adds	r2, r7, r5
 800227c:	6813      	ldr	r3, [r2, #0]
 800227e:	0a1b      	lsrs	r3, r3, #8
 8002280:	b2da      	uxtb	r2, r3
 8002282:	4b53      	ldr	r3, [pc, #332]	; (80023d0 <weoShowSmallImage+0x2d0>)
 8002284:	494c      	ldr	r1, [pc, #304]	; (80023b8 <weoShowSmallImage+0x2b8>)
 8002286:	468c      	mov	ip, r1
 8002288:	44bc      	add	ip, r7
 800228a:	4463      	add	r3, ip
 800228c:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addrData >> 16) & 0xFF;
 800228e:	197a      	adds	r2, r7, r5
 8002290:	6813      	ldr	r3, [r2, #0]
 8002292:	0c1b      	lsrs	r3, r3, #16
 8002294:	b2da      	uxtb	r2, r3
 8002296:	4b4e      	ldr	r3, [pc, #312]	; (80023d0 <weoShowSmallImage+0x2d0>)
 8002298:	4947      	ldr	r1, [pc, #284]	; (80023b8 <weoShowSmallImage+0x2b8>)
 800229a:	468c      	mov	ip, r1
 800229c:	44bc      	add	ip, r7
 800229e:	4463      	add	r3, ip
 80022a0:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addrData >> 24) & 0xFF;
 80022a2:	197a      	adds	r2, r7, r5
 80022a4:	6813      	ldr	r3, [r2, #0]
 80022a6:	0e1b      	lsrs	r3, r3, #24
 80022a8:	b2da      	uxtb	r2, r3
 80022aa:	4b49      	ldr	r3, [pc, #292]	; (80023d0 <weoShowSmallImage+0x2d0>)
 80022ac:	4d42      	ldr	r5, [pc, #264]	; (80023b8 <weoShowSmallImage+0x2b8>)
 80022ae:	46ac      	mov	ip, r5
 80022b0:	44bc      	add	ip, r7
 80022b2:	4463      	add	r3, ip
 80022b4:	70da      	strb	r2, [r3, #3]

		USART2->ICR|=USART_ICR_ORECF;
 80022b6:	4b4f      	ldr	r3, [pc, #316]	; (80023f4 <weoShowSmallImage+0x2f4>)
 80022b8:	6a1a      	ldr	r2, [r3, #32]
 80022ba:	4b4e      	ldr	r3, [pc, #312]	; (80023f4 <weoShowSmallImage+0x2f4>)
 80022bc:	2108      	movs	r1, #8
 80022be:	430a      	orrs	r2, r1
 80022c0:	621a      	str	r2, [r3, #32]
		memCMD = 0x13; //read command with 4-byte address
 80022c2:	19bb      	adds	r3, r7, r6
 80022c4:	2213      	movs	r2, #19
 80022c6:	701a      	strb	r2, [r3, #0]

		GPIOC->ODR &= ~(1 << 15);	//reset cs
 80022c8:	4b42      	ldr	r3, [pc, #264]	; (80023d4 <weoShowSmallImage+0x2d4>)
 80022ca:	695a      	ldr	r2, [r3, #20]
 80022cc:	4b41      	ldr	r3, [pc, #260]	; (80023d4 <weoShowSmallImage+0x2d4>)
 80022ce:	4942      	ldr	r1, [pc, #264]	; (80023d8 <weoShowSmallImage+0x2d8>)
 80022d0:	400a      	ands	r2, r1
 80022d2:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50);//read command with 4-byte address
 80022d4:	19b9      	adds	r1, r7, r6
 80022d6:	4841      	ldr	r0, [pc, #260]	; (80023dc <weoShowSmallImage+0x2dc>)
 80022d8:	2332      	movs	r3, #50	; 0x32
 80022da:	2201      	movs	r2, #1
 80022dc:	f004 fa8a 	bl	80067f4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3],1, 50);	//send address
 80022e0:	193b      	adds	r3, r7, r4
 80022e2:	1cd9      	adds	r1, r3, #3
 80022e4:	483d      	ldr	r0, [pc, #244]	; (80023dc <weoShowSmallImage+0x2dc>)
 80022e6:	2332      	movs	r3, #50	; 0x32
 80022e8:	2201      	movs	r2, #1
 80022ea:	f004 fa83 	bl	80067f4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2],1, 50);	//send address
 80022ee:	193b      	adds	r3, r7, r4
 80022f0:	1c99      	adds	r1, r3, #2
 80022f2:	483a      	ldr	r0, [pc, #232]	; (80023dc <weoShowSmallImage+0x2dc>)
 80022f4:	2332      	movs	r3, #50	; 0x32
 80022f6:	2201      	movs	r2, #1
 80022f8:	f004 fa7c 	bl	80067f4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1],1, 50);	//send address
 80022fc:	193b      	adds	r3, r7, r4
 80022fe:	1c59      	adds	r1, r3, #1
 8002300:	4836      	ldr	r0, [pc, #216]	; (80023dc <weoShowSmallImage+0x2dc>)
 8002302:	2332      	movs	r3, #50	; 0x32
 8002304:	2201      	movs	r2, #1
 8002306:	f004 fa75 	bl	80067f4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0],1, 50);	//send address
 800230a:	1939      	adds	r1, r7, r4
 800230c:	4833      	ldr	r0, [pc, #204]	; (80023dc <weoShowSmallImage+0x2dc>)
 800230e:	2332      	movs	r3, #50	; 0x32
 8002310:	2201      	movs	r2, #1
 8002312:	f004 fa6f 	bl	80067f4 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,len, 5000);// 7 information bits about the image
 8002316:	4c32      	ldr	r4, [pc, #200]	; (80023e0 <weoShowSmallImage+0x2e0>)
 8002318:	4b35      	ldr	r3, [pc, #212]	; (80023f0 <weoShowSmallImage+0x2f0>)
 800231a:	18fb      	adds	r3, r7, r3
 800231c:	881a      	ldrh	r2, [r3, #0]
 800231e:	2510      	movs	r5, #16
 8002320:	1979      	adds	r1, r7, r5
 8002322:	482e      	ldr	r0, [pc, #184]	; (80023dc <weoShowSmallImage+0x2dc>)
 8002324:	0023      	movs	r3, r4
 8002326:	f004 fbbd 	bl	8006aa4 <HAL_SPI_Receive>
		GPIOC->ODR |= 1 << 15;	// set cs
 800232a:	4b2a      	ldr	r3, [pc, #168]	; (80023d4 <weoShowSmallImage+0x2d4>)
 800232c:	695a      	ldr	r2, [r3, #20]
 800232e:	4b29      	ldr	r3, [pc, #164]	; (80023d4 <weoShowSmallImage+0x2d4>)
 8002330:	2180      	movs	r1, #128	; 0x80
 8002332:	0209      	lsls	r1, r1, #8
 8002334:	430a      	orrs	r2, r1
 8002336:	615a      	str	r2, [r3, #20]
		weoDrawRectangleFilled(imX, imY, (imX+width-0x01), (imY+height-0x01), 0xFF,MEM_Buffer);	// Здесь ещё работает 0xFF - затычка
 8002338:	4b20      	ldr	r3, [pc, #128]	; (80023bc <weoShowSmallImage+0x2bc>)
 800233a:	4e1f      	ldr	r6, [pc, #124]	; (80023b8 <weoShowSmallImage+0x2b8>)
 800233c:	19ba      	adds	r2, r7, r6
 800233e:	18d2      	adds	r2, r2, r3
 8002340:	4928      	ldr	r1, [pc, #160]	; (80023e4 <weoShowSmallImage+0x2e4>)
 8002342:	187b      	adds	r3, r7, r1
 8002344:	7812      	ldrb	r2, [r2, #0]
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	18d3      	adds	r3, r2, r3
 800234a:	b2db      	uxtb	r3, r3
 800234c:	3b01      	subs	r3, #1
 800234e:	b2dc      	uxtb	r4, r3
 8002350:	4b1b      	ldr	r3, [pc, #108]	; (80023c0 <weoShowSmallImage+0x2c0>)
 8002352:	19ba      	adds	r2, r7, r6
 8002354:	18d2      	adds	r2, r2, r3
 8002356:	4825      	ldr	r0, [pc, #148]	; (80023ec <weoShowSmallImage+0x2ec>)
 8002358:	183b      	adds	r3, r7, r0
 800235a:	7812      	ldrb	r2, [r2, #0]
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	18d3      	adds	r3, r2, r3
 8002360:	b2db      	uxtb	r3, r3
 8002362:	3b01      	subs	r3, #1
 8002364:	b2da      	uxtb	r2, r3
 8002366:	4b16      	ldr	r3, [pc, #88]	; (80023c0 <weoShowSmallImage+0x2c0>)
 8002368:	4913      	ldr	r1, [pc, #76]	; (80023b8 <weoShowSmallImage+0x2b8>)
 800236a:	468c      	mov	ip, r1
 800236c:	44bc      	add	ip, r7
 800236e:	4463      	add	r3, ip
 8002370:	7819      	ldrb	r1, [r3, #0]
 8002372:	4b12      	ldr	r3, [pc, #72]	; (80023bc <weoShowSmallImage+0x2bc>)
 8002374:	4810      	ldr	r0, [pc, #64]	; (80023b8 <weoShowSmallImage+0x2b8>)
 8002376:	4684      	mov	ip, r0
 8002378:	44bc      	add	ip, r7
 800237a:	4463      	add	r3, ip
 800237c:	7818      	ldrb	r0, [r3, #0]
 800237e:	197b      	adds	r3, r7, r5
 8002380:	9301      	str	r3, [sp, #4]
 8002382:	23ff      	movs	r3, #255	; 0xff
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	0013      	movs	r3, r2
 8002388:	0022      	movs	r2, r4
 800238a:	f7ff f815 	bl	80013b8 <weoDrawRectangleFilled>
		GPIOC->ODR |= 1 << 6;	//set BF
 800238e:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <weoShowSmallImage+0x2d4>)
 8002390:	695a      	ldr	r2, [r3, #20]
 8002392:	4b10      	ldr	r3, [pc, #64]	; (80023d4 <weoShowSmallImage+0x2d4>)
 8002394:	2140      	movs	r1, #64	; 0x40
 8002396:	430a      	orrs	r2, r1
 8002398:	615a      	str	r2, [r3, #20]
		cmd2Execute=0;
 800239a:	4b17      	ldr	r3, [pc, #92]	; (80023f8 <weoShowSmallImage+0x2f8>)
 800239c:	2200      	movs	r2, #0
 800239e:	701a      	strb	r2, [r3, #0]
	}
 80023a0:	46c0      	nop			; (mov r8, r8)
 80023a2:	0018      	movs	r0, r3
 80023a4:	46bd      	mov	sp, r7
 80023a6:	4b04      	ldr	r3, [pc, #16]	; (80023b8 <weoShowSmallImage+0x2b8>)
 80023a8:	449d      	add	sp, r3
 80023aa:	bc80      	pop	{r7}
 80023ac:	46b8      	mov	r8, r7
 80023ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023b0:	ffffdfd8 	.word	0xffffdfd8
 80023b4:	ffffdfe7 	.word	0xffffdfe7
 80023b8:	00002020 	.word	0x00002020
 80023bc:	ffffdfe6 	.word	0xffffdfe6
 80023c0:	ffffdfe5 	.word	0xffffdfe5
 80023c4:	0000201c 	.word	0x0000201c
 80023c8:	00002013 	.word	0x00002013
 80023cc:	00002018 	.word	0x00002018
 80023d0:	ffffdfe8 	.word	0xffffdfe8
 80023d4:	50000800 	.word	0x50000800
 80023d8:	ffff7fff 	.word	0xffff7fff
 80023dc:	200031b0 	.word	0x200031b0
 80023e0:	00001388 	.word	0x00001388
 80023e4:	00002017 	.word	0x00002017
 80023e8:	ffffdfec 	.word	0xffffdfec
 80023ec:	00002016 	.word	0x00002016
 80023f0:	00002014 	.word	0x00002014
 80023f4:	40004400 	.word	0x40004400
 80023f8:	2000345a 	.word	0x2000345a

080023fc <MEM_GetID>:
		dat = 0x04;
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 5);//write disable Is it neccessary, if WP pin is used????????????????????????????
		GPIOC->ODR |= 1 << 15;	// set cs
//    GPIOC->ODR &= ~(1 << 14);//Write Disable
	}
	uint32_t MEM_GetID(void) {
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
		uint8_t dat;
		uint8_t tmp[1] = { 0x00 };
 8002402:	1d3b      	adds	r3, r7, #4
 8002404:	4a29      	ldr	r2, [pc, #164]	; (80024ac <MEM_GetID+0xb0>)
 8002406:	7812      	ldrb	r2, [r2, #0]
 8002408:	701a      	strb	r2, [r3, #0]
		dat = 0x9E;
 800240a:	1dfb      	adds	r3, r7, #7
 800240c:	229e      	movs	r2, #158	; 0x9e
 800240e:	701a      	strb	r2, [r3, #0]
		GPIOC->ODR &= ~(1 << 15);	//reset cs
 8002410:	4b27      	ldr	r3, [pc, #156]	; (80024b0 <MEM_GetID+0xb4>)
 8002412:	695a      	ldr	r2, [r3, #20]
 8002414:	4b26      	ldr	r3, [pc, #152]	; (80024b0 <MEM_GetID+0xb4>)
 8002416:	4927      	ldr	r1, [pc, #156]	; (80024b4 <MEM_GetID+0xb8>)
 8002418:	400a      	ands	r2, r1
 800241a:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 50);	//read ID command
 800241c:	1df9      	adds	r1, r7, #7
 800241e:	4826      	ldr	r0, [pc, #152]	; (80024b8 <MEM_GetID+0xbc>)
 8002420:	2332      	movs	r3, #50	; 0x32
 8002422:	2201      	movs	r2, #1
 8002424:	f004 f9e6 	bl	80067f4 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002428:	23fa      	movs	r3, #250	; 0xfa
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	1d39      	adds	r1, r7, #4
 800242e:	4822      	ldr	r0, [pc, #136]	; (80024b8 <MEM_GetID+0xbc>)
 8002430:	2201      	movs	r2, #1
 8002432:	f004 fb37 	bl	8006aa4 <HAL_SPI_Receive>
		MEM_ID = (uint32_t) tmp[0];
 8002436:	1d3b      	adds	r3, r7, #4
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	001a      	movs	r2, r3
 800243c:	4b1f      	ldr	r3, [pc, #124]	; (80024bc <MEM_GetID+0xc0>)
 800243e:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;                    			//MSB
 8002440:	4b1e      	ldr	r3, [pc, #120]	; (80024bc <MEM_GetID+0xc0>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	021a      	lsls	r2, r3, #8
 8002446:	4b1d      	ldr	r3, [pc, #116]	; (80024bc <MEM_GetID+0xc0>)
 8002448:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 800244a:	23fa      	movs	r3, #250	; 0xfa
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	1d39      	adds	r1, r7, #4
 8002450:	4819      	ldr	r0, [pc, #100]	; (80024b8 <MEM_GetID+0xbc>)
 8002452:	2201      	movs	r2, #1
 8002454:	f004 fb26 	bl	8006aa4 <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8002458:	1d3b      	adds	r3, r7, #4
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	001a      	movs	r2, r3
 800245e:	4b17      	ldr	r3, [pc, #92]	; (80024bc <MEM_GetID+0xc0>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	18d2      	adds	r2, r2, r3
 8002464:	4b15      	ldr	r3, [pc, #84]	; (80024bc <MEM_GetID+0xc0>)
 8002466:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;
 8002468:	4b14      	ldr	r3, [pc, #80]	; (80024bc <MEM_GetID+0xc0>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	021a      	lsls	r2, r3, #8
 800246e:	4b13      	ldr	r3, [pc, #76]	; (80024bc <MEM_GetID+0xc0>)
 8002470:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002472:	23fa      	movs	r3, #250	; 0xfa
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	1d39      	adds	r1, r7, #4
 8002478:	480f      	ldr	r0, [pc, #60]	; (80024b8 <MEM_GetID+0xbc>)
 800247a:	2201      	movs	r2, #1
 800247c:	f004 fb12 	bl	8006aa4 <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8002480:	1d3b      	adds	r3, r7, #4
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	001a      	movs	r2, r3
 8002486:	4b0d      	ldr	r3, [pc, #52]	; (80024bc <MEM_GetID+0xc0>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	18d2      	adds	r2, r2, r3
 800248c:	4b0b      	ldr	r3, [pc, #44]	; (80024bc <MEM_GetID+0xc0>)
 800248e:	601a      	str	r2, [r3, #0]
		GPIOC->ODR |= 1 << 15;                    			// set cs
 8002490:	4b07      	ldr	r3, [pc, #28]	; (80024b0 <MEM_GetID+0xb4>)
 8002492:	695a      	ldr	r2, [r3, #20]
 8002494:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <MEM_GetID+0xb4>)
 8002496:	2180      	movs	r1, #128	; 0x80
 8002498:	0209      	lsls	r1, r1, #8
 800249a:	430a      	orrs	r2, r1
 800249c:	615a      	str	r2, [r3, #20]
		return (MEM_ID);
 800249e:	4b07      	ldr	r3, [pc, #28]	; (80024bc <MEM_GetID+0xc0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
	}
 80024a2:	0018      	movs	r0, r3
 80024a4:	46bd      	mov	sp, r7
 80024a6:	b002      	add	sp, #8
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	46c0      	nop			; (mov r8, r8)
 80024ac:	0800a7a4 	.word	0x0800a7a4
 80024b0:	50000800 	.word	0x50000800
 80024b4:	ffff7fff 	.word	0xffff7fff
 80024b8:	200031b0 	.word	0x200031b0
 80024bc:	2000315c 	.word	0x2000315c

080024c0 <cmdExecute>:

	uint16_t Scount(void){

	}
//====================================================================================================================
	uint8_t cmdExecute(uint8_t cmd2Execute){
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	0002      	movs	r2, r0
 80024c8:	1dfb      	adds	r3, r7, #7
 80024ca:	701a      	strb	r2, [r3, #0]
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 80024cc:	4b34      	ldr	r3, [pc, #208]	; (80025a0 <cmdExecute+0xe0>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	2b10      	cmp	r3, #16
 80024d2:	d05e      	beq.n	8002592 <cmdExecute+0xd2>
			if (bf4me!=0x00){return;}	// protection against false BF resets
 80024d4:	4b33      	ldr	r3, [pc, #204]	; (80025a4 <cmdExecute+0xe4>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d15c      	bne.n	8002596 <cmdExecute+0xd6>
		USART2->ICR|=USART_ICR_ORECF;
 80024dc:	4b32      	ldr	r3, [pc, #200]	; (80025a8 <cmdExecute+0xe8>)
 80024de:	6a1a      	ldr	r2, [r3, #32]
 80024e0:	4b31      	ldr	r3, [pc, #196]	; (80025a8 <cmdExecute+0xe8>)
 80024e2:	2108      	movs	r1, #8
 80024e4:	430a      	orrs	r2, r1
 80024e6:	621a      	str	r2, [r3, #32]

				}
		if(cmd2Execute==0x10){

				}
		if(cmd2Execute==0x11){
 80024e8:	1dfb      	adds	r3, r7, #7
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2b11      	cmp	r3, #17
 80024ee:	d107      	bne.n	8002500 <cmdExecute+0x40>
			bf4me=0x11;	//set BF flag 4 me
 80024f0:	4b2c      	ldr	r3, [pc, #176]	; (80025a4 <cmdExecute+0xe4>)
 80024f2:	2211      	movs	r2, #17
 80024f4:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
//			weoShowFullScreen(picNum);
			weoShowFullScreenDMA(picNum);
 80024f6:	4b2d      	ldr	r3, [pc, #180]	; (80025ac <cmdExecute+0xec>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	0018      	movs	r0, r3
 80024fc:	f7ff fd62 	bl	8001fc4 <weoShowFullScreenDMA>
				}
		if(cmd2Execute==0x12){
 8002500:	1dfb      	adds	r3, r7, #7
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	2b12      	cmp	r3, #18
 8002506:	d10d      	bne.n	8002524 <cmdExecute+0x64>
			bf4me=0x12;	//set BF flag 4 me
 8002508:	4b26      	ldr	r3, [pc, #152]	; (80025a4 <cmdExecute+0xe4>)
 800250a:	2212      	movs	r2, #18
 800250c:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
//			weoShowSmallImageDMA(picNum,imX,imY);
			weoShowSmallImage(picNum,imX,imY);
 800250e:	4b27      	ldr	r3, [pc, #156]	; (80025ac <cmdExecute+0xec>)
 8002510:	7818      	ldrb	r0, [r3, #0]
 8002512:	4b27      	ldr	r3, [pc, #156]	; (80025b0 <cmdExecute+0xf0>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	b2d9      	uxtb	r1, r3
 8002518:	4b26      	ldr	r3, [pc, #152]	; (80025b4 <cmdExecute+0xf4>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	b2db      	uxtb	r3, r3
 800251e:	001a      	movs	r2, r3
 8002520:	f7ff fdee 	bl	8002100 <weoShowSmallImage>
				}
		if(cmd2Execute==0x13){
 8002524:	1dfb      	adds	r3, r7, #7
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2b13      	cmp	r3, #19
 800252a:	d10d      	bne.n	8002548 <cmdExecute+0x88>
			bf4me=0x13;	//set BF flag 4 me
 800252c:	4b1d      	ldr	r3, [pc, #116]	; (80025a4 <cmdExecute+0xe4>)
 800252e:	2213      	movs	r2, #19
 8002530:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF

//			printASCIIarray_old(imX,imY, strLen,dataASCII);
			printASCIIarray(imX,imY, strLen,dataASCII);
 8002532:	4b1f      	ldr	r3, [pc, #124]	; (80025b0 <cmdExecute+0xf0>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	b2d8      	uxtb	r0, r3
 8002538:	4b1e      	ldr	r3, [pc, #120]	; (80025b4 <cmdExecute+0xf4>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	b2d9      	uxtb	r1, r3
 800253e:	4b1e      	ldr	r3, [pc, #120]	; (80025b8 <cmdExecute+0xf8>)
 8002540:	781a      	ldrb	r2, [r3, #0]
 8002542:	4b1e      	ldr	r3, [pc, #120]	; (80025bc <cmdExecute+0xfc>)
 8002544:	f000 f83c 	bl	80025c0 <printASCIIarray>
				}
		if(cmd2Execute==0x14){
 8002548:	1dfb      	adds	r3, r7, #7
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2b14      	cmp	r3, #20
 800254e:	d102      	bne.n	8002556 <cmdExecute+0x96>
			bf4me=0x14;	//set BF flag 4 me
 8002550:	4b14      	ldr	r3, [pc, #80]	; (80025a4 <cmdExecute+0xe4>)
 8002552:	2214      	movs	r2, #20
 8002554:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF


				}
		if(cmd2Execute==0x15){
 8002556:	1dfb      	adds	r3, r7, #7
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b15      	cmp	r3, #21
 800255c:	d108      	bne.n	8002570 <cmdExecute+0xb0>
			if(cmd[3]==0x00){
 800255e:	4b10      	ldr	r3, [pc, #64]	; (80025a0 <cmdExecute+0xe0>)
 8002560:	78db      	ldrb	r3, [r3, #3]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <cmdExecute+0xaa>
				weoClear();
 8002566:	f7fe fec3 	bl	80012f0 <weoClear>
			}
			bf4me=0x15;	//set BF flag 4 me
 800256a:	4b0e      	ldr	r3, [pc, #56]	; (80025a4 <cmdExecute+0xe4>)
 800256c:	2215      	movs	r2, #21
 800256e:	701a      	strb	r2, [r3, #0]
				}
		if(cmd2Execute==0x16){
 8002570:	1dfb      	adds	r3, r7, #7
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2b16      	cmp	r3, #22
 8002576:	d102      	bne.n	800257e <cmdExecute+0xbe>
			bf4me=0x16;	//set BF flag 4 me
 8002578:	4b0a      	ldr	r3, [pc, #40]	; (80025a4 <cmdExecute+0xe4>)
 800257a:	2216      	movs	r2, #22
 800257c:	701a      	strb	r2, [r3, #0]

				}
		if(cmd2Execute==0x00){

				}
		if(cmd2Execute=0x00){
 800257e:	1dfb      	adds	r3, r7, #7
 8002580:	2200      	movs	r2, #0
 8002582:	701a      	strb	r2, [r3, #0]

				}
//			}
//		}
		USART2->ICR|=USART_ICR_ORECF;
 8002584:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <cmdExecute+0xe8>)
 8002586:	6a1a      	ldr	r2, [r3, #32]
 8002588:	4b07      	ldr	r3, [pc, #28]	; (80025a8 <cmdExecute+0xe8>)
 800258a:	2108      	movs	r1, #8
 800258c:	430a      	orrs	r2, r1
 800258e:	621a      	str	r2, [r3, #32]
 8002590:	e002      	b.n	8002598 <cmdExecute+0xd8>
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 8002592:	46c0      	nop			; (mov r8, r8)
 8002594:	e000      	b.n	8002598 <cmdExecute+0xd8>
			if (bf4me!=0x00){return;}	// protection against false BF resets
 8002596:	46c0      	nop			; (mov r8, r8)
	}
 8002598:	0018      	movs	r0, r3
 800259a:	46bd      	mov	sp, r7
 800259c:	b002      	add	sp, #8
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	200055e0 	.word	0x200055e0
 80025a4:	200034b0 	.word	0x200034b0
 80025a8:	40004400 	.word	0x40004400
 80025ac:	20003459 	.word	0x20003459
 80025b0:	200032f0 	.word	0x200032f0
 80025b4:	20003384 	.word	0x20003384
 80025b8:	20003499 	.word	0x20003499
 80025bc:	200031a0 	.word	0x200031a0

080025c0 <printASCIIarray>:
//========================================================================================================================
	uint8_t printASCIIarray(uint8_t imX,uint8_t imY,uint8_t strLen,uint8_t dataASCII[]){
 80025c0:	b5b0      	push	{r4, r5, r7, lr}
 80025c2:	b092      	sub	sp, #72	; 0x48
 80025c4:	af02      	add	r7, sp, #8
 80025c6:	0004      	movs	r4, r0
 80025c8:	0008      	movs	r0, r1
 80025ca:	0011      	movs	r1, r2
 80025cc:	603b      	str	r3, [r7, #0]
 80025ce:	1dfb      	adds	r3, r7, #7
 80025d0:	1c22      	adds	r2, r4, #0
 80025d2:	701a      	strb	r2, [r3, #0]
 80025d4:	1dbb      	adds	r3, r7, #6
 80025d6:	1c02      	adds	r2, r0, #0
 80025d8:	701a      	strb	r2, [r3, #0]
 80025da:	1d7b      	adds	r3, r7, #5
 80025dc:	1c0a      	adds	r2, r1, #0
 80025de:	701a      	strb	r2, [r3, #0]
			uint8_t j,Y_height,X_width,ASCII_X;
			uint8_t weoBuffer[49];
			uint16_t i;
			ASCII_X=imX;
 80025e0:	233e      	movs	r3, #62	; 0x3e
 80025e2:	18fb      	adds	r3, r7, r3
 80025e4:	1dfa      	adds	r2, r7, #7
 80025e6:	7812      	ldrb	r2, [r2, #0]
 80025e8:	701a      	strb	r2, [r3, #0]

			for (i=0;i<strLen;i++){
 80025ea:	233c      	movs	r3, #60	; 0x3c
 80025ec:	18fb      	adds	r3, r7, r3
 80025ee:	2200      	movs	r2, #0
 80025f0:	801a      	strh	r2, [r3, #0]
 80025f2:	e04f      	b.n	8002694 <printASCIIarray+0xd4>
				for(j=0;j<49;j++){
 80025f4:	233f      	movs	r3, #63	; 0x3f
 80025f6:	18fb      	adds	r3, r7, r3
 80025f8:	2200      	movs	r2, #0
 80025fa:	701a      	strb	r2, [r3, #0]
 80025fc:	e01b      	b.n	8002636 <printASCIIarray+0x76>
					weoBuffer[j]=FONT_X[dataASCII[i]][j];
 80025fe:	233c      	movs	r3, #60	; 0x3c
 8002600:	18fb      	adds	r3, r7, r3
 8002602:	881b      	ldrh	r3, [r3, #0]
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	18d3      	adds	r3, r2, r3
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	001a      	movs	r2, r3
 800260c:	253f      	movs	r5, #63	; 0x3f
 800260e:	197b      	adds	r3, r7, r5
 8002610:	7818      	ldrb	r0, [r3, #0]
 8002612:	197b      	adds	r3, r7, r5
 8002614:	7819      	ldrb	r1, [r3, #0]
 8002616:	4c33      	ldr	r4, [pc, #204]	; (80026e4 <printASCIIarray+0x124>)
 8002618:	0013      	movs	r3, r2
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	1a9b      	subs	r3, r3, r2
 800261e:	00da      	lsls	r2, r3, #3
 8002620:	1ad2      	subs	r2, r2, r3
 8002622:	18a3      	adds	r3, r4, r2
 8002624:	5c1a      	ldrb	r2, [r3, r0]
 8002626:	2308      	movs	r3, #8
 8002628:	18fb      	adds	r3, r7, r3
 800262a:	545a      	strb	r2, [r3, r1]
				for(j=0;j<49;j++){
 800262c:	197b      	adds	r3, r7, r5
 800262e:	781a      	ldrb	r2, [r3, #0]
 8002630:	197b      	adds	r3, r7, r5
 8002632:	3201      	adds	r2, #1
 8002634:	701a      	strb	r2, [r3, #0]
 8002636:	233f      	movs	r3, #63	; 0x3f
 8002638:	18fb      	adds	r3, r7, r3
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2b30      	cmp	r3, #48	; 0x30
 800263e:	d9de      	bls.n	80025fe <printASCIIarray+0x3e>
					}
				weoDrawRectangleFilled(ASCII_X,imY,ASCII_X+X_increment-0,imY+ASCII_height-0,0xFF,weoBuffer);
 8002640:	4b29      	ldr	r3, [pc, #164]	; (80026e8 <printASCIIarray+0x128>)
 8002642:	781a      	ldrb	r2, [r3, #0]
 8002644:	203e      	movs	r0, #62	; 0x3e
 8002646:	183b      	adds	r3, r7, r0
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	18d3      	adds	r3, r2, r3
 800264c:	b2dc      	uxtb	r4, r3
 800264e:	4b27      	ldr	r3, [pc, #156]	; (80026ec <printASCIIarray+0x12c>)
 8002650:	781a      	ldrb	r2, [r3, #0]
 8002652:	1dbb      	adds	r3, r7, #6
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	18d3      	adds	r3, r2, r3
 8002658:	b2da      	uxtb	r2, r3
 800265a:	1dbb      	adds	r3, r7, #6
 800265c:	7819      	ldrb	r1, [r3, #0]
 800265e:	0005      	movs	r5, r0
 8002660:	183b      	adds	r3, r7, r0
 8002662:	7818      	ldrb	r0, [r3, #0]
 8002664:	2308      	movs	r3, #8
 8002666:	18fb      	adds	r3, r7, r3
 8002668:	9301      	str	r3, [sp, #4]
 800266a:	23ff      	movs	r3, #255	; 0xff
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	0013      	movs	r3, r2
 8002670:	0022      	movs	r2, r4
 8002672:	f7fe fea1 	bl	80013b8 <weoDrawRectangleFilled>
				ASCII_X += X_increment+1;
 8002676:	4b1c      	ldr	r3, [pc, #112]	; (80026e8 <printASCIIarray+0x128>)
 8002678:	781a      	ldrb	r2, [r3, #0]
 800267a:	197b      	adds	r3, r7, r5
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	18d3      	adds	r3, r2, r3
 8002680:	b2da      	uxtb	r2, r3
 8002682:	197b      	adds	r3, r7, r5
 8002684:	3201      	adds	r2, #1
 8002686:	701a      	strb	r2, [r3, #0]
			for (i=0;i<strLen;i++){
 8002688:	213c      	movs	r1, #60	; 0x3c
 800268a:	187b      	adds	r3, r7, r1
 800268c:	881a      	ldrh	r2, [r3, #0]
 800268e:	187b      	adds	r3, r7, r1
 8002690:	3201      	adds	r2, #1
 8002692:	801a      	strh	r2, [r3, #0]
 8002694:	1d7b      	adds	r3, r7, #5
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	b29b      	uxth	r3, r3
 800269a:	213c      	movs	r1, #60	; 0x3c
 800269c:	187a      	adds	r2, r7, r1
 800269e:	8812      	ldrh	r2, [r2, #0]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d3a7      	bcc.n	80025f4 <printASCIIarray+0x34>
			}
			for(i=0;i<49;i++){
 80026a4:	187b      	adds	r3, r7, r1
 80026a6:	2200      	movs	r2, #0
 80026a8:	801a      	strh	r2, [r3, #0]
 80026aa:	e00b      	b.n	80026c4 <printASCIIarray+0x104>
			weoBuffer[i]=0x00;
 80026ac:	203c      	movs	r0, #60	; 0x3c
 80026ae:	183b      	adds	r3, r7, r0
 80026b0:	881b      	ldrh	r3, [r3, #0]
 80026b2:	2208      	movs	r2, #8
 80026b4:	18ba      	adds	r2, r7, r2
 80026b6:	2100      	movs	r1, #0
 80026b8:	54d1      	strb	r1, [r2, r3]
			for(i=0;i<49;i++){
 80026ba:	183b      	adds	r3, r7, r0
 80026bc:	881a      	ldrh	r2, [r3, #0]
 80026be:	183b      	adds	r3, r7, r0
 80026c0:	3201      	adds	r2, #1
 80026c2:	801a      	strh	r2, [r3, #0]
 80026c4:	233c      	movs	r3, #60	; 0x3c
 80026c6:	18fb      	adds	r3, r7, r3
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	2b30      	cmp	r3, #48	; 0x30
 80026cc:	d9ee      	bls.n	80026ac <printASCIIarray+0xec>
			}
			GPIOC->ODR |= 1 << 6;	//set BF
 80026ce:	4b08      	ldr	r3, [pc, #32]	; (80026f0 <printASCIIarray+0x130>)
 80026d0:	695a      	ldr	r2, [r3, #20]
 80026d2:	4b07      	ldr	r3, [pc, #28]	; (80026f0 <printASCIIarray+0x130>)
 80026d4:	2140      	movs	r1, #64	; 0x40
 80026d6:	430a      	orrs	r2, r1
 80026d8:	615a      	str	r2, [r3, #20]

		}
 80026da:	46c0      	nop			; (mov r8, r8)
 80026dc:	0018      	movs	r0, r3
 80026de:	46bd      	mov	sp, r7
 80026e0:	b010      	add	sp, #64	; 0x40
 80026e2:	bdb0      	pop	{r4, r5, r7, pc}
 80026e4:	20000000 	.word	0x20000000
 80026e8:	20003130 	.word	0x20003130
 80026ec:	20003131 	.word	0x20003131
 80026f0:	50000800 	.word	0x50000800

080026f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80026f8:	46c0      	nop			; (mov r8, r8)
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
	...

08002700 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002706:	4b11      	ldr	r3, [pc, #68]	; (800274c <HAL_MspInit+0x4c>)
 8002708:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800270a:	4b10      	ldr	r3, [pc, #64]	; (800274c <HAL_MspInit+0x4c>)
 800270c:	2101      	movs	r1, #1
 800270e:	430a      	orrs	r2, r1
 8002710:	641a      	str	r2, [r3, #64]	; 0x40
 8002712:	4b0e      	ldr	r3, [pc, #56]	; (800274c <HAL_MspInit+0x4c>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	2201      	movs	r2, #1
 8002718:	4013      	ands	r3, r2
 800271a:	607b      	str	r3, [r7, #4]
 800271c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800271e:	4b0b      	ldr	r3, [pc, #44]	; (800274c <HAL_MspInit+0x4c>)
 8002720:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002722:	4b0a      	ldr	r3, [pc, #40]	; (800274c <HAL_MspInit+0x4c>)
 8002724:	2180      	movs	r1, #128	; 0x80
 8002726:	0549      	lsls	r1, r1, #21
 8002728:	430a      	orrs	r2, r1
 800272a:	63da      	str	r2, [r3, #60]	; 0x3c
 800272c:	4b07      	ldr	r3, [pc, #28]	; (800274c <HAL_MspInit+0x4c>)
 800272e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002730:	2380      	movs	r3, #128	; 0x80
 8002732:	055b      	lsls	r3, r3, #21
 8002734:	4013      	ands	r3, r2
 8002736:	603b      	str	r3, [r7, #0]
 8002738:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 800273a:	2380      	movs	r3, #128	; 0x80
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	0018      	movs	r0, r3
 8002740:	f000 fd04 	bl	800314c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002744:	46c0      	nop			; (mov r8, r8)
 8002746:	46bd      	mov	sp, r7
 8002748:	b002      	add	sp, #8
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40021000 	.word	0x40021000

08002750 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8002750:	b590      	push	{r4, r7, lr}
 8002752:	b089      	sub	sp, #36	; 0x24
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002758:	240c      	movs	r4, #12
 800275a:	193b      	adds	r3, r7, r4
 800275c:	0018      	movs	r0, r3
 800275e:	2314      	movs	r3, #20
 8002760:	001a      	movs	r2, r3
 8002762:	2100      	movs	r1, #0
 8002764:	f008 f80a 	bl	800a77c <memset>
  if(hcomp->Instance==COMP1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a10      	ldr	r2, [pc, #64]	; (80027b0 <HAL_COMP_MspInit+0x60>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d11a      	bne.n	80027a8 <HAL_COMP_MspInit+0x58>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002772:	4b10      	ldr	r3, [pc, #64]	; (80027b4 <HAL_COMP_MspInit+0x64>)
 8002774:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002776:	4b0f      	ldr	r3, [pc, #60]	; (80027b4 <HAL_COMP_MspInit+0x64>)
 8002778:	2102      	movs	r1, #2
 800277a:	430a      	orrs	r2, r1
 800277c:	635a      	str	r2, [r3, #52]	; 0x34
 800277e:	4b0d      	ldr	r3, [pc, #52]	; (80027b4 <HAL_COMP_MspInit+0x64>)
 8002780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002782:	2202      	movs	r2, #2
 8002784:	4013      	ands	r3, r2
 8002786:	60bb      	str	r3, [r7, #8]
 8002788:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800278a:	193b      	adds	r3, r7, r4
 800278c:	2204      	movs	r2, #4
 800278e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002790:	193b      	adds	r3, r7, r4
 8002792:	2203      	movs	r2, #3
 8002794:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002796:	193b      	adds	r3, r7, r4
 8002798:	2200      	movs	r2, #0
 800279a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800279c:	193b      	adds	r3, r7, r4
 800279e:	4a06      	ldr	r2, [pc, #24]	; (80027b8 <HAL_COMP_MspInit+0x68>)
 80027a0:	0019      	movs	r1, r3
 80027a2:	0010      	movs	r0, r2
 80027a4:	f001 faee 	bl	8003d84 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 80027a8:	46c0      	nop			; (mov r8, r8)
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b009      	add	sp, #36	; 0x24
 80027ae:	bd90      	pop	{r4, r7, pc}
 80027b0:	40010200 	.word	0x40010200
 80027b4:	40021000 	.word	0x40021000
 80027b8:	50000400 	.word	0x50000400

080027bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027bc:	b590      	push	{r4, r7, lr}
 80027be:	b08b      	sub	sp, #44	; 0x2c
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c4:	2414      	movs	r4, #20
 80027c6:	193b      	adds	r3, r7, r4
 80027c8:	0018      	movs	r0, r3
 80027ca:	2314      	movs	r3, #20
 80027cc:	001a      	movs	r2, r3
 80027ce:	2100      	movs	r1, #0
 80027d0:	f007 ffd4 	bl	800a77c <memset>
  if(hi2c->Instance==I2C1)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a20      	ldr	r2, [pc, #128]	; (800285c <HAL_I2C_MspInit+0xa0>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d139      	bne.n	8002852 <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027de:	4b20      	ldr	r3, [pc, #128]	; (8002860 <HAL_I2C_MspInit+0xa4>)
 80027e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027e2:	4b1f      	ldr	r3, [pc, #124]	; (8002860 <HAL_I2C_MspInit+0xa4>)
 80027e4:	2101      	movs	r1, #1
 80027e6:	430a      	orrs	r2, r1
 80027e8:	635a      	str	r2, [r3, #52]	; 0x34
 80027ea:	4b1d      	ldr	r3, [pc, #116]	; (8002860 <HAL_I2C_MspInit+0xa4>)
 80027ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ee:	2201      	movs	r2, #1
 80027f0:	4013      	ands	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]
 80027f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80027f6:	193b      	adds	r3, r7, r4
 80027f8:	22c0      	movs	r2, #192	; 0xc0
 80027fa:	00d2      	lsls	r2, r2, #3
 80027fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027fe:	0021      	movs	r1, r4
 8002800:	187b      	adds	r3, r7, r1
 8002802:	2212      	movs	r2, #18
 8002804:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002806:	187b      	adds	r3, r7, r1
 8002808:	2201      	movs	r2, #1
 800280a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280c:	187b      	adds	r3, r7, r1
 800280e:	2200      	movs	r2, #0
 8002810:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002812:	187b      	adds	r3, r7, r1
 8002814:	2206      	movs	r2, #6
 8002816:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002818:	187a      	adds	r2, r7, r1
 800281a:	23a0      	movs	r3, #160	; 0xa0
 800281c:	05db      	lsls	r3, r3, #23
 800281e:	0011      	movs	r1, r2
 8002820:	0018      	movs	r0, r3
 8002822:	f001 faaf 	bl	8003d84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002826:	4b0e      	ldr	r3, [pc, #56]	; (8002860 <HAL_I2C_MspInit+0xa4>)
 8002828:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800282a:	4b0d      	ldr	r3, [pc, #52]	; (8002860 <HAL_I2C_MspInit+0xa4>)
 800282c:	2180      	movs	r1, #128	; 0x80
 800282e:	0389      	lsls	r1, r1, #14
 8002830:	430a      	orrs	r2, r1
 8002832:	63da      	str	r2, [r3, #60]	; 0x3c
 8002834:	4b0a      	ldr	r3, [pc, #40]	; (8002860 <HAL_I2C_MspInit+0xa4>)
 8002836:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002838:	2380      	movs	r3, #128	; 0x80
 800283a:	039b      	lsls	r3, r3, #14
 800283c:	4013      	ands	r3, r2
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8002842:	2200      	movs	r2, #0
 8002844:	2100      	movs	r1, #0
 8002846:	2017      	movs	r0, #23
 8002848:	f000 ffa2 	bl	8003790 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800284c:	2017      	movs	r0, #23
 800284e:	f000 ffb4 	bl	80037ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	46bd      	mov	sp, r7
 8002856:	b00b      	add	sp, #44	; 0x2c
 8002858:	bd90      	pop	{r4, r7, pc}
 800285a:	46c0      	nop			; (mov r8, r8)
 800285c:	40005400 	.word	0x40005400
 8002860:	40021000 	.word	0x40021000

08002864 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002864:	b590      	push	{r4, r7, lr}
 8002866:	b08b      	sub	sp, #44	; 0x2c
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800286c:	2414      	movs	r4, #20
 800286e:	193b      	adds	r3, r7, r4
 8002870:	0018      	movs	r0, r3
 8002872:	2314      	movs	r3, #20
 8002874:	001a      	movs	r2, r3
 8002876:	2100      	movs	r1, #0
 8002878:	f007 ff80 	bl	800a77c <memset>
  if(hi2s->Instance==SPI1)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a47      	ldr	r2, [pc, #284]	; (80029a0 <HAL_I2S_MspInit+0x13c>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d000      	beq.n	8002888 <HAL_I2S_MspInit+0x24>
 8002886:	e086      	b.n	8002996 <HAL_I2S_MspInit+0x132>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002888:	4b46      	ldr	r3, [pc, #280]	; (80029a4 <HAL_I2S_MspInit+0x140>)
 800288a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800288c:	4b45      	ldr	r3, [pc, #276]	; (80029a4 <HAL_I2S_MspInit+0x140>)
 800288e:	2180      	movs	r1, #128	; 0x80
 8002890:	0149      	lsls	r1, r1, #5
 8002892:	430a      	orrs	r2, r1
 8002894:	641a      	str	r2, [r3, #64]	; 0x40
 8002896:	4b43      	ldr	r3, [pc, #268]	; (80029a4 <HAL_I2S_MspInit+0x140>)
 8002898:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800289a:	2380      	movs	r3, #128	; 0x80
 800289c:	015b      	lsls	r3, r3, #5
 800289e:	4013      	ands	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
 80028a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a4:	4b3f      	ldr	r3, [pc, #252]	; (80029a4 <HAL_I2S_MspInit+0x140>)
 80028a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028a8:	4b3e      	ldr	r3, [pc, #248]	; (80029a4 <HAL_I2S_MspInit+0x140>)
 80028aa:	2101      	movs	r1, #1
 80028ac:	430a      	orrs	r2, r1
 80028ae:	635a      	str	r2, [r3, #52]	; 0x34
 80028b0:	4b3c      	ldr	r3, [pc, #240]	; (80029a4 <HAL_I2S_MspInit+0x140>)
 80028b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b4:	2201      	movs	r2, #1
 80028b6:	4013      	ands	r3, r2
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028bc:	4b39      	ldr	r3, [pc, #228]	; (80029a4 <HAL_I2S_MspInit+0x140>)
 80028be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028c0:	4b38      	ldr	r3, [pc, #224]	; (80029a4 <HAL_I2S_MspInit+0x140>)
 80028c2:	2102      	movs	r1, #2
 80028c4:	430a      	orrs	r2, r1
 80028c6:	635a      	str	r2, [r3, #52]	; 0x34
 80028c8:	4b36      	ldr	r3, [pc, #216]	; (80029a4 <HAL_I2S_MspInit+0x140>)
 80028ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028cc:	2202      	movs	r2, #2
 80028ce:	4013      	ands	r3, r2
 80028d0:	60bb      	str	r3, [r7, #8]
 80028d2:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> I2S1_WS
    PB3     ------> I2S1_CK
    PB4     ------> I2S1_MCK
    PB5     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80028d4:	193b      	adds	r3, r7, r4
 80028d6:	2280      	movs	r2, #128	; 0x80
 80028d8:	0212      	lsls	r2, r2, #8
 80028da:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028dc:	193b      	adds	r3, r7, r4
 80028de:	2202      	movs	r2, #2
 80028e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e2:	193b      	adds	r3, r7, r4
 80028e4:	2200      	movs	r2, #0
 80028e6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e8:	193b      	adds	r3, r7, r4
 80028ea:	2200      	movs	r2, #0
 80028ec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80028ee:	193b      	adds	r3, r7, r4
 80028f0:	2200      	movs	r2, #0
 80028f2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f4:	193a      	adds	r2, r7, r4
 80028f6:	23a0      	movs	r3, #160	; 0xa0
 80028f8:	05db      	lsls	r3, r3, #23
 80028fa:	0011      	movs	r1, r2
 80028fc:	0018      	movs	r0, r3
 80028fe:	f001 fa41 	bl	8003d84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002902:	0021      	movs	r1, r4
 8002904:	187b      	adds	r3, r7, r1
 8002906:	2238      	movs	r2, #56	; 0x38
 8002908:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290a:	187b      	adds	r3, r7, r1
 800290c:	2202      	movs	r2, #2
 800290e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002910:	187b      	adds	r3, r7, r1
 8002912:	2200      	movs	r2, #0
 8002914:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002916:	187b      	adds	r3, r7, r1
 8002918:	2200      	movs	r2, #0
 800291a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800291c:	187b      	adds	r3, r7, r1
 800291e:	2200      	movs	r2, #0
 8002920:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002922:	187b      	adds	r3, r7, r1
 8002924:	4a20      	ldr	r2, [pc, #128]	; (80029a8 <HAL_I2S_MspInit+0x144>)
 8002926:	0019      	movs	r1, r3
 8002928:	0010      	movs	r0, r2
 800292a:	f001 fa2b 	bl	8003d84 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 800292e:	4b1f      	ldr	r3, [pc, #124]	; (80029ac <HAL_I2S_MspInit+0x148>)
 8002930:	4a1f      	ldr	r2, [pc, #124]	; (80029b0 <HAL_I2S_MspInit+0x14c>)
 8002932:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8002934:	4b1d      	ldr	r3, [pc, #116]	; (80029ac <HAL_I2S_MspInit+0x148>)
 8002936:	2211      	movs	r2, #17
 8002938:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800293a:	4b1c      	ldr	r3, [pc, #112]	; (80029ac <HAL_I2S_MspInit+0x148>)
 800293c:	2210      	movs	r2, #16
 800293e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002940:	4b1a      	ldr	r3, [pc, #104]	; (80029ac <HAL_I2S_MspInit+0x148>)
 8002942:	2200      	movs	r2, #0
 8002944:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002946:	4b19      	ldr	r3, [pc, #100]	; (80029ac <HAL_I2S_MspInit+0x148>)
 8002948:	2280      	movs	r2, #128	; 0x80
 800294a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800294c:	4b17      	ldr	r3, [pc, #92]	; (80029ac <HAL_I2S_MspInit+0x148>)
 800294e:	2280      	movs	r2, #128	; 0x80
 8002950:	0052      	lsls	r2, r2, #1
 8002952:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002954:	4b15      	ldr	r3, [pc, #84]	; (80029ac <HAL_I2S_MspInit+0x148>)
 8002956:	2280      	movs	r2, #128	; 0x80
 8002958:	00d2      	lsls	r2, r2, #3
 800295a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800295c:	4b13      	ldr	r3, [pc, #76]	; (80029ac <HAL_I2S_MspInit+0x148>)
 800295e:	2200      	movs	r2, #0
 8002960:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002962:	4b12      	ldr	r3, [pc, #72]	; (80029ac <HAL_I2S_MspInit+0x148>)
 8002964:	22c0      	movs	r2, #192	; 0xc0
 8002966:	0192      	lsls	r2, r2, #6
 8002968:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800296a:	4b10      	ldr	r3, [pc, #64]	; (80029ac <HAL_I2S_MspInit+0x148>)
 800296c:	0018      	movs	r0, r3
 800296e:	f000 ff41 	bl	80037f4 <HAL_DMA_Init>
 8002972:	1e03      	subs	r3, r0, #0
 8002974:	d001      	beq.n	800297a <HAL_I2S_MspInit+0x116>
    {
      Error_Handler();
 8002976:	f7ff febd 	bl	80026f4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a0b      	ldr	r2, [pc, #44]	; (80029ac <HAL_I2S_MspInit+0x148>)
 800297e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002980:	4b0a      	ldr	r3, [pc, #40]	; (80029ac <HAL_I2S_MspInit+0x148>)
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	629a      	str	r2, [r3, #40]	; 0x28

    /* I2S1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002986:	2200      	movs	r2, #0
 8002988:	2100      	movs	r1, #0
 800298a:	2019      	movs	r0, #25
 800298c:	f000 ff00 	bl	8003790 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002990:	2019      	movs	r0, #25
 8002992:	f000 ff12 	bl	80037ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002996:	46c0      	nop			; (mov r8, r8)
 8002998:	46bd      	mov	sp, r7
 800299a:	b00b      	add	sp, #44	; 0x2c
 800299c:	bd90      	pop	{r4, r7, pc}
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	40013000 	.word	0x40013000
 80029a4:	40021000 	.word	0x40021000
 80029a8:	50000400 	.word	0x50000400
 80029ac:	2000357c 	.word	0x2000357c
 80029b0:	40020008 	.word	0x40020008

080029b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029b4:	b590      	push	{r4, r7, lr}
 80029b6:	b08b      	sub	sp, #44	; 0x2c
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029bc:	2414      	movs	r4, #20
 80029be:	193b      	adds	r3, r7, r4
 80029c0:	0018      	movs	r0, r3
 80029c2:	2314      	movs	r3, #20
 80029c4:	001a      	movs	r2, r3
 80029c6:	2100      	movs	r1, #0
 80029c8:	f007 fed8 	bl	800a77c <memset>
  if(hspi->Instance==SPI2)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a54      	ldr	r2, [pc, #336]	; (8002b24 <HAL_SPI_MspInit+0x170>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d000      	beq.n	80029d8 <HAL_SPI_MspInit+0x24>
 80029d6:	e0a0      	b.n	8002b1a <HAL_SPI_MspInit+0x166>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80029d8:	4b53      	ldr	r3, [pc, #332]	; (8002b28 <HAL_SPI_MspInit+0x174>)
 80029da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029dc:	4b52      	ldr	r3, [pc, #328]	; (8002b28 <HAL_SPI_MspInit+0x174>)
 80029de:	2180      	movs	r1, #128	; 0x80
 80029e0:	01c9      	lsls	r1, r1, #7
 80029e2:	430a      	orrs	r2, r1
 80029e4:	63da      	str	r2, [r3, #60]	; 0x3c
 80029e6:	4b50      	ldr	r3, [pc, #320]	; (8002b28 <HAL_SPI_MspInit+0x174>)
 80029e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029ea:	2380      	movs	r3, #128	; 0x80
 80029ec:	01db      	lsls	r3, r3, #7
 80029ee:	4013      	ands	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]
 80029f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029f4:	4b4c      	ldr	r3, [pc, #304]	; (8002b28 <HAL_SPI_MspInit+0x174>)
 80029f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029f8:	4b4b      	ldr	r3, [pc, #300]	; (8002b28 <HAL_SPI_MspInit+0x174>)
 80029fa:	2102      	movs	r1, #2
 80029fc:	430a      	orrs	r2, r1
 80029fe:	635a      	str	r2, [r3, #52]	; 0x34
 8002a00:	4b49      	ldr	r3, [pc, #292]	; (8002b28 <HAL_SPI_MspInit+0x174>)
 8002a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a04:	2202      	movs	r2, #2
 8002a06:	4013      	ands	r3, r2
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB6     ------> SPI2_MISO
    PB7     ------> SPI2_MOSI
    PB8     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002a0c:	193b      	adds	r3, r7, r4
 8002a0e:	2240      	movs	r2, #64	; 0x40
 8002a10:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a12:	193b      	adds	r3, r7, r4
 8002a14:	2202      	movs	r2, #2
 8002a16:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a18:	193b      	adds	r3, r7, r4
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1e:	193b      	adds	r3, r7, r4
 8002a20:	2200      	movs	r2, #0
 8002a22:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI2;
 8002a24:	193b      	adds	r3, r7, r4
 8002a26:	2204      	movs	r2, #4
 8002a28:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a2a:	193b      	adds	r3, r7, r4
 8002a2c:	4a3f      	ldr	r2, [pc, #252]	; (8002b2c <HAL_SPI_MspInit+0x178>)
 8002a2e:	0019      	movs	r1, r3
 8002a30:	0010      	movs	r0, r2
 8002a32:	f001 f9a7 	bl	8003d84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002a36:	0021      	movs	r1, r4
 8002a38:	187b      	adds	r3, r7, r1
 8002a3a:	22c0      	movs	r2, #192	; 0xc0
 8002a3c:	0052      	lsls	r2, r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a40:	187b      	adds	r3, r7, r1
 8002a42:	2202      	movs	r2, #2
 8002a44:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a46:	187b      	adds	r3, r7, r1
 8002a48:	2200      	movs	r2, #0
 8002a4a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a4c:	187b      	adds	r3, r7, r1
 8002a4e:	2200      	movs	r2, #0
 8002a50:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8002a52:	187b      	adds	r3, r7, r1
 8002a54:	2201      	movs	r2, #1
 8002a56:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a58:	187b      	adds	r3, r7, r1
 8002a5a:	4a34      	ldr	r2, [pc, #208]	; (8002b2c <HAL_SPI_MspInit+0x178>)
 8002a5c:	0019      	movs	r1, r3
 8002a5e:	0010      	movs	r0, r2
 8002a60:	f001 f990 	bl	8003d84 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel2;
 8002a64:	4b32      	ldr	r3, [pc, #200]	; (8002b30 <HAL_SPI_MspInit+0x17c>)
 8002a66:	4a33      	ldr	r2, [pc, #204]	; (8002b34 <HAL_SPI_MspInit+0x180>)
 8002a68:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8002a6a:	4b31      	ldr	r3, [pc, #196]	; (8002b30 <HAL_SPI_MspInit+0x17c>)
 8002a6c:	2212      	movs	r2, #18
 8002a6e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a70:	4b2f      	ldr	r3, [pc, #188]	; (8002b30 <HAL_SPI_MspInit+0x17c>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a76:	4b2e      	ldr	r3, [pc, #184]	; (8002b30 <HAL_SPI_MspInit+0x17c>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a7c:	4b2c      	ldr	r3, [pc, #176]	; (8002b30 <HAL_SPI_MspInit+0x17c>)
 8002a7e:	2280      	movs	r2, #128	; 0x80
 8002a80:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a82:	4b2b      	ldr	r3, [pc, #172]	; (8002b30 <HAL_SPI_MspInit+0x17c>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a88:	4b29      	ldr	r3, [pc, #164]	; (8002b30 <HAL_SPI_MspInit+0x17c>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8002a8e:	4b28      	ldr	r3, [pc, #160]	; (8002b30 <HAL_SPI_MspInit+0x17c>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002a94:	4b26      	ldr	r3, [pc, #152]	; (8002b30 <HAL_SPI_MspInit+0x17c>)
 8002a96:	2280      	movs	r2, #128	; 0x80
 8002a98:	0192      	lsls	r2, r2, #6
 8002a9a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002a9c:	4b24      	ldr	r3, [pc, #144]	; (8002b30 <HAL_SPI_MspInit+0x17c>)
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f000 fea8 	bl	80037f4 <HAL_DMA_Init>
 8002aa4:	1e03      	subs	r3, r0, #0
 8002aa6:	d001      	beq.n	8002aac <HAL_SPI_MspInit+0xf8>
    {
      Error_Handler();
 8002aa8:	f7ff fe24 	bl	80026f4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a20      	ldr	r2, [pc, #128]	; (8002b30 <HAL_SPI_MspInit+0x17c>)
 8002ab0:	659a      	str	r2, [r3, #88]	; 0x58
 8002ab2:	4b1f      	ldr	r3, [pc, #124]	; (8002b30 <HAL_SPI_MspInit+0x17c>)
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel3;
 8002ab8:	4b1f      	ldr	r3, [pc, #124]	; (8002b38 <HAL_SPI_MspInit+0x184>)
 8002aba:	4a20      	ldr	r2, [pc, #128]	; (8002b3c <HAL_SPI_MspInit+0x188>)
 8002abc:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8002abe:	4b1e      	ldr	r3, [pc, #120]	; (8002b38 <HAL_SPI_MspInit+0x184>)
 8002ac0:	2213      	movs	r2, #19
 8002ac2:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ac4:	4b1c      	ldr	r3, [pc, #112]	; (8002b38 <HAL_SPI_MspInit+0x184>)
 8002ac6:	2210      	movs	r2, #16
 8002ac8:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002aca:	4b1b      	ldr	r3, [pc, #108]	; (8002b38 <HAL_SPI_MspInit+0x184>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ad0:	4b19      	ldr	r3, [pc, #100]	; (8002b38 <HAL_SPI_MspInit+0x184>)
 8002ad2:	2280      	movs	r2, #128	; 0x80
 8002ad4:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ad6:	4b18      	ldr	r3, [pc, #96]	; (8002b38 <HAL_SPI_MspInit+0x184>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002adc:	4b16      	ldr	r3, [pc, #88]	; (8002b38 <HAL_SPI_MspInit+0x184>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002ae2:	4b15      	ldr	r3, [pc, #84]	; (8002b38 <HAL_SPI_MspInit+0x184>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ae8:	4b13      	ldr	r3, [pc, #76]	; (8002b38 <HAL_SPI_MspInit+0x184>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002aee:	4b12      	ldr	r3, [pc, #72]	; (8002b38 <HAL_SPI_MspInit+0x184>)
 8002af0:	0018      	movs	r0, r3
 8002af2:	f000 fe7f 	bl	80037f4 <HAL_DMA_Init>
 8002af6:	1e03      	subs	r3, r0, #0
 8002af8:	d001      	beq.n	8002afe <HAL_SPI_MspInit+0x14a>
    {
      Error_Handler();
 8002afa:	f7ff fdfb 	bl	80026f4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a0d      	ldr	r2, [pc, #52]	; (8002b38 <HAL_SPI_MspInit+0x184>)
 8002b02:	655a      	str	r2, [r3, #84]	; 0x54
 8002b04:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <HAL_SPI_MspInit+0x184>)
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	201a      	movs	r0, #26
 8002b10:	f000 fe3e 	bl	8003790 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002b14:	201a      	movs	r0, #26
 8002b16:	f000 fe50 	bl	80037ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	b00b      	add	sp, #44	; 0x2c
 8002b20:	bd90      	pop	{r4, r7, pc}
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	40003800 	.word	0x40003800
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	50000400 	.word	0x50000400
 8002b30:	20003290 	.word	0x20003290
 8002b34:	4002001c 	.word	0x4002001c
 8002b38:	2000351c 	.word	0x2000351c
 8002b3c:	40020030 	.word	0x40020030

08002b40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a0a      	ldr	r2, [pc, #40]	; (8002b78 <HAL_TIM_Base_MspInit+0x38>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d10d      	bne.n	8002b6e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b52:	4b0a      	ldr	r3, [pc, #40]	; (8002b7c <HAL_TIM_Base_MspInit+0x3c>)
 8002b54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b56:	4b09      	ldr	r3, [pc, #36]	; (8002b7c <HAL_TIM_Base_MspInit+0x3c>)
 8002b58:	2180      	movs	r1, #128	; 0x80
 8002b5a:	0109      	lsls	r1, r1, #4
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	641a      	str	r2, [r3, #64]	; 0x40
 8002b60:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <HAL_TIM_Base_MspInit+0x3c>)
 8002b62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b64:	2380      	movs	r3, #128	; 0x80
 8002b66:	011b      	lsls	r3, r3, #4
 8002b68:	4013      	ands	r3, r2
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002b6e:	46c0      	nop			; (mov r8, r8)
 8002b70:	46bd      	mov	sp, r7
 8002b72:	b004      	add	sp, #16
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	46c0      	nop			; (mov r8, r8)
 8002b78:	40012c00 	.word	0x40012c00
 8002b7c:	40021000 	.word	0x40021000

08002b80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b80:	b590      	push	{r4, r7, lr}
 8002b82:	b089      	sub	sp, #36	; 0x24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b88:	240c      	movs	r4, #12
 8002b8a:	193b      	adds	r3, r7, r4
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	2314      	movs	r3, #20
 8002b90:	001a      	movs	r2, r3
 8002b92:	2100      	movs	r1, #0
 8002b94:	f007 fdf2 	bl	800a77c <memset>
  if(htim->Instance==TIM1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a15      	ldr	r2, [pc, #84]	; (8002bf4 <HAL_TIM_MspPostInit+0x74>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d123      	bne.n	8002bea <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba2:	4b15      	ldr	r3, [pc, #84]	; (8002bf8 <HAL_TIM_MspPostInit+0x78>)
 8002ba4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ba6:	4b14      	ldr	r3, [pc, #80]	; (8002bf8 <HAL_TIM_MspPostInit+0x78>)
 8002ba8:	2101      	movs	r1, #1
 8002baa:	430a      	orrs	r2, r1
 8002bac:	635a      	str	r2, [r3, #52]	; 0x34
 8002bae:	4b12      	ldr	r3, [pc, #72]	; (8002bf8 <HAL_TIM_MspPostInit+0x78>)
 8002bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	60bb      	str	r3, [r7, #8]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002bba:	193b      	adds	r3, r7, r4
 8002bbc:	2280      	movs	r2, #128	; 0x80
 8002bbe:	0052      	lsls	r2, r2, #1
 8002bc0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc2:	0021      	movs	r1, r4
 8002bc4:	187b      	adds	r3, r7, r1
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002bca:	187b      	adds	r3, r7, r1
 8002bcc:	2202      	movs	r2, #2
 8002bce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd0:	187b      	adds	r3, r7, r1
 8002bd2:	2203      	movs	r2, #3
 8002bd4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002bd6:	187b      	adds	r3, r7, r1
 8002bd8:	2202      	movs	r2, #2
 8002bda:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bdc:	187a      	adds	r2, r7, r1
 8002bde:	23a0      	movs	r3, #160	; 0xa0
 8002be0:	05db      	lsls	r3, r3, #23
 8002be2:	0011      	movs	r1, r2
 8002be4:	0018      	movs	r0, r3
 8002be6:	f001 f8cd 	bl	8003d84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002bea:	46c0      	nop			; (mov r8, r8)
 8002bec:	46bd      	mov	sp, r7
 8002bee:	b009      	add	sp, #36	; 0x24
 8002bf0:	bd90      	pop	{r4, r7, pc}
 8002bf2:	46c0      	nop			; (mov r8, r8)
 8002bf4:	40012c00 	.word	0x40012c00
 8002bf8:	40021000 	.word	0x40021000

08002bfc <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8002bfc:	b590      	push	{r4, r7, lr}
 8002bfe:	b08b      	sub	sp, #44	; 0x2c
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c04:	2414      	movs	r4, #20
 8002c06:	193b      	adds	r3, r7, r4
 8002c08:	0018      	movs	r0, r3
 8002c0a:	2314      	movs	r3, #20
 8002c0c:	001a      	movs	r2, r3
 8002c0e:	2100      	movs	r1, #0
 8002c10:	f007 fdb4 	bl	800a77c <memset>
  if(husart->Instance==USART3)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a45      	ldr	r2, [pc, #276]	; (8002d30 <HAL_USART_MspInit+0x134>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d000      	beq.n	8002c20 <HAL_USART_MspInit+0x24>
 8002c1e:	e083      	b.n	8002d28 <HAL_USART_MspInit+0x12c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c20:	4b44      	ldr	r3, [pc, #272]	; (8002d34 <HAL_USART_MspInit+0x138>)
 8002c22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c24:	4b43      	ldr	r3, [pc, #268]	; (8002d34 <HAL_USART_MspInit+0x138>)
 8002c26:	2180      	movs	r1, #128	; 0x80
 8002c28:	02c9      	lsls	r1, r1, #11
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c2e:	4b41      	ldr	r3, [pc, #260]	; (8002d34 <HAL_USART_MspInit+0x138>)
 8002c30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c32:	2380      	movs	r3, #128	; 0x80
 8002c34:	02db      	lsls	r3, r3, #11
 8002c36:	4013      	ands	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]
 8002c3a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c3c:	4b3d      	ldr	r3, [pc, #244]	; (8002d34 <HAL_USART_MspInit+0x138>)
 8002c3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c40:	4b3c      	ldr	r3, [pc, #240]	; (8002d34 <HAL_USART_MspInit+0x138>)
 8002c42:	2101      	movs	r1, #1
 8002c44:	430a      	orrs	r2, r1
 8002c46:	635a      	str	r2, [r3, #52]	; 0x34
 8002c48:	4b3a      	ldr	r3, [pc, #232]	; (8002d34 <HAL_USART_MspInit+0x138>)
 8002c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	4013      	ands	r3, r2
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c54:	4b37      	ldr	r3, [pc, #220]	; (8002d34 <HAL_USART_MspInit+0x138>)
 8002c56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c58:	4b36      	ldr	r3, [pc, #216]	; (8002d34 <HAL_USART_MspInit+0x138>)
 8002c5a:	2102      	movs	r1, #2
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	635a      	str	r2, [r3, #52]	; 0x34
 8002c60:	4b34      	ldr	r3, [pc, #208]	; (8002d34 <HAL_USART_MspInit+0x138>)
 8002c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c64:	2202      	movs	r2, #2
 8002c66:	4013      	ands	r3, r2
 8002c68:	60bb      	str	r3, [r7, #8]
 8002c6a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA5     ------> USART3_TX
    PB0     ------> USART3_RX
    PB1     ------> USART3_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002c6c:	193b      	adds	r3, r7, r4
 8002c6e:	2220      	movs	r2, #32
 8002c70:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c72:	193b      	adds	r3, r7, r4
 8002c74:	2202      	movs	r2, #2
 8002c76:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c78:	193b      	adds	r3, r7, r4
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c7e:	193b      	adds	r3, r7, r4
 8002c80:	2203      	movs	r2, #3
 8002c82:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8002c84:	193b      	adds	r3, r7, r4
 8002c86:	2204      	movs	r2, #4
 8002c88:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c8a:	193a      	adds	r2, r7, r4
 8002c8c:	23a0      	movs	r3, #160	; 0xa0
 8002c8e:	05db      	lsls	r3, r3, #23
 8002c90:	0011      	movs	r1, r2
 8002c92:	0018      	movs	r0, r3
 8002c94:	f001 f876 	bl	8003d84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c98:	0021      	movs	r1, r4
 8002c9a:	187b      	adds	r3, r7, r1
 8002c9c:	2203      	movs	r2, #3
 8002c9e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca0:	187b      	adds	r3, r7, r1
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca6:	187b      	adds	r3, r7, r1
 8002ca8:	2200      	movs	r2, #0
 8002caa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cac:	187b      	adds	r3, r7, r1
 8002cae:	2203      	movs	r2, #3
 8002cb0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8002cb2:	187b      	adds	r3, r7, r1
 8002cb4:	2204      	movs	r2, #4
 8002cb6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cb8:	187b      	adds	r3, r7, r1
 8002cba:	4a1f      	ldr	r2, [pc, #124]	; (8002d38 <HAL_USART_MspInit+0x13c>)
 8002cbc:	0019      	movs	r1, r3
 8002cbe:	0010      	movs	r0, r2
 8002cc0:	f001 f860 	bl	8003d84 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel4;
 8002cc4:	4b1d      	ldr	r3, [pc, #116]	; (8002d3c <HAL_USART_MspInit+0x140>)
 8002cc6:	4a1e      	ldr	r2, [pc, #120]	; (8002d40 <HAL_USART_MspInit+0x144>)
 8002cc8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002cca:	4b1c      	ldr	r3, [pc, #112]	; (8002d3c <HAL_USART_MspInit+0x140>)
 8002ccc:	2237      	movs	r2, #55	; 0x37
 8002cce:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002cd0:	4b1a      	ldr	r3, [pc, #104]	; (8002d3c <HAL_USART_MspInit+0x140>)
 8002cd2:	2210      	movs	r2, #16
 8002cd4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cd6:	4b19      	ldr	r3, [pc, #100]	; (8002d3c <HAL_USART_MspInit+0x140>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002cdc:	4b17      	ldr	r3, [pc, #92]	; (8002d3c <HAL_USART_MspInit+0x140>)
 8002cde:	2280      	movs	r2, #128	; 0x80
 8002ce0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ce2:	4b16      	ldr	r3, [pc, #88]	; (8002d3c <HAL_USART_MspInit+0x140>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ce8:	4b14      	ldr	r3, [pc, #80]	; (8002d3c <HAL_USART_MspInit+0x140>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002cee:	4b13      	ldr	r3, [pc, #76]	; (8002d3c <HAL_USART_MspInit+0x140>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002cf4:	4b11      	ldr	r3, [pc, #68]	; (8002d3c <HAL_USART_MspInit+0x140>)
 8002cf6:	2280      	movs	r2, #128	; 0x80
 8002cf8:	0192      	lsls	r2, r2, #6
 8002cfa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002cfc:	4b0f      	ldr	r3, [pc, #60]	; (8002d3c <HAL_USART_MspInit+0x140>)
 8002cfe:	0018      	movs	r0, r3
 8002d00:	f000 fd78 	bl	80037f4 <HAL_DMA_Init>
 8002d04:	1e03      	subs	r3, r0, #0
 8002d06:	d001      	beq.n	8002d0c <HAL_USART_MspInit+0x110>
    {
      Error_Handler();
 8002d08:	f7ff fcf4 	bl	80026f4 <Error_Handler>
    }

    __HAL_LINKDMA(husart,hdmatx,hdma_usart3_tx);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a0b      	ldr	r2, [pc, #44]	; (8002d3c <HAL_USART_MspInit+0x140>)
 8002d10:	651a      	str	r2, [r3, #80]	; 0x50
 8002d12:	4b0a      	ldr	r3, [pc, #40]	; (8002d3c <HAL_USART_MspInit+0x140>)
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 8002d18:	2200      	movs	r2, #0
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	201d      	movs	r0, #29
 8002d1e:	f000 fd37 	bl	8003790 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 8002d22:	201d      	movs	r0, #29
 8002d24:	f000 fd49 	bl	80037ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002d28:	46c0      	nop			; (mov r8, r8)
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	b00b      	add	sp, #44	; 0x2c
 8002d2e:	bd90      	pop	{r4, r7, pc}
 8002d30:	40004800 	.word	0x40004800
 8002d34:	40021000 	.word	0x40021000
 8002d38:	50000400 	.word	0x50000400
 8002d3c:	200032f4 	.word	0x200032f4
 8002d40:	40020044 	.word	0x40020044

08002d44 <LL_USART_IsActiveFlag_FE>:
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	2202      	movs	r2, #2
 8002d52:	4013      	ands	r3, r2
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d101      	bne.n	8002d5c <LL_USART_IsActiveFlag_FE+0x18>
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e000      	b.n	8002d5e <LL_USART_IsActiveFlag_FE+0x1a>
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	0018      	movs	r0, r3
 8002d60:	46bd      	mov	sp, r7
 8002d62:	b002      	add	sp, #8
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <LL_USART_IsActiveFlag_NE>:
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b082      	sub	sp, #8
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	2204      	movs	r2, #4
 8002d74:	4013      	ands	r3, r2
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	d101      	bne.n	8002d7e <LL_USART_IsActiveFlag_NE+0x18>
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e000      	b.n	8002d80 <LL_USART_IsActiveFlag_NE+0x1a>
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	0018      	movs	r0, r3
 8002d82:	46bd      	mov	sp, r7
 8002d84:	b002      	add	sp, #8
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <LL_USART_IsActiveFlag_ORE>:
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	69db      	ldr	r3, [r3, #28]
 8002d94:	2208      	movs	r2, #8
 8002d96:	4013      	ands	r3, r2
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	d101      	bne.n	8002da0 <LL_USART_IsActiveFlag_ORE+0x18>
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e000      	b.n	8002da2 <LL_USART_IsActiveFlag_ORE+0x1a>
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	0018      	movs	r0, r3
 8002da4:	46bd      	mov	sp, r7
 8002da6:	b002      	add	sp, #8
 8002da8:	bd80      	pop	{r7, pc}

08002daa <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b082      	sub	sp, #8
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	2220      	movs	r2, #32
 8002db8:	4013      	ands	r3, r2
 8002dba:	2b20      	cmp	r3, #32
 8002dbc:	d101      	bne.n	8002dc2 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	b002      	add	sp, #8
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <LL_USART_IsEnabledIT_RXNE_RXFNE>:
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2220      	movs	r2, #32
 8002dda:	4013      	ands	r3, r2
 8002ddc:	2b20      	cmp	r3, #32
 8002dde:	d101      	bne.n	8002de4 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 8002de0:	2301      	movs	r3, #1
 8002de2:	e000      	b.n	8002de6 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	0018      	movs	r0, r3
 8002de8:	46bd      	mov	sp, r7
 8002dea:	b002      	add	sp, #8
 8002dec:	bd80      	pop	{r7, pc}

08002dee <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002df2:	46c0      	nop			; (mov r8, r8)
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dfc:	e7fe      	b.n	8002dfc <HardFault_Handler+0x4>

08002dfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002e02:	46c0      	nop			; (mov r8, r8)
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e0c:	46c0      	nop			; (mov r8, r8)
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e16:	f000 f959 	bl	80030cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e1a:	46c0      	nop			; (mov r8, r8)
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002e24:	4b03      	ldr	r3, [pc, #12]	; (8002e34 <DMA1_Channel1_IRQHandler+0x14>)
 8002e26:	0018      	movs	r0, r3
 8002e28:	f000 fe5e 	bl	8003ae8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002e2c:	46c0      	nop			; (mov r8, r8)
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	46c0      	nop			; (mov r8, r8)
 8002e34:	2000357c 	.word	0x2000357c

08002e38 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

//	HAL_SPI_RxCpltCallback(&hspi2);
  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002e3c:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8002e3e:	0018      	movs	r0, r3
 8002e40:	f000 fe52 	bl	8003ae8 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002e44:	4b04      	ldr	r3, [pc, #16]	; (8002e58 <DMA1_Channel2_3_IRQHandler+0x20>)
 8002e46:	0018      	movs	r0, r3
 8002e48:	f000 fe4e 	bl	8003ae8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002e4c:	46c0      	nop			; (mov r8, r8)
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	20003290 	.word	0x20003290
 8002e58:	2000351c 	.word	0x2000351c

08002e5c <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
//		GPIOA->ODR |= 1 << 11;	//set test 1
//		GPIOA->ODR &= ~(1 << 11);	//reset test 1
  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002e60:	4b03      	ldr	r3, [pc, #12]	; (8002e70 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x14>)
 8002e62:	0018      	movs	r0, r3
 8002e64:	f000 fe40 	bl	8003ae8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 8002e68:	46c0      	nop			; (mov r8, r8)
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	46c0      	nop			; (mov r8, r8)
 8002e70:	200032f4 	.word	0x200032f4

08002e74 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8002e78:	4b09      	ldr	r3, [pc, #36]	; (8002ea0 <I2C1_IRQHandler+0x2c>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	699a      	ldr	r2, [r3, #24]
 8002e7e:	23e0      	movs	r3, #224	; 0xe0
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	4013      	ands	r3, r2
 8002e84:	d004      	beq.n	8002e90 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8002e86:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <I2C1_IRQHandler+0x2c>)
 8002e88:	0018      	movs	r0, r3
 8002e8a:	f001 f98f 	bl	80041ac <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8002e8e:	e003      	b.n	8002e98 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8002e90:	4b03      	ldr	r3, [pc, #12]	; (8002ea0 <I2C1_IRQHandler+0x2c>)
 8002e92:	0018      	movs	r0, r3
 8002e94:	f001 f970 	bl	8004178 <HAL_I2C_EV_IRQHandler>
}
 8002e98:	46c0      	nop			; (mov r8, r8)
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	46c0      	nop			; (mov r8, r8)
 8002ea0:	20003230 	.word	0x20003230

08002ea4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s1);
 8002ea8:	4b03      	ldr	r3, [pc, #12]	; (8002eb8 <SPI1_IRQHandler+0x14>)
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f002 f8f2 	bl	8005094 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002eb0:	46c0      	nop			; (mov r8, r8)
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	46c0      	nop			; (mov r8, r8)
 8002eb8:	2000345c 	.word	0x2000345c

08002ebc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002ec0:	4b03      	ldr	r3, [pc, #12]	; (8002ed0 <SPI2_IRQHandler+0x14>)
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	f004 fbfc 	bl	80076c0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002ec8:	46c0      	nop			; (mov r8, r8)
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	200031b0 	.word	0x200031b0

08002ed4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART2->ICR|=USART_ICR_ORECF;
 8002ed8:	4b25      	ldr	r3, [pc, #148]	; (8002f70 <USART2_IRQHandler+0x9c>)
 8002eda:	6a1a      	ldr	r2, [r3, #32]
 8002edc:	4b24      	ldr	r3, [pc, #144]	; (8002f70 <USART2_IRQHandler+0x9c>)
 8002ede:	2108      	movs	r1, #8
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_FECF;
 8002ee4:	4b22      	ldr	r3, [pc, #136]	; (8002f70 <USART2_IRQHandler+0x9c>)
 8002ee6:	6a1a      	ldr	r2, [r3, #32]
 8002ee8:	4b21      	ldr	r3, [pc, #132]	; (8002f70 <USART2_IRQHandler+0x9c>)
 8002eea:	2102      	movs	r1, #2
 8002eec:	430a      	orrs	r2, r1
 8002eee:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_NECF;
 8002ef0:	4b1f      	ldr	r3, [pc, #124]	; (8002f70 <USART2_IRQHandler+0x9c>)
 8002ef2:	6a1a      	ldr	r2, [r3, #32]
 8002ef4:	4b1e      	ldr	r3, [pc, #120]	; (8002f70 <USART2_IRQHandler+0x9c>)
 8002ef6:	2104      	movs	r1, #4
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	621a      	str	r2, [r3, #32]
	if(LL_USART_IsActiveFlag_RXNE(USART2) && LL_USART_IsEnabledIT_RXNE(USART2))
 8002efc:	4b1c      	ldr	r3, [pc, #112]	; (8002f70 <USART2_IRQHandler+0x9c>)
 8002efe:	0018      	movs	r0, r3
 8002f00:	f7ff ff53 	bl	8002daa <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8002f04:	1e03      	subs	r3, r0, #0
 8002f06:	d009      	beq.n	8002f1c <USART2_IRQHandler+0x48>
 8002f08:	4b19      	ldr	r3, [pc, #100]	; (8002f70 <USART2_IRQHandler+0x9c>)
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	f7ff ff5e 	bl	8002dcc <LL_USART_IsEnabledIT_RXNE_RXFNE>
 8002f10:	1e03      	subs	r3, r0, #0
 8002f12:	d003      	beq.n	8002f1c <USART2_IRQHandler+0x48>
	  {
	    USART2_RX_Callback();// launching the receiving callback function //LL implentation
 8002f14:	f7fe f856 	bl	8000fc4 <USART2_RX_Callback>
	  {
 8002f18:	46c0      	nop			; (mov r8, r8)
	  }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002f1a:	e025      	b.n	8002f68 <USART2_IRQHandler+0x94>
		  USART2->ICR|=USART_ICR_ORECF;
 8002f1c:	4b14      	ldr	r3, [pc, #80]	; (8002f70 <USART2_IRQHandler+0x9c>)
 8002f1e:	6a1a      	ldr	r2, [r3, #32]
 8002f20:	4b13      	ldr	r3, [pc, #76]	; (8002f70 <USART2_IRQHandler+0x9c>)
 8002f22:	2108      	movs	r1, #8
 8002f24:	430a      	orrs	r2, r1
 8002f26:	621a      	str	r2, [r3, #32]
	    if(LL_USART_IsActiveFlag_ORE(USART2))//clear the overrun flag by reading from RDR
 8002f28:	4b11      	ldr	r3, [pc, #68]	; (8002f70 <USART2_IRQHandler+0x9c>)
 8002f2a:	0018      	movs	r0, r3
 8002f2c:	f7ff ff2c 	bl	8002d88 <LL_USART_IsActiveFlag_ORE>
 8002f30:	1e03      	subs	r3, r0, #0
 8002f32:	d008      	beq.n	8002f46 <USART2_IRQHandler+0x72>
	    	USART2->ICR|=USART_ICR_ORECF;
 8002f34:	4b0e      	ldr	r3, [pc, #56]	; (8002f70 <USART2_IRQHandler+0x9c>)
 8002f36:	6a1a      	ldr	r2, [r3, #32]
 8002f38:	4b0d      	ldr	r3, [pc, #52]	; (8002f70 <USART2_IRQHandler+0x9c>)
 8002f3a:	2108      	movs	r1, #8
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	621a      	str	r2, [r3, #32]
	      (void) USART2->RDR;
 8002f40:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <USART2_IRQHandler+0x9c>)
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002f44:	e010      	b.n	8002f68 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_FE(USART2))//clear another flag by reading from RDR
 8002f46:	4b0a      	ldr	r3, [pc, #40]	; (8002f70 <USART2_IRQHandler+0x9c>)
 8002f48:	0018      	movs	r0, r3
 8002f4a:	f7ff fefb 	bl	8002d44 <LL_USART_IsActiveFlag_FE>
 8002f4e:	1e03      	subs	r3, r0, #0
 8002f50:	d002      	beq.n	8002f58 <USART2_IRQHandler+0x84>
	      (void) USART2->RDR;
 8002f52:	4b07      	ldr	r3, [pc, #28]	; (8002f70 <USART2_IRQHandler+0x9c>)
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002f56:	e007      	b.n	8002f68 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_NE(USART2))//clear another flag by reading from RDR
 8002f58:	4b05      	ldr	r3, [pc, #20]	; (8002f70 <USART2_IRQHandler+0x9c>)
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	f7ff ff03 	bl	8002d66 <LL_USART_IsActiveFlag_NE>
 8002f60:	1e03      	subs	r3, r0, #0
 8002f62:	d001      	beq.n	8002f68 <USART2_IRQHandler+0x94>
	      (void) USART2->RDR;
 8002f64:	4b02      	ldr	r3, [pc, #8]	; (8002f70 <USART2_IRQHandler+0x9c>)
 8002f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002f68:	46c0      	nop			; (mov r8, r8)
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	46c0      	nop			; (mov r8, r8)
 8002f70:	40004400 	.word	0x40004400

08002f74 <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_USART_IRQHandler(&husart3);
 8002f78:	4b03      	ldr	r3, [pc, #12]	; (8002f88 <USART3_4_LPUART1_IRQHandler+0x14>)
 8002f7a:	0018      	movs	r0, r3
 8002f7c:	f006 fa3c 	bl	80093f8 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 8002f80:	46c0      	nop			; (mov r8, r8)
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	20003390 	.word	0x20003390

08002f8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002f90:	4b03      	ldr	r3, [pc, #12]	; (8002fa0 <SystemInit+0x14>)
 8002f92:	2280      	movs	r2, #128	; 0x80
 8002f94:	0512      	lsls	r2, r2, #20
 8002f96:	609a      	str	r2, [r3, #8]
#endif
}
 8002f98:	46c0      	nop			; (mov r8, r8)
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	46c0      	nop			; (mov r8, r8)
 8002fa0:	e000ed00 	.word	0xe000ed00

08002fa4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002fa4:	480d      	ldr	r0, [pc, #52]	; (8002fdc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002fa6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002fa8:	f7ff fff0 	bl	8002f8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fac:	480c      	ldr	r0, [pc, #48]	; (8002fe0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002fae:	490d      	ldr	r1, [pc, #52]	; (8002fe4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002fb0:	4a0d      	ldr	r2, [pc, #52]	; (8002fe8 <LoopForever+0xe>)
  movs r3, #0
 8002fb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fb4:	e002      	b.n	8002fbc <LoopCopyDataInit>

08002fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fba:	3304      	adds	r3, #4

08002fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fc0:	d3f9      	bcc.n	8002fb6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fc2:	4a0a      	ldr	r2, [pc, #40]	; (8002fec <LoopForever+0x12>)
  ldr r4, =_ebss
 8002fc4:	4c0a      	ldr	r4, [pc, #40]	; (8002ff0 <LoopForever+0x16>)
  movs r3, #0
 8002fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fc8:	e001      	b.n	8002fce <LoopFillZerobss>

08002fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fcc:	3204      	adds	r2, #4

08002fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fd0:	d3fb      	bcc.n	8002fca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002fd2:	f007 fbaf 	bl	800a734 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002fd6:	f7fd faab 	bl	8000530 <main>

08002fda <LoopForever>:

LoopForever:
  b LoopForever
 8002fda:	e7fe      	b.n	8002fda <LoopForever>
  ldr   r0, =_estack
 8002fdc:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8002fe0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fe4:	20003140 	.word	0x20003140
  ldr r2, =_sidata
 8002fe8:	0800a894 	.word	0x0800a894
  ldr r2, =_sbss
 8002fec:	20003140 	.word	0x20003140
  ldr r4, =_ebss
 8002ff0:	20005600 	.word	0x20005600

08002ff4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ff4:	e7fe      	b.n	8002ff4 <ADC1_COMP_IRQHandler>
	...

08002ff8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ffe:	1dfb      	adds	r3, r7, #7
 8003000:	2200      	movs	r2, #0
 8003002:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003004:	4b0b      	ldr	r3, [pc, #44]	; (8003034 <HAL_Init+0x3c>)
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	4b0a      	ldr	r3, [pc, #40]	; (8003034 <HAL_Init+0x3c>)
 800300a:	2180      	movs	r1, #128	; 0x80
 800300c:	0049      	lsls	r1, r1, #1
 800300e:	430a      	orrs	r2, r1
 8003010:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003012:	2000      	movs	r0, #0
 8003014:	f000 f810 	bl	8003038 <HAL_InitTick>
 8003018:	1e03      	subs	r3, r0, #0
 800301a:	d003      	beq.n	8003024 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800301c:	1dfb      	adds	r3, r7, #7
 800301e:	2201      	movs	r2, #1
 8003020:	701a      	strb	r2, [r3, #0]
 8003022:	e001      	b.n	8003028 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003024:	f7ff fb6c 	bl	8002700 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003028:	1dfb      	adds	r3, r7, #7
 800302a:	781b      	ldrb	r3, [r3, #0]
}
 800302c:	0018      	movs	r0, r3
 800302e:	46bd      	mov	sp, r7
 8003030:	b002      	add	sp, #8
 8003032:	bd80      	pop	{r7, pc}
 8003034:	40022000 	.word	0x40022000

08003038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003038:	b590      	push	{r4, r7, lr}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003040:	230f      	movs	r3, #15
 8003042:	18fb      	adds	r3, r7, r3
 8003044:	2200      	movs	r2, #0
 8003046:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003048:	4b1d      	ldr	r3, [pc, #116]	; (80030c0 <HAL_InitTick+0x88>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d02b      	beq.n	80030a8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003050:	4b1c      	ldr	r3, [pc, #112]	; (80030c4 <HAL_InitTick+0x8c>)
 8003052:	681c      	ldr	r4, [r3, #0]
 8003054:	4b1a      	ldr	r3, [pc, #104]	; (80030c0 <HAL_InitTick+0x88>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	0019      	movs	r1, r3
 800305a:	23fa      	movs	r3, #250	; 0xfa
 800305c:	0098      	lsls	r0, r3, #2
 800305e:	f7fd f851 	bl	8000104 <__udivsi3>
 8003062:	0003      	movs	r3, r0
 8003064:	0019      	movs	r1, r3
 8003066:	0020      	movs	r0, r4
 8003068:	f7fd f84c 	bl	8000104 <__udivsi3>
 800306c:	0003      	movs	r3, r0
 800306e:	0018      	movs	r0, r3
 8003070:	f000 fbb3 	bl	80037da <HAL_SYSTICK_Config>
 8003074:	1e03      	subs	r3, r0, #0
 8003076:	d112      	bne.n	800309e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b03      	cmp	r3, #3
 800307c:	d80a      	bhi.n	8003094 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	2301      	movs	r3, #1
 8003082:	425b      	negs	r3, r3
 8003084:	2200      	movs	r2, #0
 8003086:	0018      	movs	r0, r3
 8003088:	f000 fb82 	bl	8003790 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800308c:	4b0e      	ldr	r3, [pc, #56]	; (80030c8 <HAL_InitTick+0x90>)
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	e00d      	b.n	80030b0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003094:	230f      	movs	r3, #15
 8003096:	18fb      	adds	r3, r7, r3
 8003098:	2201      	movs	r2, #1
 800309a:	701a      	strb	r2, [r3, #0]
 800309c:	e008      	b.n	80030b0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800309e:	230f      	movs	r3, #15
 80030a0:	18fb      	adds	r3, r7, r3
 80030a2:	2201      	movs	r2, #1
 80030a4:	701a      	strb	r2, [r3, #0]
 80030a6:	e003      	b.n	80030b0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80030a8:	230f      	movs	r3, #15
 80030aa:	18fb      	adds	r3, r7, r3
 80030ac:	2201      	movs	r2, #1
 80030ae:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80030b0:	230f      	movs	r3, #15
 80030b2:	18fb      	adds	r3, r7, r3
 80030b4:	781b      	ldrb	r3, [r3, #0]
}
 80030b6:	0018      	movs	r0, r3
 80030b8:	46bd      	mov	sp, r7
 80030ba:	b005      	add	sp, #20
 80030bc:	bd90      	pop	{r4, r7, pc}
 80030be:	46c0      	nop			; (mov r8, r8)
 80030c0:	2000313c 	.word	0x2000313c
 80030c4:	20003134 	.word	0x20003134
 80030c8:	20003138 	.word	0x20003138

080030cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80030d0:	4b05      	ldr	r3, [pc, #20]	; (80030e8 <HAL_IncTick+0x1c>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	001a      	movs	r2, r3
 80030d6:	4b05      	ldr	r3, [pc, #20]	; (80030ec <HAL_IncTick+0x20>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	18d2      	adds	r2, r2, r3
 80030dc:	4b03      	ldr	r3, [pc, #12]	; (80030ec <HAL_IncTick+0x20>)
 80030de:	601a      	str	r2, [r3, #0]
}
 80030e0:	46c0      	nop			; (mov r8, r8)
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	46c0      	nop			; (mov r8, r8)
 80030e8:	2000313c 	.word	0x2000313c
 80030ec:	200055fc 	.word	0x200055fc

080030f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  return uwTick;
 80030f4:	4b02      	ldr	r3, [pc, #8]	; (8003100 <HAL_GetTick+0x10>)
 80030f6:	681b      	ldr	r3, [r3, #0]
}
 80030f8:	0018      	movs	r0, r3
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	46c0      	nop			; (mov r8, r8)
 8003100:	200055fc 	.word	0x200055fc

08003104 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800310c:	f7ff fff0 	bl	80030f0 <HAL_GetTick>
 8003110:	0003      	movs	r3, r0
 8003112:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	3301      	adds	r3, #1
 800311c:	d005      	beq.n	800312a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800311e:	4b0a      	ldr	r3, [pc, #40]	; (8003148 <HAL_Delay+0x44>)
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	001a      	movs	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	189b      	adds	r3, r3, r2
 8003128:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800312a:	46c0      	nop			; (mov r8, r8)
 800312c:	f7ff ffe0 	bl	80030f0 <HAL_GetTick>
 8003130:	0002      	movs	r2, r0
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	429a      	cmp	r2, r3
 800313a:	d8f7      	bhi.n	800312c <HAL_Delay+0x28>
  {
  }
}
 800313c:	46c0      	nop			; (mov r8, r8)
 800313e:	46c0      	nop			; (mov r8, r8)
 8003140:	46bd      	mov	sp, r7
 8003142:	b004      	add	sp, #16
 8003144:	bd80      	pop	{r7, pc}
 8003146:	46c0      	nop			; (mov r8, r8)
 8003148:	2000313c 	.word	0x2000313c

0800314c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8003154:	4b06      	ldr	r3, [pc, #24]	; (8003170 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a06      	ldr	r2, [pc, #24]	; (8003174 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800315a:	4013      	ands	r3, r2
 800315c:	0019      	movs	r1, r3
 800315e:	4b04      	ldr	r3, [pc, #16]	; (8003170 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	430a      	orrs	r2, r1
 8003164:	601a      	str	r2, [r3, #0]
}
 8003166:	46c0      	nop			; (mov r8, r8)
 8003168:	46bd      	mov	sp, r7
 800316a:	b002      	add	sp, #8
 800316c:	bd80      	pop	{r7, pc}
 800316e:	46c0      	nop			; (mov r8, r8)
 8003170:	40010000 	.word	0x40010000
 8003174:	fffff9ff 	.word	0xfffff9ff

08003178 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003180:	4a05      	ldr	r2, [pc, #20]	; (8003198 <LL_EXTI_EnableIT_0_31+0x20>)
 8003182:	2380      	movs	r3, #128	; 0x80
 8003184:	58d2      	ldr	r2, [r2, r3]
 8003186:	4904      	ldr	r1, [pc, #16]	; (8003198 <LL_EXTI_EnableIT_0_31+0x20>)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4313      	orrs	r3, r2
 800318c:	2280      	movs	r2, #128	; 0x80
 800318e:	508b      	str	r3, [r1, r2]
}
 8003190:	46c0      	nop			; (mov r8, r8)
 8003192:	46bd      	mov	sp, r7
 8003194:	b002      	add	sp, #8
 8003196:	bd80      	pop	{r7, pc}
 8003198:	40021800 	.word	0x40021800

0800319c <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80031a4:	4a06      	ldr	r2, [pc, #24]	; (80031c0 <LL_EXTI_DisableIT_0_31+0x24>)
 80031a6:	2380      	movs	r3, #128	; 0x80
 80031a8:	58d3      	ldr	r3, [r2, r3]
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	43d2      	mvns	r2, r2
 80031ae:	4904      	ldr	r1, [pc, #16]	; (80031c0 <LL_EXTI_DisableIT_0_31+0x24>)
 80031b0:	4013      	ands	r3, r2
 80031b2:	2280      	movs	r2, #128	; 0x80
 80031b4:	508b      	str	r3, [r1, r2]
}
 80031b6:	46c0      	nop			; (mov r8, r8)
 80031b8:	46bd      	mov	sp, r7
 80031ba:	b002      	add	sp, #8
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	46c0      	nop			; (mov r8, r8)
 80031c0:	40021800 	.word	0x40021800

080031c4 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80031cc:	4a05      	ldr	r2, [pc, #20]	; (80031e4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80031ce:	2384      	movs	r3, #132	; 0x84
 80031d0:	58d2      	ldr	r2, [r2, r3]
 80031d2:	4904      	ldr	r1, [pc, #16]	; (80031e4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	2284      	movs	r2, #132	; 0x84
 80031da:	508b      	str	r3, [r1, r2]

}
 80031dc:	46c0      	nop			; (mov r8, r8)
 80031de:	46bd      	mov	sp, r7
 80031e0:	b002      	add	sp, #8
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40021800 	.word	0x40021800

080031e8 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80031f0:	4a06      	ldr	r2, [pc, #24]	; (800320c <LL_EXTI_DisableEvent_0_31+0x24>)
 80031f2:	2384      	movs	r3, #132	; 0x84
 80031f4:	58d3      	ldr	r3, [r2, r3]
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	43d2      	mvns	r2, r2
 80031fa:	4904      	ldr	r1, [pc, #16]	; (800320c <LL_EXTI_DisableEvent_0_31+0x24>)
 80031fc:	4013      	ands	r3, r2
 80031fe:	2284      	movs	r2, #132	; 0x84
 8003200:	508b      	str	r3, [r1, r2]
}
 8003202:	46c0      	nop			; (mov r8, r8)
 8003204:	46bd      	mov	sp, r7
 8003206:	b002      	add	sp, #8
 8003208:	bd80      	pop	{r7, pc}
 800320a:	46c0      	nop			; (mov r8, r8)
 800320c:	40021800 	.word	0x40021800

08003210 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8003218:	4b04      	ldr	r3, [pc, #16]	; (800322c <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 800321a:	6819      	ldr	r1, [r3, #0]
 800321c:	4b03      	ldr	r3, [pc, #12]	; (800322c <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	430a      	orrs	r2, r1
 8003222:	601a      	str	r2, [r3, #0]

}
 8003224:	46c0      	nop			; (mov r8, r8)
 8003226:	46bd      	mov	sp, r7
 8003228:	b002      	add	sp, #8
 800322a:	bd80      	pop	{r7, pc}
 800322c:	40021800 	.word	0x40021800

08003230 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8003238:	4b05      	ldr	r3, [pc, #20]	; (8003250 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	43d9      	mvns	r1, r3
 8003240:	4b03      	ldr	r3, [pc, #12]	; (8003250 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8003242:	400a      	ands	r2, r1
 8003244:	601a      	str	r2, [r3, #0]

}
 8003246:	46c0      	nop			; (mov r8, r8)
 8003248:	46bd      	mov	sp, r7
 800324a:	b002      	add	sp, #8
 800324c:	bd80      	pop	{r7, pc}
 800324e:	46c0      	nop			; (mov r8, r8)
 8003250:	40021800 	.word	0x40021800

08003254 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800325c:	4b04      	ldr	r3, [pc, #16]	; (8003270 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 800325e:	6859      	ldr	r1, [r3, #4]
 8003260:	4b03      	ldr	r3, [pc, #12]	; (8003270 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	430a      	orrs	r2, r1
 8003266:	605a      	str	r2, [r3, #4]
}
 8003268:	46c0      	nop			; (mov r8, r8)
 800326a:	46bd      	mov	sp, r7
 800326c:	b002      	add	sp, #8
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40021800 	.word	0x40021800

08003274 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800327c:	4b05      	ldr	r3, [pc, #20]	; (8003294 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800327e:	685a      	ldr	r2, [r3, #4]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	43d9      	mvns	r1, r3
 8003284:	4b03      	ldr	r3, [pc, #12]	; (8003294 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8003286:	400a      	ands	r2, r1
 8003288:	605a      	str	r2, [r3, #4]
}
 800328a:	46c0      	nop			; (mov r8, r8)
 800328c:	46bd      	mov	sp, r7
 800328e:	b002      	add	sp, #8
 8003290:	bd80      	pop	{r7, pc}
 8003292:	46c0      	nop			; (mov r8, r8)
 8003294:	40021800 	.word	0x40021800

08003298 <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 80032a0:	4b03      	ldr	r3, [pc, #12]	; (80032b0 <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	611a      	str	r2, [r3, #16]
}
 80032a6:	46c0      	nop			; (mov r8, r8)
 80032a8:	46bd      	mov	sp, r7
 80032aa:	b002      	add	sp, #8
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	46c0      	nop			; (mov r8, r8)
 80032b0:	40021800 	.word	0x40021800

080032b4 <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 80032bc:	4b03      	ldr	r3, [pc, #12]	; (80032cc <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	60da      	str	r2, [r3, #12]
}
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	46bd      	mov	sp, r7
 80032c6:	b002      	add	sp, #8
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	46c0      	nop			; (mov r8, r8)
 80032cc:	40021800 	.word	0x40021800

080032d0 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b088      	sub	sp, #32
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80032d8:	2300      	movs	r3, #0
 80032da:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80032dc:	211f      	movs	r1, #31
 80032de:	187b      	adds	r3, r7, r1
 80032e0:	2200      	movs	r2, #0
 80032e2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t * comp_common_odd;
  __IO uint32_t * comp_common_even;
#endif

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d103      	bne.n	80032f2 <HAL_COMP_Init+0x22>
  {
    status = HAL_ERROR;
 80032ea:	187b      	adds	r3, r7, r1
 80032ec:	2201      	movs	r2, #1
 80032ee:	701a      	strb	r2, [r3, #0]
 80032f0:	e13d      	b.n	800356e <HAL_COMP_Init+0x29e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	0fdb      	lsrs	r3, r3, #31
 80032fa:	07da      	lsls	r2, r3, #31
 80032fc:	2380      	movs	r3, #128	; 0x80
 80032fe:	061b      	lsls	r3, r3, #24
 8003300:	429a      	cmp	r2, r3
 8003302:	d104      	bne.n	800330e <HAL_COMP_Init+0x3e>
  {
    status = HAL_ERROR;
 8003304:	231f      	movs	r3, #31
 8003306:	18fb      	adds	r3, r7, r3
 8003308:	2201      	movs	r2, #1
 800330a:	701a      	strb	r2, [r3, #0]
 800330c:	e12f      	b.n	800356e <HAL_COMP_Init+0x29e>
    if(hcomp->Init.WindowMode != COMP_WINDOWMODE_DISABLE)
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2229      	movs	r2, #41	; 0x29
 8003312:	5c9b      	ldrb	r3, [r3, r2]
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10a      	bne.n	8003330 <HAL_COMP_Init+0x60>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2228      	movs	r2, #40	; 0x28
 800331e:	2100      	movs	r1, #0
 8003320:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	0018      	movs	r0, r3
 800332c:	f7ff fa10 	bl	8002750 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2230      	movs	r2, #48	; 0x30
 8003338:	4013      	ands	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	69db      	ldr	r3, [r3, #28]
 8003356:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (  hcomp->Init.InputMinus
 800335c:	4313      	orrs	r3, r2
 800335e:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a85      	ldr	r2, [pc, #532]	; (800357c <HAL_COMP_Init+0x2ac>)
 8003368:	4013      	ands	r3, r2
 800336a:	0019      	movs	r1, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	430a      	orrs	r2, r1
 8003374:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(*comp_common_odd, COMP_CSR_WINOUT);
        CLEAR_BIT(*comp_common_even, COMP_CSR_WINOUT);
        break;
    }
#else
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	2380      	movs	r3, #128	; 0x80
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	429a      	cmp	r2, r3
 8003380:	d10d      	bne.n	800339e <HAL_COMP_Init+0xce>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8003382:	4b7f      	ldr	r3, [pc, #508]	; (8003580 <HAL_COMP_Init+0x2b0>)
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	4b7e      	ldr	r3, [pc, #504]	; (8003580 <HAL_COMP_Init+0x2b0>)
 8003388:	497e      	ldr	r1, [pc, #504]	; (8003584 <HAL_COMP_Init+0x2b4>)
 800338a:	400a      	ands	r2, r1
 800338c:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800338e:	4b7c      	ldr	r3, [pc, #496]	; (8003580 <HAL_COMP_Init+0x2b0>)
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	4b7b      	ldr	r3, [pc, #492]	; (8003580 <HAL_COMP_Init+0x2b0>)
 8003394:	2180      	movs	r1, #128	; 0x80
 8003396:	0109      	lsls	r1, r1, #4
 8003398:	430a      	orrs	r2, r1
 800339a:	605a      	str	r2, [r3, #4]
 800339c:	e01f      	b.n	80033de <HAL_COMP_Init+0x10e>
    }
    else if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	23c0      	movs	r3, #192	; 0xc0
 80033a4:	015b      	lsls	r3, r3, #5
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d10d      	bne.n	80033c6 <HAL_COMP_Init+0xf6>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 80033aa:	4b75      	ldr	r3, [pc, #468]	; (8003580 <HAL_COMP_Init+0x2b0>)
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	4b74      	ldr	r3, [pc, #464]	; (8003580 <HAL_COMP_Init+0x2b0>)
 80033b0:	2180      	movs	r1, #128	; 0x80
 80033b2:	0109      	lsls	r1, r1, #4
 80033b4:	430a      	orrs	r2, r1
 80033b6:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 80033b8:	4b71      	ldr	r3, [pc, #452]	; (8003580 <HAL_COMP_Init+0x2b0>)
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	4b70      	ldr	r3, [pc, #448]	; (8003580 <HAL_COMP_Init+0x2b0>)
 80033be:	4971      	ldr	r1, [pc, #452]	; (8003584 <HAL_COMP_Init+0x2b4>)
 80033c0:	400a      	ands	r2, r1
 80033c2:	605a      	str	r2, [r3, #4]
 80033c4:	e00b      	b.n	80033de <HAL_COMP_Init+0x10e>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 80033c6:	4b6e      	ldr	r3, [pc, #440]	; (8003580 <HAL_COMP_Init+0x2b0>)
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	4b6d      	ldr	r3, [pc, #436]	; (8003580 <HAL_COMP_Init+0x2b0>)
 80033cc:	496d      	ldr	r1, [pc, #436]	; (8003584 <HAL_COMP_Init+0x2b4>)
 80033ce:	400a      	ands	r2, r1
 80033d0:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 80033d2:	4b6b      	ldr	r3, [pc, #428]	; (8003580 <HAL_COMP_Init+0x2b0>)
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	4b6a      	ldr	r3, [pc, #424]	; (8003580 <HAL_COMP_Init+0x2b0>)
 80033d8:	496a      	ldr	r1, [pc, #424]	; (8003584 <HAL_COMP_Init+0x2b4>)
 80033da:	400a      	ands	r2, r1
 80033dc:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	22a0      	movs	r2, #160	; 0xa0
 80033e4:	01d2      	lsls	r2, r2, #7
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d017      	beq.n	800341a <HAL_COMP_Init+0x14a>
 80033ea:	22a0      	movs	r2, #160	; 0xa0
 80033ec:	01d2      	lsls	r2, r2, #7
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d830      	bhi.n	8003454 <HAL_COMP_Init+0x184>
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d01f      	beq.n	8003436 <HAL_COMP_Init+0x166>
 80033f6:	2280      	movs	r2, #128	; 0x80
 80033f8:	01d2      	lsls	r2, r2, #7
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d12a      	bne.n	8003454 <HAL_COMP_Init+0x184>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80033fe:	4b60      	ldr	r3, [pc, #384]	; (8003580 <HAL_COMP_Init+0x2b0>)
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	4b5f      	ldr	r3, [pc, #380]	; (8003580 <HAL_COMP_Init+0x2b0>)
 8003404:	2180      	movs	r1, #128	; 0x80
 8003406:	01c9      	lsls	r1, r1, #7
 8003408:	430a      	orrs	r2, r1
 800340a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 800340c:	4b5c      	ldr	r3, [pc, #368]	; (8003580 <HAL_COMP_Init+0x2b0>)
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	4b5b      	ldr	r3, [pc, #364]	; (8003580 <HAL_COMP_Init+0x2b0>)
 8003412:	495d      	ldr	r1, [pc, #372]	; (8003588 <HAL_COMP_Init+0x2b8>)
 8003414:	400a      	ands	r2, r1
 8003416:	605a      	str	r2, [r3, #4]
        break;
 8003418:	e029      	b.n	800346e <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800341a:	4b59      	ldr	r3, [pc, #356]	; (8003580 <HAL_COMP_Init+0x2b0>)
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	4b58      	ldr	r3, [pc, #352]	; (8003580 <HAL_COMP_Init+0x2b0>)
 8003420:	4959      	ldr	r1, [pc, #356]	; (8003588 <HAL_COMP_Init+0x2b8>)
 8003422:	400a      	ands	r2, r1
 8003424:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8003426:	4b56      	ldr	r3, [pc, #344]	; (8003580 <HAL_COMP_Init+0x2b0>)
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	4b55      	ldr	r3, [pc, #340]	; (8003580 <HAL_COMP_Init+0x2b0>)
 800342c:	2180      	movs	r1, #128	; 0x80
 800342e:	01c9      	lsls	r1, r1, #7
 8003430:	430a      	orrs	r2, r1
 8003432:	605a      	str	r2, [r3, #4]
        break;
 8003434:	e01b      	b.n	800346e <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8003436:	4b52      	ldr	r3, [pc, #328]	; (8003580 <HAL_COMP_Init+0x2b0>)
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	4b51      	ldr	r3, [pc, #324]	; (8003580 <HAL_COMP_Init+0x2b0>)
 800343c:	2180      	movs	r1, #128	; 0x80
 800343e:	01c9      	lsls	r1, r1, #7
 8003440:	430a      	orrs	r2, r1
 8003442:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8003444:	4b4e      	ldr	r3, [pc, #312]	; (8003580 <HAL_COMP_Init+0x2b0>)
 8003446:	685a      	ldr	r2, [r3, #4]
 8003448:	4b4d      	ldr	r3, [pc, #308]	; (8003580 <HAL_COMP_Init+0x2b0>)
 800344a:	2180      	movs	r1, #128	; 0x80
 800344c:	01c9      	lsls	r1, r1, #7
 800344e:	430a      	orrs	r2, r1
 8003450:	605a      	str	r2, [r3, #4]
        break;
 8003452:	e00c      	b.n	800346e <HAL_COMP_Init+0x19e>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8003454:	4b4a      	ldr	r3, [pc, #296]	; (8003580 <HAL_COMP_Init+0x2b0>)
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	4b49      	ldr	r3, [pc, #292]	; (8003580 <HAL_COMP_Init+0x2b0>)
 800345a:	494b      	ldr	r1, [pc, #300]	; (8003588 <HAL_COMP_Init+0x2b8>)
 800345c:	400a      	ands	r2, r1
 800345e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8003460:	4b47      	ldr	r3, [pc, #284]	; (8003580 <HAL_COMP_Init+0x2b0>)
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	4b46      	ldr	r3, [pc, #280]	; (8003580 <HAL_COMP_Init+0x2b0>)
 8003466:	4948      	ldr	r1, [pc, #288]	; (8003588 <HAL_COMP_Init+0x2b8>)
 8003468:	400a      	ands	r2, r1
 800346a:	605a      	str	r2, [r3, #4]
        break;
 800346c:	46c0      	nop			; (mov r8, r8)
    }
#endif

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2230      	movs	r2, #48	; 0x30
 8003476:	4013      	ands	r3, r2
 8003478:	d016      	beq.n	80034a8 <HAL_COMP_Init+0x1d8>
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d113      	bne.n	80034a8 <HAL_COMP_Init+0x1d8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003480:	4b42      	ldr	r3, [pc, #264]	; (800358c <HAL_COMP_Init+0x2bc>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4942      	ldr	r1, [pc, #264]	; (8003590 <HAL_COMP_Init+0x2c0>)
 8003486:	0018      	movs	r0, r3
 8003488:	f7fc fe3c 	bl	8000104 <__udivsi3>
 800348c:	0003      	movs	r3, r0
 800348e:	001a      	movs	r2, r3
 8003490:	0013      	movs	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	189b      	adds	r3, r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800349a:	e002      	b.n	80034a2 <HAL_COMP_Init+0x1d2>
      {
        wait_loop_index--;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	3b01      	subs	r3, #1
 80034a0:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1f9      	bne.n	800349c <HAL_COMP_Init+0x1cc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a34      	ldr	r2, [pc, #208]	; (8003580 <HAL_COMP_Init+0x2b0>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d102      	bne.n	80034b8 <HAL_COMP_Init+0x1e8>
 80034b2:	2380      	movs	r3, #128	; 0x80
 80034b4:	029b      	lsls	r3, r3, #10
 80034b6:	e001      	b.n	80034bc <HAL_COMP_Init+0x1ec>
 80034b8:	2380      	movs	r3, #128	; 0x80
 80034ba:	02db      	lsls	r3, r3, #11
 80034bc:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	2203      	movs	r2, #3
 80034c4:	4013      	ands	r3, r2
 80034c6:	d040      	beq.n	800354a <HAL_COMP_Init+0x27a>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	2210      	movs	r2, #16
 80034ce:	4013      	ands	r3, r2
 80034d0:	d004      	beq.n	80034dc <HAL_COMP_Init+0x20c>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	0018      	movs	r0, r3
 80034d6:	f7ff fe9b 	bl	8003210 <LL_EXTI_EnableRisingTrig_0_31>
 80034da:	e003      	b.n	80034e4 <HAL_COMP_Init+0x214>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	0018      	movs	r0, r3
 80034e0:	f7ff fea6 	bl	8003230 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	2220      	movs	r2, #32
 80034ea:	4013      	ands	r3, r2
 80034ec:	d004      	beq.n	80034f8 <HAL_COMP_Init+0x228>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	0018      	movs	r0, r3
 80034f2:	f7ff feaf 	bl	8003254 <LL_EXTI_EnableFallingTrig_0_31>
 80034f6:	e003      	b.n	8003500 <HAL_COMP_Init+0x230>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	0018      	movs	r0, r3
 80034fc:	f7ff feba 	bl	8003274 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	0018      	movs	r0, r3
 8003504:	f7ff fed6 	bl	80032b4 <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	0018      	movs	r0, r3
 800350c:	f7ff fec4 	bl	8003298 <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003514:	2202      	movs	r2, #2
 8003516:	4013      	ands	r3, r2
 8003518:	d004      	beq.n	8003524 <HAL_COMP_Init+0x254>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	0018      	movs	r0, r3
 800351e:	f7ff fe51 	bl	80031c4 <LL_EXTI_EnableEvent_0_31>
 8003522:	e003      	b.n	800352c <HAL_COMP_Init+0x25c>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	0018      	movs	r0, r3
 8003528:	f7ff fe5e 	bl	80031e8 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003530:	2201      	movs	r2, #1
 8003532:	4013      	ands	r3, r2
 8003534:	d004      	beq.n	8003540 <HAL_COMP_Init+0x270>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	0018      	movs	r0, r3
 800353a:	f7ff fe1d 	bl	8003178 <LL_EXTI_EnableIT_0_31>
 800353e:	e00c      	b.n	800355a <HAL_COMP_Init+0x28a>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	0018      	movs	r0, r3
 8003544:	f7ff fe2a 	bl	800319c <LL_EXTI_DisableIT_0_31>
 8003548:	e007      	b.n	800355a <HAL_COMP_Init+0x28a>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	0018      	movs	r0, r3
 800354e:	f7ff fe4b 	bl	80031e8 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	0018      	movs	r0, r3
 8003556:	f7ff fe21 	bl	800319c <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2229      	movs	r2, #41	; 0x29
 800355e:	5c9b      	ldrb	r3, [r3, r2]
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d103      	bne.n	800356e <HAL_COMP_Init+0x29e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2229      	movs	r2, #41	; 0x29
 800356a:	2101      	movs	r1, #1
 800356c:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800356e:	231f      	movs	r3, #31
 8003570:	18fb      	adds	r3, r7, r3
 8003572:	781b      	ldrb	r3, [r3, #0]
}
 8003574:	0018      	movs	r0, r3
 8003576:	46bd      	mov	sp, r7
 8003578:	b008      	add	sp, #32
 800357a:	bd80      	pop	{r7, pc}
 800357c:	fe00740f 	.word	0xfe00740f
 8003580:	40010200 	.word	0x40010200
 8003584:	fffff7ff 	.word	0xfffff7ff
 8003588:	ffffbfff 	.word	0xffffbfff
 800358c:	20003134 	.word	0x20003134
 8003590:	00030d40 	.word	0x00030d40

08003594 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 800359c:	2300      	movs	r3, #0
 800359e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80035a0:	210f      	movs	r1, #15
 80035a2:	187b      	adds	r3, r7, r1
 80035a4:	2200      	movs	r2, #0
 80035a6:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d103      	bne.n	80035b6 <HAL_COMP_Start+0x22>
  {
    status = HAL_ERROR;
 80035ae:	187b      	adds	r3, r7, r1
 80035b0:	2201      	movs	r2, #1
 80035b2:	701a      	strb	r2, [r3, #0]
 80035b4:	e034      	b.n	8003620 <HAL_COMP_Start+0x8c>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	0fdb      	lsrs	r3, r3, #31
 80035be:	07da      	lsls	r2, r3, #31
 80035c0:	2380      	movs	r3, #128	; 0x80
 80035c2:	061b      	lsls	r3, r3, #24
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d104      	bne.n	80035d2 <HAL_COMP_Start+0x3e>
  {
    status = HAL_ERROR;
 80035c8:	230f      	movs	r3, #15
 80035ca:	18fb      	adds	r3, r7, r3
 80035cc:	2201      	movs	r2, #1
 80035ce:	701a      	strb	r2, [r3, #0]
 80035d0:	e026      	b.n	8003620 <HAL_COMP_Start+0x8c>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2229      	movs	r2, #41	; 0x29
 80035d6:	5c9b      	ldrb	r3, [r3, r2]
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d11c      	bne.n	8003618 <HAL_COMP_Start+0x84>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2101      	movs	r1, #1
 80035ea:	430a      	orrs	r2, r1
 80035ec:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2229      	movs	r2, #41	; 0x29
 80035f2:	2102      	movs	r1, #2
 80035f4:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80035f6:	4b0e      	ldr	r3, [pc, #56]	; (8003630 <HAL_COMP_Start+0x9c>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	490e      	ldr	r1, [pc, #56]	; (8003634 <HAL_COMP_Start+0xa0>)
 80035fc:	0018      	movs	r0, r3
 80035fe:	f7fc fd81 	bl	8000104 <__udivsi3>
 8003602:	0003      	movs	r3, r0
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003608:	e002      	b.n	8003610 <HAL_COMP_Start+0x7c>
      {
        wait_loop_index--;
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	3b01      	subs	r3, #1
 800360e:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1f9      	bne.n	800360a <HAL_COMP_Start+0x76>
 8003616:	e003      	b.n	8003620 <HAL_COMP_Start+0x8c>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003618:	230f      	movs	r3, #15
 800361a:	18fb      	adds	r3, r7, r3
 800361c:	2201      	movs	r2, #1
 800361e:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8003620:	230f      	movs	r3, #15
 8003622:	18fb      	adds	r3, r7, r3
 8003624:	781b      	ldrb	r3, [r3, #0]
}
 8003626:	0018      	movs	r0, r3
 8003628:	46bd      	mov	sp, r7
 800362a:	b004      	add	sp, #16
 800362c:	bd80      	pop	{r7, pc}
 800362e:	46c0      	nop			; (mov r8, r8)
 8003630:	20003134 	.word	0x20003134
 8003634:	00030d40 	.word	0x00030d40

08003638 <__NVIC_EnableIRQ>:
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	0002      	movs	r2, r0
 8003640:	1dfb      	adds	r3, r7, #7
 8003642:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003644:	1dfb      	adds	r3, r7, #7
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2b7f      	cmp	r3, #127	; 0x7f
 800364a:	d809      	bhi.n	8003660 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800364c:	1dfb      	adds	r3, r7, #7
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	001a      	movs	r2, r3
 8003652:	231f      	movs	r3, #31
 8003654:	401a      	ands	r2, r3
 8003656:	4b04      	ldr	r3, [pc, #16]	; (8003668 <__NVIC_EnableIRQ+0x30>)
 8003658:	2101      	movs	r1, #1
 800365a:	4091      	lsls	r1, r2
 800365c:	000a      	movs	r2, r1
 800365e:	601a      	str	r2, [r3, #0]
}
 8003660:	46c0      	nop			; (mov r8, r8)
 8003662:	46bd      	mov	sp, r7
 8003664:	b002      	add	sp, #8
 8003666:	bd80      	pop	{r7, pc}
 8003668:	e000e100 	.word	0xe000e100

0800366c <__NVIC_SetPriority>:
{
 800366c:	b590      	push	{r4, r7, lr}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	0002      	movs	r2, r0
 8003674:	6039      	str	r1, [r7, #0]
 8003676:	1dfb      	adds	r3, r7, #7
 8003678:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800367a:	1dfb      	adds	r3, r7, #7
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	2b7f      	cmp	r3, #127	; 0x7f
 8003680:	d828      	bhi.n	80036d4 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003682:	4a2f      	ldr	r2, [pc, #188]	; (8003740 <__NVIC_SetPriority+0xd4>)
 8003684:	1dfb      	adds	r3, r7, #7
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	b25b      	sxtb	r3, r3
 800368a:	089b      	lsrs	r3, r3, #2
 800368c:	33c0      	adds	r3, #192	; 0xc0
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	589b      	ldr	r3, [r3, r2]
 8003692:	1dfa      	adds	r2, r7, #7
 8003694:	7812      	ldrb	r2, [r2, #0]
 8003696:	0011      	movs	r1, r2
 8003698:	2203      	movs	r2, #3
 800369a:	400a      	ands	r2, r1
 800369c:	00d2      	lsls	r2, r2, #3
 800369e:	21ff      	movs	r1, #255	; 0xff
 80036a0:	4091      	lsls	r1, r2
 80036a2:	000a      	movs	r2, r1
 80036a4:	43d2      	mvns	r2, r2
 80036a6:	401a      	ands	r2, r3
 80036a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	019b      	lsls	r3, r3, #6
 80036ae:	22ff      	movs	r2, #255	; 0xff
 80036b0:	401a      	ands	r2, r3
 80036b2:	1dfb      	adds	r3, r7, #7
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	0018      	movs	r0, r3
 80036b8:	2303      	movs	r3, #3
 80036ba:	4003      	ands	r3, r0
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036c0:	481f      	ldr	r0, [pc, #124]	; (8003740 <__NVIC_SetPriority+0xd4>)
 80036c2:	1dfb      	adds	r3, r7, #7
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	b25b      	sxtb	r3, r3
 80036c8:	089b      	lsrs	r3, r3, #2
 80036ca:	430a      	orrs	r2, r1
 80036cc:	33c0      	adds	r3, #192	; 0xc0
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	501a      	str	r2, [r3, r0]
}
 80036d2:	e031      	b.n	8003738 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036d4:	4a1b      	ldr	r2, [pc, #108]	; (8003744 <__NVIC_SetPriority+0xd8>)
 80036d6:	1dfb      	adds	r3, r7, #7
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	0019      	movs	r1, r3
 80036dc:	230f      	movs	r3, #15
 80036de:	400b      	ands	r3, r1
 80036e0:	3b08      	subs	r3, #8
 80036e2:	089b      	lsrs	r3, r3, #2
 80036e4:	3306      	adds	r3, #6
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	18d3      	adds	r3, r2, r3
 80036ea:	3304      	adds	r3, #4
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	1dfa      	adds	r2, r7, #7
 80036f0:	7812      	ldrb	r2, [r2, #0]
 80036f2:	0011      	movs	r1, r2
 80036f4:	2203      	movs	r2, #3
 80036f6:	400a      	ands	r2, r1
 80036f8:	00d2      	lsls	r2, r2, #3
 80036fa:	21ff      	movs	r1, #255	; 0xff
 80036fc:	4091      	lsls	r1, r2
 80036fe:	000a      	movs	r2, r1
 8003700:	43d2      	mvns	r2, r2
 8003702:	401a      	ands	r2, r3
 8003704:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	019b      	lsls	r3, r3, #6
 800370a:	22ff      	movs	r2, #255	; 0xff
 800370c:	401a      	ands	r2, r3
 800370e:	1dfb      	adds	r3, r7, #7
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	0018      	movs	r0, r3
 8003714:	2303      	movs	r3, #3
 8003716:	4003      	ands	r3, r0
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800371c:	4809      	ldr	r0, [pc, #36]	; (8003744 <__NVIC_SetPriority+0xd8>)
 800371e:	1dfb      	adds	r3, r7, #7
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	001c      	movs	r4, r3
 8003724:	230f      	movs	r3, #15
 8003726:	4023      	ands	r3, r4
 8003728:	3b08      	subs	r3, #8
 800372a:	089b      	lsrs	r3, r3, #2
 800372c:	430a      	orrs	r2, r1
 800372e:	3306      	adds	r3, #6
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	18c3      	adds	r3, r0, r3
 8003734:	3304      	adds	r3, #4
 8003736:	601a      	str	r2, [r3, #0]
}
 8003738:	46c0      	nop			; (mov r8, r8)
 800373a:	46bd      	mov	sp, r7
 800373c:	b003      	add	sp, #12
 800373e:	bd90      	pop	{r4, r7, pc}
 8003740:	e000e100 	.word	0xe000e100
 8003744:	e000ed00 	.word	0xe000ed00

08003748 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	1e5a      	subs	r2, r3, #1
 8003754:	2380      	movs	r3, #128	; 0x80
 8003756:	045b      	lsls	r3, r3, #17
 8003758:	429a      	cmp	r2, r3
 800375a:	d301      	bcc.n	8003760 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800375c:	2301      	movs	r3, #1
 800375e:	e010      	b.n	8003782 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003760:	4b0a      	ldr	r3, [pc, #40]	; (800378c <SysTick_Config+0x44>)
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	3a01      	subs	r2, #1
 8003766:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003768:	2301      	movs	r3, #1
 800376a:	425b      	negs	r3, r3
 800376c:	2103      	movs	r1, #3
 800376e:	0018      	movs	r0, r3
 8003770:	f7ff ff7c 	bl	800366c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003774:	4b05      	ldr	r3, [pc, #20]	; (800378c <SysTick_Config+0x44>)
 8003776:	2200      	movs	r2, #0
 8003778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800377a:	4b04      	ldr	r3, [pc, #16]	; (800378c <SysTick_Config+0x44>)
 800377c:	2207      	movs	r2, #7
 800377e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003780:	2300      	movs	r3, #0
}
 8003782:	0018      	movs	r0, r3
 8003784:	46bd      	mov	sp, r7
 8003786:	b002      	add	sp, #8
 8003788:	bd80      	pop	{r7, pc}
 800378a:	46c0      	nop			; (mov r8, r8)
 800378c:	e000e010 	.word	0xe000e010

08003790 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	60b9      	str	r1, [r7, #8]
 8003798:	607a      	str	r2, [r7, #4]
 800379a:	210f      	movs	r1, #15
 800379c:	187b      	adds	r3, r7, r1
 800379e:	1c02      	adds	r2, r0, #0
 80037a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80037a2:	68ba      	ldr	r2, [r7, #8]
 80037a4:	187b      	adds	r3, r7, r1
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	b25b      	sxtb	r3, r3
 80037aa:	0011      	movs	r1, r2
 80037ac:	0018      	movs	r0, r3
 80037ae:	f7ff ff5d 	bl	800366c <__NVIC_SetPriority>
}
 80037b2:	46c0      	nop			; (mov r8, r8)
 80037b4:	46bd      	mov	sp, r7
 80037b6:	b004      	add	sp, #16
 80037b8:	bd80      	pop	{r7, pc}

080037ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b082      	sub	sp, #8
 80037be:	af00      	add	r7, sp, #0
 80037c0:	0002      	movs	r2, r0
 80037c2:	1dfb      	adds	r3, r7, #7
 80037c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037c6:	1dfb      	adds	r3, r7, #7
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	b25b      	sxtb	r3, r3
 80037cc:	0018      	movs	r0, r3
 80037ce:	f7ff ff33 	bl	8003638 <__NVIC_EnableIRQ>
}
 80037d2:	46c0      	nop			; (mov r8, r8)
 80037d4:	46bd      	mov	sp, r7
 80037d6:	b002      	add	sp, #8
 80037d8:	bd80      	pop	{r7, pc}

080037da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b082      	sub	sp, #8
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	0018      	movs	r0, r3
 80037e6:	f7ff ffaf 	bl	8003748 <SysTick_Config>
 80037ea:	0003      	movs	r3, r0
}
 80037ec:	0018      	movs	r0, r3
 80037ee:	46bd      	mov	sp, r7
 80037f0:	b002      	add	sp, #8
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e077      	b.n	80038f6 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a3d      	ldr	r2, [pc, #244]	; (8003900 <HAL_DMA_Init+0x10c>)
 800380c:	4694      	mov	ip, r2
 800380e:	4463      	add	r3, ip
 8003810:	2114      	movs	r1, #20
 8003812:	0018      	movs	r0, r3
 8003814:	f7fc fc76 	bl	8000104 <__udivsi3>
 8003818:	0003      	movs	r3, r0
 800381a:	009a      	lsls	r2, r3, #2
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2225      	movs	r2, #37	; 0x25
 8003824:	2102      	movs	r1, #2
 8003826:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4934      	ldr	r1, [pc, #208]	; (8003904 <HAL_DMA_Init+0x110>)
 8003834:	400a      	ands	r2, r1
 8003836:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6819      	ldr	r1, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	689a      	ldr	r2, [r3, #8]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	431a      	orrs	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	431a      	orrs	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	431a      	orrs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	431a      	orrs	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a1b      	ldr	r3, [r3, #32]
 8003864:	431a      	orrs	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	430a      	orrs	r2, r1
 800386c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	0018      	movs	r0, r3
 8003872:	f000 fa37 	bl	8003ce4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	689a      	ldr	r2, [r3, #8]
 800387a:	2380      	movs	r3, #128	; 0x80
 800387c:	01db      	lsls	r3, r3, #7
 800387e:	429a      	cmp	r2, r3
 8003880:	d102      	bne.n	8003888 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003890:	213f      	movs	r1, #63	; 0x3f
 8003892:	400a      	ands	r2, r1
 8003894:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800389e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d011      	beq.n	80038cc <HAL_DMA_Init+0xd8>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	2b04      	cmp	r3, #4
 80038ae:	d80d      	bhi.n	80038cc <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	0018      	movs	r0, r3
 80038b4:	f000 fa42 	bl	8003d3c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038bc:	2200      	movs	r2, #0
 80038be:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80038c8:	605a      	str	r2, [r3, #4]
 80038ca:	e008      	b.n	80038de <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2225      	movs	r2, #37	; 0x25
 80038e8:	2101      	movs	r1, #1
 80038ea:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2224      	movs	r2, #36	; 0x24
 80038f0:	2100      	movs	r1, #0
 80038f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	0018      	movs	r0, r3
 80038f8:	46bd      	mov	sp, r7
 80038fa:	b002      	add	sp, #8
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	46c0      	nop			; (mov r8, r8)
 8003900:	bffdfff8 	.word	0xbffdfff8
 8003904:	ffff800f 	.word	0xffff800f

08003908 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003916:	2317      	movs	r3, #23
 8003918:	18fb      	adds	r3, r7, r3
 800391a:	2200      	movs	r2, #0
 800391c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2224      	movs	r2, #36	; 0x24
 8003922:	5c9b      	ldrb	r3, [r3, r2]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d101      	bne.n	800392c <HAL_DMA_Start_IT+0x24>
 8003928:	2302      	movs	r3, #2
 800392a:	e06f      	b.n	8003a0c <HAL_DMA_Start_IT+0x104>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2224      	movs	r2, #36	; 0x24
 8003930:	2101      	movs	r1, #1
 8003932:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2225      	movs	r2, #37	; 0x25
 8003938:	5c9b      	ldrb	r3, [r3, r2]
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b01      	cmp	r3, #1
 800393e:	d157      	bne.n	80039f0 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2225      	movs	r2, #37	; 0x25
 8003944:	2102      	movs	r1, #2
 8003946:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2101      	movs	r1, #1
 800395a:	438a      	bics	r2, r1
 800395c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	68b9      	ldr	r1, [r7, #8]
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f000 f97d 	bl	8003c64 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396e:	2b00      	cmp	r3, #0
 8003970:	d008      	beq.n	8003984 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	210e      	movs	r1, #14
 800397e:	430a      	orrs	r2, r1
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	e00f      	b.n	80039a4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2104      	movs	r1, #4
 8003990:	438a      	bics	r2, r1
 8003992:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	210a      	movs	r1, #10
 80039a0:	430a      	orrs	r2, r1
 80039a2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	2380      	movs	r3, #128	; 0x80
 80039ac:	025b      	lsls	r3, r3, #9
 80039ae:	4013      	ands	r3, r2
 80039b0:	d008      	beq.n	80039c4 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039bc:	2180      	movs	r1, #128	; 0x80
 80039be:	0049      	lsls	r1, r1, #1
 80039c0:	430a      	orrs	r2, r1
 80039c2:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d008      	beq.n	80039de <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039d6:	2180      	movs	r1, #128	; 0x80
 80039d8:	0049      	lsls	r1, r1, #1
 80039da:	430a      	orrs	r2, r1
 80039dc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2101      	movs	r1, #1
 80039ea:	430a      	orrs	r2, r1
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	e00a      	b.n	8003a06 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2280      	movs	r2, #128	; 0x80
 80039f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2224      	movs	r2, #36	; 0x24
 80039fa:	2100      	movs	r1, #0
 80039fc:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80039fe:	2317      	movs	r3, #23
 8003a00:	18fb      	adds	r3, r7, r3
 8003a02:	2201      	movs	r2, #1
 8003a04:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003a06:	2317      	movs	r3, #23
 8003a08:	18fb      	adds	r3, r7, r3
 8003a0a:	781b      	ldrb	r3, [r3, #0]
}
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	b006      	add	sp, #24
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a1c:	210f      	movs	r1, #15
 8003a1e:	187b      	adds	r3, r7, r1
 8003a20:	2200      	movs	r2, #0
 8003a22:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2225      	movs	r2, #37	; 0x25
 8003a28:	5c9b      	ldrb	r3, [r3, r2]
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d006      	beq.n	8003a3e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2204      	movs	r2, #4
 8003a34:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003a36:	187b      	adds	r3, r7, r1
 8003a38:	2201      	movs	r2, #1
 8003a3a:	701a      	strb	r2, [r3, #0]
 8003a3c:	e049      	b.n	8003ad2 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	210e      	movs	r1, #14
 8003a4a:	438a      	bics	r2, r1
 8003a4c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2101      	movs	r1, #1
 8003a5a:	438a      	bics	r2, r1
 8003a5c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a68:	491d      	ldr	r1, [pc, #116]	; (8003ae0 <HAL_DMA_Abort_IT+0xcc>)
 8003a6a:	400a      	ands	r2, r1
 8003a6c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8003a6e:	4b1d      	ldr	r3, [pc, #116]	; (8003ae4 <HAL_DMA_Abort_IT+0xd0>)
 8003a70:	6859      	ldr	r1, [r3, #4]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	221c      	movs	r2, #28
 8003a78:	4013      	ands	r3, r2
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	409a      	lsls	r2, r3
 8003a7e:	4b19      	ldr	r3, [pc, #100]	; (8003ae4 <HAL_DMA_Abort_IT+0xd0>)
 8003a80:	430a      	orrs	r2, r1
 8003a82:	605a      	str	r2, [r3, #4]
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003a8c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00c      	beq.n	8003ab0 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aa0:	490f      	ldr	r1, [pc, #60]	; (8003ae0 <HAL_DMA_Abort_IT+0xcc>)
 8003aa2:	400a      	ands	r2, r1
 8003aa4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003aae:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2225      	movs	r2, #37	; 0x25
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2224      	movs	r2, #36	; 0x24
 8003abc:	2100      	movs	r1, #0
 8003abe:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d004      	beq.n	8003ad2 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	0010      	movs	r0, r2
 8003ad0:	4798      	blx	r3
    }
  }
  return status;
 8003ad2:	230f      	movs	r3, #15
 8003ad4:	18fb      	adds	r3, r7, r3
 8003ad6:	781b      	ldrb	r3, [r3, #0]
}
 8003ad8:	0018      	movs	r0, r3
 8003ada:	46bd      	mov	sp, r7
 8003adc:	b004      	add	sp, #16
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	fffffeff 	.word	0xfffffeff
 8003ae4:	40020000 	.word	0x40020000

08003ae8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003af0:	4b55      	ldr	r3, [pc, #340]	; (8003c48 <HAL_DMA_IRQHandler+0x160>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t source_it = hdma->Instance->CCR;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	221c      	movs	r2, #28
 8003b04:	4013      	ands	r3, r2
 8003b06:	2204      	movs	r2, #4
 8003b08:	409a      	lsls	r2, r3
 8003b0a:	0013      	movs	r3, r2
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	4013      	ands	r3, r2
 8003b10:	d027      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x7a>
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	2204      	movs	r2, #4
 8003b16:	4013      	ands	r3, r2
 8003b18:	d023      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2220      	movs	r2, #32
 8003b22:	4013      	ands	r3, r2
 8003b24:	d107      	bne.n	8003b36 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2104      	movs	r1, #4
 8003b32:	438a      	bics	r2, r1
 8003b34:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8003b36:	4b44      	ldr	r3, [pc, #272]	; (8003c48 <HAL_DMA_IRQHandler+0x160>)
 8003b38:	6859      	ldr	r1, [r3, #4]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	221c      	movs	r2, #28
 8003b40:	4013      	ands	r3, r2
 8003b42:	2204      	movs	r2, #4
 8003b44:	409a      	lsls	r2, r3
 8003b46:	4b40      	ldr	r3, [pc, #256]	; (8003c48 <HAL_DMA_IRQHandler+0x160>)
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	605a      	str	r2, [r3, #4]
#endif

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d100      	bne.n	8003b56 <HAL_DMA_IRQHandler+0x6e>
 8003b54:	e073      	b.n	8003c3e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	0010      	movs	r0, r2
 8003b5e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003b60:	e06d      	b.n	8003c3e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	221c      	movs	r2, #28
 8003b68:	4013      	ands	r3, r2
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	409a      	lsls	r2, r3
 8003b6e:	0013      	movs	r3, r2
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	4013      	ands	r3, r2
 8003b74:	d02e      	beq.n	8003bd4 <HAL_DMA_IRQHandler+0xec>
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	2202      	movs	r2, #2
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	d02a      	beq.n	8003bd4 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2220      	movs	r2, #32
 8003b86:	4013      	ands	r3, r2
 8003b88:	d10b      	bne.n	8003ba2 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	210a      	movs	r1, #10
 8003b96:	438a      	bics	r2, r1
 8003b98:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2225      	movs	r2, #37	; 0x25
 8003b9e:	2101      	movs	r1, #1
 8003ba0:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003ba2:	4b29      	ldr	r3, [pc, #164]	; (8003c48 <HAL_DMA_IRQHandler+0x160>)
 8003ba4:	6859      	ldr	r1, [r3, #4]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	221c      	movs	r2, #28
 8003bac:	4013      	ands	r3, r2
 8003bae:	2202      	movs	r2, #2
 8003bb0:	409a      	lsls	r2, r3
 8003bb2:	4b25      	ldr	r3, [pc, #148]	; (8003c48 <HAL_DMA_IRQHandler+0x160>)
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2224      	movs	r2, #36	; 0x24
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d03a      	beq.n	8003c3e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	0010      	movs	r0, r2
 8003bd0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003bd2:	e034      	b.n	8003c3e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd8:	221c      	movs	r2, #28
 8003bda:	4013      	ands	r3, r2
 8003bdc:	2208      	movs	r2, #8
 8003bde:	409a      	lsls	r2, r3
 8003be0:	0013      	movs	r3, r2
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	4013      	ands	r3, r2
 8003be6:	d02b      	beq.n	8003c40 <HAL_DMA_IRQHandler+0x158>
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	2208      	movs	r2, #8
 8003bec:	4013      	ands	r3, r2
 8003bee:	d027      	beq.n	8003c40 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	210e      	movs	r1, #14
 8003bfc:	438a      	bics	r2, r1
 8003bfe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003c00:	4b11      	ldr	r3, [pc, #68]	; (8003c48 <HAL_DMA_IRQHandler+0x160>)
 8003c02:	6859      	ldr	r1, [r3, #4]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c08:	221c      	movs	r2, #28
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	409a      	lsls	r2, r3
 8003c10:	4b0d      	ldr	r3, [pc, #52]	; (8003c48 <HAL_DMA_IRQHandler+0x160>)
 8003c12:	430a      	orrs	r2, r1
 8003c14:	605a      	str	r2, [r3, #4]
#endif

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2225      	movs	r2, #37	; 0x25
 8003c20:	2101      	movs	r1, #1
 8003c22:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2224      	movs	r2, #36	; 0x24
 8003c28:	2100      	movs	r1, #0
 8003c2a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d005      	beq.n	8003c40 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	0010      	movs	r0, r2
 8003c3c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003c3e:	46c0      	nop			; (mov r8, r8)
 8003c40:	46c0      	nop			; (mov r8, r8)
}
 8003c42:	46bd      	mov	sp, r7
 8003c44:	b004      	add	sp, #16
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	40020000 	.word	0x40020000

08003c4c <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2225      	movs	r2, #37	; 0x25
 8003c58:	5c9b      	ldrb	r3, [r3, r2]
 8003c5a:	b2db      	uxtb	r3, r3
}
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	b002      	add	sp, #8
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
 8003c70:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003c7a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d004      	beq.n	8003c8e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003c8c:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003c8e:	4b14      	ldr	r3, [pc, #80]	; (8003ce0 <DMA_SetConfig+0x7c>)
 8003c90:	6859      	ldr	r1, [r3, #4]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	221c      	movs	r2, #28
 8003c98:	4013      	ands	r3, r2
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	409a      	lsls	r2, r3
 8003c9e:	4b10      	ldr	r3, [pc, #64]	; (8003ce0 <DMA_SetConfig+0x7c>)
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	605a      	str	r2, [r3, #4]
#endif

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	2b10      	cmp	r3, #16
 8003cb2:	d108      	bne.n	8003cc6 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003cc4:	e007      	b.n	8003cd6 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	60da      	str	r2, [r3, #12]
}
 8003cd6:	46c0      	nop			; (mov r8, r8)
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	b004      	add	sp, #16
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	46c0      	nop			; (mov r8, r8)
 8003ce0:	40020000 	.word	0x40020000

08003ce4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf0:	089b      	lsrs	r3, r3, #2
 8003cf2:	4a10      	ldr	r2, [pc, #64]	; (8003d34 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003cf4:	4694      	mov	ip, r2
 8003cf6:	4463      	add	r3, ip
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	001a      	movs	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	001a      	movs	r2, r3
 8003d06:	23ff      	movs	r3, #255	; 0xff
 8003d08:	4013      	ands	r3, r2
 8003d0a:	3b08      	subs	r3, #8
 8003d0c:	2114      	movs	r1, #20
 8003d0e:	0018      	movs	r0, r3
 8003d10:	f7fc f9f8 	bl	8000104 <__udivsi3>
 8003d14:	0003      	movs	r3, r0
 8003d16:	60fb      	str	r3, [r7, #12]
#endif

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a07      	ldr	r2, [pc, #28]	; (8003d38 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003d1c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	221f      	movs	r2, #31
 8003d22:	4013      	ands	r3, r2
 8003d24:	2201      	movs	r2, #1
 8003d26:	409a      	lsls	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003d2c:	46c0      	nop			; (mov r8, r8)
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	b004      	add	sp, #16
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	10008200 	.word	0x10008200
 8003d38:	40020880 	.word	0x40020880

08003d3c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	223f      	movs	r2, #63	; 0x3f
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	4a0a      	ldr	r2, [pc, #40]	; (8003d7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003d52:	4694      	mov	ip, r2
 8003d54:	4463      	add	r3, ip
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	001a      	movs	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a07      	ldr	r2, [pc, #28]	; (8003d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003d62:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	3b01      	subs	r3, #1
 8003d68:	2203      	movs	r2, #3
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	409a      	lsls	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003d74:	46c0      	nop			; (mov r8, r8)
 8003d76:	46bd      	mov	sp, r7
 8003d78:	b004      	add	sp, #16
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	1000823f 	.word	0x1000823f
 8003d80:	40020940 	.word	0x40020940

08003d84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d92:	e147      	b.n	8004024 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2101      	movs	r1, #1
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	4091      	lsls	r1, r2
 8003d9e:	000a      	movs	r2, r1
 8003da0:	4013      	ands	r3, r2
 8003da2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d100      	bne.n	8003dac <HAL_GPIO_Init+0x28>
 8003daa:	e138      	b.n	800401e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d00b      	beq.n	8003dcc <HAL_GPIO_Init+0x48>
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d007      	beq.n	8003dcc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003dc0:	2b11      	cmp	r3, #17
 8003dc2:	d003      	beq.n	8003dcc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	2b12      	cmp	r3, #18
 8003dca:	d130      	bne.n	8003e2e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	2203      	movs	r2, #3
 8003dd8:	409a      	lsls	r2, r3
 8003dda:	0013      	movs	r3, r2
 8003ddc:	43da      	mvns	r2, r3
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	4013      	ands	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	68da      	ldr	r2, [r3, #12]
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	409a      	lsls	r2, r3
 8003dee:	0013      	movs	r3, r2
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e02:	2201      	movs	r2, #1
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	409a      	lsls	r2, r3
 8003e08:	0013      	movs	r3, r2
 8003e0a:	43da      	mvns	r2, r3
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	091b      	lsrs	r3, r3, #4
 8003e18:	2201      	movs	r2, #1
 8003e1a:	401a      	ands	r2, r3
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	409a      	lsls	r2, r3
 8003e20:	0013      	movs	r3, r2
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	2203      	movs	r2, #3
 8003e3a:	409a      	lsls	r2, r3
 8003e3c:	0013      	movs	r3, r2
 8003e3e:	43da      	mvns	r2, r3
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	4013      	ands	r3, r2
 8003e44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	689a      	ldr	r2, [r3, #8]
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	409a      	lsls	r2, r3
 8003e50:	0013      	movs	r3, r2
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d003      	beq.n	8003e6e <HAL_GPIO_Init+0xea>
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	2b12      	cmp	r3, #18
 8003e6c:	d123      	bne.n	8003eb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	08da      	lsrs	r2, r3, #3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	3208      	adds	r2, #8
 8003e76:	0092      	lsls	r2, r2, #2
 8003e78:	58d3      	ldr	r3, [r2, r3]
 8003e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	2207      	movs	r2, #7
 8003e80:	4013      	ands	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	220f      	movs	r2, #15
 8003e86:	409a      	lsls	r2, r3
 8003e88:	0013      	movs	r3, r2
 8003e8a:	43da      	mvns	r2, r3
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	691a      	ldr	r2, [r3, #16]
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	2107      	movs	r1, #7
 8003e9a:	400b      	ands	r3, r1
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	409a      	lsls	r2, r3
 8003ea0:	0013      	movs	r3, r2
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	08da      	lsrs	r2, r3, #3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3208      	adds	r2, #8
 8003eb0:	0092      	lsls	r2, r2, #2
 8003eb2:	6939      	ldr	r1, [r7, #16]
 8003eb4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	2203      	movs	r2, #3
 8003ec2:	409a      	lsls	r2, r3
 8003ec4:	0013      	movs	r3, r2
 8003ec6:	43da      	mvns	r2, r3
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	2203      	movs	r2, #3
 8003ed4:	401a      	ands	r2, r3
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	409a      	lsls	r2, r3
 8003edc:	0013      	movs	r3, r2
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685a      	ldr	r2, [r3, #4]
 8003eee:	2380      	movs	r3, #128	; 0x80
 8003ef0:	055b      	lsls	r3, r3, #21
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	d100      	bne.n	8003ef8 <HAL_GPIO_Init+0x174>
 8003ef6:	e092      	b.n	800401e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003ef8:	4a50      	ldr	r2, [pc, #320]	; (800403c <HAL_GPIO_Init+0x2b8>)
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	089b      	lsrs	r3, r3, #2
 8003efe:	3318      	adds	r3, #24
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	589b      	ldr	r3, [r3, r2]
 8003f04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	2203      	movs	r2, #3
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	00db      	lsls	r3, r3, #3
 8003f0e:	220f      	movs	r2, #15
 8003f10:	409a      	lsls	r2, r3
 8003f12:	0013      	movs	r3, r2
 8003f14:	43da      	mvns	r2, r3
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	23a0      	movs	r3, #160	; 0xa0
 8003f20:	05db      	lsls	r3, r3, #23
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d013      	beq.n	8003f4e <HAL_GPIO_Init+0x1ca>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a45      	ldr	r2, [pc, #276]	; (8004040 <HAL_GPIO_Init+0x2bc>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d00d      	beq.n	8003f4a <HAL_GPIO_Init+0x1c6>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a44      	ldr	r2, [pc, #272]	; (8004044 <HAL_GPIO_Init+0x2c0>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d007      	beq.n	8003f46 <HAL_GPIO_Init+0x1c2>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a43      	ldr	r2, [pc, #268]	; (8004048 <HAL_GPIO_Init+0x2c4>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d101      	bne.n	8003f42 <HAL_GPIO_Init+0x1be>
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e006      	b.n	8003f50 <HAL_GPIO_Init+0x1cc>
 8003f42:	2305      	movs	r3, #5
 8003f44:	e004      	b.n	8003f50 <HAL_GPIO_Init+0x1cc>
 8003f46:	2302      	movs	r3, #2
 8003f48:	e002      	b.n	8003f50 <HAL_GPIO_Init+0x1cc>
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e000      	b.n	8003f50 <HAL_GPIO_Init+0x1cc>
 8003f4e:	2300      	movs	r3, #0
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	2103      	movs	r1, #3
 8003f54:	400a      	ands	r2, r1
 8003f56:	00d2      	lsls	r2, r2, #3
 8003f58:	4093      	lsls	r3, r2
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003f60:	4936      	ldr	r1, [pc, #216]	; (800403c <HAL_GPIO_Init+0x2b8>)
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	089b      	lsrs	r3, r3, #2
 8003f66:	3318      	adds	r3, #24
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003f6e:	4a33      	ldr	r2, [pc, #204]	; (800403c <HAL_GPIO_Init+0x2b8>)
 8003f70:	2380      	movs	r3, #128	; 0x80
 8003f72:	58d3      	ldr	r3, [r2, r3]
 8003f74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	43da      	mvns	r2, r3
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	2380      	movs	r3, #128	; 0x80
 8003f86:	025b      	lsls	r3, r3, #9
 8003f88:	4013      	ands	r3, r2
 8003f8a:	d003      	beq.n	8003f94 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f94:	4929      	ldr	r1, [pc, #164]	; (800403c <HAL_GPIO_Init+0x2b8>)
 8003f96:	2280      	movs	r2, #128	; 0x80
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8003f9c:	4a27      	ldr	r2, [pc, #156]	; (800403c <HAL_GPIO_Init+0x2b8>)
 8003f9e:	2384      	movs	r3, #132	; 0x84
 8003fa0:	58d3      	ldr	r3, [r2, r3]
 8003fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	43da      	mvns	r2, r3
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	4013      	ands	r3, r2
 8003fac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	2380      	movs	r3, #128	; 0x80
 8003fb4:	029b      	lsls	r3, r3, #10
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	d003      	beq.n	8003fc2 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003fc2:	491e      	ldr	r1, [pc, #120]	; (800403c <HAL_GPIO_Init+0x2b8>)
 8003fc4:	2284      	movs	r2, #132	; 0x84
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003fca:	4b1c      	ldr	r3, [pc, #112]	; (800403c <HAL_GPIO_Init+0x2b8>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	43da      	mvns	r2, r3
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	2380      	movs	r3, #128	; 0x80
 8003fe0:	035b      	lsls	r3, r3, #13
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	d003      	beq.n	8003fee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003fee:	4b13      	ldr	r3, [pc, #76]	; (800403c <HAL_GPIO_Init+0x2b8>)
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003ff4:	4b11      	ldr	r3, [pc, #68]	; (800403c <HAL_GPIO_Init+0x2b8>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	43da      	mvns	r2, r3
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	4013      	ands	r3, r2
 8004002:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	2380      	movs	r3, #128	; 0x80
 800400a:	039b      	lsls	r3, r3, #14
 800400c:	4013      	ands	r3, r2
 800400e:	d003      	beq.n	8004018 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	4313      	orrs	r3, r2
 8004016:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004018:	4b08      	ldr	r3, [pc, #32]	; (800403c <HAL_GPIO_Init+0x2b8>)
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	3301      	adds	r3, #1
 8004022:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	40da      	lsrs	r2, r3
 800402c:	1e13      	subs	r3, r2, #0
 800402e:	d000      	beq.n	8004032 <HAL_GPIO_Init+0x2ae>
 8004030:	e6b0      	b.n	8003d94 <HAL_GPIO_Init+0x10>
  }
}
 8004032:	46c0      	nop			; (mov r8, r8)
 8004034:	46c0      	nop			; (mov r8, r8)
 8004036:	46bd      	mov	sp, r7
 8004038:	b006      	add	sp, #24
 800403a:	bd80      	pop	{r7, pc}
 800403c:	40021800 	.word	0x40021800
 8004040:	50000400 	.word	0x50000400
 8004044:	50000800 	.word	0x50000800
 8004048:	50000c00 	.word	0x50000c00

0800404c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e082      	b.n	8004164 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2241      	movs	r2, #65	; 0x41
 8004062:	5c9b      	ldrb	r3, [r3, r2]
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d107      	bne.n	800407a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2240      	movs	r2, #64	; 0x40
 800406e:	2100      	movs	r1, #0
 8004070:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	0018      	movs	r0, r3
 8004076:	f7fe fba1 	bl	80027bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2241      	movs	r2, #65	; 0x41
 800407e:	2124      	movs	r1, #36	; 0x24
 8004080:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2101      	movs	r1, #1
 800408e:	438a      	bics	r2, r1
 8004090:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4934      	ldr	r1, [pc, #208]	; (800416c <HAL_I2C_Init+0x120>)
 800409c:	400a      	ands	r2, r1
 800409e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	689a      	ldr	r2, [r3, #8]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4931      	ldr	r1, [pc, #196]	; (8004170 <HAL_I2C_Init+0x124>)
 80040ac:	400a      	ands	r2, r1
 80040ae:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d108      	bne.n	80040ca <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689a      	ldr	r2, [r3, #8]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2180      	movs	r1, #128	; 0x80
 80040c2:	0209      	lsls	r1, r1, #8
 80040c4:	430a      	orrs	r2, r1
 80040c6:	609a      	str	r2, [r3, #8]
 80040c8:	e007      	b.n	80040da <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689a      	ldr	r2, [r3, #8]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2184      	movs	r1, #132	; 0x84
 80040d4:	0209      	lsls	r1, r1, #8
 80040d6:	430a      	orrs	r2, r1
 80040d8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d104      	bne.n	80040ec <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2280      	movs	r2, #128	; 0x80
 80040e8:	0112      	lsls	r2, r2, #4
 80040ea:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	491f      	ldr	r1, [pc, #124]	; (8004174 <HAL_I2C_Init+0x128>)
 80040f8:	430a      	orrs	r2, r1
 80040fa:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68da      	ldr	r2, [r3, #12]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	491a      	ldr	r1, [pc, #104]	; (8004170 <HAL_I2C_Init+0x124>)
 8004108:	400a      	ands	r2, r1
 800410a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	691a      	ldr	r2, [r3, #16]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	431a      	orrs	r2, r3
 8004116:	0011      	movs	r1, r2
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	021a      	lsls	r2, r3, #8
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	69d9      	ldr	r1, [r3, #28]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a1a      	ldr	r2, [r3, #32]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2101      	movs	r1, #1
 8004142:	430a      	orrs	r2, r1
 8004144:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2241      	movs	r2, #65	; 0x41
 8004150:	2120      	movs	r1, #32
 8004152:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2242      	movs	r2, #66	; 0x42
 800415e:	2100      	movs	r1, #0
 8004160:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	0018      	movs	r0, r3
 8004166:	46bd      	mov	sp, r7
 8004168:	b002      	add	sp, #8
 800416a:	bd80      	pop	{r7, pc}
 800416c:	f0ffffff 	.word	0xf0ffffff
 8004170:	ffff7fff 	.word	0xffff7fff
 8004174:	02008000 	.word	0x02008000

08004178 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004194:	2b00      	cmp	r3, #0
 8004196:	d005      	beq.n	80041a4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	68f9      	ldr	r1, [r7, #12]
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	4798      	blx	r3
  }
}
 80041a4:	46c0      	nop			; (mov r8, r8)
 80041a6:	46bd      	mov	sp, r7
 80041a8:	b004      	add	sp, #16
 80041aa:	bd80      	pop	{r7, pc}

080041ac <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	0a1b      	lsrs	r3, r3, #8
 80041c8:	001a      	movs	r2, r3
 80041ca:	2301      	movs	r3, #1
 80041cc:	4013      	ands	r3, r2
 80041ce:	d010      	beq.n	80041f2 <HAL_I2C_ER_IRQHandler+0x46>
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	09db      	lsrs	r3, r3, #7
 80041d4:	001a      	movs	r2, r3
 80041d6:	2301      	movs	r3, #1
 80041d8:	4013      	ands	r3, r2
 80041da:	d00a      	beq.n	80041f2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e0:	2201      	movs	r2, #1
 80041e2:	431a      	orrs	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2280      	movs	r2, #128	; 0x80
 80041ee:	0052      	lsls	r2, r2, #1
 80041f0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	0a9b      	lsrs	r3, r3, #10
 80041f6:	001a      	movs	r2, r3
 80041f8:	2301      	movs	r3, #1
 80041fa:	4013      	ands	r3, r2
 80041fc:	d010      	beq.n	8004220 <HAL_I2C_ER_IRQHandler+0x74>
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	09db      	lsrs	r3, r3, #7
 8004202:	001a      	movs	r2, r3
 8004204:	2301      	movs	r3, #1
 8004206:	4013      	ands	r3, r2
 8004208:	d00a      	beq.n	8004220 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800420e:	2208      	movs	r2, #8
 8004210:	431a      	orrs	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2280      	movs	r2, #128	; 0x80
 800421c:	00d2      	lsls	r2, r2, #3
 800421e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	0a5b      	lsrs	r3, r3, #9
 8004224:	001a      	movs	r2, r3
 8004226:	2301      	movs	r3, #1
 8004228:	4013      	ands	r3, r2
 800422a:	d010      	beq.n	800424e <HAL_I2C_ER_IRQHandler+0xa2>
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	09db      	lsrs	r3, r3, #7
 8004230:	001a      	movs	r2, r3
 8004232:	2301      	movs	r3, #1
 8004234:	4013      	ands	r3, r2
 8004236:	d00a      	beq.n	800424e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423c:	2202      	movs	r2, #2
 800423e:	431a      	orrs	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2280      	movs	r2, #128	; 0x80
 800424a:	0092      	lsls	r2, r2, #2
 800424c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004252:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	220b      	movs	r2, #11
 8004258:	4013      	ands	r3, r2
 800425a:	d005      	beq.n	8004268 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	0011      	movs	r1, r2
 8004262:	0018      	movs	r0, r3
 8004264:	f000 fbd8 	bl	8004a18 <I2C_ITError>
  }
}
 8004268:	46c0      	nop			; (mov r8, r8)
 800426a:	46bd      	mov	sp, r7
 800426c:	b006      	add	sp, #24
 800426e:	bd80      	pop	{r7, pc}

08004270 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004278:	46c0      	nop			; (mov r8, r8)
 800427a:	46bd      	mov	sp, r7
 800427c:	b002      	add	sp, #8
 800427e:	bd80      	pop	{r7, pc}

08004280 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004288:	46c0      	nop			; (mov r8, r8)
 800428a:	46bd      	mov	sp, r7
 800428c:	b002      	add	sp, #8
 800428e:	bd80      	pop	{r7, pc}

08004290 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	0008      	movs	r0, r1
 800429a:	0011      	movs	r1, r2
 800429c:	1cfb      	adds	r3, r7, #3
 800429e:	1c02      	adds	r2, r0, #0
 80042a0:	701a      	strb	r2, [r3, #0]
 80042a2:	003b      	movs	r3, r7
 80042a4:	1c0a      	adds	r2, r1, #0
 80042a6:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80042a8:	46c0      	nop			; (mov r8, r8)
 80042aa:	46bd      	mov	sp, r7
 80042ac:	b002      	add	sp, #8
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80042b8:	46c0      	nop			; (mov r8, r8)
 80042ba:	46bd      	mov	sp, r7
 80042bc:	b002      	add	sp, #8
 80042be:	bd80      	pop	{r7, pc}

080042c0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80042c8:	46c0      	nop			; (mov r8, r8)
 80042ca:	46bd      	mov	sp, r7
 80042cc:	b002      	add	sp, #8
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80042d8:	46c0      	nop			; (mov r8, r8)
 80042da:	46bd      	mov	sp, r7
 80042dc:	b002      	add	sp, #8
 80042de:	bd80      	pop	{r7, pc}

080042e0 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2240      	movs	r2, #64	; 0x40
 80042fa:	5c9b      	ldrb	r3, [r3, r2]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d101      	bne.n	8004304 <I2C_Slave_ISR_IT+0x24>
 8004300:	2302      	movs	r3, #2
 8004302:	e0fa      	b.n	80044fa <I2C_Slave_ISR_IT+0x21a>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2240      	movs	r2, #64	; 0x40
 8004308:	2101      	movs	r1, #1
 800430a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	095b      	lsrs	r3, r3, #5
 8004310:	001a      	movs	r2, r3
 8004312:	2301      	movs	r3, #1
 8004314:	4013      	ands	r3, r2
 8004316:	d00b      	beq.n	8004330 <I2C_Slave_ISR_IT+0x50>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	095b      	lsrs	r3, r3, #5
 800431c:	001a      	movs	r2, r3
 800431e:	2301      	movs	r3, #1
 8004320:	4013      	ands	r3, r2
 8004322:	d005      	beq.n	8004330 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	0011      	movs	r1, r2
 800432a:	0018      	movs	r0, r3
 800432c:	f000 f9f6 	bl	800471c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	091b      	lsrs	r3, r3, #4
 8004334:	001a      	movs	r2, r3
 8004336:	2301      	movs	r3, #1
 8004338:	4013      	ands	r3, r2
 800433a:	d054      	beq.n	80043e6 <I2C_Slave_ISR_IT+0x106>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	091b      	lsrs	r3, r3, #4
 8004340:	001a      	movs	r2, r3
 8004342:	2301      	movs	r3, #1
 8004344:	4013      	ands	r3, r2
 8004346:	d04e      	beq.n	80043e6 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800434c:	b29b      	uxth	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d12d      	bne.n	80043ae <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2241      	movs	r2, #65	; 0x41
 8004356:	5c9b      	ldrb	r3, [r3, r2]
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b28      	cmp	r3, #40	; 0x28
 800435c:	d10b      	bne.n	8004376 <I2C_Slave_ISR_IT+0x96>
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	2380      	movs	r3, #128	; 0x80
 8004362:	049b      	lsls	r3, r3, #18
 8004364:	429a      	cmp	r2, r3
 8004366:	d106      	bne.n	8004376 <I2C_Slave_ISR_IT+0x96>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	0011      	movs	r1, r2
 800436e:	0018      	movs	r0, r3
 8004370:	f000 faf8 	bl	8004964 <I2C_ITListenCplt>
 8004374:	e036      	b.n	80043e4 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2241      	movs	r2, #65	; 0x41
 800437a:	5c9b      	ldrb	r3, [r3, r2]
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b29      	cmp	r3, #41	; 0x29
 8004380:	d110      	bne.n	80043a4 <I2C_Slave_ISR_IT+0xc4>
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	4a5f      	ldr	r2, [pc, #380]	; (8004504 <I2C_Slave_ISR_IT+0x224>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d00c      	beq.n	80043a4 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2210      	movs	r2, #16
 8004390:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	0018      	movs	r0, r3
 8004396:	f000 fc4a 	bl	8004c2e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	0018      	movs	r0, r3
 800439e:	f000 f957 	bl	8004650 <I2C_ITSlaveSeqCplt>
 80043a2:	e01f      	b.n	80043e4 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2210      	movs	r2, #16
 80043aa:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80043ac:	e09d      	b.n	80044ea <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2210      	movs	r2, #16
 80043b4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ba:	2204      	movs	r2, #4
 80043bc:	431a      	orrs	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d005      	beq.n	80043d4 <I2C_Slave_ISR_IT+0xf4>
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	2380      	movs	r3, #128	; 0x80
 80043cc:	045b      	lsls	r3, r3, #17
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d000      	beq.n	80043d4 <I2C_Slave_ISR_IT+0xf4>
 80043d2:	e08a      	b.n	80044ea <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	0011      	movs	r1, r2
 80043dc:	0018      	movs	r0, r3
 80043de:	f000 fb1b 	bl	8004a18 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80043e2:	e082      	b.n	80044ea <I2C_Slave_ISR_IT+0x20a>
 80043e4:	e081      	b.n	80044ea <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	089b      	lsrs	r3, r3, #2
 80043ea:	001a      	movs	r2, r3
 80043ec:	2301      	movs	r3, #1
 80043ee:	4013      	ands	r3, r2
 80043f0:	d031      	beq.n	8004456 <I2C_Slave_ISR_IT+0x176>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	089b      	lsrs	r3, r3, #2
 80043f6:	001a      	movs	r2, r3
 80043f8:	2301      	movs	r3, #1
 80043fa:	4013      	ands	r3, r2
 80043fc:	d02b      	beq.n	8004456 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004402:	b29b      	uxth	r3, r3
 8004404:	2b00      	cmp	r3, #0
 8004406:	d018      	beq.n	800443a <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004412:	b2d2      	uxtb	r2, r2
 8004414:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441a:	1c5a      	adds	r2, r3, #1
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004424:	3b01      	subs	r3, #1
 8004426:	b29a      	uxth	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004430:	b29b      	uxth	r3, r3
 8004432:	3b01      	subs	r3, #1
 8004434:	b29a      	uxth	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800443e:	b29b      	uxth	r3, r3
 8004440:	2b00      	cmp	r3, #0
 8004442:	d154      	bne.n	80044ee <I2C_Slave_ISR_IT+0x20e>
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	4a2f      	ldr	r2, [pc, #188]	; (8004504 <I2C_Slave_ISR_IT+0x224>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d050      	beq.n	80044ee <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	0018      	movs	r0, r3
 8004450:	f000 f8fe 	bl	8004650 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004454:	e04b      	b.n	80044ee <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	08db      	lsrs	r3, r3, #3
 800445a:	001a      	movs	r2, r3
 800445c:	2301      	movs	r3, #1
 800445e:	4013      	ands	r3, r2
 8004460:	d00c      	beq.n	800447c <I2C_Slave_ISR_IT+0x19c>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	08db      	lsrs	r3, r3, #3
 8004466:	001a      	movs	r2, r3
 8004468:	2301      	movs	r3, #1
 800446a:	4013      	ands	r3, r2
 800446c:	d006      	beq.n	800447c <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	0011      	movs	r1, r2
 8004474:	0018      	movs	r0, r3
 8004476:	f000 f847 	bl	8004508 <I2C_ITAddrCplt>
 800447a:	e039      	b.n	80044f0 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	085b      	lsrs	r3, r3, #1
 8004480:	001a      	movs	r2, r3
 8004482:	2301      	movs	r3, #1
 8004484:	4013      	ands	r3, r2
 8004486:	d033      	beq.n	80044f0 <I2C_Slave_ISR_IT+0x210>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	085b      	lsrs	r3, r3, #1
 800448c:	001a      	movs	r2, r3
 800448e:	2301      	movs	r3, #1
 8004490:	4013      	ands	r3, r2
 8004492:	d02d      	beq.n	80044f0 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004498:	b29b      	uxth	r3, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d018      	beq.n	80044d0 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	781a      	ldrb	r2, [r3, #0]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ae:	1c5a      	adds	r2, r3, #1
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	3b01      	subs	r3, #1
 80044bc:	b29a      	uxth	r2, r3
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044c6:	3b01      	subs	r3, #1
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	851a      	strh	r2, [r3, #40]	; 0x28
 80044ce:	e00f      	b.n	80044f0 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	2380      	movs	r3, #128	; 0x80
 80044d4:	045b      	lsls	r3, r3, #17
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d002      	beq.n	80044e0 <I2C_Slave_ISR_IT+0x200>
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d107      	bne.n	80044f0 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	0018      	movs	r0, r3
 80044e4:	f000 f8b4 	bl	8004650 <I2C_ITSlaveSeqCplt>
 80044e8:	e002      	b.n	80044f0 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 80044ea:	46c0      	nop			; (mov r8, r8)
 80044ec:	e000      	b.n	80044f0 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 80044ee:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2240      	movs	r2, #64	; 0x40
 80044f4:	2100      	movs	r1, #0
 80044f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	0018      	movs	r0, r3
 80044fc:	46bd      	mov	sp, r7
 80044fe:	b006      	add	sp, #24
 8004500:	bd80      	pop	{r7, pc}
 8004502:	46c0      	nop			; (mov r8, r8)
 8004504:	ffff0000 	.word	0xffff0000

08004508 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004508:	b5b0      	push	{r4, r5, r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2241      	movs	r2, #65	; 0x41
 8004516:	5c9b      	ldrb	r3, [r3, r2]
 8004518:	b2db      	uxtb	r3, r3
 800451a:	001a      	movs	r2, r3
 800451c:	2328      	movs	r3, #40	; 0x28
 800451e:	4013      	ands	r3, r2
 8004520:	2b28      	cmp	r3, #40	; 0x28
 8004522:	d000      	beq.n	8004526 <I2C_ITAddrCplt+0x1e>
 8004524:	e088      	b.n	8004638 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	0c1b      	lsrs	r3, r3, #16
 800452e:	b2da      	uxtb	r2, r3
 8004530:	250f      	movs	r5, #15
 8004532:	197b      	adds	r3, r7, r5
 8004534:	2101      	movs	r1, #1
 8004536:	400a      	ands	r2, r1
 8004538:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	0c1b      	lsrs	r3, r3, #16
 8004542:	b29a      	uxth	r2, r3
 8004544:	200c      	movs	r0, #12
 8004546:	183b      	adds	r3, r7, r0
 8004548:	21fe      	movs	r1, #254	; 0xfe
 800454a:	400a      	ands	r2, r1
 800454c:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	b29a      	uxth	r2, r3
 8004556:	240a      	movs	r4, #10
 8004558:	193b      	adds	r3, r7, r4
 800455a:	0592      	lsls	r2, r2, #22
 800455c:	0d92      	lsrs	r2, r2, #22
 800455e:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	b29a      	uxth	r2, r3
 8004568:	2308      	movs	r3, #8
 800456a:	18fb      	adds	r3, r7, r3
 800456c:	21fe      	movs	r1, #254	; 0xfe
 800456e:	400a      	ands	r2, r1
 8004570:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	2b02      	cmp	r3, #2
 8004578:	d148      	bne.n	800460c <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800457a:	0021      	movs	r1, r4
 800457c:	187b      	adds	r3, r7, r1
 800457e:	881b      	ldrh	r3, [r3, #0]
 8004580:	09db      	lsrs	r3, r3, #7
 8004582:	b29a      	uxth	r2, r3
 8004584:	183b      	adds	r3, r7, r0
 8004586:	881b      	ldrh	r3, [r3, #0]
 8004588:	4053      	eors	r3, r2
 800458a:	b29b      	uxth	r3, r3
 800458c:	001a      	movs	r2, r3
 800458e:	2306      	movs	r3, #6
 8004590:	4013      	ands	r3, r2
 8004592:	d120      	bne.n	80045d6 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8004594:	183b      	adds	r3, r7, r0
 8004596:	187a      	adds	r2, r7, r1
 8004598:	8812      	ldrh	r2, [r2, #0]
 800459a:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045a0:	1c5a      	adds	r2, r3, #1
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d14c      	bne.n	8004648 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2208      	movs	r2, #8
 80045ba:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2240      	movs	r2, #64	; 0x40
 80045c0:	2100      	movs	r1, #0
 80045c2:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80045c4:	183b      	adds	r3, r7, r0
 80045c6:	881a      	ldrh	r2, [r3, #0]
 80045c8:	197b      	adds	r3, r7, r5
 80045ca:	7819      	ldrb	r1, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	0018      	movs	r0, r3
 80045d0:	f7ff fe5e 	bl	8004290 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80045d4:	e038      	b.n	8004648 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80045d6:	240c      	movs	r4, #12
 80045d8:	193b      	adds	r3, r7, r4
 80045da:	2208      	movs	r2, #8
 80045dc:	18ba      	adds	r2, r7, r2
 80045de:	8812      	ldrh	r2, [r2, #0]
 80045e0:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80045e2:	2380      	movs	r3, #128	; 0x80
 80045e4:	021a      	lsls	r2, r3, #8
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	0011      	movs	r1, r2
 80045ea:	0018      	movs	r0, r3
 80045ec:	f000 fb60 	bl	8004cb0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2240      	movs	r2, #64	; 0x40
 80045f4:	2100      	movs	r1, #0
 80045f6:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80045f8:	193b      	adds	r3, r7, r4
 80045fa:	881a      	ldrh	r2, [r3, #0]
 80045fc:	230f      	movs	r3, #15
 80045fe:	18fb      	adds	r3, r7, r3
 8004600:	7819      	ldrb	r1, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	0018      	movs	r0, r3
 8004606:	f7ff fe43 	bl	8004290 <HAL_I2C_AddrCallback>
}
 800460a:	e01d      	b.n	8004648 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800460c:	2380      	movs	r3, #128	; 0x80
 800460e:	021a      	lsls	r2, r3, #8
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	0011      	movs	r1, r2
 8004614:	0018      	movs	r0, r3
 8004616:	f000 fb4b 	bl	8004cb0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2240      	movs	r2, #64	; 0x40
 800461e:	2100      	movs	r1, #0
 8004620:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004622:	230c      	movs	r3, #12
 8004624:	18fb      	adds	r3, r7, r3
 8004626:	881a      	ldrh	r2, [r3, #0]
 8004628:	230f      	movs	r3, #15
 800462a:	18fb      	adds	r3, r7, r3
 800462c:	7819      	ldrb	r1, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	0018      	movs	r0, r3
 8004632:	f7ff fe2d 	bl	8004290 <HAL_I2C_AddrCallback>
}
 8004636:	e007      	b.n	8004648 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2208      	movs	r2, #8
 800463e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2240      	movs	r2, #64	; 0x40
 8004644:	2100      	movs	r1, #0
 8004646:	5499      	strb	r1, [r3, r2]
}
 8004648:	46c0      	nop			; (mov r8, r8)
 800464a:	46bd      	mov	sp, r7
 800464c:	b004      	add	sp, #16
 800464e:	bdb0      	pop	{r4, r5, r7, pc}

08004650 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2242      	movs	r2, #66	; 0x42
 8004664:	2100      	movs	r1, #0
 8004666:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	0b9b      	lsrs	r3, r3, #14
 800466c:	001a      	movs	r2, r3
 800466e:	2301      	movs	r3, #1
 8004670:	4013      	ands	r3, r2
 8004672:	d008      	beq.n	8004686 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4925      	ldr	r1, [pc, #148]	; (8004714 <I2C_ITSlaveSeqCplt+0xc4>)
 8004680:	400a      	ands	r2, r1
 8004682:	601a      	str	r2, [r3, #0]
 8004684:	e00d      	b.n	80046a2 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	0bdb      	lsrs	r3, r3, #15
 800468a:	001a      	movs	r2, r3
 800468c:	2301      	movs	r3, #1
 800468e:	4013      	ands	r3, r2
 8004690:	d007      	beq.n	80046a2 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	491e      	ldr	r1, [pc, #120]	; (8004718 <I2C_ITSlaveSeqCplt+0xc8>)
 800469e:	400a      	ands	r2, r1
 80046a0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2241      	movs	r2, #65	; 0x41
 80046a6:	5c9b      	ldrb	r3, [r3, r2]
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b29      	cmp	r3, #41	; 0x29
 80046ac:	d114      	bne.n	80046d8 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2241      	movs	r2, #65	; 0x41
 80046b2:	2128      	movs	r1, #40	; 0x28
 80046b4:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2221      	movs	r2, #33	; 0x21
 80046ba:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2101      	movs	r1, #1
 80046c0:	0018      	movs	r0, r3
 80046c2:	f000 faf5 	bl	8004cb0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2240      	movs	r2, #64	; 0x40
 80046ca:	2100      	movs	r1, #0
 80046cc:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	0018      	movs	r0, r3
 80046d2:	f7ff fdcd 	bl	8004270 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80046d6:	e019      	b.n	800470c <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2241      	movs	r2, #65	; 0x41
 80046dc:	5c9b      	ldrb	r3, [r3, r2]
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	2b2a      	cmp	r3, #42	; 0x2a
 80046e2:	d113      	bne.n	800470c <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2241      	movs	r2, #65	; 0x41
 80046e8:	2128      	movs	r1, #40	; 0x28
 80046ea:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2222      	movs	r2, #34	; 0x22
 80046f0:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2102      	movs	r1, #2
 80046f6:	0018      	movs	r0, r3
 80046f8:	f000 fada 	bl	8004cb0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2240      	movs	r2, #64	; 0x40
 8004700:	2100      	movs	r1, #0
 8004702:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	0018      	movs	r0, r3
 8004708:	f7ff fdba 	bl	8004280 <HAL_I2C_SlaveRxCpltCallback>
}
 800470c:	46c0      	nop			; (mov r8, r8)
 800470e:	46bd      	mov	sp, r7
 8004710:	b004      	add	sp, #16
 8004712:	bd80      	pop	{r7, pc}
 8004714:	ffffbfff 	.word	0xffffbfff
 8004718:	ffff7fff 	.word	0xffff7fff

0800471c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004732:	200f      	movs	r0, #15
 8004734:	183b      	adds	r3, r7, r0
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	2141      	movs	r1, #65	; 0x41
 800473a:	5c52      	ldrb	r2, [r2, r1]
 800473c:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2220      	movs	r2, #32
 8004744:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004746:	183b      	adds	r3, r7, r0
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	2b21      	cmp	r3, #33	; 0x21
 800474c:	d003      	beq.n	8004756 <I2C_ITSlaveCplt+0x3a>
 800474e:	183b      	adds	r3, r7, r0
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	2b29      	cmp	r3, #41	; 0x29
 8004754:	d109      	bne.n	800476a <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004756:	4a7d      	ldr	r2, [pc, #500]	; (800494c <I2C_ITSlaveCplt+0x230>)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	0011      	movs	r1, r2
 800475c:	0018      	movs	r0, r3
 800475e:	f000 faa7 	bl	8004cb0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2221      	movs	r2, #33	; 0x21
 8004766:	631a      	str	r2, [r3, #48]	; 0x30
 8004768:	e011      	b.n	800478e <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800476a:	220f      	movs	r2, #15
 800476c:	18bb      	adds	r3, r7, r2
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	2b22      	cmp	r3, #34	; 0x22
 8004772:	d003      	beq.n	800477c <I2C_ITSlaveCplt+0x60>
 8004774:	18bb      	adds	r3, r7, r2
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	2b2a      	cmp	r3, #42	; 0x2a
 800477a:	d108      	bne.n	800478e <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800477c:	4a74      	ldr	r2, [pc, #464]	; (8004950 <I2C_ITSlaveCplt+0x234>)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	0011      	movs	r1, r2
 8004782:	0018      	movs	r0, r3
 8004784:	f000 fa94 	bl	8004cb0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2222      	movs	r2, #34	; 0x22
 800478c:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2180      	movs	r1, #128	; 0x80
 800479a:	0209      	lsls	r1, r1, #8
 800479c:	430a      	orrs	r2, r1
 800479e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	496a      	ldr	r1, [pc, #424]	; (8004954 <I2C_ITSlaveCplt+0x238>)
 80047ac:	400a      	ands	r2, r1
 80047ae:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	0018      	movs	r0, r3
 80047b4:	f000 fa3b 	bl	8004c2e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	0b9b      	lsrs	r3, r3, #14
 80047bc:	001a      	movs	r2, r3
 80047be:	2301      	movs	r3, #1
 80047c0:	4013      	ands	r3, r2
 80047c2:	d013      	beq.n	80047ec <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4962      	ldr	r1, [pc, #392]	; (8004958 <I2C_ITSlaveCplt+0x23c>)
 80047d0:	400a      	ands	r2, r1
 80047d2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d020      	beq.n	800481e <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047ea:	e018      	b.n	800481e <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	0bdb      	lsrs	r3, r3, #15
 80047f0:	001a      	movs	r2, r3
 80047f2:	2301      	movs	r3, #1
 80047f4:	4013      	ands	r3, r2
 80047f6:	d012      	beq.n	800481e <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4956      	ldr	r1, [pc, #344]	; (800495c <I2C_ITSlaveCplt+0x240>)
 8004804:	400a      	ands	r2, r1
 8004806:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800480c:	2b00      	cmp	r3, #0
 800480e:	d006      	beq.n	800481e <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	b29a      	uxth	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	089b      	lsrs	r3, r3, #2
 8004822:	001a      	movs	r2, r3
 8004824:	2301      	movs	r3, #1
 8004826:	4013      	ands	r3, r2
 8004828:	d020      	beq.n	800486c <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	2204      	movs	r2, #4
 800482e:	4393      	bics	r3, r2
 8004830:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483c:	b2d2      	uxtb	r2, r2
 800483e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004844:	1c5a      	adds	r2, r3, #1
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00c      	beq.n	800486c <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004856:	3b01      	subs	r3, #1
 8004858:	b29a      	uxth	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004862:	b29b      	uxth	r3, r3
 8004864:	3b01      	subs	r3, #1
 8004866:	b29a      	uxth	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004870:	b29b      	uxth	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d005      	beq.n	8004882 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487a:	2204      	movs	r2, #4
 800487c:	431a      	orrs	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2242      	movs	r2, #66	; 0x42
 8004886:	2100      	movs	r1, #0
 8004888:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004894:	2b00      	cmp	r3, #0
 8004896:	d013      	beq.n	80048c0 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	0011      	movs	r1, r2
 80048a0:	0018      	movs	r0, r3
 80048a2:	f000 f8b9 	bl	8004a18 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2241      	movs	r2, #65	; 0x41
 80048aa:	5c9b      	ldrb	r3, [r3, r2]
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b28      	cmp	r3, #40	; 0x28
 80048b0:	d147      	bne.n	8004942 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	0011      	movs	r1, r2
 80048b8:	0018      	movs	r0, r3
 80048ba:	f000 f853 	bl	8004964 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80048be:	e040      	b.n	8004942 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c4:	4a26      	ldr	r2, [pc, #152]	; (8004960 <I2C_ITSlaveCplt+0x244>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d016      	beq.n	80048f8 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	0018      	movs	r0, r3
 80048ce:	f7ff febf 	bl	8004650 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a22      	ldr	r2, [pc, #136]	; (8004960 <I2C_ITSlaveCplt+0x244>)
 80048d6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2241      	movs	r2, #65	; 0x41
 80048dc:	2120      	movs	r1, #32
 80048de:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2240      	movs	r2, #64	; 0x40
 80048ea:	2100      	movs	r1, #0
 80048ec:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	0018      	movs	r0, r3
 80048f2:	f7ff fcdd 	bl	80042b0 <HAL_I2C_ListenCpltCallback>
}
 80048f6:	e024      	b.n	8004942 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2241      	movs	r2, #65	; 0x41
 80048fc:	5c9b      	ldrb	r3, [r3, r2]
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b22      	cmp	r3, #34	; 0x22
 8004902:	d10f      	bne.n	8004924 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2241      	movs	r2, #65	; 0x41
 8004908:	2120      	movs	r1, #32
 800490a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2240      	movs	r2, #64	; 0x40
 8004916:	2100      	movs	r1, #0
 8004918:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	0018      	movs	r0, r3
 800491e:	f7ff fcaf 	bl	8004280 <HAL_I2C_SlaveRxCpltCallback>
}
 8004922:	e00e      	b.n	8004942 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2241      	movs	r2, #65	; 0x41
 8004928:	2120      	movs	r1, #32
 800492a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2240      	movs	r2, #64	; 0x40
 8004936:	2100      	movs	r1, #0
 8004938:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	0018      	movs	r0, r3
 800493e:	f7ff fc97 	bl	8004270 <HAL_I2C_SlaveTxCpltCallback>
}
 8004942:	46c0      	nop			; (mov r8, r8)
 8004944:	46bd      	mov	sp, r7
 8004946:	b006      	add	sp, #24
 8004948:	bd80      	pop	{r7, pc}
 800494a:	46c0      	nop			; (mov r8, r8)
 800494c:	00008001 	.word	0x00008001
 8004950:	00008002 	.word	0x00008002
 8004954:	fe00e800 	.word	0xfe00e800
 8004958:	ffffbfff 	.word	0xffffbfff
 800495c:	ffff7fff 	.word	0xffff7fff
 8004960:	ffff0000 	.word	0xffff0000

08004964 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a27      	ldr	r2, [pc, #156]	; (8004a10 <I2C_ITListenCplt+0xac>)
 8004972:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2241      	movs	r2, #65	; 0x41
 800497e:	2120      	movs	r1, #32
 8004980:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2242      	movs	r2, #66	; 0x42
 8004986:	2100      	movs	r1, #0
 8004988:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	089b      	lsrs	r3, r3, #2
 8004994:	001a      	movs	r2, r3
 8004996:	2301      	movs	r3, #1
 8004998:	4013      	ands	r3, r2
 800499a:	d022      	beq.n	80049e2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a6:	b2d2      	uxtb	r2, r2
 80049a8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	1c5a      	adds	r2, r3, #1
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d012      	beq.n	80049e2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c0:	3b01      	subs	r3, #1
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	3b01      	subs	r3, #1
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049da:	2204      	movs	r2, #4
 80049dc:	431a      	orrs	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80049e2:	4a0c      	ldr	r2, [pc, #48]	; (8004a14 <I2C_ITListenCplt+0xb0>)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	0011      	movs	r1, r2
 80049e8:	0018      	movs	r0, r3
 80049ea:	f000 f961 	bl	8004cb0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2210      	movs	r2, #16
 80049f4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2240      	movs	r2, #64	; 0x40
 80049fa:	2100      	movs	r1, #0
 80049fc:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	0018      	movs	r0, r3
 8004a02:	f7ff fc55 	bl	80042b0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004a06:	46c0      	nop			; (mov r8, r8)
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	b002      	add	sp, #8
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	46c0      	nop			; (mov r8, r8)
 8004a10:	ffff0000 	.word	0xffff0000
 8004a14:	00008003 	.word	0x00008003

08004a18 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004a22:	200f      	movs	r0, #15
 8004a24:	183b      	adds	r3, r7, r0
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	2141      	movs	r1, #65	; 0x41
 8004a2a:	5c52      	ldrb	r2, [r2, r1]
 8004a2c:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2242      	movs	r2, #66	; 0x42
 8004a32:	2100      	movs	r1, #0
 8004a34:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a62      	ldr	r2, [pc, #392]	; (8004bc4 <I2C_ITError+0x1ac>)
 8004a3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	431a      	orrs	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004a4e:	183b      	adds	r3, r7, r0
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	2b28      	cmp	r3, #40	; 0x28
 8004a54:	d007      	beq.n	8004a66 <I2C_ITError+0x4e>
 8004a56:	183b      	adds	r3, r7, r0
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	2b29      	cmp	r3, #41	; 0x29
 8004a5c:	d003      	beq.n	8004a66 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004a5e:	183b      	adds	r3, r7, r0
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	2b2a      	cmp	r3, #42	; 0x2a
 8004a64:	d10c      	bne.n	8004a80 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2103      	movs	r1, #3
 8004a6a:	0018      	movs	r0, r3
 8004a6c:	f000 f920 	bl	8004cb0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2241      	movs	r2, #65	; 0x41
 8004a74:	2128      	movs	r1, #40	; 0x28
 8004a76:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a53      	ldr	r2, [pc, #332]	; (8004bc8 <I2C_ITError+0x1b0>)
 8004a7c:	635a      	str	r2, [r3, #52]	; 0x34
 8004a7e:	e012      	b.n	8004aa6 <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004a80:	4a52      	ldr	r2, [pc, #328]	; (8004bcc <I2C_ITError+0x1b4>)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	0011      	movs	r1, r2
 8004a86:	0018      	movs	r0, r3
 8004a88:	f000 f912 	bl	8004cb0 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2241      	movs	r2, #65	; 0x41
 8004a90:	5c9b      	ldrb	r3, [r3, r2]
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	2b60      	cmp	r3, #96	; 0x60
 8004a96:	d003      	beq.n	8004aa0 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2241      	movs	r2, #65	; 0x41
 8004a9c:	2120      	movs	r1, #32
 8004a9e:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aaa:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d03b      	beq.n	8004b2c <I2C_ITError+0x114>
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	2b11      	cmp	r3, #17
 8004ab8:	d002      	beq.n	8004ac0 <I2C_ITError+0xa8>
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	2b21      	cmp	r3, #33	; 0x21
 8004abe:	d135      	bne.n	8004b2c <I2C_ITError+0x114>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	2380      	movs	r3, #128	; 0x80
 8004ac8:	01db      	lsls	r3, r3, #7
 8004aca:	401a      	ands	r2, r3
 8004acc:	2380      	movs	r3, #128	; 0x80
 8004ace:	01db      	lsls	r3, r3, #7
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d107      	bne.n	8004ae4 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	493c      	ldr	r1, [pc, #240]	; (8004bd0 <I2C_ITError+0x1b8>)
 8004ae0:	400a      	ands	r2, r1
 8004ae2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae8:	0018      	movs	r0, r3
 8004aea:	f7ff f8af 	bl	8003c4c <HAL_DMA_GetState>
 8004aee:	0003      	movs	r3, r0
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d016      	beq.n	8004b22 <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af8:	4a36      	ldr	r2, [pc, #216]	; (8004bd4 <I2C_ITError+0x1bc>)
 8004afa:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2240      	movs	r2, #64	; 0x40
 8004b00:	2100      	movs	r1, #0
 8004b02:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b08:	0018      	movs	r0, r3
 8004b0a:	f7fe ff83 	bl	8003a14 <HAL_DMA_Abort_IT>
 8004b0e:	1e03      	subs	r3, r0, #0
 8004b10:	d051      	beq.n	8004bb6 <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1c:	0018      	movs	r0, r3
 8004b1e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b20:	e049      	b.n	8004bb6 <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	0018      	movs	r0, r3
 8004b26:	f000 f859 	bl	8004bdc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b2a:	e044      	b.n	8004bb6 <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d03b      	beq.n	8004bac <I2C_ITError+0x194>
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	2b12      	cmp	r3, #18
 8004b38:	d002      	beq.n	8004b40 <I2C_ITError+0x128>
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	2b22      	cmp	r3, #34	; 0x22
 8004b3e:	d135      	bne.n	8004bac <I2C_ITError+0x194>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	2380      	movs	r3, #128	; 0x80
 8004b48:	021b      	lsls	r3, r3, #8
 8004b4a:	401a      	ands	r2, r3
 8004b4c:	2380      	movs	r3, #128	; 0x80
 8004b4e:	021b      	lsls	r3, r3, #8
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d107      	bne.n	8004b64 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	491e      	ldr	r1, [pc, #120]	; (8004bd8 <I2C_ITError+0x1c0>)
 8004b60:	400a      	ands	r2, r1
 8004b62:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b68:	0018      	movs	r0, r3
 8004b6a:	f7ff f86f 	bl	8003c4c <HAL_DMA_GetState>
 8004b6e:	0003      	movs	r3, r0
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d016      	beq.n	8004ba2 <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b78:	4a16      	ldr	r2, [pc, #88]	; (8004bd4 <I2C_ITError+0x1bc>)
 8004b7a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2240      	movs	r2, #64	; 0x40
 8004b80:	2100      	movs	r1, #0
 8004b82:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b88:	0018      	movs	r0, r3
 8004b8a:	f7fe ff43 	bl	8003a14 <HAL_DMA_Abort_IT>
 8004b8e:	1e03      	subs	r3, r0, #0
 8004b90:	d013      	beq.n	8004bba <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9c:	0018      	movs	r0, r3
 8004b9e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ba0:	e00b      	b.n	8004bba <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	0018      	movs	r0, r3
 8004ba6:	f000 f819 	bl	8004bdc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004baa:	e006      	b.n	8004bba <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	0018      	movs	r0, r3
 8004bb0:	f000 f814 	bl	8004bdc <I2C_TreatErrorCallback>
  }
}
 8004bb4:	e002      	b.n	8004bbc <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004bb6:	46c0      	nop			; (mov r8, r8)
 8004bb8:	e000      	b.n	8004bbc <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004bba:	46c0      	nop			; (mov r8, r8)
}
 8004bbc:	46c0      	nop			; (mov r8, r8)
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	b004      	add	sp, #16
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	ffff0000 	.word	0xffff0000
 8004bc8:	080042e1 	.word	0x080042e1
 8004bcc:	00008003 	.word	0x00008003
 8004bd0:	ffffbfff 	.word	0xffffbfff
 8004bd4:	08004c73 	.word	0x08004c73
 8004bd8:	ffff7fff 	.word	0xffff7fff

08004bdc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2241      	movs	r2, #65	; 0x41
 8004be8:	5c9b      	ldrb	r3, [r3, r2]
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	2b60      	cmp	r3, #96	; 0x60
 8004bee:	d10f      	bne.n	8004c10 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2241      	movs	r2, #65	; 0x41
 8004bf4:	2120      	movs	r1, #32
 8004bf6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2240      	movs	r2, #64	; 0x40
 8004c02:	2100      	movs	r1, #0
 8004c04:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	0018      	movs	r0, r3
 8004c0a:	f7ff fb61 	bl	80042d0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004c0e:	e00a      	b.n	8004c26 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2240      	movs	r2, #64	; 0x40
 8004c1a:	2100      	movs	r1, #0
 8004c1c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	0018      	movs	r0, r3
 8004c22:	f7ff fb4d 	bl	80042c0 <HAL_I2C_ErrorCallback>
}
 8004c26:	46c0      	nop			; (mov r8, r8)
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	b002      	add	sp, #8
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b082      	sub	sp, #8
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	2202      	movs	r2, #2
 8004c3e:	4013      	ands	r3, r2
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d103      	bne.n	8004c4c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	2201      	movs	r2, #1
 8004c54:	4013      	ands	r3, r2
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d007      	beq.n	8004c6a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	699a      	ldr	r2, [r3, #24]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2101      	movs	r1, #1
 8004c66:	430a      	orrs	r2, r1
 8004c68:	619a      	str	r2, [r3, #24]
  }
}
 8004c6a:	46c0      	nop			; (mov r8, r8)
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	b002      	add	sp, #8
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b084      	sub	sp, #16
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d003      	beq.n	8004c90 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d003      	beq.n	8004ca0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	0018      	movs	r0, r3
 8004ca4:	f7ff ff9a 	bl	8004bdc <I2C_TreatErrorCallback>
}
 8004ca8:	46c0      	nop			; (mov r8, r8)
 8004caa:	46bd      	mov	sp, r7
 8004cac:	b004      	add	sp, #16
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	000a      	movs	r2, r1
 8004cba:	1cbb      	adds	r3, r7, #2
 8004cbc:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004cc2:	1cbb      	adds	r3, r7, #2
 8004cc4:	881b      	ldrh	r3, [r3, #0]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	4013      	ands	r3, r2
 8004cca:	d010      	beq.n	8004cee <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2242      	movs	r2, #66	; 0x42
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2241      	movs	r2, #65	; 0x41
 8004cd8:	5c9b      	ldrb	r3, [r3, r2]
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	001a      	movs	r2, r3
 8004cde:	2328      	movs	r3, #40	; 0x28
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	2b28      	cmp	r3, #40	; 0x28
 8004ce4:	d003      	beq.n	8004cee <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	22b0      	movs	r2, #176	; 0xb0
 8004cea:	4313      	orrs	r3, r2
 8004cec:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004cee:	1cbb      	adds	r3, r7, #2
 8004cf0:	881b      	ldrh	r3, [r3, #0]
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	d010      	beq.n	8004d1a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2244      	movs	r2, #68	; 0x44
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2241      	movs	r2, #65	; 0x41
 8004d04:	5c9b      	ldrb	r3, [r3, r2]
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	001a      	movs	r2, r3
 8004d0a:	2328      	movs	r3, #40	; 0x28
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	2b28      	cmp	r3, #40	; 0x28
 8004d10:	d003      	beq.n	8004d1a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	22b0      	movs	r2, #176	; 0xb0
 8004d16:	4313      	orrs	r3, r2
 8004d18:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004d1a:	1cbb      	adds	r3, r7, #2
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	5e9b      	ldrsh	r3, [r3, r2]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	da03      	bge.n	8004d2c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	22b8      	movs	r2, #184	; 0xb8
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004d2c:	1cbb      	adds	r3, r7, #2
 8004d2e:	881b      	ldrh	r3, [r3, #0]
 8004d30:	2b10      	cmp	r3, #16
 8004d32:	d103      	bne.n	8004d3c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2290      	movs	r2, #144	; 0x90
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004d3c:	1cbb      	adds	r3, r7, #2
 8004d3e:	881b      	ldrh	r3, [r3, #0]
 8004d40:	2b20      	cmp	r3, #32
 8004d42:	d103      	bne.n	8004d4c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2220      	movs	r2, #32
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004d4c:	1cbb      	adds	r3, r7, #2
 8004d4e:	881b      	ldrh	r3, [r3, #0]
 8004d50:	2b40      	cmp	r3, #64	; 0x40
 8004d52:	d103      	bne.n	8004d5c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2240      	movs	r2, #64	; 0x40
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	43d9      	mvns	r1, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	400a      	ands	r2, r1
 8004d6c:	601a      	str	r2, [r3, #0]
}
 8004d6e:	46c0      	nop			; (mov r8, r8)
 8004d70:	46bd      	mov	sp, r7
 8004d72:	b004      	add	sp, #16
 8004d74:	bd80      	pop	{r7, pc}
	...

08004d78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2241      	movs	r2, #65	; 0x41
 8004d86:	5c9b      	ldrb	r3, [r3, r2]
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b20      	cmp	r3, #32
 8004d8c:	d138      	bne.n	8004e00 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2240      	movs	r2, #64	; 0x40
 8004d92:	5c9b      	ldrb	r3, [r3, r2]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d101      	bne.n	8004d9c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004d98:	2302      	movs	r3, #2
 8004d9a:	e032      	b.n	8004e02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2240      	movs	r2, #64	; 0x40
 8004da0:	2101      	movs	r1, #1
 8004da2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2241      	movs	r2, #65	; 0x41
 8004da8:	2124      	movs	r1, #36	; 0x24
 8004daa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2101      	movs	r1, #1
 8004db8:	438a      	bics	r2, r1
 8004dba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4911      	ldr	r1, [pc, #68]	; (8004e0c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004dc8:	400a      	ands	r2, r1
 8004dca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6819      	ldr	r1, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	430a      	orrs	r2, r1
 8004dda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2101      	movs	r1, #1
 8004de8:	430a      	orrs	r2, r1
 8004dea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2241      	movs	r2, #65	; 0x41
 8004df0:	2120      	movs	r1, #32
 8004df2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2240      	movs	r2, #64	; 0x40
 8004df8:	2100      	movs	r1, #0
 8004dfa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	e000      	b.n	8004e02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004e00:	2302      	movs	r3, #2
  }
}
 8004e02:	0018      	movs	r0, r3
 8004e04:	46bd      	mov	sp, r7
 8004e06:	b002      	add	sp, #8
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	46c0      	nop			; (mov r8, r8)
 8004e0c:	ffffefff 	.word	0xffffefff

08004e10 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2241      	movs	r2, #65	; 0x41
 8004e1e:	5c9b      	ldrb	r3, [r3, r2]
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b20      	cmp	r3, #32
 8004e24:	d139      	bne.n	8004e9a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2240      	movs	r2, #64	; 0x40
 8004e2a:	5c9b      	ldrb	r3, [r3, r2]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d101      	bne.n	8004e34 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004e30:	2302      	movs	r3, #2
 8004e32:	e033      	b.n	8004e9c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2240      	movs	r2, #64	; 0x40
 8004e38:	2101      	movs	r1, #1
 8004e3a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2241      	movs	r2, #65	; 0x41
 8004e40:	2124      	movs	r1, #36	; 0x24
 8004e42:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2101      	movs	r1, #1
 8004e50:	438a      	bics	r2, r1
 8004e52:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	4a11      	ldr	r2, [pc, #68]	; (8004ea4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004e60:	4013      	ands	r3, r2
 8004e62:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	021b      	lsls	r3, r3, #8
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2101      	movs	r1, #1
 8004e82:	430a      	orrs	r2, r1
 8004e84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2241      	movs	r2, #65	; 0x41
 8004e8a:	2120      	movs	r1, #32
 8004e8c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2240      	movs	r2, #64	; 0x40
 8004e92:	2100      	movs	r1, #0
 8004e94:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004e96:	2300      	movs	r3, #0
 8004e98:	e000      	b.n	8004e9c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004e9a:	2302      	movs	r3, #2
  }
}
 8004e9c:	0018      	movs	r0, r3
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	b004      	add	sp, #16
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	fffff0ff 	.word	0xfffff0ff

08004ea8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b088      	sub	sp, #32
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e0e5      	b.n	8005086 <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2235      	movs	r2, #53	; 0x35
 8004ebe:	5c9b      	ldrb	r3, [r3, r2]
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d107      	bne.n	8004ed6 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2234      	movs	r2, #52	; 0x34
 8004eca:	2100      	movs	r1, #0
 8004ecc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	0018      	movs	r0, r3
 8004ed2:	f7fd fcc7 	bl	8002864 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2235      	movs	r2, #53	; 0x35
 8004eda:	2102      	movs	r1, #2
 8004edc:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	69da      	ldr	r2, [r3, #28]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4969      	ldr	r1, [pc, #420]	; (8005090 <HAL_I2S_Init+0x1e8>)
 8004eea:	400a      	ands	r2, r1
 8004eec:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d100      	bne.n	8004f00 <HAL_I2S_Init+0x58>
 8004efe:	e076      	b.n	8004fee <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d102      	bne.n	8004f0e <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004f08:	2310      	movs	r3, #16
 8004f0a:	617b      	str	r3, [r7, #20]
 8004f0c:	e001      	b.n	8004f12 <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004f0e:	2320      	movs	r3, #32
 8004f10:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	2b20      	cmp	r3, #32
 8004f18:	d802      	bhi.n	8004f20 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	005b      	lsls	r3, r3, #1
 8004f1e:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 8004f20:	2380      	movs	r3, #128	; 0x80
 8004f22:	011b      	lsls	r3, r3, #4
 8004f24:	0018      	movs	r0, r3
 8004f26:	f001 f865 	bl	8005ff4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004f2a:	0003      	movs	r3, r0
 8004f2c:	60fb      	str	r3, [r7, #12]
#endif
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	691a      	ldr	r2, [r3, #16]
 8004f32:	2380      	movs	r3, #128	; 0x80
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d131      	bne.n	8004f9e <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d016      	beq.n	8004f70 <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	0019      	movs	r1, r3
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f7fb f8db 	bl	8000104 <__udivsi3>
 8004f4e:	0003      	movs	r3, r0
 8004f50:	001a      	movs	r2, r3
 8004f52:	0013      	movs	r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	189b      	adds	r3, r3, r2
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	001a      	movs	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	0019      	movs	r1, r3
 8004f62:	0010      	movs	r0, r2
 8004f64:	f7fb f8ce 	bl	8000104 <__udivsi3>
 8004f68:	0003      	movs	r3, r0
 8004f6a:	3305      	adds	r3, #5
 8004f6c:	613b      	str	r3, [r7, #16]
 8004f6e:	e02a      	b.n	8004fc6 <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	00db      	lsls	r3, r3, #3
 8004f74:	0019      	movs	r1, r3
 8004f76:	68f8      	ldr	r0, [r7, #12]
 8004f78:	f7fb f8c4 	bl	8000104 <__udivsi3>
 8004f7c:	0003      	movs	r3, r0
 8004f7e:	001a      	movs	r2, r3
 8004f80:	0013      	movs	r3, r2
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	189b      	adds	r3, r3, r2
 8004f86:	005b      	lsls	r3, r3, #1
 8004f88:	001a      	movs	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	0019      	movs	r1, r3
 8004f90:	0010      	movs	r0, r2
 8004f92:	f7fb f8b7 	bl	8000104 <__udivsi3>
 8004f96:	0003      	movs	r3, r0
 8004f98:	3305      	adds	r3, #5
 8004f9a:	613b      	str	r3, [r7, #16]
 8004f9c:	e013      	b.n	8004fc6 <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004f9e:	6979      	ldr	r1, [r7, #20]
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f7fb f8af 	bl	8000104 <__udivsi3>
 8004fa6:	0003      	movs	r3, r0
 8004fa8:	001a      	movs	r2, r3
 8004faa:	0013      	movs	r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	189b      	adds	r3, r3, r2
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	001a      	movs	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	695b      	ldr	r3, [r3, #20]
 8004fb8:	0019      	movs	r1, r3
 8004fba:	0010      	movs	r0, r2
 8004fbc:	f7fb f8a2 	bl	8000104 <__udivsi3>
 8004fc0:	0003      	movs	r3, r0
 8004fc2:	3305      	adds	r3, #5
 8004fc4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	210a      	movs	r1, #10
 8004fca:	0018      	movs	r0, r3
 8004fcc:	f7fb f89a 	bl	8000104 <__udivsi3>
 8004fd0:	0003      	movs	r3, r0
 8004fd2:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	4013      	ands	r3, r2
 8004fda:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	085b      	lsrs	r3, r3, #1
 8004fe4:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	021b      	lsls	r3, r3, #8
 8004fea:	61bb      	str	r3, [r7, #24]
 8004fec:	e003      	b.n	8004ff6 <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004fee:	2302      	movs	r3, #2
 8004ff0:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d902      	bls.n	8005002 <HAL_I2S_Init+0x15a>
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	2bff      	cmp	r3, #255	; 0xff
 8005000:	d907      	bls.n	8005012 <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005006:	2210      	movs	r2, #16
 8005008:	431a      	orrs	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e039      	b.n	8005086 <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	691a      	ldr	r2, [r3, #16]
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	431a      	orrs	r2, r3
 800501a:	0011      	movs	r1, r2
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	69fa      	ldr	r2, [r7, #28]
 8005022:	430a      	orrs	r2, r1
 8005024:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	69db      	ldr	r3, [r3, #28]
 800502c:	4a18      	ldr	r2, [pc, #96]	; (8005090 <HAL_I2S_Init+0x1e8>)
 800502e:	401a      	ands	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6859      	ldr	r1, [r3, #4]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	4319      	orrs	r1, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	4319      	orrs	r1, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	430b      	orrs	r3, r1
 8005046:	431a      	orrs	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2180      	movs	r1, #128	; 0x80
 800504e:	0109      	lsls	r1, r1, #4
 8005050:	430a      	orrs	r2, r1
 8005052:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	2b30      	cmp	r3, #48	; 0x30
 800505a:	d003      	beq.n	8005064 <HAL_I2S_Init+0x1bc>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	2bb0      	cmp	r3, #176	; 0xb0
 8005062:	d108      	bne.n	8005076 <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	69da      	ldr	r2, [r3, #28]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2180      	movs	r1, #128	; 0x80
 8005070:	0149      	lsls	r1, r1, #5
 8005072:	430a      	orrs	r2, r1
 8005074:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2235      	movs	r2, #53	; 0x35
 8005080:	2101      	movs	r1, #1
 8005082:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	0018      	movs	r0, r3
 8005088:	46bd      	mov	sp, r7
 800508a:	b008      	add	sp, #32
 800508c:	bd80      	pop	{r7, pc}
 800508e:	46c0      	nop			; (mov r8, r8)
 8005090:	fffff040 	.word	0xfffff040

08005094 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hi2s->Instance->CR2;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hi2s->Instance->SR;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	60bb      	str	r3, [r7, #8]

  /* I2S in mode Receiver ------------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	099b      	lsrs	r3, r3, #6
 80050b0:	001a      	movs	r2, r3
 80050b2:	2301      	movs	r3, #1
 80050b4:	4013      	ands	r3, r2
 80050b6:	d10e      	bne.n	80050d6 <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	2201      	movs	r2, #1
 80050bc:	4013      	ands	r3, r2
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 80050be:	d00a      	beq.n	80050d6 <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	099b      	lsrs	r3, r3, #6
 80050c4:	001a      	movs	r2, r3
 80050c6:	2301      	movs	r3, #1
 80050c8:	4013      	ands	r3, r2
 80050ca:	d004      	beq.n	80050d6 <HAL_I2S_IRQHandler+0x42>
  {
    I2S_Receive_IT(hi2s);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	0018      	movs	r0, r3
 80050d0:	f000 f892 	bl	80051f8 <I2S_Receive_IT>
    return;
 80050d4:	e046      	b.n	8005164 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S in mode Tramitter -----------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_TXE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_TXE) != RESET))
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	085b      	lsrs	r3, r3, #1
 80050da:	001a      	movs	r2, r3
 80050dc:	2301      	movs	r3, #1
 80050de:	4013      	ands	r3, r2
 80050e0:	d00a      	beq.n	80050f8 <HAL_I2S_IRQHandler+0x64>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	09db      	lsrs	r3, r3, #7
 80050e6:	001a      	movs	r2, r3
 80050e8:	2301      	movs	r3, #1
 80050ea:	4013      	ands	r3, r2
 80050ec:	d004      	beq.n	80050f8 <HAL_I2S_IRQHandler+0x64>
  {
    I2S_Transmit_IT(hi2s);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	0018      	movs	r0, r3
 80050f2:	f000 f852 	bl	800519a <I2S_Transmit_IT>
    return;
 80050f6:	e035      	b.n	8005164 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S interrupt error -------------------------------------------------*/
  if (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_ERR) != RESET)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	095b      	lsrs	r3, r3, #5
 80050fc:	001a      	movs	r2, r3
 80050fe:	2301      	movs	r3, #1
 8005100:	4013      	ands	r3, r2
 8005102:	d02f      	beq.n	8005164 <HAL_I2S_IRQHandler+0xd0>
  {
    /* I2S Overrun error interrupt occurred ---------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) != RESET)
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	099b      	lsrs	r3, r3, #6
 8005108:	001a      	movs	r2, r3
 800510a:	2301      	movs	r3, #1
 800510c:	4013      	ands	r3, r2
 800510e:	d00d      	beq.n	800512c <HAL_I2S_IRQHandler+0x98>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	685a      	ldr	r2, [r3, #4]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2160      	movs	r1, #96	; 0x60
 800511c:	438a      	bics	r2, r1
 800511e:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005124:	2202      	movs	r2, #2
 8005126:	431a      	orrs	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_UDR) != RESET)
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	08db      	lsrs	r3, r3, #3
 8005130:	001a      	movs	r2, r3
 8005132:	2301      	movs	r3, #1
 8005134:	4013      	ands	r3, r2
 8005136:	d00d      	beq.n	8005154 <HAL_I2S_IRQHandler+0xc0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	21a0      	movs	r1, #160	; 0xa0
 8005144:	438a      	bics	r2, r1
 8005146:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514c:	2204      	movs	r2, #4
 800514e:	431a      	orrs	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Set the I2S State ready */
    hi2s->State = HAL_I2S_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2235      	movs	r2, #53	; 0x35
 8005158:	2101      	movs	r1, #1
 800515a:	5499      	strb	r1, [r3, r2]

    /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->ErrorCallback(hi2s);
#else
    HAL_I2S_ErrorCallback(hi2s);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	0018      	movs	r0, r3
 8005160:	f000 f813 	bl	800518a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005164:	46bd      	mov	sp, r7
 8005166:	b004      	add	sp, #16
 8005168:	bd80      	pop	{r7, pc}

0800516a <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800516a:	b580      	push	{r7, lr}
 800516c:	b082      	sub	sp, #8
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005172:	46c0      	nop			; (mov r8, r8)
 8005174:	46bd      	mov	sp, r7
 8005176:	b002      	add	sp, #8
 8005178:	bd80      	pop	{r7, pc}

0800517a <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800517a:	b580      	push	{r7, lr}
 800517c:	b082      	sub	sp, #8
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005182:	46c0      	nop			; (mov r8, r8)
 8005184:	46bd      	mov	sp, r7
 8005186:	b002      	add	sp, #8
 8005188:	bd80      	pop	{r7, pc}

0800518a <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b082      	sub	sp, #8
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005192:	46c0      	nop			; (mov r8, r8)
 8005194:	46bd      	mov	sp, r7
 8005196:	b002      	add	sp, #8
 8005198:	bd80      	pop	{r7, pc}

0800519a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800519a:	b580      	push	{r7, lr}
 800519c:	b082      	sub	sp, #8
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	69db      	ldr	r3, [r3, #28]
 80051a6:	881a      	ldrh	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	1c9a      	adds	r2, r3, #2
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	61da      	str	r2, [r3, #28]
  hi2s->TxXferCount--;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80051bc:	b29b      	uxth	r3, r3
 80051be:	3b01      	subs	r3, #1
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	845a      	strh	r2, [r3, #34]	; 0x22

  if (hi2s->TxXferCount == 0U)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d10f      	bne.n	80051f0 <I2S_Transmit_IT+0x56>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	21a0      	movs	r1, #160	; 0xa0
 80051dc:	438a      	bics	r2, r1
 80051de:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2235      	movs	r2, #53	; 0x35
 80051e4:	2101      	movs	r1, #1
 80051e6:	5499      	strb	r1, [r3, r2]
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	0018      	movs	r0, r3
 80051ec:	f7ff ffbd 	bl	800516a <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80051f0:	46c0      	nop			; (mov r8, r8)
 80051f2:	46bd      	mov	sp, r7
 80051f4:	b002      	add	sp, #8
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68da      	ldr	r2, [r3, #12]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520a:	b292      	uxth	r2, r2
 800520c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005212:	1c9a      	adds	r2, r3, #2
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->RxXferCount--;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800521c:	b29b      	uxth	r3, r3
 800521e:	3b01      	subs	r3, #1
 8005220:	b29a      	uxth	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->RxXferCount == 0U)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800522a:	b29b      	uxth	r3, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	d10f      	bne.n	8005250 <I2S_Receive_IT+0x58>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	685a      	ldr	r2, [r3, #4]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2160      	movs	r1, #96	; 0x60
 800523c:	438a      	bics	r2, r1
 800523e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2235      	movs	r2, #53	; 0x35
 8005244:	2101      	movs	r1, #1
 8005246:	5499      	strb	r1, [r3, r2]
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	0018      	movs	r0, r3
 800524c:	f7ff ff95 	bl	800517a <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005250:	46c0      	nop			; (mov r8, r8)
 8005252:	46bd      	mov	sp, r7
 8005254:	b002      	add	sp, #8
 8005256:	bd80      	pop	{r7, pc}

08005258 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005260:	4b19      	ldr	r3, [pc, #100]	; (80052c8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a19      	ldr	r2, [pc, #100]	; (80052cc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8005266:	4013      	ands	r3, r2
 8005268:	0019      	movs	r1, r3
 800526a:	4b17      	ldr	r3, [pc, #92]	; (80052c8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	430a      	orrs	r2, r1
 8005270:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	2380      	movs	r3, #128	; 0x80
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	429a      	cmp	r2, r3
 800527a:	d11f      	bne.n	80052bc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 800527c:	4b14      	ldr	r3, [pc, #80]	; (80052d0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	0013      	movs	r3, r2
 8005282:	005b      	lsls	r3, r3, #1
 8005284:	189b      	adds	r3, r3, r2
 8005286:	005b      	lsls	r3, r3, #1
 8005288:	4912      	ldr	r1, [pc, #72]	; (80052d4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800528a:	0018      	movs	r0, r3
 800528c:	f7fa ff3a 	bl	8000104 <__udivsi3>
 8005290:	0003      	movs	r3, r0
 8005292:	3301      	adds	r3, #1
 8005294:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005296:	e008      	b.n	80052aa <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d003      	beq.n	80052a6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	3b01      	subs	r3, #1
 80052a2:	60fb      	str	r3, [r7, #12]
 80052a4:	e001      	b.n	80052aa <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e009      	b.n	80052be <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80052aa:	4b07      	ldr	r3, [pc, #28]	; (80052c8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80052ac:	695a      	ldr	r2, [r3, #20]
 80052ae:	2380      	movs	r3, #128	; 0x80
 80052b0:	00db      	lsls	r3, r3, #3
 80052b2:	401a      	ands	r2, r3
 80052b4:	2380      	movs	r3, #128	; 0x80
 80052b6:	00db      	lsls	r3, r3, #3
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d0ed      	beq.n	8005298 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	0018      	movs	r0, r3
 80052c0:	46bd      	mov	sp, r7
 80052c2:	b004      	add	sp, #16
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	46c0      	nop			; (mov r8, r8)
 80052c8:	40007000 	.word	0x40007000
 80052cc:	fffff9ff 	.word	0xfffff9ff
 80052d0:	20003134 	.word	0x20003134
 80052d4:	000f4240 	.word	0x000f4240

080052d8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80052dc:	4b03      	ldr	r3, [pc, #12]	; (80052ec <LL_RCC_GetAPB1Prescaler+0x14>)
 80052de:	689a      	ldr	r2, [r3, #8]
 80052e0:	23e0      	movs	r3, #224	; 0xe0
 80052e2:	01db      	lsls	r3, r3, #7
 80052e4:	4013      	ands	r3, r2
}
 80052e6:	0018      	movs	r0, r3
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	40021000 	.word	0x40021000

080052f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b088      	sub	sp, #32
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d101      	bne.n	8005302 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e304      	b.n	800590c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2201      	movs	r2, #1
 8005308:	4013      	ands	r3, r2
 800530a:	d100      	bne.n	800530e <HAL_RCC_OscConfig+0x1e>
 800530c:	e07c      	b.n	8005408 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800530e:	4bc3      	ldr	r3, [pc, #780]	; (800561c <HAL_RCC_OscConfig+0x32c>)
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	2238      	movs	r2, #56	; 0x38
 8005314:	4013      	ands	r3, r2
 8005316:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005318:	4bc0      	ldr	r3, [pc, #768]	; (800561c <HAL_RCC_OscConfig+0x32c>)
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	2203      	movs	r2, #3
 800531e:	4013      	ands	r3, r2
 8005320:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	2b10      	cmp	r3, #16
 8005326:	d102      	bne.n	800532e <HAL_RCC_OscConfig+0x3e>
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	2b03      	cmp	r3, #3
 800532c:	d002      	beq.n	8005334 <HAL_RCC_OscConfig+0x44>
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	2b08      	cmp	r3, #8
 8005332:	d10b      	bne.n	800534c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005334:	4bb9      	ldr	r3, [pc, #740]	; (800561c <HAL_RCC_OscConfig+0x32c>)
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	2380      	movs	r3, #128	; 0x80
 800533a:	029b      	lsls	r3, r3, #10
 800533c:	4013      	ands	r3, r2
 800533e:	d062      	beq.n	8005406 <HAL_RCC_OscConfig+0x116>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d15e      	bne.n	8005406 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e2df      	b.n	800590c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	2380      	movs	r3, #128	; 0x80
 8005352:	025b      	lsls	r3, r3, #9
 8005354:	429a      	cmp	r2, r3
 8005356:	d107      	bne.n	8005368 <HAL_RCC_OscConfig+0x78>
 8005358:	4bb0      	ldr	r3, [pc, #704]	; (800561c <HAL_RCC_OscConfig+0x32c>)
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	4baf      	ldr	r3, [pc, #700]	; (800561c <HAL_RCC_OscConfig+0x32c>)
 800535e:	2180      	movs	r1, #128	; 0x80
 8005360:	0249      	lsls	r1, r1, #9
 8005362:	430a      	orrs	r2, r1
 8005364:	601a      	str	r2, [r3, #0]
 8005366:	e020      	b.n	80053aa <HAL_RCC_OscConfig+0xba>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685a      	ldr	r2, [r3, #4]
 800536c:	23a0      	movs	r3, #160	; 0xa0
 800536e:	02db      	lsls	r3, r3, #11
 8005370:	429a      	cmp	r2, r3
 8005372:	d10e      	bne.n	8005392 <HAL_RCC_OscConfig+0xa2>
 8005374:	4ba9      	ldr	r3, [pc, #676]	; (800561c <HAL_RCC_OscConfig+0x32c>)
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	4ba8      	ldr	r3, [pc, #672]	; (800561c <HAL_RCC_OscConfig+0x32c>)
 800537a:	2180      	movs	r1, #128	; 0x80
 800537c:	02c9      	lsls	r1, r1, #11
 800537e:	430a      	orrs	r2, r1
 8005380:	601a      	str	r2, [r3, #0]
 8005382:	4ba6      	ldr	r3, [pc, #664]	; (800561c <HAL_RCC_OscConfig+0x32c>)
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	4ba5      	ldr	r3, [pc, #660]	; (800561c <HAL_RCC_OscConfig+0x32c>)
 8005388:	2180      	movs	r1, #128	; 0x80
 800538a:	0249      	lsls	r1, r1, #9
 800538c:	430a      	orrs	r2, r1
 800538e:	601a      	str	r2, [r3, #0]
 8005390:	e00b      	b.n	80053aa <HAL_RCC_OscConfig+0xba>
 8005392:	4ba2      	ldr	r3, [pc, #648]	; (800561c <HAL_RCC_OscConfig+0x32c>)
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	4ba1      	ldr	r3, [pc, #644]	; (800561c <HAL_RCC_OscConfig+0x32c>)
 8005398:	49a1      	ldr	r1, [pc, #644]	; (8005620 <HAL_RCC_OscConfig+0x330>)
 800539a:	400a      	ands	r2, r1
 800539c:	601a      	str	r2, [r3, #0]
 800539e:	4b9f      	ldr	r3, [pc, #636]	; (800561c <HAL_RCC_OscConfig+0x32c>)
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	4b9e      	ldr	r3, [pc, #632]	; (800561c <HAL_RCC_OscConfig+0x32c>)
 80053a4:	499f      	ldr	r1, [pc, #636]	; (8005624 <HAL_RCC_OscConfig+0x334>)
 80053a6:	400a      	ands	r2, r1
 80053a8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d014      	beq.n	80053dc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b2:	f7fd fe9d 	bl	80030f0 <HAL_GetTick>
 80053b6:	0003      	movs	r3, r0
 80053b8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053ba:	e008      	b.n	80053ce <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053bc:	f7fd fe98 	bl	80030f0 <HAL_GetTick>
 80053c0:	0002      	movs	r2, r0
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	2b64      	cmp	r3, #100	; 0x64
 80053c8:	d901      	bls.n	80053ce <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e29e      	b.n	800590c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053ce:	4b93      	ldr	r3, [pc, #588]	; (800561c <HAL_RCC_OscConfig+0x32c>)
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	2380      	movs	r3, #128	; 0x80
 80053d4:	029b      	lsls	r3, r3, #10
 80053d6:	4013      	ands	r3, r2
 80053d8:	d0f0      	beq.n	80053bc <HAL_RCC_OscConfig+0xcc>
 80053da:	e015      	b.n	8005408 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053dc:	f7fd fe88 	bl	80030f0 <HAL_GetTick>
 80053e0:	0003      	movs	r3, r0
 80053e2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053e4:	e008      	b.n	80053f8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053e6:	f7fd fe83 	bl	80030f0 <HAL_GetTick>
 80053ea:	0002      	movs	r2, r0
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	2b64      	cmp	r3, #100	; 0x64
 80053f2:	d901      	bls.n	80053f8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e289      	b.n	800590c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053f8:	4b88      	ldr	r3, [pc, #544]	; (800561c <HAL_RCC_OscConfig+0x32c>)
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	2380      	movs	r3, #128	; 0x80
 80053fe:	029b      	lsls	r3, r3, #10
 8005400:	4013      	ands	r3, r2
 8005402:	d1f0      	bne.n	80053e6 <HAL_RCC_OscConfig+0xf6>
 8005404:	e000      	b.n	8005408 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005406:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2202      	movs	r2, #2
 800540e:	4013      	ands	r3, r2
 8005410:	d100      	bne.n	8005414 <HAL_RCC_OscConfig+0x124>
 8005412:	e099      	b.n	8005548 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005414:	4b81      	ldr	r3, [pc, #516]	; (800561c <HAL_RCC_OscConfig+0x32c>)
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	2238      	movs	r2, #56	; 0x38
 800541a:	4013      	ands	r3, r2
 800541c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800541e:	4b7f      	ldr	r3, [pc, #508]	; (800561c <HAL_RCC_OscConfig+0x32c>)
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	2203      	movs	r2, #3
 8005424:	4013      	ands	r3, r2
 8005426:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	2b10      	cmp	r3, #16
 800542c:	d102      	bne.n	8005434 <HAL_RCC_OscConfig+0x144>
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	2b02      	cmp	r3, #2
 8005432:	d002      	beq.n	800543a <HAL_RCC_OscConfig+0x14a>
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d135      	bne.n	80054a6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800543a:	4b78      	ldr	r3, [pc, #480]	; (800561c <HAL_RCC_OscConfig+0x32c>)
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	2380      	movs	r3, #128	; 0x80
 8005440:	00db      	lsls	r3, r3, #3
 8005442:	4013      	ands	r3, r2
 8005444:	d005      	beq.n	8005452 <HAL_RCC_OscConfig+0x162>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e25c      	b.n	800590c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005452:	4b72      	ldr	r3, [pc, #456]	; (800561c <HAL_RCC_OscConfig+0x32c>)
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	4a74      	ldr	r2, [pc, #464]	; (8005628 <HAL_RCC_OscConfig+0x338>)
 8005458:	4013      	ands	r3, r2
 800545a:	0019      	movs	r1, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	021a      	lsls	r2, r3, #8
 8005462:	4b6e      	ldr	r3, [pc, #440]	; (800561c <HAL_RCC_OscConfig+0x32c>)
 8005464:	430a      	orrs	r2, r1
 8005466:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d112      	bne.n	8005494 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800546e:	4b6b      	ldr	r3, [pc, #428]	; (800561c <HAL_RCC_OscConfig+0x32c>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a6e      	ldr	r2, [pc, #440]	; (800562c <HAL_RCC_OscConfig+0x33c>)
 8005474:	4013      	ands	r3, r2
 8005476:	0019      	movs	r1, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	691a      	ldr	r2, [r3, #16]
 800547c:	4b67      	ldr	r3, [pc, #412]	; (800561c <HAL_RCC_OscConfig+0x32c>)
 800547e:	430a      	orrs	r2, r1
 8005480:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005482:	4b66      	ldr	r3, [pc, #408]	; (800561c <HAL_RCC_OscConfig+0x32c>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	0adb      	lsrs	r3, r3, #11
 8005488:	2207      	movs	r2, #7
 800548a:	4013      	ands	r3, r2
 800548c:	4a68      	ldr	r2, [pc, #416]	; (8005630 <HAL_RCC_OscConfig+0x340>)
 800548e:	40da      	lsrs	r2, r3
 8005490:	4b68      	ldr	r3, [pc, #416]	; (8005634 <HAL_RCC_OscConfig+0x344>)
 8005492:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005494:	4b68      	ldr	r3, [pc, #416]	; (8005638 <HAL_RCC_OscConfig+0x348>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	0018      	movs	r0, r3
 800549a:	f7fd fdcd 	bl	8003038 <HAL_InitTick>
 800549e:	1e03      	subs	r3, r0, #0
 80054a0:	d051      	beq.n	8005546 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e232      	b.n	800590c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d030      	beq.n	8005510 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80054ae:	4b5b      	ldr	r3, [pc, #364]	; (800561c <HAL_RCC_OscConfig+0x32c>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a5e      	ldr	r2, [pc, #376]	; (800562c <HAL_RCC_OscConfig+0x33c>)
 80054b4:	4013      	ands	r3, r2
 80054b6:	0019      	movs	r1, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	691a      	ldr	r2, [r3, #16]
 80054bc:	4b57      	ldr	r3, [pc, #348]	; (800561c <HAL_RCC_OscConfig+0x32c>)
 80054be:	430a      	orrs	r2, r1
 80054c0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80054c2:	4b56      	ldr	r3, [pc, #344]	; (800561c <HAL_RCC_OscConfig+0x32c>)
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	4b55      	ldr	r3, [pc, #340]	; (800561c <HAL_RCC_OscConfig+0x32c>)
 80054c8:	2180      	movs	r1, #128	; 0x80
 80054ca:	0049      	lsls	r1, r1, #1
 80054cc:	430a      	orrs	r2, r1
 80054ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d0:	f7fd fe0e 	bl	80030f0 <HAL_GetTick>
 80054d4:	0003      	movs	r3, r0
 80054d6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054d8:	e008      	b.n	80054ec <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054da:	f7fd fe09 	bl	80030f0 <HAL_GetTick>
 80054de:	0002      	movs	r2, r0
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d901      	bls.n	80054ec <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	e20f      	b.n	800590c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054ec:	4b4b      	ldr	r3, [pc, #300]	; (800561c <HAL_RCC_OscConfig+0x32c>)
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	2380      	movs	r3, #128	; 0x80
 80054f2:	00db      	lsls	r3, r3, #3
 80054f4:	4013      	ands	r3, r2
 80054f6:	d0f0      	beq.n	80054da <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054f8:	4b48      	ldr	r3, [pc, #288]	; (800561c <HAL_RCC_OscConfig+0x32c>)
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	4a4a      	ldr	r2, [pc, #296]	; (8005628 <HAL_RCC_OscConfig+0x338>)
 80054fe:	4013      	ands	r3, r2
 8005500:	0019      	movs	r1, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	021a      	lsls	r2, r3, #8
 8005508:	4b44      	ldr	r3, [pc, #272]	; (800561c <HAL_RCC_OscConfig+0x32c>)
 800550a:	430a      	orrs	r2, r1
 800550c:	605a      	str	r2, [r3, #4]
 800550e:	e01b      	b.n	8005548 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005510:	4b42      	ldr	r3, [pc, #264]	; (800561c <HAL_RCC_OscConfig+0x32c>)
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	4b41      	ldr	r3, [pc, #260]	; (800561c <HAL_RCC_OscConfig+0x32c>)
 8005516:	4949      	ldr	r1, [pc, #292]	; (800563c <HAL_RCC_OscConfig+0x34c>)
 8005518:	400a      	ands	r2, r1
 800551a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800551c:	f7fd fde8 	bl	80030f0 <HAL_GetTick>
 8005520:	0003      	movs	r3, r0
 8005522:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005524:	e008      	b.n	8005538 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005526:	f7fd fde3 	bl	80030f0 <HAL_GetTick>
 800552a:	0002      	movs	r2, r0
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	2b02      	cmp	r3, #2
 8005532:	d901      	bls.n	8005538 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e1e9      	b.n	800590c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005538:	4b38      	ldr	r3, [pc, #224]	; (800561c <HAL_RCC_OscConfig+0x32c>)
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	2380      	movs	r3, #128	; 0x80
 800553e:	00db      	lsls	r3, r3, #3
 8005540:	4013      	ands	r3, r2
 8005542:	d1f0      	bne.n	8005526 <HAL_RCC_OscConfig+0x236>
 8005544:	e000      	b.n	8005548 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005546:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2208      	movs	r2, #8
 800554e:	4013      	ands	r3, r2
 8005550:	d047      	beq.n	80055e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005552:	4b32      	ldr	r3, [pc, #200]	; (800561c <HAL_RCC_OscConfig+0x32c>)
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	2238      	movs	r2, #56	; 0x38
 8005558:	4013      	ands	r3, r2
 800555a:	2b18      	cmp	r3, #24
 800555c:	d10a      	bne.n	8005574 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800555e:	4b2f      	ldr	r3, [pc, #188]	; (800561c <HAL_RCC_OscConfig+0x32c>)
 8005560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005562:	2202      	movs	r2, #2
 8005564:	4013      	ands	r3, r2
 8005566:	d03c      	beq.n	80055e2 <HAL_RCC_OscConfig+0x2f2>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d138      	bne.n	80055e2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e1cb      	b.n	800590c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d019      	beq.n	80055b0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800557c:	4b27      	ldr	r3, [pc, #156]	; (800561c <HAL_RCC_OscConfig+0x32c>)
 800557e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005580:	4b26      	ldr	r3, [pc, #152]	; (800561c <HAL_RCC_OscConfig+0x32c>)
 8005582:	2101      	movs	r1, #1
 8005584:	430a      	orrs	r2, r1
 8005586:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005588:	f7fd fdb2 	bl	80030f0 <HAL_GetTick>
 800558c:	0003      	movs	r3, r0
 800558e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005590:	e008      	b.n	80055a4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005592:	f7fd fdad 	bl	80030f0 <HAL_GetTick>
 8005596:	0002      	movs	r2, r0
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	2b02      	cmp	r3, #2
 800559e:	d901      	bls.n	80055a4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e1b3      	b.n	800590c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055a4:	4b1d      	ldr	r3, [pc, #116]	; (800561c <HAL_RCC_OscConfig+0x32c>)
 80055a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055a8:	2202      	movs	r2, #2
 80055aa:	4013      	ands	r3, r2
 80055ac:	d0f1      	beq.n	8005592 <HAL_RCC_OscConfig+0x2a2>
 80055ae:	e018      	b.n	80055e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80055b0:	4b1a      	ldr	r3, [pc, #104]	; (800561c <HAL_RCC_OscConfig+0x32c>)
 80055b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80055b4:	4b19      	ldr	r3, [pc, #100]	; (800561c <HAL_RCC_OscConfig+0x32c>)
 80055b6:	2101      	movs	r1, #1
 80055b8:	438a      	bics	r2, r1
 80055ba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055bc:	f7fd fd98 	bl	80030f0 <HAL_GetTick>
 80055c0:	0003      	movs	r3, r0
 80055c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055c4:	e008      	b.n	80055d8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055c6:	f7fd fd93 	bl	80030f0 <HAL_GetTick>
 80055ca:	0002      	movs	r2, r0
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	d901      	bls.n	80055d8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80055d4:	2303      	movs	r3, #3
 80055d6:	e199      	b.n	800590c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055d8:	4b10      	ldr	r3, [pc, #64]	; (800561c <HAL_RCC_OscConfig+0x32c>)
 80055da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055dc:	2202      	movs	r2, #2
 80055de:	4013      	ands	r3, r2
 80055e0:	d1f1      	bne.n	80055c6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2204      	movs	r2, #4
 80055e8:	4013      	ands	r3, r2
 80055ea:	d100      	bne.n	80055ee <HAL_RCC_OscConfig+0x2fe>
 80055ec:	e0c6      	b.n	800577c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055ee:	231f      	movs	r3, #31
 80055f0:	18fb      	adds	r3, r7, r3
 80055f2:	2200      	movs	r2, #0
 80055f4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80055f6:	4b09      	ldr	r3, [pc, #36]	; (800561c <HAL_RCC_OscConfig+0x32c>)
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	2238      	movs	r2, #56	; 0x38
 80055fc:	4013      	ands	r3, r2
 80055fe:	2b20      	cmp	r3, #32
 8005600:	d11e      	bne.n	8005640 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005602:	4b06      	ldr	r3, [pc, #24]	; (800561c <HAL_RCC_OscConfig+0x32c>)
 8005604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005606:	2202      	movs	r2, #2
 8005608:	4013      	ands	r3, r2
 800560a:	d100      	bne.n	800560e <HAL_RCC_OscConfig+0x31e>
 800560c:	e0b6      	b.n	800577c <HAL_RCC_OscConfig+0x48c>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d000      	beq.n	8005618 <HAL_RCC_OscConfig+0x328>
 8005616:	e0b1      	b.n	800577c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e177      	b.n	800590c <HAL_RCC_OscConfig+0x61c>
 800561c:	40021000 	.word	0x40021000
 8005620:	fffeffff 	.word	0xfffeffff
 8005624:	fffbffff 	.word	0xfffbffff
 8005628:	ffff80ff 	.word	0xffff80ff
 800562c:	ffffc7ff 	.word	0xffffc7ff
 8005630:	00f42400 	.word	0x00f42400
 8005634:	20003134 	.word	0x20003134
 8005638:	20003138 	.word	0x20003138
 800563c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005640:	4bb4      	ldr	r3, [pc, #720]	; (8005914 <HAL_RCC_OscConfig+0x624>)
 8005642:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005644:	2380      	movs	r3, #128	; 0x80
 8005646:	055b      	lsls	r3, r3, #21
 8005648:	4013      	ands	r3, r2
 800564a:	d101      	bne.n	8005650 <HAL_RCC_OscConfig+0x360>
 800564c:	2301      	movs	r3, #1
 800564e:	e000      	b.n	8005652 <HAL_RCC_OscConfig+0x362>
 8005650:	2300      	movs	r3, #0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d011      	beq.n	800567a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005656:	4baf      	ldr	r3, [pc, #700]	; (8005914 <HAL_RCC_OscConfig+0x624>)
 8005658:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800565a:	4bae      	ldr	r3, [pc, #696]	; (8005914 <HAL_RCC_OscConfig+0x624>)
 800565c:	2180      	movs	r1, #128	; 0x80
 800565e:	0549      	lsls	r1, r1, #21
 8005660:	430a      	orrs	r2, r1
 8005662:	63da      	str	r2, [r3, #60]	; 0x3c
 8005664:	4bab      	ldr	r3, [pc, #684]	; (8005914 <HAL_RCC_OscConfig+0x624>)
 8005666:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005668:	2380      	movs	r3, #128	; 0x80
 800566a:	055b      	lsls	r3, r3, #21
 800566c:	4013      	ands	r3, r2
 800566e:	60fb      	str	r3, [r7, #12]
 8005670:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005672:	231f      	movs	r3, #31
 8005674:	18fb      	adds	r3, r7, r3
 8005676:	2201      	movs	r2, #1
 8005678:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800567a:	4ba7      	ldr	r3, [pc, #668]	; (8005918 <HAL_RCC_OscConfig+0x628>)
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	2380      	movs	r3, #128	; 0x80
 8005680:	005b      	lsls	r3, r3, #1
 8005682:	4013      	ands	r3, r2
 8005684:	d11a      	bne.n	80056bc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005686:	4ba4      	ldr	r3, [pc, #656]	; (8005918 <HAL_RCC_OscConfig+0x628>)
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	4ba3      	ldr	r3, [pc, #652]	; (8005918 <HAL_RCC_OscConfig+0x628>)
 800568c:	2180      	movs	r1, #128	; 0x80
 800568e:	0049      	lsls	r1, r1, #1
 8005690:	430a      	orrs	r2, r1
 8005692:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005694:	f7fd fd2c 	bl	80030f0 <HAL_GetTick>
 8005698:	0003      	movs	r3, r0
 800569a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800569c:	e008      	b.n	80056b0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800569e:	f7fd fd27 	bl	80030f0 <HAL_GetTick>
 80056a2:	0002      	movs	r2, r0
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d901      	bls.n	80056b0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e12d      	b.n	800590c <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056b0:	4b99      	ldr	r3, [pc, #612]	; (8005918 <HAL_RCC_OscConfig+0x628>)
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	2380      	movs	r3, #128	; 0x80
 80056b6:	005b      	lsls	r3, r3, #1
 80056b8:	4013      	ands	r3, r2
 80056ba:	d0f0      	beq.n	800569e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d106      	bne.n	80056d2 <HAL_RCC_OscConfig+0x3e2>
 80056c4:	4b93      	ldr	r3, [pc, #588]	; (8005914 <HAL_RCC_OscConfig+0x624>)
 80056c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80056c8:	4b92      	ldr	r3, [pc, #584]	; (8005914 <HAL_RCC_OscConfig+0x624>)
 80056ca:	2101      	movs	r1, #1
 80056cc:	430a      	orrs	r2, r1
 80056ce:	65da      	str	r2, [r3, #92]	; 0x5c
 80056d0:	e01c      	b.n	800570c <HAL_RCC_OscConfig+0x41c>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	2b05      	cmp	r3, #5
 80056d8:	d10c      	bne.n	80056f4 <HAL_RCC_OscConfig+0x404>
 80056da:	4b8e      	ldr	r3, [pc, #568]	; (8005914 <HAL_RCC_OscConfig+0x624>)
 80056dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80056de:	4b8d      	ldr	r3, [pc, #564]	; (8005914 <HAL_RCC_OscConfig+0x624>)
 80056e0:	2104      	movs	r1, #4
 80056e2:	430a      	orrs	r2, r1
 80056e4:	65da      	str	r2, [r3, #92]	; 0x5c
 80056e6:	4b8b      	ldr	r3, [pc, #556]	; (8005914 <HAL_RCC_OscConfig+0x624>)
 80056e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80056ea:	4b8a      	ldr	r3, [pc, #552]	; (8005914 <HAL_RCC_OscConfig+0x624>)
 80056ec:	2101      	movs	r1, #1
 80056ee:	430a      	orrs	r2, r1
 80056f0:	65da      	str	r2, [r3, #92]	; 0x5c
 80056f2:	e00b      	b.n	800570c <HAL_RCC_OscConfig+0x41c>
 80056f4:	4b87      	ldr	r3, [pc, #540]	; (8005914 <HAL_RCC_OscConfig+0x624>)
 80056f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80056f8:	4b86      	ldr	r3, [pc, #536]	; (8005914 <HAL_RCC_OscConfig+0x624>)
 80056fa:	2101      	movs	r1, #1
 80056fc:	438a      	bics	r2, r1
 80056fe:	65da      	str	r2, [r3, #92]	; 0x5c
 8005700:	4b84      	ldr	r3, [pc, #528]	; (8005914 <HAL_RCC_OscConfig+0x624>)
 8005702:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005704:	4b83      	ldr	r3, [pc, #524]	; (8005914 <HAL_RCC_OscConfig+0x624>)
 8005706:	2104      	movs	r1, #4
 8005708:	438a      	bics	r2, r1
 800570a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d014      	beq.n	800573e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005714:	f7fd fcec 	bl	80030f0 <HAL_GetTick>
 8005718:	0003      	movs	r3, r0
 800571a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800571c:	e009      	b.n	8005732 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800571e:	f7fd fce7 	bl	80030f0 <HAL_GetTick>
 8005722:	0002      	movs	r2, r0
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	4a7c      	ldr	r2, [pc, #496]	; (800591c <HAL_RCC_OscConfig+0x62c>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d901      	bls.n	8005732 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e0ec      	b.n	800590c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005732:	4b78      	ldr	r3, [pc, #480]	; (8005914 <HAL_RCC_OscConfig+0x624>)
 8005734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005736:	2202      	movs	r2, #2
 8005738:	4013      	ands	r3, r2
 800573a:	d0f0      	beq.n	800571e <HAL_RCC_OscConfig+0x42e>
 800573c:	e013      	b.n	8005766 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800573e:	f7fd fcd7 	bl	80030f0 <HAL_GetTick>
 8005742:	0003      	movs	r3, r0
 8005744:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005746:	e009      	b.n	800575c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005748:	f7fd fcd2 	bl	80030f0 <HAL_GetTick>
 800574c:	0002      	movs	r2, r0
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	4a72      	ldr	r2, [pc, #456]	; (800591c <HAL_RCC_OscConfig+0x62c>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d901      	bls.n	800575c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e0d7      	b.n	800590c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800575c:	4b6d      	ldr	r3, [pc, #436]	; (8005914 <HAL_RCC_OscConfig+0x624>)
 800575e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005760:	2202      	movs	r2, #2
 8005762:	4013      	ands	r3, r2
 8005764:	d1f0      	bne.n	8005748 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005766:	231f      	movs	r3, #31
 8005768:	18fb      	adds	r3, r7, r3
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d105      	bne.n	800577c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005770:	4b68      	ldr	r3, [pc, #416]	; (8005914 <HAL_RCC_OscConfig+0x624>)
 8005772:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005774:	4b67      	ldr	r3, [pc, #412]	; (8005914 <HAL_RCC_OscConfig+0x624>)
 8005776:	496a      	ldr	r1, [pc, #424]	; (8005920 <HAL_RCC_OscConfig+0x630>)
 8005778:	400a      	ands	r2, r1
 800577a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	69db      	ldr	r3, [r3, #28]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d100      	bne.n	8005786 <HAL_RCC_OscConfig+0x496>
 8005784:	e0c1      	b.n	800590a <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005786:	4b63      	ldr	r3, [pc, #396]	; (8005914 <HAL_RCC_OscConfig+0x624>)
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	2238      	movs	r2, #56	; 0x38
 800578c:	4013      	ands	r3, r2
 800578e:	2b10      	cmp	r3, #16
 8005790:	d100      	bne.n	8005794 <HAL_RCC_OscConfig+0x4a4>
 8005792:	e081      	b.n	8005898 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	69db      	ldr	r3, [r3, #28]
 8005798:	2b02      	cmp	r3, #2
 800579a:	d156      	bne.n	800584a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800579c:	4b5d      	ldr	r3, [pc, #372]	; (8005914 <HAL_RCC_OscConfig+0x624>)
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	4b5c      	ldr	r3, [pc, #368]	; (8005914 <HAL_RCC_OscConfig+0x624>)
 80057a2:	4960      	ldr	r1, [pc, #384]	; (8005924 <HAL_RCC_OscConfig+0x634>)
 80057a4:	400a      	ands	r2, r1
 80057a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a8:	f7fd fca2 	bl	80030f0 <HAL_GetTick>
 80057ac:	0003      	movs	r3, r0
 80057ae:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057b0:	e008      	b.n	80057c4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057b2:	f7fd fc9d 	bl	80030f0 <HAL_GetTick>
 80057b6:	0002      	movs	r2, r0
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d901      	bls.n	80057c4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e0a3      	b.n	800590c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057c4:	4b53      	ldr	r3, [pc, #332]	; (8005914 <HAL_RCC_OscConfig+0x624>)
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	2380      	movs	r3, #128	; 0x80
 80057ca:	049b      	lsls	r3, r3, #18
 80057cc:	4013      	ands	r3, r2
 80057ce:	d1f0      	bne.n	80057b2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057d0:	4b50      	ldr	r3, [pc, #320]	; (8005914 <HAL_RCC_OscConfig+0x624>)
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	4a54      	ldr	r2, [pc, #336]	; (8005928 <HAL_RCC_OscConfig+0x638>)
 80057d6:	4013      	ands	r3, r2
 80057d8:	0019      	movs	r1, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a1a      	ldr	r2, [r3, #32]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e2:	431a      	orrs	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e8:	021b      	lsls	r3, r3, #8
 80057ea:	431a      	orrs	r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f0:	431a      	orrs	r2, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f6:	431a      	orrs	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057fc:	431a      	orrs	r2, r3
 80057fe:	4b45      	ldr	r3, [pc, #276]	; (8005914 <HAL_RCC_OscConfig+0x624>)
 8005800:	430a      	orrs	r2, r1
 8005802:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005804:	4b43      	ldr	r3, [pc, #268]	; (8005914 <HAL_RCC_OscConfig+0x624>)
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	4b42      	ldr	r3, [pc, #264]	; (8005914 <HAL_RCC_OscConfig+0x624>)
 800580a:	2180      	movs	r1, #128	; 0x80
 800580c:	0449      	lsls	r1, r1, #17
 800580e:	430a      	orrs	r2, r1
 8005810:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005812:	4b40      	ldr	r3, [pc, #256]	; (8005914 <HAL_RCC_OscConfig+0x624>)
 8005814:	68da      	ldr	r2, [r3, #12]
 8005816:	4b3f      	ldr	r3, [pc, #252]	; (8005914 <HAL_RCC_OscConfig+0x624>)
 8005818:	2180      	movs	r1, #128	; 0x80
 800581a:	0549      	lsls	r1, r1, #21
 800581c:	430a      	orrs	r2, r1
 800581e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005820:	f7fd fc66 	bl	80030f0 <HAL_GetTick>
 8005824:	0003      	movs	r3, r0
 8005826:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005828:	e008      	b.n	800583c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800582a:	f7fd fc61 	bl	80030f0 <HAL_GetTick>
 800582e:	0002      	movs	r2, r0
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	2b02      	cmp	r3, #2
 8005836:	d901      	bls.n	800583c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e067      	b.n	800590c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800583c:	4b35      	ldr	r3, [pc, #212]	; (8005914 <HAL_RCC_OscConfig+0x624>)
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	2380      	movs	r3, #128	; 0x80
 8005842:	049b      	lsls	r3, r3, #18
 8005844:	4013      	ands	r3, r2
 8005846:	d0f0      	beq.n	800582a <HAL_RCC_OscConfig+0x53a>
 8005848:	e05f      	b.n	800590a <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800584a:	4b32      	ldr	r3, [pc, #200]	; (8005914 <HAL_RCC_OscConfig+0x624>)
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	4b31      	ldr	r3, [pc, #196]	; (8005914 <HAL_RCC_OscConfig+0x624>)
 8005850:	4934      	ldr	r1, [pc, #208]	; (8005924 <HAL_RCC_OscConfig+0x634>)
 8005852:	400a      	ands	r2, r1
 8005854:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005856:	4b2f      	ldr	r3, [pc, #188]	; (8005914 <HAL_RCC_OscConfig+0x624>)
 8005858:	68da      	ldr	r2, [r3, #12]
 800585a:	4b2e      	ldr	r3, [pc, #184]	; (8005914 <HAL_RCC_OscConfig+0x624>)
 800585c:	2103      	movs	r1, #3
 800585e:	438a      	bics	r2, r1
 8005860:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8005862:	4b2c      	ldr	r3, [pc, #176]	; (8005914 <HAL_RCC_OscConfig+0x624>)
 8005864:	68da      	ldr	r2, [r3, #12]
 8005866:	4b2b      	ldr	r3, [pc, #172]	; (8005914 <HAL_RCC_OscConfig+0x624>)
 8005868:	4930      	ldr	r1, [pc, #192]	; (800592c <HAL_RCC_OscConfig+0x63c>)
 800586a:	400a      	ands	r2, r1
 800586c:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800586e:	f7fd fc3f 	bl	80030f0 <HAL_GetTick>
 8005872:	0003      	movs	r3, r0
 8005874:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005876:	e008      	b.n	800588a <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005878:	f7fd fc3a 	bl	80030f0 <HAL_GetTick>
 800587c:	0002      	movs	r2, r0
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	2b02      	cmp	r3, #2
 8005884:	d901      	bls.n	800588a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e040      	b.n	800590c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800588a:	4b22      	ldr	r3, [pc, #136]	; (8005914 <HAL_RCC_OscConfig+0x624>)
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	2380      	movs	r3, #128	; 0x80
 8005890:	049b      	lsls	r3, r3, #18
 8005892:	4013      	ands	r3, r2
 8005894:	d1f0      	bne.n	8005878 <HAL_RCC_OscConfig+0x588>
 8005896:	e038      	b.n	800590a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	69db      	ldr	r3, [r3, #28]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d101      	bne.n	80058a4 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e033      	b.n	800590c <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80058a4:	4b1b      	ldr	r3, [pc, #108]	; (8005914 <HAL_RCC_OscConfig+0x624>)
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	2203      	movs	r2, #3
 80058ae:	401a      	ands	r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a1b      	ldr	r3, [r3, #32]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d126      	bne.n	8005906 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	2270      	movs	r2, #112	; 0x70
 80058bc:	401a      	ands	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d11f      	bne.n	8005906 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80058c6:	697a      	ldr	r2, [r7, #20]
 80058c8:	23fe      	movs	r3, #254	; 0xfe
 80058ca:	01db      	lsls	r3, r3, #7
 80058cc:	401a      	ands	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d116      	bne.n	8005906 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	23f8      	movs	r3, #248	; 0xf8
 80058dc:	039b      	lsls	r3, r3, #14
 80058de:	401a      	ands	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d10e      	bne.n	8005906 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80058e8:	697a      	ldr	r2, [r7, #20]
 80058ea:	23e0      	movs	r3, #224	; 0xe0
 80058ec:	051b      	lsls	r3, r3, #20
 80058ee:	401a      	ands	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d106      	bne.n	8005906 <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	0f5b      	lsrs	r3, r3, #29
 80058fc:	075a      	lsls	r2, r3, #29
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005902:	429a      	cmp	r2, r3
 8005904:	d001      	beq.n	800590a <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e000      	b.n	800590c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 800590a:	2300      	movs	r3, #0
}
 800590c:	0018      	movs	r0, r3
 800590e:	46bd      	mov	sp, r7
 8005910:	b008      	add	sp, #32
 8005912:	bd80      	pop	{r7, pc}
 8005914:	40021000 	.word	0x40021000
 8005918:	40007000 	.word	0x40007000
 800591c:	00001388 	.word	0x00001388
 8005920:	efffffff 	.word	0xefffffff
 8005924:	feffffff 	.word	0xfeffffff
 8005928:	11c1808c 	.word	0x11c1808c
 800592c:	eefeffff 	.word	0xeefeffff

08005930 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d101      	bne.n	8005944 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e0e9      	b.n	8005b18 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005944:	4b76      	ldr	r3, [pc, #472]	; (8005b20 <HAL_RCC_ClockConfig+0x1f0>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2207      	movs	r2, #7
 800594a:	4013      	ands	r3, r2
 800594c:	683a      	ldr	r2, [r7, #0]
 800594e:	429a      	cmp	r2, r3
 8005950:	d91e      	bls.n	8005990 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005952:	4b73      	ldr	r3, [pc, #460]	; (8005b20 <HAL_RCC_ClockConfig+0x1f0>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2207      	movs	r2, #7
 8005958:	4393      	bics	r3, r2
 800595a:	0019      	movs	r1, r3
 800595c:	4b70      	ldr	r3, [pc, #448]	; (8005b20 <HAL_RCC_ClockConfig+0x1f0>)
 800595e:	683a      	ldr	r2, [r7, #0]
 8005960:	430a      	orrs	r2, r1
 8005962:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005964:	f7fd fbc4 	bl	80030f0 <HAL_GetTick>
 8005968:	0003      	movs	r3, r0
 800596a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800596c:	e009      	b.n	8005982 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800596e:	f7fd fbbf 	bl	80030f0 <HAL_GetTick>
 8005972:	0002      	movs	r2, r0
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	4a6a      	ldr	r2, [pc, #424]	; (8005b24 <HAL_RCC_ClockConfig+0x1f4>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d901      	bls.n	8005982 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e0ca      	b.n	8005b18 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005982:	4b67      	ldr	r3, [pc, #412]	; (8005b20 <HAL_RCC_ClockConfig+0x1f0>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2207      	movs	r2, #7
 8005988:	4013      	ands	r3, r2
 800598a:	683a      	ldr	r2, [r7, #0]
 800598c:	429a      	cmp	r2, r3
 800598e:	d1ee      	bne.n	800596e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2202      	movs	r2, #2
 8005996:	4013      	ands	r3, r2
 8005998:	d015      	beq.n	80059c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2204      	movs	r2, #4
 80059a0:	4013      	ands	r3, r2
 80059a2:	d006      	beq.n	80059b2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80059a4:	4b60      	ldr	r3, [pc, #384]	; (8005b28 <HAL_RCC_ClockConfig+0x1f8>)
 80059a6:	689a      	ldr	r2, [r3, #8]
 80059a8:	4b5f      	ldr	r3, [pc, #380]	; (8005b28 <HAL_RCC_ClockConfig+0x1f8>)
 80059aa:	21e0      	movs	r1, #224	; 0xe0
 80059ac:	01c9      	lsls	r1, r1, #7
 80059ae:	430a      	orrs	r2, r1
 80059b0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059b2:	4b5d      	ldr	r3, [pc, #372]	; (8005b28 <HAL_RCC_ClockConfig+0x1f8>)
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	4a5d      	ldr	r2, [pc, #372]	; (8005b2c <HAL_RCC_ClockConfig+0x1fc>)
 80059b8:	4013      	ands	r3, r2
 80059ba:	0019      	movs	r1, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	689a      	ldr	r2, [r3, #8]
 80059c0:	4b59      	ldr	r3, [pc, #356]	; (8005b28 <HAL_RCC_ClockConfig+0x1f8>)
 80059c2:	430a      	orrs	r2, r1
 80059c4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2201      	movs	r2, #1
 80059cc:	4013      	ands	r3, r2
 80059ce:	d057      	beq.n	8005a80 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d107      	bne.n	80059e8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059d8:	4b53      	ldr	r3, [pc, #332]	; (8005b28 <HAL_RCC_ClockConfig+0x1f8>)
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	2380      	movs	r3, #128	; 0x80
 80059de:	029b      	lsls	r3, r3, #10
 80059e0:	4013      	ands	r3, r2
 80059e2:	d12b      	bne.n	8005a3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e097      	b.n	8005b18 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d107      	bne.n	8005a00 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059f0:	4b4d      	ldr	r3, [pc, #308]	; (8005b28 <HAL_RCC_ClockConfig+0x1f8>)
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	2380      	movs	r3, #128	; 0x80
 80059f6:	049b      	lsls	r3, r3, #18
 80059f8:	4013      	ands	r3, r2
 80059fa:	d11f      	bne.n	8005a3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e08b      	b.n	8005b18 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d107      	bne.n	8005a18 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a08:	4b47      	ldr	r3, [pc, #284]	; (8005b28 <HAL_RCC_ClockConfig+0x1f8>)
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	2380      	movs	r3, #128	; 0x80
 8005a0e:	00db      	lsls	r3, r3, #3
 8005a10:	4013      	ands	r3, r2
 8005a12:	d113      	bne.n	8005a3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e07f      	b.n	8005b18 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	2b03      	cmp	r3, #3
 8005a1e:	d106      	bne.n	8005a2e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a20:	4b41      	ldr	r3, [pc, #260]	; (8005b28 <HAL_RCC_ClockConfig+0x1f8>)
 8005a22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a24:	2202      	movs	r2, #2
 8005a26:	4013      	ands	r3, r2
 8005a28:	d108      	bne.n	8005a3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e074      	b.n	8005b18 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a2e:	4b3e      	ldr	r3, [pc, #248]	; (8005b28 <HAL_RCC_ClockConfig+0x1f8>)
 8005a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a32:	2202      	movs	r2, #2
 8005a34:	4013      	ands	r3, r2
 8005a36:	d101      	bne.n	8005a3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e06d      	b.n	8005b18 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a3c:	4b3a      	ldr	r3, [pc, #232]	; (8005b28 <HAL_RCC_ClockConfig+0x1f8>)
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	2207      	movs	r2, #7
 8005a42:	4393      	bics	r3, r2
 8005a44:	0019      	movs	r1, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685a      	ldr	r2, [r3, #4]
 8005a4a:	4b37      	ldr	r3, [pc, #220]	; (8005b28 <HAL_RCC_ClockConfig+0x1f8>)
 8005a4c:	430a      	orrs	r2, r1
 8005a4e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a50:	f7fd fb4e 	bl	80030f0 <HAL_GetTick>
 8005a54:	0003      	movs	r3, r0
 8005a56:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a58:	e009      	b.n	8005a6e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a5a:	f7fd fb49 	bl	80030f0 <HAL_GetTick>
 8005a5e:	0002      	movs	r2, r0
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	4a2f      	ldr	r2, [pc, #188]	; (8005b24 <HAL_RCC_ClockConfig+0x1f4>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d901      	bls.n	8005a6e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e054      	b.n	8005b18 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a6e:	4b2e      	ldr	r3, [pc, #184]	; (8005b28 <HAL_RCC_ClockConfig+0x1f8>)
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	2238      	movs	r2, #56	; 0x38
 8005a74:	401a      	ands	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	00db      	lsls	r3, r3, #3
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d1ec      	bne.n	8005a5a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a80:	4b27      	ldr	r3, [pc, #156]	; (8005b20 <HAL_RCC_ClockConfig+0x1f0>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2207      	movs	r2, #7
 8005a86:	4013      	ands	r3, r2
 8005a88:	683a      	ldr	r2, [r7, #0]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d21e      	bcs.n	8005acc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a8e:	4b24      	ldr	r3, [pc, #144]	; (8005b20 <HAL_RCC_ClockConfig+0x1f0>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2207      	movs	r2, #7
 8005a94:	4393      	bics	r3, r2
 8005a96:	0019      	movs	r1, r3
 8005a98:	4b21      	ldr	r3, [pc, #132]	; (8005b20 <HAL_RCC_ClockConfig+0x1f0>)
 8005a9a:	683a      	ldr	r2, [r7, #0]
 8005a9c:	430a      	orrs	r2, r1
 8005a9e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005aa0:	f7fd fb26 	bl	80030f0 <HAL_GetTick>
 8005aa4:	0003      	movs	r3, r0
 8005aa6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005aa8:	e009      	b.n	8005abe <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005aaa:	f7fd fb21 	bl	80030f0 <HAL_GetTick>
 8005aae:	0002      	movs	r2, r0
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	4a1b      	ldr	r2, [pc, #108]	; (8005b24 <HAL_RCC_ClockConfig+0x1f4>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d901      	bls.n	8005abe <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e02c      	b.n	8005b18 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005abe:	4b18      	ldr	r3, [pc, #96]	; (8005b20 <HAL_RCC_ClockConfig+0x1f0>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2207      	movs	r2, #7
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	683a      	ldr	r2, [r7, #0]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d1ee      	bne.n	8005aaa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2204      	movs	r2, #4
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	d009      	beq.n	8005aea <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005ad6:	4b14      	ldr	r3, [pc, #80]	; (8005b28 <HAL_RCC_ClockConfig+0x1f8>)
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	4a15      	ldr	r2, [pc, #84]	; (8005b30 <HAL_RCC_ClockConfig+0x200>)
 8005adc:	4013      	ands	r3, r2
 8005ade:	0019      	movs	r1, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	68da      	ldr	r2, [r3, #12]
 8005ae4:	4b10      	ldr	r3, [pc, #64]	; (8005b28 <HAL_RCC_ClockConfig+0x1f8>)
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005aea:	f000 f829 	bl	8005b40 <HAL_RCC_GetSysClockFreq>
 8005aee:	0001      	movs	r1, r0
 8005af0:	4b0d      	ldr	r3, [pc, #52]	; (8005b28 <HAL_RCC_ClockConfig+0x1f8>)
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	0a1b      	lsrs	r3, r3, #8
 8005af6:	220f      	movs	r2, #15
 8005af8:	401a      	ands	r2, r3
 8005afa:	4b0e      	ldr	r3, [pc, #56]	; (8005b34 <HAL_RCC_ClockConfig+0x204>)
 8005afc:	0092      	lsls	r2, r2, #2
 8005afe:	58d3      	ldr	r3, [r2, r3]
 8005b00:	221f      	movs	r2, #31
 8005b02:	4013      	ands	r3, r2
 8005b04:	000a      	movs	r2, r1
 8005b06:	40da      	lsrs	r2, r3
 8005b08:	4b0b      	ldr	r3, [pc, #44]	; (8005b38 <HAL_RCC_ClockConfig+0x208>)
 8005b0a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005b0c:	4b0b      	ldr	r3, [pc, #44]	; (8005b3c <HAL_RCC_ClockConfig+0x20c>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	0018      	movs	r0, r3
 8005b12:	f7fd fa91 	bl	8003038 <HAL_InitTick>
 8005b16:	0003      	movs	r3, r0
}
 8005b18:	0018      	movs	r0, r3
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	b004      	add	sp, #16
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	40022000 	.word	0x40022000
 8005b24:	00001388 	.word	0x00001388
 8005b28:	40021000 	.word	0x40021000
 8005b2c:	fffff0ff 	.word	0xfffff0ff
 8005b30:	ffff8fff 	.word	0xffff8fff
 8005b34:	0800a7a8 	.word	0x0800a7a8
 8005b38:	20003134 	.word	0x20003134
 8005b3c:	20003138 	.word	0x20003138

08005b40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b46:	4b3c      	ldr	r3, [pc, #240]	; (8005c38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	2238      	movs	r2, #56	; 0x38
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	d10f      	bne.n	8005b70 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005b50:	4b39      	ldr	r3, [pc, #228]	; (8005c38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	0adb      	lsrs	r3, r3, #11
 8005b56:	2207      	movs	r2, #7
 8005b58:	4013      	ands	r3, r2
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	409a      	lsls	r2, r3
 8005b5e:	0013      	movs	r3, r2
 8005b60:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005b62:	6839      	ldr	r1, [r7, #0]
 8005b64:	4835      	ldr	r0, [pc, #212]	; (8005c3c <HAL_RCC_GetSysClockFreq+0xfc>)
 8005b66:	f7fa facd 	bl	8000104 <__udivsi3>
 8005b6a:	0003      	movs	r3, r0
 8005b6c:	613b      	str	r3, [r7, #16]
 8005b6e:	e05d      	b.n	8005c2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b70:	4b31      	ldr	r3, [pc, #196]	; (8005c38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	2238      	movs	r2, #56	; 0x38
 8005b76:	4013      	ands	r3, r2
 8005b78:	2b08      	cmp	r3, #8
 8005b7a:	d102      	bne.n	8005b82 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005b7c:	4b30      	ldr	r3, [pc, #192]	; (8005c40 <HAL_RCC_GetSysClockFreq+0x100>)
 8005b7e:	613b      	str	r3, [r7, #16]
 8005b80:	e054      	b.n	8005c2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b82:	4b2d      	ldr	r3, [pc, #180]	; (8005c38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	2238      	movs	r2, #56	; 0x38
 8005b88:	4013      	ands	r3, r2
 8005b8a:	2b10      	cmp	r3, #16
 8005b8c:	d138      	bne.n	8005c00 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005b8e:	4b2a      	ldr	r3, [pc, #168]	; (8005c38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	2203      	movs	r2, #3
 8005b94:	4013      	ands	r3, r2
 8005b96:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b98:	4b27      	ldr	r3, [pc, #156]	; (8005c38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	091b      	lsrs	r3, r3, #4
 8005b9e:	2207      	movs	r2, #7
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2b03      	cmp	r3, #3
 8005baa:	d10d      	bne.n	8005bc8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005bac:	68b9      	ldr	r1, [r7, #8]
 8005bae:	4824      	ldr	r0, [pc, #144]	; (8005c40 <HAL_RCC_GetSysClockFreq+0x100>)
 8005bb0:	f7fa faa8 	bl	8000104 <__udivsi3>
 8005bb4:	0003      	movs	r3, r0
 8005bb6:	0019      	movs	r1, r3
 8005bb8:	4b1f      	ldr	r3, [pc, #124]	; (8005c38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	0a1b      	lsrs	r3, r3, #8
 8005bbe:	227f      	movs	r2, #127	; 0x7f
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	434b      	muls	r3, r1
 8005bc4:	617b      	str	r3, [r7, #20]
        break;
 8005bc6:	e00d      	b.n	8005be4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005bc8:	68b9      	ldr	r1, [r7, #8]
 8005bca:	481c      	ldr	r0, [pc, #112]	; (8005c3c <HAL_RCC_GetSysClockFreq+0xfc>)
 8005bcc:	f7fa fa9a 	bl	8000104 <__udivsi3>
 8005bd0:	0003      	movs	r3, r0
 8005bd2:	0019      	movs	r1, r3
 8005bd4:	4b18      	ldr	r3, [pc, #96]	; (8005c38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	0a1b      	lsrs	r3, r3, #8
 8005bda:	227f      	movs	r2, #127	; 0x7f
 8005bdc:	4013      	ands	r3, r2
 8005bde:	434b      	muls	r3, r1
 8005be0:	617b      	str	r3, [r7, #20]
        break;
 8005be2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005be4:	4b14      	ldr	r3, [pc, #80]	; (8005c38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	0f5b      	lsrs	r3, r3, #29
 8005bea:	2207      	movs	r2, #7
 8005bec:	4013      	ands	r3, r2
 8005bee:	3301      	adds	r3, #1
 8005bf0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005bf2:	6879      	ldr	r1, [r7, #4]
 8005bf4:	6978      	ldr	r0, [r7, #20]
 8005bf6:	f7fa fa85 	bl	8000104 <__udivsi3>
 8005bfa:	0003      	movs	r3, r0
 8005bfc:	613b      	str	r3, [r7, #16]
 8005bfe:	e015      	b.n	8005c2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005c00:	4b0d      	ldr	r3, [pc, #52]	; (8005c38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	2238      	movs	r2, #56	; 0x38
 8005c06:	4013      	ands	r3, r2
 8005c08:	2b20      	cmp	r3, #32
 8005c0a:	d103      	bne.n	8005c14 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005c0c:	2380      	movs	r3, #128	; 0x80
 8005c0e:	021b      	lsls	r3, r3, #8
 8005c10:	613b      	str	r3, [r7, #16]
 8005c12:	e00b      	b.n	8005c2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005c14:	4b08      	ldr	r3, [pc, #32]	; (8005c38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	2238      	movs	r2, #56	; 0x38
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	2b18      	cmp	r3, #24
 8005c1e:	d103      	bne.n	8005c28 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005c20:	23fa      	movs	r3, #250	; 0xfa
 8005c22:	01db      	lsls	r3, r3, #7
 8005c24:	613b      	str	r3, [r7, #16]
 8005c26:	e001      	b.n	8005c2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005c2c:	693b      	ldr	r3, [r7, #16]
}
 8005c2e:	0018      	movs	r0, r3
 8005c30:	46bd      	mov	sp, r7
 8005c32:	b006      	add	sp, #24
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	46c0      	nop			; (mov r8, r8)
 8005c38:	40021000 	.word	0x40021000
 8005c3c:	00f42400 	.word	0x00f42400
 8005c40:	007a1200 	.word	0x007a1200

08005c44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c48:	4b02      	ldr	r3, [pc, #8]	; (8005c54 <HAL_RCC_GetHCLKFreq+0x10>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
}
 8005c4c:	0018      	movs	r0, r3
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	46c0      	nop			; (mov r8, r8)
 8005c54:	20003134 	.word	0x20003134

08005c58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c58:	b5b0      	push	{r4, r5, r7, lr}
 8005c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005c5c:	f7ff fff2 	bl	8005c44 <HAL_RCC_GetHCLKFreq>
 8005c60:	0004      	movs	r4, r0
 8005c62:	f7ff fb39 	bl	80052d8 <LL_RCC_GetAPB1Prescaler>
 8005c66:	0003      	movs	r3, r0
 8005c68:	0b1a      	lsrs	r2, r3, #12
 8005c6a:	4b05      	ldr	r3, [pc, #20]	; (8005c80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c6c:	0092      	lsls	r2, r2, #2
 8005c6e:	58d3      	ldr	r3, [r2, r3]
 8005c70:	221f      	movs	r2, #31
 8005c72:	4013      	ands	r3, r2
 8005c74:	40dc      	lsrs	r4, r3
 8005c76:	0023      	movs	r3, r4
}
 8005c78:	0018      	movs	r0, r3
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bdb0      	pop	{r4, r5, r7, pc}
 8005c7e:	46c0      	nop			; (mov r8, r8)
 8005c80:	0800a7e8 	.word	0x0800a7e8

08005c84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b086      	sub	sp, #24
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005c8c:	2313      	movs	r3, #19
 8005c8e:	18fb      	adds	r3, r7, r3
 8005c90:	2200      	movs	r2, #0
 8005c92:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c94:	2312      	movs	r3, #18
 8005c96:	18fb      	adds	r3, r7, r3
 8005c98:	2200      	movs	r2, #0
 8005c9a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	2380      	movs	r3, #128	; 0x80
 8005ca2:	029b      	lsls	r3, r3, #10
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	d100      	bne.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005ca8:	e0a3      	b.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005caa:	2011      	movs	r0, #17
 8005cac:	183b      	adds	r3, r7, r0
 8005cae:	2200      	movs	r2, #0
 8005cb0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cb2:	4bc3      	ldr	r3, [pc, #780]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005cb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cb6:	2380      	movs	r3, #128	; 0x80
 8005cb8:	055b      	lsls	r3, r3, #21
 8005cba:	4013      	ands	r3, r2
 8005cbc:	d110      	bne.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cbe:	4bc0      	ldr	r3, [pc, #768]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005cc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cc2:	4bbf      	ldr	r3, [pc, #764]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005cc4:	2180      	movs	r1, #128	; 0x80
 8005cc6:	0549      	lsls	r1, r1, #21
 8005cc8:	430a      	orrs	r2, r1
 8005cca:	63da      	str	r2, [r3, #60]	; 0x3c
 8005ccc:	4bbc      	ldr	r3, [pc, #752]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005cce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cd0:	2380      	movs	r3, #128	; 0x80
 8005cd2:	055b      	lsls	r3, r3, #21
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	60bb      	str	r3, [r7, #8]
 8005cd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cda:	183b      	adds	r3, r7, r0
 8005cdc:	2201      	movs	r2, #1
 8005cde:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ce0:	4bb8      	ldr	r3, [pc, #736]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	4bb7      	ldr	r3, [pc, #732]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005ce6:	2180      	movs	r1, #128	; 0x80
 8005ce8:	0049      	lsls	r1, r1, #1
 8005cea:	430a      	orrs	r2, r1
 8005cec:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005cee:	f7fd f9ff 	bl	80030f0 <HAL_GetTick>
 8005cf2:	0003      	movs	r3, r0
 8005cf4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cf6:	e00b      	b.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cf8:	f7fd f9fa 	bl	80030f0 <HAL_GetTick>
 8005cfc:	0002      	movs	r2, r0
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d904      	bls.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005d06:	2313      	movs	r3, #19
 8005d08:	18fb      	adds	r3, r7, r3
 8005d0a:	2203      	movs	r2, #3
 8005d0c:	701a      	strb	r2, [r3, #0]
        break;
 8005d0e:	e005      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d10:	4bac      	ldr	r3, [pc, #688]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	2380      	movs	r3, #128	; 0x80
 8005d16:	005b      	lsls	r3, r3, #1
 8005d18:	4013      	ands	r3, r2
 8005d1a:	d0ed      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005d1c:	2313      	movs	r3, #19
 8005d1e:	18fb      	adds	r3, r7, r3
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d154      	bne.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005d26:	4ba6      	ldr	r3, [pc, #664]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005d2a:	23c0      	movs	r3, #192	; 0xc0
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	4013      	ands	r3, r2
 8005d30:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d019      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d014      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005d42:	4b9f      	ldr	r3, [pc, #636]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d46:	4aa0      	ldr	r2, [pc, #640]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005d48:	4013      	ands	r3, r2
 8005d4a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d4c:	4b9c      	ldr	r3, [pc, #624]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005d50:	4b9b      	ldr	r3, [pc, #620]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d52:	2180      	movs	r1, #128	; 0x80
 8005d54:	0249      	lsls	r1, r1, #9
 8005d56:	430a      	orrs	r2, r1
 8005d58:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d5a:	4b99      	ldr	r3, [pc, #612]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d5c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005d5e:	4b98      	ldr	r3, [pc, #608]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d60:	499a      	ldr	r1, [pc, #616]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005d62:	400a      	ands	r2, r1
 8005d64:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005d66:	4b96      	ldr	r3, [pc, #600]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	4013      	ands	r3, r2
 8005d72:	d016      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d74:	f7fd f9bc 	bl	80030f0 <HAL_GetTick>
 8005d78:	0003      	movs	r3, r0
 8005d7a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d7c:	e00c      	b.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d7e:	f7fd f9b7 	bl	80030f0 <HAL_GetTick>
 8005d82:	0002      	movs	r2, r0
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	4a91      	ldr	r2, [pc, #580]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d904      	bls.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005d8e:	2313      	movs	r3, #19
 8005d90:	18fb      	adds	r3, r7, r3
 8005d92:	2203      	movs	r2, #3
 8005d94:	701a      	strb	r2, [r3, #0]
            break;
 8005d96:	e004      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d98:	4b89      	ldr	r3, [pc, #548]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d9c:	2202      	movs	r2, #2
 8005d9e:	4013      	ands	r3, r2
 8005da0:	d0ed      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005da2:	2313      	movs	r3, #19
 8005da4:	18fb      	adds	r3, r7, r3
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10a      	bne.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005dac:	4b84      	ldr	r3, [pc, #528]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005db0:	4a85      	ldr	r2, [pc, #532]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005db2:	4013      	ands	r3, r2
 8005db4:	0019      	movs	r1, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dba:	4b81      	ldr	r3, [pc, #516]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005dbc:	430a      	orrs	r2, r1
 8005dbe:	65da      	str	r2, [r3, #92]	; 0x5c
 8005dc0:	e00c      	b.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005dc2:	2312      	movs	r3, #18
 8005dc4:	18fb      	adds	r3, r7, r3
 8005dc6:	2213      	movs	r2, #19
 8005dc8:	18ba      	adds	r2, r7, r2
 8005dca:	7812      	ldrb	r2, [r2, #0]
 8005dcc:	701a      	strb	r2, [r3, #0]
 8005dce:	e005      	b.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dd0:	2312      	movs	r3, #18
 8005dd2:	18fb      	adds	r3, r7, r3
 8005dd4:	2213      	movs	r2, #19
 8005dd6:	18ba      	adds	r2, r7, r2
 8005dd8:	7812      	ldrb	r2, [r2, #0]
 8005dda:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005ddc:	2311      	movs	r3, #17
 8005dde:	18fb      	adds	r3, r7, r3
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d105      	bne.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005de6:	4b76      	ldr	r3, [pc, #472]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005de8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dea:	4b75      	ldr	r3, [pc, #468]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005dec:	4979      	ldr	r1, [pc, #484]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8005dee:	400a      	ands	r2, r1
 8005df0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2201      	movs	r2, #1
 8005df8:	4013      	ands	r3, r2
 8005dfa:	d009      	beq.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005dfc:	4b70      	ldr	r3, [pc, #448]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e00:	2203      	movs	r2, #3
 8005e02:	4393      	bics	r3, r2
 8005e04:	0019      	movs	r1, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685a      	ldr	r2, [r3, #4]
 8005e0a:	4b6d      	ldr	r3, [pc, #436]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2202      	movs	r2, #2
 8005e16:	4013      	ands	r3, r2
 8005e18:	d009      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e1a:	4b69      	ldr	r3, [pc, #420]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e1e:	220c      	movs	r2, #12
 8005e20:	4393      	bics	r3, r2
 8005e22:	0019      	movs	r1, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	689a      	ldr	r2, [r3, #8]
 8005e28:	4b65      	ldr	r3, [pc, #404]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e2a:	430a      	orrs	r2, r1
 8005e2c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2210      	movs	r2, #16
 8005e34:	4013      	ands	r3, r2
 8005e36:	d009      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e38:	4b61      	ldr	r3, [pc, #388]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e3c:	4a66      	ldr	r2, [pc, #408]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8005e3e:	4013      	ands	r3, r2
 8005e40:	0019      	movs	r1, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	68da      	ldr	r2, [r3, #12]
 8005e46:	4b5e      	ldr	r3, [pc, #376]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e48:	430a      	orrs	r2, r1
 8005e4a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	2380      	movs	r3, #128	; 0x80
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	4013      	ands	r3, r2
 8005e56:	d009      	beq.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e58:	4b59      	ldr	r3, [pc, #356]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e5c:	4a5f      	ldr	r2, [pc, #380]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005e5e:	4013      	ands	r3, r2
 8005e60:	0019      	movs	r1, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	699a      	ldr	r2, [r3, #24]
 8005e66:	4b56      	ldr	r3, [pc, #344]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e68:	430a      	orrs	r2, r1
 8005e6a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	2380      	movs	r3, #128	; 0x80
 8005e72:	00db      	lsls	r3, r3, #3
 8005e74:	4013      	ands	r3, r2
 8005e76:	d009      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e78:	4b51      	ldr	r3, [pc, #324]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e7c:	4a58      	ldr	r2, [pc, #352]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e7e:	4013      	ands	r3, r2
 8005e80:	0019      	movs	r1, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	69da      	ldr	r2, [r3, #28]
 8005e86:	4b4e      	ldr	r3, [pc, #312]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2220      	movs	r2, #32
 8005e92:	4013      	ands	r3, r2
 8005e94:	d009      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e96:	4b4a      	ldr	r3, [pc, #296]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e9a:	4a52      	ldr	r2, [pc, #328]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	0019      	movs	r1, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	691a      	ldr	r2, [r3, #16]
 8005ea4:	4b46      	ldr	r3, [pc, #280]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	2380      	movs	r3, #128	; 0x80
 8005eb0:	01db      	lsls	r3, r3, #7
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	d015      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005eb6:	4b42      	ldr	r3, [pc, #264]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	0899      	lsrs	r1, r3, #2
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a1a      	ldr	r2, [r3, #32]
 8005ec2:	4b3f      	ldr	r3, [pc, #252]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a1a      	ldr	r2, [r3, #32]
 8005ecc:	2380      	movs	r3, #128	; 0x80
 8005ece:	05db      	lsls	r3, r3, #23
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d106      	bne.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005ed4:	4b3a      	ldr	r3, [pc, #232]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ed6:	68da      	ldr	r2, [r3, #12]
 8005ed8:	4b39      	ldr	r3, [pc, #228]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005eda:	2180      	movs	r1, #128	; 0x80
 8005edc:	0249      	lsls	r1, r1, #9
 8005ede:	430a      	orrs	r2, r1
 8005ee0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	2380      	movs	r3, #128	; 0x80
 8005ee8:	031b      	lsls	r3, r3, #12
 8005eea:	4013      	ands	r3, r2
 8005eec:	d009      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005eee:	4b34      	ldr	r3, [pc, #208]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ef2:	2240      	movs	r2, #64	; 0x40
 8005ef4:	4393      	bics	r3, r2
 8005ef6:	0019      	movs	r1, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005efc:	4b30      	ldr	r3, [pc, #192]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005efe:	430a      	orrs	r2, r1
 8005f00:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	2380      	movs	r3, #128	; 0x80
 8005f08:	039b      	lsls	r3, r3, #14
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	d016      	beq.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005f0e:	4b2c      	ldr	r3, [pc, #176]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f12:	4a35      	ldr	r2, [pc, #212]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005f14:	4013      	ands	r3, r2
 8005f16:	0019      	movs	r1, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f1c:	4b28      	ldr	r3, [pc, #160]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f26:	2380      	movs	r3, #128	; 0x80
 8005f28:	03db      	lsls	r3, r3, #15
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d106      	bne.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005f2e:	4b24      	ldr	r3, [pc, #144]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f30:	68da      	ldr	r2, [r3, #12]
 8005f32:	4b23      	ldr	r3, [pc, #140]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f34:	2180      	movs	r1, #128	; 0x80
 8005f36:	0449      	lsls	r1, r1, #17
 8005f38:	430a      	orrs	r2, r1
 8005f3a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	2380      	movs	r3, #128	; 0x80
 8005f42:	03db      	lsls	r3, r3, #15
 8005f44:	4013      	ands	r3, r2
 8005f46:	d016      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005f48:	4b1d      	ldr	r3, [pc, #116]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f4c:	4a27      	ldr	r2, [pc, #156]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8005f4e:	4013      	ands	r3, r2
 8005f50:	0019      	movs	r1, r3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f56:	4b1a      	ldr	r3, [pc, #104]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f58:	430a      	orrs	r2, r1
 8005f5a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f60:	2380      	movs	r3, #128	; 0x80
 8005f62:	045b      	lsls	r3, r3, #17
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d106      	bne.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005f68:	4b15      	ldr	r3, [pc, #84]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f6a:	68da      	ldr	r2, [r3, #12]
 8005f6c:	4b14      	ldr	r3, [pc, #80]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f6e:	2180      	movs	r1, #128	; 0x80
 8005f70:	0449      	lsls	r1, r1, #17
 8005f72:	430a      	orrs	r2, r1
 8005f74:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	2380      	movs	r3, #128	; 0x80
 8005f7c:	011b      	lsls	r3, r3, #4
 8005f7e:	4013      	ands	r3, r2
 8005f80:	d016      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005f82:	4b0f      	ldr	r3, [pc, #60]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f86:	4a1a      	ldr	r2, [pc, #104]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8005f88:	4013      	ands	r3, r2
 8005f8a:	0019      	movs	r1, r3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	695a      	ldr	r2, [r3, #20]
 8005f90:	4b0b      	ldr	r3, [pc, #44]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f92:	430a      	orrs	r2, r1
 8005f94:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	695a      	ldr	r2, [r3, #20]
 8005f9a:	2380      	movs	r3, #128	; 0x80
 8005f9c:	01db      	lsls	r3, r3, #7
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d106      	bne.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005fa2:	4b07      	ldr	r3, [pc, #28]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005fa4:	68da      	ldr	r2, [r3, #12]
 8005fa6:	4b06      	ldr	r3, [pc, #24]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005fa8:	2180      	movs	r1, #128	; 0x80
 8005faa:	0249      	lsls	r1, r1, #9
 8005fac:	430a      	orrs	r2, r1
 8005fae:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005fb0:	2312      	movs	r3, #18
 8005fb2:	18fb      	adds	r3, r7, r3
 8005fb4:	781b      	ldrb	r3, [r3, #0]
}
 8005fb6:	0018      	movs	r0, r3
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	b006      	add	sp, #24
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	46c0      	nop			; (mov r8, r8)
 8005fc0:	40021000 	.word	0x40021000
 8005fc4:	40007000 	.word	0x40007000
 8005fc8:	fffffcff 	.word	0xfffffcff
 8005fcc:	fffeffff 	.word	0xfffeffff
 8005fd0:	00001388 	.word	0x00001388
 8005fd4:	efffffff 	.word	0xefffffff
 8005fd8:	fffff3ff 	.word	0xfffff3ff
 8005fdc:	fff3ffff 	.word	0xfff3ffff
 8005fe0:	ffcfffff 	.word	0xffcfffff
 8005fe4:	ffffcfff 	.word	0xffffcfff
 8005fe8:	ffbfffff 	.word	0xffbfffff
 8005fec:	feffffff 	.word	0xfeffffff
 8005ff0:	ffff3fff 	.word	0xffff3fff

08005ff4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b086      	sub	sp, #24
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	2380      	movs	r3, #128	; 0x80
 8006004:	029b      	lsls	r3, r3, #10
 8006006:	429a      	cmp	r2, r3
 8006008:	d136      	bne.n	8006078 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800600a:	4bcd      	ldr	r3, [pc, #820]	; (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800600c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800600e:	23c0      	movs	r3, #192	; 0xc0
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4013      	ands	r3, r2
 8006014:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006016:	4bca      	ldr	r3, [pc, #808]	; (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800601a:	2202      	movs	r2, #2
 800601c:	4013      	ands	r3, r2
 800601e:	2b02      	cmp	r3, #2
 8006020:	d108      	bne.n	8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	2380      	movs	r3, #128	; 0x80
 8006026:	005b      	lsls	r3, r3, #1
 8006028:	429a      	cmp	r2, r3
 800602a:	d103      	bne.n	8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 800602c:	2380      	movs	r3, #128	; 0x80
 800602e:	021b      	lsls	r3, r3, #8
 8006030:	617b      	str	r3, [r7, #20]
 8006032:	e31c      	b.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006034:	4bc2      	ldr	r3, [pc, #776]	; (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006038:	2202      	movs	r2, #2
 800603a:	4013      	ands	r3, r2
 800603c:	2b02      	cmp	r3, #2
 800603e:	d108      	bne.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	2380      	movs	r3, #128	; 0x80
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	429a      	cmp	r2, r3
 8006048:	d103      	bne.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 800604a:	23fa      	movs	r3, #250	; 0xfa
 800604c:	01db      	lsls	r3, r3, #7
 800604e:	617b      	str	r3, [r7, #20]
 8006050:	e30d      	b.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8006052:	4bbb      	ldr	r3, [pc, #748]	; (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	2380      	movs	r3, #128	; 0x80
 8006058:	029b      	lsls	r3, r3, #10
 800605a:	401a      	ands	r2, r3
 800605c:	2380      	movs	r3, #128	; 0x80
 800605e:	029b      	lsls	r3, r3, #10
 8006060:	429a      	cmp	r2, r3
 8006062:	d000      	beq.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 8006064:	e303      	b.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	23c0      	movs	r3, #192	; 0xc0
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	429a      	cmp	r2, r3
 800606e:	d000      	beq.n	8006072 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 8006070:	e2fd      	b.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    {
      frequency = HSE_VALUE / 32U;
 8006072:	4bb4      	ldr	r3, [pc, #720]	; (8006344 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8006074:	617b      	str	r3, [r7, #20]
 8006076:	e2fa      	b.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 8006078:	4bb1      	ldr	r3, [pc, #708]	; (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	2203      	movs	r2, #3
 800607e:	4013      	ands	r3, r2
 8006080:	2b02      	cmp	r3, #2
 8006082:	d102      	bne.n	800608a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 8006084:	4bb0      	ldr	r3, [pc, #704]	; (8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006086:	613b      	str	r3, [r7, #16]
 8006088:	e00a      	b.n	80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 800608a:	4bad      	ldr	r3, [pc, #692]	; (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	2203      	movs	r2, #3
 8006090:	4013      	ands	r3, r2
 8006092:	2b03      	cmp	r3, #3
 8006094:	d102      	bne.n	800609c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 8006096:	4bad      	ldr	r3, [pc, #692]	; (800634c <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8006098:	613b      	str	r3, [r7, #16]
 800609a:	e001      	b.n	80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 800609c:	2300      	movs	r3, #0
 800609e:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80060a0:	4ba7      	ldr	r3, [pc, #668]	; (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	091b      	lsrs	r3, r3, #4
 80060a6:	2207      	movs	r2, #7
 80060a8:	4013      	ands	r3, r2
 80060aa:	3301      	adds	r3, #1
 80060ac:	0019      	movs	r1, r3
 80060ae:	6938      	ldr	r0, [r7, #16]
 80060b0:	f7fa f828 	bl	8000104 <__udivsi3>
 80060b4:	0003      	movs	r3, r0
 80060b6:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	2380      	movs	r3, #128	; 0x80
 80060bc:	03db      	lsls	r3, r3, #15
 80060be:	429a      	cmp	r2, r3
 80060c0:	d100      	bne.n	80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 80060c2:	e28e      	b.n	80065e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	2380      	movs	r3, #128	; 0x80
 80060c8:	03db      	lsls	r3, r3, #15
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d900      	bls.n	80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80060ce:	e2b7      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	2380      	movs	r3, #128	; 0x80
 80060d4:	039b      	lsls	r3, r3, #14
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d100      	bne.n	80060dc <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80060da:	e253      	b.n	8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	2380      	movs	r3, #128	; 0x80
 80060e0:	039b      	lsls	r3, r3, #14
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d900      	bls.n	80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80060e6:	e2ab      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	2380      	movs	r3, #128	; 0x80
 80060ec:	031b      	lsls	r3, r3, #12
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d100      	bne.n	80060f4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80060f2:	e0b2      	b.n	800625a <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	2380      	movs	r3, #128	; 0x80
 80060f8:	031b      	lsls	r3, r3, #12
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d900      	bls.n	8006100 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 80060fe:	e29f      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	2380      	movs	r3, #128	; 0x80
 8006104:	01db      	lsls	r3, r3, #7
 8006106:	429a      	cmp	r2, r3
 8006108:	d100      	bne.n	800610c <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 800610a:	e103      	b.n	8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	2380      	movs	r3, #128	; 0x80
 8006110:	01db      	lsls	r3, r3, #7
 8006112:	429a      	cmp	r2, r3
 8006114:	d900      	bls.n	8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006116:	e293      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	2380      	movs	r3, #128	; 0x80
 800611c:	011b      	lsls	r3, r3, #4
 800611e:	429a      	cmp	r2, r3
 8006120:	d100      	bne.n	8006124 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8006122:	e165      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	2380      	movs	r3, #128	; 0x80
 8006128:	011b      	lsls	r3, r3, #4
 800612a:	429a      	cmp	r2, r3
 800612c:	d900      	bls.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 800612e:	e287      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	2380      	movs	r3, #128	; 0x80
 8006134:	00db      	lsls	r3, r3, #3
 8006136:	429a      	cmp	r2, r3
 8006138:	d100      	bne.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 800613a:	e1e3      	b.n	8006504 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	2380      	movs	r3, #128	; 0x80
 8006140:	00db      	lsls	r3, r3, #3
 8006142:	429a      	cmp	r2, r3
 8006144:	d900      	bls.n	8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8006146:	e27b      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	2380      	movs	r3, #128	; 0x80
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	429a      	cmp	r2, r3
 8006150:	d100      	bne.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8006152:	e197      	b.n	8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	2380      	movs	r3, #128	; 0x80
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	429a      	cmp	r2, r3
 800615c:	d900      	bls.n	8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 800615e:	e26f      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b20      	cmp	r3, #32
 8006164:	d100      	bne.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 8006166:	e118      	b.n	800639a <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2b20      	cmp	r3, #32
 800616c:	d900      	bls.n	8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
 800616e:	e267      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b10      	cmp	r3, #16
 8006174:	d100      	bne.n	8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8006176:	e093      	b.n	80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2b10      	cmp	r3, #16
 800617c:	d900      	bls.n	8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 800617e:	e25f      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d003      	beq.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2b02      	cmp	r3, #2
 800618a:	d033      	beq.n	80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 800618c:	e258      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800618e:	4b6c      	ldr	r3, [pc, #432]	; (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006192:	2203      	movs	r2, #3
 8006194:	4013      	ands	r3, r2
 8006196:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d104      	bne.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
          frequency = HAL_RCC_GetPCLK1Freq();
 800619e:	f7ff fd5b 	bl	8005c58 <HAL_RCC_GetPCLK1Freq>
 80061a2:	0003      	movs	r3, r0
 80061a4:	617b      	str	r3, [r7, #20]
        break;
 80061a6:	e24d      	b.n	8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d104      	bne.n	80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
          frequency = HAL_RCC_GetSysClockFreq();
 80061ae:	f7ff fcc7 	bl	8005b40 <HAL_RCC_GetSysClockFreq>
 80061b2:	0003      	movs	r3, r0
 80061b4:	617b      	str	r3, [r7, #20]
        break;
 80061b6:	e245      	b.n	8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80061b8:	4b61      	ldr	r3, [pc, #388]	; (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	2380      	movs	r3, #128	; 0x80
 80061be:	00db      	lsls	r3, r3, #3
 80061c0:	401a      	ands	r2, r3
 80061c2:	2380      	movs	r3, #128	; 0x80
 80061c4:	00db      	lsls	r3, r3, #3
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d105      	bne.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2b02      	cmp	r3, #2
 80061ce:	d102      	bne.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
          frequency = HSI_VALUE;
 80061d0:	4b5d      	ldr	r3, [pc, #372]	; (8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80061d2:	617b      	str	r3, [r7, #20]
        break;
 80061d4:	e236      	b.n	8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80061d6:	4b5a      	ldr	r3, [pc, #360]	; (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80061d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061da:	2202      	movs	r2, #2
 80061dc:	4013      	ands	r3, r2
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d000      	beq.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
 80061e2:	e22f      	b.n	8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2b03      	cmp	r3, #3
 80061e8:	d000      	beq.n	80061ec <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>
 80061ea:	e22b      	b.n	8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          frequency = LSE_VALUE;
 80061ec:	2380      	movs	r3, #128	; 0x80
 80061ee:	021b      	lsls	r3, r3, #8
 80061f0:	617b      	str	r3, [r7, #20]
        break;
 80061f2:	e227      	b.n	8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80061f4:	4b52      	ldr	r3, [pc, #328]	; (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80061f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061f8:	220c      	movs	r2, #12
 80061fa:	4013      	ands	r3, r2
 80061fc:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d104      	bne.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006204:	f7ff fd28 	bl	8005c58 <HAL_RCC_GetPCLK1Freq>
 8006208:	0003      	movs	r3, r0
 800620a:	617b      	str	r3, [r7, #20]
        break;
 800620c:	e21c      	b.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2b04      	cmp	r3, #4
 8006212:	d104      	bne.n	800621e <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          frequency = HAL_RCC_GetSysClockFreq();
 8006214:	f7ff fc94 	bl	8005b40 <HAL_RCC_GetSysClockFreq>
 8006218:	0003      	movs	r3, r0
 800621a:	617b      	str	r3, [r7, #20]
        break;
 800621c:	e214      	b.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800621e:	4b48      	ldr	r3, [pc, #288]	; (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	2380      	movs	r3, #128	; 0x80
 8006224:	00db      	lsls	r3, r3, #3
 8006226:	401a      	ands	r2, r3
 8006228:	2380      	movs	r3, #128	; 0x80
 800622a:	00db      	lsls	r3, r3, #3
 800622c:	429a      	cmp	r2, r3
 800622e:	d105      	bne.n	800623c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2b08      	cmp	r3, #8
 8006234:	d102      	bne.n	800623c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
          frequency = HSI_VALUE;
 8006236:	4b44      	ldr	r3, [pc, #272]	; (8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006238:	617b      	str	r3, [r7, #20]
        break;
 800623a:	e205      	b.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800623c:	4b40      	ldr	r3, [pc, #256]	; (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800623e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006240:	2202      	movs	r2, #2
 8006242:	4013      	ands	r3, r2
 8006244:	2b02      	cmp	r3, #2
 8006246:	d000      	beq.n	800624a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8006248:	e1fe      	b.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2b0c      	cmp	r3, #12
 800624e:	d000      	beq.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8006250:	e1fa      	b.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
          frequency = LSE_VALUE;
 8006252:	2380      	movs	r3, #128	; 0x80
 8006254:	021b      	lsls	r3, r3, #8
 8006256:	617b      	str	r3, [r7, #20]
        break;
 8006258:	e1f6      	b.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800625a:	4b39      	ldr	r3, [pc, #228]	; (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800625c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800625e:	2240      	movs	r2, #64	; 0x40
 8006260:	4013      	ands	r3, r2
 8006262:	60fb      	str	r3, [r7, #12]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_CECCLKSOURCE_HSI_DIV488))
 8006264:	4b36      	ldr	r3, [pc, #216]	; (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	2380      	movs	r3, #128	; 0x80
 800626a:	00db      	lsls	r3, r3, #3
 800626c:	401a      	ands	r2, r3
 800626e:	2380      	movs	r3, #128	; 0x80
 8006270:	00db      	lsls	r3, r3, #3
 8006272:	429a      	cmp	r2, r3
 8006274:	d105      	bne.n	8006282 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d102      	bne.n	8006282 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
          frequency = (HSI_VALUE / 488U);
 800627c:	4b34      	ldr	r3, [pc, #208]	; (8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 800627e:	617b      	str	r3, [r7, #20]
        break;
 8006280:	e1e4      	b.n	800664c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8006282:	4b2f      	ldr	r3, [pc, #188]	; (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006286:	2202      	movs	r2, #2
 8006288:	4013      	ands	r3, r2
 800628a:	2b02      	cmp	r3, #2
 800628c:	d000      	beq.n	8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 800628e:	e1dd      	b.n	800664c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2b40      	cmp	r3, #64	; 0x40
 8006294:	d000      	beq.n	8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 8006296:	e1d9      	b.n	800664c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
          frequency = LSE_VALUE;
 8006298:	2380      	movs	r3, #128	; 0x80
 800629a:	021b      	lsls	r3, r3, #8
 800629c:	617b      	str	r3, [r7, #20]
        break;
 800629e:	e1d5      	b.n	800664c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80062a0:	4b27      	ldr	r3, [pc, #156]	; (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80062a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062a4:	23c0      	movs	r3, #192	; 0xc0
 80062a6:	011b      	lsls	r3, r3, #4
 80062a8:	4013      	ands	r3, r2
 80062aa:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d104      	bne.n	80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80062b2:	f7ff fcd1 	bl	8005c58 <HAL_RCC_GetPCLK1Freq>
 80062b6:	0003      	movs	r3, r0
 80062b8:	617b      	str	r3, [r7, #20]
        break;
 80062ba:	e1c9      	b.n	8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	2380      	movs	r3, #128	; 0x80
 80062c0:	00db      	lsls	r3, r3, #3
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d104      	bne.n	80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>
          frequency = HAL_RCC_GetSysClockFreq();
 80062c6:	f7ff fc3b 	bl	8005b40 <HAL_RCC_GetSysClockFreq>
 80062ca:	0003      	movs	r3, r0
 80062cc:	617b      	str	r3, [r7, #20]
        break;
 80062ce:	e1bf      	b.n	8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80062d0:	4b1b      	ldr	r3, [pc, #108]	; (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	2380      	movs	r3, #128	; 0x80
 80062d6:	00db      	lsls	r3, r3, #3
 80062d8:	401a      	ands	r2, r3
 80062da:	2380      	movs	r3, #128	; 0x80
 80062dc:	00db      	lsls	r3, r3, #3
 80062de:	429a      	cmp	r2, r3
 80062e0:	d107      	bne.n	80062f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	2380      	movs	r3, #128	; 0x80
 80062e6:	011b      	lsls	r3, r3, #4
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d102      	bne.n	80062f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
          frequency = HSI_VALUE;
 80062ec:	4b16      	ldr	r3, [pc, #88]	; (8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80062ee:	617b      	str	r3, [r7, #20]
        break;
 80062f0:	e1ae      	b.n	8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80062f2:	4b13      	ldr	r3, [pc, #76]	; (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80062f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062f6:	2202      	movs	r2, #2
 80062f8:	4013      	ands	r3, r2
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d000      	beq.n	8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 80062fe:	e1a7      	b.n	8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	23c0      	movs	r3, #192	; 0xc0
 8006304:	011b      	lsls	r3, r3, #4
 8006306:	429a      	cmp	r2, r3
 8006308:	d000      	beq.n	800630c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 800630a:	e1a1      	b.n	8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
          frequency = LSE_VALUE;
 800630c:	2380      	movs	r3, #128	; 0x80
 800630e:	021b      	lsls	r3, r3, #8
 8006310:	617b      	str	r3, [r7, #20]
        break;
 8006312:	e19d      	b.n	8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006314:	4b0a      	ldr	r3, [pc, #40]	; (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006318:	0f9b      	lsrs	r3, r3, #30
 800631a:	079b      	lsls	r3, r3, #30
 800631c:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d104      	bne.n	800632e <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
          frequency = HAL_RCC_GetSysClockFreq();
 8006324:	f7ff fc0c 	bl	8005b40 <HAL_RCC_GetSysClockFreq>
 8006328:	0003      	movs	r3, r0
 800632a:	617b      	str	r3, [r7, #20]
        break;
 800632c:	e192      	b.n	8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	2380      	movs	r3, #128	; 0x80
 8006332:	061b      	lsls	r3, r3, #24
 8006334:	429a      	cmp	r2, r3
 8006336:	d10d      	bne.n	8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
          frequency = HSI_VALUE;
 8006338:	4b03      	ldr	r3, [pc, #12]	; (8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800633a:	617b      	str	r3, [r7, #20]
        break;
 800633c:	e18a      	b.n	8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800633e:	46c0      	nop			; (mov r8, r8)
 8006340:	40021000 	.word	0x40021000
 8006344:	0003d090 	.word	0x0003d090
 8006348:	00f42400 	.word	0x00f42400
 800634c:	007a1200 	.word	0x007a1200
 8006350:	00008012 	.word	0x00008012
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	2380      	movs	r3, #128	; 0x80
 8006358:	05db      	lsls	r3, r3, #23
 800635a:	429a      	cmp	r2, r3
 800635c:	d000      	beq.n	8006360 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
 800635e:	e179      	b.n	8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8006360:	4bc5      	ldr	r3, [pc, #788]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006362:	68da      	ldr	r2, [r3, #12]
 8006364:	2380      	movs	r3, #128	; 0x80
 8006366:	025b      	lsls	r3, r3, #9
 8006368:	4013      	ands	r3, r2
 800636a:	d100      	bne.n	800636e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800636c:	e172      	b.n	8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800636e:	4bc2      	ldr	r3, [pc, #776]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	0a1b      	lsrs	r3, r3, #8
 8006374:	227f      	movs	r2, #127	; 0x7f
 8006376:	4013      	ands	r3, r2
 8006378:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	435a      	muls	r2, r3
 8006380:	4bbd      	ldr	r3, [pc, #756]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	0c5b      	lsrs	r3, r3, #17
 8006386:	211f      	movs	r1, #31
 8006388:	400b      	ands	r3, r1
 800638a:	3301      	adds	r3, #1
 800638c:	0019      	movs	r1, r3
 800638e:	0010      	movs	r0, r2
 8006390:	f7f9 feb8 	bl	8000104 <__udivsi3>
 8006394:	0003      	movs	r3, r0
 8006396:	617b      	str	r3, [r7, #20]
        break;
 8006398:	e15c      	b.n	8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800639a:	4bb7      	ldr	r3, [pc, #732]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800639c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800639e:	23c0      	movs	r3, #192	; 0xc0
 80063a0:	019b      	lsls	r3, r3, #6
 80063a2:	4013      	ands	r3, r2
 80063a4:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d104      	bne.n	80063b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
          frequency = HAL_RCC_GetPCLK1Freq();
 80063ac:	f7ff fc54 	bl	8005c58 <HAL_RCC_GetPCLK1Freq>
 80063b0:	0003      	movs	r3, r0
 80063b2:	617b      	str	r3, [r7, #20]
        break;
 80063b4:	e150      	b.n	8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	2380      	movs	r3, #128	; 0x80
 80063ba:	015b      	lsls	r3, r3, #5
 80063bc:	429a      	cmp	r2, r3
 80063be:	d104      	bne.n	80063ca <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          frequency = HAL_RCC_GetSysClockFreq();
 80063c0:	f7ff fbbe 	bl	8005b40 <HAL_RCC_GetSysClockFreq>
 80063c4:	0003      	movs	r3, r0
 80063c6:	617b      	str	r3, [r7, #20]
        break;
 80063c8:	e146      	b.n	8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80063ca:	4bab      	ldr	r3, [pc, #684]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	2380      	movs	r3, #128	; 0x80
 80063d0:	00db      	lsls	r3, r3, #3
 80063d2:	401a      	ands	r2, r3
 80063d4:	2380      	movs	r3, #128	; 0x80
 80063d6:	00db      	lsls	r3, r3, #3
 80063d8:	429a      	cmp	r2, r3
 80063da:	d000      	beq.n	80063de <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 80063dc:	e13c      	b.n	8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	2380      	movs	r3, #128	; 0x80
 80063e2:	019b      	lsls	r3, r3, #6
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d000      	beq.n	80063ea <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 80063e8:	e136      	b.n	8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HSI_VALUE;
 80063ea:	4ba4      	ldr	r3, [pc, #656]	; (800667c <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 80063ec:	617b      	str	r3, [r7, #20]
        break;
 80063ee:	e133      	b.n	8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 80063f0:	4ba1      	ldr	r3, [pc, #644]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80063f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063f4:	23c0      	movs	r3, #192	; 0xc0
 80063f6:	021b      	lsls	r3, r3, #8
 80063f8:	4013      	ands	r3, r2
 80063fa:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	2380      	movs	r3, #128	; 0x80
 8006400:	01db      	lsls	r3, r3, #7
 8006402:	429a      	cmp	r2, r3
 8006404:	d11c      	bne.n	8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8006406:	4b9c      	ldr	r3, [pc, #624]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006408:	68da      	ldr	r2, [r3, #12]
 800640a:	2380      	movs	r3, #128	; 0x80
 800640c:	025b      	lsls	r3, r3, #9
 800640e:	4013      	ands	r3, r2
 8006410:	d100      	bne.n	8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 8006412:	e123      	b.n	800665c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006414:	4b98      	ldr	r3, [pc, #608]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	0a1b      	lsrs	r3, r3, #8
 800641a:	227f      	movs	r2, #127	; 0x7f
 800641c:	4013      	ands	r3, r2
 800641e:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	68ba      	ldr	r2, [r7, #8]
 8006424:	435a      	muls	r2, r3
 8006426:	4b94      	ldr	r3, [pc, #592]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	0c5b      	lsrs	r3, r3, #17
 800642c:	211f      	movs	r1, #31
 800642e:	400b      	ands	r3, r1
 8006430:	3301      	adds	r3, #1
 8006432:	0019      	movs	r1, r3
 8006434:	0010      	movs	r0, r2
 8006436:	f7f9 fe65 	bl	8000104 <__udivsi3>
 800643a:	0003      	movs	r3, r0
 800643c:	617b      	str	r3, [r7, #20]
        break;
 800643e:	e10d      	b.n	800665c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d104      	bne.n	8006450 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
          frequency = HAL_RCC_GetSysClockFreq();
 8006446:	f7ff fb7b 	bl	8005b40 <HAL_RCC_GetSysClockFreq>
 800644a:	0003      	movs	r3, r0
 800644c:	617b      	str	r3, [r7, #20]
        break;
 800644e:	e105      	b.n	800665c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 8006450:	4b89      	ldr	r3, [pc, #548]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	2380      	movs	r3, #128	; 0x80
 8006456:	00db      	lsls	r3, r3, #3
 8006458:	401a      	ands	r2, r3
 800645a:	2380      	movs	r3, #128	; 0x80
 800645c:	00db      	lsls	r3, r3, #3
 800645e:	429a      	cmp	r2, r3
 8006460:	d107      	bne.n	8006472 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	2380      	movs	r3, #128	; 0x80
 8006466:	021b      	lsls	r3, r3, #8
 8006468:	429a      	cmp	r2, r3
 800646a:	d102      	bne.n	8006472 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          frequency = HSI_VALUE;
 800646c:	4b83      	ldr	r3, [pc, #524]	; (800667c <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 800646e:	617b      	str	r3, [r7, #20]
        break;
 8006470:	e0f4      	b.n	800665c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	23c0      	movs	r3, #192	; 0xc0
 8006476:	021b      	lsls	r3, r3, #8
 8006478:	429a      	cmp	r2, r3
 800647a:	d000      	beq.n	800647e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800647c:	e0ee      	b.n	800665c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 800647e:	4b80      	ldr	r3, [pc, #512]	; (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8006480:	617b      	str	r3, [r7, #20]
        break;
 8006482:	e0eb      	b.n	800665c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006484:	4b7c      	ldr	r3, [pc, #496]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006486:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006488:	23c0      	movs	r3, #192	; 0xc0
 800648a:	031b      	lsls	r3, r3, #12
 800648c:	4013      	ands	r3, r2
 800648e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d104      	bne.n	80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006496:	f7ff fbdf 	bl	8005c58 <HAL_RCC_GetPCLK1Freq>
 800649a:	0003      	movs	r3, r0
 800649c:	617b      	str	r3, [r7, #20]
        break;
 800649e:	e0df      	b.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80064a0:	4b75      	ldr	r3, [pc, #468]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80064a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064a4:	2202      	movs	r2, #2
 80064a6:	4013      	ands	r3, r2
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d108      	bne.n	80064be <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	2380      	movs	r3, #128	; 0x80
 80064b0:	02db      	lsls	r3, r3, #11
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d103      	bne.n	80064be <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          frequency = LSI_VALUE;
 80064b6:	23fa      	movs	r3, #250	; 0xfa
 80064b8:	01db      	lsls	r3, r3, #7
 80064ba:	617b      	str	r3, [r7, #20]
 80064bc:	e021      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80064be:	4b6e      	ldr	r3, [pc, #440]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	2380      	movs	r3, #128	; 0x80
 80064c4:	00db      	lsls	r3, r3, #3
 80064c6:	401a      	ands	r2, r3
 80064c8:	2380      	movs	r3, #128	; 0x80
 80064ca:	00db      	lsls	r3, r3, #3
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d107      	bne.n	80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	2380      	movs	r3, #128	; 0x80
 80064d4:	031b      	lsls	r3, r3, #12
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d102      	bne.n	80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          frequency = HSI_VALUE;
 80064da:	4b68      	ldr	r3, [pc, #416]	; (800667c <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 80064dc:	617b      	str	r3, [r7, #20]
 80064de:	e010      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80064e0:	4b65      	ldr	r3, [pc, #404]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80064e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064e4:	2202      	movs	r2, #2
 80064e6:	4013      	ands	r3, r2
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	d000      	beq.n	80064ee <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80064ec:	e0b8      	b.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	23c0      	movs	r3, #192	; 0xc0
 80064f2:	031b      	lsls	r3, r3, #12
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d000      	beq.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80064f8:	e0b2      	b.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          frequency = LSE_VALUE;
 80064fa:	2380      	movs	r3, #128	; 0x80
 80064fc:	021b      	lsls	r3, r3, #8
 80064fe:	617b      	str	r3, [r7, #20]
        break;
 8006500:	e0ae      	b.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8006502:	e0ad      	b.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006504:	4b5c      	ldr	r3, [pc, #368]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006506:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006508:	23c0      	movs	r3, #192	; 0xc0
 800650a:	039b      	lsls	r3, r3, #14
 800650c:	4013      	ands	r3, r2
 800650e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d104      	bne.n	8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006516:	f7ff fb9f 	bl	8005c58 <HAL_RCC_GetPCLK1Freq>
 800651a:	0003      	movs	r3, r0
 800651c:	617b      	str	r3, [r7, #20]
        break;
 800651e:	e0a1      	b.n	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8006520:	4b55      	ldr	r3, [pc, #340]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006524:	2202      	movs	r2, #2
 8006526:	4013      	ands	r3, r2
 8006528:	2b02      	cmp	r3, #2
 800652a:	d108      	bne.n	800653e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	2380      	movs	r3, #128	; 0x80
 8006530:	035b      	lsls	r3, r3, #13
 8006532:	429a      	cmp	r2, r3
 8006534:	d103      	bne.n	800653e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = LSI_VALUE;
 8006536:	23fa      	movs	r3, #250	; 0xfa
 8006538:	01db      	lsls	r3, r3, #7
 800653a:	617b      	str	r3, [r7, #20]
 800653c:	e021      	b.n	8006582 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800653e:	4b4e      	ldr	r3, [pc, #312]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	2380      	movs	r3, #128	; 0x80
 8006544:	00db      	lsls	r3, r3, #3
 8006546:	401a      	ands	r2, r3
 8006548:	2380      	movs	r3, #128	; 0x80
 800654a:	00db      	lsls	r3, r3, #3
 800654c:	429a      	cmp	r2, r3
 800654e:	d107      	bne.n	8006560 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	2380      	movs	r3, #128	; 0x80
 8006554:	039b      	lsls	r3, r3, #14
 8006556:	429a      	cmp	r2, r3
 8006558:	d102      	bne.n	8006560 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
          frequency = HSI_VALUE;
 800655a:	4b48      	ldr	r3, [pc, #288]	; (800667c <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 800655c:	617b      	str	r3, [r7, #20]
 800655e:	e010      	b.n	8006582 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8006560:	4b45      	ldr	r3, [pc, #276]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006564:	2202      	movs	r2, #2
 8006566:	4013      	ands	r3, r2
 8006568:	2b02      	cmp	r3, #2
 800656a:	d000      	beq.n	800656e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 800656c:	e07a      	b.n	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	23c0      	movs	r3, #192	; 0xc0
 8006572:	039b      	lsls	r3, r3, #14
 8006574:	429a      	cmp	r2, r3
 8006576:	d000      	beq.n	800657a <HAL_RCCEx_GetPeriphCLKFreq+0x586>
 8006578:	e074      	b.n	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          frequency = LSE_VALUE;
 800657a:	2380      	movs	r3, #128	; 0x80
 800657c:	021b      	lsls	r3, r3, #8
 800657e:	617b      	str	r3, [r7, #20]
        break;
 8006580:	e070      	b.n	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 8006582:	e06f      	b.n	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 8006584:	4b3c      	ldr	r3, [pc, #240]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006586:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006588:	2380      	movs	r3, #128	; 0x80
 800658a:	03db      	lsls	r3, r3, #15
 800658c:	4013      	ands	r3, r2
 800658e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	2380      	movs	r3, #128	; 0x80
 8006594:	03db      	lsls	r3, r3, #15
 8006596:	429a      	cmp	r2, r3
 8006598:	d11b      	bne.n	80065d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 800659a:	4b37      	ldr	r3, [pc, #220]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800659c:	68da      	ldr	r2, [r3, #12]
 800659e:	2380      	movs	r3, #128	; 0x80
 80065a0:	045b      	lsls	r3, r3, #17
 80065a2:	4013      	ands	r3, r2
 80065a4:	d060      	beq.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80065a6:	4b34      	ldr	r3, [pc, #208]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	0a1b      	lsrs	r3, r3, #8
 80065ac:	227f      	movs	r2, #127	; 0x7f
 80065ae:	4013      	ands	r3, r2
 80065b0:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	68ba      	ldr	r2, [r7, #8]
 80065b6:	435a      	muls	r2, r3
 80065b8:	4b2f      	ldr	r3, [pc, #188]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	0e5b      	lsrs	r3, r3, #25
 80065be:	2107      	movs	r1, #7
 80065c0:	400b      	ands	r3, r1
 80065c2:	3301      	adds	r3, #1
 80065c4:	0019      	movs	r1, r3
 80065c6:	0010      	movs	r0, r2
 80065c8:	f7f9 fd9c 	bl	8000104 <__udivsi3>
 80065cc:	0003      	movs	r3, r0
 80065ce:	617b      	str	r3, [r7, #20]
        break;
 80065d0:	e04a      	b.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d147      	bne.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          frequency = HAL_RCC_GetPCLK1Freq();
 80065d8:	f7ff fb3e 	bl	8005c58 <HAL_RCC_GetPCLK1Freq>
 80065dc:	0003      	movs	r3, r0
 80065de:	617b      	str	r3, [r7, #20]
        break;
 80065e0:	e042      	b.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM15SEL);
 80065e2:	4b25      	ldr	r3, [pc, #148]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80065e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065e6:	2380      	movs	r3, #128	; 0x80
 80065e8:	045b      	lsls	r3, r3, #17
 80065ea:	4013      	ands	r3, r2
 80065ec:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM15CLKSOURCE_PLL) /* PLL ? */
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	2380      	movs	r3, #128	; 0x80
 80065f2:	045b      	lsls	r3, r3, #17
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d11b      	bne.n	8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 80065f8:	4b1f      	ldr	r3, [pc, #124]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80065fa:	68da      	ldr	r2, [r3, #12]
 80065fc:	2380      	movs	r3, #128	; 0x80
 80065fe:	045b      	lsls	r3, r3, #17
 8006600:	4013      	ands	r3, r2
 8006602:	d033      	beq.n	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x678>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006604:	4b1c      	ldr	r3, [pc, #112]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	0a1b      	lsrs	r3, r3, #8
 800660a:	227f      	movs	r2, #127	; 0x7f
 800660c:	4013      	ands	r3, r2
 800660e:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	68ba      	ldr	r2, [r7, #8]
 8006614:	435a      	muls	r2, r3
 8006616:	4b18      	ldr	r3, [pc, #96]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	0e5b      	lsrs	r3, r3, #25
 800661c:	2107      	movs	r1, #7
 800661e:	400b      	ands	r3, r1
 8006620:	3301      	adds	r3, #1
 8006622:	0019      	movs	r1, r3
 8006624:	0010      	movs	r0, r2
 8006626:	f7f9 fd6d 	bl	8000104 <__udivsi3>
 800662a:	0003      	movs	r3, r0
 800662c:	617b      	str	r3, [r7, #20]
        break;
 800662e:	e01d      	b.n	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        else if (srcclk == RCC_TIM15CLKSOURCE_PCLK1) /* PCLK1 ? */
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d11a      	bne.n	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x678>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006636:	f7ff fb0f 	bl	8005c58 <HAL_RCC_GetPCLK1Freq>
 800663a:	0003      	movs	r3, r0
 800663c:	617b      	str	r3, [r7, #20]
        break;
 800663e:	e015      	b.n	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        break;
 8006640:	46c0      	nop			; (mov r8, r8)
 8006642:	e014      	b.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006644:	46c0      	nop			; (mov r8, r8)
 8006646:	e012      	b.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006648:	46c0      	nop			; (mov r8, r8)
 800664a:	e010      	b.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800664c:	46c0      	nop			; (mov r8, r8)
 800664e:	e00e      	b.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006650:	46c0      	nop			; (mov r8, r8)
 8006652:	e00c      	b.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006654:	46c0      	nop			; (mov r8, r8)
 8006656:	e00a      	b.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006658:	46c0      	nop			; (mov r8, r8)
 800665a:	e008      	b.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800665c:	46c0      	nop			; (mov r8, r8)
 800665e:	e006      	b.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006660:	46c0      	nop			; (mov r8, r8)
 8006662:	e004      	b.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006664:	46c0      	nop			; (mov r8, r8)
 8006666:	e002      	b.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006668:	46c0      	nop			; (mov r8, r8)
 800666a:	e000      	b.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800666c:	46c0      	nop			; (mov r8, r8)
    }
  }

  return (frequency);
 800666e:	697b      	ldr	r3, [r7, #20]
}
 8006670:	0018      	movs	r0, r3
 8006672:	46bd      	mov	sp, r7
 8006674:	b006      	add	sp, #24
 8006676:	bd80      	pop	{r7, pc}
 8006678:	40021000 	.word	0x40021000
 800667c:	00f42400 	.word	0x00f42400
 8006680:	0000bb80 	.word	0x0000bb80

08006684 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d101      	bne.n	8006696 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e0a8      	b.n	80067e8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669a:	2b00      	cmp	r3, #0
 800669c:	d109      	bne.n	80066b2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	685a      	ldr	r2, [r3, #4]
 80066a2:	2382      	movs	r3, #130	; 0x82
 80066a4:	005b      	lsls	r3, r3, #1
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d009      	beq.n	80066be <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	61da      	str	r2, [r3, #28]
 80066b0:	e005      	b.n	80066be <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	225d      	movs	r2, #93	; 0x5d
 80066c8:	5c9b      	ldrb	r3, [r3, r2]
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d107      	bne.n	80066e0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	225c      	movs	r2, #92	; 0x5c
 80066d4:	2100      	movs	r1, #0
 80066d6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	0018      	movs	r0, r3
 80066dc:	f7fc f96a 	bl	80029b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	225d      	movs	r2, #93	; 0x5d
 80066e4:	2102      	movs	r1, #2
 80066e6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2140      	movs	r1, #64	; 0x40
 80066f4:	438a      	bics	r2, r1
 80066f6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	68da      	ldr	r2, [r3, #12]
 80066fc:	23e0      	movs	r3, #224	; 0xe0
 80066fe:	00db      	lsls	r3, r3, #3
 8006700:	429a      	cmp	r2, r3
 8006702:	d902      	bls.n	800670a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006704:	2300      	movs	r3, #0
 8006706:	60fb      	str	r3, [r7, #12]
 8006708:	e002      	b.n	8006710 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800670a:	2380      	movs	r3, #128	; 0x80
 800670c:	015b      	lsls	r3, r3, #5
 800670e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	68da      	ldr	r2, [r3, #12]
 8006714:	23f0      	movs	r3, #240	; 0xf0
 8006716:	011b      	lsls	r3, r3, #4
 8006718:	429a      	cmp	r2, r3
 800671a:	d008      	beq.n	800672e <HAL_SPI_Init+0xaa>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	68da      	ldr	r2, [r3, #12]
 8006720:	23e0      	movs	r3, #224	; 0xe0
 8006722:	00db      	lsls	r3, r3, #3
 8006724:	429a      	cmp	r2, r3
 8006726:	d002      	beq.n	800672e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	685a      	ldr	r2, [r3, #4]
 8006732:	2382      	movs	r3, #130	; 0x82
 8006734:	005b      	lsls	r3, r3, #1
 8006736:	401a      	ands	r2, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6899      	ldr	r1, [r3, #8]
 800673c:	2384      	movs	r3, #132	; 0x84
 800673e:	021b      	lsls	r3, r3, #8
 8006740:	400b      	ands	r3, r1
 8006742:	431a      	orrs	r2, r3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	691b      	ldr	r3, [r3, #16]
 8006748:	2102      	movs	r1, #2
 800674a:	400b      	ands	r3, r1
 800674c:	431a      	orrs	r2, r3
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	695b      	ldr	r3, [r3, #20]
 8006752:	2101      	movs	r1, #1
 8006754:	400b      	ands	r3, r1
 8006756:	431a      	orrs	r2, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6999      	ldr	r1, [r3, #24]
 800675c:	2380      	movs	r3, #128	; 0x80
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	400b      	ands	r3, r1
 8006762:	431a      	orrs	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	69db      	ldr	r3, [r3, #28]
 8006768:	2138      	movs	r1, #56	; 0x38
 800676a:	400b      	ands	r3, r1
 800676c:	431a      	orrs	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a1b      	ldr	r3, [r3, #32]
 8006772:	2180      	movs	r1, #128	; 0x80
 8006774:	400b      	ands	r3, r1
 8006776:	431a      	orrs	r2, r3
 8006778:	0011      	movs	r1, r2
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800677e:	2380      	movs	r3, #128	; 0x80
 8006780:	019b      	lsls	r3, r3, #6
 8006782:	401a      	ands	r2, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	430a      	orrs	r2, r1
 800678a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	699b      	ldr	r3, [r3, #24]
 8006790:	0c1b      	lsrs	r3, r3, #16
 8006792:	2204      	movs	r2, #4
 8006794:	401a      	ands	r2, r3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679a:	2110      	movs	r1, #16
 800679c:	400b      	ands	r3, r1
 800679e:	431a      	orrs	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067a4:	2108      	movs	r1, #8
 80067a6:	400b      	ands	r3, r1
 80067a8:	431a      	orrs	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	68d9      	ldr	r1, [r3, #12]
 80067ae:	23f0      	movs	r3, #240	; 0xf0
 80067b0:	011b      	lsls	r3, r3, #4
 80067b2:	400b      	ands	r3, r1
 80067b4:	431a      	orrs	r2, r3
 80067b6:	0011      	movs	r1, r2
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	2380      	movs	r3, #128	; 0x80
 80067bc:	015b      	lsls	r3, r3, #5
 80067be:	401a      	ands	r2, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	430a      	orrs	r2, r1
 80067c6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	69da      	ldr	r2, [r3, #28]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4907      	ldr	r1, [pc, #28]	; (80067f0 <HAL_SPI_Init+0x16c>)
 80067d4:	400a      	ands	r2, r1
 80067d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	225d      	movs	r2, #93	; 0x5d
 80067e2:	2101      	movs	r1, #1
 80067e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	0018      	movs	r0, r3
 80067ea:	46bd      	mov	sp, r7
 80067ec:	b004      	add	sp, #16
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	fffff7ff 	.word	0xfffff7ff

080067f4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b088      	sub	sp, #32
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	603b      	str	r3, [r7, #0]
 8006800:	1dbb      	adds	r3, r7, #6
 8006802:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006804:	231f      	movs	r3, #31
 8006806:	18fb      	adds	r3, r7, r3
 8006808:	2200      	movs	r2, #0
 800680a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	225c      	movs	r2, #92	; 0x5c
 8006810:	5c9b      	ldrb	r3, [r3, r2]
 8006812:	2b01      	cmp	r3, #1
 8006814:	d101      	bne.n	800681a <HAL_SPI_Transmit+0x26>
 8006816:	2302      	movs	r3, #2
 8006818:	e140      	b.n	8006a9c <HAL_SPI_Transmit+0x2a8>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	225c      	movs	r2, #92	; 0x5c
 800681e:	2101      	movs	r1, #1
 8006820:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006822:	f7fc fc65 	bl	80030f0 <HAL_GetTick>
 8006826:	0003      	movs	r3, r0
 8006828:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800682a:	2316      	movs	r3, #22
 800682c:	18fb      	adds	r3, r7, r3
 800682e:	1dba      	adds	r2, r7, #6
 8006830:	8812      	ldrh	r2, [r2, #0]
 8006832:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	225d      	movs	r2, #93	; 0x5d
 8006838:	5c9b      	ldrb	r3, [r3, r2]
 800683a:	b2db      	uxtb	r3, r3
 800683c:	2b01      	cmp	r3, #1
 800683e:	d004      	beq.n	800684a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006840:	231f      	movs	r3, #31
 8006842:	18fb      	adds	r3, r7, r3
 8006844:	2202      	movs	r2, #2
 8006846:	701a      	strb	r2, [r3, #0]
    goto error;
 8006848:	e11d      	b.n	8006a86 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d003      	beq.n	8006858 <HAL_SPI_Transmit+0x64>
 8006850:	1dbb      	adds	r3, r7, #6
 8006852:	881b      	ldrh	r3, [r3, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d104      	bne.n	8006862 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006858:	231f      	movs	r3, #31
 800685a:	18fb      	adds	r3, r7, r3
 800685c:	2201      	movs	r2, #1
 800685e:	701a      	strb	r2, [r3, #0]
    goto error;
 8006860:	e111      	b.n	8006a86 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	225d      	movs	r2, #93	; 0x5d
 8006866:	2103      	movs	r1, #3
 8006868:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2200      	movs	r2, #0
 800686e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	68ba      	ldr	r2, [r7, #8]
 8006874:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	1dba      	adds	r2, r7, #6
 800687a:	8812      	ldrh	r2, [r2, #0]
 800687c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	1dba      	adds	r2, r7, #6
 8006882:	8812      	ldrh	r2, [r2, #0]
 8006884:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2244      	movs	r2, #68	; 0x44
 8006890:	2100      	movs	r1, #0
 8006892:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2246      	movs	r2, #70	; 0x46
 8006898:	2100      	movs	r1, #0
 800689a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	689a      	ldr	r2, [r3, #8]
 80068ac:	2380      	movs	r3, #128	; 0x80
 80068ae:	021b      	lsls	r3, r3, #8
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d110      	bne.n	80068d6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2140      	movs	r1, #64	; 0x40
 80068c0:	438a      	bics	r2, r1
 80068c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2180      	movs	r1, #128	; 0x80
 80068d0:	01c9      	lsls	r1, r1, #7
 80068d2:	430a      	orrs	r2, r1
 80068d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2240      	movs	r2, #64	; 0x40
 80068de:	4013      	ands	r3, r2
 80068e0:	2b40      	cmp	r3, #64	; 0x40
 80068e2:	d007      	beq.n	80068f4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2140      	movs	r1, #64	; 0x40
 80068f0:	430a      	orrs	r2, r1
 80068f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	68da      	ldr	r2, [r3, #12]
 80068f8:	23e0      	movs	r3, #224	; 0xe0
 80068fa:	00db      	lsls	r3, r3, #3
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d94e      	bls.n	800699e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d004      	beq.n	8006912 <HAL_SPI_Transmit+0x11e>
 8006908:	2316      	movs	r3, #22
 800690a:	18fb      	adds	r3, r7, r3
 800690c:	881b      	ldrh	r3, [r3, #0]
 800690e:	2b01      	cmp	r3, #1
 8006910:	d13f      	bne.n	8006992 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006916:	881a      	ldrh	r2, [r3, #0]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006922:	1c9a      	adds	r2, r3, #2
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800692c:	b29b      	uxth	r3, r3
 800692e:	3b01      	subs	r3, #1
 8006930:	b29a      	uxth	r2, r3
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006936:	e02c      	b.n	8006992 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	2202      	movs	r2, #2
 8006940:	4013      	ands	r3, r2
 8006942:	2b02      	cmp	r3, #2
 8006944:	d112      	bne.n	800696c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694a:	881a      	ldrh	r2, [r3, #0]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006956:	1c9a      	adds	r2, r3, #2
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006960:	b29b      	uxth	r3, r3
 8006962:	3b01      	subs	r3, #1
 8006964:	b29a      	uxth	r2, r3
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	87da      	strh	r2, [r3, #62]	; 0x3e
 800696a:	e012      	b.n	8006992 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800696c:	f7fc fbc0 	bl	80030f0 <HAL_GetTick>
 8006970:	0002      	movs	r2, r0
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	683a      	ldr	r2, [r7, #0]
 8006978:	429a      	cmp	r2, r3
 800697a:	d802      	bhi.n	8006982 <HAL_SPI_Transmit+0x18e>
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	3301      	adds	r3, #1
 8006980:	d102      	bne.n	8006988 <HAL_SPI_Transmit+0x194>
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d104      	bne.n	8006992 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8006988:	231f      	movs	r3, #31
 800698a:	18fb      	adds	r3, r7, r3
 800698c:	2203      	movs	r2, #3
 800698e:	701a      	strb	r2, [r3, #0]
          goto error;
 8006990:	e079      	b.n	8006a86 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006996:	b29b      	uxth	r3, r3
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1cd      	bne.n	8006938 <HAL_SPI_Transmit+0x144>
 800699c:	e04f      	b.n	8006a3e <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d004      	beq.n	80069b0 <HAL_SPI_Transmit+0x1bc>
 80069a6:	2316      	movs	r3, #22
 80069a8:	18fb      	adds	r3, r7, r3
 80069aa:	881b      	ldrh	r3, [r3, #0]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d141      	bne.n	8006a34 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	330c      	adds	r3, #12
 80069ba:	7812      	ldrb	r2, [r2, #0]
 80069bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c2:	1c5a      	adds	r2, r3, #1
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	3b01      	subs	r3, #1
 80069d0:	b29a      	uxth	r2, r3
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80069d6:	e02d      	b.n	8006a34 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	2202      	movs	r2, #2
 80069e0:	4013      	ands	r3, r2
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	d113      	bne.n	8006a0e <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	330c      	adds	r3, #12
 80069f0:	7812      	ldrb	r2, [r2, #0]
 80069f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f8:	1c5a      	adds	r2, r3, #1
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	3b01      	subs	r3, #1
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a0c:	e012      	b.n	8006a34 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a0e:	f7fc fb6f 	bl	80030f0 <HAL_GetTick>
 8006a12:	0002      	movs	r2, r0
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	683a      	ldr	r2, [r7, #0]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d802      	bhi.n	8006a24 <HAL_SPI_Transmit+0x230>
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	3301      	adds	r3, #1
 8006a22:	d102      	bne.n	8006a2a <HAL_SPI_Transmit+0x236>
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d104      	bne.n	8006a34 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8006a2a:	231f      	movs	r3, #31
 8006a2c:	18fb      	adds	r3, r7, r3
 8006a2e:	2203      	movs	r2, #3
 8006a30:	701a      	strb	r2, [r3, #0]
          goto error;
 8006a32:	e028      	b.n	8006a86 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1cc      	bne.n	80069d8 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a3e:	69ba      	ldr	r2, [r7, #24]
 8006a40:	6839      	ldr	r1, [r7, #0]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	0018      	movs	r0, r3
 8006a46:	f001 f9cb 	bl	8007de0 <SPI_EndRxTxTransaction>
 8006a4a:	1e03      	subs	r3, r0, #0
 8006a4c:	d002      	beq.n	8006a54 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2220      	movs	r2, #32
 8006a52:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10a      	bne.n	8006a72 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	613b      	str	r3, [r7, #16]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	613b      	str	r3, [r7, #16]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	613b      	str	r3, [r7, #16]
 8006a70:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d004      	beq.n	8006a84 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8006a7a:	231f      	movs	r3, #31
 8006a7c:	18fb      	adds	r3, r7, r3
 8006a7e:	2201      	movs	r2, #1
 8006a80:	701a      	strb	r2, [r3, #0]
 8006a82:	e000      	b.n	8006a86 <HAL_SPI_Transmit+0x292>
  }

error:
 8006a84:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	225d      	movs	r2, #93	; 0x5d
 8006a8a:	2101      	movs	r1, #1
 8006a8c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	225c      	movs	r2, #92	; 0x5c
 8006a92:	2100      	movs	r1, #0
 8006a94:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006a96:	231f      	movs	r3, #31
 8006a98:	18fb      	adds	r3, r7, r3
 8006a9a:	781b      	ldrb	r3, [r3, #0]
}
 8006a9c:	0018      	movs	r0, r3
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	b008      	add	sp, #32
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006aa4:	b590      	push	{r4, r7, lr}
 8006aa6:	b089      	sub	sp, #36	; 0x24
 8006aa8:	af02      	add	r7, sp, #8
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	603b      	str	r3, [r7, #0]
 8006ab0:	1dbb      	adds	r3, r7, #6
 8006ab2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ab4:	2317      	movs	r3, #23
 8006ab6:	18fb      	adds	r3, r7, r3
 8006ab8:	2200      	movs	r2, #0
 8006aba:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	685a      	ldr	r2, [r3, #4]
 8006ac0:	2382      	movs	r3, #130	; 0x82
 8006ac2:	005b      	lsls	r3, r3, #1
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d113      	bne.n	8006af0 <HAL_SPI_Receive+0x4c>
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d10f      	bne.n	8006af0 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	225d      	movs	r2, #93	; 0x5d
 8006ad4:	2104      	movs	r1, #4
 8006ad6:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006ad8:	1dbb      	adds	r3, r7, #6
 8006ada:	881c      	ldrh	r4, [r3, #0]
 8006adc:	68ba      	ldr	r2, [r7, #8]
 8006ade:	68b9      	ldr	r1, [r7, #8]
 8006ae0:	68f8      	ldr	r0, [r7, #12]
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	9300      	str	r3, [sp, #0]
 8006ae6:	0023      	movs	r3, r4
 8006ae8:	f000 f928 	bl	8006d3c <HAL_SPI_TransmitReceive>
 8006aec:	0003      	movs	r3, r0
 8006aee:	e11c      	b.n	8006d2a <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	225c      	movs	r2, #92	; 0x5c
 8006af4:	5c9b      	ldrb	r3, [r3, r2]
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d101      	bne.n	8006afe <HAL_SPI_Receive+0x5a>
 8006afa:	2302      	movs	r3, #2
 8006afc:	e115      	b.n	8006d2a <HAL_SPI_Receive+0x286>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	225c      	movs	r2, #92	; 0x5c
 8006b02:	2101      	movs	r1, #1
 8006b04:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b06:	f7fc faf3 	bl	80030f0 <HAL_GetTick>
 8006b0a:	0003      	movs	r3, r0
 8006b0c:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	225d      	movs	r2, #93	; 0x5d
 8006b12:	5c9b      	ldrb	r3, [r3, r2]
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d004      	beq.n	8006b24 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8006b1a:	2317      	movs	r3, #23
 8006b1c:	18fb      	adds	r3, r7, r3
 8006b1e:	2202      	movs	r2, #2
 8006b20:	701a      	strb	r2, [r3, #0]
    goto error;
 8006b22:	e0f7      	b.n	8006d14 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d003      	beq.n	8006b32 <HAL_SPI_Receive+0x8e>
 8006b2a:	1dbb      	adds	r3, r7, #6
 8006b2c:	881b      	ldrh	r3, [r3, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d104      	bne.n	8006b3c <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8006b32:	2317      	movs	r3, #23
 8006b34:	18fb      	adds	r3, r7, r3
 8006b36:	2201      	movs	r2, #1
 8006b38:	701a      	strb	r2, [r3, #0]
    goto error;
 8006b3a:	e0eb      	b.n	8006d14 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	225d      	movs	r2, #93	; 0x5d
 8006b40:	2104      	movs	r1, #4
 8006b42:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2200      	movs	r2, #0
 8006b48:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	1dba      	adds	r2, r7, #6
 8006b54:	2144      	movs	r1, #68	; 0x44
 8006b56:	8812      	ldrh	r2, [r2, #0]
 8006b58:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	1dba      	adds	r2, r7, #6
 8006b5e:	2146      	movs	r1, #70	; 0x46
 8006b60:	8812      	ldrh	r2, [r2, #0]
 8006b62:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2200      	movs	r2, #0
 8006b74:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	68da      	ldr	r2, [r3, #12]
 8006b86:	23e0      	movs	r3, #224	; 0xe0
 8006b88:	00db      	lsls	r3, r3, #3
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d908      	bls.n	8006ba0 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	685a      	ldr	r2, [r3, #4]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4966      	ldr	r1, [pc, #408]	; (8006d34 <HAL_SPI_Receive+0x290>)
 8006b9a:	400a      	ands	r2, r1
 8006b9c:	605a      	str	r2, [r3, #4]
 8006b9e:	e008      	b.n	8006bb2 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	685a      	ldr	r2, [r3, #4]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2180      	movs	r1, #128	; 0x80
 8006bac:	0149      	lsls	r1, r1, #5
 8006bae:	430a      	orrs	r2, r1
 8006bb0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	689a      	ldr	r2, [r3, #8]
 8006bb6:	2380      	movs	r3, #128	; 0x80
 8006bb8:	021b      	lsls	r3, r3, #8
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d10f      	bne.n	8006bde <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2140      	movs	r1, #64	; 0x40
 8006bca:	438a      	bics	r2, r1
 8006bcc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4957      	ldr	r1, [pc, #348]	; (8006d38 <HAL_SPI_Receive+0x294>)
 8006bda:	400a      	ands	r2, r1
 8006bdc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2240      	movs	r2, #64	; 0x40
 8006be6:	4013      	ands	r3, r2
 8006be8:	2b40      	cmp	r3, #64	; 0x40
 8006bea:	d007      	beq.n	8006bfc <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2140      	movs	r1, #64	; 0x40
 8006bf8:	430a      	orrs	r2, r1
 8006bfa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	68da      	ldr	r2, [r3, #12]
 8006c00:	23e0      	movs	r3, #224	; 0xe0
 8006c02:	00db      	lsls	r3, r3, #3
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d900      	bls.n	8006c0a <HAL_SPI_Receive+0x166>
 8006c08:	e069      	b.n	8006cde <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006c0a:	e031      	b.n	8006c70 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	2201      	movs	r2, #1
 8006c14:	4013      	ands	r3, r2
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d117      	bne.n	8006c4a <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	330c      	adds	r3, #12
 8006c20:	001a      	movs	r2, r3
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c26:	7812      	ldrb	r2, [r2, #0]
 8006c28:	b2d2      	uxtb	r2, r2
 8006c2a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c30:	1c5a      	adds	r2, r3, #1
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2246      	movs	r2, #70	; 0x46
 8006c3a:	5a9b      	ldrh	r3, [r3, r2]
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	b299      	uxth	r1, r3
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2246      	movs	r2, #70	; 0x46
 8006c46:	5299      	strh	r1, [r3, r2]
 8006c48:	e012      	b.n	8006c70 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c4a:	f7fc fa51 	bl	80030f0 <HAL_GetTick>
 8006c4e:	0002      	movs	r2, r0
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	1ad3      	subs	r3, r2, r3
 8006c54:	683a      	ldr	r2, [r7, #0]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d802      	bhi.n	8006c60 <HAL_SPI_Receive+0x1bc>
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	d102      	bne.n	8006c66 <HAL_SPI_Receive+0x1c2>
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d104      	bne.n	8006c70 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8006c66:	2317      	movs	r3, #23
 8006c68:	18fb      	adds	r3, r7, r3
 8006c6a:	2203      	movs	r2, #3
 8006c6c:	701a      	strb	r2, [r3, #0]
          goto error;
 8006c6e:	e051      	b.n	8006d14 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2246      	movs	r2, #70	; 0x46
 8006c74:	5a9b      	ldrh	r3, [r3, r2]
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1c7      	bne.n	8006c0c <HAL_SPI_Receive+0x168>
 8006c7c:	e035      	b.n	8006cea <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	2201      	movs	r2, #1
 8006c86:	4013      	ands	r3, r2
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d115      	bne.n	8006cb8 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	68da      	ldr	r2, [r3, #12]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c96:	b292      	uxth	r2, r2
 8006c98:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9e:	1c9a      	adds	r2, r3, #2
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2246      	movs	r2, #70	; 0x46
 8006ca8:	5a9b      	ldrh	r3, [r3, r2]
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	3b01      	subs	r3, #1
 8006cae:	b299      	uxth	r1, r3
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2246      	movs	r2, #70	; 0x46
 8006cb4:	5299      	strh	r1, [r3, r2]
 8006cb6:	e012      	b.n	8006cde <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cb8:	f7fc fa1a 	bl	80030f0 <HAL_GetTick>
 8006cbc:	0002      	movs	r2, r0
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	683a      	ldr	r2, [r7, #0]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d802      	bhi.n	8006cce <HAL_SPI_Receive+0x22a>
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	d102      	bne.n	8006cd4 <HAL_SPI_Receive+0x230>
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d104      	bne.n	8006cde <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8006cd4:	2317      	movs	r3, #23
 8006cd6:	18fb      	adds	r3, r7, r3
 8006cd8:	2203      	movs	r2, #3
 8006cda:	701a      	strb	r2, [r3, #0]
          goto error;
 8006cdc:	e01a      	b.n	8006d14 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2246      	movs	r2, #70	; 0x46
 8006ce2:	5a9b      	ldrh	r3, [r3, r2]
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d1c9      	bne.n	8006c7e <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006cea:	693a      	ldr	r2, [r7, #16]
 8006cec:	6839      	ldr	r1, [r7, #0]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	0018      	movs	r0, r3
 8006cf2:	f001 f817 	bl	8007d24 <SPI_EndRxTransaction>
 8006cf6:	1e03      	subs	r3, r0, #0
 8006cf8:	d002      	beq.n	8006d00 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2220      	movs	r2, #32
 8006cfe:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d004      	beq.n	8006d12 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8006d08:	2317      	movs	r3, #23
 8006d0a:	18fb      	adds	r3, r7, r3
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	701a      	strb	r2, [r3, #0]
 8006d10:	e000      	b.n	8006d14 <HAL_SPI_Receive+0x270>
  }

error :
 8006d12:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	225d      	movs	r2, #93	; 0x5d
 8006d18:	2101      	movs	r1, #1
 8006d1a:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	225c      	movs	r2, #92	; 0x5c
 8006d20:	2100      	movs	r1, #0
 8006d22:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006d24:	2317      	movs	r3, #23
 8006d26:	18fb      	adds	r3, r7, r3
 8006d28:	781b      	ldrb	r3, [r3, #0]
}
 8006d2a:	0018      	movs	r0, r3
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	b007      	add	sp, #28
 8006d30:	bd90      	pop	{r4, r7, pc}
 8006d32:	46c0      	nop			; (mov r8, r8)
 8006d34:	ffffefff 	.word	0xffffefff
 8006d38:	ffffbfff 	.word	0xffffbfff

08006d3c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b08a      	sub	sp, #40	; 0x28
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	607a      	str	r2, [r7, #4]
 8006d48:	001a      	movs	r2, r3
 8006d4a:	1cbb      	adds	r3, r7, #2
 8006d4c:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006d52:	2323      	movs	r3, #35	; 0x23
 8006d54:	18fb      	adds	r3, r7, r3
 8006d56:	2200      	movs	r2, #0
 8006d58:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	225c      	movs	r2, #92	; 0x5c
 8006d5e:	5c9b      	ldrb	r3, [r3, r2]
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d101      	bne.n	8006d68 <HAL_SPI_TransmitReceive+0x2c>
 8006d64:	2302      	movs	r3, #2
 8006d66:	e1b5      	b.n	80070d4 <HAL_SPI_TransmitReceive+0x398>
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	225c      	movs	r2, #92	; 0x5c
 8006d6c:	2101      	movs	r1, #1
 8006d6e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d70:	f7fc f9be 	bl	80030f0 <HAL_GetTick>
 8006d74:	0003      	movs	r3, r0
 8006d76:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006d78:	201b      	movs	r0, #27
 8006d7a:	183b      	adds	r3, r7, r0
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	215d      	movs	r1, #93	; 0x5d
 8006d80:	5c52      	ldrb	r2, [r2, r1]
 8006d82:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006d8a:	2312      	movs	r3, #18
 8006d8c:	18fb      	adds	r3, r7, r3
 8006d8e:	1cba      	adds	r2, r7, #2
 8006d90:	8812      	ldrh	r2, [r2, #0]
 8006d92:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006d94:	183b      	adds	r3, r7, r0
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d011      	beq.n	8006dc0 <HAL_SPI_TransmitReceive+0x84>
 8006d9c:	697a      	ldr	r2, [r7, #20]
 8006d9e:	2382      	movs	r3, #130	; 0x82
 8006da0:	005b      	lsls	r3, r3, #1
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d107      	bne.n	8006db6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d103      	bne.n	8006db6 <HAL_SPI_TransmitReceive+0x7a>
 8006dae:	183b      	adds	r3, r7, r0
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	2b04      	cmp	r3, #4
 8006db4:	d004      	beq.n	8006dc0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8006db6:	2323      	movs	r3, #35	; 0x23
 8006db8:	18fb      	adds	r3, r7, r3
 8006dba:	2202      	movs	r2, #2
 8006dbc:	701a      	strb	r2, [r3, #0]
    goto error;
 8006dbe:	e17e      	b.n	80070be <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d006      	beq.n	8006dd4 <HAL_SPI_TransmitReceive+0x98>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d003      	beq.n	8006dd4 <HAL_SPI_TransmitReceive+0x98>
 8006dcc:	1cbb      	adds	r3, r7, #2
 8006dce:	881b      	ldrh	r3, [r3, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d104      	bne.n	8006dde <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8006dd4:	2323      	movs	r3, #35	; 0x23
 8006dd6:	18fb      	adds	r3, r7, r3
 8006dd8:	2201      	movs	r2, #1
 8006dda:	701a      	strb	r2, [r3, #0]
    goto error;
 8006ddc:	e16f      	b.n	80070be <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	225d      	movs	r2, #93	; 0x5d
 8006de2:	5c9b      	ldrb	r3, [r3, r2]
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	2b04      	cmp	r3, #4
 8006de8:	d003      	beq.n	8006df2 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	225d      	movs	r2, #93	; 0x5d
 8006dee:	2105      	movs	r1, #5
 8006df0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2200      	movs	r2, #0
 8006df6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	1cba      	adds	r2, r7, #2
 8006e02:	2146      	movs	r1, #70	; 0x46
 8006e04:	8812      	ldrh	r2, [r2, #0]
 8006e06:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	1cba      	adds	r2, r7, #2
 8006e0c:	2144      	movs	r1, #68	; 0x44
 8006e0e:	8812      	ldrh	r2, [r2, #0]
 8006e10:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	68ba      	ldr	r2, [r7, #8]
 8006e16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	1cba      	adds	r2, r7, #2
 8006e1c:	8812      	ldrh	r2, [r2, #0]
 8006e1e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	1cba      	adds	r2, r7, #2
 8006e24:	8812      	ldrh	r2, [r2, #0]
 8006e26:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2200      	movs	r2, #0
 8006e32:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	68da      	ldr	r2, [r3, #12]
 8006e38:	23e0      	movs	r3, #224	; 0xe0
 8006e3a:	00db      	lsls	r3, r3, #3
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d908      	bls.n	8006e52 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	685a      	ldr	r2, [r3, #4]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	49a4      	ldr	r1, [pc, #656]	; (80070dc <HAL_SPI_TransmitReceive+0x3a0>)
 8006e4c:	400a      	ands	r2, r1
 8006e4e:	605a      	str	r2, [r3, #4]
 8006e50:	e008      	b.n	8006e64 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	685a      	ldr	r2, [r3, #4]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2180      	movs	r1, #128	; 0x80
 8006e5e:	0149      	lsls	r1, r1, #5
 8006e60:	430a      	orrs	r2, r1
 8006e62:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2240      	movs	r2, #64	; 0x40
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	2b40      	cmp	r3, #64	; 0x40
 8006e70:	d007      	beq.n	8006e82 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2140      	movs	r1, #64	; 0x40
 8006e7e:	430a      	orrs	r2, r1
 8006e80:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	68da      	ldr	r2, [r3, #12]
 8006e86:	23e0      	movs	r3, #224	; 0xe0
 8006e88:	00db      	lsls	r3, r3, #3
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d800      	bhi.n	8006e90 <HAL_SPI_TransmitReceive+0x154>
 8006e8e:	e07f      	b.n	8006f90 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d005      	beq.n	8006ea4 <HAL_SPI_TransmitReceive+0x168>
 8006e98:	2312      	movs	r3, #18
 8006e9a:	18fb      	adds	r3, r7, r3
 8006e9c:	881b      	ldrh	r3, [r3, #0]
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d000      	beq.n	8006ea4 <HAL_SPI_TransmitReceive+0x168>
 8006ea2:	e069      	b.n	8006f78 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea8:	881a      	ldrh	r2, [r3, #0]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb4:	1c9a      	adds	r2, r3, #2
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	b29a      	uxth	r2, r3
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ec8:	e056      	b.n	8006f78 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	2202      	movs	r2, #2
 8006ed2:	4013      	ands	r3, r2
 8006ed4:	2b02      	cmp	r3, #2
 8006ed6:	d11b      	bne.n	8006f10 <HAL_SPI_TransmitReceive+0x1d4>
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d016      	beq.n	8006f10 <HAL_SPI_TransmitReceive+0x1d4>
 8006ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d113      	bne.n	8006f10 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eec:	881a      	ldrh	r2, [r3, #0]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef8:	1c9a      	adds	r2, r3, #2
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	3b01      	subs	r3, #1
 8006f06:	b29a      	uxth	r2, r3
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	2201      	movs	r2, #1
 8006f18:	4013      	ands	r3, r2
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d11c      	bne.n	8006f58 <HAL_SPI_TransmitReceive+0x21c>
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2246      	movs	r2, #70	; 0x46
 8006f22:	5a9b      	ldrh	r3, [r3, r2]
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d016      	beq.n	8006f58 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68da      	ldr	r2, [r3, #12]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f34:	b292      	uxth	r2, r2
 8006f36:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3c:	1c9a      	adds	r2, r3, #2
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2246      	movs	r2, #70	; 0x46
 8006f46:	5a9b      	ldrh	r3, [r3, r2]
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	b299      	uxth	r1, r3
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2246      	movs	r2, #70	; 0x46
 8006f52:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006f54:	2301      	movs	r3, #1
 8006f56:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006f58:	f7fc f8ca 	bl	80030f0 <HAL_GetTick>
 8006f5c:	0002      	movs	r2, r0
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	1ad3      	subs	r3, r2, r3
 8006f62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d807      	bhi.n	8006f78 <HAL_SPI_TransmitReceive+0x23c>
 8006f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	d004      	beq.n	8006f78 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8006f6e:	2323      	movs	r3, #35	; 0x23
 8006f70:	18fb      	adds	r3, r7, r3
 8006f72:	2203      	movs	r2, #3
 8006f74:	701a      	strb	r2, [r3, #0]
        goto error;
 8006f76:	e0a2      	b.n	80070be <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d1a3      	bne.n	8006eca <HAL_SPI_TransmitReceive+0x18e>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2246      	movs	r2, #70	; 0x46
 8006f86:	5a9b      	ldrh	r3, [r3, r2]
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d19d      	bne.n	8006eca <HAL_SPI_TransmitReceive+0x18e>
 8006f8e:	e085      	b.n	800709c <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d005      	beq.n	8006fa4 <HAL_SPI_TransmitReceive+0x268>
 8006f98:	2312      	movs	r3, #18
 8006f9a:	18fb      	adds	r3, r7, r3
 8006f9c:	881b      	ldrh	r3, [r3, #0]
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d000      	beq.n	8006fa4 <HAL_SPI_TransmitReceive+0x268>
 8006fa2:	e070      	b.n	8007086 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	330c      	adds	r3, #12
 8006fae:	7812      	ldrb	r2, [r2, #0]
 8006fb0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb6:	1c5a      	adds	r2, r3, #1
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	b29a      	uxth	r2, r3
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fca:	e05c      	b.n	8007086 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	2202      	movs	r2, #2
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	2b02      	cmp	r3, #2
 8006fd8:	d11c      	bne.n	8007014 <HAL_SPI_TransmitReceive+0x2d8>
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d017      	beq.n	8007014 <HAL_SPI_TransmitReceive+0x2d8>
 8006fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d114      	bne.n	8007014 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	330c      	adds	r3, #12
 8006ff4:	7812      	ldrb	r2, [r2, #0]
 8006ff6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ffc:	1c5a      	adds	r2, r3, #1
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007006:	b29b      	uxth	r3, r3
 8007008:	3b01      	subs	r3, #1
 800700a:	b29a      	uxth	r2, r3
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007010:	2300      	movs	r3, #0
 8007012:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	2201      	movs	r2, #1
 800701c:	4013      	ands	r3, r2
 800701e:	2b01      	cmp	r3, #1
 8007020:	d11e      	bne.n	8007060 <HAL_SPI_TransmitReceive+0x324>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2246      	movs	r2, #70	; 0x46
 8007026:	5a9b      	ldrh	r3, [r3, r2]
 8007028:	b29b      	uxth	r3, r3
 800702a:	2b00      	cmp	r3, #0
 800702c:	d018      	beq.n	8007060 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	330c      	adds	r3, #12
 8007034:	001a      	movs	r2, r3
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703a:	7812      	ldrb	r2, [r2, #0]
 800703c:	b2d2      	uxtb	r2, r2
 800703e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007044:	1c5a      	adds	r2, r3, #1
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2246      	movs	r2, #70	; 0x46
 800704e:	5a9b      	ldrh	r3, [r3, r2]
 8007050:	b29b      	uxth	r3, r3
 8007052:	3b01      	subs	r3, #1
 8007054:	b299      	uxth	r1, r3
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2246      	movs	r2, #70	; 0x46
 800705a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800705c:	2301      	movs	r3, #1
 800705e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007060:	f7fc f846 	bl	80030f0 <HAL_GetTick>
 8007064:	0002      	movs	r2, r0
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800706c:	429a      	cmp	r2, r3
 800706e:	d802      	bhi.n	8007076 <HAL_SPI_TransmitReceive+0x33a>
 8007070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007072:	3301      	adds	r3, #1
 8007074:	d102      	bne.n	800707c <HAL_SPI_TransmitReceive+0x340>
 8007076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007078:	2b00      	cmp	r3, #0
 800707a:	d104      	bne.n	8007086 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 800707c:	2323      	movs	r3, #35	; 0x23
 800707e:	18fb      	adds	r3, r7, r3
 8007080:	2203      	movs	r2, #3
 8007082:	701a      	strb	r2, [r3, #0]
        goto error;
 8007084:	e01b      	b.n	80070be <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800708a:	b29b      	uxth	r3, r3
 800708c:	2b00      	cmp	r3, #0
 800708e:	d19d      	bne.n	8006fcc <HAL_SPI_TransmitReceive+0x290>
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2246      	movs	r2, #70	; 0x46
 8007094:	5a9b      	ldrh	r3, [r3, r2]
 8007096:	b29b      	uxth	r3, r3
 8007098:	2b00      	cmp	r3, #0
 800709a:	d197      	bne.n	8006fcc <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800709c:	69fa      	ldr	r2, [r7, #28]
 800709e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	0018      	movs	r0, r3
 80070a4:	f000 fe9c 	bl	8007de0 <SPI_EndRxTxTransaction>
 80070a8:	1e03      	subs	r3, r0, #0
 80070aa:	d007      	beq.n	80070bc <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 80070ac:	2323      	movs	r3, #35	; 0x23
 80070ae:	18fb      	adds	r3, r7, r3
 80070b0:	2201      	movs	r2, #1
 80070b2:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2220      	movs	r2, #32
 80070b8:	661a      	str	r2, [r3, #96]	; 0x60
 80070ba:	e000      	b.n	80070be <HAL_SPI_TransmitReceive+0x382>
  }

error :
 80070bc:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	225d      	movs	r2, #93	; 0x5d
 80070c2:	2101      	movs	r1, #1
 80070c4:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	225c      	movs	r2, #92	; 0x5c
 80070ca:	2100      	movs	r1, #0
 80070cc:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80070ce:	2323      	movs	r3, #35	; 0x23
 80070d0:	18fb      	adds	r3, r7, r3
 80070d2:	781b      	ldrb	r3, [r3, #0]
}
 80070d4:	0018      	movs	r0, r3
 80070d6:	46bd      	mov	sp, r7
 80070d8:	b00a      	add	sp, #40	; 0x28
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	ffffefff 	.word	0xffffefff

080070e0 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80070e0:	b590      	push	{r4, r7, lr}
 80070e2:	b087      	sub	sp, #28
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	1dbb      	adds	r3, r7, #6
 80070ec:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80070ee:	2317      	movs	r3, #23
 80070f0:	18fb      	adds	r3, r7, r3
 80070f2:	2200      	movs	r2, #0
 80070f4:	701a      	strb	r2, [r3, #0]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d112      	bne.n	8007124 <HAL_SPI_Receive_DMA+0x44>
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	685a      	ldr	r2, [r3, #4]
 8007102:	2382      	movs	r3, #130	; 0x82
 8007104:	005b      	lsls	r3, r3, #1
 8007106:	429a      	cmp	r2, r3
 8007108:	d10c      	bne.n	8007124 <HAL_SPI_Receive_DMA+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	225d      	movs	r2, #93	; 0x5d
 800710e:	2104      	movs	r1, #4
 8007110:	5499      	strb	r1, [r3, r2]

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8007112:	1dbb      	adds	r3, r7, #6
 8007114:	881b      	ldrh	r3, [r3, #0]
 8007116:	68ba      	ldr	r2, [r7, #8]
 8007118:	68b9      	ldr	r1, [r7, #8]
 800711a:	68f8      	ldr	r0, [r7, #12]
 800711c:	f000 f91e 	bl	800735c <HAL_SPI_TransmitReceive_DMA>
 8007120:	0003      	movs	r3, r0
 8007122:	e10b      	b.n	800733c <HAL_SPI_Receive_DMA+0x25c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	225c      	movs	r2, #92	; 0x5c
 8007128:	5c9b      	ldrb	r3, [r3, r2]
 800712a:	2b01      	cmp	r3, #1
 800712c:	d101      	bne.n	8007132 <HAL_SPI_Receive_DMA+0x52>
 800712e:	2302      	movs	r3, #2
 8007130:	e104      	b.n	800733c <HAL_SPI_Receive_DMA+0x25c>
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	225c      	movs	r2, #92	; 0x5c
 8007136:	2101      	movs	r1, #1
 8007138:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	225d      	movs	r2, #93	; 0x5d
 800713e:	5c9b      	ldrb	r3, [r3, r2]
 8007140:	b2db      	uxtb	r3, r3
 8007142:	2b01      	cmp	r3, #1
 8007144:	d004      	beq.n	8007150 <HAL_SPI_Receive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 8007146:	2317      	movs	r3, #23
 8007148:	18fb      	adds	r3, r7, r3
 800714a:	2202      	movs	r2, #2
 800714c:	701a      	strb	r2, [r3, #0]
    goto error;
 800714e:	e0ee      	b.n	800732e <HAL_SPI_Receive_DMA+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d003      	beq.n	800715e <HAL_SPI_Receive_DMA+0x7e>
 8007156:	1dbb      	adds	r3, r7, #6
 8007158:	881b      	ldrh	r3, [r3, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d104      	bne.n	8007168 <HAL_SPI_Receive_DMA+0x88>
  {
    errorcode = HAL_ERROR;
 800715e:	2317      	movs	r3, #23
 8007160:	18fb      	adds	r3, r7, r3
 8007162:	2201      	movs	r2, #1
 8007164:	701a      	strb	r2, [r3, #0]
    goto error;
 8007166:	e0e2      	b.n	800732e <HAL_SPI_Receive_DMA+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	225d      	movs	r2, #93	; 0x5d
 800716c:	2104      	movs	r1, #4
 800716e:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2200      	movs	r2, #0
 8007174:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	68ba      	ldr	r2, [r7, #8]
 800717a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	1dba      	adds	r2, r7, #6
 8007180:	2144      	movs	r1, #68	; 0x44
 8007182:	8812      	ldrh	r2, [r2, #0]
 8007184:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	1dba      	adds	r2, r7, #6
 800718a:	2146      	movs	r1, #70	; 0x46
 800718c:	8812      	ldrh	r2, [r2, #0]
 800718e:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2200      	movs	r2, #0
 8007194:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2200      	movs	r2, #0
 800719a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2200      	movs	r2, #0
 80071a6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	689a      	ldr	r2, [r3, #8]
 80071ac:	2380      	movs	r3, #128	; 0x80
 80071ae:	021b      	lsls	r3, r3, #8
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d10f      	bne.n	80071d4 <HAL_SPI_Receive_DMA+0xf4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2140      	movs	r1, #64	; 0x40
 80071c0:	438a      	bics	r2, r1
 80071c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	495d      	ldr	r1, [pc, #372]	; (8007344 <HAL_SPI_Receive_DMA+0x264>)
 80071d0:	400a      	ands	r2, r1
 80071d2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	685a      	ldr	r2, [r3, #4]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	495a      	ldr	r1, [pc, #360]	; (8007348 <HAL_SPI_Receive_DMA+0x268>)
 80071e0:	400a      	ands	r2, r1
 80071e2:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	68da      	ldr	r2, [r3, #12]
 80071e8:	23e0      	movs	r3, #224	; 0xe0
 80071ea:	00db      	lsls	r3, r3, #3
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d908      	bls.n	8007202 <HAL_SPI_Receive_DMA+0x122>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	685a      	ldr	r2, [r3, #4]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4954      	ldr	r1, [pc, #336]	; (800734c <HAL_SPI_Receive_DMA+0x26c>)
 80071fc:	400a      	ands	r2, r1
 80071fe:	605a      	str	r2, [r3, #4]
 8007200:	e045      	b.n	800728e <HAL_SPI_Receive_DMA+0x1ae>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	685a      	ldr	r2, [r3, #4]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2180      	movs	r1, #128	; 0x80
 800720e:	0149      	lsls	r1, r1, #5
 8007210:	430a      	orrs	r2, r1
 8007212:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007218:	699a      	ldr	r2, [r3, #24]
 800721a:	2380      	movs	r3, #128	; 0x80
 800721c:	00db      	lsls	r3, r3, #3
 800721e:	429a      	cmp	r2, r3
 8007220:	d135      	bne.n	800728e <HAL_SPI_Receive_DMA+0x1ae>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	685a      	ldr	r2, [r3, #4]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4947      	ldr	r1, [pc, #284]	; (800734c <HAL_SPI_Receive_DMA+0x26c>)
 800722e:	400a      	ands	r2, r1
 8007230:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2246      	movs	r2, #70	; 0x46
 8007236:	5a9b      	ldrh	r3, [r3, r2]
 8007238:	b29b      	uxth	r3, r3
 800723a:	001a      	movs	r2, r3
 800723c:	2301      	movs	r3, #1
 800723e:	4013      	ands	r3, r2
 8007240:	d111      	bne.n	8007266 <HAL_SPI_Receive_DMA+0x186>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	685a      	ldr	r2, [r3, #4]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	493e      	ldr	r1, [pc, #248]	; (8007348 <HAL_SPI_Receive_DMA+0x268>)
 800724e:	400a      	ands	r2, r1
 8007250:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2246      	movs	r2, #70	; 0x46
 8007256:	5a9b      	ldrh	r3, [r3, r2]
 8007258:	b29b      	uxth	r3, r3
 800725a:	085b      	lsrs	r3, r3, #1
 800725c:	b299      	uxth	r1, r3
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2246      	movs	r2, #70	; 0x46
 8007262:	5299      	strh	r1, [r3, r2]
 8007264:	e013      	b.n	800728e <HAL_SPI_Receive_DMA+0x1ae>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	685a      	ldr	r2, [r3, #4]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2180      	movs	r1, #128	; 0x80
 8007272:	0189      	lsls	r1, r1, #6
 8007274:	430a      	orrs	r2, r1
 8007276:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2246      	movs	r2, #70	; 0x46
 800727c:	5a9b      	ldrh	r3, [r3, r2]
 800727e:	b29b      	uxth	r3, r3
 8007280:	085b      	lsrs	r3, r3, #1
 8007282:	b29b      	uxth	r3, r3
 8007284:	3301      	adds	r3, #1
 8007286:	b299      	uxth	r1, r3
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2246      	movs	r2, #70	; 0x46
 800728c:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007292:	4a2f      	ldr	r2, [pc, #188]	; (8007350 <HAL_SPI_Receive_DMA+0x270>)
 8007294:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800729a:	4a2e      	ldr	r2, [pc, #184]	; (8007354 <HAL_SPI_Receive_DMA+0x274>)
 800729c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072a2:	4a2d      	ldr	r2, [pc, #180]	; (8007358 <HAL_SPI_Receive_DMA+0x278>)
 80072a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072aa:	2200      	movs	r2, #0
 80072ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	330c      	adds	r3, #12
 80072b8:	0019      	movs	r1, r3
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072be:	001c      	movs	r4, r3
                                 hspi->RxXferCount))
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2246      	movs	r2, #70	; 0x46
 80072c4:	5a9b      	ldrh	r3, [r3, r2]
 80072c6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80072c8:	0022      	movs	r2, r4
 80072ca:	f7fc fb1d 	bl	8003908 <HAL_DMA_Start_IT>
 80072ce:	1e03      	subs	r3, r0, #0
 80072d0:	d00e      	beq.n	80072f0 <HAL_SPI_Receive_DMA+0x210>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072d6:	2210      	movs	r2, #16
 80072d8:	431a      	orrs	r2, r3
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80072de:	2317      	movs	r3, #23
 80072e0:	18fb      	adds	r3, r7, r3
 80072e2:	2201      	movs	r2, #1
 80072e4:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	225d      	movs	r2, #93	; 0x5d
 80072ea:	2101      	movs	r1, #1
 80072ec:	5499      	strb	r1, [r3, r2]
    goto error;
 80072ee:	e01e      	b.n	800732e <HAL_SPI_Receive_DMA+0x24e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2240      	movs	r2, #64	; 0x40
 80072f8:	4013      	ands	r3, r2
 80072fa:	2b40      	cmp	r3, #64	; 0x40
 80072fc:	d007      	beq.n	800730e <HAL_SPI_Receive_DMA+0x22e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2140      	movs	r1, #64	; 0x40
 800730a:	430a      	orrs	r2, r1
 800730c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	685a      	ldr	r2, [r3, #4]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2120      	movs	r1, #32
 800731a:	430a      	orrs	r2, r1
 800731c:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	685a      	ldr	r2, [r3, #4]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	2101      	movs	r1, #1
 800732a:	430a      	orrs	r2, r1
 800732c:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	225c      	movs	r2, #92	; 0x5c
 8007332:	2100      	movs	r1, #0
 8007334:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007336:	2317      	movs	r3, #23
 8007338:	18fb      	adds	r3, r7, r3
 800733a:	781b      	ldrb	r3, [r3, #0]
}
 800733c:	0018      	movs	r0, r3
 800733e:	46bd      	mov	sp, r7
 8007340:	b007      	add	sp, #28
 8007342:	bd90      	pop	{r4, r7, pc}
 8007344:	ffffbfff 	.word	0xffffbfff
 8007348:	ffffdfff 	.word	0xffffdfff
 800734c:	ffffefff 	.word	0xffffefff
 8007350:	08007a33 	.word	0x08007a33
 8007354:	080078ed 	.word	0x080078ed
 8007358:	08007a6f 	.word	0x08007a6f

0800735c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800735c:	b590      	push	{r4, r7, lr}
 800735e:	b087      	sub	sp, #28
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	607a      	str	r2, [r7, #4]
 8007368:	001a      	movs	r2, r3
 800736a:	1cbb      	adds	r3, r7, #2
 800736c:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800736e:	2317      	movs	r3, #23
 8007370:	18fb      	adds	r3, r7, r3
 8007372:	2200      	movs	r2, #0
 8007374:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	225c      	movs	r2, #92	; 0x5c
 800737a:	5c9b      	ldrb	r3, [r3, r2]
 800737c:	2b01      	cmp	r3, #1
 800737e:	d101      	bne.n	8007384 <HAL_SPI_TransmitReceive_DMA+0x28>
 8007380:	2302      	movs	r3, #2
 8007382:	e186      	b.n	8007692 <HAL_SPI_TransmitReceive_DMA+0x336>
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	225c      	movs	r2, #92	; 0x5c
 8007388:	2101      	movs	r1, #1
 800738a:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800738c:	2016      	movs	r0, #22
 800738e:	183b      	adds	r3, r7, r0
 8007390:	68fa      	ldr	r2, [r7, #12]
 8007392:	215d      	movs	r1, #93	; 0x5d
 8007394:	5c52      	ldrb	r2, [r2, r1]
 8007396:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800739e:	0001      	movs	r1, r0
 80073a0:	187b      	adds	r3, r7, r1
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d011      	beq.n	80073cc <HAL_SPI_TransmitReceive_DMA+0x70>
 80073a8:	693a      	ldr	r2, [r7, #16]
 80073aa:	2382      	movs	r3, #130	; 0x82
 80073ac:	005b      	lsls	r3, r3, #1
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d107      	bne.n	80073c2 <HAL_SPI_TransmitReceive_DMA+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d103      	bne.n	80073c2 <HAL_SPI_TransmitReceive_DMA+0x66>
 80073ba:	187b      	adds	r3, r7, r1
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	2b04      	cmp	r3, #4
 80073c0:	d004      	beq.n	80073cc <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 80073c2:	2317      	movs	r3, #23
 80073c4:	18fb      	adds	r3, r7, r3
 80073c6:	2202      	movs	r2, #2
 80073c8:	701a      	strb	r2, [r3, #0]
    goto error;
 80073ca:	e15b      	b.n	8007684 <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d006      	beq.n	80073e0 <HAL_SPI_TransmitReceive_DMA+0x84>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d003      	beq.n	80073e0 <HAL_SPI_TransmitReceive_DMA+0x84>
 80073d8:	1cbb      	adds	r3, r7, #2
 80073da:	881b      	ldrh	r3, [r3, #0]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d104      	bne.n	80073ea <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    errorcode = HAL_ERROR;
 80073e0:	2317      	movs	r3, #23
 80073e2:	18fb      	adds	r3, r7, r3
 80073e4:	2201      	movs	r2, #1
 80073e6:	701a      	strb	r2, [r3, #0]
    goto error;
 80073e8:	e14c      	b.n	8007684 <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	225d      	movs	r2, #93	; 0x5d
 80073ee:	5c9b      	ldrb	r3, [r3, r2]
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	2b04      	cmp	r3, #4
 80073f4:	d003      	beq.n	80073fe <HAL_SPI_TransmitReceive_DMA+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	225d      	movs	r2, #93	; 0x5d
 80073fa:	2105      	movs	r1, #5
 80073fc:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2200      	movs	r2, #0
 8007402:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	68ba      	ldr	r2, [r7, #8]
 8007408:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	1cba      	adds	r2, r7, #2
 800740e:	8812      	ldrh	r2, [r2, #0]
 8007410:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	1cba      	adds	r2, r7, #2
 8007416:	8812      	ldrh	r2, [r2, #0]
 8007418:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	1cba      	adds	r2, r7, #2
 8007424:	2144      	movs	r1, #68	; 0x44
 8007426:	8812      	ldrh	r2, [r2, #0]
 8007428:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	1cba      	adds	r2, r7, #2
 800742e:	2146      	movs	r1, #70	; 0x46
 8007430:	8812      	ldrh	r2, [r2, #0]
 8007432:	525a      	strh	r2, [r3, r1]

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2200      	movs	r2, #0
 8007438:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2200      	movs	r2, #0
 800743e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	685a      	ldr	r2, [r3, #4]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4994      	ldr	r1, [pc, #592]	; (800769c <HAL_SPI_TransmitReceive_DMA+0x340>)
 800744c:	400a      	ands	r2, r1
 800744e:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	68da      	ldr	r2, [r3, #12]
 8007454:	23e0      	movs	r3, #224	; 0xe0
 8007456:	00db      	lsls	r3, r3, #3
 8007458:	429a      	cmp	r2, r3
 800745a:	d908      	bls.n	800746e <HAL_SPI_TransmitReceive_DMA+0x112>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	685a      	ldr	r2, [r3, #4]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	498e      	ldr	r1, [pc, #568]	; (80076a0 <HAL_SPI_TransmitReceive_DMA+0x344>)
 8007468:	400a      	ands	r2, r1
 800746a:	605a      	str	r2, [r3, #4]
 800746c:	e074      	b.n	8007558 <HAL_SPI_TransmitReceive_DMA+0x1fc>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	685a      	ldr	r2, [r3, #4]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	2180      	movs	r1, #128	; 0x80
 800747a:	0149      	lsls	r1, r1, #5
 800747c:	430a      	orrs	r2, r1
 800747e:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007484:	699a      	ldr	r2, [r3, #24]
 8007486:	2380      	movs	r3, #128	; 0x80
 8007488:	00db      	lsls	r3, r3, #3
 800748a:	429a      	cmp	r2, r3
 800748c:	d127      	bne.n	80074de <HAL_SPI_TransmitReceive_DMA+0x182>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007492:	001a      	movs	r2, r3
 8007494:	2301      	movs	r3, #1
 8007496:	4013      	ands	r3, r2
 8007498:	d10f      	bne.n	80074ba <HAL_SPI_TransmitReceive_DMA+0x15e>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	685a      	ldr	r2, [r3, #4]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	497f      	ldr	r1, [pc, #508]	; (80076a4 <HAL_SPI_TransmitReceive_DMA+0x348>)
 80074a6:	400a      	ands	r2, r1
 80074a8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	085b      	lsrs	r3, r3, #1
 80074b2:	b29a      	uxth	r2, r3
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80074b8:	e011      	b.n	80074de <HAL_SPI_TransmitReceive_DMA+0x182>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	685a      	ldr	r2, [r3, #4]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	2180      	movs	r1, #128	; 0x80
 80074c6:	01c9      	lsls	r1, r1, #7
 80074c8:	430a      	orrs	r2, r1
 80074ca:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	085b      	lsrs	r3, r3, #1
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	3301      	adds	r3, #1
 80074d8:	b29a      	uxth	r2, r3
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074e2:	699a      	ldr	r2, [r3, #24]
 80074e4:	2380      	movs	r3, #128	; 0x80
 80074e6:	00db      	lsls	r3, r3, #3
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d135      	bne.n	8007558 <HAL_SPI_TransmitReceive_DMA+0x1fc>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	685a      	ldr	r2, [r3, #4]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	496a      	ldr	r1, [pc, #424]	; (80076a0 <HAL_SPI_TransmitReceive_DMA+0x344>)
 80074f8:	400a      	ands	r2, r1
 80074fa:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2246      	movs	r2, #70	; 0x46
 8007500:	5a9b      	ldrh	r3, [r3, r2]
 8007502:	b29b      	uxth	r3, r3
 8007504:	001a      	movs	r2, r3
 8007506:	2301      	movs	r3, #1
 8007508:	4013      	ands	r3, r2
 800750a:	d111      	bne.n	8007530 <HAL_SPI_TransmitReceive_DMA+0x1d4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	685a      	ldr	r2, [r3, #4]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4964      	ldr	r1, [pc, #400]	; (80076a8 <HAL_SPI_TransmitReceive_DMA+0x34c>)
 8007518:	400a      	ands	r2, r1
 800751a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2246      	movs	r2, #70	; 0x46
 8007520:	5a9b      	ldrh	r3, [r3, r2]
 8007522:	b29b      	uxth	r3, r3
 8007524:	085b      	lsrs	r3, r3, #1
 8007526:	b299      	uxth	r1, r3
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2246      	movs	r2, #70	; 0x46
 800752c:	5299      	strh	r1, [r3, r2]
 800752e:	e013      	b.n	8007558 <HAL_SPI_TransmitReceive_DMA+0x1fc>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	685a      	ldr	r2, [r3, #4]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2180      	movs	r1, #128	; 0x80
 800753c:	0189      	lsls	r1, r1, #6
 800753e:	430a      	orrs	r2, r1
 8007540:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2246      	movs	r2, #70	; 0x46
 8007546:	5a9b      	ldrh	r3, [r3, r2]
 8007548:	b29b      	uxth	r3, r3
 800754a:	085b      	lsrs	r3, r3, #1
 800754c:	b29b      	uxth	r3, r3
 800754e:	3301      	adds	r3, #1
 8007550:	b299      	uxth	r1, r3
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2246      	movs	r2, #70	; 0x46
 8007556:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	225d      	movs	r2, #93	; 0x5d
 800755c:	5c9b      	ldrb	r3, [r3, r2]
 800755e:	b2db      	uxtb	r3, r3
 8007560:	2b04      	cmp	r3, #4
 8007562:	d108      	bne.n	8007576 <HAL_SPI_TransmitReceive_DMA+0x21a>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007568:	4a50      	ldr	r2, [pc, #320]	; (80076ac <HAL_SPI_TransmitReceive_DMA+0x350>)
 800756a:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007570:	4a4f      	ldr	r2, [pc, #316]	; (80076b0 <HAL_SPI_TransmitReceive_DMA+0x354>)
 8007572:	62da      	str	r2, [r3, #44]	; 0x2c
 8007574:	e007      	b.n	8007586 <HAL_SPI_TransmitReceive_DMA+0x22a>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800757a:	4a4e      	ldr	r2, [pc, #312]	; (80076b4 <HAL_SPI_TransmitReceive_DMA+0x358>)
 800757c:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007582:	4a4d      	ldr	r2, [pc, #308]	; (80076b8 <HAL_SPI_TransmitReceive_DMA+0x35c>)
 8007584:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800758a:	4a4c      	ldr	r2, [pc, #304]	; (80076bc <HAL_SPI_TransmitReceive_DMA+0x360>)
 800758c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007592:	2200      	movs	r2, #0
 8007594:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	330c      	adds	r3, #12
 80075a0:	0019      	movs	r1, r3
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a6:	001c      	movs	r4, r3
                                 hspi->RxXferCount))
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2246      	movs	r2, #70	; 0x46
 80075ac:	5a9b      	ldrh	r3, [r3, r2]
 80075ae:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80075b0:	0022      	movs	r2, r4
 80075b2:	f7fc f9a9 	bl	8003908 <HAL_DMA_Start_IT>
 80075b6:	1e03      	subs	r3, r0, #0
 80075b8:	d00e      	beq.n	80075d8 <HAL_SPI_TransmitReceive_DMA+0x27c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075be:	2210      	movs	r2, #16
 80075c0:	431a      	orrs	r2, r3
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80075c6:	2317      	movs	r3, #23
 80075c8:	18fb      	adds	r3, r7, r3
 80075ca:	2201      	movs	r2, #1
 80075cc:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	225d      	movs	r2, #93	; 0x5d
 80075d2:	2101      	movs	r1, #1
 80075d4:	5499      	strb	r1, [r3, r2]
    goto error;
 80075d6:	e055      	b.n	8007684 <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	685a      	ldr	r2, [r3, #4]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2101      	movs	r1, #1
 80075e4:	430a      	orrs	r2, r1
 80075e6:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ec:	2200      	movs	r2, #0
 80075ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075f4:	2200      	movs	r2, #0
 80075f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075fc:	2200      	movs	r2, #0
 80075fe:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007604:	2200      	movs	r2, #0
 8007606:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007610:	0019      	movs	r1, r3
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	330c      	adds	r3, #12
 8007618:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800761e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007620:	f7fc f972 	bl	8003908 <HAL_DMA_Start_IT>
 8007624:	1e03      	subs	r3, r0, #0
 8007626:	d00e      	beq.n	8007646 <HAL_SPI_TransmitReceive_DMA+0x2ea>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800762c:	2210      	movs	r2, #16
 800762e:	431a      	orrs	r2, r3
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007634:	2317      	movs	r3, #23
 8007636:	18fb      	adds	r3, r7, r3
 8007638:	2201      	movs	r2, #1
 800763a:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	225d      	movs	r2, #93	; 0x5d
 8007640:	2101      	movs	r1, #1
 8007642:	5499      	strb	r1, [r3, r2]
    goto error;
 8007644:	e01e      	b.n	8007684 <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2240      	movs	r2, #64	; 0x40
 800764e:	4013      	ands	r3, r2
 8007650:	2b40      	cmp	r3, #64	; 0x40
 8007652:	d007      	beq.n	8007664 <HAL_SPI_TransmitReceive_DMA+0x308>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2140      	movs	r1, #64	; 0x40
 8007660:	430a      	orrs	r2, r1
 8007662:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	685a      	ldr	r2, [r3, #4]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	2120      	movs	r1, #32
 8007670:	430a      	orrs	r2, r1
 8007672:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	685a      	ldr	r2, [r3, #4]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2102      	movs	r1, #2
 8007680:	430a      	orrs	r2, r1
 8007682:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	225c      	movs	r2, #92	; 0x5c
 8007688:	2100      	movs	r1, #0
 800768a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800768c:	2317      	movs	r3, #23
 800768e:	18fb      	adds	r3, r7, r3
 8007690:	781b      	ldrb	r3, [r3, #0]
}
 8007692:	0018      	movs	r0, r3
 8007694:	46bd      	mov	sp, r7
 8007696:	b007      	add	sp, #28
 8007698:	bd90      	pop	{r4, r7, pc}
 800769a:	46c0      	nop			; (mov r8, r8)
 800769c:	ffff9fff 	.word	0xffff9fff
 80076a0:	ffffefff 	.word	0xffffefff
 80076a4:	ffffbfff 	.word	0xffffbfff
 80076a8:	ffffdfff 	.word	0xffffdfff
 80076ac:	08007a33 	.word	0x08007a33
 80076b0:	080078ed 	.word	0x080078ed
 80076b4:	08007a51 	.word	0x08007a51
 80076b8:	0800799d 	.word	0x0800799d
 80076bc:	08007a6f 	.word	0x08007a6f

080076c0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b088      	sub	sp, #32
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80076d8:	69bb      	ldr	r3, [r7, #24]
 80076da:	099b      	lsrs	r3, r3, #6
 80076dc:	001a      	movs	r2, r3
 80076de:	2301      	movs	r3, #1
 80076e0:	4013      	ands	r3, r2
 80076e2:	d10f      	bne.n	8007704 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80076e4:	69bb      	ldr	r3, [r7, #24]
 80076e6:	2201      	movs	r2, #1
 80076e8:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80076ea:	d00b      	beq.n	8007704 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	099b      	lsrs	r3, r3, #6
 80076f0:	001a      	movs	r2, r3
 80076f2:	2301      	movs	r3, #1
 80076f4:	4013      	ands	r3, r2
 80076f6:	d005      	beq.n	8007704 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	0010      	movs	r0, r2
 8007700:	4798      	blx	r3
    return;
 8007702:	e0d5      	b.n	80078b0 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	085b      	lsrs	r3, r3, #1
 8007708:	001a      	movs	r2, r3
 800770a:	2301      	movs	r3, #1
 800770c:	4013      	ands	r3, r2
 800770e:	d00b      	beq.n	8007728 <HAL_SPI_IRQHandler+0x68>
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	09db      	lsrs	r3, r3, #7
 8007714:	001a      	movs	r2, r3
 8007716:	2301      	movs	r3, #1
 8007718:	4013      	ands	r3, r2
 800771a:	d005      	beq.n	8007728 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	0010      	movs	r0, r2
 8007724:	4798      	blx	r3
    return;
 8007726:	e0c3      	b.n	80078b0 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007728:	69bb      	ldr	r3, [r7, #24]
 800772a:	095b      	lsrs	r3, r3, #5
 800772c:	001a      	movs	r2, r3
 800772e:	2301      	movs	r3, #1
 8007730:	4013      	ands	r3, r2
 8007732:	d10c      	bne.n	800774e <HAL_SPI_IRQHandler+0x8e>
 8007734:	69bb      	ldr	r3, [r7, #24]
 8007736:	099b      	lsrs	r3, r3, #6
 8007738:	001a      	movs	r2, r3
 800773a:	2301      	movs	r3, #1
 800773c:	4013      	ands	r3, r2
 800773e:	d106      	bne.n	800774e <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	0a1b      	lsrs	r3, r3, #8
 8007744:	001a      	movs	r2, r3
 8007746:	2301      	movs	r3, #1
 8007748:	4013      	ands	r3, r2
 800774a:	d100      	bne.n	800774e <HAL_SPI_IRQHandler+0x8e>
 800774c:	e0b0      	b.n	80078b0 <HAL_SPI_IRQHandler+0x1f0>
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	095b      	lsrs	r3, r3, #5
 8007752:	001a      	movs	r2, r3
 8007754:	2301      	movs	r3, #1
 8007756:	4013      	ands	r3, r2
 8007758:	d100      	bne.n	800775c <HAL_SPI_IRQHandler+0x9c>
 800775a:	e0a9      	b.n	80078b0 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	099b      	lsrs	r3, r3, #6
 8007760:	001a      	movs	r2, r3
 8007762:	2301      	movs	r3, #1
 8007764:	4013      	ands	r3, r2
 8007766:	d023      	beq.n	80077b0 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	225d      	movs	r2, #93	; 0x5d
 800776c:	5c9b      	ldrb	r3, [r3, r2]
 800776e:	b2db      	uxtb	r3, r3
 8007770:	2b03      	cmp	r3, #3
 8007772:	d011      	beq.n	8007798 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007778:	2204      	movs	r2, #4
 800777a:	431a      	orrs	r2, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007780:	2300      	movs	r3, #0
 8007782:	617b      	str	r3, [r7, #20]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	617b      	str	r3, [r7, #20]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	617b      	str	r3, [r7, #20]
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	e00b      	b.n	80077b0 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007798:	2300      	movs	r3, #0
 800779a:	613b      	str	r3, [r7, #16]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	613b      	str	r3, [r7, #16]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	613b      	str	r3, [r7, #16]
 80077ac:	693b      	ldr	r3, [r7, #16]
        return;
 80077ae:	e07f      	b.n	80078b0 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	095b      	lsrs	r3, r3, #5
 80077b4:	001a      	movs	r2, r3
 80077b6:	2301      	movs	r3, #1
 80077b8:	4013      	ands	r3, r2
 80077ba:	d014      	beq.n	80077e6 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077c0:	2201      	movs	r2, #1
 80077c2:	431a      	orrs	r2, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80077c8:	2300      	movs	r3, #0
 80077ca:	60fb      	str	r3, [r7, #12]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	60fb      	str	r3, [r7, #12]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	2140      	movs	r1, #64	; 0x40
 80077e0:	438a      	bics	r2, r1
 80077e2:	601a      	str	r2, [r3, #0]
 80077e4:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	0a1b      	lsrs	r3, r3, #8
 80077ea:	001a      	movs	r2, r3
 80077ec:	2301      	movs	r3, #1
 80077ee:	4013      	ands	r3, r2
 80077f0:	d00c      	beq.n	800780c <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077f6:	2208      	movs	r2, #8
 80077f8:	431a      	orrs	r2, r3
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80077fe:	2300      	movs	r3, #0
 8007800:	60bb      	str	r3, [r7, #8]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	60bb      	str	r3, [r7, #8]
 800780a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007810:	2b00      	cmp	r3, #0
 8007812:	d04c      	beq.n	80078ae <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	685a      	ldr	r2, [r3, #4]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	21e0      	movs	r1, #224	; 0xe0
 8007820:	438a      	bics	r2, r1
 8007822:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	225d      	movs	r2, #93	; 0x5d
 8007828:	2101      	movs	r1, #1
 800782a:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	2202      	movs	r2, #2
 8007830:	4013      	ands	r3, r2
 8007832:	d103      	bne.n	800783c <HAL_SPI_IRQHandler+0x17c>
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	2201      	movs	r2, #1
 8007838:	4013      	ands	r3, r2
 800783a:	d032      	beq.n	80078a2 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	685a      	ldr	r2, [r3, #4]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2103      	movs	r1, #3
 8007848:	438a      	bics	r2, r1
 800784a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007850:	2b00      	cmp	r3, #0
 8007852:	d010      	beq.n	8007876 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007858:	4a17      	ldr	r2, [pc, #92]	; (80078b8 <HAL_SPI_IRQHandler+0x1f8>)
 800785a:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007860:	0018      	movs	r0, r3
 8007862:	f7fc f8d7 	bl	8003a14 <HAL_DMA_Abort_IT>
 8007866:	1e03      	subs	r3, r0, #0
 8007868:	d005      	beq.n	8007876 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800786e:	2240      	movs	r2, #64	; 0x40
 8007870:	431a      	orrs	r2, r3
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800787a:	2b00      	cmp	r3, #0
 800787c:	d016      	beq.n	80078ac <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007882:	4a0d      	ldr	r2, [pc, #52]	; (80078b8 <HAL_SPI_IRQHandler+0x1f8>)
 8007884:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800788a:	0018      	movs	r0, r3
 800788c:	f7fc f8c2 	bl	8003a14 <HAL_DMA_Abort_IT>
 8007890:	1e03      	subs	r3, r0, #0
 8007892:	d00b      	beq.n	80078ac <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007898:	2240      	movs	r2, #64	; 0x40
 800789a:	431a      	orrs	r2, r3
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80078a0:	e004      	b.n	80078ac <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	0018      	movs	r0, r3
 80078a6:	f000 f819 	bl	80078dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80078aa:	e000      	b.n	80078ae <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 80078ac:	46c0      	nop			; (mov r8, r8)
    return;
 80078ae:	46c0      	nop			; (mov r8, r8)
  }
}
 80078b0:	46bd      	mov	sp, r7
 80078b2:	b008      	add	sp, #32
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	46c0      	nop			; (mov r8, r8)
 80078b8:	08007ab1 	.word	0x08007ab1

080078bc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b082      	sub	sp, #8
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80078c4:	46c0      	nop			; (mov r8, r8)
 80078c6:	46bd      	mov	sp, r7
 80078c8:	b002      	add	sp, #8
 80078ca:	bd80      	pop	{r7, pc}

080078cc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80078d4:	46c0      	nop			; (mov r8, r8)
 80078d6:	46bd      	mov	sp, r7
 80078d8:	b002      	add	sp, #8
 80078da:	bd80      	pop	{r7, pc}

080078dc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b082      	sub	sp, #8
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80078e4:	46c0      	nop			; (mov r8, r8)
 80078e6:	46bd      	mov	sp, r7
 80078e8:	b002      	add	sp, #8
 80078ea:	bd80      	pop	{r7, pc}

080078ec <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f8:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078fa:	f7fb fbf9 	bl	80030f0 <HAL_GetTick>
 80078fe:	0003      	movs	r3, r0
 8007900:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2220      	movs	r2, #32
 800790a:	4013      	ands	r3, r2
 800790c:	2b20      	cmp	r3, #32
 800790e:	d03e      	beq.n	800798e <SPI_DMAReceiveCplt+0xa2>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	685a      	ldr	r2, [r3, #4]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2120      	movs	r1, #32
 800791c:	438a      	bics	r2, r1
 800791e:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d10e      	bne.n	8007946 <SPI_DMAReceiveCplt+0x5a>
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	685a      	ldr	r2, [r3, #4]
 800792c:	2382      	movs	r3, #130	; 0x82
 800792e:	005b      	lsls	r3, r3, #1
 8007930:	429a      	cmp	r2, r3
 8007932:	d108      	bne.n	8007946 <SPI_DMAReceiveCplt+0x5a>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	685a      	ldr	r2, [r3, #4]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2103      	movs	r1, #3
 8007940:	438a      	bics	r2, r1
 8007942:	605a      	str	r2, [r3, #4]
 8007944:	e007      	b.n	8007956 <SPI_DMAReceiveCplt+0x6a>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	685a      	ldr	r2, [r3, #4]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2101      	movs	r1, #1
 8007952:	438a      	bics	r2, r1
 8007954:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007956:	68ba      	ldr	r2, [r7, #8]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2164      	movs	r1, #100	; 0x64
 800795c:	0018      	movs	r0, r3
 800795e:	f000 f9e1 	bl	8007d24 <SPI_EndRxTransaction>
 8007962:	1e03      	subs	r3, r0, #0
 8007964:	d002      	beq.n	800796c <SPI_DMAReceiveCplt+0x80>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2220      	movs	r2, #32
 800796a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2246      	movs	r2, #70	; 0x46
 8007970:	2100      	movs	r1, #0
 8007972:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	225d      	movs	r2, #93	; 0x5d
 8007978:	2101      	movs	r1, #1
 800797a:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007980:	2b00      	cmp	r3, #0
 8007982:	d004      	beq.n	800798e <SPI_DMAReceiveCplt+0xa2>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	0018      	movs	r0, r3
 8007988:	f7ff ffa8 	bl	80078dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800798c:	e003      	b.n	8007996 <SPI_DMAReceiveCplt+0xaa>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	0018      	movs	r0, r3
 8007992:	f7f9 fb8b 	bl	80010ac <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007996:	46bd      	mov	sp, r7
 8007998:	b004      	add	sp, #16
 800799a:	bd80      	pop	{r7, pc}

0800799c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a8:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80079aa:	f7fb fba1 	bl	80030f0 <HAL_GetTick>
 80079ae:	0003      	movs	r3, r0
 80079b0:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	2220      	movs	r2, #32
 80079ba:	4013      	ands	r3, r2
 80079bc:	2b20      	cmp	r3, #32
 80079be:	d031      	beq.n	8007a24 <SPI_DMATransmitReceiveCplt+0x88>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	685a      	ldr	r2, [r3, #4]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2120      	movs	r1, #32
 80079cc:	438a      	bics	r2, r1
 80079ce:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80079d0:	68ba      	ldr	r2, [r7, #8]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2164      	movs	r1, #100	; 0x64
 80079d6:	0018      	movs	r0, r3
 80079d8:	f000 fa02 	bl	8007de0 <SPI_EndRxTxTransaction>
 80079dc:	1e03      	subs	r3, r0, #0
 80079de:	d005      	beq.n	80079ec <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079e4:	2220      	movs	r2, #32
 80079e6:	431a      	orrs	r2, r3
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	685a      	ldr	r2, [r3, #4]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2103      	movs	r1, #3
 80079f8:	438a      	bics	r2, r1
 80079fa:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2200      	movs	r2, #0
 8007a00:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2246      	movs	r2, #70	; 0x46
 8007a06:	2100      	movs	r1, #0
 8007a08:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	225d      	movs	r2, #93	; 0x5d
 8007a0e:	2101      	movs	r1, #1
 8007a10:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d004      	beq.n	8007a24 <SPI_DMATransmitReceiveCplt+0x88>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	0018      	movs	r0, r3
 8007a1e:	f7ff ff5d 	bl	80078dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007a22:	e003      	b.n	8007a2c <SPI_DMATransmitReceiveCplt+0x90>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	0018      	movs	r0, r3
 8007a28:	f7ff ff48 	bl	80078bc <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	b004      	add	sp, #16
 8007a30:	bd80      	pop	{r7, pc}

08007a32 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007a32:	b580      	push	{r7, lr}
 8007a34:	b084      	sub	sp, #16
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a3e:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	0018      	movs	r0, r3
 8007a44:	f7f9 fafa 	bl	800103c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007a48:	46c0      	nop			; (mov r8, r8)
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	b004      	add	sp, #16
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a5c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	0018      	movs	r0, r3
 8007a62:	f7ff ff33 	bl	80078cc <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007a66:	46c0      	nop			; (mov r8, r8)
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	b004      	add	sp, #16
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007a6e:	b580      	push	{r7, lr}
 8007a70:	b084      	sub	sp, #16
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a7a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	685a      	ldr	r2, [r3, #4]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2103      	movs	r1, #3
 8007a88:	438a      	bics	r2, r1
 8007a8a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a90:	2210      	movs	r2, #16
 8007a92:	431a      	orrs	r2, r3
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	225d      	movs	r2, #93	; 0x5d
 8007a9c:	2101      	movs	r1, #1
 8007a9e:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	0018      	movs	r0, r3
 8007aa4:	f7ff ff1a 	bl	80078dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007aa8:	46c0      	nop			; (mov r8, r8)
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	b004      	add	sp, #16
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007abc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2246      	movs	r2, #70	; 0x46
 8007ac2:	2100      	movs	r1, #0
 8007ac4:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	0018      	movs	r0, r3
 8007ad0:	f7ff ff04 	bl	80078dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007ad4:	46c0      	nop			; (mov r8, r8)
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	b004      	add	sp, #16
 8007ada:	bd80      	pop	{r7, pc}

08007adc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b088      	sub	sp, #32
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	603b      	str	r3, [r7, #0]
 8007ae8:	1dfb      	adds	r3, r7, #7
 8007aea:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007aec:	f7fb fb00 	bl	80030f0 <HAL_GetTick>
 8007af0:	0002      	movs	r2, r0
 8007af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af4:	1a9b      	subs	r3, r3, r2
 8007af6:	683a      	ldr	r2, [r7, #0]
 8007af8:	18d3      	adds	r3, r2, r3
 8007afa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007afc:	f7fb faf8 	bl	80030f0 <HAL_GetTick>
 8007b00:	0003      	movs	r3, r0
 8007b02:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007b04:	4b3a      	ldr	r3, [pc, #232]	; (8007bf0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	015b      	lsls	r3, r3, #5
 8007b0a:	0d1b      	lsrs	r3, r3, #20
 8007b0c:	69fa      	ldr	r2, [r7, #28]
 8007b0e:	4353      	muls	r3, r2
 8007b10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b12:	e058      	b.n	8007bc6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	3301      	adds	r3, #1
 8007b18:	d055      	beq.n	8007bc6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b1a:	f7fb fae9 	bl	80030f0 <HAL_GetTick>
 8007b1e:	0002      	movs	r2, r0
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	1ad3      	subs	r3, r2, r3
 8007b24:	69fa      	ldr	r2, [r7, #28]
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d902      	bls.n	8007b30 <SPI_WaitFlagStateUntilTimeout+0x54>
 8007b2a:	69fb      	ldr	r3, [r7, #28]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d142      	bne.n	8007bb6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	685a      	ldr	r2, [r3, #4]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	21e0      	movs	r1, #224	; 0xe0
 8007b3c:	438a      	bics	r2, r1
 8007b3e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	685a      	ldr	r2, [r3, #4]
 8007b44:	2382      	movs	r3, #130	; 0x82
 8007b46:	005b      	lsls	r3, r3, #1
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d113      	bne.n	8007b74 <SPI_WaitFlagStateUntilTimeout+0x98>
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	689a      	ldr	r2, [r3, #8]
 8007b50:	2380      	movs	r3, #128	; 0x80
 8007b52:	021b      	lsls	r3, r3, #8
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d005      	beq.n	8007b64 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	689a      	ldr	r2, [r3, #8]
 8007b5c:	2380      	movs	r3, #128	; 0x80
 8007b5e:	00db      	lsls	r3, r3, #3
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d107      	bne.n	8007b74 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	2140      	movs	r1, #64	; 0x40
 8007b70:	438a      	bics	r2, r1
 8007b72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b78:	2380      	movs	r3, #128	; 0x80
 8007b7a:	019b      	lsls	r3, r3, #6
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d110      	bne.n	8007ba2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	491a      	ldr	r1, [pc, #104]	; (8007bf4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8007b8c:	400a      	ands	r2, r1
 8007b8e:	601a      	str	r2, [r3, #0]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	2180      	movs	r1, #128	; 0x80
 8007b9c:	0189      	lsls	r1, r1, #6
 8007b9e:	430a      	orrs	r2, r1
 8007ba0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	225d      	movs	r2, #93	; 0x5d
 8007ba6:	2101      	movs	r1, #1
 8007ba8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	225c      	movs	r2, #92	; 0x5c
 8007bae:	2100      	movs	r1, #0
 8007bb0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007bb2:	2303      	movs	r3, #3
 8007bb4:	e017      	b.n	8007be6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d101      	bne.n	8007bc0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	3b01      	subs	r3, #1
 8007bc4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	68ba      	ldr	r2, [r7, #8]
 8007bce:	4013      	ands	r3, r2
 8007bd0:	68ba      	ldr	r2, [r7, #8]
 8007bd2:	1ad3      	subs	r3, r2, r3
 8007bd4:	425a      	negs	r2, r3
 8007bd6:	4153      	adcs	r3, r2
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	001a      	movs	r2, r3
 8007bdc:	1dfb      	adds	r3, r7, #7
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d197      	bne.n	8007b14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	0018      	movs	r0, r3
 8007be8:	46bd      	mov	sp, r7
 8007bea:	b008      	add	sp, #32
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	46c0      	nop			; (mov r8, r8)
 8007bf0:	20003134 	.word	0x20003134
 8007bf4:	ffffdfff 	.word	0xffffdfff

08007bf8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b088      	sub	sp, #32
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	607a      	str	r2, [r7, #4]
 8007c04:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007c06:	f7fb fa73 	bl	80030f0 <HAL_GetTick>
 8007c0a:	0002      	movs	r2, r0
 8007c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c0e:	1a9b      	subs	r3, r3, r2
 8007c10:	683a      	ldr	r2, [r7, #0]
 8007c12:	18d3      	adds	r3, r2, r3
 8007c14:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007c16:	f7fb fa6b 	bl	80030f0 <HAL_GetTick>
 8007c1a:	0003      	movs	r3, r0
 8007c1c:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007c1e:	4b3f      	ldr	r3, [pc, #252]	; (8007d1c <SPI_WaitFifoStateUntilTimeout+0x124>)
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	0013      	movs	r3, r2
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	189b      	adds	r3, r3, r2
 8007c28:	00da      	lsls	r2, r3, #3
 8007c2a:	1ad3      	subs	r3, r2, r3
 8007c2c:	0d1b      	lsrs	r3, r3, #20
 8007c2e:	69fa      	ldr	r2, [r7, #28]
 8007c30:	4353      	muls	r3, r2
 8007c32:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8007c34:	e064      	b.n	8007d00 <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007c36:	68ba      	ldr	r2, [r7, #8]
 8007c38:	23c0      	movs	r3, #192	; 0xc0
 8007c3a:	00db      	lsls	r3, r3, #3
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d106      	bne.n	8007c4e <SPI_WaitFifoStateUntilTimeout+0x56>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d103      	bne.n	8007c4e <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	330c      	adds	r3, #12
 8007c4c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	3301      	adds	r3, #1
 8007c52:	d055      	beq.n	8007d00 <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c54:	f7fb fa4c 	bl	80030f0 <HAL_GetTick>
 8007c58:	0002      	movs	r2, r0
 8007c5a:	69bb      	ldr	r3, [r7, #24]
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	69fa      	ldr	r2, [r7, #28]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d902      	bls.n	8007c6a <SPI_WaitFifoStateUntilTimeout+0x72>
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d142      	bne.n	8007cf0 <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	685a      	ldr	r2, [r3, #4]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	21e0      	movs	r1, #224	; 0xe0
 8007c76:	438a      	bics	r2, r1
 8007c78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	685a      	ldr	r2, [r3, #4]
 8007c7e:	2382      	movs	r3, #130	; 0x82
 8007c80:	005b      	lsls	r3, r3, #1
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d113      	bne.n	8007cae <SPI_WaitFifoStateUntilTimeout+0xb6>
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	689a      	ldr	r2, [r3, #8]
 8007c8a:	2380      	movs	r3, #128	; 0x80
 8007c8c:	021b      	lsls	r3, r3, #8
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d005      	beq.n	8007c9e <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	689a      	ldr	r2, [r3, #8]
 8007c96:	2380      	movs	r3, #128	; 0x80
 8007c98:	00db      	lsls	r3, r3, #3
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d107      	bne.n	8007cae <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2140      	movs	r1, #64	; 0x40
 8007caa:	438a      	bics	r2, r1
 8007cac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007cb2:	2380      	movs	r3, #128	; 0x80
 8007cb4:	019b      	lsls	r3, r3, #6
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d110      	bne.n	8007cdc <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4916      	ldr	r1, [pc, #88]	; (8007d20 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007cc6:	400a      	ands	r2, r1
 8007cc8:	601a      	str	r2, [r3, #0]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	2180      	movs	r1, #128	; 0x80
 8007cd6:	0189      	lsls	r1, r1, #6
 8007cd8:	430a      	orrs	r2, r1
 8007cda:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	225d      	movs	r2, #93	; 0x5d
 8007ce0:	2101      	movs	r1, #1
 8007ce2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	225c      	movs	r2, #92	; 0x5c
 8007ce8:	2100      	movs	r1, #0
 8007cea:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007cec:	2303      	movs	r3, #3
 8007cee:	e010      	b.n	8007d12 <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d101      	bne.n	8007cfa <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	3b01      	subs	r3, #1
 8007cfe:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	68ba      	ldr	r2, [r7, #8]
 8007d08:	4013      	ands	r3, r2
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d192      	bne.n	8007c36 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	0018      	movs	r0, r3
 8007d14:	46bd      	mov	sp, r7
 8007d16:	b008      	add	sp, #32
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	46c0      	nop			; (mov r8, r8)
 8007d1c:	20003134 	.word	0x20003134
 8007d20:	ffffdfff 	.word	0xffffdfff

08007d24 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b086      	sub	sp, #24
 8007d28:	af02      	add	r7, sp, #8
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	60b9      	str	r1, [r7, #8]
 8007d2e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	685a      	ldr	r2, [r3, #4]
 8007d34:	2382      	movs	r3, #130	; 0x82
 8007d36:	005b      	lsls	r3, r3, #1
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d113      	bne.n	8007d64 <SPI_EndRxTransaction+0x40>
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	689a      	ldr	r2, [r3, #8]
 8007d40:	2380      	movs	r3, #128	; 0x80
 8007d42:	021b      	lsls	r3, r3, #8
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d005      	beq.n	8007d54 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	689a      	ldr	r2, [r3, #8]
 8007d4c:	2380      	movs	r3, #128	; 0x80
 8007d4e:	00db      	lsls	r3, r3, #3
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d107      	bne.n	8007d64 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2140      	movs	r1, #64	; 0x40
 8007d60:	438a      	bics	r2, r1
 8007d62:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d64:	68ba      	ldr	r2, [r7, #8]
 8007d66:	68f8      	ldr	r0, [r7, #12]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	9300      	str	r3, [sp, #0]
 8007d6c:	0013      	movs	r3, r2
 8007d6e:	2200      	movs	r2, #0
 8007d70:	2180      	movs	r1, #128	; 0x80
 8007d72:	f7ff feb3 	bl	8007adc <SPI_WaitFlagStateUntilTimeout>
 8007d76:	1e03      	subs	r3, r0, #0
 8007d78:	d007      	beq.n	8007d8a <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d7e:	2220      	movs	r2, #32
 8007d80:	431a      	orrs	r2, r3
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007d86:	2303      	movs	r3, #3
 8007d88:	e026      	b.n	8007dd8 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	685a      	ldr	r2, [r3, #4]
 8007d8e:	2382      	movs	r3, #130	; 0x82
 8007d90:	005b      	lsls	r3, r3, #1
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d11f      	bne.n	8007dd6 <SPI_EndRxTransaction+0xb2>
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	689a      	ldr	r2, [r3, #8]
 8007d9a:	2380      	movs	r3, #128	; 0x80
 8007d9c:	021b      	lsls	r3, r3, #8
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d005      	beq.n	8007dae <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	689a      	ldr	r2, [r3, #8]
 8007da6:	2380      	movs	r3, #128	; 0x80
 8007da8:	00db      	lsls	r3, r3, #3
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d113      	bne.n	8007dd6 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007dae:	68ba      	ldr	r2, [r7, #8]
 8007db0:	23c0      	movs	r3, #192	; 0xc0
 8007db2:	00d9      	lsls	r1, r3, #3
 8007db4:	68f8      	ldr	r0, [r7, #12]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	9300      	str	r3, [sp, #0]
 8007dba:	0013      	movs	r3, r2
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f7ff ff1b 	bl	8007bf8 <SPI_WaitFifoStateUntilTimeout>
 8007dc2:	1e03      	subs	r3, r0, #0
 8007dc4:	d007      	beq.n	8007dd6 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dca:	2220      	movs	r2, #32
 8007dcc:	431a      	orrs	r2, r3
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007dd2:	2303      	movs	r3, #3
 8007dd4:	e000      	b.n	8007dd8 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8007dd6:	2300      	movs	r3, #0
}
 8007dd8:	0018      	movs	r0, r3
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	b004      	add	sp, #16
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b086      	sub	sp, #24
 8007de4:	af02      	add	r7, sp, #8
 8007de6:	60f8      	str	r0, [r7, #12]
 8007de8:	60b9      	str	r1, [r7, #8]
 8007dea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007dec:	68ba      	ldr	r2, [r7, #8]
 8007dee:	23c0      	movs	r3, #192	; 0xc0
 8007df0:	0159      	lsls	r1, r3, #5
 8007df2:	68f8      	ldr	r0, [r7, #12]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	9300      	str	r3, [sp, #0]
 8007df8:	0013      	movs	r3, r2
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f7ff fefc 	bl	8007bf8 <SPI_WaitFifoStateUntilTimeout>
 8007e00:	1e03      	subs	r3, r0, #0
 8007e02:	d007      	beq.n	8007e14 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e08:	2220      	movs	r2, #32
 8007e0a:	431a      	orrs	r2, r3
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007e10:	2303      	movs	r3, #3
 8007e12:	e027      	b.n	8007e64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e14:	68ba      	ldr	r2, [r7, #8]
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	9300      	str	r3, [sp, #0]
 8007e1c:	0013      	movs	r3, r2
 8007e1e:	2200      	movs	r2, #0
 8007e20:	2180      	movs	r1, #128	; 0x80
 8007e22:	f7ff fe5b 	bl	8007adc <SPI_WaitFlagStateUntilTimeout>
 8007e26:	1e03      	subs	r3, r0, #0
 8007e28:	d007      	beq.n	8007e3a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e2e:	2220      	movs	r2, #32
 8007e30:	431a      	orrs	r2, r3
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007e36:	2303      	movs	r3, #3
 8007e38:	e014      	b.n	8007e64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007e3a:	68ba      	ldr	r2, [r7, #8]
 8007e3c:	23c0      	movs	r3, #192	; 0xc0
 8007e3e:	00d9      	lsls	r1, r3, #3
 8007e40:	68f8      	ldr	r0, [r7, #12]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	9300      	str	r3, [sp, #0]
 8007e46:	0013      	movs	r3, r2
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f7ff fed5 	bl	8007bf8 <SPI_WaitFifoStateUntilTimeout>
 8007e4e:	1e03      	subs	r3, r0, #0
 8007e50:	d007      	beq.n	8007e62 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e56:	2220      	movs	r2, #32
 8007e58:	431a      	orrs	r2, r3
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007e5e:	2303      	movs	r3, #3
 8007e60:	e000      	b.n	8007e64 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007e62:	2300      	movs	r3, #0
}
 8007e64:	0018      	movs	r0, r3
 8007e66:	46bd      	mov	sp, r7
 8007e68:	b004      	add	sp, #16
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b082      	sub	sp, #8
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d101      	bne.n	8007e7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	e04a      	b.n	8007f14 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	223d      	movs	r2, #61	; 0x3d
 8007e82:	5c9b      	ldrb	r3, [r3, r2]
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d107      	bne.n	8007e9a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	223c      	movs	r2, #60	; 0x3c
 8007e8e:	2100      	movs	r1, #0
 8007e90:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	0018      	movs	r0, r3
 8007e96:	f7fa fe53 	bl	8002b40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	223d      	movs	r2, #61	; 0x3d
 8007e9e:	2102      	movs	r1, #2
 8007ea0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	3304      	adds	r3, #4
 8007eaa:	0019      	movs	r1, r3
 8007eac:	0010      	movs	r0, r2
 8007eae:	f000 fb41 	bl	8008534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2248      	movs	r2, #72	; 0x48
 8007eb6:	2101      	movs	r1, #1
 8007eb8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	223e      	movs	r2, #62	; 0x3e
 8007ebe:	2101      	movs	r1, #1
 8007ec0:	5499      	strb	r1, [r3, r2]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	223f      	movs	r2, #63	; 0x3f
 8007ec6:	2101      	movs	r1, #1
 8007ec8:	5499      	strb	r1, [r3, r2]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2240      	movs	r2, #64	; 0x40
 8007ece:	2101      	movs	r1, #1
 8007ed0:	5499      	strb	r1, [r3, r2]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2241      	movs	r2, #65	; 0x41
 8007ed6:	2101      	movs	r1, #1
 8007ed8:	5499      	strb	r1, [r3, r2]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2242      	movs	r2, #66	; 0x42
 8007ede:	2101      	movs	r1, #1
 8007ee0:	5499      	strb	r1, [r3, r2]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2243      	movs	r2, #67	; 0x43
 8007ee6:	2101      	movs	r1, #1
 8007ee8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2244      	movs	r2, #68	; 0x44
 8007eee:	2101      	movs	r1, #1
 8007ef0:	5499      	strb	r1, [r3, r2]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2245      	movs	r2, #69	; 0x45
 8007ef6:	2101      	movs	r1, #1
 8007ef8:	5499      	strb	r1, [r3, r2]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2246      	movs	r2, #70	; 0x46
 8007efe:	2101      	movs	r1, #1
 8007f00:	5499      	strb	r1, [r3, r2]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2247      	movs	r2, #71	; 0x47
 8007f06:	2101      	movs	r1, #1
 8007f08:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	223d      	movs	r2, #61	; 0x3d
 8007f0e:	2101      	movs	r1, #1
 8007f10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007f12:	2300      	movs	r3, #0
}
 8007f14:	0018      	movs	r0, r3
 8007f16:	46bd      	mov	sp, r7
 8007f18:	b002      	add	sp, #8
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d101      	bne.n	8007f2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e04a      	b.n	8007fc4 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	223d      	movs	r2, #61	; 0x3d
 8007f32:	5c9b      	ldrb	r3, [r3, r2]
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d107      	bne.n	8007f4a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	223c      	movs	r2, #60	; 0x3c
 8007f3e:	2100      	movs	r1, #0
 8007f40:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	0018      	movs	r0, r3
 8007f46:	f000 f841 	bl	8007fcc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	223d      	movs	r2, #61	; 0x3d
 8007f4e:	2102      	movs	r1, #2
 8007f50:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	3304      	adds	r3, #4
 8007f5a:	0019      	movs	r1, r3
 8007f5c:	0010      	movs	r0, r2
 8007f5e:	f000 fae9 	bl	8008534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2248      	movs	r2, #72	; 0x48
 8007f66:	2101      	movs	r1, #1
 8007f68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	223e      	movs	r2, #62	; 0x3e
 8007f6e:	2101      	movs	r1, #1
 8007f70:	5499      	strb	r1, [r3, r2]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	223f      	movs	r2, #63	; 0x3f
 8007f76:	2101      	movs	r1, #1
 8007f78:	5499      	strb	r1, [r3, r2]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2240      	movs	r2, #64	; 0x40
 8007f7e:	2101      	movs	r1, #1
 8007f80:	5499      	strb	r1, [r3, r2]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2241      	movs	r2, #65	; 0x41
 8007f86:	2101      	movs	r1, #1
 8007f88:	5499      	strb	r1, [r3, r2]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2242      	movs	r2, #66	; 0x42
 8007f8e:	2101      	movs	r1, #1
 8007f90:	5499      	strb	r1, [r3, r2]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2243      	movs	r2, #67	; 0x43
 8007f96:	2101      	movs	r1, #1
 8007f98:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2244      	movs	r2, #68	; 0x44
 8007f9e:	2101      	movs	r1, #1
 8007fa0:	5499      	strb	r1, [r3, r2]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2245      	movs	r2, #69	; 0x45
 8007fa6:	2101      	movs	r1, #1
 8007fa8:	5499      	strb	r1, [r3, r2]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2246      	movs	r2, #70	; 0x46
 8007fae:	2101      	movs	r1, #1
 8007fb0:	5499      	strb	r1, [r3, r2]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2247      	movs	r2, #71	; 0x47
 8007fb6:	2101      	movs	r1, #1
 8007fb8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	223d      	movs	r2, #61	; 0x3d
 8007fbe:	2101      	movs	r1, #1
 8007fc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007fc2:	2300      	movs	r3, #0
}
 8007fc4:	0018      	movs	r0, r3
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	b002      	add	sp, #8
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007fd4:	46c0      	nop			; (mov r8, r8)
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	b002      	add	sp, #8
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d108      	bne.n	8007ffe <HAL_TIM_PWM_Start+0x22>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	223e      	movs	r2, #62	; 0x3e
 8007ff0:	5c9b      	ldrb	r3, [r3, r2]
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	3b01      	subs	r3, #1
 8007ff6:	1e5a      	subs	r2, r3, #1
 8007ff8:	4193      	sbcs	r3, r2
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	e037      	b.n	800806e <HAL_TIM_PWM_Start+0x92>
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	2b04      	cmp	r3, #4
 8008002:	d108      	bne.n	8008016 <HAL_TIM_PWM_Start+0x3a>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	223f      	movs	r2, #63	; 0x3f
 8008008:	5c9b      	ldrb	r3, [r3, r2]
 800800a:	b2db      	uxtb	r3, r3
 800800c:	3b01      	subs	r3, #1
 800800e:	1e5a      	subs	r2, r3, #1
 8008010:	4193      	sbcs	r3, r2
 8008012:	b2db      	uxtb	r3, r3
 8008014:	e02b      	b.n	800806e <HAL_TIM_PWM_Start+0x92>
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	2b08      	cmp	r3, #8
 800801a:	d108      	bne.n	800802e <HAL_TIM_PWM_Start+0x52>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2240      	movs	r2, #64	; 0x40
 8008020:	5c9b      	ldrb	r3, [r3, r2]
 8008022:	b2db      	uxtb	r3, r3
 8008024:	3b01      	subs	r3, #1
 8008026:	1e5a      	subs	r2, r3, #1
 8008028:	4193      	sbcs	r3, r2
 800802a:	b2db      	uxtb	r3, r3
 800802c:	e01f      	b.n	800806e <HAL_TIM_PWM_Start+0x92>
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	2b0c      	cmp	r3, #12
 8008032:	d108      	bne.n	8008046 <HAL_TIM_PWM_Start+0x6a>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2241      	movs	r2, #65	; 0x41
 8008038:	5c9b      	ldrb	r3, [r3, r2]
 800803a:	b2db      	uxtb	r3, r3
 800803c:	3b01      	subs	r3, #1
 800803e:	1e5a      	subs	r2, r3, #1
 8008040:	4193      	sbcs	r3, r2
 8008042:	b2db      	uxtb	r3, r3
 8008044:	e013      	b.n	800806e <HAL_TIM_PWM_Start+0x92>
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	2b10      	cmp	r3, #16
 800804a:	d108      	bne.n	800805e <HAL_TIM_PWM_Start+0x82>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2242      	movs	r2, #66	; 0x42
 8008050:	5c9b      	ldrb	r3, [r3, r2]
 8008052:	b2db      	uxtb	r3, r3
 8008054:	3b01      	subs	r3, #1
 8008056:	1e5a      	subs	r2, r3, #1
 8008058:	4193      	sbcs	r3, r2
 800805a:	b2db      	uxtb	r3, r3
 800805c:	e007      	b.n	800806e <HAL_TIM_PWM_Start+0x92>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2243      	movs	r2, #67	; 0x43
 8008062:	5c9b      	ldrb	r3, [r3, r2]
 8008064:	b2db      	uxtb	r3, r3
 8008066:	3b01      	subs	r3, #1
 8008068:	1e5a      	subs	r2, r3, #1
 800806a:	4193      	sbcs	r3, r2
 800806c:	b2db      	uxtb	r3, r3
 800806e:	2b00      	cmp	r3, #0
 8008070:	d001      	beq.n	8008076 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	e08b      	b.n	800818e <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d104      	bne.n	8008086 <HAL_TIM_PWM_Start+0xaa>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	223e      	movs	r2, #62	; 0x3e
 8008080:	2102      	movs	r1, #2
 8008082:	5499      	strb	r1, [r3, r2]
 8008084:	e023      	b.n	80080ce <HAL_TIM_PWM_Start+0xf2>
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	2b04      	cmp	r3, #4
 800808a:	d104      	bne.n	8008096 <HAL_TIM_PWM_Start+0xba>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	223f      	movs	r2, #63	; 0x3f
 8008090:	2102      	movs	r1, #2
 8008092:	5499      	strb	r1, [r3, r2]
 8008094:	e01b      	b.n	80080ce <HAL_TIM_PWM_Start+0xf2>
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	2b08      	cmp	r3, #8
 800809a:	d104      	bne.n	80080a6 <HAL_TIM_PWM_Start+0xca>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2240      	movs	r2, #64	; 0x40
 80080a0:	2102      	movs	r1, #2
 80080a2:	5499      	strb	r1, [r3, r2]
 80080a4:	e013      	b.n	80080ce <HAL_TIM_PWM_Start+0xf2>
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	2b0c      	cmp	r3, #12
 80080aa:	d104      	bne.n	80080b6 <HAL_TIM_PWM_Start+0xda>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2241      	movs	r2, #65	; 0x41
 80080b0:	2102      	movs	r1, #2
 80080b2:	5499      	strb	r1, [r3, r2]
 80080b4:	e00b      	b.n	80080ce <HAL_TIM_PWM_Start+0xf2>
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	2b10      	cmp	r3, #16
 80080ba:	d104      	bne.n	80080c6 <HAL_TIM_PWM_Start+0xea>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2242      	movs	r2, #66	; 0x42
 80080c0:	2102      	movs	r1, #2
 80080c2:	5499      	strb	r1, [r3, r2]
 80080c4:	e003      	b.n	80080ce <HAL_TIM_PWM_Start+0xf2>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2243      	movs	r2, #67	; 0x43
 80080ca:	2102      	movs	r1, #2
 80080cc:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	6839      	ldr	r1, [r7, #0]
 80080d4:	2201      	movs	r2, #1
 80080d6:	0018      	movs	r0, r3
 80080d8:	f000 fe0c 	bl	8008cf4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a2d      	ldr	r2, [pc, #180]	; (8008198 <HAL_TIM_PWM_Start+0x1bc>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d00e      	beq.n	8008104 <HAL_TIM_PWM_Start+0x128>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a2c      	ldr	r2, [pc, #176]	; (800819c <HAL_TIM_PWM_Start+0x1c0>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d009      	beq.n	8008104 <HAL_TIM_PWM_Start+0x128>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a2a      	ldr	r2, [pc, #168]	; (80081a0 <HAL_TIM_PWM_Start+0x1c4>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d004      	beq.n	8008104 <HAL_TIM_PWM_Start+0x128>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a29      	ldr	r2, [pc, #164]	; (80081a4 <HAL_TIM_PWM_Start+0x1c8>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d101      	bne.n	8008108 <HAL_TIM_PWM_Start+0x12c>
 8008104:	2301      	movs	r3, #1
 8008106:	e000      	b.n	800810a <HAL_TIM_PWM_Start+0x12e>
 8008108:	2300      	movs	r3, #0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d008      	beq.n	8008120 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2180      	movs	r1, #128	; 0x80
 800811a:	0209      	lsls	r1, r1, #8
 800811c:	430a      	orrs	r2, r1
 800811e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a1c      	ldr	r2, [pc, #112]	; (8008198 <HAL_TIM_PWM_Start+0x1bc>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d00f      	beq.n	800814a <HAL_TIM_PWM_Start+0x16e>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	2380      	movs	r3, #128	; 0x80
 8008130:	05db      	lsls	r3, r3, #23
 8008132:	429a      	cmp	r2, r3
 8008134:	d009      	beq.n	800814a <HAL_TIM_PWM_Start+0x16e>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a1b      	ldr	r2, [pc, #108]	; (80081a8 <HAL_TIM_PWM_Start+0x1cc>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d004      	beq.n	800814a <HAL_TIM_PWM_Start+0x16e>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a15      	ldr	r2, [pc, #84]	; (800819c <HAL_TIM_PWM_Start+0x1c0>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d116      	bne.n	8008178 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	4a16      	ldr	r2, [pc, #88]	; (80081ac <HAL_TIM_PWM_Start+0x1d0>)
 8008152:	4013      	ands	r3, r2
 8008154:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2b06      	cmp	r3, #6
 800815a:	d016      	beq.n	800818a <HAL_TIM_PWM_Start+0x1ae>
 800815c:	68fa      	ldr	r2, [r7, #12]
 800815e:	2380      	movs	r3, #128	; 0x80
 8008160:	025b      	lsls	r3, r3, #9
 8008162:	429a      	cmp	r2, r3
 8008164:	d011      	beq.n	800818a <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2101      	movs	r1, #1
 8008172:	430a      	orrs	r2, r1
 8008174:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008176:	e008      	b.n	800818a <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2101      	movs	r1, #1
 8008184:	430a      	orrs	r2, r1
 8008186:	601a      	str	r2, [r3, #0]
 8008188:	e000      	b.n	800818c <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800818a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	0018      	movs	r0, r3
 8008190:	46bd      	mov	sp, r7
 8008192:	b004      	add	sp, #16
 8008194:	bd80      	pop	{r7, pc}
 8008196:	46c0      	nop			; (mov r8, r8)
 8008198:	40012c00 	.word	0x40012c00
 800819c:	40014000 	.word	0x40014000
 80081a0:	40014400 	.word	0x40014400
 80081a4:	40014800 	.word	0x40014800
 80081a8:	40000400 	.word	0x40000400
 80081ac:	00010007 	.word	0x00010007

080081b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	60b9      	str	r1, [r7, #8]
 80081ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	223c      	movs	r2, #60	; 0x3c
 80081c0:	5c9b      	ldrb	r3, [r3, r2]
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d101      	bne.n	80081ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 80081c6:	2302      	movs	r3, #2
 80081c8:	e0df      	b.n	800838a <HAL_TIM_PWM_ConfigChannel+0x1da>
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	223c      	movs	r2, #60	; 0x3c
 80081ce:	2101      	movs	r1, #1
 80081d0:	5499      	strb	r1, [r3, r2]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2b14      	cmp	r3, #20
 80081d6:	d900      	bls.n	80081da <HAL_TIM_PWM_ConfigChannel+0x2a>
 80081d8:	e0d1      	b.n	800837e <HAL_TIM_PWM_ConfigChannel+0x1ce>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	009a      	lsls	r2, r3, #2
 80081de:	4b6d      	ldr	r3, [pc, #436]	; (8008394 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 80081e0:	18d3      	adds	r3, r2, r3
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	68ba      	ldr	r2, [r7, #8]
 80081ec:	0011      	movs	r1, r2
 80081ee:	0018      	movs	r0, r3
 80081f0:	f000 fa20 	bl	8008634 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	699a      	ldr	r2, [r3, #24]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2108      	movs	r1, #8
 8008200:	430a      	orrs	r2, r1
 8008202:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	699a      	ldr	r2, [r3, #24]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2104      	movs	r1, #4
 8008210:	438a      	bics	r2, r1
 8008212:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	6999      	ldr	r1, [r3, #24]
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	691a      	ldr	r2, [r3, #16]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	430a      	orrs	r2, r1
 8008224:	619a      	str	r2, [r3, #24]
      break;
 8008226:	e0ab      	b.n	8008380 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	68ba      	ldr	r2, [r7, #8]
 800822e:	0011      	movs	r1, r2
 8008230:	0018      	movs	r0, r3
 8008232:	f000 fa89 	bl	8008748 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	699a      	ldr	r2, [r3, #24]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	2180      	movs	r1, #128	; 0x80
 8008242:	0109      	lsls	r1, r1, #4
 8008244:	430a      	orrs	r2, r1
 8008246:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	699a      	ldr	r2, [r3, #24]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4951      	ldr	r1, [pc, #324]	; (8008398 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8008254:	400a      	ands	r2, r1
 8008256:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	6999      	ldr	r1, [r3, #24]
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	691b      	ldr	r3, [r3, #16]
 8008262:	021a      	lsls	r2, r3, #8
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	430a      	orrs	r2, r1
 800826a:	619a      	str	r2, [r3, #24]
      break;
 800826c:	e088      	b.n	8008380 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	68ba      	ldr	r2, [r7, #8]
 8008274:	0011      	movs	r1, r2
 8008276:	0018      	movs	r0, r3
 8008278:	f000 faea 	bl	8008850 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	69da      	ldr	r2, [r3, #28]
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	2108      	movs	r1, #8
 8008288:	430a      	orrs	r2, r1
 800828a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	69da      	ldr	r2, [r3, #28]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	2104      	movs	r1, #4
 8008298:	438a      	bics	r2, r1
 800829a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	69d9      	ldr	r1, [r3, #28]
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	691a      	ldr	r2, [r3, #16]
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	430a      	orrs	r2, r1
 80082ac:	61da      	str	r2, [r3, #28]
      break;
 80082ae:	e067      	b.n	8008380 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	68ba      	ldr	r2, [r7, #8]
 80082b6:	0011      	movs	r1, r2
 80082b8:	0018      	movs	r0, r3
 80082ba:	f000 fb51 	bl	8008960 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	69da      	ldr	r2, [r3, #28]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	2180      	movs	r1, #128	; 0x80
 80082ca:	0109      	lsls	r1, r1, #4
 80082cc:	430a      	orrs	r2, r1
 80082ce:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	69da      	ldr	r2, [r3, #28]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	492f      	ldr	r1, [pc, #188]	; (8008398 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80082dc:	400a      	ands	r2, r1
 80082de:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	69d9      	ldr	r1, [r3, #28]
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	021a      	lsls	r2, r3, #8
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	430a      	orrs	r2, r1
 80082f2:	61da      	str	r2, [r3, #28]
      break;
 80082f4:	e044      	b.n	8008380 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	68ba      	ldr	r2, [r7, #8]
 80082fc:	0011      	movs	r1, r2
 80082fe:	0018      	movs	r0, r3
 8008300:	f000 fb98 	bl	8008a34 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	2108      	movs	r1, #8
 8008310:	430a      	orrs	r2, r1
 8008312:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	2104      	movs	r1, #4
 8008320:	438a      	bics	r2, r1
 8008322:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	691a      	ldr	r2, [r3, #16]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	430a      	orrs	r2, r1
 8008334:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008336:	e023      	b.n	8008380 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	68ba      	ldr	r2, [r7, #8]
 800833e:	0011      	movs	r1, r2
 8008340:	0018      	movs	r0, r3
 8008342:	f000 fbd7 	bl	8008af4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2180      	movs	r1, #128	; 0x80
 8008352:	0109      	lsls	r1, r1, #4
 8008354:	430a      	orrs	r2, r1
 8008356:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	490d      	ldr	r1, [pc, #52]	; (8008398 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8008364:	400a      	ands	r2, r1
 8008366:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	691b      	ldr	r3, [r3, #16]
 8008372:	021a      	lsls	r2, r3, #8
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	430a      	orrs	r2, r1
 800837a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800837c:	e000      	b.n	8008380 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 800837e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	223c      	movs	r2, #60	; 0x3c
 8008384:	2100      	movs	r1, #0
 8008386:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008388:	2300      	movs	r3, #0
}
 800838a:	0018      	movs	r0, r3
 800838c:	46bd      	mov	sp, r7
 800838e:	b004      	add	sp, #16
 8008390:	bd80      	pop	{r7, pc}
 8008392:	46c0      	nop			; (mov r8, r8)
 8008394:	0800a808 	.word	0x0800a808
 8008398:	fffffbff 	.word	0xfffffbff

0800839c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	223c      	movs	r2, #60	; 0x3c
 80083aa:	5c9b      	ldrb	r3, [r3, r2]
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d101      	bne.n	80083b4 <HAL_TIM_ConfigClockSource+0x18>
 80083b0:	2302      	movs	r3, #2
 80083b2:	e0b7      	b.n	8008524 <HAL_TIM_ConfigClockSource+0x188>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	223c      	movs	r2, #60	; 0x3c
 80083b8:	2101      	movs	r1, #1
 80083ba:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	223d      	movs	r2, #61	; 0x3d
 80083c0:	2102      	movs	r1, #2
 80083c2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	4a57      	ldr	r2, [pc, #348]	; (800852c <HAL_TIM_ConfigClockSource+0x190>)
 80083d0:	4013      	ands	r3, r2
 80083d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	4a56      	ldr	r2, [pc, #344]	; (8008530 <HAL_TIM_ConfigClockSource+0x194>)
 80083d8:	4013      	ands	r3, r2
 80083da:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	68fa      	ldr	r2, [r7, #12]
 80083e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2280      	movs	r2, #128	; 0x80
 80083ea:	0192      	lsls	r2, r2, #6
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d040      	beq.n	8008472 <HAL_TIM_ConfigClockSource+0xd6>
 80083f0:	2280      	movs	r2, #128	; 0x80
 80083f2:	0192      	lsls	r2, r2, #6
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d900      	bls.n	80083fa <HAL_TIM_ConfigClockSource+0x5e>
 80083f8:	e088      	b.n	800850c <HAL_TIM_ConfigClockSource+0x170>
 80083fa:	2280      	movs	r2, #128	; 0x80
 80083fc:	0152      	lsls	r2, r2, #5
 80083fe:	4293      	cmp	r3, r2
 8008400:	d100      	bne.n	8008404 <HAL_TIM_ConfigClockSource+0x68>
 8008402:	e085      	b.n	8008510 <HAL_TIM_ConfigClockSource+0x174>
 8008404:	2280      	movs	r2, #128	; 0x80
 8008406:	0152      	lsls	r2, r2, #5
 8008408:	4293      	cmp	r3, r2
 800840a:	d900      	bls.n	800840e <HAL_TIM_ConfigClockSource+0x72>
 800840c:	e07e      	b.n	800850c <HAL_TIM_ConfigClockSource+0x170>
 800840e:	2b70      	cmp	r3, #112	; 0x70
 8008410:	d018      	beq.n	8008444 <HAL_TIM_ConfigClockSource+0xa8>
 8008412:	d900      	bls.n	8008416 <HAL_TIM_ConfigClockSource+0x7a>
 8008414:	e07a      	b.n	800850c <HAL_TIM_ConfigClockSource+0x170>
 8008416:	2b60      	cmp	r3, #96	; 0x60
 8008418:	d04f      	beq.n	80084ba <HAL_TIM_ConfigClockSource+0x11e>
 800841a:	d900      	bls.n	800841e <HAL_TIM_ConfigClockSource+0x82>
 800841c:	e076      	b.n	800850c <HAL_TIM_ConfigClockSource+0x170>
 800841e:	2b50      	cmp	r3, #80	; 0x50
 8008420:	d03b      	beq.n	800849a <HAL_TIM_ConfigClockSource+0xfe>
 8008422:	d900      	bls.n	8008426 <HAL_TIM_ConfigClockSource+0x8a>
 8008424:	e072      	b.n	800850c <HAL_TIM_ConfigClockSource+0x170>
 8008426:	2b40      	cmp	r3, #64	; 0x40
 8008428:	d057      	beq.n	80084da <HAL_TIM_ConfigClockSource+0x13e>
 800842a:	d900      	bls.n	800842e <HAL_TIM_ConfigClockSource+0x92>
 800842c:	e06e      	b.n	800850c <HAL_TIM_ConfigClockSource+0x170>
 800842e:	2b30      	cmp	r3, #48	; 0x30
 8008430:	d063      	beq.n	80084fa <HAL_TIM_ConfigClockSource+0x15e>
 8008432:	d86b      	bhi.n	800850c <HAL_TIM_ConfigClockSource+0x170>
 8008434:	2b20      	cmp	r3, #32
 8008436:	d060      	beq.n	80084fa <HAL_TIM_ConfigClockSource+0x15e>
 8008438:	d868      	bhi.n	800850c <HAL_TIM_ConfigClockSource+0x170>
 800843a:	2b00      	cmp	r3, #0
 800843c:	d05d      	beq.n	80084fa <HAL_TIM_ConfigClockSource+0x15e>
 800843e:	2b10      	cmp	r3, #16
 8008440:	d05b      	beq.n	80084fa <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008442:	e063      	b.n	800850c <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6818      	ldr	r0, [r3, #0]
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	6899      	ldr	r1, [r3, #8]
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	685a      	ldr	r2, [r3, #4]
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	68db      	ldr	r3, [r3, #12]
 8008454:	f000 fc2e 	bl	8008cb4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2277      	movs	r2, #119	; 0x77
 8008464:	4313      	orrs	r3, r2
 8008466:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	68fa      	ldr	r2, [r7, #12]
 800846e:	609a      	str	r2, [r3, #8]
      break;
 8008470:	e04f      	b.n	8008512 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6818      	ldr	r0, [r3, #0]
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	6899      	ldr	r1, [r3, #8]
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	685a      	ldr	r2, [r3, #4]
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	f000 fc17 	bl	8008cb4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	689a      	ldr	r2, [r3, #8]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	2180      	movs	r1, #128	; 0x80
 8008492:	01c9      	lsls	r1, r1, #7
 8008494:	430a      	orrs	r2, r1
 8008496:	609a      	str	r2, [r3, #8]
      break;
 8008498:	e03b      	b.n	8008512 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6818      	ldr	r0, [r3, #0]
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	6859      	ldr	r1, [r3, #4]
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	68db      	ldr	r3, [r3, #12]
 80084a6:	001a      	movs	r2, r3
 80084a8:	f000 fb88 	bl	8008bbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	2150      	movs	r1, #80	; 0x50
 80084b2:	0018      	movs	r0, r3
 80084b4:	f000 fbe2 	bl	8008c7c <TIM_ITRx_SetConfig>
      break;
 80084b8:	e02b      	b.n	8008512 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6818      	ldr	r0, [r3, #0]
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	6859      	ldr	r1, [r3, #4]
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	001a      	movs	r2, r3
 80084c8:	f000 fba6 	bl	8008c18 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	2160      	movs	r1, #96	; 0x60
 80084d2:	0018      	movs	r0, r3
 80084d4:	f000 fbd2 	bl	8008c7c <TIM_ITRx_SetConfig>
      break;
 80084d8:	e01b      	b.n	8008512 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6818      	ldr	r0, [r3, #0]
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	6859      	ldr	r1, [r3, #4]
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	68db      	ldr	r3, [r3, #12]
 80084e6:	001a      	movs	r2, r3
 80084e8:	f000 fb68 	bl	8008bbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	2140      	movs	r1, #64	; 0x40
 80084f2:	0018      	movs	r0, r3
 80084f4:	f000 fbc2 	bl	8008c7c <TIM_ITRx_SetConfig>
      break;
 80084f8:	e00b      	b.n	8008512 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	0019      	movs	r1, r3
 8008504:	0010      	movs	r0, r2
 8008506:	f000 fbb9 	bl	8008c7c <TIM_ITRx_SetConfig>
        break;
 800850a:	e002      	b.n	8008512 <HAL_TIM_ConfigClockSource+0x176>
      break;
 800850c:	46c0      	nop			; (mov r8, r8)
 800850e:	e000      	b.n	8008512 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8008510:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	223d      	movs	r2, #61	; 0x3d
 8008516:	2101      	movs	r1, #1
 8008518:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	223c      	movs	r2, #60	; 0x3c
 800851e:	2100      	movs	r1, #0
 8008520:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008522:	2300      	movs	r3, #0
}
 8008524:	0018      	movs	r0, r3
 8008526:	46bd      	mov	sp, r7
 8008528:	b004      	add	sp, #16
 800852a:	bd80      	pop	{r7, pc}
 800852c:	ffceff88 	.word	0xffceff88
 8008530:	ffff00ff 	.word	0xffff00ff

08008534 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	4a34      	ldr	r2, [pc, #208]	; (8008618 <TIM_Base_SetConfig+0xe4>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d008      	beq.n	800855e <TIM_Base_SetConfig+0x2a>
 800854c:	687a      	ldr	r2, [r7, #4]
 800854e:	2380      	movs	r3, #128	; 0x80
 8008550:	05db      	lsls	r3, r3, #23
 8008552:	429a      	cmp	r2, r3
 8008554:	d003      	beq.n	800855e <TIM_Base_SetConfig+0x2a>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	4a30      	ldr	r2, [pc, #192]	; (800861c <TIM_Base_SetConfig+0xe8>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d108      	bne.n	8008570 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2270      	movs	r2, #112	; 0x70
 8008562:	4393      	bics	r3, r2
 8008564:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	68fa      	ldr	r2, [r7, #12]
 800856c:	4313      	orrs	r3, r2
 800856e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	4a29      	ldr	r2, [pc, #164]	; (8008618 <TIM_Base_SetConfig+0xe4>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d018      	beq.n	80085aa <TIM_Base_SetConfig+0x76>
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	2380      	movs	r3, #128	; 0x80
 800857c:	05db      	lsls	r3, r3, #23
 800857e:	429a      	cmp	r2, r3
 8008580:	d013      	beq.n	80085aa <TIM_Base_SetConfig+0x76>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4a25      	ldr	r2, [pc, #148]	; (800861c <TIM_Base_SetConfig+0xe8>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d00f      	beq.n	80085aa <TIM_Base_SetConfig+0x76>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	4a24      	ldr	r2, [pc, #144]	; (8008620 <TIM_Base_SetConfig+0xec>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d00b      	beq.n	80085aa <TIM_Base_SetConfig+0x76>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4a23      	ldr	r2, [pc, #140]	; (8008624 <TIM_Base_SetConfig+0xf0>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d007      	beq.n	80085aa <TIM_Base_SetConfig+0x76>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	4a22      	ldr	r2, [pc, #136]	; (8008628 <TIM_Base_SetConfig+0xf4>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d003      	beq.n	80085aa <TIM_Base_SetConfig+0x76>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4a21      	ldr	r2, [pc, #132]	; (800862c <TIM_Base_SetConfig+0xf8>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d108      	bne.n	80085bc <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	4a20      	ldr	r2, [pc, #128]	; (8008630 <TIM_Base_SetConfig+0xfc>)
 80085ae:	4013      	ands	r3, r2
 80085b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	68fa      	ldr	r2, [r7, #12]
 80085b8:	4313      	orrs	r3, r2
 80085ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2280      	movs	r2, #128	; 0x80
 80085c0:	4393      	bics	r3, r2
 80085c2:	001a      	movs	r2, r3
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	695b      	ldr	r3, [r3, #20]
 80085c8:	4313      	orrs	r3, r2
 80085ca:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	68fa      	ldr	r2, [r7, #12]
 80085d0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	689a      	ldr	r2, [r3, #8]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	681a      	ldr	r2, [r3, #0]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	4a0c      	ldr	r2, [pc, #48]	; (8008618 <TIM_Base_SetConfig+0xe4>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d00b      	beq.n	8008602 <TIM_Base_SetConfig+0xce>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	4a0d      	ldr	r2, [pc, #52]	; (8008624 <TIM_Base_SetConfig+0xf0>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d007      	beq.n	8008602 <TIM_Base_SetConfig+0xce>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	4a0c      	ldr	r2, [pc, #48]	; (8008628 <TIM_Base_SetConfig+0xf4>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d003      	beq.n	8008602 <TIM_Base_SetConfig+0xce>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	4a0b      	ldr	r2, [pc, #44]	; (800862c <TIM_Base_SetConfig+0xf8>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d103      	bne.n	800860a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	691a      	ldr	r2, [r3, #16]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2201      	movs	r2, #1
 800860e:	615a      	str	r2, [r3, #20]
}
 8008610:	46c0      	nop			; (mov r8, r8)
 8008612:	46bd      	mov	sp, r7
 8008614:	b004      	add	sp, #16
 8008616:	bd80      	pop	{r7, pc}
 8008618:	40012c00 	.word	0x40012c00
 800861c:	40000400 	.word	0x40000400
 8008620:	40002000 	.word	0x40002000
 8008624:	40014000 	.word	0x40014000
 8008628:	40014400 	.word	0x40014400
 800862c:	40014800 	.word	0x40014800
 8008630:	fffffcff 	.word	0xfffffcff

08008634 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b086      	sub	sp, #24
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6a1b      	ldr	r3, [r3, #32]
 8008642:	2201      	movs	r2, #1
 8008644:	4393      	bics	r3, r2
 8008646:	001a      	movs	r2, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6a1b      	ldr	r3, [r3, #32]
 8008650:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	699b      	ldr	r3, [r3, #24]
 800865c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	4a32      	ldr	r2, [pc, #200]	; (800872c <TIM_OC1_SetConfig+0xf8>)
 8008662:	4013      	ands	r3, r2
 8008664:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2203      	movs	r2, #3
 800866a:	4393      	bics	r3, r2
 800866c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	68fa      	ldr	r2, [r7, #12]
 8008674:	4313      	orrs	r3, r2
 8008676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	2202      	movs	r2, #2
 800867c:	4393      	bics	r3, r2
 800867e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	697a      	ldr	r2, [r7, #20]
 8008686:	4313      	orrs	r3, r2
 8008688:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4a28      	ldr	r2, [pc, #160]	; (8008730 <TIM_OC1_SetConfig+0xfc>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d00b      	beq.n	80086aa <TIM_OC1_SetConfig+0x76>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4a27      	ldr	r2, [pc, #156]	; (8008734 <TIM_OC1_SetConfig+0x100>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d007      	beq.n	80086aa <TIM_OC1_SetConfig+0x76>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4a26      	ldr	r2, [pc, #152]	; (8008738 <TIM_OC1_SetConfig+0x104>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d003      	beq.n	80086aa <TIM_OC1_SetConfig+0x76>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4a25      	ldr	r2, [pc, #148]	; (800873c <TIM_OC1_SetConfig+0x108>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d10c      	bne.n	80086c4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	2208      	movs	r2, #8
 80086ae:	4393      	bics	r3, r2
 80086b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	68db      	ldr	r3, [r3, #12]
 80086b6:	697a      	ldr	r2, [r7, #20]
 80086b8:	4313      	orrs	r3, r2
 80086ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	2204      	movs	r2, #4
 80086c0:	4393      	bics	r3, r2
 80086c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	4a1a      	ldr	r2, [pc, #104]	; (8008730 <TIM_OC1_SetConfig+0xfc>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d00b      	beq.n	80086e4 <TIM_OC1_SetConfig+0xb0>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	4a19      	ldr	r2, [pc, #100]	; (8008734 <TIM_OC1_SetConfig+0x100>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d007      	beq.n	80086e4 <TIM_OC1_SetConfig+0xb0>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	4a18      	ldr	r2, [pc, #96]	; (8008738 <TIM_OC1_SetConfig+0x104>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d003      	beq.n	80086e4 <TIM_OC1_SetConfig+0xb0>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	4a17      	ldr	r2, [pc, #92]	; (800873c <TIM_OC1_SetConfig+0x108>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d111      	bne.n	8008708 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	4a16      	ldr	r2, [pc, #88]	; (8008740 <TIM_OC1_SetConfig+0x10c>)
 80086e8:	4013      	ands	r3, r2
 80086ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	4a15      	ldr	r2, [pc, #84]	; (8008744 <TIM_OC1_SetConfig+0x110>)
 80086f0:	4013      	ands	r3, r2
 80086f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	695b      	ldr	r3, [r3, #20]
 80086f8:	693a      	ldr	r2, [r7, #16]
 80086fa:	4313      	orrs	r3, r2
 80086fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	699b      	ldr	r3, [r3, #24]
 8008702:	693a      	ldr	r2, [r7, #16]
 8008704:	4313      	orrs	r3, r2
 8008706:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	693a      	ldr	r2, [r7, #16]
 800870c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	68fa      	ldr	r2, [r7, #12]
 8008712:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	685a      	ldr	r2, [r3, #4]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	697a      	ldr	r2, [r7, #20]
 8008720:	621a      	str	r2, [r3, #32]
}
 8008722:	46c0      	nop			; (mov r8, r8)
 8008724:	46bd      	mov	sp, r7
 8008726:	b006      	add	sp, #24
 8008728:	bd80      	pop	{r7, pc}
 800872a:	46c0      	nop			; (mov r8, r8)
 800872c:	fffeff8f 	.word	0xfffeff8f
 8008730:	40012c00 	.word	0x40012c00
 8008734:	40014000 	.word	0x40014000
 8008738:	40014400 	.word	0x40014400
 800873c:	40014800 	.word	0x40014800
 8008740:	fffffeff 	.word	0xfffffeff
 8008744:	fffffdff 	.word	0xfffffdff

08008748 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b086      	sub	sp, #24
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6a1b      	ldr	r3, [r3, #32]
 8008756:	2210      	movs	r2, #16
 8008758:	4393      	bics	r3, r2
 800875a:	001a      	movs	r2, r3
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6a1b      	ldr	r3, [r3, #32]
 8008764:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	699b      	ldr	r3, [r3, #24]
 8008770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	4a2e      	ldr	r2, [pc, #184]	; (8008830 <TIM_OC2_SetConfig+0xe8>)
 8008776:	4013      	ands	r3, r2
 8008778:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	4a2d      	ldr	r2, [pc, #180]	; (8008834 <TIM_OC2_SetConfig+0xec>)
 800877e:	4013      	ands	r3, r2
 8008780:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	021b      	lsls	r3, r3, #8
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	4313      	orrs	r3, r2
 800878c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	2220      	movs	r2, #32
 8008792:	4393      	bics	r3, r2
 8008794:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	011b      	lsls	r3, r3, #4
 800879c:	697a      	ldr	r2, [r7, #20]
 800879e:	4313      	orrs	r3, r2
 80087a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4a24      	ldr	r2, [pc, #144]	; (8008838 <TIM_OC2_SetConfig+0xf0>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d10d      	bne.n	80087c6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	2280      	movs	r2, #128	; 0x80
 80087ae:	4393      	bics	r3, r2
 80087b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	68db      	ldr	r3, [r3, #12]
 80087b6:	011b      	lsls	r3, r3, #4
 80087b8:	697a      	ldr	r2, [r7, #20]
 80087ba:	4313      	orrs	r3, r2
 80087bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	2240      	movs	r2, #64	; 0x40
 80087c2:	4393      	bics	r3, r2
 80087c4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	4a1b      	ldr	r2, [pc, #108]	; (8008838 <TIM_OC2_SetConfig+0xf0>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d00b      	beq.n	80087e6 <TIM_OC2_SetConfig+0x9e>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	4a1a      	ldr	r2, [pc, #104]	; (800883c <TIM_OC2_SetConfig+0xf4>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d007      	beq.n	80087e6 <TIM_OC2_SetConfig+0x9e>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	4a19      	ldr	r2, [pc, #100]	; (8008840 <TIM_OC2_SetConfig+0xf8>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d003      	beq.n	80087e6 <TIM_OC2_SetConfig+0x9e>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	4a18      	ldr	r2, [pc, #96]	; (8008844 <TIM_OC2_SetConfig+0xfc>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d113      	bne.n	800880e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	4a17      	ldr	r2, [pc, #92]	; (8008848 <TIM_OC2_SetConfig+0x100>)
 80087ea:	4013      	ands	r3, r2
 80087ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	4a16      	ldr	r2, [pc, #88]	; (800884c <TIM_OC2_SetConfig+0x104>)
 80087f2:	4013      	ands	r3, r2
 80087f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	695b      	ldr	r3, [r3, #20]
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	693a      	ldr	r2, [r7, #16]
 80087fe:	4313      	orrs	r3, r2
 8008800:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	699b      	ldr	r3, [r3, #24]
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	693a      	ldr	r2, [r7, #16]
 800880a:	4313      	orrs	r3, r2
 800880c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	693a      	ldr	r2, [r7, #16]
 8008812:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	68fa      	ldr	r2, [r7, #12]
 8008818:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	685a      	ldr	r2, [r3, #4]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	697a      	ldr	r2, [r7, #20]
 8008826:	621a      	str	r2, [r3, #32]
}
 8008828:	46c0      	nop			; (mov r8, r8)
 800882a:	46bd      	mov	sp, r7
 800882c:	b006      	add	sp, #24
 800882e:	bd80      	pop	{r7, pc}
 8008830:	feff8fff 	.word	0xfeff8fff
 8008834:	fffffcff 	.word	0xfffffcff
 8008838:	40012c00 	.word	0x40012c00
 800883c:	40014000 	.word	0x40014000
 8008840:	40014400 	.word	0x40014400
 8008844:	40014800 	.word	0x40014800
 8008848:	fffffbff 	.word	0xfffffbff
 800884c:	fffff7ff 	.word	0xfffff7ff

08008850 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b086      	sub	sp, #24
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6a1b      	ldr	r3, [r3, #32]
 800885e:	4a35      	ldr	r2, [pc, #212]	; (8008934 <TIM_OC3_SetConfig+0xe4>)
 8008860:	401a      	ands	r2, r3
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6a1b      	ldr	r3, [r3, #32]
 800886a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	69db      	ldr	r3, [r3, #28]
 8008876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	4a2f      	ldr	r2, [pc, #188]	; (8008938 <TIM_OC3_SetConfig+0xe8>)
 800887c:	4013      	ands	r3, r2
 800887e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2203      	movs	r2, #3
 8008884:	4393      	bics	r3, r2
 8008886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	68fa      	ldr	r2, [r7, #12]
 800888e:	4313      	orrs	r3, r2
 8008890:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	4a29      	ldr	r2, [pc, #164]	; (800893c <TIM_OC3_SetConfig+0xec>)
 8008896:	4013      	ands	r3, r2
 8008898:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	689b      	ldr	r3, [r3, #8]
 800889e:	021b      	lsls	r3, r3, #8
 80088a0:	697a      	ldr	r2, [r7, #20]
 80088a2:	4313      	orrs	r3, r2
 80088a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	4a25      	ldr	r2, [pc, #148]	; (8008940 <TIM_OC3_SetConfig+0xf0>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d10d      	bne.n	80088ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	4a24      	ldr	r2, [pc, #144]	; (8008944 <TIM_OC3_SetConfig+0xf4>)
 80088b2:	4013      	ands	r3, r2
 80088b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	68db      	ldr	r3, [r3, #12]
 80088ba:	021b      	lsls	r3, r3, #8
 80088bc:	697a      	ldr	r2, [r7, #20]
 80088be:	4313      	orrs	r3, r2
 80088c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	4a20      	ldr	r2, [pc, #128]	; (8008948 <TIM_OC3_SetConfig+0xf8>)
 80088c6:	4013      	ands	r3, r2
 80088c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	4a1c      	ldr	r2, [pc, #112]	; (8008940 <TIM_OC3_SetConfig+0xf0>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d00b      	beq.n	80088ea <TIM_OC3_SetConfig+0x9a>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	4a1d      	ldr	r2, [pc, #116]	; (800894c <TIM_OC3_SetConfig+0xfc>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d007      	beq.n	80088ea <TIM_OC3_SetConfig+0x9a>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	4a1c      	ldr	r2, [pc, #112]	; (8008950 <TIM_OC3_SetConfig+0x100>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d003      	beq.n	80088ea <TIM_OC3_SetConfig+0x9a>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	4a1b      	ldr	r2, [pc, #108]	; (8008954 <TIM_OC3_SetConfig+0x104>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d113      	bne.n	8008912 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	4a1a      	ldr	r2, [pc, #104]	; (8008958 <TIM_OC3_SetConfig+0x108>)
 80088ee:	4013      	ands	r3, r2
 80088f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	4a19      	ldr	r2, [pc, #100]	; (800895c <TIM_OC3_SetConfig+0x10c>)
 80088f6:	4013      	ands	r3, r2
 80088f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	695b      	ldr	r3, [r3, #20]
 80088fe:	011b      	lsls	r3, r3, #4
 8008900:	693a      	ldr	r2, [r7, #16]
 8008902:	4313      	orrs	r3, r2
 8008904:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	699b      	ldr	r3, [r3, #24]
 800890a:	011b      	lsls	r3, r3, #4
 800890c:	693a      	ldr	r2, [r7, #16]
 800890e:	4313      	orrs	r3, r2
 8008910:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	693a      	ldr	r2, [r7, #16]
 8008916:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	68fa      	ldr	r2, [r7, #12]
 800891c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	685a      	ldr	r2, [r3, #4]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	697a      	ldr	r2, [r7, #20]
 800892a:	621a      	str	r2, [r3, #32]
}
 800892c:	46c0      	nop			; (mov r8, r8)
 800892e:	46bd      	mov	sp, r7
 8008930:	b006      	add	sp, #24
 8008932:	bd80      	pop	{r7, pc}
 8008934:	fffffeff 	.word	0xfffffeff
 8008938:	fffeff8f 	.word	0xfffeff8f
 800893c:	fffffdff 	.word	0xfffffdff
 8008940:	40012c00 	.word	0x40012c00
 8008944:	fffff7ff 	.word	0xfffff7ff
 8008948:	fffffbff 	.word	0xfffffbff
 800894c:	40014000 	.word	0x40014000
 8008950:	40014400 	.word	0x40014400
 8008954:	40014800 	.word	0x40014800
 8008958:	ffffefff 	.word	0xffffefff
 800895c:	ffffdfff 	.word	0xffffdfff

08008960 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b086      	sub	sp, #24
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6a1b      	ldr	r3, [r3, #32]
 800896e:	4a28      	ldr	r2, [pc, #160]	; (8008a10 <TIM_OC4_SetConfig+0xb0>)
 8008970:	401a      	ands	r2, r3
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6a1b      	ldr	r3, [r3, #32]
 800897a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	69db      	ldr	r3, [r3, #28]
 8008986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	4a22      	ldr	r2, [pc, #136]	; (8008a14 <TIM_OC4_SetConfig+0xb4>)
 800898c:	4013      	ands	r3, r2
 800898e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	4a21      	ldr	r2, [pc, #132]	; (8008a18 <TIM_OC4_SetConfig+0xb8>)
 8008994:	4013      	ands	r3, r2
 8008996:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	021b      	lsls	r3, r3, #8
 800899e:	68fa      	ldr	r2, [r7, #12]
 80089a0:	4313      	orrs	r3, r2
 80089a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	4a1d      	ldr	r2, [pc, #116]	; (8008a1c <TIM_OC4_SetConfig+0xbc>)
 80089a8:	4013      	ands	r3, r2
 80089aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	031b      	lsls	r3, r3, #12
 80089b2:	693a      	ldr	r2, [r7, #16]
 80089b4:	4313      	orrs	r3, r2
 80089b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	4a19      	ldr	r2, [pc, #100]	; (8008a20 <TIM_OC4_SetConfig+0xc0>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d00b      	beq.n	80089d8 <TIM_OC4_SetConfig+0x78>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	4a18      	ldr	r2, [pc, #96]	; (8008a24 <TIM_OC4_SetConfig+0xc4>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d007      	beq.n	80089d8 <TIM_OC4_SetConfig+0x78>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	4a17      	ldr	r2, [pc, #92]	; (8008a28 <TIM_OC4_SetConfig+0xc8>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d003      	beq.n	80089d8 <TIM_OC4_SetConfig+0x78>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	4a16      	ldr	r2, [pc, #88]	; (8008a2c <TIM_OC4_SetConfig+0xcc>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d109      	bne.n	80089ec <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	4a15      	ldr	r2, [pc, #84]	; (8008a30 <TIM_OC4_SetConfig+0xd0>)
 80089dc:	4013      	ands	r3, r2
 80089de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	695b      	ldr	r3, [r3, #20]
 80089e4:	019b      	lsls	r3, r3, #6
 80089e6:	697a      	ldr	r2, [r7, #20]
 80089e8:	4313      	orrs	r3, r2
 80089ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	697a      	ldr	r2, [r7, #20]
 80089f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	68fa      	ldr	r2, [r7, #12]
 80089f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	685a      	ldr	r2, [r3, #4]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	693a      	ldr	r2, [r7, #16]
 8008a04:	621a      	str	r2, [r3, #32]
}
 8008a06:	46c0      	nop			; (mov r8, r8)
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	b006      	add	sp, #24
 8008a0c:	bd80      	pop	{r7, pc}
 8008a0e:	46c0      	nop			; (mov r8, r8)
 8008a10:	ffffefff 	.word	0xffffefff
 8008a14:	feff8fff 	.word	0xfeff8fff
 8008a18:	fffffcff 	.word	0xfffffcff
 8008a1c:	ffffdfff 	.word	0xffffdfff
 8008a20:	40012c00 	.word	0x40012c00
 8008a24:	40014000 	.word	0x40014000
 8008a28:	40014400 	.word	0x40014400
 8008a2c:	40014800 	.word	0x40014800
 8008a30:	ffffbfff 	.word	0xffffbfff

08008a34 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b086      	sub	sp, #24
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6a1b      	ldr	r3, [r3, #32]
 8008a42:	4a25      	ldr	r2, [pc, #148]	; (8008ad8 <TIM_OC5_SetConfig+0xa4>)
 8008a44:	401a      	ands	r2, r3
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6a1b      	ldr	r3, [r3, #32]
 8008a4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	4a1f      	ldr	r2, [pc, #124]	; (8008adc <TIM_OC5_SetConfig+0xa8>)
 8008a60:	4013      	ands	r3, r2
 8008a62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	68fa      	ldr	r2, [r7, #12]
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	4a1b      	ldr	r2, [pc, #108]	; (8008ae0 <TIM_OC5_SetConfig+0xac>)
 8008a72:	4013      	ands	r3, r2
 8008a74:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	041b      	lsls	r3, r3, #16
 8008a7c:	693a      	ldr	r2, [r7, #16]
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	4a17      	ldr	r2, [pc, #92]	; (8008ae4 <TIM_OC5_SetConfig+0xb0>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d00b      	beq.n	8008aa2 <TIM_OC5_SetConfig+0x6e>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	4a16      	ldr	r2, [pc, #88]	; (8008ae8 <TIM_OC5_SetConfig+0xb4>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d007      	beq.n	8008aa2 <TIM_OC5_SetConfig+0x6e>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	4a15      	ldr	r2, [pc, #84]	; (8008aec <TIM_OC5_SetConfig+0xb8>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d003      	beq.n	8008aa2 <TIM_OC5_SetConfig+0x6e>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	4a14      	ldr	r2, [pc, #80]	; (8008af0 <TIM_OC5_SetConfig+0xbc>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d109      	bne.n	8008ab6 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	4a0c      	ldr	r2, [pc, #48]	; (8008ad8 <TIM_OC5_SetConfig+0xa4>)
 8008aa6:	4013      	ands	r3, r2
 8008aa8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	695b      	ldr	r3, [r3, #20]
 8008aae:	021b      	lsls	r3, r3, #8
 8008ab0:	697a      	ldr	r2, [r7, #20]
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	697a      	ldr	r2, [r7, #20]
 8008aba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	68fa      	ldr	r2, [r7, #12]
 8008ac0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	685a      	ldr	r2, [r3, #4]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	693a      	ldr	r2, [r7, #16]
 8008ace:	621a      	str	r2, [r3, #32]
}
 8008ad0:	46c0      	nop			; (mov r8, r8)
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	b006      	add	sp, #24
 8008ad6:	bd80      	pop	{r7, pc}
 8008ad8:	fffeffff 	.word	0xfffeffff
 8008adc:	fffeff8f 	.word	0xfffeff8f
 8008ae0:	fffdffff 	.word	0xfffdffff
 8008ae4:	40012c00 	.word	0x40012c00
 8008ae8:	40014000 	.word	0x40014000
 8008aec:	40014400 	.word	0x40014400
 8008af0:	40014800 	.word	0x40014800

08008af4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b086      	sub	sp, #24
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6a1b      	ldr	r3, [r3, #32]
 8008b02:	4a26      	ldr	r2, [pc, #152]	; (8008b9c <TIM_OC6_SetConfig+0xa8>)
 8008b04:	401a      	ands	r2, r3
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6a1b      	ldr	r3, [r3, #32]
 8008b0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	4a20      	ldr	r2, [pc, #128]	; (8008ba0 <TIM_OC6_SetConfig+0xac>)
 8008b20:	4013      	ands	r3, r2
 8008b22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	021b      	lsls	r3, r3, #8
 8008b2a:	68fa      	ldr	r2, [r7, #12]
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	4a1c      	ldr	r2, [pc, #112]	; (8008ba4 <TIM_OC6_SetConfig+0xb0>)
 8008b34:	4013      	ands	r3, r2
 8008b36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	051b      	lsls	r3, r3, #20
 8008b3e:	693a      	ldr	r2, [r7, #16]
 8008b40:	4313      	orrs	r3, r2
 8008b42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	4a18      	ldr	r2, [pc, #96]	; (8008ba8 <TIM_OC6_SetConfig+0xb4>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d00b      	beq.n	8008b64 <TIM_OC6_SetConfig+0x70>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	4a17      	ldr	r2, [pc, #92]	; (8008bac <TIM_OC6_SetConfig+0xb8>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d007      	beq.n	8008b64 <TIM_OC6_SetConfig+0x70>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	4a16      	ldr	r2, [pc, #88]	; (8008bb0 <TIM_OC6_SetConfig+0xbc>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d003      	beq.n	8008b64 <TIM_OC6_SetConfig+0x70>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	4a15      	ldr	r2, [pc, #84]	; (8008bb4 <TIM_OC6_SetConfig+0xc0>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d109      	bne.n	8008b78 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	4a14      	ldr	r2, [pc, #80]	; (8008bb8 <TIM_OC6_SetConfig+0xc4>)
 8008b68:	4013      	ands	r3, r2
 8008b6a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	695b      	ldr	r3, [r3, #20]
 8008b70:	029b      	lsls	r3, r3, #10
 8008b72:	697a      	ldr	r2, [r7, #20]
 8008b74:	4313      	orrs	r3, r2
 8008b76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	697a      	ldr	r2, [r7, #20]
 8008b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	68fa      	ldr	r2, [r7, #12]
 8008b82:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	685a      	ldr	r2, [r3, #4]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	693a      	ldr	r2, [r7, #16]
 8008b90:	621a      	str	r2, [r3, #32]
}
 8008b92:	46c0      	nop			; (mov r8, r8)
 8008b94:	46bd      	mov	sp, r7
 8008b96:	b006      	add	sp, #24
 8008b98:	bd80      	pop	{r7, pc}
 8008b9a:	46c0      	nop			; (mov r8, r8)
 8008b9c:	ffefffff 	.word	0xffefffff
 8008ba0:	feff8fff 	.word	0xfeff8fff
 8008ba4:	ffdfffff 	.word	0xffdfffff
 8008ba8:	40012c00 	.word	0x40012c00
 8008bac:	40014000 	.word	0x40014000
 8008bb0:	40014400 	.word	0x40014400
 8008bb4:	40014800 	.word	0x40014800
 8008bb8:	fffbffff 	.word	0xfffbffff

08008bbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b086      	sub	sp, #24
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6a1b      	ldr	r3, [r3, #32]
 8008bcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	6a1b      	ldr	r3, [r3, #32]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	4393      	bics	r3, r2
 8008bd6:	001a      	movs	r2, r3
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	699b      	ldr	r3, [r3, #24]
 8008be0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	22f0      	movs	r2, #240	; 0xf0
 8008be6:	4393      	bics	r3, r2
 8008be8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	011b      	lsls	r3, r3, #4
 8008bee:	693a      	ldr	r2, [r7, #16]
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	220a      	movs	r2, #10
 8008bf8:	4393      	bics	r3, r2
 8008bfa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008bfc:	697a      	ldr	r2, [r7, #20]
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	4313      	orrs	r3, r2
 8008c02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	693a      	ldr	r2, [r7, #16]
 8008c08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	697a      	ldr	r2, [r7, #20]
 8008c0e:	621a      	str	r2, [r3, #32]
}
 8008c10:	46c0      	nop			; (mov r8, r8)
 8008c12:	46bd      	mov	sp, r7
 8008c14:	b006      	add	sp, #24
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b086      	sub	sp, #24
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	60f8      	str	r0, [r7, #12]
 8008c20:	60b9      	str	r1, [r7, #8]
 8008c22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	6a1b      	ldr	r3, [r3, #32]
 8008c28:	2210      	movs	r2, #16
 8008c2a:	4393      	bics	r3, r2
 8008c2c:	001a      	movs	r2, r3
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	699b      	ldr	r3, [r3, #24]
 8008c36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	6a1b      	ldr	r3, [r3, #32]
 8008c3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	4a0d      	ldr	r2, [pc, #52]	; (8008c78 <TIM_TI2_ConfigInputStage+0x60>)
 8008c42:	4013      	ands	r3, r2
 8008c44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	031b      	lsls	r3, r3, #12
 8008c4a:	697a      	ldr	r2, [r7, #20]
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	22a0      	movs	r2, #160	; 0xa0
 8008c54:	4393      	bics	r3, r2
 8008c56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	011b      	lsls	r3, r3, #4
 8008c5c:	693a      	ldr	r2, [r7, #16]
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	697a      	ldr	r2, [r7, #20]
 8008c66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	693a      	ldr	r2, [r7, #16]
 8008c6c:	621a      	str	r2, [r3, #32]
}
 8008c6e:	46c0      	nop			; (mov r8, r8)
 8008c70:	46bd      	mov	sp, r7
 8008c72:	b006      	add	sp, #24
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	46c0      	nop			; (mov r8, r8)
 8008c78:	ffff0fff 	.word	0xffff0fff

08008c7c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b084      	sub	sp, #16
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	4a08      	ldr	r2, [pc, #32]	; (8008cb0 <TIM_ITRx_SetConfig+0x34>)
 8008c90:	4013      	ands	r3, r2
 8008c92:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c94:	683a      	ldr	r2, [r7, #0]
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	2207      	movs	r2, #7
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	68fa      	ldr	r2, [r7, #12]
 8008ca4:	609a      	str	r2, [r3, #8]
}
 8008ca6:	46c0      	nop			; (mov r8, r8)
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	b004      	add	sp, #16
 8008cac:	bd80      	pop	{r7, pc}
 8008cae:	46c0      	nop			; (mov r8, r8)
 8008cb0:	ffcfff8f 	.word	0xffcfff8f

08008cb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b086      	sub	sp, #24
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	607a      	str	r2, [r7, #4]
 8008cc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	4a09      	ldr	r2, [pc, #36]	; (8008cf0 <TIM_ETR_SetConfig+0x3c>)
 8008ccc:	4013      	ands	r3, r2
 8008cce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	021a      	lsls	r2, r3, #8
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	431a      	orrs	r2, r3
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	697a      	ldr	r2, [r7, #20]
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	697a      	ldr	r2, [r7, #20]
 8008ce6:	609a      	str	r2, [r3, #8]
}
 8008ce8:	46c0      	nop			; (mov r8, r8)
 8008cea:	46bd      	mov	sp, r7
 8008cec:	b006      	add	sp, #24
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	ffff00ff 	.word	0xffff00ff

08008cf4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b086      	sub	sp, #24
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	60f8      	str	r0, [r7, #12]
 8008cfc:	60b9      	str	r1, [r7, #8]
 8008cfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	221f      	movs	r2, #31
 8008d04:	4013      	ands	r3, r2
 8008d06:	2201      	movs	r2, #1
 8008d08:	409a      	lsls	r2, r3
 8008d0a:	0013      	movs	r3, r2
 8008d0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	6a1b      	ldr	r3, [r3, #32]
 8008d12:	697a      	ldr	r2, [r7, #20]
 8008d14:	43d2      	mvns	r2, r2
 8008d16:	401a      	ands	r2, r3
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	6a1a      	ldr	r2, [r3, #32]
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	211f      	movs	r1, #31
 8008d24:	400b      	ands	r3, r1
 8008d26:	6879      	ldr	r1, [r7, #4]
 8008d28:	4099      	lsls	r1, r3
 8008d2a:	000b      	movs	r3, r1
 8008d2c:	431a      	orrs	r2, r3
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	621a      	str	r2, [r3, #32]
}
 8008d32:	46c0      	nop			; (mov r8, r8)
 8008d34:	46bd      	mov	sp, r7
 8008d36:	b006      	add	sp, #24
 8008d38:	bd80      	pop	{r7, pc}
	...

08008d3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b084      	sub	sp, #16
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	223c      	movs	r2, #60	; 0x3c
 8008d4a:	5c9b      	ldrb	r3, [r3, r2]
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d101      	bne.n	8008d54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d50:	2302      	movs	r3, #2
 8008d52:	e055      	b.n	8008e00 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	223c      	movs	r2, #60	; 0x3c
 8008d58:	2101      	movs	r1, #1
 8008d5a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	223d      	movs	r2, #61	; 0x3d
 8008d60:	2102      	movs	r1, #2
 8008d62:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a23      	ldr	r2, [pc, #140]	; (8008e08 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d108      	bne.n	8008d90 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	4a22      	ldr	r2, [pc, #136]	; (8008e0c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008d82:	4013      	ands	r3, r2
 8008d84:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	68fa      	ldr	r2, [r7, #12]
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2270      	movs	r2, #112	; 0x70
 8008d94:	4393      	bics	r3, r2
 8008d96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	68fa      	ldr	r2, [r7, #12]
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	68fa      	ldr	r2, [r7, #12]
 8008da8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a16      	ldr	r2, [pc, #88]	; (8008e08 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d00f      	beq.n	8008dd4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	2380      	movs	r3, #128	; 0x80
 8008dba:	05db      	lsls	r3, r3, #23
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d009      	beq.n	8008dd4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a12      	ldr	r2, [pc, #72]	; (8008e10 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d004      	beq.n	8008dd4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a11      	ldr	r2, [pc, #68]	; (8008e14 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d10c      	bne.n	8008dee <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	2280      	movs	r2, #128	; 0x80
 8008dd8:	4393      	bics	r3, r2
 8008dda:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	68ba      	ldr	r2, [r7, #8]
 8008de2:	4313      	orrs	r3, r2
 8008de4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	68ba      	ldr	r2, [r7, #8]
 8008dec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	223d      	movs	r2, #61	; 0x3d
 8008df2:	2101      	movs	r1, #1
 8008df4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	223c      	movs	r2, #60	; 0x3c
 8008dfa:	2100      	movs	r1, #0
 8008dfc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008dfe:	2300      	movs	r3, #0
}
 8008e00:	0018      	movs	r0, r3
 8008e02:	46bd      	mov	sp, r7
 8008e04:	b004      	add	sp, #16
 8008e06:	bd80      	pop	{r7, pc}
 8008e08:	40012c00 	.word	0x40012c00
 8008e0c:	ff0fffff 	.word	0xff0fffff
 8008e10:	40000400 	.word	0x40000400
 8008e14:	40014000 	.word	0x40014000

08008e18 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008e22:	2300      	movs	r3, #0
 8008e24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	223c      	movs	r2, #60	; 0x3c
 8008e2a:	5c9b      	ldrb	r3, [r3, r2]
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d101      	bne.n	8008e34 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008e30:	2302      	movs	r3, #2
 8008e32:	e079      	b.n	8008f28 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	223c      	movs	r2, #60	; 0x3c
 8008e38:	2101      	movs	r1, #1
 8008e3a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	22ff      	movs	r2, #255	; 0xff
 8008e40:	4393      	bics	r3, r2
 8008e42:	001a      	movs	r2, r3
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	4a38      	ldr	r2, [pc, #224]	; (8008f30 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8008e50:	401a      	ands	r2, r3
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	689b      	ldr	r3, [r3, #8]
 8008e56:	4313      	orrs	r3, r2
 8008e58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	4a35      	ldr	r2, [pc, #212]	; (8008f34 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008e5e:	401a      	ands	r2, r3
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	4313      	orrs	r3, r2
 8008e66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	4a33      	ldr	r2, [pc, #204]	; (8008f38 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008e6c:	401a      	ands	r2, r3
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4313      	orrs	r3, r2
 8008e74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	4a30      	ldr	r2, [pc, #192]	; (8008f3c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8008e7a:	401a      	ands	r2, r3
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	691b      	ldr	r3, [r3, #16]
 8008e80:	4313      	orrs	r3, r2
 8008e82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	4a2e      	ldr	r2, [pc, #184]	; (8008f40 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8008e88:	401a      	ands	r2, r3
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	695b      	ldr	r3, [r3, #20]
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	4a2b      	ldr	r2, [pc, #172]	; (8008f44 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8008e96:	401a      	ands	r2, r3
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	4a29      	ldr	r2, [pc, #164]	; (8008f48 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8008ea4:	401a      	ands	r2, r3
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	699b      	ldr	r3, [r3, #24]
 8008eaa:	041b      	lsls	r3, r3, #16
 8008eac:	4313      	orrs	r3, r2
 8008eae:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a25      	ldr	r2, [pc, #148]	; (8008f4c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d106      	bne.n	8008ec8 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	4a24      	ldr	r2, [pc, #144]	; (8008f50 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008ebe:	401a      	ands	r2, r3
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	69db      	ldr	r3, [r3, #28]
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a1f      	ldr	r2, [pc, #124]	; (8008f4c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d121      	bne.n	8008f16 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	4a1f      	ldr	r2, [pc, #124]	; (8008f54 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008ed6:	401a      	ands	r2, r3
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008edc:	051b      	lsls	r3, r3, #20
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	4a1c      	ldr	r2, [pc, #112]	; (8008f58 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8008ee6:	401a      	ands	r2, r3
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	6a1b      	ldr	r3, [r3, #32]
 8008eec:	4313      	orrs	r3, r2
 8008eee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	4a1a      	ldr	r2, [pc, #104]	; (8008f5c <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8008ef4:	401a      	ands	r2, r3
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efa:	4313      	orrs	r3, r2
 8008efc:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a12      	ldr	r2, [pc, #72]	; (8008f4c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d106      	bne.n	8008f16 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	4a15      	ldr	r2, [pc, #84]	; (8008f60 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8008f0c:	401a      	ands	r2, r3
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f12:	4313      	orrs	r3, r2
 8008f14:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	68fa      	ldr	r2, [r7, #12]
 8008f1c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	223c      	movs	r2, #60	; 0x3c
 8008f22:	2100      	movs	r1, #0
 8008f24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008f26:	2300      	movs	r3, #0
}
 8008f28:	0018      	movs	r0, r3
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	b004      	add	sp, #16
 8008f2e:	bd80      	pop	{r7, pc}
 8008f30:	fffffcff 	.word	0xfffffcff
 8008f34:	fffffbff 	.word	0xfffffbff
 8008f38:	fffff7ff 	.word	0xfffff7ff
 8008f3c:	ffffefff 	.word	0xffffefff
 8008f40:	ffffdfff 	.word	0xffffdfff
 8008f44:	ffffbfff 	.word	0xffffbfff
 8008f48:	fff0ffff 	.word	0xfff0ffff
 8008f4c:	40012c00 	.word	0x40012c00
 8008f50:	efffffff 	.word	0xefffffff
 8008f54:	ff0fffff 	.word	0xff0fffff
 8008f58:	feffffff 	.word	0xfeffffff
 8008f5c:	fdffffff 	.word	0xfdffffff
 8008f60:	dfffffff 	.word	0xdfffffff

08008f64 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b08a      	sub	sp, #40	; 0x28
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	60f8      	str	r0, [r7, #12]
 8008f6c:	60b9      	str	r1, [r7, #8]
 8008f6e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	223c      	movs	r2, #60	; 0x3c
 8008f74:	5c9b      	ldrb	r3, [r3, r2]
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d101      	bne.n	8008f7e <HAL_TIMEx_ConfigBreakInput+0x1a>
 8008f7a:	2302      	movs	r3, #2
 8008f7c:	e08e      	b.n	800909c <HAL_TIMEx_ConfigBreakInput+0x138>
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	223c      	movs	r2, #60	; 0x3c
 8008f82:	2101      	movs	r1, #1
 8008f84:	5499      	strb	r1, [r3, r2]

  switch (sBreakInputConfig->Source)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	2b04      	cmp	r3, #4
 8008f8c:	d019      	beq.n	8008fc2 <HAL_TIMEx_ConfigBreakInput+0x5e>
 8008f8e:	d822      	bhi.n	8008fd6 <HAL_TIMEx_ConfigBreakInput+0x72>
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d002      	beq.n	8008f9a <HAL_TIMEx_ConfigBreakInput+0x36>
 8008f94:	2b02      	cmp	r3, #2
 8008f96:	d00a      	beq.n	8008fae <HAL_TIMEx_ConfigBreakInput+0x4a>
 8008f98:	e01d      	b.n	8008fd6 <HAL_TIMEx_ConfigBreakInput+0x72>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 8008fa2:	2380      	movs	r3, #128	; 0x80
 8008fa4:	009b      	lsls	r3, r3, #2
 8008fa6:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 8008fa8:	2309      	movs	r3, #9
 8008faa:	61bb      	str	r3, [r7, #24]
      break;
 8008fac:	e01c      	b.n	8008fe8 <HAL_TIMEx_ConfigBreakInput+0x84>
    }
#if defined(COMP1) && defined(COMP2)
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 8008fae:	2302      	movs	r3, #2
 8008fb0:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 8008fb6:	2380      	movs	r3, #128	; 0x80
 8008fb8:	00db      	lsls	r3, r3, #3
 8008fba:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 8008fbc:	230a      	movs	r3, #10
 8008fbe:	61bb      	str	r3, [r7, #24]
      break;
 8008fc0:	e012      	b.n	8008fe8 <HAL_TIMEx_ConfigBreakInput+0x84>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 8008fc2:	2304      	movs	r3, #4
 8008fc4:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 8008fc6:	2302      	movs	r3, #2
 8008fc8:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 8008fca:	2380      	movs	r3, #128	; 0x80
 8008fcc:	011b      	lsls	r3, r3, #4
 8008fce:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 8008fd0:	230b      	movs	r3, #11
 8008fd2:	61bb      	str	r3, [r7, #24]
      break;
 8008fd4:	e008      	b.n	8008fe8 <HAL_TIMEx_ConfigBreakInput+0x84>
    }
#endif /* COMP3 */

    default:
    {
      bkin_enable_mask = 0U;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_polarity_mask = 0U;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = 0U;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	61bb      	str	r3, [r7, #24]
      break;
 8008fe6:	46c0      	nop			; (mov r8, r8)
    }
  }

  switch (BreakInput)
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	d003      	beq.n	8008ff6 <HAL_TIMEx_ConfigBreakInput+0x92>
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	2b02      	cmp	r3, #2
 8008ff2:	d027      	beq.n	8009044 <HAL_TIMEx_ConfigBreakInput+0xe0>
      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
      break;
    }
    default:
      break;
 8008ff4:	e04d      	b.n	8009092 <HAL_TIMEx_ConfigBreakInput+0x12e>
      tmporx = htim->Instance->AF1;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ffc:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 8008ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009000:	43da      	mvns	r2, r3
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	4013      	ands	r3, r2
 8009006:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	685a      	ldr	r2, [r3, #4]
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	409a      	lsls	r2, r3
 8009010:	0013      	movs	r3, r2
 8009012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009014:	4013      	ands	r3, r2
 8009016:	697a      	ldr	r2, [r7, #20]
 8009018:	4313      	orrs	r3, r2
 800901a:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 800901c:	6a3b      	ldr	r3, [r7, #32]
 800901e:	43da      	mvns	r2, r3
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	4013      	ands	r3, r2
 8009024:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	689a      	ldr	r2, [r3, #8]
 800902a:	69bb      	ldr	r3, [r7, #24]
 800902c:	409a      	lsls	r2, r3
 800902e:	0013      	movs	r3, r2
 8009030:	6a3a      	ldr	r2, [r7, #32]
 8009032:	4013      	ands	r3, r2
 8009034:	697a      	ldr	r2, [r7, #20]
 8009036:	4313      	orrs	r3, r2
 8009038:	617b      	str	r3, [r7, #20]
      htim->Instance->AF1 = tmporx;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	697a      	ldr	r2, [r7, #20]
 8009040:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 8009042:	e026      	b.n	8009092 <HAL_TIMEx_ConfigBreakInput+0x12e>
      tmporx = htim->Instance->AF2;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800904a:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 800904c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904e:	43da      	mvns	r2, r3
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	4013      	ands	r3, r2
 8009054:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	685a      	ldr	r2, [r3, #4]
 800905a:	69fb      	ldr	r3, [r7, #28]
 800905c:	409a      	lsls	r2, r3
 800905e:	0013      	movs	r3, r2
 8009060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009062:	4013      	ands	r3, r2
 8009064:	697a      	ldr	r2, [r7, #20]
 8009066:	4313      	orrs	r3, r2
 8009068:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 800906a:	6a3b      	ldr	r3, [r7, #32]
 800906c:	43da      	mvns	r2, r3
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	4013      	ands	r3, r2
 8009072:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	689a      	ldr	r2, [r3, #8]
 8009078:	69bb      	ldr	r3, [r7, #24]
 800907a:	409a      	lsls	r2, r3
 800907c:	0013      	movs	r3, r2
 800907e:	6a3a      	ldr	r2, [r7, #32]
 8009080:	4013      	ands	r3, r2
 8009082:	697a      	ldr	r2, [r7, #20]
 8009084:	4313      	orrs	r3, r2
 8009086:	617b      	str	r3, [r7, #20]
      htim->Instance->AF2 = tmporx;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	697a      	ldr	r2, [r7, #20]
 800908e:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 8009090:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	223c      	movs	r2, #60	; 0x3c
 8009096:	2100      	movs	r1, #0
 8009098:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800909a:	2300      	movs	r3, #0
}
 800909c:	0018      	movs	r0, r3
 800909e:	46bd      	mov	sp, r7
 80090a0:	b00a      	add	sp, #40	; 0x28
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b082      	sub	sp, #8
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d101      	bne.n	80090b6 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80090b2:	2301      	movs	r3, #1
 80090b4:	e03f      	b.n	8009136 <HAL_USART_Init+0x92>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2259      	movs	r2, #89	; 0x59
 80090ba:	5c9b      	ldrb	r3, [r3, r2]
 80090bc:	b2db      	uxtb	r3, r3
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d107      	bne.n	80090d2 <HAL_USART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2258      	movs	r2, #88	; 0x58
 80090c6:	2100      	movs	r1, #0
 80090c8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	0018      	movs	r0, r3
 80090ce:	f7f9 fd95 	bl	8002bfc <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2259      	movs	r2, #89	; 0x59
 80090d6:	2102      	movs	r1, #2
 80090d8:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	681a      	ldr	r2, [r3, #0]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	2101      	movs	r1, #1
 80090e6:	438a      	bics	r2, r1
 80090e8:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	0018      	movs	r0, r3
 80090ee:	f000 fbdb 	bl	80098a8 <USART_SetConfig>
 80090f2:	0003      	movs	r3, r0
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	d101      	bne.n	80090fc <HAL_USART_Init+0x58>
  {
    return HAL_ERROR;
 80090f8:	2301      	movs	r3, #1
 80090fa:	e01c      	b.n	8009136 <HAL_USART_Init+0x92>
  }

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	685a      	ldr	r2, [r3, #4]
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	490e      	ldr	r1, [pc, #56]	; (8009140 <HAL_USART_Init+0x9c>)
 8009108:	400a      	ands	r2, r1
 800910a:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	689a      	ldr	r2, [r3, #8]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	212a      	movs	r1, #42	; 0x2a
 8009118:	438a      	bics	r2, r1
 800911a:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	2101      	movs	r1, #1
 8009128:	430a      	orrs	r2, r1
 800912a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	0018      	movs	r0, r3
 8009130:	f000 fe56 	bl	8009de0 <USART_CheckIdleState>
 8009134:	0003      	movs	r3, r0
}
 8009136:	0018      	movs	r0, r3
 8009138:	46bd      	mov	sp, r7
 800913a:	b002      	add	sp, #8
 800913c:	bd80      	pop	{r7, pc}
 800913e:	46c0      	nop			; (mov r8, r8)
 8009140:	ffffbfff 	.word	0xffffbfff

08009144 <HAL_USART_Transmit>:
  * @param  Size Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b08a      	sub	sp, #40	; 0x28
 8009148:	af02      	add	r7, sp, #8
 800914a:	60f8      	str	r0, [r7, #12]
 800914c:	60b9      	str	r1, [r7, #8]
 800914e:	603b      	str	r3, [r7, #0]
 8009150:	1dbb      	adds	r3, r7, #6
 8009152:	801a      	strh	r2, [r3, #0]
  uint8_t  *ptxdata8bits;
  uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2259      	movs	r2, #89	; 0x59
 8009158:	5c9b      	ldrb	r3, [r3, r2]
 800915a:	b2db      	uxtb	r3, r3
 800915c:	2b01      	cmp	r3, #1
 800915e:	d000      	beq.n	8009162 <HAL_USART_Transmit+0x1e>
 8009160:	e0a9      	b.n	80092b6 <HAL_USART_Transmit+0x172>
  {
    if ((pTxData == NULL) || (Size == 0U))
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d003      	beq.n	8009170 <HAL_USART_Transmit+0x2c>
 8009168:	1dbb      	adds	r3, r7, #6
 800916a:	881b      	ldrh	r3, [r3, #0]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d101      	bne.n	8009174 <HAL_USART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009170:	2301      	movs	r3, #1
 8009172:	e0a1      	b.n	80092b8 <HAL_USART_Transmit+0x174>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	689a      	ldr	r2, [r3, #8]
 8009178:	2380      	movs	r3, #128	; 0x80
 800917a:	015b      	lsls	r3, r3, #5
 800917c:	429a      	cmp	r2, r3
 800917e:	d109      	bne.n	8009194 <HAL_USART_Transmit+0x50>
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	691b      	ldr	r3, [r3, #16]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d105      	bne.n	8009194 <HAL_USART_Transmit+0x50>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	2201      	movs	r2, #1
 800918c:	4013      	ands	r3, r2
 800918e:	d001      	beq.n	8009194 <HAL_USART_Transmit+0x50>
      {
        return  HAL_ERROR;
 8009190:	2301      	movs	r3, #1
 8009192:	e091      	b.n	80092b8 <HAL_USART_Transmit+0x174>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2258      	movs	r2, #88	; 0x58
 8009198:	5c9b      	ldrb	r3, [r3, r2]
 800919a:	2b01      	cmp	r3, #1
 800919c:	d101      	bne.n	80091a2 <HAL_USART_Transmit+0x5e>
 800919e:	2302      	movs	r3, #2
 80091a0:	e08a      	b.n	80092b8 <HAL_USART_Transmit+0x174>
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2258      	movs	r2, #88	; 0x58
 80091a6:	2101      	movs	r1, #1
 80091a8:	5499      	strb	r1, [r3, r2]

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2200      	movs	r2, #0
 80091ae:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2259      	movs	r2, #89	; 0x59
 80091b4:	2112      	movs	r1, #18
 80091b6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80091b8:	f7f9 ff9a 	bl	80030f0 <HAL_GetTick>
 80091bc:	0003      	movs	r3, r0
 80091be:	617b      	str	r3, [r7, #20]

    husart->TxXferSize = Size;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	1dba      	adds	r2, r7, #6
 80091c4:	8812      	ldrh	r2, [r2, #0]
 80091c6:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	1dba      	adds	r2, r7, #6
 80091cc:	8812      	ldrh	r2, [r2, #0]
 80091ce:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	689a      	ldr	r2, [r3, #8]
 80091d4:	2380      	movs	r3, #128	; 0x80
 80091d6:	015b      	lsls	r3, r3, #5
 80091d8:	429a      	cmp	r2, r3
 80091da:	d108      	bne.n	80091ee <HAL_USART_Transmit+0xaa>
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	691b      	ldr	r3, [r3, #16]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d104      	bne.n	80091ee <HAL_USART_Transmit+0xaa>
    {
      ptxdata8bits  = NULL;
 80091e4:	2300      	movs	r3, #0
 80091e6:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (uint16_t *) pTxData;
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	61bb      	str	r3, [r7, #24]
 80091ec:	e003      	b.n	80091f6 <HAL_USART_Transmit+0xb2>
    }
    else
    {
      ptxdata8bits  = pTxData;
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 80091f2:	2300      	movs	r3, #0
 80091f4:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 80091f6:	e02a      	b.n	800924e <HAL_USART_Transmit+0x10a>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80091f8:	697a      	ldr	r2, [r7, #20]
 80091fa:	68f8      	ldr	r0, [r7, #12]
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	9300      	str	r3, [sp, #0]
 8009200:	0013      	movs	r3, r2
 8009202:	2200      	movs	r2, #0
 8009204:	2180      	movs	r1, #128	; 0x80
 8009206:	f000 fb19 	bl	800983c <USART_WaitOnFlagUntilTimeout>
 800920a:	1e03      	subs	r3, r0, #0
 800920c:	d001      	beq.n	8009212 <HAL_USART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 800920e:	2303      	movs	r3, #3
 8009210:	e052      	b.n	80092b8 <HAL_USART_Transmit+0x174>
      }
      if (ptxdata8bits == NULL)
 8009212:	69fb      	ldr	r3, [r7, #28]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d10b      	bne.n	8009230 <HAL_USART_Transmit+0xec>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 8009218:	69bb      	ldr	r3, [r7, #24]
 800921a:	881b      	ldrh	r3, [r3, #0]
 800921c:	001a      	movs	r2, r3
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	05d2      	lsls	r2, r2, #23
 8009224:	0dd2      	lsrs	r2, r2, #23
 8009226:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 8009228:	69bb      	ldr	r3, [r7, #24]
 800922a:	3302      	adds	r3, #2
 800922c:	61bb      	str	r3, [r7, #24]
 800922e:	e007      	b.n	8009240 <HAL_USART_Transmit+0xfc>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 8009230:	69fb      	ldr	r3, [r7, #28]
 8009232:	781a      	ldrb	r2, [r3, #0]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 800923a:	69fb      	ldr	r3, [r7, #28]
 800923c:	3301      	adds	r3, #1
 800923e:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009244:	b29b      	uxth	r3, r3
 8009246:	3b01      	subs	r3, #1
 8009248:	b29a      	uxth	r2, r3
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (husart->TxXferCount > 0U)
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009252:	b29b      	uxth	r3, r3
 8009254:	2b00      	cmp	r3, #0
 8009256:	d1cf      	bne.n	80091f8 <HAL_USART_Transmit+0xb4>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009258:	697a      	ldr	r2, [r7, #20]
 800925a:	68f8      	ldr	r0, [r7, #12]
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	9300      	str	r3, [sp, #0]
 8009260:	0013      	movs	r3, r2
 8009262:	2200      	movs	r2, #0
 8009264:	2140      	movs	r1, #64	; 0x40
 8009266:	f000 fae9 	bl	800983c <USART_WaitOnFlagUntilTimeout>
 800926a:	1e03      	subs	r3, r0, #0
 800926c:	d001      	beq.n	8009272 <HAL_USART_Transmit+0x12e>
    {
      return HAL_TIMEOUT;
 800926e:	2303      	movs	r3, #3
 8009270:	e022      	b.n	80092b8 <HAL_USART_Transmit+0x174>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	2240      	movs	r2, #64	; 0x40
 8009278:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	2208      	movs	r2, #8
 8009280:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	699a      	ldr	r2, [r3, #24]
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	2108      	movs	r1, #8
 800928e:	430a      	orrs	r2, r1
 8009290:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	699a      	ldr	r2, [r3, #24]
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2110      	movs	r1, #16
 800929e:	430a      	orrs	r2, r1
 80092a0:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	2259      	movs	r2, #89	; 0x59
 80092a6:	2101      	movs	r1, #1
 80092a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2258      	movs	r2, #88	; 0x58
 80092ae:	2100      	movs	r1, #0
 80092b0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80092b2:	2300      	movs	r3, #0
 80092b4:	e000      	b.n	80092b8 <HAL_USART_Transmit+0x174>
  }
  else
  {
    return HAL_BUSY;
 80092b6:	2302      	movs	r3, #2
  }
}
 80092b8:	0018      	movs	r0, r3
 80092ba:	46bd      	mov	sp, r7
 80092bc:	b008      	add	sp, #32
 80092be:	bd80      	pop	{r7, pc}

080092c0 <HAL_USART_Transmit_DMA>:
  * @param  pTxData pointer to data buffer (u8 or u16 data elements).
  * @param  Size amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit_DMA(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size)
{
 80092c0:	b590      	push	{r4, r7, lr}
 80092c2:	b087      	sub	sp, #28
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	60f8      	str	r0, [r7, #12]
 80092c8:	60b9      	str	r1, [r7, #8]
 80092ca:	1dbb      	adds	r3, r7, #6
 80092cc:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80092ce:	2317      	movs	r3, #23
 80092d0:	18fb      	adds	r3, r7, r3
 80092d2:	2200      	movs	r2, #0
 80092d4:	701a      	strb	r2, [r3, #0]
  uint32_t *tmp;

  if (husart->State == HAL_USART_STATE_READY)
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2259      	movs	r2, #89	; 0x59
 80092da:	5c9b      	ldrb	r3, [r3, r2]
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d000      	beq.n	80092e4 <HAL_USART_Transmit_DMA+0x24>
 80092e2:	e07d      	b.n	80093e0 <HAL_USART_Transmit_DMA+0x120>
  {
    if ((pTxData == NULL) || (Size == 0U))
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d003      	beq.n	80092f2 <HAL_USART_Transmit_DMA+0x32>
 80092ea:	1dbb      	adds	r3, r7, #6
 80092ec:	881b      	ldrh	r3, [r3, #0]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d101      	bne.n	80092f6 <HAL_USART_Transmit_DMA+0x36>
    {
      return HAL_ERROR;
 80092f2:	2301      	movs	r3, #1
 80092f4:	e075      	b.n	80093e2 <HAL_USART_Transmit_DMA+0x122>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	689a      	ldr	r2, [r3, #8]
 80092fa:	2380      	movs	r3, #128	; 0x80
 80092fc:	015b      	lsls	r3, r3, #5
 80092fe:	429a      	cmp	r2, r3
 8009300:	d10a      	bne.n	8009318 <HAL_USART_Transmit_DMA+0x58>
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	691b      	ldr	r3, [r3, #16]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d106      	bne.n	8009318 <HAL_USART_Transmit_DMA+0x58>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	001a      	movs	r2, r3
 800930e:	2301      	movs	r3, #1
 8009310:	4013      	ands	r3, r2
 8009312:	d001      	beq.n	8009318 <HAL_USART_Transmit_DMA+0x58>
      {
        return  HAL_ERROR;
 8009314:	2301      	movs	r3, #1
 8009316:	e064      	b.n	80093e2 <HAL_USART_Transmit_DMA+0x122>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2258      	movs	r2, #88	; 0x58
 800931c:	5c9b      	ldrb	r3, [r3, r2]
 800931e:	2b01      	cmp	r3, #1
 8009320:	d101      	bne.n	8009326 <HAL_USART_Transmit_DMA+0x66>
 8009322:	2302      	movs	r3, #2
 8009324:	e05d      	b.n	80093e2 <HAL_USART_Transmit_DMA+0x122>
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2258      	movs	r2, #88	; 0x58
 800932a:	2101      	movs	r1, #1
 800932c:	5499      	strb	r1, [r3, r2]

    husart->pTxBuffPtr = pTxData;
 800932e:	68ba      	ldr	r2, [r7, #8]
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	629a      	str	r2, [r3, #40]	; 0x28
    husart->TxXferSize = Size;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	1dba      	adds	r2, r7, #6
 8009338:	8812      	ldrh	r2, [r2, #0]
 800933a:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	1dba      	adds	r2, r7, #6
 8009340:	8812      	ldrh	r2, [r2, #0]
 8009342:	85da      	strh	r2, [r3, #46]	; 0x2e

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2200      	movs	r2, #0
 8009348:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2259      	movs	r2, #89	; 0x59
 800934e:	2112      	movs	r1, #18
 8009350:	5499      	strb	r1, [r3, r2]

    if (husart->hdmatx != NULL)
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009356:	2b00      	cmp	r3, #0
 8009358:	d01e      	beq.n	8009398 <HAL_USART_Transmit_DMA+0xd8>
    {
      /* Set the USART DMA transfer complete callback */
      husart->hdmatx->XferCpltCallback = USART_DMATransmitCplt;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800935e:	4a23      	ldr	r2, [pc, #140]	; (80093ec <HAL_USART_Transmit_DMA+0x12c>)
 8009360:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the USART DMA Half transfer complete callback */
      husart->hdmatx->XferHalfCpltCallback = USART_DMATxHalfCplt;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009366:	4a22      	ldr	r2, [pc, #136]	; (80093f0 <HAL_USART_Transmit_DMA+0x130>)
 8009368:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      husart->hdmatx->XferErrorCallback = USART_DMAError;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800936e:	4a21      	ldr	r2, [pc, #132]	; (80093f4 <HAL_USART_Transmit_DMA+0x134>)
 8009370:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the USART transmit DMA channel */
      tmp = (uint32_t *)&pTxData;
 8009372:	2308      	movs	r3, #8
 8009374:	18fb      	adds	r3, r7, r3
 8009376:	613b      	str	r3, [r7, #16]
      status = HAL_DMA_Start_IT(husart->hdmatx, *(uint32_t *)tmp, (uint32_t)&husart->Instance->TDR, Size);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	6819      	ldr	r1, [r3, #0]
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	3328      	adds	r3, #40	; 0x28
 8009386:	001a      	movs	r2, r3
 8009388:	1dbb      	adds	r3, r7, #6
 800938a:	881b      	ldrh	r3, [r3, #0]
 800938c:	2417      	movs	r4, #23
 800938e:	193c      	adds	r4, r7, r4
 8009390:	f7fa faba 	bl	8003908 <HAL_DMA_Start_IT>
 8009394:	0003      	movs	r3, r0
 8009396:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8009398:	2317      	movs	r3, #23
 800939a:	18fb      	adds	r3, r7, r3
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d111      	bne.n	80093c6 <HAL_USART_Transmit_DMA+0x106>
    {
      /* Clear the TC flag in the ICR register */
      __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	2240      	movs	r2, #64	; 0x40
 80093a8:	621a      	str	r2, [r3, #32]

      /* Process Unlocked */
      __HAL_UNLOCK(husart);
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2258      	movs	r2, #88	; 0x58
 80093ae:	2100      	movs	r1, #0
 80093b0:	5499      	strb	r1, [r3, r2]

      /* Enable the DMA transfer for transmit request by setting the DMAT bit
         in the USART CR3 register */
      SET_BIT(husart->Instance->CR3, USART_CR3_DMAT);
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	689a      	ldr	r2, [r3, #8]
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	2180      	movs	r1, #128	; 0x80
 80093be:	430a      	orrs	r2, r1
 80093c0:	609a      	str	r2, [r3, #8]

      return HAL_OK;
 80093c2:	2300      	movs	r3, #0
 80093c4:	e00d      	b.n	80093e2 <HAL_USART_Transmit_DMA+0x122>
    }
    else
    {
      /* Set error code to DMA */
      husart->ErrorCode = HAL_USART_ERROR_DMA;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2210      	movs	r2, #16
 80093ca:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Process Unlocked */
      __HAL_UNLOCK(husart);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2258      	movs	r2, #88	; 0x58
 80093d0:	2100      	movs	r1, #0
 80093d2:	5499      	strb	r1, [r3, r2]

      /* Restore husart->State to ready */
      husart->State = HAL_USART_STATE_READY;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2259      	movs	r2, #89	; 0x59
 80093d8:	2101      	movs	r1, #1
 80093da:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80093dc:	2301      	movs	r3, #1
 80093de:	e000      	b.n	80093e2 <HAL_USART_Transmit_DMA+0x122>
    }
  }
  else
  {
    return HAL_BUSY;
 80093e0:	2302      	movs	r3, #2
  }
}
 80093e2:	0018      	movs	r0, r3
 80093e4:	46bd      	mov	sp, r7
 80093e6:	b007      	add	sp, #28
 80093e8:	bd90      	pop	{r4, r7, pc}
 80093ea:	46c0      	nop			; (mov r8, r8)
 80093ec:	08009745 	.word	0x08009745
 80093f0:	080097af 	.word	0x080097af
 80093f4:	080097cd 	.word	0x080097cd

080093f8 <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b088      	sub	sp, #32
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	69db      	ldr	r3, [r3, #28]
 8009406:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	689b      	ldr	r3, [r3, #8]
 8009416:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_UDR));
 8009418:	69fb      	ldr	r3, [r7, #28]
 800941a:	4aab      	ldr	r2, [pc, #684]	; (80096c8 <HAL_USART_IRQHandler+0x2d0>)
 800941c:	4013      	ands	r3, r2
 800941e:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d117      	bne.n	8009456 <HAL_USART_IRQHandler+0x5e>
  {
    /* USART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009426:	69fb      	ldr	r3, [r7, #28]
 8009428:	2220      	movs	r2, #32
 800942a:	4013      	ands	r3, r2
 800942c:	d013      	beq.n	8009456 <HAL_USART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800942e:	69bb      	ldr	r3, [r7, #24]
 8009430:	2220      	movs	r2, #32
 8009432:	4013      	ands	r3, r2
 8009434:	d104      	bne.n	8009440 <HAL_USART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009436:	697a      	ldr	r2, [r7, #20]
 8009438:	2380      	movs	r3, #128	; 0x80
 800943a:	055b      	lsls	r3, r3, #21
 800943c:	4013      	ands	r3, r2
 800943e:	d00a      	beq.n	8009456 <HAL_USART_IRQHandler+0x5e>
    {
      if (husart->RxISR != NULL)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009444:	2b00      	cmp	r3, #0
 8009446:	d100      	bne.n	800944a <HAL_USART_IRQHandler+0x52>
 8009448:	e135      	b.n	80096b6 <HAL_USART_IRQHandler+0x2be>
      {
        husart->RxISR(husart);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800944e:	687a      	ldr	r2, [r7, #4]
 8009450:	0010      	movs	r0, r2
 8009452:	4798      	blx	r3
      }
      return;
 8009454:	e12f      	b.n	80096b6 <HAL_USART_IRQHandler+0x2be>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d100      	bne.n	800945e <HAL_USART_IRQHandler+0x66>
 800945c:	e0eb      	b.n	8009636 <HAL_USART_IRQHandler+0x23e>
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	4a9a      	ldr	r2, [pc, #616]	; (80096cc <HAL_USART_IRQHandler+0x2d4>)
 8009462:	4013      	ands	r3, r2
 8009464:	d105      	bne.n	8009472 <HAL_USART_IRQHandler+0x7a>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
 8009466:	69ba      	ldr	r2, [r7, #24]
 8009468:	2390      	movs	r3, #144	; 0x90
 800946a:	005b      	lsls	r3, r3, #1
 800946c:	4013      	ands	r3, r2
 800946e:	d100      	bne.n	8009472 <HAL_USART_IRQHandler+0x7a>
 8009470:	e0e1      	b.n	8009636 <HAL_USART_IRQHandler+0x23e>
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009472:	69fb      	ldr	r3, [r7, #28]
 8009474:	2201      	movs	r2, #1
 8009476:	4013      	ands	r3, r2
 8009478:	d00e      	beq.n	8009498 <HAL_USART_IRQHandler+0xa0>
 800947a:	69ba      	ldr	r2, [r7, #24]
 800947c:	2380      	movs	r3, #128	; 0x80
 800947e:	005b      	lsls	r3, r3, #1
 8009480:	4013      	ands	r3, r2
 8009482:	d009      	beq.n	8009498 <HAL_USART_IRQHandler+0xa0>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	2201      	movs	r2, #1
 800948a:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009490:	2201      	movs	r2, #1
 8009492:	431a      	orrs	r2, r3
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009498:	69fb      	ldr	r3, [r7, #28]
 800949a:	2202      	movs	r2, #2
 800949c:	4013      	ands	r3, r2
 800949e:	d00d      	beq.n	80094bc <HAL_USART_IRQHandler+0xc4>
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	2201      	movs	r2, #1
 80094a4:	4013      	ands	r3, r2
 80094a6:	d009      	beq.n	80094bc <HAL_USART_IRQHandler+0xc4>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	2202      	movs	r2, #2
 80094ae:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094b4:	2204      	movs	r2, #4
 80094b6:	431a      	orrs	r2, r3
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80094bc:	69fb      	ldr	r3, [r7, #28]
 80094be:	2204      	movs	r2, #4
 80094c0:	4013      	ands	r3, r2
 80094c2:	d00d      	beq.n	80094e0 <HAL_USART_IRQHandler+0xe8>
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	2201      	movs	r2, #1
 80094c8:	4013      	ands	r3, r2
 80094ca:	d009      	beq.n	80094e0 <HAL_USART_IRQHandler+0xe8>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2204      	movs	r2, #4
 80094d2:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094d8:	2202      	movs	r2, #2
 80094da:	431a      	orrs	r2, r3
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80094e0:	69fb      	ldr	r3, [r7, #28]
 80094e2:	2208      	movs	r2, #8
 80094e4:	4013      	ands	r3, r2
 80094e6:	d011      	beq.n	800950c <HAL_USART_IRQHandler+0x114>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80094e8:	69bb      	ldr	r3, [r7, #24]
 80094ea:	2220      	movs	r2, #32
 80094ec:	4013      	ands	r3, r2
 80094ee:	d103      	bne.n	80094f8 <HAL_USART_IRQHandler+0x100>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	4a76      	ldr	r2, [pc, #472]	; (80096cc <HAL_USART_IRQHandler+0x2d4>)
 80094f4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80094f6:	d009      	beq.n	800950c <HAL_USART_IRQHandler+0x114>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	2208      	movs	r2, #8
 80094fe:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009504:	2208      	movs	r2, #8
 8009506:	431a      	orrs	r2, r3
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART SPI slave underrun error interrupt occurred -------------------------*/
    if (((isrflags & USART_ISR_UDR) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800950c:	69fa      	ldr	r2, [r7, #28]
 800950e:	2380      	movs	r3, #128	; 0x80
 8009510:	019b      	lsls	r3, r3, #6
 8009512:	4013      	ands	r3, r2
 8009514:	d01a      	beq.n	800954c <HAL_USART_IRQHandler+0x154>
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	2201      	movs	r2, #1
 800951a:	4013      	ands	r3, r2
 800951c:	d016      	beq.n	800954c <HAL_USART_IRQHandler+0x154>
    {
      /* Ignore SPI slave underrun errors when reception is going on */
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2259      	movs	r2, #89	; 0x59
 8009522:	5c9b      	ldrb	r3, [r3, r2]
 8009524:	b2db      	uxtb	r3, r3
 8009526:	2b22      	cmp	r3, #34	; 0x22
 8009528:	d105      	bne.n	8009536 <HAL_USART_IRQHandler+0x13e>
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	2280      	movs	r2, #128	; 0x80
 8009530:	0192      	lsls	r2, r2, #6
 8009532:	621a      	str	r2, [r3, #32]
        return;
 8009534:	e0c4      	b.n	80096c0 <HAL_USART_IRQHandler+0x2c8>
      }
      else
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	2280      	movs	r2, #128	; 0x80
 800953c:	0192      	lsls	r2, r2, #6
 800953e:	621a      	str	r2, [r3, #32]
        husart->ErrorCode |= HAL_USART_ERROR_UDR;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009544:	2220      	movs	r2, #32
 8009546:	431a      	orrs	r2, r3
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009550:	2b00      	cmp	r3, #0
 8009552:	d100      	bne.n	8009556 <HAL_USART_IRQHandler+0x15e>
 8009554:	e0b1      	b.n	80096ba <HAL_USART_IRQHandler+0x2c2>
    {
      /* USART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009556:	69fb      	ldr	r3, [r7, #28]
 8009558:	2220      	movs	r2, #32
 800955a:	4013      	ands	r3, r2
 800955c:	d011      	beq.n	8009582 <HAL_USART_IRQHandler+0x18a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800955e:	69bb      	ldr	r3, [r7, #24]
 8009560:	2220      	movs	r2, #32
 8009562:	4013      	ands	r3, r2
 8009564:	d104      	bne.n	8009570 <HAL_USART_IRQHandler+0x178>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009566:	697a      	ldr	r2, [r7, #20]
 8009568:	2380      	movs	r3, #128	; 0x80
 800956a:	055b      	lsls	r3, r3, #21
 800956c:	4013      	ands	r3, r2
 800956e:	d008      	beq.n	8009582 <HAL_USART_IRQHandler+0x18a>
      {
        if (husart->RxISR != NULL)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009574:	2b00      	cmp	r3, #0
 8009576:	d004      	beq.n	8009582 <HAL_USART_IRQHandler+0x18a>
        {
          husart->RxISR(husart);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800957c:	687a      	ldr	r2, [r7, #4]
 800957e:	0010      	movs	r0, r2
 8009580:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009586:	2208      	movs	r2, #8
 8009588:	4013      	ands	r3, r2
 800958a:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	689b      	ldr	r3, [r3, #8]
 8009592:	2240      	movs	r2, #64	; 0x40
 8009594:	4013      	ands	r3, r2
 8009596:	2b40      	cmp	r3, #64	; 0x40
 8009598:	d002      	beq.n	80095a0 <HAL_USART_IRQHandler+0x1a8>
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d040      	beq.n	8009622 <HAL_USART_IRQHandler+0x22a>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	0018      	movs	r0, r3
 80095a4:	f000 f8ae 	bl	8009704 <USART_EndTransfer>

        /* Disable the USART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	689b      	ldr	r3, [r3, #8]
 80095ae:	2240      	movs	r2, #64	; 0x40
 80095b0:	4013      	ands	r3, r2
 80095b2:	2b40      	cmp	r3, #64	; 0x40
 80095b4:	d130      	bne.n	8009618 <HAL_USART_IRQHandler+0x220>
        {
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	689a      	ldr	r2, [r3, #8]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	2140      	movs	r1, #64	; 0x40
 80095c2:	438a      	bics	r2, r1
 80095c4:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d008      	beq.n	80095e0 <HAL_USART_IRQHandler+0x1e8>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095d2:	2200      	movs	r2, #0
 80095d4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095da:	0018      	movs	r0, r3
 80095dc:	f7fa fa1a 	bl	8003a14 <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d012      	beq.n	800960e <HAL_USART_IRQHandler+0x216>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095ec:	4a38      	ldr	r2, [pc, #224]	; (80096d0 <HAL_USART_IRQHandler+0x2d8>)
 80095ee:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095f4:	0018      	movs	r0, r3
 80095f6:	f7fa fa0d 	bl	8003a14 <HAL_DMA_Abort_IT>
 80095fa:	1e03      	subs	r3, r0, #0
 80095fc:	d019      	beq.n	8009632 <HAL_USART_IRQHandler+0x23a>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009602:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009608:	0018      	movs	r0, r3
 800960a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800960c:	e011      	b.n	8009632 <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	0018      	movs	r0, r3
 8009612:	f000 f86f 	bl	80096f4 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8009616:	e00c      	b.n	8009632 <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	0018      	movs	r0, r3
 800961c:	f000 f86a 	bl	80096f4 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8009620:	e007      	b.n	8009632 <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	0018      	movs	r0, r3
 8009626:	f000 f865 	bl	80096f4 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2200      	movs	r2, #0
 800962e:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }
    return;
 8009630:	e043      	b.n	80096ba <HAL_USART_IRQHandler+0x2c2>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8009632:	46c0      	nop			; (mov r8, r8)
    return;
 8009634:	e041      	b.n	80096ba <HAL_USART_IRQHandler+0x2c2>

  } /* End if some error occurs */


  /* USART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009636:	69fb      	ldr	r3, [r7, #28]
 8009638:	2280      	movs	r2, #128	; 0x80
 800963a:	4013      	ands	r3, r2
 800963c:	d012      	beq.n	8009664 <HAL_USART_IRQHandler+0x26c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800963e:	69bb      	ldr	r3, [r7, #24]
 8009640:	2280      	movs	r2, #128	; 0x80
 8009642:	4013      	ands	r3, r2
 8009644:	d104      	bne.n	8009650 <HAL_USART_IRQHandler+0x258>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009646:	697a      	ldr	r2, [r7, #20]
 8009648:	2380      	movs	r3, #128	; 0x80
 800964a:	041b      	lsls	r3, r3, #16
 800964c:	4013      	ands	r3, r2
 800964e:	d009      	beq.n	8009664 <HAL_USART_IRQHandler+0x26c>
  {
    if (husart->TxISR != NULL)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009654:	2b00      	cmp	r3, #0
 8009656:	d032      	beq.n	80096be <HAL_USART_IRQHandler+0x2c6>
    {
      husart->TxISR(husart);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	0010      	movs	r0, r2
 8009660:	4798      	blx	r3
    }
    return;
 8009662:	e02c      	b.n	80096be <HAL_USART_IRQHandler+0x2c6>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009664:	69fb      	ldr	r3, [r7, #28]
 8009666:	2240      	movs	r2, #64	; 0x40
 8009668:	4013      	ands	r3, r2
 800966a:	d008      	beq.n	800967e <HAL_USART_IRQHandler+0x286>
 800966c:	69bb      	ldr	r3, [r7, #24]
 800966e:	2240      	movs	r2, #64	; 0x40
 8009670:	4013      	ands	r3, r2
 8009672:	d004      	beq.n	800967e <HAL_USART_IRQHandler+0x286>
  {
    USART_EndTransmit_IT(husart);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	0018      	movs	r0, r3
 8009678:	f000 fbf6 	bl	8009e68 <USART_EndTransmit_IT>
    return;
 800967c:	e020      	b.n	80096c0 <HAL_USART_IRQHandler+0x2c8>
  }

  /* USART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800967e:	69fa      	ldr	r2, [r7, #28]
 8009680:	2380      	movs	r3, #128	; 0x80
 8009682:	041b      	lsls	r3, r3, #16
 8009684:	4013      	ands	r3, r2
 8009686:	d009      	beq.n	800969c <HAL_USART_IRQHandler+0x2a4>
 8009688:	69ba      	ldr	r2, [r7, #24]
 800968a:	2380      	movs	r3, #128	; 0x80
 800968c:	05db      	lsls	r3, r3, #23
 800968e:	4013      	ands	r3, r2
 8009690:	d004      	beq.n	800969c <HAL_USART_IRQHandler+0x2a4>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    husart->TxFifoEmptyCallback(husart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_USARTEx_TxFifoEmptyCallback(husart);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	0018      	movs	r0, r3
 8009696:	f000 fc32 	bl	8009efe <HAL_USARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 800969a:	e011      	b.n	80096c0 <HAL_USART_IRQHandler+0x2c8>
  }

  /* USART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800969c:	69fa      	ldr	r2, [r7, #28]
 800969e:	2380      	movs	r3, #128	; 0x80
 80096a0:	045b      	lsls	r3, r3, #17
 80096a2:	4013      	ands	r3, r2
 80096a4:	d00c      	beq.n	80096c0 <HAL_USART_IRQHandler+0x2c8>
 80096a6:	69bb      	ldr	r3, [r7, #24]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	da09      	bge.n	80096c0 <HAL_USART_IRQHandler+0x2c8>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    husart->RxFifoFullCallback(husart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_USARTEx_RxFifoFullCallback(husart);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	0018      	movs	r0, r3
 80096b0:	f000 fc1d 	bl	8009eee <HAL_USARTEx_RxFifoFullCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 80096b4:	e004      	b.n	80096c0 <HAL_USART_IRQHandler+0x2c8>
      return;
 80096b6:	46c0      	nop			; (mov r8, r8)
 80096b8:	e002      	b.n	80096c0 <HAL_USART_IRQHandler+0x2c8>
    return;
 80096ba:	46c0      	nop			; (mov r8, r8)
 80096bc:	e000      	b.n	80096c0 <HAL_USART_IRQHandler+0x2c8>
    return;
 80096be:	46c0      	nop			; (mov r8, r8)
  }
}
 80096c0:	46bd      	mov	sp, r7
 80096c2:	b008      	add	sp, #32
 80096c4:	bd80      	pop	{r7, pc}
 80096c6:	46c0      	nop			; (mov r8, r8)
 80096c8:	0000200f 	.word	0x0000200f
 80096cc:	10000001 	.word	0x10000001
 80096d0:	08009813 	.word	0x08009813

080096d4 <HAL_USART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxHalfCpltCallback(USART_HandleTypeDef *husart)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80096dc:	46c0      	nop			; (mov r8, r8)
 80096de:	46bd      	mov	sp, r7
 80096e0:	b002      	add	sp, #8
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b082      	sub	sp, #8
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 80096ec:	46c0      	nop			; (mov r8, r8)
 80096ee:	46bd      	mov	sp, r7
 80096f0:	b002      	add	sp, #8
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b082      	sub	sp, #8
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 80096fc:	46c0      	nop			; (mov r8, r8)
 80096fe:	46bd      	mov	sp, r7
 8009700:	b002      	add	sp, #8
 8009702:	bd80      	pop	{r7, pc}

08009704 <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b082      	sub	sp, #8
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, RXFT, TXFT, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	681a      	ldr	r2, [r3, #0]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4909      	ldr	r1, [pc, #36]	; (800973c <USART_EndTransfer+0x38>)
 8009718:	400a      	ands	r2, r1
 800971a:	601a      	str	r2, [r3, #0]
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	689a      	ldr	r2, [r3, #8]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4906      	ldr	r1, [pc, #24]	; (8009740 <USART_EndTransfer+0x3c>)
 8009728:	400a      	ands	r2, r1
 800972a:	609a      	str	r2, [r3, #8]

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2259      	movs	r2, #89	; 0x59
 8009730:	2101      	movs	r1, #1
 8009732:	5499      	strb	r1, [r3, r2]
}
 8009734:	46c0      	nop			; (mov r8, r8)
 8009736:	46bd      	mov	sp, r7
 8009738:	b002      	add	sp, #8
 800973a:	bd80      	pop	{r7, pc}
 800973c:	fffffe1f 	.word	0xfffffe1f
 8009740:	ef7ffffe 	.word	0xef7ffffe

08009744 <USART_DMATransmitCplt>:
  * @brief DMA USART transmit process complete callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b084      	sub	sp, #16
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009750:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	2220      	movs	r2, #32
 800975a:	4013      	ands	r3, r2
 800975c:	d119      	bne.n	8009792 <USART_DMATransmitCplt+0x4e>
  {
    husart->TxXferCount = 0U;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2200      	movs	r2, #0
 8009762:	85da      	strh	r2, [r3, #46]	; 0x2e

    if (husart->State == HAL_USART_STATE_BUSY_TX)
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2259      	movs	r2, #89	; 0x59
 8009768:	5c9b      	ldrb	r3, [r3, r2]
 800976a:	b2db      	uxtb	r3, r3
 800976c:	2b12      	cmp	r3, #18
 800976e:	d11a      	bne.n	80097a6 <USART_DMATransmitCplt+0x62>
    {
      /* Disable the DMA transfer for transmit request by resetting the DMAT bit
         in the USART CR3 register */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAT);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	689a      	ldr	r2, [r3, #8]
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	2180      	movs	r1, #128	; 0x80
 800977c:	438a      	bics	r2, r1
 800977e:	609a      	str	r2, [r3, #8]

      /* Enable the USART Transmit Complete Interrupt */
      __HAL_USART_ENABLE_IT(husart, USART_IT_TC);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	681a      	ldr	r2, [r3, #0]
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	2140      	movs	r1, #64	; 0x40
 800978c:	430a      	orrs	r2, r1
 800978e:	601a      	str	r2, [r3, #0]
      /* Call legacy weak Tx Complete Callback */
      HAL_USART_TxCpltCallback(husart);
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    }
  }
}
 8009790:	e009      	b.n	80097a6 <USART_DMATransmitCplt+0x62>
    if (husart->State == HAL_USART_STATE_BUSY_TX)
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2259      	movs	r2, #89	; 0x59
 8009796:	5c9b      	ldrb	r3, [r3, r2]
 8009798:	b2db      	uxtb	r3, r3
 800979a:	2b12      	cmp	r3, #18
 800979c:	d103      	bne.n	80097a6 <USART_DMATransmitCplt+0x62>
      HAL_USART_TxCpltCallback(husart);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	0018      	movs	r0, r3
 80097a2:	f7f7 fc95 	bl	80010d0 <HAL_USART_TxCpltCallback>
}
 80097a6:	46c0      	nop			; (mov r8, r8)
 80097a8:	46bd      	mov	sp, r7
 80097aa:	b004      	add	sp, #16
 80097ac:	bd80      	pop	{r7, pc}

080097ae <USART_DMATxHalfCplt>:
  * @brief DMA USART transmit process half complete callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80097ae:	b580      	push	{r7, lr}
 80097b0:	b084      	sub	sp, #16
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ba:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Tx Half Complete Callback */
  husart->TxHalfCpltCallback(husart);
#else
  /* Call legacy weak Tx Half Complete Callback */
  HAL_USART_TxHalfCpltCallback(husart);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	0018      	movs	r0, r3
 80097c0:	f7ff ff88 	bl	80096d4 <HAL_USART_TxHalfCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 80097c4:	46c0      	nop			; (mov r8, r8)
 80097c6:	46bd      	mov	sp, r7
 80097c8:	b004      	add	sp, #16
 80097ca:	bd80      	pop	{r7, pc}

080097cc <USART_DMAError>:
  * @brief DMA USART communication error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAError(DMA_HandleTypeDef *hdma)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b084      	sub	sp, #16
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097d8:	60fb      	str	r3, [r7, #12]

  husart->RxXferCount = 0U;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2200      	movs	r2, #0
 80097de:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2200      	movs	r2, #0
 80097e4:	85da      	strh	r2, [r3, #46]	; 0x2e
  USART_EndTransfer(husart);
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	0018      	movs	r0, r3
 80097ea:	f7ff ff8b 	bl	8009704 <USART_EndTransfer>

  husart->ErrorCode |= HAL_USART_ERROR_DMA;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097f2:	2210      	movs	r2, #16
 80097f4:	431a      	orrs	r2, r3
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	65da      	str	r2, [r3, #92]	; 0x5c
  husart->State = HAL_USART_STATE_READY;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2259      	movs	r2, #89	; 0x59
 80097fe:	2101      	movs	r1, #1
 8009800:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	0018      	movs	r0, r3
 8009806:	f7ff ff75 	bl	80096f4 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 800980a:	46c0      	nop			; (mov r8, r8)
 800980c:	46bd      	mov	sp, r7
 800980e:	b004      	add	sp, #16
 8009810:	bd80      	pop	{r7, pc}

08009812 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009812:	b580      	push	{r7, lr}
 8009814:	b084      	sub	sp, #16
 8009816:	af00      	add	r7, sp, #0
 8009818:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800981e:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	2200      	movs	r2, #0
 8009824:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2200      	movs	r2, #0
 800982a:	85da      	strh	r2, [r3, #46]	; 0x2e
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	0018      	movs	r0, r3
 8009830:	f7ff ff60 	bl	80096f4 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8009834:	46c0      	nop			; (mov r8, r8)
 8009836:	46bd      	mov	sp, r7
 8009838:	b004      	add	sp, #16
 800983a:	bd80      	pop	{r7, pc}

0800983c <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b084      	sub	sp, #16
 8009840:	af00      	add	r7, sp, #0
 8009842:	60f8      	str	r0, [r7, #12]
 8009844:	60b9      	str	r1, [r7, #8]
 8009846:	603b      	str	r3, [r7, #0]
 8009848:	1dfb      	adds	r3, r7, #7
 800984a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800984c:	e017      	b.n	800987e <USART_WaitOnFlagUntilTimeout+0x42>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800984e:	69bb      	ldr	r3, [r7, #24]
 8009850:	3301      	adds	r3, #1
 8009852:	d014      	beq.n	800987e <USART_WaitOnFlagUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009854:	f7f9 fc4c 	bl	80030f0 <HAL_GetTick>
 8009858:	0002      	movs	r2, r0
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	1ad3      	subs	r3, r2, r3
 800985e:	69ba      	ldr	r2, [r7, #24]
 8009860:	429a      	cmp	r2, r3
 8009862:	d302      	bcc.n	800986a <USART_WaitOnFlagUntilTimeout+0x2e>
 8009864:	69bb      	ldr	r3, [r7, #24]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d109      	bne.n	800987e <USART_WaitOnFlagUntilTimeout+0x42>
      {
        husart->State = HAL_USART_STATE_READY;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	2259      	movs	r2, #89	; 0x59
 800986e:	2101      	movs	r1, #1
 8009870:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2258      	movs	r2, #88	; 0x58
 8009876:	2100      	movs	r1, #0
 8009878:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800987a:	2303      	movs	r3, #3
 800987c:	e00f      	b.n	800989e <USART_WaitOnFlagUntilTimeout+0x62>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	69db      	ldr	r3, [r3, #28]
 8009884:	68ba      	ldr	r2, [r7, #8]
 8009886:	4013      	ands	r3, r2
 8009888:	68ba      	ldr	r2, [r7, #8]
 800988a:	1ad3      	subs	r3, r2, r3
 800988c:	425a      	negs	r2, r3
 800988e:	4153      	adcs	r3, r2
 8009890:	b2db      	uxtb	r3, r3
 8009892:	001a      	movs	r2, r3
 8009894:	1dfb      	adds	r3, r7, #7
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	429a      	cmp	r2, r3
 800989a:	d0d8      	beq.n	800984e <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800989c:	2300      	movs	r3, #0
}
 800989e:	0018      	movs	r0, r3
 80098a0:	46bd      	mov	sp, r7
 80098a2:	b004      	add	sp, #16
 80098a4:	bd80      	pop	{r7, pc}
	...

080098a8 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b088      	sub	sp, #32
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 80098b0:	231e      	movs	r3, #30
 80098b2:	18fb      	adds	r3, r7, r3
 80098b4:	2200      	movs	r2, #0
 80098b6:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 80098b8:	2300      	movs	r3, #0
 80098ba:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	689a      	ldr	r2, [r3, #8]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	691b      	ldr	r3, [r3, #16]
 80098c4:	431a      	orrs	r2, r3
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	695b      	ldr	r3, [r3, #20]
 80098ca:	4313      	orrs	r3, r2
 80098cc:	2280      	movs	r2, #128	; 0x80
 80098ce:	0212      	lsls	r2, r2, #8
 80098d0:	4313      	orrs	r3, r2
 80098d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4ab1      	ldr	r2, [pc, #708]	; (8009ba0 <USART_SetConfig+0x2f8>)
 80098dc:	4013      	ands	r3, r2
 80098de:	0019      	movs	r1, r3
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	697a      	ldr	r2, [r7, #20]
 80098e6:	430a      	orrs	r2, r1
 80098e8:	601a      	str	r2, [r3, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 80098ea:	2380      	movs	r3, #128	; 0x80
 80098ec:	011b      	lsls	r3, r3, #4
 80098ee:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6a1b      	ldr	r3, [r3, #32]
 80098f4:	697a      	ldr	r2, [r7, #20]
 80098f6:	4313      	orrs	r3, r2
 80098f8:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	699a      	ldr	r2, [r3, #24]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	69db      	ldr	r3, [r3, #28]
 8009902:	4313      	orrs	r3, r2
 8009904:	697a      	ldr	r2, [r7, #20]
 8009906:	4313      	orrs	r3, r2
 8009908:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	68db      	ldr	r3, [r3, #12]
 800990e:	697a      	ldr	r2, [r7, #20]
 8009910:	4313      	orrs	r3, r2
 8009912:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	4aa2      	ldr	r2, [pc, #648]	; (8009ba4 <USART_SetConfig+0x2fc>)
 800991c:	4013      	ands	r3, r2
 800991e:	0019      	movs	r1, r3
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	697a      	ldr	r2, [r7, #20]
 8009926:	430a      	orrs	r2, r1
 8009928:	605a      	str	r2, [r3, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009930:	220f      	movs	r2, #15
 8009932:	4393      	bics	r3, r2
 8009934:	0019      	movs	r1, r3
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	430a      	orrs	r2, r1
 8009940:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4a98      	ldr	r2, [pc, #608]	; (8009ba8 <USART_SetConfig+0x300>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d127      	bne.n	800999c <USART_SetConfig+0xf4>
 800994c:	4b97      	ldr	r3, [pc, #604]	; (8009bac <USART_SetConfig+0x304>)
 800994e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009950:	2203      	movs	r2, #3
 8009952:	4013      	ands	r3, r2
 8009954:	2b03      	cmp	r3, #3
 8009956:	d017      	beq.n	8009988 <USART_SetConfig+0xe0>
 8009958:	d81b      	bhi.n	8009992 <USART_SetConfig+0xea>
 800995a:	2b02      	cmp	r3, #2
 800995c:	d00a      	beq.n	8009974 <USART_SetConfig+0xcc>
 800995e:	d818      	bhi.n	8009992 <USART_SetConfig+0xea>
 8009960:	2b00      	cmp	r3, #0
 8009962:	d002      	beq.n	800996a <USART_SetConfig+0xc2>
 8009964:	2b01      	cmp	r3, #1
 8009966:	d00a      	beq.n	800997e <USART_SetConfig+0xd6>
 8009968:	e013      	b.n	8009992 <USART_SetConfig+0xea>
 800996a:	231f      	movs	r3, #31
 800996c:	18fb      	adds	r3, r7, r3
 800996e:	2200      	movs	r2, #0
 8009970:	701a      	strb	r2, [r3, #0]
 8009972:	e058      	b.n	8009a26 <USART_SetConfig+0x17e>
 8009974:	231f      	movs	r3, #31
 8009976:	18fb      	adds	r3, r7, r3
 8009978:	2202      	movs	r2, #2
 800997a:	701a      	strb	r2, [r3, #0]
 800997c:	e053      	b.n	8009a26 <USART_SetConfig+0x17e>
 800997e:	231f      	movs	r3, #31
 8009980:	18fb      	adds	r3, r7, r3
 8009982:	2204      	movs	r2, #4
 8009984:	701a      	strb	r2, [r3, #0]
 8009986:	e04e      	b.n	8009a26 <USART_SetConfig+0x17e>
 8009988:	231f      	movs	r3, #31
 800998a:	18fb      	adds	r3, r7, r3
 800998c:	2208      	movs	r2, #8
 800998e:	701a      	strb	r2, [r3, #0]
 8009990:	e049      	b.n	8009a26 <USART_SetConfig+0x17e>
 8009992:	231f      	movs	r3, #31
 8009994:	18fb      	adds	r3, r7, r3
 8009996:	2210      	movs	r2, #16
 8009998:	701a      	strb	r2, [r3, #0]
 800999a:	e044      	b.n	8009a26 <USART_SetConfig+0x17e>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a83      	ldr	r2, [pc, #524]	; (8009bb0 <USART_SetConfig+0x308>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d127      	bne.n	80099f6 <USART_SetConfig+0x14e>
 80099a6:	4b81      	ldr	r3, [pc, #516]	; (8009bac <USART_SetConfig+0x304>)
 80099a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099aa:	220c      	movs	r2, #12
 80099ac:	4013      	ands	r3, r2
 80099ae:	2b0c      	cmp	r3, #12
 80099b0:	d017      	beq.n	80099e2 <USART_SetConfig+0x13a>
 80099b2:	d81b      	bhi.n	80099ec <USART_SetConfig+0x144>
 80099b4:	2b08      	cmp	r3, #8
 80099b6:	d00a      	beq.n	80099ce <USART_SetConfig+0x126>
 80099b8:	d818      	bhi.n	80099ec <USART_SetConfig+0x144>
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d002      	beq.n	80099c4 <USART_SetConfig+0x11c>
 80099be:	2b04      	cmp	r3, #4
 80099c0:	d00a      	beq.n	80099d8 <USART_SetConfig+0x130>
 80099c2:	e013      	b.n	80099ec <USART_SetConfig+0x144>
 80099c4:	231f      	movs	r3, #31
 80099c6:	18fb      	adds	r3, r7, r3
 80099c8:	2200      	movs	r2, #0
 80099ca:	701a      	strb	r2, [r3, #0]
 80099cc:	e02b      	b.n	8009a26 <USART_SetConfig+0x17e>
 80099ce:	231f      	movs	r3, #31
 80099d0:	18fb      	adds	r3, r7, r3
 80099d2:	2202      	movs	r2, #2
 80099d4:	701a      	strb	r2, [r3, #0]
 80099d6:	e026      	b.n	8009a26 <USART_SetConfig+0x17e>
 80099d8:	231f      	movs	r3, #31
 80099da:	18fb      	adds	r3, r7, r3
 80099dc:	2204      	movs	r2, #4
 80099de:	701a      	strb	r2, [r3, #0]
 80099e0:	e021      	b.n	8009a26 <USART_SetConfig+0x17e>
 80099e2:	231f      	movs	r3, #31
 80099e4:	18fb      	adds	r3, r7, r3
 80099e6:	2208      	movs	r2, #8
 80099e8:	701a      	strb	r2, [r3, #0]
 80099ea:	e01c      	b.n	8009a26 <USART_SetConfig+0x17e>
 80099ec:	231f      	movs	r3, #31
 80099ee:	18fb      	adds	r3, r7, r3
 80099f0:	2210      	movs	r2, #16
 80099f2:	701a      	strb	r2, [r3, #0]
 80099f4:	e017      	b.n	8009a26 <USART_SetConfig+0x17e>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a6e      	ldr	r2, [pc, #440]	; (8009bb4 <USART_SetConfig+0x30c>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d104      	bne.n	8009a0a <USART_SetConfig+0x162>
 8009a00:	231f      	movs	r3, #31
 8009a02:	18fb      	adds	r3, r7, r3
 8009a04:	2200      	movs	r2, #0
 8009a06:	701a      	strb	r2, [r3, #0]
 8009a08:	e00d      	b.n	8009a26 <USART_SetConfig+0x17e>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a6a      	ldr	r2, [pc, #424]	; (8009bb8 <USART_SetConfig+0x310>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d104      	bne.n	8009a1e <USART_SetConfig+0x176>
 8009a14:	231f      	movs	r3, #31
 8009a16:	18fb      	adds	r3, r7, r3
 8009a18:	2200      	movs	r2, #0
 8009a1a:	701a      	strb	r2, [r3, #0]
 8009a1c:	e003      	b.n	8009a26 <USART_SetConfig+0x17e>
 8009a1e:	231f      	movs	r3, #31
 8009a20:	18fb      	adds	r3, r7, r3
 8009a22:	2210      	movs	r2, #16
 8009a24:	701a      	strb	r2, [r3, #0]

  switch (clocksource)
 8009a26:	231f      	movs	r3, #31
 8009a28:	18fb      	adds	r3, r7, r3
 8009a2a:	781b      	ldrb	r3, [r3, #0]
 8009a2c:	2b08      	cmp	r3, #8
 8009a2e:	d100      	bne.n	8009a32 <USART_SetConfig+0x18a>
 8009a30:	e139      	b.n	8009ca6 <USART_SetConfig+0x3fe>
 8009a32:	dd00      	ble.n	8009a36 <USART_SetConfig+0x18e>
 8009a34:	e195      	b.n	8009d62 <USART_SetConfig+0x4ba>
 8009a36:	2b04      	cmp	r3, #4
 8009a38:	d100      	bne.n	8009a3c <USART_SetConfig+0x194>
 8009a3a:	e0d3      	b.n	8009be4 <USART_SetConfig+0x33c>
 8009a3c:	dd00      	ble.n	8009a40 <USART_SetConfig+0x198>
 8009a3e:	e190      	b.n	8009d62 <USART_SetConfig+0x4ba>
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d003      	beq.n	8009a4c <USART_SetConfig+0x1a4>
 8009a44:	2b02      	cmp	r3, #2
 8009a46:	d100      	bne.n	8009a4a <USART_SetConfig+0x1a2>
 8009a48:	e061      	b.n	8009b0e <USART_SetConfig+0x266>
 8009a4a:	e18a      	b.n	8009d62 <USART_SetConfig+0x4ba>
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8009a4c:	f7fc f904 	bl	8005c58 <HAL_RCC_GetPCLK1Freq>
 8009a50:	0003      	movs	r3, r0
 8009a52:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d044      	beq.n	8009ae6 <USART_SetConfig+0x23e>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d03e      	beq.n	8009ae2 <USART_SetConfig+0x23a>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a68:	2b02      	cmp	r3, #2
 8009a6a:	d038      	beq.n	8009ade <USART_SetConfig+0x236>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a70:	2b03      	cmp	r3, #3
 8009a72:	d032      	beq.n	8009ada <USART_SetConfig+0x232>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a78:	2b04      	cmp	r3, #4
 8009a7a:	d02c      	beq.n	8009ad6 <USART_SetConfig+0x22e>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a80:	2b05      	cmp	r3, #5
 8009a82:	d026      	beq.n	8009ad2 <USART_SetConfig+0x22a>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a88:	2b06      	cmp	r3, #6
 8009a8a:	d020      	beq.n	8009ace <USART_SetConfig+0x226>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a90:	2b07      	cmp	r3, #7
 8009a92:	d01a      	beq.n	8009aca <USART_SetConfig+0x222>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a98:	2b08      	cmp	r3, #8
 8009a9a:	d014      	beq.n	8009ac6 <USART_SetConfig+0x21e>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa0:	2b09      	cmp	r3, #9
 8009aa2:	d00e      	beq.n	8009ac2 <USART_SetConfig+0x21a>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa8:	2b0a      	cmp	r3, #10
 8009aaa:	d008      	beq.n	8009abe <USART_SetConfig+0x216>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab0:	2b0b      	cmp	r3, #11
 8009ab2:	d102      	bne.n	8009aba <USART_SetConfig+0x212>
 8009ab4:	2380      	movs	r3, #128	; 0x80
 8009ab6:	005b      	lsls	r3, r3, #1
 8009ab8:	e016      	b.n	8009ae8 <USART_SetConfig+0x240>
 8009aba:	2301      	movs	r3, #1
 8009abc:	e014      	b.n	8009ae8 <USART_SetConfig+0x240>
 8009abe:	2380      	movs	r3, #128	; 0x80
 8009ac0:	e012      	b.n	8009ae8 <USART_SetConfig+0x240>
 8009ac2:	2340      	movs	r3, #64	; 0x40
 8009ac4:	e010      	b.n	8009ae8 <USART_SetConfig+0x240>
 8009ac6:	2320      	movs	r3, #32
 8009ac8:	e00e      	b.n	8009ae8 <USART_SetConfig+0x240>
 8009aca:	2310      	movs	r3, #16
 8009acc:	e00c      	b.n	8009ae8 <USART_SetConfig+0x240>
 8009ace:	230c      	movs	r3, #12
 8009ad0:	e00a      	b.n	8009ae8 <USART_SetConfig+0x240>
 8009ad2:	230a      	movs	r3, #10
 8009ad4:	e008      	b.n	8009ae8 <USART_SetConfig+0x240>
 8009ad6:	2308      	movs	r3, #8
 8009ad8:	e006      	b.n	8009ae8 <USART_SetConfig+0x240>
 8009ada:	2306      	movs	r3, #6
 8009adc:	e004      	b.n	8009ae8 <USART_SetConfig+0x240>
 8009ade:	2304      	movs	r3, #4
 8009ae0:	e002      	b.n	8009ae8 <USART_SetConfig+0x240>
 8009ae2:	2302      	movs	r3, #2
 8009ae4:	e000      	b.n	8009ae8 <USART_SetConfig+0x240>
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	0019      	movs	r1, r3
 8009aea:	6938      	ldr	r0, [r7, #16]
 8009aec:	f7f6 fb0a 	bl	8000104 <__udivsi3>
 8009af0:	0003      	movs	r3, r0
 8009af2:	005a      	lsls	r2, r3, #1
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	085b      	lsrs	r3, r3, #1
 8009afa:	18d2      	adds	r2, r2, r3
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	0019      	movs	r1, r3
 8009b02:	0010      	movs	r0, r2
 8009b04:	f7f6 fafe 	bl	8000104 <__udivsi3>
 8009b08:	0003      	movs	r3, r0
 8009b0a:	61bb      	str	r3, [r7, #24]
      break;
 8009b0c:	e12e      	b.n	8009d6c <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d052      	beq.n	8009bbc <USART_SetConfig+0x314>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b1a:	2b01      	cmp	r3, #1
 8009b1c:	d03e      	beq.n	8009b9c <USART_SetConfig+0x2f4>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b22:	2b02      	cmp	r3, #2
 8009b24:	d038      	beq.n	8009b98 <USART_SetConfig+0x2f0>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b2a:	2b03      	cmp	r3, #3
 8009b2c:	d032      	beq.n	8009b94 <USART_SetConfig+0x2ec>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b32:	2b04      	cmp	r3, #4
 8009b34:	d02c      	beq.n	8009b90 <USART_SetConfig+0x2e8>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b3a:	2b05      	cmp	r3, #5
 8009b3c:	d026      	beq.n	8009b8c <USART_SetConfig+0x2e4>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b42:	2b06      	cmp	r3, #6
 8009b44:	d020      	beq.n	8009b88 <USART_SetConfig+0x2e0>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b4a:	2b07      	cmp	r3, #7
 8009b4c:	d01a      	beq.n	8009b84 <USART_SetConfig+0x2dc>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b52:	2b08      	cmp	r3, #8
 8009b54:	d014      	beq.n	8009b80 <USART_SetConfig+0x2d8>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b5a:	2b09      	cmp	r3, #9
 8009b5c:	d00e      	beq.n	8009b7c <USART_SetConfig+0x2d4>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b62:	2b0a      	cmp	r3, #10
 8009b64:	d008      	beq.n	8009b78 <USART_SetConfig+0x2d0>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b6a:	2b0b      	cmp	r3, #11
 8009b6c:	d102      	bne.n	8009b74 <USART_SetConfig+0x2cc>
 8009b6e:	2380      	movs	r3, #128	; 0x80
 8009b70:	005b      	lsls	r3, r3, #1
 8009b72:	e024      	b.n	8009bbe <USART_SetConfig+0x316>
 8009b74:	2301      	movs	r3, #1
 8009b76:	e022      	b.n	8009bbe <USART_SetConfig+0x316>
 8009b78:	2380      	movs	r3, #128	; 0x80
 8009b7a:	e020      	b.n	8009bbe <USART_SetConfig+0x316>
 8009b7c:	2340      	movs	r3, #64	; 0x40
 8009b7e:	e01e      	b.n	8009bbe <USART_SetConfig+0x316>
 8009b80:	2320      	movs	r3, #32
 8009b82:	e01c      	b.n	8009bbe <USART_SetConfig+0x316>
 8009b84:	2310      	movs	r3, #16
 8009b86:	e01a      	b.n	8009bbe <USART_SetConfig+0x316>
 8009b88:	230c      	movs	r3, #12
 8009b8a:	e018      	b.n	8009bbe <USART_SetConfig+0x316>
 8009b8c:	230a      	movs	r3, #10
 8009b8e:	e016      	b.n	8009bbe <USART_SetConfig+0x316>
 8009b90:	2308      	movs	r3, #8
 8009b92:	e014      	b.n	8009bbe <USART_SetConfig+0x316>
 8009b94:	2306      	movs	r3, #6
 8009b96:	e012      	b.n	8009bbe <USART_SetConfig+0x316>
 8009b98:	2304      	movs	r3, #4
 8009b9a:	e010      	b.n	8009bbe <USART_SetConfig+0x316>
 8009b9c:	2302      	movs	r3, #2
 8009b9e:	e00e      	b.n	8009bbe <USART_SetConfig+0x316>
 8009ba0:	cfff69f3 	.word	0xcfff69f3
 8009ba4:	ffffc0f6 	.word	0xffffc0f6
 8009ba8:	40013800 	.word	0x40013800
 8009bac:	40021000 	.word	0x40021000
 8009bb0:	40004400 	.word	0x40004400
 8009bb4:	40004800 	.word	0x40004800
 8009bb8:	40004c00 	.word	0x40004c00
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	0019      	movs	r1, r3
 8009bc0:	4886      	ldr	r0, [pc, #536]	; (8009ddc <USART_SetConfig+0x534>)
 8009bc2:	f7f6 fa9f 	bl	8000104 <__udivsi3>
 8009bc6:	0003      	movs	r3, r0
 8009bc8:	005a      	lsls	r2, r3, #1
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	085b      	lsrs	r3, r3, #1
 8009bd0:	18d2      	adds	r2, r2, r3
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	0019      	movs	r1, r3
 8009bd8:	0010      	movs	r0, r2
 8009bda:	f7f6 fa93 	bl	8000104 <__udivsi3>
 8009bde:	0003      	movs	r3, r0
 8009be0:	61bb      	str	r3, [r7, #24]
      break;
 8009be2:	e0c3      	b.n	8009d6c <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8009be4:	f7fb ffac 	bl	8005b40 <HAL_RCC_GetSysClockFreq>
 8009be8:	0003      	movs	r3, r0
 8009bea:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d044      	beq.n	8009c7e <USART_SetConfig+0x3d6>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d03e      	beq.n	8009c7a <USART_SetConfig+0x3d2>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c00:	2b02      	cmp	r3, #2
 8009c02:	d038      	beq.n	8009c76 <USART_SetConfig+0x3ce>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c08:	2b03      	cmp	r3, #3
 8009c0a:	d032      	beq.n	8009c72 <USART_SetConfig+0x3ca>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c10:	2b04      	cmp	r3, #4
 8009c12:	d02c      	beq.n	8009c6e <USART_SetConfig+0x3c6>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c18:	2b05      	cmp	r3, #5
 8009c1a:	d026      	beq.n	8009c6a <USART_SetConfig+0x3c2>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c20:	2b06      	cmp	r3, #6
 8009c22:	d020      	beq.n	8009c66 <USART_SetConfig+0x3be>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c28:	2b07      	cmp	r3, #7
 8009c2a:	d01a      	beq.n	8009c62 <USART_SetConfig+0x3ba>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c30:	2b08      	cmp	r3, #8
 8009c32:	d014      	beq.n	8009c5e <USART_SetConfig+0x3b6>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c38:	2b09      	cmp	r3, #9
 8009c3a:	d00e      	beq.n	8009c5a <USART_SetConfig+0x3b2>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c40:	2b0a      	cmp	r3, #10
 8009c42:	d008      	beq.n	8009c56 <USART_SetConfig+0x3ae>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c48:	2b0b      	cmp	r3, #11
 8009c4a:	d102      	bne.n	8009c52 <USART_SetConfig+0x3aa>
 8009c4c:	2380      	movs	r3, #128	; 0x80
 8009c4e:	005b      	lsls	r3, r3, #1
 8009c50:	e016      	b.n	8009c80 <USART_SetConfig+0x3d8>
 8009c52:	2301      	movs	r3, #1
 8009c54:	e014      	b.n	8009c80 <USART_SetConfig+0x3d8>
 8009c56:	2380      	movs	r3, #128	; 0x80
 8009c58:	e012      	b.n	8009c80 <USART_SetConfig+0x3d8>
 8009c5a:	2340      	movs	r3, #64	; 0x40
 8009c5c:	e010      	b.n	8009c80 <USART_SetConfig+0x3d8>
 8009c5e:	2320      	movs	r3, #32
 8009c60:	e00e      	b.n	8009c80 <USART_SetConfig+0x3d8>
 8009c62:	2310      	movs	r3, #16
 8009c64:	e00c      	b.n	8009c80 <USART_SetConfig+0x3d8>
 8009c66:	230c      	movs	r3, #12
 8009c68:	e00a      	b.n	8009c80 <USART_SetConfig+0x3d8>
 8009c6a:	230a      	movs	r3, #10
 8009c6c:	e008      	b.n	8009c80 <USART_SetConfig+0x3d8>
 8009c6e:	2308      	movs	r3, #8
 8009c70:	e006      	b.n	8009c80 <USART_SetConfig+0x3d8>
 8009c72:	2306      	movs	r3, #6
 8009c74:	e004      	b.n	8009c80 <USART_SetConfig+0x3d8>
 8009c76:	2304      	movs	r3, #4
 8009c78:	e002      	b.n	8009c80 <USART_SetConfig+0x3d8>
 8009c7a:	2302      	movs	r3, #2
 8009c7c:	e000      	b.n	8009c80 <USART_SetConfig+0x3d8>
 8009c7e:	2301      	movs	r3, #1
 8009c80:	0019      	movs	r1, r3
 8009c82:	6938      	ldr	r0, [r7, #16]
 8009c84:	f7f6 fa3e 	bl	8000104 <__udivsi3>
 8009c88:	0003      	movs	r3, r0
 8009c8a:	005a      	lsls	r2, r3, #1
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	085b      	lsrs	r3, r3, #1
 8009c92:	18d2      	adds	r2, r2, r3
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	0019      	movs	r1, r3
 8009c9a:	0010      	movs	r0, r2
 8009c9c:	f7f6 fa32 	bl	8000104 <__udivsi3>
 8009ca0:	0003      	movs	r3, r0
 8009ca2:	61bb      	str	r3, [r7, #24]
      break;
 8009ca4:	e062      	b.n	8009d6c <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8((uint32_t)LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d044      	beq.n	8009d38 <USART_SetConfig+0x490>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d03e      	beq.n	8009d34 <USART_SetConfig+0x48c>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cba:	2b02      	cmp	r3, #2
 8009cbc:	d038      	beq.n	8009d30 <USART_SetConfig+0x488>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc2:	2b03      	cmp	r3, #3
 8009cc4:	d032      	beq.n	8009d2c <USART_SetConfig+0x484>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cca:	2b04      	cmp	r3, #4
 8009ccc:	d02c      	beq.n	8009d28 <USART_SetConfig+0x480>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd2:	2b05      	cmp	r3, #5
 8009cd4:	d026      	beq.n	8009d24 <USART_SetConfig+0x47c>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cda:	2b06      	cmp	r3, #6
 8009cdc:	d020      	beq.n	8009d20 <USART_SetConfig+0x478>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce2:	2b07      	cmp	r3, #7
 8009ce4:	d01a      	beq.n	8009d1c <USART_SetConfig+0x474>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cea:	2b08      	cmp	r3, #8
 8009cec:	d014      	beq.n	8009d18 <USART_SetConfig+0x470>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf2:	2b09      	cmp	r3, #9
 8009cf4:	d00e      	beq.n	8009d14 <USART_SetConfig+0x46c>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cfa:	2b0a      	cmp	r3, #10
 8009cfc:	d008      	beq.n	8009d10 <USART_SetConfig+0x468>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d02:	2b0b      	cmp	r3, #11
 8009d04:	d102      	bne.n	8009d0c <USART_SetConfig+0x464>
 8009d06:	2380      	movs	r3, #128	; 0x80
 8009d08:	005b      	lsls	r3, r3, #1
 8009d0a:	e016      	b.n	8009d3a <USART_SetConfig+0x492>
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	e014      	b.n	8009d3a <USART_SetConfig+0x492>
 8009d10:	2380      	movs	r3, #128	; 0x80
 8009d12:	e012      	b.n	8009d3a <USART_SetConfig+0x492>
 8009d14:	2340      	movs	r3, #64	; 0x40
 8009d16:	e010      	b.n	8009d3a <USART_SetConfig+0x492>
 8009d18:	2320      	movs	r3, #32
 8009d1a:	e00e      	b.n	8009d3a <USART_SetConfig+0x492>
 8009d1c:	2310      	movs	r3, #16
 8009d1e:	e00c      	b.n	8009d3a <USART_SetConfig+0x492>
 8009d20:	230c      	movs	r3, #12
 8009d22:	e00a      	b.n	8009d3a <USART_SetConfig+0x492>
 8009d24:	230a      	movs	r3, #10
 8009d26:	e008      	b.n	8009d3a <USART_SetConfig+0x492>
 8009d28:	2308      	movs	r3, #8
 8009d2a:	e006      	b.n	8009d3a <USART_SetConfig+0x492>
 8009d2c:	2306      	movs	r3, #6
 8009d2e:	e004      	b.n	8009d3a <USART_SetConfig+0x492>
 8009d30:	2304      	movs	r3, #4
 8009d32:	e002      	b.n	8009d3a <USART_SetConfig+0x492>
 8009d34:	2302      	movs	r3, #2
 8009d36:	e000      	b.n	8009d3a <USART_SetConfig+0x492>
 8009d38:	2301      	movs	r3, #1
 8009d3a:	0019      	movs	r1, r3
 8009d3c:	2380      	movs	r3, #128	; 0x80
 8009d3e:	0218      	lsls	r0, r3, #8
 8009d40:	f7f6 f9e0 	bl	8000104 <__udivsi3>
 8009d44:	0003      	movs	r3, r0
 8009d46:	005a      	lsls	r2, r3, #1
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	685b      	ldr	r3, [r3, #4]
 8009d4c:	085b      	lsrs	r3, r3, #1
 8009d4e:	18d2      	adds	r2, r2, r3
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	0019      	movs	r1, r3
 8009d56:	0010      	movs	r0, r2
 8009d58:	f7f6 f9d4 	bl	8000104 <__udivsi3>
 8009d5c:	0003      	movs	r3, r0
 8009d5e:	61bb      	str	r3, [r7, #24]
      break;
 8009d60:	e004      	b.n	8009d6c <USART_SetConfig+0x4c4>
    default:
      ret = HAL_ERROR;
 8009d62:	231e      	movs	r3, #30
 8009d64:	18fb      	adds	r3, r7, r3
 8009d66:	2201      	movs	r2, #1
 8009d68:	701a      	strb	r2, [r3, #0]
      break;
 8009d6a:	46c0      	nop			; (mov r8, r8)
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8009d6c:	69bb      	ldr	r3, [r7, #24]
 8009d6e:	2b0f      	cmp	r3, #15
 8009d70:	d91c      	bls.n	8009dac <USART_SetConfig+0x504>
 8009d72:	69ba      	ldr	r2, [r7, #24]
 8009d74:	2380      	movs	r3, #128	; 0x80
 8009d76:	025b      	lsls	r3, r3, #9
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d217      	bcs.n	8009dac <USART_SetConfig+0x504>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d7c:	69bb      	ldr	r3, [r7, #24]
 8009d7e:	b29a      	uxth	r2, r3
 8009d80:	200e      	movs	r0, #14
 8009d82:	183b      	adds	r3, r7, r0
 8009d84:	210f      	movs	r1, #15
 8009d86:	438a      	bics	r2, r1
 8009d88:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d8a:	69bb      	ldr	r3, [r7, #24]
 8009d8c:	085b      	lsrs	r3, r3, #1
 8009d8e:	b29b      	uxth	r3, r3
 8009d90:	2207      	movs	r2, #7
 8009d92:	4013      	ands	r3, r2
 8009d94:	b299      	uxth	r1, r3
 8009d96:	183b      	adds	r3, r7, r0
 8009d98:	183a      	adds	r2, r7, r0
 8009d9a:	8812      	ldrh	r2, [r2, #0]
 8009d9c:	430a      	orrs	r2, r1
 8009d9e:	801a      	strh	r2, [r3, #0]
    husart->Instance->BRR = brrtemp;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	183a      	adds	r2, r7, r0
 8009da6:	8812      	ldrh	r2, [r2, #0]
 8009da8:	60da      	str	r2, [r3, #12]
 8009daa:	e003      	b.n	8009db4 <USART_SetConfig+0x50c>
  }
  else
  {
    ret = HAL_ERROR;
 8009dac:	231e      	movs	r3, #30
 8009dae:	18fb      	adds	r3, r7, r3
 8009db0:	2201      	movs	r2, #1
 8009db2:	701a      	strb	r2, [r3, #0]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2201      	movs	r2, #1
 8009db8:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 8009dcc:	231e      	movs	r3, #30
 8009dce:	18fb      	adds	r3, r7, r3
 8009dd0:	781b      	ldrb	r3, [r3, #0]
}
 8009dd2:	0018      	movs	r0, r3
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	b008      	add	sp, #32
 8009dd8:	bd80      	pop	{r7, pc}
 8009dda:	46c0      	nop			; (mov r8, r8)
 8009ddc:	00f42400 	.word	0x00f42400

08009de0 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b086      	sub	sp, #24
 8009de4:	af02      	add	r7, sp, #8
 8009de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2200      	movs	r2, #0
 8009dec:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009dee:	f7f9 f97f 	bl	80030f0 <HAL_GetTick>
 8009df2:	0003      	movs	r3, r0
 8009df4:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	2208      	movs	r2, #8
 8009dfe:	4013      	ands	r3, r2
 8009e00:	2b08      	cmp	r3, #8
 8009e02:	d10e      	bne.n	8009e22 <USART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8009e04:	68fa      	ldr	r2, [r7, #12]
 8009e06:	2380      	movs	r3, #128	; 0x80
 8009e08:	0399      	lsls	r1, r3, #14
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	23fa      	movs	r3, #250	; 0xfa
 8009e0e:	009b      	lsls	r3, r3, #2
 8009e10:	9300      	str	r3, [sp, #0]
 8009e12:	0013      	movs	r3, r2
 8009e14:	2200      	movs	r2, #0
 8009e16:	f7ff fd11 	bl	800983c <USART_WaitOnFlagUntilTimeout>
 8009e1a:	1e03      	subs	r3, r0, #0
 8009e1c:	d001      	beq.n	8009e22 <USART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e1e:	2303      	movs	r3, #3
 8009e20:	e01e      	b.n	8009e60 <USART_CheckIdleState+0x80>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	2204      	movs	r2, #4
 8009e2a:	4013      	ands	r3, r2
 8009e2c:	2b04      	cmp	r3, #4
 8009e2e:	d10e      	bne.n	8009e4e <USART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8009e30:	68fa      	ldr	r2, [r7, #12]
 8009e32:	2380      	movs	r3, #128	; 0x80
 8009e34:	03d9      	lsls	r1, r3, #15
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	23fa      	movs	r3, #250	; 0xfa
 8009e3a:	009b      	lsls	r3, r3, #2
 8009e3c:	9300      	str	r3, [sp, #0]
 8009e3e:	0013      	movs	r3, r2
 8009e40:	2200      	movs	r2, #0
 8009e42:	f7ff fcfb 	bl	800983c <USART_WaitOnFlagUntilTimeout>
 8009e46:	1e03      	subs	r3, r0, #0
 8009e48:	d001      	beq.n	8009e4e <USART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e4a:	2303      	movs	r3, #3
 8009e4c:	e008      	b.n	8009e60 <USART_CheckIdleState+0x80>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2259      	movs	r2, #89	; 0x59
 8009e52:	2101      	movs	r1, #1
 8009e54:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2258      	movs	r2, #88	; 0x58
 8009e5a:	2100      	movs	r1, #0
 8009e5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009e5e:	2300      	movs	r3, #0
}
 8009e60:	0018      	movs	r0, r3
 8009e62:	46bd      	mov	sp, r7
 8009e64:	b004      	add	sp, #16
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b082      	sub	sp, #8
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	681a      	ldr	r2, [r3, #0]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	2140      	movs	r1, #64	; 0x40
 8009e7c:	438a      	bics	r2, r1
 8009e7e:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	689a      	ldr	r2, [r3, #8]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	2101      	movs	r1, #1
 8009e8c:	438a      	bics	r2, r1
 8009e8e:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2200      	movs	r2, #0
 8009e94:	64da      	str	r2, [r3, #76]	; 0x4c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2259      	movs	r2, #89	; 0x59
 8009e9a:	5c9b      	ldrb	r3, [r3, r2]
 8009e9c:	b2db      	uxtb	r3, r3
 8009e9e:	2b12      	cmp	r3, #18
 8009ea0:	d114      	bne.n	8009ecc <USART_EndTransmit_IT+0x64>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	2208      	movs	r2, #8
 8009ea8:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	699a      	ldr	r2, [r3, #24]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	2108      	movs	r1, #8
 8009eb6:	430a      	orrs	r2, r1
 8009eb8:	619a      	str	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2259      	movs	r2, #89	; 0x59
 8009ebe:	2101      	movs	r1, #1
 8009ec0:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	0018      	movs	r0, r3
 8009ec6:	f7f7 f903 	bl	80010d0 <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009eca:	e00c      	b.n	8009ee6 <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ed0:	b29b      	uxth	r3, r3
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d107      	bne.n	8009ee6 <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2259      	movs	r2, #89	; 0x59
 8009eda:	2101      	movs	r1, #1
 8009edc:	5499      	strb	r1, [r3, r2]
    HAL_USART_TxRxCpltCallback(husart);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	0018      	movs	r0, r3
 8009ee2:	f7ff fbff 	bl	80096e4 <HAL_USART_TxRxCpltCallback>
}
 8009ee6:	46c0      	nop			; (mov r8, r8)
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	b002      	add	sp, #8
 8009eec:	bd80      	pop	{r7, pc}

08009eee <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
 8009eee:	b580      	push	{r7, lr}
 8009ef0:	b082      	sub	sp, #8
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009ef6:	46c0      	nop			; (mov r8, r8)
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	b002      	add	sp, #8
 8009efc:	bd80      	pop	{r7, pc}

08009efe <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
 8009efe:	b580      	push	{r7, lr}
 8009f00:	b082      	sub	sp, #8
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009f06:	46c0      	nop			; (mov r8, r8)
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	b002      	add	sp, #8
 8009f0c:	bd80      	pop	{r7, pc}

08009f0e <LL_GPIO_SetPinMode>:
{
 8009f0e:	b580      	push	{r7, lr}
 8009f10:	b084      	sub	sp, #16
 8009f12:	af00      	add	r7, sp, #0
 8009f14:	60f8      	str	r0, [r7, #12]
 8009f16:	60b9      	str	r1, [r7, #8]
 8009f18:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	6819      	ldr	r1, [r3, #0]
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	435b      	muls	r3, r3
 8009f22:	001a      	movs	r2, r3
 8009f24:	0013      	movs	r3, r2
 8009f26:	005b      	lsls	r3, r3, #1
 8009f28:	189b      	adds	r3, r3, r2
 8009f2a:	43db      	mvns	r3, r3
 8009f2c:	400b      	ands	r3, r1
 8009f2e:	001a      	movs	r2, r3
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	435b      	muls	r3, r3
 8009f34:	6879      	ldr	r1, [r7, #4]
 8009f36:	434b      	muls	r3, r1
 8009f38:	431a      	orrs	r2, r3
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	601a      	str	r2, [r3, #0]
}
 8009f3e:	46c0      	nop			; (mov r8, r8)
 8009f40:	46bd      	mov	sp, r7
 8009f42:	b004      	add	sp, #16
 8009f44:	bd80      	pop	{r7, pc}

08009f46 <LL_GPIO_SetPinOutputType>:
{
 8009f46:	b580      	push	{r7, lr}
 8009f48:	b084      	sub	sp, #16
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	60f8      	str	r0, [r7, #12]
 8009f4e:	60b9      	str	r1, [r7, #8]
 8009f50:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	685b      	ldr	r3, [r3, #4]
 8009f56:	68ba      	ldr	r2, [r7, #8]
 8009f58:	43d2      	mvns	r2, r2
 8009f5a:	401a      	ands	r2, r3
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	6879      	ldr	r1, [r7, #4]
 8009f60:	434b      	muls	r3, r1
 8009f62:	431a      	orrs	r2, r3
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	605a      	str	r2, [r3, #4]
}
 8009f68:	46c0      	nop			; (mov r8, r8)
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	b004      	add	sp, #16
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <LL_GPIO_SetPinSpeed>:
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	60b9      	str	r1, [r7, #8]
 8009f7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	6899      	ldr	r1, [r3, #8]
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	435b      	muls	r3, r3
 8009f84:	001a      	movs	r2, r3
 8009f86:	0013      	movs	r3, r2
 8009f88:	005b      	lsls	r3, r3, #1
 8009f8a:	189b      	adds	r3, r3, r2
 8009f8c:	43db      	mvns	r3, r3
 8009f8e:	400b      	ands	r3, r1
 8009f90:	001a      	movs	r2, r3
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	435b      	muls	r3, r3
 8009f96:	6879      	ldr	r1, [r7, #4]
 8009f98:	434b      	muls	r3, r1
 8009f9a:	431a      	orrs	r2, r3
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	609a      	str	r2, [r3, #8]
}
 8009fa0:	46c0      	nop			; (mov r8, r8)
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	b004      	add	sp, #16
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <LL_GPIO_SetPinPull>:
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b084      	sub	sp, #16
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	60f8      	str	r0, [r7, #12]
 8009fb0:	60b9      	str	r1, [r7, #8]
 8009fb2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	68d9      	ldr	r1, [r3, #12]
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	435b      	muls	r3, r3
 8009fbc:	001a      	movs	r2, r3
 8009fbe:	0013      	movs	r3, r2
 8009fc0:	005b      	lsls	r3, r3, #1
 8009fc2:	189b      	adds	r3, r3, r2
 8009fc4:	43db      	mvns	r3, r3
 8009fc6:	400b      	ands	r3, r1
 8009fc8:	001a      	movs	r2, r3
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	435b      	muls	r3, r3
 8009fce:	6879      	ldr	r1, [r7, #4]
 8009fd0:	434b      	muls	r3, r1
 8009fd2:	431a      	orrs	r2, r3
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	60da      	str	r2, [r3, #12]
}
 8009fd8:	46c0      	nop			; (mov r8, r8)
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	b004      	add	sp, #16
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <LL_GPIO_SetAFPin_0_7>:
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b084      	sub	sp, #16
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	60f8      	str	r0, [r7, #12]
 8009fe8:	60b9      	str	r1, [r7, #8]
 8009fea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	6a19      	ldr	r1, [r3, #32]
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	435b      	muls	r3, r3
 8009ff4:	68ba      	ldr	r2, [r7, #8]
 8009ff6:	4353      	muls	r3, r2
 8009ff8:	68ba      	ldr	r2, [r7, #8]
 8009ffa:	435a      	muls	r2, r3
 8009ffc:	0013      	movs	r3, r2
 8009ffe:	011b      	lsls	r3, r3, #4
 800a000:	1a9b      	subs	r3, r3, r2
 800a002:	43db      	mvns	r3, r3
 800a004:	400b      	ands	r3, r1
 800a006:	001a      	movs	r2, r3
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	435b      	muls	r3, r3
 800a00c:	68b9      	ldr	r1, [r7, #8]
 800a00e:	434b      	muls	r3, r1
 800a010:	68b9      	ldr	r1, [r7, #8]
 800a012:	434b      	muls	r3, r1
 800a014:	6879      	ldr	r1, [r7, #4]
 800a016:	434b      	muls	r3, r1
 800a018:	431a      	orrs	r2, r3
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	621a      	str	r2, [r3, #32]
}
 800a01e:	46c0      	nop			; (mov r8, r8)
 800a020:	46bd      	mov	sp, r7
 800a022:	b004      	add	sp, #16
 800a024:	bd80      	pop	{r7, pc}

0800a026 <LL_GPIO_SetAFPin_8_15>:
{
 800a026:	b580      	push	{r7, lr}
 800a028:	b084      	sub	sp, #16
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	60f8      	str	r0, [r7, #12]
 800a02e:	60b9      	str	r1, [r7, #8]
 800a030:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	0a1b      	lsrs	r3, r3, #8
 800a03a:	68ba      	ldr	r2, [r7, #8]
 800a03c:	0a12      	lsrs	r2, r2, #8
 800a03e:	4353      	muls	r3, r2
 800a040:	68ba      	ldr	r2, [r7, #8]
 800a042:	0a12      	lsrs	r2, r2, #8
 800a044:	4353      	muls	r3, r2
 800a046:	68ba      	ldr	r2, [r7, #8]
 800a048:	0a12      	lsrs	r2, r2, #8
 800a04a:	435a      	muls	r2, r3
 800a04c:	0013      	movs	r3, r2
 800a04e:	011b      	lsls	r3, r3, #4
 800a050:	1a9b      	subs	r3, r3, r2
 800a052:	43db      	mvns	r3, r3
 800a054:	400b      	ands	r3, r1
 800a056:	001a      	movs	r2, r3
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	0a1b      	lsrs	r3, r3, #8
 800a05c:	68b9      	ldr	r1, [r7, #8]
 800a05e:	0a09      	lsrs	r1, r1, #8
 800a060:	434b      	muls	r3, r1
 800a062:	68b9      	ldr	r1, [r7, #8]
 800a064:	0a09      	lsrs	r1, r1, #8
 800a066:	434b      	muls	r3, r1
 800a068:	68b9      	ldr	r1, [r7, #8]
 800a06a:	0a09      	lsrs	r1, r1, #8
 800a06c:	434b      	muls	r3, r1
 800a06e:	6879      	ldr	r1, [r7, #4]
 800a070:	434b      	muls	r3, r1
 800a072:	431a      	orrs	r2, r3
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a078:	46c0      	nop			; (mov r8, r8)
 800a07a:	46bd      	mov	sp, r7
 800a07c:	b004      	add	sp, #16
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b084      	sub	sp, #16
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800a08a:	2300      	movs	r3, #0
 800a08c:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800a08e:	e047      	b.n	800a120 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	2101      	movs	r1, #1
 800a096:	68fa      	ldr	r2, [r7, #12]
 800a098:	4091      	lsls	r1, r2
 800a09a:	000a      	movs	r2, r1
 800a09c:	4013      	ands	r3, r2
 800a09e:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d039      	beq.n	800a11a <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	685b      	ldr	r3, [r3, #4]
 800a0aa:	2b01      	cmp	r3, #1
 800a0ac:	d003      	beq.n	800a0b6 <LL_GPIO_Init+0x36>
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	2b02      	cmp	r3, #2
 800a0b4:	d10d      	bne.n	800a0d2 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	689a      	ldr	r2, [r3, #8]
 800a0ba:	68b9      	ldr	r1, [r7, #8]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	0018      	movs	r0, r3
 800a0c0:	f7ff ff56 	bl	8009f70 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	68da      	ldr	r2, [r3, #12]
 800a0c8:	68b9      	ldr	r1, [r7, #8]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	0018      	movs	r0, r3
 800a0ce:	f7ff ff3a 	bl	8009f46 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	691a      	ldr	r2, [r3, #16]
 800a0d6:	68b9      	ldr	r1, [r7, #8]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	0018      	movs	r0, r3
 800a0dc:	f7ff ff64 	bl	8009fa8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	2b02      	cmp	r3, #2
 800a0e6:	d111      	bne.n	800a10c <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	2bff      	cmp	r3, #255	; 0xff
 800a0ec:	d807      	bhi.n	800a0fe <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	695a      	ldr	r2, [r3, #20]
 800a0f2:	68b9      	ldr	r1, [r7, #8]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	0018      	movs	r0, r3
 800a0f8:	f7ff ff72 	bl	8009fe0 <LL_GPIO_SetAFPin_0_7>
 800a0fc:	e006      	b.n	800a10c <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	695a      	ldr	r2, [r3, #20]
 800a102:	68b9      	ldr	r1, [r7, #8]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	0018      	movs	r0, r3
 800a108:	f7ff ff8d 	bl	800a026 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	685a      	ldr	r2, [r3, #4]
 800a110:	68b9      	ldr	r1, [r7, #8]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	0018      	movs	r0, r3
 800a116:	f7ff fefa 	bl	8009f0e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	3301      	adds	r3, #1
 800a11e:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	40da      	lsrs	r2, r3
 800a128:	1e13      	subs	r3, r2, #0
 800a12a:	d1b1      	bne.n	800a090 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800a12c:	2300      	movs	r3, #0
}
 800a12e:	0018      	movs	r0, r3
 800a130:	46bd      	mov	sp, r7
 800a132:	b004      	add	sp, #16
 800a134:	bd80      	pop	{r7, pc}
	...

0800a138 <LL_RCC_HSI_IsReady>:
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800a13c:	4b07      	ldr	r3, [pc, #28]	; (800a15c <LL_RCC_HSI_IsReady+0x24>)
 800a13e:	681a      	ldr	r2, [r3, #0]
 800a140:	2380      	movs	r3, #128	; 0x80
 800a142:	00db      	lsls	r3, r3, #3
 800a144:	401a      	ands	r2, r3
 800a146:	2380      	movs	r3, #128	; 0x80
 800a148:	00db      	lsls	r3, r3, #3
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d101      	bne.n	800a152 <LL_RCC_HSI_IsReady+0x1a>
 800a14e:	2301      	movs	r3, #1
 800a150:	e000      	b.n	800a154 <LL_RCC_HSI_IsReady+0x1c>
 800a152:	2300      	movs	r3, #0
}
 800a154:	0018      	movs	r0, r3
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}
 800a15a:	46c0      	nop			; (mov r8, r8)
 800a15c:	40021000 	.word	0x40021000

0800a160 <LL_RCC_LSE_IsReady>:
{
 800a160:	b580      	push	{r7, lr}
 800a162:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800a164:	4b05      	ldr	r3, [pc, #20]	; (800a17c <LL_RCC_LSE_IsReady+0x1c>)
 800a166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a168:	2202      	movs	r2, #2
 800a16a:	4013      	ands	r3, r2
 800a16c:	2b02      	cmp	r3, #2
 800a16e:	d101      	bne.n	800a174 <LL_RCC_LSE_IsReady+0x14>
 800a170:	2301      	movs	r3, #1
 800a172:	e000      	b.n	800a176 <LL_RCC_LSE_IsReady+0x16>
 800a174:	2300      	movs	r3, #0
}
 800a176:	0018      	movs	r0, r3
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}
 800a17c:	40021000 	.word	0x40021000

0800a180 <LL_RCC_GetSysClkSource>:
{
 800a180:	b580      	push	{r7, lr}
 800a182:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800a184:	4b03      	ldr	r3, [pc, #12]	; (800a194 <LL_RCC_GetSysClkSource+0x14>)
 800a186:	689b      	ldr	r3, [r3, #8]
 800a188:	2238      	movs	r2, #56	; 0x38
 800a18a:	4013      	ands	r3, r2
}
 800a18c:	0018      	movs	r0, r3
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}
 800a192:	46c0      	nop			; (mov r8, r8)
 800a194:	40021000 	.word	0x40021000

0800a198 <LL_RCC_GetAHBPrescaler>:
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800a19c:	4b03      	ldr	r3, [pc, #12]	; (800a1ac <LL_RCC_GetAHBPrescaler+0x14>)
 800a19e:	689a      	ldr	r2, [r3, #8]
 800a1a0:	23f0      	movs	r3, #240	; 0xf0
 800a1a2:	011b      	lsls	r3, r3, #4
 800a1a4:	4013      	ands	r3, r2
}
 800a1a6:	0018      	movs	r0, r3
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}
 800a1ac:	40021000 	.word	0x40021000

0800a1b0 <LL_RCC_GetAPB1Prescaler>:
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800a1b4:	4b03      	ldr	r3, [pc, #12]	; (800a1c4 <LL_RCC_GetAPB1Prescaler+0x14>)
 800a1b6:	689a      	ldr	r2, [r3, #8]
 800a1b8:	23e0      	movs	r3, #224	; 0xe0
 800a1ba:	01db      	lsls	r3, r3, #7
 800a1bc:	4013      	ands	r3, r2
}
 800a1be:	0018      	movs	r0, r3
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}
 800a1c4:	40021000 	.word	0x40021000

0800a1c8 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  * (*) feature not available on all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b082      	sub	sp, #8
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800a1d0:	4b05      	ldr	r3, [pc, #20]	; (800a1e8 <LL_RCC_GetUSARTClockSource+0x20>)
 800a1d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1d4:	687a      	ldr	r2, [r7, #4]
 800a1d6:	401a      	ands	r2, r3
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	041b      	lsls	r3, r3, #16
 800a1dc:	4313      	orrs	r3, r2
}
 800a1de:	0018      	movs	r0, r3
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	b002      	add	sp, #8
 800a1e4:	bd80      	pop	{r7, pc}
 800a1e6:	46c0      	nop			; (mov r8, r8)
 800a1e8:	40021000 	.word	0x40021000

0800a1ec <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800a1f0:	4b03      	ldr	r3, [pc, #12]	; (800a200 <LL_RCC_PLL_GetN+0x14>)
 800a1f2:	68db      	ldr	r3, [r3, #12]
 800a1f4:	0a1b      	lsrs	r3, r3, #8
 800a1f6:	227f      	movs	r2, #127	; 0x7f
 800a1f8:	4013      	ands	r3, r2
}
 800a1fa:	0018      	movs	r0, r3
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}
 800a200:	40021000 	.word	0x40021000

0800a204 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800a208:	4b03      	ldr	r3, [pc, #12]	; (800a218 <LL_RCC_PLL_GetR+0x14>)
 800a20a:	68db      	ldr	r3, [r3, #12]
 800a20c:	0f5b      	lsrs	r3, r3, #29
 800a20e:	075b      	lsls	r3, r3, #29
}
 800a210:	0018      	movs	r0, r3
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}
 800a216:	46c0      	nop			; (mov r8, r8)
 800a218:	40021000 	.word	0x40021000

0800a21c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800a220:	4b03      	ldr	r3, [pc, #12]	; (800a230 <LL_RCC_PLL_GetMainSource+0x14>)
 800a222:	68db      	ldr	r3, [r3, #12]
 800a224:	2203      	movs	r2, #3
 800a226:	4013      	ands	r3, r2
}
 800a228:	0018      	movs	r0, r3
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}
 800a22e:	46c0      	nop			; (mov r8, r8)
 800a230:	40021000 	.word	0x40021000

0800a234 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800a238:	4b03      	ldr	r3, [pc, #12]	; (800a248 <LL_RCC_PLL_GetDivider+0x14>)
 800a23a:	68db      	ldr	r3, [r3, #12]
 800a23c:	2270      	movs	r2, #112	; 0x70
 800a23e:	4013      	ands	r3, r2
}
 800a240:	0018      	movs	r0, r3
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
 800a246:	46c0      	nop			; (mov r8, r8)
 800a248:	40021000 	.word	0x40021000

0800a24c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b082      	sub	sp, #8
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800a254:	f000 f8a8 	bl	800a3a8 <RCC_GetSystemClockFreq>
 800a258:	0002      	movs	r2, r0
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	0018      	movs	r0, r3
 800a264:	f000 f8ce 	bl	800a404 <RCC_GetHCLKClockFreq>
 800a268:	0002      	movs	r2, r0
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	685b      	ldr	r3, [r3, #4]
 800a272:	0018      	movs	r0, r3
 800a274:	f000 f8de 	bl	800a434 <RCC_GetPCLK1ClockFreq>
 800a278:	0002      	movs	r2, r0
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	609a      	str	r2, [r3, #8]
}
 800a27e:	46c0      	nop			; (mov r8, r8)
 800a280:	46bd      	mov	sp, r7
 800a282:	b002      	add	sp, #8
 800a284:	bd80      	pop	{r7, pc}
	...

0800a288 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b084      	sub	sp, #16
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800a290:	2300      	movs	r3, #0
 800a292:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2b03      	cmp	r3, #3
 800a298:	d134      	bne.n	800a304 <LL_RCC_GetUSARTClockFreq+0x7c>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	0018      	movs	r0, r3
 800a29e:	f7ff ff93 	bl	800a1c8 <LL_RCC_GetUSARTClockSource>
 800a2a2:	0003      	movs	r3, r0
 800a2a4:	4a39      	ldr	r2, [pc, #228]	; (800a38c <LL_RCC_GetUSARTClockFreq+0x104>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d016      	beq.n	800a2d8 <LL_RCC_GetUSARTClockFreq+0x50>
 800a2aa:	4a38      	ldr	r2, [pc, #224]	; (800a38c <LL_RCC_GetUSARTClockFreq+0x104>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d81c      	bhi.n	800a2ea <LL_RCC_GetUSARTClockFreq+0x62>
 800a2b0:	4a37      	ldr	r2, [pc, #220]	; (800a390 <LL_RCC_GetUSARTClockFreq+0x108>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d003      	beq.n	800a2be <LL_RCC_GetUSARTClockFreq+0x36>
 800a2b6:	4a37      	ldr	r2, [pc, #220]	; (800a394 <LL_RCC_GetUSARTClockFreq+0x10c>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d005      	beq.n	800a2c8 <LL_RCC_GetUSARTClockFreq+0x40>
 800a2bc:	e015      	b.n	800a2ea <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800a2be:	f000 f873 	bl	800a3a8 <RCC_GetSystemClockFreq>
 800a2c2:	0003      	movs	r3, r0
 800a2c4:	60fb      	str	r3, [r7, #12]
        break;
 800a2c6:	e05c      	b.n	800a382 <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800a2c8:	f7ff ff36 	bl	800a138 <LL_RCC_HSI_IsReady>
 800a2cc:	0003      	movs	r3, r0
 800a2ce:	2b01      	cmp	r3, #1
 800a2d0:	d150      	bne.n	800a374 <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = HSI_VALUE;
 800a2d2:	4b31      	ldr	r3, [pc, #196]	; (800a398 <LL_RCC_GetUSARTClockFreq+0x110>)
 800a2d4:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a2d6:	e04d      	b.n	800a374 <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800a2d8:	f7ff ff42 	bl	800a160 <LL_RCC_LSE_IsReady>
 800a2dc:	0003      	movs	r3, r0
 800a2de:	2b01      	cmp	r3, #1
 800a2e0:	d14a      	bne.n	800a378 <LL_RCC_GetUSARTClockFreq+0xf0>
        {
          usart_frequency = LSE_VALUE;
 800a2e2:	2380      	movs	r3, #128	; 0x80
 800a2e4:	021b      	lsls	r3, r3, #8
 800a2e6:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a2e8:	e046      	b.n	800a378 <LL_RCC_GetUSARTClockFreq+0xf0>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800a2ea:	f000 f85d 	bl	800a3a8 <RCC_GetSystemClockFreq>
 800a2ee:	0003      	movs	r3, r0
 800a2f0:	0018      	movs	r0, r3
 800a2f2:	f000 f887 	bl	800a404 <RCC_GetHCLKClockFreq>
 800a2f6:	0003      	movs	r3, r0
 800a2f8:	0018      	movs	r0, r3
 800a2fa:	f000 f89b 	bl	800a434 <RCC_GetPCLK1ClockFreq>
 800a2fe:	0003      	movs	r3, r0
 800a300:	60fb      	str	r3, [r7, #12]
        break;
 800a302:	e03e      	b.n	800a382 <LL_RCC_GetUSARTClockFreq+0xfa>
    }
  }
#if defined(RCC_CCIPR_USART2SEL)
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2b0c      	cmp	r3, #12
 800a308:	d13b      	bne.n	800a382 <LL_RCC_GetUSARTClockFreq+0xfa>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	0018      	movs	r0, r3
 800a30e:	f7ff ff5b 	bl	800a1c8 <LL_RCC_GetUSARTClockSource>
 800a312:	0003      	movs	r3, r0
 800a314:	4a21      	ldr	r2, [pc, #132]	; (800a39c <LL_RCC_GetUSARTClockFreq+0x114>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d016      	beq.n	800a348 <LL_RCC_GetUSARTClockFreq+0xc0>
 800a31a:	4a20      	ldr	r2, [pc, #128]	; (800a39c <LL_RCC_GetUSARTClockFreq+0x114>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d81c      	bhi.n	800a35a <LL_RCC_GetUSARTClockFreq+0xd2>
 800a320:	4a1f      	ldr	r2, [pc, #124]	; (800a3a0 <LL_RCC_GetUSARTClockFreq+0x118>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d003      	beq.n	800a32e <LL_RCC_GetUSARTClockFreq+0xa6>
 800a326:	4a1f      	ldr	r2, [pc, #124]	; (800a3a4 <LL_RCC_GetUSARTClockFreq+0x11c>)
 800a328:	4293      	cmp	r3, r2
 800a32a:	d005      	beq.n	800a338 <LL_RCC_GetUSARTClockFreq+0xb0>
 800a32c:	e015      	b.n	800a35a <LL_RCC_GetUSARTClockFreq+0xd2>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800a32e:	f000 f83b 	bl	800a3a8 <RCC_GetSystemClockFreq>
 800a332:	0003      	movs	r3, r0
 800a334:	60fb      	str	r3, [r7, #12]
        break;
 800a336:	e024      	b.n	800a382 <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800a338:	f7ff fefe 	bl	800a138 <LL_RCC_HSI_IsReady>
 800a33c:	0003      	movs	r3, r0
 800a33e:	2b01      	cmp	r3, #1
 800a340:	d11c      	bne.n	800a37c <LL_RCC_GetUSARTClockFreq+0xf4>
        {
          usart_frequency = HSI_VALUE;
 800a342:	4b15      	ldr	r3, [pc, #84]	; (800a398 <LL_RCC_GetUSARTClockFreq+0x110>)
 800a344:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a346:	e019      	b.n	800a37c <LL_RCC_GetUSARTClockFreq+0xf4>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800a348:	f7ff ff0a 	bl	800a160 <LL_RCC_LSE_IsReady>
 800a34c:	0003      	movs	r3, r0
 800a34e:	2b01      	cmp	r3, #1
 800a350:	d116      	bne.n	800a380 <LL_RCC_GetUSARTClockFreq+0xf8>
        {
          usart_frequency = LSE_VALUE;
 800a352:	2380      	movs	r3, #128	; 0x80
 800a354:	021b      	lsls	r3, r3, #8
 800a356:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a358:	e012      	b.n	800a380 <LL_RCC_GetUSARTClockFreq+0xf8>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800a35a:	f000 f825 	bl	800a3a8 <RCC_GetSystemClockFreq>
 800a35e:	0003      	movs	r3, r0
 800a360:	0018      	movs	r0, r3
 800a362:	f000 f84f 	bl	800a404 <RCC_GetHCLKClockFreq>
 800a366:	0003      	movs	r3, r0
 800a368:	0018      	movs	r0, r3
 800a36a:	f000 f863 	bl	800a434 <RCC_GetPCLK1ClockFreq>
 800a36e:	0003      	movs	r3, r0
 800a370:	60fb      	str	r3, [r7, #12]
        break;
 800a372:	e006      	b.n	800a382 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800a374:	46c0      	nop			; (mov r8, r8)
 800a376:	e004      	b.n	800a382 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800a378:	46c0      	nop			; (mov r8, r8)
 800a37a:	e002      	b.n	800a382 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800a37c:	46c0      	nop			; (mov r8, r8)
 800a37e:	e000      	b.n	800a382 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800a380:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 800a382:	68fb      	ldr	r3, [r7, #12]
}
 800a384:	0018      	movs	r0, r3
 800a386:	46bd      	mov	sp, r7
 800a388:	b004      	add	sp, #16
 800a38a:	bd80      	pop	{r7, pc}
 800a38c:	00030003 	.word	0x00030003
 800a390:	00030001 	.word	0x00030001
 800a394:	00030002 	.word	0x00030002
 800a398:	00f42400 	.word	0x00f42400
 800a39c:	000c000c 	.word	0x000c000c
 800a3a0:	000c0004 	.word	0x000c0004
 800a3a4:	000c0008 	.word	0x000c0008

0800a3a8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b082      	sub	sp, #8
 800a3ac:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800a3ae:	f7ff fee7 	bl	800a180 <LL_RCC_GetSysClkSource>
 800a3b2:	0003      	movs	r3, r0
 800a3b4:	2b08      	cmp	r3, #8
 800a3b6:	d002      	beq.n	800a3be <RCC_GetSystemClockFreq+0x16>
 800a3b8:	2b10      	cmp	r3, #16
 800a3ba:	d003      	beq.n	800a3c4 <RCC_GetSystemClockFreq+0x1c>
 800a3bc:	e007      	b.n	800a3ce <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800a3be:	4b0e      	ldr	r3, [pc, #56]	; (800a3f8 <RCC_GetSystemClockFreq+0x50>)
 800a3c0:	607b      	str	r3, [r7, #4]
      break;
 800a3c2:	e014      	b.n	800a3ee <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800a3c4:	f000 f84c 	bl	800a460 <RCC_PLL_GetFreqDomain_SYS>
 800a3c8:	0003      	movs	r3, r0
 800a3ca:	607b      	str	r3, [r7, #4]
      break;
 800a3cc:	e00f      	b.n	800a3ee <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800a3ce:	4b0b      	ldr	r3, [pc, #44]	; (800a3fc <RCC_GetSystemClockFreq+0x54>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	0adb      	lsrs	r3, r3, #11
 800a3d4:	2207      	movs	r2, #7
 800a3d6:	4013      	ands	r3, r2
 800a3d8:	2201      	movs	r2, #1
 800a3da:	409a      	lsls	r2, r3
 800a3dc:	0013      	movs	r3, r2
 800a3de:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 800a3e0:	6839      	ldr	r1, [r7, #0]
 800a3e2:	4807      	ldr	r0, [pc, #28]	; (800a400 <RCC_GetSystemClockFreq+0x58>)
 800a3e4:	f7f5 fe8e 	bl	8000104 <__udivsi3>
 800a3e8:	0003      	movs	r3, r0
 800a3ea:	607b      	str	r3, [r7, #4]
      break;
 800a3ec:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 800a3ee:	687b      	ldr	r3, [r7, #4]
}
 800a3f0:	0018      	movs	r0, r3
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	b002      	add	sp, #8
 800a3f6:	bd80      	pop	{r7, pc}
 800a3f8:	007a1200 	.word	0x007a1200
 800a3fc:	40021000 	.word	0x40021000
 800a400:	00f42400 	.word	0x00f42400

0800a404 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b082      	sub	sp, #8
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800a40c:	f7ff fec4 	bl	800a198 <LL_RCC_GetAHBPrescaler>
 800a410:	0003      	movs	r3, r0
 800a412:	0a1b      	lsrs	r3, r3, #8
 800a414:	220f      	movs	r2, #15
 800a416:	401a      	ands	r2, r3
 800a418:	4b05      	ldr	r3, [pc, #20]	; (800a430 <RCC_GetHCLKClockFreq+0x2c>)
 800a41a:	0092      	lsls	r2, r2, #2
 800a41c:	58d3      	ldr	r3, [r2, r3]
 800a41e:	221f      	movs	r2, #31
 800a420:	4013      	ands	r3, r2
 800a422:	687a      	ldr	r2, [r7, #4]
 800a424:	40da      	lsrs	r2, r3
 800a426:	0013      	movs	r3, r2
}
 800a428:	0018      	movs	r0, r3
 800a42a:	46bd      	mov	sp, r7
 800a42c:	b002      	add	sp, #8
 800a42e:	bd80      	pop	{r7, pc}
 800a430:	0800a7a8 	.word	0x0800a7a8

0800a434 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b082      	sub	sp, #8
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800a43c:	f7ff feb8 	bl	800a1b0 <LL_RCC_GetAPB1Prescaler>
 800a440:	0003      	movs	r3, r0
 800a442:	0b1a      	lsrs	r2, r3, #12
 800a444:	4b05      	ldr	r3, [pc, #20]	; (800a45c <RCC_GetPCLK1ClockFreq+0x28>)
 800a446:	0092      	lsls	r2, r2, #2
 800a448:	58d3      	ldr	r3, [r2, r3]
 800a44a:	221f      	movs	r2, #31
 800a44c:	4013      	ands	r3, r2
 800a44e:	687a      	ldr	r2, [r7, #4]
 800a450:	40da      	lsrs	r2, r3
 800a452:	0013      	movs	r3, r2
}
 800a454:	0018      	movs	r0, r3
 800a456:	46bd      	mov	sp, r7
 800a458:	b002      	add	sp, #8
 800a45a:	bd80      	pop	{r7, pc}
 800a45c:	0800a7e8 	.word	0x0800a7e8

0800a460 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800a460:	b590      	push	{r4, r7, lr}
 800a462:	b083      	sub	sp, #12
 800a464:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800a466:	f7ff fed9 	bl	800a21c <LL_RCC_PLL_GetMainSource>
 800a46a:	0003      	movs	r3, r0
 800a46c:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	2b02      	cmp	r3, #2
 800a472:	d003      	beq.n	800a47c <RCC_PLL_GetFreqDomain_SYS+0x1c>
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	2b03      	cmp	r3, #3
 800a478:	d003      	beq.n	800a482 <RCC_PLL_GetFreqDomain_SYS+0x22>
 800a47a:	e005      	b.n	800a488 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800a47c:	4b13      	ldr	r3, [pc, #76]	; (800a4cc <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800a47e:	607b      	str	r3, [r7, #4]
      break;
 800a480:	e005      	b.n	800a48e <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800a482:	4b13      	ldr	r3, [pc, #76]	; (800a4d0 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 800a484:	607b      	str	r3, [r7, #4]
      break;
 800a486:	e002      	b.n	800a48e <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 800a488:	4b10      	ldr	r3, [pc, #64]	; (800a4cc <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800a48a:	607b      	str	r3, [r7, #4]
      break;
 800a48c:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800a48e:	f7ff fead 	bl	800a1ec <LL_RCC_PLL_GetN>
 800a492:	0002      	movs	r2, r0
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	4353      	muls	r3, r2
 800a498:	001c      	movs	r4, r3
 800a49a:	f7ff fecb 	bl	800a234 <LL_RCC_PLL_GetDivider>
 800a49e:	0003      	movs	r3, r0
 800a4a0:	091b      	lsrs	r3, r3, #4
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	0019      	movs	r1, r3
 800a4a6:	0020      	movs	r0, r4
 800a4a8:	f7f5 fe2c 	bl	8000104 <__udivsi3>
 800a4ac:	0003      	movs	r3, r0
 800a4ae:	001c      	movs	r4, r3
 800a4b0:	f7ff fea8 	bl	800a204 <LL_RCC_PLL_GetR>
 800a4b4:	0003      	movs	r3, r0
 800a4b6:	0f5b      	lsrs	r3, r3, #29
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	0019      	movs	r1, r3
 800a4bc:	0020      	movs	r0, r4
 800a4be:	f7f5 fe21 	bl	8000104 <__udivsi3>
 800a4c2:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800a4c4:	0018      	movs	r0, r3
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	b003      	add	sp, #12
 800a4ca:	bd90      	pop	{r4, r7, pc}
 800a4cc:	00f42400 	.word	0x00f42400
 800a4d0:	007a1200 	.word	0x007a1200

0800a4d4 <LL_USART_IsEnabled>:
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b082      	sub	sp, #8
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	4013      	ands	r3, r2
 800a4e4:	2b01      	cmp	r3, #1
 800a4e6:	d101      	bne.n	800a4ec <LL_USART_IsEnabled+0x18>
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	e000      	b.n	800a4ee <LL_USART_IsEnabled+0x1a>
 800a4ec:	2300      	movs	r3, #0
}
 800a4ee:	0018      	movs	r0, r3
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	b002      	add	sp, #8
 800a4f4:	bd80      	pop	{r7, pc}

0800a4f6 <LL_USART_SetPrescaler>:
{
 800a4f6:	b580      	push	{r7, lr}
 800a4f8:	b082      	sub	sp, #8
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	6078      	str	r0, [r7, #4]
 800a4fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a504:	220f      	movs	r2, #15
 800a506:	4393      	bics	r3, r2
 800a508:	683a      	ldr	r2, [r7, #0]
 800a50a:	b292      	uxth	r2, r2
 800a50c:	431a      	orrs	r2, r3
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800a512:	46c0      	nop			; (mov r8, r8)
 800a514:	46bd      	mov	sp, r7
 800a516:	b002      	add	sp, #8
 800a518:	bd80      	pop	{r7, pc}
	...

0800a51c <LL_USART_SetStopBitsLength>:
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b082      	sub	sp, #8
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	685b      	ldr	r3, [r3, #4]
 800a52a:	4a05      	ldr	r2, [pc, #20]	; (800a540 <LL_USART_SetStopBitsLength+0x24>)
 800a52c:	401a      	ands	r2, r3
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	431a      	orrs	r2, r3
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	605a      	str	r2, [r3, #4]
}
 800a536:	46c0      	nop			; (mov r8, r8)
 800a538:	46bd      	mov	sp, r7
 800a53a:	b002      	add	sp, #8
 800a53c:	bd80      	pop	{r7, pc}
 800a53e:	46c0      	nop			; (mov r8, r8)
 800a540:	ffffcfff 	.word	0xffffcfff

0800a544 <LL_USART_SetHWFlowCtrl>:
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b082      	sub	sp, #8
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	689b      	ldr	r3, [r3, #8]
 800a552:	4a05      	ldr	r2, [pc, #20]	; (800a568 <LL_USART_SetHWFlowCtrl+0x24>)
 800a554:	401a      	ands	r2, r3
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	431a      	orrs	r2, r3
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	609a      	str	r2, [r3, #8]
}
 800a55e:	46c0      	nop			; (mov r8, r8)
 800a560:	46bd      	mov	sp, r7
 800a562:	b002      	add	sp, #8
 800a564:	bd80      	pop	{r7, pc}
 800a566:	46c0      	nop			; (mov r8, r8)
 800a568:	fffffcff 	.word	0xfffffcff

0800a56c <LL_USART_SetBaudRate>:
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b086      	sub	sp, #24
 800a570:	af00      	add	r7, sp, #0
 800a572:	60f8      	str	r0, [r7, #12]
 800a574:	60b9      	str	r1, [r7, #8]
 800a576:	607a      	str	r2, [r7, #4]
 800a578:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2b0b      	cmp	r3, #11
 800a57e:	d843      	bhi.n	800a608 <LL_USART_SetBaudRate+0x9c>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800a580:	683a      	ldr	r2, [r7, #0]
 800a582:	2380      	movs	r3, #128	; 0x80
 800a584:	021b      	lsls	r3, r3, #8
 800a586:	429a      	cmp	r2, r3
 800a588:	d126      	bne.n	800a5d8 <LL_USART_SetBaudRate+0x6c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	b2db      	uxtb	r3, r3
 800a58e:	001a      	movs	r2, r3
 800a590:	4b1f      	ldr	r3, [pc, #124]	; (800a610 <LL_USART_SetBaudRate+0xa4>)
 800a592:	0092      	lsls	r2, r2, #2
 800a594:	58d3      	ldr	r3, [r2, r3]
 800a596:	0019      	movs	r1, r3
 800a598:	68b8      	ldr	r0, [r7, #8]
 800a59a:	f7f5 fdb3 	bl	8000104 <__udivsi3>
 800a59e:	0003      	movs	r3, r0
 800a5a0:	005a      	lsls	r2, r3, #1
 800a5a2:	6a3b      	ldr	r3, [r7, #32]
 800a5a4:	085b      	lsrs	r3, r3, #1
 800a5a6:	18d3      	adds	r3, r2, r3
 800a5a8:	6a39      	ldr	r1, [r7, #32]
 800a5aa:	0018      	movs	r0, r3
 800a5ac:	f7f5 fdaa 	bl	8000104 <__udivsi3>
 800a5b0:	0003      	movs	r3, r0
 800a5b2:	b29b      	uxth	r3, r3
 800a5b4:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	4a16      	ldr	r2, [pc, #88]	; (800a614 <LL_USART_SetBaudRate+0xa8>)
 800a5ba:	4013      	ands	r3, r2
 800a5bc:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	085b      	lsrs	r3, r3, #1
 800a5c2:	b29b      	uxth	r3, r3
 800a5c4:	001a      	movs	r2, r3
 800a5c6:	2307      	movs	r3, #7
 800a5c8:	4013      	ands	r3, r2
 800a5ca:	693a      	ldr	r2, [r7, #16]
 800a5cc:	4313      	orrs	r3, r2
 800a5ce:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	693a      	ldr	r2, [r7, #16]
 800a5d4:	60da      	str	r2, [r3, #12]
}
 800a5d6:	e017      	b.n	800a608 <LL_USART_SetBaudRate+0x9c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	b2db      	uxtb	r3, r3
 800a5dc:	001a      	movs	r2, r3
 800a5de:	4b0c      	ldr	r3, [pc, #48]	; (800a610 <LL_USART_SetBaudRate+0xa4>)
 800a5e0:	0092      	lsls	r2, r2, #2
 800a5e2:	58d3      	ldr	r3, [r2, r3]
 800a5e4:	0019      	movs	r1, r3
 800a5e6:	68b8      	ldr	r0, [r7, #8]
 800a5e8:	f7f5 fd8c 	bl	8000104 <__udivsi3>
 800a5ec:	0003      	movs	r3, r0
 800a5ee:	001a      	movs	r2, r3
 800a5f0:	6a3b      	ldr	r3, [r7, #32]
 800a5f2:	085b      	lsrs	r3, r3, #1
 800a5f4:	18d3      	adds	r3, r2, r3
 800a5f6:	6a39      	ldr	r1, [r7, #32]
 800a5f8:	0018      	movs	r0, r3
 800a5fa:	f7f5 fd83 	bl	8000104 <__udivsi3>
 800a5fe:	0003      	movs	r3, r0
 800a600:	b29b      	uxth	r3, r3
 800a602:	001a      	movs	r2, r3
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	60da      	str	r2, [r3, #12]
}
 800a608:	46c0      	nop			; (mov r8, r8)
 800a60a:	46bd      	mov	sp, r7
 800a60c:	b006      	add	sp, #24
 800a60e:	bd80      	pop	{r7, pc}
 800a610:	0800a85c 	.word	0x0800a85c
 800a614:	0000fff0 	.word	0x0000fff0

0800a618 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800a618:	b590      	push	{r4, r7, lr}
 800a61a:	b08b      	sub	sp, #44	; 0x2c
 800a61c:	af02      	add	r7, sp, #8
 800a61e:	6078      	str	r0, [r7, #4]
 800a620:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800a622:	231f      	movs	r3, #31
 800a624:	18fb      	adds	r3, r7, r3
 800a626:	2201      	movs	r2, #1
 800a628:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800a62a:	2300      	movs	r3, #0
 800a62c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	0018      	movs	r0, r3
 800a632:	f7ff ff4f 	bl	800a4d4 <LL_USART_IsEnabled>
 800a636:	1e03      	subs	r3, r0, #0
 800a638:	d16a      	bne.n	800a710 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	4a38      	ldr	r2, [pc, #224]	; (800a720 <LL_USART_Init+0x108>)
 800a640:	401a      	ands	r2, r3
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	6899      	ldr	r1, [r3, #8]
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	691b      	ldr	r3, [r3, #16]
 800a64a:	4319      	orrs	r1, r3
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	695b      	ldr	r3, [r3, #20]
 800a650:	4319      	orrs	r1, r3
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	69db      	ldr	r3, [r3, #28]
 800a656:	430b      	orrs	r3, r1
 800a658:	431a      	orrs	r2, r3
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	68da      	ldr	r2, [r3, #12]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	0011      	movs	r1, r2
 800a666:	0018      	movs	r0, r3
 800a668:	f7ff ff58 	bl	800a51c <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	699a      	ldr	r2, [r3, #24]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	0011      	movs	r1, r2
 800a674:	0018      	movs	r0, r3
 800a676:	f7ff ff65 	bl	800a544 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	4a29      	ldr	r2, [pc, #164]	; (800a724 <LL_USART_Init+0x10c>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d105      	bne.n	800a68e <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800a682:	2003      	movs	r0, #3
 800a684:	f7ff fe00 	bl	800a288 <LL_RCC_GetUSARTClockFreq>
 800a688:	0003      	movs	r3, r0
 800a68a:	61bb      	str	r3, [r7, #24]
 800a68c:	e022      	b.n	800a6d4 <LL_USART_Init+0xbc>
    }
    else if (USARTx == USART2)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	4a25      	ldr	r2, [pc, #148]	; (800a728 <LL_USART_Init+0x110>)
 800a692:	4293      	cmp	r3, r2
 800a694:	d105      	bne.n	800a6a2 <LL_USART_Init+0x8a>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800a696:	200c      	movs	r0, #12
 800a698:	f7ff fdf6 	bl	800a288 <LL_RCC_GetUSARTClockFreq>
 800a69c:	0003      	movs	r3, r0
 800a69e:	61bb      	str	r3, [r7, #24]
 800a6a0:	e018      	b.n	800a6d4 <LL_USART_Init+0xbc>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* RCC_CCIPR_USART2SEL */
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	4a21      	ldr	r2, [pc, #132]	; (800a72c <LL_USART_Init+0x114>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d108      	bne.n	800a6bc <LL_USART_Init+0xa4>
    {
#if defined(RCC_CCIPR_USART3SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800a6aa:	240c      	movs	r4, #12
 800a6ac:	193b      	adds	r3, r7, r4
 800a6ae:	0018      	movs	r0, r3
 800a6b0:	f7ff fdcc 	bl	800a24c <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800a6b4:	193b      	adds	r3, r7, r4
 800a6b6:	689b      	ldr	r3, [r3, #8]
 800a6b8:	61bb      	str	r3, [r7, #24]
 800a6ba:	e00b      	b.n	800a6d4 <LL_USART_Init+0xbc>
#endif /* RCC_CCIPR_USART3SEL */
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	4a1c      	ldr	r2, [pc, #112]	; (800a730 <LL_USART_Init+0x118>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d107      	bne.n	800a6d4 <LL_USART_Init+0xbc>
    {
#if defined(RCC_CCIPR_USART4SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART4_CLKSOURCE);
#else
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800a6c4:	240c      	movs	r4, #12
 800a6c6:	193b      	adds	r3, r7, r4
 800a6c8:	0018      	movs	r0, r3
 800a6ca:	f7ff fdbf 	bl	800a24c <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800a6ce:	193b      	adds	r3, r7, r4
 800a6d0:	689b      	ldr	r3, [r3, #8]
 800a6d2:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800a6d4:	69bb      	ldr	r3, [r7, #24]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d013      	beq.n	800a702 <LL_USART_Init+0xea>
        && (USART_InitStruct->BaudRate != 0U))
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d00f      	beq.n	800a702 <LL_USART_Init+0xea>
    {
      status = SUCCESS;
 800a6e2:	231f      	movs	r3, #31
 800a6e4:	18fb      	adds	r3, r7, r3
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	681a      	ldr	r2, [r3, #0]
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	69dc      	ldr	r4, [r3, #28]
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	685b      	ldr	r3, [r3, #4]
 800a6f6:	69b9      	ldr	r1, [r7, #24]
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	9300      	str	r3, [sp, #0]
 800a6fc:	0023      	movs	r3, r4
 800a6fe:	f7ff ff35 	bl	800a56c <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	681a      	ldr	r2, [r3, #0]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	0011      	movs	r1, r2
 800a70a:	0018      	movs	r0, r3
 800a70c:	f7ff fef3 	bl	800a4f6 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800a710:	231f      	movs	r3, #31
 800a712:	18fb      	adds	r3, r7, r3
 800a714:	781b      	ldrb	r3, [r3, #0]
}
 800a716:	0018      	movs	r0, r3
 800a718:	46bd      	mov	sp, r7
 800a71a:	b009      	add	sp, #36	; 0x24
 800a71c:	bd90      	pop	{r4, r7, pc}
 800a71e:	46c0      	nop			; (mov r8, r8)
 800a720:	efff69f3 	.word	0xefff69f3
 800a724:	40013800 	.word	0x40013800
 800a728:	40004400 	.word	0x40004400
 800a72c:	40004800 	.word	0x40004800
 800a730:	40004c00 	.word	0x40004c00

0800a734 <__libc_init_array>:
 800a734:	b570      	push	{r4, r5, r6, lr}
 800a736:	2600      	movs	r6, #0
 800a738:	4d0c      	ldr	r5, [pc, #48]	; (800a76c <__libc_init_array+0x38>)
 800a73a:	4c0d      	ldr	r4, [pc, #52]	; (800a770 <__libc_init_array+0x3c>)
 800a73c:	1b64      	subs	r4, r4, r5
 800a73e:	10a4      	asrs	r4, r4, #2
 800a740:	42a6      	cmp	r6, r4
 800a742:	d109      	bne.n	800a758 <__libc_init_array+0x24>
 800a744:	2600      	movs	r6, #0
 800a746:	f000 f821 	bl	800a78c <_init>
 800a74a:	4d0a      	ldr	r5, [pc, #40]	; (800a774 <__libc_init_array+0x40>)
 800a74c:	4c0a      	ldr	r4, [pc, #40]	; (800a778 <__libc_init_array+0x44>)
 800a74e:	1b64      	subs	r4, r4, r5
 800a750:	10a4      	asrs	r4, r4, #2
 800a752:	42a6      	cmp	r6, r4
 800a754:	d105      	bne.n	800a762 <__libc_init_array+0x2e>
 800a756:	bd70      	pop	{r4, r5, r6, pc}
 800a758:	00b3      	lsls	r3, r6, #2
 800a75a:	58eb      	ldr	r3, [r5, r3]
 800a75c:	4798      	blx	r3
 800a75e:	3601      	adds	r6, #1
 800a760:	e7ee      	b.n	800a740 <__libc_init_array+0xc>
 800a762:	00b3      	lsls	r3, r6, #2
 800a764:	58eb      	ldr	r3, [r5, r3]
 800a766:	4798      	blx	r3
 800a768:	3601      	adds	r6, #1
 800a76a:	e7f2      	b.n	800a752 <__libc_init_array+0x1e>
 800a76c:	0800a88c 	.word	0x0800a88c
 800a770:	0800a88c 	.word	0x0800a88c
 800a774:	0800a88c 	.word	0x0800a88c
 800a778:	0800a890 	.word	0x0800a890

0800a77c <memset>:
 800a77c:	0003      	movs	r3, r0
 800a77e:	1882      	adds	r2, r0, r2
 800a780:	4293      	cmp	r3, r2
 800a782:	d100      	bne.n	800a786 <memset+0xa>
 800a784:	4770      	bx	lr
 800a786:	7019      	strb	r1, [r3, #0]
 800a788:	3301      	adds	r3, #1
 800a78a:	e7f9      	b.n	800a780 <memset+0x4>

0800a78c <_init>:
 800a78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a78e:	46c0      	nop			; (mov r8, r8)
 800a790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a792:	bc08      	pop	{r3}
 800a794:	469e      	mov	lr, r3
 800a796:	4770      	bx	lr

0800a798 <_fini>:
 800a798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a79a:	46c0      	nop			; (mov r8, r8)
 800a79c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a79e:	bc08      	pop	{r3}
 800a7a0:	469e      	mov	lr, r3
 800a7a2:	4770      	bx	lr
