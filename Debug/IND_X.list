
IND_X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c90c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000096e8  0800c9c8  0800c9c8  0001c9c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080160b0  080160b0  00030070  2**0
                  CONTENTS
  4 .ARM          00000000  080160b0  080160b0  00030070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080160b0  080160b0  00030070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080160b0  080160b0  000260b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080160b4  080160b4  000260b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080160b8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013d0  20000070  08016128  00030070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001440  08016128  00031440  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000192e6  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003574  00000000  00000000  0004937e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001918  00000000  00000000  0004c8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017a0  00000000  00000000  0004e210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c8a7  00000000  00000000  0004f9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c63f  00000000  00000000  0006c257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000afac2  00000000  00000000  00088896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00138358  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c04  00000000  00000000  001383a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800c9b0 	.word	0x0800c9b0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	0800c9b0 	.word	0x0800c9b0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b7f      	cmp	r3, #127	; 0x7f
 800022e:	d809      	bhi.n	8000244 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000230:	1dfb      	adds	r3, r7, #7
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	001a      	movs	r2, r3
 8000236:	231f      	movs	r3, #31
 8000238:	401a      	ands	r2, r3
 800023a:	4b04      	ldr	r3, [pc, #16]	; (800024c <__NVIC_EnableIRQ+0x30>)
 800023c:	2101      	movs	r1, #1
 800023e:	4091      	lsls	r1, r2
 8000240:	000a      	movs	r2, r1
 8000242:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e100 	.word	0xe000e100

08000250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	0002      	movs	r2, r0
 8000258:	6039      	str	r1, [r7, #0]
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b7f      	cmp	r3, #127	; 0x7f
 8000264:	d828      	bhi.n	80002b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000266:	4a2f      	ldr	r2, [pc, #188]	; (8000324 <__NVIC_SetPriority+0xd4>)
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	b25b      	sxtb	r3, r3
 800026e:	089b      	lsrs	r3, r3, #2
 8000270:	33c0      	adds	r3, #192	; 0xc0
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	589b      	ldr	r3, [r3, r2]
 8000276:	1dfa      	adds	r2, r7, #7
 8000278:	7812      	ldrb	r2, [r2, #0]
 800027a:	0011      	movs	r1, r2
 800027c:	2203      	movs	r2, #3
 800027e:	400a      	ands	r2, r1
 8000280:	00d2      	lsls	r2, r2, #3
 8000282:	21ff      	movs	r1, #255	; 0xff
 8000284:	4091      	lsls	r1, r2
 8000286:	000a      	movs	r2, r1
 8000288:	43d2      	mvns	r2, r2
 800028a:	401a      	ands	r2, r3
 800028c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	019b      	lsls	r3, r3, #6
 8000292:	22ff      	movs	r2, #255	; 0xff
 8000294:	401a      	ands	r2, r3
 8000296:	1dfb      	adds	r3, r7, #7
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	0018      	movs	r0, r3
 800029c:	2303      	movs	r3, #3
 800029e:	4003      	ands	r3, r0
 80002a0:	00db      	lsls	r3, r3, #3
 80002a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a4:	481f      	ldr	r0, [pc, #124]	; (8000324 <__NVIC_SetPriority+0xd4>)
 80002a6:	1dfb      	adds	r3, r7, #7
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	b25b      	sxtb	r3, r3
 80002ac:	089b      	lsrs	r3, r3, #2
 80002ae:	430a      	orrs	r2, r1
 80002b0:	33c0      	adds	r3, #192	; 0xc0
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002b6:	e031      	b.n	800031c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <__NVIC_SetPriority+0xd8>)
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	0019      	movs	r1, r3
 80002c0:	230f      	movs	r3, #15
 80002c2:	400b      	ands	r3, r1
 80002c4:	3b08      	subs	r3, #8
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	3306      	adds	r3, #6
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	18d3      	adds	r3, r2, r3
 80002ce:	3304      	adds	r3, #4
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1dfa      	adds	r2, r7, #7
 80002d4:	7812      	ldrb	r2, [r2, #0]
 80002d6:	0011      	movs	r1, r2
 80002d8:	2203      	movs	r2, #3
 80002da:	400a      	ands	r2, r1
 80002dc:	00d2      	lsls	r2, r2, #3
 80002de:	21ff      	movs	r1, #255	; 0xff
 80002e0:	4091      	lsls	r1, r2
 80002e2:	000a      	movs	r2, r1
 80002e4:	43d2      	mvns	r2, r2
 80002e6:	401a      	ands	r2, r3
 80002e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	019b      	lsls	r3, r3, #6
 80002ee:	22ff      	movs	r2, #255	; 0xff
 80002f0:	401a      	ands	r2, r3
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	0018      	movs	r0, r3
 80002f8:	2303      	movs	r3, #3
 80002fa:	4003      	ands	r3, r0
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	4809      	ldr	r0, [pc, #36]	; (8000328 <__NVIC_SetPriority+0xd8>)
 8000302:	1dfb      	adds	r3, r7, #7
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	001c      	movs	r4, r3
 8000308:	230f      	movs	r3, #15
 800030a:	4023      	ands	r3, r4
 800030c:	3b08      	subs	r3, #8
 800030e:	089b      	lsrs	r3, r3, #2
 8000310:	430a      	orrs	r2, r1
 8000312:	3306      	adds	r3, #6
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	18c3      	adds	r3, r0, r3
 8000318:	3304      	adds	r3, #4
 800031a:	601a      	str	r2, [r3, #0]
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b003      	add	sp, #12
 8000322:	bd90      	pop	{r4, r7, pc}
 8000324:	e000e100 	.word	0xe000e100
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2201      	movs	r2, #1
 800033a:	431a      	orrs	r2, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	601a      	str	r2, [r3, #0]
}
 8000340:	46c0      	nop			; (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	b002      	add	sp, #8
 8000346:	bd80      	pop	{r7, pc}

08000348 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a03      	ldr	r2, [pc, #12]	; (8000364 <LL_USART_DisableFIFO+0x1c>)
 8000356:	401a      	ands	r2, r3
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	601a      	str	r2, [r3, #0]
}
 800035c:	46c0      	nop			; (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	b002      	add	sp, #8
 8000362:	bd80      	pop	{r7, pc}
 8000364:	dfffffff 	.word	0xdfffffff

08000368 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b086      	sub	sp, #24
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000372:	f3ef 8310 	mrs	r3, PRIMASK
 8000376:	60bb      	str	r3, [r7, #8]
  return(result);
 8000378:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 800037a:	617b      	str	r3, [r7, #20]
 800037c:	2301      	movs	r3, #1
 800037e:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f383 8810 	msr	PRIMASK, r3
}
 8000386:	46c0      	nop			; (mov r8, r8)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	689b      	ldr	r3, [r3, #8]
 800038c:	00db      	lsls	r3, r3, #3
 800038e:	08da      	lsrs	r2, r3, #3
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	075b      	lsls	r3, r3, #29
 8000394:	431a      	orrs	r2, r3
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	697b      	ldr	r3, [r7, #20]
 800039c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800039e:	693b      	ldr	r3, [r7, #16]
 80003a0:	f383 8810 	msr	PRIMASK, r3
}
 80003a4:	46c0      	nop			; (mov r8, r8)
}
 80003a6:	46c0      	nop			; (mov r8, r8)
 80003a8:	46bd      	mov	sp, r7
 80003aa:	b006      	add	sp, #24
 80003ac:	bd80      	pop	{r7, pc}
	...

080003b0 <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b086      	sub	sp, #24
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80003ba:	f3ef 8310 	mrs	r3, PRIMASK
 80003be:	60bb      	str	r3, [r7, #8]
  return(result);
 80003c0:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 80003c2:	617b      	str	r3, [r7, #20]
 80003c4:	2301      	movs	r3, #1
 80003c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	f383 8810 	msr	PRIMASK, r3
}
 80003ce:	46c0      	nop			; (mov r8, r8)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	689b      	ldr	r3, [r3, #8]
 80003d4:	4a08      	ldr	r2, [pc, #32]	; (80003f8 <LL_USART_SetRXFIFOThreshold+0x48>)
 80003d6:	401a      	ands	r2, r3
 80003d8:	683b      	ldr	r3, [r7, #0]
 80003da:	065b      	lsls	r3, r3, #25
 80003dc:	431a      	orrs	r2, r3
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	609a      	str	r2, [r3, #8]
 80003e2:	697b      	ldr	r3, [r7, #20]
 80003e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80003e6:	693b      	ldr	r3, [r7, #16]
 80003e8:	f383 8810 	msr	PRIMASK, r3
}
 80003ec:	46c0      	nop			; (mov r8, r8)
}
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	46bd      	mov	sp, r7
 80003f2:	b006      	add	sp, #24
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	46c0      	nop			; (mov r8, r8)
 80003f8:	f1ffffff 	.word	0xf1ffffff

080003fc <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	685b      	ldr	r3, [r3, #4]
 8000408:	4a07      	ldr	r2, [pc, #28]	; (8000428 <LL_USART_ConfigAsyncMode+0x2c>)
 800040a:	401a      	ands	r2, r3
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	689b      	ldr	r3, [r3, #8]
 8000414:	222a      	movs	r2, #42	; 0x2a
 8000416:	4393      	bics	r3, r2
 8000418:	001a      	movs	r2, r3
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	609a      	str	r2, [r3, #8]
}
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	46bd      	mov	sp, r7
 8000422:	b002      	add	sp, #8
 8000424:	bd80      	pop	{r7, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	ffffb7ff 	.word	0xffffb7ff

0800042c <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	69da      	ldr	r2, [r3, #28]
 8000438:	2380      	movs	r3, #128	; 0x80
 800043a:	039b      	lsls	r3, r3, #14
 800043c:	401a      	ands	r2, r3
 800043e:	2380      	movs	r3, #128	; 0x80
 8000440:	039b      	lsls	r3, r3, #14
 8000442:	429a      	cmp	r2, r3
 8000444:	d101      	bne.n	800044a <LL_USART_IsActiveFlag_TEACK+0x1e>
 8000446:	2301      	movs	r3, #1
 8000448:	e000      	b.n	800044c <LL_USART_IsActiveFlag_TEACK+0x20>
 800044a:	2300      	movs	r3, #0
}
 800044c:	0018      	movs	r0, r3
 800044e:	46bd      	mov	sp, r7
 8000450:	b002      	add	sp, #8
 8000452:	bd80      	pop	{r7, pc}

08000454 <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	69da      	ldr	r2, [r3, #28]
 8000460:	2380      	movs	r3, #128	; 0x80
 8000462:	03db      	lsls	r3, r3, #15
 8000464:	401a      	ands	r2, r3
 8000466:	2380      	movs	r3, #128	; 0x80
 8000468:	03db      	lsls	r3, r3, #15
 800046a:	429a      	cmp	r2, r3
 800046c:	d101      	bne.n	8000472 <LL_USART_IsActiveFlag_REACK+0x1e>
 800046e:	2301      	movs	r3, #1
 8000470:	e000      	b.n	8000474 <LL_USART_IsActiveFlag_REACK+0x20>
 8000472:	2300      	movs	r3, #0
}
 8000474:	0018      	movs	r0, r3
 8000476:	46bd      	mov	sp, r7
 8000478:	b002      	add	sp, #8
 800047a:	bd80      	pop	{r7, pc}

0800047c <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b086      	sub	sp, #24
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000484:	f3ef 8310 	mrs	r3, PRIMASK
 8000488:	60bb      	str	r3, [r7, #8]
  return(result);
 800048a:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800048c:	617b      	str	r3, [r7, #20]
 800048e:	2301      	movs	r3, #1
 8000490:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	f383 8810 	msr	PRIMASK, r3
}
 8000498:	46c0      	nop			; (mov r8, r8)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	2220      	movs	r2, #32
 80004a0:	431a      	orrs	r2, r3
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	601a      	str	r2, [r3, #0]
 80004a6:	697b      	ldr	r3, [r7, #20]
 80004a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80004aa:	693b      	ldr	r3, [r7, #16]
 80004ac:	f383 8810 	msr	PRIMASK, r3
}
 80004b0:	46c0      	nop			; (mov r8, r8)
}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	46bd      	mov	sp, r7
 80004b6:	b006      	add	sp, #24
 80004b8:	bd80      	pop	{r7, pc}

080004ba <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 80004ba:	b580      	push	{r7, lr}
 80004bc:	b086      	sub	sp, #24
 80004be:	af00      	add	r7, sp, #0
 80004c0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80004c2:	f3ef 8310 	mrs	r3, PRIMASK
 80004c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80004c8:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80004ca:	617b      	str	r3, [r7, #20]
 80004cc:	2301      	movs	r3, #1
 80004ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	f383 8810 	msr	PRIMASK, r3
}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	689b      	ldr	r3, [r3, #8]
 80004dc:	2201      	movs	r2, #1
 80004de:	431a      	orrs	r2, r3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	697b      	ldr	r3, [r7, #20]
 80004e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80004e8:	693b      	ldr	r3, [r7, #16]
 80004ea:	f383 8810 	msr	PRIMASK, r3
}
 80004ee:	46c0      	nop			; (mov r8, r8)
}
 80004f0:	46c0      	nop			; (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b006      	add	sp, #24
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <LL_USART_ReceiveData9>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData9
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
  */
__STATIC_INLINE uint16_t LL_USART_ReceiveData9(USART_TypeDef *USARTx)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000504:	b29b      	uxth	r3, r3
 8000506:	05db      	lsls	r3, r3, #23
 8000508:	0ddb      	lsrs	r3, r3, #23
 800050a:	b29b      	uxth	r3, r3
}
 800050c:	0018      	movs	r0, r3
 800050e:	46bd      	mov	sp, r7
 8000510:	b002      	add	sp, #8
 8000512:	bd80      	pop	{r7, pc}

08000514 <LL_SYSCFG_EnableFastModePlus>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 800051c:	4b04      	ldr	r3, [pc, #16]	; (8000530 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 800051e:	6819      	ldr	r1, [r3, #0]
 8000520:	4b03      	ldr	r3, [pc, #12]	; (8000530 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8000522:	687a      	ldr	r2, [r7, #4]
 8000524:	430a      	orrs	r2, r1
 8000526:	601a      	str	r2, [r3, #0]
}
 8000528:	46c0      	nop			; (mov r8, r8)
 800052a:	46bd      	mov	sp, r7
 800052c:	b002      	add	sp, #8
 800052e:	bd80      	pop	{r7, pc}
 8000530:	40010000 	.word	0x40010000

08000534 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	683a      	ldr	r2, [r7, #0]
 8000542:	619a      	str	r2, [r3, #24]
}
 8000544:	46c0      	nop			; (mov r8, r8)
 8000546:	46bd      	mov	sp, r7
 8000548:	b002      	add	sp, #8
 800054a:	bd80      	pop	{r7, pc}

0800054c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	683a      	ldr	r2, [r7, #0]
 800055a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800055c:	46c0      	nop			; (mov r8, r8)
 800055e:	46bd      	mov	sp, r7
 8000560:	b002      	add	sp, #8
 8000562:	bd80      	pop	{r7, pc}

08000564 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 800056c:	4b07      	ldr	r3, [pc, #28]	; (800058c <LL_APB1_GRP1_EnableClock+0x28>)
 800056e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <LL_APB1_GRP1_EnableClock+0x28>)
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	430a      	orrs	r2, r1
 8000576:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <LL_APB1_GRP1_EnableClock+0x28>)
 800057a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	4013      	ands	r3, r2
 8000580:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000582:	68fb      	ldr	r3, [r7, #12]
}
 8000584:	46c0      	nop			; (mov r8, r8)
 8000586:	46bd      	mov	sp, r7
 8000588:	b004      	add	sp, #16
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40021000 	.word	0x40021000

08000590 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000598:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <LL_IOP_GRP1_EnableClock+0x28>)
 800059a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <LL_IOP_GRP1_EnableClock+0x28>)
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	430a      	orrs	r2, r1
 80005a2:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80005a4:	4b04      	ldr	r3, [pc, #16]	; (80005b8 <LL_IOP_GRP1_EnableClock+0x28>)
 80005a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	4013      	ands	r3, r2
 80005ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005ae:	68fb      	ldr	r3, [r7, #12]
}
 80005b0:	46c0      	nop			; (mov r8, r8)
 80005b2:	46bd      	mov	sp, r7
 80005b4:	b004      	add	sp, #16
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40021000 	.word	0x40021000

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b590      	push	{r4, r7, lr}
 80005be:	b08d      	sub	sp, #52	; 0x34
 80005c0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint16_t testINPUT = 0;
 80005c2:	2324      	movs	r3, #36	; 0x24
 80005c4:	18fb      	adds	r3, r7, r3
 80005c6:	2200      	movs	r2, #0
 80005c8:	801a      	strh	r2, [r3, #0]
	uint16_t testAns = 0;
 80005ca:	2322      	movs	r3, #34	; 0x22
 80005cc:	18fb      	adds	r3, r7, r3
 80005ce:	2200      	movs	r2, #0
 80005d0:	801a      	strh	r2, [r3, #0]
	uint16_t i = 0;
 80005d2:	2320      	movs	r3, #32
 80005d4:	18fb      	adds	r3, r7, r3
 80005d6:	2200      	movs	r2, #0
 80005d8:	801a      	strh	r2, [r3, #0]
	uint16_t beep1 = 0x0000;
 80005da:	231e      	movs	r3, #30
 80005dc:	18fb      	adds	r3, r7, r3
 80005de:	2200      	movs	r2, #0
 80005e0:	801a      	strh	r2, [r3, #0]
	uint16_t beep2 = 0xFFFF;
 80005e2:	231c      	movs	r3, #28
 80005e4:	18fb      	adds	r3, r7, r3
 80005e6:	2201      	movs	r2, #1
 80005e8:	4252      	negs	r2, r2
 80005ea:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ec:	f004 fec2 	bl	8005374 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f0:	f000 f8de 	bl	80007b0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005f4:	4b67      	ldr	r3, [pc, #412]	; (8000794 <main+0x1d8>)
 80005f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005f8:	4b66      	ldr	r3, [pc, #408]	; (8000794 <main+0x1d8>)
 80005fa:	2101      	movs	r1, #1
 80005fc:	430a      	orrs	r2, r1
 80005fe:	635a      	str	r2, [r3, #52]	; 0x34
 8000600:	4b64      	ldr	r3, [pc, #400]	; (8000794 <main+0x1d8>)
 8000602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000604:	2201      	movs	r2, #1
 8000606:	4013      	ands	r3, r2
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800060c:	4b61      	ldr	r3, [pc, #388]	; (8000794 <main+0x1d8>)
 800060e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000610:	4b60      	ldr	r3, [pc, #384]	; (8000794 <main+0x1d8>)
 8000612:	2102      	movs	r1, #2
 8000614:	430a      	orrs	r2, r1
 8000616:	635a      	str	r2, [r3, #52]	; 0x34
 8000618:	4b5e      	ldr	r3, [pc, #376]	; (8000794 <main+0x1d8>)
 800061a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800061c:	2202      	movs	r2, #2
 800061e:	4013      	ands	r3, r2
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000624:	4b5b      	ldr	r3, [pc, #364]	; (8000794 <main+0x1d8>)
 8000626:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000628:	4b5a      	ldr	r3, [pc, #360]	; (8000794 <main+0x1d8>)
 800062a:	2104      	movs	r1, #4
 800062c:	430a      	orrs	r2, r1
 800062e:	635a      	str	r2, [r3, #52]	; 0x34
 8000630:	4b58      	ldr	r3, [pc, #352]	; (8000794 <main+0x1d8>)
 8000632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000634:	2204      	movs	r2, #4
 8000636:	4013      	ands	r3, r2
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063c:	f000 fc18 	bl	8000e70 <MX_GPIO_Init>
  MX_DMA_Init();
 8000640:	f000 fbe8 	bl	8000e14 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000644:	f000 faec 	bl	8000c20 <MX_USART2_UART_Init>
  MX_COMP1_Init();
 8000648:	f000 f910 	bl	800086c <MX_COMP1_Init>
  MX_TIM1_Init();
 800064c:	f000 f9ee 	bl	8000a2c <MX_TIM1_Init>
  MX_USART3_Init();
 8000650:	f000 fb9c 	bl	8000d8c <MX_USART3_Init>
  MX_I2S1_Init();
 8000654:	f000 f97c 	bl	8000950 <MX_I2S1_Init>
  MX_I2C1_Init();
 8000658:	f000 f93a 	bl	80008d0 <MX_I2C1_Init>
  MX_SPI2_Init();
 800065c:	f000 f9a2 	bl	80009a4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	HAL_COMP_Start(&hcomp1);
 8000660:	4b4d      	ldr	r3, [pc, #308]	; (8000798 <main+0x1dc>)
 8000662:	0018      	movs	r0, r3
 8000664:	f005 f954 	bl	8005910 <HAL_COMP_Start>
	HAL_Delay(100);
 8000668:	2064      	movs	r0, #100	; 0x64
 800066a:	f004 ff09 	bl	8005480 <HAL_Delay>
	uint8_t I2Cbuf[5];
	MEM_Reset();
 800066e:	f001 fd49 	bl	8002104 <MEM_Reset>

	weoInit();
 8000672:	f000 fe5b 	bl	800132c <weoInit>
	HAL_Delay(1);
 8000676:	2001      	movs	r0, #1
 8000678:	f004 ff02 	bl	8005480 <HAL_Delay>
	weoClear();
 800067c:	f000 fec2 	bl	8001404 <weoClear>
	MEM_GetID();
 8000680:	f002 f998 	bl	80029b4 <MEM_GetID>
	soundSetup();
 8000684:	f001 f848 	bl	8001718 <soundSetup>
	LIS3DHsetup();
 8000688:	f004 f97c 	bl	8004984 <LIS3DHsetup>

	USART2->CR1 |= (USART_CR1_UE | USART_CR1_RE | USART_CR1_TE|USART_CR1_M); // Enable USART, Receive and Transmit
 800068c:	4b43      	ldr	r3, [pc, #268]	; (800079c <main+0x1e0>)
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	4b42      	ldr	r3, [pc, #264]	; (800079c <main+0x1e0>)
 8000692:	4943      	ldr	r1, [pc, #268]	; (80007a0 <main+0x1e4>)
 8000694:	430a      	orrs	r2, r1
 8000696:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	LL_USART_EnableIT_RXNE(USART2);
 8000698:	4b40      	ldr	r3, [pc, #256]	; (800079c <main+0x1e0>)
 800069a:	0018      	movs	r0, r3
 800069c:	f7ff feee 	bl	800047c <LL_USART_EnableIT_RXNE_RXFNE>
	LL_USART_EnableIT_ERROR(USART2);
 80006a0:	4b3e      	ldr	r3, [pc, #248]	; (800079c <main+0x1e0>)
 80006a2:	0018      	movs	r0, r3
 80006a4:	f7ff ff09 	bl	80004ba <LL_USART_EnableIT_ERROR>

	USART2->ICR|=USART_ICR_ORECF;
 80006a8:	4b3c      	ldr	r3, [pc, #240]	; (800079c <main+0x1e0>)
 80006aa:	6a1a      	ldr	r2, [r3, #32]
 80006ac:	4b3b      	ldr	r3, [pc, #236]	; (800079c <main+0x1e0>)
 80006ae:	2108      	movs	r1, #8
 80006b0:	430a      	orrs	r2, r1
 80006b2:	621a      	str	r2, [r3, #32]
//    squeak_triple(signal);
//    soundLoad(3);
//    soundPlay(3);
//    squeak_long();

	uint8_t ASCII_X=0x02;
 80006b4:	231b      	movs	r3, #27
 80006b6:	18fb      	adds	r3, r7, r3
 80006b8:	2202      	movs	r2, #2
 80006ba:	701a      	strb	r2, [r3, #0]
	uint8_t imY=0x04;
 80006bc:	231a      	movs	r3, #26
 80006be:	18fb      	adds	r3, r7, r3
 80006c0:	2204      	movs	r2, #4
 80006c2:	701a      	strb	r2, [r3, #0]
	uint8_t ASCII_height=0x26;
 80006c4:	2319      	movs	r3, #25
 80006c6:	18fb      	adds	r3, r7, r3
 80006c8:	2226      	movs	r2, #38	; 0x26
 80006ca:	701a      	strb	r2, [r3, #0]
	uint8_t X_increment=0x10;
 80006cc:	2318      	movs	r3, #24
 80006ce:	18fb      	adds	r3, r7, r3
 80006d0:	2210      	movs	r2, #16
 80006d2:	701a      	strb	r2, [r3, #0]
	uint8_t decY=1;
 80006d4:	2127      	movs	r1, #39	; 0x27
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	2201      	movs	r2, #1
 80006da:	701a      	strb	r2, [r3, #0]
	uint16_t k,j;
	uint8_t fontInfo=0xF1;
 80006dc:	2317      	movs	r3, #23
 80006de:	18fb      	adds	r3, r7, r3
 80006e0:	22f1      	movs	r2, #241	; 0xf1
 80006e2:	701a      	strb	r2, [r3, #0]
	uint8_t fontCur;
	uint8_t curStr=1;
 80006e4:	2316      	movs	r3, #22
 80006e6:	18fb      	adds	r3, r7, r3
 80006e8:	2201      	movs	r2, #1
 80006ea:	701a      	strb	r2, [r3, #0]
//	uint8_t curStr[4]={1,2,3,4};
	uint8_t strLen=4;
 80006ec:	2315      	movs	r3, #21
 80006ee:	18fb      	adds	r3, r7, r3
 80006f0:	2204      	movs	r2, #4
 80006f2:	701a      	strb	r2, [r3, #0]
//					USART_AS_SPI_sendCMD(0x81);	//Contrast Level
//					USART_AS_SPI_sendCMD(0xFF);
//					GPIOA->ODR |= 1 << 7;	//set dc
//					GPIOA->ODR |= 1 << 6;	//set cs

	uint8_t localWidth=0x07;
 80006f4:	2314      	movs	r3, #20
 80006f6:	18fb      	adds	r3, r7, r3
 80006f8:	2207      	movs	r2, #7
 80006fa:	701a      	strb	r2, [r3, #0]
		uint8_t localHeight=0x0E;
 80006fc:	2313      	movs	r3, #19
 80006fe:	18fb      	adds	r3, r7, r3
 8000700:	220e      	movs	r2, #14
 8000702:	701a      	strb	r2, [r3, #0]
		uint8_t x = 0;
 8000704:	2312      	movs	r3, #18
 8000706:	18fb      	adds	r3, r7, r3
 8000708:	2200      	movs	r2, #0
 800070a:	701a      	strb	r2, [r3, #0]
		uint8_t y = 0;
 800070c:	2011      	movs	r0, #17
 800070e:	183b      	adds	r3, r7, r0
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
				decY=0x01;
 8000714:	187b      	adds	r3, r7, r1
 8000716:	2201      	movs	r2, #1
 8000718:	701a      	strb	r2, [r3, #0]
				if(y % 2 !=0){
 800071a:	183b      	adds	r3, r7, r0
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2201      	movs	r2, #1
 8000720:	4013      	ands	r3, r2
 8000722:	b2db      	uxtb	r3, r3
 8000724:	2b00      	cmp	r3, #0
 8000726:	d002      	beq.n	800072e <main+0x172>
					decY=0x02;
 8000728:	187b      	adds	r3, r7, r1
 800072a:	2202      	movs	r2, #2
 800072c:	701a      	strb	r2, [r3, #0]
				}
	weoDrawRectangleFilled(x,y,(x+localWidth-1),y+(localHeight-decY),0xFF,aim);
 800072e:	2012      	movs	r0, #18
 8000730:	183a      	adds	r2, r7, r0
 8000732:	2314      	movs	r3, #20
 8000734:	18fb      	adds	r3, r7, r3
 8000736:	7812      	ldrb	r2, [r2, #0]
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	18d3      	adds	r3, r2, r3
 800073c:	b2db      	uxtb	r3, r3
 800073e:	3b01      	subs	r3, #1
 8000740:	b2dc      	uxtb	r4, r3
 8000742:	2313      	movs	r3, #19
 8000744:	18fa      	adds	r2, r7, r3
 8000746:	2327      	movs	r3, #39	; 0x27
 8000748:	18fb      	adds	r3, r7, r3
 800074a:	7812      	ldrb	r2, [r2, #0]
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	1ad3      	subs	r3, r2, r3
 8000750:	b2da      	uxtb	r2, r3
 8000752:	2111      	movs	r1, #17
 8000754:	187b      	adds	r3, r7, r1
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	18d3      	adds	r3, r2, r3
 800075a:	b2da      	uxtb	r2, r3
 800075c:	187b      	adds	r3, r7, r1
 800075e:	7819      	ldrb	r1, [r3, #0]
 8000760:	183b      	adds	r3, r7, r0
 8000762:	7818      	ldrb	r0, [r3, #0]
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <main+0x1e8>)
 8000766:	9301      	str	r3, [sp, #4]
 8000768:	23ff      	movs	r3, #255	; 0xff
 800076a:	9300      	str	r3, [sp, #0]
 800076c:	0013      	movs	r3, r2
 800076e:	0022      	movs	r2, r4
 8000770:	f000 feac 	bl	80014cc <weoDrawRectangleFilled>
//				if(y % 2 !=0){
//					decY=0x02;
//				}
//	weoDrawRectangleFilled(x,y,(x+localWidth-1),(y+localHeight-decY),0xFF,aim);
//    GPIOB->PUPDR &= ~0x3F000;
	GPIOC->ODR |= 1 << 6;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <main+0x1ec>)
 8000776:	695a      	ldr	r2, [r3, #20]
 8000778:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <main+0x1ec>)
 800077a:	2140      	movs	r1, #64	; 0x40
 800077c:	430a      	orrs	r2, r1
 800077e:	615a      	str	r2, [r3, #20]
	while (1) {
//		weoShowSmallImage(0x02,0x70,0x00);
//		LIS3DHreadData();
		cmdExecute(cmd2Execute);
 8000780:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <main+0x1f0>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	0018      	movs	r0, r3
 8000786:	f002 f977 	bl	8002a78 <cmdExecute>
//		WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
//		WriteReg_I2C_SOUND(0x2E, 0x24);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
//		squeak_single(signal);
		soundPlay(7);
 800078a:	2007      	movs	r0, #7
 800078c:	f002 f8e8 	bl	8002960 <soundPlay>
		cmdExecute(cmd2Execute);
 8000790:	e7f6      	b.n	8000780 <main+0x1c4>
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	40021000 	.word	0x40021000
 8000798:	2000008c 	.word	0x2000008c
 800079c:	40004400 	.word	0x40004400
 80007a0:	1000100d 	.word	0x1000100d
 80007a4:	20000030 	.word	0x20000030
 80007a8:	50000800 	.word	0x50000800
 80007ac:	20000426 	.word	0x20000426

080007b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b0:	b590      	push	{r4, r7, lr}
 80007b2:	b093      	sub	sp, #76	; 0x4c
 80007b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b6:	2410      	movs	r4, #16
 80007b8:	193b      	adds	r3, r7, r4
 80007ba:	0018      	movs	r0, r3
 80007bc:	2338      	movs	r3, #56	; 0x38
 80007be:	001a      	movs	r2, r3
 80007c0:	2100      	movs	r1, #0
 80007c2:	f00c f8ed 	bl	800c9a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c6:	003b      	movs	r3, r7
 80007c8:	0018      	movs	r0, r3
 80007ca:	2310      	movs	r3, #16
 80007cc:	001a      	movs	r2, r3
 80007ce:	2100      	movs	r1, #0
 80007d0:	f00c f8e6 	bl	800c9a0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007d4:	2380      	movs	r3, #128	; 0x80
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	0018      	movs	r0, r3
 80007da:	f007 faff 	bl	8007ddc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007de:	193b      	adds	r3, r7, r4
 80007e0:	2202      	movs	r2, #2
 80007e2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e4:	193b      	adds	r3, r7, r4
 80007e6:	2280      	movs	r2, #128	; 0x80
 80007e8:	0052      	lsls	r2, r2, #1
 80007ea:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80007ec:	0021      	movs	r1, r4
 80007ee:	187b      	adds	r3, r7, r1
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	2240      	movs	r2, #64	; 0x40
 80007f8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	2202      	movs	r2, #2
 80007fe:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000800:	187b      	adds	r3, r7, r1
 8000802:	2202      	movs	r2, #2
 8000804:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000806:	187b      	adds	r3, r7, r1
 8000808:	2200      	movs	r2, #0
 800080a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800080c:	187b      	adds	r3, r7, r1
 800080e:	2208      	movs	r2, #8
 8000810:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000812:	187b      	adds	r3, r7, r1
 8000814:	2280      	movs	r2, #128	; 0x80
 8000816:	0292      	lsls	r2, r2, #10
 8000818:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800081a:	187b      	adds	r3, r7, r1
 800081c:	2280      	movs	r2, #128	; 0x80
 800081e:	0492      	lsls	r2, r2, #18
 8000820:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000822:	187b      	adds	r3, r7, r1
 8000824:	2280      	movs	r2, #128	; 0x80
 8000826:	0592      	lsls	r2, r2, #22
 8000828:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082a:	187b      	adds	r3, r7, r1
 800082c:	0018      	movs	r0, r3
 800082e:	f007 fb21 	bl	8007e74 <HAL_RCC_OscConfig>
 8000832:	1e03      	subs	r3, r0, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000836:	f004 f8d7 	bl	80049e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083a:	003b      	movs	r3, r7
 800083c:	2207      	movs	r2, #7
 800083e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000840:	003b      	movs	r3, r7
 8000842:	2202      	movs	r2, #2
 8000844:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000846:	003b      	movs	r3, r7
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800084c:	003b      	movs	r3, r7
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000852:	003b      	movs	r3, r7
 8000854:	2102      	movs	r1, #2
 8000856:	0018      	movs	r0, r3
 8000858:	f007 fe26 	bl	80084a8 <HAL_RCC_ClockConfig>
 800085c:	1e03      	subs	r3, r0, #0
 800085e:	d001      	beq.n	8000864 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000860:	f004 f8c2 	bl	80049e8 <Error_Handler>
  }
}
 8000864:	46c0      	nop			; (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	b013      	add	sp, #76	; 0x4c
 800086a:	bd90      	pop	{r4, r7, pc}

0800086c <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8000870:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <MX_COMP1_Init+0x5c>)
 8000872:	4a16      	ldr	r2, [pc, #88]	; (80008cc <MX_COMP1_Init+0x60>)
 8000874:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 8000876:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_COMP1_Init+0x5c>)
 8000878:	2280      	movs	r2, #128	; 0x80
 800087a:	0052      	lsls	r2, r2, #1
 800087c:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 800087e:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <MX_COMP1_Init+0x5c>)
 8000880:	2230      	movs	r2, #48	; 0x30
 8000882:	615a      	str	r2, [r3, #20]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000884:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <MX_COMP1_Init+0x5c>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 800088a:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_COMP1_Init+0x5c>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000890:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <MX_COMP1_Init+0x5c>)
 8000892:	2200      	movs	r2, #0
 8000894:	619a      	str	r2, [r3, #24]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_TIM1_OC5;
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_COMP1_Init+0x5c>)
 8000898:	2280      	movs	r2, #128	; 0x80
 800089a:	0392      	lsls	r2, r2, #14
 800089c:	621a      	str	r2, [r3, #32]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 800089e:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <MX_COMP1_Init+0x5c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	60da      	str	r2, [r3, #12]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80008a4:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <MX_COMP1_Init+0x5c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_EVENT_RISING;
 80008aa:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <MX_COMP1_Init+0x5c>)
 80008ac:	2212      	movs	r2, #18
 80008ae:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80008b0:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <MX_COMP1_Init+0x5c>)
 80008b2:	0018      	movs	r0, r3
 80008b4:	f004 feca 	bl	800564c <HAL_COMP_Init>
 80008b8:	1e03      	subs	r3, r0, #0
 80008ba:	d001      	beq.n	80008c0 <MX_COMP1_Init+0x54>
  {
    Error_Handler();
 80008bc:	f004 f894 	bl	80049e8 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 80008c0:	46c0      	nop			; (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	2000008c 	.word	0x2000008c
 80008cc:	40010200 	.word	0x40010200

080008d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008d4:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <MX_I2C1_Init+0x74>)
 80008d6:	4a1c      	ldr	r2, [pc, #112]	; (8000948 <MX_I2C1_Init+0x78>)
 80008d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x1094102C;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_I2C1_Init+0x74>)
 80008dc:	4a1b      	ldr	r2, [pc, #108]	; (800094c <MX_I2C1_Init+0x7c>)
 80008de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008e0:	4b18      	ldr	r3, [pc, #96]	; (8000944 <MX_I2C1_Init+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008e6:	4b17      	ldr	r3, [pc, #92]	; (8000944 <MX_I2C1_Init+0x74>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008ec:	4b15      	ldr	r3, [pc, #84]	; (8000944 <MX_I2C1_Init+0x74>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008f2:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_I2C1_Init+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008f8:	4b12      	ldr	r3, [pc, #72]	; (8000944 <MX_I2C1_Init+0x74>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_I2C1_Init+0x74>)
 8000900:	2200      	movs	r2, #0
 8000902:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_I2C1_Init+0x74>)
 8000906:	2200      	movs	r2, #0
 8000908:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_I2C1_Init+0x74>)
 800090c:	0018      	movs	r0, r3
 800090e:	f005 fd5b 	bl	80063c8 <HAL_I2C_Init>
 8000912:	1e03      	subs	r3, r0, #0
 8000914:	d001      	beq.n	800091a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000916:	f004 f867 	bl	80049e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800091a:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <MX_I2C1_Init+0x74>)
 800091c:	2100      	movs	r1, #0
 800091e:	0018      	movs	r0, r3
 8000920:	f006 fef0 	bl	8007704 <HAL_I2CEx_ConfigAnalogFilter>
 8000924:	1e03      	subs	r3, r0, #0
 8000926:	d001      	beq.n	800092c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000928:	f004 f85e 	bl	80049e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <MX_I2C1_Init+0x74>)
 800092e:	2100      	movs	r1, #0
 8000930:	0018      	movs	r0, r3
 8000932:	f006 ff33 	bl	800779c <HAL_I2CEx_ConfigDigitalFilter>
 8000936:	1e03      	subs	r3, r0, #0
 8000938:	d001      	beq.n	800093e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800093a:	f004 f855 	bl	80049e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	200000bc 	.word	0x200000bc
 8000948:	40005400 	.word	0x40005400
 800094c:	1094102c 	.word	0x1094102c

08000950 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000954:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_I2S1_Init+0x4c>)
 8000956:	4a12      	ldr	r2, [pc, #72]	; (80009a0 <MX_I2S1_Init+0x50>)
 8000958:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <MX_I2S1_Init+0x4c>)
 800095c:	2280      	movs	r2, #128	; 0x80
 800095e:	0092      	lsls	r2, r2, #2
 8000960:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_I2S1_Init+0x4c>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_I2S1_Init+0x4c>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <MX_I2S1_Init+0x4c>)
 8000970:	2280      	movs	r2, #128	; 0x80
 8000972:	0092      	lsls	r2, r2, #2
 8000974:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000976:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_I2S1_Init+0x4c>)
 8000978:	22fa      	movs	r2, #250	; 0xfa
 800097a:	0192      	lsls	r2, r2, #6
 800097c:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 800097e:	4b07      	ldr	r3, [pc, #28]	; (800099c <MX_I2S1_Init+0x4c>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <MX_I2S1_Init+0x4c>)
 8000986:	0018      	movs	r0, r3
 8000988:	f006 ff54 	bl	8007834 <HAL_I2S_Init>
 800098c:	1e03      	subs	r3, r0, #0
 800098e:	d001      	beq.n	8000994 <MX_I2S1_Init+0x44>
  {
    Error_Handler();
 8000990:	f004 f82a 	bl	80049e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000994:	46c0      	nop			; (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	20000108 	.word	0x20000108
 80009a0:	40013000 	.word	0x40013000

080009a4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80009a8:	4b1e      	ldr	r3, [pc, #120]	; (8000a24 <MX_SPI2_Init+0x80>)
 80009aa:	2208      	movs	r2, #8
 80009ac:	61da      	str	r2, [r3, #28]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80009ae:	4b1d      	ldr	r3, [pc, #116]	; (8000a24 <MX_SPI2_Init+0x80>)
 80009b0:	4a1d      	ldr	r2, [pc, #116]	; (8000a28 <MX_SPI2_Init+0x84>)
 80009b2:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009b4:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <MX_SPI2_Init+0x80>)
 80009b6:	2282      	movs	r2, #130	; 0x82
 80009b8:	0052      	lsls	r2, r2, #1
 80009ba:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009bc:	4b19      	ldr	r3, [pc, #100]	; (8000a24 <MX_SPI2_Init+0x80>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80009c2:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <MX_SPI2_Init+0x80>)
 80009c4:	22e0      	movs	r2, #224	; 0xe0
 80009c6:	00d2      	lsls	r2, r2, #3
 80009c8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009ca:	4b16      	ldr	r3, [pc, #88]	; (8000a24 <MX_SPI2_Init+0x80>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009d0:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <MX_SPI2_Init+0x80>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80009d6:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <MX_SPI2_Init+0x80>)
 80009d8:	2280      	movs	r2, #128	; 0x80
 80009da:	0092      	lsls	r2, r2, #2
 80009dc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <MX_SPI2_Init+0x80>)
 80009e0:	2210      	movs	r2, #16
 80009e2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <MX_SPI2_Init+0x80>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <MX_SPI2_Init+0x80>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <MX_SPI2_Init+0x80>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80009f6:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <MX_SPI2_Init+0x80>)
 80009f8:	2207      	movs	r2, #7
 80009fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009fc:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <MX_SPI2_Init+0x80>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a02:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <MX_SPI2_Init+0x80>)
 8000a04:	2208      	movs	r2, #8
 8000a06:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <MX_SPI2_Init+0x80>)
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f008 fbf6 	bl	80091fc <HAL_SPI_Init>
 8000a10:	1e03      	subs	r3, r0, #0
 8000a12:	d001      	beq.n	8000a18 <MX_SPI2_Init+0x74>
  {
    Error_Handler();
 8000a14:	f003 ffe8 	bl	80049e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a18:	4b02      	ldr	r3, [pc, #8]	; (8000a24 <MX_SPI2_Init+0x80>)
 8000a1a:	2208      	movs	r2, #8
 8000a1c:	61da      	str	r2, [r3, #28]
  /* USER CODE END SPI2_Init 2 */

}
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	200001a0 	.word	0x200001a0
 8000a28:	40003800 	.word	0x40003800

08000a2c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b09e      	sub	sp, #120	; 0x78
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a32:	2368      	movs	r3, #104	; 0x68
 8000a34:	18fb      	adds	r3, r7, r3
 8000a36:	0018      	movs	r0, r3
 8000a38:	2310      	movs	r3, #16
 8000a3a:	001a      	movs	r2, r3
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	f00b ffaf 	bl	800c9a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a42:	235c      	movs	r3, #92	; 0x5c
 8000a44:	18fb      	adds	r3, r7, r3
 8000a46:	0018      	movs	r0, r3
 8000a48:	230c      	movs	r3, #12
 8000a4a:	001a      	movs	r2, r3
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	f00b ffa7 	bl	800c9a0 <memset>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8000a52:	2350      	movs	r3, #80	; 0x50
 8000a54:	18fb      	adds	r3, r7, r3
 8000a56:	0018      	movs	r0, r3
 8000a58:	230c      	movs	r3, #12
 8000a5a:	001a      	movs	r2, r3
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	f00b ff9f 	bl	800c9a0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a62:	2334      	movs	r3, #52	; 0x34
 8000a64:	18fb      	adds	r3, r7, r3
 8000a66:	0018      	movs	r0, r3
 8000a68:	231c      	movs	r3, #28
 8000a6a:	001a      	movs	r2, r3
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	f00b ff97 	bl	800c9a0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a72:	003b      	movs	r3, r7
 8000a74:	0018      	movs	r0, r3
 8000a76:	2334      	movs	r3, #52	; 0x34
 8000a78:	001a      	movs	r2, r3
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	f00b ff90 	bl	800c9a0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a80:	4b64      	ldr	r3, [pc, #400]	; (8000c14 <MX_TIM1_Init+0x1e8>)
 8000a82:	4a65      	ldr	r2, [pc, #404]	; (8000c18 <MX_TIM1_Init+0x1ec>)
 8000a84:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a86:	4b63      	ldr	r3, [pc, #396]	; (8000c14 <MX_TIM1_Init+0x1e8>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8c:	4b61      	ldr	r3, [pc, #388]	; (8000c14 <MX_TIM1_Init+0x1e8>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 639;
 8000a92:	4b60      	ldr	r3, [pc, #384]	; (8000c14 <MX_TIM1_Init+0x1e8>)
 8000a94:	4a61      	ldr	r2, [pc, #388]	; (8000c1c <MX_TIM1_Init+0x1f0>)
 8000a96:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a98:	4b5e      	ldr	r3, [pc, #376]	; (8000c14 <MX_TIM1_Init+0x1e8>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a9e:	4b5d      	ldr	r3, [pc, #372]	; (8000c14 <MX_TIM1_Init+0x1e8>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000aa4:	4b5b      	ldr	r3, [pc, #364]	; (8000c14 <MX_TIM1_Init+0x1e8>)
 8000aa6:	2280      	movs	r2, #128	; 0x80
 8000aa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000aaa:	4b5a      	ldr	r3, [pc, #360]	; (8000c14 <MX_TIM1_Init+0x1e8>)
 8000aac:	0018      	movs	r0, r3
 8000aae:	f009 fbc3 	bl	800a238 <HAL_TIM_Base_Init>
 8000ab2:	1e03      	subs	r3, r0, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000ab6:	f003 ff97 	bl	80049e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aba:	2168      	movs	r1, #104	; 0x68
 8000abc:	187b      	adds	r3, r7, r1
 8000abe:	2280      	movs	r2, #128	; 0x80
 8000ac0:	0152      	lsls	r2, r2, #5
 8000ac2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ac4:	187a      	adds	r2, r7, r1
 8000ac6:	4b53      	ldr	r3, [pc, #332]	; (8000c14 <MX_TIM1_Init+0x1e8>)
 8000ac8:	0011      	movs	r1, r2
 8000aca:	0018      	movs	r0, r3
 8000acc:	f009 fe56 	bl	800a77c <HAL_TIM_ConfigClockSource>
 8000ad0:	1e03      	subs	r3, r0, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000ad4:	f003 ff88 	bl	80049e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ad8:	4b4e      	ldr	r3, [pc, #312]	; (8000c14 <MX_TIM1_Init+0x1e8>)
 8000ada:	0018      	movs	r0, r3
 8000adc:	f009 fc04 	bl	800a2e8 <HAL_TIM_PWM_Init>
 8000ae0:	1e03      	subs	r3, r0, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000ae4:	f003 ff80 	bl	80049e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae8:	215c      	movs	r1, #92	; 0x5c
 8000aea:	187b      	adds	r3, r7, r1
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	2200      	movs	r2, #0
 8000af4:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000afc:	187a      	adds	r2, r7, r1
 8000afe:	4b45      	ldr	r3, [pc, #276]	; (8000c14 <MX_TIM1_Init+0x1e8>)
 8000b00:	0011      	movs	r1, r2
 8000b02:	0018      	movs	r0, r3
 8000b04:	f00a fb14 	bl	800b130 <HAL_TIMEx_MasterConfigSynchronization>
 8000b08:	1e03      	subs	r3, r0, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8000b0c:	f003 ff6c 	bl	80049e8 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8000b10:	2150      	movs	r1, #80	; 0x50
 8000b12:	187b      	adds	r3, r7, r1
 8000b14:	2202      	movs	r2, #2
 8000b16:	601a      	str	r2, [r3, #0]
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	605a      	str	r2, [r3, #4]
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8000b1e:	187b      	adds	r3, r7, r1
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8000b24:	187a      	adds	r2, r7, r1
 8000b26:	4b3b      	ldr	r3, [pc, #236]	; (8000c14 <MX_TIM1_Init+0x1e8>)
 8000b28:	2101      	movs	r1, #1
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f00a fc14 	bl	800b358 <HAL_TIMEx_ConfigBreakInput>
 8000b30:	1e03      	subs	r3, r0, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000b34:	f003 ff58 	bl	80049e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b38:	2134      	movs	r1, #52	; 0x34
 8000b3a:	187b      	adds	r3, r7, r1
 8000b3c:	2260      	movs	r2, #96	; 0x60
 8000b3e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 300;
 8000b40:	187b      	adds	r3, r7, r1
 8000b42:	2296      	movs	r2, #150	; 0x96
 8000b44:	0052      	lsls	r2, r2, #1
 8000b46:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b48:	187b      	adds	r3, r7, r1
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b4e:	187b      	adds	r3, r7, r1
 8000b50:	2200      	movs	r2, #0
 8000b52:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000b54:	187b      	adds	r3, r7, r1
 8000b56:	2204      	movs	r2, #4
 8000b58:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b5a:	187b      	adds	r3, r7, r1
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b60:	187b      	adds	r3, r7, r1
 8000b62:	2200      	movs	r2, #0
 8000b64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b66:	1879      	adds	r1, r7, r1
 8000b68:	4b2a      	ldr	r3, [pc, #168]	; (8000c14 <MX_TIM1_Init+0x1e8>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	f009 fd05 	bl	800a57c <HAL_TIM_PWM_ConfigChannel>
 8000b72:	1e03      	subs	r3, r0, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8000b76:	f003 ff37 	bl	80049e8 <Error_Handler>
  }
  sConfigOC.Pulse = 50;
 8000b7a:	2134      	movs	r1, #52	; 0x34
 8000b7c:	187b      	adds	r3, r7, r1
 8000b7e:	2232      	movs	r2, #50	; 0x32
 8000b80:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 8000b82:	1879      	adds	r1, r7, r1
 8000b84:	4b23      	ldr	r3, [pc, #140]	; (8000c14 <MX_TIM1_Init+0x1e8>)
 8000b86:	2210      	movs	r2, #16
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f009 fcf7 	bl	800a57c <HAL_TIM_PWM_ConfigChannel>
 8000b8e:	1e03      	subs	r3, r0, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 8000b92:	f003 ff29 	bl	80049e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000b96:	003b      	movs	r3, r7
 8000b98:	2280      	movs	r2, #128	; 0x80
 8000b9a:	0112      	lsls	r2, r2, #4
 8000b9c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000b9e:	003b      	movs	r3, r7
 8000ba0:	2280      	movs	r2, #128	; 0x80
 8000ba2:	00d2      	lsls	r2, r2, #3
 8000ba4:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ba6:	003b      	movs	r3, r7
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bac:	003b      	movs	r3, r7
 8000bae:	2200      	movs	r2, #0
 8000bb0:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000bb2:	003b      	movs	r3, r7
 8000bb4:	2280      	movs	r2, #128	; 0x80
 8000bb6:	0152      	lsls	r2, r2, #5
 8000bb8:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bba:	003b      	movs	r3, r7
 8000bbc:	2280      	movs	r2, #128	; 0x80
 8000bbe:	0192      	lsls	r2, r2, #6
 8000bc0:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 10;
 8000bc2:	003b      	movs	r3, r7
 8000bc4:	220a      	movs	r2, #10
 8000bc6:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000bc8:	003b      	movs	r3, r7
 8000bca:	2200      	movs	r2, #0
 8000bcc:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bce:	003b      	movs	r3, r7
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000bd4:	003b      	movs	r3, r7
 8000bd6:	2280      	movs	r2, #128	; 0x80
 8000bd8:	0492      	lsls	r2, r2, #18
 8000bda:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000bdc:	003b      	movs	r3, r7
 8000bde:	2200      	movs	r2, #0
 8000be0:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000be2:	003b      	movs	r3, r7
 8000be4:	2200      	movs	r2, #0
 8000be6:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000be8:	003b      	movs	r3, r7
 8000bea:	2280      	movs	r2, #128	; 0x80
 8000bec:	01d2      	lsls	r2, r2, #7
 8000bee:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bf0:	003a      	movs	r2, r7
 8000bf2:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <MX_TIM1_Init+0x1e8>)
 8000bf4:	0011      	movs	r1, r2
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f00a fb08 	bl	800b20c <HAL_TIMEx_ConfigBreakDeadTime>
 8000bfc:	1e03      	subs	r3, r0, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_TIM1_Init+0x1d8>
  {
    Error_Handler();
 8000c00:	f003 fef2 	bl	80049e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c04:	4b03      	ldr	r3, [pc, #12]	; (8000c14 <MX_TIM1_Init+0x1e8>)
 8000c06:	0018      	movs	r0, r3
 8000c08:	f004 f978 	bl	8004efc <HAL_TIM_MspPostInit>

}
 8000c0c:	46c0      	nop			; (mov r8, r8)
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	b01e      	add	sp, #120	; 0x78
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	200002bc 	.word	0x200002bc
 8000c18:	40012c00 	.word	0x40012c00
 8000c1c:	0000027f 	.word	0x0000027f

08000c20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c20:	b590      	push	{r4, r7, lr}
 8000c22:	b09d      	sub	sp, #116	; 0x74
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000c26:	2350      	movs	r3, #80	; 0x50
 8000c28:	18fb      	adds	r3, r7, r3
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	2320      	movs	r3, #32
 8000c2e:	001a      	movs	r2, r3
 8000c30:	2100      	movs	r1, #0
 8000c32:	f00b feb5 	bl	800c9a0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c36:	2338      	movs	r3, #56	; 0x38
 8000c38:	18fb      	adds	r3, r7, r3
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	2318      	movs	r3, #24
 8000c3e:	001a      	movs	r2, r3
 8000c40:	2100      	movs	r1, #0
 8000c42:	f00b fead 	bl	800c9a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	0018      	movs	r0, r3
 8000c4a:	2334      	movs	r3, #52	; 0x34
 8000c4c:	001a      	movs	r2, r3
 8000c4e:	2100      	movs	r1, #0
 8000c50:	f00b fea6 	bl	800c9a0 <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	2202      	movs	r2, #2
 8000c58:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	0018      	movs	r0, r3
 8000c64:	f007 fdca 	bl	80087fc <HAL_RCCEx_PeriphCLKConfig>
 8000c68:	1e03      	subs	r3, r0, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
 8000c6c:	f003 febc 	bl	80049e8 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000c70:	2380      	movs	r3, #128	; 0x80
 8000c72:	029b      	lsls	r3, r3, #10
 8000c74:	0018      	movs	r0, r3
 8000c76:	f7ff fc75 	bl	8000564 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	f7ff fc88 	bl	8000590 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000c80:	2438      	movs	r4, #56	; 0x38
 8000c82:	193b      	adds	r3, r7, r4
 8000c84:	2204      	movs	r2, #4
 8000c86:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000c88:	193b      	adds	r3, r7, r4
 8000c8a:	2202      	movs	r2, #2
 8000c8c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c8e:	193b      	adds	r3, r7, r4
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c94:	193b      	adds	r3, r7, r4
 8000c96:	2200      	movs	r2, #0
 8000c98:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c9a:	193b      	adds	r3, r7, r4
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000ca0:	193b      	adds	r3, r7, r4
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca6:	193a      	adds	r2, r7, r4
 8000ca8:	23a0      	movs	r3, #160	; 0xa0
 8000caa:	05db      	lsls	r3, r3, #23
 8000cac:	0011      	movs	r1, r2
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f00b faf4 	bl	800c29c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000cb4:	0021      	movs	r1, r4
 8000cb6:	187b      	adds	r3, r7, r1
 8000cb8:	2208      	movs	r2, #8
 8000cba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000cbc:	187b      	adds	r3, r7, r1
 8000cbe:	2202      	movs	r2, #2
 8000cc0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000cc2:	187b      	adds	r3, r7, r1
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000cc8:	187b      	adds	r3, r7, r1
 8000cca:	2200      	movs	r2, #0
 8000ccc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000cce:	187b      	adds	r3, r7, r1
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000cd4:	187b      	adds	r3, r7, r1
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cda:	187a      	adds	r2, r7, r1
 8000cdc:	23a0      	movs	r3, #160	; 0xa0
 8000cde:	05db      	lsls	r3, r3, #23
 8000ce0:	0011      	movs	r1, r2
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f00b fada 	bl	800c29c <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8000ce8:	2100      	movs	r1, #0
 8000cea:	201c      	movs	r0, #28
 8000cec:	f7ff fab0 	bl	8000250 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000cf0:	201c      	movs	r0, #28
 8000cf2:	f7ff fa93 	bl	800021c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000cf6:	2150      	movs	r1, #80	; 0x50
 8000cf8:	187b      	adds	r3, r7, r1
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 57600;
 8000cfe:	187b      	adds	r3, r7, r1
 8000d00:	22e1      	movs	r2, #225	; 0xe1
 8000d02:	0212      	lsls	r2, r2, #8
 8000d04:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8000d06:	187b      	adds	r3, r7, r1
 8000d08:	2280      	movs	r2, #128	; 0x80
 8000d0a:	0152      	lsls	r2, r2, #5
 8000d0c:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000d0e:	187b      	adds	r3, r7, r1
 8000d10:	2200      	movs	r2, #0
 8000d12:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000d14:	187b      	adds	r3, r7, r1
 8000d16:	2200      	movs	r2, #0
 8000d18:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000d1a:	187b      	adds	r3, r7, r1
 8000d1c:	220c      	movs	r2, #12
 8000d1e:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000d20:	187b      	adds	r3, r7, r1
 8000d22:	2200      	movs	r2, #0
 8000d24:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000d26:	187b      	adds	r3, r7, r1
 8000d28:	2200      	movs	r2, #0
 8000d2a:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART2, &USART_InitStruct);
 8000d2c:	187b      	adds	r3, r7, r1
 8000d2e:	4a16      	ldr	r2, [pc, #88]	; (8000d88 <MX_USART2_UART_Init+0x168>)
 8000d30:	0019      	movs	r1, r3
 8000d32:	0010      	movs	r0, r2
 8000d34:	f00b fd82 	bl	800c83c <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000d38:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <MX_USART2_UART_Init+0x168>)
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f7ff fb13 	bl	8000368 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000d42:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <MX_USART2_UART_Init+0x168>)
 8000d44:	2100      	movs	r1, #0
 8000d46:	0018      	movs	r0, r3
 8000d48:	f7ff fb32 	bl	80003b0 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART2);
 8000d4c:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <MX_USART2_UART_Init+0x168>)
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f7ff fafa 	bl	8000348 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART2);
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <MX_USART2_UART_Init+0x168>)
 8000d56:	0018      	movs	r0, r3
 8000d58:	f7ff fb50 	bl	80003fc <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 8000d5c:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <MX_USART2_UART_Init+0x168>)
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f7ff fae4 	bl	800032c <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 8000d64:	46c0      	nop			; (mov r8, r8)
 8000d66:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <MX_USART2_UART_Init+0x168>)
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f7ff fb5f 	bl	800042c <LL_USART_IsActiveFlag_TEACK>
 8000d6e:	1e03      	subs	r3, r0, #0
 8000d70:	d0f9      	beq.n	8000d66 <MX_USART2_UART_Init+0x146>
 8000d72:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <MX_USART2_UART_Init+0x168>)
 8000d74:	0018      	movs	r0, r3
 8000d76:	f7ff fb6d 	bl	8000454 <LL_USART_IsActiveFlag_REACK>
 8000d7a:	1e03      	subs	r3, r0, #0
 8000d7c:	d0f3      	beq.n	8000d66 <MX_USART2_UART_Init+0x146>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	46c0      	nop			; (mov r8, r8)
 8000d82:	46bd      	mov	sp, r7
 8000d84:	b01d      	add	sp, #116	; 0x74
 8000d86:	bd90      	pop	{r4, r7, pc}
 8000d88:	40004400 	.word	0x40004400

08000d8c <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */
//	USART3->CR2 &= ~(USART_CR1_UE);
	USART3->CR2|=USART_CR2_MSBFIRST;
 8000d90:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <MX_USART3_Init+0x78>)
 8000d92:	685a      	ldr	r2, [r3, #4]
 8000d94:	4b1b      	ldr	r3, [pc, #108]	; (8000e04 <MX_USART3_Init+0x78>)
 8000d96:	2180      	movs	r1, #128	; 0x80
 8000d98:	0309      	lsls	r1, r1, #12
 8000d9a:	430a      	orrs	r2, r1
 8000d9c:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8000d9e:	4b1a      	ldr	r3, [pc, #104]	; (8000e08 <MX_USART3_Init+0x7c>)
 8000da0:	4a18      	ldr	r2, [pc, #96]	; (8000e04 <MX_USART3_Init+0x78>)
 8000da2:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 4000000;
 8000da4:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <MX_USART3_Init+0x7c>)
 8000da6:	4a19      	ldr	r2, [pc, #100]	; (8000e0c <MX_USART3_Init+0x80>)
 8000da8:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8000daa:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <MX_USART3_Init+0x7c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8000db0:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <MX_USART3_Init+0x7c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8000db6:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <MX_USART3_Init+0x7c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX;
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <MX_USART3_Init+0x7c>)
 8000dbe:	2208      	movs	r2, #8
 8000dc0:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_HIGH;
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <MX_USART3_Init+0x7c>)
 8000dc4:	2280      	movs	r2, #128	; 0x80
 8000dc6:	00d2      	lsls	r2, r2, #3
 8000dc8:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_2EDGE;
 8000dca:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <MX_USART3_Init+0x7c>)
 8000dcc:	2280      	movs	r2, #128	; 0x80
 8000dce:	0092      	lsls	r2, r2, #2
 8000dd0:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_ENABLE;
 8000dd2:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <MX_USART3_Init+0x7c>)
 8000dd4:	2280      	movs	r2, #128	; 0x80
 8000dd6:	0052      	lsls	r2, r2, #1
 8000dd8:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8000dda:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <MX_USART3_Init+0x7c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 8000de0:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <MX_USART3_Init+0x7c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8000de6:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <MX_USART3_Init+0x7c>)
 8000de8:	0018      	movs	r0, r3
 8000dea:	f00a fb61 	bl	800b4b0 <HAL_USART_Init>
 8000dee:	1e03      	subs	r3, r0, #0
 8000df0:	d001      	beq.n	8000df6 <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 8000df2:	f003 fdf9 	bl	80049e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  husart3.Init.BaudRate = 8000000;
 8000df6:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <MX_USART3_Init+0x7c>)
 8000df8:	4a05      	ldr	r2, [pc, #20]	; (8000e10 <MX_USART3_Init+0x84>)
 8000dfa:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 2 */

}
 8000dfc:	46c0      	nop			; (mov r8, r8)
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	40004800 	.word	0x40004800
 8000e08:	20000308 	.word	0x20000308
 8000e0c:	003d0900 	.word	0x003d0900
 8000e10:	007a1200 	.word	0x007a1200

08000e14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e1a:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <MX_DMA_Init+0x58>)
 8000e1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e1e:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <MX_DMA_Init+0x58>)
 8000e20:	2101      	movs	r1, #1
 8000e22:	430a      	orrs	r2, r1
 8000e24:	639a      	str	r2, [r3, #56]	; 0x38
 8000e26:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <MX_DMA_Init+0x58>)
 8000e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2100      	movs	r1, #0
 8000e36:	2009      	movs	r0, #9
 8000e38:	f004 fe68 	bl	8005b0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e3c:	2009      	movs	r0, #9
 8000e3e:	f004 fe7a 	bl	8005b36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2100      	movs	r1, #0
 8000e46:	200a      	movs	r0, #10
 8000e48:	f004 fe60 	bl	8005b0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000e4c:	200a      	movs	r0, #10
 8000e4e:	f004 fe72 	bl	8005b36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 0, 0);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2100      	movs	r1, #0
 8000e56:	200b      	movs	r0, #11
 8000e58:	f004 fe58 	bl	8005b0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 8000e5c:	200b      	movs	r0, #11
 8000e5e:	f004 fe6a 	bl	8005b36 <HAL_NVIC_EnableIRQ>

}
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	46bd      	mov	sp, r7
 8000e66:	b002      	add	sp, #8
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	40021000 	.word	0x40021000

08000e70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e76:	003b      	movs	r3, r7
 8000e78:	0018      	movs	r0, r3
 8000e7a:	2318      	movs	r3, #24
 8000e7c:	001a      	movs	r2, r3
 8000e7e:	2100      	movs	r1, #0
 8000e80:	f00b fd8e 	bl	800c9a0 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000e84:	2002      	movs	r0, #2
 8000e86:	f7ff fb83 	bl	8000590 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000e8a:	2004      	movs	r0, #4
 8000e8c:	f7ff fb80 	bl	8000590 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000e90:	2001      	movs	r0, #1
 8000e92:	f7ff fb7d 	bl	8000590 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(MEM_HOLD_GPIO_Port, MEM_HOLD_Pin);
 8000e96:	2380      	movs	r3, #128	; 0x80
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	4a8f      	ldr	r2, [pc, #572]	; (80010d8 <MX_GPIO_Init+0x268>)
 8000e9c:	0019      	movs	r1, r3
 8000e9e:	0010      	movs	r0, r2
 8000ea0:	f7ff fb48 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_WP_GPIO_Port, MEM_WP_Pin);
 8000ea4:	2380      	movs	r3, #128	; 0x80
 8000ea6:	01db      	lsls	r3, r3, #7
 8000ea8:	4a8c      	ldr	r2, [pc, #560]	; (80010dc <MX_GPIO_Init+0x26c>)
 8000eaa:	0019      	movs	r1, r3
 8000eac:	0010      	movs	r0, r2
 8000eae:	f7ff fb41 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_CS_GPIO_Port, MEM_CS_Pin);
 8000eb2:	2380      	movs	r3, #128	; 0x80
 8000eb4:	021b      	lsls	r3, r3, #8
 8000eb6:	4a89      	ldr	r2, [pc, #548]	; (80010dc <MX_GPIO_Init+0x26c>)
 8000eb8:	0019      	movs	r1, r3
 8000eba:	0010      	movs	r0, r2
 8000ebc:	f7ff fb3a 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_CS_GPIO_Port, DISP_CS_Pin);
 8000ec0:	23a0      	movs	r3, #160	; 0xa0
 8000ec2:	05db      	lsls	r3, r3, #23
 8000ec4:	2140      	movs	r1, #64	; 0x40
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	f7ff fb34 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_D_C_GPIO_Port, DISP_D_C_Pin);
 8000ecc:	23a0      	movs	r3, #160	; 0xa0
 8000ece:	05db      	lsls	r3, r3, #23
 8000ed0:	2180      	movs	r1, #128	; 0x80
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	f7ff fb2e 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(BF_GPIO_Port, BF_Pin);
 8000ed8:	4b80      	ldr	r3, [pc, #512]	; (80010dc <MX_GPIO_Init+0x26c>)
 8000eda:	2140      	movs	r1, #64	; 0x40
 8000edc:	0018      	movs	r0, r3
 8000ede:	f7ff fb29 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_1_GPIO_Port, TEST_1_Pin);
 8000ee2:	2380      	movs	r3, #128	; 0x80
 8000ee4:	011a      	lsls	r2, r3, #4
 8000ee6:	23a0      	movs	r3, #160	; 0xa0
 8000ee8:	05db      	lsls	r3, r3, #23
 8000eea:	0011      	movs	r1, r2
 8000eec:	0018      	movs	r0, r3
 8000eee:	f7ff fb2d 	bl	800054c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_2_GPIO_Port, TEST_2_Pin);
 8000ef2:	2380      	movs	r3, #128	; 0x80
 8000ef4:	015a      	lsls	r2, r3, #5
 8000ef6:	23a0      	movs	r3, #160	; 0xa0
 8000ef8:	05db      	lsls	r3, r3, #23
 8000efa:	0011      	movs	r1, r2
 8000efc:	0018      	movs	r0, r3
 8000efe:	f7ff fb25 	bl	800054c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = MEM_HOLD_Pin;
 8000f02:	003b      	movs	r3, r7
 8000f04:	2280      	movs	r2, #128	; 0x80
 8000f06:	0092      	lsls	r2, r2, #2
 8000f08:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f0a:	003b      	movs	r3, r7
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f10:	003b      	movs	r3, r7
 8000f12:	2203      	movs	r2, #3
 8000f14:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f16:	003b      	movs	r3, r7
 8000f18:	2200      	movs	r2, #0
 8000f1a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f1c:	003b      	movs	r3, r7
 8000f1e:	2200      	movs	r2, #0
 8000f20:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_HOLD_GPIO_Port, &GPIO_InitStruct);
 8000f22:	003b      	movs	r3, r7
 8000f24:	4a6c      	ldr	r2, [pc, #432]	; (80010d8 <MX_GPIO_Init+0x268>)
 8000f26:	0019      	movs	r1, r3
 8000f28:	0010      	movs	r0, r2
 8000f2a:	f00b f9b7 	bl	800c29c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_WP_Pin;
 8000f2e:	003b      	movs	r3, r7
 8000f30:	2280      	movs	r2, #128	; 0x80
 8000f32:	01d2      	lsls	r2, r2, #7
 8000f34:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f36:	003b      	movs	r3, r7
 8000f38:	2201      	movs	r2, #1
 8000f3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f3c:	003b      	movs	r3, r7
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f42:	003b      	movs	r3, r7
 8000f44:	2200      	movs	r2, #0
 8000f46:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f48:	003b      	movs	r3, r7
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_WP_GPIO_Port, &GPIO_InitStruct);
 8000f4e:	003b      	movs	r3, r7
 8000f50:	4a62      	ldr	r2, [pc, #392]	; (80010dc <MX_GPIO_Init+0x26c>)
 8000f52:	0019      	movs	r1, r3
 8000f54:	0010      	movs	r0, r2
 8000f56:	f00b f9a1 	bl	800c29c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_CS_Pin;
 8000f5a:	003b      	movs	r3, r7
 8000f5c:	2280      	movs	r2, #128	; 0x80
 8000f5e:	0212      	lsls	r2, r2, #8
 8000f60:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f62:	003b      	movs	r3, r7
 8000f64:	2201      	movs	r2, #1
 8000f66:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f68:	003b      	movs	r3, r7
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f6e:	003b      	movs	r3, r7
 8000f70:	2200      	movs	r2, #0
 8000f72:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f74:	003b      	movs	r3, r7
 8000f76:	2200      	movs	r2, #0
 8000f78:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_CS_GPIO_Port, &GPIO_InitStruct);
 8000f7a:	003b      	movs	r3, r7
 8000f7c:	4a57      	ldr	r2, [pc, #348]	; (80010dc <MX_GPIO_Init+0x26c>)
 8000f7e:	0019      	movs	r1, r3
 8000f80:	0010      	movs	r0, r2
 8000f82:	f00b f98b 	bl	800c29c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_3_Pin;
 8000f86:	003b      	movs	r3, r7
 8000f88:	2201      	movs	r2, #1
 8000f8a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000f8c:	003b      	movs	r3, r7
 8000f8e:	2200      	movs	r2, #0
 8000f90:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000f92:	003b      	movs	r3, r7
 8000f94:	2201      	movs	r2, #1
 8000f96:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_3_GPIO_Port, &GPIO_InitStruct);
 8000f98:	003a      	movs	r2, r7
 8000f9a:	23a0      	movs	r3, #160	; 0xa0
 8000f9c:	05db      	lsls	r3, r3, #23
 8000f9e:	0011      	movs	r1, r2
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f00b f97b 	bl	800c29c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_2_Pin;
 8000fa6:	003b      	movs	r3, r7
 8000fa8:	2202      	movs	r2, #2
 8000faa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000fac:	003b      	movs	r3, r7
 8000fae:	2200      	movs	r2, #0
 8000fb0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000fb2:	003b      	movs	r3, r7
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_2_GPIO_Port, &GPIO_InitStruct);
 8000fb8:	003a      	movs	r2, r7
 8000fba:	23a0      	movs	r3, #160	; 0xa0
 8000fbc:	05db      	lsls	r3, r3, #23
 8000fbe:	0011      	movs	r1, r2
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f00b f96b 	bl	800c29c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_1_Pin;
 8000fc6:	003b      	movs	r3, r7
 8000fc8:	2210      	movs	r2, #16
 8000fca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000fcc:	003b      	movs	r3, r7
 8000fce:	2200      	movs	r2, #0
 8000fd0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000fd2:	003b      	movs	r3, r7
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_1_GPIO_Port, &GPIO_InitStruct);
 8000fd8:	003a      	movs	r2, r7
 8000fda:	23a0      	movs	r3, #160	; 0xa0
 8000fdc:	05db      	lsls	r3, r3, #23
 8000fde:	0011      	movs	r1, r2
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	f00b f95b 	bl	800c29c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 8000fe6:	003b      	movs	r3, r7
 8000fe8:	2240      	movs	r2, #64	; 0x40
 8000fea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000fec:	003b      	movs	r3, r7
 8000fee:	2201      	movs	r2, #1
 8000ff0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff2:	003b      	movs	r3, r7
 8000ff4:	2203      	movs	r2, #3
 8000ff6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ff8:	003b      	movs	r3, r7
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ffe:	003b      	movs	r3, r7
 8001000:	2200      	movs	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 8001004:	003a      	movs	r2, r7
 8001006:	23a0      	movs	r3, #160	; 0xa0
 8001008:	05db      	lsls	r3, r3, #23
 800100a:	0011      	movs	r1, r2
 800100c:	0018      	movs	r0, r3
 800100e:	f00b f945 	bl	800c29c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_D_C_Pin;
 8001012:	003b      	movs	r3, r7
 8001014:	2280      	movs	r2, #128	; 0x80
 8001016:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001018:	003b      	movs	r3, r7
 800101a:	2201      	movs	r2, #1
 800101c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800101e:	003b      	movs	r3, r7
 8001020:	2203      	movs	r2, #3
 8001022:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001024:	003b      	movs	r3, r7
 8001026:	2200      	movs	r2, #0
 8001028:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800102a:	003b      	movs	r3, r7
 800102c:	2200      	movs	r2, #0
 800102e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_D_C_GPIO_Port, &GPIO_InitStruct);
 8001030:	003a      	movs	r2, r7
 8001032:	23a0      	movs	r3, #160	; 0xa0
 8001034:	05db      	lsls	r3, r3, #23
 8001036:	0011      	movs	r1, r2
 8001038:	0018      	movs	r0, r3
 800103a:	f00b f92f 	bl	800c29c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BF_Pin;
 800103e:	003b      	movs	r3, r7
 8001040:	2240      	movs	r2, #64	; 0x40
 8001042:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001044:	003b      	movs	r3, r7
 8001046:	2201      	movs	r2, #1
 8001048:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800104a:	003b      	movs	r3, r7
 800104c:	2203      	movs	r2, #3
 800104e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001050:	003b      	movs	r3, r7
 8001052:	2200      	movs	r2, #0
 8001054:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001056:	003b      	movs	r3, r7
 8001058:	2200      	movs	r2, #0
 800105a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BF_GPIO_Port, &GPIO_InitStruct);
 800105c:	003b      	movs	r3, r7
 800105e:	4a1f      	ldr	r2, [pc, #124]	; (80010dc <MX_GPIO_Init+0x26c>)
 8001060:	0019      	movs	r1, r3
 8001062:	0010      	movs	r0, r2
 8001064:	f00b f91a 	bl	800c29c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_1_Pin;
 8001068:	003b      	movs	r3, r7
 800106a:	2280      	movs	r2, #128	; 0x80
 800106c:	0112      	lsls	r2, r2, #4
 800106e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001070:	003b      	movs	r3, r7
 8001072:	2201      	movs	r2, #1
 8001074:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001076:	003b      	movs	r3, r7
 8001078:	2203      	movs	r2, #3
 800107a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800107c:	003b      	movs	r3, r7
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001082:	003b      	movs	r3, r7
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_1_GPIO_Port, &GPIO_InitStruct);
 8001088:	003a      	movs	r2, r7
 800108a:	23a0      	movs	r3, #160	; 0xa0
 800108c:	05db      	lsls	r3, r3, #23
 800108e:	0011      	movs	r1, r2
 8001090:	0018      	movs	r0, r3
 8001092:	f00b f903 	bl	800c29c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_2_Pin;
 8001096:	003b      	movs	r3, r7
 8001098:	2280      	movs	r2, #128	; 0x80
 800109a:	0152      	lsls	r2, r2, #5
 800109c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800109e:	003b      	movs	r3, r7
 80010a0:	2201      	movs	r2, #1
 80010a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80010a4:	003b      	movs	r3, r7
 80010a6:	2203      	movs	r2, #3
 80010a8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010aa:	003b      	movs	r3, r7
 80010ac:	2200      	movs	r2, #0
 80010ae:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010b0:	003b      	movs	r3, r7
 80010b2:	2200      	movs	r2, #0
 80010b4:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_2_GPIO_Port, &GPIO_InitStruct);
 80010b6:	003a      	movs	r2, r7
 80010b8:	23a0      	movs	r3, #160	; 0xa0
 80010ba:	05db      	lsls	r3, r3, #23
 80010bc:	0011      	movs	r1, r2
 80010be:	0018      	movs	r0, r3
 80010c0:	f00b f8ec 	bl	800c29c <LL_GPIO_Init>

  /**/
  LL_SYSCFG_EnableFastModePlus(LL_SYSCFG_I2C_FASTMODEPLUS_PB9);
 80010c4:	2380      	movs	r3, #128	; 0x80
 80010c6:	031b      	lsls	r3, r3, #12
 80010c8:	0018      	movs	r0, r3
 80010ca:	f7ff fa23 	bl	8000514 <LL_SYSCFG_EnableFastModePlus>

}
 80010ce:	46c0      	nop			; (mov r8, r8)
 80010d0:	46bd      	mov	sp, r7
 80010d2:	b006      	add	sp, #24
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	46c0      	nop			; (mov r8, r8)
 80010d8:	50000400 	.word	0x50000400
 80010dc:	50000800 	.word	0x50000800

080010e0 <USART2_RX_Callback>:
//	    GPIO_InitStruct.Pin = KEY_5_Pin;
//	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
//	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
//	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
void  USART2_RX_Callback(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  dt1 = LL_USART_ReceiveData9(USART2);// LL implementaion of 1 byte receive
 80010e4:	4b14      	ldr	r3, [pc, #80]	; (8001138 <USART2_RX_Callback+0x58>)
 80010e6:	0018      	movs	r0, r3
 80010e8:	f7ff fa06 	bl	80004f8 <LL_USART_ReceiveData9>
 80010ec:	0003      	movs	r3, r0
 80010ee:	001a      	movs	r2, r3
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <USART2_RX_Callback+0x5c>)
 80010f2:	801a      	strh	r2, [r3, #0]
//	dt1 = (uint16_t)(USART2->RDR & 0x01FF);//CMSIS implementaion of 1 byte receive
  ByteReceived=1;
 80010f4:	4b12      	ldr	r3, [pc, #72]	; (8001140 <USART2_RX_Callback+0x60>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	701a      	strb	r2, [r3, #0]
  if(dt1 & 0x100){
 80010fa:	4b10      	ldr	r3, [pc, #64]	; (800113c <USART2_RX_Callback+0x5c>)
 80010fc:	881b      	ldrh	r3, [r3, #0]
 80010fe:	001a      	movs	r2, r3
 8001100:	2380      	movs	r3, #128	; 0x80
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	4013      	ands	r3, r2
 8001106:	d00a      	beq.n	800111e <USART2_RX_Callback+0x3e>
	  cmd[0]=dt1;
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <USART2_RX_Callback+0x5c>)
 800110a:	881b      	ldrh	r3, [r3, #0]
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4b0d      	ldr	r3, [pc, #52]	; (8001144 <USART2_RX_Callback+0x64>)
 8001110:	701a      	strb	r2, [r3, #0]
	  ind = 0;
 8001112:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <USART2_RX_Callback+0x68>)
 8001114:	2200      	movs	r2, #0
 8001116:	801a      	strh	r2, [r3, #0]
	  firstByteReceived=1;
 8001118:	4b0c      	ldr	r3, [pc, #48]	; (800114c <USART2_RX_Callback+0x6c>)
 800111a:	2201      	movs	r2, #1
 800111c:	701a      	strb	r2, [r3, #0]
//  while (!LL_USART_IsActiveFlag_TXE(USART2)) {}
//  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
  }
//  cmdReceive();
  if(firstByteReceived==1){
 800111e:	4b0b      	ldr	r3, [pc, #44]	; (800114c <USART2_RX_Callback+0x6c>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d104      	bne.n	8001130 <USART2_RX_Callback+0x50>
	  cmdReceive(dt1);
 8001126:	4b05      	ldr	r3, [pc, #20]	; (800113c <USART2_RX_Callback+0x5c>)
 8001128:	881b      	ldrh	r3, [r3, #0]
 800112a:	0018      	movs	r0, r3
 800112c:	f000 f862 	bl	80011f4 <cmdReceive>
  }
}
 8001130:	46c0      	nop			; (mov r8, r8)
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	46c0      	nop			; (mov r8, r8)
 8001138:	40004400 	.word	0x40004400
 800113c:	20000422 	.word	0x20000422
 8001140:	20000420 	.word	0x20000420
 8001144:	200003f0 	.word	0x200003f0
 8001148:	20000424 	.word	0x20000424
 800114c:	20000421 	.word	0x20000421

08001150 <HAL_USART_TxCpltCallback>:
//return;
//	}
}
//==============================================================
void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart3)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	GPIOA->ODR &= ~(1 << 7);	//reset dc
 8001158:	23a0      	movs	r3, #160	; 0xa0
 800115a:	05db      	lsls	r3, r3, #23
 800115c:	695a      	ldr	r2, [r3, #20]
 800115e:	23a0      	movs	r3, #160	; 0xa0
 8001160:	05db      	lsls	r3, r3, #23
 8001162:	2180      	movs	r1, #128	; 0x80
 8001164:	438a      	bics	r2, r1
 8001166:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= 1 << 6;	//set cs
 8001168:	23a0      	movs	r3, #160	; 0xa0
 800116a:	05db      	lsls	r3, r3, #23
 800116c:	695a      	ldr	r2, [r3, #20]
 800116e:	23a0      	movs	r3, #160	; 0xa0
 8001170:	05db      	lsls	r3, r3, #23
 8001172:	2140      	movs	r1, #64	; 0x40
 8001174:	430a      	orrs	r2, r1
 8001176:	615a      	str	r2, [r3, #20]
	cmd2Execute=0;
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <HAL_USART_TxCpltCallback+0x44>)
 800117a:	2200      	movs	r2, #0
 800117c:	701a      	strb	r2, [r3, #0]
//	while(BFEN==0){};
	GPIOC->ODR |= 1 << 6;	//set BF
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <HAL_USART_TxCpltCallback+0x48>)
 8001180:	695a      	ldr	r2, [r3, #20]
 8001182:	4b05      	ldr	r3, [pc, #20]	; (8001198 <HAL_USART_TxCpltCallback+0x48>)
 8001184:	2140      	movs	r1, #64	; 0x40
 8001186:	430a      	orrs	r2, r1
 8001188:	615a      	str	r2, [r3, #20]
}
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	46bd      	mov	sp, r7
 800118e:	b002      	add	sp, #8
 8001190:	bd80      	pop	{r7, pc}
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	20000426 	.word	0x20000426
 8001198:	50000800 	.word	0x50000800

0800119c <HAL_I2S_TxHalfCpltCallback>:
//	GPIOA->ODR |= 1 << 6;	//set cs		????????????????????????????????????????????????
	//	cmd2Execute=0;
//	GPIOC->ODR |= 1 << 6;	//set BF
}
//======================================================================================================================
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s1) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	curBuf += 1;
 80011a4:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <HAL_I2S_TxHalfCpltCallback+0x28>)
 80011a6:	881b      	ldrh	r3, [r3, #0]
 80011a8:	3301      	adds	r3, #1
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <HAL_I2S_TxHalfCpltCallback+0x28>)
 80011ae:	801a      	strh	r2, [r3, #0]
	soundLoad(soundNum);
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <HAL_I2S_TxHalfCpltCallback+0x2c>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	0018      	movs	r0, r3
 80011b6:	f001 fa0d 	bl	80025d4 <soundLoad>
//		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addr[1], 1, 50); //send address
//		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addr[0], 1, 50); //send address
//		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &MEM_Buffer ,len);
//		curAddr+=sizeof(MEM_Buffer);
//    }
}
 80011ba:	46c0      	nop			; (mov r8, r8)
 80011bc:	46bd      	mov	sp, r7
 80011be:	b002      	add	sp, #8
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	20000434 	.word	0x20000434
 80011c8:	200003c6 	.word	0x200003c6

080011cc <HAL_I2S_TxCpltCallback>:
//======================================================================================================================
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s1) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
//	if(numSound==1){
	soundReady=1;
 80011d4:	4b05      	ldr	r3, [pc, #20]	; (80011ec <HAL_I2S_TxCpltCallback+0x20>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	701a      	strb	r2, [r3, #0]
	soundLoad(soundNum);
 80011da:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <HAL_I2S_TxCpltCallback+0x24>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	0018      	movs	r0, r3
 80011e0:	f001 f9f8 	bl	80025d4 <soundLoad>
//		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addr[1], 1, 50); //send address
//		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addr[0], 1, 50); //send address
//		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &MEM_Buffer ,len);
//		curAddr+=sizeof(MEM_Buffer);
//    }
}
 80011e4:	46c0      	nop			; (mov r8, r8)
 80011e6:	46bd      	mov	sp, r7
 80011e8:	b002      	add	sp, #8
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000061 	.word	0x20000061
 80011f0:	200003c6 	.word	0x200003c6

080011f4 <cmdReceive>:
//=======================================================================================================================
	void cmdReceive (uint16_t dt1)
	{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	0002      	movs	r2, r0
 80011fc:	1dbb      	adds	r3, r7, #6
 80011fe:	801a      	strh	r2, [r3, #0]
//	  uint8_t inputCS=0;
	  uint8_t i=0;
 8001200:	230f      	movs	r3, #15
 8001202:	18fb      	adds	r3, r7, r3
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]
	  while (!ByteReceived) {}
 8001208:	46c0      	nop			; (mov r8, r8)
 800120a:	4b39      	ldr	r3, [pc, #228]	; (80012f0 <cmdReceive+0xfc>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0fb      	beq.n	800120a <cmdReceive+0x16>
	  ByteReceived=0;
 8001212:	4b37      	ldr	r3, [pc, #220]	; (80012f0 <cmdReceive+0xfc>)
 8001214:	2200      	movs	r2, #0
 8001216:	701a      	strb	r2, [r3, #0]
	  cmd[ind] = dt1;
 8001218:	4b36      	ldr	r3, [pc, #216]	; (80012f4 <cmdReceive+0x100>)
 800121a:	881b      	ldrh	r3, [r3, #0]
 800121c:	001a      	movs	r2, r3
 800121e:	1dbb      	adds	r3, r7, #6
 8001220:	881b      	ldrh	r3, [r3, #0]
 8001222:	b2d9      	uxtb	r1, r3
 8001224:	4b34      	ldr	r3, [pc, #208]	; (80012f8 <cmdReceive+0x104>)
 8001226:	5499      	strb	r1, [r3, r2]
//	  if(dt1==0x110){
//		  BFEN=0;
//	  }
	  ind++;
 8001228:	4b32      	ldr	r3, [pc, #200]	; (80012f4 <cmdReceive+0x100>)
 800122a:	881b      	ldrh	r3, [r3, #0]
 800122c:	3301      	adds	r3, #1
 800122e:	b29a      	uxth	r2, r3
 8001230:	4b30      	ldr	r3, [pc, #192]	; (80012f4 <cmdReceive+0x100>)
 8001232:	801a      	strh	r2, [r3, #0]
	  if(ind>=1){
 8001234:	4b2f      	ldr	r3, [pc, #188]	; (80012f4 <cmdReceive+0x100>)
 8001236:	881b      	ldrh	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d04f      	beq.n	80012dc <cmdReceive+0xe8>
//		  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
		  if(ind>cmd[1]+1){
 800123c:	4b2d      	ldr	r3, [pc, #180]	; (80012f4 <cmdReceive+0x100>)
 800123e:	881b      	ldrh	r3, [r3, #0]
 8001240:	001a      	movs	r2, r3
 8001242:	4b2d      	ldr	r3, [pc, #180]	; (80012f8 <cmdReceive+0x104>)
 8001244:	785b      	ldrb	r3, [r3, #1]
 8001246:	3301      	adds	r3, #1
 8001248:	429a      	cmp	r2, r3
 800124a:	dd47      	ble.n	80012dc <cmdReceive+0xe8>
//			  LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 for(i=0;i<(cmd[1]+2);i++){
 800124c:	230f      	movs	r3, #15
 800124e:	18fb      	adds	r3, r7, r3
 8001250:	2200      	movs	r2, #0
 8001252:	701a      	strb	r2, [r3, #0]
 8001254:	e00f      	b.n	8001276 <cmdReceive+0x82>
				 inputCS+=cmd[i];
 8001256:	210f      	movs	r1, #15
 8001258:	187b      	adds	r3, r7, r1
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	4a26      	ldr	r2, [pc, #152]	; (80012f8 <cmdReceive+0x104>)
 800125e:	5cd2      	ldrb	r2, [r2, r3]
 8001260:	4b26      	ldr	r3, [pc, #152]	; (80012fc <cmdReceive+0x108>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	18d3      	adds	r3, r2, r3
 8001266:	b2da      	uxtb	r2, r3
 8001268:	4b24      	ldr	r3, [pc, #144]	; (80012fc <cmdReceive+0x108>)
 800126a:	701a      	strb	r2, [r3, #0]
			 for(i=0;i<(cmd[1]+2);i++){
 800126c:	187b      	adds	r3, r7, r1
 800126e:	781a      	ldrb	r2, [r3, #0]
 8001270:	187b      	adds	r3, r7, r1
 8001272:	3201      	adds	r2, #1
 8001274:	701a      	strb	r2, [r3, #0]
 8001276:	4b20      	ldr	r3, [pc, #128]	; (80012f8 <cmdReceive+0x104>)
 8001278:	785b      	ldrb	r3, [r3, #1]
 800127a:	1c5a      	adds	r2, r3, #1
 800127c:	210f      	movs	r1, #15
 800127e:	187b      	adds	r3, r7, r1
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	429a      	cmp	r2, r3
 8001284:	dae7      	bge.n	8001256 <cmdReceive+0x62>
			 }
			 if(!(inputCS==0x00)&&(ind==cmd[1]+2)){
 8001286:	4b1d      	ldr	r3, [pc, #116]	; (80012fc <cmdReceive+0x108>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d022      	beq.n	80012d4 <cmdReceive+0xe0>
 800128e:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <cmdReceive+0x100>)
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	001a      	movs	r2, r3
 8001294:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <cmdReceive+0x104>)
 8001296:	785b      	ldrb	r3, [r3, #1]
 8001298:	3302      	adds	r3, #2
 800129a:	429a      	cmp	r2, r3
 800129c:	d11a      	bne.n	80012d4 <cmdReceive+0xe0>
//			 	LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
//				 firstByteReceived=0;
				 firstByteReceived=0;
 800129e:	4b18      	ldr	r3, [pc, #96]	; (8001300 <cmdReceive+0x10c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	701a      	strb	r2, [r3, #0]
				 				 for (i=0;i<cmd[1]+2;i++){
 80012a4:	187b      	adds	r3, r7, r1
 80012a6:	2200      	movs	r2, #0
 80012a8:	701a      	strb	r2, [r3, #0]
 80012aa:	e00a      	b.n	80012c2 <cmdReceive+0xce>
				 					 cmd[i]=0;
 80012ac:	200f      	movs	r0, #15
 80012ae:	183b      	adds	r3, r7, r0
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	4a11      	ldr	r2, [pc, #68]	; (80012f8 <cmdReceive+0x104>)
 80012b4:	2100      	movs	r1, #0
 80012b6:	54d1      	strb	r1, [r2, r3]
				 				 for (i=0;i<cmd[1]+2;i++){
 80012b8:	183b      	adds	r3, r7, r0
 80012ba:	781a      	ldrb	r2, [r3, #0]
 80012bc:	183b      	adds	r3, r7, r0
 80012be:	3201      	adds	r2, #1
 80012c0:	701a      	strb	r2, [r3, #0]
 80012c2:	4b0d      	ldr	r3, [pc, #52]	; (80012f8 <cmdReceive+0x104>)
 80012c4:	785b      	ldrb	r3, [r3, #1]
 80012c6:	1c5a      	adds	r2, r3, #1
 80012c8:	230f      	movs	r3, #15
 80012ca:	18fb      	adds	r3, r7, r3
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	daec      	bge.n	80012ac <cmdReceive+0xb8>
			 if(!(inputCS==0x00)&&(ind==cmd[1]+2)){
 80012d2:	e003      	b.n	80012dc <cmdReceive+0xe8>
				 				 }
			 }
			 else{
				 answer2CPU(cmd);
 80012d4:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <cmdReceive+0x104>)
 80012d6:	0018      	movs	r0, r3
 80012d8:	f000 faa8 	bl	800182c <answer2CPU>
//				 GPIOC->ODR |= 1 << 6;	//set BF
//			 }
		  }
	  }
//	  ind = 0;
	  USART2->ICR|=USART_ICR_ORECF;
 80012dc:	4b09      	ldr	r3, [pc, #36]	; (8001304 <cmdReceive+0x110>)
 80012de:	6a1a      	ldr	r2, [r3, #32]
 80012e0:	4b08      	ldr	r3, [pc, #32]	; (8001304 <cmdReceive+0x110>)
 80012e2:	2108      	movs	r1, #8
 80012e4:	430a      	orrs	r2, r1
 80012e6:	621a      	str	r2, [r3, #32]
	}
 80012e8:	46c0      	nop			; (mov r8, r8)
 80012ea:	46bd      	mov	sp, r7
 80012ec:	b004      	add	sp, #16
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000420 	.word	0x20000420
 80012f4:	20000424 	.word	0x20000424
 80012f8:	200003f0 	.word	0x200003f0
 80012fc:	20000428 	.word	0x20000428
 8001300:	20000421 	.word	0x20000421
 8001304:	40004400 	.word	0x40004400

08001308 <USART_AS_SPI_sendCMD>:
	void USART_AS_SPI_sendCMD(uint8_t byte) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	0002      	movs	r2, r0
 8001310:	1dfb      	adds	r3, r7, #7
 8001312:	701a      	strb	r2, [r3, #0]
			HAL_USART_Transmit(&husart3, (uint8_t*)&byte, 1, 10);
 8001314:	1df9      	adds	r1, r7, #7
 8001316:	4804      	ldr	r0, [pc, #16]	; (8001328 <USART_AS_SPI_sendCMD+0x20>)
 8001318:	230a      	movs	r3, #10
 800131a:	2201      	movs	r2, #1
 800131c:	f00a f918 	bl	800b550 <HAL_USART_Transmit>
		}
 8001320:	46c0      	nop			; (mov r8, r8)
 8001322:	46bd      	mov	sp, r7
 8001324:	b002      	add	sp, #8
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20000308 	.word	0x20000308

0800132c <weoInit>:
	void USART_AS_SPI_sendDAT(uint8_t byte) //(Without CS and D/C)
	{
		HAL_USART_Transmit(&husart3, (uint8_t*) &byte, 1, 10);
	}
	void weoInit(void) {
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0

		USART3->CR1 &= ~(USART_CR1_UE);
 8001330:	4b32      	ldr	r3, [pc, #200]	; (80013fc <weoInit+0xd0>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	4b31      	ldr	r3, [pc, #196]	; (80013fc <weoInit+0xd0>)
 8001336:	2101      	movs	r1, #1
 8001338:	438a      	bics	r2, r1
 800133a:	601a      	str	r2, [r3, #0]
		USART3->CR2 |= USART_CR2_MSBFIRST;
 800133c:	4b2f      	ldr	r3, [pc, #188]	; (80013fc <weoInit+0xd0>)
 800133e:	685a      	ldr	r2, [r3, #4]
 8001340:	4b2e      	ldr	r3, [pc, #184]	; (80013fc <weoInit+0xd0>)
 8001342:	2180      	movs	r1, #128	; 0x80
 8001344:	0309      	lsls	r1, r1, #12
 8001346:	430a      	orrs	r2, r1
 8001348:	605a      	str	r2, [r3, #4]
		USART3->CR1 |= USART_CR1_UE;
 800134a:	4b2c      	ldr	r3, [pc, #176]	; (80013fc <weoInit+0xd0>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	4b2b      	ldr	r3, [pc, #172]	; (80013fc <weoInit+0xd0>)
 8001350:	2101      	movs	r1, #1
 8001352:	430a      	orrs	r2, r1
 8001354:	601a      	str	r2, [r3, #0]

		HAL_Delay(1);
 8001356:	2001      	movs	r0, #1
 8001358:	f004 f892 	bl	8005480 <HAL_Delay>
		HAL_Delay(1);
 800135c:	2001      	movs	r0, #1
 800135e:	f004 f88f 	bl	8005480 <HAL_Delay>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001362:	4b27      	ldr	r3, [pc, #156]	; (8001400 <weoInit+0xd4>)
 8001364:	2100      	movs	r1, #0
 8001366:	0018      	movs	r0, r3
 8001368:	f009 f81e 	bl	800a3a8 <HAL_TIM_PWM_Start>
		HAL_Delay(1);
 800136c:	2001      	movs	r0, #1
 800136e:	f004 f887 	bl	8005480 <HAL_Delay>

		GPIOA->ODR &= ~(1 << 6);	//reset cs
 8001372:	23a0      	movs	r3, #160	; 0xa0
 8001374:	05db      	lsls	r3, r3, #23
 8001376:	695a      	ldr	r2, [r3, #20]
 8001378:	23a0      	movs	r3, #160	; 0xa0
 800137a:	05db      	lsls	r3, r3, #23
 800137c:	2140      	movs	r1, #64	; 0x40
 800137e:	438a      	bics	r2, r1
 8001380:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1 << 7);	// reset dc
 8001382:	23a0      	movs	r3, #160	; 0xa0
 8001384:	05db      	lsls	r3, r3, #23
 8001386:	695a      	ldr	r2, [r3, #20]
 8001388:	23a0      	movs	r3, #160	; 0xa0
 800138a:	05db      	lsls	r3, r3, #23
 800138c:	2180      	movs	r1, #128	; 0x80
 800138e:	438a      	bics	r2, r1
 8001390:	615a      	str	r2, [r3, #20]
		USART_AS_SPI_sendCMD(0xAF);
 8001392:	20af      	movs	r0, #175	; 0xaf
 8001394:	f7ff ffb8 	bl	8001308 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA0);	//Set Re-map
 8001398:	20a0      	movs	r0, #160	; 0xa0
 800139a:	f7ff ffb5 	bl	8001308 <USART_AS_SPI_sendCMD>
//		USART_AS_SPI_sendCMD(0x54);
//		USART_AS_SPI_sendCMD(0x51);
		USART_AS_SPI_sendCMD(0b01010010);// 0b01010010 = 0x52 is a proper remap 4 my bmp_2_bin converter, but pictures must b turned right @ 90 degrees. 0b01000001 = 0x is good if turn display on 180 degrees.
 800139e:	2052      	movs	r0, #82	; 0x52
 80013a0:	f7ff ffb2 	bl	8001308 <USART_AS_SPI_sendCMD>
//		USART_AS_SPI_sendCMD(0x41); //	0x51 is a proper remap 4 lcd image converter // 0b01010010 is a proper remap 4 left-turned images
		USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 80013a4:	2081      	movs	r0, #129	; 0x81
 80013a6:	f7ff ffaf 	bl	8001308 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xFF);
 80013aa:	20ff      	movs	r0, #255	; 0xff
 80013ac:	f7ff ffac 	bl	8001308 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA1);	//Set Display Start Line
 80013b0:	20a1      	movs	r0, #161	; 0xa1
 80013b2:	f7ff ffa9 	bl	8001308 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 80013b6:	2000      	movs	r0, #0
 80013b8:	f7ff ffa6 	bl	8001308 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA2);	//Set Display Offset
 80013bc:	20a2      	movs	r0, #162	; 0xa2
 80013be:	f7ff ffa3 	bl	8001308 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 80013c2:	2000      	movs	r0, #0
 80013c4:	f7ff ffa0 	bl	8001308 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA8);  // Select Multiplex Ratio
 80013c8:	20a8      	movs	r0, #168	; 0xa8
 80013ca:	f7ff ff9d 	bl	8001308 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x7F); // Default => 0x3F (1/64 Duty)	0x1F(1/32 Duty)
 80013ce:	207f      	movs	r0, #127	; 0x7f
 80013d0:	f7ff ff9a 	bl	8001308 <USART_AS_SPI_sendCMD>
		GPIOA->ODR |= 1 << 7;	//set dc
 80013d4:	23a0      	movs	r3, #160	; 0xa0
 80013d6:	05db      	lsls	r3, r3, #23
 80013d8:	695a      	ldr	r2, [r3, #20]
 80013da:	23a0      	movs	r3, #160	; 0xa0
 80013dc:	05db      	lsls	r3, r3, #23
 80013de:	2180      	movs	r1, #128	; 0x80
 80013e0:	430a      	orrs	r2, r1
 80013e2:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= 1 << 6;	//set cs
 80013e4:	23a0      	movs	r3, #160	; 0xa0
 80013e6:	05db      	lsls	r3, r3, #23
 80013e8:	695a      	ldr	r2, [r3, #20]
 80013ea:	23a0      	movs	r3, #160	; 0xa0
 80013ec:	05db      	lsls	r3, r3, #23
 80013ee:	2140      	movs	r1, #64	; 0x40
 80013f0:	430a      	orrs	r2, r1
 80013f2:	615a      	str	r2, [r3, #20]
		//=======================================================================================================
	}
 80013f4:	46c0      	nop			; (mov r8, r8)
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	46c0      	nop			; (mov r8, r8)
 80013fc:	40004800 	.word	0x40004800
 8001400:	200002bc 	.word	0x200002bc

08001404 <weoClear>:
	void weoClear(void) {
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
		uint16_t i;

					GPIOA->ODR &= ~(1 << 6);	//reset cs
 800140a:	23a0      	movs	r3, #160	; 0xa0
 800140c:	05db      	lsls	r3, r3, #23
 800140e:	695a      	ldr	r2, [r3, #20]
 8001410:	23a0      	movs	r3, #160	; 0xa0
 8001412:	05db      	lsls	r3, r3, #23
 8001414:	2140      	movs	r1, #64	; 0x40
 8001416:	438a      	bics	r2, r1
 8001418:	615a      	str	r2, [r3, #20]
					GPIOA->ODR &= ~(1 << 7);	// reset dc
 800141a:	23a0      	movs	r3, #160	; 0xa0
 800141c:	05db      	lsls	r3, r3, #23
 800141e:	695a      	ldr	r2, [r3, #20]
 8001420:	23a0      	movs	r3, #160	; 0xa0
 8001422:	05db      	lsls	r3, r3, #23
 8001424:	2180      	movs	r1, #128	; 0x80
 8001426:	438a      	bics	r2, r1
 8001428:	615a      	str	r2, [r3, #20]
						USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 800142a:	2075      	movs	r0, #117	; 0x75
 800142c:	f7ff ff6c 	bl	8001308 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 8001430:	2000      	movs	r0, #0
 8001432:	f7ff ff69 	bl	8001308 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 8001436:	207f      	movs	r0, #127	; 0x7f
 8001438:	f7ff ff66 	bl	8001308 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 800143c:	2015      	movs	r0, #21
 800143e:	f7ff ff63 	bl	8001308 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 8001442:	2000      	movs	r0, #0
 8001444:	f7ff ff60 	bl	8001308 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 8001448:	207f      	movs	r0, #127	; 0x7f
 800144a:	f7ff ff5d 	bl	8001308 <USART_AS_SPI_sendCMD>
					GPIOA->ODR &= ~(1 << 6);	//reset cs
 800144e:	23a0      	movs	r3, #160	; 0xa0
 8001450:	05db      	lsls	r3, r3, #23
 8001452:	695a      	ldr	r2, [r3, #20]
 8001454:	23a0      	movs	r3, #160	; 0xa0
 8001456:	05db      	lsls	r3, r3, #23
 8001458:	2140      	movs	r1, #64	; 0x40
 800145a:	438a      	bics	r2, r1
 800145c:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 7;	// set dc
 800145e:	23a0      	movs	r3, #160	; 0xa0
 8001460:	05db      	lsls	r3, r3, #23
 8001462:	695a      	ldr	r2, [r3, #20]
 8001464:	23a0      	movs	r3, #160	; 0xa0
 8001466:	05db      	lsls	r3, r3, #23
 8001468:	2180      	movs	r1, #128	; 0x80
 800146a:	430a      	orrs	r2, r1
 800146c:	615a      	str	r2, [r3, #20]
					for (i = 0; i <= 8193;i++) {	//fullScreen + small reserve
 800146e:	1dbb      	adds	r3, r7, #6
 8001470:	2200      	movs	r2, #0
 8001472:	801a      	strh	r2, [r3, #0]
 8001474:	e00d      	b.n	8001492 <weoClear+0x8e>
						while(!(USART3->ISR & USART_ISR_TXE)){};
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <weoClear+0xc0>)
 800147a:	69db      	ldr	r3, [r3, #28]
 800147c:	2280      	movs	r2, #128	; 0x80
 800147e:	4013      	ands	r3, r2
 8001480:	d0fa      	beq.n	8001478 <weoClear+0x74>
						USART3->TDR = (uint8_t) 0x00;
 8001482:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <weoClear+0xc0>)
 8001484:	2200      	movs	r2, #0
 8001486:	629a      	str	r2, [r3, #40]	; 0x28
					for (i = 0; i <= 8193;i++) {	//fullScreen + small reserve
 8001488:	1dbb      	adds	r3, r7, #6
 800148a:	881a      	ldrh	r2, [r3, #0]
 800148c:	1dbb      	adds	r3, r7, #6
 800148e:	3201      	adds	r2, #1
 8001490:	801a      	strh	r2, [r3, #0]
 8001492:	1dbb      	adds	r3, r7, #6
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	4a0c      	ldr	r2, [pc, #48]	; (80014c8 <weoClear+0xc4>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d9ec      	bls.n	8001476 <weoClear+0x72>
					}
					GPIOA->ODR &= ~(1 << 7);	//reset dc
 800149c:	23a0      	movs	r3, #160	; 0xa0
 800149e:	05db      	lsls	r3, r3, #23
 80014a0:	695a      	ldr	r2, [r3, #20]
 80014a2:	23a0      	movs	r3, #160	; 0xa0
 80014a4:	05db      	lsls	r3, r3, #23
 80014a6:	2180      	movs	r1, #128	; 0x80
 80014a8:	438a      	bics	r2, r1
 80014aa:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 6;	//set cs
 80014ac:	23a0      	movs	r3, #160	; 0xa0
 80014ae:	05db      	lsls	r3, r3, #23
 80014b0:	695a      	ldr	r2, [r3, #20]
 80014b2:	23a0      	movs	r3, #160	; 0xa0
 80014b4:	05db      	lsls	r3, r3, #23
 80014b6:	2140      	movs	r1, #64	; 0x40
 80014b8:	430a      	orrs	r2, r1
 80014ba:	615a      	str	r2, [r3, #20]
	}
 80014bc:	46c0      	nop			; (mov r8, r8)
 80014be:	46bd      	mov	sp, r7
 80014c0:	b002      	add	sp, #8
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40004800 	.word	0x40004800
 80014c8:	00002001 	.word	0x00002001

080014cc <weoDrawRectangleFilled>:
//========================================================================================================================
	void weoDrawRectangleFilled(unsigned char start_x, unsigned char start_y,
				unsigned char end_x, unsigned char end_y, unsigned char contrast,
				uint8_t MEM_Buffer[]) {
 80014cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	0005      	movs	r5, r0
 80014d4:	000c      	movs	r4, r1
 80014d6:	0010      	movs	r0, r2
 80014d8:	0019      	movs	r1, r3
 80014da:	1dfb      	adds	r3, r7, #7
 80014dc:	1c2a      	adds	r2, r5, #0
 80014de:	701a      	strb	r2, [r3, #0]
 80014e0:	1dbb      	adds	r3, r7, #6
 80014e2:	1c22      	adds	r2, r4, #0
 80014e4:	701a      	strb	r2, [r3, #0]
 80014e6:	1d7b      	adds	r3, r7, #5
 80014e8:	1c02      	adds	r2, r0, #0
 80014ea:	701a      	strb	r2, [r3, #0]
 80014ec:	1d3b      	adds	r3, r7, #4
 80014ee:	1c0a      	adds	r2, r1, #0
 80014f0:	701a      	strb	r2, [r3, #0]
			uint16_t i = 0;
 80014f2:	240e      	movs	r4, #14
 80014f4:	193b      	adds	r3, r7, r4
 80014f6:	2200      	movs	r2, #0
 80014f8:	801a      	strh	r2, [r3, #0]
			uint8_t start_x_New,start_y_New,end_x_New,end_y_New;
			if (start_x > OLED_DIM_WIDTH || start_y > OLED_DIM_HEIGHT
 80014fa:	1dfb      	adds	r3, r7, #7
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	b25b      	sxtb	r3, r3
 8001500:	2b00      	cmp	r3, #0
 8001502:	da00      	bge.n	8001506 <weoDrawRectangleFilled+0x3a>
 8001504:	e0c1      	b.n	800168a <weoDrawRectangleFilled+0x1be>
 8001506:	1dbb      	adds	r3, r7, #6
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	b25b      	sxtb	r3, r3
 800150c:	2b00      	cmp	r3, #0
 800150e:	da00      	bge.n	8001512 <weoDrawRectangleFilled+0x46>
 8001510:	e0bb      	b.n	800168a <weoDrawRectangleFilled+0x1be>
					|| end_x > OLED_DIM_WIDTH || end_y > OLED_DIM_HEIGHT) {
 8001512:	1d7b      	adds	r3, r7, #5
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	b25b      	sxtb	r3, r3
 8001518:	2b00      	cmp	r3, #0
 800151a:	da00      	bge.n	800151e <weoDrawRectangleFilled+0x52>
 800151c:	e0b5      	b.n	800168a <weoDrawRectangleFilled+0x1be>
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	b25b      	sxtb	r3, r3
 8001524:	2b00      	cmp	r3, #0
 8001526:	da00      	bge.n	800152a <weoDrawRectangleFilled+0x5e>
 8001528:	e0af      	b.n	800168a <weoDrawRectangleFilled+0x1be>
				return;
			}

			start_x_New=start_x;
 800152a:	250d      	movs	r5, #13
 800152c:	197b      	adds	r3, r7, r5
 800152e:	1dfa      	adds	r2, r7, #7
 8001530:	7812      	ldrb	r2, [r2, #0]
 8001532:	701a      	strb	r2, [r3, #0]
			start_y_New=start_y;
 8001534:	260c      	movs	r6, #12
 8001536:	19bb      	adds	r3, r7, r6
 8001538:	1dba      	adds	r2, r7, #6
 800153a:	7812      	ldrb	r2, [r2, #0]
 800153c:	701a      	strb	r2, [r3, #0]
			end_x_New=end_x;
 800153e:	230b      	movs	r3, #11
 8001540:	18fb      	adds	r3, r7, r3
 8001542:	1d7a      	adds	r2, r7, #5
 8001544:	7812      	ldrb	r2, [r2, #0]
 8001546:	701a      	strb	r2, [r3, #0]
			end_y_New=end_y;
 8001548:	220a      	movs	r2, #10
 800154a:	18bb      	adds	r3, r7, r2
 800154c:	1d3a      	adds	r2, r7, #4
 800154e:	7812      	ldrb	r2, [r2, #0]
 8001550:	701a      	strb	r2, [r3, #0]

			GPIOA->ODR &= ~(1 << 6);	//reset cs
 8001552:	23a0      	movs	r3, #160	; 0xa0
 8001554:	05db      	lsls	r3, r3, #23
 8001556:	695a      	ldr	r2, [r3, #20]
 8001558:	23a0      	movs	r3, #160	; 0xa0
 800155a:	05db      	lsls	r3, r3, #23
 800155c:	2140      	movs	r1, #64	; 0x40
 800155e:	438a      	bics	r2, r1
 8001560:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 8001562:	23a0      	movs	r3, #160	; 0xa0
 8001564:	05db      	lsls	r3, r3, #23
 8001566:	695a      	ldr	r2, [r3, #20]
 8001568:	23a0      	movs	r3, #160	; 0xa0
 800156a:	05db      	lsls	r3, r3, #23
 800156c:	2180      	movs	r1, #128	; 0x80
 800156e:	438a      	bics	r2, r1
 8001570:	615a      	str	r2, [r3, #20]
					USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 8001572:	2075      	movs	r0, #117	; 0x75
 8001574:	f7ff fec8 	bl	8001308 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_x_New/1);
 8001578:	197b      	adds	r3, r7, r5
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	0018      	movs	r0, r3
 800157e:	f7ff fec3 	bl	8001308 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_x_New/1);
 8001582:	230b      	movs	r3, #11
 8001584:	18fb      	adds	r3, r7, r3
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	0018      	movs	r0, r3
 800158a:	f7ff febd 	bl	8001308 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 800158e:	2015      	movs	r0, #21
 8001590:	f7ff feba 	bl	8001308 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_y_New/2);
 8001594:	19bb      	adds	r3, r7, r6
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	085b      	lsrs	r3, r3, #1
 800159a:	b2db      	uxtb	r3, r3
 800159c:	0018      	movs	r0, r3
 800159e:	f7ff feb3 	bl	8001308 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_y_New/2);
 80015a2:	220a      	movs	r2, #10
 80015a4:	18bb      	adds	r3, r7, r2
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	085b      	lsrs	r3, r3, #1
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	0018      	movs	r0, r3
 80015ae:	f7ff feab 	bl	8001308 <USART_AS_SPI_sendCMD>
//					USART_AS_SPI_sendCMD(0x81);	//Contrast Level
//					USART_AS_SPI_sendCMD(contrast);
			GPIOA->ODR |= 1 << 7;	//set dc
 80015b2:	23a0      	movs	r3, #160	; 0xa0
 80015b4:	05db      	lsls	r3, r3, #23
 80015b6:	695a      	ldr	r2, [r3, #20]
 80015b8:	23a0      	movs	r3, #160	; 0xa0
 80015ba:	05db      	lsls	r3, r3, #23
 80015bc:	2180      	movs	r1, #128	; 0x80
 80015be:	430a      	orrs	r2, r1
 80015c0:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 80015c2:	23a0      	movs	r3, #160	; 0xa0
 80015c4:	05db      	lsls	r3, r3, #23
 80015c6:	695a      	ldr	r2, [r3, #20]
 80015c8:	23a0      	movs	r3, #160	; 0xa0
 80015ca:	05db      	lsls	r3, r3, #23
 80015cc:	2140      	movs	r1, #64	; 0x40
 80015ce:	430a      	orrs	r2, r1
 80015d0:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 6);	//reset cs
 80015d2:	23a0      	movs	r3, #160	; 0xa0
 80015d4:	05db      	lsls	r3, r3, #23
 80015d6:	695a      	ldr	r2, [r3, #20]
 80015d8:	23a0      	movs	r3, #160	; 0xa0
 80015da:	05db      	lsls	r3, r3, #23
 80015dc:	2140      	movs	r1, #64	; 0x40
 80015de:	438a      	bics	r2, r1
 80015e0:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 7;	// set dc
 80015e2:	23a0      	movs	r3, #160	; 0xa0
 80015e4:	05db      	lsls	r3, r3, #23
 80015e6:	695a      	ldr	r2, [r3, #20]
 80015e8:	23a0      	movs	r3, #160	; 0xa0
 80015ea:	05db      	lsls	r3, r3, #23
 80015ec:	2180      	movs	r1, #128	; 0x80
 80015ee:	430a      	orrs	r2, r1
 80015f0:	615a      	str	r2, [r3, #20]

			for (i = 0; i < ((end_x_New - start_x_New + 1) * (end_y_New/2 - start_y_New /2 + 1));i++) {
 80015f2:	193b      	adds	r3, r7, r4
 80015f4:	2200      	movs	r2, #0
 80015f6:	801a      	strh	r2, [r3, #0]
 80015f8:	e012      	b.n	8001620 <weoDrawRectangleFilled+0x154>
//			for (i = 0; i < len;i++) {
//				if (i%((end_y-start_y))==0){
//					MEM_Buffer[i] &=0xF0 ;
//				}
				while(!(USART3->ISR & USART_ISR_TXE)){};
 80015fa:	46c0      	nop			; (mov r8, r8)
 80015fc:	4b25      	ldr	r3, [pc, #148]	; (8001694 <weoDrawRectangleFilled+0x1c8>)
 80015fe:	69db      	ldr	r3, [r3, #28]
 8001600:	2280      	movs	r2, #128	; 0x80
 8001602:	4013      	ands	r3, r2
 8001604:	d0fa      	beq.n	80015fc <weoDrawRectangleFilled+0x130>
				USART3->TDR =MEM_Buffer[i];
 8001606:	210e      	movs	r1, #14
 8001608:	187b      	adds	r3, r7, r1
 800160a:	881b      	ldrh	r3, [r3, #0]
 800160c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800160e:	18d3      	adds	r3, r2, r3
 8001610:	781a      	ldrb	r2, [r3, #0]
 8001612:	4b20      	ldr	r3, [pc, #128]	; (8001694 <weoDrawRectangleFilled+0x1c8>)
 8001614:	629a      	str	r2, [r3, #40]	; 0x28
			for (i = 0; i < ((end_x_New - start_x_New + 1) * (end_y_New/2 - start_y_New /2 + 1));i++) {
 8001616:	187b      	adds	r3, r7, r1
 8001618:	881a      	ldrh	r2, [r3, #0]
 800161a:	187b      	adds	r3, r7, r1
 800161c:	3201      	adds	r2, #1
 800161e:	801a      	strh	r2, [r3, #0]
 8001620:	230e      	movs	r3, #14
 8001622:	18fb      	adds	r3, r7, r3
 8001624:	881a      	ldrh	r2, [r3, #0]
 8001626:	230b      	movs	r3, #11
 8001628:	18fb      	adds	r3, r7, r3
 800162a:	7819      	ldrb	r1, [r3, #0]
 800162c:	230d      	movs	r3, #13
 800162e:	18fb      	adds	r3, r7, r3
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	1acb      	subs	r3, r1, r3
 8001634:	3301      	adds	r3, #1
 8001636:	210a      	movs	r1, #10
 8001638:	1879      	adds	r1, r7, r1
 800163a:	7809      	ldrb	r1, [r1, #0]
 800163c:	0849      	lsrs	r1, r1, #1
 800163e:	b2c9      	uxtb	r1, r1
 8001640:	0008      	movs	r0, r1
 8001642:	210c      	movs	r1, #12
 8001644:	1879      	adds	r1, r7, r1
 8001646:	7809      	ldrb	r1, [r1, #0]
 8001648:	0849      	lsrs	r1, r1, #1
 800164a:	b2c9      	uxtb	r1, r1
 800164c:	1a41      	subs	r1, r0, r1
 800164e:	3101      	adds	r1, #1
 8001650:	434b      	muls	r3, r1
 8001652:	429a      	cmp	r2, r3
 8001654:	dbd1      	blt.n	80015fa <weoDrawRectangleFilled+0x12e>
			}
			while(!(USART3->ISR & USART_ISR_TXE)){};
 8001656:	46c0      	nop			; (mov r8, r8)
 8001658:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <weoDrawRectangleFilled+0x1c8>)
 800165a:	69db      	ldr	r3, [r3, #28]
 800165c:	2280      	movs	r2, #128	; 0x80
 800165e:	4013      	ands	r3, r2
 8001660:	d0fa      	beq.n	8001658 <weoDrawRectangleFilled+0x18c>
			HAL_Delay(1);
 8001662:	2001      	movs	r0, #1
 8001664:	f003 ff0c 	bl	8005480 <HAL_Delay>
//			GPIOA->ODR &= ~(1 << 7);	// reset dc
//			USART_AS_SPI_sendCMD(0xBB);	// command for NOP
//			USART_AS_SPI_sendCMD(0x81);	//Contrast Level
//			USART_AS_SPI_sendCMD(0xFF);

			GPIOA->ODR &= ~(1 << 7);	//reset dc
 8001668:	23a0      	movs	r3, #160	; 0xa0
 800166a:	05db      	lsls	r3, r3, #23
 800166c:	695a      	ldr	r2, [r3, #20]
 800166e:	23a0      	movs	r3, #160	; 0xa0
 8001670:	05db      	lsls	r3, r3, #23
 8001672:	2180      	movs	r1, #128	; 0x80
 8001674:	438a      	bics	r2, r1
 8001676:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 8001678:	23a0      	movs	r3, #160	; 0xa0
 800167a:	05db      	lsls	r3, r3, #23
 800167c:	695a      	ldr	r2, [r3, #20]
 800167e:	23a0      	movs	r3, #160	; 0xa0
 8001680:	05db      	lsls	r3, r3, #23
 8001682:	2140      	movs	r1, #64	; 0x40
 8001684:	430a      	orrs	r2, r1
 8001686:	615a      	str	r2, [r3, #20]
 8001688:	e000      	b.n	800168c <weoDrawRectangleFilled+0x1c0>
				return;
 800168a:	46c0      	nop			; (mov r8, r8)
		}
 800168c:	46bd      	mov	sp, r7
 800168e:	b005      	add	sp, #20
 8001690:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001692:	46c0      	nop			; (mov r8, r8)
 8001694:	40004800 	.word	0x40004800

08001698 <I2C_SOUND_ChangePage>:
//		LL_GPIO_ResetOutputPin(GPIOC, DISP_RES_Pin);
		HAL_Delay(1);
//		LL_GPIO_SetOutputPin(GPIOC, DISP_RES_Pin);
		HAL_Delay(1);
	}
	void I2C_SOUND_ChangePage(uint8_t pageNum) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af02      	add	r7, sp, #8
 800169e:	0002      	movs	r2, r0
 80016a0:	1dfb      	adds	r3, r7, #7
 80016a2:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { 0x00, pageNum };
 80016a4:	210c      	movs	r1, #12
 80016a6:	187b      	adds	r3, r7, r1
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]
 80016ac:	187b      	adds	r3, r7, r1
 80016ae:	1dfa      	adds	r2, r7, #7
 80016b0:	7812      	ldrb	r2, [r2, #0]
 80016b2:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x30, buf, 2, 1000);
 80016b4:	187a      	adds	r2, r7, r1
 80016b6:	4806      	ldr	r0, [pc, #24]	; (80016d0 <I2C_SOUND_ChangePage+0x38>)
 80016b8:	23fa      	movs	r3, #250	; 0xfa
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	2302      	movs	r3, #2
 80016c0:	2130      	movs	r1, #48	; 0x30
 80016c2:	f004 ff17 	bl	80064f4 <HAL_I2C_Master_Transmit>
	}
 80016c6:	46c0      	nop			; (mov r8, r8)
 80016c8:	46bd      	mov	sp, r7
 80016ca:	b004      	add	sp, #16
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	200000bc 	.word	0x200000bc

080016d4 <WriteReg_I2C_SOUND>:
	void WriteReg_I2C_SOUND(uint8_t reg, uint8_t data) {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af02      	add	r7, sp, #8
 80016da:	0002      	movs	r2, r0
 80016dc:	1dfb      	adds	r3, r7, #7
 80016de:	701a      	strb	r2, [r3, #0]
 80016e0:	1dbb      	adds	r3, r7, #6
 80016e2:	1c0a      	adds	r2, r1, #0
 80016e4:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { reg, data };
 80016e6:	210c      	movs	r1, #12
 80016e8:	187b      	adds	r3, r7, r1
 80016ea:	1dfa      	adds	r2, r7, #7
 80016ec:	7812      	ldrb	r2, [r2, #0]
 80016ee:	701a      	strb	r2, [r3, #0]
 80016f0:	187b      	adds	r3, r7, r1
 80016f2:	1dba      	adds	r2, r7, #6
 80016f4:	7812      	ldrb	r2, [r2, #0]
 80016f6:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x30, buf, 2, 1000);	//(uint8_t*)&
 80016f8:	187a      	adds	r2, r7, r1
 80016fa:	4806      	ldr	r0, [pc, #24]	; (8001714 <WriteReg_I2C_SOUND+0x40>)
 80016fc:	23fa      	movs	r3, #250	; 0xfa
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	2302      	movs	r3, #2
 8001704:	2130      	movs	r1, #48	; 0x30
 8001706:	f004 fef5 	bl	80064f4 <HAL_I2C_Master_Transmit>
	}
 800170a:	46c0      	nop			; (mov r8, r8)
 800170c:	46bd      	mov	sp, r7
 800170e:	b004      	add	sp, #16
 8001710:	bd80      	pop	{r7, pc}
 8001712:	46c0      	nop			; (mov r8, r8)
 8001714:	200000bc 	.word	0x200000bc

08001718 <soundSetup>:
	void soundSetup(void) {
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
		I2C_SOUND_ChangePage(0x00);
 800171c:	2000      	movs	r0, #0
 800171e:	f7ff ffbb 	bl	8001698 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x01);	//Assert Software reset (P0, R1, D0=1)
 8001722:	2101      	movs	r1, #1
 8001724:	2001      	movs	r0, #1
 8001726:	f7ff ffd5 	bl	80016d4 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x01);
 800172a:	2001      	movs	r0, #1
 800172c:	f7ff ffb4 	bl	8001698 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x02, 0x00);	//LDO output programmed as 1.8V and Level shifters powered up. (P1, R2, D5-D4=00, D3=0)
 8001730:	2100      	movs	r1, #0
 8001732:	2002      	movs	r0, #2
 8001734:	f7ff ffce 	bl	80016d4 <WriteReg_I2C_SOUND>
		HAL_Delay(15);
 8001738:	200f      	movs	r0, #15
 800173a:	f003 fea1 	bl	8005480 <HAL_Delay>
		I2C_SOUND_ChangePage(0x00);
 800173e:	2000      	movs	r0, #0
 8001740:	f7ff ffaa 	bl	8001698 <I2C_SOUND_ChangePage>
	WriteReg_I2C_SOUND(0x04,0x03);//PLL_clkin = MCLK, codec_clkin = PLL_CLK, MCLK should be 11.2896MHz
 8001744:	2103      	movs	r1, #3
 8001746:	2004      	movs	r0, #4
 8001748:	f7ff ffc4 	bl	80016d4 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x05,0x91);//Power up PLL, set P=1, R=1
 800174c:	2191      	movs	r1, #145	; 0x91
 800174e:	2005      	movs	r0, #5
 8001750:	f7ff ffc0 	bl	80016d4 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x06,0x04);//Set J = 4
 8001754:	2104      	movs	r1, #4
 8001756:	2006      	movs	r0, #6
 8001758:	f7ff ffbc 	bl	80016d4 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x07,0x00);//SET D=0000
 800175c:	2100      	movs	r1, #0
 800175e:	2007      	movs	r0, #7
 8001760:	f7ff ffb8 	bl	80016d4 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x08,0x00);//SET D=0000
 8001764:	2100      	movs	r1, #0
 8001766:	2008      	movs	r0, #8
 8001768:	f7ff ffb4 	bl	80016d4 <WriteReg_I2C_SOUND>
	HAL_Delay(15);
 800176c:	200f      	movs	r0, #15
 800176e:	f003 fe87 	bl	8005480 <HAL_Delay>
	WriteReg_I2C_SOUND(0x0B,0x84);//DAC NDAC Powered up, set NDAC = 4
 8001772:	2184      	movs	r1, #132	; 0x84
 8001774:	200b      	movs	r0, #11
 8001776:	f7ff ffad 	bl	80016d4 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0C,0x82);//DAC MDAC Powered up, set MDAC = 2
 800177a:	2182      	movs	r1, #130	; 0x82
 800177c:	200c      	movs	r0, #12
 800177e:	f7ff ffa9 	bl	80016d4 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0D,0x00);//DAC OSR(9:0)-> DOSR=128
 8001782:	2100      	movs	r1, #0
 8001784:	200d      	movs	r0, #13
 8001786:	f7ff ffa5 	bl	80016d4 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0E,0x80);//DAC OSR(9:0)
 800178a:	2180      	movs	r1, #128	; 0x80
 800178c:	200e      	movs	r0, #14
 800178e:	f7ff ffa1 	bl	80016d4 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x1B, 0x00);	//Codec Interface control Word length = 16bits, BCLK&WCLK inputs, I2S mode. (P0, R27, D7-D6=00, D5-D4=00, D3-D2=00)
 8001792:	2100      	movs	r1, #0
 8001794:	201b      	movs	r0, #27
 8001796:	f7ff ff9d 	bl	80016d4 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x1C,0x00);//Data slot offset
 800179a:	2100      	movs	r1, #0
 800179c:	201c      	movs	r0, #28
 800179e:	f7ff ff99 	bl	80016d4 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x3c,0x02);//Dac Instruction programming PRB #2 for Mono routing. Type interpolation (x8) and 3 programmable	Biquads. (P0, R60, D4-D0=0010)
 80017a2:	2102      	movs	r1, #2
 80017a4:	203c      	movs	r0, #60	; 0x3c
 80017a6:	f7ff ff95 	bl	80016d4 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x01);
 80017aa:	2001      	movs	r0, #1
 80017ac:	f7ff ff74 	bl	8001698 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x10);	//Master Reference Powered on (P1, R1, D4=1)
 80017b0:	2110      	movs	r1, #16
 80017b2:	2001      	movs	r0, #1
 80017b4:	f7ff ff8e 	bl	80016d4 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x0A, 0x00);	//Output common mode for DAC set to 0.9V (default) (P1, R10)
 80017b8:	2100      	movs	r1, #0
 80017ba:	200a      	movs	r0, #10
 80017bc:	f7ff ff8a 	bl	80016d4 <WriteReg_I2C_SOUND>
		////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x0C, 0x00);	// No analog routing to headphone//0x0c,0x15 by SB
 80017c0:	2100      	movs	r1, #0
 80017c2:	200c      	movs	r0, #12
 80017c4:	f7ff ff86 	bl	80016d4 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x16, 0x00);	// Headphone volume=0//0x16,0x75 by SB
 80017c8:	2100      	movs	r1, #0
 80017ca:	2016      	movs	r0, #22
 80017cc:	f7ff ff82 	bl	80016d4 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x18, 0x00);	//No need to enable Mixer M and Mixer P, AINL Voulme, 0dB Gain 0x18,0x75 by SB
 80017d0:	2100      	movs	r1, #0
 80017d2:	2018      	movs	r0, #24
 80017d4:	f7ff ff7e 	bl	80016d4 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x19, 0x00);	//No need to enable Mixer M and Mixer P, AINR Voulme, 0dB Gain 0x19,0x75 by SB
 80017d8:	2100      	movs	r1, #0
 80017da:	2019      	movs	r0, #25
 80017dc:	f7ff ff7a 	bl	80016d4 <WriteReg_I2C_SOUND>
		//////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x09, 0x00);	//AINL,AINR are powered down
 80017e0:	2100      	movs	r1, #0
 80017e2:	2009      	movs	r0, #9
 80017e4:	f7ff ff76 	bl	80016d4 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 80017e8:	2100      	movs	r1, #0
 80017ea:	2010      	movs	r0, #16
 80017ec:	f7ff ff72 	bl	80016d4 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x2E, 0x00);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000)
 80017f0:	2100      	movs	r1, #0
 80017f2:	202e      	movs	r0, #46	; 0x2e
 80017f4:	f7ff ff6e 	bl	80016d4 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x30, 0x10);	//SPK driver Gain=6.0dB (P1, R48, D6-D4=001)
 80017f8:	2110      	movs	r1, #16
 80017fa:	2030      	movs	r0, #48	; 0x30
 80017fc:	f7ff ff6a 	bl	80016d4 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x2D, 0x02);	//SPK powered up (P1, R45, D1=1)
 8001800:	2102      	movs	r1, #2
 8001802:	202d      	movs	r0, #45	; 0x2d
 8001804:	f7ff ff66 	bl	80016d4 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x00);
 8001808:	2000      	movs	r0, #0
 800180a:	f7ff ff45 	bl	8001698 <I2C_SOUND_ChangePage>
		//////////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x3F, 0x90);	//DAC powered up, Soft step 1 per Fs. (P0, R63, D7=1, D5-D4=01, D3-D2=00, D1-D0=00)
 800180e:	2190      	movs	r1, #144	; 0x90
 8001810:	203f      	movs	r0, #63	; 0x3f
 8001812:	f7ff ff5f 	bl	80016d4 <WriteReg_I2C_SOUND>
		// 1<<7|1<<4|2 by SB
		WriteReg_I2C_SOUND(0x41, 0x00);	//DAC digital gain 0dB (P0, R65, D7-D0=00000000) cnDacValueOn by SB
 8001816:	2100      	movs	r1, #0
 8001818:	2041      	movs	r0, #65	; 0x41
 800181a:	f7ff ff5b 	bl	80016d4 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x40, 0x04);	//DAC volume not muted. (P0, R64, D3=0, D2=1) 1<<4 by SB
 800181e:	2104      	movs	r1, #4
 8001820:	2040      	movs	r0, #64	; 0x40
 8001822:	f7ff ff57 	bl	80016d4 <WriteReg_I2C_SOUND>
	}
 8001826:	46c0      	nop			; (mov r8, r8)
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <answer2CPU>:
//=============================================================================================
	uint8_t answer2CPU(uint8_t cmd[]) {
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
		uint8_t keyboard = 0xFF;
 8001834:	230f      	movs	r3, #15
 8001836:	18fb      	adds	r3, r7, r3
 8001838:	22ff      	movs	r2, #255	; 0xff
 800183a:	701a      	strb	r2, [r3, #0]
//		uint16_t ans[10];
		uint8_t i;
		uint8_t myCS = 0;					//   COMMON PART FOR EVERY COMMAND
 800183c:	230d      	movs	r3, #13
 800183e:	18fb      	adds	r3, r7, r3
 8001840:	2200      	movs	r2, #0
 8001842:	701a      	strb	r2, [r3, #0]
		uint8_t myLength;
		isReceiverDisabled=1;
 8001844:	4bd9      	ldr	r3, [pc, #868]	; (8001bac <answer2CPU+0x380>)
 8001846:	2201      	movs	r2, #1
 8001848:	701a      	strb	r2, [r3, #0]

		cmd2Execute=0;
 800184a:	4bd9      	ldr	r3, [pc, #868]	; (8001bb0 <answer2CPU+0x384>)
 800184c:	2200      	movs	r2, #0
 800184e:	701a      	strb	r2, [r3, #0]
		cmd[0]&=~0x100;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	781a      	ldrb	r2, [r3, #0]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	701a      	strb	r2, [r3, #0]
		if ((cmd[0] == 0x11)||(cmd[0] == 0x12)||(cmd[0] == 0x13)||(cmd[0] == 0x14)||(cmd[0] == 0x15)) {GPIOC->ODR &= ~(1 << 6);}//reset BF
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b11      	cmp	r3, #17
 800185e:	d00f      	beq.n	8001880 <answer2CPU+0x54>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b12      	cmp	r3, #18
 8001866:	d00b      	beq.n	8001880 <answer2CPU+0x54>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b13      	cmp	r3, #19
 800186e:	d007      	beq.n	8001880 <answer2CPU+0x54>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b14      	cmp	r3, #20
 8001876:	d003      	beq.n	8001880 <answer2CPU+0x54>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b15      	cmp	r3, #21
 800187e:	d105      	bne.n	800188c <answer2CPU+0x60>
 8001880:	4bcc      	ldr	r3, [pc, #816]	; (8001bb4 <answer2CPU+0x388>)
 8001882:	695a      	ldr	r2, [r3, #20]
 8001884:	4bcb      	ldr	r3, [pc, #812]	; (8001bb4 <answer2CPU+0x388>)
 8001886:	2140      	movs	r1, #64	; 0x40
 8001888:	438a      	bics	r2, r1
 800188a:	615a      	str	r2, [r3, #20]
		if (cmd[0] == 0x11) {
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b11      	cmp	r3, #17
 8001892:	d105      	bne.n	80018a0 <answer2CPU+0x74>
//			GPIOC->ODR &= ~(1 << 6);
			GPIOC->ODR &=~ GPIO_ODR_OD6;
 8001894:	4bc7      	ldr	r3, [pc, #796]	; (8001bb4 <answer2CPU+0x388>)
 8001896:	695a      	ldr	r2, [r3, #20]
 8001898:	4bc6      	ldr	r3, [pc, #792]	; (8001bb4 <answer2CPU+0x388>)
 800189a:	2140      	movs	r1, #64	; 0x40
 800189c:	438a      	bics	r2, r1
 800189e:	615a      	str	r2, [r3, #20]
		}//reset BF
		ans[0] = cmd[0]|0x80;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2280      	movs	r2, #128	; 0x80
 80018a6:	4252      	negs	r2, r2
 80018a8:	4313      	orrs	r3, r2
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	4bc2      	ldr	r3, [pc, #776]	; (8001bb8 <answer2CPU+0x38c>)
 80018b0:	801a      	strh	r2, [r3, #0]
//==================================================================================================
			if ((cmd[0] >= 0x10)&&(cmd[0] < 0x16)) { //answer is keyboard + stuff information                  0003
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b0f      	cmp	r3, #15
 80018b8:	d800      	bhi.n	80018bc <answer2CPU+0x90>
 80018ba:	e162      	b.n	8001b82 <answer2CPU+0x356>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b15      	cmp	r3, #21
 80018c2:	d900      	bls.n	80018c6 <answer2CPU+0x9a>
 80018c4:	e15d      	b.n	8001b82 <answer2CPU+0x356>
//		if (cmd[0] != 0x10) {
//			GPIOC->ODR &= ~(1 << 6);
				if ((GPIOA->IDR & (1 << 4)) == 0) {
 80018c6:	23a0      	movs	r3, #160	; 0xa0
 80018c8:	05db      	lsls	r3, r3, #23
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	2210      	movs	r2, #16
 80018ce:	4013      	ands	r3, r2
 80018d0:	d106      	bne.n	80018e0 <answer2CPU+0xb4>
					keyboard &= 0b11111110;
 80018d2:	220f      	movs	r2, #15
 80018d4:	18bb      	adds	r3, r7, r2
 80018d6:	18ba      	adds	r2, r7, r2
 80018d8:	7812      	ldrb	r2, [r2, #0]
 80018da:	2101      	movs	r1, #1
 80018dc:	438a      	bics	r2, r1
 80018de:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 1)) == 0) {
 80018e0:	23a0      	movs	r3, #160	; 0xa0
 80018e2:	05db      	lsls	r3, r3, #23
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	2202      	movs	r2, #2
 80018e8:	4013      	ands	r3, r2
 80018ea:	d106      	bne.n	80018fa <answer2CPU+0xce>
					keyboard &= 0b11111101;
 80018ec:	220f      	movs	r2, #15
 80018ee:	18bb      	adds	r3, r7, r2
 80018f0:	18ba      	adds	r2, r7, r2
 80018f2:	7812      	ldrb	r2, [r2, #0]
 80018f4:	2102      	movs	r1, #2
 80018f6:	438a      	bics	r2, r1
 80018f8:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 0)) == 0) {
 80018fa:	23a0      	movs	r3, #160	; 0xa0
 80018fc:	05db      	lsls	r3, r3, #23
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	2201      	movs	r2, #1
 8001902:	4013      	ands	r3, r2
 8001904:	d106      	bne.n	8001914 <answer2CPU+0xe8>
					keyboard &= 0b11111011;
 8001906:	220f      	movs	r2, #15
 8001908:	18bb      	adds	r3, r7, r2
 800190a:	18ba      	adds	r2, r7, r2
 800190c:	7812      	ldrb	r2, [r2, #0]
 800190e:	2104      	movs	r1, #4
 8001910:	438a      	bics	r2, r1
 8001912:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 13)) == 0) {
 8001914:	23a0      	movs	r3, #160	; 0xa0
 8001916:	05db      	lsls	r3, r3, #23
 8001918:	691a      	ldr	r2, [r3, #16]
 800191a:	2380      	movs	r3, #128	; 0x80
 800191c:	019b      	lsls	r3, r3, #6
 800191e:	4013      	ands	r3, r2
 8001920:	d106      	bne.n	8001930 <answer2CPU+0x104>
					keyboard &= 0b11110111;
 8001922:	220f      	movs	r2, #15
 8001924:	18bb      	adds	r3, r7, r2
 8001926:	18ba      	adds	r2, r7, r2
 8001928:	7812      	ldrb	r2, [r2, #0]
 800192a:	2108      	movs	r1, #8
 800192c:	438a      	bics	r2, r1
 800192e:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 14)) == 0) {
 8001930:	23a0      	movs	r3, #160	; 0xa0
 8001932:	05db      	lsls	r3, r3, #23
 8001934:	691a      	ldr	r2, [r3, #16]
 8001936:	2380      	movs	r3, #128	; 0x80
 8001938:	01db      	lsls	r3, r3, #7
 800193a:	4013      	ands	r3, r2
 800193c:	d106      	bne.n	800194c <answer2CPU+0x120>
					keyboard &= 0b11101111;
 800193e:	220f      	movs	r2, #15
 8001940:	18bb      	adds	r3, r7, r2
 8001942:	18ba      	adds	r2, r7, r2
 8001944:	7812      	ldrb	r2, [r2, #0]
 8001946:	2110      	movs	r1, #16
 8001948:	438a      	bics	r2, r1
 800194a:	701a      	strb	r2, [r3, #0]
				}

				keyboard = ~keyboard;
 800194c:	210f      	movs	r1, #15
 800194e:	187b      	adds	r3, r7, r1
 8001950:	187a      	adds	r2, r7, r1
 8001952:	7812      	ldrb	r2, [r2, #0]
 8001954:	43d2      	mvns	r2, r2
 8001956:	701a      	strb	r2, [r3, #0]
//				keyboard&=bf;
				myLength = 0x04;
 8001958:	200c      	movs	r0, #12
 800195a:	183b      	adds	r3, r7, r0
 800195c:	2204      	movs	r2, #4
 800195e:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001960:	183b      	adds	r3, r7, r0
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	b29b      	uxth	r3, r3
 8001966:	3b02      	subs	r3, #2
 8001968:	b29a      	uxth	r2, r3
 800196a:	4b93      	ldr	r3, [pc, #588]	; (8001bb8 <answer2CPU+0x38c>)
 800196c:	805a      	strh	r2, [r3, #2]
				ans[2] = keyboard;				//			MANAGEMENT COMMANDS
 800196e:	187b      	adds	r3, r7, r1
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	b29a      	uxth	r2, r3
 8001974:	4b90      	ldr	r3, [pc, #576]	; (8001bb8 <answer2CPU+0x38c>)
 8001976:	809a      	strh	r2, [r3, #4]

				for (i = 0; i < myLength-1; i++) {
 8001978:	230e      	movs	r3, #14
 800197a:	18fb      	adds	r3, r7, r3
 800197c:	2200      	movs	r2, #0
 800197e:	701a      	strb	r2, [r3, #0]
 8001980:	e011      	b.n	80019a6 <answer2CPU+0x17a>
					myCS = myCS + ans[i];
 8001982:	200e      	movs	r0, #14
 8001984:	183b      	adds	r3, r7, r0
 8001986:	781a      	ldrb	r2, [r3, #0]
 8001988:	4b8b      	ldr	r3, [pc, #556]	; (8001bb8 <answer2CPU+0x38c>)
 800198a:	0052      	lsls	r2, r2, #1
 800198c:	5ad3      	ldrh	r3, [r2, r3]
 800198e:	b2d9      	uxtb	r1, r3
 8001990:	220d      	movs	r2, #13
 8001992:	18bb      	adds	r3, r7, r2
 8001994:	18ba      	adds	r2, r7, r2
 8001996:	7812      	ldrb	r2, [r2, #0]
 8001998:	188a      	adds	r2, r1, r2
 800199a:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 800199c:	183b      	adds	r3, r7, r0
 800199e:	781a      	ldrb	r2, [r3, #0]
 80019a0:	183b      	adds	r3, r7, r0
 80019a2:	3201      	adds	r2, #1
 80019a4:	701a      	strb	r2, [r3, #0]
 80019a6:	200e      	movs	r0, #14
 80019a8:	183b      	adds	r3, r7, r0
 80019aa:	781a      	ldrb	r2, [r3, #0]
 80019ac:	230c      	movs	r3, #12
 80019ae:	18fb      	adds	r3, r7, r3
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	3b01      	subs	r3, #1
 80019b4:	429a      	cmp	r2, r3
 80019b6:	dbe4      	blt.n	8001982 <answer2CPU+0x156>
				}
				myCS = 0 - myCS;
 80019b8:	210d      	movs	r1, #13
 80019ba:	187b      	adds	r3, r7, r1
 80019bc:	187a      	adds	r2, r7, r1
 80019be:	7812      	ldrb	r2, [r2, #0]
 80019c0:	4252      	negs	r2, r2
 80019c2:	701a      	strb	r2, [r3, #0]
				ans[3] = myCS;
 80019c4:	187b      	adds	r3, r7, r1
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	4b7b      	ldr	r3, [pc, #492]	; (8001bb8 <answer2CPU+0x38c>)
 80019cc:	80da      	strh	r2, [r3, #6]
				i=0;
 80019ce:	183b      	adds	r3, r7, r0
 80019d0:	2200      	movs	r2, #0
 80019d2:	701a      	strb	r2, [r3, #0]
//======================================================================================================================================

				while(!(USART2->ISR & USART_ISR_TXE)){};
 80019d4:	46c0      	nop			; (mov r8, r8)
 80019d6:	4b79      	ldr	r3, [pc, #484]	; (8001bbc <answer2CPU+0x390>)
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	2280      	movs	r2, #128	; 0x80
 80019dc:	4013      	ands	r3, r2
 80019de:	d0fa      	beq.n	80019d6 <answer2CPU+0x1aa>
				USART2->TDR = ans[0]|0x0100;
 80019e0:	4b75      	ldr	r3, [pc, #468]	; (8001bb8 <answer2CPU+0x38c>)
 80019e2:	881b      	ldrh	r3, [r3, #0]
 80019e4:	2280      	movs	r2, #128	; 0x80
 80019e6:	0052      	lsls	r2, r2, #1
 80019e8:	4313      	orrs	r3, r2
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	4b73      	ldr	r3, [pc, #460]	; (8001bbc <answer2CPU+0x390>)
 80019ee:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 80019f0:	230e      	movs	r3, #14
 80019f2:	18fb      	adds	r3, r7, r3
 80019f4:	2201      	movs	r2, #1
 80019f6:	701a      	strb	r2, [r3, #0]
 80019f8:	e013      	b.n	8001a22 <answer2CPU+0x1f6>
				  {												//answer2cpu was given
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	4b6f      	ldr	r3, [pc, #444]	; (8001bbc <answer2CPU+0x390>)
 80019fe:	69db      	ldr	r3, [r3, #28]
 8001a00:	2280      	movs	r2, #128	; 0x80
 8001a02:	4013      	ands	r3, r2
 8001a04:	d0fa      	beq.n	80019fc <answer2CPU+0x1d0>
				    USART2->TDR = (uint8_t)ans[i];
 8001a06:	210e      	movs	r1, #14
 8001a08:	187b      	adds	r3, r7, r1
 8001a0a:	781a      	ldrb	r2, [r3, #0]
 8001a0c:	4b6a      	ldr	r3, [pc, #424]	; (8001bb8 <answer2CPU+0x38c>)
 8001a0e:	0052      	lsls	r2, r2, #1
 8001a10:	5ad3      	ldrh	r3, [r2, r3]
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	4b69      	ldr	r3, [pc, #420]	; (8001bbc <answer2CPU+0x390>)
 8001a16:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 8001a18:	187b      	adds	r3, r7, r1
 8001a1a:	781a      	ldrb	r2, [r3, #0]
 8001a1c:	187b      	adds	r3, r7, r1
 8001a1e:	3201      	adds	r2, #1
 8001a20:	701a      	strb	r2, [r3, #0]
 8001a22:	230e      	movs	r3, #14
 8001a24:	18fa      	adds	r2, r7, r3
 8001a26:	230c      	movs	r3, #12
 8001a28:	18fb      	adds	r3, r7, r3
 8001a2a:	7812      	ldrb	r2, [r2, #0]
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d3e3      	bcc.n	80019fa <answer2CPU+0x1ce>
				  }
//				HAL_Delay(1);
				USART2->CR1 |= USART_CR1_RE;
 8001a32:	4b62      	ldr	r3, [pc, #392]	; (8001bbc <answer2CPU+0x390>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	4b61      	ldr	r3, [pc, #388]	; (8001bbc <answer2CPU+0x390>)
 8001a38:	2104      	movs	r1, #4
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	601a      	str	r2, [r3, #0]
				isReceiverDisabled=0;
 8001a3e:	4b5b      	ldr	r3, [pc, #364]	; (8001bac <answer2CPU+0x380>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	701a      	strb	r2, [r3, #0]
//				BFEN=1;
//=======================================================================================================================================
				if (cmd[0] == 0x11) {//Show full screen background;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b11      	cmp	r3, #17
 8001a4a:	d109      	bne.n	8001a60 <answer2CPU+0x234>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					picNum = cmd[2];
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	789a      	ldrb	r2, [r3, #2]
 8001a50:	4b5b      	ldr	r3, [pc, #364]	; (8001bc0 <answer2CPU+0x394>)
 8001a52:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x11;
 8001a54:	4b56      	ldr	r3, [pc, #344]	; (8001bb0 <answer2CPU+0x384>)
 8001a56:	2211      	movs	r2, #17
 8001a58:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001a5a:	4b5a      	ldr	r3, [pc, #360]	; (8001bc4 <answer2CPU+0x398>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	701a      	strb	r2, [r3, #0]
				}
//=======================================================================================================================================
				if (cmd[0] == 0x12) {				//show small image
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b12      	cmp	r3, #18
 8001a66:	d115      	bne.n	8001a94 <answer2CPU+0x268>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3302      	adds	r3, #2
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	001a      	movs	r2, r3
 8001a70:	4b55      	ldr	r3, [pc, #340]	; (8001bc8 <answer2CPU+0x39c>)
 8001a72:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3303      	adds	r3, #3
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	001a      	movs	r2, r3
 8001a7c:	4b53      	ldr	r3, [pc, #332]	; (8001bcc <answer2CPU+0x3a0>)
 8001a7e:	601a      	str	r2, [r3, #0]
					picNum=cmd[4];
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	791a      	ldrb	r2, [r3, #4]
 8001a84:	4b4e      	ldr	r3, [pc, #312]	; (8001bc0 <answer2CPU+0x394>)
 8001a86:	701a      	strb	r2, [r3, #0]
//					weoShowSmallImage(dataASCII[i], ASCII_X, ASCII_Y);
					cmd2Execute=0x12;
 8001a88:	4b49      	ldr	r3, [pc, #292]	; (8001bb0 <answer2CPU+0x384>)
 8001a8a:	2212      	movs	r2, #18
 8001a8c:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001a8e:	4b4d      	ldr	r3, [pc, #308]	; (8001bc4 <answer2CPU+0x398>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x13) {			//show ASCII code(s)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2b13      	cmp	r3, #19
 8001a9a:	d140      	bne.n	8001b1e <answer2CPU+0x2f2>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3302      	adds	r3, #2
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	001a      	movs	r2, r3
 8001aa4:	4b48      	ldr	r3, [pc, #288]	; (8001bc8 <answer2CPU+0x39c>)
 8001aa6:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3303      	adds	r3, #3
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	001a      	movs	r2, r3
 8001ab0:	4b46      	ldr	r3, [pc, #280]	; (8001bcc <answer2CPU+0x3a0>)
 8001ab2:	601a      	str	r2, [r3, #0]
					fontInfo= cmd[4];
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	791a      	ldrb	r2, [r3, #4]
 8001ab8:	4b45      	ldr	r3, [pc, #276]	; (8001bd0 <answer2CPU+0x3a4>)
 8001aba:	701a      	strb	r2, [r3, #0]
					color=fontInfo|0xF0;
 8001abc:	4b44      	ldr	r3, [pc, #272]	; (8001bd0 <answer2CPU+0x3a4>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2210      	movs	r2, #16
 8001ac2:	4252      	negs	r2, r2
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	b2da      	uxtb	r2, r3
 8001ac8:	4b42      	ldr	r3, [pc, #264]	; (8001bd4 <answer2CPU+0x3a8>)
 8001aca:	701a      	strb	r2, [r3, #0]
					strLen = cmd[1] - 0x04;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	3b04      	subs	r3, #4
 8001ad4:	b2da      	uxtb	r2, r3
 8001ad6:	4b40      	ldr	r3, [pc, #256]	; (8001bd8 <answer2CPU+0x3ac>)
 8001ad8:	701a      	strb	r2, [r3, #0]
					for (i = 0; i <strLen; i++) {
 8001ada:	230e      	movs	r3, #14
 8001adc:	18fb      	adds	r3, r7, r3
 8001ade:	2200      	movs	r2, #0
 8001ae0:	701a      	strb	r2, [r3, #0]
 8001ae2:	e00f      	b.n	8001b04 <answer2CPU+0x2d8>
					dataASCII[i] = cmd[i+5];
 8001ae4:	200e      	movs	r0, #14
 8001ae6:	183b      	adds	r3, r7, r0
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	3305      	adds	r3, #5
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	18d2      	adds	r2, r2, r3
 8001af0:	183b      	adds	r3, r7, r0
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	7811      	ldrb	r1, [r2, #0]
 8001af6:	4a39      	ldr	r2, [pc, #228]	; (8001bdc <answer2CPU+0x3b0>)
 8001af8:	54d1      	strb	r1, [r2, r3]
					for (i = 0; i <strLen; i++) {
 8001afa:	183b      	adds	r3, r7, r0
 8001afc:	781a      	ldrb	r2, [r3, #0]
 8001afe:	183b      	adds	r3, r7, r0
 8001b00:	3201      	adds	r2, #1
 8001b02:	701a      	strb	r2, [r3, #0]
 8001b04:	4b34      	ldr	r3, [pc, #208]	; (8001bd8 <answer2CPU+0x3ac>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	220e      	movs	r2, #14
 8001b0a:	18ba      	adds	r2, r7, r2
 8001b0c:	7812      	ldrb	r2, [r2, #0]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d3e8      	bcc.n	8001ae4 <answer2CPU+0x2b8>
				}
					cmd2Execute=0x13;
 8001b12:	4b27      	ldr	r3, [pc, #156]	; (8001bb0 <answer2CPU+0x384>)
 8001b14:	2213      	movs	r2, #19
 8001b16:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001b18:	4b2a      	ldr	r3, [pc, #168]	; (8001bc4 <answer2CPU+0x398>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x14) {			//издать звук
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b14      	cmp	r3, #20
 8001b24:	d109      	bne.n	8001b3a <answer2CPU+0x30e>
					soundNum = cmd[2];
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	789a      	ldrb	r2, [r3, #2]
 8001b2a:	4b2d      	ldr	r3, [pc, #180]	; (8001be0 <answer2CPU+0x3b4>)
 8001b2c:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x14;
 8001b2e:	4b20      	ldr	r3, [pc, #128]	; (8001bb0 <answer2CPU+0x384>)
 8001b30:	2214      	movs	r2, #20
 8001b32:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001b34:	4b23      	ldr	r3, [pc, #140]	; (8001bc4 <answer2CPU+0x398>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x15) {
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b15      	cmp	r3, #21
 8001b40:	d10d      	bne.n	8001b5e <answer2CPU+0x332>
					volume = cmd[2];
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	789a      	ldrb	r2, [r3, #2]
 8001b46:	4b27      	ldr	r3, [pc, #156]	; (8001be4 <answer2CPU+0x3b8>)
 8001b48:	701a      	strb	r2, [r3, #0]
					contrast = cmd[3];
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	78da      	ldrb	r2, [r3, #3]
 8001b4e:	4b26      	ldr	r3, [pc, #152]	; (8001be8 <answer2CPU+0x3bc>)
 8001b50:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x15;
 8001b52:	4b17      	ldr	r3, [pc, #92]	; (8001bb0 <answer2CPU+0x384>)
 8001b54:	2215      	movs	r2, #21
 8001b56:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001b58:	4b1a      	ldr	r3, [pc, #104]	; (8001bc4 <answer2CPU+0x398>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x16) {
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b16      	cmp	r3, #22
 8001b64:	d10d      	bne.n	8001b82 <answer2CPU+0x356>
					volume = cmd[3];
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	78da      	ldrb	r2, [r3, #3]
 8001b6a:	4b1e      	ldr	r3, [pc, #120]	; (8001be4 <answer2CPU+0x3b8>)
 8001b6c:	701a      	strb	r2, [r3, #0]
					contrast = cmd[4];
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	791a      	ldrb	r2, [r3, #4]
 8001b72:	4b1d      	ldr	r3, [pc, #116]	; (8001be8 <answer2CPU+0x3bc>)
 8001b74:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x16;
 8001b76:	4b0e      	ldr	r3, [pc, #56]	; (8001bb0 <answer2CPU+0x384>)
 8001b78:	2216      	movs	r2, #22
 8001b7a:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001b7c:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <answer2CPU+0x398>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	701a      	strb	r2, [r3, #0]
				}
//				weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, Image);
//				USART2->ICR|=USART_ICR_ORECF;
			}
//==========================================================================================================================
			if (cmd[0] == 0x00) { //request of pcb type
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d000      	beq.n	8001b8c <answer2CPU+0x360>
 8001b8a:	e09f      	b.n	8001ccc <answer2CPU+0x4a0>
				myLength = 0x14; //20 bytes length answer
 8001b8c:	210c      	movs	r1, #12
 8001b8e:	187b      	adds	r3, r7, r1
 8001b90:	2214      	movs	r2, #20
 8001b92:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001b94:	187b      	adds	r3, r7, r1
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	3b02      	subs	r3, #2
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <answer2CPU+0x38c>)
 8001ba0:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001ba2:	230e      	movs	r3, #14
 8001ba4:	18fb      	adds	r3, r7, r3
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	701a      	strb	r2, [r3, #0]
 8001baa:	e030      	b.n	8001c0e <answer2CPU+0x3e2>
 8001bac:	200003c4 	.word	0x200003c4
 8001bb0:	20000426 	.word	0x20000426
 8001bb4:	50000800 	.word	0x50000800
 8001bb8:	2000040c 	.word	0x2000040c
 8001bbc:	40004400 	.word	0x40004400
 8001bc0:	200003c5 	.word	0x200003c5
 8001bc4:	20000427 	.word	0x20000427
 8001bc8:	200003cc 	.word	0x200003cc
 8001bcc:	200003d0 	.word	0x200003d0
 8001bd0:	20000431 	.word	0x20000431
 8001bd4:	20000432 	.word	0x20000432
 8001bd8:	200003ca 	.word	0x200003ca
 8001bdc:	200003d8 	.word	0x200003d8
 8001be0:	200003c6 	.word	0x200003c6
 8001be4:	200003c7 	.word	0x200003c7
 8001be8:	200003c8 	.word	0x200003c8
					ans[i + 2] = PCB_type[i];
 8001bec:	200e      	movs	r0, #14
 8001bee:	183b      	adds	r3, r7, r0
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	4acb      	ldr	r2, [pc, #812]	; (8001f20 <answer2CPU+0x6f4>)
 8001bf4:	5cd1      	ldrb	r1, [r2, r3]
 8001bf6:	183b      	adds	r3, r7, r0
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	1c9a      	adds	r2, r3, #2
 8001bfc:	b289      	uxth	r1, r1
 8001bfe:	4bc9      	ldr	r3, [pc, #804]	; (8001f24 <answer2CPU+0x6f8>)
 8001c00:	0052      	lsls	r2, r2, #1
 8001c02:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001c04:	183b      	adds	r3, r7, r0
 8001c06:	781a      	ldrb	r2, [r3, #0]
 8001c08:	183b      	adds	r3, r7, r0
 8001c0a:	3201      	adds	r2, #1
 8001c0c:	701a      	strb	r2, [r3, #0]
 8001c0e:	220e      	movs	r2, #14
 8001c10:	18bb      	adds	r3, r7, r2
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b10      	cmp	r3, #16
 8001c16:	d9e9      	bls.n	8001bec <answer2CPU+0x3c0>
				}
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8001c18:	18bb      	adds	r3, r7, r2
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	701a      	strb	r2, [r3, #0]
 8001c1e:	e011      	b.n	8001c44 <answer2CPU+0x418>
					myCS = myCS + ans[i];
 8001c20:	200e      	movs	r0, #14
 8001c22:	183b      	adds	r3, r7, r0
 8001c24:	781a      	ldrb	r2, [r3, #0]
 8001c26:	4bbf      	ldr	r3, [pc, #764]	; (8001f24 <answer2CPU+0x6f8>)
 8001c28:	0052      	lsls	r2, r2, #1
 8001c2a:	5ad3      	ldrh	r3, [r2, r3]
 8001c2c:	b2d9      	uxtb	r1, r3
 8001c2e:	220d      	movs	r2, #13
 8001c30:	18bb      	adds	r3, r7, r2
 8001c32:	18ba      	adds	r2, r7, r2
 8001c34:	7812      	ldrb	r2, [r2, #0]
 8001c36:	188a      	adds	r2, r1, r2
 8001c38:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8001c3a:	183b      	adds	r3, r7, r0
 8001c3c:	781a      	ldrb	r2, [r3, #0]
 8001c3e:	183b      	adds	r3, r7, r0
 8001c40:	3201      	adds	r2, #1
 8001c42:	701a      	strb	r2, [r3, #0]
 8001c44:	230e      	movs	r3, #14
 8001c46:	18fb      	adds	r3, r7, r3
 8001c48:	781a      	ldrb	r2, [r3, #0]
 8001c4a:	200c      	movs	r0, #12
 8001c4c:	183b      	adds	r3, r7, r0
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	3b01      	subs	r3, #1
 8001c52:	429a      	cmp	r2, r3
 8001c54:	dbe4      	blt.n	8001c20 <answer2CPU+0x3f4>
				}
				myCS = 0 - myCS;
 8001c56:	210d      	movs	r1, #13
 8001c58:	187b      	adds	r3, r7, r1
 8001c5a:	187a      	adds	r2, r7, r1
 8001c5c:	7812      	ldrb	r2, [r2, #0]
 8001c5e:	4252      	negs	r2, r2
 8001c60:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001c62:	183b      	adds	r3, r7, r0
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	1e5a      	subs	r2, r3, #1
 8001c68:	187b      	adds	r3, r7, r1
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	b299      	uxth	r1, r3
 8001c6e:	4bad      	ldr	r3, [pc, #692]	; (8001f24 <answer2CPU+0x6f8>)
 8001c70:	0052      	lsls	r2, r2, #1
 8001c72:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001c74:	46c0      	nop			; (mov r8, r8)
 8001c76:	4bac      	ldr	r3, [pc, #688]	; (8001f28 <answer2CPU+0x6fc>)
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	2280      	movs	r2, #128	; 0x80
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	d0fa      	beq.n	8001c76 <answer2CPU+0x44a>
				USART2->TDR = ans[0]|0x0100;
 8001c80:	4ba8      	ldr	r3, [pc, #672]	; (8001f24 <answer2CPU+0x6f8>)
 8001c82:	881b      	ldrh	r3, [r3, #0]
 8001c84:	2280      	movs	r2, #128	; 0x80
 8001c86:	0052      	lsls	r2, r2, #1
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	4ba6      	ldr	r3, [pc, #664]	; (8001f28 <answer2CPU+0x6fc>)
 8001c8e:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001c90:	e014      	b.n	8001cbc <answer2CPU+0x490>
				  {
				    i++;
 8001c92:	210e      	movs	r1, #14
 8001c94:	187b      	adds	r3, r7, r1
 8001c96:	781a      	ldrb	r2, [r3, #0]
 8001c98:	187b      	adds	r3, r7, r1
 8001c9a:	3201      	adds	r2, #1
 8001c9c:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001c9e:	46c0      	nop			; (mov r8, r8)
 8001ca0:	4ba1      	ldr	r3, [pc, #644]	; (8001f28 <answer2CPU+0x6fc>)
 8001ca2:	69db      	ldr	r3, [r3, #28]
 8001ca4:	2280      	movs	r2, #128	; 0x80
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	d0fa      	beq.n	8001ca0 <answer2CPU+0x474>
				    USART2->TDR = (uint8_t)ans[i];
 8001caa:	230e      	movs	r3, #14
 8001cac:	18fb      	adds	r3, r7, r3
 8001cae:	781a      	ldrb	r2, [r3, #0]
 8001cb0:	4b9c      	ldr	r3, [pc, #624]	; (8001f24 <answer2CPU+0x6f8>)
 8001cb2:	0052      	lsls	r2, r2, #1
 8001cb4:	5ad3      	ldrh	r3, [r2, r3]
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	4b9b      	ldr	r3, [pc, #620]	; (8001f28 <answer2CPU+0x6fc>)
 8001cba:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001cbc:	230e      	movs	r3, #14
 8001cbe:	18fb      	adds	r3, r7, r3
 8001cc0:	781a      	ldrb	r2, [r3, #0]
 8001cc2:	4b98      	ldr	r3, [pc, #608]	; (8001f24 <answer2CPU+0x6f8>)
 8001cc4:	0052      	lsls	r2, r2, #1
 8001cc6:	5ad3      	ldrh	r3, [r2, r3]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1e2      	bne.n	8001c92 <answer2CPU+0x466>
				  }
//				 cmd2Execute=0x00;
			}
//============================================================================================================================
			if (cmd[0] == 0x01) { //request of pcb revision
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d000      	beq.n	8001cd6 <answer2CPU+0x4aa>
 8001cd4:	e07f      	b.n	8001dd6 <answer2CPU+0x5aa>
				myLength = 0x0B; //19 bytes length answer
 8001cd6:	210c      	movs	r1, #12
 8001cd8:	187b      	adds	r3, r7, r1
 8001cda:	220b      	movs	r2, #11
 8001cdc:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001cde:	187b      	adds	r3, r7, r1
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	3b02      	subs	r3, #2
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	4b8e      	ldr	r3, [pc, #568]	; (8001f24 <answer2CPU+0x6f8>)
 8001cea:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001cec:	230e      	movs	r3, #14
 8001cee:	18fb      	adds	r3, r7, r3
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	701a      	strb	r2, [r3, #0]
 8001cf4:	e010      	b.n	8001d18 <answer2CPU+0x4ec>
					ans[i + 2] = PCB_rev[i];
 8001cf6:	200e      	movs	r0, #14
 8001cf8:	183b      	adds	r3, r7, r0
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	4a8b      	ldr	r2, [pc, #556]	; (8001f2c <answer2CPU+0x700>)
 8001cfe:	5cd1      	ldrb	r1, [r2, r3]
 8001d00:	183b      	adds	r3, r7, r0
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	1c9a      	adds	r2, r3, #2
 8001d06:	b289      	uxth	r1, r1
 8001d08:	4b86      	ldr	r3, [pc, #536]	; (8001f24 <answer2CPU+0x6f8>)
 8001d0a:	0052      	lsls	r2, r2, #1
 8001d0c:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001d0e:	183b      	adds	r3, r7, r0
 8001d10:	781a      	ldrb	r2, [r3, #0]
 8001d12:	183b      	adds	r3, r7, r0
 8001d14:	3201      	adds	r2, #1
 8001d16:	701a      	strb	r2, [r3, #0]
 8001d18:	220e      	movs	r2, #14
 8001d1a:	18bb      	adds	r3, r7, r2
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	2b10      	cmp	r3, #16
 8001d20:	d9e9      	bls.n	8001cf6 <answer2CPU+0x4ca>
				}
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001d22:	18bb      	adds	r3, r7, r2
 8001d24:	2200      	movs	r2, #0
 8001d26:	701a      	strb	r2, [r3, #0]
 8001d28:	e011      	b.n	8001d4e <answer2CPU+0x522>
					myCS = myCS + ans[i];
 8001d2a:	200e      	movs	r0, #14
 8001d2c:	183b      	adds	r3, r7, r0
 8001d2e:	781a      	ldrb	r2, [r3, #0]
 8001d30:	4b7c      	ldr	r3, [pc, #496]	; (8001f24 <answer2CPU+0x6f8>)
 8001d32:	0052      	lsls	r2, r2, #1
 8001d34:	5ad3      	ldrh	r3, [r2, r3]
 8001d36:	b2d9      	uxtb	r1, r3
 8001d38:	220d      	movs	r2, #13
 8001d3a:	18bb      	adds	r3, r7, r2
 8001d3c:	18ba      	adds	r2, r7, r2
 8001d3e:	7812      	ldrb	r2, [r2, #0]
 8001d40:	188a      	adds	r2, r1, r2
 8001d42:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001d44:	183b      	adds	r3, r7, r0
 8001d46:	781a      	ldrb	r2, [r3, #0]
 8001d48:	183b      	adds	r3, r7, r0
 8001d4a:	3201      	adds	r2, #1
 8001d4c:	701a      	strb	r2, [r3, #0]
 8001d4e:	230e      	movs	r3, #14
 8001d50:	18fb      	adds	r3, r7, r3
 8001d52:	781a      	ldrb	r2, [r3, #0]
 8001d54:	200c      	movs	r0, #12
 8001d56:	183b      	adds	r3, r7, r0
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	dbe4      	blt.n	8001d2a <answer2CPU+0x4fe>
				}
				myCS = 0 - myCS;
 8001d60:	210d      	movs	r1, #13
 8001d62:	187b      	adds	r3, r7, r1
 8001d64:	187a      	adds	r2, r7, r1
 8001d66:	7812      	ldrb	r2, [r2, #0]
 8001d68:	4252      	negs	r2, r2
 8001d6a:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001d6c:	183b      	adds	r3, r7, r0
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	1e5a      	subs	r2, r3, #1
 8001d72:	187b      	adds	r3, r7, r1
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	b299      	uxth	r1, r3
 8001d78:	4b6a      	ldr	r3, [pc, #424]	; (8001f24 <answer2CPU+0x6f8>)
 8001d7a:	0052      	lsls	r2, r2, #1
 8001d7c:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001d7e:	46c0      	nop			; (mov r8, r8)
 8001d80:	4b69      	ldr	r3, [pc, #420]	; (8001f28 <answer2CPU+0x6fc>)
 8001d82:	69db      	ldr	r3, [r3, #28]
 8001d84:	2280      	movs	r2, #128	; 0x80
 8001d86:	4013      	ands	r3, r2
 8001d88:	d0fa      	beq.n	8001d80 <answer2CPU+0x554>
				USART2->TDR = ans[0]|0x0100;
 8001d8a:	4b66      	ldr	r3, [pc, #408]	; (8001f24 <answer2CPU+0x6f8>)
 8001d8c:	881b      	ldrh	r3, [r3, #0]
 8001d8e:	2280      	movs	r2, #128	; 0x80
 8001d90:	0052      	lsls	r2, r2, #1
 8001d92:	4313      	orrs	r3, r2
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	4b64      	ldr	r3, [pc, #400]	; (8001f28 <answer2CPU+0x6fc>)
 8001d98:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001d9a:	e014      	b.n	8001dc6 <answer2CPU+0x59a>
					  {
					    i++;
 8001d9c:	210e      	movs	r1, #14
 8001d9e:	187b      	adds	r3, r7, r1
 8001da0:	781a      	ldrb	r2, [r3, #0]
 8001da2:	187b      	adds	r3, r7, r1
 8001da4:	3201      	adds	r2, #1
 8001da6:	701a      	strb	r2, [r3, #0]
					    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001da8:	46c0      	nop			; (mov r8, r8)
 8001daa:	4b5f      	ldr	r3, [pc, #380]	; (8001f28 <answer2CPU+0x6fc>)
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	2280      	movs	r2, #128	; 0x80
 8001db0:	4013      	ands	r3, r2
 8001db2:	d0fa      	beq.n	8001daa <answer2CPU+0x57e>
					    USART2->TDR = (uint8_t)ans[i];
 8001db4:	230e      	movs	r3, #14
 8001db6:	18fb      	adds	r3, r7, r3
 8001db8:	781a      	ldrb	r2, [r3, #0]
 8001dba:	4b5a      	ldr	r3, [pc, #360]	; (8001f24 <answer2CPU+0x6f8>)
 8001dbc:	0052      	lsls	r2, r2, #1
 8001dbe:	5ad3      	ldrh	r3, [r2, r3]
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	4b59      	ldr	r3, [pc, #356]	; (8001f28 <answer2CPU+0x6fc>)
 8001dc4:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001dc6:	230e      	movs	r3, #14
 8001dc8:	18fb      	adds	r3, r7, r3
 8001dca:	781a      	ldrb	r2, [r3, #0]
 8001dcc:	4b55      	ldr	r3, [pc, #340]	; (8001f24 <answer2CPU+0x6f8>)
 8001dce:	0052      	lsls	r2, r2, #1
 8001dd0:	5ad3      	ldrh	r3, [r2, r3]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1e2      	bne.n	8001d9c <answer2CPU+0x570>
					  }
//				 cmd2Execute=0x01;
			}
//================================================================================================================================
			if (cmd[0] == 0x02) { //request of emitter SN
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d000      	beq.n	8001de0 <answer2CPU+0x5b4>
 8001dde:	e07f      	b.n	8001ee0 <answer2CPU+0x6b4>
				myLength = 0x13; //19 bytes length answer
 8001de0:	210c      	movs	r1, #12
 8001de2:	187b      	adds	r3, r7, r1
 8001de4:	2213      	movs	r2, #19
 8001de6:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001de8:	187b      	adds	r3, r7, r1
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	3b02      	subs	r3, #2
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	4b4c      	ldr	r3, [pc, #304]	; (8001f24 <answer2CPU+0x6f8>)
 8001df4:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001df6:	230e      	movs	r3, #14
 8001df8:	18fb      	adds	r3, r7, r3
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	701a      	strb	r2, [r3, #0]
 8001dfe:	e010      	b.n	8001e22 <answer2CPU+0x5f6>
					ans[i + 2] = EmitterSN[i];
 8001e00:	200e      	movs	r0, #14
 8001e02:	183b      	adds	r3, r7, r0
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	4a4a      	ldr	r2, [pc, #296]	; (8001f30 <answer2CPU+0x704>)
 8001e08:	5cd1      	ldrb	r1, [r2, r3]
 8001e0a:	183b      	adds	r3, r7, r0
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	1c9a      	adds	r2, r3, #2
 8001e10:	b289      	uxth	r1, r1
 8001e12:	4b44      	ldr	r3, [pc, #272]	; (8001f24 <answer2CPU+0x6f8>)
 8001e14:	0052      	lsls	r2, r2, #1
 8001e16:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001e18:	183b      	adds	r3, r7, r0
 8001e1a:	781a      	ldrb	r2, [r3, #0]
 8001e1c:	183b      	adds	r3, r7, r0
 8001e1e:	3201      	adds	r2, #1
 8001e20:	701a      	strb	r2, [r3, #0]
 8001e22:	220e      	movs	r2, #14
 8001e24:	18bb      	adds	r3, r7, r2
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b10      	cmp	r3, #16
 8001e2a:	d9e9      	bls.n	8001e00 <answer2CPU+0x5d4>
				}
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001e2c:	18bb      	adds	r3, r7, r2
 8001e2e:	2200      	movs	r2, #0
 8001e30:	701a      	strb	r2, [r3, #0]
 8001e32:	e011      	b.n	8001e58 <answer2CPU+0x62c>
					myCS = myCS + ans[i];
 8001e34:	200e      	movs	r0, #14
 8001e36:	183b      	adds	r3, r7, r0
 8001e38:	781a      	ldrb	r2, [r3, #0]
 8001e3a:	4b3a      	ldr	r3, [pc, #232]	; (8001f24 <answer2CPU+0x6f8>)
 8001e3c:	0052      	lsls	r2, r2, #1
 8001e3e:	5ad3      	ldrh	r3, [r2, r3]
 8001e40:	b2d9      	uxtb	r1, r3
 8001e42:	220d      	movs	r2, #13
 8001e44:	18bb      	adds	r3, r7, r2
 8001e46:	18ba      	adds	r2, r7, r2
 8001e48:	7812      	ldrb	r2, [r2, #0]
 8001e4a:	188a      	adds	r2, r1, r2
 8001e4c:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001e4e:	183b      	adds	r3, r7, r0
 8001e50:	781a      	ldrb	r2, [r3, #0]
 8001e52:	183b      	adds	r3, r7, r0
 8001e54:	3201      	adds	r2, #1
 8001e56:	701a      	strb	r2, [r3, #0]
 8001e58:	230e      	movs	r3, #14
 8001e5a:	18fb      	adds	r3, r7, r3
 8001e5c:	781a      	ldrb	r2, [r3, #0]
 8001e5e:	200c      	movs	r0, #12
 8001e60:	183b      	adds	r3, r7, r0
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	3b01      	subs	r3, #1
 8001e66:	429a      	cmp	r2, r3
 8001e68:	dbe4      	blt.n	8001e34 <answer2CPU+0x608>
				}
				myCS = 0 - myCS;
 8001e6a:	210d      	movs	r1, #13
 8001e6c:	187b      	adds	r3, r7, r1
 8001e6e:	187a      	adds	r2, r7, r1
 8001e70:	7812      	ldrb	r2, [r2, #0]
 8001e72:	4252      	negs	r2, r2
 8001e74:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001e76:	183b      	adds	r3, r7, r0
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	1e5a      	subs	r2, r3, #1
 8001e7c:	187b      	adds	r3, r7, r1
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	b299      	uxth	r1, r3
 8001e82:	4b28      	ldr	r3, [pc, #160]	; (8001f24 <answer2CPU+0x6f8>)
 8001e84:	0052      	lsls	r2, r2, #1
 8001e86:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001e88:	46c0      	nop			; (mov r8, r8)
 8001e8a:	4b27      	ldr	r3, [pc, #156]	; (8001f28 <answer2CPU+0x6fc>)
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	2280      	movs	r2, #128	; 0x80
 8001e90:	4013      	ands	r3, r2
 8001e92:	d0fa      	beq.n	8001e8a <answer2CPU+0x65e>
				USART2->TDR = ans[0]|0x0100;
 8001e94:	4b23      	ldr	r3, [pc, #140]	; (8001f24 <answer2CPU+0x6f8>)
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	2280      	movs	r2, #128	; 0x80
 8001e9a:	0052      	lsls	r2, r2, #1
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	4b21      	ldr	r3, [pc, #132]	; (8001f28 <answer2CPU+0x6fc>)
 8001ea2:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001ea4:	e014      	b.n	8001ed0 <answer2CPU+0x6a4>
				  {
				    i++;
 8001ea6:	210e      	movs	r1, #14
 8001ea8:	187b      	adds	r3, r7, r1
 8001eaa:	781a      	ldrb	r2, [r3, #0]
 8001eac:	187b      	adds	r3, r7, r1
 8001eae:	3201      	adds	r2, #1
 8001eb0:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001eb2:	46c0      	nop			; (mov r8, r8)
 8001eb4:	4b1c      	ldr	r3, [pc, #112]	; (8001f28 <answer2CPU+0x6fc>)
 8001eb6:	69db      	ldr	r3, [r3, #28]
 8001eb8:	2280      	movs	r2, #128	; 0x80
 8001eba:	4013      	ands	r3, r2
 8001ebc:	d0fa      	beq.n	8001eb4 <answer2CPU+0x688>
				    	USART2->TDR = (uint8_t)ans[i];
 8001ebe:	230e      	movs	r3, #14
 8001ec0:	18fb      	adds	r3, r7, r3
 8001ec2:	781a      	ldrb	r2, [r3, #0]
 8001ec4:	4b17      	ldr	r3, [pc, #92]	; (8001f24 <answer2CPU+0x6f8>)
 8001ec6:	0052      	lsls	r2, r2, #1
 8001ec8:	5ad3      	ldrh	r3, [r2, r3]
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	4b16      	ldr	r3, [pc, #88]	; (8001f28 <answer2CPU+0x6fc>)
 8001ece:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001ed0:	230e      	movs	r3, #14
 8001ed2:	18fb      	adds	r3, r7, r3
 8001ed4:	781a      	ldrb	r2, [r3, #0]
 8001ed6:	4b13      	ldr	r3, [pc, #76]	; (8001f24 <answer2CPU+0x6f8>)
 8001ed8:	0052      	lsls	r2, r2, #1
 8001eda:	5ad3      	ldrh	r3, [r2, r3]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1e2      	bne.n	8001ea6 <answer2CPU+0x67a>
				  }
//				cmd2Execute=0x02;
			}
//===============================================================================================================================
			if (cmd[0] == 0x03) { //request of current consumption
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b03      	cmp	r3, #3
 8001ee6:	d000      	beq.n	8001eea <answer2CPU+0x6be>
 8001ee8:	e07c      	b.n	8001fe4 <answer2CPU+0x7b8>
				myLength = 0x04; //4 bytes length answer
 8001eea:	210c      	movs	r1, #12
 8001eec:	187b      	adds	r3, r7, r1
 8001eee:	2204      	movs	r2, #4
 8001ef0:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001ef2:	187b      	adds	r3, r7, r1
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	3b02      	subs	r3, #2
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <answer2CPU+0x6f8>)
 8001efe:	805a      	strh	r2, [r3, #2]
				ans[2] = currentConsumption;
 8001f00:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <answer2CPU+0x708>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	4b07      	ldr	r3, [pc, #28]	; (8001f24 <answer2CPU+0x6f8>)
 8001f08:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8001f0a:	230d      	movs	r3, #13
 8001f0c:	18fb      	adds	r3, r7, r3
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <answer2CPU+0x6f8>)
 8001f14:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8001f16:	230e      	movs	r3, #14
 8001f18:	18fb      	adds	r3, r7, r3
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	701a      	strb	r2, [r3, #0]
 8001f1e:	e01d      	b.n	8001f5c <answer2CPU+0x730>
 8001f20:	20000000 	.word	0x20000000
 8001f24:	2000040c 	.word	0x2000040c
 8001f28:	40004400 	.word	0x40004400
 8001f2c:	20000014 	.word	0x20000014
 8001f30:	20000020 	.word	0x20000020
 8001f34:	2000001c 	.word	0x2000001c
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8001f38:	200e      	movs	r0, #14
 8001f3a:	183b      	adds	r3, r7, r0
 8001f3c:	781a      	ldrb	r2, [r3, #0]
 8001f3e:	4b6d      	ldr	r3, [pc, #436]	; (80020f4 <answer2CPU+0x8c8>)
 8001f40:	0052      	lsls	r2, r2, #1
 8001f42:	5ad3      	ldrh	r3, [r2, r3]
 8001f44:	b2d9      	uxtb	r1, r3
 8001f46:	220d      	movs	r2, #13
 8001f48:	18bb      	adds	r3, r7, r2
 8001f4a:	18ba      	adds	r2, r7, r2
 8001f4c:	7812      	ldrb	r2, [r2, #0]
 8001f4e:	188a      	adds	r2, r1, r2
 8001f50:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001f52:	183b      	adds	r3, r7, r0
 8001f54:	781a      	ldrb	r2, [r3, #0]
 8001f56:	183b      	adds	r3, r7, r0
 8001f58:	3201      	adds	r2, #1
 8001f5a:	701a      	strb	r2, [r3, #0]
 8001f5c:	230e      	movs	r3, #14
 8001f5e:	18fb      	adds	r3, r7, r3
 8001f60:	781a      	ldrb	r2, [r3, #0]
 8001f62:	200c      	movs	r0, #12
 8001f64:	183b      	adds	r3, r7, r0
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	dbe4      	blt.n	8001f38 <answer2CPU+0x70c>
				}
				myCS = 0 - myCS;
 8001f6e:	210d      	movs	r1, #13
 8001f70:	187b      	adds	r3, r7, r1
 8001f72:	187a      	adds	r2, r7, r1
 8001f74:	7812      	ldrb	r2, [r2, #0]
 8001f76:	4252      	negs	r2, r2
 8001f78:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001f7a:	183b      	adds	r3, r7, r0
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	1e5a      	subs	r2, r3, #1
 8001f80:	187b      	adds	r3, r7, r1
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	b299      	uxth	r1, r3
 8001f86:	4b5b      	ldr	r3, [pc, #364]	; (80020f4 <answer2CPU+0x8c8>)
 8001f88:	0052      	lsls	r2, r2, #1
 8001f8a:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001f8c:	46c0      	nop			; (mov r8, r8)
 8001f8e:	4b5a      	ldr	r3, [pc, #360]	; (80020f8 <answer2CPU+0x8cc>)
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	2280      	movs	r2, #128	; 0x80
 8001f94:	4013      	ands	r3, r2
 8001f96:	d0fa      	beq.n	8001f8e <answer2CPU+0x762>
					USART2->TDR = ans[0]|0x0100;
 8001f98:	4b56      	ldr	r3, [pc, #344]	; (80020f4 <answer2CPU+0x8c8>)
 8001f9a:	881b      	ldrh	r3, [r3, #0]
 8001f9c:	2280      	movs	r2, #128	; 0x80
 8001f9e:	0052      	lsls	r2, r2, #1
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	4b54      	ldr	r3, [pc, #336]	; (80020f8 <answer2CPU+0x8cc>)
 8001fa6:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8001fa8:	e014      	b.n	8001fd4 <answer2CPU+0x7a8>
						{
						  i++;
 8001faa:	210e      	movs	r1, #14
 8001fac:	187b      	adds	r3, r7, r1
 8001fae:	781a      	ldrb	r2, [r3, #0]
 8001fb0:	187b      	adds	r3, r7, r1
 8001fb2:	3201      	adds	r2, #1
 8001fb4:	701a      	strb	r2, [r3, #0]
						  while(!(USART2->ISR & USART_ISR_TXE)){};
 8001fb6:	46c0      	nop			; (mov r8, r8)
 8001fb8:	4b4f      	ldr	r3, [pc, #316]	; (80020f8 <answer2CPU+0x8cc>)
 8001fba:	69db      	ldr	r3, [r3, #28]
 8001fbc:	2280      	movs	r2, #128	; 0x80
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d0fa      	beq.n	8001fb8 <answer2CPU+0x78c>
						     USART2->TDR = (uint8_t)ans[i];
 8001fc2:	230e      	movs	r3, #14
 8001fc4:	18fb      	adds	r3, r7, r3
 8001fc6:	781a      	ldrb	r2, [r3, #0]
 8001fc8:	4b4a      	ldr	r3, [pc, #296]	; (80020f4 <answer2CPU+0x8c8>)
 8001fca:	0052      	lsls	r2, r2, #1
 8001fcc:	5ad3      	ldrh	r3, [r2, r3]
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	4b49      	ldr	r3, [pc, #292]	; (80020f8 <answer2CPU+0x8cc>)
 8001fd2:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8001fd4:	230e      	movs	r3, #14
 8001fd6:	18fb      	adds	r3, r7, r3
 8001fd8:	781a      	ldrb	r2, [r3, #0]
 8001fda:	4b46      	ldr	r3, [pc, #280]	; (80020f4 <answer2CPU+0x8c8>)
 8001fdc:	0052      	lsls	r2, r2, #1
 8001fde:	5ad3      	ldrh	r3, [r2, r3]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1e2      	bne.n	8001faa <answer2CPU+0x77e>
						}
//					cmd2Execute=0x03;
			}
			if (cmd[0] == 0x04) { //request of current consumption
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b04      	cmp	r3, #4
 8001fea:	d000      	beq.n	8001fee <answer2CPU+0x7c2>
 8001fec:	e076      	b.n	80020dc <answer2CPU+0x8b0>
				myLength = 0x04; //4 bytes length answer
 8001fee:	210c      	movs	r1, #12
 8001ff0:	187b      	adds	r3, r7, r1
 8001ff2:	2204      	movs	r2, #4
 8001ff4:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001ff6:	187b      	adds	r3, r7, r1
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	3b02      	subs	r3, #2
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	4b3c      	ldr	r3, [pc, #240]	; (80020f4 <answer2CPU+0x8c8>)
 8002002:	805a      	strh	r2, [r3, #2]
				uartSpeed = cmd[2];
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3302      	adds	r3, #2
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	001a      	movs	r2, r3
 800200c:	4b3b      	ldr	r3, [pc, #236]	; (80020fc <answer2CPU+0x8d0>)
 800200e:	601a      	str	r2, [r3, #0]
				ans[2] = currentUARTspeed;
 8002010:	4b3b      	ldr	r3, [pc, #236]	; (8002100 <answer2CPU+0x8d4>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	b29a      	uxth	r2, r3
 8002016:	4b37      	ldr	r3, [pc, #220]	; (80020f4 <answer2CPU+0x8c8>)
 8002018:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 800201a:	230d      	movs	r3, #13
 800201c:	18fb      	adds	r3, r7, r3
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	b29a      	uxth	r2, r3
 8002022:	4b34      	ldr	r3, [pc, #208]	; (80020f4 <answer2CPU+0x8c8>)
 8002024:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8002026:	230e      	movs	r3, #14
 8002028:	18fb      	adds	r3, r7, r3
 800202a:	2200      	movs	r2, #0
 800202c:	701a      	strb	r2, [r3, #0]
 800202e:	e011      	b.n	8002054 <answer2CPU+0x828>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8002030:	200e      	movs	r0, #14
 8002032:	183b      	adds	r3, r7, r0
 8002034:	781a      	ldrb	r2, [r3, #0]
 8002036:	4b2f      	ldr	r3, [pc, #188]	; (80020f4 <answer2CPU+0x8c8>)
 8002038:	0052      	lsls	r2, r2, #1
 800203a:	5ad3      	ldrh	r3, [r2, r3]
 800203c:	b2d9      	uxtb	r1, r3
 800203e:	220d      	movs	r2, #13
 8002040:	18bb      	adds	r3, r7, r2
 8002042:	18ba      	adds	r2, r7, r2
 8002044:	7812      	ldrb	r2, [r2, #0]
 8002046:	188a      	adds	r2, r1, r2
 8002048:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 800204a:	183b      	adds	r3, r7, r0
 800204c:	781a      	ldrb	r2, [r3, #0]
 800204e:	183b      	adds	r3, r7, r0
 8002050:	3201      	adds	r2, #1
 8002052:	701a      	strb	r2, [r3, #0]
 8002054:	230e      	movs	r3, #14
 8002056:	18fb      	adds	r3, r7, r3
 8002058:	781a      	ldrb	r2, [r3, #0]
 800205a:	200c      	movs	r0, #12
 800205c:	183b      	adds	r3, r7, r0
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	3b01      	subs	r3, #1
 8002062:	429a      	cmp	r2, r3
 8002064:	dbe4      	blt.n	8002030 <answer2CPU+0x804>
				}
				myCS = 0 - myCS;
 8002066:	210d      	movs	r1, #13
 8002068:	187b      	adds	r3, r7, r1
 800206a:	187a      	adds	r2, r7, r1
 800206c:	7812      	ldrb	r2, [r2, #0]
 800206e:	4252      	negs	r2, r2
 8002070:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8002072:	183b      	adds	r3, r7, r0
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	1e5a      	subs	r2, r3, #1
 8002078:	187b      	adds	r3, r7, r1
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	b299      	uxth	r1, r3
 800207e:	4b1d      	ldr	r3, [pc, #116]	; (80020f4 <answer2CPU+0x8c8>)
 8002080:	0052      	lsls	r2, r2, #1
 8002082:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8002084:	46c0      	nop			; (mov r8, r8)
 8002086:	4b1c      	ldr	r3, [pc, #112]	; (80020f8 <answer2CPU+0x8cc>)
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	2280      	movs	r2, #128	; 0x80
 800208c:	4013      	ands	r3, r2
 800208e:	d0fa      	beq.n	8002086 <answer2CPU+0x85a>
				USART2->TDR = ans[0]|0x0100;
 8002090:	4b18      	ldr	r3, [pc, #96]	; (80020f4 <answer2CPU+0x8c8>)
 8002092:	881b      	ldrh	r3, [r3, #0]
 8002094:	2280      	movs	r2, #128	; 0x80
 8002096:	0052      	lsls	r2, r2, #1
 8002098:	4313      	orrs	r3, r2
 800209a:	b29a      	uxth	r2, r3
 800209c:	4b16      	ldr	r3, [pc, #88]	; (80020f8 <answer2CPU+0x8cc>)
 800209e:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 80020a0:	e014      	b.n	80020cc <answer2CPU+0x8a0>
				{
				  i++;
 80020a2:	210e      	movs	r1, #14
 80020a4:	187b      	adds	r3, r7, r1
 80020a6:	781a      	ldrb	r2, [r3, #0]
 80020a8:	187b      	adds	r3, r7, r1
 80020aa:	3201      	adds	r2, #1
 80020ac:	701a      	strb	r2, [r3, #0]
				  while(!(USART2->ISR & USART_ISR_TXE)){};
 80020ae:	46c0      	nop			; (mov r8, r8)
 80020b0:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <answer2CPU+0x8cc>)
 80020b2:	69db      	ldr	r3, [r3, #28]
 80020b4:	2280      	movs	r2, #128	; 0x80
 80020b6:	4013      	ands	r3, r2
 80020b8:	d0fa      	beq.n	80020b0 <answer2CPU+0x884>
				  USART2->TDR = (uint8_t)ans[i];
 80020ba:	230e      	movs	r3, #14
 80020bc:	18fb      	adds	r3, r7, r3
 80020be:	781a      	ldrb	r2, [r3, #0]
 80020c0:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <answer2CPU+0x8c8>)
 80020c2:	0052      	lsls	r2, r2, #1
 80020c4:	5ad3      	ldrh	r3, [r2, r3]
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <answer2CPU+0x8cc>)
 80020ca:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 80020cc:	230e      	movs	r3, #14
 80020ce:	18fb      	adds	r3, r7, r3
 80020d0:	781a      	ldrb	r2, [r3, #0]
 80020d2:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <answer2CPU+0x8c8>)
 80020d4:	0052      	lsls	r2, r2, #1
 80020d6:	5ad3      	ldrh	r3, [r2, r3]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1e2      	bne.n	80020a2 <answer2CPU+0x876>
				}
//				cmd2Execute=0x04;
			}
//			weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, coala);
			USART2->ICR|=USART_ICR_ORECF;
 80020dc:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <answer2CPU+0x8cc>)
 80020de:	6a1a      	ldr	r2, [r3, #32]
 80020e0:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <answer2CPU+0x8cc>)
 80020e2:	2108      	movs	r1, #8
 80020e4:	430a      	orrs	r2, r1
 80020e6:	621a      	str	r2, [r3, #32]
}
 80020e8:	46c0      	nop			; (mov r8, r8)
 80020ea:	0018      	movs	r0, r3
 80020ec:	46bd      	mov	sp, r7
 80020ee:	b004      	add	sp, #16
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	2000040c 	.word	0x2000040c
 80020f8:	40004400 	.word	0x40004400
 80020fc:	200003d4 	.word	0x200003d4
 8002100:	200003c9 	.word	0x200003c9

08002104 <MEM_Reset>:
//==================================================================================================================================
	void MEM_Reset(void) {
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
		uint8_t memCMD;
		HAL_Delay(1); //200 ms by Andrew
 800210a:	2001      	movs	r0, #1
 800210c:	f003 f9b8 	bl	8005480 <HAL_Delay>
		GPIOB->ODR &= ~(1 << 9); //reset cs
 8002110:	4b28      	ldr	r3, [pc, #160]	; (80021b4 <MEM_Reset+0xb0>)
 8002112:	695a      	ldr	r2, [r3, #20]
 8002114:	4b27      	ldr	r3, [pc, #156]	; (80021b4 <MEM_Reset+0xb0>)
 8002116:	4928      	ldr	r1, [pc, #160]	; (80021b8 <MEM_Reset+0xb4>)
 8002118:	400a      	ands	r2, r1
 800211a:	615a      	str	r2, [r3, #20]
		memCMD = 0x66;
 800211c:	1dfb      	adds	r3, r7, #7
 800211e:	2266      	movs	r2, #102	; 0x66
 8002120:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8002122:	1df9      	adds	r1, r7, #7
 8002124:	4825      	ldr	r0, [pc, #148]	; (80021bc <MEM_Reset+0xb8>)
 8002126:	2305      	movs	r3, #5
 8002128:	2201      	movs	r2, #1
 800212a:	f007 f91f 	bl	800936c <HAL_SPI_Transmit>
		GPIOB->ODR |= 1 << 9; // set cs
 800212e:	4b21      	ldr	r3, [pc, #132]	; (80021b4 <MEM_Reset+0xb0>)
 8002130:	695a      	ldr	r2, [r3, #20]
 8002132:	4b20      	ldr	r3, [pc, #128]	; (80021b4 <MEM_Reset+0xb0>)
 8002134:	2180      	movs	r1, #128	; 0x80
 8002136:	0089      	lsls	r1, r1, #2
 8002138:	430a      	orrs	r2, r1
 800213a:	615a      	str	r2, [r3, #20]
		asm("NOP");
 800213c:	46c0      	nop			; (mov r8, r8)
		__NOP();
 800213e:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8002140:	46c0      	nop			; (mov r8, r8)
		__NOP();			//May be less NOPs?
 8002142:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8002144:	46c0      	nop			; (mov r8, r8)
		__NOP();
 8002146:	46c0      	nop			; (mov r8, r8)
		GPIOB->ODR &= ~(1 << 9);			//reset cs
 8002148:	4b1a      	ldr	r3, [pc, #104]	; (80021b4 <MEM_Reset+0xb0>)
 800214a:	695a      	ldr	r2, [r3, #20]
 800214c:	4b19      	ldr	r3, [pc, #100]	; (80021b4 <MEM_Reset+0xb0>)
 800214e:	491a      	ldr	r1, [pc, #104]	; (80021b8 <MEM_Reset+0xb4>)
 8002150:	400a      	ands	r2, r1
 8002152:	615a      	str	r2, [r3, #20]
		memCMD = 0x99;
 8002154:	1dfb      	adds	r3, r7, #7
 8002156:	2299      	movs	r2, #153	; 0x99
 8002158:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset memory
 800215a:	1df9      	adds	r1, r7, #7
 800215c:	4817      	ldr	r0, [pc, #92]	; (80021bc <MEM_Reset+0xb8>)
 800215e:	2305      	movs	r3, #5
 8002160:	2201      	movs	r2, #1
 8002162:	f007 f903 	bl	800936c <HAL_SPI_Transmit>
		GPIOB->ODR |= 1 << 9; // set cs
 8002166:	4b13      	ldr	r3, [pc, #76]	; (80021b4 <MEM_Reset+0xb0>)
 8002168:	695a      	ldr	r2, [r3, #20]
 800216a:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <MEM_Reset+0xb0>)
 800216c:	2180      	movs	r1, #128	; 0x80
 800216e:	0089      	lsls	r1, r1, #2
 8002170:	430a      	orrs	r2, r1
 8002172:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8002174:	2001      	movs	r0, #1
 8002176:	f003 f983 	bl	8005480 <HAL_Delay>
//=============================================================================================================
		memCMD = 0xB7;												//	Activation 0f 4-bytes address mode
 800217a:	1dfb      	adds	r3, r7, #7
 800217c:	22b7      	movs	r2, #183	; 0xb7
 800217e:	701a      	strb	r2, [r3, #0]
		GPIOB->ODR &= ~(1 << 9); //reset cs
 8002180:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <MEM_Reset+0xb0>)
 8002182:	695a      	ldr	r2, [r3, #20]
 8002184:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <MEM_Reset+0xb0>)
 8002186:	490c      	ldr	r1, [pc, #48]	; (80021b8 <MEM_Reset+0xb4>)
 8002188:	400a      	ands	r2, r1
 800218a:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 800218c:	1df9      	adds	r1, r7, #7
 800218e:	480b      	ldr	r0, [pc, #44]	; (80021bc <MEM_Reset+0xb8>)
 8002190:	2305      	movs	r3, #5
 8002192:	2201      	movs	r2, #1
 8002194:	f007 f8ea 	bl	800936c <HAL_SPI_Transmit>
		GPIOB->ODR |= 1 << 9; // set cs
 8002198:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <MEM_Reset+0xb0>)
 800219a:	695a      	ldr	r2, [r3, #20]
 800219c:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <MEM_Reset+0xb0>)
 800219e:	2180      	movs	r1, #128	; 0x80
 80021a0:	0089      	lsls	r1, r1, #2
 80021a2:	430a      	orrs	r2, r1
 80021a4:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 80021a6:	2001      	movs	r0, #1
 80021a8:	f003 f96a 	bl	8005480 <HAL_Delay>
	}
 80021ac:	46c0      	nop			; (mov r8, r8)
 80021ae:	46bd      	mov	sp, r7
 80021b0:	b002      	add	sp, #8
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	50000400 	.word	0x50000400
 80021b8:	fffffdff 	.word	0xfffffdff
 80021bc:	200001a0 	.word	0x200001a0

080021c0 <weoShowFullScreen>:
//==================================================================================================================================
	uint8_t weoShowFullScreen(uint8_t picNum) {
 80021c0:	b5b0      	push	{r4, r5, r7, lr}
 80021c2:	4c42      	ldr	r4, [pc, #264]	; (80022cc <weoShowFullScreen+0x10c>)
 80021c4:	44a5      	add	sp, r4
 80021c6:	af02      	add	r7, sp, #8
 80021c8:	0002      	movs	r2, r0
 80021ca:	4b41      	ldr	r3, [pc, #260]	; (80022d0 <weoShowFullScreen+0x110>)
 80021cc:	4941      	ldr	r1, [pc, #260]	; (80022d4 <weoShowFullScreen+0x114>)
 80021ce:	185b      	adds	r3, r3, r1
 80021d0:	19db      	adds	r3, r3, r7
 80021d2:	701a      	strb	r2, [r3, #0]
		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H;
		uint8_t MEM_Buffer[8192], firstImAddrArray[4],addrArray[4];
		uint16_t i, len;
		uint32_t addrInfo,addr,firstImAddr;
		memCMD = 0x13; //read command with 4-byte address
 80021d4:	4c40      	ldr	r4, [pc, #256]	; (80022d8 <weoShowFullScreen+0x118>)
 80021d6:	193b      	adds	r3, r7, r4
 80021d8:	2213      	movs	r2, #19
 80021da:	701a      	strb	r2, [r3, #0]
//		picNum=0x02;
		addr=(picNum)*0x2000;
 80021dc:	4b3c      	ldr	r3, [pc, #240]	; (80022d0 <weoShowFullScreen+0x110>)
 80021de:	185b      	adds	r3, r3, r1
 80021e0:	19db      	adds	r3, r3, r7
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	035b      	lsls	r3, r3, #13
 80021e6:	483d      	ldr	r0, [pc, #244]	; (80022dc <weoShowFullScreen+0x11c>)
 80021e8:	183a      	adds	r2, r7, r0
 80021ea:	6013      	str	r3, [r2, #0]
//		addr=0x00003800;
		addrArray[0]=addr & 0xFF;
 80021ec:	183b      	adds	r3, r7, r0
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	4b3b      	ldr	r3, [pc, #236]	; (80022e0 <weoShowFullScreen+0x120>)
 80021f4:	185b      	adds	r3, r3, r1
 80021f6:	19db      	adds	r3, r3, r7
 80021f8:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 80021fa:	183b      	adds	r3, r7, r0
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	0a1b      	lsrs	r3, r3, #8
 8002200:	b2da      	uxtb	r2, r3
 8002202:	4b37      	ldr	r3, [pc, #220]	; (80022e0 <weoShowFullScreen+0x120>)
 8002204:	185b      	adds	r3, r3, r1
 8002206:	19db      	adds	r3, r3, r7
 8002208:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 800220a:	183b      	adds	r3, r7, r0
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	0c1b      	lsrs	r3, r3, #16
 8002210:	b2da      	uxtb	r2, r3
 8002212:	4b33      	ldr	r3, [pc, #204]	; (80022e0 <weoShowFullScreen+0x120>)
 8002214:	185b      	adds	r3, r3, r1
 8002216:	19db      	adds	r3, r3, r7
 8002218:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 800221a:	183b      	adds	r3, r7, r0
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	0e1b      	lsrs	r3, r3, #24
 8002220:	b2da      	uxtb	r2, r3
 8002222:	4b2f      	ldr	r3, [pc, #188]	; (80022e0 <weoShowFullScreen+0x120>)
 8002224:	185b      	adds	r3, r3, r1
 8002226:	19db      	adds	r3, r3, r7
 8002228:	70da      	strb	r2, [r3, #3]

		GPIOB->ODR &= ~(1 << 9); //reset cs
 800222a:	4b2e      	ldr	r3, [pc, #184]	; (80022e4 <weoShowFullScreen+0x124>)
 800222c:	695a      	ldr	r2, [r3, #20]
 800222e:	4b2d      	ldr	r3, [pc, #180]	; (80022e4 <weoShowFullScreen+0x124>)
 8002230:	492d      	ldr	r1, [pc, #180]	; (80022e8 <weoShowFullScreen+0x128>)
 8002232:	400a      	ands	r2, r1
 8002234:	615a      	str	r2, [r3, #20]
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 8002236:	1939      	adds	r1, r7, r4
 8002238:	482c      	ldr	r0, [pc, #176]	; (80022ec <weoShowFullScreen+0x12c>)
 800223a:	2332      	movs	r3, #50	; 0x32
 800223c:	2201      	movs	r2, #1
 800223e:	f007 f895 	bl	800936c <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 8002242:	2408      	movs	r4, #8
 8002244:	193b      	adds	r3, r7, r4
 8002246:	1cd9      	adds	r1, r3, #3
 8002248:	4828      	ldr	r0, [pc, #160]	; (80022ec <weoShowFullScreen+0x12c>)
 800224a:	2332      	movs	r3, #50	; 0x32
 800224c:	2201      	movs	r2, #1
 800224e:	f007 f88d 	bl	800936c <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 8002252:	193b      	adds	r3, r7, r4
 8002254:	1c99      	adds	r1, r3, #2
 8002256:	4825      	ldr	r0, [pc, #148]	; (80022ec <weoShowFullScreen+0x12c>)
 8002258:	2332      	movs	r3, #50	; 0x32
 800225a:	2201      	movs	r2, #1
 800225c:	f007 f886 	bl	800936c <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 8002260:	193b      	adds	r3, r7, r4
 8002262:	1c59      	adds	r1, r3, #1
 8002264:	4821      	ldr	r0, [pc, #132]	; (80022ec <weoShowFullScreen+0x12c>)
 8002266:	2332      	movs	r3, #50	; 0x32
 8002268:	2201      	movs	r2, #1
 800226a:	f007 f87f 	bl	800936c <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 800226e:	1939      	adds	r1, r7, r4
 8002270:	481e      	ldr	r0, [pc, #120]	; (80022ec <weoShowFullScreen+0x12c>)
 8002272:	2332      	movs	r3, #50	; 0x32
 8002274:	2201      	movs	r2, #1
 8002276:	f007 f879 	bl	800936c <HAL_SPI_Transmit>
			HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,8192, 5000);
 800227a:	4c1d      	ldr	r4, [pc, #116]	; (80022f0 <weoShowFullScreen+0x130>)
 800227c:	2380      	movs	r3, #128	; 0x80
 800227e:	019a      	lsls	r2, r3, #6
 8002280:	2510      	movs	r5, #16
 8002282:	1979      	adds	r1, r7, r5
 8002284:	4819      	ldr	r0, [pc, #100]	; (80022ec <weoShowFullScreen+0x12c>)
 8002286:	0023      	movs	r3, r4
 8002288:	f007 f9c8 	bl	800961c <HAL_SPI_Receive>
		GPIOB->ODR |= 1 << 9; // set cs
 800228c:	4b15      	ldr	r3, [pc, #84]	; (80022e4 <weoShowFullScreen+0x124>)
 800228e:	695a      	ldr	r2, [r3, #20]
 8002290:	4b14      	ldr	r3, [pc, #80]	; (80022e4 <weoShowFullScreen+0x124>)
 8002292:	2180      	movs	r1, #128	; 0x80
 8002294:	0089      	lsls	r1, r1, #2
 8002296:	430a      	orrs	r2, r1
 8002298:	615a      	str	r2, [r3, #20]

		weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, MEM_Buffer); // Здесь ещё работает
 800229a:	197b      	adds	r3, r7, r5
 800229c:	9301      	str	r3, [sp, #4]
 800229e:	23ff      	movs	r3, #255	; 0xff
 80022a0:	9300      	str	r3, [sp, #0]
 80022a2:	237f      	movs	r3, #127	; 0x7f
 80022a4:	227f      	movs	r2, #127	; 0x7f
 80022a6:	2100      	movs	r1, #0
 80022a8:	2000      	movs	r0, #0
 80022aa:	f7ff f90f 	bl	80014cc <weoDrawRectangleFilled>
		cmd2Execute=0;
 80022ae:	4b11      	ldr	r3, [pc, #68]	; (80022f4 <weoShowFullScreen+0x134>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	701a      	strb	r2, [r3, #0]
//		while(BFEN==0){};
		GPIOC->ODR |= 1 << 6;	//set BF
 80022b4:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <weoShowFullScreen+0x138>)
 80022b6:	695a      	ldr	r2, [r3, #20]
 80022b8:	4b0f      	ldr	r3, [pc, #60]	; (80022f8 <weoShowFullScreen+0x138>)
 80022ba:	2140      	movs	r1, #64	; 0x40
 80022bc:	430a      	orrs	r2, r1
 80022be:	615a      	str	r2, [r3, #20]
	}
 80022c0:	46c0      	nop			; (mov r8, r8)
 80022c2:	0018      	movs	r0, r3
 80022c4:	46bd      	mov	sp, r7
 80022c6:	4b03      	ldr	r3, [pc, #12]	; (80022d4 <weoShowFullScreen+0x114>)
 80022c8:	449d      	add	sp, r3
 80022ca:	bdb0      	pop	{r4, r5, r7, pc}
 80022cc:	ffffdfe0 	.word	0xffffdfe0
 80022d0:	ffffdfef 	.word	0xffffdfef
 80022d4:	00002018 	.word	0x00002018
 80022d8:	00002013 	.word	0x00002013
 80022dc:	00002014 	.word	0x00002014
 80022e0:	ffffdff0 	.word	0xffffdff0
 80022e4:	50000400 	.word	0x50000400
 80022e8:	fffffdff 	.word	0xfffffdff
 80022ec:	200001a0 	.word	0x200001a0
 80022f0:	00001388 	.word	0x00001388
 80022f4:	20000426 	.word	0x20000426
 80022f8:	50000800 	.word	0x50000800

080022fc <weoShowSmallImage>:
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &MEM_Buffer ,len);
	}
//==========================================================================================================================
	uint8_t weoShowSmallImage(uint8_t picNum, uint8_t imX, uint8_t imY) {
 80022fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022fe:	4c9f      	ldr	r4, [pc, #636]	; (800257c <weoShowSmallImage+0x280>)
 8002300:	44a5      	add	sp, r4
 8002302:	af02      	add	r7, sp, #8
 8002304:	0004      	movs	r4, r0
 8002306:	0008      	movs	r0, r1
 8002308:	0011      	movs	r1, r2
 800230a:	4b9d      	ldr	r3, [pc, #628]	; (8002580 <weoShowSmallImage+0x284>)
 800230c:	4d9d      	ldr	r5, [pc, #628]	; (8002584 <weoShowSmallImage+0x288>)
 800230e:	195b      	adds	r3, r3, r5
 8002310:	19db      	adds	r3, r3, r7
 8002312:	1c22      	adds	r2, r4, #0
 8002314:	701a      	strb	r2, [r3, #0]
 8002316:	4b9c      	ldr	r3, [pc, #624]	; (8002588 <weoShowSmallImage+0x28c>)
 8002318:	002c      	movs	r4, r5
 800231a:	191b      	adds	r3, r3, r4
 800231c:	19db      	adds	r3, r3, r7
 800231e:	1c02      	adds	r2, r0, #0
 8002320:	701a      	strb	r2, [r3, #0]
 8002322:	4b9a      	ldr	r3, [pc, #616]	; (800258c <weoShowSmallImage+0x290>)
 8002324:	0020      	movs	r0, r4
 8002326:	181b      	adds	r3, r3, r0
 8002328:	19db      	adds	r3, r3, r7
 800232a:	1c0a      	adds	r2, r1, #0
 800232c:	701a      	strb	r2, [r3, #0]
		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H;
		uint8_t MEM_Buffer[8192];
		uint8_t imInfo[2],addrArray[4];
		uint16_t i;
		uint32_t addr,addrData;
		addr=0x00000000;
 800232e:	2300      	movs	r3, #0
 8002330:	4c97      	ldr	r4, [pc, #604]	; (8002590 <weoShowSmallImage+0x294>)
 8002332:	193a      	adds	r2, r7, r4
 8002334:	6013      	str	r3, [r2, #0]
		memCMD = 0x13; //read command with 4-byte address
 8002336:	4d97      	ldr	r5, [pc, #604]	; (8002594 <weoShowSmallImage+0x298>)
 8002338:	197b      	adds	r3, r7, r5
 800233a:	2213      	movs	r2, #19
 800233c:	701a      	strb	r2, [r3, #0]
		//look at info about image
		addr=(picNum*0x2000)+0x200000;// the right path is to multiply picNum * image repeat period!
 800233e:	4b90      	ldr	r3, [pc, #576]	; (8002580 <weoShowSmallImage+0x284>)
 8002340:	0001      	movs	r1, r0
 8002342:	185b      	adds	r3, r3, r1
 8002344:	19db      	adds	r3, r3, r7
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	3301      	adds	r3, #1
 800234a:	33ff      	adds	r3, #255	; 0xff
 800234c:	035b      	lsls	r3, r3, #13
 800234e:	0026      	movs	r6, r4
 8002350:	19ba      	adds	r2, r7, r6
 8002352:	6013      	str	r3, [r2, #0]
//		addr=(picNum*0x2000);

		addrArray[0]=addr & 0xFF;
 8002354:	19bb      	adds	r3, r7, r6
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	b2da      	uxtb	r2, r3
 800235a:	4b8f      	ldr	r3, [pc, #572]	; (8002598 <weoShowSmallImage+0x29c>)
 800235c:	000c      	movs	r4, r1
 800235e:	191b      	adds	r3, r3, r4
 8002360:	19db      	adds	r3, r3, r7
 8002362:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 8002364:	19bb      	adds	r3, r7, r6
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	0a1b      	lsrs	r3, r3, #8
 800236a:	b2da      	uxtb	r2, r3
 800236c:	4b8a      	ldr	r3, [pc, #552]	; (8002598 <weoShowSmallImage+0x29c>)
 800236e:	191b      	adds	r3, r3, r4
 8002370:	19db      	adds	r3, r3, r7
 8002372:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 8002374:	19bb      	adds	r3, r7, r6
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	0c1b      	lsrs	r3, r3, #16
 800237a:	b2da      	uxtb	r2, r3
 800237c:	4b86      	ldr	r3, [pc, #536]	; (8002598 <weoShowSmallImage+0x29c>)
 800237e:	191b      	adds	r3, r3, r4
 8002380:	19db      	adds	r3, r3, r7
 8002382:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 8002384:	19bb      	adds	r3, r7, r6
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	0e1b      	lsrs	r3, r3, #24
 800238a:	b2da      	uxtb	r2, r3
 800238c:	4b82      	ldr	r3, [pc, #520]	; (8002598 <weoShowSmallImage+0x29c>)
 800238e:	191b      	adds	r3, r3, r4
 8002390:	19db      	adds	r3, r3, r7
 8002392:	70da      	strb	r2, [r3, #3]

		GPIOB->ODR &= ~(1 << 9); //reset cs
 8002394:	4b81      	ldr	r3, [pc, #516]	; (800259c <weoShowSmallImage+0x2a0>)
 8002396:	695a      	ldr	r2, [r3, #20]
 8002398:	4b80      	ldr	r3, [pc, #512]	; (800259c <weoShowSmallImage+0x2a0>)
 800239a:	4981      	ldr	r1, [pc, #516]	; (80025a0 <weoShowSmallImage+0x2a4>)
 800239c:	400a      	ands	r2, r1
 800239e:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 80023a0:	1979      	adds	r1, r7, r5
 80023a2:	4880      	ldr	r0, [pc, #512]	; (80025a4 <weoShowSmallImage+0x2a8>)
 80023a4:	2332      	movs	r3, #50	; 0x32
 80023a6:	2201      	movs	r2, #1
 80023a8:	f006 ffe0 	bl	800936c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 80023ac:	2508      	movs	r5, #8
 80023ae:	197b      	adds	r3, r7, r5
 80023b0:	1cd9      	adds	r1, r3, #3
 80023b2:	487c      	ldr	r0, [pc, #496]	; (80025a4 <weoShowSmallImage+0x2a8>)
 80023b4:	2332      	movs	r3, #50	; 0x32
 80023b6:	2201      	movs	r2, #1
 80023b8:	f006 ffd8 	bl	800936c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 80023bc:	197b      	adds	r3, r7, r5
 80023be:	1c99      	adds	r1, r3, #2
 80023c0:	4878      	ldr	r0, [pc, #480]	; (80025a4 <weoShowSmallImage+0x2a8>)
 80023c2:	2332      	movs	r3, #50	; 0x32
 80023c4:	2201      	movs	r2, #1
 80023c6:	f006 ffd1 	bl	800936c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 80023ca:	197b      	adds	r3, r7, r5
 80023cc:	1c59      	adds	r1, r3, #1
 80023ce:	4875      	ldr	r0, [pc, #468]	; (80025a4 <weoShowSmallImage+0x2a8>)
 80023d0:	2332      	movs	r3, #50	; 0x32
 80023d2:	2201      	movs	r2, #1
 80023d4:	f006 ffca 	bl	800936c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 80023d8:	1979      	adds	r1, r7, r5
 80023da:	4872      	ldr	r0, [pc, #456]	; (80025a4 <weoShowSmallImage+0x2a8>)
 80023dc:	2332      	movs	r3, #50	; 0x32
 80023de:	2201      	movs	r2, #1
 80023e0:	f006 ffc4 	bl	800936c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &imInfo,2, 5000);
 80023e4:	4b70      	ldr	r3, [pc, #448]	; (80025a8 <weoShowSmallImage+0x2ac>)
 80023e6:	220c      	movs	r2, #12
 80023e8:	18b9      	adds	r1, r7, r2
 80023ea:	486e      	ldr	r0, [pc, #440]	; (80025a4 <weoShowSmallImage+0x2a8>)
 80023ec:	2202      	movs	r2, #2
 80023ee:	f007 f915 	bl	800961c <HAL_SPI_Receive>
		GPIOB->ODR |= 1 << 9; // set cs
 80023f2:	4b6a      	ldr	r3, [pc, #424]	; (800259c <weoShowSmallImage+0x2a0>)
 80023f4:	695a      	ldr	r2, [r3, #20]
 80023f6:	4b69      	ldr	r3, [pc, #420]	; (800259c <weoShowSmallImage+0x2a0>)
 80023f8:	2180      	movs	r1, #128	; 0x80
 80023fa:	0089      	lsls	r1, r1, #2
 80023fc:	430a      	orrs	r2, r1
 80023fe:	615a      	str	r2, [r3, #20]

		width=imInfo[0];
 8002400:	4b6a      	ldr	r3, [pc, #424]	; (80025ac <weoShowSmallImage+0x2b0>)
 8002402:	0018      	movs	r0, r3
 8002404:	18fb      	adds	r3, r7, r3
 8002406:	4a6a      	ldr	r2, [pc, #424]	; (80025b0 <weoShowSmallImage+0x2b4>)
 8002408:	0021      	movs	r1, r4
 800240a:	1852      	adds	r2, r2, r1
 800240c:	19d2      	adds	r2, r2, r7
 800240e:	7812      	ldrb	r2, [r2, #0]
 8002410:	701a      	strb	r2, [r3, #0]
		height=imInfo[1];
 8002412:	4c68      	ldr	r4, [pc, #416]	; (80025b4 <weoShowSmallImage+0x2b8>)
 8002414:	193b      	adds	r3, r7, r4
 8002416:	4a66      	ldr	r2, [pc, #408]	; (80025b0 <weoShowSmallImage+0x2b4>)
 8002418:	1852      	adds	r2, r2, r1
 800241a:	19d2      	adds	r2, r2, r7
 800241c:	7852      	ldrb	r2, [r2, #1]
 800241e:	701a      	strb	r2, [r3, #0]
//		len=(width*(height/2));

//		if(width % 2 !=0){
//			width-=0x01;
//		}
		len=((width+0)*((height)/2));
 8002420:	0003      	movs	r3, r0
 8002422:	18fb      	adds	r3, r7, r3
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	b29b      	uxth	r3, r3
 8002428:	193a      	adds	r2, r7, r4
 800242a:	7812      	ldrb	r2, [r2, #0]
 800242c:	0852      	lsrs	r2, r2, #1
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	b292      	uxth	r2, r2
 8002432:	4353      	muls	r3, r2
 8002434:	b29a      	uxth	r2, r3
 8002436:	4b60      	ldr	r3, [pc, #384]	; (80025b8 <weoShowSmallImage+0x2bc>)
 8002438:	801a      	strh	r2, [r3, #0]

		addrData=addr+0x02;
 800243a:	19ba      	adds	r2, r7, r6
 800243c:	6813      	ldr	r3, [r2, #0]
 800243e:	3302      	adds	r3, #2
 8002440:	485e      	ldr	r0, [pc, #376]	; (80025bc <weoShowSmallImage+0x2c0>)
 8002442:	183a      	adds	r2, r7, r0
 8002444:	6013      	str	r3, [r2, #0]
		addrArray[0]=addrData & 0xFF;
 8002446:	183a      	adds	r2, r7, r0
 8002448:	6813      	ldr	r3, [r2, #0]
 800244a:	b2da      	uxtb	r2, r3
 800244c:	4b52      	ldr	r3, [pc, #328]	; (8002598 <weoShowSmallImage+0x29c>)
 800244e:	000c      	movs	r4, r1
 8002450:	1919      	adds	r1, r3, r4
 8002452:	19cb      	adds	r3, r1, r7
 8002454:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addrData >> 8) & 0xFF;
 8002456:	0001      	movs	r1, r0
 8002458:	187a      	adds	r2, r7, r1
 800245a:	6813      	ldr	r3, [r2, #0]
 800245c:	0a1b      	lsrs	r3, r3, #8
 800245e:	b2da      	uxtb	r2, r3
 8002460:	4b4d      	ldr	r3, [pc, #308]	; (8002598 <weoShowSmallImage+0x29c>)
 8002462:	191e      	adds	r6, r3, r4
 8002464:	19f3      	adds	r3, r6, r7
 8002466:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addrData >> 16) & 0xFF;
 8002468:	187a      	adds	r2, r7, r1
 800246a:	6813      	ldr	r3, [r2, #0]
 800246c:	0c1b      	lsrs	r3, r3, #16
 800246e:	b2da      	uxtb	r2, r3
 8002470:	4b49      	ldr	r3, [pc, #292]	; (8002598 <weoShowSmallImage+0x29c>)
 8002472:	191e      	adds	r6, r3, r4
 8002474:	19f3      	adds	r3, r6, r7
 8002476:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addrData >> 24) & 0xFF;
 8002478:	187a      	adds	r2, r7, r1
 800247a:	6813      	ldr	r3, [r2, #0]
 800247c:	0e1b      	lsrs	r3, r3, #24
 800247e:	b2da      	uxtb	r2, r3
 8002480:	4b45      	ldr	r3, [pc, #276]	; (8002598 <weoShowSmallImage+0x29c>)
 8002482:	1919      	adds	r1, r3, r4
 8002484:	19cb      	adds	r3, r1, r7
 8002486:	70da      	strb	r2, [r3, #3]

		USART2->ICR|=USART_ICR_ORECF;
 8002488:	4b4d      	ldr	r3, [pc, #308]	; (80025c0 <weoShowSmallImage+0x2c4>)
 800248a:	6a1a      	ldr	r2, [r3, #32]
 800248c:	4b4c      	ldr	r3, [pc, #304]	; (80025c0 <weoShowSmallImage+0x2c4>)
 800248e:	2108      	movs	r1, #8
 8002490:	430a      	orrs	r2, r1
 8002492:	621a      	str	r2, [r3, #32]
		memCMD = 0x13; //read command with 4-byte address
 8002494:	483f      	ldr	r0, [pc, #252]	; (8002594 <weoShowSmallImage+0x298>)
 8002496:	183b      	adds	r3, r7, r0
 8002498:	2213      	movs	r2, #19
 800249a:	701a      	strb	r2, [r3, #0]

		GPIOB->ODR &= ~(1 <<9);	//reset cs
 800249c:	4b3f      	ldr	r3, [pc, #252]	; (800259c <weoShowSmallImage+0x2a0>)
 800249e:	695a      	ldr	r2, [r3, #20]
 80024a0:	4b3e      	ldr	r3, [pc, #248]	; (800259c <weoShowSmallImage+0x2a0>)
 80024a2:	493f      	ldr	r1, [pc, #252]	; (80025a0 <weoShowSmallImage+0x2a4>)
 80024a4:	400a      	ands	r2, r1
 80024a6:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50);//read command with 4-byte address
 80024a8:	1839      	adds	r1, r7, r0
 80024aa:	483e      	ldr	r0, [pc, #248]	; (80025a4 <weoShowSmallImage+0x2a8>)
 80024ac:	2332      	movs	r3, #50	; 0x32
 80024ae:	2201      	movs	r2, #1
 80024b0:	f006 ff5c 	bl	800936c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3],1, 50);	//send address
 80024b4:	197b      	adds	r3, r7, r5
 80024b6:	1cd9      	adds	r1, r3, #3
 80024b8:	483a      	ldr	r0, [pc, #232]	; (80025a4 <weoShowSmallImage+0x2a8>)
 80024ba:	2332      	movs	r3, #50	; 0x32
 80024bc:	2201      	movs	r2, #1
 80024be:	f006 ff55 	bl	800936c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2],1, 50);	//send address
 80024c2:	197b      	adds	r3, r7, r5
 80024c4:	1c99      	adds	r1, r3, #2
 80024c6:	4837      	ldr	r0, [pc, #220]	; (80025a4 <weoShowSmallImage+0x2a8>)
 80024c8:	2332      	movs	r3, #50	; 0x32
 80024ca:	2201      	movs	r2, #1
 80024cc:	f006 ff4e 	bl	800936c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1],1, 50);	//send address
 80024d0:	197b      	adds	r3, r7, r5
 80024d2:	1c59      	adds	r1, r3, #1
 80024d4:	4833      	ldr	r0, [pc, #204]	; (80025a4 <weoShowSmallImage+0x2a8>)
 80024d6:	2332      	movs	r3, #50	; 0x32
 80024d8:	2201      	movs	r2, #1
 80024da:	f006 ff47 	bl	800936c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0],1, 50);	//send address
 80024de:	1979      	adds	r1, r7, r5
 80024e0:	4830      	ldr	r0, [pc, #192]	; (80025a4 <weoShowSmallImage+0x2a8>)
 80024e2:	2332      	movs	r3, #50	; 0x32
 80024e4:	2201      	movs	r2, #1
 80024e6:	f006 ff41 	bl	800936c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,len, 5000);// 7 information bits about the image
 80024ea:	4b33      	ldr	r3, [pc, #204]	; (80025b8 <weoShowSmallImage+0x2bc>)
 80024ec:	881a      	ldrh	r2, [r3, #0]
 80024ee:	4b2e      	ldr	r3, [pc, #184]	; (80025a8 <weoShowSmallImage+0x2ac>)
 80024f0:	2510      	movs	r5, #16
 80024f2:	1979      	adds	r1, r7, r5
 80024f4:	482b      	ldr	r0, [pc, #172]	; (80025a4 <weoShowSmallImage+0x2a8>)
 80024f6:	f007 f891 	bl	800961c <HAL_SPI_Receive>
		GPIOB->ODR |= 1 << 9;	// set cs
 80024fa:	4b28      	ldr	r3, [pc, #160]	; (800259c <weoShowSmallImage+0x2a0>)
 80024fc:	695a      	ldr	r2, [r3, #20]
 80024fe:	4b27      	ldr	r3, [pc, #156]	; (800259c <weoShowSmallImage+0x2a0>)
 8002500:	2180      	movs	r1, #128	; 0x80
 8002502:	0089      	lsls	r1, r1, #2
 8002504:	430a      	orrs	r2, r1
 8002506:	615a      	str	r2, [r3, #20]

		decY=1;
 8002508:	4b2e      	ldr	r3, [pc, #184]	; (80025c4 <weoShowSmallImage+0x2c8>)
 800250a:	2201      	movs	r2, #1
 800250c:	701a      	strb	r2, [r3, #0]
//			decY=2;
//		}
//		imX = 0;
//		imY = 0;
//		weoDrawRectangleFilled(imX, imY, imX+width-1, imY+height-decY, 0xFF,MEM_Buffer);//classic	// Здесь ещё работает 0xFF - затычка
		weoDrawRectangleFilled(imX, imY, imX + width-1, (imY + height-1), 0xFF, MEM_Buffer);
 800250e:	4b1e      	ldr	r3, [pc, #120]	; (8002588 <weoShowSmallImage+0x28c>)
 8002510:	0021      	movs	r1, r4
 8002512:	185a      	adds	r2, r3, r1
 8002514:	19d2      	adds	r2, r2, r7
 8002516:	4b25      	ldr	r3, [pc, #148]	; (80025ac <weoShowSmallImage+0x2b0>)
 8002518:	18fb      	adds	r3, r7, r3
 800251a:	7812      	ldrb	r2, [r2, #0]
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	18d3      	adds	r3, r2, r3
 8002520:	b2db      	uxtb	r3, r3
 8002522:	3b01      	subs	r3, #1
 8002524:	b2dc      	uxtb	r4, r3
 8002526:	4b19      	ldr	r3, [pc, #100]	; (800258c <weoShowSmallImage+0x290>)
 8002528:	185a      	adds	r2, r3, r1
 800252a:	19d2      	adds	r2, r2, r7
 800252c:	4b21      	ldr	r3, [pc, #132]	; (80025b4 <weoShowSmallImage+0x2b8>)
 800252e:	18fb      	adds	r3, r7, r3
 8002530:	7812      	ldrb	r2, [r2, #0]
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	18d3      	adds	r3, r2, r3
 8002536:	b2db      	uxtb	r3, r3
 8002538:	3b01      	subs	r3, #1
 800253a:	b2da      	uxtb	r2, r3
 800253c:	4b13      	ldr	r3, [pc, #76]	; (800258c <weoShowSmallImage+0x290>)
 800253e:	0008      	movs	r0, r1
 8002540:	185b      	adds	r3, r3, r1
 8002542:	19db      	adds	r3, r3, r7
 8002544:	7819      	ldrb	r1, [r3, #0]
 8002546:	4b10      	ldr	r3, [pc, #64]	; (8002588 <weoShowSmallImage+0x28c>)
 8002548:	181b      	adds	r3, r3, r0
 800254a:	19db      	adds	r3, r3, r7
 800254c:	7818      	ldrb	r0, [r3, #0]
 800254e:	197b      	adds	r3, r7, r5
 8002550:	9301      	str	r3, [sp, #4]
 8002552:	23ff      	movs	r3, #255	; 0xff
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	0013      	movs	r3, r2
 8002558:	0022      	movs	r2, r4
 800255a:	f7fe ffb7 	bl	80014cc <weoDrawRectangleFilled>
		cmd2Execute=0;
 800255e:	4b1a      	ldr	r3, [pc, #104]	; (80025c8 <weoShowSmallImage+0x2cc>)
 8002560:	2200      	movs	r2, #0
 8002562:	701a      	strb	r2, [r3, #0]
//		while(BFEN==0){};
		GPIOC->ODR |= 1 << 6;	//set BF
 8002564:	4b19      	ldr	r3, [pc, #100]	; (80025cc <weoShowSmallImage+0x2d0>)
 8002566:	695a      	ldr	r2, [r3, #20]
 8002568:	4b18      	ldr	r3, [pc, #96]	; (80025cc <weoShowSmallImage+0x2d0>)
 800256a:	2140      	movs	r1, #64	; 0x40
 800256c:	430a      	orrs	r2, r1
 800256e:	615a      	str	r2, [r3, #20]
	}
 8002570:	46c0      	nop			; (mov r8, r8)
 8002572:	0018      	movs	r0, r3
 8002574:	46bd      	mov	sp, r7
 8002576:	4b16      	ldr	r3, [pc, #88]	; (80025d0 <weoShowSmallImage+0x2d4>)
 8002578:	449d      	add	sp, r3
 800257a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800257c:	ffffdfd4 	.word	0xffffdfd4
 8002580:	ffffdfe7 	.word	0xffffdfe7
 8002584:	00002020 	.word	0x00002020
 8002588:	ffffdfe6 	.word	0xffffdfe6
 800258c:	ffffdfe5 	.word	0xffffdfe5
 8002590:	0000201c 	.word	0x0000201c
 8002594:	00002013 	.word	0x00002013
 8002598:	ffffdfe8 	.word	0xffffdfe8
 800259c:	50000400 	.word	0x50000400
 80025a0:	fffffdff 	.word	0xfffffdff
 80025a4:	200001a0 	.word	0x200001a0
 80025a8:	00001388 	.word	0x00001388
 80025ac:	0000201b 	.word	0x0000201b
 80025b0:	ffffdfec 	.word	0xffffdfec
 80025b4:	0000201a 	.word	0x0000201a
 80025b8:	2000042a 	.word	0x2000042a
 80025bc:	00002014 	.word	0x00002014
 80025c0:	40004400 	.word	0x40004400
 80025c4:	20000430 	.word	0x20000430
 80025c8:	20000426 	.word	0x20000426
 80025cc:	50000800 	.word	0x50000800
 80025d0:	00002024 	.word	0x00002024

080025d4 <soundLoad>:
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1],1, 50);	//send address
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0],1, 50);	//send address
		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &MEM_Buffer ,len);
	}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	uint8_t soundLoad(uint8_t soundNum) {
 80025d4:	b5b0      	push	{r4, r5, r7, lr}
 80025d6:	4ccb      	ldr	r4, [pc, #812]	; (8002904 <soundLoad+0x330>)
 80025d8:	44a5      	add	sp, r4
 80025da:	af00      	add	r7, sp, #0
 80025dc:	0002      	movs	r2, r0
 80025de:	4bca      	ldr	r3, [pc, #808]	; (8002908 <soundLoad+0x334>)
 80025e0:	49ca      	ldr	r1, [pc, #808]	; (800290c <soundLoad+0x338>)
 80025e2:	185b      	adds	r3, r3, r1
 80025e4:	19db      	adds	r3, r3, r7
 80025e6:	701a      	strb	r2, [r3, #0]
			uint8_t memCMD,addr_l,addr_L,addr_h,addr_H;
			uint8_t MEM_Buffer[8192], soundInfo[9],addrINFO[4],addr[4],length[4], addrSound;
			uint16_t i;
			uint32_t addrInfo,firstImAddr;
			memCMD = 0x13; //read command with 4-byte address
 80025e8:	48c9      	ldr	r0, [pc, #804]	; (8002910 <soundLoad+0x33c>)
 80025ea:	183b      	adds	r3, r7, r0
 80025ec:	2213      	movs	r2, #19
 80025ee:	701a      	strb	r2, [r3, #0]

			if (curBuf == 0){
 80025f0:	4bc8      	ldr	r3, [pc, #800]	; (8002914 <soundLoad+0x340>)
 80025f2:	881b      	ldrh	r3, [r3, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d000      	beq.n	80025fa <soundLoad+0x26>
 80025f8:	e0ed      	b.n	80027d6 <soundLoad+0x202>
			address=startAddressForSoundInfo+(soundNum*0x09);
 80025fa:	4bc3      	ldr	r3, [pc, #780]	; (8002908 <soundLoad+0x334>)
 80025fc:	185b      	adds	r3, r3, r1
 80025fe:	19db      	adds	r3, r3, r7
 8002600:	781a      	ldrb	r2, [r3, #0]
 8002602:	0013      	movs	r3, r2
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	189b      	adds	r3, r3, r2
 8002608:	2280      	movs	r2, #128	; 0x80
 800260a:	03d2      	lsls	r2, r2, #15
 800260c:	4694      	mov	ip, r2
 800260e:	4463      	add	r3, ip
 8002610:	001a      	movs	r2, r3
 8002612:	4bc1      	ldr	r3, [pc, #772]	; (8002918 <soundLoad+0x344>)
 8002614:	601a      	str	r2, [r3, #0]

			addrINFO[0]=address & 0xFF;
 8002616:	4bc0      	ldr	r3, [pc, #768]	; (8002918 <soundLoad+0x344>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	b2da      	uxtb	r2, r3
 800261c:	4bbf      	ldr	r3, [pc, #764]	; (800291c <soundLoad+0x348>)
 800261e:	000c      	movs	r4, r1
 8002620:	191b      	adds	r3, r3, r4
 8002622:	19db      	adds	r3, r3, r7
 8002624:	701a      	strb	r2, [r3, #0]
			addrINFO[1]=(address >> 8) & 0xFF;
 8002626:	4bbc      	ldr	r3, [pc, #752]	; (8002918 <soundLoad+0x344>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	0a1b      	lsrs	r3, r3, #8
 800262c:	b2da      	uxtb	r2, r3
 800262e:	4bbb      	ldr	r3, [pc, #748]	; (800291c <soundLoad+0x348>)
 8002630:	191b      	adds	r3, r3, r4
 8002632:	19db      	adds	r3, r3, r7
 8002634:	705a      	strb	r2, [r3, #1]
			addrINFO[2]=(address >> 16) & 0xFF;
 8002636:	4bb8      	ldr	r3, [pc, #736]	; (8002918 <soundLoad+0x344>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	0c1b      	lsrs	r3, r3, #16
 800263c:	b2da      	uxtb	r2, r3
 800263e:	4bb7      	ldr	r3, [pc, #732]	; (800291c <soundLoad+0x348>)
 8002640:	191b      	adds	r3, r3, r4
 8002642:	19db      	adds	r3, r3, r7
 8002644:	709a      	strb	r2, [r3, #2]
			addrINFO[3]=(address >> 24) & 0xFF;
 8002646:	4bb4      	ldr	r3, [pc, #720]	; (8002918 <soundLoad+0x344>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	0e1b      	lsrs	r3, r3, #24
 800264c:	b2da      	uxtb	r2, r3
 800264e:	4bb3      	ldr	r3, [pc, #716]	; (800291c <soundLoad+0x348>)
 8002650:	191b      	adds	r3, r3, r4
 8002652:	19db      	adds	r3, r3, r7
 8002654:	70da      	strb	r2, [r3, #3]

			GPIOB->ODR &= ~(1 << 9); //reset cs
 8002656:	4bb2      	ldr	r3, [pc, #712]	; (8002920 <soundLoad+0x34c>)
 8002658:	695a      	ldr	r2, [r3, #20]
 800265a:	4bb1      	ldr	r3, [pc, #708]	; (8002920 <soundLoad+0x34c>)
 800265c:	49b1      	ldr	r1, [pc, #708]	; (8002924 <soundLoad+0x350>)
 800265e:	400a      	ands	r2, r1
 8002660:	615a      	str	r2, [r3, #20]
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 8002662:	1839      	adds	r1, r7, r0
 8002664:	48b0      	ldr	r0, [pc, #704]	; (8002928 <soundLoad+0x354>)
 8002666:	2332      	movs	r3, #50	; 0x32
 8002668:	2201      	movs	r2, #1
 800266a:	f006 fe7f 	bl	800936c <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrINFO[3], 1, 50); //send address
 800266e:	2514      	movs	r5, #20
 8002670:	197b      	adds	r3, r7, r5
 8002672:	1cd9      	adds	r1, r3, #3
 8002674:	48ac      	ldr	r0, [pc, #688]	; (8002928 <soundLoad+0x354>)
 8002676:	2332      	movs	r3, #50	; 0x32
 8002678:	2201      	movs	r2, #1
 800267a:	f006 fe77 	bl	800936c <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrINFO[2], 1, 50); //send address
 800267e:	197b      	adds	r3, r7, r5
 8002680:	1c99      	adds	r1, r3, #2
 8002682:	48a9      	ldr	r0, [pc, #676]	; (8002928 <soundLoad+0x354>)
 8002684:	2332      	movs	r3, #50	; 0x32
 8002686:	2201      	movs	r2, #1
 8002688:	f006 fe70 	bl	800936c <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrINFO[1], 1, 50); //send address
 800268c:	197b      	adds	r3, r7, r5
 800268e:	1c59      	adds	r1, r3, #1
 8002690:	48a5      	ldr	r0, [pc, #660]	; (8002928 <soundLoad+0x354>)
 8002692:	2332      	movs	r3, #50	; 0x32
 8002694:	2201      	movs	r2, #1
 8002696:	f006 fe69 	bl	800936c <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrINFO[0], 1, 50); //send address
 800269a:	1979      	adds	r1, r7, r5
 800269c:	48a2      	ldr	r0, [pc, #648]	; (8002928 <soundLoad+0x354>)
 800269e:	2332      	movs	r3, #50	; 0x32
 80026a0:	2201      	movs	r2, #1
 80026a2:	f006 fe63 	bl	800936c <HAL_SPI_Transmit>
			HAL_SPI_Receive(&hspi2, (uint8_t*) &soundInfo,9, 5000);//9 bits of soundInfo
 80026a6:	4ba1      	ldr	r3, [pc, #644]	; (800292c <soundLoad+0x358>)
 80026a8:	2218      	movs	r2, #24
 80026aa:	18b9      	adds	r1, r7, r2
 80026ac:	489e      	ldr	r0, [pc, #632]	; (8002928 <soundLoad+0x354>)
 80026ae:	2209      	movs	r2, #9
 80026b0:	f006 ffb4 	bl	800961c <HAL_SPI_Receive>
			GPIOB->ODR |= 1 << 9; // set cs
 80026b4:	4b9a      	ldr	r3, [pc, #616]	; (8002920 <soundLoad+0x34c>)
 80026b6:	695a      	ldr	r2, [r3, #20]
 80026b8:	4b99      	ldr	r3, [pc, #612]	; (8002920 <soundLoad+0x34c>)
 80026ba:	2180      	movs	r1, #128	; 0x80
 80026bc:	0089      	lsls	r1, r1, #2
 80026be:	430a      	orrs	r2, r1
 80026c0:	615a      	str	r2, [r3, #20]

			addr[0]=soundInfo[4];
 80026c2:	4b9b      	ldr	r3, [pc, #620]	; (8002930 <soundLoad+0x35c>)
 80026c4:	0021      	movs	r1, r4
 80026c6:	185b      	adds	r3, r3, r1
 80026c8:	19db      	adds	r3, r3, r7
 80026ca:	791a      	ldrb	r2, [r3, #4]
 80026cc:	4b99      	ldr	r3, [pc, #612]	; (8002934 <soundLoad+0x360>)
 80026ce:	185b      	adds	r3, r3, r1
 80026d0:	19db      	adds	r3, r3, r7
 80026d2:	701a      	strb	r2, [r3, #0]
			addr[1]=soundInfo[3];
 80026d4:	4b96      	ldr	r3, [pc, #600]	; (8002930 <soundLoad+0x35c>)
 80026d6:	185b      	adds	r3, r3, r1
 80026d8:	19db      	adds	r3, r3, r7
 80026da:	78da      	ldrb	r2, [r3, #3]
 80026dc:	4b95      	ldr	r3, [pc, #596]	; (8002934 <soundLoad+0x360>)
 80026de:	185b      	adds	r3, r3, r1
 80026e0:	19db      	adds	r3, r3, r7
 80026e2:	705a      	strb	r2, [r3, #1]
			addr[2]=soundInfo[2];
 80026e4:	4b92      	ldr	r3, [pc, #584]	; (8002930 <soundLoad+0x35c>)
 80026e6:	185b      	adds	r3, r3, r1
 80026e8:	19db      	adds	r3, r3, r7
 80026ea:	789a      	ldrb	r2, [r3, #2]
 80026ec:	4b91      	ldr	r3, [pc, #580]	; (8002934 <soundLoad+0x360>)
 80026ee:	185b      	adds	r3, r3, r1
 80026f0:	19db      	adds	r3, r3, r7
 80026f2:	709a      	strb	r2, [r3, #2]
			addr[3]=soundInfo[1];
 80026f4:	4b8e      	ldr	r3, [pc, #568]	; (8002930 <soundLoad+0x35c>)
 80026f6:	185b      	adds	r3, r3, r1
 80026f8:	19db      	adds	r3, r3, r7
 80026fa:	785a      	ldrb	r2, [r3, #1]
 80026fc:	4b8d      	ldr	r3, [pc, #564]	; (8002934 <soundLoad+0x360>)
 80026fe:	185b      	adds	r3, r3, r1
 8002700:	19db      	adds	r3, r3, r7
 8002702:	70da      	strb	r2, [r3, #3]


			length[0]=soundInfo[8];
 8002704:	4b8a      	ldr	r3, [pc, #552]	; (8002930 <soundLoad+0x35c>)
 8002706:	185b      	adds	r3, r3, r1
 8002708:	19db      	adds	r3, r3, r7
 800270a:	7a1a      	ldrb	r2, [r3, #8]
 800270c:	4b8a      	ldr	r3, [pc, #552]	; (8002938 <soundLoad+0x364>)
 800270e:	185b      	adds	r3, r3, r1
 8002710:	19db      	adds	r3, r3, r7
 8002712:	701a      	strb	r2, [r3, #0]
			length[1]=soundInfo[7];
 8002714:	4b86      	ldr	r3, [pc, #536]	; (8002930 <soundLoad+0x35c>)
 8002716:	185b      	adds	r3, r3, r1
 8002718:	19db      	adds	r3, r3, r7
 800271a:	79da      	ldrb	r2, [r3, #7]
 800271c:	4b86      	ldr	r3, [pc, #536]	; (8002938 <soundLoad+0x364>)
 800271e:	185b      	adds	r3, r3, r1
 8002720:	19db      	adds	r3, r3, r7
 8002722:	705a      	strb	r2, [r3, #1]
			length[2]=soundInfo[6];
 8002724:	4b82      	ldr	r3, [pc, #520]	; (8002930 <soundLoad+0x35c>)
 8002726:	185b      	adds	r3, r3, r1
 8002728:	19db      	adds	r3, r3, r7
 800272a:	799a      	ldrb	r2, [r3, #6]
 800272c:	4b82      	ldr	r3, [pc, #520]	; (8002938 <soundLoad+0x364>)
 800272e:	185b      	adds	r3, r3, r1
 8002730:	19db      	adds	r3, r3, r7
 8002732:	709a      	strb	r2, [r3, #2]
			length[3]=soundInfo[5];
 8002734:	4b7e      	ldr	r3, [pc, #504]	; (8002930 <soundLoad+0x35c>)
 8002736:	185b      	adds	r3, r3, r1
 8002738:	19db      	adds	r3, r3, r7
 800273a:	795a      	ldrb	r2, [r3, #5]
 800273c:	4b7e      	ldr	r3, [pc, #504]	; (8002938 <soundLoad+0x364>)
 800273e:	185b      	adds	r3, r3, r1
 8002740:	19db      	adds	r3, r3, r7
 8002742:	70da      	strb	r2, [r3, #3]

			len|=length[3];
 8002744:	4b7c      	ldr	r3, [pc, #496]	; (8002938 <soundLoad+0x364>)
 8002746:	185b      	adds	r3, r3, r1
 8002748:	19db      	adds	r3, r3, r7
 800274a:	78db      	ldrb	r3, [r3, #3]
 800274c:	b29a      	uxth	r2, r3
 800274e:	4b7b      	ldr	r3, [pc, #492]	; (800293c <soundLoad+0x368>)
 8002750:	881b      	ldrh	r3, [r3, #0]
 8002752:	4313      	orrs	r3, r2
 8002754:	b29a      	uxth	r2, r3
 8002756:	4b79      	ldr	r3, [pc, #484]	; (800293c <soundLoad+0x368>)
 8002758:	801a      	strh	r2, [r3, #0]
			len<<=8;
 800275a:	4b78      	ldr	r3, [pc, #480]	; (800293c <soundLoad+0x368>)
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	021b      	lsls	r3, r3, #8
 8002760:	b29a      	uxth	r2, r3
 8002762:	4b76      	ldr	r3, [pc, #472]	; (800293c <soundLoad+0x368>)
 8002764:	801a      	strh	r2, [r3, #0]
			len|=length[2];
 8002766:	4b74      	ldr	r3, [pc, #464]	; (8002938 <soundLoad+0x364>)
 8002768:	185b      	adds	r3, r3, r1
 800276a:	19db      	adds	r3, r3, r7
 800276c:	789b      	ldrb	r3, [r3, #2]
 800276e:	b29a      	uxth	r2, r3
 8002770:	4b72      	ldr	r3, [pc, #456]	; (800293c <soundLoad+0x368>)
 8002772:	881b      	ldrh	r3, [r3, #0]
 8002774:	4313      	orrs	r3, r2
 8002776:	b29a      	uxth	r2, r3
 8002778:	4b70      	ldr	r3, [pc, #448]	; (800293c <soundLoad+0x368>)
 800277a:	801a      	strh	r2, [r3, #0]
			len<<=8;
 800277c:	4b6f      	ldr	r3, [pc, #444]	; (800293c <soundLoad+0x368>)
 800277e:	881b      	ldrh	r3, [r3, #0]
 8002780:	021b      	lsls	r3, r3, #8
 8002782:	b29a      	uxth	r2, r3
 8002784:	4b6d      	ldr	r3, [pc, #436]	; (800293c <soundLoad+0x368>)
 8002786:	801a      	strh	r2, [r3, #0]
			len|=length[1];
 8002788:	4b6b      	ldr	r3, [pc, #428]	; (8002938 <soundLoad+0x364>)
 800278a:	185b      	adds	r3, r3, r1
 800278c:	19db      	adds	r3, r3, r7
 800278e:	785b      	ldrb	r3, [r3, #1]
 8002790:	b29a      	uxth	r2, r3
 8002792:	4b6a      	ldr	r3, [pc, #424]	; (800293c <soundLoad+0x368>)
 8002794:	881b      	ldrh	r3, [r3, #0]
 8002796:	4313      	orrs	r3, r2
 8002798:	b29a      	uxth	r2, r3
 800279a:	4b68      	ldr	r3, [pc, #416]	; (800293c <soundLoad+0x368>)
 800279c:	801a      	strh	r2, [r3, #0]
			len<<=8;
 800279e:	4b67      	ldr	r3, [pc, #412]	; (800293c <soundLoad+0x368>)
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	021b      	lsls	r3, r3, #8
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	4b65      	ldr	r3, [pc, #404]	; (800293c <soundLoad+0x368>)
 80027a8:	801a      	strh	r2, [r3, #0]
			len|=length[0];
 80027aa:	4b63      	ldr	r3, [pc, #396]	; (8002938 <soundLoad+0x364>)
 80027ac:	185b      	adds	r3, r3, r1
 80027ae:	19db      	adds	r3, r3, r7
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	4b61      	ldr	r3, [pc, #388]	; (800293c <soundLoad+0x368>)
 80027b6:	881b      	ldrh	r3, [r3, #0]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	4b5f      	ldr	r3, [pc, #380]	; (800293c <soundLoad+0x368>)
 80027be:	801a      	strh	r2, [r3, #0]

			soundLen = len;
 80027c0:	4b5e      	ldr	r3, [pc, #376]	; (800293c <soundLoad+0x368>)
 80027c2:	881b      	ldrh	r3, [r3, #0]
 80027c4:	001a      	movs	r2, r3
 80027c6:	4b5e      	ldr	r3, [pc, #376]	; (8002940 <soundLoad+0x36c>)
 80027c8:	601a      	str	r2, [r3, #0]
			bufCount = len / bufLen;
 80027ca:	4b5c      	ldr	r3, [pc, #368]	; (800293c <soundLoad+0x368>)
 80027cc:	881b      	ldrh	r3, [r3, #0]
 80027ce:	0a9b      	lsrs	r3, r3, #10
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	4b5c      	ldr	r3, [pc, #368]	; (8002944 <soundLoad+0x370>)
 80027d4:	801a      	strh	r2, [r3, #0]
			}
			if(curBuf == bufCount + 15){
 80027d6:	4b4f      	ldr	r3, [pc, #316]	; (8002914 <soundLoad+0x340>)
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	001a      	movs	r2, r3
 80027dc:	4b59      	ldr	r3, [pc, #356]	; (8002944 <soundLoad+0x370>)
 80027de:	881b      	ldrh	r3, [r3, #0]
 80027e0:	330f      	adds	r3, #15
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d100      	bne.n	80027e8 <soundLoad+0x214>
 80027e6:	e087      	b.n	80028f8 <soundLoad+0x324>
				return;
			}
			addrSound += (bufLen * curBuf);
 80027e8:	4857      	ldr	r0, [pc, #348]	; (8002948 <soundLoad+0x374>)
 80027ea:	183b      	adds	r3, r7, r0
 80027ec:	183a      	adds	r2, r7, r0
 80027ee:	7812      	ldrb	r2, [r2, #0]
 80027f0:	701a      	strb	r2, [r3, #0]
			if (curBuf != 0){
 80027f2:	4b48      	ldr	r3, [pc, #288]	; (8002914 <soundLoad+0x340>)
 80027f4:	881b      	ldrh	r3, [r3, #0]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d015      	beq.n	8002826 <soundLoad+0x252>
			addr[0]=addrSound & 0xFF;
 80027fa:	4b4e      	ldr	r3, [pc, #312]	; (8002934 <soundLoad+0x360>)
 80027fc:	4943      	ldr	r1, [pc, #268]	; (800290c <soundLoad+0x338>)
 80027fe:	185b      	adds	r3, r3, r1
 8002800:	19db      	adds	r3, r3, r7
 8002802:	183a      	adds	r2, r7, r0
 8002804:	7812      	ldrb	r2, [r2, #0]
 8002806:	701a      	strb	r2, [r3, #0]
			addr[1]=(addrSound >> 8) & 0xFF;
 8002808:	4b4a      	ldr	r3, [pc, #296]	; (8002934 <soundLoad+0x360>)
 800280a:	185b      	adds	r3, r3, r1
 800280c:	19db      	adds	r3, r3, r7
 800280e:	2200      	movs	r2, #0
 8002810:	705a      	strb	r2, [r3, #1]
			addr[2]=(addrSound >> 16) & 0xFF;
 8002812:	4b48      	ldr	r3, [pc, #288]	; (8002934 <soundLoad+0x360>)
 8002814:	185b      	adds	r3, r3, r1
 8002816:	19db      	adds	r3, r3, r7
 8002818:	2200      	movs	r2, #0
 800281a:	709a      	strb	r2, [r3, #2]
			addr[3]=(addrSound >> 24) & 0xFF;
 800281c:	4b45      	ldr	r3, [pc, #276]	; (8002934 <soundLoad+0x360>)
 800281e:	185b      	adds	r3, r3, r1
 8002820:	19db      	adds	r3, r3, r7
 8002822:	2200      	movs	r2, #0
 8002824:	70da      	strb	r2, [r3, #3]
			}

			GPIOB->ODR &= ~(1 << 9); //reset cs
 8002826:	4b3e      	ldr	r3, [pc, #248]	; (8002920 <soundLoad+0x34c>)
 8002828:	695a      	ldr	r2, [r3, #20]
 800282a:	4b3d      	ldr	r3, [pc, #244]	; (8002920 <soundLoad+0x34c>)
 800282c:	493d      	ldr	r1, [pc, #244]	; (8002924 <soundLoad+0x350>)
 800282e:	400a      	ands	r2, r1
 8002830:	615a      	str	r2, [r3, #20]

			HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 8002832:	4b37      	ldr	r3, [pc, #220]	; (8002910 <soundLoad+0x33c>)
 8002834:	18f9      	adds	r1, r7, r3
 8002836:	483c      	ldr	r0, [pc, #240]	; (8002928 <soundLoad+0x354>)
 8002838:	2332      	movs	r3, #50	; 0x32
 800283a:	2201      	movs	r2, #1
 800283c:	f006 fd96 	bl	800936c <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addr[3], 1, 50); //send address
 8002840:	2410      	movs	r4, #16
 8002842:	193b      	adds	r3, r7, r4
 8002844:	1cd9      	adds	r1, r3, #3
 8002846:	4838      	ldr	r0, [pc, #224]	; (8002928 <soundLoad+0x354>)
 8002848:	2332      	movs	r3, #50	; 0x32
 800284a:	2201      	movs	r2, #1
 800284c:	f006 fd8e 	bl	800936c <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addr[2], 1, 50); //send address
 8002850:	193b      	adds	r3, r7, r4
 8002852:	1c99      	adds	r1, r3, #2
 8002854:	4834      	ldr	r0, [pc, #208]	; (8002928 <soundLoad+0x354>)
 8002856:	2332      	movs	r3, #50	; 0x32
 8002858:	2201      	movs	r2, #1
 800285a:	f006 fd87 	bl	800936c <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addr[1], 1, 50); //send address
 800285e:	193b      	adds	r3, r7, r4
 8002860:	1c59      	adds	r1, r3, #1
 8002862:	4831      	ldr	r0, [pc, #196]	; (8002928 <soundLoad+0x354>)
 8002864:	2332      	movs	r3, #50	; 0x32
 8002866:	2201      	movs	r2, #1
 8002868:	f006 fd80 	bl	800936c <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addr[0], 1, 50); //send address
 800286c:	1939      	adds	r1, r7, r4
 800286e:	482e      	ldr	r0, [pc, #184]	; (8002928 <soundLoad+0x354>)
 8002870:	2332      	movs	r3, #50	; 0x32
 8002872:	2201      	movs	r2, #1
 8002874:	f006 fd7a 	bl	800936c <HAL_SPI_Transmit>
			HAL_SPI_Receive(&hspi2, (uint8_t*)SOUND1, bufLen,5000);
 8002878:	4c2c      	ldr	r4, [pc, #176]	; (800292c <soundLoad+0x358>)
 800287a:	2380      	movs	r3, #128	; 0x80
 800287c:	00da      	lsls	r2, r3, #3
 800287e:	4933      	ldr	r1, [pc, #204]	; (800294c <soundLoad+0x378>)
 8002880:	4829      	ldr	r0, [pc, #164]	; (8002928 <soundLoad+0x354>)
 8002882:	0023      	movs	r3, r4
 8002884:	f006 feca 	bl	800961c <HAL_SPI_Receive>
			for (i = 0; i < bufLen; i++){
 8002888:	4b31      	ldr	r3, [pc, #196]	; (8002950 <soundLoad+0x37c>)
 800288a:	18fb      	adds	r3, r7, r3
 800288c:	2200      	movs	r2, #0
 800288e:	801a      	strh	r2, [r3, #0]
 8002890:	e00f      	b.n	80028b2 <soundLoad+0x2de>
				SOUND2[i] = SOUND1[i];
 8002892:	482f      	ldr	r0, [pc, #188]	; (8002950 <soundLoad+0x37c>)
 8002894:	183b      	adds	r3, r7, r0
 8002896:	8819      	ldrh	r1, [r3, #0]
 8002898:	183b      	adds	r3, r7, r0
 800289a:	881a      	ldrh	r2, [r3, #0]
 800289c:	4b2b      	ldr	r3, [pc, #172]	; (800294c <soundLoad+0x378>)
 800289e:	0049      	lsls	r1, r1, #1
 80028a0:	5ac9      	ldrh	r1, [r1, r3]
 80028a2:	4b2c      	ldr	r3, [pc, #176]	; (8002954 <soundLoad+0x380>)
 80028a4:	0052      	lsls	r2, r2, #1
 80028a6:	52d1      	strh	r1, [r2, r3]
			for (i = 0; i < bufLen; i++){
 80028a8:	183b      	adds	r3, r7, r0
 80028aa:	881a      	ldrh	r2, [r3, #0]
 80028ac:	183b      	adds	r3, r7, r0
 80028ae:	3201      	adds	r2, #1
 80028b0:	801a      	strh	r2, [r3, #0]
 80028b2:	4b27      	ldr	r3, [pc, #156]	; (8002950 <soundLoad+0x37c>)
 80028b4:	18fb      	adds	r3, r7, r3
 80028b6:	881a      	ldrh	r2, [r3, #0]
 80028b8:	2380      	movs	r3, #128	; 0x80
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	429a      	cmp	r2, r3
 80028be:	d3e8      	bcc.n	8002892 <soundLoad+0x2be>
			}
			if (curBuf == 0){
 80028c0:	4b14      	ldr	r3, [pc, #80]	; (8002914 <soundLoad+0x340>)
 80028c2:	881b      	ldrh	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d106      	bne.n	80028d6 <soundLoad+0x302>
				HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)SOUND2, bufLen/2);
 80028c8:	2380      	movs	r3, #128	; 0x80
 80028ca:	009a      	lsls	r2, r3, #2
 80028cc:	4921      	ldr	r1, [pc, #132]	; (8002954 <soundLoad+0x380>)
 80028ce:	4b22      	ldr	r3, [pc, #136]	; (8002958 <soundLoad+0x384>)
 80028d0:	0018      	movs	r0, r3
 80028d2:	f005 f8a5 	bl	8007a20 <HAL_I2S_Transmit_DMA>
			}
			while (!soundReady){}
 80028d6:	46c0      	nop			; (mov r8, r8)
 80028d8:	4b20      	ldr	r3, [pc, #128]	; (800295c <soundLoad+0x388>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0fb      	beq.n	80028d8 <soundLoad+0x304>
			if (curBuf != 0){
 80028e0:	4b0c      	ldr	r3, [pc, #48]	; (8002914 <soundLoad+0x340>)
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d008      	beq.n	80028fa <soundLoad+0x326>
			HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)SOUND2, bufLen/2);
 80028e8:	2380      	movs	r3, #128	; 0x80
 80028ea:	009a      	lsls	r2, r3, #2
 80028ec:	4919      	ldr	r1, [pc, #100]	; (8002954 <soundLoad+0x380>)
 80028ee:	4b1a      	ldr	r3, [pc, #104]	; (8002958 <soundLoad+0x384>)
 80028f0:	0018      	movs	r0, r3
 80028f2:	f005 f895 	bl	8007a20 <HAL_I2S_Transmit_DMA>
 80028f6:	e000      	b.n	80028fa <soundLoad+0x326>
				return;
 80028f8:	46c0      	nop			; (mov r8, r8)
			}

//			HAL_Delay(500);
//			SoundPlay();
		}
 80028fa:	0018      	movs	r0, r3
 80028fc:	46bd      	mov	sp, r7
 80028fe:	4b03      	ldr	r3, [pc, #12]	; (800290c <soundLoad+0x338>)
 8002900:	449d      	add	sp, r3
 8002902:	bdb0      	pop	{r4, r5, r7, pc}
 8002904:	ffffdfd8 	.word	0xffffdfd8
 8002908:	ffffdfdf 	.word	0xffffdfdf
 800290c:	00002028 	.word	0x00002028
 8002910:	00002024 	.word	0x00002024
 8002914:	20000434 	.word	0x20000434
 8002918:	2000042c 	.word	0x2000042c
 800291c:	ffffdfec 	.word	0xffffdfec
 8002920:	50000400 	.word	0x50000400
 8002924:	fffffdff 	.word	0xfffffdff
 8002928:	200001a0 	.word	0x200001a0
 800292c:	00001388 	.word	0x00001388
 8002930:	ffffdff0 	.word	0xffffdff0
 8002934:	ffffdfe8 	.word	0xffffdfe8
 8002938:	ffffdfe4 	.word	0xffffdfe4
 800293c:	2000042a 	.word	0x2000042a
 8002940:	20001438 	.word	0x20001438
 8002944:	20000436 	.word	0x20000436
 8002948:	00002025 	.word	0x00002025
 800294c:	20000438 	.word	0x20000438
 8002950:	00002026 	.word	0x00002026
 8002954:	20000c38 	.word	0x20000c38
 8002958:	20000108 	.word	0x20000108
 800295c:	20000061 	.word	0x20000061

08002960 <soundPlay>:
//=========================================================================================================================
	uint8_t soundPlay(uint8_t soundNum) {
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	0002      	movs	r2, r0
 8002968:	1dfb      	adds	r3, r7, #7
 800296a:	701a      	strb	r2, [r3, #0]
//		HAL_Delay(500);

//		HAL_Delay(500);
			I2C_SOUND_ChangePage(0x01);
 800296c:	2001      	movs	r0, #1
 800296e:	f7fe fe93 	bl	8001698 <I2C_SOUND_ChangePage>
			WriteReg_I2C_SOUND(0x01, 0x00);
 8002972:	2100      	movs	r1, #0
 8002974:	2001      	movs	r0, #1
 8002976:	f7fe fead 	bl	80016d4 <WriteReg_I2C_SOUND>
			I2C_SOUND_ChangePage(0x00);
 800297a:	2000      	movs	r0, #0
 800297c:	f7fe fe8c 	bl	8001698 <I2C_SOUND_ChangePage>
			WriteReg_I2C_SOUND(0x41, 0x30);// 0x81 - 0x30 available
 8002980:	2130      	movs	r1, #48	; 0x30
 8002982:	2041      	movs	r0, #65	; 0x41
 8002984:	f7fe fea6 	bl	80016d4 <WriteReg_I2C_SOUND>
		//	I2C_SOUND_ChangePage(0x00);
			I2C_SOUND_ChangePage(0x01);
 8002988:	2001      	movs	r0, #1
 800298a:	f7fe fe85 	bl	8001698 <I2C_SOUND_ChangePage>
			WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 800298e:	2100      	movs	r1, #0
 8002990:	2010      	movs	r0, #16
 8002992:	f7fe fe9f 	bl	80016d4 <WriteReg_I2C_SOUND>
			WriteReg_I2C_SOUND(0x2E, 0x24);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
 8002996:	2124      	movs	r1, #36	; 0x24
 8002998:	202e      	movs	r0, #46	; 0x2e
 800299a:	f7fe fe9b 	bl	80016d4 <WriteReg_I2C_SOUND>
			soundLoad(soundNum);
 800299e:	1dfb      	adds	r3, r7, #7
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	0018      	movs	r0, r3
 80029a4:	f7ff fe16 	bl	80025d4 <soundLoad>
//			HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)SOUND, 16384/2); //HAL_MAX_DELAY

//			HAL_I2S_Transmit(&hi2s1, (uint16_t*)SOUND,4096,5000);
//		squeak_double(signal);
		}
 80029a8:	46c0      	nop			; (mov r8, r8)
 80029aa:	0018      	movs	r0, r3
 80029ac:	46bd      	mov	sp, r7
 80029ae:	b002      	add	sp, #8
 80029b0:	bd80      	pop	{r7, pc}
	...

080029b4 <MEM_GetID>:
		dat = 0x04;
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 5);//write disable Is it neccessary, if WP pin is used????????????????????????????
		GPIOB->ODR |= 1 << 9;	// set cs
//    GPIOC->ODR &= ~(1 << 14);//Write Disable
	}
	uint32_t MEM_GetID(void) {
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
		uint8_t dat;
		uint8_t tmp[1] = { 0x00 };
 80029ba:	1d3b      	adds	r3, r7, #4
 80029bc:	4a29      	ldr	r2, [pc, #164]	; (8002a64 <MEM_GetID+0xb0>)
 80029be:	7812      	ldrb	r2, [r2, #0]
 80029c0:	701a      	strb	r2, [r3, #0]
		dat = 0x9E;
 80029c2:	1dfb      	adds	r3, r7, #7
 80029c4:	229e      	movs	r2, #158	; 0x9e
 80029c6:	701a      	strb	r2, [r3, #0]
		GPIOB->ODR &= ~(1 <<9);	//reset cs
 80029c8:	4b27      	ldr	r3, [pc, #156]	; (8002a68 <MEM_GetID+0xb4>)
 80029ca:	695a      	ldr	r2, [r3, #20]
 80029cc:	4b26      	ldr	r3, [pc, #152]	; (8002a68 <MEM_GetID+0xb4>)
 80029ce:	4927      	ldr	r1, [pc, #156]	; (8002a6c <MEM_GetID+0xb8>)
 80029d0:	400a      	ands	r2, r1
 80029d2:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 50);	//read ID command
 80029d4:	1df9      	adds	r1, r7, #7
 80029d6:	4826      	ldr	r0, [pc, #152]	; (8002a70 <MEM_GetID+0xbc>)
 80029d8:	2332      	movs	r3, #50	; 0x32
 80029da:	2201      	movs	r2, #1
 80029dc:	f006 fcc6 	bl	800936c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 80029e0:	23fa      	movs	r3, #250	; 0xfa
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	1d39      	adds	r1, r7, #4
 80029e6:	4822      	ldr	r0, [pc, #136]	; (8002a70 <MEM_GetID+0xbc>)
 80029e8:	2201      	movs	r2, #1
 80029ea:	f006 fe17 	bl	800961c <HAL_SPI_Receive>
		MEM_ID = (uint32_t) tmp[0];
 80029ee:	1d3b      	adds	r3, r7, #4
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	001a      	movs	r2, r3
 80029f4:	4b1f      	ldr	r3, [pc, #124]	; (8002a74 <MEM_GetID+0xc0>)
 80029f6:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;                    			//MSB
 80029f8:	4b1e      	ldr	r3, [pc, #120]	; (8002a74 <MEM_GetID+0xc0>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	021a      	lsls	r2, r3, #8
 80029fe:	4b1d      	ldr	r3, [pc, #116]	; (8002a74 <MEM_GetID+0xc0>)
 8002a00:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002a02:	23fa      	movs	r3, #250	; 0xfa
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	1d39      	adds	r1, r7, #4
 8002a08:	4819      	ldr	r0, [pc, #100]	; (8002a70 <MEM_GetID+0xbc>)
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f006 fe06 	bl	800961c <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8002a10:	1d3b      	adds	r3, r7, #4
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	001a      	movs	r2, r3
 8002a16:	4b17      	ldr	r3, [pc, #92]	; (8002a74 <MEM_GetID+0xc0>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	18d2      	adds	r2, r2, r3
 8002a1c:	4b15      	ldr	r3, [pc, #84]	; (8002a74 <MEM_GetID+0xc0>)
 8002a1e:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;
 8002a20:	4b14      	ldr	r3, [pc, #80]	; (8002a74 <MEM_GetID+0xc0>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	021a      	lsls	r2, r3, #8
 8002a26:	4b13      	ldr	r3, [pc, #76]	; (8002a74 <MEM_GetID+0xc0>)
 8002a28:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002a2a:	23fa      	movs	r3, #250	; 0xfa
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	1d39      	adds	r1, r7, #4
 8002a30:	480f      	ldr	r0, [pc, #60]	; (8002a70 <MEM_GetID+0xbc>)
 8002a32:	2201      	movs	r2, #1
 8002a34:	f006 fdf2 	bl	800961c <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8002a38:	1d3b      	adds	r3, r7, #4
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	001a      	movs	r2, r3
 8002a3e:	4b0d      	ldr	r3, [pc, #52]	; (8002a74 <MEM_GetID+0xc0>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	18d2      	adds	r2, r2, r3
 8002a44:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <MEM_GetID+0xc0>)
 8002a46:	601a      	str	r2, [r3, #0]
		GPIOB->ODR |= 1 << 9;                    			// set cs
 8002a48:	4b07      	ldr	r3, [pc, #28]	; (8002a68 <MEM_GetID+0xb4>)
 8002a4a:	695a      	ldr	r2, [r3, #20]
 8002a4c:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <MEM_GetID+0xb4>)
 8002a4e:	2180      	movs	r1, #128	; 0x80
 8002a50:	0089      	lsls	r1, r1, #2
 8002a52:	430a      	orrs	r2, r1
 8002a54:	615a      	str	r2, [r3, #20]
		return (MEM_ID);
 8002a56:	4b07      	ldr	r3, [pc, #28]	; (8002a74 <MEM_GetID+0xc0>)
 8002a58:	681b      	ldr	r3, [r3, #0]
	}
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	b002      	add	sp, #8
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	46c0      	nop			; (mov r8, r8)
 8002a64:	0800c9c8 	.word	0x0800c9c8
 8002a68:	50000400 	.word	0x50000400
 8002a6c:	fffffdff 	.word	0xfffffdff
 8002a70:	200001a0 	.word	0x200001a0
 8002a74:	200003ec 	.word	0x200003ec

08002a78 <cmdExecute>:
	uint16_t Scount(void){
		LIS3DHreadData();

	}
//====================================================================================================================
	uint8_t cmdExecute(uint8_t cmd2Execute){
 8002a78:	b590      	push	{r4, r7, lr}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af02      	add	r7, sp, #8
 8002a7e:	0002      	movs	r2, r0
 8002a80:	1dfb      	adds	r3, r7, #7
 8002a82:	701a      	strb	r2, [r3, #0]
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 8002a84:	4b76      	ldr	r3, [pc, #472]	; (8002c60 <cmdExecute+0x1e8>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b10      	cmp	r3, #16
 8002a8a:	d100      	bne.n	8002a8e <cmdExecute+0x16>
 8002a8c:	e0df      	b.n	8002c4e <cmdExecute+0x1d6>
		if(soundReady==0){return;}
 8002a8e:	4b75      	ldr	r3, [pc, #468]	; (8002c64 <cmdExecute+0x1ec>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d100      	bne.n	8002a98 <cmdExecute+0x20>
 8002a96:	e0dc      	b.n	8002c52 <cmdExecute+0x1da>
//		if(cmd[0]==00){return;}
		if (bf4me!=0x00){return;}	// protection against false BF resets
 8002a98:	4b73      	ldr	r3, [pc, #460]	; (8002c68 <cmdExecute+0x1f0>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d000      	beq.n	8002aa2 <cmdExecute+0x2a>
 8002aa0:	e0d9      	b.n	8002c56 <cmdExecute+0x1de>
		USART2->ICR|=USART_ICR_ORECF;
 8002aa2:	4b72      	ldr	r3, [pc, #456]	; (8002c6c <cmdExecute+0x1f4>)
 8002aa4:	6a1a      	ldr	r2, [r3, #32]
 8002aa6:	4b71      	ldr	r3, [pc, #452]	; (8002c6c <cmdExecute+0x1f4>)
 8002aa8:	2108      	movs	r1, #8
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	621a      	str	r2, [r3, #32]

				}
		if(cmd2Execute==0x10){

				}
		if(cmd2Execute==0x11){
 8002aae:	1dfb      	adds	r3, r7, #7
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2b11      	cmp	r3, #17
 8002ab4:	d113      	bne.n	8002ade <cmdExecute+0x66>
			GPIOC->ODR &=~ GPIO_ODR_OD6;
 8002ab6:	4b6e      	ldr	r3, [pc, #440]	; (8002c70 <cmdExecute+0x1f8>)
 8002ab8:	695a      	ldr	r2, [r3, #20]
 8002aba:	4b6d      	ldr	r3, [pc, #436]	; (8002c70 <cmdExecute+0x1f8>)
 8002abc:	2140      	movs	r1, #64	; 0x40
 8002abe:	438a      	bics	r2, r1
 8002ac0:	615a      	str	r2, [r3, #20]
			bf4me=0x11;	//set BF flag 4 me
 8002ac2:	4b69      	ldr	r3, [pc, #420]	; (8002c68 <cmdExecute+0x1f0>)
 8002ac4:	2211      	movs	r2, #17
 8002ac6:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
			weoShowFullScreen(picNum);
 8002ac8:	4b6a      	ldr	r3, [pc, #424]	; (8002c74 <cmdExecute+0x1fc>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	0018      	movs	r0, r3
 8002ace:	f7ff fb77 	bl	80021c0 <weoShowFullScreen>
//			weoShowFullScreenDMA(picNum);
			USART2->ICR|=USART_ICR_ORECF;
 8002ad2:	4b66      	ldr	r3, [pc, #408]	; (8002c6c <cmdExecute+0x1f4>)
 8002ad4:	6a1a      	ldr	r2, [r3, #32]
 8002ad6:	4b65      	ldr	r3, [pc, #404]	; (8002c6c <cmdExecute+0x1f4>)
 8002ad8:	2108      	movs	r1, #8
 8002ada:	430a      	orrs	r2, r1
 8002adc:	621a      	str	r2, [r3, #32]
				}
		if(cmd2Execute==0x12){
 8002ade:	1dfb      	adds	r3, r7, #7
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	2b12      	cmp	r3, #18
 8002ae4:	d10d      	bne.n	8002b02 <cmdExecute+0x8a>
			bf4me=0x12;	//set BF flag 4 me
 8002ae6:	4b60      	ldr	r3, [pc, #384]	; (8002c68 <cmdExecute+0x1f0>)
 8002ae8:	2212      	movs	r2, #18
 8002aea:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
//			weoShowSmallImageDMA(picNum,imX,imY);
			weoShowSmallImage(picNum,imX,imY);
 8002aec:	4b61      	ldr	r3, [pc, #388]	; (8002c74 <cmdExecute+0x1fc>)
 8002aee:	7818      	ldrb	r0, [r3, #0]
 8002af0:	4b61      	ldr	r3, [pc, #388]	; (8002c78 <cmdExecute+0x200>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	b2d9      	uxtb	r1, r3
 8002af6:	4b61      	ldr	r3, [pc, #388]	; (8002c7c <cmdExecute+0x204>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	001a      	movs	r2, r3
 8002afe:	f7ff fbfd 	bl	80022fc <weoShowSmallImage>
				}
		if(cmd2Execute==0x13){
 8002b02:	1dfb      	adds	r3, r7, #7
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	2b13      	cmp	r3, #19
 8002b08:	d111      	bne.n	8002b2e <cmdExecute+0xb6>
			bf4me=0x13;	//set BF flag 4 me
 8002b0a:	4b57      	ldr	r3, [pc, #348]	; (8002c68 <cmdExecute+0x1f0>)
 8002b0c:	2213      	movs	r2, #19
 8002b0e:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF

//			printASCIIarray_old(imX,imY, strLen,dataASCII);
			printASCIIarray(imX,imY,strLen,fontInfo,dataASCII);
 8002b10:	4b59      	ldr	r3, [pc, #356]	; (8002c78 <cmdExecute+0x200>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	b2d8      	uxtb	r0, r3
 8002b16:	4b59      	ldr	r3, [pc, #356]	; (8002c7c <cmdExecute+0x204>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	b2d9      	uxtb	r1, r3
 8002b1c:	4b58      	ldr	r3, [pc, #352]	; (8002c80 <cmdExecute+0x208>)
 8002b1e:	781a      	ldrb	r2, [r3, #0]
 8002b20:	4b58      	ldr	r3, [pc, #352]	; (8002c84 <cmdExecute+0x20c>)
 8002b22:	781c      	ldrb	r4, [r3, #0]
 8002b24:	4b58      	ldr	r3, [pc, #352]	; (8002c88 <cmdExecute+0x210>)
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	0023      	movs	r3, r4
 8002b2a:	f000 f8b5 	bl	8002c98 <printASCIIarray>
				}
		if(cmd2Execute==0x14){
 8002b2e:	1dfb      	adds	r3, r7, #7
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	2b14      	cmp	r3, #20
 8002b34:	d122      	bne.n	8002b7c <cmdExecute+0x104>
//			if(soundReady!=1){return;}
			bf4me=0x14;	//set BF flag 4 me
 8002b36:	4b4c      	ldr	r3, [pc, #304]	; (8002c68 <cmdExecute+0x1f0>)
 8002b38:	2214      	movs	r2, #20
 8002b3a:	701a      	strb	r2, [r3, #0]
			if(soundNum==0x01){
 8002b3c:	4b53      	ldr	r3, [pc, #332]	; (8002c8c <cmdExecute+0x214>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d112      	bne.n	8002b6a <cmdExecute+0xf2>
				if(soundReady!=0){
 8002b44:	4b47      	ldr	r3, [pc, #284]	; (8002c64 <cmdExecute+0x1ec>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00e      	beq.n	8002b6a <cmdExecute+0xf2>
				soundReady=0;
 8002b4c:	4b45      	ldr	r3, [pc, #276]	; (8002c64 <cmdExecute+0x1ec>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	701a      	strb	r2, [r3, #0]
				USART2->ICR|=USART_ICR_ORECF;
 8002b52:	4b46      	ldr	r3, [pc, #280]	; (8002c6c <cmdExecute+0x1f4>)
 8002b54:	6a1a      	ldr	r2, [r3, #32]
 8002b56:	4b45      	ldr	r3, [pc, #276]	; (8002c6c <cmdExecute+0x1f4>)
 8002b58:	2108      	movs	r1, #8
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	621a      	str	r2, [r3, #32]
//				squeak_single(signal);
				USART2->ICR|=USART_ICR_ORECF;
 8002b5e:	4b43      	ldr	r3, [pc, #268]	; (8002c6c <cmdExecute+0x1f4>)
 8002b60:	6a1a      	ldr	r2, [r3, #32]
 8002b62:	4b42      	ldr	r3, [pc, #264]	; (8002c6c <cmdExecute+0x1f4>)
 8002b64:	2108      	movs	r1, #8
 8002b66:	430a      	orrs	r2, r1
 8002b68:	621a      	str	r2, [r3, #32]
//				squeak_long(signal);
				}
//			if(soundNum!=1){
//			HAL_Delay(500);
//			}
			cmd2Execute=0;
 8002b6a:	1dfb      	adds	r3, r7, #7
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	701a      	strb	r2, [r3, #0]
//			while(BFEN==0){};
			GPIOC->ODR |= 1 << 6;	//set BF
 8002b70:	4b3f      	ldr	r3, [pc, #252]	; (8002c70 <cmdExecute+0x1f8>)
 8002b72:	695a      	ldr	r2, [r3, #20]
 8002b74:	4b3e      	ldr	r3, [pc, #248]	; (8002c70 <cmdExecute+0x1f8>)
 8002b76:	2140      	movs	r1, #64	; 0x40
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	615a      	str	r2, [r3, #20]

		}
		if(cmd2Execute==0x15){
 8002b7c:	1dfb      	adds	r3, r7, #7
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b15      	cmp	r3, #21
 8002b82:	d153      	bne.n	8002c2c <cmdExecute+0x1b4>
			bf4me=0x15;	//set BF flag 4 me
 8002b84:	4b38      	ldr	r3, [pc, #224]	; (8002c68 <cmdExecute+0x1f0>)
 8002b86:	2215      	movs	r2, #21
 8002b88:	701a      	strb	r2, [r3, #0]
			I2C_SOUND_ChangePage(0x01);
 8002b8a:	2001      	movs	r0, #1
 8002b8c:	f7fe fd84 	bl	8001698 <I2C_SOUND_ChangePage>
//			WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
			if(volume==0x00){
 8002b90:	4b3f      	ldr	r3, [pc, #252]	; (8002c90 <cmdExecute+0x218>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d106      	bne.n	8002ba6 <cmdExecute+0x12e>
				I2C_SOUND_ChangePage(0x01);
 8002b98:	2001      	movs	r0, #1
 8002b9a:	f7fe fd7d 	bl	8001698 <I2C_SOUND_ChangePage>
				WriteReg_I2C_SOUND(0x2E,0xFF);// mute
 8002b9e:	21ff      	movs	r1, #255	; 0xff
 8002ba0:	202e      	movs	r0, #46	; 0x2e
 8002ba2:	f7fe fd97 	bl	80016d4 <WriteReg_I2C_SOUND>
			}
			I2C_SOUND_ChangePage(0x01);
 8002ba6:	2001      	movs	r0, #1
 8002ba8:	f7fe fd76 	bl	8001698 <I2C_SOUND_ChangePage>
			WriteReg_I2C_SOUND(0x2E, volume);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
 8002bac:	4b38      	ldr	r3, [pc, #224]	; (8002c90 <cmdExecute+0x218>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	0019      	movs	r1, r3
 8002bb2:	202e      	movs	r0, #46	; 0x2e
 8002bb4:	f7fe fd8e 	bl	80016d4 <WriteReg_I2C_SOUND>

			if(contrast==0x00){
 8002bb8:	4b36      	ldr	r3, [pc, #216]	; (8002c94 <cmdExecute+0x21c>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d102      	bne.n	8002bc6 <cmdExecute+0x14e>
				weoClear();
 8002bc0:	f7fe fc20 	bl	8001404 <weoClear>
 8002bc4:	e029      	b.n	8002c1a <cmdExecute+0x1a2>
			}
			else{
				GPIOA->ODR &= ~(1 << 6);	//reset cs
 8002bc6:	23a0      	movs	r3, #160	; 0xa0
 8002bc8:	05db      	lsls	r3, r3, #23
 8002bca:	695a      	ldr	r2, [r3, #20]
 8002bcc:	23a0      	movs	r3, #160	; 0xa0
 8002bce:	05db      	lsls	r3, r3, #23
 8002bd0:	2140      	movs	r1, #64	; 0x40
 8002bd2:	438a      	bics	r2, r1
 8002bd4:	615a      	str	r2, [r3, #20]
				GPIOA->ODR &= ~(1 << 7);	// reset dc
 8002bd6:	23a0      	movs	r3, #160	; 0xa0
 8002bd8:	05db      	lsls	r3, r3, #23
 8002bda:	695a      	ldr	r2, [r3, #20]
 8002bdc:	23a0      	movs	r3, #160	; 0xa0
 8002bde:	05db      	lsls	r3, r3, #23
 8002be0:	2180      	movs	r1, #128	; 0x80
 8002be2:	438a      	bics	r2, r1
 8002be4:	615a      	str	r2, [r3, #20]
				USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 8002be6:	2081      	movs	r0, #129	; 0x81
 8002be8:	f7fe fb8e 	bl	8001308 <USART_AS_SPI_sendCMD>
				USART_AS_SPI_sendCMD(contrast*0x10);
 8002bec:	4b29      	ldr	r3, [pc, #164]	; (8002c94 <cmdExecute+0x21c>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	011b      	lsls	r3, r3, #4
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	f7fe fb87 	bl	8001308 <USART_AS_SPI_sendCMD>
				GPIOA->ODR |= 1 << 7;	//set dc
 8002bfa:	23a0      	movs	r3, #160	; 0xa0
 8002bfc:	05db      	lsls	r3, r3, #23
 8002bfe:	695a      	ldr	r2, [r3, #20]
 8002c00:	23a0      	movs	r3, #160	; 0xa0
 8002c02:	05db      	lsls	r3, r3, #23
 8002c04:	2180      	movs	r1, #128	; 0x80
 8002c06:	430a      	orrs	r2, r1
 8002c08:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= 1 << 6;	//set cs
 8002c0a:	23a0      	movs	r3, #160	; 0xa0
 8002c0c:	05db      	lsls	r3, r3, #23
 8002c0e:	695a      	ldr	r2, [r3, #20]
 8002c10:	23a0      	movs	r3, #160	; 0xa0
 8002c12:	05db      	lsls	r3, r3, #23
 8002c14:	2140      	movs	r1, #64	; 0x40
 8002c16:	430a      	orrs	r2, r1
 8002c18:	615a      	str	r2, [r3, #20]
			}
//			bf4me=0x15;	//set BF flag 4 me
			cmd2Execute=0;
 8002c1a:	1dfb      	adds	r3, r7, #7
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	701a      	strb	r2, [r3, #0]
//			while(BFEN==0){};
			GPIOC->ODR |= 1 << 6;	//set BF
 8002c20:	4b13      	ldr	r3, [pc, #76]	; (8002c70 <cmdExecute+0x1f8>)
 8002c22:	695a      	ldr	r2, [r3, #20]
 8002c24:	4b12      	ldr	r3, [pc, #72]	; (8002c70 <cmdExecute+0x1f8>)
 8002c26:	2140      	movs	r1, #64	; 0x40
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	615a      	str	r2, [r3, #20]
		}
		if(cmd2Execute==0x16){
 8002c2c:	1dfb      	adds	r3, r7, #7
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b16      	cmp	r3, #22
 8002c32:	d102      	bne.n	8002c3a <cmdExecute+0x1c2>
			bf4me=0x16;	//set BF flag 4 me
 8002c34:	4b0c      	ldr	r3, [pc, #48]	; (8002c68 <cmdExecute+0x1f0>)
 8002c36:	2216      	movs	r2, #22
 8002c38:	701a      	strb	r2, [r3, #0]

				}
		if(cmd2Execute==0x00){

				}
		if(cmd2Execute=0x00){
 8002c3a:	1dfb      	adds	r3, r7, #7
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	701a      	strb	r2, [r3, #0]

				}
//			}
//		}
		USART2->ICR|=USART_ICR_ORECF;
 8002c40:	4b0a      	ldr	r3, [pc, #40]	; (8002c6c <cmdExecute+0x1f4>)
 8002c42:	6a1a      	ldr	r2, [r3, #32]
 8002c44:	4b09      	ldr	r3, [pc, #36]	; (8002c6c <cmdExecute+0x1f4>)
 8002c46:	2108      	movs	r1, #8
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	621a      	str	r2, [r3, #32]
 8002c4c:	e004      	b.n	8002c58 <cmdExecute+0x1e0>
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 8002c4e:	46c0      	nop			; (mov r8, r8)
 8002c50:	e002      	b.n	8002c58 <cmdExecute+0x1e0>
		if(soundReady==0){return;}
 8002c52:	46c0      	nop			; (mov r8, r8)
 8002c54:	e000      	b.n	8002c58 <cmdExecute+0x1e0>
		if (bf4me!=0x00){return;}	// protection against false BF resets
 8002c56:	46c0      	nop			; (mov r8, r8)
	}
 8002c58:	0018      	movs	r0, r3
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	b003      	add	sp, #12
 8002c5e:	bd90      	pop	{r4, r7, pc}
 8002c60:	200003f0 	.word	0x200003f0
 8002c64:	20000061 	.word	0x20000061
 8002c68:	20000427 	.word	0x20000427
 8002c6c:	40004400 	.word	0x40004400
 8002c70:	50000800 	.word	0x50000800
 8002c74:	200003c5 	.word	0x200003c5
 8002c78:	200003cc 	.word	0x200003cc
 8002c7c:	200003d0 	.word	0x200003d0
 8002c80:	200003ca 	.word	0x200003ca
 8002c84:	20000431 	.word	0x20000431
 8002c88:	200003d8 	.word	0x200003d8
 8002c8c:	200003c6 	.word	0x200003c6
 8002c90:	200003c7 	.word	0x200003c7
 8002c94:	200003c8 	.word	0x200003c8

08002c98 <printASCIIarray>:
//========================================================================================================================
	uint8_t printASCIIarray(uint8_t imX,uint8_t imY,uint8_t strLen,uint8_t fontInfo,uint8_t dataASCII[]){
 8002c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c9a:	46ce      	mov	lr, r9
 8002c9c:	4647      	mov	r7, r8
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b0e5      	sub	sp, #404	; 0x194
 8002ca2:	af02      	add	r7, sp, #8
 8002ca4:	0016      	movs	r6, r2
 8002ca6:	469c      	mov	ip, r3
 8002ca8:	2320      	movs	r3, #32
 8002caa:	33ff      	adds	r3, #255	; 0xff
 8002cac:	2208      	movs	r2, #8
 8002cae:	189b      	adds	r3, r3, r2
 8002cb0:	19da      	adds	r2, r3, r7
 8002cb2:	1c03      	adds	r3, r0, #0
 8002cb4:	7013      	strb	r3, [r2, #0]
 8002cb6:	238f      	movs	r3, #143	; 0x8f
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	2208      	movs	r2, #8
 8002cbc:	189b      	adds	r3, r3, r2
 8002cbe:	19da      	adds	r2, r3, r7
 8002cc0:	1c0b      	adds	r3, r1, #0
 8002cc2:	7013      	strb	r3, [r2, #0]
 8002cc4:	221e      	movs	r2, #30
 8002cc6:	32ff      	adds	r2, #255	; 0xff
 8002cc8:	2308      	movs	r3, #8
 8002cca:	18d3      	adds	r3, r2, r3
 8002ccc:	19da      	adds	r2, r3, r7
 8002cce:	1c33      	adds	r3, r6, #0
 8002cd0:	7013      	strb	r3, [r2, #0]
 8002cd2:	268e      	movs	r6, #142	; 0x8e
 8002cd4:	0076      	lsls	r6, r6, #1
 8002cd6:	2308      	movs	r3, #8
 8002cd8:	18f3      	adds	r3, r6, r3
 8002cda:	19da      	adds	r2, r3, r7
 8002cdc:	4663      	mov	r3, ip
 8002cde:	7013      	strb	r3, [r2, #0]
			uint8_t X_increment,ASCII_height,X_width,ASCII_X,decY,fontCur,contrast,contrastH,contrastL;
//			uint8_t weoBuffer1[49],weoBuffer2[49],weoBuffer[49];
			uint16_t i,j,k, symLen;
			ASCII_X=imX;
 8002ce0:	235f      	movs	r3, #95	; 0x5f
 8002ce2:	218c      	movs	r1, #140	; 0x8c
 8002ce4:	0049      	lsls	r1, r1, #1
 8002ce6:	185a      	adds	r2, r3, r1
 8002ce8:	2308      	movs	r3, #8
 8002cea:	469c      	mov	ip, r3
 8002cec:	44bc      	add	ip, r7
 8002cee:	4462      	add	r2, ip
 8002cf0:	2020      	movs	r0, #32
 8002cf2:	30ff      	adds	r0, #255	; 0xff
 8002cf4:	2308      	movs	r3, #8
 8002cf6:	18c3      	adds	r3, r0, r3
 8002cf8:	19db      	adds	r3, r3, r7
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	7013      	strb	r3, [r2, #0]

			contrastL = (fontInfo & 0xF0)>>4;
 8002cfe:	205e      	movs	r0, #94	; 0x5e
 8002d00:	1842      	adds	r2, r0, r1
 8002d02:	2308      	movs	r3, #8
 8002d04:	469c      	mov	ip, r3
 8002d06:	44bc      	add	ip, r7
 8002d08:	4462      	add	r2, ip
 8002d0a:	2308      	movs	r3, #8
 8002d0c:	18f3      	adds	r3, r6, r3
 8002d0e:	19db      	adds	r3, r3, r7
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	091b      	lsrs	r3, r3, #4
 8002d14:	7013      	strb	r3, [r2, #0]
			contrastH = (contrastL)<<4;
 8002d16:	265d      	movs	r6, #93	; 0x5d
 8002d18:	1872      	adds	r2, r6, r1
 8002d1a:	2308      	movs	r3, #8
 8002d1c:	469c      	mov	ip, r3
 8002d1e:	44bc      	add	ip, r7
 8002d20:	4462      	add	r2, ip
 8002d22:	1843      	adds	r3, r0, r1
 8002d24:	603b      	str	r3, [r7, #0]
 8002d26:	2308      	movs	r3, #8
 8002d28:	469c      	mov	ip, r3
 8002d2a:	44bc      	add	ip, r7
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	4463      	add	r3, ip
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	011b      	lsls	r3, r3, #4
 8002d34:	7013      	strb	r3, [r2, #0]
			contrast = contrastH|contrastL;
 8002d36:	235c      	movs	r3, #92	; 0x5c
 8002d38:	000a      	movs	r2, r1
 8002d3a:	1859      	adds	r1, r3, r1
 8002d3c:	2308      	movs	r3, #8
 8002d3e:	469c      	mov	ip, r3
 8002d40:	44bc      	add	ip, r7
 8002d42:	4461      	add	r1, ip
 8002d44:	0013      	movs	r3, r2
 8002d46:	18f2      	adds	r2, r6, r3
 8002d48:	2608      	movs	r6, #8
 8002d4a:	46b4      	mov	ip, r6
 8002d4c:	44bc      	add	ip, r7
 8002d4e:	4462      	add	r2, ip
 8002d50:	001e      	movs	r6, r3
 8002d52:	18c0      	adds	r0, r0, r3
 8002d54:	2308      	movs	r3, #8
 8002d56:	18fb      	adds	r3, r7, r3
 8002d58:	18c3      	adds	r3, r0, r3
 8002d5a:	7812      	ldrb	r2, [r2, #0]
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	700b      	strb	r3, [r1, #0]
//			contrast = (fontInfo & 0xF0)>>4;
//			contrast=0x33;

			decY=0x01;
 8002d62:	2160      	movs	r1, #96	; 0x60
 8002d64:	0030      	movs	r0, r6
 8002d66:	180a      	adds	r2, r1, r0
 8002d68:	2308      	movs	r3, #8
 8002d6a:	469c      	mov	ip, r3
 8002d6c:	44bc      	add	ip, r7
 8002d6e:	4462      	add	r2, ip
 8002d70:	2301      	movs	r3, #1
 8002d72:	7013      	strb	r3, [r2, #0]
			if(imY % 2 !=0){
 8002d74:	238f      	movs	r3, #143	; 0x8f
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	2208      	movs	r2, #8
 8002d7a:	189b      	adds	r3, r3, r2
 8002d7c:	19db      	adds	r3, r3, r7
 8002d7e:	781a      	ldrb	r2, [r3, #0]
 8002d80:	2301      	movs	r3, #1
 8002d82:	4013      	ands	r3, r2
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d005      	beq.n	8002d96 <printASCIIarray+0xfe>
				decY=0x02;
 8002d8a:	180b      	adds	r3, r1, r0
 8002d8c:	2208      	movs	r2, #8
 8002d8e:	18ba      	adds	r2, r7, r2
 8002d90:	189a      	adds	r2, r3, r2
 8002d92:	2302      	movs	r3, #2
 8002d94:	7013      	strb	r3, [r2, #0]
			}
			if((fontInfo & 0x00)==0){
				fontCur=0;
 8002d96:	2161      	movs	r1, #97	; 0x61
 8002d98:	208c      	movs	r0, #140	; 0x8c
 8002d9a:	0040      	lsls	r0, r0, #1
 8002d9c:	180b      	adds	r3, r1, r0
 8002d9e:	2208      	movs	r2, #8
 8002da0:	18ba      	adds	r2, r7, r2
 8002da2:	189a      	adds	r2, r3, r2
 8002da4:	2300      	movs	r3, #0
 8002da6:	7013      	strb	r3, [r2, #0]
			}
			if((fontInfo & 0x01)==1){
 8002da8:	238e      	movs	r3, #142	; 0x8e
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	2208      	movs	r2, #8
 8002dae:	189b      	adds	r3, r3, r2
 8002db0:	19db      	adds	r3, r3, r7
 8002db2:	781a      	ldrb	r2, [r3, #0]
 8002db4:	2301      	movs	r3, #1
 8002db6:	4013      	ands	r3, r2
 8002db8:	d005      	beq.n	8002dc6 <printASCIIarray+0x12e>
				fontCur=1;
 8002dba:	180b      	adds	r3, r1, r0
 8002dbc:	2208      	movs	r2, #8
 8002dbe:	18ba      	adds	r2, r7, r2
 8002dc0:	189a      	adds	r2, r3, r2
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	7013      	strb	r3, [r2, #0]
			}
			if((fontInfo & 0x02)==2){
 8002dc6:	238e      	movs	r3, #142	; 0x8e
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	2208      	movs	r2, #8
 8002dcc:	189b      	adds	r3, r3, r2
 8002dce:	19db      	adds	r3, r3, r7
 8002dd0:	781a      	ldrb	r2, [r3, #0]
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	d008      	beq.n	8002dea <printASCIIarray+0x152>
				fontCur=2;
 8002dd8:	2361      	movs	r3, #97	; 0x61
 8002dda:	228c      	movs	r2, #140	; 0x8c
 8002ddc:	0052      	lsls	r2, r2, #1
 8002dde:	189b      	adds	r3, r3, r2
 8002de0:	2208      	movs	r2, #8
 8002de2:	18ba      	adds	r2, r7, r2
 8002de4:	189a      	adds	r2, r3, r2
 8002de6:	2302      	movs	r3, #2
 8002de8:	7013      	strb	r3, [r2, #0]
			}
//			fontCur=2;
			if(fontCur==0){
 8002dea:	2361      	movs	r3, #97	; 0x61
 8002dec:	268c      	movs	r6, #140	; 0x8c
 8002dee:	0076      	lsls	r6, r6, #1
 8002df0:	199b      	adds	r3, r3, r6
 8002df2:	2208      	movs	r2, #8
 8002df4:	4694      	mov	ip, r2
 8002df6:	44bc      	add	ip, r7
 8002df8:	4463      	add	r3, ip
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d000      	beq.n	8002e02 <printASCIIarray+0x16a>
 8002e00:	e2a7      	b.n	8003352 <printASCIIarray+0x6ba>
 8002e02:	466b      	mov	r3, sp
 8002e04:	4698      	mov	r8, r3
				symLen=49;
 8002e06:	215a      	movs	r1, #90	; 0x5a
 8002e08:	198b      	adds	r3, r1, r6
 8002e0a:	2208      	movs	r2, #8
 8002e0c:	18ba      	adds	r2, r7, r2
 8002e0e:	189a      	adds	r2, r3, r2
 8002e10:	2331      	movs	r3, #49	; 0x31
 8002e12:	8013      	strh	r3, [r2, #0]
				uint8_t weoBuffer[symLen];
 8002e14:	198b      	adds	r3, r1, r6
 8002e16:	2208      	movs	r2, #8
 8002e18:	4694      	mov	ip, r2
 8002e1a:	44bc      	add	ip, r7
 8002e1c:	4463      	add	r3, ip
 8002e1e:	881a      	ldrh	r2, [r3, #0]
 8002e20:	0013      	movs	r3, r2
 8002e22:	3b01      	subs	r3, #1
 8002e24:	21b6      	movs	r1, #182	; 0xb6
 8002e26:	0049      	lsls	r1, r1, #1
 8002e28:	2008      	movs	r0, #8
 8002e2a:	1809      	adds	r1, r1, r0
 8002e2c:	19c9      	adds	r1, r1, r7
 8002e2e:	600b      	str	r3, [r1, #0]
 8002e30:	2188      	movs	r1, #136	; 0x88
 8002e32:	2308      	movs	r3, #8
 8002e34:	18cb      	adds	r3, r1, r3
 8002e36:	19db      	adds	r3, r3, r7
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	208c      	movs	r0, #140	; 0x8c
 8002e3e:	2608      	movs	r6, #8
 8002e40:	1980      	adds	r0, r0, r6
 8002e42:	19c0      	adds	r0, r0, r7
 8002e44:	6003      	str	r3, [r0, #0]
 8002e46:	2308      	movs	r3, #8
 8002e48:	18cb      	adds	r3, r1, r3
 8002e4a:	19db      	adds	r3, r3, r7
 8002e4c:	6818      	ldr	r0, [r3, #0]
 8002e4e:	6859      	ldr	r1, [r3, #4]
 8002e50:	0003      	movs	r3, r0
 8002e52:	0f5b      	lsrs	r3, r3, #29
 8002e54:	000e      	movs	r6, r1
 8002e56:	00f5      	lsls	r5, r6, #3
 8002e58:	431d      	orrs	r5, r3
 8002e5a:	0003      	movs	r3, r0
 8002e5c:	00dc      	lsls	r4, r3, #3
 8002e5e:	2180      	movs	r1, #128	; 0x80
 8002e60:	2308      	movs	r3, #8
 8002e62:	18cb      	adds	r3, r1, r3
 8002e64:	19db      	adds	r3, r3, r7
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	2300      	movs	r3, #0
 8002e6a:	2084      	movs	r0, #132	; 0x84
 8002e6c:	2408      	movs	r4, #8
 8002e6e:	1900      	adds	r0, r0, r4
 8002e70:	19c0      	adds	r0, r0, r7
 8002e72:	6003      	str	r3, [r0, #0]
 8002e74:	2308      	movs	r3, #8
 8002e76:	18cb      	adds	r3, r1, r3
 8002e78:	19db      	adds	r3, r3, r7
 8002e7a:	6818      	ldr	r0, [r3, #0]
 8002e7c:	6859      	ldr	r1, [r3, #4]
 8002e7e:	0003      	movs	r3, r0
 8002e80:	0f5b      	lsrs	r3, r3, #29
 8002e82:	000d      	movs	r5, r1
 8002e84:	00ed      	lsls	r5, r5, #3
 8002e86:	248a      	movs	r4, #138	; 0x8a
 8002e88:	0064      	lsls	r4, r4, #1
 8002e8a:	2608      	movs	r6, #8
 8002e8c:	19a6      	adds	r6, r4, r6
 8002e8e:	19f6      	adds	r6, r6, r7
 8002e90:	6035      	str	r5, [r6, #0]
 8002e92:	2508      	movs	r5, #8
 8002e94:	1965      	adds	r5, r4, r5
 8002e96:	19ed      	adds	r5, r5, r7
 8002e98:	682d      	ldr	r5, [r5, #0]
 8002e9a:	431d      	orrs	r5, r3
 8002e9c:	2308      	movs	r3, #8
 8002e9e:	18e3      	adds	r3, r4, r3
 8002ea0:	19db      	adds	r3, r3, r7
 8002ea2:	601d      	str	r5, [r3, #0]
 8002ea4:	0003      	movs	r3, r0
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	2188      	movs	r1, #136	; 0x88
 8002eaa:	0049      	lsls	r1, r1, #1
 8002eac:	2008      	movs	r0, #8
 8002eae:	1809      	adds	r1, r1, r0
 8002eb0:	19c9      	adds	r1, r1, r7
 8002eb2:	600b      	str	r3, [r1, #0]
 8002eb4:	0013      	movs	r3, r2
 8002eb6:	3307      	adds	r3, #7
 8002eb8:	08db      	lsrs	r3, r3, #3
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	466a      	mov	r2, sp
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	469d      	mov	sp, r3
 8002ec2:	ab02      	add	r3, sp, #8
 8002ec4:	3300      	adds	r3, #0
 8002ec6:	22b4      	movs	r2, #180	; 0xb4
 8002ec8:	0052      	lsls	r2, r2, #1
 8002eca:	2108      	movs	r1, #8
 8002ecc:	1852      	adds	r2, r2, r1
 8002ece:	19d2      	adds	r2, r2, r7
 8002ed0:	6013      	str	r3, [r2, #0]
				uint8_t weoBuffer1[symLen];
 8002ed2:	245a      	movs	r4, #90	; 0x5a
 8002ed4:	2390      	movs	r3, #144	; 0x90
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	18fb      	adds	r3, r7, r3
 8002eda:	601c      	str	r4, [r3, #0]
 8002edc:	268c      	movs	r6, #140	; 0x8c
 8002ede:	0076      	lsls	r6, r6, #1
 8002ee0:	19a3      	adds	r3, r4, r6
 8002ee2:	2208      	movs	r2, #8
 8002ee4:	4694      	mov	ip, r2
 8002ee6:	44bc      	add	ip, r7
 8002ee8:	4463      	add	r3, ip
 8002eea:	881a      	ldrh	r2, [r3, #0]
 8002eec:	0013      	movs	r3, r2
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	21b2      	movs	r1, #178	; 0xb2
 8002ef2:	0049      	lsls	r1, r1, #1
 8002ef4:	2008      	movs	r0, #8
 8002ef6:	1809      	adds	r1, r1, r0
 8002ef8:	19c9      	adds	r1, r1, r7
 8002efa:	600b      	str	r3, [r1, #0]
 8002efc:	2380      	movs	r3, #128	; 0x80
 8002efe:	18fb      	adds	r3, r7, r3
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	2300      	movs	r3, #0
 8002f04:	2184      	movs	r1, #132	; 0x84
 8002f06:	1879      	adds	r1, r7, r1
 8002f08:	600b      	str	r3, [r1, #0]
 8002f0a:	2380      	movs	r3, #128	; 0x80
 8002f0c:	18fb      	adds	r3, r7, r3
 8002f0e:	6818      	ldr	r0, [r3, #0]
 8002f10:	6859      	ldr	r1, [r3, #4]
 8002f12:	0003      	movs	r3, r0
 8002f14:	0f5b      	lsrs	r3, r3, #29
 8002f16:	469c      	mov	ip, r3
 8002f18:	000d      	movs	r5, r1
 8002f1a:	00ed      	lsls	r5, r5, #3
 8002f1c:	2486      	movs	r4, #134	; 0x86
 8002f1e:	0064      	lsls	r4, r4, #1
 8002f20:	2308      	movs	r3, #8
 8002f22:	18e4      	adds	r4, r4, r3
 8002f24:	19e4      	adds	r4, r4, r7
 8002f26:	6025      	str	r5, [r4, #0]
 8002f28:	2586      	movs	r5, #134	; 0x86
 8002f2a:	006d      	lsls	r5, r5, #1
 8002f2c:	2308      	movs	r3, #8
 8002f2e:	18eb      	adds	r3, r5, r3
 8002f30:	19dc      	adds	r4, r3, r7
 8002f32:	6825      	ldr	r5, [r4, #0]
 8002f34:	4663      	mov	r3, ip
 8002f36:	431d      	orrs	r5, r3
 8002f38:	2386      	movs	r3, #134	; 0x86
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	2408      	movs	r4, #8
 8002f3e:	191b      	adds	r3, r3, r4
 8002f40:	19db      	adds	r3, r3, r7
 8002f42:	601d      	str	r5, [r3, #0]
 8002f44:	0003      	movs	r3, r0
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	2184      	movs	r1, #132	; 0x84
 8002f4a:	0049      	lsls	r1, r1, #1
 8002f4c:	2008      	movs	r0, #8
 8002f4e:	1809      	adds	r1, r1, r0
 8002f50:	19c9      	adds	r1, r1, r7
 8002f52:	600b      	str	r3, [r1, #0]
 8002f54:	67ba      	str	r2, [r7, #120]	; 0x78
 8002f56:	2300      	movs	r3, #0
 8002f58:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f5a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002f5c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002f5e:	0003      	movs	r3, r0
 8002f60:	0f5b      	lsrs	r3, r3, #29
 8002f62:	000d      	movs	r5, r1
 8002f64:	00ed      	lsls	r5, r5, #3
 8002f66:	2486      	movs	r4, #134	; 0x86
 8002f68:	0064      	lsls	r4, r4, #1
 8002f6a:	193c      	adds	r4, r7, r4
 8002f6c:	6025      	str	r5, [r4, #0]
 8002f6e:	2486      	movs	r4, #134	; 0x86
 8002f70:	0064      	lsls	r4, r4, #1
 8002f72:	193c      	adds	r4, r7, r4
 8002f74:	6825      	ldr	r5, [r4, #0]
 8002f76:	431d      	orrs	r5, r3
 8002f78:	2386      	movs	r3, #134	; 0x86
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	18fb      	adds	r3, r7, r3
 8002f7e:	601d      	str	r5, [r3, #0]
 8002f80:	0003      	movs	r3, r0
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	2184      	movs	r1, #132	; 0x84
 8002f86:	0049      	lsls	r1, r1, #1
 8002f88:	1879      	adds	r1, r7, r1
 8002f8a:	600b      	str	r3, [r1, #0]
 8002f8c:	0013      	movs	r3, r2
 8002f8e:	3307      	adds	r3, #7
 8002f90:	08db      	lsrs	r3, r3, #3
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	466a      	mov	r2, sp
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	469d      	mov	sp, r3
 8002f9a:	ab02      	add	r3, sp, #8
 8002f9c:	3300      	adds	r3, #0
 8002f9e:	22b0      	movs	r2, #176	; 0xb0
 8002fa0:	0052      	lsls	r2, r2, #1
 8002fa2:	2108      	movs	r1, #8
 8002fa4:	1852      	adds	r2, r2, r1
 8002fa6:	19d2      	adds	r2, r2, r7
 8002fa8:	6013      	str	r3, [r2, #0]
				uint8_t weoBuffer2[symLen];
 8002faa:	2390      	movs	r3, #144	; 0x90
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	18fb      	adds	r3, r7, r3
 8002fb0:	681c      	ldr	r4, [r3, #0]
 8002fb2:	0035      	movs	r5, r6
 8002fb4:	1963      	adds	r3, r4, r5
 8002fb6:	2208      	movs	r2, #8
 8002fb8:	4694      	mov	ip, r2
 8002fba:	44bc      	add	ip, r7
 8002fbc:	4463      	add	r3, ip
 8002fbe:	881a      	ldrh	r2, [r3, #0]
 8002fc0:	0013      	movs	r3, r2
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	21ae      	movs	r1, #174	; 0xae
 8002fc6:	0049      	lsls	r1, r1, #1
 8002fc8:	2008      	movs	r0, #8
 8002fca:	1809      	adds	r1, r1, r0
 8002fcc:	19c9      	adds	r1, r1, r7
 8002fce:	600b      	str	r3, [r1, #0]
 8002fd0:	673a      	str	r2, [r7, #112]	; 0x70
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	677b      	str	r3, [r7, #116]	; 0x74
 8002fd6:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002fd8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002fda:	0003      	movs	r3, r0
 8002fdc:	0f5b      	lsrs	r3, r3, #29
 8002fde:	000c      	movs	r4, r1
 8002fe0:	00e4      	lsls	r4, r4, #3
 8002fe2:	26fc      	movs	r6, #252	; 0xfc
 8002fe4:	2508      	movs	r5, #8
 8002fe6:	1975      	adds	r5, r6, r5
 8002fe8:	19ed      	adds	r5, r5, r7
 8002fea:	602c      	str	r4, [r5, #0]
 8002fec:	2408      	movs	r4, #8
 8002fee:	1934      	adds	r4, r6, r4
 8002ff0:	19e4      	adds	r4, r4, r7
 8002ff2:	6824      	ldr	r4, [r4, #0]
 8002ff4:	431c      	orrs	r4, r3
 8002ff6:	2308      	movs	r3, #8
 8002ff8:	18f3      	adds	r3, r6, r3
 8002ffa:	19db      	adds	r3, r3, r7
 8002ffc:	601c      	str	r4, [r3, #0]
 8002ffe:	0003      	movs	r3, r0
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	21f8      	movs	r1, #248	; 0xf8
 8003004:	2008      	movs	r0, #8
 8003006:	1809      	adds	r1, r1, r0
 8003008:	19c9      	adds	r1, r1, r7
 800300a:	600b      	str	r3, [r1, #0]
 800300c:	66ba      	str	r2, [r7, #104]	; 0x68
 800300e:	2300      	movs	r3, #0
 8003010:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003012:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003014:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8003016:	0003      	movs	r3, r0
 8003018:	0f5b      	lsrs	r3, r3, #29
 800301a:	000c      	movs	r4, r1
 800301c:	00e4      	lsls	r4, r4, #3
 800301e:	26f4      	movs	r6, #244	; 0xf4
 8003020:	2508      	movs	r5, #8
 8003022:	1975      	adds	r5, r6, r5
 8003024:	19ed      	adds	r5, r5, r7
 8003026:	602c      	str	r4, [r5, #0]
 8003028:	2408      	movs	r4, #8
 800302a:	1934      	adds	r4, r6, r4
 800302c:	19e4      	adds	r4, r4, r7
 800302e:	6824      	ldr	r4, [r4, #0]
 8003030:	431c      	orrs	r4, r3
 8003032:	2308      	movs	r3, #8
 8003034:	18f3      	adds	r3, r6, r3
 8003036:	19db      	adds	r3, r3, r7
 8003038:	601c      	str	r4, [r3, #0]
 800303a:	0003      	movs	r3, r0
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	21f0      	movs	r1, #240	; 0xf0
 8003040:	2008      	movs	r0, #8
 8003042:	1809      	adds	r1, r1, r0
 8003044:	19c9      	adds	r1, r1, r7
 8003046:	600b      	str	r3, [r1, #0]
 8003048:	0013      	movs	r3, r2
 800304a:	3307      	adds	r3, #7
 800304c:	08db      	lsrs	r3, r3, #3
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	466a      	mov	r2, sp
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	469d      	mov	sp, r3
 8003056:	ab02      	add	r3, sp, #8
 8003058:	3300      	adds	r3, #0
 800305a:	22ac      	movs	r2, #172	; 0xac
 800305c:	0052      	lsls	r2, r2, #1
 800305e:	2108      	movs	r1, #8
 8003060:	1852      	adds	r2, r2, r1
 8003062:	19d2      	adds	r2, r2, r7
 8003064:	6013      	str	r3, [r2, #0]
				X_increment=0x07;
 8003066:	233f      	movs	r3, #63	; 0x3f
 8003068:	258c      	movs	r5, #140	; 0x8c
 800306a:	006d      	lsls	r5, r5, #1
 800306c:	195b      	adds	r3, r3, r5
 800306e:	2208      	movs	r2, #8
 8003070:	18ba      	adds	r2, r7, r2
 8003072:	189a      	adds	r2, r3, r2
 8003074:	2307      	movs	r3, #7
 8003076:	7013      	strb	r3, [r2, #0]
				ASCII_height=0x0E;
 8003078:	233e      	movs	r3, #62	; 0x3e
 800307a:	195b      	adds	r3, r3, r5
 800307c:	2208      	movs	r2, #8
 800307e:	18ba      	adds	r2, r7, r2
 8003080:	189a      	adds	r2, r3, r2
 8003082:	230e      	movs	r3, #14
 8003084:	7013      	strb	r3, [r2, #0]
				for(i=0;i<strLen;i++){
 8003086:	2362      	movs	r3, #98	; 0x62
 8003088:	195b      	adds	r3, r3, r5
 800308a:	2208      	movs	r2, #8
 800308c:	18ba      	adds	r2, r7, r2
 800308e:	189a      	adds	r2, r3, r2
 8003090:	2300      	movs	r3, #0
 8003092:	8013      	strh	r3, [r2, #0]
 8003094:	e110      	b.n	80032b8 <printASCIIarray+0x620>
					for(j=0;j<symLen;j++){
 8003096:	2364      	movs	r3, #100	; 0x64
 8003098:	228c      	movs	r2, #140	; 0x8c
 800309a:	0052      	lsls	r2, r2, #1
 800309c:	189b      	adds	r3, r3, r2
 800309e:	2208      	movs	r2, #8
 80030a0:	18ba      	adds	r2, r7, r2
 80030a2:	189a      	adds	r2, r3, r2
 80030a4:	2300      	movs	r3, #0
 80030a6:	8013      	strh	r3, [r2, #0]
 80030a8:	e042      	b.n	8003130 <printASCIIarray+0x498>
						weoBuffer[j]=F1[dataASCII[i]][j];
 80030aa:	2362      	movs	r3, #98	; 0x62
 80030ac:	218c      	movs	r1, #140	; 0x8c
 80030ae:	0049      	lsls	r1, r1, #1
 80030b0:	185b      	adds	r3, r3, r1
 80030b2:	2208      	movs	r2, #8
 80030b4:	4694      	mov	ip, r2
 80030b6:	44bc      	add	ip, r7
 80030b8:	4463      	add	r3, ip
 80030ba:	881a      	ldrh	r2, [r3, #0]
 80030bc:	2380      	movs	r3, #128	; 0x80
 80030be:	185b      	adds	r3, r3, r1
 80030c0:	2008      	movs	r0, #8
 80030c2:	4684      	mov	ip, r0
 80030c4:	2008      	movs	r0, #8
 80030c6:	4681      	mov	r9, r0
 80030c8:	44b9      	add	r9, r7
 80030ca:	44cc      	add	ip, r9
 80030cc:	4463      	add	r3, ip
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	189b      	adds	r3, r3, r2
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	001d      	movs	r5, r3
 80030d6:	2264      	movs	r2, #100	; 0x64
 80030d8:	1853      	adds	r3, r2, r1
 80030da:	2008      	movs	r0, #8
 80030dc:	4684      	mov	ip, r0
 80030de:	44bc      	add	ip, r7
 80030e0:	4463      	add	r3, ip
 80030e2:	8818      	ldrh	r0, [r3, #0]
 80030e4:	0016      	movs	r6, r2
 80030e6:	1853      	adds	r3, r2, r1
 80030e8:	2208      	movs	r2, #8
 80030ea:	4694      	mov	ip, r2
 80030ec:	44bc      	add	ip, r7
 80030ee:	4463      	add	r3, ip
 80030f0:	881c      	ldrh	r4, [r3, #0]
 80030f2:	497e      	ldr	r1, [pc, #504]	; (80032ec <printASCIIarray+0x654>)
 80030f4:	002a      	movs	r2, r5
 80030f6:	00d2      	lsls	r2, r2, #3
 80030f8:	1b52      	subs	r2, r2, r5
 80030fa:	00d3      	lsls	r3, r2, #3
 80030fc:	1a9b      	subs	r3, r3, r2
 80030fe:	18cb      	adds	r3, r1, r3
 8003100:	5c1b      	ldrb	r3, [r3, r0]
 8003102:	22b4      	movs	r2, #180	; 0xb4
 8003104:	0052      	lsls	r2, r2, #1
 8003106:	2108      	movs	r1, #8
 8003108:	1852      	adds	r2, r2, r1
 800310a:	19d2      	adds	r2, r2, r7
 800310c:	6812      	ldr	r2, [r2, #0]
 800310e:	5513      	strb	r3, [r2, r4]
					for(j=0;j<symLen;j++){
 8003110:	0032      	movs	r2, r6
 8003112:	218c      	movs	r1, #140	; 0x8c
 8003114:	0049      	lsls	r1, r1, #1
 8003116:	1853      	adds	r3, r2, r1
 8003118:	2008      	movs	r0, #8
 800311a:	4684      	mov	ip, r0
 800311c:	44bc      	add	ip, r7
 800311e:	4463      	add	r3, ip
 8003120:	881b      	ldrh	r3, [r3, #0]
 8003122:	1852      	adds	r2, r2, r1
 8003124:	2108      	movs	r1, #8
 8003126:	468c      	mov	ip, r1
 8003128:	44bc      	add	ip, r7
 800312a:	4462      	add	r2, ip
 800312c:	3301      	adds	r3, #1
 800312e:	8013      	strh	r3, [r2, #0]
 8003130:	2364      	movs	r3, #100	; 0x64
 8003132:	218c      	movs	r1, #140	; 0x8c
 8003134:	0049      	lsls	r1, r1, #1
 8003136:	185b      	adds	r3, r3, r1
 8003138:	2208      	movs	r2, #8
 800313a:	18ba      	adds	r2, r7, r2
 800313c:	189a      	adds	r2, r3, r2
 800313e:	235a      	movs	r3, #90	; 0x5a
 8003140:	185b      	adds	r3, r3, r1
 8003142:	2008      	movs	r0, #8
 8003144:	4684      	mov	ip, r0
 8003146:	44bc      	add	ip, r7
 8003148:	4463      	add	r3, ip
 800314a:	8812      	ldrh	r2, [r2, #0]
 800314c:	881b      	ldrh	r3, [r3, #0]
 800314e:	429a      	cmp	r2, r3
 8003150:	d3ab      	bcc.n	80030aa <printASCIIarray+0x412>
//							weoBuffer2[k]=((weoBuffer[k]&0xF0)>>4)&contrast;
//						}
//					for (k=0;k<symLen;k++){
//							weoBuffer[k]=(weoBuffer2[k]<<4)|weoBuffer1[k];
//						}
					for (k=0;k<symLen;k++){
 8003152:	2366      	movs	r3, #102	; 0x66
 8003154:	185b      	adds	r3, r3, r1
 8003156:	2208      	movs	r2, #8
 8003158:	18ba      	adds	r2, r7, r2
 800315a:	189a      	adds	r2, r3, r2
 800315c:	2300      	movs	r3, #0
 800315e:	8013      	strh	r3, [r2, #0]
 8003160:	e030      	b.n	80031c4 <printASCIIarray+0x52c>
						weoBuffer[k]=weoBuffer[k] & contrast;
 8003162:	2066      	movs	r0, #102	; 0x66
 8003164:	248c      	movs	r4, #140	; 0x8c
 8003166:	0064      	lsls	r4, r4, #1
 8003168:	1903      	adds	r3, r0, r4
 800316a:	2208      	movs	r2, #8
 800316c:	4694      	mov	ip, r2
 800316e:	44bc      	add	ip, r7
 8003170:	4463      	add	r3, ip
 8003172:	881a      	ldrh	r2, [r3, #0]
 8003174:	25b4      	movs	r5, #180	; 0xb4
 8003176:	006d      	lsls	r5, r5, #1
 8003178:	2308      	movs	r3, #8
 800317a:	18eb      	adds	r3, r5, r3
 800317c:	19db      	adds	r3, r3, r7
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	5c9a      	ldrb	r2, [r3, r2]
 8003182:	1903      	adds	r3, r0, r4
 8003184:	2108      	movs	r1, #8
 8003186:	468c      	mov	ip, r1
 8003188:	44bc      	add	ip, r7
 800318a:	4463      	add	r3, ip
 800318c:	8819      	ldrh	r1, [r3, #0]
 800318e:	235c      	movs	r3, #92	; 0x5c
 8003190:	191b      	adds	r3, r3, r4
 8003192:	2608      	movs	r6, #8
 8003194:	46b4      	mov	ip, r6
 8003196:	44bc      	add	ip, r7
 8003198:	4463      	add	r3, ip
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	4013      	ands	r3, r2
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	2208      	movs	r2, #8
 80031a2:	18aa      	adds	r2, r5, r2
 80031a4:	19d2      	adds	r2, r2, r7
 80031a6:	6812      	ldr	r2, [r2, #0]
 80031a8:	5453      	strb	r3, [r2, r1]
					for (k=0;k<symLen;k++){
 80031aa:	1903      	adds	r3, r0, r4
 80031ac:	2208      	movs	r2, #8
 80031ae:	4694      	mov	ip, r2
 80031b0:	44bc      	add	ip, r7
 80031b2:	4463      	add	r3, ip
 80031b4:	881b      	ldrh	r3, [r3, #0]
 80031b6:	1902      	adds	r2, r0, r4
 80031b8:	2108      	movs	r1, #8
 80031ba:	468c      	mov	ip, r1
 80031bc:	44bc      	add	ip, r7
 80031be:	4462      	add	r2, ip
 80031c0:	3301      	adds	r3, #1
 80031c2:	8013      	strh	r3, [r2, #0]
 80031c4:	2366      	movs	r3, #102	; 0x66
 80031c6:	258c      	movs	r5, #140	; 0x8c
 80031c8:	006d      	lsls	r5, r5, #1
 80031ca:	195b      	adds	r3, r3, r5
 80031cc:	2208      	movs	r2, #8
 80031ce:	18ba      	adds	r2, r7, r2
 80031d0:	189a      	adds	r2, r3, r2
 80031d2:	235a      	movs	r3, #90	; 0x5a
 80031d4:	195b      	adds	r3, r3, r5
 80031d6:	2108      	movs	r1, #8
 80031d8:	468c      	mov	ip, r1
 80031da:	44bc      	add	ip, r7
 80031dc:	4463      	add	r3, ip
 80031de:	8812      	ldrh	r2, [r2, #0]
 80031e0:	881b      	ldrh	r3, [r3, #0]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d3bd      	bcc.n	8003162 <printASCIIarray+0x4ca>
					}
				weoDrawRectangleFilled(ASCII_X, imY, (ASCII_X+X_increment-1), imY + ASCII_height - decY, 0xFF, weoBuffer);
 80031e6:	205f      	movs	r0, #95	; 0x5f
 80031e8:	1943      	adds	r3, r0, r5
 80031ea:	2208      	movs	r2, #8
 80031ec:	18ba      	adds	r2, r7, r2
 80031ee:	189a      	adds	r2, r3, r2
 80031f0:	233f      	movs	r3, #63	; 0x3f
 80031f2:	001e      	movs	r6, r3
 80031f4:	195b      	adds	r3, r3, r5
 80031f6:	2108      	movs	r1, #8
 80031f8:	468c      	mov	ip, r1
 80031fa:	44bc      	add	ip, r7
 80031fc:	4463      	add	r3, ip
 80031fe:	7812      	ldrb	r2, [r2, #0]
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	18d3      	adds	r3, r2, r3
 8003204:	b2db      	uxtb	r3, r3
 8003206:	3b01      	subs	r3, #1
 8003208:	b2dc      	uxtb	r4, r3
 800320a:	218f      	movs	r1, #143	; 0x8f
 800320c:	0049      	lsls	r1, r1, #1
 800320e:	2308      	movs	r3, #8
 8003210:	18cb      	adds	r3, r1, r3
 8003212:	19da      	adds	r2, r3, r7
 8003214:	213e      	movs	r1, #62	; 0x3e
 8003216:	194b      	adds	r3, r1, r5
 8003218:	2108      	movs	r1, #8
 800321a:	468c      	mov	ip, r1
 800321c:	44bc      	add	ip, r7
 800321e:	4463      	add	r3, ip
 8003220:	7812      	ldrb	r2, [r2, #0]
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	18d3      	adds	r3, r2, r3
 8003226:	b2da      	uxtb	r2, r3
 8003228:	2160      	movs	r1, #96	; 0x60
 800322a:	194b      	adds	r3, r1, r5
 800322c:	2108      	movs	r1, #8
 800322e:	468c      	mov	ip, r1
 8003230:	44bc      	add	ip, r7
 8003232:	4463      	add	r3, ip
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	b2db      	uxtb	r3, r3
 800323a:	4699      	mov	r9, r3
 800323c:	218f      	movs	r1, #143	; 0x8f
 800323e:	0049      	lsls	r1, r1, #1
 8003240:	2308      	movs	r3, #8
 8003242:	18cb      	adds	r3, r1, r3
 8003244:	19db      	adds	r3, r3, r7
 8003246:	7819      	ldrb	r1, [r3, #0]
 8003248:	0005      	movs	r5, r0
 800324a:	238c      	movs	r3, #140	; 0x8c
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	18c3      	adds	r3, r0, r3
 8003250:	2208      	movs	r2, #8
 8003252:	4694      	mov	ip, r2
 8003254:	44bc      	add	ip, r7
 8003256:	4463      	add	r3, ip
 8003258:	7818      	ldrb	r0, [r3, #0]
 800325a:	23b4      	movs	r3, #180	; 0xb4
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	2208      	movs	r2, #8
 8003260:	189b      	adds	r3, r3, r2
 8003262:	19db      	adds	r3, r3, r7
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	9301      	str	r3, [sp, #4]
 8003268:	23ff      	movs	r3, #255	; 0xff
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	464b      	mov	r3, r9
 800326e:	0022      	movs	r2, r4
 8003270:	f7fe f92c 	bl	80014cc <weoDrawRectangleFilled>
				ASCII_X += X_increment;
 8003274:	208c      	movs	r0, #140	; 0x8c
 8003276:	0040      	lsls	r0, r0, #1
 8003278:	182b      	adds	r3, r5, r0
 800327a:	2208      	movs	r2, #8
 800327c:	18ba      	adds	r2, r7, r2
 800327e:	1899      	adds	r1, r3, r2
 8003280:	182b      	adds	r3, r5, r0
 8003282:	2208      	movs	r2, #8
 8003284:	18ba      	adds	r2, r7, r2
 8003286:	189a      	adds	r2, r3, r2
 8003288:	0033      	movs	r3, r6
 800328a:	181b      	adds	r3, r3, r0
 800328c:	2408      	movs	r4, #8
 800328e:	46a4      	mov	ip, r4
 8003290:	44bc      	add	ip, r7
 8003292:	4463      	add	r3, ip
 8003294:	7812      	ldrb	r2, [r2, #0]
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	18d3      	adds	r3, r2, r3
 800329a:	700b      	strb	r3, [r1, #0]
				for(i=0;i<strLen;i++){
 800329c:	2262      	movs	r2, #98	; 0x62
 800329e:	1813      	adds	r3, r2, r0
 80032a0:	2108      	movs	r1, #8
 80032a2:	468c      	mov	ip, r1
 80032a4:	44bc      	add	ip, r7
 80032a6:	4463      	add	r3, ip
 80032a8:	881b      	ldrh	r3, [r3, #0]
 80032aa:	1812      	adds	r2, r2, r0
 80032ac:	2108      	movs	r1, #8
 80032ae:	468c      	mov	ip, r1
 80032b0:	44bc      	add	ip, r7
 80032b2:	4462      	add	r2, ip
 80032b4:	3301      	adds	r3, #1
 80032b6:	8013      	strh	r3, [r2, #0]
 80032b8:	231e      	movs	r3, #30
 80032ba:	33ff      	adds	r3, #255	; 0xff
 80032bc:	2208      	movs	r2, #8
 80032be:	189b      	adds	r3, r3, r2
 80032c0:	19db      	adds	r3, r3, r7
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	2162      	movs	r1, #98	; 0x62
 80032c8:	208c      	movs	r0, #140	; 0x8c
 80032ca:	0040      	lsls	r0, r0, #1
 80032cc:	180b      	adds	r3, r1, r0
 80032ce:	2408      	movs	r4, #8
 80032d0:	46a4      	mov	ip, r4
 80032d2:	44bc      	add	ip, r7
 80032d4:	4463      	add	r3, ip
 80032d6:	881b      	ldrh	r3, [r3, #0]
 80032d8:	4293      	cmp	r3, r2
 80032da:	d200      	bcs.n	80032de <printASCIIarray+0x646>
 80032dc:	e6db      	b.n	8003096 <printASCIIarray+0x3fe>
				}
				for(i=0;i<symLen;i++){
 80032de:	180b      	adds	r3, r1, r0
 80032e0:	2208      	movs	r2, #8
 80032e2:	18ba      	adds	r2, r7, r2
 80032e4:	189a      	adds	r2, r3, r2
 80032e6:	2300      	movs	r3, #0
 80032e8:	8013      	strh	r3, [r2, #0]
 80032ea:	e020      	b.n	800332e <printASCIIarray+0x696>
 80032ec:	0800c9cc 	.word	0x0800c9cc
									weoBuffer[j]=0x00;
 80032f0:	2364      	movs	r3, #100	; 0x64
 80032f2:	208c      	movs	r0, #140	; 0x8c
 80032f4:	0040      	lsls	r0, r0, #1
 80032f6:	181b      	adds	r3, r3, r0
 80032f8:	2208      	movs	r2, #8
 80032fa:	4694      	mov	ip, r2
 80032fc:	44bc      	add	ip, r7
 80032fe:	4463      	add	r3, ip
 8003300:	8819      	ldrh	r1, [r3, #0]
 8003302:	23b4      	movs	r3, #180	; 0xb4
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	2208      	movs	r2, #8
 8003308:	189b      	adds	r3, r3, r2
 800330a:	19db      	adds	r3, r3, r7
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	2300      	movs	r3, #0
 8003310:	5453      	strb	r3, [r2, r1]
				for(i=0;i<symLen;i++){
 8003312:	2262      	movs	r2, #98	; 0x62
 8003314:	1813      	adds	r3, r2, r0
 8003316:	2108      	movs	r1, #8
 8003318:	468c      	mov	ip, r1
 800331a:	44bc      	add	ip, r7
 800331c:	4463      	add	r3, ip
 800331e:	881b      	ldrh	r3, [r3, #0]
 8003320:	1812      	adds	r2, r2, r0
 8003322:	2108      	movs	r1, #8
 8003324:	468c      	mov	ip, r1
 8003326:	44bc      	add	ip, r7
 8003328:	4462      	add	r2, ip
 800332a:	3301      	adds	r3, #1
 800332c:	8013      	strh	r3, [r2, #0]
 800332e:	2362      	movs	r3, #98	; 0x62
 8003330:	218c      	movs	r1, #140	; 0x8c
 8003332:	0049      	lsls	r1, r1, #1
 8003334:	185b      	adds	r3, r3, r1
 8003336:	2208      	movs	r2, #8
 8003338:	18ba      	adds	r2, r7, r2
 800333a:	189a      	adds	r2, r3, r2
 800333c:	235a      	movs	r3, #90	; 0x5a
 800333e:	185b      	adds	r3, r3, r1
 8003340:	2108      	movs	r1, #8
 8003342:	468c      	mov	ip, r1
 8003344:	44bc      	add	ip, r7
 8003346:	4463      	add	r3, ip
 8003348:	8812      	ldrh	r2, [r2, #0]
 800334a:	881b      	ldrh	r3, [r3, #0]
 800334c:	429a      	cmp	r2, r3
 800334e:	d3cf      	bcc.n	80032f0 <printASCIIarray+0x658>
 8003350:	46c5      	mov	sp, r8
							}
			}
			if(fontCur==1){
 8003352:	2361      	movs	r3, #97	; 0x61
 8003354:	228c      	movs	r2, #140	; 0x8c
 8003356:	0052      	lsls	r2, r2, #1
 8003358:	189b      	adds	r3, r3, r2
 800335a:	2108      	movs	r1, #8
 800335c:	468c      	mov	ip, r1
 800335e:	44bc      	add	ip, r7
 8003360:	4463      	add	r3, ip
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d000      	beq.n	800336a <printASCIIarray+0x6d2>
 8003368:	e29b      	b.n	80038a2 <printASCIIarray+0xc0a>
 800336a:	466b      	mov	r3, sp
 800336c:	4698      	mov	r8, r3
				symLen=63;
 800336e:	245a      	movs	r4, #90	; 0x5a
 8003370:	0016      	movs	r6, r2
 8003372:	18a3      	adds	r3, r4, r2
 8003374:	2208      	movs	r2, #8
 8003376:	18ba      	adds	r2, r7, r2
 8003378:	189a      	adds	r2, r3, r2
 800337a:	233f      	movs	r3, #63	; 0x3f
 800337c:	8013      	strh	r3, [r2, #0]
				uint8_t weoBuffer[symLen];
 800337e:	2390      	movs	r3, #144	; 0x90
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	18fb      	adds	r3, r7, r3
 8003384:	601c      	str	r4, [r3, #0]
 8003386:	19a3      	adds	r3, r4, r6
 8003388:	2208      	movs	r2, #8
 800338a:	4694      	mov	ip, r2
 800338c:	44bc      	add	ip, r7
 800338e:	4463      	add	r3, ip
 8003390:	881a      	ldrh	r2, [r3, #0]
 8003392:	0013      	movs	r3, r2
 8003394:	3b01      	subs	r3, #1
 8003396:	21a8      	movs	r1, #168	; 0xa8
 8003398:	0049      	lsls	r1, r1, #1
 800339a:	2008      	movs	r0, #8
 800339c:	1809      	adds	r1, r1, r0
 800339e:	19c9      	adds	r1, r1, r7
 80033a0:	600b      	str	r3, [r1, #0]
 80033a2:	663a      	str	r2, [r7, #96]	; 0x60
 80033a4:	2300      	movs	r3, #0
 80033a6:	667b      	str	r3, [r7, #100]	; 0x64
 80033a8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80033aa:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80033ac:	0003      	movs	r3, r0
 80033ae:	0f5b      	lsrs	r3, r3, #29
 80033b0:	000e      	movs	r6, r1
 80033b2:	00f6      	lsls	r6, r6, #3
 80033b4:	25ec      	movs	r5, #236	; 0xec
 80033b6:	2408      	movs	r4, #8
 80033b8:	192c      	adds	r4, r5, r4
 80033ba:	19e4      	adds	r4, r4, r7
 80033bc:	6026      	str	r6, [r4, #0]
 80033be:	2408      	movs	r4, #8
 80033c0:	192c      	adds	r4, r5, r4
 80033c2:	19e4      	adds	r4, r4, r7
 80033c4:	6826      	ldr	r6, [r4, #0]
 80033c6:	431e      	orrs	r6, r3
 80033c8:	2308      	movs	r3, #8
 80033ca:	18eb      	adds	r3, r5, r3
 80033cc:	19db      	adds	r3, r3, r7
 80033ce:	601e      	str	r6, [r3, #0]
 80033d0:	0003      	movs	r3, r0
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	21e8      	movs	r1, #232	; 0xe8
 80033d6:	2008      	movs	r0, #8
 80033d8:	1809      	adds	r1, r1, r0
 80033da:	19c9      	adds	r1, r1, r7
 80033dc:	600b      	str	r3, [r1, #0]
 80033de:	65ba      	str	r2, [r7, #88]	; 0x58
 80033e0:	2300      	movs	r3, #0
 80033e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033e4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80033e6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80033e8:	0003      	movs	r3, r0
 80033ea:	0f5b      	lsrs	r3, r3, #29
 80033ec:	000e      	movs	r6, r1
 80033ee:	00f6      	lsls	r6, r6, #3
 80033f0:	25e4      	movs	r5, #228	; 0xe4
 80033f2:	2408      	movs	r4, #8
 80033f4:	192c      	adds	r4, r5, r4
 80033f6:	19e4      	adds	r4, r4, r7
 80033f8:	6026      	str	r6, [r4, #0]
 80033fa:	2408      	movs	r4, #8
 80033fc:	192c      	adds	r4, r5, r4
 80033fe:	19e6      	adds	r6, r4, r7
 8003400:	6836      	ldr	r6, [r6, #0]
 8003402:	431e      	orrs	r6, r3
 8003404:	2308      	movs	r3, #8
 8003406:	18eb      	adds	r3, r5, r3
 8003408:	19db      	adds	r3, r3, r7
 800340a:	601e      	str	r6, [r3, #0]
 800340c:	0003      	movs	r3, r0
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	21e0      	movs	r1, #224	; 0xe0
 8003412:	2008      	movs	r0, #8
 8003414:	1809      	adds	r1, r1, r0
 8003416:	19c9      	adds	r1, r1, r7
 8003418:	600b      	str	r3, [r1, #0]
 800341a:	0013      	movs	r3, r2
 800341c:	3307      	adds	r3, #7
 800341e:	08db      	lsrs	r3, r3, #3
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	466a      	mov	r2, sp
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	469d      	mov	sp, r3
 8003428:	ab02      	add	r3, sp, #8
 800342a:	3300      	adds	r3, #0
 800342c:	21a6      	movs	r1, #166	; 0xa6
 800342e:	0049      	lsls	r1, r1, #1
 8003430:	2208      	movs	r2, #8
 8003432:	188a      	adds	r2, r1, r2
 8003434:	19d1      	adds	r1, r2, r7
 8003436:	600b      	str	r3, [r1, #0]
				uint8_t weoBuffer1[symLen];
 8003438:	2390      	movs	r3, #144	; 0x90
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	18fb      	adds	r3, r7, r3
 800343e:	681c      	ldr	r4, [r3, #0]
 8003440:	2390      	movs	r3, #144	; 0x90
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	18fb      	adds	r3, r7, r3
 8003446:	601c      	str	r4, [r3, #0]
 8003448:	268c      	movs	r6, #140	; 0x8c
 800344a:	0076      	lsls	r6, r6, #1
 800344c:	19a3      	adds	r3, r4, r6
 800344e:	2208      	movs	r2, #8
 8003450:	4694      	mov	ip, r2
 8003452:	44bc      	add	ip, r7
 8003454:	4463      	add	r3, ip
 8003456:	881a      	ldrh	r2, [r3, #0]
 8003458:	0013      	movs	r3, r2
 800345a:	3b01      	subs	r3, #1
 800345c:	21a4      	movs	r1, #164	; 0xa4
 800345e:	0049      	lsls	r1, r1, #1
 8003460:	2008      	movs	r0, #8
 8003462:	1809      	adds	r1, r1, r0
 8003464:	19c9      	adds	r1, r1, r7
 8003466:	600b      	str	r3, [r1, #0]
 8003468:	653a      	str	r2, [r7, #80]	; 0x50
 800346a:	2300      	movs	r3, #0
 800346c:	657b      	str	r3, [r7, #84]	; 0x54
 800346e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003470:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003472:	0003      	movs	r3, r0
 8003474:	0f5b      	lsrs	r3, r3, #29
 8003476:	000e      	movs	r6, r1
 8003478:	00f6      	lsls	r6, r6, #3
 800347a:	25dc      	movs	r5, #220	; 0xdc
 800347c:	2408      	movs	r4, #8
 800347e:	192c      	adds	r4, r5, r4
 8003480:	19e4      	adds	r4, r4, r7
 8003482:	6026      	str	r6, [r4, #0]
 8003484:	2408      	movs	r4, #8
 8003486:	192c      	adds	r4, r5, r4
 8003488:	19e4      	adds	r4, r4, r7
 800348a:	6826      	ldr	r6, [r4, #0]
 800348c:	431e      	orrs	r6, r3
 800348e:	2308      	movs	r3, #8
 8003490:	18eb      	adds	r3, r5, r3
 8003492:	19db      	adds	r3, r3, r7
 8003494:	601e      	str	r6, [r3, #0]
 8003496:	0003      	movs	r3, r0
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	21d8      	movs	r1, #216	; 0xd8
 800349c:	2008      	movs	r0, #8
 800349e:	1809      	adds	r1, r1, r0
 80034a0:	19c9      	adds	r1, r1, r7
 80034a2:	600b      	str	r3, [r1, #0]
 80034a4:	64ba      	str	r2, [r7, #72]	; 0x48
 80034a6:	2300      	movs	r3, #0
 80034a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034aa:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80034ac:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80034ae:	0003      	movs	r3, r0
 80034b0:	0f5b      	lsrs	r3, r3, #29
 80034b2:	000e      	movs	r6, r1
 80034b4:	00f6      	lsls	r6, r6, #3
 80034b6:	25d4      	movs	r5, #212	; 0xd4
 80034b8:	2408      	movs	r4, #8
 80034ba:	192c      	adds	r4, r5, r4
 80034bc:	19e4      	adds	r4, r4, r7
 80034be:	6026      	str	r6, [r4, #0]
 80034c0:	2408      	movs	r4, #8
 80034c2:	192c      	adds	r4, r5, r4
 80034c4:	19e6      	adds	r6, r4, r7
 80034c6:	6836      	ldr	r6, [r6, #0]
 80034c8:	431e      	orrs	r6, r3
 80034ca:	2308      	movs	r3, #8
 80034cc:	18eb      	adds	r3, r5, r3
 80034ce:	19db      	adds	r3, r3, r7
 80034d0:	601e      	str	r6, [r3, #0]
 80034d2:	0003      	movs	r3, r0
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	21d0      	movs	r1, #208	; 0xd0
 80034d8:	2008      	movs	r0, #8
 80034da:	1809      	adds	r1, r1, r0
 80034dc:	19c9      	adds	r1, r1, r7
 80034de:	600b      	str	r3, [r1, #0]
 80034e0:	0013      	movs	r3, r2
 80034e2:	3307      	adds	r3, #7
 80034e4:	08db      	lsrs	r3, r3, #3
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	466a      	mov	r2, sp
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	469d      	mov	sp, r3
 80034ee:	ab02      	add	r3, sp, #8
 80034f0:	3300      	adds	r3, #0
 80034f2:	21a2      	movs	r1, #162	; 0xa2
 80034f4:	0049      	lsls	r1, r1, #1
 80034f6:	2208      	movs	r2, #8
 80034f8:	188a      	adds	r2, r1, r2
 80034fa:	19d1      	adds	r1, r2, r7
 80034fc:	600b      	str	r3, [r1, #0]
				uint8_t weoBuffer2[symLen];
 80034fe:	2390      	movs	r3, #144	; 0x90
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	18fb      	adds	r3, r7, r3
 8003504:	681c      	ldr	r4, [r3, #0]
 8003506:	268c      	movs	r6, #140	; 0x8c
 8003508:	0076      	lsls	r6, r6, #1
 800350a:	19a3      	adds	r3, r4, r6
 800350c:	2208      	movs	r2, #8
 800350e:	4694      	mov	ip, r2
 8003510:	44bc      	add	ip, r7
 8003512:	4463      	add	r3, ip
 8003514:	881a      	ldrh	r2, [r3, #0]
 8003516:	0013      	movs	r3, r2
 8003518:	3b01      	subs	r3, #1
 800351a:	21a0      	movs	r1, #160	; 0xa0
 800351c:	0049      	lsls	r1, r1, #1
 800351e:	2008      	movs	r0, #8
 8003520:	1809      	adds	r1, r1, r0
 8003522:	19c9      	adds	r1, r1, r7
 8003524:	600b      	str	r3, [r1, #0]
 8003526:	643a      	str	r2, [r7, #64]	; 0x40
 8003528:	2300      	movs	r3, #0
 800352a:	647b      	str	r3, [r7, #68]	; 0x44
 800352c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800352e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003530:	0003      	movs	r3, r0
 8003532:	0f5b      	lsrs	r3, r3, #29
 8003534:	000c      	movs	r4, r1
 8003536:	00e4      	lsls	r4, r4, #3
 8003538:	25cc      	movs	r5, #204	; 0xcc
 800353a:	2608      	movs	r6, #8
 800353c:	19ae      	adds	r6, r5, r6
 800353e:	19f6      	adds	r6, r6, r7
 8003540:	6034      	str	r4, [r6, #0]
 8003542:	2408      	movs	r4, #8
 8003544:	192c      	adds	r4, r5, r4
 8003546:	19e4      	adds	r4, r4, r7
 8003548:	6824      	ldr	r4, [r4, #0]
 800354a:	431c      	orrs	r4, r3
 800354c:	2308      	movs	r3, #8
 800354e:	18eb      	adds	r3, r5, r3
 8003550:	19db      	adds	r3, r3, r7
 8003552:	601c      	str	r4, [r3, #0]
 8003554:	0003      	movs	r3, r0
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	21c8      	movs	r1, #200	; 0xc8
 800355a:	2008      	movs	r0, #8
 800355c:	1809      	adds	r1, r1, r0
 800355e:	19c9      	adds	r1, r1, r7
 8003560:	600b      	str	r3, [r1, #0]
 8003562:	63ba      	str	r2, [r7, #56]	; 0x38
 8003564:	2300      	movs	r3, #0
 8003566:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003568:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800356a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800356c:	0003      	movs	r3, r0
 800356e:	0f5b      	lsrs	r3, r3, #29
 8003570:	469c      	mov	ip, r3
 8003572:	000c      	movs	r4, r1
 8003574:	00e4      	lsls	r4, r4, #3
 8003576:	25c4      	movs	r5, #196	; 0xc4
 8003578:	002e      	movs	r6, r5
 800357a:	2308      	movs	r3, #8
 800357c:	18ed      	adds	r5, r5, r3
 800357e:	19ed      	adds	r5, r5, r7
 8003580:	602c      	str	r4, [r5, #0]
 8003582:	0034      	movs	r4, r6
 8003584:	0026      	movs	r6, r4
 8003586:	2308      	movs	r3, #8
 8003588:	18e3      	adds	r3, r4, r3
 800358a:	19dd      	adds	r5, r3, r7
 800358c:	682c      	ldr	r4, [r5, #0]
 800358e:	4663      	mov	r3, ip
 8003590:	431c      	orrs	r4, r3
 8003592:	0033      	movs	r3, r6
 8003594:	2508      	movs	r5, #8
 8003596:	195b      	adds	r3, r3, r5
 8003598:	19db      	adds	r3, r3, r7
 800359a:	601c      	str	r4, [r3, #0]
 800359c:	0003      	movs	r3, r0
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	21c0      	movs	r1, #192	; 0xc0
 80035a2:	2008      	movs	r0, #8
 80035a4:	1809      	adds	r1, r1, r0
 80035a6:	19c9      	adds	r1, r1, r7
 80035a8:	600b      	str	r3, [r1, #0]
 80035aa:	0013      	movs	r3, r2
 80035ac:	3307      	adds	r3, #7
 80035ae:	08db      	lsrs	r3, r3, #3
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	466a      	mov	r2, sp
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	469d      	mov	sp, r3
 80035b8:	ab02      	add	r3, sp, #8
 80035ba:	3300      	adds	r3, #0
 80035bc:	229e      	movs	r2, #158	; 0x9e
 80035be:	0052      	lsls	r2, r2, #1
 80035c0:	2108      	movs	r1, #8
 80035c2:	1852      	adds	r2, r2, r1
 80035c4:	19d2      	adds	r2, r2, r7
 80035c6:	6013      	str	r3, [r2, #0]
				X_increment=0x07;
 80035c8:	233f      	movs	r3, #63	; 0x3f
 80035ca:	268c      	movs	r6, #140	; 0x8c
 80035cc:	0076      	lsls	r6, r6, #1
 80035ce:	199b      	adds	r3, r3, r6
 80035d0:	2208      	movs	r2, #8
 80035d2:	18ba      	adds	r2, r7, r2
 80035d4:	189a      	adds	r2, r3, r2
 80035d6:	2307      	movs	r3, #7
 80035d8:	7013      	strb	r3, [r2, #0]
				ASCII_height=0x12;
 80035da:	233e      	movs	r3, #62	; 0x3e
 80035dc:	199b      	adds	r3, r3, r6
 80035de:	2208      	movs	r2, #8
 80035e0:	18ba      	adds	r2, r7, r2
 80035e2:	189a      	adds	r2, r3, r2
 80035e4:	2312      	movs	r3, #18
 80035e6:	7013      	strb	r3, [r2, #0]
				for(i=0;i<strLen;i++){
 80035e8:	2362      	movs	r3, #98	; 0x62
 80035ea:	199b      	adds	r3, r3, r6
 80035ec:	2208      	movs	r2, #8
 80035ee:	18ba      	adds	r2, r7, r2
 80035f0:	189a      	adds	r2, r3, r2
 80035f2:	2300      	movs	r3, #0
 80035f4:	8013      	strh	r3, [r2, #0]
 80035f6:	e107      	b.n	8003808 <printASCIIarray+0xb70>
					for(j=0;j<symLen;j++){
 80035f8:	2364      	movs	r3, #100	; 0x64
 80035fa:	228c      	movs	r2, #140	; 0x8c
 80035fc:	0052      	lsls	r2, r2, #1
 80035fe:	189b      	adds	r3, r3, r2
 8003600:	2208      	movs	r2, #8
 8003602:	18ba      	adds	r2, r7, r2
 8003604:	189a      	adds	r2, r3, r2
 8003606:	2300      	movs	r3, #0
 8003608:	8013      	strh	r3, [r2, #0]
 800360a:	e03f      	b.n	800368c <printASCIIarray+0x9f4>
						weoBuffer[j]=F2[dataASCII[i]][j];
 800360c:	2362      	movs	r3, #98	; 0x62
 800360e:	218c      	movs	r1, #140	; 0x8c
 8003610:	0049      	lsls	r1, r1, #1
 8003612:	185b      	adds	r3, r3, r1
 8003614:	2208      	movs	r2, #8
 8003616:	4694      	mov	ip, r2
 8003618:	44bc      	add	ip, r7
 800361a:	4463      	add	r3, ip
 800361c:	881a      	ldrh	r2, [r3, #0]
 800361e:	2380      	movs	r3, #128	; 0x80
 8003620:	185b      	adds	r3, r3, r1
 8003622:	2008      	movs	r0, #8
 8003624:	4684      	mov	ip, r0
 8003626:	2008      	movs	r0, #8
 8003628:	4681      	mov	r9, r0
 800362a:	44b9      	add	r9, r7
 800362c:	44cc      	add	ip, r9
 800362e:	4463      	add	r3, ip
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	189b      	adds	r3, r3, r2
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	001c      	movs	r4, r3
 8003638:	2664      	movs	r6, #100	; 0x64
 800363a:	000a      	movs	r2, r1
 800363c:	1873      	adds	r3, r6, r1
 800363e:	2108      	movs	r1, #8
 8003640:	468c      	mov	ip, r1
 8003642:	44bc      	add	ip, r7
 8003644:	4463      	add	r3, ip
 8003646:	8819      	ldrh	r1, [r3, #0]
 8003648:	0015      	movs	r5, r2
 800364a:	18b3      	adds	r3, r6, r2
 800364c:	2208      	movs	r2, #8
 800364e:	4694      	mov	ip, r2
 8003650:	44bc      	add	ip, r7
 8003652:	4463      	add	r3, ip
 8003654:	8818      	ldrh	r0, [r3, #0]
 8003656:	4a79      	ldr	r2, [pc, #484]	; (800383c <printASCIIarray+0xba4>)
 8003658:	0023      	movs	r3, r4
 800365a:	019b      	lsls	r3, r3, #6
 800365c:	1b1b      	subs	r3, r3, r4
 800365e:	18d3      	adds	r3, r2, r3
 8003660:	5c5b      	ldrb	r3, [r3, r1]
 8003662:	24a6      	movs	r4, #166	; 0xa6
 8003664:	0064      	lsls	r4, r4, #1
 8003666:	2208      	movs	r2, #8
 8003668:	18a2      	adds	r2, r4, r2
 800366a:	19d4      	adds	r4, r2, r7
 800366c:	6822      	ldr	r2, [r4, #0]
 800366e:	5413      	strb	r3, [r2, r0]
					for(j=0;j<symLen;j++){
 8003670:	0029      	movs	r1, r5
 8003672:	1873      	adds	r3, r6, r1
 8003674:	2208      	movs	r2, #8
 8003676:	4694      	mov	ip, r2
 8003678:	44bc      	add	ip, r7
 800367a:	4463      	add	r3, ip
 800367c:	881b      	ldrh	r3, [r3, #0]
 800367e:	1872      	adds	r2, r6, r1
 8003680:	2108      	movs	r1, #8
 8003682:	468c      	mov	ip, r1
 8003684:	44bc      	add	ip, r7
 8003686:	4462      	add	r2, ip
 8003688:	3301      	adds	r3, #1
 800368a:	8013      	strh	r3, [r2, #0]
 800368c:	2364      	movs	r3, #100	; 0x64
 800368e:	218c      	movs	r1, #140	; 0x8c
 8003690:	0049      	lsls	r1, r1, #1
 8003692:	185b      	adds	r3, r3, r1
 8003694:	2208      	movs	r2, #8
 8003696:	18ba      	adds	r2, r7, r2
 8003698:	189a      	adds	r2, r3, r2
 800369a:	235a      	movs	r3, #90	; 0x5a
 800369c:	185b      	adds	r3, r3, r1
 800369e:	2008      	movs	r0, #8
 80036a0:	4684      	mov	ip, r0
 80036a2:	44bc      	add	ip, r7
 80036a4:	4463      	add	r3, ip
 80036a6:	8812      	ldrh	r2, [r2, #0]
 80036a8:	881b      	ldrh	r3, [r3, #0]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d3ae      	bcc.n	800360c <printASCIIarray+0x974>
//							weoBuffer2[k]=((weoBuffer[k]&0xF0)>>4)&contrast;
//						}
//					for (k=0;k<symLen;k++){
//							weoBuffer[k]=(weoBuffer2[k]<<4)|weoBuffer1[k];
//						}
					for (k=0;k<symLen;k++){
 80036ae:	2366      	movs	r3, #102	; 0x66
 80036b0:	185b      	adds	r3, r3, r1
 80036b2:	2208      	movs	r2, #8
 80036b4:	18ba      	adds	r2, r7, r2
 80036b6:	189a      	adds	r2, r3, r2
 80036b8:	2300      	movs	r3, #0
 80036ba:	8013      	strh	r3, [r2, #0]
 80036bc:	e030      	b.n	8003720 <printASCIIarray+0xa88>
						weoBuffer[k]=weoBuffer[k] & contrast;
 80036be:	2066      	movs	r0, #102	; 0x66
 80036c0:	248c      	movs	r4, #140	; 0x8c
 80036c2:	0064      	lsls	r4, r4, #1
 80036c4:	1903      	adds	r3, r0, r4
 80036c6:	2208      	movs	r2, #8
 80036c8:	4694      	mov	ip, r2
 80036ca:	44bc      	add	ip, r7
 80036cc:	4463      	add	r3, ip
 80036ce:	881a      	ldrh	r2, [r3, #0]
 80036d0:	25a6      	movs	r5, #166	; 0xa6
 80036d2:	006d      	lsls	r5, r5, #1
 80036d4:	2308      	movs	r3, #8
 80036d6:	18eb      	adds	r3, r5, r3
 80036d8:	19db      	adds	r3, r3, r7
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	5c9a      	ldrb	r2, [r3, r2]
 80036de:	1903      	adds	r3, r0, r4
 80036e0:	2108      	movs	r1, #8
 80036e2:	468c      	mov	ip, r1
 80036e4:	44bc      	add	ip, r7
 80036e6:	4463      	add	r3, ip
 80036e8:	8819      	ldrh	r1, [r3, #0]
 80036ea:	235c      	movs	r3, #92	; 0x5c
 80036ec:	191b      	adds	r3, r3, r4
 80036ee:	2608      	movs	r6, #8
 80036f0:	46b4      	mov	ip, r6
 80036f2:	44bc      	add	ip, r7
 80036f4:	4463      	add	r3, ip
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	4013      	ands	r3, r2
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2208      	movs	r2, #8
 80036fe:	18aa      	adds	r2, r5, r2
 8003700:	19d2      	adds	r2, r2, r7
 8003702:	6812      	ldr	r2, [r2, #0]
 8003704:	5453      	strb	r3, [r2, r1]
					for (k=0;k<symLen;k++){
 8003706:	1903      	adds	r3, r0, r4
 8003708:	2208      	movs	r2, #8
 800370a:	4694      	mov	ip, r2
 800370c:	44bc      	add	ip, r7
 800370e:	4463      	add	r3, ip
 8003710:	881b      	ldrh	r3, [r3, #0]
 8003712:	1902      	adds	r2, r0, r4
 8003714:	2108      	movs	r1, #8
 8003716:	468c      	mov	ip, r1
 8003718:	44bc      	add	ip, r7
 800371a:	4462      	add	r2, ip
 800371c:	3301      	adds	r3, #1
 800371e:	8013      	strh	r3, [r2, #0]
 8003720:	2366      	movs	r3, #102	; 0x66
 8003722:	268c      	movs	r6, #140	; 0x8c
 8003724:	0076      	lsls	r6, r6, #1
 8003726:	199b      	adds	r3, r3, r6
 8003728:	2208      	movs	r2, #8
 800372a:	18ba      	adds	r2, r7, r2
 800372c:	189a      	adds	r2, r3, r2
 800372e:	235a      	movs	r3, #90	; 0x5a
 8003730:	199b      	adds	r3, r3, r6
 8003732:	2108      	movs	r1, #8
 8003734:	468c      	mov	ip, r1
 8003736:	44bc      	add	ip, r7
 8003738:	4463      	add	r3, ip
 800373a:	8812      	ldrh	r2, [r2, #0]
 800373c:	881b      	ldrh	r3, [r3, #0]
 800373e:	429a      	cmp	r2, r3
 8003740:	d3bd      	bcc.n	80036be <printASCIIarray+0xa26>
					}
				weoDrawRectangleFilled(ASCII_X, imY, (ASCII_X+X_increment-1), imY + ASCII_height - decY, 0xFF, weoBuffer);
 8003742:	205f      	movs	r0, #95	; 0x5f
 8003744:	1983      	adds	r3, r0, r6
 8003746:	2208      	movs	r2, #8
 8003748:	18ba      	adds	r2, r7, r2
 800374a:	189a      	adds	r2, r3, r2
 800374c:	233f      	movs	r3, #63	; 0x3f
 800374e:	199b      	adds	r3, r3, r6
 8003750:	2108      	movs	r1, #8
 8003752:	468c      	mov	ip, r1
 8003754:	44bc      	add	ip, r7
 8003756:	4463      	add	r3, ip
 8003758:	7812      	ldrb	r2, [r2, #0]
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	18d3      	adds	r3, r2, r3
 800375e:	b2db      	uxtb	r3, r3
 8003760:	3b01      	subs	r3, #1
 8003762:	b2dc      	uxtb	r4, r3
 8003764:	258f      	movs	r5, #143	; 0x8f
 8003766:	006d      	lsls	r5, r5, #1
 8003768:	2308      	movs	r3, #8
 800376a:	18eb      	adds	r3, r5, r3
 800376c:	19da      	adds	r2, r3, r7
 800376e:	213e      	movs	r1, #62	; 0x3e
 8003770:	198b      	adds	r3, r1, r6
 8003772:	2108      	movs	r1, #8
 8003774:	468c      	mov	ip, r1
 8003776:	44bc      	add	ip, r7
 8003778:	4463      	add	r3, ip
 800377a:	7812      	ldrb	r2, [r2, #0]
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	18d3      	adds	r3, r2, r3
 8003780:	b2da      	uxtb	r2, r3
 8003782:	2160      	movs	r1, #96	; 0x60
 8003784:	1989      	adds	r1, r1, r6
 8003786:	2308      	movs	r3, #8
 8003788:	18fb      	adds	r3, r7, r3
 800378a:	18cb      	adds	r3, r1, r3
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	b2da      	uxtb	r2, r3
 8003792:	2308      	movs	r3, #8
 8003794:	18eb      	adds	r3, r5, r3
 8003796:	19db      	adds	r3, r3, r7
 8003798:	7819      	ldrb	r1, [r3, #0]
 800379a:	0006      	movs	r6, r0
 800379c:	238c      	movs	r3, #140	; 0x8c
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	18c5      	adds	r5, r0, r3
 80037a2:	2308      	movs	r3, #8
 80037a4:	18fb      	adds	r3, r7, r3
 80037a6:	18eb      	adds	r3, r5, r3
 80037a8:	7818      	ldrb	r0, [r3, #0]
 80037aa:	25a6      	movs	r5, #166	; 0xa6
 80037ac:	006d      	lsls	r5, r5, #1
 80037ae:	2308      	movs	r3, #8
 80037b0:	18eb      	adds	r3, r5, r3
 80037b2:	19dd      	adds	r5, r3, r7
 80037b4:	682b      	ldr	r3, [r5, #0]
 80037b6:	9301      	str	r3, [sp, #4]
 80037b8:	23ff      	movs	r3, #255	; 0xff
 80037ba:	9300      	str	r3, [sp, #0]
 80037bc:	0013      	movs	r3, r2
 80037be:	0022      	movs	r2, r4
 80037c0:	f7fd fe84 	bl	80014cc <weoDrawRectangleFilled>
				ASCII_X += X_increment;
 80037c4:	208c      	movs	r0, #140	; 0x8c
 80037c6:	0040      	lsls	r0, r0, #1
 80037c8:	1833      	adds	r3, r6, r0
 80037ca:	2208      	movs	r2, #8
 80037cc:	18ba      	adds	r2, r7, r2
 80037ce:	1899      	adds	r1, r3, r2
 80037d0:	1833      	adds	r3, r6, r0
 80037d2:	2208      	movs	r2, #8
 80037d4:	18ba      	adds	r2, r7, r2
 80037d6:	189a      	adds	r2, r3, r2
 80037d8:	233f      	movs	r3, #63	; 0x3f
 80037da:	181b      	adds	r3, r3, r0
 80037dc:	2408      	movs	r4, #8
 80037de:	46a4      	mov	ip, r4
 80037e0:	44bc      	add	ip, r7
 80037e2:	4463      	add	r3, ip
 80037e4:	7812      	ldrb	r2, [r2, #0]
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	18d3      	adds	r3, r2, r3
 80037ea:	700b      	strb	r3, [r1, #0]
				for(i=0;i<strLen;i++){
 80037ec:	2262      	movs	r2, #98	; 0x62
 80037ee:	1813      	adds	r3, r2, r0
 80037f0:	2108      	movs	r1, #8
 80037f2:	468c      	mov	ip, r1
 80037f4:	44bc      	add	ip, r7
 80037f6:	4463      	add	r3, ip
 80037f8:	881b      	ldrh	r3, [r3, #0]
 80037fa:	1812      	adds	r2, r2, r0
 80037fc:	2108      	movs	r1, #8
 80037fe:	468c      	mov	ip, r1
 8003800:	44bc      	add	ip, r7
 8003802:	4462      	add	r2, ip
 8003804:	3301      	adds	r3, #1
 8003806:	8013      	strh	r3, [r2, #0]
 8003808:	231e      	movs	r3, #30
 800380a:	33ff      	adds	r3, #255	; 0xff
 800380c:	2208      	movs	r2, #8
 800380e:	189b      	adds	r3, r3, r2
 8003810:	19db      	adds	r3, r3, r7
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	b29a      	uxth	r2, r3
 8003816:	2162      	movs	r1, #98	; 0x62
 8003818:	208c      	movs	r0, #140	; 0x8c
 800381a:	0040      	lsls	r0, r0, #1
 800381c:	180b      	adds	r3, r1, r0
 800381e:	2408      	movs	r4, #8
 8003820:	46a4      	mov	ip, r4
 8003822:	44bc      	add	ip, r7
 8003824:	4463      	add	r3, ip
 8003826:	881b      	ldrh	r3, [r3, #0]
 8003828:	4293      	cmp	r3, r2
 800382a:	d200      	bcs.n	800382e <printASCIIarray+0xb96>
 800382c:	e6e4      	b.n	80035f8 <printASCIIarray+0x960>
				}
				for(i=0;i<symLen;i++){
 800382e:	180b      	adds	r3, r1, r0
 8003830:	2208      	movs	r2, #8
 8003832:	18ba      	adds	r2, r7, r2
 8003834:	189a      	adds	r2, r3, r2
 8003836:	2300      	movs	r3, #0
 8003838:	8013      	strh	r3, [r2, #0]
 800383a:	e020      	b.n	800387e <printASCIIarray+0xbe6>
 800383c:	0800facc 	.word	0x0800facc
									weoBuffer[j]=0x00;
 8003840:	2364      	movs	r3, #100	; 0x64
 8003842:	208c      	movs	r0, #140	; 0x8c
 8003844:	0040      	lsls	r0, r0, #1
 8003846:	181b      	adds	r3, r3, r0
 8003848:	2208      	movs	r2, #8
 800384a:	4694      	mov	ip, r2
 800384c:	44bc      	add	ip, r7
 800384e:	4463      	add	r3, ip
 8003850:	8819      	ldrh	r1, [r3, #0]
 8003852:	23a6      	movs	r3, #166	; 0xa6
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	2208      	movs	r2, #8
 8003858:	189b      	adds	r3, r3, r2
 800385a:	19db      	adds	r3, r3, r7
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	2300      	movs	r3, #0
 8003860:	5453      	strb	r3, [r2, r1]
				for(i=0;i<symLen;i++){
 8003862:	2262      	movs	r2, #98	; 0x62
 8003864:	1813      	adds	r3, r2, r0
 8003866:	2108      	movs	r1, #8
 8003868:	468c      	mov	ip, r1
 800386a:	44bc      	add	ip, r7
 800386c:	4463      	add	r3, ip
 800386e:	881b      	ldrh	r3, [r3, #0]
 8003870:	1812      	adds	r2, r2, r0
 8003872:	2108      	movs	r1, #8
 8003874:	468c      	mov	ip, r1
 8003876:	44bc      	add	ip, r7
 8003878:	4462      	add	r2, ip
 800387a:	3301      	adds	r3, #1
 800387c:	8013      	strh	r3, [r2, #0]
 800387e:	2362      	movs	r3, #98	; 0x62
 8003880:	218c      	movs	r1, #140	; 0x8c
 8003882:	0049      	lsls	r1, r1, #1
 8003884:	185b      	adds	r3, r3, r1
 8003886:	2208      	movs	r2, #8
 8003888:	18ba      	adds	r2, r7, r2
 800388a:	189a      	adds	r2, r3, r2
 800388c:	235a      	movs	r3, #90	; 0x5a
 800388e:	185b      	adds	r3, r3, r1
 8003890:	2108      	movs	r1, #8
 8003892:	468c      	mov	ip, r1
 8003894:	44bc      	add	ip, r7
 8003896:	4463      	add	r3, ip
 8003898:	8812      	ldrh	r2, [r2, #0]
 800389a:	881b      	ldrh	r3, [r3, #0]
 800389c:	429a      	cmp	r2, r3
 800389e:	d3cf      	bcc.n	8003840 <printASCIIarray+0xba8>
 80038a0:	46c5      	mov	sp, r8
							}
			}
			if(fontCur==2){
 80038a2:	2361      	movs	r3, #97	; 0x61
 80038a4:	268c      	movs	r6, #140	; 0x8c
 80038a6:	0076      	lsls	r6, r6, #1
 80038a8:	199b      	adds	r3, r3, r6
 80038aa:	2208      	movs	r2, #8
 80038ac:	4694      	mov	ip, r2
 80038ae:	44bc      	add	ip, r7
 80038b0:	4463      	add	r3, ip
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d001      	beq.n	80038bc <printASCIIarray+0xc24>
 80038b8:	f001 f82b 	bl	8004912 <printASCIIarray+0x1c7a>
 80038bc:	466b      	mov	r3, sp
 80038be:	001d      	movs	r5, r3
				symLen=304;
 80038c0:	245a      	movs	r4, #90	; 0x5a
 80038c2:	19a3      	adds	r3, r4, r6
 80038c4:	2208      	movs	r2, #8
 80038c6:	18ba      	adds	r2, r7, r2
 80038c8:	189a      	adds	r2, r3, r2
 80038ca:	2398      	movs	r3, #152	; 0x98
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	8013      	strh	r3, [r2, #0]
				uint8_t weoBuffer[symLen];
 80038d0:	607c      	str	r4, [r7, #4]
 80038d2:	19a3      	adds	r3, r4, r6
 80038d4:	2208      	movs	r2, #8
 80038d6:	4694      	mov	ip, r2
 80038d8:	44bc      	add	ip, r7
 80038da:	4463      	add	r3, ip
 80038dc:	881b      	ldrh	r3, [r3, #0]
 80038de:	2290      	movs	r2, #144	; 0x90
 80038e0:	0052      	lsls	r2, r2, #1
 80038e2:	18ba      	adds	r2, r7, r2
 80038e4:	6013      	str	r3, [r2, #0]
 80038e6:	2390      	movs	r3, #144	; 0x90
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	18fb      	adds	r3, r7, r3
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	3b01      	subs	r3, #1
 80038f0:	219c      	movs	r1, #156	; 0x9c
 80038f2:	0049      	lsls	r1, r1, #1
 80038f4:	2208      	movs	r2, #8
 80038f6:	188a      	adds	r2, r1, r2
 80038f8:	19d1      	adds	r1, r2, r7
 80038fa:	600b      	str	r3, [r1, #0]
 80038fc:	2390      	movs	r3, #144	; 0x90
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	18fb      	adds	r3, r7, r3
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	633b      	str	r3, [r7, #48]	; 0x30
 8003906:	2300      	movs	r3, #0
 8003908:	637b      	str	r3, [r7, #52]	; 0x34
 800390a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800390c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800390e:	0003      	movs	r3, r0
 8003910:	0f5b      	lsrs	r3, r3, #29
 8003912:	000e      	movs	r6, r1
 8003914:	00f6      	lsls	r6, r6, #3
 8003916:	24bc      	movs	r4, #188	; 0xbc
 8003918:	2208      	movs	r2, #8
 800391a:	18a2      	adds	r2, r4, r2
 800391c:	19d2      	adds	r2, r2, r7
 800391e:	6016      	str	r6, [r2, #0]
 8003920:	2208      	movs	r2, #8
 8003922:	18a2      	adds	r2, r4, r2
 8003924:	19d6      	adds	r6, r2, r7
 8003926:	6836      	ldr	r6, [r6, #0]
 8003928:	431e      	orrs	r6, r3
 800392a:	2308      	movs	r3, #8
 800392c:	18e3      	adds	r3, r4, r3
 800392e:	19db      	adds	r3, r3, r7
 8003930:	601e      	str	r6, [r3, #0]
 8003932:	0003      	movs	r3, r0
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	21b8      	movs	r1, #184	; 0xb8
 8003938:	2208      	movs	r2, #8
 800393a:	188a      	adds	r2, r1, r2
 800393c:	19d1      	adds	r1, r2, r7
 800393e:	600b      	str	r3, [r1, #0]
 8003940:	2390      	movs	r3, #144	; 0x90
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	18fb      	adds	r3, r7, r3
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	62bb      	str	r3, [r7, #40]	; 0x28
 800394a:	2300      	movs	r3, #0
 800394c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800394e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003950:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003952:	0003      	movs	r3, r0
 8003954:	0f5b      	lsrs	r3, r3, #29
 8003956:	469c      	mov	ip, r3
 8003958:	000e      	movs	r6, r1
 800395a:	00f6      	lsls	r6, r6, #3
 800395c:	24b4      	movs	r4, #180	; 0xb4
 800395e:	0022      	movs	r2, r4
 8003960:	2308      	movs	r3, #8
 8003962:	18e4      	adds	r4, r4, r3
 8003964:	19e4      	adds	r4, r4, r7
 8003966:	6026      	str	r6, [r4, #0]
 8003968:	0016      	movs	r6, r2
 800396a:	0032      	movs	r2, r6
 800396c:	2308      	movs	r3, #8
 800396e:	18f3      	adds	r3, r6, r3
 8003970:	19dc      	adds	r4, r3, r7
 8003972:	6826      	ldr	r6, [r4, #0]
 8003974:	4663      	mov	r3, ip
 8003976:	431e      	orrs	r6, r3
 8003978:	0013      	movs	r3, r2
 800397a:	2208      	movs	r2, #8
 800397c:	189b      	adds	r3, r3, r2
 800397e:	19db      	adds	r3, r3, r7
 8003980:	601e      	str	r6, [r3, #0]
 8003982:	0003      	movs	r3, r0
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	21b0      	movs	r1, #176	; 0xb0
 8003988:	2208      	movs	r2, #8
 800398a:	188a      	adds	r2, r1, r2
 800398c:	19d1      	adds	r1, r2, r7
 800398e:	600b      	str	r3, [r1, #0]
 8003990:	2390      	movs	r3, #144	; 0x90
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	18fb      	adds	r3, r7, r3
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	3307      	adds	r3, #7
 800399a:	08db      	lsrs	r3, r3, #3
 800399c:	00db      	lsls	r3, r3, #3
 800399e:	466a      	mov	r2, sp
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	469d      	mov	sp, r3
 80039a4:	ab02      	add	r3, sp, #8
 80039a6:	3300      	adds	r3, #0
 80039a8:	229a      	movs	r2, #154	; 0x9a
 80039aa:	0052      	lsls	r2, r2, #1
 80039ac:	2108      	movs	r1, #8
 80039ae:	1852      	adds	r2, r2, r1
 80039b0:	19d2      	adds	r2, r2, r7
 80039b2:	6013      	str	r3, [r2, #0]
				uint8_t weoBuffer1[symLen];
 80039b4:	687c      	ldr	r4, [r7, #4]
 80039b6:	607c      	str	r4, [r7, #4]
 80039b8:	268c      	movs	r6, #140	; 0x8c
 80039ba:	0076      	lsls	r6, r6, #1
 80039bc:	19a3      	adds	r3, r4, r6
 80039be:	2208      	movs	r2, #8
 80039c0:	4694      	mov	ip, r2
 80039c2:	44bc      	add	ip, r7
 80039c4:	4463      	add	r3, ip
 80039c6:	881b      	ldrh	r3, [r3, #0]
 80039c8:	2290      	movs	r2, #144	; 0x90
 80039ca:	0052      	lsls	r2, r2, #1
 80039cc:	18ba      	adds	r2, r7, r2
 80039ce:	6013      	str	r3, [r2, #0]
 80039d0:	2390      	movs	r3, #144	; 0x90
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	18fb      	adds	r3, r7, r3
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	3b01      	subs	r3, #1
 80039da:	2198      	movs	r1, #152	; 0x98
 80039dc:	0049      	lsls	r1, r1, #1
 80039de:	2208      	movs	r2, #8
 80039e0:	188a      	adds	r2, r1, r2
 80039e2:	19d1      	adds	r1, r2, r7
 80039e4:	600b      	str	r3, [r1, #0]
 80039e6:	2390      	movs	r3, #144	; 0x90
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	18fb      	adds	r3, r7, r3
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	623b      	str	r3, [r7, #32]
 80039f0:	2300      	movs	r3, #0
 80039f2:	627b      	str	r3, [r7, #36]	; 0x24
 80039f4:	6a38      	ldr	r0, [r7, #32]
 80039f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039f8:	0003      	movs	r3, r0
 80039fa:	0f5b      	lsrs	r3, r3, #29
 80039fc:	000e      	movs	r6, r1
 80039fe:	00f6      	lsls	r6, r6, #3
 8003a00:	24ac      	movs	r4, #172	; 0xac
 8003a02:	2208      	movs	r2, #8
 8003a04:	18a2      	adds	r2, r4, r2
 8003a06:	19d2      	adds	r2, r2, r7
 8003a08:	6016      	str	r6, [r2, #0]
 8003a0a:	2208      	movs	r2, #8
 8003a0c:	18a2      	adds	r2, r4, r2
 8003a0e:	19d6      	adds	r6, r2, r7
 8003a10:	6836      	ldr	r6, [r6, #0]
 8003a12:	431e      	orrs	r6, r3
 8003a14:	2308      	movs	r3, #8
 8003a16:	18e3      	adds	r3, r4, r3
 8003a18:	19db      	adds	r3, r3, r7
 8003a1a:	601e      	str	r6, [r3, #0]
 8003a1c:	0003      	movs	r3, r0
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	21a8      	movs	r1, #168	; 0xa8
 8003a22:	2208      	movs	r2, #8
 8003a24:	188a      	adds	r2, r1, r2
 8003a26:	19d1      	adds	r1, r2, r7
 8003a28:	600b      	str	r3, [r1, #0]
 8003a2a:	2390      	movs	r3, #144	; 0x90
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	18fb      	adds	r3, r7, r3
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	61bb      	str	r3, [r7, #24]
 8003a34:	2300      	movs	r3, #0
 8003a36:	61fb      	str	r3, [r7, #28]
 8003a38:	69b8      	ldr	r0, [r7, #24]
 8003a3a:	69f9      	ldr	r1, [r7, #28]
 8003a3c:	0003      	movs	r3, r0
 8003a3e:	0f5b      	lsrs	r3, r3, #29
 8003a40:	469c      	mov	ip, r3
 8003a42:	000e      	movs	r6, r1
 8003a44:	00f6      	lsls	r6, r6, #3
 8003a46:	24a4      	movs	r4, #164	; 0xa4
 8003a48:	0022      	movs	r2, r4
 8003a4a:	2308      	movs	r3, #8
 8003a4c:	18e4      	adds	r4, r4, r3
 8003a4e:	19e4      	adds	r4, r4, r7
 8003a50:	6026      	str	r6, [r4, #0]
 8003a52:	0016      	movs	r6, r2
 8003a54:	0032      	movs	r2, r6
 8003a56:	2308      	movs	r3, #8
 8003a58:	18f3      	adds	r3, r6, r3
 8003a5a:	19dc      	adds	r4, r3, r7
 8003a5c:	6826      	ldr	r6, [r4, #0]
 8003a5e:	4663      	mov	r3, ip
 8003a60:	431e      	orrs	r6, r3
 8003a62:	0013      	movs	r3, r2
 8003a64:	2208      	movs	r2, #8
 8003a66:	189b      	adds	r3, r3, r2
 8003a68:	19db      	adds	r3, r3, r7
 8003a6a:	601e      	str	r6, [r3, #0]
 8003a6c:	0003      	movs	r3, r0
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	21a0      	movs	r1, #160	; 0xa0
 8003a72:	2208      	movs	r2, #8
 8003a74:	188a      	adds	r2, r1, r2
 8003a76:	19d1      	adds	r1, r2, r7
 8003a78:	600b      	str	r3, [r1, #0]
 8003a7a:	2390      	movs	r3, #144	; 0x90
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	18fb      	adds	r3, r7, r3
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	3307      	adds	r3, #7
 8003a84:	08db      	lsrs	r3, r3, #3
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	466a      	mov	r2, sp
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	469d      	mov	sp, r3
 8003a8e:	ab02      	add	r3, sp, #8
 8003a90:	3300      	adds	r3, #0
 8003a92:	2296      	movs	r2, #150	; 0x96
 8003a94:	0052      	lsls	r2, r2, #1
 8003a96:	2108      	movs	r1, #8
 8003a98:	1852      	adds	r2, r2, r1
 8003a9a:	19d2      	adds	r2, r2, r7
 8003a9c:	6013      	str	r3, [r2, #0]
				uint8_t weoBuffer2[symLen];
 8003a9e:	687c      	ldr	r4, [r7, #4]
 8003aa0:	268c      	movs	r6, #140	; 0x8c
 8003aa2:	0076      	lsls	r6, r6, #1
 8003aa4:	19a3      	adds	r3, r4, r6
 8003aa6:	2208      	movs	r2, #8
 8003aa8:	4694      	mov	ip, r2
 8003aaa:	44bc      	add	ip, r7
 8003aac:	4463      	add	r3, ip
 8003aae:	881b      	ldrh	r3, [r3, #0]
 8003ab0:	2290      	movs	r2, #144	; 0x90
 8003ab2:	0052      	lsls	r2, r2, #1
 8003ab4:	18ba      	adds	r2, r7, r2
 8003ab6:	6013      	str	r3, [r2, #0]
 8003ab8:	2390      	movs	r3, #144	; 0x90
 8003aba:	005b      	lsls	r3, r3, #1
 8003abc:	18fb      	adds	r3, r7, r3
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	3a01      	subs	r2, #1
 8003ac2:	2194      	movs	r1, #148	; 0x94
 8003ac4:	0049      	lsls	r1, r1, #1
 8003ac6:	2308      	movs	r3, #8
 8003ac8:	18cb      	adds	r3, r1, r3
 8003aca:	19d9      	adds	r1, r3, r7
 8003acc:	600a      	str	r2, [r1, #0]
 8003ace:	2390      	movs	r3, #144	; 0x90
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	18fb      	adds	r3, r7, r3
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	613b      	str	r3, [r7, #16]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	617a      	str	r2, [r7, #20]
 8003adc:	6938      	ldr	r0, [r7, #16]
 8003ade:	6979      	ldr	r1, [r7, #20]
 8003ae0:	0002      	movs	r2, r0
 8003ae2:	0f52      	lsrs	r2, r2, #29
 8003ae4:	000c      	movs	r4, r1
 8003ae6:	00e4      	lsls	r4, r4, #3
 8003ae8:	269c      	movs	r6, #156	; 0x9c
 8003aea:	2308      	movs	r3, #8
 8003aec:	18f3      	adds	r3, r6, r3
 8003aee:	19db      	adds	r3, r3, r7
 8003af0:	601c      	str	r4, [r3, #0]
 8003af2:	2308      	movs	r3, #8
 8003af4:	18f3      	adds	r3, r6, r3
 8003af6:	19dc      	adds	r4, r3, r7
 8003af8:	6824      	ldr	r4, [r4, #0]
 8003afa:	4314      	orrs	r4, r2
 8003afc:	2308      	movs	r3, #8
 8003afe:	18f3      	adds	r3, r6, r3
 8003b00:	19da      	adds	r2, r3, r7
 8003b02:	6014      	str	r4, [r2, #0]
 8003b04:	0002      	movs	r2, r0
 8003b06:	00d2      	lsls	r2, r2, #3
 8003b08:	2198      	movs	r1, #152	; 0x98
 8003b0a:	2308      	movs	r3, #8
 8003b0c:	18cb      	adds	r3, r1, r3
 8003b0e:	19d9      	adds	r1, r3, r7
 8003b10:	600a      	str	r2, [r1, #0]
 8003b12:	2390      	movs	r3, #144	; 0x90
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	18fb      	adds	r3, r7, r3
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	60bb      	str	r3, [r7, #8]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	60fa      	str	r2, [r7, #12]
 8003b20:	68b8      	ldr	r0, [r7, #8]
 8003b22:	68f9      	ldr	r1, [r7, #12]
 8003b24:	0002      	movs	r2, r0
 8003b26:	0f52      	lsrs	r2, r2, #29
 8003b28:	000c      	movs	r4, r1
 8003b2a:	00e4      	lsls	r4, r4, #3
 8003b2c:	2694      	movs	r6, #148	; 0x94
 8003b2e:	603e      	str	r6, [r7, #0]
 8003b30:	2308      	movs	r3, #8
 8003b32:	18f6      	adds	r6, r6, r3
 8003b34:	19f6      	adds	r6, r6, r7
 8003b36:	6034      	str	r4, [r6, #0]
 8003b38:	683c      	ldr	r4, [r7, #0]
 8003b3a:	0023      	movs	r3, r4
 8003b3c:	2608      	movs	r6, #8
 8003b3e:	19a4      	adds	r4, r4, r6
 8003b40:	19e6      	adds	r6, r4, r7
 8003b42:	6834      	ldr	r4, [r6, #0]
 8003b44:	4314      	orrs	r4, r2
 8003b46:	001a      	movs	r2, r3
 8003b48:	2308      	movs	r3, #8
 8003b4a:	18d3      	adds	r3, r2, r3
 8003b4c:	19da      	adds	r2, r3, r7
 8003b4e:	6014      	str	r4, [r2, #0]
 8003b50:	0002      	movs	r2, r0
 8003b52:	00d2      	lsls	r2, r2, #3
 8003b54:	2190      	movs	r1, #144	; 0x90
 8003b56:	2308      	movs	r3, #8
 8003b58:	18cb      	adds	r3, r1, r3
 8003b5a:	19d9      	adds	r1, r3, r7
 8003b5c:	600a      	str	r2, [r1, #0]
 8003b5e:	2390      	movs	r3, #144	; 0x90
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	18fb      	adds	r3, r7, r3
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	3307      	adds	r3, #7
 8003b68:	08db      	lsrs	r3, r3, #3
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	466a      	mov	r2, sp
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	469d      	mov	sp, r3
 8003b72:	ab02      	add	r3, sp, #8
 8003b74:	3300      	adds	r3, #0
 8003b76:	2292      	movs	r2, #146	; 0x92
 8003b78:	0052      	lsls	r2, r2, #1
 8003b7a:	2108      	movs	r1, #8
 8003b7c:	1852      	adds	r2, r2, r1
 8003b7e:	19d2      	adds	r2, r2, r7
 8003b80:	6013      	str	r3, [r2, #0]
				X_increment=0x10;
 8003b82:	233f      	movs	r3, #63	; 0x3f
 8003b84:	268c      	movs	r6, #140	; 0x8c
 8003b86:	0076      	lsls	r6, r6, #1
 8003b88:	199b      	adds	r3, r3, r6
 8003b8a:	2208      	movs	r2, #8
 8003b8c:	4694      	mov	ip, r2
 8003b8e:	44bc      	add	ip, r7
 8003b90:	4463      	add	r3, ip
 8003b92:	2210      	movs	r2, #16
 8003b94:	701a      	strb	r2, [r3, #0]
				ASCII_height=0x26;
 8003b96:	233e      	movs	r3, #62	; 0x3e
 8003b98:	199b      	adds	r3, r3, r6
 8003b9a:	2208      	movs	r2, #8
 8003b9c:	4694      	mov	ip, r2
 8003b9e:	44bc      	add	ip, r7
 8003ba0:	4463      	add	r3, ip
 8003ba2:	2226      	movs	r2, #38	; 0x26
 8003ba4:	701a      	strb	r2, [r3, #0]
				for(i=0;i<strLen;i++){
 8003ba6:	2362      	movs	r3, #98	; 0x62
 8003ba8:	199b      	adds	r3, r3, r6
 8003baa:	2208      	movs	r2, #8
 8003bac:	4694      	mov	ip, r2
 8003bae:	44bc      	add	ip, r7
 8003bb0:	4463      	add	r3, ip
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	801a      	strh	r2, [r3, #0]
 8003bb6:	f000 fd30 	bl	800461a <printASCIIarray+0x1982>
					if(dataASCII[i]==0x20){dataASCII[i]=0x00;}
 8003bba:	2162      	movs	r1, #98	; 0x62
 8003bbc:	248c      	movs	r4, #140	; 0x8c
 8003bbe:	0064      	lsls	r4, r4, #1
 8003bc0:	190b      	adds	r3, r1, r4
 8003bc2:	2208      	movs	r2, #8
 8003bc4:	4694      	mov	ip, r2
 8003bc6:	44bc      	add	ip, r7
 8003bc8:	4463      	add	r3, ip
 8003bca:	881b      	ldrh	r3, [r3, #0]
 8003bcc:	2080      	movs	r0, #128	; 0x80
 8003bce:	1902      	adds	r2, r0, r4
 8003bd0:	2608      	movs	r6, #8
 8003bd2:	46b4      	mov	ip, r6
 8003bd4:	2608      	movs	r6, #8
 8003bd6:	46b0      	mov	r8, r6
 8003bd8:	44b8      	add	r8, r7
 8003bda:	44c4      	add	ip, r8
 8003bdc:	4462      	add	r2, ip
 8003bde:	6812      	ldr	r2, [r2, #0]
 8003be0:	18d3      	adds	r3, r2, r3
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	2b20      	cmp	r3, #32
 8003be6:	d111      	bne.n	8003c0c <printASCIIarray+0xf74>
 8003be8:	190b      	adds	r3, r1, r4
 8003bea:	2208      	movs	r2, #8
 8003bec:	4694      	mov	ip, r2
 8003bee:	44bc      	add	ip, r7
 8003bf0:	4463      	add	r3, ip
 8003bf2:	881b      	ldrh	r3, [r3, #0]
 8003bf4:	1902      	adds	r2, r0, r4
 8003bf6:	2108      	movs	r1, #8
 8003bf8:	468c      	mov	ip, r1
 8003bfa:	2108      	movs	r1, #8
 8003bfc:	4688      	mov	r8, r1
 8003bfe:	44b8      	add	r8, r7
 8003c00:	44c4      	add	ip, r8
 8003c02:	4462      	add	r2, ip
 8003c04:	6812      	ldr	r2, [r2, #0]
 8003c06:	18d3      	adds	r3, r2, r3
 8003c08:	2200      	movs	r2, #0
 8003c0a:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x21){dataASCII[i]=0x01;}
 8003c0c:	2162      	movs	r1, #98	; 0x62
 8003c0e:	248c      	movs	r4, #140	; 0x8c
 8003c10:	0064      	lsls	r4, r4, #1
 8003c12:	190b      	adds	r3, r1, r4
 8003c14:	2208      	movs	r2, #8
 8003c16:	4694      	mov	ip, r2
 8003c18:	44bc      	add	ip, r7
 8003c1a:	4463      	add	r3, ip
 8003c1c:	881b      	ldrh	r3, [r3, #0]
 8003c1e:	2080      	movs	r0, #128	; 0x80
 8003c20:	1902      	adds	r2, r0, r4
 8003c22:	2608      	movs	r6, #8
 8003c24:	46b4      	mov	ip, r6
 8003c26:	2608      	movs	r6, #8
 8003c28:	46b0      	mov	r8, r6
 8003c2a:	44b8      	add	r8, r7
 8003c2c:	44c4      	add	ip, r8
 8003c2e:	4462      	add	r2, ip
 8003c30:	6812      	ldr	r2, [r2, #0]
 8003c32:	18d3      	adds	r3, r2, r3
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	2b21      	cmp	r3, #33	; 0x21
 8003c38:	d111      	bne.n	8003c5e <printASCIIarray+0xfc6>
 8003c3a:	190b      	adds	r3, r1, r4
 8003c3c:	2208      	movs	r2, #8
 8003c3e:	4694      	mov	ip, r2
 8003c40:	44bc      	add	ip, r7
 8003c42:	4463      	add	r3, ip
 8003c44:	881b      	ldrh	r3, [r3, #0]
 8003c46:	1902      	adds	r2, r0, r4
 8003c48:	2108      	movs	r1, #8
 8003c4a:	468c      	mov	ip, r1
 8003c4c:	2108      	movs	r1, #8
 8003c4e:	4688      	mov	r8, r1
 8003c50:	44b8      	add	r8, r7
 8003c52:	44c4      	add	ip, r8
 8003c54:	4462      	add	r2, ip
 8003c56:	6812      	ldr	r2, [r2, #0]
 8003c58:	18d3      	adds	r3, r2, r3
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x25){dataASCII[i]=0x02;}
 8003c5e:	2162      	movs	r1, #98	; 0x62
 8003c60:	248c      	movs	r4, #140	; 0x8c
 8003c62:	0064      	lsls	r4, r4, #1
 8003c64:	190b      	adds	r3, r1, r4
 8003c66:	2208      	movs	r2, #8
 8003c68:	4694      	mov	ip, r2
 8003c6a:	44bc      	add	ip, r7
 8003c6c:	4463      	add	r3, ip
 8003c6e:	881b      	ldrh	r3, [r3, #0]
 8003c70:	2080      	movs	r0, #128	; 0x80
 8003c72:	1902      	adds	r2, r0, r4
 8003c74:	2608      	movs	r6, #8
 8003c76:	46b4      	mov	ip, r6
 8003c78:	2608      	movs	r6, #8
 8003c7a:	46b0      	mov	r8, r6
 8003c7c:	44b8      	add	r8, r7
 8003c7e:	44c4      	add	ip, r8
 8003c80:	4462      	add	r2, ip
 8003c82:	6812      	ldr	r2, [r2, #0]
 8003c84:	18d3      	adds	r3, r2, r3
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	2b25      	cmp	r3, #37	; 0x25
 8003c8a:	d111      	bne.n	8003cb0 <printASCIIarray+0x1018>
 8003c8c:	190b      	adds	r3, r1, r4
 8003c8e:	2208      	movs	r2, #8
 8003c90:	4694      	mov	ip, r2
 8003c92:	44bc      	add	ip, r7
 8003c94:	4463      	add	r3, ip
 8003c96:	881b      	ldrh	r3, [r3, #0]
 8003c98:	1902      	adds	r2, r0, r4
 8003c9a:	2108      	movs	r1, #8
 8003c9c:	468c      	mov	ip, r1
 8003c9e:	2108      	movs	r1, #8
 8003ca0:	4688      	mov	r8, r1
 8003ca2:	44b8      	add	r8, r7
 8003ca4:	44c4      	add	ip, r8
 8003ca6:	4462      	add	r2, ip
 8003ca8:	6812      	ldr	r2, [r2, #0]
 8003caa:	18d3      	adds	r3, r2, r3
 8003cac:	2202      	movs	r2, #2
 8003cae:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x28){dataASCII[i]=0x03;}
 8003cb0:	2162      	movs	r1, #98	; 0x62
 8003cb2:	248c      	movs	r4, #140	; 0x8c
 8003cb4:	0064      	lsls	r4, r4, #1
 8003cb6:	190b      	adds	r3, r1, r4
 8003cb8:	2208      	movs	r2, #8
 8003cba:	4694      	mov	ip, r2
 8003cbc:	44bc      	add	ip, r7
 8003cbe:	4463      	add	r3, ip
 8003cc0:	881b      	ldrh	r3, [r3, #0]
 8003cc2:	2080      	movs	r0, #128	; 0x80
 8003cc4:	1902      	adds	r2, r0, r4
 8003cc6:	2608      	movs	r6, #8
 8003cc8:	46b4      	mov	ip, r6
 8003cca:	2608      	movs	r6, #8
 8003ccc:	46b0      	mov	r8, r6
 8003cce:	44b8      	add	r8, r7
 8003cd0:	44c4      	add	ip, r8
 8003cd2:	4462      	add	r2, ip
 8003cd4:	6812      	ldr	r2, [r2, #0]
 8003cd6:	18d3      	adds	r3, r2, r3
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	2b28      	cmp	r3, #40	; 0x28
 8003cdc:	d111      	bne.n	8003d02 <printASCIIarray+0x106a>
 8003cde:	190b      	adds	r3, r1, r4
 8003ce0:	2208      	movs	r2, #8
 8003ce2:	4694      	mov	ip, r2
 8003ce4:	44bc      	add	ip, r7
 8003ce6:	4463      	add	r3, ip
 8003ce8:	881b      	ldrh	r3, [r3, #0]
 8003cea:	1902      	adds	r2, r0, r4
 8003cec:	2108      	movs	r1, #8
 8003cee:	468c      	mov	ip, r1
 8003cf0:	2108      	movs	r1, #8
 8003cf2:	4688      	mov	r8, r1
 8003cf4:	44b8      	add	r8, r7
 8003cf6:	44c4      	add	ip, r8
 8003cf8:	4462      	add	r2, ip
 8003cfa:	6812      	ldr	r2, [r2, #0]
 8003cfc:	18d3      	adds	r3, r2, r3
 8003cfe:	2203      	movs	r2, #3
 8003d00:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x29){dataASCII[i]=0x04;}
 8003d02:	2162      	movs	r1, #98	; 0x62
 8003d04:	248c      	movs	r4, #140	; 0x8c
 8003d06:	0064      	lsls	r4, r4, #1
 8003d08:	190b      	adds	r3, r1, r4
 8003d0a:	2208      	movs	r2, #8
 8003d0c:	4694      	mov	ip, r2
 8003d0e:	44bc      	add	ip, r7
 8003d10:	4463      	add	r3, ip
 8003d12:	881b      	ldrh	r3, [r3, #0]
 8003d14:	2080      	movs	r0, #128	; 0x80
 8003d16:	1902      	adds	r2, r0, r4
 8003d18:	2608      	movs	r6, #8
 8003d1a:	46b4      	mov	ip, r6
 8003d1c:	2608      	movs	r6, #8
 8003d1e:	46b0      	mov	r8, r6
 8003d20:	44b8      	add	r8, r7
 8003d22:	44c4      	add	ip, r8
 8003d24:	4462      	add	r2, ip
 8003d26:	6812      	ldr	r2, [r2, #0]
 8003d28:	18d3      	adds	r3, r2, r3
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	2b29      	cmp	r3, #41	; 0x29
 8003d2e:	d111      	bne.n	8003d54 <printASCIIarray+0x10bc>
 8003d30:	190b      	adds	r3, r1, r4
 8003d32:	2208      	movs	r2, #8
 8003d34:	4694      	mov	ip, r2
 8003d36:	44bc      	add	ip, r7
 8003d38:	4463      	add	r3, ip
 8003d3a:	881b      	ldrh	r3, [r3, #0]
 8003d3c:	1902      	adds	r2, r0, r4
 8003d3e:	2108      	movs	r1, #8
 8003d40:	468c      	mov	ip, r1
 8003d42:	2108      	movs	r1, #8
 8003d44:	4688      	mov	r8, r1
 8003d46:	44b8      	add	r8, r7
 8003d48:	44c4      	add	ip, r8
 8003d4a:	4462      	add	r2, ip
 8003d4c:	6812      	ldr	r2, [r2, #0]
 8003d4e:	18d3      	adds	r3, r2, r3
 8003d50:	2204      	movs	r2, #4
 8003d52:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2a){dataASCII[i]=0x05;}
 8003d54:	2162      	movs	r1, #98	; 0x62
 8003d56:	248c      	movs	r4, #140	; 0x8c
 8003d58:	0064      	lsls	r4, r4, #1
 8003d5a:	190b      	adds	r3, r1, r4
 8003d5c:	2208      	movs	r2, #8
 8003d5e:	4694      	mov	ip, r2
 8003d60:	44bc      	add	ip, r7
 8003d62:	4463      	add	r3, ip
 8003d64:	881b      	ldrh	r3, [r3, #0]
 8003d66:	2080      	movs	r0, #128	; 0x80
 8003d68:	1902      	adds	r2, r0, r4
 8003d6a:	2608      	movs	r6, #8
 8003d6c:	46b4      	mov	ip, r6
 8003d6e:	2608      	movs	r6, #8
 8003d70:	46b0      	mov	r8, r6
 8003d72:	44b8      	add	r8, r7
 8003d74:	44c4      	add	ip, r8
 8003d76:	4462      	add	r2, ip
 8003d78:	6812      	ldr	r2, [r2, #0]
 8003d7a:	18d3      	adds	r3, r2, r3
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	2b2a      	cmp	r3, #42	; 0x2a
 8003d80:	d111      	bne.n	8003da6 <printASCIIarray+0x110e>
 8003d82:	190b      	adds	r3, r1, r4
 8003d84:	2208      	movs	r2, #8
 8003d86:	4694      	mov	ip, r2
 8003d88:	44bc      	add	ip, r7
 8003d8a:	4463      	add	r3, ip
 8003d8c:	881b      	ldrh	r3, [r3, #0]
 8003d8e:	1902      	adds	r2, r0, r4
 8003d90:	2108      	movs	r1, #8
 8003d92:	468c      	mov	ip, r1
 8003d94:	2108      	movs	r1, #8
 8003d96:	4688      	mov	r8, r1
 8003d98:	44b8      	add	r8, r7
 8003d9a:	44c4      	add	ip, r8
 8003d9c:	4462      	add	r2, ip
 8003d9e:	6812      	ldr	r2, [r2, #0]
 8003da0:	18d3      	adds	r3, r2, r3
 8003da2:	2205      	movs	r2, #5
 8003da4:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2b){dataASCII[i]=0x06;}
 8003da6:	2162      	movs	r1, #98	; 0x62
 8003da8:	248c      	movs	r4, #140	; 0x8c
 8003daa:	0064      	lsls	r4, r4, #1
 8003dac:	190b      	adds	r3, r1, r4
 8003dae:	2208      	movs	r2, #8
 8003db0:	4694      	mov	ip, r2
 8003db2:	44bc      	add	ip, r7
 8003db4:	4463      	add	r3, ip
 8003db6:	881b      	ldrh	r3, [r3, #0]
 8003db8:	2080      	movs	r0, #128	; 0x80
 8003dba:	1902      	adds	r2, r0, r4
 8003dbc:	2608      	movs	r6, #8
 8003dbe:	46b4      	mov	ip, r6
 8003dc0:	2608      	movs	r6, #8
 8003dc2:	46b0      	mov	r8, r6
 8003dc4:	44b8      	add	r8, r7
 8003dc6:	44c4      	add	ip, r8
 8003dc8:	4462      	add	r2, ip
 8003dca:	6812      	ldr	r2, [r2, #0]
 8003dcc:	18d3      	adds	r3, r2, r3
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	2b2b      	cmp	r3, #43	; 0x2b
 8003dd2:	d111      	bne.n	8003df8 <printASCIIarray+0x1160>
 8003dd4:	190b      	adds	r3, r1, r4
 8003dd6:	2208      	movs	r2, #8
 8003dd8:	4694      	mov	ip, r2
 8003dda:	44bc      	add	ip, r7
 8003ddc:	4463      	add	r3, ip
 8003dde:	881b      	ldrh	r3, [r3, #0]
 8003de0:	1902      	adds	r2, r0, r4
 8003de2:	2108      	movs	r1, #8
 8003de4:	468c      	mov	ip, r1
 8003de6:	2108      	movs	r1, #8
 8003de8:	4688      	mov	r8, r1
 8003dea:	44b8      	add	r8, r7
 8003dec:	44c4      	add	ip, r8
 8003dee:	4462      	add	r2, ip
 8003df0:	6812      	ldr	r2, [r2, #0]
 8003df2:	18d3      	adds	r3, r2, r3
 8003df4:	2206      	movs	r2, #6
 8003df6:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2c){dataASCII[i]=0x07;}
 8003df8:	2162      	movs	r1, #98	; 0x62
 8003dfa:	248c      	movs	r4, #140	; 0x8c
 8003dfc:	0064      	lsls	r4, r4, #1
 8003dfe:	190b      	adds	r3, r1, r4
 8003e00:	2208      	movs	r2, #8
 8003e02:	4694      	mov	ip, r2
 8003e04:	44bc      	add	ip, r7
 8003e06:	4463      	add	r3, ip
 8003e08:	881b      	ldrh	r3, [r3, #0]
 8003e0a:	2080      	movs	r0, #128	; 0x80
 8003e0c:	1902      	adds	r2, r0, r4
 8003e0e:	2608      	movs	r6, #8
 8003e10:	46b4      	mov	ip, r6
 8003e12:	2608      	movs	r6, #8
 8003e14:	46b0      	mov	r8, r6
 8003e16:	44b8      	add	r8, r7
 8003e18:	44c4      	add	ip, r8
 8003e1a:	4462      	add	r2, ip
 8003e1c:	6812      	ldr	r2, [r2, #0]
 8003e1e:	18d3      	adds	r3, r2, r3
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	2b2c      	cmp	r3, #44	; 0x2c
 8003e24:	d111      	bne.n	8003e4a <printASCIIarray+0x11b2>
 8003e26:	190b      	adds	r3, r1, r4
 8003e28:	2208      	movs	r2, #8
 8003e2a:	4694      	mov	ip, r2
 8003e2c:	44bc      	add	ip, r7
 8003e2e:	4463      	add	r3, ip
 8003e30:	881b      	ldrh	r3, [r3, #0]
 8003e32:	1902      	adds	r2, r0, r4
 8003e34:	2108      	movs	r1, #8
 8003e36:	468c      	mov	ip, r1
 8003e38:	2108      	movs	r1, #8
 8003e3a:	4688      	mov	r8, r1
 8003e3c:	44b8      	add	r8, r7
 8003e3e:	44c4      	add	ip, r8
 8003e40:	4462      	add	r2, ip
 8003e42:	6812      	ldr	r2, [r2, #0]
 8003e44:	18d3      	adds	r3, r2, r3
 8003e46:	2207      	movs	r2, #7
 8003e48:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2d){dataASCII[i]=0x08;}
 8003e4a:	2162      	movs	r1, #98	; 0x62
 8003e4c:	248c      	movs	r4, #140	; 0x8c
 8003e4e:	0064      	lsls	r4, r4, #1
 8003e50:	190b      	adds	r3, r1, r4
 8003e52:	2208      	movs	r2, #8
 8003e54:	4694      	mov	ip, r2
 8003e56:	44bc      	add	ip, r7
 8003e58:	4463      	add	r3, ip
 8003e5a:	881b      	ldrh	r3, [r3, #0]
 8003e5c:	2080      	movs	r0, #128	; 0x80
 8003e5e:	1902      	adds	r2, r0, r4
 8003e60:	2608      	movs	r6, #8
 8003e62:	46b4      	mov	ip, r6
 8003e64:	2608      	movs	r6, #8
 8003e66:	46b0      	mov	r8, r6
 8003e68:	44b8      	add	r8, r7
 8003e6a:	44c4      	add	ip, r8
 8003e6c:	4462      	add	r2, ip
 8003e6e:	6812      	ldr	r2, [r2, #0]
 8003e70:	18d3      	adds	r3, r2, r3
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	2b2d      	cmp	r3, #45	; 0x2d
 8003e76:	d111      	bne.n	8003e9c <printASCIIarray+0x1204>
 8003e78:	190b      	adds	r3, r1, r4
 8003e7a:	2208      	movs	r2, #8
 8003e7c:	4694      	mov	ip, r2
 8003e7e:	44bc      	add	ip, r7
 8003e80:	4463      	add	r3, ip
 8003e82:	881b      	ldrh	r3, [r3, #0]
 8003e84:	1902      	adds	r2, r0, r4
 8003e86:	2108      	movs	r1, #8
 8003e88:	468c      	mov	ip, r1
 8003e8a:	2108      	movs	r1, #8
 8003e8c:	4688      	mov	r8, r1
 8003e8e:	44b8      	add	r8, r7
 8003e90:	44c4      	add	ip, r8
 8003e92:	4462      	add	r2, ip
 8003e94:	6812      	ldr	r2, [r2, #0]
 8003e96:	18d3      	adds	r3, r2, r3
 8003e98:	2208      	movs	r2, #8
 8003e9a:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2e){dataASCII[i]=0x09;}
 8003e9c:	2162      	movs	r1, #98	; 0x62
 8003e9e:	248c      	movs	r4, #140	; 0x8c
 8003ea0:	0064      	lsls	r4, r4, #1
 8003ea2:	190b      	adds	r3, r1, r4
 8003ea4:	2208      	movs	r2, #8
 8003ea6:	4694      	mov	ip, r2
 8003ea8:	44bc      	add	ip, r7
 8003eaa:	4463      	add	r3, ip
 8003eac:	881b      	ldrh	r3, [r3, #0]
 8003eae:	2080      	movs	r0, #128	; 0x80
 8003eb0:	1902      	adds	r2, r0, r4
 8003eb2:	2608      	movs	r6, #8
 8003eb4:	46b4      	mov	ip, r6
 8003eb6:	2608      	movs	r6, #8
 8003eb8:	46b0      	mov	r8, r6
 8003eba:	44b8      	add	r8, r7
 8003ebc:	44c4      	add	ip, r8
 8003ebe:	4462      	add	r2, ip
 8003ec0:	6812      	ldr	r2, [r2, #0]
 8003ec2:	18d3      	adds	r3, r2, r3
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	2b2e      	cmp	r3, #46	; 0x2e
 8003ec8:	d111      	bne.n	8003eee <printASCIIarray+0x1256>
 8003eca:	190b      	adds	r3, r1, r4
 8003ecc:	2208      	movs	r2, #8
 8003ece:	4694      	mov	ip, r2
 8003ed0:	44bc      	add	ip, r7
 8003ed2:	4463      	add	r3, ip
 8003ed4:	881b      	ldrh	r3, [r3, #0]
 8003ed6:	1902      	adds	r2, r0, r4
 8003ed8:	2108      	movs	r1, #8
 8003eda:	468c      	mov	ip, r1
 8003edc:	2108      	movs	r1, #8
 8003ede:	4688      	mov	r8, r1
 8003ee0:	44b8      	add	r8, r7
 8003ee2:	44c4      	add	ip, r8
 8003ee4:	4462      	add	r2, ip
 8003ee6:	6812      	ldr	r2, [r2, #0]
 8003ee8:	18d3      	adds	r3, r2, r3
 8003eea:	2209      	movs	r2, #9
 8003eec:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2f){dataASCII[i]=0x0a;}
 8003eee:	2162      	movs	r1, #98	; 0x62
 8003ef0:	248c      	movs	r4, #140	; 0x8c
 8003ef2:	0064      	lsls	r4, r4, #1
 8003ef4:	190b      	adds	r3, r1, r4
 8003ef6:	2208      	movs	r2, #8
 8003ef8:	4694      	mov	ip, r2
 8003efa:	44bc      	add	ip, r7
 8003efc:	4463      	add	r3, ip
 8003efe:	881b      	ldrh	r3, [r3, #0]
 8003f00:	2080      	movs	r0, #128	; 0x80
 8003f02:	1902      	adds	r2, r0, r4
 8003f04:	2608      	movs	r6, #8
 8003f06:	46b4      	mov	ip, r6
 8003f08:	2608      	movs	r6, #8
 8003f0a:	46b0      	mov	r8, r6
 8003f0c:	44b8      	add	r8, r7
 8003f0e:	44c4      	add	ip, r8
 8003f10:	4462      	add	r2, ip
 8003f12:	6812      	ldr	r2, [r2, #0]
 8003f14:	18d3      	adds	r3, r2, r3
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	2b2f      	cmp	r3, #47	; 0x2f
 8003f1a:	d111      	bne.n	8003f40 <printASCIIarray+0x12a8>
 8003f1c:	190b      	adds	r3, r1, r4
 8003f1e:	2208      	movs	r2, #8
 8003f20:	4694      	mov	ip, r2
 8003f22:	44bc      	add	ip, r7
 8003f24:	4463      	add	r3, ip
 8003f26:	881b      	ldrh	r3, [r3, #0]
 8003f28:	1902      	adds	r2, r0, r4
 8003f2a:	2108      	movs	r1, #8
 8003f2c:	468c      	mov	ip, r1
 8003f2e:	2108      	movs	r1, #8
 8003f30:	4688      	mov	r8, r1
 8003f32:	44b8      	add	r8, r7
 8003f34:	44c4      	add	ip, r8
 8003f36:	4462      	add	r2, ip
 8003f38:	6812      	ldr	r2, [r2, #0]
 8003f3a:	18d3      	adds	r3, r2, r3
 8003f3c:	220a      	movs	r2, #10
 8003f3e:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x30){dataASCII[i]=0x0b;}
 8003f40:	2162      	movs	r1, #98	; 0x62
 8003f42:	248c      	movs	r4, #140	; 0x8c
 8003f44:	0064      	lsls	r4, r4, #1
 8003f46:	190b      	adds	r3, r1, r4
 8003f48:	2208      	movs	r2, #8
 8003f4a:	4694      	mov	ip, r2
 8003f4c:	44bc      	add	ip, r7
 8003f4e:	4463      	add	r3, ip
 8003f50:	881b      	ldrh	r3, [r3, #0]
 8003f52:	2080      	movs	r0, #128	; 0x80
 8003f54:	1902      	adds	r2, r0, r4
 8003f56:	2608      	movs	r6, #8
 8003f58:	46b4      	mov	ip, r6
 8003f5a:	2608      	movs	r6, #8
 8003f5c:	46b0      	mov	r8, r6
 8003f5e:	44b8      	add	r8, r7
 8003f60:	44c4      	add	ip, r8
 8003f62:	4462      	add	r2, ip
 8003f64:	6812      	ldr	r2, [r2, #0]
 8003f66:	18d3      	adds	r3, r2, r3
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	2b30      	cmp	r3, #48	; 0x30
 8003f6c:	d111      	bne.n	8003f92 <printASCIIarray+0x12fa>
 8003f6e:	190b      	adds	r3, r1, r4
 8003f70:	2208      	movs	r2, #8
 8003f72:	4694      	mov	ip, r2
 8003f74:	44bc      	add	ip, r7
 8003f76:	4463      	add	r3, ip
 8003f78:	881b      	ldrh	r3, [r3, #0]
 8003f7a:	1902      	adds	r2, r0, r4
 8003f7c:	2108      	movs	r1, #8
 8003f7e:	468c      	mov	ip, r1
 8003f80:	2108      	movs	r1, #8
 8003f82:	4688      	mov	r8, r1
 8003f84:	44b8      	add	r8, r7
 8003f86:	44c4      	add	ip, r8
 8003f88:	4462      	add	r2, ip
 8003f8a:	6812      	ldr	r2, [r2, #0]
 8003f8c:	18d3      	adds	r3, r2, r3
 8003f8e:	220b      	movs	r2, #11
 8003f90:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x31){dataASCII[i]=0x0c;}
 8003f92:	2162      	movs	r1, #98	; 0x62
 8003f94:	248c      	movs	r4, #140	; 0x8c
 8003f96:	0064      	lsls	r4, r4, #1
 8003f98:	190b      	adds	r3, r1, r4
 8003f9a:	2208      	movs	r2, #8
 8003f9c:	4694      	mov	ip, r2
 8003f9e:	44bc      	add	ip, r7
 8003fa0:	4463      	add	r3, ip
 8003fa2:	881b      	ldrh	r3, [r3, #0]
 8003fa4:	2080      	movs	r0, #128	; 0x80
 8003fa6:	1902      	adds	r2, r0, r4
 8003fa8:	2608      	movs	r6, #8
 8003faa:	46b4      	mov	ip, r6
 8003fac:	2608      	movs	r6, #8
 8003fae:	46b0      	mov	r8, r6
 8003fb0:	44b8      	add	r8, r7
 8003fb2:	44c4      	add	ip, r8
 8003fb4:	4462      	add	r2, ip
 8003fb6:	6812      	ldr	r2, [r2, #0]
 8003fb8:	18d3      	adds	r3, r2, r3
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	2b31      	cmp	r3, #49	; 0x31
 8003fbe:	d111      	bne.n	8003fe4 <printASCIIarray+0x134c>
 8003fc0:	190b      	adds	r3, r1, r4
 8003fc2:	2208      	movs	r2, #8
 8003fc4:	4694      	mov	ip, r2
 8003fc6:	44bc      	add	ip, r7
 8003fc8:	4463      	add	r3, ip
 8003fca:	881b      	ldrh	r3, [r3, #0]
 8003fcc:	1902      	adds	r2, r0, r4
 8003fce:	2108      	movs	r1, #8
 8003fd0:	468c      	mov	ip, r1
 8003fd2:	2108      	movs	r1, #8
 8003fd4:	4688      	mov	r8, r1
 8003fd6:	44b8      	add	r8, r7
 8003fd8:	44c4      	add	ip, r8
 8003fda:	4462      	add	r2, ip
 8003fdc:	6812      	ldr	r2, [r2, #0]
 8003fde:	18d3      	adds	r3, r2, r3
 8003fe0:	220c      	movs	r2, #12
 8003fe2:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x32){dataASCII[i]=0x0d;}
 8003fe4:	2162      	movs	r1, #98	; 0x62
 8003fe6:	248c      	movs	r4, #140	; 0x8c
 8003fe8:	0064      	lsls	r4, r4, #1
 8003fea:	190b      	adds	r3, r1, r4
 8003fec:	2208      	movs	r2, #8
 8003fee:	4694      	mov	ip, r2
 8003ff0:	44bc      	add	ip, r7
 8003ff2:	4463      	add	r3, ip
 8003ff4:	881b      	ldrh	r3, [r3, #0]
 8003ff6:	2080      	movs	r0, #128	; 0x80
 8003ff8:	1902      	adds	r2, r0, r4
 8003ffa:	2608      	movs	r6, #8
 8003ffc:	46b4      	mov	ip, r6
 8003ffe:	2608      	movs	r6, #8
 8004000:	46b0      	mov	r8, r6
 8004002:	44b8      	add	r8, r7
 8004004:	44c4      	add	ip, r8
 8004006:	4462      	add	r2, ip
 8004008:	6812      	ldr	r2, [r2, #0]
 800400a:	18d3      	adds	r3, r2, r3
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	2b32      	cmp	r3, #50	; 0x32
 8004010:	d111      	bne.n	8004036 <printASCIIarray+0x139e>
 8004012:	190b      	adds	r3, r1, r4
 8004014:	2208      	movs	r2, #8
 8004016:	4694      	mov	ip, r2
 8004018:	44bc      	add	ip, r7
 800401a:	4463      	add	r3, ip
 800401c:	881b      	ldrh	r3, [r3, #0]
 800401e:	1902      	adds	r2, r0, r4
 8004020:	2108      	movs	r1, #8
 8004022:	468c      	mov	ip, r1
 8004024:	2108      	movs	r1, #8
 8004026:	4688      	mov	r8, r1
 8004028:	44b8      	add	r8, r7
 800402a:	44c4      	add	ip, r8
 800402c:	4462      	add	r2, ip
 800402e:	6812      	ldr	r2, [r2, #0]
 8004030:	18d3      	adds	r3, r2, r3
 8004032:	220d      	movs	r2, #13
 8004034:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x33){dataASCII[i]=0x0e;}
 8004036:	2162      	movs	r1, #98	; 0x62
 8004038:	248c      	movs	r4, #140	; 0x8c
 800403a:	0064      	lsls	r4, r4, #1
 800403c:	190b      	adds	r3, r1, r4
 800403e:	2208      	movs	r2, #8
 8004040:	4694      	mov	ip, r2
 8004042:	44bc      	add	ip, r7
 8004044:	4463      	add	r3, ip
 8004046:	881b      	ldrh	r3, [r3, #0]
 8004048:	2080      	movs	r0, #128	; 0x80
 800404a:	1902      	adds	r2, r0, r4
 800404c:	2608      	movs	r6, #8
 800404e:	46b4      	mov	ip, r6
 8004050:	2608      	movs	r6, #8
 8004052:	46b0      	mov	r8, r6
 8004054:	44b8      	add	r8, r7
 8004056:	44c4      	add	ip, r8
 8004058:	4462      	add	r2, ip
 800405a:	6812      	ldr	r2, [r2, #0]
 800405c:	18d3      	adds	r3, r2, r3
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	2b33      	cmp	r3, #51	; 0x33
 8004062:	d111      	bne.n	8004088 <printASCIIarray+0x13f0>
 8004064:	190b      	adds	r3, r1, r4
 8004066:	2208      	movs	r2, #8
 8004068:	4694      	mov	ip, r2
 800406a:	44bc      	add	ip, r7
 800406c:	4463      	add	r3, ip
 800406e:	881b      	ldrh	r3, [r3, #0]
 8004070:	1902      	adds	r2, r0, r4
 8004072:	2108      	movs	r1, #8
 8004074:	468c      	mov	ip, r1
 8004076:	2108      	movs	r1, #8
 8004078:	4688      	mov	r8, r1
 800407a:	44b8      	add	r8, r7
 800407c:	44c4      	add	ip, r8
 800407e:	4462      	add	r2, ip
 8004080:	6812      	ldr	r2, [r2, #0]
 8004082:	18d3      	adds	r3, r2, r3
 8004084:	220e      	movs	r2, #14
 8004086:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x34){dataASCII[i]=0x0f;}
 8004088:	2162      	movs	r1, #98	; 0x62
 800408a:	248c      	movs	r4, #140	; 0x8c
 800408c:	0064      	lsls	r4, r4, #1
 800408e:	190b      	adds	r3, r1, r4
 8004090:	2208      	movs	r2, #8
 8004092:	4694      	mov	ip, r2
 8004094:	44bc      	add	ip, r7
 8004096:	4463      	add	r3, ip
 8004098:	881b      	ldrh	r3, [r3, #0]
 800409a:	2080      	movs	r0, #128	; 0x80
 800409c:	1902      	adds	r2, r0, r4
 800409e:	2608      	movs	r6, #8
 80040a0:	46b4      	mov	ip, r6
 80040a2:	2608      	movs	r6, #8
 80040a4:	46b0      	mov	r8, r6
 80040a6:	44b8      	add	r8, r7
 80040a8:	44c4      	add	ip, r8
 80040aa:	4462      	add	r2, ip
 80040ac:	6812      	ldr	r2, [r2, #0]
 80040ae:	18d3      	adds	r3, r2, r3
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	2b34      	cmp	r3, #52	; 0x34
 80040b4:	d111      	bne.n	80040da <printASCIIarray+0x1442>
 80040b6:	190b      	adds	r3, r1, r4
 80040b8:	2208      	movs	r2, #8
 80040ba:	4694      	mov	ip, r2
 80040bc:	44bc      	add	ip, r7
 80040be:	4463      	add	r3, ip
 80040c0:	881b      	ldrh	r3, [r3, #0]
 80040c2:	1902      	adds	r2, r0, r4
 80040c4:	2108      	movs	r1, #8
 80040c6:	468c      	mov	ip, r1
 80040c8:	2108      	movs	r1, #8
 80040ca:	4688      	mov	r8, r1
 80040cc:	44b8      	add	r8, r7
 80040ce:	44c4      	add	ip, r8
 80040d0:	4462      	add	r2, ip
 80040d2:	6812      	ldr	r2, [r2, #0]
 80040d4:	18d3      	adds	r3, r2, r3
 80040d6:	220f      	movs	r2, #15
 80040d8:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x35){dataASCII[i]=0x10;}
 80040da:	2162      	movs	r1, #98	; 0x62
 80040dc:	248c      	movs	r4, #140	; 0x8c
 80040de:	0064      	lsls	r4, r4, #1
 80040e0:	190b      	adds	r3, r1, r4
 80040e2:	2208      	movs	r2, #8
 80040e4:	4694      	mov	ip, r2
 80040e6:	44bc      	add	ip, r7
 80040e8:	4463      	add	r3, ip
 80040ea:	881b      	ldrh	r3, [r3, #0]
 80040ec:	2080      	movs	r0, #128	; 0x80
 80040ee:	1902      	adds	r2, r0, r4
 80040f0:	2608      	movs	r6, #8
 80040f2:	46b4      	mov	ip, r6
 80040f4:	2608      	movs	r6, #8
 80040f6:	46b0      	mov	r8, r6
 80040f8:	44b8      	add	r8, r7
 80040fa:	44c4      	add	ip, r8
 80040fc:	4462      	add	r2, ip
 80040fe:	6812      	ldr	r2, [r2, #0]
 8004100:	18d3      	adds	r3, r2, r3
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	2b35      	cmp	r3, #53	; 0x35
 8004106:	d111      	bne.n	800412c <printASCIIarray+0x1494>
 8004108:	190b      	adds	r3, r1, r4
 800410a:	2208      	movs	r2, #8
 800410c:	4694      	mov	ip, r2
 800410e:	44bc      	add	ip, r7
 8004110:	4463      	add	r3, ip
 8004112:	881b      	ldrh	r3, [r3, #0]
 8004114:	1902      	adds	r2, r0, r4
 8004116:	2108      	movs	r1, #8
 8004118:	468c      	mov	ip, r1
 800411a:	2108      	movs	r1, #8
 800411c:	4688      	mov	r8, r1
 800411e:	44b8      	add	r8, r7
 8004120:	44c4      	add	ip, r8
 8004122:	4462      	add	r2, ip
 8004124:	6812      	ldr	r2, [r2, #0]
 8004126:	18d3      	adds	r3, r2, r3
 8004128:	2210      	movs	r2, #16
 800412a:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x36){dataASCII[i]=0x11;}
 800412c:	2162      	movs	r1, #98	; 0x62
 800412e:	248c      	movs	r4, #140	; 0x8c
 8004130:	0064      	lsls	r4, r4, #1
 8004132:	190b      	adds	r3, r1, r4
 8004134:	2208      	movs	r2, #8
 8004136:	4694      	mov	ip, r2
 8004138:	44bc      	add	ip, r7
 800413a:	4463      	add	r3, ip
 800413c:	881b      	ldrh	r3, [r3, #0]
 800413e:	2080      	movs	r0, #128	; 0x80
 8004140:	1902      	adds	r2, r0, r4
 8004142:	2608      	movs	r6, #8
 8004144:	46b4      	mov	ip, r6
 8004146:	2608      	movs	r6, #8
 8004148:	46b0      	mov	r8, r6
 800414a:	44b8      	add	r8, r7
 800414c:	44c4      	add	ip, r8
 800414e:	4462      	add	r2, ip
 8004150:	6812      	ldr	r2, [r2, #0]
 8004152:	18d3      	adds	r3, r2, r3
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	2b36      	cmp	r3, #54	; 0x36
 8004158:	d111      	bne.n	800417e <printASCIIarray+0x14e6>
 800415a:	190b      	adds	r3, r1, r4
 800415c:	2208      	movs	r2, #8
 800415e:	4694      	mov	ip, r2
 8004160:	44bc      	add	ip, r7
 8004162:	4463      	add	r3, ip
 8004164:	881b      	ldrh	r3, [r3, #0]
 8004166:	1902      	adds	r2, r0, r4
 8004168:	2108      	movs	r1, #8
 800416a:	468c      	mov	ip, r1
 800416c:	2108      	movs	r1, #8
 800416e:	4688      	mov	r8, r1
 8004170:	44b8      	add	r8, r7
 8004172:	44c4      	add	ip, r8
 8004174:	4462      	add	r2, ip
 8004176:	6812      	ldr	r2, [r2, #0]
 8004178:	18d3      	adds	r3, r2, r3
 800417a:	2211      	movs	r2, #17
 800417c:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x37){dataASCII[i]=0x12;}
 800417e:	2162      	movs	r1, #98	; 0x62
 8004180:	248c      	movs	r4, #140	; 0x8c
 8004182:	0064      	lsls	r4, r4, #1
 8004184:	190b      	adds	r3, r1, r4
 8004186:	2208      	movs	r2, #8
 8004188:	4694      	mov	ip, r2
 800418a:	44bc      	add	ip, r7
 800418c:	4463      	add	r3, ip
 800418e:	881b      	ldrh	r3, [r3, #0]
 8004190:	2080      	movs	r0, #128	; 0x80
 8004192:	1902      	adds	r2, r0, r4
 8004194:	2608      	movs	r6, #8
 8004196:	46b4      	mov	ip, r6
 8004198:	2608      	movs	r6, #8
 800419a:	46b0      	mov	r8, r6
 800419c:	44b8      	add	r8, r7
 800419e:	44c4      	add	ip, r8
 80041a0:	4462      	add	r2, ip
 80041a2:	6812      	ldr	r2, [r2, #0]
 80041a4:	18d3      	adds	r3, r2, r3
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	2b37      	cmp	r3, #55	; 0x37
 80041aa:	d111      	bne.n	80041d0 <printASCIIarray+0x1538>
 80041ac:	190b      	adds	r3, r1, r4
 80041ae:	2208      	movs	r2, #8
 80041b0:	4694      	mov	ip, r2
 80041b2:	44bc      	add	ip, r7
 80041b4:	4463      	add	r3, ip
 80041b6:	881b      	ldrh	r3, [r3, #0]
 80041b8:	1902      	adds	r2, r0, r4
 80041ba:	2108      	movs	r1, #8
 80041bc:	468c      	mov	ip, r1
 80041be:	2108      	movs	r1, #8
 80041c0:	4688      	mov	r8, r1
 80041c2:	44b8      	add	r8, r7
 80041c4:	44c4      	add	ip, r8
 80041c6:	4462      	add	r2, ip
 80041c8:	6812      	ldr	r2, [r2, #0]
 80041ca:	18d3      	adds	r3, r2, r3
 80041cc:	2212      	movs	r2, #18
 80041ce:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x38){dataASCII[i]=0x13;}
 80041d0:	2162      	movs	r1, #98	; 0x62
 80041d2:	248c      	movs	r4, #140	; 0x8c
 80041d4:	0064      	lsls	r4, r4, #1
 80041d6:	190b      	adds	r3, r1, r4
 80041d8:	2208      	movs	r2, #8
 80041da:	4694      	mov	ip, r2
 80041dc:	44bc      	add	ip, r7
 80041de:	4463      	add	r3, ip
 80041e0:	881b      	ldrh	r3, [r3, #0]
 80041e2:	2080      	movs	r0, #128	; 0x80
 80041e4:	1902      	adds	r2, r0, r4
 80041e6:	2608      	movs	r6, #8
 80041e8:	46b4      	mov	ip, r6
 80041ea:	2608      	movs	r6, #8
 80041ec:	46b0      	mov	r8, r6
 80041ee:	44b8      	add	r8, r7
 80041f0:	44c4      	add	ip, r8
 80041f2:	4462      	add	r2, ip
 80041f4:	6812      	ldr	r2, [r2, #0]
 80041f6:	18d3      	adds	r3, r2, r3
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	2b38      	cmp	r3, #56	; 0x38
 80041fc:	d111      	bne.n	8004222 <printASCIIarray+0x158a>
 80041fe:	190b      	adds	r3, r1, r4
 8004200:	2208      	movs	r2, #8
 8004202:	4694      	mov	ip, r2
 8004204:	44bc      	add	ip, r7
 8004206:	4463      	add	r3, ip
 8004208:	881b      	ldrh	r3, [r3, #0]
 800420a:	1902      	adds	r2, r0, r4
 800420c:	2108      	movs	r1, #8
 800420e:	468c      	mov	ip, r1
 8004210:	2108      	movs	r1, #8
 8004212:	4688      	mov	r8, r1
 8004214:	44b8      	add	r8, r7
 8004216:	44c4      	add	ip, r8
 8004218:	4462      	add	r2, ip
 800421a:	6812      	ldr	r2, [r2, #0]
 800421c:	18d3      	adds	r3, r2, r3
 800421e:	2213      	movs	r2, #19
 8004220:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x39){dataASCII[i]=0x14;}
 8004222:	2162      	movs	r1, #98	; 0x62
 8004224:	248c      	movs	r4, #140	; 0x8c
 8004226:	0064      	lsls	r4, r4, #1
 8004228:	190b      	adds	r3, r1, r4
 800422a:	2208      	movs	r2, #8
 800422c:	4694      	mov	ip, r2
 800422e:	44bc      	add	ip, r7
 8004230:	4463      	add	r3, ip
 8004232:	881b      	ldrh	r3, [r3, #0]
 8004234:	2080      	movs	r0, #128	; 0x80
 8004236:	1902      	adds	r2, r0, r4
 8004238:	2608      	movs	r6, #8
 800423a:	46b4      	mov	ip, r6
 800423c:	2608      	movs	r6, #8
 800423e:	46b0      	mov	r8, r6
 8004240:	44b8      	add	r8, r7
 8004242:	44c4      	add	ip, r8
 8004244:	4462      	add	r2, ip
 8004246:	6812      	ldr	r2, [r2, #0]
 8004248:	18d3      	adds	r3, r2, r3
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	2b39      	cmp	r3, #57	; 0x39
 800424e:	d111      	bne.n	8004274 <printASCIIarray+0x15dc>
 8004250:	190b      	adds	r3, r1, r4
 8004252:	2208      	movs	r2, #8
 8004254:	4694      	mov	ip, r2
 8004256:	44bc      	add	ip, r7
 8004258:	4463      	add	r3, ip
 800425a:	881b      	ldrh	r3, [r3, #0]
 800425c:	1902      	adds	r2, r0, r4
 800425e:	2108      	movs	r1, #8
 8004260:	468c      	mov	ip, r1
 8004262:	2108      	movs	r1, #8
 8004264:	4688      	mov	r8, r1
 8004266:	44b8      	add	r8, r7
 8004268:	44c4      	add	ip, r8
 800426a:	4462      	add	r2, ip
 800426c:	6812      	ldr	r2, [r2, #0]
 800426e:	18d3      	adds	r3, r2, r3
 8004270:	2214      	movs	r2, #20
 8004272:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3a){dataASCII[i]=0x15;}
 8004274:	2162      	movs	r1, #98	; 0x62
 8004276:	248c      	movs	r4, #140	; 0x8c
 8004278:	0064      	lsls	r4, r4, #1
 800427a:	190b      	adds	r3, r1, r4
 800427c:	2208      	movs	r2, #8
 800427e:	4694      	mov	ip, r2
 8004280:	44bc      	add	ip, r7
 8004282:	4463      	add	r3, ip
 8004284:	881b      	ldrh	r3, [r3, #0]
 8004286:	2080      	movs	r0, #128	; 0x80
 8004288:	1902      	adds	r2, r0, r4
 800428a:	2608      	movs	r6, #8
 800428c:	46b4      	mov	ip, r6
 800428e:	2608      	movs	r6, #8
 8004290:	46b0      	mov	r8, r6
 8004292:	44b8      	add	r8, r7
 8004294:	44c4      	add	ip, r8
 8004296:	4462      	add	r2, ip
 8004298:	6812      	ldr	r2, [r2, #0]
 800429a:	18d3      	adds	r3, r2, r3
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	2b3a      	cmp	r3, #58	; 0x3a
 80042a0:	d111      	bne.n	80042c6 <printASCIIarray+0x162e>
 80042a2:	190b      	adds	r3, r1, r4
 80042a4:	2208      	movs	r2, #8
 80042a6:	4694      	mov	ip, r2
 80042a8:	44bc      	add	ip, r7
 80042aa:	4463      	add	r3, ip
 80042ac:	881b      	ldrh	r3, [r3, #0]
 80042ae:	1902      	adds	r2, r0, r4
 80042b0:	2108      	movs	r1, #8
 80042b2:	468c      	mov	ip, r1
 80042b4:	2108      	movs	r1, #8
 80042b6:	4688      	mov	r8, r1
 80042b8:	44b8      	add	r8, r7
 80042ba:	44c4      	add	ip, r8
 80042bc:	4462      	add	r2, ip
 80042be:	6812      	ldr	r2, [r2, #0]
 80042c0:	18d3      	adds	r3, r2, r3
 80042c2:	2215      	movs	r2, #21
 80042c4:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3b){dataASCII[i]=0x16;}
 80042c6:	2162      	movs	r1, #98	; 0x62
 80042c8:	248c      	movs	r4, #140	; 0x8c
 80042ca:	0064      	lsls	r4, r4, #1
 80042cc:	190b      	adds	r3, r1, r4
 80042ce:	2208      	movs	r2, #8
 80042d0:	4694      	mov	ip, r2
 80042d2:	44bc      	add	ip, r7
 80042d4:	4463      	add	r3, ip
 80042d6:	881b      	ldrh	r3, [r3, #0]
 80042d8:	2080      	movs	r0, #128	; 0x80
 80042da:	1902      	adds	r2, r0, r4
 80042dc:	2608      	movs	r6, #8
 80042de:	46b4      	mov	ip, r6
 80042e0:	2608      	movs	r6, #8
 80042e2:	46b0      	mov	r8, r6
 80042e4:	44b8      	add	r8, r7
 80042e6:	44c4      	add	ip, r8
 80042e8:	4462      	add	r2, ip
 80042ea:	6812      	ldr	r2, [r2, #0]
 80042ec:	18d3      	adds	r3, r2, r3
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	2b3b      	cmp	r3, #59	; 0x3b
 80042f2:	d111      	bne.n	8004318 <printASCIIarray+0x1680>
 80042f4:	190b      	adds	r3, r1, r4
 80042f6:	2208      	movs	r2, #8
 80042f8:	4694      	mov	ip, r2
 80042fa:	44bc      	add	ip, r7
 80042fc:	4463      	add	r3, ip
 80042fe:	881b      	ldrh	r3, [r3, #0]
 8004300:	1902      	adds	r2, r0, r4
 8004302:	2108      	movs	r1, #8
 8004304:	468c      	mov	ip, r1
 8004306:	2108      	movs	r1, #8
 8004308:	4688      	mov	r8, r1
 800430a:	44b8      	add	r8, r7
 800430c:	44c4      	add	ip, r8
 800430e:	4462      	add	r2, ip
 8004310:	6812      	ldr	r2, [r2, #0]
 8004312:	18d3      	adds	r3, r2, r3
 8004314:	2216      	movs	r2, #22
 8004316:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3c){dataASCII[i]=0x17;}
 8004318:	2162      	movs	r1, #98	; 0x62
 800431a:	248c      	movs	r4, #140	; 0x8c
 800431c:	0064      	lsls	r4, r4, #1
 800431e:	190b      	adds	r3, r1, r4
 8004320:	2208      	movs	r2, #8
 8004322:	4694      	mov	ip, r2
 8004324:	44bc      	add	ip, r7
 8004326:	4463      	add	r3, ip
 8004328:	881b      	ldrh	r3, [r3, #0]
 800432a:	2080      	movs	r0, #128	; 0x80
 800432c:	1902      	adds	r2, r0, r4
 800432e:	2608      	movs	r6, #8
 8004330:	46b4      	mov	ip, r6
 8004332:	2608      	movs	r6, #8
 8004334:	46b0      	mov	r8, r6
 8004336:	44b8      	add	r8, r7
 8004338:	44c4      	add	ip, r8
 800433a:	4462      	add	r2, ip
 800433c:	6812      	ldr	r2, [r2, #0]
 800433e:	18d3      	adds	r3, r2, r3
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	2b3c      	cmp	r3, #60	; 0x3c
 8004344:	d111      	bne.n	800436a <printASCIIarray+0x16d2>
 8004346:	190b      	adds	r3, r1, r4
 8004348:	2208      	movs	r2, #8
 800434a:	4694      	mov	ip, r2
 800434c:	44bc      	add	ip, r7
 800434e:	4463      	add	r3, ip
 8004350:	881b      	ldrh	r3, [r3, #0]
 8004352:	1902      	adds	r2, r0, r4
 8004354:	2108      	movs	r1, #8
 8004356:	468c      	mov	ip, r1
 8004358:	2108      	movs	r1, #8
 800435a:	4688      	mov	r8, r1
 800435c:	44b8      	add	r8, r7
 800435e:	44c4      	add	ip, r8
 8004360:	4462      	add	r2, ip
 8004362:	6812      	ldr	r2, [r2, #0]
 8004364:	18d3      	adds	r3, r2, r3
 8004366:	2217      	movs	r2, #23
 8004368:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3d){dataASCII[i]=0x18;}
 800436a:	2162      	movs	r1, #98	; 0x62
 800436c:	248c      	movs	r4, #140	; 0x8c
 800436e:	0064      	lsls	r4, r4, #1
 8004370:	190b      	adds	r3, r1, r4
 8004372:	2208      	movs	r2, #8
 8004374:	4694      	mov	ip, r2
 8004376:	44bc      	add	ip, r7
 8004378:	4463      	add	r3, ip
 800437a:	881b      	ldrh	r3, [r3, #0]
 800437c:	2080      	movs	r0, #128	; 0x80
 800437e:	1902      	adds	r2, r0, r4
 8004380:	2608      	movs	r6, #8
 8004382:	46b4      	mov	ip, r6
 8004384:	2608      	movs	r6, #8
 8004386:	46b0      	mov	r8, r6
 8004388:	44b8      	add	r8, r7
 800438a:	44c4      	add	ip, r8
 800438c:	4462      	add	r2, ip
 800438e:	6812      	ldr	r2, [r2, #0]
 8004390:	18d3      	adds	r3, r2, r3
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	2b3d      	cmp	r3, #61	; 0x3d
 8004396:	d111      	bne.n	80043bc <printASCIIarray+0x1724>
 8004398:	190b      	adds	r3, r1, r4
 800439a:	2208      	movs	r2, #8
 800439c:	4694      	mov	ip, r2
 800439e:	44bc      	add	ip, r7
 80043a0:	4463      	add	r3, ip
 80043a2:	881b      	ldrh	r3, [r3, #0]
 80043a4:	1902      	adds	r2, r0, r4
 80043a6:	2108      	movs	r1, #8
 80043a8:	468c      	mov	ip, r1
 80043aa:	2108      	movs	r1, #8
 80043ac:	4688      	mov	r8, r1
 80043ae:	44b8      	add	r8, r7
 80043b0:	44c4      	add	ip, r8
 80043b2:	4462      	add	r2, ip
 80043b4:	6812      	ldr	r2, [r2, #0]
 80043b6:	18d3      	adds	r3, r2, r3
 80043b8:	2218      	movs	r2, #24
 80043ba:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3e){dataASCII[i]=0x19;}
 80043bc:	2162      	movs	r1, #98	; 0x62
 80043be:	248c      	movs	r4, #140	; 0x8c
 80043c0:	0064      	lsls	r4, r4, #1
 80043c2:	190b      	adds	r3, r1, r4
 80043c4:	2208      	movs	r2, #8
 80043c6:	4694      	mov	ip, r2
 80043c8:	44bc      	add	ip, r7
 80043ca:	4463      	add	r3, ip
 80043cc:	881b      	ldrh	r3, [r3, #0]
 80043ce:	2080      	movs	r0, #128	; 0x80
 80043d0:	1902      	adds	r2, r0, r4
 80043d2:	2608      	movs	r6, #8
 80043d4:	46b4      	mov	ip, r6
 80043d6:	2608      	movs	r6, #8
 80043d8:	46b0      	mov	r8, r6
 80043da:	44b8      	add	r8, r7
 80043dc:	44c4      	add	ip, r8
 80043de:	4462      	add	r2, ip
 80043e0:	6812      	ldr	r2, [r2, #0]
 80043e2:	18d3      	adds	r3, r2, r3
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	2b3e      	cmp	r3, #62	; 0x3e
 80043e8:	d111      	bne.n	800440e <printASCIIarray+0x1776>
 80043ea:	190b      	adds	r3, r1, r4
 80043ec:	2208      	movs	r2, #8
 80043ee:	4694      	mov	ip, r2
 80043f0:	44bc      	add	ip, r7
 80043f2:	4463      	add	r3, ip
 80043f4:	881b      	ldrh	r3, [r3, #0]
 80043f6:	1902      	adds	r2, r0, r4
 80043f8:	2108      	movs	r1, #8
 80043fa:	468c      	mov	ip, r1
 80043fc:	2108      	movs	r1, #8
 80043fe:	4688      	mov	r8, r1
 8004400:	44b8      	add	r8, r7
 8004402:	44c4      	add	ip, r8
 8004404:	4462      	add	r2, ip
 8004406:	6812      	ldr	r2, [r2, #0]
 8004408:	18d3      	adds	r3, r2, r3
 800440a:	2219      	movs	r2, #25
 800440c:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3f){dataASCII[i]=0x1a;}
 800440e:	2162      	movs	r1, #98	; 0x62
 8004410:	248c      	movs	r4, #140	; 0x8c
 8004412:	0064      	lsls	r4, r4, #1
 8004414:	190b      	adds	r3, r1, r4
 8004416:	2208      	movs	r2, #8
 8004418:	4694      	mov	ip, r2
 800441a:	44bc      	add	ip, r7
 800441c:	4463      	add	r3, ip
 800441e:	881b      	ldrh	r3, [r3, #0]
 8004420:	2080      	movs	r0, #128	; 0x80
 8004422:	1902      	adds	r2, r0, r4
 8004424:	2608      	movs	r6, #8
 8004426:	46b4      	mov	ip, r6
 8004428:	2608      	movs	r6, #8
 800442a:	46b0      	mov	r8, r6
 800442c:	44b8      	add	r8, r7
 800442e:	44c4      	add	ip, r8
 8004430:	4462      	add	r2, ip
 8004432:	6812      	ldr	r2, [r2, #0]
 8004434:	18d3      	adds	r3, r2, r3
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	2b3f      	cmp	r3, #63	; 0x3f
 800443a:	d111      	bne.n	8004460 <printASCIIarray+0x17c8>
 800443c:	190b      	adds	r3, r1, r4
 800443e:	2208      	movs	r2, #8
 8004440:	4694      	mov	ip, r2
 8004442:	44bc      	add	ip, r7
 8004444:	4463      	add	r3, ip
 8004446:	881b      	ldrh	r3, [r3, #0]
 8004448:	1902      	adds	r2, r0, r4
 800444a:	2108      	movs	r1, #8
 800444c:	468c      	mov	ip, r1
 800444e:	2108      	movs	r1, #8
 8004450:	4688      	mov	r8, r1
 8004452:	44b8      	add	r8, r7
 8004454:	44c4      	add	ip, r8
 8004456:	4462      	add	r2, ip
 8004458:	6812      	ldr	r2, [r2, #0]
 800445a:	18d3      	adds	r3, r2, r3
 800445c:	221a      	movs	r2, #26
 800445e:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5b){dataASCII[i]=0x1b;}
 8004460:	2162      	movs	r1, #98	; 0x62
 8004462:	248c      	movs	r4, #140	; 0x8c
 8004464:	0064      	lsls	r4, r4, #1
 8004466:	190b      	adds	r3, r1, r4
 8004468:	2208      	movs	r2, #8
 800446a:	4694      	mov	ip, r2
 800446c:	44bc      	add	ip, r7
 800446e:	4463      	add	r3, ip
 8004470:	881b      	ldrh	r3, [r3, #0]
 8004472:	2080      	movs	r0, #128	; 0x80
 8004474:	1902      	adds	r2, r0, r4
 8004476:	2608      	movs	r6, #8
 8004478:	46b4      	mov	ip, r6
 800447a:	2608      	movs	r6, #8
 800447c:	46b0      	mov	r8, r6
 800447e:	44b8      	add	r8, r7
 8004480:	44c4      	add	ip, r8
 8004482:	4462      	add	r2, ip
 8004484:	6812      	ldr	r2, [r2, #0]
 8004486:	18d3      	adds	r3, r2, r3
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	2b5b      	cmp	r3, #91	; 0x5b
 800448c:	d111      	bne.n	80044b2 <printASCIIarray+0x181a>
 800448e:	190b      	adds	r3, r1, r4
 8004490:	2208      	movs	r2, #8
 8004492:	4694      	mov	ip, r2
 8004494:	44bc      	add	ip, r7
 8004496:	4463      	add	r3, ip
 8004498:	881b      	ldrh	r3, [r3, #0]
 800449a:	1902      	adds	r2, r0, r4
 800449c:	2108      	movs	r1, #8
 800449e:	468c      	mov	ip, r1
 80044a0:	2108      	movs	r1, #8
 80044a2:	4688      	mov	r8, r1
 80044a4:	44b8      	add	r8, r7
 80044a6:	44c4      	add	ip, r8
 80044a8:	4462      	add	r2, ip
 80044aa:	6812      	ldr	r2, [r2, #0]
 80044ac:	18d3      	adds	r3, r2, r3
 80044ae:	221b      	movs	r2, #27
 80044b0:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5c){dataASCII[i]=0x1c;}
 80044b2:	2162      	movs	r1, #98	; 0x62
 80044b4:	248c      	movs	r4, #140	; 0x8c
 80044b6:	0064      	lsls	r4, r4, #1
 80044b8:	190b      	adds	r3, r1, r4
 80044ba:	2208      	movs	r2, #8
 80044bc:	4694      	mov	ip, r2
 80044be:	44bc      	add	ip, r7
 80044c0:	4463      	add	r3, ip
 80044c2:	881b      	ldrh	r3, [r3, #0]
 80044c4:	2080      	movs	r0, #128	; 0x80
 80044c6:	1902      	adds	r2, r0, r4
 80044c8:	2608      	movs	r6, #8
 80044ca:	46b4      	mov	ip, r6
 80044cc:	2608      	movs	r6, #8
 80044ce:	46b0      	mov	r8, r6
 80044d0:	44b8      	add	r8, r7
 80044d2:	44c4      	add	ip, r8
 80044d4:	4462      	add	r2, ip
 80044d6:	6812      	ldr	r2, [r2, #0]
 80044d8:	18d3      	adds	r3, r2, r3
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	2b5c      	cmp	r3, #92	; 0x5c
 80044de:	d111      	bne.n	8004504 <printASCIIarray+0x186c>
 80044e0:	190b      	adds	r3, r1, r4
 80044e2:	2208      	movs	r2, #8
 80044e4:	4694      	mov	ip, r2
 80044e6:	44bc      	add	ip, r7
 80044e8:	4463      	add	r3, ip
 80044ea:	881b      	ldrh	r3, [r3, #0]
 80044ec:	1902      	adds	r2, r0, r4
 80044ee:	2108      	movs	r1, #8
 80044f0:	468c      	mov	ip, r1
 80044f2:	2108      	movs	r1, #8
 80044f4:	4688      	mov	r8, r1
 80044f6:	44b8      	add	r8, r7
 80044f8:	44c4      	add	ip, r8
 80044fa:	4462      	add	r2, ip
 80044fc:	6812      	ldr	r2, [r2, #0]
 80044fe:	18d3      	adds	r3, r2, r3
 8004500:	221c      	movs	r2, #28
 8004502:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5d){dataASCII[i]=0x1d;}
 8004504:	2162      	movs	r1, #98	; 0x62
 8004506:	248c      	movs	r4, #140	; 0x8c
 8004508:	0064      	lsls	r4, r4, #1
 800450a:	190b      	adds	r3, r1, r4
 800450c:	2208      	movs	r2, #8
 800450e:	4694      	mov	ip, r2
 8004510:	44bc      	add	ip, r7
 8004512:	4463      	add	r3, ip
 8004514:	881b      	ldrh	r3, [r3, #0]
 8004516:	2080      	movs	r0, #128	; 0x80
 8004518:	1902      	adds	r2, r0, r4
 800451a:	2608      	movs	r6, #8
 800451c:	46b4      	mov	ip, r6
 800451e:	2608      	movs	r6, #8
 8004520:	46b0      	mov	r8, r6
 8004522:	44b8      	add	r8, r7
 8004524:	44c4      	add	ip, r8
 8004526:	4462      	add	r2, ip
 8004528:	6812      	ldr	r2, [r2, #0]
 800452a:	18d3      	adds	r3, r2, r3
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	2b5d      	cmp	r3, #93	; 0x5d
 8004530:	d111      	bne.n	8004556 <printASCIIarray+0x18be>
 8004532:	190b      	adds	r3, r1, r4
 8004534:	2208      	movs	r2, #8
 8004536:	4694      	mov	ip, r2
 8004538:	44bc      	add	ip, r7
 800453a:	4463      	add	r3, ip
 800453c:	881b      	ldrh	r3, [r3, #0]
 800453e:	1902      	adds	r2, r0, r4
 8004540:	2108      	movs	r1, #8
 8004542:	468c      	mov	ip, r1
 8004544:	2108      	movs	r1, #8
 8004546:	4688      	mov	r8, r1
 8004548:	44b8      	add	r8, r7
 800454a:	44c4      	add	ip, r8
 800454c:	4462      	add	r2, ip
 800454e:	6812      	ldr	r2, [r2, #0]
 8004550:	18d3      	adds	r3, r2, r3
 8004552:	221d      	movs	r2, #29
 8004554:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5f){dataASCII[i]=0x1e;}
 8004556:	2162      	movs	r1, #98	; 0x62
 8004558:	248c      	movs	r4, #140	; 0x8c
 800455a:	0064      	lsls	r4, r4, #1
 800455c:	190b      	adds	r3, r1, r4
 800455e:	2208      	movs	r2, #8
 8004560:	4694      	mov	ip, r2
 8004562:	44bc      	add	ip, r7
 8004564:	4463      	add	r3, ip
 8004566:	881b      	ldrh	r3, [r3, #0]
 8004568:	2080      	movs	r0, #128	; 0x80
 800456a:	1902      	adds	r2, r0, r4
 800456c:	2608      	movs	r6, #8
 800456e:	46b4      	mov	ip, r6
 8004570:	2608      	movs	r6, #8
 8004572:	46b0      	mov	r8, r6
 8004574:	44b8      	add	r8, r7
 8004576:	44c4      	add	ip, r8
 8004578:	4462      	add	r2, ip
 800457a:	6812      	ldr	r2, [r2, #0]
 800457c:	18d3      	adds	r3, r2, r3
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	2b5f      	cmp	r3, #95	; 0x5f
 8004582:	d111      	bne.n	80045a8 <printASCIIarray+0x1910>
 8004584:	190b      	adds	r3, r1, r4
 8004586:	2208      	movs	r2, #8
 8004588:	4694      	mov	ip, r2
 800458a:	44bc      	add	ip, r7
 800458c:	4463      	add	r3, ip
 800458e:	881b      	ldrh	r3, [r3, #0]
 8004590:	1902      	adds	r2, r0, r4
 8004592:	2108      	movs	r1, #8
 8004594:	468c      	mov	ip, r1
 8004596:	2108      	movs	r1, #8
 8004598:	4688      	mov	r8, r1
 800459a:	44b8      	add	r8, r7
 800459c:	44c4      	add	ip, r8
 800459e:	4462      	add	r2, ip
 80045a0:	6812      	ldr	r2, [r2, #0]
 80045a2:	18d3      	adds	r3, r2, r3
 80045a4:	221e      	movs	r2, #30
 80045a6:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x7c){dataASCII[i]=0x1f;}
 80045a8:	2162      	movs	r1, #98	; 0x62
 80045aa:	248c      	movs	r4, #140	; 0x8c
 80045ac:	0064      	lsls	r4, r4, #1
 80045ae:	190b      	adds	r3, r1, r4
 80045b0:	2208      	movs	r2, #8
 80045b2:	4694      	mov	ip, r2
 80045b4:	44bc      	add	ip, r7
 80045b6:	4463      	add	r3, ip
 80045b8:	881b      	ldrh	r3, [r3, #0]
 80045ba:	2080      	movs	r0, #128	; 0x80
 80045bc:	1902      	adds	r2, r0, r4
 80045be:	2608      	movs	r6, #8
 80045c0:	46b4      	mov	ip, r6
 80045c2:	2608      	movs	r6, #8
 80045c4:	46b0      	mov	r8, r6
 80045c6:	44b8      	add	r8, r7
 80045c8:	44c4      	add	ip, r8
 80045ca:	4462      	add	r2, ip
 80045cc:	6812      	ldr	r2, [r2, #0]
 80045ce:	18d3      	adds	r3, r2, r3
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	2b7c      	cmp	r3, #124	; 0x7c
 80045d4:	d111      	bne.n	80045fa <printASCIIarray+0x1962>
 80045d6:	190b      	adds	r3, r1, r4
 80045d8:	2208      	movs	r2, #8
 80045da:	4694      	mov	ip, r2
 80045dc:	44bc      	add	ip, r7
 80045de:	4463      	add	r3, ip
 80045e0:	881b      	ldrh	r3, [r3, #0]
 80045e2:	1902      	adds	r2, r0, r4
 80045e4:	2108      	movs	r1, #8
 80045e6:	468c      	mov	ip, r1
 80045e8:	2108      	movs	r1, #8
 80045ea:	4688      	mov	r8, r1
 80045ec:	44b8      	add	r8, r7
 80045ee:	44c4      	add	ip, r8
 80045f0:	4462      	add	r2, ip
 80045f2:	6812      	ldr	r2, [r2, #0]
 80045f4:	18d3      	adds	r3, r2, r3
 80045f6:	221f      	movs	r2, #31
 80045f8:	701a      	strb	r2, [r3, #0]
				for(i=0;i<strLen;i++){
 80045fa:	2162      	movs	r1, #98	; 0x62
 80045fc:	208c      	movs	r0, #140	; 0x8c
 80045fe:	0040      	lsls	r0, r0, #1
 8004600:	180b      	adds	r3, r1, r0
 8004602:	2208      	movs	r2, #8
 8004604:	4694      	mov	ip, r2
 8004606:	44bc      	add	ip, r7
 8004608:	4463      	add	r3, ip
 800460a:	881a      	ldrh	r2, [r3, #0]
 800460c:	180b      	adds	r3, r1, r0
 800460e:	2108      	movs	r1, #8
 8004610:	468c      	mov	ip, r1
 8004612:	44bc      	add	ip, r7
 8004614:	4463      	add	r3, ip
 8004616:	3201      	adds	r2, #1
 8004618:	801a      	strh	r2, [r3, #0]
 800461a:	231e      	movs	r3, #30
 800461c:	33ff      	adds	r3, #255	; 0xff
 800461e:	2208      	movs	r2, #8
 8004620:	189b      	adds	r3, r3, r2
 8004622:	19db      	adds	r3, r3, r7
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	b29b      	uxth	r3, r3
 8004628:	2162      	movs	r1, #98	; 0x62
 800462a:	208c      	movs	r0, #140	; 0x8c
 800462c:	0040      	lsls	r0, r0, #1
 800462e:	180a      	adds	r2, r1, r0
 8004630:	2408      	movs	r4, #8
 8004632:	46a4      	mov	ip, r4
 8004634:	44bc      	add	ip, r7
 8004636:	4462      	add	r2, ip
 8004638:	8812      	ldrh	r2, [r2, #0]
 800463a:	429a      	cmp	r2, r3
 800463c:	d201      	bcs.n	8004642 <printASCIIarray+0x19aa>
 800463e:	f7ff fabc 	bl	8003bba <printASCIIarray+0xf22>
				}
				for(i=0;i<strLen;i++){
 8004642:	180b      	adds	r3, r1, r0
 8004644:	2208      	movs	r2, #8
 8004646:	4694      	mov	ip, r2
 8004648:	44bc      	add	ip, r7
 800464a:	4463      	add	r3, ip
 800464c:	2200      	movs	r2, #0
 800464e:	801a      	strh	r2, [r3, #0]
 8004650:	e113      	b.n	800487a <printASCIIarray+0x1be2>
					for(j=0;j<symLen;j++){
 8004652:	2364      	movs	r3, #100	; 0x64
 8004654:	228c      	movs	r2, #140	; 0x8c
 8004656:	0052      	lsls	r2, r2, #1
 8004658:	189b      	adds	r3, r3, r2
 800465a:	2208      	movs	r2, #8
 800465c:	4694      	mov	ip, r2
 800465e:	44bc      	add	ip, r7
 8004660:	4463      	add	r3, ip
 8004662:	2200      	movs	r2, #0
 8004664:	801a      	strh	r2, [r3, #0]
 8004666:	e041      	b.n	80046ec <printASCIIarray+0x1a54>
						weoBuffer[j]=F3[dataASCII[i]][j];
 8004668:	2362      	movs	r3, #98	; 0x62
 800466a:	218c      	movs	r1, #140	; 0x8c
 800466c:	0049      	lsls	r1, r1, #1
 800466e:	185b      	adds	r3, r3, r1
 8004670:	2208      	movs	r2, #8
 8004672:	4694      	mov	ip, r2
 8004674:	44bc      	add	ip, r7
 8004676:	4463      	add	r3, ip
 8004678:	881b      	ldrh	r3, [r3, #0]
 800467a:	2280      	movs	r2, #128	; 0x80
 800467c:	1852      	adds	r2, r2, r1
 800467e:	2008      	movs	r0, #8
 8004680:	4684      	mov	ip, r0
 8004682:	2008      	movs	r0, #8
 8004684:	4680      	mov	r8, r0
 8004686:	44b8      	add	r8, r7
 8004688:	44c4      	add	ip, r8
 800468a:	4462      	add	r2, ip
 800468c:	6812      	ldr	r2, [r2, #0]
 800468e:	18d3      	adds	r3, r2, r3
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	001a      	movs	r2, r3
 8004694:	2664      	movs	r6, #100	; 0x64
 8004696:	1873      	adds	r3, r6, r1
 8004698:	2008      	movs	r0, #8
 800469a:	4684      	mov	ip, r0
 800469c:	44bc      	add	ip, r7
 800469e:	4463      	add	r3, ip
 80046a0:	8818      	ldrh	r0, [r3, #0]
 80046a2:	1873      	adds	r3, r6, r1
 80046a4:	2108      	movs	r1, #8
 80046a6:	468c      	mov	ip, r1
 80046a8:	44bc      	add	ip, r7
 80046aa:	4463      	add	r3, ip
 80046ac:	8819      	ldrh	r1, [r3, #0]
 80046ae:	4ca1      	ldr	r4, [pc, #644]	; (8004934 <printASCIIarray+0x1c9c>)
 80046b0:	0013      	movs	r3, r2
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	189b      	adds	r3, r3, r2
 80046b6:	005b      	lsls	r3, r3, #1
 80046b8:	189b      	adds	r3, r3, r2
 80046ba:	011b      	lsls	r3, r3, #4
 80046bc:	18e3      	adds	r3, r4, r3
 80046be:	5c1a      	ldrb	r2, [r3, r0]
 80046c0:	239a      	movs	r3, #154	; 0x9a
 80046c2:	005b      	lsls	r3, r3, #1
 80046c4:	2008      	movs	r0, #8
 80046c6:	181b      	adds	r3, r3, r0
 80046c8:	19db      	adds	r3, r3, r7
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	545a      	strb	r2, [r3, r1]
					for(j=0;j<symLen;j++){
 80046ce:	218c      	movs	r1, #140	; 0x8c
 80046d0:	0049      	lsls	r1, r1, #1
 80046d2:	1873      	adds	r3, r6, r1
 80046d4:	2208      	movs	r2, #8
 80046d6:	4694      	mov	ip, r2
 80046d8:	44bc      	add	ip, r7
 80046da:	4463      	add	r3, ip
 80046dc:	881a      	ldrh	r2, [r3, #0]
 80046de:	1873      	adds	r3, r6, r1
 80046e0:	2108      	movs	r1, #8
 80046e2:	468c      	mov	ip, r1
 80046e4:	44bc      	add	ip, r7
 80046e6:	4463      	add	r3, ip
 80046e8:	3201      	adds	r2, #1
 80046ea:	801a      	strh	r2, [r3, #0]
 80046ec:	2364      	movs	r3, #100	; 0x64
 80046ee:	218c      	movs	r1, #140	; 0x8c
 80046f0:	0049      	lsls	r1, r1, #1
 80046f2:	185b      	adds	r3, r3, r1
 80046f4:	2208      	movs	r2, #8
 80046f6:	18ba      	adds	r2, r7, r2
 80046f8:	189a      	adds	r2, r3, r2
 80046fa:	235a      	movs	r3, #90	; 0x5a
 80046fc:	185b      	adds	r3, r3, r1
 80046fe:	2008      	movs	r0, #8
 8004700:	4684      	mov	ip, r0
 8004702:	44bc      	add	ip, r7
 8004704:	4463      	add	r3, ip
 8004706:	8812      	ldrh	r2, [r2, #0]
 8004708:	881b      	ldrh	r3, [r3, #0]
 800470a:	429a      	cmp	r2, r3
 800470c:	d3ac      	bcc.n	8004668 <printASCIIarray+0x19d0>
//							weoBuffer2[k]=((weoBuffer[k]&0xF0)>>4)&contrast;
//						}
//					for (k=0;k<symLen;k++){
//							weoBuffer[k]=(weoBuffer2[k]<<4)|weoBuffer1[k];
//						}
					for (k=0;k<symLen;k++){
 800470e:	2366      	movs	r3, #102	; 0x66
 8004710:	185b      	adds	r3, r3, r1
 8004712:	2208      	movs	r2, #8
 8004714:	4694      	mov	ip, r2
 8004716:	44bc      	add	ip, r7
 8004718:	4463      	add	r3, ip
 800471a:	2200      	movs	r2, #0
 800471c:	801a      	strh	r2, [r3, #0]
 800471e:	e032      	b.n	8004786 <printASCIIarray+0x1aee>
						weoBuffer[k]=weoBuffer[k] & contrast;
 8004720:	2066      	movs	r0, #102	; 0x66
 8004722:	248c      	movs	r4, #140	; 0x8c
 8004724:	0064      	lsls	r4, r4, #1
 8004726:	1903      	adds	r3, r0, r4
 8004728:	2208      	movs	r2, #8
 800472a:	4694      	mov	ip, r2
 800472c:	44bc      	add	ip, r7
 800472e:	4463      	add	r3, ip
 8004730:	881b      	ldrh	r3, [r3, #0]
 8004732:	269a      	movs	r6, #154	; 0x9a
 8004734:	0076      	lsls	r6, r6, #1
 8004736:	2208      	movs	r2, #8
 8004738:	18b2      	adds	r2, r6, r2
 800473a:	19d2      	adds	r2, r2, r7
 800473c:	6812      	ldr	r2, [r2, #0]
 800473e:	5cd2      	ldrb	r2, [r2, r3]
 8004740:	1903      	adds	r3, r0, r4
 8004742:	2108      	movs	r1, #8
 8004744:	468c      	mov	ip, r1
 8004746:	44bc      	add	ip, r7
 8004748:	4463      	add	r3, ip
 800474a:	881b      	ldrh	r3, [r3, #0]
 800474c:	4698      	mov	r8, r3
 800474e:	215c      	movs	r1, #92	; 0x5c
 8004750:	1909      	adds	r1, r1, r4
 8004752:	2308      	movs	r3, #8
 8004754:	469c      	mov	ip, r3
 8004756:	44bc      	add	ip, r7
 8004758:	4461      	add	r1, ip
 800475a:	7809      	ldrb	r1, [r1, #0]
 800475c:	400a      	ands	r2, r1
 800475e:	b2d1      	uxtb	r1, r2
 8004760:	2208      	movs	r2, #8
 8004762:	18b2      	adds	r2, r6, r2
 8004764:	19d2      	adds	r2, r2, r7
 8004766:	6812      	ldr	r2, [r2, #0]
 8004768:	4643      	mov	r3, r8
 800476a:	54d1      	strb	r1, [r2, r3]
					for (k=0;k<symLen;k++){
 800476c:	1903      	adds	r3, r0, r4
 800476e:	2208      	movs	r2, #8
 8004770:	4694      	mov	ip, r2
 8004772:	44bc      	add	ip, r7
 8004774:	4463      	add	r3, ip
 8004776:	881a      	ldrh	r2, [r3, #0]
 8004778:	1903      	adds	r3, r0, r4
 800477a:	2108      	movs	r1, #8
 800477c:	468c      	mov	ip, r1
 800477e:	44bc      	add	ip, r7
 8004780:	4463      	add	r3, ip
 8004782:	3201      	adds	r2, #1
 8004784:	801a      	strh	r2, [r3, #0]
 8004786:	2366      	movs	r3, #102	; 0x66
 8004788:	268c      	movs	r6, #140	; 0x8c
 800478a:	0076      	lsls	r6, r6, #1
 800478c:	199b      	adds	r3, r3, r6
 800478e:	2208      	movs	r2, #8
 8004790:	18ba      	adds	r2, r7, r2
 8004792:	189a      	adds	r2, r3, r2
 8004794:	235a      	movs	r3, #90	; 0x5a
 8004796:	199b      	adds	r3, r3, r6
 8004798:	2108      	movs	r1, #8
 800479a:	468c      	mov	ip, r1
 800479c:	44bc      	add	ip, r7
 800479e:	4463      	add	r3, ip
 80047a0:	8812      	ldrh	r2, [r2, #0]
 80047a2:	881b      	ldrh	r3, [r3, #0]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d3bb      	bcc.n	8004720 <printASCIIarray+0x1a88>
					}
				weoDrawRectangleFilled(ASCII_X, imY, ASCII_X+X_increment-1, imY + ASCII_height - decY, 0xFF, weoBuffer);
 80047a8:	205f      	movs	r0, #95	; 0x5f
 80047aa:	1983      	adds	r3, r0, r6
 80047ac:	2208      	movs	r2, #8
 80047ae:	18ba      	adds	r2, r7, r2
 80047b0:	189a      	adds	r2, r3, r2
 80047b2:	233f      	movs	r3, #63	; 0x3f
 80047b4:	199b      	adds	r3, r3, r6
 80047b6:	2108      	movs	r1, #8
 80047b8:	468c      	mov	ip, r1
 80047ba:	44bc      	add	ip, r7
 80047bc:	4463      	add	r3, ip
 80047be:	7812      	ldrb	r2, [r2, #0]
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	18d3      	adds	r3, r2, r3
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	3b01      	subs	r3, #1
 80047c8:	b2dc      	uxtb	r4, r3
 80047ca:	218f      	movs	r1, #143	; 0x8f
 80047cc:	0049      	lsls	r1, r1, #1
 80047ce:	2308      	movs	r3, #8
 80047d0:	18cb      	adds	r3, r1, r3
 80047d2:	19da      	adds	r2, r3, r7
 80047d4:	213e      	movs	r1, #62	; 0x3e
 80047d6:	198b      	adds	r3, r1, r6
 80047d8:	2108      	movs	r1, #8
 80047da:	468c      	mov	ip, r1
 80047dc:	44bc      	add	ip, r7
 80047de:	4463      	add	r3, ip
 80047e0:	7812      	ldrb	r2, [r2, #0]
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	18d3      	adds	r3, r2, r3
 80047e6:	b2da      	uxtb	r2, r3
 80047e8:	2160      	movs	r1, #96	; 0x60
 80047ea:	198b      	adds	r3, r1, r6
 80047ec:	2108      	movs	r1, #8
 80047ee:	468c      	mov	ip, r1
 80047f0:	44bc      	add	ip, r7
 80047f2:	4463      	add	r3, ip
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	4698      	mov	r8, r3
 80047fc:	218f      	movs	r1, #143	; 0x8f
 80047fe:	0049      	lsls	r1, r1, #1
 8004800:	2308      	movs	r3, #8
 8004802:	18cb      	adds	r3, r1, r3
 8004804:	19db      	adds	r3, r3, r7
 8004806:	7819      	ldrb	r1, [r3, #0]
 8004808:	0006      	movs	r6, r0
 800480a:	238c      	movs	r3, #140	; 0x8c
 800480c:	005b      	lsls	r3, r3, #1
 800480e:	18c3      	adds	r3, r0, r3
 8004810:	2208      	movs	r2, #8
 8004812:	4694      	mov	ip, r2
 8004814:	44bc      	add	ip, r7
 8004816:	4463      	add	r3, ip
 8004818:	7818      	ldrb	r0, [r3, #0]
 800481a:	239a      	movs	r3, #154	; 0x9a
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	2208      	movs	r2, #8
 8004820:	189b      	adds	r3, r3, r2
 8004822:	19db      	adds	r3, r3, r7
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	9301      	str	r3, [sp, #4]
 8004828:	23ff      	movs	r3, #255	; 0xff
 800482a:	9300      	str	r3, [sp, #0]
 800482c:	4643      	mov	r3, r8
 800482e:	0022      	movs	r2, r4
 8004830:	f7fc fe4c 	bl	80014cc <weoDrawRectangleFilled>
				ASCII_X += X_increment;
 8004834:	208c      	movs	r0, #140	; 0x8c
 8004836:	0040      	lsls	r0, r0, #1
 8004838:	1833      	adds	r3, r6, r0
 800483a:	2208      	movs	r2, #8
 800483c:	4694      	mov	ip, r2
 800483e:	44bc      	add	ip, r7
 8004840:	4463      	add	r3, ip
 8004842:	1832      	adds	r2, r6, r0
 8004844:	2108      	movs	r1, #8
 8004846:	1879      	adds	r1, r7, r1
 8004848:	1851      	adds	r1, r2, r1
 800484a:	223f      	movs	r2, #63	; 0x3f
 800484c:	1812      	adds	r2, r2, r0
 800484e:	2408      	movs	r4, #8
 8004850:	46a4      	mov	ip, r4
 8004852:	44bc      	add	ip, r7
 8004854:	4462      	add	r2, ip
 8004856:	7809      	ldrb	r1, [r1, #0]
 8004858:	7812      	ldrb	r2, [r2, #0]
 800485a:	188a      	adds	r2, r1, r2
 800485c:	701a      	strb	r2, [r3, #0]
				for(i=0;i<strLen;i++){
 800485e:	2162      	movs	r1, #98	; 0x62
 8004860:	180b      	adds	r3, r1, r0
 8004862:	2208      	movs	r2, #8
 8004864:	4694      	mov	ip, r2
 8004866:	44bc      	add	ip, r7
 8004868:	4463      	add	r3, ip
 800486a:	881a      	ldrh	r2, [r3, #0]
 800486c:	180b      	adds	r3, r1, r0
 800486e:	2108      	movs	r1, #8
 8004870:	468c      	mov	ip, r1
 8004872:	44bc      	add	ip, r7
 8004874:	4463      	add	r3, ip
 8004876:	3201      	adds	r2, #1
 8004878:	801a      	strh	r2, [r3, #0]
 800487a:	231e      	movs	r3, #30
 800487c:	33ff      	adds	r3, #255	; 0xff
 800487e:	2208      	movs	r2, #8
 8004880:	189b      	adds	r3, r3, r2
 8004882:	19db      	adds	r3, r3, r7
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	b29b      	uxth	r3, r3
 8004888:	2162      	movs	r1, #98	; 0x62
 800488a:	208c      	movs	r0, #140	; 0x8c
 800488c:	0040      	lsls	r0, r0, #1
 800488e:	180a      	adds	r2, r1, r0
 8004890:	2408      	movs	r4, #8
 8004892:	46a4      	mov	ip, r4
 8004894:	44bc      	add	ip, r7
 8004896:	4462      	add	r2, ip
 8004898:	8812      	ldrh	r2, [r2, #0]
 800489a:	429a      	cmp	r2, r3
 800489c:	d200      	bcs.n	80048a0 <printASCIIarray+0x1c08>
 800489e:	e6d8      	b.n	8004652 <printASCIIarray+0x19ba>
				}
				for(i=0;i<symLen;i++){
 80048a0:	180b      	adds	r3, r1, r0
 80048a2:	2208      	movs	r2, #8
 80048a4:	4694      	mov	ip, r2
 80048a6:	44bc      	add	ip, r7
 80048a8:	4463      	add	r3, ip
 80048aa:	2200      	movs	r2, #0
 80048ac:	801a      	strh	r2, [r3, #0]
 80048ae:	e01e      	b.n	80048ee <printASCIIarray+0x1c56>
									weoBuffer[j]=0x00;
 80048b0:	2364      	movs	r3, #100	; 0x64
 80048b2:	208c      	movs	r0, #140	; 0x8c
 80048b4:	0040      	lsls	r0, r0, #1
 80048b6:	181b      	adds	r3, r3, r0
 80048b8:	2208      	movs	r2, #8
 80048ba:	4694      	mov	ip, r2
 80048bc:	44bc      	add	ip, r7
 80048be:	4463      	add	r3, ip
 80048c0:	881b      	ldrh	r3, [r3, #0]
 80048c2:	229a      	movs	r2, #154	; 0x9a
 80048c4:	0052      	lsls	r2, r2, #1
 80048c6:	2108      	movs	r1, #8
 80048c8:	1852      	adds	r2, r2, r1
 80048ca:	19d2      	adds	r2, r2, r7
 80048cc:	6812      	ldr	r2, [r2, #0]
 80048ce:	2100      	movs	r1, #0
 80048d0:	54d1      	strb	r1, [r2, r3]
				for(i=0;i<symLen;i++){
 80048d2:	2162      	movs	r1, #98	; 0x62
 80048d4:	180b      	adds	r3, r1, r0
 80048d6:	2208      	movs	r2, #8
 80048d8:	4694      	mov	ip, r2
 80048da:	44bc      	add	ip, r7
 80048dc:	4463      	add	r3, ip
 80048de:	881a      	ldrh	r2, [r3, #0]
 80048e0:	180b      	adds	r3, r1, r0
 80048e2:	2108      	movs	r1, #8
 80048e4:	468c      	mov	ip, r1
 80048e6:	44bc      	add	ip, r7
 80048e8:	4463      	add	r3, ip
 80048ea:	3201      	adds	r2, #1
 80048ec:	801a      	strh	r2, [r3, #0]
 80048ee:	2362      	movs	r3, #98	; 0x62
 80048f0:	218c      	movs	r1, #140	; 0x8c
 80048f2:	0049      	lsls	r1, r1, #1
 80048f4:	185b      	adds	r3, r3, r1
 80048f6:	2208      	movs	r2, #8
 80048f8:	18ba      	adds	r2, r7, r2
 80048fa:	189a      	adds	r2, r3, r2
 80048fc:	235a      	movs	r3, #90	; 0x5a
 80048fe:	185b      	adds	r3, r3, r1
 8004900:	2108      	movs	r1, #8
 8004902:	468c      	mov	ip, r1
 8004904:	44bc      	add	ip, r7
 8004906:	4463      	add	r3, ip
 8004908:	8812      	ldrh	r2, [r2, #0]
 800490a:	881b      	ldrh	r3, [r3, #0]
 800490c:	429a      	cmp	r2, r3
 800490e:	d3cf      	bcc.n	80048b0 <printASCIIarray+0x1c18>
 8004910:	46ad      	mov	sp, r5
							}
			}
			cmd2Execute=0;
 8004912:	4b09      	ldr	r3, [pc, #36]	; (8004938 <printASCIIarray+0x1ca0>)
 8004914:	2200      	movs	r2, #0
 8004916:	701a      	strb	r2, [r3, #0]
//			while(BFEN==0){};
			GPIOC->ODR |= 1 << 6;	//set BF
 8004918:	4b08      	ldr	r3, [pc, #32]	; (800493c <printASCIIarray+0x1ca4>)
 800491a:	695a      	ldr	r2, [r3, #20]
 800491c:	4b07      	ldr	r3, [pc, #28]	; (800493c <printASCIIarray+0x1ca4>)
 800491e:	2140      	movs	r1, #64	; 0x40
 8004920:	430a      	orrs	r2, r1
 8004922:	615a      	str	r2, [r3, #20]

	}
 8004924:	46c0      	nop			; (mov r8, r8)
 8004926:	0018      	movs	r0, r3
 8004928:	46bd      	mov	sp, r7
 800492a:	b063      	add	sp, #396	; 0x18c
 800492c:	bcc0      	pop	{r6, r7}
 800492e:	46b9      	mov	r9, r7
 8004930:	46b0      	mov	r8, r6
 8004932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004934:	080139cc 	.word	0x080139cc
 8004938:	20000426 	.word	0x20000426
 800493c:	50000800 	.word	0x50000800

08004940 <LIS3DHsendCMD>:
//		HAL_Delay(500);
//		GPIOC->ODR |= 1 << 6;	//set BF
//		cmd2Execute=0;
	}
//=============================================================================================================
	void LIS3DHsendCMD(uint8_t reg, uint8_t data) {
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af02      	add	r7, sp, #8
 8004946:	0002      	movs	r2, r0
 8004948:	1dfb      	adds	r3, r7, #7
 800494a:	701a      	strb	r2, [r3, #0]
 800494c:	1dbb      	adds	r3, r7, #6
 800494e:	1c0a      	adds	r2, r1, #0
 8004950:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { reg, data };
 8004952:	210c      	movs	r1, #12
 8004954:	187b      	adds	r3, r7, r1
 8004956:	1dfa      	adds	r2, r7, #7
 8004958:	7812      	ldrb	r2, [r2, #0]
 800495a:	701a      	strb	r2, [r3, #0]
 800495c:	187b      	adds	r3, r7, r1
 800495e:	1dba      	adds	r2, r7, #6
 8004960:	7812      	ldrb	r2, [r2, #0]
 8004962:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x32, buf, 2, 1000);	//32h - address for writing
 8004964:	187a      	adds	r2, r7, r1
 8004966:	4806      	ldr	r0, [pc, #24]	; (8004980 <LIS3DHsendCMD+0x40>)
 8004968:	23fa      	movs	r3, #250	; 0xfa
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	9300      	str	r3, [sp, #0]
 800496e:	2302      	movs	r3, #2
 8004970:	2132      	movs	r1, #50	; 0x32
 8004972:	f001 fdbf 	bl	80064f4 <HAL_I2C_Master_Transmit>
	}
 8004976:	46c0      	nop			; (mov r8, r8)
 8004978:	46bd      	mov	sp, r7
 800497a:	b004      	add	sp, #16
 800497c:	bd80      	pop	{r7, pc}
 800497e:	46c0      	nop			; (mov r8, r8)
 8004980:	200000bc 	.word	0x200000bc

08004984 <LIS3DHsetup>:
//	  xVal = buffer[0];
//	  yVal = buffer[1];
//	  zVal = buffer[2];
//	}
//=============================================================================================================
	void LIS3DHsetup(void){
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
		uint8_t CTRL_REG1_val=0x00;
 800498a:	1dfb      	adds	r3, r7, #7
 800498c:	2200      	movs	r2, #0
 800498e:	701a      	strb	r2, [r3, #0]
		uint8_t CTRL_REG4_val=0x00;
 8004990:	1dbb      	adds	r3, r7, #6
 8004992:	2200      	movs	r2, #0
 8004994:	701a      	strb	r2, [r3, #0]
		uint8_t CTRL_REG5_val=0x00;
 8004996:	1d7b      	adds	r3, r7, #5
 8004998:	2200      	movs	r2, #0
 800499a:	701a      	strb	r2, [r3, #0]
		uint8_t CTRL_REG6_val=0x00;
 800499c:	1d3b      	adds	r3, r7, #4
 800499e:	2200      	movs	r2, #0
 80049a0:	701a      	strb	r2, [r3, #0]
		uint8_t FIFO_CTRL_REG_val=0x00;
 80049a2:	1cfb      	adds	r3, r7, #3
 80049a4:	2200      	movs	r2, #0
 80049a6:	701a      	strb	r2, [r3, #0]
		uint8_t FIFO_SRC_REG_val=0x00;
 80049a8:	1cbb      	adds	r3, r7, #2
 80049aa:	2200      	movs	r2, #0
 80049ac:	701a      	strb	r2, [r3, #0]
		uint8_t INT_1_CFG_val=0x00;
 80049ae:	1c7b      	adds	r3, r7, #1
 80049b0:	2200      	movs	r2, #0
 80049b2:	701a      	strb	r2, [r3, #0]
		uint8_t INT_1_SRC_val=0x00;
 80049b4:	003b      	movs	r3, r7
 80049b6:	2200      	movs	r2, #0
 80049b8:	701a      	strb	r2, [r3, #0]

		LIS3DHsendCMD(CTRL_REG1,(CTRL_REG1_val|accelDataRate_25_Hz|Xen|Yen|Zen));//data rate selection
 80049ba:	1dfb      	adds	r3, r7, #7
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	2237      	movs	r2, #55	; 0x37
 80049c0:	4313      	orrs	r3, r2
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	0019      	movs	r1, r3
 80049c6:	2020      	movs	r0, #32
 80049c8:	f7ff ffba 	bl	8004940 <LIS3DHsendCMD>
//		LIS3DHsendCMD(CTRL_REG2,);//HPFilter
//		LIS3DHsendCMD(CTRL_REG3,);
		LIS3DHsendCMD(CTRL_REG4,(CTRL_REG4_val|BDU|FULL_SCALE_2G|HR));
 80049cc:	1dbb      	adds	r3, r7, #6
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	227c      	movs	r2, #124	; 0x7c
 80049d2:	4252      	negs	r2, r2
 80049d4:	4313      	orrs	r3, r2
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	0019      	movs	r1, r3
 80049da:	2023      	movs	r0, #35	; 0x23
 80049dc:	f7ff ffb0 	bl	8004940 <LIS3DHsendCMD>
//		LIS3DHsendCMD(CTRL_REG6,);
//		LIS3DHsendCMD(FIFO_CTRL_REG,FIFO_CTRL_REG_val);	//	2B configured
//		LIS3DHsendCMD(FIFO_SRC_REG,FIFO_SRC_REG_val);	//	2B configured
//		LIS3DHsendCMD(INT_1_CFG,INT_1_CFG_val);	//	2B configured
//		LIS3DHsendCMD(INT_1_SRC_val,INT_1_SRC_val);	//	2B configured
	}
 80049e0:	46c0      	nop			; (mov r8, r8)
 80049e2:	46bd      	mov	sp, r7
 80049e4:	b002      	add	sp, #8
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80049ec:	46c0      	nop			; (mov r8, r8)
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
	...

080049f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049fa:	4b11      	ldr	r3, [pc, #68]	; (8004a40 <HAL_MspInit+0x4c>)
 80049fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049fe:	4b10      	ldr	r3, [pc, #64]	; (8004a40 <HAL_MspInit+0x4c>)
 8004a00:	2101      	movs	r1, #1
 8004a02:	430a      	orrs	r2, r1
 8004a04:	641a      	str	r2, [r3, #64]	; 0x40
 8004a06:	4b0e      	ldr	r3, [pc, #56]	; (8004a40 <HAL_MspInit+0x4c>)
 8004a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	607b      	str	r3, [r7, #4]
 8004a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a12:	4b0b      	ldr	r3, [pc, #44]	; (8004a40 <HAL_MspInit+0x4c>)
 8004a14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a16:	4b0a      	ldr	r3, [pc, #40]	; (8004a40 <HAL_MspInit+0x4c>)
 8004a18:	2180      	movs	r1, #128	; 0x80
 8004a1a:	0549      	lsls	r1, r1, #21
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004a20:	4b07      	ldr	r3, [pc, #28]	; (8004a40 <HAL_MspInit+0x4c>)
 8004a22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a24:	2380      	movs	r3, #128	; 0x80
 8004a26:	055b      	lsls	r3, r3, #21
 8004a28:	4013      	ands	r3, r2
 8004a2a:	603b      	str	r3, [r7, #0]
 8004a2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 8004a2e:	2380      	movs	r3, #128	; 0x80
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	0018      	movs	r0, r3
 8004a34:	f000 fd48 	bl	80054c8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a38:	46c0      	nop			; (mov r8, r8)
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	b002      	add	sp, #8
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	40021000 	.word	0x40021000

08004a44 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8004a44:	b590      	push	{r4, r7, lr}
 8004a46:	b089      	sub	sp, #36	; 0x24
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a4c:	240c      	movs	r4, #12
 8004a4e:	193b      	adds	r3, r7, r4
 8004a50:	0018      	movs	r0, r3
 8004a52:	2314      	movs	r3, #20
 8004a54:	001a      	movs	r2, r3
 8004a56:	2100      	movs	r1, #0
 8004a58:	f007 ffa2 	bl	800c9a0 <memset>
  if(hcomp->Instance==COMP1)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a10      	ldr	r2, [pc, #64]	; (8004aa4 <HAL_COMP_MspInit+0x60>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d11a      	bne.n	8004a9c <HAL_COMP_MspInit+0x58>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a66:	4b10      	ldr	r3, [pc, #64]	; (8004aa8 <HAL_COMP_MspInit+0x64>)
 8004a68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a6a:	4b0f      	ldr	r3, [pc, #60]	; (8004aa8 <HAL_COMP_MspInit+0x64>)
 8004a6c:	2102      	movs	r1, #2
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	635a      	str	r2, [r3, #52]	; 0x34
 8004a72:	4b0d      	ldr	r3, [pc, #52]	; (8004aa8 <HAL_COMP_MspInit+0x64>)
 8004a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a76:	2202      	movs	r2, #2
 8004a78:	4013      	ands	r3, r2
 8004a7a:	60bb      	str	r3, [r7, #8]
 8004a7c:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004a7e:	193b      	adds	r3, r7, r4
 8004a80:	2204      	movs	r2, #4
 8004a82:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a84:	193b      	adds	r3, r7, r4
 8004a86:	2203      	movs	r2, #3
 8004a88:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a8a:	193b      	adds	r3, r7, r4
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a90:	193b      	adds	r3, r7, r4
 8004a92:	4a06      	ldr	r2, [pc, #24]	; (8004aac <HAL_COMP_MspInit+0x68>)
 8004a94:	0019      	movs	r1, r3
 8004a96:	0010      	movs	r0, r2
 8004a98:	f001 fb32 	bl	8006100 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 8004a9c:	46c0      	nop			; (mov r8, r8)
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	b009      	add	sp, #36	; 0x24
 8004aa2:	bd90      	pop	{r4, r7, pc}
 8004aa4:	40010200 	.word	0x40010200
 8004aa8:	40021000 	.word	0x40021000
 8004aac:	50000400 	.word	0x50000400

08004ab0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004ab0:	b590      	push	{r4, r7, lr}
 8004ab2:	b097      	sub	sp, #92	; 0x5c
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ab8:	2344      	movs	r3, #68	; 0x44
 8004aba:	18fb      	adds	r3, r7, r3
 8004abc:	0018      	movs	r0, r3
 8004abe:	2314      	movs	r3, #20
 8004ac0:	001a      	movs	r2, r3
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	f007 ff6c 	bl	800c9a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004ac8:	2410      	movs	r4, #16
 8004aca:	193b      	adds	r3, r7, r4
 8004acc:	0018      	movs	r0, r3
 8004ace:	2334      	movs	r3, #52	; 0x34
 8004ad0:	001a      	movs	r2, r3
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	f007 ff64 	bl	800c9a0 <memset>
  if(hi2c->Instance==I2C1)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a27      	ldr	r2, [pc, #156]	; (8004b7c <HAL_I2C_MspInit+0xcc>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d147      	bne.n	8004b72 <HAL_I2C_MspInit+0xc2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004ae2:	193b      	adds	r3, r7, r4
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004ae8:	193b      	adds	r3, r7, r4
 8004aea:	2200      	movs	r2, #0
 8004aec:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004aee:	193b      	adds	r3, r7, r4
 8004af0:	0018      	movs	r0, r3
 8004af2:	f003 fe83 	bl	80087fc <HAL_RCCEx_PeriphCLKConfig>
 8004af6:	1e03      	subs	r3, r0, #0
 8004af8:	d001      	beq.n	8004afe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004afa:	f7ff ff75 	bl	80049e8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004afe:	4b20      	ldr	r3, [pc, #128]	; (8004b80 <HAL_I2C_MspInit+0xd0>)
 8004b00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b02:	4b1f      	ldr	r3, [pc, #124]	; (8004b80 <HAL_I2C_MspInit+0xd0>)
 8004b04:	2101      	movs	r1, #1
 8004b06:	430a      	orrs	r2, r1
 8004b08:	635a      	str	r2, [r3, #52]	; 0x34
 8004b0a:	4b1d      	ldr	r3, [pc, #116]	; (8004b80 <HAL_I2C_MspInit+0xd0>)
 8004b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b0e:	2201      	movs	r2, #1
 8004b10:	4013      	ands	r3, r2
 8004b12:	60fb      	str	r3, [r7, #12]
 8004b14:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004b16:	2144      	movs	r1, #68	; 0x44
 8004b18:	187b      	adds	r3, r7, r1
 8004b1a:	22c0      	movs	r2, #192	; 0xc0
 8004b1c:	00d2      	lsls	r2, r2, #3
 8004b1e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b20:	187b      	adds	r3, r7, r1
 8004b22:	2212      	movs	r2, #18
 8004b24:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b26:	187b      	adds	r3, r7, r1
 8004b28:	2201      	movs	r2, #1
 8004b2a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b2c:	187b      	adds	r3, r7, r1
 8004b2e:	2200      	movs	r2, #0
 8004b30:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8004b32:	187b      	adds	r3, r7, r1
 8004b34:	2206      	movs	r2, #6
 8004b36:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b38:	187a      	adds	r2, r7, r1
 8004b3a:	23a0      	movs	r3, #160	; 0xa0
 8004b3c:	05db      	lsls	r3, r3, #23
 8004b3e:	0011      	movs	r1, r2
 8004b40:	0018      	movs	r0, r3
 8004b42:	f001 fadd 	bl	8006100 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004b46:	4b0e      	ldr	r3, [pc, #56]	; (8004b80 <HAL_I2C_MspInit+0xd0>)
 8004b48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b4a:	4b0d      	ldr	r3, [pc, #52]	; (8004b80 <HAL_I2C_MspInit+0xd0>)
 8004b4c:	2180      	movs	r1, #128	; 0x80
 8004b4e:	0389      	lsls	r1, r1, #14
 8004b50:	430a      	orrs	r2, r1
 8004b52:	63da      	str	r2, [r3, #60]	; 0x3c
 8004b54:	4b0a      	ldr	r3, [pc, #40]	; (8004b80 <HAL_I2C_MspInit+0xd0>)
 8004b56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b58:	2380      	movs	r3, #128	; 0x80
 8004b5a:	039b      	lsls	r3, r3, #14
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	60bb      	str	r3, [r7, #8]
 8004b60:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8004b62:	2200      	movs	r2, #0
 8004b64:	2100      	movs	r1, #0
 8004b66:	2017      	movs	r0, #23
 8004b68:	f000 ffd0 	bl	8005b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8004b6c:	2017      	movs	r0, #23
 8004b6e:	f000 ffe2 	bl	8005b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004b72:	46c0      	nop			; (mov r8, r8)
 8004b74:	46bd      	mov	sp, r7
 8004b76:	b017      	add	sp, #92	; 0x5c
 8004b78:	bd90      	pop	{r4, r7, pc}
 8004b7a:	46c0      	nop			; (mov r8, r8)
 8004b7c:	40005400 	.word	0x40005400
 8004b80:	40021000 	.word	0x40021000

08004b84 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8004b84:	b590      	push	{r4, r7, lr}
 8004b86:	b099      	sub	sp, #100	; 0x64
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b8c:	234c      	movs	r3, #76	; 0x4c
 8004b8e:	18fb      	adds	r3, r7, r3
 8004b90:	0018      	movs	r0, r3
 8004b92:	2314      	movs	r3, #20
 8004b94:	001a      	movs	r2, r3
 8004b96:	2100      	movs	r1, #0
 8004b98:	f007 ff02 	bl	800c9a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004b9c:	2418      	movs	r4, #24
 8004b9e:	193b      	adds	r3, r7, r4
 8004ba0:	0018      	movs	r0, r3
 8004ba2:	2334      	movs	r3, #52	; 0x34
 8004ba4:	001a      	movs	r2, r3
 8004ba6:	2100      	movs	r1, #0
 8004ba8:	f007 fefa 	bl	800c9a0 <memset>
  if(hi2s->Instance==SPI1)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a4f      	ldr	r2, [pc, #316]	; (8004cf0 <HAL_I2S_MspInit+0x16c>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d000      	beq.n	8004bb8 <HAL_I2S_MspInit+0x34>
 8004bb6:	e097      	b.n	8004ce8 <HAL_I2S_MspInit+0x164>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 8004bb8:	193b      	adds	r3, r7, r4
 8004bba:	2280      	movs	r2, #128	; 0x80
 8004bbc:	0112      	lsls	r2, r2, #4
 8004bbe:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8004bc0:	193b      	adds	r3, r7, r4
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004bc6:	193b      	adds	r3, r7, r4
 8004bc8:	0018      	movs	r0, r3
 8004bca:	f003 fe17 	bl	80087fc <HAL_RCCEx_PeriphCLKConfig>
 8004bce:	1e03      	subs	r3, r0, #0
 8004bd0:	d001      	beq.n	8004bd6 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8004bd2:	f7ff ff09 	bl	80049e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004bd6:	4b47      	ldr	r3, [pc, #284]	; (8004cf4 <HAL_I2S_MspInit+0x170>)
 8004bd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bda:	4b46      	ldr	r3, [pc, #280]	; (8004cf4 <HAL_I2S_MspInit+0x170>)
 8004bdc:	2180      	movs	r1, #128	; 0x80
 8004bde:	0149      	lsls	r1, r1, #5
 8004be0:	430a      	orrs	r2, r1
 8004be2:	641a      	str	r2, [r3, #64]	; 0x40
 8004be4:	4b43      	ldr	r3, [pc, #268]	; (8004cf4 <HAL_I2S_MspInit+0x170>)
 8004be6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004be8:	2380      	movs	r3, #128	; 0x80
 8004bea:	015b      	lsls	r3, r3, #5
 8004bec:	4013      	ands	r3, r2
 8004bee:	617b      	str	r3, [r7, #20]
 8004bf0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bf2:	4b40      	ldr	r3, [pc, #256]	; (8004cf4 <HAL_I2S_MspInit+0x170>)
 8004bf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bf6:	4b3f      	ldr	r3, [pc, #252]	; (8004cf4 <HAL_I2S_MspInit+0x170>)
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	635a      	str	r2, [r3, #52]	; 0x34
 8004bfe:	4b3d      	ldr	r3, [pc, #244]	; (8004cf4 <HAL_I2S_MspInit+0x170>)
 8004c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c02:	2201      	movs	r2, #1
 8004c04:	4013      	ands	r3, r2
 8004c06:	613b      	str	r3, [r7, #16]
 8004c08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c0a:	4b3a      	ldr	r3, [pc, #232]	; (8004cf4 <HAL_I2S_MspInit+0x170>)
 8004c0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c0e:	4b39      	ldr	r3, [pc, #228]	; (8004cf4 <HAL_I2S_MspInit+0x170>)
 8004c10:	2102      	movs	r1, #2
 8004c12:	430a      	orrs	r2, r1
 8004c14:	635a      	str	r2, [r3, #52]	; 0x34
 8004c16:	4b37      	ldr	r3, [pc, #220]	; (8004cf4 <HAL_I2S_MspInit+0x170>)
 8004c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	60fb      	str	r3, [r7, #12]
 8004c20:	68fb      	ldr	r3, [r7, #12]
    PA15     ------> I2S1_WS
    PB3     ------> I2S1_CK
    PB4     ------> I2S1_MCK
    PB5     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004c22:	214c      	movs	r1, #76	; 0x4c
 8004c24:	187b      	adds	r3, r7, r1
 8004c26:	2280      	movs	r2, #128	; 0x80
 8004c28:	0212      	lsls	r2, r2, #8
 8004c2a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c2c:	000c      	movs	r4, r1
 8004c2e:	193b      	adds	r3, r7, r4
 8004c30:	2202      	movs	r2, #2
 8004c32:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c34:	193b      	adds	r3, r7, r4
 8004c36:	2200      	movs	r2, #0
 8004c38:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c3a:	193b      	adds	r3, r7, r4
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004c40:	193b      	adds	r3, r7, r4
 8004c42:	2200      	movs	r2, #0
 8004c44:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c46:	193a      	adds	r2, r7, r4
 8004c48:	23a0      	movs	r3, #160	; 0xa0
 8004c4a:	05db      	lsls	r3, r3, #23
 8004c4c:	0011      	movs	r1, r2
 8004c4e:	0018      	movs	r0, r3
 8004c50:	f001 fa56 	bl	8006100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8004c54:	0021      	movs	r1, r4
 8004c56:	187b      	adds	r3, r7, r1
 8004c58:	2238      	movs	r2, #56	; 0x38
 8004c5a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c5c:	187b      	adds	r3, r7, r1
 8004c5e:	2202      	movs	r2, #2
 8004c60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c62:	187b      	adds	r3, r7, r1
 8004c64:	2200      	movs	r2, #0
 8004c66:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c68:	187b      	adds	r3, r7, r1
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004c6e:	187b      	adds	r3, r7, r1
 8004c70:	2200      	movs	r2, #0
 8004c72:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c74:	187b      	adds	r3, r7, r1
 8004c76:	4a20      	ldr	r2, [pc, #128]	; (8004cf8 <HAL_I2S_MspInit+0x174>)
 8004c78:	0019      	movs	r1, r3
 8004c7a:	0010      	movs	r0, r2
 8004c7c:	f001 fa40 	bl	8006100 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8004c80:	4b1e      	ldr	r3, [pc, #120]	; (8004cfc <HAL_I2S_MspInit+0x178>)
 8004c82:	4a1f      	ldr	r2, [pc, #124]	; (8004d00 <HAL_I2S_MspInit+0x17c>)
 8004c84:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8004c86:	4b1d      	ldr	r3, [pc, #116]	; (8004cfc <HAL_I2S_MspInit+0x178>)
 8004c88:	2211      	movs	r2, #17
 8004c8a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004c8c:	4b1b      	ldr	r3, [pc, #108]	; (8004cfc <HAL_I2S_MspInit+0x178>)
 8004c8e:	2210      	movs	r2, #16
 8004c90:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c92:	4b1a      	ldr	r3, [pc, #104]	; (8004cfc <HAL_I2S_MspInit+0x178>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004c98:	4b18      	ldr	r3, [pc, #96]	; (8004cfc <HAL_I2S_MspInit+0x178>)
 8004c9a:	2280      	movs	r2, #128	; 0x80
 8004c9c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004c9e:	4b17      	ldr	r3, [pc, #92]	; (8004cfc <HAL_I2S_MspInit+0x178>)
 8004ca0:	2280      	movs	r2, #128	; 0x80
 8004ca2:	0052      	lsls	r2, r2, #1
 8004ca4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004ca6:	4b15      	ldr	r3, [pc, #84]	; (8004cfc <HAL_I2S_MspInit+0x178>)
 8004ca8:	2280      	movs	r2, #128	; 0x80
 8004caa:	00d2      	lsls	r2, r2, #3
 8004cac:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8004cae:	4b13      	ldr	r3, [pc, #76]	; (8004cfc <HAL_I2S_MspInit+0x178>)
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004cb4:	4b11      	ldr	r3, [pc, #68]	; (8004cfc <HAL_I2S_MspInit+0x178>)
 8004cb6:	22c0      	movs	r2, #192	; 0xc0
 8004cb8:	0192      	lsls	r2, r2, #6
 8004cba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8004cbc:	4b0f      	ldr	r3, [pc, #60]	; (8004cfc <HAL_I2S_MspInit+0x178>)
 8004cbe:	0018      	movs	r0, r3
 8004cc0:	f000 ff56 	bl	8005b70 <HAL_DMA_Init>
 8004cc4:	1e03      	subs	r3, r0, #0
 8004cc6:	d001      	beq.n	8004ccc <HAL_I2S_MspInit+0x148>
    {
      Error_Handler();
 8004cc8:	f7ff fe8e 	bl	80049e8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a0b      	ldr	r2, [pc, #44]	; (8004cfc <HAL_I2S_MspInit+0x178>)
 8004cd0:	62da      	str	r2, [r3, #44]	; 0x2c
 8004cd2:	4b0a      	ldr	r3, [pc, #40]	; (8004cfc <HAL_I2S_MspInit+0x178>)
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	629a      	str	r2, [r3, #40]	; 0x28

    /* I2S1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8004cd8:	2200      	movs	r2, #0
 8004cda:	2100      	movs	r1, #0
 8004cdc:	2019      	movs	r0, #25
 8004cde:	f000 ff15 	bl	8005b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004ce2:	2019      	movs	r0, #25
 8004ce4:	f000 ff27 	bl	8005b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004ce8:	46c0      	nop			; (mov r8, r8)
 8004cea:	46bd      	mov	sp, r7
 8004cec:	b019      	add	sp, #100	; 0x64
 8004cee:	bd90      	pop	{r4, r7, pc}
 8004cf0:	40013000 	.word	0x40013000
 8004cf4:	40021000 	.word	0x40021000
 8004cf8:	50000400 	.word	0x50000400
 8004cfc:	20000144 	.word	0x20000144
 8004d00:	40020008 	.word	0x40020008

08004d04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004d04:	b590      	push	{r4, r7, lr}
 8004d06:	b08b      	sub	sp, #44	; 0x2c
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d0c:	2414      	movs	r4, #20
 8004d0e:	193b      	adds	r3, r7, r4
 8004d10:	0018      	movs	r0, r3
 8004d12:	2314      	movs	r3, #20
 8004d14:	001a      	movs	r2, r3
 8004d16:	2100      	movs	r1, #0
 8004d18:	f007 fe42 	bl	800c9a0 <memset>
  if(hspi->Instance==SPI2)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a54      	ldr	r2, [pc, #336]	; (8004e74 <HAL_SPI_MspInit+0x170>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d000      	beq.n	8004d28 <HAL_SPI_MspInit+0x24>
 8004d26:	e0a0      	b.n	8004e6a <HAL_SPI_MspInit+0x166>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004d28:	4b53      	ldr	r3, [pc, #332]	; (8004e78 <HAL_SPI_MspInit+0x174>)
 8004d2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d2c:	4b52      	ldr	r3, [pc, #328]	; (8004e78 <HAL_SPI_MspInit+0x174>)
 8004d2e:	2180      	movs	r1, #128	; 0x80
 8004d30:	01c9      	lsls	r1, r1, #7
 8004d32:	430a      	orrs	r2, r1
 8004d34:	63da      	str	r2, [r3, #60]	; 0x3c
 8004d36:	4b50      	ldr	r3, [pc, #320]	; (8004e78 <HAL_SPI_MspInit+0x174>)
 8004d38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d3a:	2380      	movs	r3, #128	; 0x80
 8004d3c:	01db      	lsls	r3, r3, #7
 8004d3e:	4013      	ands	r3, r2
 8004d40:	613b      	str	r3, [r7, #16]
 8004d42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d44:	4b4c      	ldr	r3, [pc, #304]	; (8004e78 <HAL_SPI_MspInit+0x174>)
 8004d46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d48:	4b4b      	ldr	r3, [pc, #300]	; (8004e78 <HAL_SPI_MspInit+0x174>)
 8004d4a:	2102      	movs	r1, #2
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	635a      	str	r2, [r3, #52]	; 0x34
 8004d50:	4b49      	ldr	r3, [pc, #292]	; (8004e78 <HAL_SPI_MspInit+0x174>)
 8004d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d54:	2202      	movs	r2, #2
 8004d56:	4013      	ands	r3, r2
 8004d58:	60fb      	str	r3, [r7, #12]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB6     ------> SPI2_MISO
    PB7     ------> SPI2_MOSI
    PB8     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004d5c:	193b      	adds	r3, r7, r4
 8004d5e:	2240      	movs	r2, #64	; 0x40
 8004d60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d62:	193b      	adds	r3, r7, r4
 8004d64:	2202      	movs	r2, #2
 8004d66:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d68:	193b      	adds	r3, r7, r4
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d6e:	193b      	adds	r3, r7, r4
 8004d70:	2200      	movs	r2, #0
 8004d72:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI2;
 8004d74:	193b      	adds	r3, r7, r4
 8004d76:	2204      	movs	r2, #4
 8004d78:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d7a:	193b      	adds	r3, r7, r4
 8004d7c:	4a3f      	ldr	r2, [pc, #252]	; (8004e7c <HAL_SPI_MspInit+0x178>)
 8004d7e:	0019      	movs	r1, r3
 8004d80:	0010      	movs	r0, r2
 8004d82:	f001 f9bd 	bl	8006100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8004d86:	0021      	movs	r1, r4
 8004d88:	187b      	adds	r3, r7, r1
 8004d8a:	22c0      	movs	r2, #192	; 0xc0
 8004d8c:	0052      	lsls	r2, r2, #1
 8004d8e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d90:	187b      	adds	r3, r7, r1
 8004d92:	2202      	movs	r2, #2
 8004d94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d96:	187b      	adds	r3, r7, r1
 8004d98:	2200      	movs	r2, #0
 8004d9a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d9c:	187b      	adds	r3, r7, r1
 8004d9e:	2200      	movs	r2, #0
 8004da0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8004da2:	187b      	adds	r3, r7, r1
 8004da4:	2201      	movs	r2, #1
 8004da6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004da8:	187b      	adds	r3, r7, r1
 8004daa:	4a34      	ldr	r2, [pc, #208]	; (8004e7c <HAL_SPI_MspInit+0x178>)
 8004dac:	0019      	movs	r1, r3
 8004dae:	0010      	movs	r0, r2
 8004db0:	f001 f9a6 	bl	8006100 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel2;
 8004db4:	4b32      	ldr	r3, [pc, #200]	; (8004e80 <HAL_SPI_MspInit+0x17c>)
 8004db6:	4a33      	ldr	r2, [pc, #204]	; (8004e84 <HAL_SPI_MspInit+0x180>)
 8004db8:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8004dba:	4b31      	ldr	r3, [pc, #196]	; (8004e80 <HAL_SPI_MspInit+0x17c>)
 8004dbc:	2212      	movs	r2, #18
 8004dbe:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004dc0:	4b2f      	ldr	r3, [pc, #188]	; (8004e80 <HAL_SPI_MspInit+0x17c>)
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004dc6:	4b2e      	ldr	r3, [pc, #184]	; (8004e80 <HAL_SPI_MspInit+0x17c>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004dcc:	4b2c      	ldr	r3, [pc, #176]	; (8004e80 <HAL_SPI_MspInit+0x17c>)
 8004dce:	2280      	movs	r2, #128	; 0x80
 8004dd0:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004dd2:	4b2b      	ldr	r3, [pc, #172]	; (8004e80 <HAL_SPI_MspInit+0x17c>)
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004dd8:	4b29      	ldr	r3, [pc, #164]	; (8004e80 <HAL_SPI_MspInit+0x17c>)
 8004dda:	2200      	movs	r2, #0
 8004ddc:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8004dde:	4b28      	ldr	r3, [pc, #160]	; (8004e80 <HAL_SPI_MspInit+0x17c>)
 8004de0:	2200      	movs	r2, #0
 8004de2:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004de4:	4b26      	ldr	r3, [pc, #152]	; (8004e80 <HAL_SPI_MspInit+0x17c>)
 8004de6:	2280      	movs	r2, #128	; 0x80
 8004de8:	0192      	lsls	r2, r2, #6
 8004dea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8004dec:	4b24      	ldr	r3, [pc, #144]	; (8004e80 <HAL_SPI_MspInit+0x17c>)
 8004dee:	0018      	movs	r0, r3
 8004df0:	f000 febe 	bl	8005b70 <HAL_DMA_Init>
 8004df4:	1e03      	subs	r3, r0, #0
 8004df6:	d001      	beq.n	8004dfc <HAL_SPI_MspInit+0xf8>
    {
      Error_Handler();
 8004df8:	f7ff fdf6 	bl	80049e8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a20      	ldr	r2, [pc, #128]	; (8004e80 <HAL_SPI_MspInit+0x17c>)
 8004e00:	659a      	str	r2, [r3, #88]	; 0x58
 8004e02:	4b1f      	ldr	r3, [pc, #124]	; (8004e80 <HAL_SPI_MspInit+0x17c>)
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel3;
 8004e08:	4b1f      	ldr	r3, [pc, #124]	; (8004e88 <HAL_SPI_MspInit+0x184>)
 8004e0a:	4a20      	ldr	r2, [pc, #128]	; (8004e8c <HAL_SPI_MspInit+0x188>)
 8004e0c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8004e0e:	4b1e      	ldr	r3, [pc, #120]	; (8004e88 <HAL_SPI_MspInit+0x184>)
 8004e10:	2213      	movs	r2, #19
 8004e12:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004e14:	4b1c      	ldr	r3, [pc, #112]	; (8004e88 <HAL_SPI_MspInit+0x184>)
 8004e16:	2210      	movs	r2, #16
 8004e18:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e1a:	4b1b      	ldr	r3, [pc, #108]	; (8004e88 <HAL_SPI_MspInit+0x184>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004e20:	4b19      	ldr	r3, [pc, #100]	; (8004e88 <HAL_SPI_MspInit+0x184>)
 8004e22:	2280      	movs	r2, #128	; 0x80
 8004e24:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004e26:	4b18      	ldr	r3, [pc, #96]	; (8004e88 <HAL_SPI_MspInit+0x184>)
 8004e28:	2200      	movs	r2, #0
 8004e2a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004e2c:	4b16      	ldr	r3, [pc, #88]	; (8004e88 <HAL_SPI_MspInit+0x184>)
 8004e2e:	2200      	movs	r2, #0
 8004e30:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8004e32:	4b15      	ldr	r3, [pc, #84]	; (8004e88 <HAL_SPI_MspInit+0x184>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004e38:	4b13      	ldr	r3, [pc, #76]	; (8004e88 <HAL_SPI_MspInit+0x184>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004e3e:	4b12      	ldr	r3, [pc, #72]	; (8004e88 <HAL_SPI_MspInit+0x184>)
 8004e40:	0018      	movs	r0, r3
 8004e42:	f000 fe95 	bl	8005b70 <HAL_DMA_Init>
 8004e46:	1e03      	subs	r3, r0, #0
 8004e48:	d001      	beq.n	8004e4e <HAL_SPI_MspInit+0x14a>
    {
      Error_Handler();
 8004e4a:	f7ff fdcd 	bl	80049e8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a0d      	ldr	r2, [pc, #52]	; (8004e88 <HAL_SPI_MspInit+0x184>)
 8004e52:	655a      	str	r2, [r3, #84]	; 0x54
 8004e54:	4b0c      	ldr	r3, [pc, #48]	; (8004e88 <HAL_SPI_MspInit+0x184>)
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	2100      	movs	r1, #0
 8004e5e:	201a      	movs	r0, #26
 8004e60:	f000 fe54 	bl	8005b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004e64:	201a      	movs	r0, #26
 8004e66:	f000 fe66 	bl	8005b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004e6a:	46c0      	nop			; (mov r8, r8)
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	b00b      	add	sp, #44	; 0x2c
 8004e70:	bd90      	pop	{r4, r7, pc}
 8004e72:	46c0      	nop			; (mov r8, r8)
 8004e74:	40003800 	.word	0x40003800
 8004e78:	40021000 	.word	0x40021000
 8004e7c:	50000400 	.word	0x50000400
 8004e80:	20000204 	.word	0x20000204
 8004e84:	4002001c 	.word	0x4002001c
 8004e88:	20000260 	.word	0x20000260
 8004e8c:	40020030 	.word	0x40020030

08004e90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004e90:	b590      	push	{r4, r7, lr}
 8004e92:	b091      	sub	sp, #68	; 0x44
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004e98:	240c      	movs	r4, #12
 8004e9a:	193b      	adds	r3, r7, r4
 8004e9c:	0018      	movs	r0, r3
 8004e9e:	2334      	movs	r3, #52	; 0x34
 8004ea0:	001a      	movs	r2, r3
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	f007 fd7c 	bl	800c9a0 <memset>
  if(htim_base->Instance==TIM1)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a11      	ldr	r2, [pc, #68]	; (8004ef4 <HAL_TIM_Base_MspInit+0x64>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d11c      	bne.n	8004eec <HAL_TIM_Base_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8004eb2:	193b      	adds	r3, r7, r4
 8004eb4:	2280      	movs	r2, #128	; 0x80
 8004eb6:	0392      	lsls	r2, r2, #14
 8004eb8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8004eba:	193b      	adds	r3, r7, r4
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004ec0:	193b      	adds	r3, r7, r4
 8004ec2:	0018      	movs	r0, r3
 8004ec4:	f003 fc9a 	bl	80087fc <HAL_RCCEx_PeriphCLKConfig>
 8004ec8:	1e03      	subs	r3, r0, #0
 8004eca:	d001      	beq.n	8004ed0 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8004ecc:	f7ff fd8c 	bl	80049e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004ed0:	4b09      	ldr	r3, [pc, #36]	; (8004ef8 <HAL_TIM_Base_MspInit+0x68>)
 8004ed2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ed4:	4b08      	ldr	r3, [pc, #32]	; (8004ef8 <HAL_TIM_Base_MspInit+0x68>)
 8004ed6:	2180      	movs	r1, #128	; 0x80
 8004ed8:	0109      	lsls	r1, r1, #4
 8004eda:	430a      	orrs	r2, r1
 8004edc:	641a      	str	r2, [r3, #64]	; 0x40
 8004ede:	4b06      	ldr	r3, [pc, #24]	; (8004ef8 <HAL_TIM_Base_MspInit+0x68>)
 8004ee0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ee2:	2380      	movs	r3, #128	; 0x80
 8004ee4:	011b      	lsls	r3, r3, #4
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	60bb      	str	r3, [r7, #8]
 8004eea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004eec:	46c0      	nop			; (mov r8, r8)
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	b011      	add	sp, #68	; 0x44
 8004ef2:	bd90      	pop	{r4, r7, pc}
 8004ef4:	40012c00 	.word	0x40012c00
 8004ef8:	40021000 	.word	0x40021000

08004efc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004efc:	b590      	push	{r4, r7, lr}
 8004efe:	b089      	sub	sp, #36	; 0x24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f04:	240c      	movs	r4, #12
 8004f06:	193b      	adds	r3, r7, r4
 8004f08:	0018      	movs	r0, r3
 8004f0a:	2314      	movs	r3, #20
 8004f0c:	001a      	movs	r2, r3
 8004f0e:	2100      	movs	r1, #0
 8004f10:	f007 fd46 	bl	800c9a0 <memset>
  if(htim->Instance==TIM1)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a15      	ldr	r2, [pc, #84]	; (8004f70 <HAL_TIM_MspPostInit+0x74>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d123      	bne.n	8004f66 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f1e:	4b15      	ldr	r3, [pc, #84]	; (8004f74 <HAL_TIM_MspPostInit+0x78>)
 8004f20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f22:	4b14      	ldr	r3, [pc, #80]	; (8004f74 <HAL_TIM_MspPostInit+0x78>)
 8004f24:	2101      	movs	r1, #1
 8004f26:	430a      	orrs	r2, r1
 8004f28:	635a      	str	r2, [r3, #52]	; 0x34
 8004f2a:	4b12      	ldr	r3, [pc, #72]	; (8004f74 <HAL_TIM_MspPostInit+0x78>)
 8004f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f2e:	2201      	movs	r2, #1
 8004f30:	4013      	ands	r3, r2
 8004f32:	60bb      	str	r3, [r7, #8]
 8004f34:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004f36:	193b      	adds	r3, r7, r4
 8004f38:	2280      	movs	r2, #128	; 0x80
 8004f3a:	0052      	lsls	r2, r2, #1
 8004f3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f3e:	0021      	movs	r1, r4
 8004f40:	187b      	adds	r3, r7, r1
 8004f42:	2202      	movs	r2, #2
 8004f44:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004f46:	187b      	adds	r3, r7, r1
 8004f48:	2202      	movs	r2, #2
 8004f4a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f4c:	187b      	adds	r3, r7, r1
 8004f4e:	2203      	movs	r2, #3
 8004f50:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004f52:	187b      	adds	r3, r7, r1
 8004f54:	2202      	movs	r2, #2
 8004f56:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f58:	187a      	adds	r2, r7, r1
 8004f5a:	23a0      	movs	r3, #160	; 0xa0
 8004f5c:	05db      	lsls	r3, r3, #23
 8004f5e:	0011      	movs	r1, r2
 8004f60:	0018      	movs	r0, r3
 8004f62:	f001 f8cd 	bl	8006100 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004f66:	46c0      	nop			; (mov r8, r8)
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	b009      	add	sp, #36	; 0x24
 8004f6c:	bd90      	pop	{r4, r7, pc}
 8004f6e:	46c0      	nop			; (mov r8, r8)
 8004f70:	40012c00 	.word	0x40012c00
 8004f74:	40021000 	.word	0x40021000

08004f78 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8004f78:	b590      	push	{r4, r7, lr}
 8004f7a:	b08b      	sub	sp, #44	; 0x2c
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f80:	2414      	movs	r4, #20
 8004f82:	193b      	adds	r3, r7, r4
 8004f84:	0018      	movs	r0, r3
 8004f86:	2314      	movs	r3, #20
 8004f88:	001a      	movs	r2, r3
 8004f8a:	2100      	movs	r1, #0
 8004f8c:	f007 fd08 	bl	800c9a0 <memset>
  if(husart->Instance==USART3)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a45      	ldr	r2, [pc, #276]	; (80050ac <HAL_USART_MspInit+0x134>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d000      	beq.n	8004f9c <HAL_USART_MspInit+0x24>
 8004f9a:	e083      	b.n	80050a4 <HAL_USART_MspInit+0x12c>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004f9c:	4b44      	ldr	r3, [pc, #272]	; (80050b0 <HAL_USART_MspInit+0x138>)
 8004f9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fa0:	4b43      	ldr	r3, [pc, #268]	; (80050b0 <HAL_USART_MspInit+0x138>)
 8004fa2:	2180      	movs	r1, #128	; 0x80
 8004fa4:	02c9      	lsls	r1, r1, #11
 8004fa6:	430a      	orrs	r2, r1
 8004fa8:	63da      	str	r2, [r3, #60]	; 0x3c
 8004faa:	4b41      	ldr	r3, [pc, #260]	; (80050b0 <HAL_USART_MspInit+0x138>)
 8004fac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fae:	2380      	movs	r3, #128	; 0x80
 8004fb0:	02db      	lsls	r3, r3, #11
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	613b      	str	r3, [r7, #16]
 8004fb6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fb8:	4b3d      	ldr	r3, [pc, #244]	; (80050b0 <HAL_USART_MspInit+0x138>)
 8004fba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fbc:	4b3c      	ldr	r3, [pc, #240]	; (80050b0 <HAL_USART_MspInit+0x138>)
 8004fbe:	2101      	movs	r1, #1
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	635a      	str	r2, [r3, #52]	; 0x34
 8004fc4:	4b3a      	ldr	r3, [pc, #232]	; (80050b0 <HAL_USART_MspInit+0x138>)
 8004fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc8:	2201      	movs	r2, #1
 8004fca:	4013      	ands	r3, r2
 8004fcc:	60fb      	str	r3, [r7, #12]
 8004fce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fd0:	4b37      	ldr	r3, [pc, #220]	; (80050b0 <HAL_USART_MspInit+0x138>)
 8004fd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fd4:	4b36      	ldr	r3, [pc, #216]	; (80050b0 <HAL_USART_MspInit+0x138>)
 8004fd6:	2102      	movs	r1, #2
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	635a      	str	r2, [r3, #52]	; 0x34
 8004fdc:	4b34      	ldr	r3, [pc, #208]	; (80050b0 <HAL_USART_MspInit+0x138>)
 8004fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe0:	2202      	movs	r2, #2
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	60bb      	str	r3, [r7, #8]
 8004fe6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA5     ------> USART3_TX
    PB0     ------> USART3_RX
    PB1     ------> USART3_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004fe8:	193b      	adds	r3, r7, r4
 8004fea:	2220      	movs	r2, #32
 8004fec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fee:	193b      	adds	r3, r7, r4
 8004ff0:	2202      	movs	r2, #2
 8004ff2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ff4:	193b      	adds	r3, r7, r4
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ffa:	193b      	adds	r3, r7, r4
 8004ffc:	2203      	movs	r2, #3
 8004ffe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8005000:	193b      	adds	r3, r7, r4
 8005002:	2204      	movs	r2, #4
 8005004:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005006:	193a      	adds	r2, r7, r4
 8005008:	23a0      	movs	r3, #160	; 0xa0
 800500a:	05db      	lsls	r3, r3, #23
 800500c:	0011      	movs	r1, r2
 800500e:	0018      	movs	r0, r3
 8005010:	f001 f876 	bl	8006100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005014:	0021      	movs	r1, r4
 8005016:	187b      	adds	r3, r7, r1
 8005018:	2203      	movs	r2, #3
 800501a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800501c:	187b      	adds	r3, r7, r1
 800501e:	2202      	movs	r2, #2
 8005020:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005022:	187b      	adds	r3, r7, r1
 8005024:	2200      	movs	r2, #0
 8005026:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005028:	187b      	adds	r3, r7, r1
 800502a:	2203      	movs	r2, #3
 800502c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 800502e:	187b      	adds	r3, r7, r1
 8005030:	2204      	movs	r2, #4
 8005032:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005034:	187b      	adds	r3, r7, r1
 8005036:	4a1f      	ldr	r2, [pc, #124]	; (80050b4 <HAL_USART_MspInit+0x13c>)
 8005038:	0019      	movs	r1, r3
 800503a:	0010      	movs	r0, r2
 800503c:	f001 f860 	bl	8006100 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel4;
 8005040:	4b1d      	ldr	r3, [pc, #116]	; (80050b8 <HAL_USART_MspInit+0x140>)
 8005042:	4a1e      	ldr	r2, [pc, #120]	; (80050bc <HAL_USART_MspInit+0x144>)
 8005044:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8005046:	4b1c      	ldr	r3, [pc, #112]	; (80050b8 <HAL_USART_MspInit+0x140>)
 8005048:	2237      	movs	r2, #55	; 0x37
 800504a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800504c:	4b1a      	ldr	r3, [pc, #104]	; (80050b8 <HAL_USART_MspInit+0x140>)
 800504e:	2210      	movs	r2, #16
 8005050:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005052:	4b19      	ldr	r3, [pc, #100]	; (80050b8 <HAL_USART_MspInit+0x140>)
 8005054:	2200      	movs	r2, #0
 8005056:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005058:	4b17      	ldr	r3, [pc, #92]	; (80050b8 <HAL_USART_MspInit+0x140>)
 800505a:	2280      	movs	r2, #128	; 0x80
 800505c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800505e:	4b16      	ldr	r3, [pc, #88]	; (80050b8 <HAL_USART_MspInit+0x140>)
 8005060:	2200      	movs	r2, #0
 8005062:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005064:	4b14      	ldr	r3, [pc, #80]	; (80050b8 <HAL_USART_MspInit+0x140>)
 8005066:	2200      	movs	r2, #0
 8005068:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800506a:	4b13      	ldr	r3, [pc, #76]	; (80050b8 <HAL_USART_MspInit+0x140>)
 800506c:	2200      	movs	r2, #0
 800506e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005070:	4b11      	ldr	r3, [pc, #68]	; (80050b8 <HAL_USART_MspInit+0x140>)
 8005072:	2280      	movs	r2, #128	; 0x80
 8005074:	0192      	lsls	r2, r2, #6
 8005076:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8005078:	4b0f      	ldr	r3, [pc, #60]	; (80050b8 <HAL_USART_MspInit+0x140>)
 800507a:	0018      	movs	r0, r3
 800507c:	f000 fd78 	bl	8005b70 <HAL_DMA_Init>
 8005080:	1e03      	subs	r3, r0, #0
 8005082:	d001      	beq.n	8005088 <HAL_USART_MspInit+0x110>
    {
      Error_Handler();
 8005084:	f7ff fcb0 	bl	80049e8 <Error_Handler>
    }

    __HAL_LINKDMA(husart,hdmatx,hdma_usart3_tx);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a0b      	ldr	r2, [pc, #44]	; (80050b8 <HAL_USART_MspInit+0x140>)
 800508c:	651a      	str	r2, [r3, #80]	; 0x50
 800508e:	4b0a      	ldr	r3, [pc, #40]	; (80050b8 <HAL_USART_MspInit+0x140>)
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 8005094:	2200      	movs	r2, #0
 8005096:	2100      	movs	r1, #0
 8005098:	201d      	movs	r0, #29
 800509a:	f000 fd37 	bl	8005b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 800509e:	201d      	movs	r0, #29
 80050a0:	f000 fd49 	bl	8005b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80050a4:	46c0      	nop			; (mov r8, r8)
 80050a6:	46bd      	mov	sp, r7
 80050a8:	b00b      	add	sp, #44	; 0x2c
 80050aa:	bd90      	pop	{r4, r7, pc}
 80050ac:	40004800 	.word	0x40004800
 80050b0:	40021000 	.word	0x40021000
 80050b4:	50000400 	.word	0x50000400
 80050b8:	20000368 	.word	0x20000368
 80050bc:	40020044 	.word	0x40020044

080050c0 <LL_USART_IsActiveFlag_FE>:
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	69db      	ldr	r3, [r3, #28]
 80050cc:	2202      	movs	r2, #2
 80050ce:	4013      	ands	r3, r2
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d101      	bne.n	80050d8 <LL_USART_IsActiveFlag_FE+0x18>
 80050d4:	2301      	movs	r3, #1
 80050d6:	e000      	b.n	80050da <LL_USART_IsActiveFlag_FE+0x1a>
 80050d8:	2300      	movs	r3, #0
}
 80050da:	0018      	movs	r0, r3
 80050dc:	46bd      	mov	sp, r7
 80050de:	b002      	add	sp, #8
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <LL_USART_IsActiveFlag_NE>:
{
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b082      	sub	sp, #8
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	2204      	movs	r2, #4
 80050f0:	4013      	ands	r3, r2
 80050f2:	2b04      	cmp	r3, #4
 80050f4:	d101      	bne.n	80050fa <LL_USART_IsActiveFlag_NE+0x18>
 80050f6:	2301      	movs	r3, #1
 80050f8:	e000      	b.n	80050fc <LL_USART_IsActiveFlag_NE+0x1a>
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	0018      	movs	r0, r3
 80050fe:	46bd      	mov	sp, r7
 8005100:	b002      	add	sp, #8
 8005102:	bd80      	pop	{r7, pc}

08005104 <LL_USART_IsActiveFlag_ORE>:
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	69db      	ldr	r3, [r3, #28]
 8005110:	2208      	movs	r2, #8
 8005112:	4013      	ands	r3, r2
 8005114:	2b08      	cmp	r3, #8
 8005116:	d101      	bne.n	800511c <LL_USART_IsActiveFlag_ORE+0x18>
 8005118:	2301      	movs	r3, #1
 800511a:	e000      	b.n	800511e <LL_USART_IsActiveFlag_ORE+0x1a>
 800511c:	2300      	movs	r3, #0
}
 800511e:	0018      	movs	r0, r3
 8005120:	46bd      	mov	sp, r7
 8005122:	b002      	add	sp, #8
 8005124:	bd80      	pop	{r7, pc}

08005126 <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 8005126:	b580      	push	{r7, lr}
 8005128:	b082      	sub	sp, #8
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	2220      	movs	r2, #32
 8005134:	4013      	ands	r3, r2
 8005136:	2b20      	cmp	r3, #32
 8005138:	d101      	bne.n	800513e <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 800513a:	2301      	movs	r3, #1
 800513c:	e000      	b.n	8005140 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 800513e:	2300      	movs	r3, #0
}
 8005140:	0018      	movs	r0, r3
 8005142:	46bd      	mov	sp, r7
 8005144:	b002      	add	sp, #8
 8005146:	bd80      	pop	{r7, pc}

08005148 <LL_USART_IsEnabledIT_RXNE_RXFNE>:
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2220      	movs	r2, #32
 8005156:	4013      	ands	r3, r2
 8005158:	2b20      	cmp	r3, #32
 800515a:	d101      	bne.n	8005160 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 800515c:	2301      	movs	r3, #1
 800515e:	e000      	b.n	8005162 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 8005160:	2300      	movs	r3, #0
}
 8005162:	0018      	movs	r0, r3
 8005164:	46bd      	mov	sp, r7
 8005166:	b002      	add	sp, #8
 8005168:	bd80      	pop	{r7, pc}

0800516a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800516a:	b580      	push	{r7, lr}
 800516c:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800516e:	46c0      	nop			; (mov r8, r8)
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005178:	e7fe      	b.n	8005178 <HardFault_Handler+0x4>

0800517a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800517a:	b580      	push	{r7, lr}
 800517c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800517e:	46c0      	nop			; (mov r8, r8)
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005188:	46c0      	nop			; (mov r8, r8)
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005192:	f000 f959 	bl	8005448 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005196:	46c0      	nop			; (mov r8, r8)
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80051a0:	4b03      	ldr	r3, [pc, #12]	; (80051b0 <DMA1_Channel1_IRQHandler+0x14>)
 80051a2:	0018      	movs	r0, r3
 80051a4:	f000 fe5e 	bl	8005e64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80051a8:	46c0      	nop			; (mov r8, r8)
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	46c0      	nop			; (mov r8, r8)
 80051b0:	20000144 	.word	0x20000144

080051b4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

//	HAL_SPI_RxCpltCallback(&hspi2);
  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80051b8:	4b05      	ldr	r3, [pc, #20]	; (80051d0 <DMA1_Channel2_3_IRQHandler+0x1c>)
 80051ba:	0018      	movs	r0, r3
 80051bc:	f000 fe52 	bl	8005e64 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80051c0:	4b04      	ldr	r3, [pc, #16]	; (80051d4 <DMA1_Channel2_3_IRQHandler+0x20>)
 80051c2:	0018      	movs	r0, r3
 80051c4:	f000 fe4e 	bl	8005e64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80051c8:	46c0      	nop			; (mov r8, r8)
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	46c0      	nop			; (mov r8, r8)
 80051d0:	20000204 	.word	0x20000204
 80051d4:	20000260 	.word	0x20000260

080051d8 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
//		GPIOA->ODR |= 1 << 11;	//set test 1
//		GPIOA->ODR &= ~(1 << 11);	//reset test 1
  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80051dc:	4b03      	ldr	r3, [pc, #12]	; (80051ec <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x14>)
 80051de:	0018      	movs	r0, r3
 80051e0:	f000 fe40 	bl	8005e64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 80051e4:	46c0      	nop			; (mov r8, r8)
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	46c0      	nop			; (mov r8, r8)
 80051ec:	20000368 	.word	0x20000368

080051f0 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80051f4:	4b09      	ldr	r3, [pc, #36]	; (800521c <I2C1_IRQHandler+0x2c>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	699a      	ldr	r2, [r3, #24]
 80051fa:	23e0      	movs	r3, #224	; 0xe0
 80051fc:	00db      	lsls	r3, r3, #3
 80051fe:	4013      	ands	r3, r2
 8005200:	d004      	beq.n	800520c <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8005202:	4b06      	ldr	r3, [pc, #24]	; (800521c <I2C1_IRQHandler+0x2c>)
 8005204:	0018      	movs	r0, r3
 8005206:	f001 fa97 	bl	8006738 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800520a:	e003      	b.n	8005214 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800520c:	4b03      	ldr	r3, [pc, #12]	; (800521c <I2C1_IRQHandler+0x2c>)
 800520e:	0018      	movs	r0, r3
 8005210:	f001 fa78 	bl	8006704 <HAL_I2C_EV_IRQHandler>
}
 8005214:	46c0      	nop			; (mov r8, r8)
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	46c0      	nop			; (mov r8, r8)
 800521c:	200000bc 	.word	0x200000bc

08005220 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s1);
 8005224:	4b03      	ldr	r3, [pc, #12]	; (8005234 <SPI1_IRQHandler+0x14>)
 8005226:	0018      	movs	r0, r3
 8005228:	f002 fca6 	bl	8007b78 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800522c:	46c0      	nop			; (mov r8, r8)
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	46c0      	nop			; (mov r8, r8)
 8005234:	20000108 	.word	0x20000108

08005238 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800523c:	4b03      	ldr	r3, [pc, #12]	; (800524c <SPI2_IRQHandler+0x14>)
 800523e:	0018      	movs	r0, r3
 8005240:	f004 fd0a 	bl	8009c58 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8005244:	46c0      	nop			; (mov r8, r8)
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	46c0      	nop			; (mov r8, r8)
 800524c:	200001a0 	.word	0x200001a0

08005250 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART2->ICR|=USART_ICR_ORECF;
 8005254:	4b25      	ldr	r3, [pc, #148]	; (80052ec <USART2_IRQHandler+0x9c>)
 8005256:	6a1a      	ldr	r2, [r3, #32]
 8005258:	4b24      	ldr	r3, [pc, #144]	; (80052ec <USART2_IRQHandler+0x9c>)
 800525a:	2108      	movs	r1, #8
 800525c:	430a      	orrs	r2, r1
 800525e:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_FECF;
 8005260:	4b22      	ldr	r3, [pc, #136]	; (80052ec <USART2_IRQHandler+0x9c>)
 8005262:	6a1a      	ldr	r2, [r3, #32]
 8005264:	4b21      	ldr	r3, [pc, #132]	; (80052ec <USART2_IRQHandler+0x9c>)
 8005266:	2102      	movs	r1, #2
 8005268:	430a      	orrs	r2, r1
 800526a:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_NECF;
 800526c:	4b1f      	ldr	r3, [pc, #124]	; (80052ec <USART2_IRQHandler+0x9c>)
 800526e:	6a1a      	ldr	r2, [r3, #32]
 8005270:	4b1e      	ldr	r3, [pc, #120]	; (80052ec <USART2_IRQHandler+0x9c>)
 8005272:	2104      	movs	r1, #4
 8005274:	430a      	orrs	r2, r1
 8005276:	621a      	str	r2, [r3, #32]
	if(LL_USART_IsActiveFlag_RXNE(USART2) && LL_USART_IsEnabledIT_RXNE(USART2))
 8005278:	4b1c      	ldr	r3, [pc, #112]	; (80052ec <USART2_IRQHandler+0x9c>)
 800527a:	0018      	movs	r0, r3
 800527c:	f7ff ff53 	bl	8005126 <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8005280:	1e03      	subs	r3, r0, #0
 8005282:	d009      	beq.n	8005298 <USART2_IRQHandler+0x48>
 8005284:	4b19      	ldr	r3, [pc, #100]	; (80052ec <USART2_IRQHandler+0x9c>)
 8005286:	0018      	movs	r0, r3
 8005288:	f7ff ff5e 	bl	8005148 <LL_USART_IsEnabledIT_RXNE_RXFNE>
 800528c:	1e03      	subs	r3, r0, #0
 800528e:	d003      	beq.n	8005298 <USART2_IRQHandler+0x48>
	  {
	    USART2_RX_Callback();// launching the receiving callback function //LL implentation
 8005290:	f7fb ff26 	bl	80010e0 <USART2_RX_Callback>
	  {
 8005294:	46c0      	nop			; (mov r8, r8)
	  }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005296:	e025      	b.n	80052e4 <USART2_IRQHandler+0x94>
		  USART2->ICR|=USART_ICR_ORECF;
 8005298:	4b14      	ldr	r3, [pc, #80]	; (80052ec <USART2_IRQHandler+0x9c>)
 800529a:	6a1a      	ldr	r2, [r3, #32]
 800529c:	4b13      	ldr	r3, [pc, #76]	; (80052ec <USART2_IRQHandler+0x9c>)
 800529e:	2108      	movs	r1, #8
 80052a0:	430a      	orrs	r2, r1
 80052a2:	621a      	str	r2, [r3, #32]
	    if(LL_USART_IsActiveFlag_ORE(USART2))//clear the overrun flag by reading from RDR
 80052a4:	4b11      	ldr	r3, [pc, #68]	; (80052ec <USART2_IRQHandler+0x9c>)
 80052a6:	0018      	movs	r0, r3
 80052a8:	f7ff ff2c 	bl	8005104 <LL_USART_IsActiveFlag_ORE>
 80052ac:	1e03      	subs	r3, r0, #0
 80052ae:	d008      	beq.n	80052c2 <USART2_IRQHandler+0x72>
	    	USART2->ICR|=USART_ICR_ORECF;
 80052b0:	4b0e      	ldr	r3, [pc, #56]	; (80052ec <USART2_IRQHandler+0x9c>)
 80052b2:	6a1a      	ldr	r2, [r3, #32]
 80052b4:	4b0d      	ldr	r3, [pc, #52]	; (80052ec <USART2_IRQHandler+0x9c>)
 80052b6:	2108      	movs	r1, #8
 80052b8:	430a      	orrs	r2, r1
 80052ba:	621a      	str	r2, [r3, #32]
	      (void) USART2->RDR;
 80052bc:	4b0b      	ldr	r3, [pc, #44]	; (80052ec <USART2_IRQHandler+0x9c>)
 80052be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80052c0:	e010      	b.n	80052e4 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_FE(USART2))//clear another flag by reading from RDR
 80052c2:	4b0a      	ldr	r3, [pc, #40]	; (80052ec <USART2_IRQHandler+0x9c>)
 80052c4:	0018      	movs	r0, r3
 80052c6:	f7ff fefb 	bl	80050c0 <LL_USART_IsActiveFlag_FE>
 80052ca:	1e03      	subs	r3, r0, #0
 80052cc:	d002      	beq.n	80052d4 <USART2_IRQHandler+0x84>
	      (void) USART2->RDR;
 80052ce:	4b07      	ldr	r3, [pc, #28]	; (80052ec <USART2_IRQHandler+0x9c>)
 80052d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80052d2:	e007      	b.n	80052e4 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_NE(USART2))//clear another flag by reading from RDR
 80052d4:	4b05      	ldr	r3, [pc, #20]	; (80052ec <USART2_IRQHandler+0x9c>)
 80052d6:	0018      	movs	r0, r3
 80052d8:	f7ff ff03 	bl	80050e2 <LL_USART_IsActiveFlag_NE>
 80052dc:	1e03      	subs	r3, r0, #0
 80052de:	d001      	beq.n	80052e4 <USART2_IRQHandler+0x94>
	      (void) USART2->RDR;
 80052e0:	4b02      	ldr	r3, [pc, #8]	; (80052ec <USART2_IRQHandler+0x9c>)
 80052e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80052e4:	46c0      	nop			; (mov r8, r8)
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	46c0      	nop			; (mov r8, r8)
 80052ec:	40004400 	.word	0x40004400

080052f0 <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_USART_IRQHandler(&husart3);
 80052f4:	4b03      	ldr	r3, [pc, #12]	; (8005304 <USART3_4_LPUART1_IRQHandler+0x14>)
 80052f6:	0018      	movs	r0, r3
 80052f8:	f006 f9e8 	bl	800b6cc <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 80052fc:	46c0      	nop			; (mov r8, r8)
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	46c0      	nop			; (mov r8, r8)
 8005304:	20000308 	.word	0x20000308

08005308 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800530c:	4b03      	ldr	r3, [pc, #12]	; (800531c <SystemInit+0x14>)
 800530e:	2280      	movs	r2, #128	; 0x80
 8005310:	0512      	lsls	r2, r2, #20
 8005312:	609a      	str	r2, [r3, #8]
#endif
}
 8005314:	46c0      	nop			; (mov r8, r8)
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	46c0      	nop			; (mov r8, r8)
 800531c:	e000ed00 	.word	0xe000ed00

08005320 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005320:	480d      	ldr	r0, [pc, #52]	; (8005358 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005322:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005324:	f7ff fff0 	bl	8005308 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005328:	480c      	ldr	r0, [pc, #48]	; (800535c <LoopForever+0x6>)
  ldr r1, =_edata
 800532a:	490d      	ldr	r1, [pc, #52]	; (8005360 <LoopForever+0xa>)
  ldr r2, =_sidata
 800532c:	4a0d      	ldr	r2, [pc, #52]	; (8005364 <LoopForever+0xe>)
  movs r3, #0
 800532e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005330:	e002      	b.n	8005338 <LoopCopyDataInit>

08005332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005336:	3304      	adds	r3, #4

08005338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800533a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800533c:	d3f9      	bcc.n	8005332 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800533e:	4a0a      	ldr	r2, [pc, #40]	; (8005368 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005340:	4c0a      	ldr	r4, [pc, #40]	; (800536c <LoopForever+0x16>)
  movs r3, #0
 8005342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005344:	e001      	b.n	800534a <LoopFillZerobss>

08005346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005348:	3204      	adds	r2, #4

0800534a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800534a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800534c:	d3fb      	bcc.n	8005346 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800534e:	f007 fb03 	bl	800c958 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8005352:	f7fb f933 	bl	80005bc <main>

08005356 <LoopForever>:

LoopForever:
  b LoopForever
 8005356:	e7fe      	b.n	8005356 <LoopForever>
  ldr   r0, =_estack
 8005358:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800535c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005360:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8005364:	080160b8 	.word	0x080160b8
  ldr r2, =_sbss
 8005368:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800536c:	20001440 	.word	0x20001440

08005370 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005370:	e7fe      	b.n	8005370 <ADC1_COMP_IRQHandler>
	...

08005374 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800537a:	1dfb      	adds	r3, r7, #7
 800537c:	2200      	movs	r2, #0
 800537e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005380:	4b0b      	ldr	r3, [pc, #44]	; (80053b0 <HAL_Init+0x3c>)
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	4b0a      	ldr	r3, [pc, #40]	; (80053b0 <HAL_Init+0x3c>)
 8005386:	2180      	movs	r1, #128	; 0x80
 8005388:	0049      	lsls	r1, r1, #1
 800538a:	430a      	orrs	r2, r1
 800538c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800538e:	2000      	movs	r0, #0
 8005390:	f000 f810 	bl	80053b4 <HAL_InitTick>
 8005394:	1e03      	subs	r3, r0, #0
 8005396:	d003      	beq.n	80053a0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8005398:	1dfb      	adds	r3, r7, #7
 800539a:	2201      	movs	r2, #1
 800539c:	701a      	strb	r2, [r3, #0]
 800539e:	e001      	b.n	80053a4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80053a0:	f7ff fb28 	bl	80049f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80053a4:	1dfb      	adds	r3, r7, #7
 80053a6:	781b      	ldrb	r3, [r3, #0]
}
 80053a8:	0018      	movs	r0, r3
 80053aa:	46bd      	mov	sp, r7
 80053ac:	b002      	add	sp, #8
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	40022000 	.word	0x40022000

080053b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80053b4:	b590      	push	{r4, r7, lr}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80053bc:	230f      	movs	r3, #15
 80053be:	18fb      	adds	r3, r7, r3
 80053c0:	2200      	movs	r2, #0
 80053c2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80053c4:	4b1d      	ldr	r3, [pc, #116]	; (800543c <HAL_InitTick+0x88>)
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d02b      	beq.n	8005424 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80053cc:	4b1c      	ldr	r3, [pc, #112]	; (8005440 <HAL_InitTick+0x8c>)
 80053ce:	681c      	ldr	r4, [r3, #0]
 80053d0:	4b1a      	ldr	r3, [pc, #104]	; (800543c <HAL_InitTick+0x88>)
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	0019      	movs	r1, r3
 80053d6:	23fa      	movs	r3, #250	; 0xfa
 80053d8:	0098      	lsls	r0, r3, #2
 80053da:	f7fa fe93 	bl	8000104 <__udivsi3>
 80053de:	0003      	movs	r3, r0
 80053e0:	0019      	movs	r1, r3
 80053e2:	0020      	movs	r0, r4
 80053e4:	f7fa fe8e 	bl	8000104 <__udivsi3>
 80053e8:	0003      	movs	r3, r0
 80053ea:	0018      	movs	r0, r3
 80053ec:	f000 fbb3 	bl	8005b56 <HAL_SYSTICK_Config>
 80053f0:	1e03      	subs	r3, r0, #0
 80053f2:	d112      	bne.n	800541a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2b03      	cmp	r3, #3
 80053f8:	d80a      	bhi.n	8005410 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80053fa:	6879      	ldr	r1, [r7, #4]
 80053fc:	2301      	movs	r3, #1
 80053fe:	425b      	negs	r3, r3
 8005400:	2200      	movs	r2, #0
 8005402:	0018      	movs	r0, r3
 8005404:	f000 fb82 	bl	8005b0c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005408:	4b0e      	ldr	r3, [pc, #56]	; (8005444 <HAL_InitTick+0x90>)
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	601a      	str	r2, [r3, #0]
 800540e:	e00d      	b.n	800542c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8005410:	230f      	movs	r3, #15
 8005412:	18fb      	adds	r3, r7, r3
 8005414:	2201      	movs	r2, #1
 8005416:	701a      	strb	r2, [r3, #0]
 8005418:	e008      	b.n	800542c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800541a:	230f      	movs	r3, #15
 800541c:	18fb      	adds	r3, r7, r3
 800541e:	2201      	movs	r2, #1
 8005420:	701a      	strb	r2, [r3, #0]
 8005422:	e003      	b.n	800542c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005424:	230f      	movs	r3, #15
 8005426:	18fb      	adds	r3, r7, r3
 8005428:	2201      	movs	r2, #1
 800542a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800542c:	230f      	movs	r3, #15
 800542e:	18fb      	adds	r3, r7, r3
 8005430:	781b      	ldrb	r3, [r3, #0]
}
 8005432:	0018      	movs	r0, r3
 8005434:	46bd      	mov	sp, r7
 8005436:	b005      	add	sp, #20
 8005438:	bd90      	pop	{r4, r7, pc}
 800543a:	46c0      	nop			; (mov r8, r8)
 800543c:	2000006c 	.word	0x2000006c
 8005440:	20000064 	.word	0x20000064
 8005444:	20000068 	.word	0x20000068

08005448 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800544c:	4b05      	ldr	r3, [pc, #20]	; (8005464 <HAL_IncTick+0x1c>)
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	001a      	movs	r2, r3
 8005452:	4b05      	ldr	r3, [pc, #20]	; (8005468 <HAL_IncTick+0x20>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	18d2      	adds	r2, r2, r3
 8005458:	4b03      	ldr	r3, [pc, #12]	; (8005468 <HAL_IncTick+0x20>)
 800545a:	601a      	str	r2, [r3, #0]
}
 800545c:	46c0      	nop			; (mov r8, r8)
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	46c0      	nop			; (mov r8, r8)
 8005464:	2000006c 	.word	0x2000006c
 8005468:	2000143c 	.word	0x2000143c

0800546c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	af00      	add	r7, sp, #0
  return uwTick;
 8005470:	4b02      	ldr	r3, [pc, #8]	; (800547c <HAL_GetTick+0x10>)
 8005472:	681b      	ldr	r3, [r3, #0]
}
 8005474:	0018      	movs	r0, r3
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	46c0      	nop			; (mov r8, r8)
 800547c:	2000143c 	.word	0x2000143c

08005480 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005488:	f7ff fff0 	bl	800546c <HAL_GetTick>
 800548c:	0003      	movs	r3, r0
 800548e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	3301      	adds	r3, #1
 8005498:	d005      	beq.n	80054a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800549a:	4b0a      	ldr	r3, [pc, #40]	; (80054c4 <HAL_Delay+0x44>)
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	001a      	movs	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	189b      	adds	r3, r3, r2
 80054a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80054a6:	46c0      	nop			; (mov r8, r8)
 80054a8:	f7ff ffe0 	bl	800546c <HAL_GetTick>
 80054ac:	0002      	movs	r2, r0
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d8f7      	bhi.n	80054a8 <HAL_Delay+0x28>
  {
  }
}
 80054b8:	46c0      	nop			; (mov r8, r8)
 80054ba:	46c0      	nop			; (mov r8, r8)
 80054bc:	46bd      	mov	sp, r7
 80054be:	b004      	add	sp, #16
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	46c0      	nop			; (mov r8, r8)
 80054c4:	2000006c 	.word	0x2000006c

080054c8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80054d0:	4b06      	ldr	r3, [pc, #24]	; (80054ec <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a06      	ldr	r2, [pc, #24]	; (80054f0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80054d6:	4013      	ands	r3, r2
 80054d8:	0019      	movs	r1, r3
 80054da:	4b04      	ldr	r3, [pc, #16]	; (80054ec <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	430a      	orrs	r2, r1
 80054e0:	601a      	str	r2, [r3, #0]
}
 80054e2:	46c0      	nop			; (mov r8, r8)
 80054e4:	46bd      	mov	sp, r7
 80054e6:	b002      	add	sp, #8
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	46c0      	nop			; (mov r8, r8)
 80054ec:	40010000 	.word	0x40010000
 80054f0:	fffff9ff 	.word	0xfffff9ff

080054f4 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80054fc:	4a05      	ldr	r2, [pc, #20]	; (8005514 <LL_EXTI_EnableIT_0_31+0x20>)
 80054fe:	2380      	movs	r3, #128	; 0x80
 8005500:	58d2      	ldr	r2, [r2, r3]
 8005502:	4904      	ldr	r1, [pc, #16]	; (8005514 <LL_EXTI_EnableIT_0_31+0x20>)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4313      	orrs	r3, r2
 8005508:	2280      	movs	r2, #128	; 0x80
 800550a:	508b      	str	r3, [r1, r2]
}
 800550c:	46c0      	nop			; (mov r8, r8)
 800550e:	46bd      	mov	sp, r7
 8005510:	b002      	add	sp, #8
 8005512:	bd80      	pop	{r7, pc}
 8005514:	40021800 	.word	0x40021800

08005518 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8005520:	4a06      	ldr	r2, [pc, #24]	; (800553c <LL_EXTI_DisableIT_0_31+0x24>)
 8005522:	2380      	movs	r3, #128	; 0x80
 8005524:	58d3      	ldr	r3, [r2, r3]
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	43d2      	mvns	r2, r2
 800552a:	4904      	ldr	r1, [pc, #16]	; (800553c <LL_EXTI_DisableIT_0_31+0x24>)
 800552c:	4013      	ands	r3, r2
 800552e:	2280      	movs	r2, #128	; 0x80
 8005530:	508b      	str	r3, [r1, r2]
}
 8005532:	46c0      	nop			; (mov r8, r8)
 8005534:	46bd      	mov	sp, r7
 8005536:	b002      	add	sp, #8
 8005538:	bd80      	pop	{r7, pc}
 800553a:	46c0      	nop			; (mov r8, r8)
 800553c:	40021800 	.word	0x40021800

08005540 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8005548:	4a05      	ldr	r2, [pc, #20]	; (8005560 <LL_EXTI_EnableEvent_0_31+0x20>)
 800554a:	2384      	movs	r3, #132	; 0x84
 800554c:	58d2      	ldr	r2, [r2, r3]
 800554e:	4904      	ldr	r1, [pc, #16]	; (8005560 <LL_EXTI_EnableEvent_0_31+0x20>)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4313      	orrs	r3, r2
 8005554:	2284      	movs	r2, #132	; 0x84
 8005556:	508b      	str	r3, [r1, r2]

}
 8005558:	46c0      	nop			; (mov r8, r8)
 800555a:	46bd      	mov	sp, r7
 800555c:	b002      	add	sp, #8
 800555e:	bd80      	pop	{r7, pc}
 8005560:	40021800 	.word	0x40021800

08005564 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800556c:	4a06      	ldr	r2, [pc, #24]	; (8005588 <LL_EXTI_DisableEvent_0_31+0x24>)
 800556e:	2384      	movs	r3, #132	; 0x84
 8005570:	58d3      	ldr	r3, [r2, r3]
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	43d2      	mvns	r2, r2
 8005576:	4904      	ldr	r1, [pc, #16]	; (8005588 <LL_EXTI_DisableEvent_0_31+0x24>)
 8005578:	4013      	ands	r3, r2
 800557a:	2284      	movs	r2, #132	; 0x84
 800557c:	508b      	str	r3, [r1, r2]
}
 800557e:	46c0      	nop			; (mov r8, r8)
 8005580:	46bd      	mov	sp, r7
 8005582:	b002      	add	sp, #8
 8005584:	bd80      	pop	{r7, pc}
 8005586:	46c0      	nop			; (mov r8, r8)
 8005588:	40021800 	.word	0x40021800

0800558c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8005594:	4b04      	ldr	r3, [pc, #16]	; (80055a8 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8005596:	6819      	ldr	r1, [r3, #0]
 8005598:	4b03      	ldr	r3, [pc, #12]	; (80055a8 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	430a      	orrs	r2, r1
 800559e:	601a      	str	r2, [r3, #0]

}
 80055a0:	46c0      	nop			; (mov r8, r8)
 80055a2:	46bd      	mov	sp, r7
 80055a4:	b002      	add	sp, #8
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	40021800 	.word	0x40021800

080055ac <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80055b4:	4b05      	ldr	r3, [pc, #20]	; (80055cc <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	43d9      	mvns	r1, r3
 80055bc:	4b03      	ldr	r3, [pc, #12]	; (80055cc <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80055be:	400a      	ands	r2, r1
 80055c0:	601a      	str	r2, [r3, #0]

}
 80055c2:	46c0      	nop			; (mov r8, r8)
 80055c4:	46bd      	mov	sp, r7
 80055c6:	b002      	add	sp, #8
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	46c0      	nop			; (mov r8, r8)
 80055cc:	40021800 	.word	0x40021800

080055d0 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80055d8:	4b04      	ldr	r3, [pc, #16]	; (80055ec <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80055da:	6859      	ldr	r1, [r3, #4]
 80055dc:	4b03      	ldr	r3, [pc, #12]	; (80055ec <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	430a      	orrs	r2, r1
 80055e2:	605a      	str	r2, [r3, #4]
}
 80055e4:	46c0      	nop			; (mov r8, r8)
 80055e6:	46bd      	mov	sp, r7
 80055e8:	b002      	add	sp, #8
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	40021800 	.word	0x40021800

080055f0 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80055f8:	4b05      	ldr	r3, [pc, #20]	; (8005610 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	43d9      	mvns	r1, r3
 8005600:	4b03      	ldr	r3, [pc, #12]	; (8005610 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8005602:	400a      	ands	r2, r1
 8005604:	605a      	str	r2, [r3, #4]
}
 8005606:	46c0      	nop			; (mov r8, r8)
 8005608:	46bd      	mov	sp, r7
 800560a:	b002      	add	sp, #8
 800560c:	bd80      	pop	{r7, pc}
 800560e:	46c0      	nop			; (mov r8, r8)
 8005610:	40021800 	.word	0x40021800

08005614 <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 800561c:	4b03      	ldr	r3, [pc, #12]	; (800562c <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	611a      	str	r2, [r3, #16]
}
 8005622:	46c0      	nop			; (mov r8, r8)
 8005624:	46bd      	mov	sp, r7
 8005626:	b002      	add	sp, #8
 8005628:	bd80      	pop	{r7, pc}
 800562a:	46c0      	nop			; (mov r8, r8)
 800562c:	40021800 	.word	0x40021800

08005630 <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 8005638:	4b03      	ldr	r3, [pc, #12]	; (8005648 <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	60da      	str	r2, [r3, #12]
}
 800563e:	46c0      	nop			; (mov r8, r8)
 8005640:	46bd      	mov	sp, r7
 8005642:	b002      	add	sp, #8
 8005644:	bd80      	pop	{r7, pc}
 8005646:	46c0      	nop			; (mov r8, r8)
 8005648:	40021800 	.word	0x40021800

0800564c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b088      	sub	sp, #32
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8005654:	2300      	movs	r3, #0
 8005656:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005658:	211f      	movs	r1, #31
 800565a:	187b      	adds	r3, r7, r1
 800565c:	2200      	movs	r2, #0
 800565e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t * comp_common_odd;
  __IO uint32_t * comp_common_even;
#endif /* COMP3 */

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d103      	bne.n	800566e <HAL_COMP_Init+0x22>
  {
    status = HAL_ERROR;
 8005666:	187b      	adds	r3, r7, r1
 8005668:	2201      	movs	r2, #1
 800566a:	701a      	strb	r2, [r3, #0]
 800566c:	e13d      	b.n	80058ea <HAL_COMP_Init+0x29e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	0fdb      	lsrs	r3, r3, #31
 8005676:	07da      	lsls	r2, r3, #31
 8005678:	2380      	movs	r3, #128	; 0x80
 800567a:	061b      	lsls	r3, r3, #24
 800567c:	429a      	cmp	r2, r3
 800567e:	d104      	bne.n	800568a <HAL_COMP_Init+0x3e>
  {
    status = HAL_ERROR;
 8005680:	231f      	movs	r3, #31
 8005682:	18fb      	adds	r3, r7, r3
 8005684:	2201      	movs	r2, #1
 8005686:	701a      	strb	r2, [r3, #0]
 8005688:	e12f      	b.n	80058ea <HAL_COMP_Init+0x29e>
    if(hcomp->Init.WindowMode != COMP_WINDOWMODE_DISABLE)
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2229      	movs	r2, #41	; 0x29
 800568e:	5c9b      	ldrb	r3, [r3, r2]
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d10a      	bne.n	80056ac <HAL_COMP_Init+0x60>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2228      	movs	r2, #40	; 0x28
 800569a:	2100      	movs	r1, #0
 800569c:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	0018      	movs	r0, r3
 80056a8:	f7ff f9cc 	bl	8004a44 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2230      	movs	r2, #48	; 0x30
 80056b4:	4013      	ands	r3, r2
 80056b6:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	699b      	ldr	r3, [r3, #24]
 80056cc:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	69db      	ldr	r3, [r3, #28]
 80056d2:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (  hcomp->Init.InputMinus
 80056d8:	4313      	orrs	r3, r2
 80056da:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a85      	ldr	r2, [pc, #532]	; (80058f8 <HAL_COMP_Init+0x2ac>)
 80056e4:	4013      	ands	r3, r2
 80056e6:	0019      	movs	r1, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	430a      	orrs	r2, r1
 80056f0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(*comp_common_odd, COMP_CSR_WINOUT);
        CLEAR_BIT(*comp_common_even, COMP_CSR_WINOUT);
        break;
    }
#else
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685a      	ldr	r2, [r3, #4]
 80056f6:	2380      	movs	r3, #128	; 0x80
 80056f8:	011b      	lsls	r3, r3, #4
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d10d      	bne.n	800571a <HAL_COMP_Init+0xce>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 80056fe:	4b7f      	ldr	r3, [pc, #508]	; (80058fc <HAL_COMP_Init+0x2b0>)
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	4b7e      	ldr	r3, [pc, #504]	; (80058fc <HAL_COMP_Init+0x2b0>)
 8005704:	497e      	ldr	r1, [pc, #504]	; (8005900 <HAL_COMP_Init+0x2b4>)
 8005706:	400a      	ands	r2, r1
 8005708:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800570a:	4b7c      	ldr	r3, [pc, #496]	; (80058fc <HAL_COMP_Init+0x2b0>)
 800570c:	685a      	ldr	r2, [r3, #4]
 800570e:	4b7b      	ldr	r3, [pc, #492]	; (80058fc <HAL_COMP_Init+0x2b0>)
 8005710:	2180      	movs	r1, #128	; 0x80
 8005712:	0109      	lsls	r1, r1, #4
 8005714:	430a      	orrs	r2, r1
 8005716:	605a      	str	r2, [r3, #4]
 8005718:	e01f      	b.n	800575a <HAL_COMP_Init+0x10e>
    }
    else if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	23c0      	movs	r3, #192	; 0xc0
 8005720:	015b      	lsls	r3, r3, #5
 8005722:	429a      	cmp	r2, r3
 8005724:	d10d      	bne.n	8005742 <HAL_COMP_Init+0xf6>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8005726:	4b75      	ldr	r3, [pc, #468]	; (80058fc <HAL_COMP_Init+0x2b0>)
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	4b74      	ldr	r3, [pc, #464]	; (80058fc <HAL_COMP_Init+0x2b0>)
 800572c:	2180      	movs	r1, #128	; 0x80
 800572e:	0109      	lsls	r1, r1, #4
 8005730:	430a      	orrs	r2, r1
 8005732:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8005734:	4b71      	ldr	r3, [pc, #452]	; (80058fc <HAL_COMP_Init+0x2b0>)
 8005736:	685a      	ldr	r2, [r3, #4]
 8005738:	4b70      	ldr	r3, [pc, #448]	; (80058fc <HAL_COMP_Init+0x2b0>)
 800573a:	4971      	ldr	r1, [pc, #452]	; (8005900 <HAL_COMP_Init+0x2b4>)
 800573c:	400a      	ands	r2, r1
 800573e:	605a      	str	r2, [r3, #4]
 8005740:	e00b      	b.n	800575a <HAL_COMP_Init+0x10e>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8005742:	4b6e      	ldr	r3, [pc, #440]	; (80058fc <HAL_COMP_Init+0x2b0>)
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	4b6d      	ldr	r3, [pc, #436]	; (80058fc <HAL_COMP_Init+0x2b0>)
 8005748:	496d      	ldr	r1, [pc, #436]	; (8005900 <HAL_COMP_Init+0x2b4>)
 800574a:	400a      	ands	r2, r1
 800574c:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800574e:	4b6b      	ldr	r3, [pc, #428]	; (80058fc <HAL_COMP_Init+0x2b0>)
 8005750:	685a      	ldr	r2, [r3, #4]
 8005752:	4b6a      	ldr	r3, [pc, #424]	; (80058fc <HAL_COMP_Init+0x2b0>)
 8005754:	496a      	ldr	r1, [pc, #424]	; (8005900 <HAL_COMP_Init+0x2b4>)
 8005756:	400a      	ands	r2, r1
 8005758:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	22a0      	movs	r2, #160	; 0xa0
 8005760:	01d2      	lsls	r2, r2, #7
 8005762:	4293      	cmp	r3, r2
 8005764:	d017      	beq.n	8005796 <HAL_COMP_Init+0x14a>
 8005766:	22a0      	movs	r2, #160	; 0xa0
 8005768:	01d2      	lsls	r2, r2, #7
 800576a:	4293      	cmp	r3, r2
 800576c:	d830      	bhi.n	80057d0 <HAL_COMP_Init+0x184>
 800576e:	2b01      	cmp	r3, #1
 8005770:	d01f      	beq.n	80057b2 <HAL_COMP_Init+0x166>
 8005772:	2280      	movs	r2, #128	; 0x80
 8005774:	01d2      	lsls	r2, r2, #7
 8005776:	4293      	cmp	r3, r2
 8005778:	d12a      	bne.n	80057d0 <HAL_COMP_Init+0x184>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800577a:	4b60      	ldr	r3, [pc, #384]	; (80058fc <HAL_COMP_Init+0x2b0>)
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	4b5f      	ldr	r3, [pc, #380]	; (80058fc <HAL_COMP_Init+0x2b0>)
 8005780:	2180      	movs	r1, #128	; 0x80
 8005782:	01c9      	lsls	r1, r1, #7
 8005784:	430a      	orrs	r2, r1
 8005786:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8005788:	4b5c      	ldr	r3, [pc, #368]	; (80058fc <HAL_COMP_Init+0x2b0>)
 800578a:	685a      	ldr	r2, [r3, #4]
 800578c:	4b5b      	ldr	r3, [pc, #364]	; (80058fc <HAL_COMP_Init+0x2b0>)
 800578e:	495d      	ldr	r1, [pc, #372]	; (8005904 <HAL_COMP_Init+0x2b8>)
 8005790:	400a      	ands	r2, r1
 8005792:	605a      	str	r2, [r3, #4]
        break;
 8005794:	e029      	b.n	80057ea <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8005796:	4b59      	ldr	r3, [pc, #356]	; (80058fc <HAL_COMP_Init+0x2b0>)
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	4b58      	ldr	r3, [pc, #352]	; (80058fc <HAL_COMP_Init+0x2b0>)
 800579c:	4959      	ldr	r1, [pc, #356]	; (8005904 <HAL_COMP_Init+0x2b8>)
 800579e:	400a      	ands	r2, r1
 80057a0:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80057a2:	4b56      	ldr	r3, [pc, #344]	; (80058fc <HAL_COMP_Init+0x2b0>)
 80057a4:	685a      	ldr	r2, [r3, #4]
 80057a6:	4b55      	ldr	r3, [pc, #340]	; (80058fc <HAL_COMP_Init+0x2b0>)
 80057a8:	2180      	movs	r1, #128	; 0x80
 80057aa:	01c9      	lsls	r1, r1, #7
 80057ac:	430a      	orrs	r2, r1
 80057ae:	605a      	str	r2, [r3, #4]
        break;
 80057b0:	e01b      	b.n	80057ea <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80057b2:	4b52      	ldr	r3, [pc, #328]	; (80058fc <HAL_COMP_Init+0x2b0>)
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	4b51      	ldr	r3, [pc, #324]	; (80058fc <HAL_COMP_Init+0x2b0>)
 80057b8:	2180      	movs	r1, #128	; 0x80
 80057ba:	01c9      	lsls	r1, r1, #7
 80057bc:	430a      	orrs	r2, r1
 80057be:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80057c0:	4b4e      	ldr	r3, [pc, #312]	; (80058fc <HAL_COMP_Init+0x2b0>)
 80057c2:	685a      	ldr	r2, [r3, #4]
 80057c4:	4b4d      	ldr	r3, [pc, #308]	; (80058fc <HAL_COMP_Init+0x2b0>)
 80057c6:	2180      	movs	r1, #128	; 0x80
 80057c8:	01c9      	lsls	r1, r1, #7
 80057ca:	430a      	orrs	r2, r1
 80057cc:	605a      	str	r2, [r3, #4]
        break;
 80057ce:	e00c      	b.n	80057ea <HAL_COMP_Init+0x19e>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80057d0:	4b4a      	ldr	r3, [pc, #296]	; (80058fc <HAL_COMP_Init+0x2b0>)
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	4b49      	ldr	r3, [pc, #292]	; (80058fc <HAL_COMP_Init+0x2b0>)
 80057d6:	494b      	ldr	r1, [pc, #300]	; (8005904 <HAL_COMP_Init+0x2b8>)
 80057d8:	400a      	ands	r2, r1
 80057da:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80057dc:	4b47      	ldr	r3, [pc, #284]	; (80058fc <HAL_COMP_Init+0x2b0>)
 80057de:	685a      	ldr	r2, [r3, #4]
 80057e0:	4b46      	ldr	r3, [pc, #280]	; (80058fc <HAL_COMP_Init+0x2b0>)
 80057e2:	4948      	ldr	r1, [pc, #288]	; (8005904 <HAL_COMP_Init+0x2b8>)
 80057e4:	400a      	ands	r2, r1
 80057e6:	605a      	str	r2, [r3, #4]
        break;
 80057e8:	46c0      	nop			; (mov r8, r8)
    }
#endif /* COMP3 */

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2230      	movs	r2, #48	; 0x30
 80057f2:	4013      	ands	r3, r2
 80057f4:	d016      	beq.n	8005824 <HAL_COMP_Init+0x1d8>
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d113      	bne.n	8005824 <HAL_COMP_Init+0x1d8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80057fc:	4b42      	ldr	r3, [pc, #264]	; (8005908 <HAL_COMP_Init+0x2bc>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4942      	ldr	r1, [pc, #264]	; (800590c <HAL_COMP_Init+0x2c0>)
 8005802:	0018      	movs	r0, r3
 8005804:	f7fa fc7e 	bl	8000104 <__udivsi3>
 8005808:	0003      	movs	r3, r0
 800580a:	1c5a      	adds	r2, r3, #1
 800580c:	0013      	movs	r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	189b      	adds	r3, r3, r2
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8005816:	e002      	b.n	800581e <HAL_COMP_Init+0x1d2>
      {
        wait_loop_index--;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	3b01      	subs	r3, #1
 800581c:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d1f9      	bne.n	8005818 <HAL_COMP_Init+0x1cc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a34      	ldr	r2, [pc, #208]	; (80058fc <HAL_COMP_Init+0x2b0>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d102      	bne.n	8005834 <HAL_COMP_Init+0x1e8>
 800582e:	2380      	movs	r3, #128	; 0x80
 8005830:	029b      	lsls	r3, r3, #10
 8005832:	e001      	b.n	8005838 <HAL_COMP_Init+0x1ec>
 8005834:	2380      	movs	r3, #128	; 0x80
 8005836:	02db      	lsls	r3, r3, #11
 8005838:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583e:	2203      	movs	r2, #3
 8005840:	4013      	ands	r3, r2
 8005842:	d040      	beq.n	80058c6 <HAL_COMP_Init+0x27a>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005848:	2210      	movs	r2, #16
 800584a:	4013      	ands	r3, r2
 800584c:	d004      	beq.n	8005858 <HAL_COMP_Init+0x20c>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	0018      	movs	r0, r3
 8005852:	f7ff fe9b 	bl	800558c <LL_EXTI_EnableRisingTrig_0_31>
 8005856:	e003      	b.n	8005860 <HAL_COMP_Init+0x214>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	0018      	movs	r0, r3
 800585c:	f7ff fea6 	bl	80055ac <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005864:	2220      	movs	r2, #32
 8005866:	4013      	ands	r3, r2
 8005868:	d004      	beq.n	8005874 <HAL_COMP_Init+0x228>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	0018      	movs	r0, r3
 800586e:	f7ff feaf 	bl	80055d0 <LL_EXTI_EnableFallingTrig_0_31>
 8005872:	e003      	b.n	800587c <HAL_COMP_Init+0x230>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	0018      	movs	r0, r3
 8005878:	f7ff feba 	bl	80055f0 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	0018      	movs	r0, r3
 8005880:	f7ff fed6 	bl	8005630 <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	0018      	movs	r0, r3
 8005888:	f7ff fec4 	bl	8005614 <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005890:	2202      	movs	r2, #2
 8005892:	4013      	ands	r3, r2
 8005894:	d004      	beq.n	80058a0 <HAL_COMP_Init+0x254>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	0018      	movs	r0, r3
 800589a:	f7ff fe51 	bl	8005540 <LL_EXTI_EnableEvent_0_31>
 800589e:	e003      	b.n	80058a8 <HAL_COMP_Init+0x25c>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	0018      	movs	r0, r3
 80058a4:	f7ff fe5e 	bl	8005564 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ac:	2201      	movs	r2, #1
 80058ae:	4013      	ands	r3, r2
 80058b0:	d004      	beq.n	80058bc <HAL_COMP_Init+0x270>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	0018      	movs	r0, r3
 80058b6:	f7ff fe1d 	bl	80054f4 <LL_EXTI_EnableIT_0_31>
 80058ba:	e00c      	b.n	80058d6 <HAL_COMP_Init+0x28a>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	0018      	movs	r0, r3
 80058c0:	f7ff fe2a 	bl	8005518 <LL_EXTI_DisableIT_0_31>
 80058c4:	e007      	b.n	80058d6 <HAL_COMP_Init+0x28a>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	0018      	movs	r0, r3
 80058ca:	f7ff fe4b 	bl	8005564 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	0018      	movs	r0, r3
 80058d2:	f7ff fe21 	bl	8005518 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2229      	movs	r2, #41	; 0x29
 80058da:	5c9b      	ldrb	r3, [r3, r2]
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d103      	bne.n	80058ea <HAL_COMP_Init+0x29e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2229      	movs	r2, #41	; 0x29
 80058e6:	2101      	movs	r1, #1
 80058e8:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80058ea:	231f      	movs	r3, #31
 80058ec:	18fb      	adds	r3, r7, r3
 80058ee:	781b      	ldrb	r3, [r3, #0]
}
 80058f0:	0018      	movs	r0, r3
 80058f2:	46bd      	mov	sp, r7
 80058f4:	b008      	add	sp, #32
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	fe00740f 	.word	0xfe00740f
 80058fc:	40010200 	.word	0x40010200
 8005900:	fffff7ff 	.word	0xfffff7ff
 8005904:	ffffbfff 	.word	0xffffbfff
 8005908:	20000064 	.word	0x20000064
 800590c:	00030d40 	.word	0x00030d40

08005910 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8005918:	2300      	movs	r3, #0
 800591a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800591c:	210f      	movs	r1, #15
 800591e:	187b      	adds	r3, r7, r1
 8005920:	2200      	movs	r2, #0
 8005922:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d103      	bne.n	8005932 <HAL_COMP_Start+0x22>
  {
    status = HAL_ERROR;
 800592a:	187b      	adds	r3, r7, r1
 800592c:	2201      	movs	r2, #1
 800592e:	701a      	strb	r2, [r3, #0]
 8005930:	e035      	b.n	800599e <HAL_COMP_Start+0x8e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	0fdb      	lsrs	r3, r3, #31
 800593a:	07da      	lsls	r2, r3, #31
 800593c:	2380      	movs	r3, #128	; 0x80
 800593e:	061b      	lsls	r3, r3, #24
 8005940:	429a      	cmp	r2, r3
 8005942:	d104      	bne.n	800594e <HAL_COMP_Start+0x3e>
  {
    status = HAL_ERROR;
 8005944:	230f      	movs	r3, #15
 8005946:	18fb      	adds	r3, r7, r3
 8005948:	2201      	movs	r2, #1
 800594a:	701a      	strb	r2, [r3, #0]
 800594c:	e027      	b.n	800599e <HAL_COMP_Start+0x8e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2229      	movs	r2, #41	; 0x29
 8005952:	5c9b      	ldrb	r3, [r3, r2]
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b01      	cmp	r3, #1
 8005958:	d11d      	bne.n	8005996 <HAL_COMP_Start+0x86>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2101      	movs	r1, #1
 8005966:	430a      	orrs	r2, r1
 8005968:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2229      	movs	r2, #41	; 0x29
 800596e:	2102      	movs	r1, #2
 8005970:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005972:	4b0e      	ldr	r3, [pc, #56]	; (80059ac <HAL_COMP_Start+0x9c>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	490e      	ldr	r1, [pc, #56]	; (80059b0 <HAL_COMP_Start+0xa0>)
 8005978:	0018      	movs	r0, r3
 800597a:	f7fa fbc3 	bl	8000104 <__udivsi3>
 800597e:	0003      	movs	r3, r0
 8005980:	3301      	adds	r3, #1
 8005982:	00db      	lsls	r3, r3, #3
 8005984:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8005986:	e002      	b.n	800598e <HAL_COMP_Start+0x7e>
      {
        wait_loop_index--;
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	3b01      	subs	r3, #1
 800598c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1f9      	bne.n	8005988 <HAL_COMP_Start+0x78>
 8005994:	e003      	b.n	800599e <HAL_COMP_Start+0x8e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005996:	230f      	movs	r3, #15
 8005998:	18fb      	adds	r3, r7, r3
 800599a:	2201      	movs	r2, #1
 800599c:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800599e:	230f      	movs	r3, #15
 80059a0:	18fb      	adds	r3, r7, r3
 80059a2:	781b      	ldrb	r3, [r3, #0]
}
 80059a4:	0018      	movs	r0, r3
 80059a6:	46bd      	mov	sp, r7
 80059a8:	b004      	add	sp, #16
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	20000064 	.word	0x20000064
 80059b0:	00030d40 	.word	0x00030d40

080059b4 <__NVIC_EnableIRQ>:
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	0002      	movs	r2, r0
 80059bc:	1dfb      	adds	r3, r7, #7
 80059be:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80059c0:	1dfb      	adds	r3, r7, #7
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	2b7f      	cmp	r3, #127	; 0x7f
 80059c6:	d809      	bhi.n	80059dc <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059c8:	1dfb      	adds	r3, r7, #7
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	001a      	movs	r2, r3
 80059ce:	231f      	movs	r3, #31
 80059d0:	401a      	ands	r2, r3
 80059d2:	4b04      	ldr	r3, [pc, #16]	; (80059e4 <__NVIC_EnableIRQ+0x30>)
 80059d4:	2101      	movs	r1, #1
 80059d6:	4091      	lsls	r1, r2
 80059d8:	000a      	movs	r2, r1
 80059da:	601a      	str	r2, [r3, #0]
}
 80059dc:	46c0      	nop			; (mov r8, r8)
 80059de:	46bd      	mov	sp, r7
 80059e0:	b002      	add	sp, #8
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	e000e100 	.word	0xe000e100

080059e8 <__NVIC_SetPriority>:
{
 80059e8:	b590      	push	{r4, r7, lr}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	0002      	movs	r2, r0
 80059f0:	6039      	str	r1, [r7, #0]
 80059f2:	1dfb      	adds	r3, r7, #7
 80059f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80059f6:	1dfb      	adds	r3, r7, #7
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	2b7f      	cmp	r3, #127	; 0x7f
 80059fc:	d828      	bhi.n	8005a50 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80059fe:	4a2f      	ldr	r2, [pc, #188]	; (8005abc <__NVIC_SetPriority+0xd4>)
 8005a00:	1dfb      	adds	r3, r7, #7
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	b25b      	sxtb	r3, r3
 8005a06:	089b      	lsrs	r3, r3, #2
 8005a08:	33c0      	adds	r3, #192	; 0xc0
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	589b      	ldr	r3, [r3, r2]
 8005a0e:	1dfa      	adds	r2, r7, #7
 8005a10:	7812      	ldrb	r2, [r2, #0]
 8005a12:	0011      	movs	r1, r2
 8005a14:	2203      	movs	r2, #3
 8005a16:	400a      	ands	r2, r1
 8005a18:	00d2      	lsls	r2, r2, #3
 8005a1a:	21ff      	movs	r1, #255	; 0xff
 8005a1c:	4091      	lsls	r1, r2
 8005a1e:	000a      	movs	r2, r1
 8005a20:	43d2      	mvns	r2, r2
 8005a22:	401a      	ands	r2, r3
 8005a24:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	019b      	lsls	r3, r3, #6
 8005a2a:	22ff      	movs	r2, #255	; 0xff
 8005a2c:	401a      	ands	r2, r3
 8005a2e:	1dfb      	adds	r3, r7, #7
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	0018      	movs	r0, r3
 8005a34:	2303      	movs	r3, #3
 8005a36:	4003      	ands	r3, r0
 8005a38:	00db      	lsls	r3, r3, #3
 8005a3a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005a3c:	481f      	ldr	r0, [pc, #124]	; (8005abc <__NVIC_SetPriority+0xd4>)
 8005a3e:	1dfb      	adds	r3, r7, #7
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	b25b      	sxtb	r3, r3
 8005a44:	089b      	lsrs	r3, r3, #2
 8005a46:	430a      	orrs	r2, r1
 8005a48:	33c0      	adds	r3, #192	; 0xc0
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	501a      	str	r2, [r3, r0]
}
 8005a4e:	e031      	b.n	8005ab4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005a50:	4a1b      	ldr	r2, [pc, #108]	; (8005ac0 <__NVIC_SetPriority+0xd8>)
 8005a52:	1dfb      	adds	r3, r7, #7
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	0019      	movs	r1, r3
 8005a58:	230f      	movs	r3, #15
 8005a5a:	400b      	ands	r3, r1
 8005a5c:	3b08      	subs	r3, #8
 8005a5e:	089b      	lsrs	r3, r3, #2
 8005a60:	3306      	adds	r3, #6
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	18d3      	adds	r3, r2, r3
 8005a66:	3304      	adds	r3, #4
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	1dfa      	adds	r2, r7, #7
 8005a6c:	7812      	ldrb	r2, [r2, #0]
 8005a6e:	0011      	movs	r1, r2
 8005a70:	2203      	movs	r2, #3
 8005a72:	400a      	ands	r2, r1
 8005a74:	00d2      	lsls	r2, r2, #3
 8005a76:	21ff      	movs	r1, #255	; 0xff
 8005a78:	4091      	lsls	r1, r2
 8005a7a:	000a      	movs	r2, r1
 8005a7c:	43d2      	mvns	r2, r2
 8005a7e:	401a      	ands	r2, r3
 8005a80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	019b      	lsls	r3, r3, #6
 8005a86:	22ff      	movs	r2, #255	; 0xff
 8005a88:	401a      	ands	r2, r3
 8005a8a:	1dfb      	adds	r3, r7, #7
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	0018      	movs	r0, r3
 8005a90:	2303      	movs	r3, #3
 8005a92:	4003      	ands	r3, r0
 8005a94:	00db      	lsls	r3, r3, #3
 8005a96:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005a98:	4809      	ldr	r0, [pc, #36]	; (8005ac0 <__NVIC_SetPriority+0xd8>)
 8005a9a:	1dfb      	adds	r3, r7, #7
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	001c      	movs	r4, r3
 8005aa0:	230f      	movs	r3, #15
 8005aa2:	4023      	ands	r3, r4
 8005aa4:	3b08      	subs	r3, #8
 8005aa6:	089b      	lsrs	r3, r3, #2
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	3306      	adds	r3, #6
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	18c3      	adds	r3, r0, r3
 8005ab0:	3304      	adds	r3, #4
 8005ab2:	601a      	str	r2, [r3, #0]
}
 8005ab4:	46c0      	nop			; (mov r8, r8)
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	b003      	add	sp, #12
 8005aba:	bd90      	pop	{r4, r7, pc}
 8005abc:	e000e100 	.word	0xe000e100
 8005ac0:	e000ed00 	.word	0xe000ed00

08005ac4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	1e5a      	subs	r2, r3, #1
 8005ad0:	2380      	movs	r3, #128	; 0x80
 8005ad2:	045b      	lsls	r3, r3, #17
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d301      	bcc.n	8005adc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e010      	b.n	8005afe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005adc:	4b0a      	ldr	r3, [pc, #40]	; (8005b08 <SysTick_Config+0x44>)
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	3a01      	subs	r2, #1
 8005ae2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	425b      	negs	r3, r3
 8005ae8:	2103      	movs	r1, #3
 8005aea:	0018      	movs	r0, r3
 8005aec:	f7ff ff7c 	bl	80059e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005af0:	4b05      	ldr	r3, [pc, #20]	; (8005b08 <SysTick_Config+0x44>)
 8005af2:	2200      	movs	r2, #0
 8005af4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005af6:	4b04      	ldr	r3, [pc, #16]	; (8005b08 <SysTick_Config+0x44>)
 8005af8:	2207      	movs	r2, #7
 8005afa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	0018      	movs	r0, r3
 8005b00:	46bd      	mov	sp, r7
 8005b02:	b002      	add	sp, #8
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	46c0      	nop			; (mov r8, r8)
 8005b08:	e000e010 	.word	0xe000e010

08005b0c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60b9      	str	r1, [r7, #8]
 8005b14:	607a      	str	r2, [r7, #4]
 8005b16:	210f      	movs	r1, #15
 8005b18:	187b      	adds	r3, r7, r1
 8005b1a:	1c02      	adds	r2, r0, #0
 8005b1c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8005b1e:	68ba      	ldr	r2, [r7, #8]
 8005b20:	187b      	adds	r3, r7, r1
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	b25b      	sxtb	r3, r3
 8005b26:	0011      	movs	r1, r2
 8005b28:	0018      	movs	r0, r3
 8005b2a:	f7ff ff5d 	bl	80059e8 <__NVIC_SetPriority>
}
 8005b2e:	46c0      	nop			; (mov r8, r8)
 8005b30:	46bd      	mov	sp, r7
 8005b32:	b004      	add	sp, #16
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b082      	sub	sp, #8
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	0002      	movs	r2, r0
 8005b3e:	1dfb      	adds	r3, r7, #7
 8005b40:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b42:	1dfb      	adds	r3, r7, #7
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	b25b      	sxtb	r3, r3
 8005b48:	0018      	movs	r0, r3
 8005b4a:	f7ff ff33 	bl	80059b4 <__NVIC_EnableIRQ>
}
 8005b4e:	46c0      	nop			; (mov r8, r8)
 8005b50:	46bd      	mov	sp, r7
 8005b52:	b002      	add	sp, #8
 8005b54:	bd80      	pop	{r7, pc}

08005b56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b082      	sub	sp, #8
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	0018      	movs	r0, r3
 8005b62:	f7ff ffaf 	bl	8005ac4 <SysTick_Config>
 8005b66:	0003      	movs	r3, r0
}
 8005b68:	0018      	movs	r0, r3
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	b002      	add	sp, #8
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d101      	bne.n	8005b82 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e077      	b.n	8005c72 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a3d      	ldr	r2, [pc, #244]	; (8005c7c <HAL_DMA_Init+0x10c>)
 8005b88:	4694      	mov	ip, r2
 8005b8a:	4463      	add	r3, ip
 8005b8c:	2114      	movs	r1, #20
 8005b8e:	0018      	movs	r0, r3
 8005b90:	f7fa fab8 	bl	8000104 <__udivsi3>
 8005b94:	0003      	movs	r3, r0
 8005b96:	009a      	lsls	r2, r3, #2
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2225      	movs	r2, #37	; 0x25
 8005ba0:	2102      	movs	r1, #2
 8005ba2:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4934      	ldr	r1, [pc, #208]	; (8005c80 <HAL_DMA_Init+0x110>)
 8005bb0:	400a      	ands	r2, r1
 8005bb2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	6819      	ldr	r1, [r3, #0]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	689a      	ldr	r2, [r3, #8]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	431a      	orrs	r2, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	431a      	orrs	r2, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	69db      	ldr	r3, [r3, #28]
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a1b      	ldr	r3, [r3, #32]
 8005be0:	431a      	orrs	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	430a      	orrs	r2, r1
 8005be8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	0018      	movs	r0, r3
 8005bee:	f000 fa37 	bl	8006060 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	689a      	ldr	r2, [r3, #8]
 8005bf6:	2380      	movs	r3, #128	; 0x80
 8005bf8:	01db      	lsls	r3, r3, #7
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d102      	bne.n	8005c04 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685a      	ldr	r2, [r3, #4]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c0c:	213f      	movs	r1, #63	; 0x3f
 8005c0e:	400a      	ands	r2, r1
 8005c10:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005c1a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d011      	beq.n	8005c48 <HAL_DMA_Init+0xd8>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	2b04      	cmp	r3, #4
 8005c2a:	d80d      	bhi.n	8005c48 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	0018      	movs	r0, r3
 8005c30:	f000 fa42 	bl	80060b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c38:	2200      	movs	r2, #0
 8005c3a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005c44:	605a      	str	r2, [r3, #4]
 8005c46:	e008      	b.n	8005c5a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2225      	movs	r2, #37	; 0x25
 8005c64:	2101      	movs	r1, #1
 8005c66:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2224      	movs	r2, #36	; 0x24
 8005c6c:	2100      	movs	r1, #0
 8005c6e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	0018      	movs	r0, r3
 8005c74:	46bd      	mov	sp, r7
 8005c76:	b002      	add	sp, #8
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	46c0      	nop			; (mov r8, r8)
 8005c7c:	bffdfff8 	.word	0xbffdfff8
 8005c80:	ffff800f 	.word	0xffff800f

08005c84 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b086      	sub	sp, #24
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	607a      	str	r2, [r7, #4]
 8005c90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c92:	2317      	movs	r3, #23
 8005c94:	18fb      	adds	r3, r7, r3
 8005c96:	2200      	movs	r2, #0
 8005c98:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2224      	movs	r2, #36	; 0x24
 8005c9e:	5c9b      	ldrb	r3, [r3, r2]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d101      	bne.n	8005ca8 <HAL_DMA_Start_IT+0x24>
 8005ca4:	2302      	movs	r3, #2
 8005ca6:	e06f      	b.n	8005d88 <HAL_DMA_Start_IT+0x104>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2224      	movs	r2, #36	; 0x24
 8005cac:	2101      	movs	r1, #1
 8005cae:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2225      	movs	r2, #37	; 0x25
 8005cb4:	5c9b      	ldrb	r3, [r3, r2]
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d157      	bne.n	8005d6c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2225      	movs	r2, #37	; 0x25
 8005cc0:	2102      	movs	r1, #2
 8005cc2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2101      	movs	r1, #1
 8005cd6:	438a      	bics	r2, r1
 8005cd8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	68b9      	ldr	r1, [r7, #8]
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f000 f97d 	bl	8005fe0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d008      	beq.n	8005d00 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	210e      	movs	r1, #14
 8005cfa:	430a      	orrs	r2, r1
 8005cfc:	601a      	str	r2, [r3, #0]
 8005cfe:	e00f      	b.n	8005d20 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2104      	movs	r1, #4
 8005d0c:	438a      	bics	r2, r1
 8005d0e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	210a      	movs	r1, #10
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	2380      	movs	r3, #128	; 0x80
 8005d28:	025b      	lsls	r3, r3, #9
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	d008      	beq.n	8005d40 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d38:	2180      	movs	r1, #128	; 0x80
 8005d3a:	0049      	lsls	r1, r1, #1
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d008      	beq.n	8005d5a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d52:	2180      	movs	r1, #128	; 0x80
 8005d54:	0049      	lsls	r1, r1, #1
 8005d56:	430a      	orrs	r2, r1
 8005d58:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2101      	movs	r1, #1
 8005d66:	430a      	orrs	r2, r1
 8005d68:	601a      	str	r2, [r3, #0]
 8005d6a:	e00a      	b.n	8005d82 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2280      	movs	r2, #128	; 0x80
 8005d70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2224      	movs	r2, #36	; 0x24
 8005d76:	2100      	movs	r1, #0
 8005d78:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8005d7a:	2317      	movs	r3, #23
 8005d7c:	18fb      	adds	r3, r7, r3
 8005d7e:	2201      	movs	r2, #1
 8005d80:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8005d82:	2317      	movs	r3, #23
 8005d84:	18fb      	adds	r3, r7, r3
 8005d86:	781b      	ldrb	r3, [r3, #0]
}
 8005d88:	0018      	movs	r0, r3
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	b006      	add	sp, #24
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d98:	210f      	movs	r1, #15
 8005d9a:	187b      	adds	r3, r7, r1
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2225      	movs	r2, #37	; 0x25
 8005da4:	5c9b      	ldrb	r3, [r3, r2]
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d006      	beq.n	8005dba <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2204      	movs	r2, #4
 8005db0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005db2:	187b      	adds	r3, r7, r1
 8005db4:	2201      	movs	r2, #1
 8005db6:	701a      	strb	r2, [r3, #0]
 8005db8:	e049      	b.n	8005e4e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	210e      	movs	r1, #14
 8005dc6:	438a      	bics	r2, r1
 8005dc8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2101      	movs	r1, #1
 8005dd6:	438a      	bics	r2, r1
 8005dd8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005de4:	491d      	ldr	r1, [pc, #116]	; (8005e5c <HAL_DMA_Abort_IT+0xcc>)
 8005de6:	400a      	ands	r2, r1
 8005de8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8005dea:	4b1d      	ldr	r3, [pc, #116]	; (8005e60 <HAL_DMA_Abort_IT+0xd0>)
 8005dec:	6859      	ldr	r1, [r3, #4]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df2:	221c      	movs	r2, #28
 8005df4:	4013      	ands	r3, r2
 8005df6:	2201      	movs	r2, #1
 8005df8:	409a      	lsls	r2, r3
 8005dfa:	4b19      	ldr	r3, [pc, #100]	; (8005e60 <HAL_DMA_Abort_IT+0xd0>)
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005e08:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00c      	beq.n	8005e2c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e1c:	490f      	ldr	r1, [pc, #60]	; (8005e5c <HAL_DMA_Abort_IT+0xcc>)
 8005e1e:	400a      	ands	r2, r1
 8005e20:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005e2a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2225      	movs	r2, #37	; 0x25
 8005e30:	2101      	movs	r1, #1
 8005e32:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2224      	movs	r2, #36	; 0x24
 8005e38:	2100      	movs	r1, #0
 8005e3a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d004      	beq.n	8005e4e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	0010      	movs	r0, r2
 8005e4c:	4798      	blx	r3
    }
  }
  return status;
 8005e4e:	230f      	movs	r3, #15
 8005e50:	18fb      	adds	r3, r7, r3
 8005e52:	781b      	ldrb	r3, [r3, #0]
}
 8005e54:	0018      	movs	r0, r3
 8005e56:	46bd      	mov	sp, r7
 8005e58:	b004      	add	sp, #16
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	fffffeff 	.word	0xfffffeff
 8005e60:	40020000 	.word	0x40020000

08005e64 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8005e6c:	4b55      	ldr	r3, [pc, #340]	; (8005fc4 <HAL_DMA_IRQHandler+0x160>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7e:	221c      	movs	r2, #28
 8005e80:	4013      	ands	r3, r2
 8005e82:	2204      	movs	r2, #4
 8005e84:	409a      	lsls	r2, r3
 8005e86:	0013      	movs	r3, r2
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	d027      	beq.n	8005ede <HAL_DMA_IRQHandler+0x7a>
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	2204      	movs	r2, #4
 8005e92:	4013      	ands	r3, r2
 8005e94:	d023      	beq.n	8005ede <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2220      	movs	r2, #32
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	d107      	bne.n	8005eb2 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2104      	movs	r1, #4
 8005eae:	438a      	bics	r2, r1
 8005eb0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8005eb2:	4b44      	ldr	r3, [pc, #272]	; (8005fc4 <HAL_DMA_IRQHandler+0x160>)
 8005eb4:	6859      	ldr	r1, [r3, #4]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eba:	221c      	movs	r2, #28
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	2204      	movs	r2, #4
 8005ec0:	409a      	lsls	r2, r3
 8005ec2:	4b40      	ldr	r3, [pc, #256]	; (8005fc4 <HAL_DMA_IRQHandler+0x160>)
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d100      	bne.n	8005ed2 <HAL_DMA_IRQHandler+0x6e>
 8005ed0:	e073      	b.n	8005fba <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	0010      	movs	r0, r2
 8005eda:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8005edc:	e06d      	b.n	8005fba <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee2:	221c      	movs	r2, #28
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	2202      	movs	r2, #2
 8005ee8:	409a      	lsls	r2, r3
 8005eea:	0013      	movs	r3, r2
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	4013      	ands	r3, r2
 8005ef0:	d02e      	beq.n	8005f50 <HAL_DMA_IRQHandler+0xec>
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	2202      	movs	r2, #2
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	d02a      	beq.n	8005f50 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2220      	movs	r2, #32
 8005f02:	4013      	ands	r3, r2
 8005f04:	d10b      	bne.n	8005f1e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	210a      	movs	r1, #10
 8005f12:	438a      	bics	r2, r1
 8005f14:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2225      	movs	r2, #37	; 0x25
 8005f1a:	2101      	movs	r1, #1
 8005f1c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8005f1e:	4b29      	ldr	r3, [pc, #164]	; (8005fc4 <HAL_DMA_IRQHandler+0x160>)
 8005f20:	6859      	ldr	r1, [r3, #4]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f26:	221c      	movs	r2, #28
 8005f28:	4013      	ands	r3, r2
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	409a      	lsls	r2, r3
 8005f2e:	4b25      	ldr	r3, [pc, #148]	; (8005fc4 <HAL_DMA_IRQHandler+0x160>)
 8005f30:	430a      	orrs	r2, r1
 8005f32:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2224      	movs	r2, #36	; 0x24
 8005f38:	2100      	movs	r1, #0
 8005f3a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d03a      	beq.n	8005fba <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	0010      	movs	r0, r2
 8005f4c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8005f4e:	e034      	b.n	8005fba <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f54:	221c      	movs	r2, #28
 8005f56:	4013      	ands	r3, r2
 8005f58:	2208      	movs	r2, #8
 8005f5a:	409a      	lsls	r2, r3
 8005f5c:	0013      	movs	r3, r2
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	4013      	ands	r3, r2
 8005f62:	d02b      	beq.n	8005fbc <HAL_DMA_IRQHandler+0x158>
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	2208      	movs	r2, #8
 8005f68:	4013      	ands	r3, r2
 8005f6a:	d027      	beq.n	8005fbc <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	210e      	movs	r1, #14
 8005f78:	438a      	bics	r2, r1
 8005f7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8005f7c:	4b11      	ldr	r3, [pc, #68]	; (8005fc4 <HAL_DMA_IRQHandler+0x160>)
 8005f7e:	6859      	ldr	r1, [r3, #4]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f84:	221c      	movs	r2, #28
 8005f86:	4013      	ands	r3, r2
 8005f88:	2201      	movs	r2, #1
 8005f8a:	409a      	lsls	r2, r3
 8005f8c:	4b0d      	ldr	r3, [pc, #52]	; (8005fc4 <HAL_DMA_IRQHandler+0x160>)
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2201      	movs	r2, #1
 8005f96:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2225      	movs	r2, #37	; 0x25
 8005f9c:	2101      	movs	r1, #1
 8005f9e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2224      	movs	r2, #36	; 0x24
 8005fa4:	2100      	movs	r1, #0
 8005fa6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d005      	beq.n	8005fbc <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	0010      	movs	r0, r2
 8005fb8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005fba:	46c0      	nop			; (mov r8, r8)
 8005fbc:	46c0      	nop			; (mov r8, r8)
}
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	b004      	add	sp, #16
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	40020000 	.word	0x40020000

08005fc8 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2225      	movs	r2, #37	; 0x25
 8005fd4:	5c9b      	ldrb	r3, [r3, r2]
 8005fd6:	b2db      	uxtb	r3, r3
}
 8005fd8:	0018      	movs	r0, r3
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	b002      	add	sp, #8
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	607a      	str	r2, [r7, #4]
 8005fec:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005ff6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d004      	beq.n	800600a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006008:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800600a:	4b14      	ldr	r3, [pc, #80]	; (800605c <DMA_SetConfig+0x7c>)
 800600c:	6859      	ldr	r1, [r3, #4]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006012:	221c      	movs	r2, #28
 8006014:	4013      	ands	r3, r2
 8006016:	2201      	movs	r2, #1
 8006018:	409a      	lsls	r2, r3
 800601a:	4b10      	ldr	r3, [pc, #64]	; (800605c <DMA_SetConfig+0x7c>)
 800601c:	430a      	orrs	r2, r1
 800601e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	683a      	ldr	r2, [r7, #0]
 8006026:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	2b10      	cmp	r3, #16
 800602e:	d108      	bne.n	8006042 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68ba      	ldr	r2, [r7, #8]
 800603e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006040:	e007      	b.n	8006052 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	60da      	str	r2, [r3, #12]
}
 8006052:	46c0      	nop			; (mov r8, r8)
 8006054:	46bd      	mov	sp, r7
 8006056:	b004      	add	sp, #16
 8006058:	bd80      	pop	{r7, pc}
 800605a:	46c0      	nop			; (mov r8, r8)
 800605c:	40020000 	.word	0x40020000

08006060 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606c:	089b      	lsrs	r3, r3, #2
 800606e:	4a10      	ldr	r2, [pc, #64]	; (80060b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8006070:	4694      	mov	ip, r2
 8006072:	4463      	add	r3, ip
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	001a      	movs	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	001a      	movs	r2, r3
 8006082:	23ff      	movs	r3, #255	; 0xff
 8006084:	4013      	ands	r3, r2
 8006086:	3b08      	subs	r3, #8
 8006088:	2114      	movs	r1, #20
 800608a:	0018      	movs	r0, r3
 800608c:	f7fa f83a 	bl	8000104 <__udivsi3>
 8006090:	0003      	movs	r3, r0
 8006092:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a07      	ldr	r2, [pc, #28]	; (80060b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8006098:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	221f      	movs	r2, #31
 800609e:	4013      	ands	r3, r2
 80060a0:	2201      	movs	r2, #1
 80060a2:	409a      	lsls	r2, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80060a8:	46c0      	nop			; (mov r8, r8)
 80060aa:	46bd      	mov	sp, r7
 80060ac:	b004      	add	sp, #16
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	10008200 	.word	0x10008200
 80060b4:	40020880 	.word	0x40020880

080060b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	223f      	movs	r2, #63	; 0x3f
 80060c6:	4013      	ands	r3, r2
 80060c8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	4a0a      	ldr	r2, [pc, #40]	; (80060f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80060ce:	4694      	mov	ip, r2
 80060d0:	4463      	add	r3, ip
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	001a      	movs	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a07      	ldr	r2, [pc, #28]	; (80060fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80060de:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	3b01      	subs	r3, #1
 80060e4:	2203      	movs	r2, #3
 80060e6:	4013      	ands	r3, r2
 80060e8:	2201      	movs	r2, #1
 80060ea:	409a      	lsls	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	659a      	str	r2, [r3, #88]	; 0x58
}
 80060f0:	46c0      	nop			; (mov r8, r8)
 80060f2:	46bd      	mov	sp, r7
 80060f4:	b004      	add	sp, #16
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	1000823f 	.word	0x1000823f
 80060fc:	40020940 	.word	0x40020940

08006100 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b086      	sub	sp, #24
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800610a:	2300      	movs	r3, #0
 800610c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800610e:	e147      	b.n	80063a0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2101      	movs	r1, #1
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	4091      	lsls	r1, r2
 800611a:	000a      	movs	r2, r1
 800611c:	4013      	ands	r3, r2
 800611e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d100      	bne.n	8006128 <HAL_GPIO_Init+0x28>
 8006126:	e138      	b.n	800639a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	2203      	movs	r2, #3
 800612e:	4013      	ands	r3, r2
 8006130:	2b01      	cmp	r3, #1
 8006132:	d005      	beq.n	8006140 <HAL_GPIO_Init+0x40>
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	2203      	movs	r2, #3
 800613a:	4013      	ands	r3, r2
 800613c:	2b02      	cmp	r3, #2
 800613e:	d130      	bne.n	80061a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	005b      	lsls	r3, r3, #1
 800614a:	2203      	movs	r2, #3
 800614c:	409a      	lsls	r2, r3
 800614e:	0013      	movs	r3, r2
 8006150:	43da      	mvns	r2, r3
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	4013      	ands	r3, r2
 8006156:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	68da      	ldr	r2, [r3, #12]
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	005b      	lsls	r3, r3, #1
 8006160:	409a      	lsls	r2, r3
 8006162:	0013      	movs	r3, r2
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	4313      	orrs	r3, r2
 8006168:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006176:	2201      	movs	r2, #1
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	409a      	lsls	r2, r3
 800617c:	0013      	movs	r3, r2
 800617e:	43da      	mvns	r2, r3
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	4013      	ands	r3, r2
 8006184:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	091b      	lsrs	r3, r3, #4
 800618c:	2201      	movs	r2, #1
 800618e:	401a      	ands	r2, r3
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	409a      	lsls	r2, r3
 8006194:	0013      	movs	r3, r2
 8006196:	693a      	ldr	r2, [r7, #16]
 8006198:	4313      	orrs	r3, r2
 800619a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	693a      	ldr	r2, [r7, #16]
 80061a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	2203      	movs	r2, #3
 80061a8:	4013      	ands	r3, r2
 80061aa:	2b03      	cmp	r3, #3
 80061ac:	d017      	beq.n	80061de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	005b      	lsls	r3, r3, #1
 80061b8:	2203      	movs	r2, #3
 80061ba:	409a      	lsls	r2, r3
 80061bc:	0013      	movs	r3, r2
 80061be:	43da      	mvns	r2, r3
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	4013      	ands	r3, r2
 80061c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	689a      	ldr	r2, [r3, #8]
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	005b      	lsls	r3, r3, #1
 80061ce:	409a      	lsls	r2, r3
 80061d0:	0013      	movs	r3, r2
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	2203      	movs	r2, #3
 80061e4:	4013      	ands	r3, r2
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d123      	bne.n	8006232 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	08da      	lsrs	r2, r3, #3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	3208      	adds	r2, #8
 80061f2:	0092      	lsls	r2, r2, #2
 80061f4:	58d3      	ldr	r3, [r2, r3]
 80061f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	2207      	movs	r2, #7
 80061fc:	4013      	ands	r3, r2
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	220f      	movs	r2, #15
 8006202:	409a      	lsls	r2, r3
 8006204:	0013      	movs	r3, r2
 8006206:	43da      	mvns	r2, r3
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	4013      	ands	r3, r2
 800620c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	691a      	ldr	r2, [r3, #16]
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	2107      	movs	r1, #7
 8006216:	400b      	ands	r3, r1
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	409a      	lsls	r2, r3
 800621c:	0013      	movs	r3, r2
 800621e:	693a      	ldr	r2, [r7, #16]
 8006220:	4313      	orrs	r3, r2
 8006222:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	08da      	lsrs	r2, r3, #3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	3208      	adds	r2, #8
 800622c:	0092      	lsls	r2, r2, #2
 800622e:	6939      	ldr	r1, [r7, #16]
 8006230:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	005b      	lsls	r3, r3, #1
 800623c:	2203      	movs	r2, #3
 800623e:	409a      	lsls	r2, r3
 8006240:	0013      	movs	r3, r2
 8006242:	43da      	mvns	r2, r3
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	4013      	ands	r3, r2
 8006248:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	2203      	movs	r2, #3
 8006250:	401a      	ands	r2, r3
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	005b      	lsls	r3, r3, #1
 8006256:	409a      	lsls	r2, r3
 8006258:	0013      	movs	r3, r2
 800625a:	693a      	ldr	r2, [r7, #16]
 800625c:	4313      	orrs	r3, r2
 800625e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	693a      	ldr	r2, [r7, #16]
 8006264:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	685a      	ldr	r2, [r3, #4]
 800626a:	23c0      	movs	r3, #192	; 0xc0
 800626c:	029b      	lsls	r3, r3, #10
 800626e:	4013      	ands	r3, r2
 8006270:	d100      	bne.n	8006274 <HAL_GPIO_Init+0x174>
 8006272:	e092      	b.n	800639a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8006274:	4a50      	ldr	r2, [pc, #320]	; (80063b8 <HAL_GPIO_Init+0x2b8>)
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	089b      	lsrs	r3, r3, #2
 800627a:	3318      	adds	r3, #24
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	589b      	ldr	r3, [r3, r2]
 8006280:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	2203      	movs	r2, #3
 8006286:	4013      	ands	r3, r2
 8006288:	00db      	lsls	r3, r3, #3
 800628a:	220f      	movs	r2, #15
 800628c:	409a      	lsls	r2, r3
 800628e:	0013      	movs	r3, r2
 8006290:	43da      	mvns	r2, r3
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	4013      	ands	r3, r2
 8006296:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	23a0      	movs	r3, #160	; 0xa0
 800629c:	05db      	lsls	r3, r3, #23
 800629e:	429a      	cmp	r2, r3
 80062a0:	d013      	beq.n	80062ca <HAL_GPIO_Init+0x1ca>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a45      	ldr	r2, [pc, #276]	; (80063bc <HAL_GPIO_Init+0x2bc>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d00d      	beq.n	80062c6 <HAL_GPIO_Init+0x1c6>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a44      	ldr	r2, [pc, #272]	; (80063c0 <HAL_GPIO_Init+0x2c0>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d007      	beq.n	80062c2 <HAL_GPIO_Init+0x1c2>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a43      	ldr	r2, [pc, #268]	; (80063c4 <HAL_GPIO_Init+0x2c4>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d101      	bne.n	80062be <HAL_GPIO_Init+0x1be>
 80062ba:	2303      	movs	r3, #3
 80062bc:	e006      	b.n	80062cc <HAL_GPIO_Init+0x1cc>
 80062be:	2305      	movs	r3, #5
 80062c0:	e004      	b.n	80062cc <HAL_GPIO_Init+0x1cc>
 80062c2:	2302      	movs	r3, #2
 80062c4:	e002      	b.n	80062cc <HAL_GPIO_Init+0x1cc>
 80062c6:	2301      	movs	r3, #1
 80062c8:	e000      	b.n	80062cc <HAL_GPIO_Init+0x1cc>
 80062ca:	2300      	movs	r3, #0
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	2103      	movs	r1, #3
 80062d0:	400a      	ands	r2, r1
 80062d2:	00d2      	lsls	r2, r2, #3
 80062d4:	4093      	lsls	r3, r2
 80062d6:	693a      	ldr	r2, [r7, #16]
 80062d8:	4313      	orrs	r3, r2
 80062da:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80062dc:	4936      	ldr	r1, [pc, #216]	; (80063b8 <HAL_GPIO_Init+0x2b8>)
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	089b      	lsrs	r3, r3, #2
 80062e2:	3318      	adds	r3, #24
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	693a      	ldr	r2, [r7, #16]
 80062e8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80062ea:	4b33      	ldr	r3, [pc, #204]	; (80063b8 <HAL_GPIO_Init+0x2b8>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	43da      	mvns	r2, r3
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	4013      	ands	r3, r2
 80062f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	685a      	ldr	r2, [r3, #4]
 80062fe:	2380      	movs	r3, #128	; 0x80
 8006300:	035b      	lsls	r3, r3, #13
 8006302:	4013      	ands	r3, r2
 8006304:	d003      	beq.n	800630e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8006306:	693a      	ldr	r2, [r7, #16]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	4313      	orrs	r3, r2
 800630c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800630e:	4b2a      	ldr	r3, [pc, #168]	; (80063b8 <HAL_GPIO_Init+0x2b8>)
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8006314:	4b28      	ldr	r3, [pc, #160]	; (80063b8 <HAL_GPIO_Init+0x2b8>)
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	43da      	mvns	r2, r3
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	4013      	ands	r3, r2
 8006322:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	685a      	ldr	r2, [r3, #4]
 8006328:	2380      	movs	r3, #128	; 0x80
 800632a:	039b      	lsls	r3, r3, #14
 800632c:	4013      	ands	r3, r2
 800632e:	d003      	beq.n	8006338 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8006330:	693a      	ldr	r2, [r7, #16]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	4313      	orrs	r3, r2
 8006336:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006338:	4b1f      	ldr	r3, [pc, #124]	; (80063b8 <HAL_GPIO_Init+0x2b8>)
 800633a:	693a      	ldr	r2, [r7, #16]
 800633c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800633e:	4a1e      	ldr	r2, [pc, #120]	; (80063b8 <HAL_GPIO_Init+0x2b8>)
 8006340:	2384      	movs	r3, #132	; 0x84
 8006342:	58d3      	ldr	r3, [r2, r3]
 8006344:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	43da      	mvns	r2, r3
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	4013      	ands	r3, r2
 800634e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	685a      	ldr	r2, [r3, #4]
 8006354:	2380      	movs	r3, #128	; 0x80
 8006356:	029b      	lsls	r3, r3, #10
 8006358:	4013      	ands	r3, r2
 800635a:	d003      	beq.n	8006364 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	4313      	orrs	r3, r2
 8006362:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006364:	4914      	ldr	r1, [pc, #80]	; (80063b8 <HAL_GPIO_Init+0x2b8>)
 8006366:	2284      	movs	r2, #132	; 0x84
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800636c:	4a12      	ldr	r2, [pc, #72]	; (80063b8 <HAL_GPIO_Init+0x2b8>)
 800636e:	2380      	movs	r3, #128	; 0x80
 8006370:	58d3      	ldr	r3, [r2, r3]
 8006372:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	43da      	mvns	r2, r3
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	4013      	ands	r3, r2
 800637c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	685a      	ldr	r2, [r3, #4]
 8006382:	2380      	movs	r3, #128	; 0x80
 8006384:	025b      	lsls	r3, r3, #9
 8006386:	4013      	ands	r3, r2
 8006388:	d003      	beq.n	8006392 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800638a:	693a      	ldr	r2, [r7, #16]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	4313      	orrs	r3, r2
 8006390:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006392:	4909      	ldr	r1, [pc, #36]	; (80063b8 <HAL_GPIO_Init+0x2b8>)
 8006394:	2280      	movs	r2, #128	; 0x80
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	3301      	adds	r3, #1
 800639e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	40da      	lsrs	r2, r3
 80063a8:	1e13      	subs	r3, r2, #0
 80063aa:	d000      	beq.n	80063ae <HAL_GPIO_Init+0x2ae>
 80063ac:	e6b0      	b.n	8006110 <HAL_GPIO_Init+0x10>
  }
}
 80063ae:	46c0      	nop			; (mov r8, r8)
 80063b0:	46c0      	nop			; (mov r8, r8)
 80063b2:	46bd      	mov	sp, r7
 80063b4:	b006      	add	sp, #24
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	40021800 	.word	0x40021800
 80063bc:	50000400 	.word	0x50000400
 80063c0:	50000800 	.word	0x50000800
 80063c4:	50000c00 	.word	0x50000c00

080063c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d101      	bne.n	80063da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e082      	b.n	80064e0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2241      	movs	r2, #65	; 0x41
 80063de:	5c9b      	ldrb	r3, [r3, r2]
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d107      	bne.n	80063f6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2240      	movs	r2, #64	; 0x40
 80063ea:	2100      	movs	r1, #0
 80063ec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	0018      	movs	r0, r3
 80063f2:	f7fe fb5d 	bl	8004ab0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2241      	movs	r2, #65	; 0x41
 80063fa:	2124      	movs	r1, #36	; 0x24
 80063fc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2101      	movs	r1, #1
 800640a:	438a      	bics	r2, r1
 800640c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685a      	ldr	r2, [r3, #4]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4934      	ldr	r1, [pc, #208]	; (80064e8 <HAL_I2C_Init+0x120>)
 8006418:	400a      	ands	r2, r1
 800641a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	689a      	ldr	r2, [r3, #8]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4931      	ldr	r1, [pc, #196]	; (80064ec <HAL_I2C_Init+0x124>)
 8006428:	400a      	ands	r2, r1
 800642a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	2b01      	cmp	r3, #1
 8006432:	d108      	bne.n	8006446 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	689a      	ldr	r2, [r3, #8]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2180      	movs	r1, #128	; 0x80
 800643e:	0209      	lsls	r1, r1, #8
 8006440:	430a      	orrs	r2, r1
 8006442:	609a      	str	r2, [r3, #8]
 8006444:	e007      	b.n	8006456 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	689a      	ldr	r2, [r3, #8]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2184      	movs	r1, #132	; 0x84
 8006450:	0209      	lsls	r1, r1, #8
 8006452:	430a      	orrs	r2, r1
 8006454:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	2b02      	cmp	r3, #2
 800645c:	d104      	bne.n	8006468 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2280      	movs	r2, #128	; 0x80
 8006464:	0112      	lsls	r2, r2, #4
 8006466:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	685a      	ldr	r2, [r3, #4]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	491f      	ldr	r1, [pc, #124]	; (80064f0 <HAL_I2C_Init+0x128>)
 8006474:	430a      	orrs	r2, r1
 8006476:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68da      	ldr	r2, [r3, #12]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	491a      	ldr	r1, [pc, #104]	; (80064ec <HAL_I2C_Init+0x124>)
 8006484:	400a      	ands	r2, r1
 8006486:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	691a      	ldr	r2, [r3, #16]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	695b      	ldr	r3, [r3, #20]
 8006490:	431a      	orrs	r2, r3
 8006492:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	430a      	orrs	r2, r1
 80064a0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	69d9      	ldr	r1, [r3, #28]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a1a      	ldr	r2, [r3, #32]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	430a      	orrs	r2, r1
 80064b0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2101      	movs	r1, #1
 80064be:	430a      	orrs	r2, r1
 80064c0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2241      	movs	r2, #65	; 0x41
 80064cc:	2120      	movs	r1, #32
 80064ce:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2242      	movs	r2, #66	; 0x42
 80064da:	2100      	movs	r1, #0
 80064dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	0018      	movs	r0, r3
 80064e2:	46bd      	mov	sp, r7
 80064e4:	b002      	add	sp, #8
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	f0ffffff 	.word	0xf0ffffff
 80064ec:	ffff7fff 	.word	0xffff7fff
 80064f0:	02008000 	.word	0x02008000

080064f4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80064f4:	b590      	push	{r4, r7, lr}
 80064f6:	b089      	sub	sp, #36	; 0x24
 80064f8:	af02      	add	r7, sp, #8
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	0008      	movs	r0, r1
 80064fe:	607a      	str	r2, [r7, #4]
 8006500:	0019      	movs	r1, r3
 8006502:	230a      	movs	r3, #10
 8006504:	18fb      	adds	r3, r7, r3
 8006506:	1c02      	adds	r2, r0, #0
 8006508:	801a      	strh	r2, [r3, #0]
 800650a:	2308      	movs	r3, #8
 800650c:	18fb      	adds	r3, r7, r3
 800650e:	1c0a      	adds	r2, r1, #0
 8006510:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2241      	movs	r2, #65	; 0x41
 8006516:	5c9b      	ldrb	r3, [r3, r2]
 8006518:	b2db      	uxtb	r3, r3
 800651a:	2b20      	cmp	r3, #32
 800651c:	d000      	beq.n	8006520 <HAL_I2C_Master_Transmit+0x2c>
 800651e:	e0e7      	b.n	80066f0 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2240      	movs	r2, #64	; 0x40
 8006524:	5c9b      	ldrb	r3, [r3, r2]
 8006526:	2b01      	cmp	r3, #1
 8006528:	d101      	bne.n	800652e <HAL_I2C_Master_Transmit+0x3a>
 800652a:	2302      	movs	r3, #2
 800652c:	e0e1      	b.n	80066f2 <HAL_I2C_Master_Transmit+0x1fe>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2240      	movs	r2, #64	; 0x40
 8006532:	2101      	movs	r1, #1
 8006534:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006536:	f7fe ff99 	bl	800546c <HAL_GetTick>
 800653a:	0003      	movs	r3, r0
 800653c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800653e:	2380      	movs	r3, #128	; 0x80
 8006540:	0219      	lsls	r1, r3, #8
 8006542:	68f8      	ldr	r0, [r7, #12]
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	9300      	str	r3, [sp, #0]
 8006548:	2319      	movs	r3, #25
 800654a:	2201      	movs	r2, #1
 800654c:	f000 fe76 	bl	800723c <I2C_WaitOnFlagUntilTimeout>
 8006550:	1e03      	subs	r3, r0, #0
 8006552:	d001      	beq.n	8006558 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	e0cc      	b.n	80066f2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2241      	movs	r2, #65	; 0x41
 800655c:	2121      	movs	r1, #33	; 0x21
 800655e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2242      	movs	r2, #66	; 0x42
 8006564:	2110      	movs	r1, #16
 8006566:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2208      	movs	r2, #8
 8006578:	18ba      	adds	r2, r7, r2
 800657a:	8812      	ldrh	r2, [r2, #0]
 800657c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006588:	b29b      	uxth	r3, r3
 800658a:	2bff      	cmp	r3, #255	; 0xff
 800658c:	d911      	bls.n	80065b2 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	22ff      	movs	r2, #255	; 0xff
 8006592:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006598:	b2da      	uxtb	r2, r3
 800659a:	2380      	movs	r3, #128	; 0x80
 800659c:	045c      	lsls	r4, r3, #17
 800659e:	230a      	movs	r3, #10
 80065a0:	18fb      	adds	r3, r7, r3
 80065a2:	8819      	ldrh	r1, [r3, #0]
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	4b55      	ldr	r3, [pc, #340]	; (80066fc <HAL_I2C_Master_Transmit+0x208>)
 80065a8:	9300      	str	r3, [sp, #0]
 80065aa:	0023      	movs	r3, r4
 80065ac:	f001 f80c 	bl	80075c8 <I2C_TransferConfig>
 80065b0:	e075      	b.n	800669e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065b6:	b29a      	uxth	r2, r3
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065c0:	b2da      	uxtb	r2, r3
 80065c2:	2380      	movs	r3, #128	; 0x80
 80065c4:	049c      	lsls	r4, r3, #18
 80065c6:	230a      	movs	r3, #10
 80065c8:	18fb      	adds	r3, r7, r3
 80065ca:	8819      	ldrh	r1, [r3, #0]
 80065cc:	68f8      	ldr	r0, [r7, #12]
 80065ce:	4b4b      	ldr	r3, [pc, #300]	; (80066fc <HAL_I2C_Master_Transmit+0x208>)
 80065d0:	9300      	str	r3, [sp, #0]
 80065d2:	0023      	movs	r3, r4
 80065d4:	f000 fff8 	bl	80075c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80065d8:	e061      	b.n	800669e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	0018      	movs	r0, r3
 80065e2:	f000 fe6a 	bl	80072ba <I2C_WaitOnTXISFlagUntilTimeout>
 80065e6:	1e03      	subs	r3, r0, #0
 80065e8:	d001      	beq.n	80065ee <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e081      	b.n	80066f2 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f2:	781a      	ldrb	r2, [r3, #0]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fe:	1c5a      	adds	r2, r3, #1
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006608:	b29b      	uxth	r3, r3
 800660a:	3b01      	subs	r3, #1
 800660c:	b29a      	uxth	r2, r3
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006616:	3b01      	subs	r3, #1
 8006618:	b29a      	uxth	r2, r3
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006622:	b29b      	uxth	r3, r3
 8006624:	2b00      	cmp	r3, #0
 8006626:	d03a      	beq.n	800669e <HAL_I2C_Master_Transmit+0x1aa>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800662c:	2b00      	cmp	r3, #0
 800662e:	d136      	bne.n	800669e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006630:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	9300      	str	r3, [sp, #0]
 8006638:	0013      	movs	r3, r2
 800663a:	2200      	movs	r2, #0
 800663c:	2180      	movs	r1, #128	; 0x80
 800663e:	f000 fdfd 	bl	800723c <I2C_WaitOnFlagUntilTimeout>
 8006642:	1e03      	subs	r3, r0, #0
 8006644:	d001      	beq.n	800664a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e053      	b.n	80066f2 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800664e:	b29b      	uxth	r3, r3
 8006650:	2bff      	cmp	r3, #255	; 0xff
 8006652:	d911      	bls.n	8006678 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	22ff      	movs	r2, #255	; 0xff
 8006658:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800665e:	b2da      	uxtb	r2, r3
 8006660:	2380      	movs	r3, #128	; 0x80
 8006662:	045c      	lsls	r4, r3, #17
 8006664:	230a      	movs	r3, #10
 8006666:	18fb      	adds	r3, r7, r3
 8006668:	8819      	ldrh	r1, [r3, #0]
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	2300      	movs	r3, #0
 800666e:	9300      	str	r3, [sp, #0]
 8006670:	0023      	movs	r3, r4
 8006672:	f000 ffa9 	bl	80075c8 <I2C_TransferConfig>
 8006676:	e012      	b.n	800669e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800667c:	b29a      	uxth	r2, r3
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006686:	b2da      	uxtb	r2, r3
 8006688:	2380      	movs	r3, #128	; 0x80
 800668a:	049c      	lsls	r4, r3, #18
 800668c:	230a      	movs	r3, #10
 800668e:	18fb      	adds	r3, r7, r3
 8006690:	8819      	ldrh	r1, [r3, #0]
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	2300      	movs	r3, #0
 8006696:	9300      	str	r3, [sp, #0]
 8006698:	0023      	movs	r3, r4
 800669a:	f000 ff95 	bl	80075c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d198      	bne.n	80065da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066a8:	697a      	ldr	r2, [r7, #20]
 80066aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	0018      	movs	r0, r3
 80066b0:	f000 fe42 	bl	8007338 <I2C_WaitOnSTOPFlagUntilTimeout>
 80066b4:	1e03      	subs	r3, r0, #0
 80066b6:	d001      	beq.n	80066bc <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e01a      	b.n	80066f2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2220      	movs	r2, #32
 80066c2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	685a      	ldr	r2, [r3, #4]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	490c      	ldr	r1, [pc, #48]	; (8006700 <HAL_I2C_Master_Transmit+0x20c>)
 80066d0:	400a      	ands	r2, r1
 80066d2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2241      	movs	r2, #65	; 0x41
 80066d8:	2120      	movs	r1, #32
 80066da:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2242      	movs	r2, #66	; 0x42
 80066e0:	2100      	movs	r1, #0
 80066e2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2240      	movs	r2, #64	; 0x40
 80066e8:	2100      	movs	r1, #0
 80066ea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80066ec:	2300      	movs	r3, #0
 80066ee:	e000      	b.n	80066f2 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80066f0:	2302      	movs	r3, #2
  }
}
 80066f2:	0018      	movs	r0, r3
 80066f4:	46bd      	mov	sp, r7
 80066f6:	b007      	add	sp, #28
 80066f8:	bd90      	pop	{r4, r7, pc}
 80066fa:	46c0      	nop			; (mov r8, r8)
 80066fc:	80002000 	.word	0x80002000
 8006700:	fe00e800 	.word	0xfe00e800

08006704 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006720:	2b00      	cmp	r3, #0
 8006722:	d005      	beq.n	8006730 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006728:	68ba      	ldr	r2, [r7, #8]
 800672a:	68f9      	ldr	r1, [r7, #12]
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	4798      	blx	r3
  }
}
 8006730:	46c0      	nop			; (mov r8, r8)
 8006732:	46bd      	mov	sp, r7
 8006734:	b004      	add	sp, #16
 8006736:	bd80      	pop	{r7, pc}

08006738 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b086      	sub	sp, #24
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	699b      	ldr	r3, [r3, #24]
 8006746:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	0a1b      	lsrs	r3, r3, #8
 8006754:	001a      	movs	r2, r3
 8006756:	2301      	movs	r3, #1
 8006758:	4013      	ands	r3, r2
 800675a:	d010      	beq.n	800677e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	09db      	lsrs	r3, r3, #7
 8006760:	001a      	movs	r2, r3
 8006762:	2301      	movs	r3, #1
 8006764:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006766:	d00a      	beq.n	800677e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800676c:	2201      	movs	r2, #1
 800676e:	431a      	orrs	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2280      	movs	r2, #128	; 0x80
 800677a:	0052      	lsls	r2, r2, #1
 800677c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	0a9b      	lsrs	r3, r3, #10
 8006782:	001a      	movs	r2, r3
 8006784:	2301      	movs	r3, #1
 8006786:	4013      	ands	r3, r2
 8006788:	d010      	beq.n	80067ac <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	09db      	lsrs	r3, r3, #7
 800678e:	001a      	movs	r2, r3
 8006790:	2301      	movs	r3, #1
 8006792:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006794:	d00a      	beq.n	80067ac <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800679a:	2208      	movs	r2, #8
 800679c:	431a      	orrs	r2, r3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2280      	movs	r2, #128	; 0x80
 80067a8:	00d2      	lsls	r2, r2, #3
 80067aa:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	0a5b      	lsrs	r3, r3, #9
 80067b0:	001a      	movs	r2, r3
 80067b2:	2301      	movs	r3, #1
 80067b4:	4013      	ands	r3, r2
 80067b6:	d010      	beq.n	80067da <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	09db      	lsrs	r3, r3, #7
 80067bc:	001a      	movs	r2, r3
 80067be:	2301      	movs	r3, #1
 80067c0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80067c2:	d00a      	beq.n	80067da <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c8:	2202      	movs	r2, #2
 80067ca:	431a      	orrs	r2, r3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2280      	movs	r2, #128	; 0x80
 80067d6:	0092      	lsls	r2, r2, #2
 80067d8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067de:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	220b      	movs	r2, #11
 80067e4:	4013      	ands	r3, r2
 80067e6:	d005      	beq.n	80067f4 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	0011      	movs	r1, r2
 80067ee:	0018      	movs	r0, r3
 80067f0:	f000 fbd8 	bl	8006fa4 <I2C_ITError>
  }
}
 80067f4:	46c0      	nop			; (mov r8, r8)
 80067f6:	46bd      	mov	sp, r7
 80067f8:	b006      	add	sp, #24
 80067fa:	bd80      	pop	{r7, pc}

080067fc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006804:	46c0      	nop			; (mov r8, r8)
 8006806:	46bd      	mov	sp, r7
 8006808:	b002      	add	sp, #8
 800680a:	bd80      	pop	{r7, pc}

0800680c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006814:	46c0      	nop			; (mov r8, r8)
 8006816:	46bd      	mov	sp, r7
 8006818:	b002      	add	sp, #8
 800681a:	bd80      	pop	{r7, pc}

0800681c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b082      	sub	sp, #8
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	0008      	movs	r0, r1
 8006826:	0011      	movs	r1, r2
 8006828:	1cfb      	adds	r3, r7, #3
 800682a:	1c02      	adds	r2, r0, #0
 800682c:	701a      	strb	r2, [r3, #0]
 800682e:	003b      	movs	r3, r7
 8006830:	1c0a      	adds	r2, r1, #0
 8006832:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006834:	46c0      	nop			; (mov r8, r8)
 8006836:	46bd      	mov	sp, r7
 8006838:	b002      	add	sp, #8
 800683a:	bd80      	pop	{r7, pc}

0800683c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b082      	sub	sp, #8
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8006844:	46c0      	nop			; (mov r8, r8)
 8006846:	46bd      	mov	sp, r7
 8006848:	b002      	add	sp, #8
 800684a:	bd80      	pop	{r7, pc}

0800684c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b082      	sub	sp, #8
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006854:	46c0      	nop			; (mov r8, r8)
 8006856:	46bd      	mov	sp, r7
 8006858:	b002      	add	sp, #8
 800685a:	bd80      	pop	{r7, pc}

0800685c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006864:	46c0      	nop			; (mov r8, r8)
 8006866:	46bd      	mov	sp, r7
 8006868:	b002      	add	sp, #8
 800686a:	bd80      	pop	{r7, pc}

0800686c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b086      	sub	sp, #24
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800687c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2240      	movs	r2, #64	; 0x40
 8006886:	5c9b      	ldrb	r3, [r3, r2]
 8006888:	2b01      	cmp	r3, #1
 800688a:	d101      	bne.n	8006890 <I2C_Slave_ISR_IT+0x24>
 800688c:	2302      	movs	r3, #2
 800688e:	e0fa      	b.n	8006a86 <I2C_Slave_ISR_IT+0x21a>
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2240      	movs	r2, #64	; 0x40
 8006894:	2101      	movs	r1, #1
 8006896:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	095b      	lsrs	r3, r3, #5
 800689c:	001a      	movs	r2, r3
 800689e:	2301      	movs	r3, #1
 80068a0:	4013      	ands	r3, r2
 80068a2:	d00b      	beq.n	80068bc <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	095b      	lsrs	r3, r3, #5
 80068a8:	001a      	movs	r2, r3
 80068aa:	2301      	movs	r3, #1
 80068ac:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80068ae:	d005      	beq.n	80068bc <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	0011      	movs	r1, r2
 80068b6:	0018      	movs	r0, r3
 80068b8:	f000 f9f6 	bl	8006ca8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	091b      	lsrs	r3, r3, #4
 80068c0:	001a      	movs	r2, r3
 80068c2:	2301      	movs	r3, #1
 80068c4:	4013      	ands	r3, r2
 80068c6:	d054      	beq.n	8006972 <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	091b      	lsrs	r3, r3, #4
 80068cc:	001a      	movs	r2, r3
 80068ce:	2301      	movs	r3, #1
 80068d0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80068d2:	d04e      	beq.n	8006972 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068d8:	b29b      	uxth	r3, r3
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d12d      	bne.n	800693a <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2241      	movs	r2, #65	; 0x41
 80068e2:	5c9b      	ldrb	r3, [r3, r2]
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	2b28      	cmp	r3, #40	; 0x28
 80068e8:	d10b      	bne.n	8006902 <I2C_Slave_ISR_IT+0x96>
 80068ea:	697a      	ldr	r2, [r7, #20]
 80068ec:	2380      	movs	r3, #128	; 0x80
 80068ee:	049b      	lsls	r3, r3, #18
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d106      	bne.n	8006902 <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	0011      	movs	r1, r2
 80068fa:	0018      	movs	r0, r3
 80068fc:	f000 faf8 	bl	8006ef0 <I2C_ITListenCplt>
 8006900:	e036      	b.n	8006970 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2241      	movs	r2, #65	; 0x41
 8006906:	5c9b      	ldrb	r3, [r3, r2]
 8006908:	b2db      	uxtb	r3, r3
 800690a:	2b29      	cmp	r3, #41	; 0x29
 800690c:	d110      	bne.n	8006930 <I2C_Slave_ISR_IT+0xc4>
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	4a5f      	ldr	r2, [pc, #380]	; (8006a90 <I2C_Slave_ISR_IT+0x224>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d00c      	beq.n	8006930 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2210      	movs	r2, #16
 800691c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	0018      	movs	r0, r3
 8006922:	f000 fc4a 	bl	80071ba <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	0018      	movs	r0, r3
 800692a:	f000 f957 	bl	8006bdc <I2C_ITSlaveSeqCplt>
 800692e:	e01f      	b.n	8006970 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2210      	movs	r2, #16
 8006936:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006938:	e09d      	b.n	8006a76 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2210      	movs	r2, #16
 8006940:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006946:	2204      	movs	r2, #4
 8006948:	431a      	orrs	r2, r3
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d005      	beq.n	8006960 <I2C_Slave_ISR_IT+0xf4>
 8006954:	697a      	ldr	r2, [r7, #20]
 8006956:	2380      	movs	r3, #128	; 0x80
 8006958:	045b      	lsls	r3, r3, #17
 800695a:	429a      	cmp	r2, r3
 800695c:	d000      	beq.n	8006960 <I2C_Slave_ISR_IT+0xf4>
 800695e:	e08a      	b.n	8006a76 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	0011      	movs	r1, r2
 8006968:	0018      	movs	r0, r3
 800696a:	f000 fb1b 	bl	8006fa4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800696e:	e082      	b.n	8006a76 <I2C_Slave_ISR_IT+0x20a>
 8006970:	e081      	b.n	8006a76 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	089b      	lsrs	r3, r3, #2
 8006976:	001a      	movs	r2, r3
 8006978:	2301      	movs	r3, #1
 800697a:	4013      	ands	r3, r2
 800697c:	d031      	beq.n	80069e2 <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	089b      	lsrs	r3, r3, #2
 8006982:	001a      	movs	r2, r3
 8006984:	2301      	movs	r3, #1
 8006986:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006988:	d02b      	beq.n	80069e2 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800698e:	b29b      	uxth	r3, r3
 8006990:	2b00      	cmp	r3, #0
 8006992:	d018      	beq.n	80069c6 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699e:	b2d2      	uxtb	r2, r2
 80069a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a6:	1c5a      	adds	r2, r3, #1
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069b0:	3b01      	subs	r3, #1
 80069b2:	b29a      	uxth	r2, r3
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069bc:	b29b      	uxth	r3, r3
 80069be:	3b01      	subs	r3, #1
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d154      	bne.n	8006a7a <I2C_Slave_ISR_IT+0x20e>
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	4a2f      	ldr	r2, [pc, #188]	; (8006a90 <I2C_Slave_ISR_IT+0x224>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d050      	beq.n	8006a7a <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	0018      	movs	r0, r3
 80069dc:	f000 f8fe 	bl	8006bdc <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80069e0:	e04b      	b.n	8006a7a <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	08db      	lsrs	r3, r3, #3
 80069e6:	001a      	movs	r2, r3
 80069e8:	2301      	movs	r3, #1
 80069ea:	4013      	ands	r3, r2
 80069ec:	d00c      	beq.n	8006a08 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	08db      	lsrs	r3, r3, #3
 80069f2:	001a      	movs	r2, r3
 80069f4:	2301      	movs	r3, #1
 80069f6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80069f8:	d006      	beq.n	8006a08 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80069fa:	693a      	ldr	r2, [r7, #16]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	0011      	movs	r1, r2
 8006a00:	0018      	movs	r0, r3
 8006a02:	f000 f847 	bl	8006a94 <I2C_ITAddrCplt>
 8006a06:	e039      	b.n	8006a7c <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	085b      	lsrs	r3, r3, #1
 8006a0c:	001a      	movs	r2, r3
 8006a0e:	2301      	movs	r3, #1
 8006a10:	4013      	ands	r3, r2
 8006a12:	d033      	beq.n	8006a7c <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	085b      	lsrs	r3, r3, #1
 8006a18:	001a      	movs	r2, r3
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006a1e:	d02d      	beq.n	8006a7c <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d018      	beq.n	8006a5c <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2e:	781a      	ldrb	r2, [r3, #0]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3a:	1c5a      	adds	r2, r3, #1
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	3b01      	subs	r3, #1
 8006a48:	b29a      	uxth	r2, r3
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a52:	3b01      	subs	r3, #1
 8006a54:	b29a      	uxth	r2, r3
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	851a      	strh	r2, [r3, #40]	; 0x28
 8006a5a:	e00f      	b.n	8006a7c <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006a5c:	697a      	ldr	r2, [r7, #20]
 8006a5e:	2380      	movs	r3, #128	; 0x80
 8006a60:	045b      	lsls	r3, r3, #17
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d002      	beq.n	8006a6c <I2C_Slave_ISR_IT+0x200>
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d107      	bne.n	8006a7c <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	0018      	movs	r0, r3
 8006a70:	f000 f8b4 	bl	8006bdc <I2C_ITSlaveSeqCplt>
 8006a74:	e002      	b.n	8006a7c <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 8006a76:	46c0      	nop			; (mov r8, r8)
 8006a78:	e000      	b.n	8006a7c <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8006a7a:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2240      	movs	r2, #64	; 0x40
 8006a80:	2100      	movs	r1, #0
 8006a82:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	0018      	movs	r0, r3
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	b006      	add	sp, #24
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	46c0      	nop			; (mov r8, r8)
 8006a90:	ffff0000 	.word	0xffff0000

08006a94 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006a94:	b5b0      	push	{r4, r5, r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2241      	movs	r2, #65	; 0x41
 8006aa2:	5c9b      	ldrb	r3, [r3, r2]
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	001a      	movs	r2, r3
 8006aa8:	2328      	movs	r3, #40	; 0x28
 8006aaa:	4013      	ands	r3, r2
 8006aac:	2b28      	cmp	r3, #40	; 0x28
 8006aae:	d000      	beq.n	8006ab2 <I2C_ITAddrCplt+0x1e>
 8006ab0:	e088      	b.n	8006bc4 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	699b      	ldr	r3, [r3, #24]
 8006ab8:	0c1b      	lsrs	r3, r3, #16
 8006aba:	b2da      	uxtb	r2, r3
 8006abc:	250f      	movs	r5, #15
 8006abe:	197b      	adds	r3, r7, r5
 8006ac0:	2101      	movs	r1, #1
 8006ac2:	400a      	ands	r2, r1
 8006ac4:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	699b      	ldr	r3, [r3, #24]
 8006acc:	0c1b      	lsrs	r3, r3, #16
 8006ace:	b29a      	uxth	r2, r3
 8006ad0:	200c      	movs	r0, #12
 8006ad2:	183b      	adds	r3, r7, r0
 8006ad4:	21fe      	movs	r1, #254	; 0xfe
 8006ad6:	400a      	ands	r2, r1
 8006ad8:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	b29a      	uxth	r2, r3
 8006ae2:	240a      	movs	r4, #10
 8006ae4:	193b      	adds	r3, r7, r4
 8006ae6:	0592      	lsls	r2, r2, #22
 8006ae8:	0d92      	lsrs	r2, r2, #22
 8006aea:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	2308      	movs	r3, #8
 8006af6:	18fb      	adds	r3, r7, r3
 8006af8:	21fe      	movs	r1, #254	; 0xfe
 8006afa:	400a      	ands	r2, r1
 8006afc:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d148      	bne.n	8006b98 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006b06:	0021      	movs	r1, r4
 8006b08:	187b      	adds	r3, r7, r1
 8006b0a:	881b      	ldrh	r3, [r3, #0]
 8006b0c:	09db      	lsrs	r3, r3, #7
 8006b0e:	b29a      	uxth	r2, r3
 8006b10:	183b      	adds	r3, r7, r0
 8006b12:	881b      	ldrh	r3, [r3, #0]
 8006b14:	4053      	eors	r3, r2
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	001a      	movs	r2, r3
 8006b1a:	2306      	movs	r3, #6
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	d120      	bne.n	8006b62 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8006b20:	183b      	adds	r3, r7, r0
 8006b22:	187a      	adds	r2, r7, r1
 8006b24:	8812      	ldrh	r2, [r2, #0]
 8006b26:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b2c:	1c5a      	adds	r2, r3, #1
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	d14c      	bne.n	8006bd4 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2208      	movs	r2, #8
 8006b46:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2240      	movs	r2, #64	; 0x40
 8006b4c:	2100      	movs	r1, #0
 8006b4e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006b50:	183b      	adds	r3, r7, r0
 8006b52:	881a      	ldrh	r2, [r3, #0]
 8006b54:	197b      	adds	r3, r7, r5
 8006b56:	7819      	ldrb	r1, [r3, #0]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	0018      	movs	r0, r3
 8006b5c:	f7ff fe5e 	bl	800681c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006b60:	e038      	b.n	8006bd4 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8006b62:	240c      	movs	r4, #12
 8006b64:	193b      	adds	r3, r7, r4
 8006b66:	2208      	movs	r2, #8
 8006b68:	18ba      	adds	r2, r7, r2
 8006b6a:	8812      	ldrh	r2, [r2, #0]
 8006b6c:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006b6e:	2380      	movs	r3, #128	; 0x80
 8006b70:	021a      	lsls	r2, r3, #8
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	0011      	movs	r1, r2
 8006b76:	0018      	movs	r0, r3
 8006b78:	f000 fd60 	bl	800763c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2240      	movs	r2, #64	; 0x40
 8006b80:	2100      	movs	r1, #0
 8006b82:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006b84:	193b      	adds	r3, r7, r4
 8006b86:	881a      	ldrh	r2, [r3, #0]
 8006b88:	230f      	movs	r3, #15
 8006b8a:	18fb      	adds	r3, r7, r3
 8006b8c:	7819      	ldrb	r1, [r3, #0]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	0018      	movs	r0, r3
 8006b92:	f7ff fe43 	bl	800681c <HAL_I2C_AddrCallback>
}
 8006b96:	e01d      	b.n	8006bd4 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006b98:	2380      	movs	r3, #128	; 0x80
 8006b9a:	021a      	lsls	r2, r3, #8
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	0011      	movs	r1, r2
 8006ba0:	0018      	movs	r0, r3
 8006ba2:	f000 fd4b 	bl	800763c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2240      	movs	r2, #64	; 0x40
 8006baa:	2100      	movs	r1, #0
 8006bac:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006bae:	230c      	movs	r3, #12
 8006bb0:	18fb      	adds	r3, r7, r3
 8006bb2:	881a      	ldrh	r2, [r3, #0]
 8006bb4:	230f      	movs	r3, #15
 8006bb6:	18fb      	adds	r3, r7, r3
 8006bb8:	7819      	ldrb	r1, [r3, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	0018      	movs	r0, r3
 8006bbe:	f7ff fe2d 	bl	800681c <HAL_I2C_AddrCallback>
}
 8006bc2:	e007      	b.n	8006bd4 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2208      	movs	r2, #8
 8006bca:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2240      	movs	r2, #64	; 0x40
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	5499      	strb	r1, [r3, r2]
}
 8006bd4:	46c0      	nop			; (mov r8, r8)
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	b004      	add	sp, #16
 8006bda:	bdb0      	pop	{r4, r5, r7, pc}

08006bdc <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2242      	movs	r2, #66	; 0x42
 8006bf0:	2100      	movs	r1, #0
 8006bf2:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	0b9b      	lsrs	r3, r3, #14
 8006bf8:	001a      	movs	r2, r3
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	d008      	beq.n	8006c12 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4925      	ldr	r1, [pc, #148]	; (8006ca0 <I2C_ITSlaveSeqCplt+0xc4>)
 8006c0c:	400a      	ands	r2, r1
 8006c0e:	601a      	str	r2, [r3, #0]
 8006c10:	e00d      	b.n	8006c2e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	0bdb      	lsrs	r3, r3, #15
 8006c16:	001a      	movs	r2, r3
 8006c18:	2301      	movs	r3, #1
 8006c1a:	4013      	ands	r3, r2
 8006c1c:	d007      	beq.n	8006c2e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	491e      	ldr	r1, [pc, #120]	; (8006ca4 <I2C_ITSlaveSeqCplt+0xc8>)
 8006c2a:	400a      	ands	r2, r1
 8006c2c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2241      	movs	r2, #65	; 0x41
 8006c32:	5c9b      	ldrb	r3, [r3, r2]
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	2b29      	cmp	r3, #41	; 0x29
 8006c38:	d114      	bne.n	8006c64 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2241      	movs	r2, #65	; 0x41
 8006c3e:	2128      	movs	r1, #40	; 0x28
 8006c40:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2221      	movs	r2, #33	; 0x21
 8006c46:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2101      	movs	r1, #1
 8006c4c:	0018      	movs	r0, r3
 8006c4e:	f000 fcf5 	bl	800763c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2240      	movs	r2, #64	; 0x40
 8006c56:	2100      	movs	r1, #0
 8006c58:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	0018      	movs	r0, r3
 8006c5e:	f7ff fdcd 	bl	80067fc <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006c62:	e019      	b.n	8006c98 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2241      	movs	r2, #65	; 0x41
 8006c68:	5c9b      	ldrb	r3, [r3, r2]
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	2b2a      	cmp	r3, #42	; 0x2a
 8006c6e:	d113      	bne.n	8006c98 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2241      	movs	r2, #65	; 0x41
 8006c74:	2128      	movs	r1, #40	; 0x28
 8006c76:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2222      	movs	r2, #34	; 0x22
 8006c7c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2102      	movs	r1, #2
 8006c82:	0018      	movs	r0, r3
 8006c84:	f000 fcda 	bl	800763c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2240      	movs	r2, #64	; 0x40
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	0018      	movs	r0, r3
 8006c94:	f7ff fdba 	bl	800680c <HAL_I2C_SlaveRxCpltCallback>
}
 8006c98:	46c0      	nop			; (mov r8, r8)
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	b004      	add	sp, #16
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	ffffbfff 	.word	0xffffbfff
 8006ca4:	ffff7fff 	.word	0xffff7fff

08006ca8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b086      	sub	sp, #24
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006cbe:	200f      	movs	r0, #15
 8006cc0:	183b      	adds	r3, r7, r0
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	2141      	movs	r1, #65	; 0x41
 8006cc6:	5c52      	ldrb	r2, [r2, r1]
 8006cc8:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2220      	movs	r2, #32
 8006cd0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006cd2:	183b      	adds	r3, r7, r0
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	2b21      	cmp	r3, #33	; 0x21
 8006cd8:	d003      	beq.n	8006ce2 <I2C_ITSlaveCplt+0x3a>
 8006cda:	183b      	adds	r3, r7, r0
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	2b29      	cmp	r3, #41	; 0x29
 8006ce0:	d109      	bne.n	8006cf6 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006ce2:	4a7d      	ldr	r2, [pc, #500]	; (8006ed8 <I2C_ITSlaveCplt+0x230>)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	0011      	movs	r1, r2
 8006ce8:	0018      	movs	r0, r3
 8006cea:	f000 fca7 	bl	800763c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2221      	movs	r2, #33	; 0x21
 8006cf2:	631a      	str	r2, [r3, #48]	; 0x30
 8006cf4:	e011      	b.n	8006d1a <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006cf6:	220f      	movs	r2, #15
 8006cf8:	18bb      	adds	r3, r7, r2
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	2b22      	cmp	r3, #34	; 0x22
 8006cfe:	d003      	beq.n	8006d08 <I2C_ITSlaveCplt+0x60>
 8006d00:	18bb      	adds	r3, r7, r2
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	2b2a      	cmp	r3, #42	; 0x2a
 8006d06:	d108      	bne.n	8006d1a <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006d08:	4a74      	ldr	r2, [pc, #464]	; (8006edc <I2C_ITSlaveCplt+0x234>)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	0011      	movs	r1, r2
 8006d0e:	0018      	movs	r0, r3
 8006d10:	f000 fc94 	bl	800763c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2222      	movs	r2, #34	; 0x22
 8006d18:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	685a      	ldr	r2, [r3, #4]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2180      	movs	r1, #128	; 0x80
 8006d26:	0209      	lsls	r1, r1, #8
 8006d28:	430a      	orrs	r2, r1
 8006d2a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	685a      	ldr	r2, [r3, #4]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	496a      	ldr	r1, [pc, #424]	; (8006ee0 <I2C_ITSlaveCplt+0x238>)
 8006d38:	400a      	ands	r2, r1
 8006d3a:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	0018      	movs	r0, r3
 8006d40:	f000 fa3b 	bl	80071ba <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	0b9b      	lsrs	r3, r3, #14
 8006d48:	001a      	movs	r2, r3
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	d013      	beq.n	8006d78 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4962      	ldr	r1, [pc, #392]	; (8006ee4 <I2C_ITSlaveCplt+0x23c>)
 8006d5c:	400a      	ands	r2, r1
 8006d5e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d020      	beq.n	8006daa <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	b29a      	uxth	r2, r3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d76:	e018      	b.n	8006daa <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	0bdb      	lsrs	r3, r3, #15
 8006d7c:	001a      	movs	r2, r3
 8006d7e:	2301      	movs	r3, #1
 8006d80:	4013      	ands	r3, r2
 8006d82:	d012      	beq.n	8006daa <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4956      	ldr	r1, [pc, #344]	; (8006ee8 <I2C_ITSlaveCplt+0x240>)
 8006d90:	400a      	ands	r2, r1
 8006d92:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d006      	beq.n	8006daa <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	b29a      	uxth	r2, r3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	089b      	lsrs	r3, r3, #2
 8006dae:	001a      	movs	r2, r3
 8006db0:	2301      	movs	r3, #1
 8006db2:	4013      	ands	r3, r2
 8006db4:	d020      	beq.n	8006df8 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	2204      	movs	r2, #4
 8006dba:	4393      	bics	r3, r2
 8006dbc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc8:	b2d2      	uxtb	r2, r2
 8006dca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd0:	1c5a      	adds	r2, r3, #1
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d00c      	beq.n	8006df8 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006de2:	3b01      	subs	r3, #1
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	3b01      	subs	r3, #1
 8006df2:	b29a      	uxth	r2, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d005      	beq.n	8006e0e <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e06:	2204      	movs	r2, #4
 8006e08:	431a      	orrs	r2, r3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2242      	movs	r2, #66	; 0x42
 8006e12:	2100      	movs	r1, #0
 8006e14:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d013      	beq.n	8006e4c <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	0011      	movs	r1, r2
 8006e2c:	0018      	movs	r0, r3
 8006e2e:	f000 f8b9 	bl	8006fa4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2241      	movs	r2, #65	; 0x41
 8006e36:	5c9b      	ldrb	r3, [r3, r2]
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	2b28      	cmp	r3, #40	; 0x28
 8006e3c:	d147      	bne.n	8006ece <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006e3e:	697a      	ldr	r2, [r7, #20]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	0011      	movs	r1, r2
 8006e44:	0018      	movs	r0, r3
 8006e46:	f000 f853 	bl	8006ef0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006e4a:	e040      	b.n	8006ece <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e50:	4a26      	ldr	r2, [pc, #152]	; (8006eec <I2C_ITSlaveCplt+0x244>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d016      	beq.n	8006e84 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	0018      	movs	r0, r3
 8006e5a:	f7ff febf 	bl	8006bdc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4a22      	ldr	r2, [pc, #136]	; (8006eec <I2C_ITSlaveCplt+0x244>)
 8006e62:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2241      	movs	r2, #65	; 0x41
 8006e68:	2120      	movs	r1, #32
 8006e6a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2240      	movs	r2, #64	; 0x40
 8006e76:	2100      	movs	r1, #0
 8006e78:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	0018      	movs	r0, r3
 8006e7e:	f7ff fcdd 	bl	800683c <HAL_I2C_ListenCpltCallback>
}
 8006e82:	e024      	b.n	8006ece <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2241      	movs	r2, #65	; 0x41
 8006e88:	5c9b      	ldrb	r3, [r3, r2]
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	2b22      	cmp	r3, #34	; 0x22
 8006e8e:	d10f      	bne.n	8006eb0 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2241      	movs	r2, #65	; 0x41
 8006e94:	2120      	movs	r1, #32
 8006e96:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2240      	movs	r2, #64	; 0x40
 8006ea2:	2100      	movs	r1, #0
 8006ea4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	0018      	movs	r0, r3
 8006eaa:	f7ff fcaf 	bl	800680c <HAL_I2C_SlaveRxCpltCallback>
}
 8006eae:	e00e      	b.n	8006ece <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2241      	movs	r2, #65	; 0x41
 8006eb4:	2120      	movs	r1, #32
 8006eb6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2240      	movs	r2, #64	; 0x40
 8006ec2:	2100      	movs	r1, #0
 8006ec4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	0018      	movs	r0, r3
 8006eca:	f7ff fc97 	bl	80067fc <HAL_I2C_SlaveTxCpltCallback>
}
 8006ece:	46c0      	nop			; (mov r8, r8)
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	b006      	add	sp, #24
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	46c0      	nop			; (mov r8, r8)
 8006ed8:	00008001 	.word	0x00008001
 8006edc:	00008002 	.word	0x00008002
 8006ee0:	fe00e800 	.word	0xfe00e800
 8006ee4:	ffffbfff 	.word	0xffffbfff
 8006ee8:	ffff7fff 	.word	0xffff7fff
 8006eec:	ffff0000 	.word	0xffff0000

08006ef0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a27      	ldr	r2, [pc, #156]	; (8006f9c <I2C_ITListenCplt+0xac>)
 8006efe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2241      	movs	r2, #65	; 0x41
 8006f0a:	2120      	movs	r1, #32
 8006f0c:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2242      	movs	r2, #66	; 0x42
 8006f12:	2100      	movs	r1, #0
 8006f14:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	089b      	lsrs	r3, r3, #2
 8006f20:	001a      	movs	r2, r3
 8006f22:	2301      	movs	r3, #1
 8006f24:	4013      	ands	r3, r2
 8006f26:	d022      	beq.n	8006f6e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f32:	b2d2      	uxtb	r2, r2
 8006f34:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3a:	1c5a      	adds	r2, r3, #1
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d012      	beq.n	8006f6e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	b29a      	uxth	r2, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f66:	2204      	movs	r2, #4
 8006f68:	431a      	orrs	r2, r3
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006f6e:	4a0c      	ldr	r2, [pc, #48]	; (8006fa0 <I2C_ITListenCplt+0xb0>)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	0011      	movs	r1, r2
 8006f74:	0018      	movs	r0, r3
 8006f76:	f000 fb61 	bl	800763c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2210      	movs	r2, #16
 8006f80:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2240      	movs	r2, #64	; 0x40
 8006f86:	2100      	movs	r1, #0
 8006f88:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	0018      	movs	r0, r3
 8006f8e:	f7ff fc55 	bl	800683c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006f92:	46c0      	nop			; (mov r8, r8)
 8006f94:	46bd      	mov	sp, r7
 8006f96:	b002      	add	sp, #8
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	46c0      	nop			; (mov r8, r8)
 8006f9c:	ffff0000 	.word	0xffff0000
 8006fa0:	00008003 	.word	0x00008003

08006fa4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006fae:	200f      	movs	r0, #15
 8006fb0:	183b      	adds	r3, r7, r0
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	2141      	movs	r1, #65	; 0x41
 8006fb6:	5c52      	ldrb	r2, [r2, r1]
 8006fb8:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2242      	movs	r2, #66	; 0x42
 8006fbe:	2100      	movs	r1, #0
 8006fc0:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4a62      	ldr	r2, [pc, #392]	; (8007150 <I2C_ITError+0x1ac>)
 8006fc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	431a      	orrs	r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006fda:	183b      	adds	r3, r7, r0
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	2b28      	cmp	r3, #40	; 0x28
 8006fe0:	d007      	beq.n	8006ff2 <I2C_ITError+0x4e>
 8006fe2:	183b      	adds	r3, r7, r0
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	2b29      	cmp	r3, #41	; 0x29
 8006fe8:	d003      	beq.n	8006ff2 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006fea:	183b      	adds	r3, r7, r0
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	2b2a      	cmp	r3, #42	; 0x2a
 8006ff0:	d10c      	bne.n	800700c <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2103      	movs	r1, #3
 8006ff6:	0018      	movs	r0, r3
 8006ff8:	f000 fb20 	bl	800763c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2241      	movs	r2, #65	; 0x41
 8007000:	2128      	movs	r1, #40	; 0x28
 8007002:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4a53      	ldr	r2, [pc, #332]	; (8007154 <I2C_ITError+0x1b0>)
 8007008:	635a      	str	r2, [r3, #52]	; 0x34
 800700a:	e012      	b.n	8007032 <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800700c:	4a52      	ldr	r2, [pc, #328]	; (8007158 <I2C_ITError+0x1b4>)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	0011      	movs	r1, r2
 8007012:	0018      	movs	r0, r3
 8007014:	f000 fb12 	bl	800763c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2241      	movs	r2, #65	; 0x41
 800701c:	5c9b      	ldrb	r3, [r3, r2]
 800701e:	b2db      	uxtb	r3, r3
 8007020:	2b60      	cmp	r3, #96	; 0x60
 8007022:	d003      	beq.n	800702c <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2241      	movs	r2, #65	; 0x41
 8007028:	2120      	movs	r1, #32
 800702a:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007036:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800703c:	2b00      	cmp	r3, #0
 800703e:	d03b      	beq.n	80070b8 <I2C_ITError+0x114>
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	2b11      	cmp	r3, #17
 8007044:	d002      	beq.n	800704c <I2C_ITError+0xa8>
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	2b21      	cmp	r3, #33	; 0x21
 800704a:	d135      	bne.n	80070b8 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	2380      	movs	r3, #128	; 0x80
 8007054:	01db      	lsls	r3, r3, #7
 8007056:	401a      	ands	r2, r3
 8007058:	2380      	movs	r3, #128	; 0x80
 800705a:	01db      	lsls	r3, r3, #7
 800705c:	429a      	cmp	r2, r3
 800705e:	d107      	bne.n	8007070 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	493c      	ldr	r1, [pc, #240]	; (800715c <I2C_ITError+0x1b8>)
 800706c:	400a      	ands	r2, r1
 800706e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007074:	0018      	movs	r0, r3
 8007076:	f7fe ffa7 	bl	8005fc8 <HAL_DMA_GetState>
 800707a:	0003      	movs	r3, r0
 800707c:	2b01      	cmp	r3, #1
 800707e:	d016      	beq.n	80070ae <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007084:	4a36      	ldr	r2, [pc, #216]	; (8007160 <I2C_ITError+0x1bc>)
 8007086:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2240      	movs	r2, #64	; 0x40
 800708c:	2100      	movs	r1, #0
 800708e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007094:	0018      	movs	r0, r3
 8007096:	f7fe fe7b 	bl	8005d90 <HAL_DMA_Abort_IT>
 800709a:	1e03      	subs	r3, r0, #0
 800709c:	d051      	beq.n	8007142 <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a8:	0018      	movs	r0, r3
 80070aa:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80070ac:	e049      	b.n	8007142 <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	0018      	movs	r0, r3
 80070b2:	f000 f859 	bl	8007168 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80070b6:	e044      	b.n	8007142 <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d03b      	beq.n	8007138 <I2C_ITError+0x194>
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	2b12      	cmp	r3, #18
 80070c4:	d002      	beq.n	80070cc <I2C_ITError+0x128>
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	2b22      	cmp	r3, #34	; 0x22
 80070ca:	d135      	bne.n	8007138 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	2380      	movs	r3, #128	; 0x80
 80070d4:	021b      	lsls	r3, r3, #8
 80070d6:	401a      	ands	r2, r3
 80070d8:	2380      	movs	r3, #128	; 0x80
 80070da:	021b      	lsls	r3, r3, #8
 80070dc:	429a      	cmp	r2, r3
 80070de:	d107      	bne.n	80070f0 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	491e      	ldr	r1, [pc, #120]	; (8007164 <I2C_ITError+0x1c0>)
 80070ec:	400a      	ands	r2, r1
 80070ee:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070f4:	0018      	movs	r0, r3
 80070f6:	f7fe ff67 	bl	8005fc8 <HAL_DMA_GetState>
 80070fa:	0003      	movs	r3, r0
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d016      	beq.n	800712e <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007104:	4a16      	ldr	r2, [pc, #88]	; (8007160 <I2C_ITError+0x1bc>)
 8007106:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2240      	movs	r2, #64	; 0x40
 800710c:	2100      	movs	r1, #0
 800710e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007114:	0018      	movs	r0, r3
 8007116:	f7fe fe3b 	bl	8005d90 <HAL_DMA_Abort_IT>
 800711a:	1e03      	subs	r3, r0, #0
 800711c:	d013      	beq.n	8007146 <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007122:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007128:	0018      	movs	r0, r3
 800712a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800712c:	e00b      	b.n	8007146 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	0018      	movs	r0, r3
 8007132:	f000 f819 	bl	8007168 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007136:	e006      	b.n	8007146 <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	0018      	movs	r0, r3
 800713c:	f000 f814 	bl	8007168 <I2C_TreatErrorCallback>
  }
}
 8007140:	e002      	b.n	8007148 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007142:	46c0      	nop			; (mov r8, r8)
 8007144:	e000      	b.n	8007148 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007146:	46c0      	nop			; (mov r8, r8)
}
 8007148:	46c0      	nop			; (mov r8, r8)
 800714a:	46bd      	mov	sp, r7
 800714c:	b004      	add	sp, #16
 800714e:	bd80      	pop	{r7, pc}
 8007150:	ffff0000 	.word	0xffff0000
 8007154:	0800686d 	.word	0x0800686d
 8007158:	00008003 	.word	0x00008003
 800715c:	ffffbfff 	.word	0xffffbfff
 8007160:	080071ff 	.word	0x080071ff
 8007164:	ffff7fff 	.word	0xffff7fff

08007168 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2241      	movs	r2, #65	; 0x41
 8007174:	5c9b      	ldrb	r3, [r3, r2]
 8007176:	b2db      	uxtb	r3, r3
 8007178:	2b60      	cmp	r3, #96	; 0x60
 800717a:	d10f      	bne.n	800719c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2241      	movs	r2, #65	; 0x41
 8007180:	2120      	movs	r1, #32
 8007182:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2240      	movs	r2, #64	; 0x40
 800718e:	2100      	movs	r1, #0
 8007190:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	0018      	movs	r0, r3
 8007196:	f7ff fb61 	bl	800685c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800719a:	e00a      	b.n	80071b2 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2240      	movs	r2, #64	; 0x40
 80071a6:	2100      	movs	r1, #0
 80071a8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	0018      	movs	r0, r3
 80071ae:	f7ff fb4d 	bl	800684c <HAL_I2C_ErrorCallback>
}
 80071b2:	46c0      	nop			; (mov r8, r8)
 80071b4:	46bd      	mov	sp, r7
 80071b6:	b002      	add	sp, #8
 80071b8:	bd80      	pop	{r7, pc}

080071ba <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b082      	sub	sp, #8
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	699b      	ldr	r3, [r3, #24]
 80071c8:	2202      	movs	r2, #2
 80071ca:	4013      	ands	r3, r2
 80071cc:	2b02      	cmp	r3, #2
 80071ce:	d103      	bne.n	80071d8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	2200      	movs	r2, #0
 80071d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	699b      	ldr	r3, [r3, #24]
 80071de:	2201      	movs	r2, #1
 80071e0:	4013      	ands	r3, r2
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d007      	beq.n	80071f6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	699a      	ldr	r2, [r3, #24]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2101      	movs	r1, #1
 80071f2:	430a      	orrs	r2, r1
 80071f4:	619a      	str	r2, [r3, #24]
  }
}
 80071f6:	46c0      	nop			; (mov r8, r8)
 80071f8:	46bd      	mov	sp, r7
 80071fa:	b002      	add	sp, #8
 80071fc:	bd80      	pop	{r7, pc}

080071fe <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b084      	sub	sp, #16
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800720a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007210:	2b00      	cmp	r3, #0
 8007212:	d003      	beq.n	800721c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007218:	2200      	movs	r2, #0
 800721a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007220:	2b00      	cmp	r3, #0
 8007222:	d003      	beq.n	800722c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007228:	2200      	movs	r2, #0
 800722a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	0018      	movs	r0, r3
 8007230:	f7ff ff9a 	bl	8007168 <I2C_TreatErrorCallback>
}
 8007234:	46c0      	nop			; (mov r8, r8)
 8007236:	46bd      	mov	sp, r7
 8007238:	b004      	add	sp, #16
 800723a:	bd80      	pop	{r7, pc}

0800723c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	603b      	str	r3, [r7, #0]
 8007248:	1dfb      	adds	r3, r7, #7
 800724a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800724c:	e021      	b.n	8007292 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	3301      	adds	r3, #1
 8007252:	d01e      	beq.n	8007292 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007254:	f7fe f90a 	bl	800546c <HAL_GetTick>
 8007258:	0002      	movs	r2, r0
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	683a      	ldr	r2, [r7, #0]
 8007260:	429a      	cmp	r2, r3
 8007262:	d302      	bcc.n	800726a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d113      	bne.n	8007292 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800726e:	2220      	movs	r2, #32
 8007270:	431a      	orrs	r2, r3
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2241      	movs	r2, #65	; 0x41
 800727a:	2120      	movs	r1, #32
 800727c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2242      	movs	r2, #66	; 0x42
 8007282:	2100      	movs	r1, #0
 8007284:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2240      	movs	r2, #64	; 0x40
 800728a:	2100      	movs	r1, #0
 800728c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e00f      	b.n	80072b2 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	699b      	ldr	r3, [r3, #24]
 8007298:	68ba      	ldr	r2, [r7, #8]
 800729a:	4013      	ands	r3, r2
 800729c:	68ba      	ldr	r2, [r7, #8]
 800729e:	1ad3      	subs	r3, r2, r3
 80072a0:	425a      	negs	r2, r3
 80072a2:	4153      	adcs	r3, r2
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	001a      	movs	r2, r3
 80072a8:	1dfb      	adds	r3, r7, #7
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d0ce      	beq.n	800724e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80072b0:	2300      	movs	r3, #0
}
 80072b2:	0018      	movs	r0, r3
 80072b4:	46bd      	mov	sp, r7
 80072b6:	b004      	add	sp, #16
 80072b8:	bd80      	pop	{r7, pc}

080072ba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80072ba:	b580      	push	{r7, lr}
 80072bc:	b084      	sub	sp, #16
 80072be:	af00      	add	r7, sp, #0
 80072c0:	60f8      	str	r0, [r7, #12]
 80072c2:	60b9      	str	r1, [r7, #8]
 80072c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80072c6:	e02b      	b.n	8007320 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	68b9      	ldr	r1, [r7, #8]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	0018      	movs	r0, r3
 80072d0:	f000 f86e 	bl	80073b0 <I2C_IsErrorOccurred>
 80072d4:	1e03      	subs	r3, r0, #0
 80072d6:	d001      	beq.n	80072dc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	e029      	b.n	8007330 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	3301      	adds	r3, #1
 80072e0:	d01e      	beq.n	8007320 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072e2:	f7fe f8c3 	bl	800546c <HAL_GetTick>
 80072e6:	0002      	movs	r2, r0
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	1ad3      	subs	r3, r2, r3
 80072ec:	68ba      	ldr	r2, [r7, #8]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d302      	bcc.n	80072f8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d113      	bne.n	8007320 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072fc:	2220      	movs	r2, #32
 80072fe:	431a      	orrs	r2, r3
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2241      	movs	r2, #65	; 0x41
 8007308:	2120      	movs	r1, #32
 800730a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2242      	movs	r2, #66	; 0x42
 8007310:	2100      	movs	r1, #0
 8007312:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2240      	movs	r2, #64	; 0x40
 8007318:	2100      	movs	r1, #0
 800731a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	e007      	b.n	8007330 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	699b      	ldr	r3, [r3, #24]
 8007326:	2202      	movs	r2, #2
 8007328:	4013      	ands	r3, r2
 800732a:	2b02      	cmp	r3, #2
 800732c:	d1cc      	bne.n	80072c8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800732e:	2300      	movs	r3, #0
}
 8007330:	0018      	movs	r0, r3
 8007332:	46bd      	mov	sp, r7
 8007334:	b004      	add	sp, #16
 8007336:	bd80      	pop	{r7, pc}

08007338 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007344:	e028      	b.n	8007398 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	68b9      	ldr	r1, [r7, #8]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	0018      	movs	r0, r3
 800734e:	f000 f82f 	bl	80073b0 <I2C_IsErrorOccurred>
 8007352:	1e03      	subs	r3, r0, #0
 8007354:	d001      	beq.n	800735a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	e026      	b.n	80073a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800735a:	f7fe f887 	bl	800546c <HAL_GetTick>
 800735e:	0002      	movs	r2, r0
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	68ba      	ldr	r2, [r7, #8]
 8007366:	429a      	cmp	r2, r3
 8007368:	d302      	bcc.n	8007370 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d113      	bne.n	8007398 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007374:	2220      	movs	r2, #32
 8007376:	431a      	orrs	r2, r3
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2241      	movs	r2, #65	; 0x41
 8007380:	2120      	movs	r1, #32
 8007382:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2242      	movs	r2, #66	; 0x42
 8007388:	2100      	movs	r1, #0
 800738a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2240      	movs	r2, #64	; 0x40
 8007390:	2100      	movs	r1, #0
 8007392:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8007394:	2301      	movs	r3, #1
 8007396:	e007      	b.n	80073a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	699b      	ldr	r3, [r3, #24]
 800739e:	2220      	movs	r2, #32
 80073a0:	4013      	ands	r3, r2
 80073a2:	2b20      	cmp	r3, #32
 80073a4:	d1cf      	bne.n	8007346 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80073a6:	2300      	movs	r3, #0
}
 80073a8:	0018      	movs	r0, r3
 80073aa:	46bd      	mov	sp, r7
 80073ac:	b004      	add	sp, #16
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80073b0:	b590      	push	{r4, r7, lr}
 80073b2:	b08b      	sub	sp, #44	; 0x2c
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073bc:	2327      	movs	r3, #39	; 0x27
 80073be:	18fb      	adds	r3, r7, r3
 80073c0:	2200      	movs	r2, #0
 80073c2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	699b      	ldr	r3, [r3, #24]
 80073ca:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80073cc:	2300      	movs	r3, #0
 80073ce:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	2210      	movs	r2, #16
 80073d8:	4013      	ands	r3, r2
 80073da:	d100      	bne.n	80073de <I2C_IsErrorOccurred+0x2e>
 80073dc:	e08e      	b.n	80074fc <I2C_IsErrorOccurred+0x14c>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2210      	movs	r2, #16
 80073e4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80073e6:	e06c      	b.n	80074c2 <I2C_IsErrorOccurred+0x112>
 80073e8:	2427      	movs	r4, #39	; 0x27
 80073ea:	193b      	adds	r3, r7, r4
 80073ec:	193a      	adds	r2, r7, r4
 80073ee:	7812      	ldrb	r2, [r2, #0]
 80073f0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	3301      	adds	r3, #1
 80073f6:	d064      	beq.n	80074c2 <I2C_IsErrorOccurred+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80073f8:	f7fe f838 	bl	800546c <HAL_GetTick>
 80073fc:	0002      	movs	r2, r0
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	1ad3      	subs	r3, r2, r3
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	429a      	cmp	r2, r3
 8007406:	d306      	bcc.n	8007416 <I2C_IsErrorOccurred+0x66>
 8007408:	193b      	adds	r3, r7, r4
 800740a:	193a      	adds	r2, r7, r4
 800740c:	7812      	ldrb	r2, [r2, #0]
 800740e:	701a      	strb	r2, [r3, #0]
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d155      	bne.n	80074c2 <I2C_IsErrorOccurred+0x112>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	685a      	ldr	r2, [r3, #4]
 800741c:	2380      	movs	r3, #128	; 0x80
 800741e:	01db      	lsls	r3, r3, #7
 8007420:	4013      	ands	r3, r2
 8007422:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007424:	2013      	movs	r0, #19
 8007426:	183b      	adds	r3, r7, r0
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	2142      	movs	r1, #66	; 0x42
 800742c:	5c52      	ldrb	r2, [r2, r1]
 800742e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	699a      	ldr	r2, [r3, #24]
 8007436:	2380      	movs	r3, #128	; 0x80
 8007438:	021b      	lsls	r3, r3, #8
 800743a:	401a      	ands	r2, r3
 800743c:	2380      	movs	r3, #128	; 0x80
 800743e:	021b      	lsls	r3, r3, #8
 8007440:	429a      	cmp	r2, r3
 8007442:	d137      	bne.n	80074b4 <I2C_IsErrorOccurred+0x104>
 8007444:	697a      	ldr	r2, [r7, #20]
 8007446:	2380      	movs	r3, #128	; 0x80
 8007448:	01db      	lsls	r3, r3, #7
 800744a:	429a      	cmp	r2, r3
 800744c:	d032      	beq.n	80074b4 <I2C_IsErrorOccurred+0x104>
              (tmp1 != I2C_CR2_STOP) && \
 800744e:	183b      	adds	r3, r7, r0
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	2b20      	cmp	r3, #32
 8007454:	d02e      	beq.n	80074b4 <I2C_IsErrorOccurred+0x104>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	685a      	ldr	r2, [r3, #4]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2180      	movs	r1, #128	; 0x80
 8007462:	01c9      	lsls	r1, r1, #7
 8007464:	430a      	orrs	r2, r1
 8007466:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007468:	f7fe f800 	bl	800546c <HAL_GetTick>
 800746c:	0003      	movs	r3, r0
 800746e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007470:	e020      	b.n	80074b4 <I2C_IsErrorOccurred+0x104>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007472:	f7fd fffb 	bl	800546c <HAL_GetTick>
 8007476:	0002      	movs	r2, r0
 8007478:	69fb      	ldr	r3, [r7, #28]
 800747a:	1ad3      	subs	r3, r2, r3
 800747c:	2027      	movs	r0, #39	; 0x27
 800747e:	183a      	adds	r2, r7, r0
 8007480:	1839      	adds	r1, r7, r0
 8007482:	7809      	ldrb	r1, [r1, #0]
 8007484:	7011      	strb	r1, [r2, #0]
 8007486:	2b19      	cmp	r3, #25
 8007488:	d914      	bls.n	80074b4 <I2C_IsErrorOccurred+0x104>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800748e:	2220      	movs	r2, #32
 8007490:	431a      	orrs	r2, r3
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2241      	movs	r2, #65	; 0x41
 800749a:	2120      	movs	r1, #32
 800749c:	5499      	strb	r1, [r3, r2]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2242      	movs	r2, #66	; 0x42
 80074a2:	2100      	movs	r1, #0
 80074a4:	5499      	strb	r1, [r3, r2]

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2240      	movs	r2, #64	; 0x40
 80074aa:	2100      	movs	r1, #0
 80074ac:	5499      	strb	r1, [r3, r2]

              status = HAL_ERROR;
 80074ae:	183b      	adds	r3, r7, r0
 80074b0:	2201      	movs	r2, #1
 80074b2:	701a      	strb	r2, [r3, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	699b      	ldr	r3, [r3, #24]
 80074ba:	2220      	movs	r2, #32
 80074bc:	4013      	ands	r3, r2
 80074be:	2b20      	cmp	r3, #32
 80074c0:	d1d7      	bne.n	8007472 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	699b      	ldr	r3, [r3, #24]
 80074c8:	2220      	movs	r2, #32
 80074ca:	4013      	ands	r3, r2
 80074cc:	2b20      	cmp	r3, #32
 80074ce:	d004      	beq.n	80074da <I2C_IsErrorOccurred+0x12a>
 80074d0:	2327      	movs	r3, #39	; 0x27
 80074d2:	18fb      	adds	r3, r7, r3
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d086      	beq.n	80073e8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80074da:	2327      	movs	r3, #39	; 0x27
 80074dc:	18fb      	adds	r3, r7, r3
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d103      	bne.n	80074ec <I2C_IsErrorOccurred+0x13c>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2220      	movs	r2, #32
 80074ea:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80074ec:	6a3b      	ldr	r3, [r7, #32]
 80074ee:	2204      	movs	r2, #4
 80074f0:	4313      	orrs	r3, r2
 80074f2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80074f4:	2327      	movs	r3, #39	; 0x27
 80074f6:	18fb      	adds	r3, r7, r3
 80074f8:	2201      	movs	r2, #1
 80074fa:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	699b      	ldr	r3, [r3, #24]
 8007502:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007504:	69ba      	ldr	r2, [r7, #24]
 8007506:	2380      	movs	r3, #128	; 0x80
 8007508:	005b      	lsls	r3, r3, #1
 800750a:	4013      	ands	r3, r2
 800750c:	d00c      	beq.n	8007528 <I2C_IsErrorOccurred+0x178>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800750e:	6a3b      	ldr	r3, [r7, #32]
 8007510:	2201      	movs	r2, #1
 8007512:	4313      	orrs	r3, r2
 8007514:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	2280      	movs	r2, #128	; 0x80
 800751c:	0052      	lsls	r2, r2, #1
 800751e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007520:	2327      	movs	r3, #39	; 0x27
 8007522:	18fb      	adds	r3, r7, r3
 8007524:	2201      	movs	r2, #1
 8007526:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007528:	69ba      	ldr	r2, [r7, #24]
 800752a:	2380      	movs	r3, #128	; 0x80
 800752c:	00db      	lsls	r3, r3, #3
 800752e:	4013      	ands	r3, r2
 8007530:	d00c      	beq.n	800754c <I2C_IsErrorOccurred+0x19c>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007532:	6a3b      	ldr	r3, [r7, #32]
 8007534:	2208      	movs	r2, #8
 8007536:	4313      	orrs	r3, r2
 8007538:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	2280      	movs	r2, #128	; 0x80
 8007540:	00d2      	lsls	r2, r2, #3
 8007542:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007544:	2327      	movs	r3, #39	; 0x27
 8007546:	18fb      	adds	r3, r7, r3
 8007548:	2201      	movs	r2, #1
 800754a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800754c:	69ba      	ldr	r2, [r7, #24]
 800754e:	2380      	movs	r3, #128	; 0x80
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	4013      	ands	r3, r2
 8007554:	d00c      	beq.n	8007570 <I2C_IsErrorOccurred+0x1c0>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007556:	6a3b      	ldr	r3, [r7, #32]
 8007558:	2202      	movs	r2, #2
 800755a:	4313      	orrs	r3, r2
 800755c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	2280      	movs	r2, #128	; 0x80
 8007564:	0092      	lsls	r2, r2, #2
 8007566:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007568:	2327      	movs	r3, #39	; 0x27
 800756a:	18fb      	adds	r3, r7, r3
 800756c:	2201      	movs	r2, #1
 800756e:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8007570:	2327      	movs	r3, #39	; 0x27
 8007572:	18fb      	adds	r3, r7, r3
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d01d      	beq.n	80075b6 <I2C_IsErrorOccurred+0x206>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	0018      	movs	r0, r3
 800757e:	f7ff fe1c 	bl	80071ba <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	685a      	ldr	r2, [r3, #4]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	490d      	ldr	r1, [pc, #52]	; (80075c4 <I2C_IsErrorOccurred+0x214>)
 800758e:	400a      	ands	r2, r1
 8007590:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007596:	6a3b      	ldr	r3, [r7, #32]
 8007598:	431a      	orrs	r2, r3
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2241      	movs	r2, #65	; 0x41
 80075a2:	2120      	movs	r1, #32
 80075a4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2242      	movs	r2, #66	; 0x42
 80075aa:	2100      	movs	r1, #0
 80075ac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2240      	movs	r2, #64	; 0x40
 80075b2:	2100      	movs	r1, #0
 80075b4:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80075b6:	2327      	movs	r3, #39	; 0x27
 80075b8:	18fb      	adds	r3, r7, r3
 80075ba:	781b      	ldrb	r3, [r3, #0]
}
 80075bc:	0018      	movs	r0, r3
 80075be:	46bd      	mov	sp, r7
 80075c0:	b00b      	add	sp, #44	; 0x2c
 80075c2:	bd90      	pop	{r4, r7, pc}
 80075c4:	fe00e800 	.word	0xfe00e800

080075c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80075c8:	b590      	push	{r4, r7, lr}
 80075ca:	b087      	sub	sp, #28
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	0008      	movs	r0, r1
 80075d2:	0011      	movs	r1, r2
 80075d4:	607b      	str	r3, [r7, #4]
 80075d6:	240a      	movs	r4, #10
 80075d8:	193b      	adds	r3, r7, r4
 80075da:	1c02      	adds	r2, r0, #0
 80075dc:	801a      	strh	r2, [r3, #0]
 80075de:	2009      	movs	r0, #9
 80075e0:	183b      	adds	r3, r7, r0
 80075e2:	1c0a      	adds	r2, r1, #0
 80075e4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80075e6:	193b      	adds	r3, r7, r4
 80075e8:	881b      	ldrh	r3, [r3, #0]
 80075ea:	059b      	lsls	r3, r3, #22
 80075ec:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80075ee:	183b      	adds	r3, r7, r0
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	0419      	lsls	r1, r3, #16
 80075f4:	23ff      	movs	r3, #255	; 0xff
 80075f6:	041b      	lsls	r3, r3, #16
 80075f8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80075fa:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007602:	4313      	orrs	r3, r2
 8007604:	005b      	lsls	r3, r3, #1
 8007606:	085b      	lsrs	r3, r3, #1
 8007608:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007612:	0d51      	lsrs	r1, r2, #21
 8007614:	2280      	movs	r2, #128	; 0x80
 8007616:	00d2      	lsls	r2, r2, #3
 8007618:	400a      	ands	r2, r1
 800761a:	4907      	ldr	r1, [pc, #28]	; (8007638 <I2C_TransferConfig+0x70>)
 800761c:	430a      	orrs	r2, r1
 800761e:	43d2      	mvns	r2, r2
 8007620:	401a      	ands	r2, r3
 8007622:	0011      	movs	r1, r2
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	697a      	ldr	r2, [r7, #20]
 800762a:	430a      	orrs	r2, r1
 800762c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800762e:	46c0      	nop			; (mov r8, r8)
 8007630:	46bd      	mov	sp, r7
 8007632:	b007      	add	sp, #28
 8007634:	bd90      	pop	{r4, r7, pc}
 8007636:	46c0      	nop			; (mov r8, r8)
 8007638:	03ff63ff 	.word	0x03ff63ff

0800763c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	000a      	movs	r2, r1
 8007646:	1cbb      	adds	r3, r7, #2
 8007648:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800764a:	2300      	movs	r3, #0
 800764c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800764e:	1cbb      	adds	r3, r7, #2
 8007650:	881b      	ldrh	r3, [r3, #0]
 8007652:	2201      	movs	r2, #1
 8007654:	4013      	ands	r3, r2
 8007656:	d010      	beq.n	800767a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2242      	movs	r2, #66	; 0x42
 800765c:	4313      	orrs	r3, r2
 800765e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2241      	movs	r2, #65	; 0x41
 8007664:	5c9b      	ldrb	r3, [r3, r2]
 8007666:	b2db      	uxtb	r3, r3
 8007668:	001a      	movs	r2, r3
 800766a:	2328      	movs	r3, #40	; 0x28
 800766c:	4013      	ands	r3, r2
 800766e:	2b28      	cmp	r3, #40	; 0x28
 8007670:	d003      	beq.n	800767a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	22b0      	movs	r2, #176	; 0xb0
 8007676:	4313      	orrs	r3, r2
 8007678:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800767a:	1cbb      	adds	r3, r7, #2
 800767c:	881b      	ldrh	r3, [r3, #0]
 800767e:	2202      	movs	r2, #2
 8007680:	4013      	ands	r3, r2
 8007682:	d010      	beq.n	80076a6 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2244      	movs	r2, #68	; 0x44
 8007688:	4313      	orrs	r3, r2
 800768a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2241      	movs	r2, #65	; 0x41
 8007690:	5c9b      	ldrb	r3, [r3, r2]
 8007692:	b2db      	uxtb	r3, r3
 8007694:	001a      	movs	r2, r3
 8007696:	2328      	movs	r3, #40	; 0x28
 8007698:	4013      	ands	r3, r2
 800769a:	2b28      	cmp	r3, #40	; 0x28
 800769c:	d003      	beq.n	80076a6 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	22b0      	movs	r2, #176	; 0xb0
 80076a2:	4313      	orrs	r3, r2
 80076a4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80076a6:	1cbb      	adds	r3, r7, #2
 80076a8:	2200      	movs	r2, #0
 80076aa:	5e9b      	ldrsh	r3, [r3, r2]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	da03      	bge.n	80076b8 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	22b8      	movs	r2, #184	; 0xb8
 80076b4:	4313      	orrs	r3, r2
 80076b6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80076b8:	1cbb      	adds	r3, r7, #2
 80076ba:	881b      	ldrh	r3, [r3, #0]
 80076bc:	2b10      	cmp	r3, #16
 80076be:	d103      	bne.n	80076c8 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2290      	movs	r2, #144	; 0x90
 80076c4:	4313      	orrs	r3, r2
 80076c6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80076c8:	1cbb      	adds	r3, r7, #2
 80076ca:	881b      	ldrh	r3, [r3, #0]
 80076cc:	2b20      	cmp	r3, #32
 80076ce:	d103      	bne.n	80076d8 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2220      	movs	r2, #32
 80076d4:	4313      	orrs	r3, r2
 80076d6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80076d8:	1cbb      	adds	r3, r7, #2
 80076da:	881b      	ldrh	r3, [r3, #0]
 80076dc:	2b40      	cmp	r3, #64	; 0x40
 80076de:	d103      	bne.n	80076e8 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2240      	movs	r2, #64	; 0x40
 80076e4:	4313      	orrs	r3, r2
 80076e6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	43d9      	mvns	r1, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	400a      	ands	r2, r1
 80076f8:	601a      	str	r2, [r3, #0]
}
 80076fa:	46c0      	nop			; (mov r8, r8)
 80076fc:	46bd      	mov	sp, r7
 80076fe:	b004      	add	sp, #16
 8007700:	bd80      	pop	{r7, pc}
	...

08007704 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2241      	movs	r2, #65	; 0x41
 8007712:	5c9b      	ldrb	r3, [r3, r2]
 8007714:	b2db      	uxtb	r3, r3
 8007716:	2b20      	cmp	r3, #32
 8007718:	d138      	bne.n	800778c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2240      	movs	r2, #64	; 0x40
 800771e:	5c9b      	ldrb	r3, [r3, r2]
 8007720:	2b01      	cmp	r3, #1
 8007722:	d101      	bne.n	8007728 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007724:	2302      	movs	r3, #2
 8007726:	e032      	b.n	800778e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2240      	movs	r2, #64	; 0x40
 800772c:	2101      	movs	r1, #1
 800772e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2241      	movs	r2, #65	; 0x41
 8007734:	2124      	movs	r1, #36	; 0x24
 8007736:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2101      	movs	r1, #1
 8007744:	438a      	bics	r2, r1
 8007746:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4911      	ldr	r1, [pc, #68]	; (8007798 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8007754:	400a      	ands	r2, r1
 8007756:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	6819      	ldr	r1, [r3, #0]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	683a      	ldr	r2, [r7, #0]
 8007764:	430a      	orrs	r2, r1
 8007766:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2101      	movs	r1, #1
 8007774:	430a      	orrs	r2, r1
 8007776:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2241      	movs	r2, #65	; 0x41
 800777c:	2120      	movs	r1, #32
 800777e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2240      	movs	r2, #64	; 0x40
 8007784:	2100      	movs	r1, #0
 8007786:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007788:	2300      	movs	r3, #0
 800778a:	e000      	b.n	800778e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800778c:	2302      	movs	r3, #2
  }
}
 800778e:	0018      	movs	r0, r3
 8007790:	46bd      	mov	sp, r7
 8007792:	b002      	add	sp, #8
 8007794:	bd80      	pop	{r7, pc}
 8007796:	46c0      	nop			; (mov r8, r8)
 8007798:	ffffefff 	.word	0xffffefff

0800779c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2241      	movs	r2, #65	; 0x41
 80077aa:	5c9b      	ldrb	r3, [r3, r2]
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	2b20      	cmp	r3, #32
 80077b0:	d139      	bne.n	8007826 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2240      	movs	r2, #64	; 0x40
 80077b6:	5c9b      	ldrb	r3, [r3, r2]
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d101      	bne.n	80077c0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80077bc:	2302      	movs	r3, #2
 80077be:	e033      	b.n	8007828 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2240      	movs	r2, #64	; 0x40
 80077c4:	2101      	movs	r1, #1
 80077c6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2241      	movs	r2, #65	; 0x41
 80077cc:	2124      	movs	r1, #36	; 0x24
 80077ce:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2101      	movs	r1, #1
 80077dc:	438a      	bics	r2, r1
 80077de:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	4a11      	ldr	r2, [pc, #68]	; (8007830 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80077ec:	4013      	ands	r3, r2
 80077ee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	021b      	lsls	r3, r3, #8
 80077f4:	68fa      	ldr	r2, [r7, #12]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	68fa      	ldr	r2, [r7, #12]
 8007800:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2101      	movs	r1, #1
 800780e:	430a      	orrs	r2, r1
 8007810:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2241      	movs	r2, #65	; 0x41
 8007816:	2120      	movs	r1, #32
 8007818:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2240      	movs	r2, #64	; 0x40
 800781e:	2100      	movs	r1, #0
 8007820:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007822:	2300      	movs	r3, #0
 8007824:	e000      	b.n	8007828 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007826:	2302      	movs	r3, #2
  }
}
 8007828:	0018      	movs	r0, r3
 800782a:	46bd      	mov	sp, r7
 800782c:	b004      	add	sp, #16
 800782e:	bd80      	pop	{r7, pc}
 8007830:	fffff0ff 	.word	0xfffff0ff

08007834 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b088      	sub	sp, #32
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d101      	bne.n	8007846 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e0e5      	b.n	8007a12 <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2235      	movs	r2, #53	; 0x35
 800784a:	5c9b      	ldrb	r3, [r3, r2]
 800784c:	b2db      	uxtb	r3, r3
 800784e:	2b00      	cmp	r3, #0
 8007850:	d107      	bne.n	8007862 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2234      	movs	r2, #52	; 0x34
 8007856:	2100      	movs	r1, #0
 8007858:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	0018      	movs	r0, r3
 800785e:	f7fd f991 	bl	8004b84 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2235      	movs	r2, #53	; 0x35
 8007866:	2102      	movs	r1, #2
 8007868:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	69da      	ldr	r2, [r3, #28]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4969      	ldr	r1, [pc, #420]	; (8007a1c <HAL_I2S_Init+0x1e8>)
 8007876:	400a      	ands	r2, r1
 8007878:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2202      	movs	r2, #2
 8007880:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	695b      	ldr	r3, [r3, #20]
 8007886:	2b02      	cmp	r3, #2
 8007888:	d100      	bne.n	800788c <HAL_I2S_Init+0x58>
 800788a:	e076      	b.n	800797a <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d102      	bne.n	800789a <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8007894:	2310      	movs	r3, #16
 8007896:	617b      	str	r3, [r7, #20]
 8007898:	e001      	b.n	800789e <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800789a:	2320      	movs	r3, #32
 800789c:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	2b20      	cmp	r3, #32
 80078a4:	d802      	bhi.n	80078ac <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	005b      	lsls	r3, r3, #1
 80078aa:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 80078ac:	2380      	movs	r3, #128	; 0x80
 80078ae:	011b      	lsls	r3, r3, #4
 80078b0:	0018      	movs	r0, r3
 80078b2:	f001 f95b 	bl	8008b6c <HAL_RCCEx_GetPeriphCLKFreq>
 80078b6:	0003      	movs	r3, r0
 80078b8:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PERIPHCLK_I2S2 */
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	691a      	ldr	r2, [r3, #16]
 80078be:	2380      	movs	r3, #128	; 0x80
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d131      	bne.n	800792a <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d016      	beq.n	80078fc <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	0019      	movs	r1, r3
 80078d4:	68f8      	ldr	r0, [r7, #12]
 80078d6:	f7f8 fc15 	bl	8000104 <__udivsi3>
 80078da:	0003      	movs	r3, r0
 80078dc:	001a      	movs	r2, r3
 80078de:	0013      	movs	r3, r2
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	189b      	adds	r3, r3, r2
 80078e4:	005b      	lsls	r3, r3, #1
 80078e6:	001a      	movs	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	695b      	ldr	r3, [r3, #20]
 80078ec:	0019      	movs	r1, r3
 80078ee:	0010      	movs	r0, r2
 80078f0:	f7f8 fc08 	bl	8000104 <__udivsi3>
 80078f4:	0003      	movs	r3, r0
 80078f6:	3305      	adds	r3, #5
 80078f8:	613b      	str	r3, [r7, #16]
 80078fa:	e02a      	b.n	8007952 <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	00db      	lsls	r3, r3, #3
 8007900:	0019      	movs	r1, r3
 8007902:	68f8      	ldr	r0, [r7, #12]
 8007904:	f7f8 fbfe 	bl	8000104 <__udivsi3>
 8007908:	0003      	movs	r3, r0
 800790a:	001a      	movs	r2, r3
 800790c:	0013      	movs	r3, r2
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	189b      	adds	r3, r3, r2
 8007912:	005b      	lsls	r3, r3, #1
 8007914:	001a      	movs	r2, r3
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	695b      	ldr	r3, [r3, #20]
 800791a:	0019      	movs	r1, r3
 800791c:	0010      	movs	r0, r2
 800791e:	f7f8 fbf1 	bl	8000104 <__udivsi3>
 8007922:	0003      	movs	r3, r0
 8007924:	3305      	adds	r3, #5
 8007926:	613b      	str	r3, [r7, #16]
 8007928:	e013      	b.n	8007952 <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800792a:	6979      	ldr	r1, [r7, #20]
 800792c:	68f8      	ldr	r0, [r7, #12]
 800792e:	f7f8 fbe9 	bl	8000104 <__udivsi3>
 8007932:	0003      	movs	r3, r0
 8007934:	001a      	movs	r2, r3
 8007936:	0013      	movs	r3, r2
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	189b      	adds	r3, r3, r2
 800793c:	005b      	lsls	r3, r3, #1
 800793e:	001a      	movs	r2, r3
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	695b      	ldr	r3, [r3, #20]
 8007944:	0019      	movs	r1, r3
 8007946:	0010      	movs	r0, r2
 8007948:	f7f8 fbdc 	bl	8000104 <__udivsi3>
 800794c:	0003      	movs	r3, r0
 800794e:	3305      	adds	r3, #5
 8007950:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	210a      	movs	r1, #10
 8007956:	0018      	movs	r0, r3
 8007958:	f7f8 fbd4 	bl	8000104 <__udivsi3>
 800795c:	0003      	movs	r3, r0
 800795e:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	2201      	movs	r2, #1
 8007964:	4013      	ands	r3, r2
 8007966:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8007968:	693a      	ldr	r2, [r7, #16]
 800796a:	69bb      	ldr	r3, [r7, #24]
 800796c:	1ad3      	subs	r3, r2, r3
 800796e:	085b      	lsrs	r3, r3, #1
 8007970:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	021b      	lsls	r3, r3, #8
 8007976:	61bb      	str	r3, [r7, #24]
 8007978:	e003      	b.n	8007982 <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800797a:	2302      	movs	r3, #2
 800797c:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800797e:	2300      	movs	r3, #0
 8007980:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	2b01      	cmp	r3, #1
 8007986:	d902      	bls.n	800798e <HAL_I2S_Init+0x15a>
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	2bff      	cmp	r3, #255	; 0xff
 800798c:	d907      	bls.n	800799e <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007992:	2210      	movs	r2, #16
 8007994:	431a      	orrs	r2, r3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 800799a:	2301      	movs	r3, #1
 800799c:	e039      	b.n	8007a12 <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	691a      	ldr	r2, [r3, #16]
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	431a      	orrs	r2, r3
 80079a6:	0011      	movs	r1, r2
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	69fa      	ldr	r2, [r7, #28]
 80079ae:	430a      	orrs	r2, r1
 80079b0:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	69db      	ldr	r3, [r3, #28]
 80079b8:	4a18      	ldr	r2, [pc, #96]	; (8007a1c <HAL_I2S_Init+0x1e8>)
 80079ba:	401a      	ands	r2, r3
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6859      	ldr	r1, [r3, #4]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	4319      	orrs	r1, r3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	4319      	orrs	r1, r3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	699b      	ldr	r3, [r3, #24]
 80079d0:	430b      	orrs	r3, r1
 80079d2:	431a      	orrs	r2, r3
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2180      	movs	r1, #128	; 0x80
 80079da:	0109      	lsls	r1, r1, #4
 80079dc:	430a      	orrs	r2, r1
 80079de:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	2b30      	cmp	r3, #48	; 0x30
 80079e6:	d003      	beq.n	80079f0 <HAL_I2S_Init+0x1bc>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	2bb0      	cmp	r3, #176	; 0xb0
 80079ee:	d108      	bne.n	8007a02 <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	69da      	ldr	r2, [r3, #28]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	2180      	movs	r1, #128	; 0x80
 80079fc:	0149      	lsls	r1, r1, #5
 80079fe:	430a      	orrs	r2, r1
 8007a00:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2235      	movs	r2, #53	; 0x35
 8007a0c:	2101      	movs	r1, #1
 8007a0e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007a10:	2300      	movs	r3, #0
}
 8007a12:	0018      	movs	r0, r3
 8007a14:	46bd      	mov	sp, r7
 8007a16:	b008      	add	sp, #32
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	46c0      	nop			; (mov r8, r8)
 8007a1c:	fffff040 	.word	0xfffff040

08007a20 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b086      	sub	sp, #24
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	1dbb      	adds	r3, r7, #6
 8007a2c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d003      	beq.n	8007a3c <HAL_I2S_Transmit_DMA+0x1c>
 8007a34:	1dbb      	adds	r3, r7, #6
 8007a36:	881b      	ldrh	r3, [r3, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d101      	bne.n	8007a40 <HAL_I2S_Transmit_DMA+0x20>
  {
    return  HAL_ERROR;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	e091      	b.n	8007b64 <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2234      	movs	r2, #52	; 0x34
 8007a44:	5c9b      	ldrb	r3, [r3, r2]
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d101      	bne.n	8007a50 <HAL_I2S_Transmit_DMA+0x30>
 8007a4c:	2302      	movs	r3, #2
 8007a4e:	e089      	b.n	8007b64 <HAL_I2S_Transmit_DMA+0x144>
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2234      	movs	r2, #52	; 0x34
 8007a54:	2101      	movs	r1, #1
 8007a56:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2235      	movs	r2, #53	; 0x35
 8007a5c:	5c9b      	ldrb	r3, [r3, r2]
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d005      	beq.n	8007a70 <HAL_I2S_Transmit_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2234      	movs	r2, #52	; 0x34
 8007a68:	2100      	movs	r1, #0
 8007a6a:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8007a6c:	2302      	movs	r3, #2
 8007a6e:	e079      	b.n	8007b64 <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2235      	movs	r2, #53	; 0x35
 8007a74:	2103      	movs	r1, #3
 8007a76:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->pTxBuffPtr = pData;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	68ba      	ldr	r2, [r7, #8]
 8007a82:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	69db      	ldr	r3, [r3, #28]
 8007a8a:	2207      	movs	r2, #7
 8007a8c:	4013      	ands	r3, r2
 8007a8e:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	2b03      	cmp	r3, #3
 8007a94:	d002      	beq.n	8007a9c <HAL_I2S_Transmit_DMA+0x7c>
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	2b05      	cmp	r3, #5
 8007a9a:	d10c      	bne.n	8007ab6 <HAL_I2S_Transmit_DMA+0x96>
  {
    hi2s->TxXferSize = (Size << 1U);
 8007a9c:	1dbb      	adds	r3, r7, #6
 8007a9e:	881b      	ldrh	r3, [r3, #0]
 8007aa0:	18db      	adds	r3, r3, r3
 8007aa2:	b29a      	uxth	r2, r3
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 8007aa8:	1dbb      	adds	r3, r7, #6
 8007aaa:	881b      	ldrh	r3, [r3, #0]
 8007aac:	18db      	adds	r3, r3, r3
 8007aae:	b29a      	uxth	r2, r3
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	845a      	strh	r2, [r3, #34]	; 0x22
 8007ab4:	e007      	b.n	8007ac6 <HAL_I2S_Transmit_DMA+0xa6>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	1dba      	adds	r2, r7, #6
 8007aba:	8812      	ldrh	r2, [r2, #0]
 8007abc:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	1dba      	adds	r2, r7, #6
 8007ac2:	8812      	ldrh	r2, [r2, #0]
 8007ac4:	845a      	strh	r2, [r3, #34]	; 0x22
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aca:	4a28      	ldr	r2, [pc, #160]	; (8007b6c <HAL_I2S_Transmit_DMA+0x14c>)
 8007acc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad2:	4a27      	ldr	r2, [pc, #156]	; (8007b70 <HAL_I2S_Transmit_DMA+0x150>)
 8007ad4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ada:	4a26      	ldr	r2, [pc, #152]	; (8007b74 <HAL_I2S_Transmit_DMA+0x154>)
 8007adc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
                                 (uint32_t)hi2s->pTxBuffPtr,
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	69db      	ldr	r3, [r3, #28]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007ae6:	0019      	movs	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007aee:	001a      	movs	r2, r3
                                 hi2s->TxXferSize))
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	8c1b      	ldrh	r3, [r3, #32]
 8007af4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007af6:	f7fe f8c5 	bl	8005c84 <HAL_DMA_Start_IT>
 8007afa:	1e03      	subs	r3, r0, #0
 8007afc:	d00f      	beq.n	8007b1e <HAL_I2S_Transmit_DMA+0xfe>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b02:	2208      	movs	r2, #8
 8007b04:	431a      	orrs	r2, r3
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	639a      	str	r2, [r3, #56]	; 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2235      	movs	r2, #53	; 0x35
 8007b0e:	2101      	movs	r1, #1
 8007b10:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2234      	movs	r2, #52	; 0x34
 8007b16:	2100      	movs	r1, #0
 8007b18:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e022      	b.n	8007b64 <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	69da      	ldr	r2, [r3, #28]
 8007b24:	2380      	movs	r3, #128	; 0x80
 8007b26:	00db      	lsls	r3, r3, #3
 8007b28:	4013      	ands	r3, r2
 8007b2a:	d108      	bne.n	8007b3e <HAL_I2S_Transmit_DMA+0x11e>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	69da      	ldr	r2, [r3, #28]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	2180      	movs	r1, #128	; 0x80
 8007b38:	00c9      	lsls	r1, r1, #3
 8007b3a:	430a      	orrs	r2, r1
 8007b3c:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	2202      	movs	r2, #2
 8007b46:	4013      	ands	r3, r2
 8007b48:	d107      	bne.n	8007b5a <HAL_I2S_Transmit_DMA+0x13a>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	685a      	ldr	r2, [r3, #4]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	2102      	movs	r1, #2
 8007b56:	430a      	orrs	r2, r1
 8007b58:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2234      	movs	r2, #52	; 0x34
 8007b5e:	2100      	movs	r1, #0
 8007b60:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8007b62:	2300      	movs	r3, #0
}
 8007b64:	0018      	movs	r0, r3
 8007b66:	46bd      	mov	sp, r7
 8007b68:	b006      	add	sp, #24
 8007b6a:	bd80      	pop	{r7, pc}
 8007b6c:	08007cb3 	.word	0x08007cb3
 8007b70:	08007c6f 	.word	0x08007c6f
 8007b74:	08007cd1 	.word	0x08007cd1

08007b78 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hi2s->Instance->CR2;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hi2s->Instance->SR;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	689b      	ldr	r3, [r3, #8]
 8007b8e:	60bb      	str	r3, [r7, #8]

  /* I2S in mode Receiver ------------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	099b      	lsrs	r3, r3, #6
 8007b94:	001a      	movs	r2, r3
 8007b96:	2301      	movs	r3, #1
 8007b98:	4013      	ands	r3, r2
 8007b9a:	d10e      	bne.n	8007bba <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	4013      	ands	r3, r2
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8007ba2:	d00a      	beq.n	8007bba <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	099b      	lsrs	r3, r3, #6
 8007ba8:	001a      	movs	r2, r3
 8007baa:	2301      	movs	r3, #1
 8007bac:	4013      	ands	r3, r2
 8007bae:	d004      	beq.n	8007bba <HAL_I2S_IRQHandler+0x42>
  {
    I2S_Receive_IT(hi2s);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	0018      	movs	r0, r3
 8007bb4:	f000 f8e2 	bl	8007d7c <I2S_Receive_IT>
    return;
 8007bb8:	e046      	b.n	8007c48 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S in mode Tramitter -----------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_TXE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_TXE) != RESET))
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	085b      	lsrs	r3, r3, #1
 8007bbe:	001a      	movs	r2, r3
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	4013      	ands	r3, r2
 8007bc4:	d00a      	beq.n	8007bdc <HAL_I2S_IRQHandler+0x64>
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	09db      	lsrs	r3, r3, #7
 8007bca:	001a      	movs	r2, r3
 8007bcc:	2301      	movs	r3, #1
 8007bce:	4013      	ands	r3, r2
 8007bd0:	d004      	beq.n	8007bdc <HAL_I2S_IRQHandler+0x64>
  {
    I2S_Transmit_IT(hi2s);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	0018      	movs	r0, r3
 8007bd6:	f000 f8a2 	bl	8007d1e <I2S_Transmit_IT>
    return;
 8007bda:	e035      	b.n	8007c48 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S interrupt error -------------------------------------------------*/
  if (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_ERR) != RESET)
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	095b      	lsrs	r3, r3, #5
 8007be0:	001a      	movs	r2, r3
 8007be2:	2301      	movs	r3, #1
 8007be4:	4013      	ands	r3, r2
 8007be6:	d02f      	beq.n	8007c48 <HAL_I2S_IRQHandler+0xd0>
  {
    /* I2S Overrun error interrupt occurred ---------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) != RESET)
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	099b      	lsrs	r3, r3, #6
 8007bec:	001a      	movs	r2, r3
 8007bee:	2301      	movs	r3, #1
 8007bf0:	4013      	ands	r3, r2
 8007bf2:	d00d      	beq.n	8007c10 <HAL_I2S_IRQHandler+0x98>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	685a      	ldr	r2, [r3, #4]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	2160      	movs	r1, #96	; 0x60
 8007c00:	438a      	bics	r2, r1
 8007c02:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c08:	2202      	movs	r2, #2
 8007c0a:	431a      	orrs	r2, r3
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_UDR) != RESET)
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	08db      	lsrs	r3, r3, #3
 8007c14:	001a      	movs	r2, r3
 8007c16:	2301      	movs	r3, #1
 8007c18:	4013      	ands	r3, r2
 8007c1a:	d00d      	beq.n	8007c38 <HAL_I2S_IRQHandler+0xc0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	685a      	ldr	r2, [r3, #4]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	21a0      	movs	r1, #160	; 0xa0
 8007c28:	438a      	bics	r2, r1
 8007c2a:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c30:	2204      	movs	r2, #4
 8007c32:	431a      	orrs	r2, r3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Set the I2S State ready */
    hi2s->State = HAL_I2S_STATE_READY;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2235      	movs	r2, #53	; 0x35
 8007c3c:	2101      	movs	r1, #1
 8007c3e:	5499      	strb	r1, [r3, r2]

    /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->ErrorCallback(hi2s);
#else
    HAL_I2S_ErrorCallback(hi2s);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	0018      	movs	r0, r3
 8007c44:	f000 f80b 	bl	8007c5e <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	b004      	add	sp, #16
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b082      	sub	sp, #8
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8007c56:	46c0      	nop			; (mov r8, r8)
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	b002      	add	sp, #8
 8007c5c:	bd80      	pop	{r7, pc}

08007c5e <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b082      	sub	sp, #8
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8007c66:	46c0      	nop			; (mov r8, r8)
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	b002      	add	sp, #8
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b084      	sub	sp, #16
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c7a:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	69db      	ldr	r3, [r3, #28]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d10e      	bne.n	8007ca2 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	685a      	ldr	r2, [r3, #4]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2102      	movs	r1, #2
 8007c90:	438a      	bics	r2, r1
 8007c92:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2200      	movs	r2, #0
 8007c98:	845a      	strh	r2, [r3, #34]	; 0x22
    hi2s->State = HAL_I2S_STATE_READY;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2235      	movs	r2, #53	; 0x35
 8007c9e:	2101      	movs	r1, #1
 8007ca0:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	0018      	movs	r0, r3
 8007ca6:	f7f9 fa91 	bl	80011cc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007caa:	46c0      	nop			; (mov r8, r8)
 8007cac:	46bd      	mov	sp, r7
 8007cae:	b004      	add	sp, #16
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b084      	sub	sp, #16
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cbe:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	0018      	movs	r0, r3
 8007cc4:	f7f9 fa6a 	bl	800119c <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007cc8:	46c0      	nop			; (mov r8, r8)
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	b004      	add	sp, #16
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cdc:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	685a      	ldr	r2, [r3, #4]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	2103      	movs	r1, #3
 8007cea:	438a      	bics	r2, r1
 8007cec:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	845a      	strh	r2, [r3, #34]	; 0x22
  hi2s->RxXferCount = 0U;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	855a      	strh	r2, [r3, #42]	; 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2235      	movs	r2, #53	; 0x35
 8007cfe:	2101      	movs	r1, #1
 8007d00:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d06:	2208      	movs	r2, #8
 8007d08:	431a      	orrs	r2, r3
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	0018      	movs	r0, r3
 8007d12:	f7ff ffa4 	bl	8007c5e <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007d16:	46c0      	nop			; (mov r8, r8)
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	b004      	add	sp, #16
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b082      	sub	sp, #8
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	69db      	ldr	r3, [r3, #28]
 8007d2a:	881a      	ldrh	r2, [r3, #0]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	69db      	ldr	r3, [r3, #28]
 8007d36:	1c9a      	adds	r2, r3, #2
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	61da      	str	r2, [r3, #28]
  hi2s->TxXferCount--;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	3b01      	subs	r3, #1
 8007d44:	b29a      	uxth	r2, r3
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	845a      	strh	r2, [r3, #34]	; 0x22

  if (hi2s->TxXferCount == 0U)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d10f      	bne.n	8007d74 <I2S_Transmit_IT+0x56>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	685a      	ldr	r2, [r3, #4]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	21a0      	movs	r1, #160	; 0xa0
 8007d60:	438a      	bics	r2, r1
 8007d62:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2235      	movs	r2, #53	; 0x35
 8007d68:	2101      	movs	r1, #1
 8007d6a:	5499      	strb	r1, [r3, r2]
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	0018      	movs	r0, r3
 8007d70:	f7f9 fa2c 	bl	80011cc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007d74:	46c0      	nop			; (mov r8, r8)
 8007d76:	46bd      	mov	sp, r7
 8007d78:	b002      	add	sp, #8
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	68da      	ldr	r2, [r3, #12]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8e:	b292      	uxth	r2, r2
 8007d90:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d96:	1c9a      	adds	r2, r3, #2
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->RxXferCount--;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	3b01      	subs	r3, #1
 8007da4:	b29a      	uxth	r2, r3
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->RxXferCount == 0U)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d10f      	bne.n	8007dd4 <I2S_Receive_IT+0x58>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	685a      	ldr	r2, [r3, #4]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2160      	movs	r1, #96	; 0x60
 8007dc0:	438a      	bics	r2, r1
 8007dc2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2235      	movs	r2, #53	; 0x35
 8007dc8:	2101      	movs	r1, #1
 8007dca:	5499      	strb	r1, [r3, r2]
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	0018      	movs	r0, r3
 8007dd0:	f7ff ff3d 	bl	8007c4e <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007dd4:	46c0      	nop			; (mov r8, r8)
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	b002      	add	sp, #8
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8007de4:	4b19      	ldr	r3, [pc, #100]	; (8007e4c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a19      	ldr	r2, [pc, #100]	; (8007e50 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8007dea:	4013      	ands	r3, r2
 8007dec:	0019      	movs	r1, r3
 8007dee:	4b17      	ldr	r3, [pc, #92]	; (8007e4c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	430a      	orrs	r2, r1
 8007df4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	2380      	movs	r3, #128	; 0x80
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d11f      	bne.n	8007e40 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8007e00:	4b14      	ldr	r3, [pc, #80]	; (8007e54 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	0013      	movs	r3, r2
 8007e06:	005b      	lsls	r3, r3, #1
 8007e08:	189b      	adds	r3, r3, r2
 8007e0a:	005b      	lsls	r3, r3, #1
 8007e0c:	4912      	ldr	r1, [pc, #72]	; (8007e58 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8007e0e:	0018      	movs	r0, r3
 8007e10:	f7f8 f978 	bl	8000104 <__udivsi3>
 8007e14:	0003      	movs	r3, r0
 8007e16:	3301      	adds	r3, #1
 8007e18:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007e1a:	e008      	b.n	8007e2e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d003      	beq.n	8007e2a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	3b01      	subs	r3, #1
 8007e26:	60fb      	str	r3, [r7, #12]
 8007e28:	e001      	b.n	8007e2e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8007e2a:	2303      	movs	r3, #3
 8007e2c:	e009      	b.n	8007e42 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007e2e:	4b07      	ldr	r3, [pc, #28]	; (8007e4c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007e30:	695a      	ldr	r2, [r3, #20]
 8007e32:	2380      	movs	r3, #128	; 0x80
 8007e34:	00db      	lsls	r3, r3, #3
 8007e36:	401a      	ands	r2, r3
 8007e38:	2380      	movs	r3, #128	; 0x80
 8007e3a:	00db      	lsls	r3, r3, #3
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d0ed      	beq.n	8007e1c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8007e40:	2300      	movs	r3, #0
}
 8007e42:	0018      	movs	r0, r3
 8007e44:	46bd      	mov	sp, r7
 8007e46:	b004      	add	sp, #16
 8007e48:	bd80      	pop	{r7, pc}
 8007e4a:	46c0      	nop			; (mov r8, r8)
 8007e4c:	40007000 	.word	0x40007000
 8007e50:	fffff9ff 	.word	0xfffff9ff
 8007e54:	20000064 	.word	0x20000064
 8007e58:	000f4240 	.word	0x000f4240

08007e5c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8007e60:	4b03      	ldr	r3, [pc, #12]	; (8007e70 <LL_RCC_GetAPB1Prescaler+0x14>)
 8007e62:	689a      	ldr	r2, [r3, #8]
 8007e64:	23e0      	movs	r3, #224	; 0xe0
 8007e66:	01db      	lsls	r3, r3, #7
 8007e68:	4013      	ands	r3, r2
}
 8007e6a:	0018      	movs	r0, r3
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}
 8007e70:	40021000 	.word	0x40021000

08007e74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b088      	sub	sp, #32
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d101      	bne.n	8007e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007e82:	2301      	movs	r3, #1
 8007e84:	e2fe      	b.n	8008484 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	4013      	ands	r3, r2
 8007e8e:	d100      	bne.n	8007e92 <HAL_RCC_OscConfig+0x1e>
 8007e90:	e07c      	b.n	8007f8c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e92:	4bc3      	ldr	r3, [pc, #780]	; (80081a0 <HAL_RCC_OscConfig+0x32c>)
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	2238      	movs	r2, #56	; 0x38
 8007e98:	4013      	ands	r3, r2
 8007e9a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007e9c:	4bc0      	ldr	r3, [pc, #768]	; (80081a0 <HAL_RCC_OscConfig+0x32c>)
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	2203      	movs	r2, #3
 8007ea2:	4013      	ands	r3, r2
 8007ea4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	2b10      	cmp	r3, #16
 8007eaa:	d102      	bne.n	8007eb2 <HAL_RCC_OscConfig+0x3e>
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	2b03      	cmp	r3, #3
 8007eb0:	d002      	beq.n	8007eb8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	2b08      	cmp	r3, #8
 8007eb6:	d10b      	bne.n	8007ed0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007eb8:	4bb9      	ldr	r3, [pc, #740]	; (80081a0 <HAL_RCC_OscConfig+0x32c>)
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	2380      	movs	r3, #128	; 0x80
 8007ebe:	029b      	lsls	r3, r3, #10
 8007ec0:	4013      	ands	r3, r2
 8007ec2:	d062      	beq.n	8007f8a <HAL_RCC_OscConfig+0x116>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d15e      	bne.n	8007f8a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e2d9      	b.n	8008484 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	685a      	ldr	r2, [r3, #4]
 8007ed4:	2380      	movs	r3, #128	; 0x80
 8007ed6:	025b      	lsls	r3, r3, #9
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d107      	bne.n	8007eec <HAL_RCC_OscConfig+0x78>
 8007edc:	4bb0      	ldr	r3, [pc, #704]	; (80081a0 <HAL_RCC_OscConfig+0x32c>)
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	4baf      	ldr	r3, [pc, #700]	; (80081a0 <HAL_RCC_OscConfig+0x32c>)
 8007ee2:	2180      	movs	r1, #128	; 0x80
 8007ee4:	0249      	lsls	r1, r1, #9
 8007ee6:	430a      	orrs	r2, r1
 8007ee8:	601a      	str	r2, [r3, #0]
 8007eea:	e020      	b.n	8007f2e <HAL_RCC_OscConfig+0xba>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	685a      	ldr	r2, [r3, #4]
 8007ef0:	23a0      	movs	r3, #160	; 0xa0
 8007ef2:	02db      	lsls	r3, r3, #11
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d10e      	bne.n	8007f16 <HAL_RCC_OscConfig+0xa2>
 8007ef8:	4ba9      	ldr	r3, [pc, #676]	; (80081a0 <HAL_RCC_OscConfig+0x32c>)
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	4ba8      	ldr	r3, [pc, #672]	; (80081a0 <HAL_RCC_OscConfig+0x32c>)
 8007efe:	2180      	movs	r1, #128	; 0x80
 8007f00:	02c9      	lsls	r1, r1, #11
 8007f02:	430a      	orrs	r2, r1
 8007f04:	601a      	str	r2, [r3, #0]
 8007f06:	4ba6      	ldr	r3, [pc, #664]	; (80081a0 <HAL_RCC_OscConfig+0x32c>)
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	4ba5      	ldr	r3, [pc, #660]	; (80081a0 <HAL_RCC_OscConfig+0x32c>)
 8007f0c:	2180      	movs	r1, #128	; 0x80
 8007f0e:	0249      	lsls	r1, r1, #9
 8007f10:	430a      	orrs	r2, r1
 8007f12:	601a      	str	r2, [r3, #0]
 8007f14:	e00b      	b.n	8007f2e <HAL_RCC_OscConfig+0xba>
 8007f16:	4ba2      	ldr	r3, [pc, #648]	; (80081a0 <HAL_RCC_OscConfig+0x32c>)
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	4ba1      	ldr	r3, [pc, #644]	; (80081a0 <HAL_RCC_OscConfig+0x32c>)
 8007f1c:	49a1      	ldr	r1, [pc, #644]	; (80081a4 <HAL_RCC_OscConfig+0x330>)
 8007f1e:	400a      	ands	r2, r1
 8007f20:	601a      	str	r2, [r3, #0]
 8007f22:	4b9f      	ldr	r3, [pc, #636]	; (80081a0 <HAL_RCC_OscConfig+0x32c>)
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	4b9e      	ldr	r3, [pc, #632]	; (80081a0 <HAL_RCC_OscConfig+0x32c>)
 8007f28:	499f      	ldr	r1, [pc, #636]	; (80081a8 <HAL_RCC_OscConfig+0x334>)
 8007f2a:	400a      	ands	r2, r1
 8007f2c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d014      	beq.n	8007f60 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f36:	f7fd fa99 	bl	800546c <HAL_GetTick>
 8007f3a:	0003      	movs	r3, r0
 8007f3c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007f3e:	e008      	b.n	8007f52 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f40:	f7fd fa94 	bl	800546c <HAL_GetTick>
 8007f44:	0002      	movs	r2, r0
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	1ad3      	subs	r3, r2, r3
 8007f4a:	2b64      	cmp	r3, #100	; 0x64
 8007f4c:	d901      	bls.n	8007f52 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8007f4e:	2303      	movs	r3, #3
 8007f50:	e298      	b.n	8008484 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007f52:	4b93      	ldr	r3, [pc, #588]	; (80081a0 <HAL_RCC_OscConfig+0x32c>)
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	2380      	movs	r3, #128	; 0x80
 8007f58:	029b      	lsls	r3, r3, #10
 8007f5a:	4013      	ands	r3, r2
 8007f5c:	d0f0      	beq.n	8007f40 <HAL_RCC_OscConfig+0xcc>
 8007f5e:	e015      	b.n	8007f8c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f60:	f7fd fa84 	bl	800546c <HAL_GetTick>
 8007f64:	0003      	movs	r3, r0
 8007f66:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007f68:	e008      	b.n	8007f7c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f6a:	f7fd fa7f 	bl	800546c <HAL_GetTick>
 8007f6e:	0002      	movs	r2, r0
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	1ad3      	subs	r3, r2, r3
 8007f74:	2b64      	cmp	r3, #100	; 0x64
 8007f76:	d901      	bls.n	8007f7c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007f78:	2303      	movs	r3, #3
 8007f7a:	e283      	b.n	8008484 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007f7c:	4b88      	ldr	r3, [pc, #544]	; (80081a0 <HAL_RCC_OscConfig+0x32c>)
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	2380      	movs	r3, #128	; 0x80
 8007f82:	029b      	lsls	r3, r3, #10
 8007f84:	4013      	ands	r3, r2
 8007f86:	d1f0      	bne.n	8007f6a <HAL_RCC_OscConfig+0xf6>
 8007f88:	e000      	b.n	8007f8c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f8a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2202      	movs	r2, #2
 8007f92:	4013      	ands	r3, r2
 8007f94:	d100      	bne.n	8007f98 <HAL_RCC_OscConfig+0x124>
 8007f96:	e099      	b.n	80080cc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f98:	4b81      	ldr	r3, [pc, #516]	; (80081a0 <HAL_RCC_OscConfig+0x32c>)
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	2238      	movs	r2, #56	; 0x38
 8007f9e:	4013      	ands	r3, r2
 8007fa0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007fa2:	4b7f      	ldr	r3, [pc, #508]	; (80081a0 <HAL_RCC_OscConfig+0x32c>)
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	2203      	movs	r2, #3
 8007fa8:	4013      	ands	r3, r2
 8007faa:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8007fac:	69bb      	ldr	r3, [r7, #24]
 8007fae:	2b10      	cmp	r3, #16
 8007fb0:	d102      	bne.n	8007fb8 <HAL_RCC_OscConfig+0x144>
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	2b02      	cmp	r3, #2
 8007fb6:	d002      	beq.n	8007fbe <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d135      	bne.n	800802a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007fbe:	4b78      	ldr	r3, [pc, #480]	; (80081a0 <HAL_RCC_OscConfig+0x32c>)
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	2380      	movs	r3, #128	; 0x80
 8007fc4:	00db      	lsls	r3, r3, #3
 8007fc6:	4013      	ands	r3, r2
 8007fc8:	d005      	beq.n	8007fd6 <HAL_RCC_OscConfig+0x162>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d101      	bne.n	8007fd6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e256      	b.n	8008484 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fd6:	4b72      	ldr	r3, [pc, #456]	; (80081a0 <HAL_RCC_OscConfig+0x32c>)
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	4a74      	ldr	r2, [pc, #464]	; (80081ac <HAL_RCC_OscConfig+0x338>)
 8007fdc:	4013      	ands	r3, r2
 8007fde:	0019      	movs	r1, r3
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	695b      	ldr	r3, [r3, #20]
 8007fe4:	021a      	lsls	r2, r3, #8
 8007fe6:	4b6e      	ldr	r3, [pc, #440]	; (80081a0 <HAL_RCC_OscConfig+0x32c>)
 8007fe8:	430a      	orrs	r2, r1
 8007fea:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d112      	bne.n	8008018 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8007ff2:	4b6b      	ldr	r3, [pc, #428]	; (80081a0 <HAL_RCC_OscConfig+0x32c>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a6e      	ldr	r2, [pc, #440]	; (80081b0 <HAL_RCC_OscConfig+0x33c>)
 8007ff8:	4013      	ands	r3, r2
 8007ffa:	0019      	movs	r1, r3
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	691a      	ldr	r2, [r3, #16]
 8008000:	4b67      	ldr	r3, [pc, #412]	; (80081a0 <HAL_RCC_OscConfig+0x32c>)
 8008002:	430a      	orrs	r2, r1
 8008004:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8008006:	4b66      	ldr	r3, [pc, #408]	; (80081a0 <HAL_RCC_OscConfig+0x32c>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	0adb      	lsrs	r3, r3, #11
 800800c:	2207      	movs	r2, #7
 800800e:	4013      	ands	r3, r2
 8008010:	4a68      	ldr	r2, [pc, #416]	; (80081b4 <HAL_RCC_OscConfig+0x340>)
 8008012:	40da      	lsrs	r2, r3
 8008014:	4b68      	ldr	r3, [pc, #416]	; (80081b8 <HAL_RCC_OscConfig+0x344>)
 8008016:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008018:	4b68      	ldr	r3, [pc, #416]	; (80081bc <HAL_RCC_OscConfig+0x348>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	0018      	movs	r0, r3
 800801e:	f7fd f9c9 	bl	80053b4 <HAL_InitTick>
 8008022:	1e03      	subs	r3, r0, #0
 8008024:	d051      	beq.n	80080ca <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8008026:	2301      	movs	r3, #1
 8008028:	e22c      	b.n	8008484 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d030      	beq.n	8008094 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008032:	4b5b      	ldr	r3, [pc, #364]	; (80081a0 <HAL_RCC_OscConfig+0x32c>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a5e      	ldr	r2, [pc, #376]	; (80081b0 <HAL_RCC_OscConfig+0x33c>)
 8008038:	4013      	ands	r3, r2
 800803a:	0019      	movs	r1, r3
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	691a      	ldr	r2, [r3, #16]
 8008040:	4b57      	ldr	r3, [pc, #348]	; (80081a0 <HAL_RCC_OscConfig+0x32c>)
 8008042:	430a      	orrs	r2, r1
 8008044:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8008046:	4b56      	ldr	r3, [pc, #344]	; (80081a0 <HAL_RCC_OscConfig+0x32c>)
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	4b55      	ldr	r3, [pc, #340]	; (80081a0 <HAL_RCC_OscConfig+0x32c>)
 800804c:	2180      	movs	r1, #128	; 0x80
 800804e:	0049      	lsls	r1, r1, #1
 8008050:	430a      	orrs	r2, r1
 8008052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008054:	f7fd fa0a 	bl	800546c <HAL_GetTick>
 8008058:	0003      	movs	r3, r0
 800805a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800805c:	e008      	b.n	8008070 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800805e:	f7fd fa05 	bl	800546c <HAL_GetTick>
 8008062:	0002      	movs	r2, r0
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	1ad3      	subs	r3, r2, r3
 8008068:	2b02      	cmp	r3, #2
 800806a:	d901      	bls.n	8008070 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800806c:	2303      	movs	r3, #3
 800806e:	e209      	b.n	8008484 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008070:	4b4b      	ldr	r3, [pc, #300]	; (80081a0 <HAL_RCC_OscConfig+0x32c>)
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	2380      	movs	r3, #128	; 0x80
 8008076:	00db      	lsls	r3, r3, #3
 8008078:	4013      	ands	r3, r2
 800807a:	d0f0      	beq.n	800805e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800807c:	4b48      	ldr	r3, [pc, #288]	; (80081a0 <HAL_RCC_OscConfig+0x32c>)
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	4a4a      	ldr	r2, [pc, #296]	; (80081ac <HAL_RCC_OscConfig+0x338>)
 8008082:	4013      	ands	r3, r2
 8008084:	0019      	movs	r1, r3
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	695b      	ldr	r3, [r3, #20]
 800808a:	021a      	lsls	r2, r3, #8
 800808c:	4b44      	ldr	r3, [pc, #272]	; (80081a0 <HAL_RCC_OscConfig+0x32c>)
 800808e:	430a      	orrs	r2, r1
 8008090:	605a      	str	r2, [r3, #4]
 8008092:	e01b      	b.n	80080cc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8008094:	4b42      	ldr	r3, [pc, #264]	; (80081a0 <HAL_RCC_OscConfig+0x32c>)
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	4b41      	ldr	r3, [pc, #260]	; (80081a0 <HAL_RCC_OscConfig+0x32c>)
 800809a:	4949      	ldr	r1, [pc, #292]	; (80081c0 <HAL_RCC_OscConfig+0x34c>)
 800809c:	400a      	ands	r2, r1
 800809e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080a0:	f7fd f9e4 	bl	800546c <HAL_GetTick>
 80080a4:	0003      	movs	r3, r0
 80080a6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80080a8:	e008      	b.n	80080bc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80080aa:	f7fd f9df 	bl	800546c <HAL_GetTick>
 80080ae:	0002      	movs	r2, r0
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	1ad3      	subs	r3, r2, r3
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	d901      	bls.n	80080bc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80080b8:	2303      	movs	r3, #3
 80080ba:	e1e3      	b.n	8008484 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80080bc:	4b38      	ldr	r3, [pc, #224]	; (80081a0 <HAL_RCC_OscConfig+0x32c>)
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	2380      	movs	r3, #128	; 0x80
 80080c2:	00db      	lsls	r3, r3, #3
 80080c4:	4013      	ands	r3, r2
 80080c6:	d1f0      	bne.n	80080aa <HAL_RCC_OscConfig+0x236>
 80080c8:	e000      	b.n	80080cc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80080ca:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	2208      	movs	r2, #8
 80080d2:	4013      	ands	r3, r2
 80080d4:	d047      	beq.n	8008166 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80080d6:	4b32      	ldr	r3, [pc, #200]	; (80081a0 <HAL_RCC_OscConfig+0x32c>)
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	2238      	movs	r2, #56	; 0x38
 80080dc:	4013      	ands	r3, r2
 80080de:	2b18      	cmp	r3, #24
 80080e0:	d10a      	bne.n	80080f8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80080e2:	4b2f      	ldr	r3, [pc, #188]	; (80081a0 <HAL_RCC_OscConfig+0x32c>)
 80080e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080e6:	2202      	movs	r2, #2
 80080e8:	4013      	ands	r3, r2
 80080ea:	d03c      	beq.n	8008166 <HAL_RCC_OscConfig+0x2f2>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	699b      	ldr	r3, [r3, #24]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d138      	bne.n	8008166 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80080f4:	2301      	movs	r3, #1
 80080f6:	e1c5      	b.n	8008484 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	699b      	ldr	r3, [r3, #24]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d019      	beq.n	8008134 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8008100:	4b27      	ldr	r3, [pc, #156]	; (80081a0 <HAL_RCC_OscConfig+0x32c>)
 8008102:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008104:	4b26      	ldr	r3, [pc, #152]	; (80081a0 <HAL_RCC_OscConfig+0x32c>)
 8008106:	2101      	movs	r1, #1
 8008108:	430a      	orrs	r2, r1
 800810a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800810c:	f7fd f9ae 	bl	800546c <HAL_GetTick>
 8008110:	0003      	movs	r3, r0
 8008112:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008114:	e008      	b.n	8008128 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008116:	f7fd f9a9 	bl	800546c <HAL_GetTick>
 800811a:	0002      	movs	r2, r0
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	1ad3      	subs	r3, r2, r3
 8008120:	2b02      	cmp	r3, #2
 8008122:	d901      	bls.n	8008128 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8008124:	2303      	movs	r3, #3
 8008126:	e1ad      	b.n	8008484 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008128:	4b1d      	ldr	r3, [pc, #116]	; (80081a0 <HAL_RCC_OscConfig+0x32c>)
 800812a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800812c:	2202      	movs	r2, #2
 800812e:	4013      	ands	r3, r2
 8008130:	d0f1      	beq.n	8008116 <HAL_RCC_OscConfig+0x2a2>
 8008132:	e018      	b.n	8008166 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8008134:	4b1a      	ldr	r3, [pc, #104]	; (80081a0 <HAL_RCC_OscConfig+0x32c>)
 8008136:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008138:	4b19      	ldr	r3, [pc, #100]	; (80081a0 <HAL_RCC_OscConfig+0x32c>)
 800813a:	2101      	movs	r1, #1
 800813c:	438a      	bics	r2, r1
 800813e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008140:	f7fd f994 	bl	800546c <HAL_GetTick>
 8008144:	0003      	movs	r3, r0
 8008146:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008148:	e008      	b.n	800815c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800814a:	f7fd f98f 	bl	800546c <HAL_GetTick>
 800814e:	0002      	movs	r2, r0
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	1ad3      	subs	r3, r2, r3
 8008154:	2b02      	cmp	r3, #2
 8008156:	d901      	bls.n	800815c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8008158:	2303      	movs	r3, #3
 800815a:	e193      	b.n	8008484 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800815c:	4b10      	ldr	r3, [pc, #64]	; (80081a0 <HAL_RCC_OscConfig+0x32c>)
 800815e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008160:	2202      	movs	r2, #2
 8008162:	4013      	ands	r3, r2
 8008164:	d1f1      	bne.n	800814a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	2204      	movs	r2, #4
 800816c:	4013      	ands	r3, r2
 800816e:	d100      	bne.n	8008172 <HAL_RCC_OscConfig+0x2fe>
 8008170:	e0c6      	b.n	8008300 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008172:	231f      	movs	r3, #31
 8008174:	18fb      	adds	r3, r7, r3
 8008176:	2200      	movs	r2, #0
 8008178:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800817a:	4b09      	ldr	r3, [pc, #36]	; (80081a0 <HAL_RCC_OscConfig+0x32c>)
 800817c:	689b      	ldr	r3, [r3, #8]
 800817e:	2238      	movs	r2, #56	; 0x38
 8008180:	4013      	ands	r3, r2
 8008182:	2b20      	cmp	r3, #32
 8008184:	d11e      	bne.n	80081c4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8008186:	4b06      	ldr	r3, [pc, #24]	; (80081a0 <HAL_RCC_OscConfig+0x32c>)
 8008188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800818a:	2202      	movs	r2, #2
 800818c:	4013      	ands	r3, r2
 800818e:	d100      	bne.n	8008192 <HAL_RCC_OscConfig+0x31e>
 8008190:	e0b6      	b.n	8008300 <HAL_RCC_OscConfig+0x48c>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d000      	beq.n	800819c <HAL_RCC_OscConfig+0x328>
 800819a:	e0b1      	b.n	8008300 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800819c:	2301      	movs	r3, #1
 800819e:	e171      	b.n	8008484 <HAL_RCC_OscConfig+0x610>
 80081a0:	40021000 	.word	0x40021000
 80081a4:	fffeffff 	.word	0xfffeffff
 80081a8:	fffbffff 	.word	0xfffbffff
 80081ac:	ffff80ff 	.word	0xffff80ff
 80081b0:	ffffc7ff 	.word	0xffffc7ff
 80081b4:	00f42400 	.word	0x00f42400
 80081b8:	20000064 	.word	0x20000064
 80081bc:	20000068 	.word	0x20000068
 80081c0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80081c4:	4bb1      	ldr	r3, [pc, #708]	; (800848c <HAL_RCC_OscConfig+0x618>)
 80081c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081c8:	2380      	movs	r3, #128	; 0x80
 80081ca:	055b      	lsls	r3, r3, #21
 80081cc:	4013      	ands	r3, r2
 80081ce:	d101      	bne.n	80081d4 <HAL_RCC_OscConfig+0x360>
 80081d0:	2301      	movs	r3, #1
 80081d2:	e000      	b.n	80081d6 <HAL_RCC_OscConfig+0x362>
 80081d4:	2300      	movs	r3, #0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d011      	beq.n	80081fe <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80081da:	4bac      	ldr	r3, [pc, #688]	; (800848c <HAL_RCC_OscConfig+0x618>)
 80081dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081de:	4bab      	ldr	r3, [pc, #684]	; (800848c <HAL_RCC_OscConfig+0x618>)
 80081e0:	2180      	movs	r1, #128	; 0x80
 80081e2:	0549      	lsls	r1, r1, #21
 80081e4:	430a      	orrs	r2, r1
 80081e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80081e8:	4ba8      	ldr	r3, [pc, #672]	; (800848c <HAL_RCC_OscConfig+0x618>)
 80081ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081ec:	2380      	movs	r3, #128	; 0x80
 80081ee:	055b      	lsls	r3, r3, #21
 80081f0:	4013      	ands	r3, r2
 80081f2:	60fb      	str	r3, [r7, #12]
 80081f4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80081f6:	231f      	movs	r3, #31
 80081f8:	18fb      	adds	r3, r7, r3
 80081fa:	2201      	movs	r2, #1
 80081fc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80081fe:	4ba4      	ldr	r3, [pc, #656]	; (8008490 <HAL_RCC_OscConfig+0x61c>)
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	2380      	movs	r3, #128	; 0x80
 8008204:	005b      	lsls	r3, r3, #1
 8008206:	4013      	ands	r3, r2
 8008208:	d11a      	bne.n	8008240 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800820a:	4ba1      	ldr	r3, [pc, #644]	; (8008490 <HAL_RCC_OscConfig+0x61c>)
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	4ba0      	ldr	r3, [pc, #640]	; (8008490 <HAL_RCC_OscConfig+0x61c>)
 8008210:	2180      	movs	r1, #128	; 0x80
 8008212:	0049      	lsls	r1, r1, #1
 8008214:	430a      	orrs	r2, r1
 8008216:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8008218:	f7fd f928 	bl	800546c <HAL_GetTick>
 800821c:	0003      	movs	r3, r0
 800821e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008220:	e008      	b.n	8008234 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008222:	f7fd f923 	bl	800546c <HAL_GetTick>
 8008226:	0002      	movs	r2, r0
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	1ad3      	subs	r3, r2, r3
 800822c:	2b02      	cmp	r3, #2
 800822e:	d901      	bls.n	8008234 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8008230:	2303      	movs	r3, #3
 8008232:	e127      	b.n	8008484 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008234:	4b96      	ldr	r3, [pc, #600]	; (8008490 <HAL_RCC_OscConfig+0x61c>)
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	2380      	movs	r3, #128	; 0x80
 800823a:	005b      	lsls	r3, r3, #1
 800823c:	4013      	ands	r3, r2
 800823e:	d0f0      	beq.n	8008222 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	2b01      	cmp	r3, #1
 8008246:	d106      	bne.n	8008256 <HAL_RCC_OscConfig+0x3e2>
 8008248:	4b90      	ldr	r3, [pc, #576]	; (800848c <HAL_RCC_OscConfig+0x618>)
 800824a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800824c:	4b8f      	ldr	r3, [pc, #572]	; (800848c <HAL_RCC_OscConfig+0x618>)
 800824e:	2101      	movs	r1, #1
 8008250:	430a      	orrs	r2, r1
 8008252:	65da      	str	r2, [r3, #92]	; 0x5c
 8008254:	e01c      	b.n	8008290 <HAL_RCC_OscConfig+0x41c>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	2b05      	cmp	r3, #5
 800825c:	d10c      	bne.n	8008278 <HAL_RCC_OscConfig+0x404>
 800825e:	4b8b      	ldr	r3, [pc, #556]	; (800848c <HAL_RCC_OscConfig+0x618>)
 8008260:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008262:	4b8a      	ldr	r3, [pc, #552]	; (800848c <HAL_RCC_OscConfig+0x618>)
 8008264:	2104      	movs	r1, #4
 8008266:	430a      	orrs	r2, r1
 8008268:	65da      	str	r2, [r3, #92]	; 0x5c
 800826a:	4b88      	ldr	r3, [pc, #544]	; (800848c <HAL_RCC_OscConfig+0x618>)
 800826c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800826e:	4b87      	ldr	r3, [pc, #540]	; (800848c <HAL_RCC_OscConfig+0x618>)
 8008270:	2101      	movs	r1, #1
 8008272:	430a      	orrs	r2, r1
 8008274:	65da      	str	r2, [r3, #92]	; 0x5c
 8008276:	e00b      	b.n	8008290 <HAL_RCC_OscConfig+0x41c>
 8008278:	4b84      	ldr	r3, [pc, #528]	; (800848c <HAL_RCC_OscConfig+0x618>)
 800827a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800827c:	4b83      	ldr	r3, [pc, #524]	; (800848c <HAL_RCC_OscConfig+0x618>)
 800827e:	2101      	movs	r1, #1
 8008280:	438a      	bics	r2, r1
 8008282:	65da      	str	r2, [r3, #92]	; 0x5c
 8008284:	4b81      	ldr	r3, [pc, #516]	; (800848c <HAL_RCC_OscConfig+0x618>)
 8008286:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008288:	4b80      	ldr	r3, [pc, #512]	; (800848c <HAL_RCC_OscConfig+0x618>)
 800828a:	2104      	movs	r1, #4
 800828c:	438a      	bics	r2, r1
 800828e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d014      	beq.n	80082c2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008298:	f7fd f8e8 	bl	800546c <HAL_GetTick>
 800829c:	0003      	movs	r3, r0
 800829e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80082a0:	e009      	b.n	80082b6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082a2:	f7fd f8e3 	bl	800546c <HAL_GetTick>
 80082a6:	0002      	movs	r2, r0
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	1ad3      	subs	r3, r2, r3
 80082ac:	4a79      	ldr	r2, [pc, #484]	; (8008494 <HAL_RCC_OscConfig+0x620>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d901      	bls.n	80082b6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80082b2:	2303      	movs	r3, #3
 80082b4:	e0e6      	b.n	8008484 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80082b6:	4b75      	ldr	r3, [pc, #468]	; (800848c <HAL_RCC_OscConfig+0x618>)
 80082b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082ba:	2202      	movs	r2, #2
 80082bc:	4013      	ands	r3, r2
 80082be:	d0f0      	beq.n	80082a2 <HAL_RCC_OscConfig+0x42e>
 80082c0:	e013      	b.n	80082ea <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082c2:	f7fd f8d3 	bl	800546c <HAL_GetTick>
 80082c6:	0003      	movs	r3, r0
 80082c8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80082ca:	e009      	b.n	80082e0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082cc:	f7fd f8ce 	bl	800546c <HAL_GetTick>
 80082d0:	0002      	movs	r2, r0
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	1ad3      	subs	r3, r2, r3
 80082d6:	4a6f      	ldr	r2, [pc, #444]	; (8008494 <HAL_RCC_OscConfig+0x620>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d901      	bls.n	80082e0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80082dc:	2303      	movs	r3, #3
 80082de:	e0d1      	b.n	8008484 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80082e0:	4b6a      	ldr	r3, [pc, #424]	; (800848c <HAL_RCC_OscConfig+0x618>)
 80082e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082e4:	2202      	movs	r2, #2
 80082e6:	4013      	ands	r3, r2
 80082e8:	d1f0      	bne.n	80082cc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80082ea:	231f      	movs	r3, #31
 80082ec:	18fb      	adds	r3, r7, r3
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d105      	bne.n	8008300 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80082f4:	4b65      	ldr	r3, [pc, #404]	; (800848c <HAL_RCC_OscConfig+0x618>)
 80082f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082f8:	4b64      	ldr	r3, [pc, #400]	; (800848c <HAL_RCC_OscConfig+0x618>)
 80082fa:	4967      	ldr	r1, [pc, #412]	; (8008498 <HAL_RCC_OscConfig+0x624>)
 80082fc:	400a      	ands	r2, r1
 80082fe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	69db      	ldr	r3, [r3, #28]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d100      	bne.n	800830a <HAL_RCC_OscConfig+0x496>
 8008308:	e0bb      	b.n	8008482 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800830a:	4b60      	ldr	r3, [pc, #384]	; (800848c <HAL_RCC_OscConfig+0x618>)
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	2238      	movs	r2, #56	; 0x38
 8008310:	4013      	ands	r3, r2
 8008312:	2b10      	cmp	r3, #16
 8008314:	d100      	bne.n	8008318 <HAL_RCC_OscConfig+0x4a4>
 8008316:	e07b      	b.n	8008410 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	69db      	ldr	r3, [r3, #28]
 800831c:	2b02      	cmp	r3, #2
 800831e:	d156      	bne.n	80083ce <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008320:	4b5a      	ldr	r3, [pc, #360]	; (800848c <HAL_RCC_OscConfig+0x618>)
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	4b59      	ldr	r3, [pc, #356]	; (800848c <HAL_RCC_OscConfig+0x618>)
 8008326:	495d      	ldr	r1, [pc, #372]	; (800849c <HAL_RCC_OscConfig+0x628>)
 8008328:	400a      	ands	r2, r1
 800832a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800832c:	f7fd f89e 	bl	800546c <HAL_GetTick>
 8008330:	0003      	movs	r3, r0
 8008332:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008334:	e008      	b.n	8008348 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008336:	f7fd f899 	bl	800546c <HAL_GetTick>
 800833a:	0002      	movs	r2, r0
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	1ad3      	subs	r3, r2, r3
 8008340:	2b02      	cmp	r3, #2
 8008342:	d901      	bls.n	8008348 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8008344:	2303      	movs	r3, #3
 8008346:	e09d      	b.n	8008484 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008348:	4b50      	ldr	r3, [pc, #320]	; (800848c <HAL_RCC_OscConfig+0x618>)
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	2380      	movs	r3, #128	; 0x80
 800834e:	049b      	lsls	r3, r3, #18
 8008350:	4013      	ands	r3, r2
 8008352:	d1f0      	bne.n	8008336 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008354:	4b4d      	ldr	r3, [pc, #308]	; (800848c <HAL_RCC_OscConfig+0x618>)
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	4a51      	ldr	r2, [pc, #324]	; (80084a0 <HAL_RCC_OscConfig+0x62c>)
 800835a:	4013      	ands	r3, r2
 800835c:	0019      	movs	r1, r3
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6a1a      	ldr	r2, [r3, #32]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008366:	431a      	orrs	r2, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800836c:	021b      	lsls	r3, r3, #8
 800836e:	431a      	orrs	r2, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008374:	431a      	orrs	r2, r3
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800837a:	431a      	orrs	r2, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008380:	431a      	orrs	r2, r3
 8008382:	4b42      	ldr	r3, [pc, #264]	; (800848c <HAL_RCC_OscConfig+0x618>)
 8008384:	430a      	orrs	r2, r1
 8008386:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008388:	4b40      	ldr	r3, [pc, #256]	; (800848c <HAL_RCC_OscConfig+0x618>)
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	4b3f      	ldr	r3, [pc, #252]	; (800848c <HAL_RCC_OscConfig+0x618>)
 800838e:	2180      	movs	r1, #128	; 0x80
 8008390:	0449      	lsls	r1, r1, #17
 8008392:	430a      	orrs	r2, r1
 8008394:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8008396:	4b3d      	ldr	r3, [pc, #244]	; (800848c <HAL_RCC_OscConfig+0x618>)
 8008398:	68da      	ldr	r2, [r3, #12]
 800839a:	4b3c      	ldr	r3, [pc, #240]	; (800848c <HAL_RCC_OscConfig+0x618>)
 800839c:	2180      	movs	r1, #128	; 0x80
 800839e:	0549      	lsls	r1, r1, #21
 80083a0:	430a      	orrs	r2, r1
 80083a2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083a4:	f7fd f862 	bl	800546c <HAL_GetTick>
 80083a8:	0003      	movs	r3, r0
 80083aa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80083ac:	e008      	b.n	80083c0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083ae:	f7fd f85d 	bl	800546c <HAL_GetTick>
 80083b2:	0002      	movs	r2, r0
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	1ad3      	subs	r3, r2, r3
 80083b8:	2b02      	cmp	r3, #2
 80083ba:	d901      	bls.n	80083c0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80083bc:	2303      	movs	r3, #3
 80083be:	e061      	b.n	8008484 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80083c0:	4b32      	ldr	r3, [pc, #200]	; (800848c <HAL_RCC_OscConfig+0x618>)
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	2380      	movs	r3, #128	; 0x80
 80083c6:	049b      	lsls	r3, r3, #18
 80083c8:	4013      	ands	r3, r2
 80083ca:	d0f0      	beq.n	80083ae <HAL_RCC_OscConfig+0x53a>
 80083cc:	e059      	b.n	8008482 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083ce:	4b2f      	ldr	r3, [pc, #188]	; (800848c <HAL_RCC_OscConfig+0x618>)
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	4b2e      	ldr	r3, [pc, #184]	; (800848c <HAL_RCC_OscConfig+0x618>)
 80083d4:	4931      	ldr	r1, [pc, #196]	; (800849c <HAL_RCC_OscConfig+0x628>)
 80083d6:	400a      	ands	r2, r1
 80083d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083da:	f7fd f847 	bl	800546c <HAL_GetTick>
 80083de:	0003      	movs	r3, r0
 80083e0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80083e2:	e008      	b.n	80083f6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083e4:	f7fd f842 	bl	800546c <HAL_GetTick>
 80083e8:	0002      	movs	r2, r0
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	1ad3      	subs	r3, r2, r3
 80083ee:	2b02      	cmp	r3, #2
 80083f0:	d901      	bls.n	80083f6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80083f2:	2303      	movs	r3, #3
 80083f4:	e046      	b.n	8008484 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80083f6:	4b25      	ldr	r3, [pc, #148]	; (800848c <HAL_RCC_OscConfig+0x618>)
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	2380      	movs	r3, #128	; 0x80
 80083fc:	049b      	lsls	r3, r3, #18
 80083fe:	4013      	ands	r3, r2
 8008400:	d1f0      	bne.n	80083e4 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8008402:	4b22      	ldr	r3, [pc, #136]	; (800848c <HAL_RCC_OscConfig+0x618>)
 8008404:	68da      	ldr	r2, [r3, #12]
 8008406:	4b21      	ldr	r3, [pc, #132]	; (800848c <HAL_RCC_OscConfig+0x618>)
 8008408:	4926      	ldr	r1, [pc, #152]	; (80084a4 <HAL_RCC_OscConfig+0x630>)
 800840a:	400a      	ands	r2, r1
 800840c:	60da      	str	r2, [r3, #12]
 800840e:	e038      	b.n	8008482 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	69db      	ldr	r3, [r3, #28]
 8008414:	2b01      	cmp	r3, #1
 8008416:	d101      	bne.n	800841c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8008418:	2301      	movs	r3, #1
 800841a:	e033      	b.n	8008484 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800841c:	4b1b      	ldr	r3, [pc, #108]	; (800848c <HAL_RCC_OscConfig+0x618>)
 800841e:	68db      	ldr	r3, [r3, #12]
 8008420:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	2203      	movs	r2, #3
 8008426:	401a      	ands	r2, r3
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6a1b      	ldr	r3, [r3, #32]
 800842c:	429a      	cmp	r2, r3
 800842e:	d126      	bne.n	800847e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	2270      	movs	r2, #112	; 0x70
 8008434:	401a      	ands	r2, r3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800843a:	429a      	cmp	r2, r3
 800843c:	d11f      	bne.n	800847e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800843e:	697a      	ldr	r2, [r7, #20]
 8008440:	23fe      	movs	r3, #254	; 0xfe
 8008442:	01db      	lsls	r3, r3, #7
 8008444:	401a      	ands	r2, r3
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800844a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800844c:	429a      	cmp	r2, r3
 800844e:	d116      	bne.n	800847e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008450:	697a      	ldr	r2, [r7, #20]
 8008452:	23f8      	movs	r3, #248	; 0xf8
 8008454:	039b      	lsls	r3, r3, #14
 8008456:	401a      	ands	r2, r3
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800845c:	429a      	cmp	r2, r3
 800845e:	d10e      	bne.n	800847e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008460:	697a      	ldr	r2, [r7, #20]
 8008462:	23e0      	movs	r3, #224	; 0xe0
 8008464:	051b      	lsls	r3, r3, #20
 8008466:	401a      	ands	r2, r3
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800846c:	429a      	cmp	r2, r3
 800846e:	d106      	bne.n	800847e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	0f5b      	lsrs	r3, r3, #29
 8008474:	075a      	lsls	r2, r3, #29
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800847a:	429a      	cmp	r2, r3
 800847c:	d001      	beq.n	8008482 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	e000      	b.n	8008484 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8008482:	2300      	movs	r3, #0
}
 8008484:	0018      	movs	r0, r3
 8008486:	46bd      	mov	sp, r7
 8008488:	b008      	add	sp, #32
 800848a:	bd80      	pop	{r7, pc}
 800848c:	40021000 	.word	0x40021000
 8008490:	40007000 	.word	0x40007000
 8008494:	00001388 	.word	0x00001388
 8008498:	efffffff 	.word	0xefffffff
 800849c:	feffffff 	.word	0xfeffffff
 80084a0:	11c1808c 	.word	0x11c1808c
 80084a4:	eefefffc 	.word	0xeefefffc

080084a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d101      	bne.n	80084bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80084b8:	2301      	movs	r3, #1
 80084ba:	e0e9      	b.n	8008690 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80084bc:	4b76      	ldr	r3, [pc, #472]	; (8008698 <HAL_RCC_ClockConfig+0x1f0>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	2207      	movs	r2, #7
 80084c2:	4013      	ands	r3, r2
 80084c4:	683a      	ldr	r2, [r7, #0]
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d91e      	bls.n	8008508 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084ca:	4b73      	ldr	r3, [pc, #460]	; (8008698 <HAL_RCC_ClockConfig+0x1f0>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	2207      	movs	r2, #7
 80084d0:	4393      	bics	r3, r2
 80084d2:	0019      	movs	r1, r3
 80084d4:	4b70      	ldr	r3, [pc, #448]	; (8008698 <HAL_RCC_ClockConfig+0x1f0>)
 80084d6:	683a      	ldr	r2, [r7, #0]
 80084d8:	430a      	orrs	r2, r1
 80084da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80084dc:	f7fc ffc6 	bl	800546c <HAL_GetTick>
 80084e0:	0003      	movs	r3, r0
 80084e2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80084e4:	e009      	b.n	80084fa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80084e6:	f7fc ffc1 	bl	800546c <HAL_GetTick>
 80084ea:	0002      	movs	r2, r0
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	1ad3      	subs	r3, r2, r3
 80084f0:	4a6a      	ldr	r2, [pc, #424]	; (800869c <HAL_RCC_ClockConfig+0x1f4>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d901      	bls.n	80084fa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80084f6:	2303      	movs	r3, #3
 80084f8:	e0ca      	b.n	8008690 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80084fa:	4b67      	ldr	r3, [pc, #412]	; (8008698 <HAL_RCC_ClockConfig+0x1f0>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	2207      	movs	r2, #7
 8008500:	4013      	ands	r3, r2
 8008502:	683a      	ldr	r2, [r7, #0]
 8008504:	429a      	cmp	r2, r3
 8008506:	d1ee      	bne.n	80084e6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2202      	movs	r2, #2
 800850e:	4013      	ands	r3, r2
 8008510:	d015      	beq.n	800853e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	2204      	movs	r2, #4
 8008518:	4013      	ands	r3, r2
 800851a:	d006      	beq.n	800852a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800851c:	4b60      	ldr	r3, [pc, #384]	; (80086a0 <HAL_RCC_ClockConfig+0x1f8>)
 800851e:	689a      	ldr	r2, [r3, #8]
 8008520:	4b5f      	ldr	r3, [pc, #380]	; (80086a0 <HAL_RCC_ClockConfig+0x1f8>)
 8008522:	21e0      	movs	r1, #224	; 0xe0
 8008524:	01c9      	lsls	r1, r1, #7
 8008526:	430a      	orrs	r2, r1
 8008528:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800852a:	4b5d      	ldr	r3, [pc, #372]	; (80086a0 <HAL_RCC_ClockConfig+0x1f8>)
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	4a5d      	ldr	r2, [pc, #372]	; (80086a4 <HAL_RCC_ClockConfig+0x1fc>)
 8008530:	4013      	ands	r3, r2
 8008532:	0019      	movs	r1, r3
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	689a      	ldr	r2, [r3, #8]
 8008538:	4b59      	ldr	r3, [pc, #356]	; (80086a0 <HAL_RCC_ClockConfig+0x1f8>)
 800853a:	430a      	orrs	r2, r1
 800853c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2201      	movs	r2, #1
 8008544:	4013      	ands	r3, r2
 8008546:	d057      	beq.n	80085f8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	2b01      	cmp	r3, #1
 800854e:	d107      	bne.n	8008560 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008550:	4b53      	ldr	r3, [pc, #332]	; (80086a0 <HAL_RCC_ClockConfig+0x1f8>)
 8008552:	681a      	ldr	r2, [r3, #0]
 8008554:	2380      	movs	r3, #128	; 0x80
 8008556:	029b      	lsls	r3, r3, #10
 8008558:	4013      	ands	r3, r2
 800855a:	d12b      	bne.n	80085b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800855c:	2301      	movs	r3, #1
 800855e:	e097      	b.n	8008690 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	2b02      	cmp	r3, #2
 8008566:	d107      	bne.n	8008578 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008568:	4b4d      	ldr	r3, [pc, #308]	; (80086a0 <HAL_RCC_ClockConfig+0x1f8>)
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	2380      	movs	r3, #128	; 0x80
 800856e:	049b      	lsls	r3, r3, #18
 8008570:	4013      	ands	r3, r2
 8008572:	d11f      	bne.n	80085b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008574:	2301      	movs	r3, #1
 8008576:	e08b      	b.n	8008690 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d107      	bne.n	8008590 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008580:	4b47      	ldr	r3, [pc, #284]	; (80086a0 <HAL_RCC_ClockConfig+0x1f8>)
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	2380      	movs	r3, #128	; 0x80
 8008586:	00db      	lsls	r3, r3, #3
 8008588:	4013      	ands	r3, r2
 800858a:	d113      	bne.n	80085b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	e07f      	b.n	8008690 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	2b03      	cmp	r3, #3
 8008596:	d106      	bne.n	80085a6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008598:	4b41      	ldr	r3, [pc, #260]	; (80086a0 <HAL_RCC_ClockConfig+0x1f8>)
 800859a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800859c:	2202      	movs	r2, #2
 800859e:	4013      	ands	r3, r2
 80085a0:	d108      	bne.n	80085b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	e074      	b.n	8008690 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80085a6:	4b3e      	ldr	r3, [pc, #248]	; (80086a0 <HAL_RCC_ClockConfig+0x1f8>)
 80085a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085aa:	2202      	movs	r2, #2
 80085ac:	4013      	ands	r3, r2
 80085ae:	d101      	bne.n	80085b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80085b0:	2301      	movs	r3, #1
 80085b2:	e06d      	b.n	8008690 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80085b4:	4b3a      	ldr	r3, [pc, #232]	; (80086a0 <HAL_RCC_ClockConfig+0x1f8>)
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	2207      	movs	r2, #7
 80085ba:	4393      	bics	r3, r2
 80085bc:	0019      	movs	r1, r3
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	685a      	ldr	r2, [r3, #4]
 80085c2:	4b37      	ldr	r3, [pc, #220]	; (80086a0 <HAL_RCC_ClockConfig+0x1f8>)
 80085c4:	430a      	orrs	r2, r1
 80085c6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085c8:	f7fc ff50 	bl	800546c <HAL_GetTick>
 80085cc:	0003      	movs	r3, r0
 80085ce:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085d0:	e009      	b.n	80085e6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80085d2:	f7fc ff4b 	bl	800546c <HAL_GetTick>
 80085d6:	0002      	movs	r2, r0
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	1ad3      	subs	r3, r2, r3
 80085dc:	4a2f      	ldr	r2, [pc, #188]	; (800869c <HAL_RCC_ClockConfig+0x1f4>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d901      	bls.n	80085e6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80085e2:	2303      	movs	r3, #3
 80085e4:	e054      	b.n	8008690 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085e6:	4b2e      	ldr	r3, [pc, #184]	; (80086a0 <HAL_RCC_ClockConfig+0x1f8>)
 80085e8:	689b      	ldr	r3, [r3, #8]
 80085ea:	2238      	movs	r2, #56	; 0x38
 80085ec:	401a      	ands	r2, r3
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	00db      	lsls	r3, r3, #3
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d1ec      	bne.n	80085d2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80085f8:	4b27      	ldr	r3, [pc, #156]	; (8008698 <HAL_RCC_ClockConfig+0x1f0>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2207      	movs	r2, #7
 80085fe:	4013      	ands	r3, r2
 8008600:	683a      	ldr	r2, [r7, #0]
 8008602:	429a      	cmp	r2, r3
 8008604:	d21e      	bcs.n	8008644 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008606:	4b24      	ldr	r3, [pc, #144]	; (8008698 <HAL_RCC_ClockConfig+0x1f0>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	2207      	movs	r2, #7
 800860c:	4393      	bics	r3, r2
 800860e:	0019      	movs	r1, r3
 8008610:	4b21      	ldr	r3, [pc, #132]	; (8008698 <HAL_RCC_ClockConfig+0x1f0>)
 8008612:	683a      	ldr	r2, [r7, #0]
 8008614:	430a      	orrs	r2, r1
 8008616:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008618:	f7fc ff28 	bl	800546c <HAL_GetTick>
 800861c:	0003      	movs	r3, r0
 800861e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008620:	e009      	b.n	8008636 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008622:	f7fc ff23 	bl	800546c <HAL_GetTick>
 8008626:	0002      	movs	r2, r0
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	1ad3      	subs	r3, r2, r3
 800862c:	4a1b      	ldr	r2, [pc, #108]	; (800869c <HAL_RCC_ClockConfig+0x1f4>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d901      	bls.n	8008636 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8008632:	2303      	movs	r3, #3
 8008634:	e02c      	b.n	8008690 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008636:	4b18      	ldr	r3, [pc, #96]	; (8008698 <HAL_RCC_ClockConfig+0x1f0>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	2207      	movs	r2, #7
 800863c:	4013      	ands	r3, r2
 800863e:	683a      	ldr	r2, [r7, #0]
 8008640:	429a      	cmp	r2, r3
 8008642:	d1ee      	bne.n	8008622 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	2204      	movs	r2, #4
 800864a:	4013      	ands	r3, r2
 800864c:	d009      	beq.n	8008662 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800864e:	4b14      	ldr	r3, [pc, #80]	; (80086a0 <HAL_RCC_ClockConfig+0x1f8>)
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	4a15      	ldr	r2, [pc, #84]	; (80086a8 <HAL_RCC_ClockConfig+0x200>)
 8008654:	4013      	ands	r3, r2
 8008656:	0019      	movs	r1, r3
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	68da      	ldr	r2, [r3, #12]
 800865c:	4b10      	ldr	r3, [pc, #64]	; (80086a0 <HAL_RCC_ClockConfig+0x1f8>)
 800865e:	430a      	orrs	r2, r1
 8008660:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8008662:	f000 f829 	bl	80086b8 <HAL_RCC_GetSysClockFreq>
 8008666:	0001      	movs	r1, r0
 8008668:	4b0d      	ldr	r3, [pc, #52]	; (80086a0 <HAL_RCC_ClockConfig+0x1f8>)
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	0a1b      	lsrs	r3, r3, #8
 800866e:	220f      	movs	r2, #15
 8008670:	401a      	ands	r2, r3
 8008672:	4b0e      	ldr	r3, [pc, #56]	; (80086ac <HAL_RCC_ClockConfig+0x204>)
 8008674:	0092      	lsls	r2, r2, #2
 8008676:	58d3      	ldr	r3, [r2, r3]
 8008678:	221f      	movs	r2, #31
 800867a:	4013      	ands	r3, r2
 800867c:	000a      	movs	r2, r1
 800867e:	40da      	lsrs	r2, r3
 8008680:	4b0b      	ldr	r3, [pc, #44]	; (80086b0 <HAL_RCC_ClockConfig+0x208>)
 8008682:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008684:	4b0b      	ldr	r3, [pc, #44]	; (80086b4 <HAL_RCC_ClockConfig+0x20c>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	0018      	movs	r0, r3
 800868a:	f7fc fe93 	bl	80053b4 <HAL_InitTick>
 800868e:	0003      	movs	r3, r0
}
 8008690:	0018      	movs	r0, r3
 8008692:	46bd      	mov	sp, r7
 8008694:	b004      	add	sp, #16
 8008696:	bd80      	pop	{r7, pc}
 8008698:	40022000 	.word	0x40022000
 800869c:	00001388 	.word	0x00001388
 80086a0:	40021000 	.word	0x40021000
 80086a4:	fffff0ff 	.word	0xfffff0ff
 80086a8:	ffff8fff 	.word	0xffff8fff
 80086ac:	08015fcc 	.word	0x08015fcc
 80086b0:	20000064 	.word	0x20000064
 80086b4:	20000068 	.word	0x20000068

080086b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b086      	sub	sp, #24
 80086bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80086be:	4b3c      	ldr	r3, [pc, #240]	; (80087b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	2238      	movs	r2, #56	; 0x38
 80086c4:	4013      	ands	r3, r2
 80086c6:	d10f      	bne.n	80086e8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80086c8:	4b39      	ldr	r3, [pc, #228]	; (80087b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	0adb      	lsrs	r3, r3, #11
 80086ce:	2207      	movs	r2, #7
 80086d0:	4013      	ands	r3, r2
 80086d2:	2201      	movs	r2, #1
 80086d4:	409a      	lsls	r2, r3
 80086d6:	0013      	movs	r3, r2
 80086d8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80086da:	6839      	ldr	r1, [r7, #0]
 80086dc:	4835      	ldr	r0, [pc, #212]	; (80087b4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80086de:	f7f7 fd11 	bl	8000104 <__udivsi3>
 80086e2:	0003      	movs	r3, r0
 80086e4:	613b      	str	r3, [r7, #16]
 80086e6:	e05d      	b.n	80087a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80086e8:	4b31      	ldr	r3, [pc, #196]	; (80087b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	2238      	movs	r2, #56	; 0x38
 80086ee:	4013      	ands	r3, r2
 80086f0:	2b08      	cmp	r3, #8
 80086f2:	d102      	bne.n	80086fa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80086f4:	4b30      	ldr	r3, [pc, #192]	; (80087b8 <HAL_RCC_GetSysClockFreq+0x100>)
 80086f6:	613b      	str	r3, [r7, #16]
 80086f8:	e054      	b.n	80087a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80086fa:	4b2d      	ldr	r3, [pc, #180]	; (80087b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80086fc:	689b      	ldr	r3, [r3, #8]
 80086fe:	2238      	movs	r2, #56	; 0x38
 8008700:	4013      	ands	r3, r2
 8008702:	2b10      	cmp	r3, #16
 8008704:	d138      	bne.n	8008778 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8008706:	4b2a      	ldr	r3, [pc, #168]	; (80087b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008708:	68db      	ldr	r3, [r3, #12]
 800870a:	2203      	movs	r2, #3
 800870c:	4013      	ands	r3, r2
 800870e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008710:	4b27      	ldr	r3, [pc, #156]	; (80087b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	091b      	lsrs	r3, r3, #4
 8008716:	2207      	movs	r2, #7
 8008718:	4013      	ands	r3, r2
 800871a:	3301      	adds	r3, #1
 800871c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2b03      	cmp	r3, #3
 8008722:	d10d      	bne.n	8008740 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008724:	68b9      	ldr	r1, [r7, #8]
 8008726:	4824      	ldr	r0, [pc, #144]	; (80087b8 <HAL_RCC_GetSysClockFreq+0x100>)
 8008728:	f7f7 fcec 	bl	8000104 <__udivsi3>
 800872c:	0003      	movs	r3, r0
 800872e:	0019      	movs	r1, r3
 8008730:	4b1f      	ldr	r3, [pc, #124]	; (80087b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008732:	68db      	ldr	r3, [r3, #12]
 8008734:	0a1b      	lsrs	r3, r3, #8
 8008736:	227f      	movs	r2, #127	; 0x7f
 8008738:	4013      	ands	r3, r2
 800873a:	434b      	muls	r3, r1
 800873c:	617b      	str	r3, [r7, #20]
        break;
 800873e:	e00d      	b.n	800875c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8008740:	68b9      	ldr	r1, [r7, #8]
 8008742:	481c      	ldr	r0, [pc, #112]	; (80087b4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8008744:	f7f7 fcde 	bl	8000104 <__udivsi3>
 8008748:	0003      	movs	r3, r0
 800874a:	0019      	movs	r1, r3
 800874c:	4b18      	ldr	r3, [pc, #96]	; (80087b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800874e:	68db      	ldr	r3, [r3, #12]
 8008750:	0a1b      	lsrs	r3, r3, #8
 8008752:	227f      	movs	r2, #127	; 0x7f
 8008754:	4013      	ands	r3, r2
 8008756:	434b      	muls	r3, r1
 8008758:	617b      	str	r3, [r7, #20]
        break;
 800875a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800875c:	4b14      	ldr	r3, [pc, #80]	; (80087b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	0f5b      	lsrs	r3, r3, #29
 8008762:	2207      	movs	r2, #7
 8008764:	4013      	ands	r3, r2
 8008766:	3301      	adds	r3, #1
 8008768:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800876a:	6879      	ldr	r1, [r7, #4]
 800876c:	6978      	ldr	r0, [r7, #20]
 800876e:	f7f7 fcc9 	bl	8000104 <__udivsi3>
 8008772:	0003      	movs	r3, r0
 8008774:	613b      	str	r3, [r7, #16]
 8008776:	e015      	b.n	80087a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008778:	4b0d      	ldr	r3, [pc, #52]	; (80087b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	2238      	movs	r2, #56	; 0x38
 800877e:	4013      	ands	r3, r2
 8008780:	2b20      	cmp	r3, #32
 8008782:	d103      	bne.n	800878c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8008784:	2380      	movs	r3, #128	; 0x80
 8008786:	021b      	lsls	r3, r3, #8
 8008788:	613b      	str	r3, [r7, #16]
 800878a:	e00b      	b.n	80087a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800878c:	4b08      	ldr	r3, [pc, #32]	; (80087b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800878e:	689b      	ldr	r3, [r3, #8]
 8008790:	2238      	movs	r2, #56	; 0x38
 8008792:	4013      	ands	r3, r2
 8008794:	2b18      	cmp	r3, #24
 8008796:	d103      	bne.n	80087a0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8008798:	23fa      	movs	r3, #250	; 0xfa
 800879a:	01db      	lsls	r3, r3, #7
 800879c:	613b      	str	r3, [r7, #16]
 800879e:	e001      	b.n	80087a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80087a0:	2300      	movs	r3, #0
 80087a2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80087a4:	693b      	ldr	r3, [r7, #16]
}
 80087a6:	0018      	movs	r0, r3
 80087a8:	46bd      	mov	sp, r7
 80087aa:	b006      	add	sp, #24
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	46c0      	nop			; (mov r8, r8)
 80087b0:	40021000 	.word	0x40021000
 80087b4:	00f42400 	.word	0x00f42400
 80087b8:	007a1200 	.word	0x007a1200

080087bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80087c0:	4b02      	ldr	r3, [pc, #8]	; (80087cc <HAL_RCC_GetHCLKFreq+0x10>)
 80087c2:	681b      	ldr	r3, [r3, #0]
}
 80087c4:	0018      	movs	r0, r3
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	46c0      	nop			; (mov r8, r8)
 80087cc:	20000064 	.word	0x20000064

080087d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80087d0:	b5b0      	push	{r4, r5, r7, lr}
 80087d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80087d4:	f7ff fff2 	bl	80087bc <HAL_RCC_GetHCLKFreq>
 80087d8:	0004      	movs	r4, r0
 80087da:	f7ff fb3f 	bl	8007e5c <LL_RCC_GetAPB1Prescaler>
 80087de:	0003      	movs	r3, r0
 80087e0:	0b1a      	lsrs	r2, r3, #12
 80087e2:	4b05      	ldr	r3, [pc, #20]	; (80087f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80087e4:	0092      	lsls	r2, r2, #2
 80087e6:	58d3      	ldr	r3, [r2, r3]
 80087e8:	221f      	movs	r2, #31
 80087ea:	4013      	ands	r3, r2
 80087ec:	40dc      	lsrs	r4, r3
 80087ee:	0023      	movs	r3, r4
}
 80087f0:	0018      	movs	r0, r3
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bdb0      	pop	{r4, r5, r7, pc}
 80087f6:	46c0      	nop			; (mov r8, r8)
 80087f8:	0801600c 	.word	0x0801600c

080087fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b086      	sub	sp, #24
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8008804:	2313      	movs	r3, #19
 8008806:	18fb      	adds	r3, r7, r3
 8008808:	2200      	movs	r2, #0
 800880a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800880c:	2312      	movs	r3, #18
 800880e:	18fb      	adds	r3, r7, r3
 8008810:	2200      	movs	r2, #0
 8008812:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	2380      	movs	r3, #128	; 0x80
 800881a:	029b      	lsls	r3, r3, #10
 800881c:	4013      	ands	r3, r2
 800881e:	d100      	bne.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8008820:	e0a3      	b.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008822:	2011      	movs	r0, #17
 8008824:	183b      	adds	r3, r7, r0
 8008826:	2200      	movs	r2, #0
 8008828:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800882a:	4bc3      	ldr	r3, [pc, #780]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800882c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800882e:	2380      	movs	r3, #128	; 0x80
 8008830:	055b      	lsls	r3, r3, #21
 8008832:	4013      	ands	r3, r2
 8008834:	d110      	bne.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008836:	4bc0      	ldr	r3, [pc, #768]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008838:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800883a:	4bbf      	ldr	r3, [pc, #764]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800883c:	2180      	movs	r1, #128	; 0x80
 800883e:	0549      	lsls	r1, r1, #21
 8008840:	430a      	orrs	r2, r1
 8008842:	63da      	str	r2, [r3, #60]	; 0x3c
 8008844:	4bbc      	ldr	r3, [pc, #752]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008846:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008848:	2380      	movs	r3, #128	; 0x80
 800884a:	055b      	lsls	r3, r3, #21
 800884c:	4013      	ands	r3, r2
 800884e:	60bb      	str	r3, [r7, #8]
 8008850:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008852:	183b      	adds	r3, r7, r0
 8008854:	2201      	movs	r2, #1
 8008856:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008858:	4bb8      	ldr	r3, [pc, #736]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	4bb7      	ldr	r3, [pc, #732]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800885e:	2180      	movs	r1, #128	; 0x80
 8008860:	0049      	lsls	r1, r1, #1
 8008862:	430a      	orrs	r2, r1
 8008864:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008866:	f7fc fe01 	bl	800546c <HAL_GetTick>
 800886a:	0003      	movs	r3, r0
 800886c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800886e:	e00b      	b.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008870:	f7fc fdfc 	bl	800546c <HAL_GetTick>
 8008874:	0002      	movs	r2, r0
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	1ad3      	subs	r3, r2, r3
 800887a:	2b02      	cmp	r3, #2
 800887c:	d904      	bls.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800887e:	2313      	movs	r3, #19
 8008880:	18fb      	adds	r3, r7, r3
 8008882:	2203      	movs	r2, #3
 8008884:	701a      	strb	r2, [r3, #0]
        break;
 8008886:	e005      	b.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008888:	4bac      	ldr	r3, [pc, #688]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800888a:	681a      	ldr	r2, [r3, #0]
 800888c:	2380      	movs	r3, #128	; 0x80
 800888e:	005b      	lsls	r3, r3, #1
 8008890:	4013      	ands	r3, r2
 8008892:	d0ed      	beq.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8008894:	2313      	movs	r3, #19
 8008896:	18fb      	adds	r3, r7, r3
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d154      	bne.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800889e:	4ba6      	ldr	r3, [pc, #664]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80088a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80088a2:	23c0      	movs	r3, #192	; 0xc0
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	4013      	ands	r3, r2
 80088a8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d019      	beq.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b4:	697a      	ldr	r2, [r7, #20]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d014      	beq.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80088ba:	4b9f      	ldr	r3, [pc, #636]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80088bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088be:	4aa0      	ldr	r2, [pc, #640]	; (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80088c0:	4013      	ands	r3, r2
 80088c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80088c4:	4b9c      	ldr	r3, [pc, #624]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80088c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80088c8:	4b9b      	ldr	r3, [pc, #620]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80088ca:	2180      	movs	r1, #128	; 0x80
 80088cc:	0249      	lsls	r1, r1, #9
 80088ce:	430a      	orrs	r2, r1
 80088d0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80088d2:	4b99      	ldr	r3, [pc, #612]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80088d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80088d6:	4b98      	ldr	r3, [pc, #608]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80088d8:	499a      	ldr	r1, [pc, #616]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80088da:	400a      	ands	r2, r1
 80088dc:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80088de:	4b96      	ldr	r3, [pc, #600]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80088e0:	697a      	ldr	r2, [r7, #20]
 80088e2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	2201      	movs	r2, #1
 80088e8:	4013      	ands	r3, r2
 80088ea:	d016      	beq.n	800891a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088ec:	f7fc fdbe 	bl	800546c <HAL_GetTick>
 80088f0:	0003      	movs	r3, r0
 80088f2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80088f4:	e00c      	b.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088f6:	f7fc fdb9 	bl	800546c <HAL_GetTick>
 80088fa:	0002      	movs	r2, r0
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	1ad3      	subs	r3, r2, r3
 8008900:	4a91      	ldr	r2, [pc, #580]	; (8008b48 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d904      	bls.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8008906:	2313      	movs	r3, #19
 8008908:	18fb      	adds	r3, r7, r3
 800890a:	2203      	movs	r2, #3
 800890c:	701a      	strb	r2, [r3, #0]
            break;
 800890e:	e004      	b.n	800891a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008910:	4b89      	ldr	r3, [pc, #548]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008914:	2202      	movs	r2, #2
 8008916:	4013      	ands	r3, r2
 8008918:	d0ed      	beq.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800891a:	2313      	movs	r3, #19
 800891c:	18fb      	adds	r3, r7, r3
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d10a      	bne.n	800893a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008924:	4b84      	ldr	r3, [pc, #528]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008928:	4a85      	ldr	r2, [pc, #532]	; (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800892a:	4013      	ands	r3, r2
 800892c:	0019      	movs	r1, r3
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008932:	4b81      	ldr	r3, [pc, #516]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008934:	430a      	orrs	r2, r1
 8008936:	65da      	str	r2, [r3, #92]	; 0x5c
 8008938:	e00c      	b.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800893a:	2312      	movs	r3, #18
 800893c:	18fb      	adds	r3, r7, r3
 800893e:	2213      	movs	r2, #19
 8008940:	18ba      	adds	r2, r7, r2
 8008942:	7812      	ldrb	r2, [r2, #0]
 8008944:	701a      	strb	r2, [r3, #0]
 8008946:	e005      	b.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008948:	2312      	movs	r3, #18
 800894a:	18fb      	adds	r3, r7, r3
 800894c:	2213      	movs	r2, #19
 800894e:	18ba      	adds	r2, r7, r2
 8008950:	7812      	ldrb	r2, [r2, #0]
 8008952:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008954:	2311      	movs	r3, #17
 8008956:	18fb      	adds	r3, r7, r3
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	2b01      	cmp	r3, #1
 800895c:	d105      	bne.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800895e:	4b76      	ldr	r3, [pc, #472]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008960:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008962:	4b75      	ldr	r3, [pc, #468]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008964:	4979      	ldr	r1, [pc, #484]	; (8008b4c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8008966:	400a      	ands	r2, r1
 8008968:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	2201      	movs	r2, #1
 8008970:	4013      	ands	r3, r2
 8008972:	d009      	beq.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008974:	4b70      	ldr	r3, [pc, #448]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008978:	2203      	movs	r2, #3
 800897a:	4393      	bics	r3, r2
 800897c:	0019      	movs	r1, r3
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	685a      	ldr	r2, [r3, #4]
 8008982:	4b6d      	ldr	r3, [pc, #436]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008984:	430a      	orrs	r2, r1
 8008986:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	2202      	movs	r2, #2
 800898e:	4013      	ands	r3, r2
 8008990:	d009      	beq.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008992:	4b69      	ldr	r3, [pc, #420]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008996:	220c      	movs	r2, #12
 8008998:	4393      	bics	r3, r2
 800899a:	0019      	movs	r1, r3
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	689a      	ldr	r2, [r3, #8]
 80089a0:	4b65      	ldr	r3, [pc, #404]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089a2:	430a      	orrs	r2, r1
 80089a4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	2210      	movs	r2, #16
 80089ac:	4013      	ands	r3, r2
 80089ae:	d009      	beq.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80089b0:	4b61      	ldr	r3, [pc, #388]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089b4:	4a66      	ldr	r2, [pc, #408]	; (8008b50 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80089b6:	4013      	ands	r3, r2
 80089b8:	0019      	movs	r1, r3
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	68da      	ldr	r2, [r3, #12]
 80089be:	4b5e      	ldr	r3, [pc, #376]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089c0:	430a      	orrs	r2, r1
 80089c2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681a      	ldr	r2, [r3, #0]
 80089c8:	2380      	movs	r3, #128	; 0x80
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	4013      	ands	r3, r2
 80089ce:	d009      	beq.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80089d0:	4b59      	ldr	r3, [pc, #356]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089d4:	4a5f      	ldr	r2, [pc, #380]	; (8008b54 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80089d6:	4013      	ands	r3, r2
 80089d8:	0019      	movs	r1, r3
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	699a      	ldr	r2, [r3, #24]
 80089de:	4b56      	ldr	r3, [pc, #344]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089e0:	430a      	orrs	r2, r1
 80089e2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681a      	ldr	r2, [r3, #0]
 80089e8:	2380      	movs	r3, #128	; 0x80
 80089ea:	00db      	lsls	r3, r3, #3
 80089ec:	4013      	ands	r3, r2
 80089ee:	d009      	beq.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80089f0:	4b51      	ldr	r3, [pc, #324]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089f4:	4a58      	ldr	r2, [pc, #352]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80089f6:	4013      	ands	r3, r2
 80089f8:	0019      	movs	r1, r3
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	69da      	ldr	r2, [r3, #28]
 80089fe:	4b4e      	ldr	r3, [pc, #312]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a00:	430a      	orrs	r2, r1
 8008a02:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	2220      	movs	r2, #32
 8008a0a:	4013      	ands	r3, r2
 8008a0c:	d009      	beq.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008a0e:	4b4a      	ldr	r3, [pc, #296]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a12:	4a52      	ldr	r2, [pc, #328]	; (8008b5c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8008a14:	4013      	ands	r3, r2
 8008a16:	0019      	movs	r1, r3
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	691a      	ldr	r2, [r3, #16]
 8008a1c:	4b46      	ldr	r3, [pc, #280]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a1e:	430a      	orrs	r2, r1
 8008a20:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	2380      	movs	r3, #128	; 0x80
 8008a28:	01db      	lsls	r3, r3, #7
 8008a2a:	4013      	ands	r3, r2
 8008a2c:	d015      	beq.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008a2e:	4b42      	ldr	r3, [pc, #264]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	0899      	lsrs	r1, r3, #2
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6a1a      	ldr	r2, [r3, #32]
 8008a3a:	4b3f      	ldr	r3, [pc, #252]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a3c:	430a      	orrs	r2, r1
 8008a3e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6a1a      	ldr	r2, [r3, #32]
 8008a44:	2380      	movs	r3, #128	; 0x80
 8008a46:	05db      	lsls	r3, r3, #23
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d106      	bne.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008a4c:	4b3a      	ldr	r3, [pc, #232]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a4e:	68da      	ldr	r2, [r3, #12]
 8008a50:	4b39      	ldr	r3, [pc, #228]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a52:	2180      	movs	r1, #128	; 0x80
 8008a54:	0249      	lsls	r1, r1, #9
 8008a56:	430a      	orrs	r2, r1
 8008a58:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	2380      	movs	r3, #128	; 0x80
 8008a60:	031b      	lsls	r3, r3, #12
 8008a62:	4013      	ands	r3, r2
 8008a64:	d009      	beq.n	8008a7a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008a66:	4b34      	ldr	r3, [pc, #208]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a6a:	2240      	movs	r2, #64	; 0x40
 8008a6c:	4393      	bics	r3, r2
 8008a6e:	0019      	movs	r1, r3
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a74:	4b30      	ldr	r3, [pc, #192]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a76:	430a      	orrs	r2, r1
 8008a78:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681a      	ldr	r2, [r3, #0]
 8008a7e:	2380      	movs	r3, #128	; 0x80
 8008a80:	039b      	lsls	r3, r3, #14
 8008a82:	4013      	ands	r3, r2
 8008a84:	d016      	beq.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8008a86:	4b2c      	ldr	r3, [pc, #176]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a8a:	4a35      	ldr	r2, [pc, #212]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8008a8c:	4013      	ands	r3, r2
 8008a8e:	0019      	movs	r1, r3
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a94:	4b28      	ldr	r3, [pc, #160]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a96:	430a      	orrs	r2, r1
 8008a98:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a9e:	2380      	movs	r3, #128	; 0x80
 8008aa0:	03db      	lsls	r3, r3, #15
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d106      	bne.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008aa6:	4b24      	ldr	r3, [pc, #144]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008aa8:	68da      	ldr	r2, [r3, #12]
 8008aaa:	4b23      	ldr	r3, [pc, #140]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008aac:	2180      	movs	r1, #128	; 0x80
 8008aae:	0449      	lsls	r1, r1, #17
 8008ab0:	430a      	orrs	r2, r1
 8008ab2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681a      	ldr	r2, [r3, #0]
 8008ab8:	2380      	movs	r3, #128	; 0x80
 8008aba:	03db      	lsls	r3, r3, #15
 8008abc:	4013      	ands	r3, r2
 8008abe:	d016      	beq.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8008ac0:	4b1d      	ldr	r3, [pc, #116]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ac4:	4a27      	ldr	r2, [pc, #156]	; (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8008ac6:	4013      	ands	r3, r2
 8008ac8:	0019      	movs	r1, r3
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ace:	4b1a      	ldr	r3, [pc, #104]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008ad0:	430a      	orrs	r2, r1
 8008ad2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ad8:	2380      	movs	r3, #128	; 0x80
 8008ada:	045b      	lsls	r3, r3, #17
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d106      	bne.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008ae0:	4b15      	ldr	r3, [pc, #84]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008ae2:	68da      	ldr	r2, [r3, #12]
 8008ae4:	4b14      	ldr	r3, [pc, #80]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008ae6:	2180      	movs	r1, #128	; 0x80
 8008ae8:	0449      	lsls	r1, r1, #17
 8008aea:	430a      	orrs	r2, r1
 8008aec:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681a      	ldr	r2, [r3, #0]
 8008af2:	2380      	movs	r3, #128	; 0x80
 8008af4:	011b      	lsls	r3, r3, #4
 8008af6:	4013      	ands	r3, r2
 8008af8:	d016      	beq.n	8008b28 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8008afa:	4b0f      	ldr	r3, [pc, #60]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008afe:	4a1a      	ldr	r2, [pc, #104]	; (8008b68 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8008b00:	4013      	ands	r3, r2
 8008b02:	0019      	movs	r1, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	695a      	ldr	r2, [r3, #20]
 8008b08:	4b0b      	ldr	r3, [pc, #44]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008b0a:	430a      	orrs	r2, r1
 8008b0c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	695a      	ldr	r2, [r3, #20]
 8008b12:	2380      	movs	r3, #128	; 0x80
 8008b14:	01db      	lsls	r3, r3, #7
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d106      	bne.n	8008b28 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008b1a:	4b07      	ldr	r3, [pc, #28]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008b1c:	68da      	ldr	r2, [r3, #12]
 8008b1e:	4b06      	ldr	r3, [pc, #24]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008b20:	2180      	movs	r1, #128	; 0x80
 8008b22:	0249      	lsls	r1, r1, #9
 8008b24:	430a      	orrs	r2, r1
 8008b26:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8008b28:	2312      	movs	r3, #18
 8008b2a:	18fb      	adds	r3, r7, r3
 8008b2c:	781b      	ldrb	r3, [r3, #0]
}
 8008b2e:	0018      	movs	r0, r3
 8008b30:	46bd      	mov	sp, r7
 8008b32:	b006      	add	sp, #24
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	46c0      	nop			; (mov r8, r8)
 8008b38:	40021000 	.word	0x40021000
 8008b3c:	40007000 	.word	0x40007000
 8008b40:	fffffcff 	.word	0xfffffcff
 8008b44:	fffeffff 	.word	0xfffeffff
 8008b48:	00001388 	.word	0x00001388
 8008b4c:	efffffff 	.word	0xefffffff
 8008b50:	fffff3ff 	.word	0xfffff3ff
 8008b54:	fff3ffff 	.word	0xfff3ffff
 8008b58:	ffcfffff 	.word	0xffcfffff
 8008b5c:	ffffcfff 	.word	0xffffcfff
 8008b60:	ffbfffff 	.word	0xffbfffff
 8008b64:	feffffff 	.word	0xfeffffff
 8008b68:	ffff3fff 	.word	0xffff3fff

08008b6c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b086      	sub	sp, #24
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8008b74:	2300      	movs	r3, #0
 8008b76:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8008b78:	687a      	ldr	r2, [r7, #4]
 8008b7a:	2380      	movs	r3, #128	; 0x80
 8008b7c:	029b      	lsls	r3, r3, #10
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d136      	bne.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8008b82:	4bcd      	ldr	r3, [pc, #820]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008b84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008b86:	23c0      	movs	r3, #192	; 0xc0
 8008b88:	009b      	lsls	r3, r3, #2
 8008b8a:	4013      	ands	r3, r2
 8008b8c:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8008b8e:	4bca      	ldr	r3, [pc, #808]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b92:	2202      	movs	r2, #2
 8008b94:	4013      	ands	r3, r2
 8008b96:	2b02      	cmp	r3, #2
 8008b98:	d108      	bne.n	8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8008b9a:	68fa      	ldr	r2, [r7, #12]
 8008b9c:	2380      	movs	r3, #128	; 0x80
 8008b9e:	005b      	lsls	r3, r3, #1
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d103      	bne.n	8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8008ba4:	2380      	movs	r3, #128	; 0x80
 8008ba6:	021b      	lsls	r3, r3, #8
 8008ba8:	617b      	str	r3, [r7, #20]
 8008baa:	e31c      	b.n	80091e6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8008bac:	4bc2      	ldr	r3, [pc, #776]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bb0:	2202      	movs	r2, #2
 8008bb2:	4013      	ands	r3, r2
 8008bb4:	2b02      	cmp	r3, #2
 8008bb6:	d108      	bne.n	8008bca <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8008bb8:	68fa      	ldr	r2, [r7, #12]
 8008bba:	2380      	movs	r3, #128	; 0x80
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d103      	bne.n	8008bca <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 8008bc2:	23fa      	movs	r3, #250	; 0xfa
 8008bc4:	01db      	lsls	r3, r3, #7
 8008bc6:	617b      	str	r3, [r7, #20]
 8008bc8:	e30d      	b.n	80091e6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8008bca:	4bbb      	ldr	r3, [pc, #748]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	2380      	movs	r3, #128	; 0x80
 8008bd0:	029b      	lsls	r3, r3, #10
 8008bd2:	401a      	ands	r2, r3
 8008bd4:	2380      	movs	r3, #128	; 0x80
 8008bd6:	029b      	lsls	r3, r3, #10
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d000      	beq.n	8008bde <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 8008bdc:	e303      	b.n	80091e6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
 8008bde:	68fa      	ldr	r2, [r7, #12]
 8008be0:	23c0      	movs	r3, #192	; 0xc0
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d000      	beq.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 8008be8:	e2fd      	b.n	80091e6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    {
      frequency = HSE_VALUE / 32U;
 8008bea:	4bb4      	ldr	r3, [pc, #720]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8008bec:	617b      	str	r3, [r7, #20]
 8008bee:	e2fa      	b.n	80091e6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 8008bf0:	4bb1      	ldr	r3, [pc, #708]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008bf2:	68db      	ldr	r3, [r3, #12]
 8008bf4:	2203      	movs	r2, #3
 8008bf6:	4013      	ands	r3, r2
 8008bf8:	2b02      	cmp	r3, #2
 8008bfa:	d102      	bne.n	8008c02 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 8008bfc:	4bb0      	ldr	r3, [pc, #704]	; (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008bfe:	613b      	str	r3, [r7, #16]
 8008c00:	e00a      	b.n	8008c18 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 8008c02:	4bad      	ldr	r3, [pc, #692]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008c04:	68db      	ldr	r3, [r3, #12]
 8008c06:	2203      	movs	r2, #3
 8008c08:	4013      	ands	r3, r2
 8008c0a:	2b03      	cmp	r3, #3
 8008c0c:	d102      	bne.n	8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 8008c0e:	4bad      	ldr	r3, [pc, #692]	; (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8008c10:	613b      	str	r3, [r7, #16]
 8008c12:	e001      	b.n	8008c18 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 8008c14:	2300      	movs	r3, #0
 8008c16:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008c18:	4ba7      	ldr	r3, [pc, #668]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008c1a:	68db      	ldr	r3, [r3, #12]
 8008c1c:	091b      	lsrs	r3, r3, #4
 8008c1e:	2207      	movs	r2, #7
 8008c20:	4013      	ands	r3, r2
 8008c22:	3301      	adds	r3, #1
 8008c24:	0019      	movs	r1, r3
 8008c26:	6938      	ldr	r0, [r7, #16]
 8008c28:	f7f7 fa6c 	bl	8000104 <__udivsi3>
 8008c2c:	0003      	movs	r3, r0
 8008c2e:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	2380      	movs	r3, #128	; 0x80
 8008c34:	03db      	lsls	r3, r3, #15
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d100      	bne.n	8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 8008c3a:	e28e      	b.n	800915a <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	2380      	movs	r3, #128	; 0x80
 8008c40:	03db      	lsls	r3, r3, #15
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d900      	bls.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8008c46:	e2b7      	b.n	80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	2380      	movs	r3, #128	; 0x80
 8008c4c:	039b      	lsls	r3, r3, #14
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d100      	bne.n	8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8008c52:	e253      	b.n	80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 8008c54:	687a      	ldr	r2, [r7, #4]
 8008c56:	2380      	movs	r3, #128	; 0x80
 8008c58:	039b      	lsls	r3, r3, #14
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d900      	bls.n	8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8008c5e:	e2ab      	b.n	80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	2380      	movs	r3, #128	; 0x80
 8008c64:	031b      	lsls	r3, r3, #12
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d100      	bne.n	8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8008c6a:	e0b2      	b.n	8008dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	2380      	movs	r3, #128	; 0x80
 8008c70:	031b      	lsls	r3, r3, #12
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d900      	bls.n	8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8008c76:	e29f      	b.n	80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	2380      	movs	r3, #128	; 0x80
 8008c7c:	01db      	lsls	r3, r3, #7
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	d100      	bne.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 8008c82:	e103      	b.n	8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	2380      	movs	r3, #128	; 0x80
 8008c88:	01db      	lsls	r3, r3, #7
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d900      	bls.n	8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008c8e:	e293      	b.n	80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	2380      	movs	r3, #128	; 0x80
 8008c94:	011b      	lsls	r3, r3, #4
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d100      	bne.n	8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8008c9a:	e165      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	2380      	movs	r3, #128	; 0x80
 8008ca0:	011b      	lsls	r3, r3, #4
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d900      	bls.n	8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8008ca6:	e287      	b.n	80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	2380      	movs	r3, #128	; 0x80
 8008cac:	00db      	lsls	r3, r3, #3
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d100      	bne.n	8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8008cb2:	e1e3      	b.n	800907c <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	2380      	movs	r3, #128	; 0x80
 8008cb8:	00db      	lsls	r3, r3, #3
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d900      	bls.n	8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8008cbe:	e27b      	b.n	80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	2380      	movs	r3, #128	; 0x80
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d100      	bne.n	8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8008cca:	e197      	b.n	8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	2380      	movs	r3, #128	; 0x80
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d900      	bls.n	8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8008cd6:	e26f      	b.n	80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2b20      	cmp	r3, #32
 8008cdc:	d100      	bne.n	8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 8008cde:	e118      	b.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2b20      	cmp	r3, #32
 8008ce4:	d900      	bls.n	8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
 8008ce6:	e267      	b.n	80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2b10      	cmp	r3, #16
 8008cec:	d100      	bne.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8008cee:	e093      	b.n	8008e18 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2b10      	cmp	r3, #16
 8008cf4:	d900      	bls.n	8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8008cf6:	e25f      	b.n	80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	d003      	beq.n	8008d06 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2b02      	cmp	r3, #2
 8008d02:	d033      	beq.n	8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 8008d04:	e258      	b.n	80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008d06:	4b6c      	ldr	r3, [pc, #432]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d0a:	2203      	movs	r2, #3
 8008d0c:	4013      	ands	r3, r2
 8008d0e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d104      	bne.n	8008d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008d16:	f7ff fd5b 	bl	80087d0 <HAL_RCC_GetPCLK1Freq>
 8008d1a:	0003      	movs	r3, r0
 8008d1c:	617b      	str	r3, [r7, #20]
        break;
 8008d1e:	e24d      	b.n	80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d104      	bne.n	8008d30 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
          frequency = HAL_RCC_GetSysClockFreq();
 8008d26:	f7ff fcc7 	bl	80086b8 <HAL_RCC_GetSysClockFreq>
 8008d2a:	0003      	movs	r3, r0
 8008d2c:	617b      	str	r3, [r7, #20]
        break;
 8008d2e:	e245      	b.n	80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8008d30:	4b61      	ldr	r3, [pc, #388]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008d32:	681a      	ldr	r2, [r3, #0]
 8008d34:	2380      	movs	r3, #128	; 0x80
 8008d36:	00db      	lsls	r3, r3, #3
 8008d38:	401a      	ands	r2, r3
 8008d3a:	2380      	movs	r3, #128	; 0x80
 8008d3c:	00db      	lsls	r3, r3, #3
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d105      	bne.n	8008d4e <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2b02      	cmp	r3, #2
 8008d46:	d102      	bne.n	8008d4e <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
          frequency = HSI_VALUE;
 8008d48:	4b5d      	ldr	r3, [pc, #372]	; (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008d4a:	617b      	str	r3, [r7, #20]
        break;
 8008d4c:	e236      	b.n	80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008d4e:	4b5a      	ldr	r3, [pc, #360]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d52:	2202      	movs	r2, #2
 8008d54:	4013      	ands	r3, r2
 8008d56:	2b02      	cmp	r3, #2
 8008d58:	d000      	beq.n	8008d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
 8008d5a:	e22f      	b.n	80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2b03      	cmp	r3, #3
 8008d60:	d000      	beq.n	8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>
 8008d62:	e22b      	b.n	80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          frequency = LSE_VALUE;
 8008d64:	2380      	movs	r3, #128	; 0x80
 8008d66:	021b      	lsls	r3, r3, #8
 8008d68:	617b      	str	r3, [r7, #20]
        break;
 8008d6a:	e227      	b.n	80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008d6c:	4b52      	ldr	r3, [pc, #328]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d70:	220c      	movs	r2, #12
 8008d72:	4013      	ands	r3, r2
 8008d74:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d104      	bne.n	8008d86 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008d7c:	f7ff fd28 	bl	80087d0 <HAL_RCC_GetPCLK1Freq>
 8008d80:	0003      	movs	r3, r0
 8008d82:	617b      	str	r3, [r7, #20]
        break;
 8008d84:	e21c      	b.n	80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2b04      	cmp	r3, #4
 8008d8a:	d104      	bne.n	8008d96 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          frequency = HAL_RCC_GetSysClockFreq();
 8008d8c:	f7ff fc94 	bl	80086b8 <HAL_RCC_GetSysClockFreq>
 8008d90:	0003      	movs	r3, r0
 8008d92:	617b      	str	r3, [r7, #20]
        break;
 8008d94:	e214      	b.n	80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8008d96:	4b48      	ldr	r3, [pc, #288]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	2380      	movs	r3, #128	; 0x80
 8008d9c:	00db      	lsls	r3, r3, #3
 8008d9e:	401a      	ands	r2, r3
 8008da0:	2380      	movs	r3, #128	; 0x80
 8008da2:	00db      	lsls	r3, r3, #3
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d105      	bne.n	8008db4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2b08      	cmp	r3, #8
 8008dac:	d102      	bne.n	8008db4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
          frequency = HSI_VALUE;
 8008dae:	4b44      	ldr	r3, [pc, #272]	; (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008db0:	617b      	str	r3, [r7, #20]
        break;
 8008db2:	e205      	b.n	80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008db4:	4b40      	ldr	r3, [pc, #256]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008db8:	2202      	movs	r2, #2
 8008dba:	4013      	ands	r3, r2
 8008dbc:	2b02      	cmp	r3, #2
 8008dbe:	d000      	beq.n	8008dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8008dc0:	e1fe      	b.n	80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2b0c      	cmp	r3, #12
 8008dc6:	d000      	beq.n	8008dca <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8008dc8:	e1fa      	b.n	80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
          frequency = LSE_VALUE;
 8008dca:	2380      	movs	r3, #128	; 0x80
 8008dcc:	021b      	lsls	r3, r3, #8
 8008dce:	617b      	str	r3, [r7, #20]
        break;
 8008dd0:	e1f6      	b.n	80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8008dd2:	4b39      	ldr	r3, [pc, #228]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dd6:	2240      	movs	r2, #64	; 0x40
 8008dd8:	4013      	ands	r3, r2
 8008dda:	60fb      	str	r3, [r7, #12]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_CECCLKSOURCE_HSI_DIV488))
 8008ddc:	4b36      	ldr	r3, [pc, #216]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008dde:	681a      	ldr	r2, [r3, #0]
 8008de0:	2380      	movs	r3, #128	; 0x80
 8008de2:	00db      	lsls	r3, r3, #3
 8008de4:	401a      	ands	r2, r3
 8008de6:	2380      	movs	r3, #128	; 0x80
 8008de8:	00db      	lsls	r3, r3, #3
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d105      	bne.n	8008dfa <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d102      	bne.n	8008dfa <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
          frequency = (HSI_VALUE / 488U);
 8008df4:	4b34      	ldr	r3, [pc, #208]	; (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 8008df6:	617b      	str	r3, [r7, #20]
        break;
 8008df8:	e1e4      	b.n	80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8008dfa:	4b2f      	ldr	r3, [pc, #188]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dfe:	2202      	movs	r2, #2
 8008e00:	4013      	ands	r3, r2
 8008e02:	2b02      	cmp	r3, #2
 8008e04:	d000      	beq.n	8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 8008e06:	e1dd      	b.n	80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2b40      	cmp	r3, #64	; 0x40
 8008e0c:	d000      	beq.n	8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 8008e0e:	e1d9      	b.n	80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
          frequency = LSE_VALUE;
 8008e10:	2380      	movs	r3, #128	; 0x80
 8008e12:	021b      	lsls	r3, r3, #8
 8008e14:	617b      	str	r3, [r7, #20]
        break;
 8008e16:	e1d5      	b.n	80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008e18:	4b27      	ldr	r3, [pc, #156]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008e1a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e1c:	23c0      	movs	r3, #192	; 0xc0
 8008e1e:	011b      	lsls	r3, r3, #4
 8008e20:	4013      	ands	r3, r2
 8008e22:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d104      	bne.n	8008e34 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008e2a:	f7ff fcd1 	bl	80087d0 <HAL_RCC_GetPCLK1Freq>
 8008e2e:	0003      	movs	r3, r0
 8008e30:	617b      	str	r3, [r7, #20]
        break;
 8008e32:	e1c9      	b.n	80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8008e34:	68fa      	ldr	r2, [r7, #12]
 8008e36:	2380      	movs	r3, #128	; 0x80
 8008e38:	00db      	lsls	r3, r3, #3
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d104      	bne.n	8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>
          frequency = HAL_RCC_GetSysClockFreq();
 8008e3e:	f7ff fc3b 	bl	80086b8 <HAL_RCC_GetSysClockFreq>
 8008e42:	0003      	movs	r3, r0
 8008e44:	617b      	str	r3, [r7, #20]
        break;
 8008e46:	e1bf      	b.n	80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8008e48:	4b1b      	ldr	r3, [pc, #108]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008e4a:	681a      	ldr	r2, [r3, #0]
 8008e4c:	2380      	movs	r3, #128	; 0x80
 8008e4e:	00db      	lsls	r3, r3, #3
 8008e50:	401a      	ands	r2, r3
 8008e52:	2380      	movs	r3, #128	; 0x80
 8008e54:	00db      	lsls	r3, r3, #3
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d107      	bne.n	8008e6a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
 8008e5a:	68fa      	ldr	r2, [r7, #12]
 8008e5c:	2380      	movs	r3, #128	; 0x80
 8008e5e:	011b      	lsls	r3, r3, #4
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d102      	bne.n	8008e6a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
          frequency = HSI_VALUE;
 8008e64:	4b16      	ldr	r3, [pc, #88]	; (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008e66:	617b      	str	r3, [r7, #20]
        break;
 8008e68:	e1ae      	b.n	80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8008e6a:	4b13      	ldr	r3, [pc, #76]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e6e:	2202      	movs	r2, #2
 8008e70:	4013      	ands	r3, r2
 8008e72:	2b02      	cmp	r3, #2
 8008e74:	d000      	beq.n	8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8008e76:	e1a7      	b.n	80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8008e78:	68fa      	ldr	r2, [r7, #12]
 8008e7a:	23c0      	movs	r3, #192	; 0xc0
 8008e7c:	011b      	lsls	r3, r3, #4
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d000      	beq.n	8008e84 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8008e82:	e1a1      	b.n	80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
          frequency = LSE_VALUE;
 8008e84:	2380      	movs	r3, #128	; 0x80
 8008e86:	021b      	lsls	r3, r3, #8
 8008e88:	617b      	str	r3, [r7, #20]
        break;
 8008e8a:	e19d      	b.n	80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008e8c:	4b0a      	ldr	r3, [pc, #40]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e90:	0f9b      	lsrs	r3, r3, #30
 8008e92:	079b      	lsls	r3, r3, #30
 8008e94:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d104      	bne.n	8008ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
          frequency = HAL_RCC_GetSysClockFreq();
 8008e9c:	f7ff fc0c 	bl	80086b8 <HAL_RCC_GetSysClockFreq>
 8008ea0:	0003      	movs	r3, r0
 8008ea2:	617b      	str	r3, [r7, #20]
        break;
 8008ea4:	e192      	b.n	80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 8008ea6:	68fa      	ldr	r2, [r7, #12]
 8008ea8:	2380      	movs	r3, #128	; 0x80
 8008eaa:	061b      	lsls	r3, r3, #24
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d10d      	bne.n	8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x360>
          frequency = HSI_VALUE;
 8008eb0:	4b03      	ldr	r3, [pc, #12]	; (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008eb2:	617b      	str	r3, [r7, #20]
        break;
 8008eb4:	e18a      	b.n	80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008eb6:	46c0      	nop			; (mov r8, r8)
 8008eb8:	40021000 	.word	0x40021000
 8008ebc:	0003d090 	.word	0x0003d090
 8008ec0:	00f42400 	.word	0x00f42400
 8008ec4:	007a1200 	.word	0x007a1200
 8008ec8:	00008012 	.word	0x00008012
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 8008ecc:	68fa      	ldr	r2, [r7, #12]
 8008ece:	2380      	movs	r3, #128	; 0x80
 8008ed0:	05db      	lsls	r3, r3, #23
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d000      	beq.n	8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
 8008ed6:	e179      	b.n	80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8008ed8:	4bc5      	ldr	r3, [pc, #788]	; (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008eda:	68da      	ldr	r2, [r3, #12]
 8008edc:	2380      	movs	r3, #128	; 0x80
 8008ede:	025b      	lsls	r3, r3, #9
 8008ee0:	4013      	ands	r3, r2
 8008ee2:	d100      	bne.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8008ee4:	e172      	b.n	80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008ee6:	4bc2      	ldr	r3, [pc, #776]	; (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008ee8:	68db      	ldr	r3, [r3, #12]
 8008eea:	0a1b      	lsrs	r3, r3, #8
 8008eec:	227f      	movs	r2, #127	; 0x7f
 8008eee:	4013      	ands	r3, r2
 8008ef0:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	68ba      	ldr	r2, [r7, #8]
 8008ef6:	435a      	muls	r2, r3
 8008ef8:	4bbd      	ldr	r3, [pc, #756]	; (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008efa:	68db      	ldr	r3, [r3, #12]
 8008efc:	0c5b      	lsrs	r3, r3, #17
 8008efe:	211f      	movs	r1, #31
 8008f00:	400b      	ands	r3, r1
 8008f02:	3301      	adds	r3, #1
 8008f04:	0019      	movs	r1, r3
 8008f06:	0010      	movs	r0, r2
 8008f08:	f7f7 f8fc 	bl	8000104 <__udivsi3>
 8008f0c:	0003      	movs	r3, r0
 8008f0e:	617b      	str	r3, [r7, #20]
        break;
 8008f10:	e15c      	b.n	80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008f12:	4bb7      	ldr	r3, [pc, #732]	; (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008f14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f16:	23c0      	movs	r3, #192	; 0xc0
 8008f18:	019b      	lsls	r3, r3, #6
 8008f1a:	4013      	ands	r3, r2
 8008f1c:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d104      	bne.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008f24:	f7ff fc54 	bl	80087d0 <HAL_RCC_GetPCLK1Freq>
 8008f28:	0003      	movs	r3, r0
 8008f2a:	617b      	str	r3, [r7, #20]
        break;
 8008f2c:	e150      	b.n	80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8008f2e:	68fa      	ldr	r2, [r7, #12]
 8008f30:	2380      	movs	r3, #128	; 0x80
 8008f32:	015b      	lsls	r3, r3, #5
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d104      	bne.n	8008f42 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          frequency = HAL_RCC_GetSysClockFreq();
 8008f38:	f7ff fbbe 	bl	80086b8 <HAL_RCC_GetSysClockFreq>
 8008f3c:	0003      	movs	r3, r0
 8008f3e:	617b      	str	r3, [r7, #20]
        break;
 8008f40:	e146      	b.n	80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8008f42:	4bab      	ldr	r3, [pc, #684]	; (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	2380      	movs	r3, #128	; 0x80
 8008f48:	00db      	lsls	r3, r3, #3
 8008f4a:	401a      	ands	r2, r3
 8008f4c:	2380      	movs	r3, #128	; 0x80
 8008f4e:	00db      	lsls	r3, r3, #3
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d000      	beq.n	8008f56 <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 8008f54:	e13c      	b.n	80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8008f56:	68fa      	ldr	r2, [r7, #12]
 8008f58:	2380      	movs	r3, #128	; 0x80
 8008f5a:	019b      	lsls	r3, r3, #6
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d000      	beq.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 8008f60:	e136      	b.n	80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HSI_VALUE;
 8008f62:	4ba4      	ldr	r3, [pc, #656]	; (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8008f64:	617b      	str	r3, [r7, #20]
        break;
 8008f66:	e133      	b.n	80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 8008f68:	4ba1      	ldr	r3, [pc, #644]	; (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008f6a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f6c:	23c0      	movs	r3, #192	; 0xc0
 8008f6e:	021b      	lsls	r3, r3, #8
 8008f70:	4013      	ands	r3, r2
 8008f72:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 8008f74:	68fa      	ldr	r2, [r7, #12]
 8008f76:	2380      	movs	r3, #128	; 0x80
 8008f78:	01db      	lsls	r3, r3, #7
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d11c      	bne.n	8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8008f7e:	4b9c      	ldr	r3, [pc, #624]	; (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008f80:	68da      	ldr	r2, [r3, #12]
 8008f82:	2380      	movs	r3, #128	; 0x80
 8008f84:	025b      	lsls	r3, r3, #9
 8008f86:	4013      	ands	r3, r2
 8008f88:	d100      	bne.n	8008f8c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 8008f8a:	e123      	b.n	80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008f8c:	4b98      	ldr	r3, [pc, #608]	; (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008f8e:	68db      	ldr	r3, [r3, #12]
 8008f90:	0a1b      	lsrs	r3, r3, #8
 8008f92:	227f      	movs	r2, #127	; 0x7f
 8008f94:	4013      	ands	r3, r2
 8008f96:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	68ba      	ldr	r2, [r7, #8]
 8008f9c:	435a      	muls	r2, r3
 8008f9e:	4b94      	ldr	r3, [pc, #592]	; (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008fa0:	68db      	ldr	r3, [r3, #12]
 8008fa2:	0c5b      	lsrs	r3, r3, #17
 8008fa4:	211f      	movs	r1, #31
 8008fa6:	400b      	ands	r3, r1
 8008fa8:	3301      	adds	r3, #1
 8008faa:	0019      	movs	r1, r3
 8008fac:	0010      	movs	r0, r2
 8008fae:	f7f7 f8a9 	bl	8000104 <__udivsi3>
 8008fb2:	0003      	movs	r3, r0
 8008fb4:	617b      	str	r3, [r7, #20]
        break;
 8008fb6:	e10d      	b.n	80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d104      	bne.n	8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
          frequency = HAL_RCC_GetSysClockFreq();
 8008fbe:	f7ff fb7b 	bl	80086b8 <HAL_RCC_GetSysClockFreq>
 8008fc2:	0003      	movs	r3, r0
 8008fc4:	617b      	str	r3, [r7, #20]
        break;
 8008fc6:	e105      	b.n	80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 8008fc8:	4b89      	ldr	r3, [pc, #548]	; (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	2380      	movs	r3, #128	; 0x80
 8008fce:	00db      	lsls	r3, r3, #3
 8008fd0:	401a      	ands	r2, r3
 8008fd2:	2380      	movs	r3, #128	; 0x80
 8008fd4:	00db      	lsls	r3, r3, #3
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d107      	bne.n	8008fea <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
 8008fda:	68fa      	ldr	r2, [r7, #12]
 8008fdc:	2380      	movs	r3, #128	; 0x80
 8008fde:	021b      	lsls	r3, r3, #8
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d102      	bne.n	8008fea <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          frequency = HSI_VALUE;
 8008fe4:	4b83      	ldr	r3, [pc, #524]	; (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8008fe6:	617b      	str	r3, [r7, #20]
        break;
 8008fe8:	e0f4      	b.n	80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 8008fea:	68fa      	ldr	r2, [r7, #12]
 8008fec:	23c0      	movs	r3, #192	; 0xc0
 8008fee:	021b      	lsls	r3, r3, #8
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d000      	beq.n	8008ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008ff4:	e0ee      	b.n	80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 8008ff6:	4b80      	ldr	r3, [pc, #512]	; (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8008ff8:	617b      	str	r3, [r7, #20]
        break;
 8008ffa:	e0eb      	b.n	80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008ffc:	4b7c      	ldr	r3, [pc, #496]	; (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008ffe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009000:	23c0      	movs	r3, #192	; 0xc0
 8009002:	031b      	lsls	r3, r3, #12
 8009004:	4013      	ands	r3, r2
 8009006:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d104      	bne.n	8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
          frequency = HAL_RCC_GetPCLK1Freq();
 800900e:	f7ff fbdf 	bl	80087d0 <HAL_RCC_GetPCLK1Freq>
 8009012:	0003      	movs	r3, r0
 8009014:	617b      	str	r3, [r7, #20]
        break;
 8009016:	e0df      	b.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8009018:	4b75      	ldr	r3, [pc, #468]	; (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800901a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800901c:	2202      	movs	r2, #2
 800901e:	4013      	ands	r3, r2
 8009020:	2b02      	cmp	r3, #2
 8009022:	d108      	bne.n	8009036 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 8009024:	68fa      	ldr	r2, [r7, #12]
 8009026:	2380      	movs	r3, #128	; 0x80
 8009028:	02db      	lsls	r3, r3, #11
 800902a:	429a      	cmp	r2, r3
 800902c:	d103      	bne.n	8009036 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          frequency = LSI_VALUE;
 800902e:	23fa      	movs	r3, #250	; 0xfa
 8009030:	01db      	lsls	r3, r3, #7
 8009032:	617b      	str	r3, [r7, #20]
 8009034:	e021      	b.n	800907a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8009036:	4b6e      	ldr	r3, [pc, #440]	; (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	2380      	movs	r3, #128	; 0x80
 800903c:	00db      	lsls	r3, r3, #3
 800903e:	401a      	ands	r2, r3
 8009040:	2380      	movs	r3, #128	; 0x80
 8009042:	00db      	lsls	r3, r3, #3
 8009044:	429a      	cmp	r2, r3
 8009046:	d107      	bne.n	8009058 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8009048:	68fa      	ldr	r2, [r7, #12]
 800904a:	2380      	movs	r3, #128	; 0x80
 800904c:	031b      	lsls	r3, r3, #12
 800904e:	429a      	cmp	r2, r3
 8009050:	d102      	bne.n	8009058 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          frequency = HSI_VALUE;
 8009052:	4b68      	ldr	r3, [pc, #416]	; (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8009054:	617b      	str	r3, [r7, #20]
 8009056:	e010      	b.n	800907a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8009058:	4b65      	ldr	r3, [pc, #404]	; (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800905a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800905c:	2202      	movs	r2, #2
 800905e:	4013      	ands	r3, r2
 8009060:	2b02      	cmp	r3, #2
 8009062:	d000      	beq.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8009064:	e0b8      	b.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8009066:	68fa      	ldr	r2, [r7, #12]
 8009068:	23c0      	movs	r3, #192	; 0xc0
 800906a:	031b      	lsls	r3, r3, #12
 800906c:	429a      	cmp	r2, r3
 800906e:	d000      	beq.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009070:	e0b2      	b.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          frequency = LSE_VALUE;
 8009072:	2380      	movs	r3, #128	; 0x80
 8009074:	021b      	lsls	r3, r3, #8
 8009076:	617b      	str	r3, [r7, #20]
        break;
 8009078:	e0ae      	b.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 800907a:	e0ad      	b.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800907c:	4b5c      	ldr	r3, [pc, #368]	; (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800907e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009080:	23c0      	movs	r3, #192	; 0xc0
 8009082:	039b      	lsls	r3, r3, #14
 8009084:	4013      	ands	r3, r2
 8009086:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d104      	bne.n	8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
          frequency = HAL_RCC_GetPCLK1Freq();
 800908e:	f7ff fb9f 	bl	80087d0 <HAL_RCC_GetPCLK1Freq>
 8009092:	0003      	movs	r3, r0
 8009094:	617b      	str	r3, [r7, #20]
        break;
 8009096:	e0a1      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8009098:	4b55      	ldr	r3, [pc, #340]	; (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800909a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800909c:	2202      	movs	r2, #2
 800909e:	4013      	ands	r3, r2
 80090a0:	2b02      	cmp	r3, #2
 80090a2:	d108      	bne.n	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 80090a4:	68fa      	ldr	r2, [r7, #12]
 80090a6:	2380      	movs	r3, #128	; 0x80
 80090a8:	035b      	lsls	r3, r3, #13
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d103      	bne.n	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = LSI_VALUE;
 80090ae:	23fa      	movs	r3, #250	; 0xfa
 80090b0:	01db      	lsls	r3, r3, #7
 80090b2:	617b      	str	r3, [r7, #20]
 80090b4:	e021      	b.n	80090fa <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80090b6:	4b4e      	ldr	r3, [pc, #312]	; (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	2380      	movs	r3, #128	; 0x80
 80090bc:	00db      	lsls	r3, r3, #3
 80090be:	401a      	ands	r2, r3
 80090c0:	2380      	movs	r3, #128	; 0x80
 80090c2:	00db      	lsls	r3, r3, #3
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d107      	bne.n	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 80090c8:	68fa      	ldr	r2, [r7, #12]
 80090ca:	2380      	movs	r3, #128	; 0x80
 80090cc:	039b      	lsls	r3, r3, #14
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d102      	bne.n	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
          frequency = HSI_VALUE;
 80090d2:	4b48      	ldr	r3, [pc, #288]	; (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 80090d4:	617b      	str	r3, [r7, #20]
 80090d6:	e010      	b.n	80090fa <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80090d8:	4b45      	ldr	r3, [pc, #276]	; (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80090da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090dc:	2202      	movs	r2, #2
 80090de:	4013      	ands	r3, r2
 80090e0:	2b02      	cmp	r3, #2
 80090e2:	d000      	beq.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 80090e4:	e07a      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 80090e6:	68fa      	ldr	r2, [r7, #12]
 80090e8:	23c0      	movs	r3, #192	; 0xc0
 80090ea:	039b      	lsls	r3, r3, #14
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d000      	beq.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x586>
 80090f0:	e074      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          frequency = LSE_VALUE;
 80090f2:	2380      	movs	r3, #128	; 0x80
 80090f4:	021b      	lsls	r3, r3, #8
 80090f6:	617b      	str	r3, [r7, #20]
        break;
 80090f8:	e070      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 80090fa:	e06f      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 80090fc:	4b3c      	ldr	r3, [pc, #240]	; (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80090fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009100:	2380      	movs	r3, #128	; 0x80
 8009102:	03db      	lsls	r3, r3, #15
 8009104:	4013      	ands	r3, r2
 8009106:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 8009108:	68fa      	ldr	r2, [r7, #12]
 800910a:	2380      	movs	r3, #128	; 0x80
 800910c:	03db      	lsls	r3, r3, #15
 800910e:	429a      	cmp	r2, r3
 8009110:	d11b      	bne.n	800914a <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8009112:	4b37      	ldr	r3, [pc, #220]	; (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009114:	68da      	ldr	r2, [r3, #12]
 8009116:	2380      	movs	r3, #128	; 0x80
 8009118:	045b      	lsls	r3, r3, #17
 800911a:	4013      	ands	r3, r2
 800911c:	d060      	beq.n	80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800911e:	4b34      	ldr	r3, [pc, #208]	; (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009120:	68db      	ldr	r3, [r3, #12]
 8009122:	0a1b      	lsrs	r3, r3, #8
 8009124:	227f      	movs	r2, #127	; 0x7f
 8009126:	4013      	ands	r3, r2
 8009128:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	68ba      	ldr	r2, [r7, #8]
 800912e:	435a      	muls	r2, r3
 8009130:	4b2f      	ldr	r3, [pc, #188]	; (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	0e5b      	lsrs	r3, r3, #25
 8009136:	2107      	movs	r1, #7
 8009138:	400b      	ands	r3, r1
 800913a:	3301      	adds	r3, #1
 800913c:	0019      	movs	r1, r3
 800913e:	0010      	movs	r0, r2
 8009140:	f7f6 ffe0 	bl	8000104 <__udivsi3>
 8009144:	0003      	movs	r3, r0
 8009146:	617b      	str	r3, [r7, #20]
        break;
 8009148:	e04a      	b.n	80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d147      	bne.n	80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009150:	f7ff fb3e 	bl	80087d0 <HAL_RCC_GetPCLK1Freq>
 8009154:	0003      	movs	r3, r0
 8009156:	617b      	str	r3, [r7, #20]
        break;
 8009158:	e042      	b.n	80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM15SEL);
 800915a:	4b25      	ldr	r3, [pc, #148]	; (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800915c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800915e:	2380      	movs	r3, #128	; 0x80
 8009160:	045b      	lsls	r3, r3, #17
 8009162:	4013      	ands	r3, r2
 8009164:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM15CLKSOURCE_PLL) /* PLL ? */
 8009166:	68fa      	ldr	r2, [r7, #12]
 8009168:	2380      	movs	r3, #128	; 0x80
 800916a:	045b      	lsls	r3, r3, #17
 800916c:	429a      	cmp	r2, r3
 800916e:	d11b      	bne.n	80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8009170:	4b1f      	ldr	r3, [pc, #124]	; (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009172:	68da      	ldr	r2, [r3, #12]
 8009174:	2380      	movs	r3, #128	; 0x80
 8009176:	045b      	lsls	r3, r3, #17
 8009178:	4013      	ands	r3, r2
 800917a:	d033      	beq.n	80091e4 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800917c:	4b1c      	ldr	r3, [pc, #112]	; (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800917e:	68db      	ldr	r3, [r3, #12]
 8009180:	0a1b      	lsrs	r3, r3, #8
 8009182:	227f      	movs	r2, #127	; 0x7f
 8009184:	4013      	ands	r3, r2
 8009186:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	68ba      	ldr	r2, [r7, #8]
 800918c:	435a      	muls	r2, r3
 800918e:	4b18      	ldr	r3, [pc, #96]	; (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009190:	68db      	ldr	r3, [r3, #12]
 8009192:	0e5b      	lsrs	r3, r3, #25
 8009194:	2107      	movs	r1, #7
 8009196:	400b      	ands	r3, r1
 8009198:	3301      	adds	r3, #1
 800919a:	0019      	movs	r1, r3
 800919c:	0010      	movs	r0, r2
 800919e:	f7f6 ffb1 	bl	8000104 <__udivsi3>
 80091a2:	0003      	movs	r3, r0
 80091a4:	617b      	str	r3, [r7, #20]
        break;
 80091a6:	e01d      	b.n	80091e4 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        else if (srcclk == RCC_TIM15CLKSOURCE_PCLK1) /* PCLK1 ? */
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d11a      	bne.n	80091e4 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
          frequency = HAL_RCC_GetPCLK1Freq();
 80091ae:	f7ff fb0f 	bl	80087d0 <HAL_RCC_GetPCLK1Freq>
 80091b2:	0003      	movs	r3, r0
 80091b4:	617b      	str	r3, [r7, #20]
        break;
 80091b6:	e015      	b.n	80091e4 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        break;
 80091b8:	46c0      	nop			; (mov r8, r8)
 80091ba:	e014      	b.n	80091e6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80091bc:	46c0      	nop			; (mov r8, r8)
 80091be:	e012      	b.n	80091e6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80091c0:	46c0      	nop			; (mov r8, r8)
 80091c2:	e010      	b.n	80091e6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80091c4:	46c0      	nop			; (mov r8, r8)
 80091c6:	e00e      	b.n	80091e6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80091c8:	46c0      	nop			; (mov r8, r8)
 80091ca:	e00c      	b.n	80091e6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80091cc:	46c0      	nop			; (mov r8, r8)
 80091ce:	e00a      	b.n	80091e6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80091d0:	46c0      	nop			; (mov r8, r8)
 80091d2:	e008      	b.n	80091e6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80091d4:	46c0      	nop			; (mov r8, r8)
 80091d6:	e006      	b.n	80091e6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80091d8:	46c0      	nop			; (mov r8, r8)
 80091da:	e004      	b.n	80091e6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80091dc:	46c0      	nop			; (mov r8, r8)
 80091de:	e002      	b.n	80091e6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80091e0:	46c0      	nop			; (mov r8, r8)
 80091e2:	e000      	b.n	80091e6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80091e4:	46c0      	nop			; (mov r8, r8)
    }
  }

  return (frequency);
 80091e6:	697b      	ldr	r3, [r7, #20]
}
 80091e8:	0018      	movs	r0, r3
 80091ea:	46bd      	mov	sp, r7
 80091ec:	b006      	add	sp, #24
 80091ee:	bd80      	pop	{r7, pc}
 80091f0:	40021000 	.word	0x40021000
 80091f4:	00f42400 	.word	0x00f42400
 80091f8:	0000bb80 	.word	0x0000bb80

080091fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d101      	bne.n	800920e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800920a:	2301      	movs	r3, #1
 800920c:	e0a8      	b.n	8009360 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009212:	2b00      	cmp	r3, #0
 8009214:	d109      	bne.n	800922a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	685a      	ldr	r2, [r3, #4]
 800921a:	2382      	movs	r3, #130	; 0x82
 800921c:	005b      	lsls	r3, r3, #1
 800921e:	429a      	cmp	r2, r3
 8009220:	d009      	beq.n	8009236 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2200      	movs	r2, #0
 8009226:	61da      	str	r2, [r3, #28]
 8009228:	e005      	b.n	8009236 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2200      	movs	r2, #0
 800922e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2200      	movs	r2, #0
 8009234:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2200      	movs	r2, #0
 800923a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	225d      	movs	r2, #93	; 0x5d
 8009240:	5c9b      	ldrb	r3, [r3, r2]
 8009242:	b2db      	uxtb	r3, r3
 8009244:	2b00      	cmp	r3, #0
 8009246:	d107      	bne.n	8009258 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	225c      	movs	r2, #92	; 0x5c
 800924c:	2100      	movs	r1, #0
 800924e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	0018      	movs	r0, r3
 8009254:	f7fb fd56 	bl	8004d04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	225d      	movs	r2, #93	; 0x5d
 800925c:	2102      	movs	r1, #2
 800925e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2140      	movs	r1, #64	; 0x40
 800926c:	438a      	bics	r2, r1
 800926e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	68da      	ldr	r2, [r3, #12]
 8009274:	23e0      	movs	r3, #224	; 0xe0
 8009276:	00db      	lsls	r3, r3, #3
 8009278:	429a      	cmp	r2, r3
 800927a:	d902      	bls.n	8009282 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800927c:	2300      	movs	r3, #0
 800927e:	60fb      	str	r3, [r7, #12]
 8009280:	e002      	b.n	8009288 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009282:	2380      	movs	r3, #128	; 0x80
 8009284:	015b      	lsls	r3, r3, #5
 8009286:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	68da      	ldr	r2, [r3, #12]
 800928c:	23f0      	movs	r3, #240	; 0xf0
 800928e:	011b      	lsls	r3, r3, #4
 8009290:	429a      	cmp	r2, r3
 8009292:	d008      	beq.n	80092a6 <HAL_SPI_Init+0xaa>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	68da      	ldr	r2, [r3, #12]
 8009298:	23e0      	movs	r3, #224	; 0xe0
 800929a:	00db      	lsls	r3, r3, #3
 800929c:	429a      	cmp	r2, r3
 800929e:	d002      	beq.n	80092a6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	685a      	ldr	r2, [r3, #4]
 80092aa:	2382      	movs	r3, #130	; 0x82
 80092ac:	005b      	lsls	r3, r3, #1
 80092ae:	401a      	ands	r2, r3
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6899      	ldr	r1, [r3, #8]
 80092b4:	2384      	movs	r3, #132	; 0x84
 80092b6:	021b      	lsls	r3, r3, #8
 80092b8:	400b      	ands	r3, r1
 80092ba:	431a      	orrs	r2, r3
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	691b      	ldr	r3, [r3, #16]
 80092c0:	2102      	movs	r1, #2
 80092c2:	400b      	ands	r3, r1
 80092c4:	431a      	orrs	r2, r3
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	695b      	ldr	r3, [r3, #20]
 80092ca:	2101      	movs	r1, #1
 80092cc:	400b      	ands	r3, r1
 80092ce:	431a      	orrs	r2, r3
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6999      	ldr	r1, [r3, #24]
 80092d4:	2380      	movs	r3, #128	; 0x80
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	400b      	ands	r3, r1
 80092da:	431a      	orrs	r2, r3
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	69db      	ldr	r3, [r3, #28]
 80092e0:	2138      	movs	r1, #56	; 0x38
 80092e2:	400b      	ands	r3, r1
 80092e4:	431a      	orrs	r2, r3
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6a1b      	ldr	r3, [r3, #32]
 80092ea:	2180      	movs	r1, #128	; 0x80
 80092ec:	400b      	ands	r3, r1
 80092ee:	431a      	orrs	r2, r3
 80092f0:	0011      	movs	r1, r2
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80092f6:	2380      	movs	r3, #128	; 0x80
 80092f8:	019b      	lsls	r3, r3, #6
 80092fa:	401a      	ands	r2, r3
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	430a      	orrs	r2, r1
 8009302:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	699b      	ldr	r3, [r3, #24]
 8009308:	0c1b      	lsrs	r3, r3, #16
 800930a:	2204      	movs	r2, #4
 800930c:	401a      	ands	r2, r3
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009312:	2110      	movs	r1, #16
 8009314:	400b      	ands	r3, r1
 8009316:	431a      	orrs	r2, r3
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800931c:	2108      	movs	r1, #8
 800931e:	400b      	ands	r3, r1
 8009320:	431a      	orrs	r2, r3
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	68d9      	ldr	r1, [r3, #12]
 8009326:	23f0      	movs	r3, #240	; 0xf0
 8009328:	011b      	lsls	r3, r3, #4
 800932a:	400b      	ands	r3, r1
 800932c:	431a      	orrs	r2, r3
 800932e:	0011      	movs	r1, r2
 8009330:	68fa      	ldr	r2, [r7, #12]
 8009332:	2380      	movs	r3, #128	; 0x80
 8009334:	015b      	lsls	r3, r3, #5
 8009336:	401a      	ands	r2, r3
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	430a      	orrs	r2, r1
 800933e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	69da      	ldr	r2, [r3, #28]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4907      	ldr	r1, [pc, #28]	; (8009368 <HAL_SPI_Init+0x16c>)
 800934c:	400a      	ands	r2, r1
 800934e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2200      	movs	r2, #0
 8009354:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	225d      	movs	r2, #93	; 0x5d
 800935a:	2101      	movs	r1, #1
 800935c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800935e:	2300      	movs	r3, #0
}
 8009360:	0018      	movs	r0, r3
 8009362:	46bd      	mov	sp, r7
 8009364:	b004      	add	sp, #16
 8009366:	bd80      	pop	{r7, pc}
 8009368:	fffff7ff 	.word	0xfffff7ff

0800936c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b088      	sub	sp, #32
 8009370:	af00      	add	r7, sp, #0
 8009372:	60f8      	str	r0, [r7, #12]
 8009374:	60b9      	str	r1, [r7, #8]
 8009376:	603b      	str	r3, [r7, #0]
 8009378:	1dbb      	adds	r3, r7, #6
 800937a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800937c:	231f      	movs	r3, #31
 800937e:	18fb      	adds	r3, r7, r3
 8009380:	2200      	movs	r2, #0
 8009382:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	225c      	movs	r2, #92	; 0x5c
 8009388:	5c9b      	ldrb	r3, [r3, r2]
 800938a:	2b01      	cmp	r3, #1
 800938c:	d101      	bne.n	8009392 <HAL_SPI_Transmit+0x26>
 800938e:	2302      	movs	r3, #2
 8009390:	e140      	b.n	8009614 <HAL_SPI_Transmit+0x2a8>
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	225c      	movs	r2, #92	; 0x5c
 8009396:	2101      	movs	r1, #1
 8009398:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800939a:	f7fc f867 	bl	800546c <HAL_GetTick>
 800939e:	0003      	movs	r3, r0
 80093a0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80093a2:	2316      	movs	r3, #22
 80093a4:	18fb      	adds	r3, r7, r3
 80093a6:	1dba      	adds	r2, r7, #6
 80093a8:	8812      	ldrh	r2, [r2, #0]
 80093aa:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	225d      	movs	r2, #93	; 0x5d
 80093b0:	5c9b      	ldrb	r3, [r3, r2]
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d004      	beq.n	80093c2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80093b8:	231f      	movs	r3, #31
 80093ba:	18fb      	adds	r3, r7, r3
 80093bc:	2202      	movs	r2, #2
 80093be:	701a      	strb	r2, [r3, #0]
    goto error;
 80093c0:	e11d      	b.n	80095fe <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d003      	beq.n	80093d0 <HAL_SPI_Transmit+0x64>
 80093c8:	1dbb      	adds	r3, r7, #6
 80093ca:	881b      	ldrh	r3, [r3, #0]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d104      	bne.n	80093da <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80093d0:	231f      	movs	r3, #31
 80093d2:	18fb      	adds	r3, r7, r3
 80093d4:	2201      	movs	r2, #1
 80093d6:	701a      	strb	r2, [r3, #0]
    goto error;
 80093d8:	e111      	b.n	80095fe <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	225d      	movs	r2, #93	; 0x5d
 80093de:	2103      	movs	r1, #3
 80093e0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2200      	movs	r2, #0
 80093e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	68ba      	ldr	r2, [r7, #8]
 80093ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	1dba      	adds	r2, r7, #6
 80093f2:	8812      	ldrh	r2, [r2, #0]
 80093f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	1dba      	adds	r2, r7, #6
 80093fa:	8812      	ldrh	r2, [r2, #0]
 80093fc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2200      	movs	r2, #0
 8009402:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2244      	movs	r2, #68	; 0x44
 8009408:	2100      	movs	r1, #0
 800940a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2246      	movs	r2, #70	; 0x46
 8009410:	2100      	movs	r1, #0
 8009412:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2200      	movs	r2, #0
 8009418:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2200      	movs	r2, #0
 800941e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	689a      	ldr	r2, [r3, #8]
 8009424:	2380      	movs	r3, #128	; 0x80
 8009426:	021b      	lsls	r3, r3, #8
 8009428:	429a      	cmp	r2, r3
 800942a:	d110      	bne.n	800944e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	681a      	ldr	r2, [r3, #0]
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	2140      	movs	r1, #64	; 0x40
 8009438:	438a      	bics	r2, r1
 800943a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	2180      	movs	r1, #128	; 0x80
 8009448:	01c9      	lsls	r1, r1, #7
 800944a:	430a      	orrs	r2, r1
 800944c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	2240      	movs	r2, #64	; 0x40
 8009456:	4013      	ands	r3, r2
 8009458:	2b40      	cmp	r3, #64	; 0x40
 800945a:	d007      	beq.n	800946c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	681a      	ldr	r2, [r3, #0]
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	2140      	movs	r1, #64	; 0x40
 8009468:	430a      	orrs	r2, r1
 800946a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	68da      	ldr	r2, [r3, #12]
 8009470:	23e0      	movs	r3, #224	; 0xe0
 8009472:	00db      	lsls	r3, r3, #3
 8009474:	429a      	cmp	r2, r3
 8009476:	d94e      	bls.n	8009516 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d004      	beq.n	800948a <HAL_SPI_Transmit+0x11e>
 8009480:	2316      	movs	r3, #22
 8009482:	18fb      	adds	r3, r7, r3
 8009484:	881b      	ldrh	r3, [r3, #0]
 8009486:	2b01      	cmp	r3, #1
 8009488:	d13f      	bne.n	800950a <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800948e:	881a      	ldrh	r2, [r3, #0]
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800949a:	1c9a      	adds	r2, r3, #2
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094a4:	b29b      	uxth	r3, r3
 80094a6:	3b01      	subs	r3, #1
 80094a8:	b29a      	uxth	r2, r3
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80094ae:	e02c      	b.n	800950a <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	689b      	ldr	r3, [r3, #8]
 80094b6:	2202      	movs	r2, #2
 80094b8:	4013      	ands	r3, r2
 80094ba:	2b02      	cmp	r3, #2
 80094bc:	d112      	bne.n	80094e4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094c2:	881a      	ldrh	r2, [r3, #0]
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ce:	1c9a      	adds	r2, r3, #2
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094d8:	b29b      	uxth	r3, r3
 80094da:	3b01      	subs	r3, #1
 80094dc:	b29a      	uxth	r2, r3
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80094e2:	e012      	b.n	800950a <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80094e4:	f7fb ffc2 	bl	800546c <HAL_GetTick>
 80094e8:	0002      	movs	r2, r0
 80094ea:	69bb      	ldr	r3, [r7, #24]
 80094ec:	1ad3      	subs	r3, r2, r3
 80094ee:	683a      	ldr	r2, [r7, #0]
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d802      	bhi.n	80094fa <HAL_SPI_Transmit+0x18e>
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	3301      	adds	r3, #1
 80094f8:	d102      	bne.n	8009500 <HAL_SPI_Transmit+0x194>
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d104      	bne.n	800950a <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8009500:	231f      	movs	r3, #31
 8009502:	18fb      	adds	r3, r7, r3
 8009504:	2203      	movs	r2, #3
 8009506:	701a      	strb	r2, [r3, #0]
          goto error;
 8009508:	e079      	b.n	80095fe <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800950e:	b29b      	uxth	r3, r3
 8009510:	2b00      	cmp	r3, #0
 8009512:	d1cd      	bne.n	80094b0 <HAL_SPI_Transmit+0x144>
 8009514:	e04f      	b.n	80095b6 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d004      	beq.n	8009528 <HAL_SPI_Transmit+0x1bc>
 800951e:	2316      	movs	r3, #22
 8009520:	18fb      	adds	r3, r7, r3
 8009522:	881b      	ldrh	r3, [r3, #0]
 8009524:	2b01      	cmp	r3, #1
 8009526:	d141      	bne.n	80095ac <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	330c      	adds	r3, #12
 8009532:	7812      	ldrb	r2, [r2, #0]
 8009534:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800953a:	1c5a      	adds	r2, r3, #1
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009544:	b29b      	uxth	r3, r3
 8009546:	3b01      	subs	r3, #1
 8009548:	b29a      	uxth	r2, r3
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800954e:	e02d      	b.n	80095ac <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	689b      	ldr	r3, [r3, #8]
 8009556:	2202      	movs	r2, #2
 8009558:	4013      	ands	r3, r2
 800955a:	2b02      	cmp	r3, #2
 800955c:	d113      	bne.n	8009586 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	330c      	adds	r3, #12
 8009568:	7812      	ldrb	r2, [r2, #0]
 800956a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009570:	1c5a      	adds	r2, r3, #1
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800957a:	b29b      	uxth	r3, r3
 800957c:	3b01      	subs	r3, #1
 800957e:	b29a      	uxth	r2, r3
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009584:	e012      	b.n	80095ac <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009586:	f7fb ff71 	bl	800546c <HAL_GetTick>
 800958a:	0002      	movs	r2, r0
 800958c:	69bb      	ldr	r3, [r7, #24]
 800958e:	1ad3      	subs	r3, r2, r3
 8009590:	683a      	ldr	r2, [r7, #0]
 8009592:	429a      	cmp	r2, r3
 8009594:	d802      	bhi.n	800959c <HAL_SPI_Transmit+0x230>
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	3301      	adds	r3, #1
 800959a:	d102      	bne.n	80095a2 <HAL_SPI_Transmit+0x236>
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d104      	bne.n	80095ac <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80095a2:	231f      	movs	r3, #31
 80095a4:	18fb      	adds	r3, r7, r3
 80095a6:	2203      	movs	r2, #3
 80095a8:	701a      	strb	r2, [r3, #0]
          goto error;
 80095aa:	e028      	b.n	80095fe <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095b0:	b29b      	uxth	r3, r3
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d1cc      	bne.n	8009550 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80095b6:	69ba      	ldr	r2, [r7, #24]
 80095b8:	6839      	ldr	r1, [r7, #0]
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	0018      	movs	r0, r3
 80095be:	f000 fdf5 	bl	800a1ac <SPI_EndRxTxTransaction>
 80095c2:	1e03      	subs	r3, r0, #0
 80095c4:	d002      	beq.n	80095cc <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2220      	movs	r2, #32
 80095ca:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d10a      	bne.n	80095ea <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80095d4:	2300      	movs	r3, #0
 80095d6:	613b      	str	r3, [r7, #16]
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	613b      	str	r3, [r7, #16]
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	689b      	ldr	r3, [r3, #8]
 80095e6:	613b      	str	r3, [r7, #16]
 80095e8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d004      	beq.n	80095fc <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80095f2:	231f      	movs	r3, #31
 80095f4:	18fb      	adds	r3, r7, r3
 80095f6:	2201      	movs	r2, #1
 80095f8:	701a      	strb	r2, [r3, #0]
 80095fa:	e000      	b.n	80095fe <HAL_SPI_Transmit+0x292>
  }

error:
 80095fc:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	225d      	movs	r2, #93	; 0x5d
 8009602:	2101      	movs	r1, #1
 8009604:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	225c      	movs	r2, #92	; 0x5c
 800960a:	2100      	movs	r1, #0
 800960c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800960e:	231f      	movs	r3, #31
 8009610:	18fb      	adds	r3, r7, r3
 8009612:	781b      	ldrb	r3, [r3, #0]
}
 8009614:	0018      	movs	r0, r3
 8009616:	46bd      	mov	sp, r7
 8009618:	b008      	add	sp, #32
 800961a:	bd80      	pop	{r7, pc}

0800961c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800961c:	b590      	push	{r4, r7, lr}
 800961e:	b089      	sub	sp, #36	; 0x24
 8009620:	af02      	add	r7, sp, #8
 8009622:	60f8      	str	r0, [r7, #12]
 8009624:	60b9      	str	r1, [r7, #8]
 8009626:	603b      	str	r3, [r7, #0]
 8009628:	1dbb      	adds	r3, r7, #6
 800962a:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800962c:	2317      	movs	r3, #23
 800962e:	18fb      	adds	r3, r7, r3
 8009630:	2200      	movs	r2, #0
 8009632:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	685a      	ldr	r2, [r3, #4]
 8009638:	2382      	movs	r3, #130	; 0x82
 800963a:	005b      	lsls	r3, r3, #1
 800963c:	429a      	cmp	r2, r3
 800963e:	d113      	bne.n	8009668 <HAL_SPI_Receive+0x4c>
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d10f      	bne.n	8009668 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	225d      	movs	r2, #93	; 0x5d
 800964c:	2104      	movs	r1, #4
 800964e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009650:	1dbb      	adds	r3, r7, #6
 8009652:	881c      	ldrh	r4, [r3, #0]
 8009654:	68ba      	ldr	r2, [r7, #8]
 8009656:	68b9      	ldr	r1, [r7, #8]
 8009658:	68f8      	ldr	r0, [r7, #12]
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	9300      	str	r3, [sp, #0]
 800965e:	0023      	movs	r3, r4
 8009660:	f000 f928 	bl	80098b4 <HAL_SPI_TransmitReceive>
 8009664:	0003      	movs	r3, r0
 8009666:	e11c      	b.n	80098a2 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	225c      	movs	r2, #92	; 0x5c
 800966c:	5c9b      	ldrb	r3, [r3, r2]
 800966e:	2b01      	cmp	r3, #1
 8009670:	d101      	bne.n	8009676 <HAL_SPI_Receive+0x5a>
 8009672:	2302      	movs	r3, #2
 8009674:	e115      	b.n	80098a2 <HAL_SPI_Receive+0x286>
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	225c      	movs	r2, #92	; 0x5c
 800967a:	2101      	movs	r1, #1
 800967c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800967e:	f7fb fef5 	bl	800546c <HAL_GetTick>
 8009682:	0003      	movs	r3, r0
 8009684:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	225d      	movs	r2, #93	; 0x5d
 800968a:	5c9b      	ldrb	r3, [r3, r2]
 800968c:	b2db      	uxtb	r3, r3
 800968e:	2b01      	cmp	r3, #1
 8009690:	d004      	beq.n	800969c <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8009692:	2317      	movs	r3, #23
 8009694:	18fb      	adds	r3, r7, r3
 8009696:	2202      	movs	r2, #2
 8009698:	701a      	strb	r2, [r3, #0]
    goto error;
 800969a:	e0f7      	b.n	800988c <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d003      	beq.n	80096aa <HAL_SPI_Receive+0x8e>
 80096a2:	1dbb      	adds	r3, r7, #6
 80096a4:	881b      	ldrh	r3, [r3, #0]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d104      	bne.n	80096b4 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 80096aa:	2317      	movs	r3, #23
 80096ac:	18fb      	adds	r3, r7, r3
 80096ae:	2201      	movs	r2, #1
 80096b0:	701a      	strb	r2, [r3, #0]
    goto error;
 80096b2:	e0eb      	b.n	800988c <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	225d      	movs	r2, #93	; 0x5d
 80096b8:	2104      	movs	r1, #4
 80096ba:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2200      	movs	r2, #0
 80096c0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	68ba      	ldr	r2, [r7, #8]
 80096c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	1dba      	adds	r2, r7, #6
 80096cc:	2144      	movs	r1, #68	; 0x44
 80096ce:	8812      	ldrh	r2, [r2, #0]
 80096d0:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	1dba      	adds	r2, r7, #6
 80096d6:	2146      	movs	r1, #70	; 0x46
 80096d8:	8812      	ldrh	r2, [r2, #0]
 80096da:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2200      	movs	r2, #0
 80096e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2200      	movs	r2, #0
 80096e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	2200      	movs	r2, #0
 80096ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2200      	movs	r2, #0
 80096f2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	2200      	movs	r2, #0
 80096f8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	68da      	ldr	r2, [r3, #12]
 80096fe:	23e0      	movs	r3, #224	; 0xe0
 8009700:	00db      	lsls	r3, r3, #3
 8009702:	429a      	cmp	r2, r3
 8009704:	d908      	bls.n	8009718 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	685a      	ldr	r2, [r3, #4]
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	4966      	ldr	r1, [pc, #408]	; (80098ac <HAL_SPI_Receive+0x290>)
 8009712:	400a      	ands	r2, r1
 8009714:	605a      	str	r2, [r3, #4]
 8009716:	e008      	b.n	800972a <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	685a      	ldr	r2, [r3, #4]
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	2180      	movs	r1, #128	; 0x80
 8009724:	0149      	lsls	r1, r1, #5
 8009726:	430a      	orrs	r2, r1
 8009728:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	689a      	ldr	r2, [r3, #8]
 800972e:	2380      	movs	r3, #128	; 0x80
 8009730:	021b      	lsls	r3, r3, #8
 8009732:	429a      	cmp	r2, r3
 8009734:	d10f      	bne.n	8009756 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	2140      	movs	r1, #64	; 0x40
 8009742:	438a      	bics	r2, r1
 8009744:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	681a      	ldr	r2, [r3, #0]
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4957      	ldr	r1, [pc, #348]	; (80098b0 <HAL_SPI_Receive+0x294>)
 8009752:	400a      	ands	r2, r1
 8009754:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	2240      	movs	r2, #64	; 0x40
 800975e:	4013      	ands	r3, r2
 8009760:	2b40      	cmp	r3, #64	; 0x40
 8009762:	d007      	beq.n	8009774 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	2140      	movs	r1, #64	; 0x40
 8009770:	430a      	orrs	r2, r1
 8009772:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	68da      	ldr	r2, [r3, #12]
 8009778:	23e0      	movs	r3, #224	; 0xe0
 800977a:	00db      	lsls	r3, r3, #3
 800977c:	429a      	cmp	r2, r3
 800977e:	d900      	bls.n	8009782 <HAL_SPI_Receive+0x166>
 8009780:	e069      	b.n	8009856 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009782:	e031      	b.n	80097e8 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	689b      	ldr	r3, [r3, #8]
 800978a:	2201      	movs	r2, #1
 800978c:	4013      	ands	r3, r2
 800978e:	2b01      	cmp	r3, #1
 8009790:	d117      	bne.n	80097c2 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	330c      	adds	r3, #12
 8009798:	001a      	movs	r2, r3
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800979e:	7812      	ldrb	r2, [r2, #0]
 80097a0:	b2d2      	uxtb	r2, r2
 80097a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097a8:	1c5a      	adds	r2, r3, #1
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2246      	movs	r2, #70	; 0x46
 80097b2:	5a9b      	ldrh	r3, [r3, r2]
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	3b01      	subs	r3, #1
 80097b8:	b299      	uxth	r1, r3
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2246      	movs	r2, #70	; 0x46
 80097be:	5299      	strh	r1, [r3, r2]
 80097c0:	e012      	b.n	80097e8 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80097c2:	f7fb fe53 	bl	800546c <HAL_GetTick>
 80097c6:	0002      	movs	r2, r0
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	1ad3      	subs	r3, r2, r3
 80097cc:	683a      	ldr	r2, [r7, #0]
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d802      	bhi.n	80097d8 <HAL_SPI_Receive+0x1bc>
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	3301      	adds	r3, #1
 80097d6:	d102      	bne.n	80097de <HAL_SPI_Receive+0x1c2>
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d104      	bne.n	80097e8 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 80097de:	2317      	movs	r3, #23
 80097e0:	18fb      	adds	r3, r7, r3
 80097e2:	2203      	movs	r2, #3
 80097e4:	701a      	strb	r2, [r3, #0]
          goto error;
 80097e6:	e051      	b.n	800988c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2246      	movs	r2, #70	; 0x46
 80097ec:	5a9b      	ldrh	r3, [r3, r2]
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d1c7      	bne.n	8009784 <HAL_SPI_Receive+0x168>
 80097f4:	e035      	b.n	8009862 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	689b      	ldr	r3, [r3, #8]
 80097fc:	2201      	movs	r2, #1
 80097fe:	4013      	ands	r3, r2
 8009800:	2b01      	cmp	r3, #1
 8009802:	d115      	bne.n	8009830 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	68da      	ldr	r2, [r3, #12]
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800980e:	b292      	uxth	r2, r2
 8009810:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009816:	1c9a      	adds	r2, r3, #2
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2246      	movs	r2, #70	; 0x46
 8009820:	5a9b      	ldrh	r3, [r3, r2]
 8009822:	b29b      	uxth	r3, r3
 8009824:	3b01      	subs	r3, #1
 8009826:	b299      	uxth	r1, r3
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2246      	movs	r2, #70	; 0x46
 800982c:	5299      	strh	r1, [r3, r2]
 800982e:	e012      	b.n	8009856 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009830:	f7fb fe1c 	bl	800546c <HAL_GetTick>
 8009834:	0002      	movs	r2, r0
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	1ad3      	subs	r3, r2, r3
 800983a:	683a      	ldr	r2, [r7, #0]
 800983c:	429a      	cmp	r2, r3
 800983e:	d802      	bhi.n	8009846 <HAL_SPI_Receive+0x22a>
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	3301      	adds	r3, #1
 8009844:	d102      	bne.n	800984c <HAL_SPI_Receive+0x230>
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d104      	bne.n	8009856 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 800984c:	2317      	movs	r3, #23
 800984e:	18fb      	adds	r3, r7, r3
 8009850:	2203      	movs	r2, #3
 8009852:	701a      	strb	r2, [r3, #0]
          goto error;
 8009854:	e01a      	b.n	800988c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2246      	movs	r2, #70	; 0x46
 800985a:	5a9b      	ldrh	r3, [r3, r2]
 800985c:	b29b      	uxth	r3, r3
 800985e:	2b00      	cmp	r3, #0
 8009860:	d1c9      	bne.n	80097f6 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009862:	693a      	ldr	r2, [r7, #16]
 8009864:	6839      	ldr	r1, [r7, #0]
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	0018      	movs	r0, r3
 800986a:	f000 fc41 	bl	800a0f0 <SPI_EndRxTransaction>
 800986e:	1e03      	subs	r3, r0, #0
 8009870:	d002      	beq.n	8009878 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2220      	movs	r2, #32
 8009876:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800987c:	2b00      	cmp	r3, #0
 800987e:	d004      	beq.n	800988a <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8009880:	2317      	movs	r3, #23
 8009882:	18fb      	adds	r3, r7, r3
 8009884:	2201      	movs	r2, #1
 8009886:	701a      	strb	r2, [r3, #0]
 8009888:	e000      	b.n	800988c <HAL_SPI_Receive+0x270>
  }

error :
 800988a:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	225d      	movs	r2, #93	; 0x5d
 8009890:	2101      	movs	r1, #1
 8009892:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	225c      	movs	r2, #92	; 0x5c
 8009898:	2100      	movs	r1, #0
 800989a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800989c:	2317      	movs	r3, #23
 800989e:	18fb      	adds	r3, r7, r3
 80098a0:	781b      	ldrb	r3, [r3, #0]
}
 80098a2:	0018      	movs	r0, r3
 80098a4:	46bd      	mov	sp, r7
 80098a6:	b007      	add	sp, #28
 80098a8:	bd90      	pop	{r4, r7, pc}
 80098aa:	46c0      	nop			; (mov r8, r8)
 80098ac:	ffffefff 	.word	0xffffefff
 80098b0:	ffffbfff 	.word	0xffffbfff

080098b4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b08a      	sub	sp, #40	; 0x28
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	60f8      	str	r0, [r7, #12]
 80098bc:	60b9      	str	r1, [r7, #8]
 80098be:	607a      	str	r2, [r7, #4]
 80098c0:	001a      	movs	r2, r3
 80098c2:	1cbb      	adds	r3, r7, #2
 80098c4:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80098c6:	2301      	movs	r3, #1
 80098c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80098ca:	2323      	movs	r3, #35	; 0x23
 80098cc:	18fb      	adds	r3, r7, r3
 80098ce:	2200      	movs	r2, #0
 80098d0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	225c      	movs	r2, #92	; 0x5c
 80098d6:	5c9b      	ldrb	r3, [r3, r2]
 80098d8:	2b01      	cmp	r3, #1
 80098da:	d101      	bne.n	80098e0 <HAL_SPI_TransmitReceive+0x2c>
 80098dc:	2302      	movs	r3, #2
 80098de:	e1b5      	b.n	8009c4c <HAL_SPI_TransmitReceive+0x398>
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	225c      	movs	r2, #92	; 0x5c
 80098e4:	2101      	movs	r1, #1
 80098e6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80098e8:	f7fb fdc0 	bl	800546c <HAL_GetTick>
 80098ec:	0003      	movs	r3, r0
 80098ee:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80098f0:	201b      	movs	r0, #27
 80098f2:	183b      	adds	r3, r7, r0
 80098f4:	68fa      	ldr	r2, [r7, #12]
 80098f6:	215d      	movs	r1, #93	; 0x5d
 80098f8:	5c52      	ldrb	r2, [r2, r1]
 80098fa:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8009902:	2312      	movs	r3, #18
 8009904:	18fb      	adds	r3, r7, r3
 8009906:	1cba      	adds	r2, r7, #2
 8009908:	8812      	ldrh	r2, [r2, #0]
 800990a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800990c:	183b      	adds	r3, r7, r0
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	2b01      	cmp	r3, #1
 8009912:	d011      	beq.n	8009938 <HAL_SPI_TransmitReceive+0x84>
 8009914:	697a      	ldr	r2, [r7, #20]
 8009916:	2382      	movs	r3, #130	; 0x82
 8009918:	005b      	lsls	r3, r3, #1
 800991a:	429a      	cmp	r2, r3
 800991c:	d107      	bne.n	800992e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	689b      	ldr	r3, [r3, #8]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d103      	bne.n	800992e <HAL_SPI_TransmitReceive+0x7a>
 8009926:	183b      	adds	r3, r7, r0
 8009928:	781b      	ldrb	r3, [r3, #0]
 800992a:	2b04      	cmp	r3, #4
 800992c:	d004      	beq.n	8009938 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800992e:	2323      	movs	r3, #35	; 0x23
 8009930:	18fb      	adds	r3, r7, r3
 8009932:	2202      	movs	r2, #2
 8009934:	701a      	strb	r2, [r3, #0]
    goto error;
 8009936:	e17e      	b.n	8009c36 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d006      	beq.n	800994c <HAL_SPI_TransmitReceive+0x98>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d003      	beq.n	800994c <HAL_SPI_TransmitReceive+0x98>
 8009944:	1cbb      	adds	r3, r7, #2
 8009946:	881b      	ldrh	r3, [r3, #0]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d104      	bne.n	8009956 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800994c:	2323      	movs	r3, #35	; 0x23
 800994e:	18fb      	adds	r3, r7, r3
 8009950:	2201      	movs	r2, #1
 8009952:	701a      	strb	r2, [r3, #0]
    goto error;
 8009954:	e16f      	b.n	8009c36 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	225d      	movs	r2, #93	; 0x5d
 800995a:	5c9b      	ldrb	r3, [r3, r2]
 800995c:	b2db      	uxtb	r3, r3
 800995e:	2b04      	cmp	r3, #4
 8009960:	d003      	beq.n	800996a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	225d      	movs	r2, #93	; 0x5d
 8009966:	2105      	movs	r1, #5
 8009968:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2200      	movs	r2, #0
 800996e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	1cba      	adds	r2, r7, #2
 800997a:	2146      	movs	r1, #70	; 0x46
 800997c:	8812      	ldrh	r2, [r2, #0]
 800997e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	1cba      	adds	r2, r7, #2
 8009984:	2144      	movs	r1, #68	; 0x44
 8009986:	8812      	ldrh	r2, [r2, #0]
 8009988:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	68ba      	ldr	r2, [r7, #8]
 800998e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	1cba      	adds	r2, r7, #2
 8009994:	8812      	ldrh	r2, [r2, #0]
 8009996:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	1cba      	adds	r2, r7, #2
 800999c:	8812      	ldrh	r2, [r2, #0]
 800999e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2200      	movs	r2, #0
 80099a4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2200      	movs	r2, #0
 80099aa:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	68da      	ldr	r2, [r3, #12]
 80099b0:	23e0      	movs	r3, #224	; 0xe0
 80099b2:	00db      	lsls	r3, r3, #3
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d908      	bls.n	80099ca <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	685a      	ldr	r2, [r3, #4]
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	49a4      	ldr	r1, [pc, #656]	; (8009c54 <HAL_SPI_TransmitReceive+0x3a0>)
 80099c4:	400a      	ands	r2, r1
 80099c6:	605a      	str	r2, [r3, #4]
 80099c8:	e008      	b.n	80099dc <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	685a      	ldr	r2, [r3, #4]
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	2180      	movs	r1, #128	; 0x80
 80099d6:	0149      	lsls	r1, r1, #5
 80099d8:	430a      	orrs	r2, r1
 80099da:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	2240      	movs	r2, #64	; 0x40
 80099e4:	4013      	ands	r3, r2
 80099e6:	2b40      	cmp	r3, #64	; 0x40
 80099e8:	d007      	beq.n	80099fa <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	681a      	ldr	r2, [r3, #0]
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	2140      	movs	r1, #64	; 0x40
 80099f6:	430a      	orrs	r2, r1
 80099f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	68da      	ldr	r2, [r3, #12]
 80099fe:	23e0      	movs	r3, #224	; 0xe0
 8009a00:	00db      	lsls	r3, r3, #3
 8009a02:	429a      	cmp	r2, r3
 8009a04:	d800      	bhi.n	8009a08 <HAL_SPI_TransmitReceive+0x154>
 8009a06:	e07f      	b.n	8009b08 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d005      	beq.n	8009a1c <HAL_SPI_TransmitReceive+0x168>
 8009a10:	2312      	movs	r3, #18
 8009a12:	18fb      	adds	r3, r7, r3
 8009a14:	881b      	ldrh	r3, [r3, #0]
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	d000      	beq.n	8009a1c <HAL_SPI_TransmitReceive+0x168>
 8009a1a:	e069      	b.n	8009af0 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a20:	881a      	ldrh	r2, [r3, #0]
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a2c:	1c9a      	adds	r2, r3, #2
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a36:	b29b      	uxth	r3, r3
 8009a38:	3b01      	subs	r3, #1
 8009a3a:	b29a      	uxth	r2, r3
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a40:	e056      	b.n	8009af0 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	689b      	ldr	r3, [r3, #8]
 8009a48:	2202      	movs	r2, #2
 8009a4a:	4013      	ands	r3, r2
 8009a4c:	2b02      	cmp	r3, #2
 8009a4e:	d11b      	bne.n	8009a88 <HAL_SPI_TransmitReceive+0x1d4>
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a54:	b29b      	uxth	r3, r3
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d016      	beq.n	8009a88 <HAL_SPI_TransmitReceive+0x1d4>
 8009a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d113      	bne.n	8009a88 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a64:	881a      	ldrh	r2, [r3, #0]
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a70:	1c9a      	adds	r2, r3, #2
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a7a:	b29b      	uxth	r3, r3
 8009a7c:	3b01      	subs	r3, #1
 8009a7e:	b29a      	uxth	r2, r3
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009a84:	2300      	movs	r3, #0
 8009a86:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	689b      	ldr	r3, [r3, #8]
 8009a8e:	2201      	movs	r2, #1
 8009a90:	4013      	ands	r3, r2
 8009a92:	2b01      	cmp	r3, #1
 8009a94:	d11c      	bne.n	8009ad0 <HAL_SPI_TransmitReceive+0x21c>
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	2246      	movs	r2, #70	; 0x46
 8009a9a:	5a9b      	ldrh	r3, [r3, r2]
 8009a9c:	b29b      	uxth	r3, r3
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d016      	beq.n	8009ad0 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	68da      	ldr	r2, [r3, #12]
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aac:	b292      	uxth	r2, r2
 8009aae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab4:	1c9a      	adds	r2, r3, #2
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2246      	movs	r2, #70	; 0x46
 8009abe:	5a9b      	ldrh	r3, [r3, r2]
 8009ac0:	b29b      	uxth	r3, r3
 8009ac2:	3b01      	subs	r3, #1
 8009ac4:	b299      	uxth	r1, r3
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2246      	movs	r2, #70	; 0x46
 8009aca:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009acc:	2301      	movs	r3, #1
 8009ace:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009ad0:	f7fb fccc 	bl	800546c <HAL_GetTick>
 8009ad4:	0002      	movs	r2, r0
 8009ad6:	69fb      	ldr	r3, [r7, #28]
 8009ad8:	1ad3      	subs	r3, r2, r3
 8009ada:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d807      	bhi.n	8009af0 <HAL_SPI_TransmitReceive+0x23c>
 8009ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	d004      	beq.n	8009af0 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8009ae6:	2323      	movs	r3, #35	; 0x23
 8009ae8:	18fb      	adds	r3, r7, r3
 8009aea:	2203      	movs	r2, #3
 8009aec:	701a      	strb	r2, [r3, #0]
        goto error;
 8009aee:	e0a2      	b.n	8009c36 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d1a3      	bne.n	8009a42 <HAL_SPI_TransmitReceive+0x18e>
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2246      	movs	r2, #70	; 0x46
 8009afe:	5a9b      	ldrh	r3, [r3, r2]
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d19d      	bne.n	8009a42 <HAL_SPI_TransmitReceive+0x18e>
 8009b06:	e085      	b.n	8009c14 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d005      	beq.n	8009b1c <HAL_SPI_TransmitReceive+0x268>
 8009b10:	2312      	movs	r3, #18
 8009b12:	18fb      	adds	r3, r7, r3
 8009b14:	881b      	ldrh	r3, [r3, #0]
 8009b16:	2b01      	cmp	r3, #1
 8009b18:	d000      	beq.n	8009b1c <HAL_SPI_TransmitReceive+0x268>
 8009b1a:	e070      	b.n	8009bfe <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	330c      	adds	r3, #12
 8009b26:	7812      	ldrb	r2, [r2, #0]
 8009b28:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b2e:	1c5a      	adds	r2, r3, #1
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b38:	b29b      	uxth	r3, r3
 8009b3a:	3b01      	subs	r3, #1
 8009b3c:	b29a      	uxth	r2, r3
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b42:	e05c      	b.n	8009bfe <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	689b      	ldr	r3, [r3, #8]
 8009b4a:	2202      	movs	r2, #2
 8009b4c:	4013      	ands	r3, r2
 8009b4e:	2b02      	cmp	r3, #2
 8009b50:	d11c      	bne.n	8009b8c <HAL_SPI_TransmitReceive+0x2d8>
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b56:	b29b      	uxth	r3, r3
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d017      	beq.n	8009b8c <HAL_SPI_TransmitReceive+0x2d8>
 8009b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	d114      	bne.n	8009b8c <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	330c      	adds	r3, #12
 8009b6c:	7812      	ldrb	r2, [r2, #0]
 8009b6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b74:	1c5a      	adds	r2, r3, #1
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	3b01      	subs	r3, #1
 8009b82:	b29a      	uxth	r2, r3
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	689b      	ldr	r3, [r3, #8]
 8009b92:	2201      	movs	r2, #1
 8009b94:	4013      	ands	r3, r2
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d11e      	bne.n	8009bd8 <HAL_SPI_TransmitReceive+0x324>
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2246      	movs	r2, #70	; 0x46
 8009b9e:	5a9b      	ldrh	r3, [r3, r2]
 8009ba0:	b29b      	uxth	r3, r3
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d018      	beq.n	8009bd8 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	330c      	adds	r3, #12
 8009bac:	001a      	movs	r2, r3
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bb2:	7812      	ldrb	r2, [r2, #0]
 8009bb4:	b2d2      	uxtb	r2, r2
 8009bb6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bbc:	1c5a      	adds	r2, r3, #1
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	2246      	movs	r2, #70	; 0x46
 8009bc6:	5a9b      	ldrh	r3, [r3, r2]
 8009bc8:	b29b      	uxth	r3, r3
 8009bca:	3b01      	subs	r3, #1
 8009bcc:	b299      	uxth	r1, r3
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2246      	movs	r2, #70	; 0x46
 8009bd2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009bd8:	f7fb fc48 	bl	800546c <HAL_GetTick>
 8009bdc:	0002      	movs	r2, r0
 8009bde:	69fb      	ldr	r3, [r7, #28]
 8009be0:	1ad3      	subs	r3, r2, r3
 8009be2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009be4:	429a      	cmp	r2, r3
 8009be6:	d802      	bhi.n	8009bee <HAL_SPI_TransmitReceive+0x33a>
 8009be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bea:	3301      	adds	r3, #1
 8009bec:	d102      	bne.n	8009bf4 <HAL_SPI_TransmitReceive+0x340>
 8009bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d104      	bne.n	8009bfe <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8009bf4:	2323      	movs	r3, #35	; 0x23
 8009bf6:	18fb      	adds	r3, r7, r3
 8009bf8:	2203      	movs	r2, #3
 8009bfa:	701a      	strb	r2, [r3, #0]
        goto error;
 8009bfc:	e01b      	b.n	8009c36 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c02:	b29b      	uxth	r3, r3
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d19d      	bne.n	8009b44 <HAL_SPI_TransmitReceive+0x290>
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	2246      	movs	r2, #70	; 0x46
 8009c0c:	5a9b      	ldrh	r3, [r3, r2]
 8009c0e:	b29b      	uxth	r3, r3
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d197      	bne.n	8009b44 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009c14:	69fa      	ldr	r2, [r7, #28]
 8009c16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	0018      	movs	r0, r3
 8009c1c:	f000 fac6 	bl	800a1ac <SPI_EndRxTxTransaction>
 8009c20:	1e03      	subs	r3, r0, #0
 8009c22:	d007      	beq.n	8009c34 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8009c24:	2323      	movs	r3, #35	; 0x23
 8009c26:	18fb      	adds	r3, r7, r3
 8009c28:	2201      	movs	r2, #1
 8009c2a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	2220      	movs	r2, #32
 8009c30:	661a      	str	r2, [r3, #96]	; 0x60
 8009c32:	e000      	b.n	8009c36 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8009c34:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	225d      	movs	r2, #93	; 0x5d
 8009c3a:	2101      	movs	r1, #1
 8009c3c:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	225c      	movs	r2, #92	; 0x5c
 8009c42:	2100      	movs	r1, #0
 8009c44:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009c46:	2323      	movs	r3, #35	; 0x23
 8009c48:	18fb      	adds	r3, r7, r3
 8009c4a:	781b      	ldrb	r3, [r3, #0]
}
 8009c4c:	0018      	movs	r0, r3
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	b00a      	add	sp, #40	; 0x28
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	ffffefff 	.word	0xffffefff

08009c58 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b088      	sub	sp, #32
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	689b      	ldr	r3, [r3, #8]
 8009c6e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009c70:	69bb      	ldr	r3, [r7, #24]
 8009c72:	099b      	lsrs	r3, r3, #6
 8009c74:	001a      	movs	r2, r3
 8009c76:	2301      	movs	r3, #1
 8009c78:	4013      	ands	r3, r2
 8009c7a:	d10f      	bne.n	8009c9c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009c7c:	69bb      	ldr	r3, [r7, #24]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009c82:	d00b      	beq.n	8009c9c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009c84:	69fb      	ldr	r3, [r7, #28]
 8009c86:	099b      	lsrs	r3, r3, #6
 8009c88:	001a      	movs	r2, r3
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	4013      	ands	r3, r2
 8009c8e:	d005      	beq.n	8009c9c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c94:	687a      	ldr	r2, [r7, #4]
 8009c96:	0010      	movs	r0, r2
 8009c98:	4798      	blx	r3
    return;
 8009c9a:	e0d5      	b.n	8009e48 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009c9c:	69bb      	ldr	r3, [r7, #24]
 8009c9e:	085b      	lsrs	r3, r3, #1
 8009ca0:	001a      	movs	r2, r3
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	4013      	ands	r3, r2
 8009ca6:	d00b      	beq.n	8009cc0 <HAL_SPI_IRQHandler+0x68>
 8009ca8:	69fb      	ldr	r3, [r7, #28]
 8009caa:	09db      	lsrs	r3, r3, #7
 8009cac:	001a      	movs	r2, r3
 8009cae:	2301      	movs	r3, #1
 8009cb0:	4013      	ands	r3, r2
 8009cb2:	d005      	beq.n	8009cc0 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cb8:	687a      	ldr	r2, [r7, #4]
 8009cba:	0010      	movs	r0, r2
 8009cbc:	4798      	blx	r3
    return;
 8009cbe:	e0c3      	b.n	8009e48 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009cc0:	69bb      	ldr	r3, [r7, #24]
 8009cc2:	095b      	lsrs	r3, r3, #5
 8009cc4:	001a      	movs	r2, r3
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	4013      	ands	r3, r2
 8009cca:	d10c      	bne.n	8009ce6 <HAL_SPI_IRQHandler+0x8e>
 8009ccc:	69bb      	ldr	r3, [r7, #24]
 8009cce:	099b      	lsrs	r3, r3, #6
 8009cd0:	001a      	movs	r2, r3
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	4013      	ands	r3, r2
 8009cd6:	d106      	bne.n	8009ce6 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009cd8:	69bb      	ldr	r3, [r7, #24]
 8009cda:	0a1b      	lsrs	r3, r3, #8
 8009cdc:	001a      	movs	r2, r3
 8009cde:	2301      	movs	r3, #1
 8009ce0:	4013      	ands	r3, r2
 8009ce2:	d100      	bne.n	8009ce6 <HAL_SPI_IRQHandler+0x8e>
 8009ce4:	e0b0      	b.n	8009e48 <HAL_SPI_IRQHandler+0x1f0>
 8009ce6:	69fb      	ldr	r3, [r7, #28]
 8009ce8:	095b      	lsrs	r3, r3, #5
 8009cea:	001a      	movs	r2, r3
 8009cec:	2301      	movs	r3, #1
 8009cee:	4013      	ands	r3, r2
 8009cf0:	d100      	bne.n	8009cf4 <HAL_SPI_IRQHandler+0x9c>
 8009cf2:	e0a9      	b.n	8009e48 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009cf4:	69bb      	ldr	r3, [r7, #24]
 8009cf6:	099b      	lsrs	r3, r3, #6
 8009cf8:	001a      	movs	r2, r3
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	4013      	ands	r3, r2
 8009cfe:	d023      	beq.n	8009d48 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	225d      	movs	r2, #93	; 0x5d
 8009d04:	5c9b      	ldrb	r3, [r3, r2]
 8009d06:	b2db      	uxtb	r3, r3
 8009d08:	2b03      	cmp	r3, #3
 8009d0a:	d011      	beq.n	8009d30 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d10:	2204      	movs	r2, #4
 8009d12:	431a      	orrs	r2, r3
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009d18:	2300      	movs	r3, #0
 8009d1a:	617b      	str	r3, [r7, #20]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	68db      	ldr	r3, [r3, #12]
 8009d22:	617b      	str	r3, [r7, #20]
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	689b      	ldr	r3, [r3, #8]
 8009d2a:	617b      	str	r3, [r7, #20]
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	e00b      	b.n	8009d48 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009d30:	2300      	movs	r3, #0
 8009d32:	613b      	str	r3, [r7, #16]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	68db      	ldr	r3, [r3, #12]
 8009d3a:	613b      	str	r3, [r7, #16]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	689b      	ldr	r3, [r3, #8]
 8009d42:	613b      	str	r3, [r7, #16]
 8009d44:	693b      	ldr	r3, [r7, #16]
        return;
 8009d46:	e07f      	b.n	8009e48 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009d48:	69bb      	ldr	r3, [r7, #24]
 8009d4a:	095b      	lsrs	r3, r3, #5
 8009d4c:	001a      	movs	r2, r3
 8009d4e:	2301      	movs	r3, #1
 8009d50:	4013      	ands	r3, r2
 8009d52:	d014      	beq.n	8009d7e <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d58:	2201      	movs	r2, #1
 8009d5a:	431a      	orrs	r2, r3
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009d60:	2300      	movs	r3, #0
 8009d62:	60fb      	str	r3, [r7, #12]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	689b      	ldr	r3, [r3, #8]
 8009d6a:	60fb      	str	r3, [r7, #12]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	681a      	ldr	r2, [r3, #0]
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	2140      	movs	r1, #64	; 0x40
 8009d78:	438a      	bics	r2, r1
 8009d7a:	601a      	str	r2, [r3, #0]
 8009d7c:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009d7e:	69bb      	ldr	r3, [r7, #24]
 8009d80:	0a1b      	lsrs	r3, r3, #8
 8009d82:	001a      	movs	r2, r3
 8009d84:	2301      	movs	r3, #1
 8009d86:	4013      	ands	r3, r2
 8009d88:	d00c      	beq.n	8009da4 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d8e:	2208      	movs	r2, #8
 8009d90:	431a      	orrs	r2, r3
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009d96:	2300      	movs	r3, #0
 8009d98:	60bb      	str	r3, [r7, #8]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	689b      	ldr	r3, [r3, #8]
 8009da0:	60bb      	str	r3, [r7, #8]
 8009da2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d04c      	beq.n	8009e46 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	685a      	ldr	r2, [r3, #4]
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	21e0      	movs	r1, #224	; 0xe0
 8009db8:	438a      	bics	r2, r1
 8009dba:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	225d      	movs	r2, #93	; 0x5d
 8009dc0:	2101      	movs	r1, #1
 8009dc2:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009dc4:	69fb      	ldr	r3, [r7, #28]
 8009dc6:	2202      	movs	r2, #2
 8009dc8:	4013      	ands	r3, r2
 8009dca:	d103      	bne.n	8009dd4 <HAL_SPI_IRQHandler+0x17c>
 8009dcc:	69fb      	ldr	r3, [r7, #28]
 8009dce:	2201      	movs	r2, #1
 8009dd0:	4013      	ands	r3, r2
 8009dd2:	d032      	beq.n	8009e3a <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	685a      	ldr	r2, [r3, #4]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	2103      	movs	r1, #3
 8009de0:	438a      	bics	r2, r1
 8009de2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d010      	beq.n	8009e0e <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009df0:	4a17      	ldr	r2, [pc, #92]	; (8009e50 <HAL_SPI_IRQHandler+0x1f8>)
 8009df2:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009df8:	0018      	movs	r0, r3
 8009dfa:	f7fb ffc9 	bl	8005d90 <HAL_DMA_Abort_IT>
 8009dfe:	1e03      	subs	r3, r0, #0
 8009e00:	d005      	beq.n	8009e0e <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e06:	2240      	movs	r2, #64	; 0x40
 8009e08:	431a      	orrs	r2, r3
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d016      	beq.n	8009e44 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e1a:	4a0d      	ldr	r2, [pc, #52]	; (8009e50 <HAL_SPI_IRQHandler+0x1f8>)
 8009e1c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e22:	0018      	movs	r0, r3
 8009e24:	f7fb ffb4 	bl	8005d90 <HAL_DMA_Abort_IT>
 8009e28:	1e03      	subs	r3, r0, #0
 8009e2a:	d00b      	beq.n	8009e44 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e30:	2240      	movs	r2, #64	; 0x40
 8009e32:	431a      	orrs	r2, r3
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8009e38:	e004      	b.n	8009e44 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	0018      	movs	r0, r3
 8009e3e:	f000 f809 	bl	8009e54 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009e42:	e000      	b.n	8009e46 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8009e44:	46c0      	nop			; (mov r8, r8)
    return;
 8009e46:	46c0      	nop			; (mov r8, r8)
  }
}
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	b008      	add	sp, #32
 8009e4c:	bd80      	pop	{r7, pc}
 8009e4e:	46c0      	nop			; (mov r8, r8)
 8009e50:	08009e65 	.word	0x08009e65

08009e54 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b082      	sub	sp, #8
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009e5c:	46c0      	nop			; (mov r8, r8)
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	b002      	add	sp, #8
 8009e62:	bd80      	pop	{r7, pc}

08009e64 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b084      	sub	sp, #16
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e70:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2246      	movs	r2, #70	; 0x46
 8009e76:	2100      	movs	r1, #0
 8009e78:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	0018      	movs	r0, r3
 8009e84:	f7ff ffe6 	bl	8009e54 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009e88:	46c0      	nop			; (mov r8, r8)
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	b004      	add	sp, #16
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b088      	sub	sp, #32
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	60b9      	str	r1, [r7, #8]
 8009e9a:	603b      	str	r3, [r7, #0]
 8009e9c:	1dfb      	adds	r3, r7, #7
 8009e9e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009ea0:	f7fb fae4 	bl	800546c <HAL_GetTick>
 8009ea4:	0002      	movs	r2, r0
 8009ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea8:	1a9b      	subs	r3, r3, r2
 8009eaa:	683a      	ldr	r2, [r7, #0]
 8009eac:	18d3      	adds	r3, r2, r3
 8009eae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009eb0:	f7fb fadc 	bl	800546c <HAL_GetTick>
 8009eb4:	0003      	movs	r3, r0
 8009eb6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009eb8:	4b3a      	ldr	r3, [pc, #232]	; (8009fa4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	015b      	lsls	r3, r3, #5
 8009ebe:	0d1b      	lsrs	r3, r3, #20
 8009ec0:	69fa      	ldr	r2, [r7, #28]
 8009ec2:	4353      	muls	r3, r2
 8009ec4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009ec6:	e058      	b.n	8009f7a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	3301      	adds	r3, #1
 8009ecc:	d055      	beq.n	8009f7a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009ece:	f7fb facd 	bl	800546c <HAL_GetTick>
 8009ed2:	0002      	movs	r2, r0
 8009ed4:	69bb      	ldr	r3, [r7, #24]
 8009ed6:	1ad3      	subs	r3, r2, r3
 8009ed8:	69fa      	ldr	r2, [r7, #28]
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d902      	bls.n	8009ee4 <SPI_WaitFlagStateUntilTimeout+0x54>
 8009ede:	69fb      	ldr	r3, [r7, #28]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d142      	bne.n	8009f6a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	685a      	ldr	r2, [r3, #4]
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	21e0      	movs	r1, #224	; 0xe0
 8009ef0:	438a      	bics	r2, r1
 8009ef2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	685a      	ldr	r2, [r3, #4]
 8009ef8:	2382      	movs	r3, #130	; 0x82
 8009efa:	005b      	lsls	r3, r3, #1
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d113      	bne.n	8009f28 <SPI_WaitFlagStateUntilTimeout+0x98>
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	689a      	ldr	r2, [r3, #8]
 8009f04:	2380      	movs	r3, #128	; 0x80
 8009f06:	021b      	lsls	r3, r3, #8
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d005      	beq.n	8009f18 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	689a      	ldr	r2, [r3, #8]
 8009f10:	2380      	movs	r3, #128	; 0x80
 8009f12:	00db      	lsls	r3, r3, #3
 8009f14:	429a      	cmp	r2, r3
 8009f16:	d107      	bne.n	8009f28 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	2140      	movs	r1, #64	; 0x40
 8009f24:	438a      	bics	r2, r1
 8009f26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f2c:	2380      	movs	r3, #128	; 0x80
 8009f2e:	019b      	lsls	r3, r3, #6
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d110      	bne.n	8009f56 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	681a      	ldr	r2, [r3, #0]
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	491a      	ldr	r1, [pc, #104]	; (8009fa8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8009f40:	400a      	ands	r2, r1
 8009f42:	601a      	str	r2, [r3, #0]
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	681a      	ldr	r2, [r3, #0]
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	2180      	movs	r1, #128	; 0x80
 8009f50:	0189      	lsls	r1, r1, #6
 8009f52:	430a      	orrs	r2, r1
 8009f54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	225d      	movs	r2, #93	; 0x5d
 8009f5a:	2101      	movs	r1, #1
 8009f5c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	225c      	movs	r2, #92	; 0x5c
 8009f62:	2100      	movs	r1, #0
 8009f64:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009f66:	2303      	movs	r3, #3
 8009f68:	e017      	b.n	8009f9a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d101      	bne.n	8009f74 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8009f70:	2300      	movs	r3, #0
 8009f72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	3b01      	subs	r3, #1
 8009f78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	689b      	ldr	r3, [r3, #8]
 8009f80:	68ba      	ldr	r2, [r7, #8]
 8009f82:	4013      	ands	r3, r2
 8009f84:	68ba      	ldr	r2, [r7, #8]
 8009f86:	1ad3      	subs	r3, r2, r3
 8009f88:	425a      	negs	r2, r3
 8009f8a:	4153      	adcs	r3, r2
 8009f8c:	b2db      	uxtb	r3, r3
 8009f8e:	001a      	movs	r2, r3
 8009f90:	1dfb      	adds	r3, r7, #7
 8009f92:	781b      	ldrb	r3, [r3, #0]
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d197      	bne.n	8009ec8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009f98:	2300      	movs	r3, #0
}
 8009f9a:	0018      	movs	r0, r3
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	b008      	add	sp, #32
 8009fa0:	bd80      	pop	{r7, pc}
 8009fa2:	46c0      	nop			; (mov r8, r8)
 8009fa4:	20000064 	.word	0x20000064
 8009fa8:	ffffdfff 	.word	0xffffdfff

08009fac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b08a      	sub	sp, #40	; 0x28
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	60f8      	str	r0, [r7, #12]
 8009fb4:	60b9      	str	r1, [r7, #8]
 8009fb6:	607a      	str	r2, [r7, #4]
 8009fb8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009fba:	2317      	movs	r3, #23
 8009fbc:	18fb      	adds	r3, r7, r3
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009fc2:	f7fb fa53 	bl	800546c <HAL_GetTick>
 8009fc6:	0002      	movs	r2, r0
 8009fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fca:	1a9b      	subs	r3, r3, r2
 8009fcc:	683a      	ldr	r2, [r7, #0]
 8009fce:	18d3      	adds	r3, r2, r3
 8009fd0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009fd2:	f7fb fa4b 	bl	800546c <HAL_GetTick>
 8009fd6:	0003      	movs	r3, r0
 8009fd8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	330c      	adds	r3, #12
 8009fe0:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009fe2:	4b41      	ldr	r3, [pc, #260]	; (800a0e8 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8009fe4:	681a      	ldr	r2, [r3, #0]
 8009fe6:	0013      	movs	r3, r2
 8009fe8:	009b      	lsls	r3, r3, #2
 8009fea:	189b      	adds	r3, r3, r2
 8009fec:	00da      	lsls	r2, r3, #3
 8009fee:	1ad3      	subs	r3, r2, r3
 8009ff0:	0d1b      	lsrs	r3, r3, #20
 8009ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ff4:	4353      	muls	r3, r2
 8009ff6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009ff8:	e068      	b.n	800a0cc <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009ffa:	68ba      	ldr	r2, [r7, #8]
 8009ffc:	23c0      	movs	r3, #192	; 0xc0
 8009ffe:	00db      	lsls	r3, r3, #3
 800a000:	429a      	cmp	r2, r3
 800a002:	d10a      	bne.n	800a01a <SPI_WaitFifoStateUntilTimeout+0x6e>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d107      	bne.n	800a01a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a00a:	69fb      	ldr	r3, [r7, #28]
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	b2da      	uxtb	r2, r3
 800a010:	2117      	movs	r1, #23
 800a012:	187b      	adds	r3, r7, r1
 800a014:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a016:	187b      	adds	r3, r7, r1
 800a018:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	3301      	adds	r3, #1
 800a01e:	d055      	beq.n	800a0cc <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a020:	f7fb fa24 	bl	800546c <HAL_GetTick>
 800a024:	0002      	movs	r2, r0
 800a026:	6a3b      	ldr	r3, [r7, #32]
 800a028:	1ad3      	subs	r3, r2, r3
 800a02a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d902      	bls.n	800a036 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800a030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a032:	2b00      	cmp	r3, #0
 800a034:	d142      	bne.n	800a0bc <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	685a      	ldr	r2, [r3, #4]
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	21e0      	movs	r1, #224	; 0xe0
 800a042:	438a      	bics	r2, r1
 800a044:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	685a      	ldr	r2, [r3, #4]
 800a04a:	2382      	movs	r3, #130	; 0x82
 800a04c:	005b      	lsls	r3, r3, #1
 800a04e:	429a      	cmp	r2, r3
 800a050:	d113      	bne.n	800a07a <SPI_WaitFifoStateUntilTimeout+0xce>
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	689a      	ldr	r2, [r3, #8]
 800a056:	2380      	movs	r3, #128	; 0x80
 800a058:	021b      	lsls	r3, r3, #8
 800a05a:	429a      	cmp	r2, r3
 800a05c:	d005      	beq.n	800a06a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	689a      	ldr	r2, [r3, #8]
 800a062:	2380      	movs	r3, #128	; 0x80
 800a064:	00db      	lsls	r3, r3, #3
 800a066:	429a      	cmp	r2, r3
 800a068:	d107      	bne.n	800a07a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	681a      	ldr	r2, [r3, #0]
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	2140      	movs	r1, #64	; 0x40
 800a076:	438a      	bics	r2, r1
 800a078:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a07e:	2380      	movs	r3, #128	; 0x80
 800a080:	019b      	lsls	r3, r3, #6
 800a082:	429a      	cmp	r2, r3
 800a084:	d110      	bne.n	800a0a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4916      	ldr	r1, [pc, #88]	; (800a0ec <SPI_WaitFifoStateUntilTimeout+0x140>)
 800a092:	400a      	ands	r2, r1
 800a094:	601a      	str	r2, [r3, #0]
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	681a      	ldr	r2, [r3, #0]
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	2180      	movs	r1, #128	; 0x80
 800a0a2:	0189      	lsls	r1, r1, #6
 800a0a4:	430a      	orrs	r2, r1
 800a0a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	225d      	movs	r2, #93	; 0x5d
 800a0ac:	2101      	movs	r1, #1
 800a0ae:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	225c      	movs	r2, #92	; 0x5c
 800a0b4:	2100      	movs	r1, #0
 800a0b6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a0b8:	2303      	movs	r3, #3
 800a0ba:	e010      	b.n	800a0de <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a0bc:	69bb      	ldr	r3, [r7, #24]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d101      	bne.n	800a0c6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800a0c6:	69bb      	ldr	r3, [r7, #24]
 800a0c8:	3b01      	subs	r3, #1
 800a0ca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	689b      	ldr	r3, [r3, #8]
 800a0d2:	68ba      	ldr	r2, [r7, #8]
 800a0d4:	4013      	ands	r3, r2
 800a0d6:	687a      	ldr	r2, [r7, #4]
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	d18e      	bne.n	8009ffa <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800a0dc:	2300      	movs	r3, #0
}
 800a0de:	0018      	movs	r0, r3
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	b00a      	add	sp, #40	; 0x28
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	46c0      	nop			; (mov r8, r8)
 800a0e8:	20000064 	.word	0x20000064
 800a0ec:	ffffdfff 	.word	0xffffdfff

0800a0f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b086      	sub	sp, #24
 800a0f4:	af02      	add	r7, sp, #8
 800a0f6:	60f8      	str	r0, [r7, #12]
 800a0f8:	60b9      	str	r1, [r7, #8]
 800a0fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	685a      	ldr	r2, [r3, #4]
 800a100:	2382      	movs	r3, #130	; 0x82
 800a102:	005b      	lsls	r3, r3, #1
 800a104:	429a      	cmp	r2, r3
 800a106:	d113      	bne.n	800a130 <SPI_EndRxTransaction+0x40>
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	689a      	ldr	r2, [r3, #8]
 800a10c:	2380      	movs	r3, #128	; 0x80
 800a10e:	021b      	lsls	r3, r3, #8
 800a110:	429a      	cmp	r2, r3
 800a112:	d005      	beq.n	800a120 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	689a      	ldr	r2, [r3, #8]
 800a118:	2380      	movs	r3, #128	; 0x80
 800a11a:	00db      	lsls	r3, r3, #3
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d107      	bne.n	800a130 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	681a      	ldr	r2, [r3, #0]
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	2140      	movs	r1, #64	; 0x40
 800a12c:	438a      	bics	r2, r1
 800a12e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a130:	68ba      	ldr	r2, [r7, #8]
 800a132:	68f8      	ldr	r0, [r7, #12]
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	9300      	str	r3, [sp, #0]
 800a138:	0013      	movs	r3, r2
 800a13a:	2200      	movs	r2, #0
 800a13c:	2180      	movs	r1, #128	; 0x80
 800a13e:	f7ff fea7 	bl	8009e90 <SPI_WaitFlagStateUntilTimeout>
 800a142:	1e03      	subs	r3, r0, #0
 800a144:	d007      	beq.n	800a156 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a14a:	2220      	movs	r2, #32
 800a14c:	431a      	orrs	r2, r3
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a152:	2303      	movs	r3, #3
 800a154:	e026      	b.n	800a1a4 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	685a      	ldr	r2, [r3, #4]
 800a15a:	2382      	movs	r3, #130	; 0x82
 800a15c:	005b      	lsls	r3, r3, #1
 800a15e:	429a      	cmp	r2, r3
 800a160:	d11f      	bne.n	800a1a2 <SPI_EndRxTransaction+0xb2>
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	689a      	ldr	r2, [r3, #8]
 800a166:	2380      	movs	r3, #128	; 0x80
 800a168:	021b      	lsls	r3, r3, #8
 800a16a:	429a      	cmp	r2, r3
 800a16c:	d005      	beq.n	800a17a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	689a      	ldr	r2, [r3, #8]
 800a172:	2380      	movs	r3, #128	; 0x80
 800a174:	00db      	lsls	r3, r3, #3
 800a176:	429a      	cmp	r2, r3
 800a178:	d113      	bne.n	800a1a2 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a17a:	68ba      	ldr	r2, [r7, #8]
 800a17c:	23c0      	movs	r3, #192	; 0xc0
 800a17e:	00d9      	lsls	r1, r3, #3
 800a180:	68f8      	ldr	r0, [r7, #12]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	9300      	str	r3, [sp, #0]
 800a186:	0013      	movs	r3, r2
 800a188:	2200      	movs	r2, #0
 800a18a:	f7ff ff0f 	bl	8009fac <SPI_WaitFifoStateUntilTimeout>
 800a18e:	1e03      	subs	r3, r0, #0
 800a190:	d007      	beq.n	800a1a2 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a196:	2220      	movs	r2, #32
 800a198:	431a      	orrs	r2, r3
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800a19e:	2303      	movs	r3, #3
 800a1a0:	e000      	b.n	800a1a4 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800a1a2:	2300      	movs	r3, #0
}
 800a1a4:	0018      	movs	r0, r3
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	b004      	add	sp, #16
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b086      	sub	sp, #24
 800a1b0:	af02      	add	r7, sp, #8
 800a1b2:	60f8      	str	r0, [r7, #12]
 800a1b4:	60b9      	str	r1, [r7, #8]
 800a1b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a1b8:	68ba      	ldr	r2, [r7, #8]
 800a1ba:	23c0      	movs	r3, #192	; 0xc0
 800a1bc:	0159      	lsls	r1, r3, #5
 800a1be:	68f8      	ldr	r0, [r7, #12]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	9300      	str	r3, [sp, #0]
 800a1c4:	0013      	movs	r3, r2
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	f7ff fef0 	bl	8009fac <SPI_WaitFifoStateUntilTimeout>
 800a1cc:	1e03      	subs	r3, r0, #0
 800a1ce:	d007      	beq.n	800a1e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1d4:	2220      	movs	r2, #32
 800a1d6:	431a      	orrs	r2, r3
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a1dc:	2303      	movs	r3, #3
 800a1de:	e027      	b.n	800a230 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a1e0:	68ba      	ldr	r2, [r7, #8]
 800a1e2:	68f8      	ldr	r0, [r7, #12]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	9300      	str	r3, [sp, #0]
 800a1e8:	0013      	movs	r3, r2
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	2180      	movs	r1, #128	; 0x80
 800a1ee:	f7ff fe4f 	bl	8009e90 <SPI_WaitFlagStateUntilTimeout>
 800a1f2:	1e03      	subs	r3, r0, #0
 800a1f4:	d007      	beq.n	800a206 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1fa:	2220      	movs	r2, #32
 800a1fc:	431a      	orrs	r2, r3
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a202:	2303      	movs	r3, #3
 800a204:	e014      	b.n	800a230 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a206:	68ba      	ldr	r2, [r7, #8]
 800a208:	23c0      	movs	r3, #192	; 0xc0
 800a20a:	00d9      	lsls	r1, r3, #3
 800a20c:	68f8      	ldr	r0, [r7, #12]
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	9300      	str	r3, [sp, #0]
 800a212:	0013      	movs	r3, r2
 800a214:	2200      	movs	r2, #0
 800a216:	f7ff fec9 	bl	8009fac <SPI_WaitFifoStateUntilTimeout>
 800a21a:	1e03      	subs	r3, r0, #0
 800a21c:	d007      	beq.n	800a22e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a222:	2220      	movs	r2, #32
 800a224:	431a      	orrs	r2, r3
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a22a:	2303      	movs	r3, #3
 800a22c:	e000      	b.n	800a230 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a22e:	2300      	movs	r3, #0
}
 800a230:	0018      	movs	r0, r3
 800a232:	46bd      	mov	sp, r7
 800a234:	b004      	add	sp, #16
 800a236:	bd80      	pop	{r7, pc}

0800a238 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b082      	sub	sp, #8
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d101      	bne.n	800a24a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a246:	2301      	movs	r3, #1
 800a248:	e04a      	b.n	800a2e0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	223d      	movs	r2, #61	; 0x3d
 800a24e:	5c9b      	ldrb	r3, [r3, r2]
 800a250:	b2db      	uxtb	r3, r3
 800a252:	2b00      	cmp	r3, #0
 800a254:	d107      	bne.n	800a266 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	223c      	movs	r2, #60	; 0x3c
 800a25a:	2100      	movs	r1, #0
 800a25c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	0018      	movs	r0, r3
 800a262:	f7fa fe15 	bl	8004e90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	223d      	movs	r2, #61	; 0x3d
 800a26a:	2102      	movs	r1, #2
 800a26c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681a      	ldr	r2, [r3, #0]
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	3304      	adds	r3, #4
 800a276:	0019      	movs	r1, r3
 800a278:	0010      	movs	r0, r2
 800a27a:	f000 fb55 	bl	800a928 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2248      	movs	r2, #72	; 0x48
 800a282:	2101      	movs	r1, #1
 800a284:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	223e      	movs	r2, #62	; 0x3e
 800a28a:	2101      	movs	r1, #1
 800a28c:	5499      	strb	r1, [r3, r2]
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	223f      	movs	r2, #63	; 0x3f
 800a292:	2101      	movs	r1, #1
 800a294:	5499      	strb	r1, [r3, r2]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2240      	movs	r2, #64	; 0x40
 800a29a:	2101      	movs	r1, #1
 800a29c:	5499      	strb	r1, [r3, r2]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2241      	movs	r2, #65	; 0x41
 800a2a2:	2101      	movs	r1, #1
 800a2a4:	5499      	strb	r1, [r3, r2]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2242      	movs	r2, #66	; 0x42
 800a2aa:	2101      	movs	r1, #1
 800a2ac:	5499      	strb	r1, [r3, r2]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2243      	movs	r2, #67	; 0x43
 800a2b2:	2101      	movs	r1, #1
 800a2b4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2244      	movs	r2, #68	; 0x44
 800a2ba:	2101      	movs	r1, #1
 800a2bc:	5499      	strb	r1, [r3, r2]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2245      	movs	r2, #69	; 0x45
 800a2c2:	2101      	movs	r1, #1
 800a2c4:	5499      	strb	r1, [r3, r2]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2246      	movs	r2, #70	; 0x46
 800a2ca:	2101      	movs	r1, #1
 800a2cc:	5499      	strb	r1, [r3, r2]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2247      	movs	r2, #71	; 0x47
 800a2d2:	2101      	movs	r1, #1
 800a2d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	223d      	movs	r2, #61	; 0x3d
 800a2da:	2101      	movs	r1, #1
 800a2dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a2de:	2300      	movs	r3, #0
}
 800a2e0:	0018      	movs	r0, r3
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	b002      	add	sp, #8
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b082      	sub	sp, #8
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d101      	bne.n	800a2fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	e04a      	b.n	800a390 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	223d      	movs	r2, #61	; 0x3d
 800a2fe:	5c9b      	ldrb	r3, [r3, r2]
 800a300:	b2db      	uxtb	r3, r3
 800a302:	2b00      	cmp	r3, #0
 800a304:	d107      	bne.n	800a316 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	223c      	movs	r2, #60	; 0x3c
 800a30a:	2100      	movs	r1, #0
 800a30c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	0018      	movs	r0, r3
 800a312:	f000 f841 	bl	800a398 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	223d      	movs	r2, #61	; 0x3d
 800a31a:	2102      	movs	r1, #2
 800a31c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681a      	ldr	r2, [r3, #0]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	3304      	adds	r3, #4
 800a326:	0019      	movs	r1, r3
 800a328:	0010      	movs	r0, r2
 800a32a:	f000 fafd 	bl	800a928 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2248      	movs	r2, #72	; 0x48
 800a332:	2101      	movs	r1, #1
 800a334:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	223e      	movs	r2, #62	; 0x3e
 800a33a:	2101      	movs	r1, #1
 800a33c:	5499      	strb	r1, [r3, r2]
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	223f      	movs	r2, #63	; 0x3f
 800a342:	2101      	movs	r1, #1
 800a344:	5499      	strb	r1, [r3, r2]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2240      	movs	r2, #64	; 0x40
 800a34a:	2101      	movs	r1, #1
 800a34c:	5499      	strb	r1, [r3, r2]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2241      	movs	r2, #65	; 0x41
 800a352:	2101      	movs	r1, #1
 800a354:	5499      	strb	r1, [r3, r2]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2242      	movs	r2, #66	; 0x42
 800a35a:	2101      	movs	r1, #1
 800a35c:	5499      	strb	r1, [r3, r2]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2243      	movs	r2, #67	; 0x43
 800a362:	2101      	movs	r1, #1
 800a364:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2244      	movs	r2, #68	; 0x44
 800a36a:	2101      	movs	r1, #1
 800a36c:	5499      	strb	r1, [r3, r2]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2245      	movs	r2, #69	; 0x45
 800a372:	2101      	movs	r1, #1
 800a374:	5499      	strb	r1, [r3, r2]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2246      	movs	r2, #70	; 0x46
 800a37a:	2101      	movs	r1, #1
 800a37c:	5499      	strb	r1, [r3, r2]
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2247      	movs	r2, #71	; 0x47
 800a382:	2101      	movs	r1, #1
 800a384:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	223d      	movs	r2, #61	; 0x3d
 800a38a:	2101      	movs	r1, #1
 800a38c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a38e:	2300      	movs	r3, #0
}
 800a390:	0018      	movs	r0, r3
 800a392:	46bd      	mov	sp, r7
 800a394:	b002      	add	sp, #8
 800a396:	bd80      	pop	{r7, pc}

0800a398 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a3a0:	46c0      	nop			; (mov r8, r8)
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	b002      	add	sp, #8
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b084      	sub	sp, #16
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d108      	bne.n	800a3ca <HAL_TIM_PWM_Start+0x22>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	223e      	movs	r2, #62	; 0x3e
 800a3bc:	5c9b      	ldrb	r3, [r3, r2]
 800a3be:	b2db      	uxtb	r3, r3
 800a3c0:	3b01      	subs	r3, #1
 800a3c2:	1e5a      	subs	r2, r3, #1
 800a3c4:	4193      	sbcs	r3, r2
 800a3c6:	b2db      	uxtb	r3, r3
 800a3c8:	e037      	b.n	800a43a <HAL_TIM_PWM_Start+0x92>
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	2b04      	cmp	r3, #4
 800a3ce:	d108      	bne.n	800a3e2 <HAL_TIM_PWM_Start+0x3a>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	223f      	movs	r2, #63	; 0x3f
 800a3d4:	5c9b      	ldrb	r3, [r3, r2]
 800a3d6:	b2db      	uxtb	r3, r3
 800a3d8:	3b01      	subs	r3, #1
 800a3da:	1e5a      	subs	r2, r3, #1
 800a3dc:	4193      	sbcs	r3, r2
 800a3de:	b2db      	uxtb	r3, r3
 800a3e0:	e02b      	b.n	800a43a <HAL_TIM_PWM_Start+0x92>
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	2b08      	cmp	r3, #8
 800a3e6:	d108      	bne.n	800a3fa <HAL_TIM_PWM_Start+0x52>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2240      	movs	r2, #64	; 0x40
 800a3ec:	5c9b      	ldrb	r3, [r3, r2]
 800a3ee:	b2db      	uxtb	r3, r3
 800a3f0:	3b01      	subs	r3, #1
 800a3f2:	1e5a      	subs	r2, r3, #1
 800a3f4:	4193      	sbcs	r3, r2
 800a3f6:	b2db      	uxtb	r3, r3
 800a3f8:	e01f      	b.n	800a43a <HAL_TIM_PWM_Start+0x92>
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	2b0c      	cmp	r3, #12
 800a3fe:	d108      	bne.n	800a412 <HAL_TIM_PWM_Start+0x6a>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2241      	movs	r2, #65	; 0x41
 800a404:	5c9b      	ldrb	r3, [r3, r2]
 800a406:	b2db      	uxtb	r3, r3
 800a408:	3b01      	subs	r3, #1
 800a40a:	1e5a      	subs	r2, r3, #1
 800a40c:	4193      	sbcs	r3, r2
 800a40e:	b2db      	uxtb	r3, r3
 800a410:	e013      	b.n	800a43a <HAL_TIM_PWM_Start+0x92>
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	2b10      	cmp	r3, #16
 800a416:	d108      	bne.n	800a42a <HAL_TIM_PWM_Start+0x82>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2242      	movs	r2, #66	; 0x42
 800a41c:	5c9b      	ldrb	r3, [r3, r2]
 800a41e:	b2db      	uxtb	r3, r3
 800a420:	3b01      	subs	r3, #1
 800a422:	1e5a      	subs	r2, r3, #1
 800a424:	4193      	sbcs	r3, r2
 800a426:	b2db      	uxtb	r3, r3
 800a428:	e007      	b.n	800a43a <HAL_TIM_PWM_Start+0x92>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2243      	movs	r2, #67	; 0x43
 800a42e:	5c9b      	ldrb	r3, [r3, r2]
 800a430:	b2db      	uxtb	r3, r3
 800a432:	3b01      	subs	r3, #1
 800a434:	1e5a      	subs	r2, r3, #1
 800a436:	4193      	sbcs	r3, r2
 800a438:	b2db      	uxtb	r3, r3
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d001      	beq.n	800a442 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800a43e:	2301      	movs	r3, #1
 800a440:	e08b      	b.n	800a55a <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d104      	bne.n	800a452 <HAL_TIM_PWM_Start+0xaa>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	223e      	movs	r2, #62	; 0x3e
 800a44c:	2102      	movs	r1, #2
 800a44e:	5499      	strb	r1, [r3, r2]
 800a450:	e023      	b.n	800a49a <HAL_TIM_PWM_Start+0xf2>
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	2b04      	cmp	r3, #4
 800a456:	d104      	bne.n	800a462 <HAL_TIM_PWM_Start+0xba>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	223f      	movs	r2, #63	; 0x3f
 800a45c:	2102      	movs	r1, #2
 800a45e:	5499      	strb	r1, [r3, r2]
 800a460:	e01b      	b.n	800a49a <HAL_TIM_PWM_Start+0xf2>
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	2b08      	cmp	r3, #8
 800a466:	d104      	bne.n	800a472 <HAL_TIM_PWM_Start+0xca>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2240      	movs	r2, #64	; 0x40
 800a46c:	2102      	movs	r1, #2
 800a46e:	5499      	strb	r1, [r3, r2]
 800a470:	e013      	b.n	800a49a <HAL_TIM_PWM_Start+0xf2>
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	2b0c      	cmp	r3, #12
 800a476:	d104      	bne.n	800a482 <HAL_TIM_PWM_Start+0xda>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2241      	movs	r2, #65	; 0x41
 800a47c:	2102      	movs	r1, #2
 800a47e:	5499      	strb	r1, [r3, r2]
 800a480:	e00b      	b.n	800a49a <HAL_TIM_PWM_Start+0xf2>
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	2b10      	cmp	r3, #16
 800a486:	d104      	bne.n	800a492 <HAL_TIM_PWM_Start+0xea>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2242      	movs	r2, #66	; 0x42
 800a48c:	2102      	movs	r1, #2
 800a48e:	5499      	strb	r1, [r3, r2]
 800a490:	e003      	b.n	800a49a <HAL_TIM_PWM_Start+0xf2>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2243      	movs	r2, #67	; 0x43
 800a496:	2102      	movs	r1, #2
 800a498:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	6839      	ldr	r1, [r7, #0]
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	0018      	movs	r0, r3
 800a4a4:	f000 fe20 	bl	800b0e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4a2d      	ldr	r2, [pc, #180]	; (800a564 <HAL_TIM_PWM_Start+0x1bc>)
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d00e      	beq.n	800a4d0 <HAL_TIM_PWM_Start+0x128>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	4a2c      	ldr	r2, [pc, #176]	; (800a568 <HAL_TIM_PWM_Start+0x1c0>)
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d009      	beq.n	800a4d0 <HAL_TIM_PWM_Start+0x128>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4a2a      	ldr	r2, [pc, #168]	; (800a56c <HAL_TIM_PWM_Start+0x1c4>)
 800a4c2:	4293      	cmp	r3, r2
 800a4c4:	d004      	beq.n	800a4d0 <HAL_TIM_PWM_Start+0x128>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	4a29      	ldr	r2, [pc, #164]	; (800a570 <HAL_TIM_PWM_Start+0x1c8>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d101      	bne.n	800a4d4 <HAL_TIM_PWM_Start+0x12c>
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	e000      	b.n	800a4d6 <HAL_TIM_PWM_Start+0x12e>
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d008      	beq.n	800a4ec <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	2180      	movs	r1, #128	; 0x80
 800a4e6:	0209      	lsls	r1, r1, #8
 800a4e8:	430a      	orrs	r2, r1
 800a4ea:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	4a1c      	ldr	r2, [pc, #112]	; (800a564 <HAL_TIM_PWM_Start+0x1bc>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d00f      	beq.n	800a516 <HAL_TIM_PWM_Start+0x16e>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681a      	ldr	r2, [r3, #0]
 800a4fa:	2380      	movs	r3, #128	; 0x80
 800a4fc:	05db      	lsls	r3, r3, #23
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d009      	beq.n	800a516 <HAL_TIM_PWM_Start+0x16e>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4a1b      	ldr	r2, [pc, #108]	; (800a574 <HAL_TIM_PWM_Start+0x1cc>)
 800a508:	4293      	cmp	r3, r2
 800a50a:	d004      	beq.n	800a516 <HAL_TIM_PWM_Start+0x16e>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4a15      	ldr	r2, [pc, #84]	; (800a568 <HAL_TIM_PWM_Start+0x1c0>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d116      	bne.n	800a544 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	689b      	ldr	r3, [r3, #8]
 800a51c:	4a16      	ldr	r2, [pc, #88]	; (800a578 <HAL_TIM_PWM_Start+0x1d0>)
 800a51e:	4013      	ands	r3, r2
 800a520:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	2b06      	cmp	r3, #6
 800a526:	d016      	beq.n	800a556 <HAL_TIM_PWM_Start+0x1ae>
 800a528:	68fa      	ldr	r2, [r7, #12]
 800a52a:	2380      	movs	r3, #128	; 0x80
 800a52c:	025b      	lsls	r3, r3, #9
 800a52e:	429a      	cmp	r2, r3
 800a530:	d011      	beq.n	800a556 <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	681a      	ldr	r2, [r3, #0]
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	2101      	movs	r1, #1
 800a53e:	430a      	orrs	r2, r1
 800a540:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a542:	e008      	b.n	800a556 <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	681a      	ldr	r2, [r3, #0]
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	2101      	movs	r1, #1
 800a550:	430a      	orrs	r2, r1
 800a552:	601a      	str	r2, [r3, #0]
 800a554:	e000      	b.n	800a558 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a556:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800a558:	2300      	movs	r3, #0
}
 800a55a:	0018      	movs	r0, r3
 800a55c:	46bd      	mov	sp, r7
 800a55e:	b004      	add	sp, #16
 800a560:	bd80      	pop	{r7, pc}
 800a562:	46c0      	nop			; (mov r8, r8)
 800a564:	40012c00 	.word	0x40012c00
 800a568:	40014000 	.word	0x40014000
 800a56c:	40014400 	.word	0x40014400
 800a570:	40014800 	.word	0x40014800
 800a574:	40000400 	.word	0x40000400
 800a578:	00010007 	.word	0x00010007

0800a57c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b086      	sub	sp, #24
 800a580:	af00      	add	r7, sp, #0
 800a582:	60f8      	str	r0, [r7, #12]
 800a584:	60b9      	str	r1, [r7, #8]
 800a586:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a588:	2317      	movs	r3, #23
 800a58a:	18fb      	adds	r3, r7, r3
 800a58c:	2200      	movs	r2, #0
 800a58e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	223c      	movs	r2, #60	; 0x3c
 800a594:	5c9b      	ldrb	r3, [r3, r2]
 800a596:	2b01      	cmp	r3, #1
 800a598:	d101      	bne.n	800a59e <HAL_TIM_PWM_ConfigChannel+0x22>
 800a59a:	2302      	movs	r3, #2
 800a59c:	e0e5      	b.n	800a76a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	223c      	movs	r2, #60	; 0x3c
 800a5a2:	2101      	movs	r1, #1
 800a5a4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2b14      	cmp	r3, #20
 800a5aa:	d900      	bls.n	800a5ae <HAL_TIM_PWM_ConfigChannel+0x32>
 800a5ac:	e0d1      	b.n	800a752 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	009a      	lsls	r2, r3, #2
 800a5b2:	4b70      	ldr	r3, [pc, #448]	; (800a774 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800a5b4:	18d3      	adds	r3, r2, r3
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	68ba      	ldr	r2, [r7, #8]
 800a5c0:	0011      	movs	r1, r2
 800a5c2:	0018      	movs	r0, r3
 800a5c4:	f000 fa30 	bl	800aa28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	699a      	ldr	r2, [r3, #24]
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	2108      	movs	r1, #8
 800a5d4:	430a      	orrs	r2, r1
 800a5d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	699a      	ldr	r2, [r3, #24]
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	2104      	movs	r1, #4
 800a5e4:	438a      	bics	r2, r1
 800a5e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	6999      	ldr	r1, [r3, #24]
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	691a      	ldr	r2, [r3, #16]
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	430a      	orrs	r2, r1
 800a5f8:	619a      	str	r2, [r3, #24]
      break;
 800a5fa:	e0af      	b.n	800a75c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	68ba      	ldr	r2, [r7, #8]
 800a602:	0011      	movs	r1, r2
 800a604:	0018      	movs	r0, r3
 800a606:	f000 fa99 	bl	800ab3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	699a      	ldr	r2, [r3, #24]
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	2180      	movs	r1, #128	; 0x80
 800a616:	0109      	lsls	r1, r1, #4
 800a618:	430a      	orrs	r2, r1
 800a61a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	699a      	ldr	r2, [r3, #24]
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	4954      	ldr	r1, [pc, #336]	; (800a778 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a628:	400a      	ands	r2, r1
 800a62a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	6999      	ldr	r1, [r3, #24]
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	691b      	ldr	r3, [r3, #16]
 800a636:	021a      	lsls	r2, r3, #8
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	430a      	orrs	r2, r1
 800a63e:	619a      	str	r2, [r3, #24]
      break;
 800a640:	e08c      	b.n	800a75c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	68ba      	ldr	r2, [r7, #8]
 800a648:	0011      	movs	r1, r2
 800a64a:	0018      	movs	r0, r3
 800a64c:	f000 fafa 	bl	800ac44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	69da      	ldr	r2, [r3, #28]
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	2108      	movs	r1, #8
 800a65c:	430a      	orrs	r2, r1
 800a65e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	69da      	ldr	r2, [r3, #28]
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	2104      	movs	r1, #4
 800a66c:	438a      	bics	r2, r1
 800a66e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	69d9      	ldr	r1, [r3, #28]
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	691a      	ldr	r2, [r3, #16]
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	430a      	orrs	r2, r1
 800a680:	61da      	str	r2, [r3, #28]
      break;
 800a682:	e06b      	b.n	800a75c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	68ba      	ldr	r2, [r7, #8]
 800a68a:	0011      	movs	r1, r2
 800a68c:	0018      	movs	r0, r3
 800a68e:	f000 fb61 	bl	800ad54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	69da      	ldr	r2, [r3, #28]
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	2180      	movs	r1, #128	; 0x80
 800a69e:	0109      	lsls	r1, r1, #4
 800a6a0:	430a      	orrs	r2, r1
 800a6a2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	69da      	ldr	r2, [r3, #28]
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	4932      	ldr	r1, [pc, #200]	; (800a778 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a6b0:	400a      	ands	r2, r1
 800a6b2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	69d9      	ldr	r1, [r3, #28]
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	691b      	ldr	r3, [r3, #16]
 800a6be:	021a      	lsls	r2, r3, #8
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	430a      	orrs	r2, r1
 800a6c6:	61da      	str	r2, [r3, #28]
      break;
 800a6c8:	e048      	b.n	800a75c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	68ba      	ldr	r2, [r7, #8]
 800a6d0:	0011      	movs	r1, r2
 800a6d2:	0018      	movs	r0, r3
 800a6d4:	f000 fba8 	bl	800ae28 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	2108      	movs	r1, #8
 800a6e4:	430a      	orrs	r2, r1
 800a6e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	2104      	movs	r1, #4
 800a6f4:	438a      	bics	r2, r1
 800a6f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	691a      	ldr	r2, [r3, #16]
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	430a      	orrs	r2, r1
 800a708:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a70a:	e027      	b.n	800a75c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	68ba      	ldr	r2, [r7, #8]
 800a712:	0011      	movs	r1, r2
 800a714:	0018      	movs	r0, r3
 800a716:	f000 fbe7 	bl	800aee8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	2180      	movs	r1, #128	; 0x80
 800a726:	0109      	lsls	r1, r1, #4
 800a728:	430a      	orrs	r2, r1
 800a72a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	4910      	ldr	r1, [pc, #64]	; (800a778 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a738:	400a      	ands	r2, r1
 800a73a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	691b      	ldr	r3, [r3, #16]
 800a746:	021a      	lsls	r2, r3, #8
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	430a      	orrs	r2, r1
 800a74e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a750:	e004      	b.n	800a75c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800a752:	2317      	movs	r3, #23
 800a754:	18fb      	adds	r3, r7, r3
 800a756:	2201      	movs	r2, #1
 800a758:	701a      	strb	r2, [r3, #0]
      break;
 800a75a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	223c      	movs	r2, #60	; 0x3c
 800a760:	2100      	movs	r1, #0
 800a762:	5499      	strb	r1, [r3, r2]

  return status;
 800a764:	2317      	movs	r3, #23
 800a766:	18fb      	adds	r3, r7, r3
 800a768:	781b      	ldrb	r3, [r3, #0]
}
 800a76a:	0018      	movs	r0, r3
 800a76c:	46bd      	mov	sp, r7
 800a76e:	b006      	add	sp, #24
 800a770:	bd80      	pop	{r7, pc}
 800a772:	46c0      	nop			; (mov r8, r8)
 800a774:	0801602c 	.word	0x0801602c
 800a778:	fffffbff 	.word	0xfffffbff

0800a77c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b084      	sub	sp, #16
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a786:	230f      	movs	r3, #15
 800a788:	18fb      	adds	r3, r7, r3
 800a78a:	2200      	movs	r2, #0
 800a78c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	223c      	movs	r2, #60	; 0x3c
 800a792:	5c9b      	ldrb	r3, [r3, r2]
 800a794:	2b01      	cmp	r3, #1
 800a796:	d101      	bne.n	800a79c <HAL_TIM_ConfigClockSource+0x20>
 800a798:	2302      	movs	r3, #2
 800a79a:	e0bc      	b.n	800a916 <HAL_TIM_ConfigClockSource+0x19a>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	223c      	movs	r2, #60	; 0x3c
 800a7a0:	2101      	movs	r1, #1
 800a7a2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	223d      	movs	r2, #61	; 0x3d
 800a7a8:	2102      	movs	r1, #2
 800a7aa:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	689b      	ldr	r3, [r3, #8]
 800a7b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	4a5a      	ldr	r2, [pc, #360]	; (800a920 <HAL_TIM_ConfigClockSource+0x1a4>)
 800a7b8:	4013      	ands	r3, r2
 800a7ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	4a59      	ldr	r2, [pc, #356]	; (800a924 <HAL_TIM_ConfigClockSource+0x1a8>)
 800a7c0:	4013      	ands	r3, r2
 800a7c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	68ba      	ldr	r2, [r7, #8]
 800a7ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	2280      	movs	r2, #128	; 0x80
 800a7d2:	0192      	lsls	r2, r2, #6
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d040      	beq.n	800a85a <HAL_TIM_ConfigClockSource+0xde>
 800a7d8:	2280      	movs	r2, #128	; 0x80
 800a7da:	0192      	lsls	r2, r2, #6
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d900      	bls.n	800a7e2 <HAL_TIM_ConfigClockSource+0x66>
 800a7e0:	e088      	b.n	800a8f4 <HAL_TIM_ConfigClockSource+0x178>
 800a7e2:	2280      	movs	r2, #128	; 0x80
 800a7e4:	0152      	lsls	r2, r2, #5
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d100      	bne.n	800a7ec <HAL_TIM_ConfigClockSource+0x70>
 800a7ea:	e088      	b.n	800a8fe <HAL_TIM_ConfigClockSource+0x182>
 800a7ec:	2280      	movs	r2, #128	; 0x80
 800a7ee:	0152      	lsls	r2, r2, #5
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	d900      	bls.n	800a7f6 <HAL_TIM_ConfigClockSource+0x7a>
 800a7f4:	e07e      	b.n	800a8f4 <HAL_TIM_ConfigClockSource+0x178>
 800a7f6:	2b70      	cmp	r3, #112	; 0x70
 800a7f8:	d018      	beq.n	800a82c <HAL_TIM_ConfigClockSource+0xb0>
 800a7fa:	d900      	bls.n	800a7fe <HAL_TIM_ConfigClockSource+0x82>
 800a7fc:	e07a      	b.n	800a8f4 <HAL_TIM_ConfigClockSource+0x178>
 800a7fe:	2b60      	cmp	r3, #96	; 0x60
 800a800:	d04f      	beq.n	800a8a2 <HAL_TIM_ConfigClockSource+0x126>
 800a802:	d900      	bls.n	800a806 <HAL_TIM_ConfigClockSource+0x8a>
 800a804:	e076      	b.n	800a8f4 <HAL_TIM_ConfigClockSource+0x178>
 800a806:	2b50      	cmp	r3, #80	; 0x50
 800a808:	d03b      	beq.n	800a882 <HAL_TIM_ConfigClockSource+0x106>
 800a80a:	d900      	bls.n	800a80e <HAL_TIM_ConfigClockSource+0x92>
 800a80c:	e072      	b.n	800a8f4 <HAL_TIM_ConfigClockSource+0x178>
 800a80e:	2b40      	cmp	r3, #64	; 0x40
 800a810:	d057      	beq.n	800a8c2 <HAL_TIM_ConfigClockSource+0x146>
 800a812:	d900      	bls.n	800a816 <HAL_TIM_ConfigClockSource+0x9a>
 800a814:	e06e      	b.n	800a8f4 <HAL_TIM_ConfigClockSource+0x178>
 800a816:	2b30      	cmp	r3, #48	; 0x30
 800a818:	d063      	beq.n	800a8e2 <HAL_TIM_ConfigClockSource+0x166>
 800a81a:	d86b      	bhi.n	800a8f4 <HAL_TIM_ConfigClockSource+0x178>
 800a81c:	2b20      	cmp	r3, #32
 800a81e:	d060      	beq.n	800a8e2 <HAL_TIM_ConfigClockSource+0x166>
 800a820:	d868      	bhi.n	800a8f4 <HAL_TIM_ConfigClockSource+0x178>
 800a822:	2b00      	cmp	r3, #0
 800a824:	d05d      	beq.n	800a8e2 <HAL_TIM_ConfigClockSource+0x166>
 800a826:	2b10      	cmp	r3, #16
 800a828:	d05b      	beq.n	800a8e2 <HAL_TIM_ConfigClockSource+0x166>
 800a82a:	e063      	b.n	800a8f4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6818      	ldr	r0, [r3, #0]
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	6899      	ldr	r1, [r3, #8]
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	685a      	ldr	r2, [r3, #4]
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	68db      	ldr	r3, [r3, #12]
 800a83c:	f000 fc34 	bl	800b0a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	689b      	ldr	r3, [r3, #8]
 800a846:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	2277      	movs	r2, #119	; 0x77
 800a84c:	4313      	orrs	r3, r2
 800a84e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	68ba      	ldr	r2, [r7, #8]
 800a856:	609a      	str	r2, [r3, #8]
      break;
 800a858:	e052      	b.n	800a900 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6818      	ldr	r0, [r3, #0]
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	6899      	ldr	r1, [r3, #8]
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	685a      	ldr	r2, [r3, #4]
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	68db      	ldr	r3, [r3, #12]
 800a86a:	f000 fc1d 	bl	800b0a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	689a      	ldr	r2, [r3, #8]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	2180      	movs	r1, #128	; 0x80
 800a87a:	01c9      	lsls	r1, r1, #7
 800a87c:	430a      	orrs	r2, r1
 800a87e:	609a      	str	r2, [r3, #8]
      break;
 800a880:	e03e      	b.n	800a900 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6818      	ldr	r0, [r3, #0]
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	6859      	ldr	r1, [r3, #4]
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	68db      	ldr	r3, [r3, #12]
 800a88e:	001a      	movs	r2, r3
 800a890:	f000 fb8e 	bl	800afb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	2150      	movs	r1, #80	; 0x50
 800a89a:	0018      	movs	r0, r3
 800a89c:	f000 fbe8 	bl	800b070 <TIM_ITRx_SetConfig>
      break;
 800a8a0:	e02e      	b.n	800a900 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6818      	ldr	r0, [r3, #0]
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	6859      	ldr	r1, [r3, #4]
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	68db      	ldr	r3, [r3, #12]
 800a8ae:	001a      	movs	r2, r3
 800a8b0:	f000 fbac 	bl	800b00c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	2160      	movs	r1, #96	; 0x60
 800a8ba:	0018      	movs	r0, r3
 800a8bc:	f000 fbd8 	bl	800b070 <TIM_ITRx_SetConfig>
      break;
 800a8c0:	e01e      	b.n	800a900 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6818      	ldr	r0, [r3, #0]
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	6859      	ldr	r1, [r3, #4]
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	68db      	ldr	r3, [r3, #12]
 800a8ce:	001a      	movs	r2, r3
 800a8d0:	f000 fb6e 	bl	800afb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	2140      	movs	r1, #64	; 0x40
 800a8da:	0018      	movs	r0, r3
 800a8dc:	f000 fbc8 	bl	800b070 <TIM_ITRx_SetConfig>
      break;
 800a8e0:	e00e      	b.n	800a900 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681a      	ldr	r2, [r3, #0]
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	0019      	movs	r1, r3
 800a8ec:	0010      	movs	r0, r2
 800a8ee:	f000 fbbf 	bl	800b070 <TIM_ITRx_SetConfig>
      break;
 800a8f2:	e005      	b.n	800a900 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800a8f4:	230f      	movs	r3, #15
 800a8f6:	18fb      	adds	r3, r7, r3
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	701a      	strb	r2, [r3, #0]
      break;
 800a8fc:	e000      	b.n	800a900 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800a8fe:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	223d      	movs	r2, #61	; 0x3d
 800a904:	2101      	movs	r1, #1
 800a906:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	223c      	movs	r2, #60	; 0x3c
 800a90c:	2100      	movs	r1, #0
 800a90e:	5499      	strb	r1, [r3, r2]

  return status;
 800a910:	230f      	movs	r3, #15
 800a912:	18fb      	adds	r3, r7, r3
 800a914:	781b      	ldrb	r3, [r3, #0]
}
 800a916:	0018      	movs	r0, r3
 800a918:	46bd      	mov	sp, r7
 800a91a:	b004      	add	sp, #16
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	46c0      	nop			; (mov r8, r8)
 800a920:	ffceff88 	.word	0xffceff88
 800a924:	ffff00ff 	.word	0xffff00ff

0800a928 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b084      	sub	sp, #16
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	4a34      	ldr	r2, [pc, #208]	; (800aa0c <TIM_Base_SetConfig+0xe4>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d008      	beq.n	800a952 <TIM_Base_SetConfig+0x2a>
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	2380      	movs	r3, #128	; 0x80
 800a944:	05db      	lsls	r3, r3, #23
 800a946:	429a      	cmp	r2, r3
 800a948:	d003      	beq.n	800a952 <TIM_Base_SetConfig+0x2a>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	4a30      	ldr	r2, [pc, #192]	; (800aa10 <TIM_Base_SetConfig+0xe8>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	d108      	bne.n	800a964 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	2270      	movs	r2, #112	; 0x70
 800a956:	4393      	bics	r3, r2
 800a958:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	685b      	ldr	r3, [r3, #4]
 800a95e:	68fa      	ldr	r2, [r7, #12]
 800a960:	4313      	orrs	r3, r2
 800a962:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	4a29      	ldr	r2, [pc, #164]	; (800aa0c <TIM_Base_SetConfig+0xe4>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d018      	beq.n	800a99e <TIM_Base_SetConfig+0x76>
 800a96c:	687a      	ldr	r2, [r7, #4]
 800a96e:	2380      	movs	r3, #128	; 0x80
 800a970:	05db      	lsls	r3, r3, #23
 800a972:	429a      	cmp	r2, r3
 800a974:	d013      	beq.n	800a99e <TIM_Base_SetConfig+0x76>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	4a25      	ldr	r2, [pc, #148]	; (800aa10 <TIM_Base_SetConfig+0xe8>)
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d00f      	beq.n	800a99e <TIM_Base_SetConfig+0x76>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	4a24      	ldr	r2, [pc, #144]	; (800aa14 <TIM_Base_SetConfig+0xec>)
 800a982:	4293      	cmp	r3, r2
 800a984:	d00b      	beq.n	800a99e <TIM_Base_SetConfig+0x76>
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	4a23      	ldr	r2, [pc, #140]	; (800aa18 <TIM_Base_SetConfig+0xf0>)
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d007      	beq.n	800a99e <TIM_Base_SetConfig+0x76>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	4a22      	ldr	r2, [pc, #136]	; (800aa1c <TIM_Base_SetConfig+0xf4>)
 800a992:	4293      	cmp	r3, r2
 800a994:	d003      	beq.n	800a99e <TIM_Base_SetConfig+0x76>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	4a21      	ldr	r2, [pc, #132]	; (800aa20 <TIM_Base_SetConfig+0xf8>)
 800a99a:	4293      	cmp	r3, r2
 800a99c:	d108      	bne.n	800a9b0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	4a20      	ldr	r2, [pc, #128]	; (800aa24 <TIM_Base_SetConfig+0xfc>)
 800a9a2:	4013      	ands	r3, r2
 800a9a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	68db      	ldr	r3, [r3, #12]
 800a9aa:	68fa      	ldr	r2, [r7, #12]
 800a9ac:	4313      	orrs	r3, r2
 800a9ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	2280      	movs	r2, #128	; 0x80
 800a9b4:	4393      	bics	r3, r2
 800a9b6:	001a      	movs	r2, r3
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	695b      	ldr	r3, [r3, #20]
 800a9bc:	4313      	orrs	r3, r2
 800a9be:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	68fa      	ldr	r2, [r7, #12]
 800a9c4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	689a      	ldr	r2, [r3, #8]
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	681a      	ldr	r2, [r3, #0]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	4a0c      	ldr	r2, [pc, #48]	; (800aa0c <TIM_Base_SetConfig+0xe4>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	d00b      	beq.n	800a9f6 <TIM_Base_SetConfig+0xce>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	4a0d      	ldr	r2, [pc, #52]	; (800aa18 <TIM_Base_SetConfig+0xf0>)
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d007      	beq.n	800a9f6 <TIM_Base_SetConfig+0xce>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	4a0c      	ldr	r2, [pc, #48]	; (800aa1c <TIM_Base_SetConfig+0xf4>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d003      	beq.n	800a9f6 <TIM_Base_SetConfig+0xce>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	4a0b      	ldr	r2, [pc, #44]	; (800aa20 <TIM_Base_SetConfig+0xf8>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d103      	bne.n	800a9fe <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	691a      	ldr	r2, [r3, #16]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2201      	movs	r2, #1
 800aa02:	615a      	str	r2, [r3, #20]
}
 800aa04:	46c0      	nop			; (mov r8, r8)
 800aa06:	46bd      	mov	sp, r7
 800aa08:	b004      	add	sp, #16
 800aa0a:	bd80      	pop	{r7, pc}
 800aa0c:	40012c00 	.word	0x40012c00
 800aa10:	40000400 	.word	0x40000400
 800aa14:	40002000 	.word	0x40002000
 800aa18:	40014000 	.word	0x40014000
 800aa1c:	40014400 	.word	0x40014400
 800aa20:	40014800 	.word	0x40014800
 800aa24:	fffffcff 	.word	0xfffffcff

0800aa28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b086      	sub	sp, #24
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6a1b      	ldr	r3, [r3, #32]
 800aa36:	2201      	movs	r2, #1
 800aa38:	4393      	bics	r3, r2
 800aa3a:	001a      	movs	r2, r3
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6a1b      	ldr	r3, [r3, #32]
 800aa44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	685b      	ldr	r3, [r3, #4]
 800aa4a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	699b      	ldr	r3, [r3, #24]
 800aa50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	4a32      	ldr	r2, [pc, #200]	; (800ab20 <TIM_OC1_SetConfig+0xf8>)
 800aa56:	4013      	ands	r3, r2
 800aa58:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	2203      	movs	r2, #3
 800aa5e:	4393      	bics	r3, r2
 800aa60:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	68fa      	ldr	r2, [r7, #12]
 800aa68:	4313      	orrs	r3, r2
 800aa6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	2202      	movs	r2, #2
 800aa70:	4393      	bics	r3, r2
 800aa72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	689b      	ldr	r3, [r3, #8]
 800aa78:	697a      	ldr	r2, [r7, #20]
 800aa7a:	4313      	orrs	r3, r2
 800aa7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	4a28      	ldr	r2, [pc, #160]	; (800ab24 <TIM_OC1_SetConfig+0xfc>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d00b      	beq.n	800aa9e <TIM_OC1_SetConfig+0x76>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	4a27      	ldr	r2, [pc, #156]	; (800ab28 <TIM_OC1_SetConfig+0x100>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d007      	beq.n	800aa9e <TIM_OC1_SetConfig+0x76>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	4a26      	ldr	r2, [pc, #152]	; (800ab2c <TIM_OC1_SetConfig+0x104>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d003      	beq.n	800aa9e <TIM_OC1_SetConfig+0x76>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	4a25      	ldr	r2, [pc, #148]	; (800ab30 <TIM_OC1_SetConfig+0x108>)
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d10c      	bne.n	800aab8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	2208      	movs	r2, #8
 800aaa2:	4393      	bics	r3, r2
 800aaa4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	68db      	ldr	r3, [r3, #12]
 800aaaa:	697a      	ldr	r2, [r7, #20]
 800aaac:	4313      	orrs	r3, r2
 800aaae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	2204      	movs	r2, #4
 800aab4:	4393      	bics	r3, r2
 800aab6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	4a1a      	ldr	r2, [pc, #104]	; (800ab24 <TIM_OC1_SetConfig+0xfc>)
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d00b      	beq.n	800aad8 <TIM_OC1_SetConfig+0xb0>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	4a19      	ldr	r2, [pc, #100]	; (800ab28 <TIM_OC1_SetConfig+0x100>)
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d007      	beq.n	800aad8 <TIM_OC1_SetConfig+0xb0>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	4a18      	ldr	r2, [pc, #96]	; (800ab2c <TIM_OC1_SetConfig+0x104>)
 800aacc:	4293      	cmp	r3, r2
 800aace:	d003      	beq.n	800aad8 <TIM_OC1_SetConfig+0xb0>
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	4a17      	ldr	r2, [pc, #92]	; (800ab30 <TIM_OC1_SetConfig+0x108>)
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d111      	bne.n	800aafc <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	4a16      	ldr	r2, [pc, #88]	; (800ab34 <TIM_OC1_SetConfig+0x10c>)
 800aadc:	4013      	ands	r3, r2
 800aade:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	4a15      	ldr	r2, [pc, #84]	; (800ab38 <TIM_OC1_SetConfig+0x110>)
 800aae4:	4013      	ands	r3, r2
 800aae6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	695b      	ldr	r3, [r3, #20]
 800aaec:	693a      	ldr	r2, [r7, #16]
 800aaee:	4313      	orrs	r3, r2
 800aaf0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	699b      	ldr	r3, [r3, #24]
 800aaf6:	693a      	ldr	r2, [r7, #16]
 800aaf8:	4313      	orrs	r3, r2
 800aafa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	693a      	ldr	r2, [r7, #16]
 800ab00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	68fa      	ldr	r2, [r7, #12]
 800ab06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	685a      	ldr	r2, [r3, #4]
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	697a      	ldr	r2, [r7, #20]
 800ab14:	621a      	str	r2, [r3, #32]
}
 800ab16:	46c0      	nop			; (mov r8, r8)
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	b006      	add	sp, #24
 800ab1c:	bd80      	pop	{r7, pc}
 800ab1e:	46c0      	nop			; (mov r8, r8)
 800ab20:	fffeff8f 	.word	0xfffeff8f
 800ab24:	40012c00 	.word	0x40012c00
 800ab28:	40014000 	.word	0x40014000
 800ab2c:	40014400 	.word	0x40014400
 800ab30:	40014800 	.word	0x40014800
 800ab34:	fffffeff 	.word	0xfffffeff
 800ab38:	fffffdff 	.word	0xfffffdff

0800ab3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b086      	sub	sp, #24
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6a1b      	ldr	r3, [r3, #32]
 800ab4a:	2210      	movs	r2, #16
 800ab4c:	4393      	bics	r3, r2
 800ab4e:	001a      	movs	r2, r3
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6a1b      	ldr	r3, [r3, #32]
 800ab58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	685b      	ldr	r3, [r3, #4]
 800ab5e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	699b      	ldr	r3, [r3, #24]
 800ab64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	4a2e      	ldr	r2, [pc, #184]	; (800ac24 <TIM_OC2_SetConfig+0xe8>)
 800ab6a:	4013      	ands	r3, r2
 800ab6c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	4a2d      	ldr	r2, [pc, #180]	; (800ac28 <TIM_OC2_SetConfig+0xec>)
 800ab72:	4013      	ands	r3, r2
 800ab74:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	021b      	lsls	r3, r3, #8
 800ab7c:	68fa      	ldr	r2, [r7, #12]
 800ab7e:	4313      	orrs	r3, r2
 800ab80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	2220      	movs	r2, #32
 800ab86:	4393      	bics	r3, r2
 800ab88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	689b      	ldr	r3, [r3, #8]
 800ab8e:	011b      	lsls	r3, r3, #4
 800ab90:	697a      	ldr	r2, [r7, #20]
 800ab92:	4313      	orrs	r3, r2
 800ab94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	4a24      	ldr	r2, [pc, #144]	; (800ac2c <TIM_OC2_SetConfig+0xf0>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d10d      	bne.n	800abba <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	2280      	movs	r2, #128	; 0x80
 800aba2:	4393      	bics	r3, r2
 800aba4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	68db      	ldr	r3, [r3, #12]
 800abaa:	011b      	lsls	r3, r3, #4
 800abac:	697a      	ldr	r2, [r7, #20]
 800abae:	4313      	orrs	r3, r2
 800abb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	2240      	movs	r2, #64	; 0x40
 800abb6:	4393      	bics	r3, r2
 800abb8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	4a1b      	ldr	r2, [pc, #108]	; (800ac2c <TIM_OC2_SetConfig+0xf0>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d00b      	beq.n	800abda <TIM_OC2_SetConfig+0x9e>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	4a1a      	ldr	r2, [pc, #104]	; (800ac30 <TIM_OC2_SetConfig+0xf4>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d007      	beq.n	800abda <TIM_OC2_SetConfig+0x9e>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	4a19      	ldr	r2, [pc, #100]	; (800ac34 <TIM_OC2_SetConfig+0xf8>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d003      	beq.n	800abda <TIM_OC2_SetConfig+0x9e>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	4a18      	ldr	r2, [pc, #96]	; (800ac38 <TIM_OC2_SetConfig+0xfc>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d113      	bne.n	800ac02 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	4a17      	ldr	r2, [pc, #92]	; (800ac3c <TIM_OC2_SetConfig+0x100>)
 800abde:	4013      	ands	r3, r2
 800abe0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	4a16      	ldr	r2, [pc, #88]	; (800ac40 <TIM_OC2_SetConfig+0x104>)
 800abe6:	4013      	ands	r3, r2
 800abe8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	695b      	ldr	r3, [r3, #20]
 800abee:	009b      	lsls	r3, r3, #2
 800abf0:	693a      	ldr	r2, [r7, #16]
 800abf2:	4313      	orrs	r3, r2
 800abf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	699b      	ldr	r3, [r3, #24]
 800abfa:	009b      	lsls	r3, r3, #2
 800abfc:	693a      	ldr	r2, [r7, #16]
 800abfe:	4313      	orrs	r3, r2
 800ac00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	693a      	ldr	r2, [r7, #16]
 800ac06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	68fa      	ldr	r2, [r7, #12]
 800ac0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	685a      	ldr	r2, [r3, #4]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	697a      	ldr	r2, [r7, #20]
 800ac1a:	621a      	str	r2, [r3, #32]
}
 800ac1c:	46c0      	nop			; (mov r8, r8)
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	b006      	add	sp, #24
 800ac22:	bd80      	pop	{r7, pc}
 800ac24:	feff8fff 	.word	0xfeff8fff
 800ac28:	fffffcff 	.word	0xfffffcff
 800ac2c:	40012c00 	.word	0x40012c00
 800ac30:	40014000 	.word	0x40014000
 800ac34:	40014400 	.word	0x40014400
 800ac38:	40014800 	.word	0x40014800
 800ac3c:	fffffbff 	.word	0xfffffbff
 800ac40:	fffff7ff 	.word	0xfffff7ff

0800ac44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b086      	sub	sp, #24
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
 800ac4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6a1b      	ldr	r3, [r3, #32]
 800ac52:	4a35      	ldr	r2, [pc, #212]	; (800ad28 <TIM_OC3_SetConfig+0xe4>)
 800ac54:	401a      	ands	r2, r3
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6a1b      	ldr	r3, [r3, #32]
 800ac5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	685b      	ldr	r3, [r3, #4]
 800ac64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	69db      	ldr	r3, [r3, #28]
 800ac6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	4a2f      	ldr	r2, [pc, #188]	; (800ad2c <TIM_OC3_SetConfig+0xe8>)
 800ac70:	4013      	ands	r3, r2
 800ac72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	2203      	movs	r2, #3
 800ac78:	4393      	bics	r3, r2
 800ac7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	68fa      	ldr	r2, [r7, #12]
 800ac82:	4313      	orrs	r3, r2
 800ac84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	4a29      	ldr	r2, [pc, #164]	; (800ad30 <TIM_OC3_SetConfig+0xec>)
 800ac8a:	4013      	ands	r3, r2
 800ac8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	689b      	ldr	r3, [r3, #8]
 800ac92:	021b      	lsls	r3, r3, #8
 800ac94:	697a      	ldr	r2, [r7, #20]
 800ac96:	4313      	orrs	r3, r2
 800ac98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	4a25      	ldr	r2, [pc, #148]	; (800ad34 <TIM_OC3_SetConfig+0xf0>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d10d      	bne.n	800acbe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	4a24      	ldr	r2, [pc, #144]	; (800ad38 <TIM_OC3_SetConfig+0xf4>)
 800aca6:	4013      	ands	r3, r2
 800aca8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	68db      	ldr	r3, [r3, #12]
 800acae:	021b      	lsls	r3, r3, #8
 800acb0:	697a      	ldr	r2, [r7, #20]
 800acb2:	4313      	orrs	r3, r2
 800acb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	4a20      	ldr	r2, [pc, #128]	; (800ad3c <TIM_OC3_SetConfig+0xf8>)
 800acba:	4013      	ands	r3, r2
 800acbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	4a1c      	ldr	r2, [pc, #112]	; (800ad34 <TIM_OC3_SetConfig+0xf0>)
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d00b      	beq.n	800acde <TIM_OC3_SetConfig+0x9a>
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	4a1d      	ldr	r2, [pc, #116]	; (800ad40 <TIM_OC3_SetConfig+0xfc>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d007      	beq.n	800acde <TIM_OC3_SetConfig+0x9a>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	4a1c      	ldr	r2, [pc, #112]	; (800ad44 <TIM_OC3_SetConfig+0x100>)
 800acd2:	4293      	cmp	r3, r2
 800acd4:	d003      	beq.n	800acde <TIM_OC3_SetConfig+0x9a>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	4a1b      	ldr	r2, [pc, #108]	; (800ad48 <TIM_OC3_SetConfig+0x104>)
 800acda:	4293      	cmp	r3, r2
 800acdc:	d113      	bne.n	800ad06 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	4a1a      	ldr	r2, [pc, #104]	; (800ad4c <TIM_OC3_SetConfig+0x108>)
 800ace2:	4013      	ands	r3, r2
 800ace4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	4a19      	ldr	r2, [pc, #100]	; (800ad50 <TIM_OC3_SetConfig+0x10c>)
 800acea:	4013      	ands	r3, r2
 800acec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	695b      	ldr	r3, [r3, #20]
 800acf2:	011b      	lsls	r3, r3, #4
 800acf4:	693a      	ldr	r2, [r7, #16]
 800acf6:	4313      	orrs	r3, r2
 800acf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	699b      	ldr	r3, [r3, #24]
 800acfe:	011b      	lsls	r3, r3, #4
 800ad00:	693a      	ldr	r2, [r7, #16]
 800ad02:	4313      	orrs	r3, r2
 800ad04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	693a      	ldr	r2, [r7, #16]
 800ad0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	68fa      	ldr	r2, [r7, #12]
 800ad10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	685a      	ldr	r2, [r3, #4]
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	697a      	ldr	r2, [r7, #20]
 800ad1e:	621a      	str	r2, [r3, #32]
}
 800ad20:	46c0      	nop			; (mov r8, r8)
 800ad22:	46bd      	mov	sp, r7
 800ad24:	b006      	add	sp, #24
 800ad26:	bd80      	pop	{r7, pc}
 800ad28:	fffffeff 	.word	0xfffffeff
 800ad2c:	fffeff8f 	.word	0xfffeff8f
 800ad30:	fffffdff 	.word	0xfffffdff
 800ad34:	40012c00 	.word	0x40012c00
 800ad38:	fffff7ff 	.word	0xfffff7ff
 800ad3c:	fffffbff 	.word	0xfffffbff
 800ad40:	40014000 	.word	0x40014000
 800ad44:	40014400 	.word	0x40014400
 800ad48:	40014800 	.word	0x40014800
 800ad4c:	ffffefff 	.word	0xffffefff
 800ad50:	ffffdfff 	.word	0xffffdfff

0800ad54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b086      	sub	sp, #24
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6a1b      	ldr	r3, [r3, #32]
 800ad62:	4a28      	ldr	r2, [pc, #160]	; (800ae04 <TIM_OC4_SetConfig+0xb0>)
 800ad64:	401a      	ands	r2, r3
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6a1b      	ldr	r3, [r3, #32]
 800ad6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	685b      	ldr	r3, [r3, #4]
 800ad74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	69db      	ldr	r3, [r3, #28]
 800ad7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	4a22      	ldr	r2, [pc, #136]	; (800ae08 <TIM_OC4_SetConfig+0xb4>)
 800ad80:	4013      	ands	r3, r2
 800ad82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	4a21      	ldr	r2, [pc, #132]	; (800ae0c <TIM_OC4_SetConfig+0xb8>)
 800ad88:	4013      	ands	r3, r2
 800ad8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	021b      	lsls	r3, r3, #8
 800ad92:	68fa      	ldr	r2, [r7, #12]
 800ad94:	4313      	orrs	r3, r2
 800ad96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	4a1d      	ldr	r2, [pc, #116]	; (800ae10 <TIM_OC4_SetConfig+0xbc>)
 800ad9c:	4013      	ands	r3, r2
 800ad9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	689b      	ldr	r3, [r3, #8]
 800ada4:	031b      	lsls	r3, r3, #12
 800ada6:	693a      	ldr	r2, [r7, #16]
 800ada8:	4313      	orrs	r3, r2
 800adaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	4a19      	ldr	r2, [pc, #100]	; (800ae14 <TIM_OC4_SetConfig+0xc0>)
 800adb0:	4293      	cmp	r3, r2
 800adb2:	d00b      	beq.n	800adcc <TIM_OC4_SetConfig+0x78>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	4a18      	ldr	r2, [pc, #96]	; (800ae18 <TIM_OC4_SetConfig+0xc4>)
 800adb8:	4293      	cmp	r3, r2
 800adba:	d007      	beq.n	800adcc <TIM_OC4_SetConfig+0x78>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	4a17      	ldr	r2, [pc, #92]	; (800ae1c <TIM_OC4_SetConfig+0xc8>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d003      	beq.n	800adcc <TIM_OC4_SetConfig+0x78>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	4a16      	ldr	r2, [pc, #88]	; (800ae20 <TIM_OC4_SetConfig+0xcc>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	d109      	bne.n	800ade0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	4a15      	ldr	r2, [pc, #84]	; (800ae24 <TIM_OC4_SetConfig+0xd0>)
 800add0:	4013      	ands	r3, r2
 800add2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	695b      	ldr	r3, [r3, #20]
 800add8:	019b      	lsls	r3, r3, #6
 800adda:	697a      	ldr	r2, [r7, #20]
 800addc:	4313      	orrs	r3, r2
 800adde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	697a      	ldr	r2, [r7, #20]
 800ade4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	68fa      	ldr	r2, [r7, #12]
 800adea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	685a      	ldr	r2, [r3, #4]
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	693a      	ldr	r2, [r7, #16]
 800adf8:	621a      	str	r2, [r3, #32]
}
 800adfa:	46c0      	nop			; (mov r8, r8)
 800adfc:	46bd      	mov	sp, r7
 800adfe:	b006      	add	sp, #24
 800ae00:	bd80      	pop	{r7, pc}
 800ae02:	46c0      	nop			; (mov r8, r8)
 800ae04:	ffffefff 	.word	0xffffefff
 800ae08:	feff8fff 	.word	0xfeff8fff
 800ae0c:	fffffcff 	.word	0xfffffcff
 800ae10:	ffffdfff 	.word	0xffffdfff
 800ae14:	40012c00 	.word	0x40012c00
 800ae18:	40014000 	.word	0x40014000
 800ae1c:	40014400 	.word	0x40014400
 800ae20:	40014800 	.word	0x40014800
 800ae24:	ffffbfff 	.word	0xffffbfff

0800ae28 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b086      	sub	sp, #24
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
 800ae30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6a1b      	ldr	r3, [r3, #32]
 800ae36:	4a25      	ldr	r2, [pc, #148]	; (800aecc <TIM_OC5_SetConfig+0xa4>)
 800ae38:	401a      	ands	r2, r3
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6a1b      	ldr	r3, [r3, #32]
 800ae42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	4a1f      	ldr	r2, [pc, #124]	; (800aed0 <TIM_OC5_SetConfig+0xa8>)
 800ae54:	4013      	ands	r3, r2
 800ae56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	68fa      	ldr	r2, [r7, #12]
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	4a1b      	ldr	r2, [pc, #108]	; (800aed4 <TIM_OC5_SetConfig+0xac>)
 800ae66:	4013      	ands	r3, r2
 800ae68:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	689b      	ldr	r3, [r3, #8]
 800ae6e:	041b      	lsls	r3, r3, #16
 800ae70:	693a      	ldr	r2, [r7, #16]
 800ae72:	4313      	orrs	r3, r2
 800ae74:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	4a17      	ldr	r2, [pc, #92]	; (800aed8 <TIM_OC5_SetConfig+0xb0>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d00b      	beq.n	800ae96 <TIM_OC5_SetConfig+0x6e>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	4a16      	ldr	r2, [pc, #88]	; (800aedc <TIM_OC5_SetConfig+0xb4>)
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d007      	beq.n	800ae96 <TIM_OC5_SetConfig+0x6e>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	4a15      	ldr	r2, [pc, #84]	; (800aee0 <TIM_OC5_SetConfig+0xb8>)
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d003      	beq.n	800ae96 <TIM_OC5_SetConfig+0x6e>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	4a14      	ldr	r2, [pc, #80]	; (800aee4 <TIM_OC5_SetConfig+0xbc>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d109      	bne.n	800aeaa <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	4a0c      	ldr	r2, [pc, #48]	; (800aecc <TIM_OC5_SetConfig+0xa4>)
 800ae9a:	4013      	ands	r3, r2
 800ae9c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	695b      	ldr	r3, [r3, #20]
 800aea2:	021b      	lsls	r3, r3, #8
 800aea4:	697a      	ldr	r2, [r7, #20]
 800aea6:	4313      	orrs	r3, r2
 800aea8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	697a      	ldr	r2, [r7, #20]
 800aeae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	68fa      	ldr	r2, [r7, #12]
 800aeb4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	685a      	ldr	r2, [r3, #4]
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	693a      	ldr	r2, [r7, #16]
 800aec2:	621a      	str	r2, [r3, #32]
}
 800aec4:	46c0      	nop			; (mov r8, r8)
 800aec6:	46bd      	mov	sp, r7
 800aec8:	b006      	add	sp, #24
 800aeca:	bd80      	pop	{r7, pc}
 800aecc:	fffeffff 	.word	0xfffeffff
 800aed0:	fffeff8f 	.word	0xfffeff8f
 800aed4:	fffdffff 	.word	0xfffdffff
 800aed8:	40012c00 	.word	0x40012c00
 800aedc:	40014000 	.word	0x40014000
 800aee0:	40014400 	.word	0x40014400
 800aee4:	40014800 	.word	0x40014800

0800aee8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b086      	sub	sp, #24
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6a1b      	ldr	r3, [r3, #32]
 800aef6:	4a26      	ldr	r2, [pc, #152]	; (800af90 <TIM_OC6_SetConfig+0xa8>)
 800aef8:	401a      	ands	r2, r3
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6a1b      	ldr	r3, [r3, #32]
 800af02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	685b      	ldr	r3, [r3, #4]
 800af08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	4a20      	ldr	r2, [pc, #128]	; (800af94 <TIM_OC6_SetConfig+0xac>)
 800af14:	4013      	ands	r3, r2
 800af16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	021b      	lsls	r3, r3, #8
 800af1e:	68fa      	ldr	r2, [r7, #12]
 800af20:	4313      	orrs	r3, r2
 800af22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	4a1c      	ldr	r2, [pc, #112]	; (800af98 <TIM_OC6_SetConfig+0xb0>)
 800af28:	4013      	ands	r3, r2
 800af2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	689b      	ldr	r3, [r3, #8]
 800af30:	051b      	lsls	r3, r3, #20
 800af32:	693a      	ldr	r2, [r7, #16]
 800af34:	4313      	orrs	r3, r2
 800af36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	4a18      	ldr	r2, [pc, #96]	; (800af9c <TIM_OC6_SetConfig+0xb4>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d00b      	beq.n	800af58 <TIM_OC6_SetConfig+0x70>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	4a17      	ldr	r2, [pc, #92]	; (800afa0 <TIM_OC6_SetConfig+0xb8>)
 800af44:	4293      	cmp	r3, r2
 800af46:	d007      	beq.n	800af58 <TIM_OC6_SetConfig+0x70>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	4a16      	ldr	r2, [pc, #88]	; (800afa4 <TIM_OC6_SetConfig+0xbc>)
 800af4c:	4293      	cmp	r3, r2
 800af4e:	d003      	beq.n	800af58 <TIM_OC6_SetConfig+0x70>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	4a15      	ldr	r2, [pc, #84]	; (800afa8 <TIM_OC6_SetConfig+0xc0>)
 800af54:	4293      	cmp	r3, r2
 800af56:	d109      	bne.n	800af6c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	4a14      	ldr	r2, [pc, #80]	; (800afac <TIM_OC6_SetConfig+0xc4>)
 800af5c:	4013      	ands	r3, r2
 800af5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	695b      	ldr	r3, [r3, #20]
 800af64:	029b      	lsls	r3, r3, #10
 800af66:	697a      	ldr	r2, [r7, #20]
 800af68:	4313      	orrs	r3, r2
 800af6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	697a      	ldr	r2, [r7, #20]
 800af70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	68fa      	ldr	r2, [r7, #12]
 800af76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	685a      	ldr	r2, [r3, #4]
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	693a      	ldr	r2, [r7, #16]
 800af84:	621a      	str	r2, [r3, #32]
}
 800af86:	46c0      	nop			; (mov r8, r8)
 800af88:	46bd      	mov	sp, r7
 800af8a:	b006      	add	sp, #24
 800af8c:	bd80      	pop	{r7, pc}
 800af8e:	46c0      	nop			; (mov r8, r8)
 800af90:	ffefffff 	.word	0xffefffff
 800af94:	feff8fff 	.word	0xfeff8fff
 800af98:	ffdfffff 	.word	0xffdfffff
 800af9c:	40012c00 	.word	0x40012c00
 800afa0:	40014000 	.word	0x40014000
 800afa4:	40014400 	.word	0x40014400
 800afa8:	40014800 	.word	0x40014800
 800afac:	fffbffff 	.word	0xfffbffff

0800afb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b086      	sub	sp, #24
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	60f8      	str	r0, [r7, #12]
 800afb8:	60b9      	str	r1, [r7, #8]
 800afba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	6a1b      	ldr	r3, [r3, #32]
 800afc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	6a1b      	ldr	r3, [r3, #32]
 800afc6:	2201      	movs	r2, #1
 800afc8:	4393      	bics	r3, r2
 800afca:	001a      	movs	r2, r3
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	699b      	ldr	r3, [r3, #24]
 800afd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	22f0      	movs	r2, #240	; 0xf0
 800afda:	4393      	bics	r3, r2
 800afdc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	011b      	lsls	r3, r3, #4
 800afe2:	693a      	ldr	r2, [r7, #16]
 800afe4:	4313      	orrs	r3, r2
 800afe6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	220a      	movs	r2, #10
 800afec:	4393      	bics	r3, r2
 800afee:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aff0:	697a      	ldr	r2, [r7, #20]
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	4313      	orrs	r3, r2
 800aff6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	693a      	ldr	r2, [r7, #16]
 800affc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	697a      	ldr	r2, [r7, #20]
 800b002:	621a      	str	r2, [r3, #32]
}
 800b004:	46c0      	nop			; (mov r8, r8)
 800b006:	46bd      	mov	sp, r7
 800b008:	b006      	add	sp, #24
 800b00a:	bd80      	pop	{r7, pc}

0800b00c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b086      	sub	sp, #24
 800b010:	af00      	add	r7, sp, #0
 800b012:	60f8      	str	r0, [r7, #12]
 800b014:	60b9      	str	r1, [r7, #8]
 800b016:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	6a1b      	ldr	r3, [r3, #32]
 800b01c:	2210      	movs	r2, #16
 800b01e:	4393      	bics	r3, r2
 800b020:	001a      	movs	r2, r3
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	699b      	ldr	r3, [r3, #24]
 800b02a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	6a1b      	ldr	r3, [r3, #32]
 800b030:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	4a0d      	ldr	r2, [pc, #52]	; (800b06c <TIM_TI2_ConfigInputStage+0x60>)
 800b036:	4013      	ands	r3, r2
 800b038:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	031b      	lsls	r3, r3, #12
 800b03e:	697a      	ldr	r2, [r7, #20]
 800b040:	4313      	orrs	r3, r2
 800b042:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	22a0      	movs	r2, #160	; 0xa0
 800b048:	4393      	bics	r3, r2
 800b04a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	011b      	lsls	r3, r3, #4
 800b050:	693a      	ldr	r2, [r7, #16]
 800b052:	4313      	orrs	r3, r2
 800b054:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	697a      	ldr	r2, [r7, #20]
 800b05a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	693a      	ldr	r2, [r7, #16]
 800b060:	621a      	str	r2, [r3, #32]
}
 800b062:	46c0      	nop			; (mov r8, r8)
 800b064:	46bd      	mov	sp, r7
 800b066:	b006      	add	sp, #24
 800b068:	bd80      	pop	{r7, pc}
 800b06a:	46c0      	nop			; (mov r8, r8)
 800b06c:	ffff0fff 	.word	0xffff0fff

0800b070 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b084      	sub	sp, #16
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
 800b078:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	689b      	ldr	r3, [r3, #8]
 800b07e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	4a08      	ldr	r2, [pc, #32]	; (800b0a4 <TIM_ITRx_SetConfig+0x34>)
 800b084:	4013      	ands	r3, r2
 800b086:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b088:	683a      	ldr	r2, [r7, #0]
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	4313      	orrs	r3, r2
 800b08e:	2207      	movs	r2, #7
 800b090:	4313      	orrs	r3, r2
 800b092:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	68fa      	ldr	r2, [r7, #12]
 800b098:	609a      	str	r2, [r3, #8]
}
 800b09a:	46c0      	nop			; (mov r8, r8)
 800b09c:	46bd      	mov	sp, r7
 800b09e:	b004      	add	sp, #16
 800b0a0:	bd80      	pop	{r7, pc}
 800b0a2:	46c0      	nop			; (mov r8, r8)
 800b0a4:	ffcfff8f 	.word	0xffcfff8f

0800b0a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b086      	sub	sp, #24
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	60f8      	str	r0, [r7, #12]
 800b0b0:	60b9      	str	r1, [r7, #8]
 800b0b2:	607a      	str	r2, [r7, #4]
 800b0b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	689b      	ldr	r3, [r3, #8]
 800b0ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	4a09      	ldr	r2, [pc, #36]	; (800b0e4 <TIM_ETR_SetConfig+0x3c>)
 800b0c0:	4013      	ands	r3, r2
 800b0c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	021a      	lsls	r2, r3, #8
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	431a      	orrs	r2, r3
 800b0cc:	68bb      	ldr	r3, [r7, #8]
 800b0ce:	4313      	orrs	r3, r2
 800b0d0:	697a      	ldr	r2, [r7, #20]
 800b0d2:	4313      	orrs	r3, r2
 800b0d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	697a      	ldr	r2, [r7, #20]
 800b0da:	609a      	str	r2, [r3, #8]
}
 800b0dc:	46c0      	nop			; (mov r8, r8)
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	b006      	add	sp, #24
 800b0e2:	bd80      	pop	{r7, pc}
 800b0e4:	ffff00ff 	.word	0xffff00ff

0800b0e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b086      	sub	sp, #24
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	60f8      	str	r0, [r7, #12]
 800b0f0:	60b9      	str	r1, [r7, #8]
 800b0f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	221f      	movs	r2, #31
 800b0f8:	4013      	ands	r3, r2
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	409a      	lsls	r2, r3
 800b0fe:	0013      	movs	r3, r2
 800b100:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	6a1b      	ldr	r3, [r3, #32]
 800b106:	697a      	ldr	r2, [r7, #20]
 800b108:	43d2      	mvns	r2, r2
 800b10a:	401a      	ands	r2, r3
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	6a1a      	ldr	r2, [r3, #32]
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	211f      	movs	r1, #31
 800b118:	400b      	ands	r3, r1
 800b11a:	6879      	ldr	r1, [r7, #4]
 800b11c:	4099      	lsls	r1, r3
 800b11e:	000b      	movs	r3, r1
 800b120:	431a      	orrs	r2, r3
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	621a      	str	r2, [r3, #32]
}
 800b126:	46c0      	nop			; (mov r8, r8)
 800b128:	46bd      	mov	sp, r7
 800b12a:	b006      	add	sp, #24
 800b12c:	bd80      	pop	{r7, pc}
	...

0800b130 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b084      	sub	sp, #16
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
 800b138:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	223c      	movs	r2, #60	; 0x3c
 800b13e:	5c9b      	ldrb	r3, [r3, r2]
 800b140:	2b01      	cmp	r3, #1
 800b142:	d101      	bne.n	800b148 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b144:	2302      	movs	r3, #2
 800b146:	e055      	b.n	800b1f4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	223c      	movs	r2, #60	; 0x3c
 800b14c:	2101      	movs	r1, #1
 800b14e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	223d      	movs	r2, #61	; 0x3d
 800b154:	2102      	movs	r1, #2
 800b156:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	689b      	ldr	r3, [r3, #8]
 800b166:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	4a23      	ldr	r2, [pc, #140]	; (800b1fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d108      	bne.n	800b184 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	4a22      	ldr	r2, [pc, #136]	; (800b200 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b176:	4013      	ands	r3, r2
 800b178:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	68fa      	ldr	r2, [r7, #12]
 800b180:	4313      	orrs	r3, r2
 800b182:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	2270      	movs	r2, #112	; 0x70
 800b188:	4393      	bics	r3, r2
 800b18a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	68fa      	ldr	r2, [r7, #12]
 800b192:	4313      	orrs	r3, r2
 800b194:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	68fa      	ldr	r2, [r7, #12]
 800b19c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	4a16      	ldr	r2, [pc, #88]	; (800b1fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b1a4:	4293      	cmp	r3, r2
 800b1a6:	d00f      	beq.n	800b1c8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681a      	ldr	r2, [r3, #0]
 800b1ac:	2380      	movs	r3, #128	; 0x80
 800b1ae:	05db      	lsls	r3, r3, #23
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	d009      	beq.n	800b1c8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	4a12      	ldr	r2, [pc, #72]	; (800b204 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d004      	beq.n	800b1c8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	4a11      	ldr	r2, [pc, #68]	; (800b208 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d10c      	bne.n	800b1e2 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	2280      	movs	r2, #128	; 0x80
 800b1cc:	4393      	bics	r3, r2
 800b1ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	689b      	ldr	r3, [r3, #8]
 800b1d4:	68ba      	ldr	r2, [r7, #8]
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	68ba      	ldr	r2, [r7, #8]
 800b1e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	223d      	movs	r2, #61	; 0x3d
 800b1e6:	2101      	movs	r1, #1
 800b1e8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	223c      	movs	r2, #60	; 0x3c
 800b1ee:	2100      	movs	r1, #0
 800b1f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b1f2:	2300      	movs	r3, #0
}
 800b1f4:	0018      	movs	r0, r3
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	b004      	add	sp, #16
 800b1fa:	bd80      	pop	{r7, pc}
 800b1fc:	40012c00 	.word	0x40012c00
 800b200:	ff0fffff 	.word	0xff0fffff
 800b204:	40000400 	.word	0x40000400
 800b208:	40014000 	.word	0x40014000

0800b20c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b084      	sub	sp, #16
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b216:	2300      	movs	r3, #0
 800b218:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	223c      	movs	r2, #60	; 0x3c
 800b21e:	5c9b      	ldrb	r3, [r3, r2]
 800b220:	2b01      	cmp	r3, #1
 800b222:	d101      	bne.n	800b228 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b224:	2302      	movs	r3, #2
 800b226:	e079      	b.n	800b31c <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	223c      	movs	r2, #60	; 0x3c
 800b22c:	2101      	movs	r1, #1
 800b22e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	22ff      	movs	r2, #255	; 0xff
 800b234:	4393      	bics	r3, r2
 800b236:	001a      	movs	r2, r3
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	68db      	ldr	r3, [r3, #12]
 800b23c:	4313      	orrs	r3, r2
 800b23e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	4a38      	ldr	r2, [pc, #224]	; (800b324 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800b244:	401a      	ands	r2, r3
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	689b      	ldr	r3, [r3, #8]
 800b24a:	4313      	orrs	r3, r2
 800b24c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	4a35      	ldr	r2, [pc, #212]	; (800b328 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b252:	401a      	ands	r2, r3
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	685b      	ldr	r3, [r3, #4]
 800b258:	4313      	orrs	r3, r2
 800b25a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	4a33      	ldr	r2, [pc, #204]	; (800b32c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800b260:	401a      	ands	r2, r3
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	4313      	orrs	r3, r2
 800b268:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	4a30      	ldr	r2, [pc, #192]	; (800b330 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b26e:	401a      	ands	r2, r3
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	691b      	ldr	r3, [r3, #16]
 800b274:	4313      	orrs	r3, r2
 800b276:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	4a2e      	ldr	r2, [pc, #184]	; (800b334 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800b27c:	401a      	ands	r2, r3
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	695b      	ldr	r3, [r3, #20]
 800b282:	4313      	orrs	r3, r2
 800b284:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	4a2b      	ldr	r2, [pc, #172]	; (800b338 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800b28a:	401a      	ands	r2, r3
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b290:	4313      	orrs	r3, r2
 800b292:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	4a29      	ldr	r2, [pc, #164]	; (800b33c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800b298:	401a      	ands	r2, r3
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	699b      	ldr	r3, [r3, #24]
 800b29e:	041b      	lsls	r3, r3, #16
 800b2a0:	4313      	orrs	r3, r2
 800b2a2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	4a25      	ldr	r2, [pc, #148]	; (800b340 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d106      	bne.n	800b2bc <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	4a24      	ldr	r2, [pc, #144]	; (800b344 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b2b2:	401a      	ands	r2, r3
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	69db      	ldr	r3, [r3, #28]
 800b2b8:	4313      	orrs	r3, r2
 800b2ba:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	4a1f      	ldr	r2, [pc, #124]	; (800b340 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d121      	bne.n	800b30a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	4a1f      	ldr	r2, [pc, #124]	; (800b348 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b2ca:	401a      	ands	r2, r3
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2d0:	051b      	lsls	r3, r3, #20
 800b2d2:	4313      	orrs	r3, r2
 800b2d4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	4a1c      	ldr	r2, [pc, #112]	; (800b34c <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800b2da:	401a      	ands	r2, r3
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	6a1b      	ldr	r3, [r3, #32]
 800b2e0:	4313      	orrs	r3, r2
 800b2e2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	4a1a      	ldr	r2, [pc, #104]	; (800b350 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 800b2e8:	401a      	ands	r2, r3
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ee:	4313      	orrs	r3, r2
 800b2f0:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	4a12      	ldr	r2, [pc, #72]	; (800b340 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d106      	bne.n	800b30a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	4a15      	ldr	r2, [pc, #84]	; (800b354 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 800b300:	401a      	ands	r2, r3
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b306:	4313      	orrs	r3, r2
 800b308:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	68fa      	ldr	r2, [r7, #12]
 800b310:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	223c      	movs	r2, #60	; 0x3c
 800b316:	2100      	movs	r1, #0
 800b318:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b31a:	2300      	movs	r3, #0
}
 800b31c:	0018      	movs	r0, r3
 800b31e:	46bd      	mov	sp, r7
 800b320:	b004      	add	sp, #16
 800b322:	bd80      	pop	{r7, pc}
 800b324:	fffffcff 	.word	0xfffffcff
 800b328:	fffffbff 	.word	0xfffffbff
 800b32c:	fffff7ff 	.word	0xfffff7ff
 800b330:	ffffefff 	.word	0xffffefff
 800b334:	ffffdfff 	.word	0xffffdfff
 800b338:	ffffbfff 	.word	0xffffbfff
 800b33c:	fff0ffff 	.word	0xfff0ffff
 800b340:	40012c00 	.word	0x40012c00
 800b344:	efffffff 	.word	0xefffffff
 800b348:	ff0fffff 	.word	0xff0fffff
 800b34c:	feffffff 	.word	0xfeffffff
 800b350:	fdffffff 	.word	0xfdffffff
 800b354:	dfffffff 	.word	0xdfffffff

0800b358 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b08a      	sub	sp, #40	; 0x28
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	60f8      	str	r0, [r7, #12]
 800b360:	60b9      	str	r1, [r7, #8]
 800b362:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b364:	2327      	movs	r3, #39	; 0x27
 800b366:	18fb      	adds	r3, r7, r3
 800b368:	2200      	movs	r2, #0
 800b36a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	223c      	movs	r2, #60	; 0x3c
 800b370:	5c9b      	ldrb	r3, [r3, r2]
 800b372:	2b01      	cmp	r3, #1
 800b374:	d101      	bne.n	800b37a <HAL_TIMEx_ConfigBreakInput+0x22>
 800b376:	2302      	movs	r3, #2
 800b378:	e095      	b.n	800b4a6 <HAL_TIMEx_ConfigBreakInput+0x14e>
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	223c      	movs	r2, #60	; 0x3c
 800b37e:	2101      	movs	r1, #1
 800b380:	5499      	strb	r1, [r3, r2]

  switch (sBreakInputConfig->Source)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	2b04      	cmp	r3, #4
 800b388:	d019      	beq.n	800b3be <HAL_TIMEx_ConfigBreakInput+0x66>
 800b38a:	d822      	bhi.n	800b3d2 <HAL_TIMEx_ConfigBreakInput+0x7a>
 800b38c:	2b01      	cmp	r3, #1
 800b38e:	d002      	beq.n	800b396 <HAL_TIMEx_ConfigBreakInput+0x3e>
 800b390:	2b02      	cmp	r3, #2
 800b392:	d00a      	beq.n	800b3aa <HAL_TIMEx_ConfigBreakInput+0x52>
 800b394:	e01d      	b.n	800b3d2 <HAL_TIMEx_ConfigBreakInput+0x7a>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 800b396:	2301      	movs	r3, #1
 800b398:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 800b39a:	2300      	movs	r3, #0
 800b39c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 800b39e:	2380      	movs	r3, #128	; 0x80
 800b3a0:	009b      	lsls	r3, r3, #2
 800b3a2:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 800b3a4:	2309      	movs	r3, #9
 800b3a6:	617b      	str	r3, [r7, #20]
      break;
 800b3a8:	e01c      	b.n	800b3e4 <HAL_TIMEx_ConfigBreakInput+0x8c>
    }
#if defined(COMP1) && defined(COMP2)
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 800b3aa:	2302      	movs	r3, #2
 800b3ac:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 800b3b2:	2380      	movs	r3, #128	; 0x80
 800b3b4:	00db      	lsls	r3, r3, #3
 800b3b6:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 800b3b8:	230a      	movs	r3, #10
 800b3ba:	617b      	str	r3, [r7, #20]
      break;
 800b3bc:	e012      	b.n	800b3e4 <HAL_TIMEx_ConfigBreakInput+0x8c>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 800b3be:	2304      	movs	r3, #4
 800b3c0:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 800b3c2:	2302      	movs	r3, #2
 800b3c4:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 800b3c6:	2380      	movs	r3, #128	; 0x80
 800b3c8:	011b      	lsls	r3, r3, #4
 800b3ca:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 800b3cc:	230b      	movs	r3, #11
 800b3ce:	617b      	str	r3, [r7, #20]
      break;
 800b3d0:	e008      	b.n	800b3e4 <HAL_TIMEx_ConfigBreakInput+0x8c>
    }
#endif /* COMP3 */

    default:
    {
      bkin_enable_mask = 0U;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	617b      	str	r3, [r7, #20]
      break;
 800b3e2:	46c0      	nop			; (mov r8, r8)
    }
  }

  switch (BreakInput)
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	2b01      	cmp	r3, #1
 800b3e8:	d003      	beq.n	800b3f2 <HAL_TIMEx_ConfigBreakInput+0x9a>
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	2b02      	cmp	r3, #2
 800b3ee:	d027      	beq.n	800b440 <HAL_TIMEx_ConfigBreakInput+0xe8>
 800b3f0:	e04d      	b.n	800b48e <HAL_TIMEx_ConfigBreakInput+0x136>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b3f8:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800b3fa:	6a3b      	ldr	r3, [r7, #32]
 800b3fc:	43da      	mvns	r2, r3
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	4013      	ands	r3, r2
 800b402:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	685a      	ldr	r2, [r3, #4]
 800b408:	69bb      	ldr	r3, [r7, #24]
 800b40a:	409a      	lsls	r2, r3
 800b40c:	0013      	movs	r3, r2
 800b40e:	6a3a      	ldr	r2, [r7, #32]
 800b410:	4013      	ands	r3, r2
 800b412:	693a      	ldr	r2, [r7, #16]
 800b414:	4313      	orrs	r3, r2
 800b416:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800b418:	69fb      	ldr	r3, [r7, #28]
 800b41a:	43da      	mvns	r2, r3
 800b41c:	693b      	ldr	r3, [r7, #16]
 800b41e:	4013      	ands	r3, r2
 800b420:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	689a      	ldr	r2, [r3, #8]
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	409a      	lsls	r2, r3
 800b42a:	0013      	movs	r3, r2
 800b42c:	69fa      	ldr	r2, [r7, #28]
 800b42e:	4013      	ands	r3, r2
 800b430:	693a      	ldr	r2, [r7, #16]
 800b432:	4313      	orrs	r3, r2
 800b434:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	693a      	ldr	r2, [r7, #16]
 800b43c:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 800b43e:	e02b      	b.n	800b498 <HAL_TIMEx_ConfigBreakInput+0x140>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b446:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800b448:	6a3b      	ldr	r3, [r7, #32]
 800b44a:	43da      	mvns	r2, r3
 800b44c:	693b      	ldr	r3, [r7, #16]
 800b44e:	4013      	ands	r3, r2
 800b450:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	685a      	ldr	r2, [r3, #4]
 800b456:	69bb      	ldr	r3, [r7, #24]
 800b458:	409a      	lsls	r2, r3
 800b45a:	0013      	movs	r3, r2
 800b45c:	6a3a      	ldr	r2, [r7, #32]
 800b45e:	4013      	ands	r3, r2
 800b460:	693a      	ldr	r2, [r7, #16]
 800b462:	4313      	orrs	r3, r2
 800b464:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800b466:	69fb      	ldr	r3, [r7, #28]
 800b468:	43da      	mvns	r2, r3
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	4013      	ands	r3, r2
 800b46e:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	689a      	ldr	r2, [r3, #8]
 800b474:	697b      	ldr	r3, [r7, #20]
 800b476:	409a      	lsls	r2, r3
 800b478:	0013      	movs	r3, r2
 800b47a:	69fa      	ldr	r2, [r7, #28]
 800b47c:	4013      	ands	r3, r2
 800b47e:	693a      	ldr	r2, [r7, #16]
 800b480:	4313      	orrs	r3, r2
 800b482:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	693a      	ldr	r2, [r7, #16]
 800b48a:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800b48c:	e004      	b.n	800b498 <HAL_TIMEx_ConfigBreakInput+0x140>
    }
    default:
      status = HAL_ERROR;
 800b48e:	2327      	movs	r3, #39	; 0x27
 800b490:	18fb      	adds	r3, r7, r3
 800b492:	2201      	movs	r2, #1
 800b494:	701a      	strb	r2, [r3, #0]
      break;
 800b496:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	223c      	movs	r2, #60	; 0x3c
 800b49c:	2100      	movs	r1, #0
 800b49e:	5499      	strb	r1, [r3, r2]

  return status;
 800b4a0:	2327      	movs	r3, #39	; 0x27
 800b4a2:	18fb      	adds	r3, r7, r3
 800b4a4:	781b      	ldrb	r3, [r3, #0]
}
 800b4a6:	0018      	movs	r0, r3
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	b00a      	add	sp, #40	; 0x28
 800b4ac:	bd80      	pop	{r7, pc}
	...

0800b4b0 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b082      	sub	sp, #8
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d101      	bne.n	800b4c2 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800b4be:	2301      	movs	r3, #1
 800b4c0:	e03f      	b.n	800b542 <HAL_USART_Init+0x92>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2259      	movs	r2, #89	; 0x59
 800b4c6:	5c9b      	ldrb	r3, [r3, r2]
 800b4c8:	b2db      	uxtb	r3, r3
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d107      	bne.n	800b4de <HAL_USART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2258      	movs	r2, #88	; 0x58
 800b4d2:	2100      	movs	r1, #0
 800b4d4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	0018      	movs	r0, r3
 800b4da:	f7f9 fd4d 	bl	8004f78 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2259      	movs	r2, #89	; 0x59
 800b4e2:	2102      	movs	r1, #2
 800b4e4:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	681a      	ldr	r2, [r3, #0]
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	2101      	movs	r1, #1
 800b4f2:	438a      	bics	r2, r1
 800b4f4:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	0018      	movs	r0, r3
 800b4fa:	f000 fae3 	bl	800bac4 <USART_SetConfig>
 800b4fe:	0003      	movs	r3, r0
 800b500:	2b01      	cmp	r3, #1
 800b502:	d101      	bne.n	800b508 <HAL_USART_Init+0x58>
  {
    return HAL_ERROR;
 800b504:	2301      	movs	r3, #1
 800b506:	e01c      	b.n	800b542 <HAL_USART_Init+0x92>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	685a      	ldr	r2, [r3, #4]
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	490e      	ldr	r1, [pc, #56]	; (800b54c <HAL_USART_Init+0x9c>)
 800b514:	400a      	ands	r2, r1
 800b516:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	689a      	ldr	r2, [r3, #8]
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	212a      	movs	r1, #42	; 0x2a
 800b524:	438a      	bics	r2, r1
 800b526:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	681a      	ldr	r2, [r3, #0]
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	2101      	movs	r1, #1
 800b534:	430a      	orrs	r2, r1
 800b536:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	0018      	movs	r0, r3
 800b53c:	f000 fd5e 	bl	800bffc <USART_CheckIdleState>
 800b540:	0003      	movs	r3, r0
}
 800b542:	0018      	movs	r0, r3
 800b544:	46bd      	mov	sp, r7
 800b546:	b002      	add	sp, #8
 800b548:	bd80      	pop	{r7, pc}
 800b54a:	46c0      	nop			; (mov r8, r8)
 800b54c:	ffffbfff 	.word	0xffffbfff

0800b550 <HAL_USART_Transmit>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size,
                                     uint32_t Timeout)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b08a      	sub	sp, #40	; 0x28
 800b554:	af02      	add	r7, sp, #8
 800b556:	60f8      	str	r0, [r7, #12]
 800b558:	60b9      	str	r1, [r7, #8]
 800b55a:	603b      	str	r3, [r7, #0]
 800b55c:	1dbb      	adds	r3, r7, #6
 800b55e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	2259      	movs	r2, #89	; 0x59
 800b564:	5c9b      	ldrb	r3, [r3, r2]
 800b566:	b2db      	uxtb	r3, r3
 800b568:	2b01      	cmp	r3, #1
 800b56a:	d000      	beq.n	800b56e <HAL_USART_Transmit+0x1e>
 800b56c:	e0a9      	b.n	800b6c2 <HAL_USART_Transmit+0x172>
  {
    if ((pTxData == NULL) || (Size == 0U))
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d003      	beq.n	800b57c <HAL_USART_Transmit+0x2c>
 800b574:	1dbb      	adds	r3, r7, #6
 800b576:	881b      	ldrh	r3, [r3, #0]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d101      	bne.n	800b580 <HAL_USART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b57c:	2301      	movs	r3, #1
 800b57e:	e0a1      	b.n	800b6c4 <HAL_USART_Transmit+0x174>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	689a      	ldr	r2, [r3, #8]
 800b584:	2380      	movs	r3, #128	; 0x80
 800b586:	015b      	lsls	r3, r3, #5
 800b588:	429a      	cmp	r2, r3
 800b58a:	d109      	bne.n	800b5a0 <HAL_USART_Transmit+0x50>
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	691b      	ldr	r3, [r3, #16]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d105      	bne.n	800b5a0 <HAL_USART_Transmit+0x50>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	2201      	movs	r2, #1
 800b598:	4013      	ands	r3, r2
 800b59a:	d001      	beq.n	800b5a0 <HAL_USART_Transmit+0x50>
      {
        return  HAL_ERROR;
 800b59c:	2301      	movs	r3, #1
 800b59e:	e091      	b.n	800b6c4 <HAL_USART_Transmit+0x174>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	2258      	movs	r2, #88	; 0x58
 800b5a4:	5c9b      	ldrb	r3, [r3, r2]
 800b5a6:	2b01      	cmp	r3, #1
 800b5a8:	d101      	bne.n	800b5ae <HAL_USART_Transmit+0x5e>
 800b5aa:	2302      	movs	r3, #2
 800b5ac:	e08a      	b.n	800b6c4 <HAL_USART_Transmit+0x174>
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	2258      	movs	r2, #88	; 0x58
 800b5b2:	2101      	movs	r1, #1
 800b5b4:	5499      	strb	r1, [r3, r2]

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	2259      	movs	r2, #89	; 0x59
 800b5c0:	2112      	movs	r1, #18
 800b5c2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b5c4:	f7f9 ff52 	bl	800546c <HAL_GetTick>
 800b5c8:	0003      	movs	r3, r0
 800b5ca:	617b      	str	r3, [r7, #20]

    husart->TxXferSize = Size;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	1dba      	adds	r2, r7, #6
 800b5d0:	8812      	ldrh	r2, [r2, #0]
 800b5d2:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	1dba      	adds	r2, r7, #6
 800b5d8:	8812      	ldrh	r2, [r2, #0]
 800b5da:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	689a      	ldr	r2, [r3, #8]
 800b5e0:	2380      	movs	r3, #128	; 0x80
 800b5e2:	015b      	lsls	r3, r3, #5
 800b5e4:	429a      	cmp	r2, r3
 800b5e6:	d108      	bne.n	800b5fa <HAL_USART_Transmit+0xaa>
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	691b      	ldr	r3, [r3, #16]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d104      	bne.n	800b5fa <HAL_USART_Transmit+0xaa>
    {
      ptxdata8bits  = NULL;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	61bb      	str	r3, [r7, #24]
 800b5f8:	e003      	b.n	800b602 <HAL_USART_Transmit+0xb2>
    }
    else
    {
      ptxdata8bits  = pTxData;
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 800b5fe:	2300      	movs	r3, #0
 800b600:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 800b602:	e02a      	b.n	800b65a <HAL_USART_Transmit+0x10a>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b604:	697a      	ldr	r2, [r7, #20]
 800b606:	68f8      	ldr	r0, [r7, #12]
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	9300      	str	r3, [sp, #0]
 800b60c:	0013      	movs	r3, r2
 800b60e:	2200      	movs	r2, #0
 800b610:	2180      	movs	r1, #128	; 0x80
 800b612:	f000 fa22 	bl	800ba5a <USART_WaitOnFlagUntilTimeout>
 800b616:	1e03      	subs	r3, r0, #0
 800b618:	d001      	beq.n	800b61e <HAL_USART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 800b61a:	2303      	movs	r3, #3
 800b61c:	e052      	b.n	800b6c4 <HAL_USART_Transmit+0x174>
      }
      if (ptxdata8bits == NULL)
 800b61e:	69fb      	ldr	r3, [r7, #28]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d10b      	bne.n	800b63c <HAL_USART_Transmit+0xec>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 800b624:	69bb      	ldr	r3, [r7, #24]
 800b626:	881b      	ldrh	r3, [r3, #0]
 800b628:	001a      	movs	r2, r3
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	05d2      	lsls	r2, r2, #23
 800b630:	0dd2      	lsrs	r2, r2, #23
 800b632:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 800b634:	69bb      	ldr	r3, [r7, #24]
 800b636:	3302      	adds	r3, #2
 800b638:	61bb      	str	r3, [r7, #24]
 800b63a:	e007      	b.n	800b64c <HAL_USART_Transmit+0xfc>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 800b63c:	69fb      	ldr	r3, [r7, #28]
 800b63e:	781a      	ldrb	r2, [r3, #0]
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 800b646:	69fb      	ldr	r3, [r7, #28]
 800b648:	3301      	adds	r3, #1
 800b64a:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b650:	b29b      	uxth	r3, r3
 800b652:	3b01      	subs	r3, #1
 800b654:	b29a      	uxth	r2, r3
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (husart->TxXferCount > 0U)
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b65e:	b29b      	uxth	r3, r3
 800b660:	2b00      	cmp	r3, #0
 800b662:	d1cf      	bne.n	800b604 <HAL_USART_Transmit+0xb4>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b664:	697a      	ldr	r2, [r7, #20]
 800b666:	68f8      	ldr	r0, [r7, #12]
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	9300      	str	r3, [sp, #0]
 800b66c:	0013      	movs	r3, r2
 800b66e:	2200      	movs	r2, #0
 800b670:	2140      	movs	r1, #64	; 0x40
 800b672:	f000 f9f2 	bl	800ba5a <USART_WaitOnFlagUntilTimeout>
 800b676:	1e03      	subs	r3, r0, #0
 800b678:	d001      	beq.n	800b67e <HAL_USART_Transmit+0x12e>
    {
      return HAL_TIMEOUT;
 800b67a:	2303      	movs	r3, #3
 800b67c:	e022      	b.n	800b6c4 <HAL_USART_Transmit+0x174>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	2240      	movs	r2, #64	; 0x40
 800b684:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	2208      	movs	r2, #8
 800b68c:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	699a      	ldr	r2, [r3, #24]
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	2108      	movs	r1, #8
 800b69a:	430a      	orrs	r2, r1
 800b69c:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	699a      	ldr	r2, [r3, #24]
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	2110      	movs	r1, #16
 800b6aa:	430a      	orrs	r2, r1
 800b6ac:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	2259      	movs	r2, #89	; 0x59
 800b6b2:	2101      	movs	r1, #1
 800b6b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	2258      	movs	r2, #88	; 0x58
 800b6ba:	2100      	movs	r1, #0
 800b6bc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	e000      	b.n	800b6c4 <HAL_USART_Transmit+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b6c2:	2302      	movs	r3, #2
  }
}
 800b6c4:	0018      	movs	r0, r3
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	b008      	add	sp, #32
 800b6ca:	bd80      	pop	{r7, pc}

0800b6cc <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b088      	sub	sp, #32
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	69db      	ldr	r3, [r3, #28]
 800b6da:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	689b      	ldr	r3, [r3, #8]
 800b6ea:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF |
 800b6ec:	69fb      	ldr	r3, [r7, #28]
 800b6ee:	4ab3      	ldr	r2, [pc, #716]	; (800b9bc <HAL_USART_IRQHandler+0x2f0>)
 800b6f0:	4013      	ands	r3, r2
 800b6f2:	613b      	str	r3, [r7, #16]
                                      USART_ISR_UDR));
  if (errorflags == 0U)
 800b6f4:	693b      	ldr	r3, [r7, #16]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d117      	bne.n	800b72a <HAL_USART_IRQHandler+0x5e>
  {
    /* USART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b6fa:	69fb      	ldr	r3, [r7, #28]
 800b6fc:	2220      	movs	r2, #32
 800b6fe:	4013      	ands	r3, r2
 800b700:	d013      	beq.n	800b72a <HAL_USART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b702:	69bb      	ldr	r3, [r7, #24]
 800b704:	2220      	movs	r2, #32
 800b706:	4013      	ands	r3, r2
 800b708:	d104      	bne.n	800b714 <HAL_USART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b70a:	697a      	ldr	r2, [r7, #20]
 800b70c:	2380      	movs	r3, #128	; 0x80
 800b70e:	055b      	lsls	r3, r3, #21
 800b710:	4013      	ands	r3, r2
 800b712:	d00a      	beq.n	800b72a <HAL_USART_IRQHandler+0x5e>
    {
      if (husart->RxISR != NULL)
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d100      	bne.n	800b71e <HAL_USART_IRQHandler+0x52>
 800b71c:	e14a      	b.n	800b9b4 <HAL_USART_IRQHandler+0x2e8>
      {
        husart->RxISR(husart);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b722:	687a      	ldr	r2, [r7, #4]
 800b724:	0010      	movs	r0, r2
 800b726:	4798      	blx	r3
      }
      return;
 800b728:	e144      	b.n	800b9b4 <HAL_USART_IRQHandler+0x2e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d100      	bne.n	800b732 <HAL_USART_IRQHandler+0x66>
 800b730:	e100      	b.n	800b934 <HAL_USART_IRQHandler+0x268>
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b732:	697b      	ldr	r3, [r7, #20]
 800b734:	4aa2      	ldr	r2, [pc, #648]	; (800b9c0 <HAL_USART_IRQHandler+0x2f4>)
 800b736:	4013      	ands	r3, r2
 800b738:	d105      	bne.n	800b746 <HAL_USART_IRQHandler+0x7a>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
 800b73a:	69ba      	ldr	r2, [r7, #24]
 800b73c:	2390      	movs	r3, #144	; 0x90
 800b73e:	005b      	lsls	r3, r3, #1
 800b740:	4013      	ands	r3, r2
 800b742:	d100      	bne.n	800b746 <HAL_USART_IRQHandler+0x7a>
 800b744:	e0f6      	b.n	800b934 <HAL_USART_IRQHandler+0x268>
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b746:	69fb      	ldr	r3, [r7, #28]
 800b748:	2201      	movs	r2, #1
 800b74a:	4013      	ands	r3, r2
 800b74c:	d00e      	beq.n	800b76c <HAL_USART_IRQHandler+0xa0>
 800b74e:	69ba      	ldr	r2, [r7, #24]
 800b750:	2380      	movs	r3, #128	; 0x80
 800b752:	005b      	lsls	r3, r3, #1
 800b754:	4013      	ands	r3, r2
 800b756:	d009      	beq.n	800b76c <HAL_USART_IRQHandler+0xa0>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	2201      	movs	r2, #1
 800b75e:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b764:	2201      	movs	r2, #1
 800b766:	431a      	orrs	r2, r3
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b76c:	69fb      	ldr	r3, [r7, #28]
 800b76e:	2202      	movs	r2, #2
 800b770:	4013      	ands	r3, r2
 800b772:	d00d      	beq.n	800b790 <HAL_USART_IRQHandler+0xc4>
 800b774:	697b      	ldr	r3, [r7, #20]
 800b776:	2201      	movs	r2, #1
 800b778:	4013      	ands	r3, r2
 800b77a:	d009      	beq.n	800b790 <HAL_USART_IRQHandler+0xc4>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	2202      	movs	r2, #2
 800b782:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b788:	2204      	movs	r2, #4
 800b78a:	431a      	orrs	r2, r3
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b790:	69fb      	ldr	r3, [r7, #28]
 800b792:	2204      	movs	r2, #4
 800b794:	4013      	ands	r3, r2
 800b796:	d00d      	beq.n	800b7b4 <HAL_USART_IRQHandler+0xe8>
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	2201      	movs	r2, #1
 800b79c:	4013      	ands	r3, r2
 800b79e:	d009      	beq.n	800b7b4 <HAL_USART_IRQHandler+0xe8>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	2204      	movs	r2, #4
 800b7a6:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7ac:	2202      	movs	r2, #2
 800b7ae:	431a      	orrs	r2, r3
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b7b4:	69fb      	ldr	r3, [r7, #28]
 800b7b6:	2208      	movs	r2, #8
 800b7b8:	4013      	ands	r3, r2
 800b7ba:	d011      	beq.n	800b7e0 <HAL_USART_IRQHandler+0x114>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b7bc:	69bb      	ldr	r3, [r7, #24]
 800b7be:	2220      	movs	r2, #32
 800b7c0:	4013      	ands	r3, r2
 800b7c2:	d103      	bne.n	800b7cc <HAL_USART_IRQHandler+0x100>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	4a7e      	ldr	r2, [pc, #504]	; (800b9c0 <HAL_USART_IRQHandler+0x2f4>)
 800b7c8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b7ca:	d009      	beq.n	800b7e0 <HAL_USART_IRQHandler+0x114>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	2208      	movs	r2, #8
 800b7d2:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7d8:	2208      	movs	r2, #8
 800b7da:	431a      	orrs	r2, r3
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b7e0:	69fa      	ldr	r2, [r7, #28]
 800b7e2:	2380      	movs	r3, #128	; 0x80
 800b7e4:	011b      	lsls	r3, r3, #4
 800b7e6:	4013      	ands	r3, r2
 800b7e8:	d00f      	beq.n	800b80a <HAL_USART_IRQHandler+0x13e>
 800b7ea:	69ba      	ldr	r2, [r7, #24]
 800b7ec:	2380      	movs	r3, #128	; 0x80
 800b7ee:	04db      	lsls	r3, r3, #19
 800b7f0:	4013      	ands	r3, r2
 800b7f2:	d00a      	beq.n	800b80a <HAL_USART_IRQHandler+0x13e>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_RTOF);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	2280      	movs	r2, #128	; 0x80
 800b7fa:	0112      	lsls	r2, r2, #4
 800b7fc:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_RTO;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b802:	2280      	movs	r2, #128	; 0x80
 800b804:	431a      	orrs	r2, r3
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART SPI slave underrun error interrupt occurred -------------------------*/
    if (((isrflags & USART_ISR_UDR) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b80a:	69fa      	ldr	r2, [r7, #28]
 800b80c:	2380      	movs	r3, #128	; 0x80
 800b80e:	019b      	lsls	r3, r3, #6
 800b810:	4013      	ands	r3, r2
 800b812:	d01a      	beq.n	800b84a <HAL_USART_IRQHandler+0x17e>
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	2201      	movs	r2, #1
 800b818:	4013      	ands	r3, r2
 800b81a:	d016      	beq.n	800b84a <HAL_USART_IRQHandler+0x17e>
    {
      /* Ignore SPI slave underrun errors when reception is going on */
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2259      	movs	r2, #89	; 0x59
 800b820:	5c9b      	ldrb	r3, [r3, r2]
 800b822:	b2db      	uxtb	r3, r3
 800b824:	2b22      	cmp	r3, #34	; 0x22
 800b826:	d105      	bne.n	800b834 <HAL_USART_IRQHandler+0x168>
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	2280      	movs	r2, #128	; 0x80
 800b82e:	0192      	lsls	r2, r2, #6
 800b830:	621a      	str	r2, [r3, #32]
        return;
 800b832:	e0ca      	b.n	800b9ca <HAL_USART_IRQHandler+0x2fe>
      }
      else
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	2280      	movs	r2, #128	; 0x80
 800b83a:	0192      	lsls	r2, r2, #6
 800b83c:	621a      	str	r2, [r3, #32]
        husart->ErrorCode |= HAL_USART_ERROR_UDR;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b842:	2220      	movs	r2, #32
 800b844:	431a      	orrs	r2, r3
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d100      	bne.n	800b854 <HAL_USART_IRQHandler+0x188>
 800b852:	e0b1      	b.n	800b9b8 <HAL_USART_IRQHandler+0x2ec>
    {
      /* USART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b854:	69fb      	ldr	r3, [r7, #28]
 800b856:	2220      	movs	r2, #32
 800b858:	4013      	ands	r3, r2
 800b85a:	d011      	beq.n	800b880 <HAL_USART_IRQHandler+0x1b4>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b85c:	69bb      	ldr	r3, [r7, #24]
 800b85e:	2220      	movs	r2, #32
 800b860:	4013      	ands	r3, r2
 800b862:	d104      	bne.n	800b86e <HAL_USART_IRQHandler+0x1a2>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b864:	697a      	ldr	r2, [r7, #20]
 800b866:	2380      	movs	r3, #128	; 0x80
 800b868:	055b      	lsls	r3, r3, #21
 800b86a:	4013      	ands	r3, r2
 800b86c:	d008      	beq.n	800b880 <HAL_USART_IRQHandler+0x1b4>
      {
        if (husart->RxISR != NULL)
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b872:	2b00      	cmp	r3, #0
 800b874:	d004      	beq.n	800b880 <HAL_USART_IRQHandler+0x1b4>
        {
          husart->RxISR(husart);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b87a:	687a      	ldr	r2, [r7, #4]
 800b87c:	0010      	movs	r0, r2
 800b87e:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b884:	2208      	movs	r2, #8
 800b886:	4013      	ands	r3, r2
 800b888:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	689b      	ldr	r3, [r3, #8]
 800b890:	2240      	movs	r2, #64	; 0x40
 800b892:	4013      	ands	r3, r2
 800b894:	2b40      	cmp	r3, #64	; 0x40
 800b896:	d002      	beq.n	800b89e <HAL_USART_IRQHandler+0x1d2>
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d040      	beq.n	800b920 <HAL_USART_IRQHandler+0x254>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	0018      	movs	r0, r3
 800b8a2:	f000 f8a5 	bl	800b9f0 <USART_EndTransfer>

        /* Abort the USART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	689b      	ldr	r3, [r3, #8]
 800b8ac:	2240      	movs	r2, #64	; 0x40
 800b8ae:	4013      	ands	r3, r2
 800b8b0:	2b40      	cmp	r3, #64	; 0x40
 800b8b2:	d130      	bne.n	800b916 <HAL_USART_IRQHandler+0x24a>
        {
          /* Disable the USART DMA Rx request if enabled */
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	689a      	ldr	r2, [r3, #8]
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	2140      	movs	r1, #64	; 0x40
 800b8c0:	438a      	bics	r2, r1
 800b8c2:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d008      	beq.n	800b8de <HAL_USART_IRQHandler+0x212>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8d8:	0018      	movs	r0, r3
 800b8da:	f7fa fa59 	bl	8005d90 <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d012      	beq.n	800b90c <HAL_USART_IRQHandler+0x240>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8ea:	4a36      	ldr	r2, [pc, #216]	; (800b9c4 <HAL_USART_IRQHandler+0x2f8>)
 800b8ec:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8f2:	0018      	movs	r0, r3
 800b8f4:	f7fa fa4c 	bl	8005d90 <HAL_DMA_Abort_IT>
 800b8f8:	1e03      	subs	r3, r0, #0
 800b8fa:	d019      	beq.n	800b930 <HAL_USART_IRQHandler+0x264>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b900:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b906:	0018      	movs	r0, r3
 800b908:	4790      	blx	r2
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b90a:	e011      	b.n	800b930 <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	0018      	movs	r0, r3
 800b910:	f000 f866 	bl	800b9e0 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b914:	e00c      	b.n	800b930 <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	0018      	movs	r0, r3
 800b91a:	f000 f861 	bl	800b9e0 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b91e:	e007      	b.n	800b930 <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	0018      	movs	r0, r3
 800b924:	f000 f85c 	bl	800b9e0 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2200      	movs	r2, #0
 800b92c:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }
    return;
 800b92e:	e043      	b.n	800b9b8 <HAL_USART_IRQHandler+0x2ec>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b930:	46c0      	nop			; (mov r8, r8)
    return;
 800b932:	e041      	b.n	800b9b8 <HAL_USART_IRQHandler+0x2ec>

  } /* End if some error occurs */


  /* USART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b934:	69fb      	ldr	r3, [r7, #28]
 800b936:	2280      	movs	r2, #128	; 0x80
 800b938:	4013      	ands	r3, r2
 800b93a:	d012      	beq.n	800b962 <HAL_USART_IRQHandler+0x296>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b93c:	69bb      	ldr	r3, [r7, #24]
 800b93e:	2280      	movs	r2, #128	; 0x80
 800b940:	4013      	ands	r3, r2
 800b942:	d104      	bne.n	800b94e <HAL_USART_IRQHandler+0x282>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b944:	697a      	ldr	r2, [r7, #20]
 800b946:	2380      	movs	r3, #128	; 0x80
 800b948:	041b      	lsls	r3, r3, #16
 800b94a:	4013      	ands	r3, r2
 800b94c:	d009      	beq.n	800b962 <HAL_USART_IRQHandler+0x296>
  {
    if (husart->TxISR != NULL)
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b952:	2b00      	cmp	r3, #0
 800b954:	d038      	beq.n	800b9c8 <HAL_USART_IRQHandler+0x2fc>
    {
      husart->TxISR(husart);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b95a:	687a      	ldr	r2, [r7, #4]
 800b95c:	0010      	movs	r0, r2
 800b95e:	4798      	blx	r3
    }
    return;
 800b960:	e032      	b.n	800b9c8 <HAL_USART_IRQHandler+0x2fc>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b962:	69fb      	ldr	r3, [r7, #28]
 800b964:	2240      	movs	r2, #64	; 0x40
 800b966:	4013      	ands	r3, r2
 800b968:	d008      	beq.n	800b97c <HAL_USART_IRQHandler+0x2b0>
 800b96a:	69bb      	ldr	r3, [r7, #24]
 800b96c:	2240      	movs	r2, #64	; 0x40
 800b96e:	4013      	ands	r3, r2
 800b970:	d004      	beq.n	800b97c <HAL_USART_IRQHandler+0x2b0>
  {
    USART_EndTransmit_IT(husart);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	0018      	movs	r0, r3
 800b976:	f000 fb85 	bl	800c084 <USART_EndTransmit_IT>
    return;
 800b97a:	e026      	b.n	800b9ca <HAL_USART_IRQHandler+0x2fe>
  }

  /* USART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b97c:	69fa      	ldr	r2, [r7, #28]
 800b97e:	2380      	movs	r3, #128	; 0x80
 800b980:	041b      	lsls	r3, r3, #16
 800b982:	4013      	ands	r3, r2
 800b984:	d009      	beq.n	800b99a <HAL_USART_IRQHandler+0x2ce>
 800b986:	69ba      	ldr	r2, [r7, #24]
 800b988:	2380      	movs	r3, #128	; 0x80
 800b98a:	05db      	lsls	r3, r3, #23
 800b98c:	4013      	ands	r3, r2
 800b98e:	d004      	beq.n	800b99a <HAL_USART_IRQHandler+0x2ce>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    husart->TxFifoEmptyCallback(husart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_USARTEx_TxFifoEmptyCallback(husart);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	0018      	movs	r0, r3
 800b994:	f000 fbc1 	bl	800c11a <HAL_USARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 800b998:	e017      	b.n	800b9ca <HAL_USART_IRQHandler+0x2fe>
  }

  /* USART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b99a:	69fa      	ldr	r2, [r7, #28]
 800b99c:	2380      	movs	r3, #128	; 0x80
 800b99e:	045b      	lsls	r3, r3, #17
 800b9a0:	4013      	ands	r3, r2
 800b9a2:	d012      	beq.n	800b9ca <HAL_USART_IRQHandler+0x2fe>
 800b9a4:	69bb      	ldr	r3, [r7, #24]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	da0f      	bge.n	800b9ca <HAL_USART_IRQHandler+0x2fe>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    husart->RxFifoFullCallback(husart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_USARTEx_RxFifoFullCallback(husart);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	0018      	movs	r0, r3
 800b9ae:	f000 fbac 	bl	800c10a <HAL_USARTEx_RxFifoFullCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 800b9b2:	e00a      	b.n	800b9ca <HAL_USART_IRQHandler+0x2fe>
      return;
 800b9b4:	46c0      	nop			; (mov r8, r8)
 800b9b6:	e008      	b.n	800b9ca <HAL_USART_IRQHandler+0x2fe>
    return;
 800b9b8:	46c0      	nop			; (mov r8, r8)
 800b9ba:	e006      	b.n	800b9ca <HAL_USART_IRQHandler+0x2fe>
 800b9bc:	0000280f 	.word	0x0000280f
 800b9c0:	10000001 	.word	0x10000001
 800b9c4:	0800ba31 	.word	0x0800ba31
    return;
 800b9c8:	46c0      	nop			; (mov r8, r8)
  }
}
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	b008      	add	sp, #32
 800b9ce:	bd80      	pop	{r7, pc}

0800b9d0 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b082      	sub	sp, #8
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 800b9d8:	46c0      	nop			; (mov r8, r8)
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	b002      	add	sp, #8
 800b9de:	bd80      	pop	{r7, pc}

0800b9e0 <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b082      	sub	sp, #8
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 800b9e8:	46c0      	nop			; (mov r8, r8)
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	b002      	add	sp, #8
 800b9ee:	bd80      	pop	{r7, pc}

0800b9f0 <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b082      	sub	sp, #8
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, RXFT, TXFT, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	681a      	ldr	r2, [r3, #0]
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	4909      	ldr	r1, [pc, #36]	; (800ba28 <USART_EndTransfer+0x38>)
 800ba04:	400a      	ands	r2, r1
 800ba06:	601a      	str	r2, [r3, #0]
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	689a      	ldr	r2, [r3, #8]
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	4906      	ldr	r1, [pc, #24]	; (800ba2c <USART_EndTransfer+0x3c>)
 800ba14:	400a      	ands	r2, r1
 800ba16:	609a      	str	r2, [r3, #8]

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2259      	movs	r2, #89	; 0x59
 800ba1c:	2101      	movs	r1, #1
 800ba1e:	5499      	strb	r1, [r3, r2]
}
 800ba20:	46c0      	nop			; (mov r8, r8)
 800ba22:	46bd      	mov	sp, r7
 800ba24:	b002      	add	sp, #8
 800ba26:	bd80      	pop	{r7, pc}
 800ba28:	fffffe1f 	.word	0xfffffe1f
 800ba2c:	ef7ffffe 	.word	0xef7ffffe

0800ba30 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b084      	sub	sp, #16
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba3c:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	2200      	movs	r2, #0
 800ba42:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	2200      	movs	r2, #0
 800ba48:	85da      	strh	r2, [r3, #46]	; 0x2e
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	0018      	movs	r0, r3
 800ba4e:	f7ff ffc7 	bl	800b9e0 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 800ba52:	46c0      	nop			; (mov r8, r8)
 800ba54:	46bd      	mov	sp, r7
 800ba56:	b004      	add	sp, #16
 800ba58:	bd80      	pop	{r7, pc}

0800ba5a <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800ba5a:	b580      	push	{r7, lr}
 800ba5c:	b084      	sub	sp, #16
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	60f8      	str	r0, [r7, #12]
 800ba62:	60b9      	str	r1, [r7, #8]
 800ba64:	603b      	str	r3, [r7, #0]
 800ba66:	1dfb      	adds	r3, r7, #7
 800ba68:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800ba6a:	e017      	b.n	800ba9c <USART_WaitOnFlagUntilTimeout+0x42>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba6c:	69bb      	ldr	r3, [r7, #24]
 800ba6e:	3301      	adds	r3, #1
 800ba70:	d014      	beq.n	800ba9c <USART_WaitOnFlagUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba72:	f7f9 fcfb 	bl	800546c <HAL_GetTick>
 800ba76:	0002      	movs	r2, r0
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	1ad3      	subs	r3, r2, r3
 800ba7c:	69ba      	ldr	r2, [r7, #24]
 800ba7e:	429a      	cmp	r2, r3
 800ba80:	d302      	bcc.n	800ba88 <USART_WaitOnFlagUntilTimeout+0x2e>
 800ba82:	69bb      	ldr	r3, [r7, #24]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d109      	bne.n	800ba9c <USART_WaitOnFlagUntilTimeout+0x42>
      {
        husart->State = HAL_USART_STATE_READY;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	2259      	movs	r2, #89	; 0x59
 800ba8c:	2101      	movs	r1, #1
 800ba8e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	2258      	movs	r2, #88	; 0x58
 800ba94:	2100      	movs	r1, #0
 800ba96:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800ba98:	2303      	movs	r3, #3
 800ba9a:	e00f      	b.n	800babc <USART_WaitOnFlagUntilTimeout+0x62>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	69db      	ldr	r3, [r3, #28]
 800baa2:	68ba      	ldr	r2, [r7, #8]
 800baa4:	4013      	ands	r3, r2
 800baa6:	68ba      	ldr	r2, [r7, #8]
 800baa8:	1ad3      	subs	r3, r2, r3
 800baaa:	425a      	negs	r2, r3
 800baac:	4153      	adcs	r3, r2
 800baae:	b2db      	uxtb	r3, r3
 800bab0:	001a      	movs	r2, r3
 800bab2:	1dfb      	adds	r3, r7, #7
 800bab4:	781b      	ldrb	r3, [r3, #0]
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d0d8      	beq.n	800ba6c <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800baba:	2300      	movs	r3, #0
}
 800babc:	0018      	movs	r0, r3
 800babe:	46bd      	mov	sp, r7
 800bac0:	b004      	add	sp, #16
 800bac2:	bd80      	pop	{r7, pc}

0800bac4 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b088      	sub	sp, #32
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800bacc:	231e      	movs	r3, #30
 800bace:	18fb      	adds	r3, r7, r3
 800bad0:	2200      	movs	r2, #0
 800bad2:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800bad4:	2300      	movs	r3, #0
 800bad6:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	689a      	ldr	r2, [r3, #8]
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	691b      	ldr	r3, [r3, #16]
 800bae0:	431a      	orrs	r2, r3
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	695b      	ldr	r3, [r3, #20]
 800bae6:	4313      	orrs	r3, r2
 800bae8:	2280      	movs	r2, #128	; 0x80
 800baea:	0212      	lsls	r2, r2, #8
 800baec:	4313      	orrs	r3, r2
 800baee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	4ab1      	ldr	r2, [pc, #708]	; (800bdbc <USART_SetConfig+0x2f8>)
 800baf8:	4013      	ands	r3, r2
 800bafa:	0019      	movs	r1, r3
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	697a      	ldr	r2, [r7, #20]
 800bb02:	430a      	orrs	r2, r1
 800bb04:	601a      	str	r2, [r3, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800bb06:	2380      	movs	r3, #128	; 0x80
 800bb08:	011b      	lsls	r3, r3, #4
 800bb0a:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	6a1b      	ldr	r3, [r3, #32]
 800bb10:	697a      	ldr	r2, [r7, #20]
 800bb12:	4313      	orrs	r3, r2
 800bb14:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	699a      	ldr	r2, [r3, #24]
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	69db      	ldr	r3, [r3, #28]
 800bb1e:	4313      	orrs	r3, r2
 800bb20:	697a      	ldr	r2, [r7, #20]
 800bb22:	4313      	orrs	r3, r2
 800bb24:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	68db      	ldr	r3, [r3, #12]
 800bb2a:	697a      	ldr	r2, [r7, #20]
 800bb2c:	4313      	orrs	r3, r2
 800bb2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	685b      	ldr	r3, [r3, #4]
 800bb36:	4aa2      	ldr	r2, [pc, #648]	; (800bdc0 <USART_SetConfig+0x2fc>)
 800bb38:	4013      	ands	r3, r2
 800bb3a:	0019      	movs	r1, r3
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	697a      	ldr	r2, [r7, #20]
 800bb42:	430a      	orrs	r2, r1
 800bb44:	605a      	str	r2, [r3, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb4c:	220f      	movs	r2, #15
 800bb4e:	4393      	bics	r3, r2
 800bb50:	0019      	movs	r1, r3
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	430a      	orrs	r2, r1
 800bb5c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	4a98      	ldr	r2, [pc, #608]	; (800bdc4 <USART_SetConfig+0x300>)
 800bb64:	4293      	cmp	r3, r2
 800bb66:	d127      	bne.n	800bbb8 <USART_SetConfig+0xf4>
 800bb68:	4b97      	ldr	r3, [pc, #604]	; (800bdc8 <USART_SetConfig+0x304>)
 800bb6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb6c:	2203      	movs	r2, #3
 800bb6e:	4013      	ands	r3, r2
 800bb70:	2b03      	cmp	r3, #3
 800bb72:	d017      	beq.n	800bba4 <USART_SetConfig+0xe0>
 800bb74:	d81b      	bhi.n	800bbae <USART_SetConfig+0xea>
 800bb76:	2b02      	cmp	r3, #2
 800bb78:	d00a      	beq.n	800bb90 <USART_SetConfig+0xcc>
 800bb7a:	d818      	bhi.n	800bbae <USART_SetConfig+0xea>
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d002      	beq.n	800bb86 <USART_SetConfig+0xc2>
 800bb80:	2b01      	cmp	r3, #1
 800bb82:	d00a      	beq.n	800bb9a <USART_SetConfig+0xd6>
 800bb84:	e013      	b.n	800bbae <USART_SetConfig+0xea>
 800bb86:	231f      	movs	r3, #31
 800bb88:	18fb      	adds	r3, r7, r3
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	701a      	strb	r2, [r3, #0]
 800bb8e:	e058      	b.n	800bc42 <USART_SetConfig+0x17e>
 800bb90:	231f      	movs	r3, #31
 800bb92:	18fb      	adds	r3, r7, r3
 800bb94:	2202      	movs	r2, #2
 800bb96:	701a      	strb	r2, [r3, #0]
 800bb98:	e053      	b.n	800bc42 <USART_SetConfig+0x17e>
 800bb9a:	231f      	movs	r3, #31
 800bb9c:	18fb      	adds	r3, r7, r3
 800bb9e:	2204      	movs	r2, #4
 800bba0:	701a      	strb	r2, [r3, #0]
 800bba2:	e04e      	b.n	800bc42 <USART_SetConfig+0x17e>
 800bba4:	231f      	movs	r3, #31
 800bba6:	18fb      	adds	r3, r7, r3
 800bba8:	2208      	movs	r2, #8
 800bbaa:	701a      	strb	r2, [r3, #0]
 800bbac:	e049      	b.n	800bc42 <USART_SetConfig+0x17e>
 800bbae:	231f      	movs	r3, #31
 800bbb0:	18fb      	adds	r3, r7, r3
 800bbb2:	2210      	movs	r2, #16
 800bbb4:	701a      	strb	r2, [r3, #0]
 800bbb6:	e044      	b.n	800bc42 <USART_SetConfig+0x17e>
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	4a83      	ldr	r2, [pc, #524]	; (800bdcc <USART_SetConfig+0x308>)
 800bbbe:	4293      	cmp	r3, r2
 800bbc0:	d127      	bne.n	800bc12 <USART_SetConfig+0x14e>
 800bbc2:	4b81      	ldr	r3, [pc, #516]	; (800bdc8 <USART_SetConfig+0x304>)
 800bbc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbc6:	220c      	movs	r2, #12
 800bbc8:	4013      	ands	r3, r2
 800bbca:	2b0c      	cmp	r3, #12
 800bbcc:	d017      	beq.n	800bbfe <USART_SetConfig+0x13a>
 800bbce:	d81b      	bhi.n	800bc08 <USART_SetConfig+0x144>
 800bbd0:	2b08      	cmp	r3, #8
 800bbd2:	d00a      	beq.n	800bbea <USART_SetConfig+0x126>
 800bbd4:	d818      	bhi.n	800bc08 <USART_SetConfig+0x144>
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d002      	beq.n	800bbe0 <USART_SetConfig+0x11c>
 800bbda:	2b04      	cmp	r3, #4
 800bbdc:	d00a      	beq.n	800bbf4 <USART_SetConfig+0x130>
 800bbde:	e013      	b.n	800bc08 <USART_SetConfig+0x144>
 800bbe0:	231f      	movs	r3, #31
 800bbe2:	18fb      	adds	r3, r7, r3
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	701a      	strb	r2, [r3, #0]
 800bbe8:	e02b      	b.n	800bc42 <USART_SetConfig+0x17e>
 800bbea:	231f      	movs	r3, #31
 800bbec:	18fb      	adds	r3, r7, r3
 800bbee:	2202      	movs	r2, #2
 800bbf0:	701a      	strb	r2, [r3, #0]
 800bbf2:	e026      	b.n	800bc42 <USART_SetConfig+0x17e>
 800bbf4:	231f      	movs	r3, #31
 800bbf6:	18fb      	adds	r3, r7, r3
 800bbf8:	2204      	movs	r2, #4
 800bbfa:	701a      	strb	r2, [r3, #0]
 800bbfc:	e021      	b.n	800bc42 <USART_SetConfig+0x17e>
 800bbfe:	231f      	movs	r3, #31
 800bc00:	18fb      	adds	r3, r7, r3
 800bc02:	2208      	movs	r2, #8
 800bc04:	701a      	strb	r2, [r3, #0]
 800bc06:	e01c      	b.n	800bc42 <USART_SetConfig+0x17e>
 800bc08:	231f      	movs	r3, #31
 800bc0a:	18fb      	adds	r3, r7, r3
 800bc0c:	2210      	movs	r2, #16
 800bc0e:	701a      	strb	r2, [r3, #0]
 800bc10:	e017      	b.n	800bc42 <USART_SetConfig+0x17e>
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	4a6e      	ldr	r2, [pc, #440]	; (800bdd0 <USART_SetConfig+0x30c>)
 800bc18:	4293      	cmp	r3, r2
 800bc1a:	d104      	bne.n	800bc26 <USART_SetConfig+0x162>
 800bc1c:	231f      	movs	r3, #31
 800bc1e:	18fb      	adds	r3, r7, r3
 800bc20:	2200      	movs	r2, #0
 800bc22:	701a      	strb	r2, [r3, #0]
 800bc24:	e00d      	b.n	800bc42 <USART_SetConfig+0x17e>
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	4a6a      	ldr	r2, [pc, #424]	; (800bdd4 <USART_SetConfig+0x310>)
 800bc2c:	4293      	cmp	r3, r2
 800bc2e:	d104      	bne.n	800bc3a <USART_SetConfig+0x176>
 800bc30:	231f      	movs	r3, #31
 800bc32:	18fb      	adds	r3, r7, r3
 800bc34:	2200      	movs	r2, #0
 800bc36:	701a      	strb	r2, [r3, #0]
 800bc38:	e003      	b.n	800bc42 <USART_SetConfig+0x17e>
 800bc3a:	231f      	movs	r3, #31
 800bc3c:	18fb      	adds	r3, r7, r3
 800bc3e:	2210      	movs	r2, #16
 800bc40:	701a      	strb	r2, [r3, #0]

  switch (clocksource)
 800bc42:	231f      	movs	r3, #31
 800bc44:	18fb      	adds	r3, r7, r3
 800bc46:	781b      	ldrb	r3, [r3, #0]
 800bc48:	2b08      	cmp	r3, #8
 800bc4a:	d100      	bne.n	800bc4e <USART_SetConfig+0x18a>
 800bc4c:	e139      	b.n	800bec2 <USART_SetConfig+0x3fe>
 800bc4e:	dd00      	ble.n	800bc52 <USART_SetConfig+0x18e>
 800bc50:	e195      	b.n	800bf7e <USART_SetConfig+0x4ba>
 800bc52:	2b04      	cmp	r3, #4
 800bc54:	d100      	bne.n	800bc58 <USART_SetConfig+0x194>
 800bc56:	e0d3      	b.n	800be00 <USART_SetConfig+0x33c>
 800bc58:	dd00      	ble.n	800bc5c <USART_SetConfig+0x198>
 800bc5a:	e190      	b.n	800bf7e <USART_SetConfig+0x4ba>
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d003      	beq.n	800bc68 <USART_SetConfig+0x1a4>
 800bc60:	2b02      	cmp	r3, #2
 800bc62:	d100      	bne.n	800bc66 <USART_SetConfig+0x1a2>
 800bc64:	e061      	b.n	800bd2a <USART_SetConfig+0x266>
 800bc66:	e18a      	b.n	800bf7e <USART_SetConfig+0x4ba>
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800bc68:	f7fc fdb2 	bl	80087d0 <HAL_RCC_GetPCLK1Freq>
 800bc6c:	0003      	movs	r3, r0
 800bc6e:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d044      	beq.n	800bd02 <USART_SetConfig+0x23e>
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc7c:	2b01      	cmp	r3, #1
 800bc7e:	d03e      	beq.n	800bcfe <USART_SetConfig+0x23a>
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc84:	2b02      	cmp	r3, #2
 800bc86:	d038      	beq.n	800bcfa <USART_SetConfig+0x236>
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc8c:	2b03      	cmp	r3, #3
 800bc8e:	d032      	beq.n	800bcf6 <USART_SetConfig+0x232>
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc94:	2b04      	cmp	r3, #4
 800bc96:	d02c      	beq.n	800bcf2 <USART_SetConfig+0x22e>
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc9c:	2b05      	cmp	r3, #5
 800bc9e:	d026      	beq.n	800bcee <USART_SetConfig+0x22a>
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bca4:	2b06      	cmp	r3, #6
 800bca6:	d020      	beq.n	800bcea <USART_SetConfig+0x226>
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcac:	2b07      	cmp	r3, #7
 800bcae:	d01a      	beq.n	800bce6 <USART_SetConfig+0x222>
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcb4:	2b08      	cmp	r3, #8
 800bcb6:	d014      	beq.n	800bce2 <USART_SetConfig+0x21e>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcbc:	2b09      	cmp	r3, #9
 800bcbe:	d00e      	beq.n	800bcde <USART_SetConfig+0x21a>
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcc4:	2b0a      	cmp	r3, #10
 800bcc6:	d008      	beq.n	800bcda <USART_SetConfig+0x216>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bccc:	2b0b      	cmp	r3, #11
 800bcce:	d102      	bne.n	800bcd6 <USART_SetConfig+0x212>
 800bcd0:	2380      	movs	r3, #128	; 0x80
 800bcd2:	005b      	lsls	r3, r3, #1
 800bcd4:	e016      	b.n	800bd04 <USART_SetConfig+0x240>
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	e014      	b.n	800bd04 <USART_SetConfig+0x240>
 800bcda:	2380      	movs	r3, #128	; 0x80
 800bcdc:	e012      	b.n	800bd04 <USART_SetConfig+0x240>
 800bcde:	2340      	movs	r3, #64	; 0x40
 800bce0:	e010      	b.n	800bd04 <USART_SetConfig+0x240>
 800bce2:	2320      	movs	r3, #32
 800bce4:	e00e      	b.n	800bd04 <USART_SetConfig+0x240>
 800bce6:	2310      	movs	r3, #16
 800bce8:	e00c      	b.n	800bd04 <USART_SetConfig+0x240>
 800bcea:	230c      	movs	r3, #12
 800bcec:	e00a      	b.n	800bd04 <USART_SetConfig+0x240>
 800bcee:	230a      	movs	r3, #10
 800bcf0:	e008      	b.n	800bd04 <USART_SetConfig+0x240>
 800bcf2:	2308      	movs	r3, #8
 800bcf4:	e006      	b.n	800bd04 <USART_SetConfig+0x240>
 800bcf6:	2306      	movs	r3, #6
 800bcf8:	e004      	b.n	800bd04 <USART_SetConfig+0x240>
 800bcfa:	2304      	movs	r3, #4
 800bcfc:	e002      	b.n	800bd04 <USART_SetConfig+0x240>
 800bcfe:	2302      	movs	r3, #2
 800bd00:	e000      	b.n	800bd04 <USART_SetConfig+0x240>
 800bd02:	2301      	movs	r3, #1
 800bd04:	0019      	movs	r1, r3
 800bd06:	6938      	ldr	r0, [r7, #16]
 800bd08:	f7f4 f9fc 	bl	8000104 <__udivsi3>
 800bd0c:	0003      	movs	r3, r0
 800bd0e:	005a      	lsls	r2, r3, #1
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	685b      	ldr	r3, [r3, #4]
 800bd14:	085b      	lsrs	r3, r3, #1
 800bd16:	18d2      	adds	r2, r2, r3
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	685b      	ldr	r3, [r3, #4]
 800bd1c:	0019      	movs	r1, r3
 800bd1e:	0010      	movs	r0, r2
 800bd20:	f7f4 f9f0 	bl	8000104 <__udivsi3>
 800bd24:	0003      	movs	r3, r0
 800bd26:	61bb      	str	r3, [r7, #24]
      break;
 800bd28:	e12e      	b.n	800bf88 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d052      	beq.n	800bdd8 <USART_SetConfig+0x314>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd36:	2b01      	cmp	r3, #1
 800bd38:	d03e      	beq.n	800bdb8 <USART_SetConfig+0x2f4>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd3e:	2b02      	cmp	r3, #2
 800bd40:	d038      	beq.n	800bdb4 <USART_SetConfig+0x2f0>
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd46:	2b03      	cmp	r3, #3
 800bd48:	d032      	beq.n	800bdb0 <USART_SetConfig+0x2ec>
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd4e:	2b04      	cmp	r3, #4
 800bd50:	d02c      	beq.n	800bdac <USART_SetConfig+0x2e8>
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd56:	2b05      	cmp	r3, #5
 800bd58:	d026      	beq.n	800bda8 <USART_SetConfig+0x2e4>
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd5e:	2b06      	cmp	r3, #6
 800bd60:	d020      	beq.n	800bda4 <USART_SetConfig+0x2e0>
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd66:	2b07      	cmp	r3, #7
 800bd68:	d01a      	beq.n	800bda0 <USART_SetConfig+0x2dc>
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd6e:	2b08      	cmp	r3, #8
 800bd70:	d014      	beq.n	800bd9c <USART_SetConfig+0x2d8>
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd76:	2b09      	cmp	r3, #9
 800bd78:	d00e      	beq.n	800bd98 <USART_SetConfig+0x2d4>
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd7e:	2b0a      	cmp	r3, #10
 800bd80:	d008      	beq.n	800bd94 <USART_SetConfig+0x2d0>
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd86:	2b0b      	cmp	r3, #11
 800bd88:	d102      	bne.n	800bd90 <USART_SetConfig+0x2cc>
 800bd8a:	2380      	movs	r3, #128	; 0x80
 800bd8c:	005b      	lsls	r3, r3, #1
 800bd8e:	e024      	b.n	800bdda <USART_SetConfig+0x316>
 800bd90:	2301      	movs	r3, #1
 800bd92:	e022      	b.n	800bdda <USART_SetConfig+0x316>
 800bd94:	2380      	movs	r3, #128	; 0x80
 800bd96:	e020      	b.n	800bdda <USART_SetConfig+0x316>
 800bd98:	2340      	movs	r3, #64	; 0x40
 800bd9a:	e01e      	b.n	800bdda <USART_SetConfig+0x316>
 800bd9c:	2320      	movs	r3, #32
 800bd9e:	e01c      	b.n	800bdda <USART_SetConfig+0x316>
 800bda0:	2310      	movs	r3, #16
 800bda2:	e01a      	b.n	800bdda <USART_SetConfig+0x316>
 800bda4:	230c      	movs	r3, #12
 800bda6:	e018      	b.n	800bdda <USART_SetConfig+0x316>
 800bda8:	230a      	movs	r3, #10
 800bdaa:	e016      	b.n	800bdda <USART_SetConfig+0x316>
 800bdac:	2308      	movs	r3, #8
 800bdae:	e014      	b.n	800bdda <USART_SetConfig+0x316>
 800bdb0:	2306      	movs	r3, #6
 800bdb2:	e012      	b.n	800bdda <USART_SetConfig+0x316>
 800bdb4:	2304      	movs	r3, #4
 800bdb6:	e010      	b.n	800bdda <USART_SetConfig+0x316>
 800bdb8:	2302      	movs	r3, #2
 800bdba:	e00e      	b.n	800bdda <USART_SetConfig+0x316>
 800bdbc:	cfff69f3 	.word	0xcfff69f3
 800bdc0:	ffffc0f6 	.word	0xffffc0f6
 800bdc4:	40013800 	.word	0x40013800
 800bdc8:	40021000 	.word	0x40021000
 800bdcc:	40004400 	.word	0x40004400
 800bdd0:	40004800 	.word	0x40004800
 800bdd4:	40004c00 	.word	0x40004c00
 800bdd8:	2301      	movs	r3, #1
 800bdda:	0019      	movs	r1, r3
 800bddc:	4886      	ldr	r0, [pc, #536]	; (800bff8 <USART_SetConfig+0x534>)
 800bdde:	f7f4 f991 	bl	8000104 <__udivsi3>
 800bde2:	0003      	movs	r3, r0
 800bde4:	005a      	lsls	r2, r3, #1
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	685b      	ldr	r3, [r3, #4]
 800bdea:	085b      	lsrs	r3, r3, #1
 800bdec:	18d2      	adds	r2, r2, r3
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	685b      	ldr	r3, [r3, #4]
 800bdf2:	0019      	movs	r1, r3
 800bdf4:	0010      	movs	r0, r2
 800bdf6:	f7f4 f985 	bl	8000104 <__udivsi3>
 800bdfa:	0003      	movs	r3, r0
 800bdfc:	61bb      	str	r3, [r7, #24]
      break;
 800bdfe:	e0c3      	b.n	800bf88 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 800be00:	f7fc fc5a 	bl	80086b8 <HAL_RCC_GetSysClockFreq>
 800be04:	0003      	movs	r3, r0
 800be06:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d044      	beq.n	800be9a <USART_SetConfig+0x3d6>
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be14:	2b01      	cmp	r3, #1
 800be16:	d03e      	beq.n	800be96 <USART_SetConfig+0x3d2>
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be1c:	2b02      	cmp	r3, #2
 800be1e:	d038      	beq.n	800be92 <USART_SetConfig+0x3ce>
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be24:	2b03      	cmp	r3, #3
 800be26:	d032      	beq.n	800be8e <USART_SetConfig+0x3ca>
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be2c:	2b04      	cmp	r3, #4
 800be2e:	d02c      	beq.n	800be8a <USART_SetConfig+0x3c6>
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be34:	2b05      	cmp	r3, #5
 800be36:	d026      	beq.n	800be86 <USART_SetConfig+0x3c2>
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be3c:	2b06      	cmp	r3, #6
 800be3e:	d020      	beq.n	800be82 <USART_SetConfig+0x3be>
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be44:	2b07      	cmp	r3, #7
 800be46:	d01a      	beq.n	800be7e <USART_SetConfig+0x3ba>
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be4c:	2b08      	cmp	r3, #8
 800be4e:	d014      	beq.n	800be7a <USART_SetConfig+0x3b6>
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be54:	2b09      	cmp	r3, #9
 800be56:	d00e      	beq.n	800be76 <USART_SetConfig+0x3b2>
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be5c:	2b0a      	cmp	r3, #10
 800be5e:	d008      	beq.n	800be72 <USART_SetConfig+0x3ae>
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be64:	2b0b      	cmp	r3, #11
 800be66:	d102      	bne.n	800be6e <USART_SetConfig+0x3aa>
 800be68:	2380      	movs	r3, #128	; 0x80
 800be6a:	005b      	lsls	r3, r3, #1
 800be6c:	e016      	b.n	800be9c <USART_SetConfig+0x3d8>
 800be6e:	2301      	movs	r3, #1
 800be70:	e014      	b.n	800be9c <USART_SetConfig+0x3d8>
 800be72:	2380      	movs	r3, #128	; 0x80
 800be74:	e012      	b.n	800be9c <USART_SetConfig+0x3d8>
 800be76:	2340      	movs	r3, #64	; 0x40
 800be78:	e010      	b.n	800be9c <USART_SetConfig+0x3d8>
 800be7a:	2320      	movs	r3, #32
 800be7c:	e00e      	b.n	800be9c <USART_SetConfig+0x3d8>
 800be7e:	2310      	movs	r3, #16
 800be80:	e00c      	b.n	800be9c <USART_SetConfig+0x3d8>
 800be82:	230c      	movs	r3, #12
 800be84:	e00a      	b.n	800be9c <USART_SetConfig+0x3d8>
 800be86:	230a      	movs	r3, #10
 800be88:	e008      	b.n	800be9c <USART_SetConfig+0x3d8>
 800be8a:	2308      	movs	r3, #8
 800be8c:	e006      	b.n	800be9c <USART_SetConfig+0x3d8>
 800be8e:	2306      	movs	r3, #6
 800be90:	e004      	b.n	800be9c <USART_SetConfig+0x3d8>
 800be92:	2304      	movs	r3, #4
 800be94:	e002      	b.n	800be9c <USART_SetConfig+0x3d8>
 800be96:	2302      	movs	r3, #2
 800be98:	e000      	b.n	800be9c <USART_SetConfig+0x3d8>
 800be9a:	2301      	movs	r3, #1
 800be9c:	0019      	movs	r1, r3
 800be9e:	6938      	ldr	r0, [r7, #16]
 800bea0:	f7f4 f930 	bl	8000104 <__udivsi3>
 800bea4:	0003      	movs	r3, r0
 800bea6:	005a      	lsls	r2, r3, #1
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	685b      	ldr	r3, [r3, #4]
 800beac:	085b      	lsrs	r3, r3, #1
 800beae:	18d2      	adds	r2, r2, r3
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	685b      	ldr	r3, [r3, #4]
 800beb4:	0019      	movs	r1, r3
 800beb6:	0010      	movs	r0, r2
 800beb8:	f7f4 f924 	bl	8000104 <__udivsi3>
 800bebc:	0003      	movs	r3, r0
 800bebe:	61bb      	str	r3, [r7, #24]
      break;
 800bec0:	e062      	b.n	800bf88 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d044      	beq.n	800bf54 <USART_SetConfig+0x490>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bece:	2b01      	cmp	r3, #1
 800bed0:	d03e      	beq.n	800bf50 <USART_SetConfig+0x48c>
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bed6:	2b02      	cmp	r3, #2
 800bed8:	d038      	beq.n	800bf4c <USART_SetConfig+0x488>
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bede:	2b03      	cmp	r3, #3
 800bee0:	d032      	beq.n	800bf48 <USART_SetConfig+0x484>
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bee6:	2b04      	cmp	r3, #4
 800bee8:	d02c      	beq.n	800bf44 <USART_SetConfig+0x480>
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beee:	2b05      	cmp	r3, #5
 800bef0:	d026      	beq.n	800bf40 <USART_SetConfig+0x47c>
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bef6:	2b06      	cmp	r3, #6
 800bef8:	d020      	beq.n	800bf3c <USART_SetConfig+0x478>
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800befe:	2b07      	cmp	r3, #7
 800bf00:	d01a      	beq.n	800bf38 <USART_SetConfig+0x474>
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf06:	2b08      	cmp	r3, #8
 800bf08:	d014      	beq.n	800bf34 <USART_SetConfig+0x470>
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf0e:	2b09      	cmp	r3, #9
 800bf10:	d00e      	beq.n	800bf30 <USART_SetConfig+0x46c>
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf16:	2b0a      	cmp	r3, #10
 800bf18:	d008      	beq.n	800bf2c <USART_SetConfig+0x468>
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf1e:	2b0b      	cmp	r3, #11
 800bf20:	d102      	bne.n	800bf28 <USART_SetConfig+0x464>
 800bf22:	2380      	movs	r3, #128	; 0x80
 800bf24:	005b      	lsls	r3, r3, #1
 800bf26:	e016      	b.n	800bf56 <USART_SetConfig+0x492>
 800bf28:	2301      	movs	r3, #1
 800bf2a:	e014      	b.n	800bf56 <USART_SetConfig+0x492>
 800bf2c:	2380      	movs	r3, #128	; 0x80
 800bf2e:	e012      	b.n	800bf56 <USART_SetConfig+0x492>
 800bf30:	2340      	movs	r3, #64	; 0x40
 800bf32:	e010      	b.n	800bf56 <USART_SetConfig+0x492>
 800bf34:	2320      	movs	r3, #32
 800bf36:	e00e      	b.n	800bf56 <USART_SetConfig+0x492>
 800bf38:	2310      	movs	r3, #16
 800bf3a:	e00c      	b.n	800bf56 <USART_SetConfig+0x492>
 800bf3c:	230c      	movs	r3, #12
 800bf3e:	e00a      	b.n	800bf56 <USART_SetConfig+0x492>
 800bf40:	230a      	movs	r3, #10
 800bf42:	e008      	b.n	800bf56 <USART_SetConfig+0x492>
 800bf44:	2308      	movs	r3, #8
 800bf46:	e006      	b.n	800bf56 <USART_SetConfig+0x492>
 800bf48:	2306      	movs	r3, #6
 800bf4a:	e004      	b.n	800bf56 <USART_SetConfig+0x492>
 800bf4c:	2304      	movs	r3, #4
 800bf4e:	e002      	b.n	800bf56 <USART_SetConfig+0x492>
 800bf50:	2302      	movs	r3, #2
 800bf52:	e000      	b.n	800bf56 <USART_SetConfig+0x492>
 800bf54:	2301      	movs	r3, #1
 800bf56:	0019      	movs	r1, r3
 800bf58:	2380      	movs	r3, #128	; 0x80
 800bf5a:	0218      	lsls	r0, r3, #8
 800bf5c:	f7f4 f8d2 	bl	8000104 <__udivsi3>
 800bf60:	0003      	movs	r3, r0
 800bf62:	005a      	lsls	r2, r3, #1
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	685b      	ldr	r3, [r3, #4]
 800bf68:	085b      	lsrs	r3, r3, #1
 800bf6a:	18d2      	adds	r2, r2, r3
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	685b      	ldr	r3, [r3, #4]
 800bf70:	0019      	movs	r1, r3
 800bf72:	0010      	movs	r0, r2
 800bf74:	f7f4 f8c6 	bl	8000104 <__udivsi3>
 800bf78:	0003      	movs	r3, r0
 800bf7a:	61bb      	str	r3, [r7, #24]
      break;
 800bf7c:	e004      	b.n	800bf88 <USART_SetConfig+0x4c4>
    default:
      ret = HAL_ERROR;
 800bf7e:	231e      	movs	r3, #30
 800bf80:	18fb      	adds	r3, r7, r3
 800bf82:	2201      	movs	r2, #1
 800bf84:	701a      	strb	r2, [r3, #0]
      break;
 800bf86:	46c0      	nop			; (mov r8, r8)
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800bf88:	69bb      	ldr	r3, [r7, #24]
 800bf8a:	2b0f      	cmp	r3, #15
 800bf8c:	d91c      	bls.n	800bfc8 <USART_SetConfig+0x504>
 800bf8e:	69ba      	ldr	r2, [r7, #24]
 800bf90:	2380      	movs	r3, #128	; 0x80
 800bf92:	025b      	lsls	r3, r3, #9
 800bf94:	429a      	cmp	r2, r3
 800bf96:	d217      	bcs.n	800bfc8 <USART_SetConfig+0x504>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bf98:	69bb      	ldr	r3, [r7, #24]
 800bf9a:	b29a      	uxth	r2, r3
 800bf9c:	200e      	movs	r0, #14
 800bf9e:	183b      	adds	r3, r7, r0
 800bfa0:	210f      	movs	r1, #15
 800bfa2:	438a      	bics	r2, r1
 800bfa4:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bfa6:	69bb      	ldr	r3, [r7, #24]
 800bfa8:	085b      	lsrs	r3, r3, #1
 800bfaa:	b29b      	uxth	r3, r3
 800bfac:	2207      	movs	r2, #7
 800bfae:	4013      	ands	r3, r2
 800bfb0:	b299      	uxth	r1, r3
 800bfb2:	183b      	adds	r3, r7, r0
 800bfb4:	183a      	adds	r2, r7, r0
 800bfb6:	8812      	ldrh	r2, [r2, #0]
 800bfb8:	430a      	orrs	r2, r1
 800bfba:	801a      	strh	r2, [r3, #0]
    husart->Instance->BRR = brrtemp;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	183a      	adds	r2, r7, r0
 800bfc2:	8812      	ldrh	r2, [r2, #0]
 800bfc4:	60da      	str	r2, [r3, #12]
 800bfc6:	e003      	b.n	800bfd0 <USART_SetConfig+0x50c>
  }
  else
  {
    ret = HAL_ERROR;
 800bfc8:	231e      	movs	r3, #30
 800bfca:	18fb      	adds	r3, r7, r3
 800bfcc:	2201      	movs	r2, #1
 800bfce:	701a      	strb	r2, [r3, #0]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2201      	movs	r2, #1
 800bfd4:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2201      	movs	r2, #1
 800bfda:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 800bfe8:	231e      	movs	r3, #30
 800bfea:	18fb      	adds	r3, r7, r3
 800bfec:	781b      	ldrb	r3, [r3, #0]
}
 800bfee:	0018      	movs	r0, r3
 800bff0:	46bd      	mov	sp, r7
 800bff2:	b008      	add	sp, #32
 800bff4:	bd80      	pop	{r7, pc}
 800bff6:	46c0      	nop			; (mov r8, r8)
 800bff8:	00f42400 	.word	0x00f42400

0800bffc <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b086      	sub	sp, #24
 800c000:	af02      	add	r7, sp, #8
 800c002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2200      	movs	r2, #0
 800c008:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c00a:	f7f9 fa2f 	bl	800546c <HAL_GetTick>
 800c00e:	0003      	movs	r3, r0
 800c010:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	2208      	movs	r2, #8
 800c01a:	4013      	ands	r3, r2
 800c01c:	2b08      	cmp	r3, #8
 800c01e:	d10e      	bne.n	800c03e <USART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800c020:	68fa      	ldr	r2, [r7, #12]
 800c022:	2380      	movs	r3, #128	; 0x80
 800c024:	0399      	lsls	r1, r3, #14
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	23fa      	movs	r3, #250	; 0xfa
 800c02a:	009b      	lsls	r3, r3, #2
 800c02c:	9300      	str	r3, [sp, #0]
 800c02e:	0013      	movs	r3, r2
 800c030:	2200      	movs	r2, #0
 800c032:	f7ff fd12 	bl	800ba5a <USART_WaitOnFlagUntilTimeout>
 800c036:	1e03      	subs	r3, r0, #0
 800c038:	d001      	beq.n	800c03e <USART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c03a:	2303      	movs	r3, #3
 800c03c:	e01e      	b.n	800c07c <USART_CheckIdleState+0x80>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	2204      	movs	r2, #4
 800c046:	4013      	ands	r3, r2
 800c048:	2b04      	cmp	r3, #4
 800c04a:	d10e      	bne.n	800c06a <USART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800c04c:	68fa      	ldr	r2, [r7, #12]
 800c04e:	2380      	movs	r3, #128	; 0x80
 800c050:	03d9      	lsls	r1, r3, #15
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	23fa      	movs	r3, #250	; 0xfa
 800c056:	009b      	lsls	r3, r3, #2
 800c058:	9300      	str	r3, [sp, #0]
 800c05a:	0013      	movs	r3, r2
 800c05c:	2200      	movs	r2, #0
 800c05e:	f7ff fcfc 	bl	800ba5a <USART_WaitOnFlagUntilTimeout>
 800c062:	1e03      	subs	r3, r0, #0
 800c064:	d001      	beq.n	800c06a <USART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c066:	2303      	movs	r3, #3
 800c068:	e008      	b.n	800c07c <USART_CheckIdleState+0x80>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2259      	movs	r2, #89	; 0x59
 800c06e:	2101      	movs	r1, #1
 800c070:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2258      	movs	r2, #88	; 0x58
 800c076:	2100      	movs	r1, #0
 800c078:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c07a:	2300      	movs	r3, #0
}
 800c07c:	0018      	movs	r0, r3
 800c07e:	46bd      	mov	sp, r7
 800c080:	b004      	add	sp, #16
 800c082:	bd80      	pop	{r7, pc}

0800c084 <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b082      	sub	sp, #8
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	681a      	ldr	r2, [r3, #0]
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	2140      	movs	r1, #64	; 0x40
 800c098:	438a      	bics	r2, r1
 800c09a:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	689a      	ldr	r2, [r3, #8]
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	2101      	movs	r1, #1
 800c0a8:	438a      	bics	r2, r1
 800c0aa:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	64da      	str	r2, [r3, #76]	; 0x4c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2259      	movs	r2, #89	; 0x59
 800c0b6:	5c9b      	ldrb	r3, [r3, r2]
 800c0b8:	b2db      	uxtb	r3, r3
 800c0ba:	2b12      	cmp	r3, #18
 800c0bc:	d114      	bne.n	800c0e8 <USART_EndTransmit_IT+0x64>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	2208      	movs	r2, #8
 800c0c4:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	699a      	ldr	r2, [r3, #24]
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	2108      	movs	r1, #8
 800c0d2:	430a      	orrs	r2, r1
 800c0d4:	619a      	str	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2259      	movs	r2, #89	; 0x59
 800c0da:	2101      	movs	r1, #1
 800c0dc:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	0018      	movs	r0, r3
 800c0e2:	f7f5 f835 	bl	8001150 <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c0e6:	e00c      	b.n	800c102 <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c0ec:	b29b      	uxth	r3, r3
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d107      	bne.n	800c102 <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	2259      	movs	r2, #89	; 0x59
 800c0f6:	2101      	movs	r1, #1
 800c0f8:	5499      	strb	r1, [r3, r2]
    HAL_USART_TxRxCpltCallback(husart);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	0018      	movs	r0, r3
 800c0fe:	f7ff fc67 	bl	800b9d0 <HAL_USART_TxRxCpltCallback>
}
 800c102:	46c0      	nop			; (mov r8, r8)
 800c104:	46bd      	mov	sp, r7
 800c106:	b002      	add	sp, #8
 800c108:	bd80      	pop	{r7, pc}

0800c10a <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
 800c10a:	b580      	push	{r7, lr}
 800c10c:	b082      	sub	sp, #8
 800c10e:	af00      	add	r7, sp, #0
 800c110:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c112:	46c0      	nop			; (mov r8, r8)
 800c114:	46bd      	mov	sp, r7
 800c116:	b002      	add	sp, #8
 800c118:	bd80      	pop	{r7, pc}

0800c11a <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
 800c11a:	b580      	push	{r7, lr}
 800c11c:	b082      	sub	sp, #8
 800c11e:	af00      	add	r7, sp, #0
 800c120:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c122:	46c0      	nop			; (mov r8, r8)
 800c124:	46bd      	mov	sp, r7
 800c126:	b002      	add	sp, #8
 800c128:	bd80      	pop	{r7, pc}

0800c12a <LL_GPIO_SetPinMode>:
{
 800c12a:	b580      	push	{r7, lr}
 800c12c:	b084      	sub	sp, #16
 800c12e:	af00      	add	r7, sp, #0
 800c130:	60f8      	str	r0, [r7, #12]
 800c132:	60b9      	str	r1, [r7, #8]
 800c134:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	6819      	ldr	r1, [r3, #0]
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	435b      	muls	r3, r3
 800c13e:	001a      	movs	r2, r3
 800c140:	0013      	movs	r3, r2
 800c142:	005b      	lsls	r3, r3, #1
 800c144:	189b      	adds	r3, r3, r2
 800c146:	43db      	mvns	r3, r3
 800c148:	400b      	ands	r3, r1
 800c14a:	001a      	movs	r2, r3
 800c14c:	68bb      	ldr	r3, [r7, #8]
 800c14e:	435b      	muls	r3, r3
 800c150:	6879      	ldr	r1, [r7, #4]
 800c152:	434b      	muls	r3, r1
 800c154:	431a      	orrs	r2, r3
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	601a      	str	r2, [r3, #0]
}
 800c15a:	46c0      	nop			; (mov r8, r8)
 800c15c:	46bd      	mov	sp, r7
 800c15e:	b004      	add	sp, #16
 800c160:	bd80      	pop	{r7, pc}

0800c162 <LL_GPIO_SetPinOutputType>:
{
 800c162:	b580      	push	{r7, lr}
 800c164:	b084      	sub	sp, #16
 800c166:	af00      	add	r7, sp, #0
 800c168:	60f8      	str	r0, [r7, #12]
 800c16a:	60b9      	str	r1, [r7, #8]
 800c16c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	685b      	ldr	r3, [r3, #4]
 800c172:	68ba      	ldr	r2, [r7, #8]
 800c174:	43d2      	mvns	r2, r2
 800c176:	401a      	ands	r2, r3
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	6879      	ldr	r1, [r7, #4]
 800c17c:	434b      	muls	r3, r1
 800c17e:	431a      	orrs	r2, r3
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	605a      	str	r2, [r3, #4]
}
 800c184:	46c0      	nop			; (mov r8, r8)
 800c186:	46bd      	mov	sp, r7
 800c188:	b004      	add	sp, #16
 800c18a:	bd80      	pop	{r7, pc}

0800c18c <LL_GPIO_SetPinSpeed>:
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b084      	sub	sp, #16
 800c190:	af00      	add	r7, sp, #0
 800c192:	60f8      	str	r0, [r7, #12]
 800c194:	60b9      	str	r1, [r7, #8]
 800c196:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	6899      	ldr	r1, [r3, #8]
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	435b      	muls	r3, r3
 800c1a0:	001a      	movs	r2, r3
 800c1a2:	0013      	movs	r3, r2
 800c1a4:	005b      	lsls	r3, r3, #1
 800c1a6:	189b      	adds	r3, r3, r2
 800c1a8:	43db      	mvns	r3, r3
 800c1aa:	400b      	ands	r3, r1
 800c1ac:	001a      	movs	r2, r3
 800c1ae:	68bb      	ldr	r3, [r7, #8]
 800c1b0:	435b      	muls	r3, r3
 800c1b2:	6879      	ldr	r1, [r7, #4]
 800c1b4:	434b      	muls	r3, r1
 800c1b6:	431a      	orrs	r2, r3
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	609a      	str	r2, [r3, #8]
}
 800c1bc:	46c0      	nop			; (mov r8, r8)
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	b004      	add	sp, #16
 800c1c2:	bd80      	pop	{r7, pc}

0800c1c4 <LL_GPIO_SetPinPull>:
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b084      	sub	sp, #16
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	60f8      	str	r0, [r7, #12]
 800c1cc:	60b9      	str	r1, [r7, #8]
 800c1ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	68d9      	ldr	r1, [r3, #12]
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	435b      	muls	r3, r3
 800c1d8:	001a      	movs	r2, r3
 800c1da:	0013      	movs	r3, r2
 800c1dc:	005b      	lsls	r3, r3, #1
 800c1de:	189b      	adds	r3, r3, r2
 800c1e0:	43db      	mvns	r3, r3
 800c1e2:	400b      	ands	r3, r1
 800c1e4:	001a      	movs	r2, r3
 800c1e6:	68bb      	ldr	r3, [r7, #8]
 800c1e8:	435b      	muls	r3, r3
 800c1ea:	6879      	ldr	r1, [r7, #4]
 800c1ec:	434b      	muls	r3, r1
 800c1ee:	431a      	orrs	r2, r3
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	60da      	str	r2, [r3, #12]
}
 800c1f4:	46c0      	nop			; (mov r8, r8)
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	b004      	add	sp, #16
 800c1fa:	bd80      	pop	{r7, pc}

0800c1fc <LL_GPIO_SetAFPin_0_7>:
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b084      	sub	sp, #16
 800c200:	af00      	add	r7, sp, #0
 800c202:	60f8      	str	r0, [r7, #12]
 800c204:	60b9      	str	r1, [r7, #8]
 800c206:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	6a19      	ldr	r1, [r3, #32]
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	435b      	muls	r3, r3
 800c210:	68ba      	ldr	r2, [r7, #8]
 800c212:	4353      	muls	r3, r2
 800c214:	68ba      	ldr	r2, [r7, #8]
 800c216:	435a      	muls	r2, r3
 800c218:	0013      	movs	r3, r2
 800c21a:	011b      	lsls	r3, r3, #4
 800c21c:	1a9b      	subs	r3, r3, r2
 800c21e:	43db      	mvns	r3, r3
 800c220:	400b      	ands	r3, r1
 800c222:	001a      	movs	r2, r3
 800c224:	68bb      	ldr	r3, [r7, #8]
 800c226:	435b      	muls	r3, r3
 800c228:	68b9      	ldr	r1, [r7, #8]
 800c22a:	434b      	muls	r3, r1
 800c22c:	68b9      	ldr	r1, [r7, #8]
 800c22e:	434b      	muls	r3, r1
 800c230:	6879      	ldr	r1, [r7, #4]
 800c232:	434b      	muls	r3, r1
 800c234:	431a      	orrs	r2, r3
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	621a      	str	r2, [r3, #32]
}
 800c23a:	46c0      	nop			; (mov r8, r8)
 800c23c:	46bd      	mov	sp, r7
 800c23e:	b004      	add	sp, #16
 800c240:	bd80      	pop	{r7, pc}

0800c242 <LL_GPIO_SetAFPin_8_15>:
{
 800c242:	b580      	push	{r7, lr}
 800c244:	b084      	sub	sp, #16
 800c246:	af00      	add	r7, sp, #0
 800c248:	60f8      	str	r0, [r7, #12]
 800c24a:	60b9      	str	r1, [r7, #8]
 800c24c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800c252:	68bb      	ldr	r3, [r7, #8]
 800c254:	0a1b      	lsrs	r3, r3, #8
 800c256:	68ba      	ldr	r2, [r7, #8]
 800c258:	0a12      	lsrs	r2, r2, #8
 800c25a:	4353      	muls	r3, r2
 800c25c:	68ba      	ldr	r2, [r7, #8]
 800c25e:	0a12      	lsrs	r2, r2, #8
 800c260:	4353      	muls	r3, r2
 800c262:	68ba      	ldr	r2, [r7, #8]
 800c264:	0a12      	lsrs	r2, r2, #8
 800c266:	435a      	muls	r2, r3
 800c268:	0013      	movs	r3, r2
 800c26a:	011b      	lsls	r3, r3, #4
 800c26c:	1a9b      	subs	r3, r3, r2
 800c26e:	43db      	mvns	r3, r3
 800c270:	400b      	ands	r3, r1
 800c272:	001a      	movs	r2, r3
 800c274:	68bb      	ldr	r3, [r7, #8]
 800c276:	0a1b      	lsrs	r3, r3, #8
 800c278:	68b9      	ldr	r1, [r7, #8]
 800c27a:	0a09      	lsrs	r1, r1, #8
 800c27c:	434b      	muls	r3, r1
 800c27e:	68b9      	ldr	r1, [r7, #8]
 800c280:	0a09      	lsrs	r1, r1, #8
 800c282:	434b      	muls	r3, r1
 800c284:	68b9      	ldr	r1, [r7, #8]
 800c286:	0a09      	lsrs	r1, r1, #8
 800c288:	434b      	muls	r3, r1
 800c28a:	6879      	ldr	r1, [r7, #4]
 800c28c:	434b      	muls	r3, r1
 800c28e:	431a      	orrs	r2, r3
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	625a      	str	r2, [r3, #36]	; 0x24
}
 800c294:	46c0      	nop			; (mov r8, r8)
 800c296:	46bd      	mov	sp, r7
 800c298:	b004      	add	sp, #16
 800c29a:	bd80      	pop	{r7, pc}

0800c29c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b084      	sub	sp, #16
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
 800c2a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800c2aa:	e047      	b.n	800c33c <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	2101      	movs	r1, #1
 800c2b2:	68fa      	ldr	r2, [r7, #12]
 800c2b4:	4091      	lsls	r1, r2
 800c2b6:	000a      	movs	r2, r1
 800c2b8:	4013      	ands	r3, r2
 800c2ba:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d039      	beq.n	800c336 <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	685b      	ldr	r3, [r3, #4]
 800c2c6:	2b01      	cmp	r3, #1
 800c2c8:	d003      	beq.n	800c2d2 <LL_GPIO_Init+0x36>
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	685b      	ldr	r3, [r3, #4]
 800c2ce:	2b02      	cmp	r3, #2
 800c2d0:	d10d      	bne.n	800c2ee <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	689a      	ldr	r2, [r3, #8]
 800c2d6:	68b9      	ldr	r1, [r7, #8]
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	0018      	movs	r0, r3
 800c2dc:	f7ff ff56 	bl	800c18c <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	68da      	ldr	r2, [r3, #12]
 800c2e4:	68b9      	ldr	r1, [r7, #8]
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	0018      	movs	r0, r3
 800c2ea:	f7ff ff3a 	bl	800c162 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	691a      	ldr	r2, [r3, #16]
 800c2f2:	68b9      	ldr	r1, [r7, #8]
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	0018      	movs	r0, r3
 800c2f8:	f7ff ff64 	bl	800c1c4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	685b      	ldr	r3, [r3, #4]
 800c300:	2b02      	cmp	r3, #2
 800c302:	d111      	bne.n	800c328 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	2bff      	cmp	r3, #255	; 0xff
 800c308:	d807      	bhi.n	800c31a <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	695a      	ldr	r2, [r3, #20]
 800c30e:	68b9      	ldr	r1, [r7, #8]
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	0018      	movs	r0, r3
 800c314:	f7ff ff72 	bl	800c1fc <LL_GPIO_SetAFPin_0_7>
 800c318:	e006      	b.n	800c328 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	695a      	ldr	r2, [r3, #20]
 800c31e:	68b9      	ldr	r1, [r7, #8]
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	0018      	movs	r0, r3
 800c324:	f7ff ff8d 	bl	800c242 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	685a      	ldr	r2, [r3, #4]
 800c32c:	68b9      	ldr	r1, [r7, #8]
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	0018      	movs	r0, r3
 800c332:	f7ff fefa 	bl	800c12a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	3301      	adds	r3, #1
 800c33a:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	681a      	ldr	r2, [r3, #0]
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	40da      	lsrs	r2, r3
 800c344:	1e13      	subs	r3, r2, #0
 800c346:	d1b1      	bne.n	800c2ac <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800c348:	2300      	movs	r3, #0
}
 800c34a:	0018      	movs	r0, r3
 800c34c:	46bd      	mov	sp, r7
 800c34e:	b004      	add	sp, #16
 800c350:	bd80      	pop	{r7, pc}
	...

0800c354 <LL_RCC_HSI_IsReady>:
{
 800c354:	b580      	push	{r7, lr}
 800c356:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800c358:	4b07      	ldr	r3, [pc, #28]	; (800c378 <LL_RCC_HSI_IsReady+0x24>)
 800c35a:	681a      	ldr	r2, [r3, #0]
 800c35c:	2380      	movs	r3, #128	; 0x80
 800c35e:	00db      	lsls	r3, r3, #3
 800c360:	401a      	ands	r2, r3
 800c362:	2380      	movs	r3, #128	; 0x80
 800c364:	00db      	lsls	r3, r3, #3
 800c366:	429a      	cmp	r2, r3
 800c368:	d101      	bne.n	800c36e <LL_RCC_HSI_IsReady+0x1a>
 800c36a:	2301      	movs	r3, #1
 800c36c:	e000      	b.n	800c370 <LL_RCC_HSI_IsReady+0x1c>
 800c36e:	2300      	movs	r3, #0
}
 800c370:	0018      	movs	r0, r3
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}
 800c376:	46c0      	nop			; (mov r8, r8)
 800c378:	40021000 	.word	0x40021000

0800c37c <LL_RCC_LSE_IsReady>:
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800c380:	4b05      	ldr	r3, [pc, #20]	; (800c398 <LL_RCC_LSE_IsReady+0x1c>)
 800c382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c384:	2202      	movs	r2, #2
 800c386:	4013      	ands	r3, r2
 800c388:	2b02      	cmp	r3, #2
 800c38a:	d101      	bne.n	800c390 <LL_RCC_LSE_IsReady+0x14>
 800c38c:	2301      	movs	r3, #1
 800c38e:	e000      	b.n	800c392 <LL_RCC_LSE_IsReady+0x16>
 800c390:	2300      	movs	r3, #0
}
 800c392:	0018      	movs	r0, r3
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}
 800c398:	40021000 	.word	0x40021000

0800c39c <LL_RCC_GetSysClkSource>:
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800c3a0:	4b03      	ldr	r3, [pc, #12]	; (800c3b0 <LL_RCC_GetSysClkSource+0x14>)
 800c3a2:	689b      	ldr	r3, [r3, #8]
 800c3a4:	2238      	movs	r2, #56	; 0x38
 800c3a6:	4013      	ands	r3, r2
}
 800c3a8:	0018      	movs	r0, r3
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}
 800c3ae:	46c0      	nop			; (mov r8, r8)
 800c3b0:	40021000 	.word	0x40021000

0800c3b4 <LL_RCC_GetAHBPrescaler>:
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800c3b8:	4b03      	ldr	r3, [pc, #12]	; (800c3c8 <LL_RCC_GetAHBPrescaler+0x14>)
 800c3ba:	689a      	ldr	r2, [r3, #8]
 800c3bc:	23f0      	movs	r3, #240	; 0xf0
 800c3be:	011b      	lsls	r3, r3, #4
 800c3c0:	4013      	ands	r3, r2
}
 800c3c2:	0018      	movs	r0, r3
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}
 800c3c8:	40021000 	.word	0x40021000

0800c3cc <LL_RCC_GetAPB1Prescaler>:
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800c3d0:	4b03      	ldr	r3, [pc, #12]	; (800c3e0 <LL_RCC_GetAPB1Prescaler+0x14>)
 800c3d2:	689a      	ldr	r2, [r3, #8]
 800c3d4:	23e0      	movs	r3, #224	; 0xe0
 800c3d6:	01db      	lsls	r3, r3, #7
 800c3d8:	4013      	ands	r3, r2
}
 800c3da:	0018      	movs	r0, r3
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}
 800c3e0:	40021000 	.word	0x40021000

0800c3e4 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  * (*) feature not available on all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b082      	sub	sp, #8
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800c3ec:	4b05      	ldr	r3, [pc, #20]	; (800c404 <LL_RCC_GetUSARTClockSource+0x20>)
 800c3ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3f0:	687a      	ldr	r2, [r7, #4]
 800c3f2:	401a      	ands	r2, r3
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	041b      	lsls	r3, r3, #16
 800c3f8:	4313      	orrs	r3, r2
}
 800c3fa:	0018      	movs	r0, r3
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	b002      	add	sp, #8
 800c400:	bd80      	pop	{r7, pc}
 800c402:	46c0      	nop			; (mov r8, r8)
 800c404:	40021000 	.word	0x40021000

0800c408 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800c40c:	4b03      	ldr	r3, [pc, #12]	; (800c41c <LL_RCC_PLL_GetN+0x14>)
 800c40e:	68db      	ldr	r3, [r3, #12]
 800c410:	0a1b      	lsrs	r3, r3, #8
 800c412:	227f      	movs	r2, #127	; 0x7f
 800c414:	4013      	ands	r3, r2
}
 800c416:	0018      	movs	r0, r3
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd80      	pop	{r7, pc}
 800c41c:	40021000 	.word	0x40021000

0800c420 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800c424:	4b03      	ldr	r3, [pc, #12]	; (800c434 <LL_RCC_PLL_GetR+0x14>)
 800c426:	68db      	ldr	r3, [r3, #12]
 800c428:	0f5b      	lsrs	r3, r3, #29
 800c42a:	075b      	lsls	r3, r3, #29
}
 800c42c:	0018      	movs	r0, r3
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}
 800c432:	46c0      	nop			; (mov r8, r8)
 800c434:	40021000 	.word	0x40021000

0800c438 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800c43c:	4b03      	ldr	r3, [pc, #12]	; (800c44c <LL_RCC_PLL_GetMainSource+0x14>)
 800c43e:	68db      	ldr	r3, [r3, #12]
 800c440:	2203      	movs	r2, #3
 800c442:	4013      	ands	r3, r2
}
 800c444:	0018      	movs	r0, r3
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}
 800c44a:	46c0      	nop			; (mov r8, r8)
 800c44c:	40021000 	.word	0x40021000

0800c450 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800c454:	4b03      	ldr	r3, [pc, #12]	; (800c464 <LL_RCC_PLL_GetDivider+0x14>)
 800c456:	68db      	ldr	r3, [r3, #12]
 800c458:	2270      	movs	r2, #112	; 0x70
 800c45a:	4013      	ands	r3, r2
}
 800c45c:	0018      	movs	r0, r3
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}
 800c462:	46c0      	nop			; (mov r8, r8)
 800c464:	40021000 	.word	0x40021000

0800c468 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b082      	sub	sp, #8
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800c470:	f000 f8a8 	bl	800c5c4 <RCC_GetSystemClockFreq>
 800c474:	0002      	movs	r2, r0
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	0018      	movs	r0, r3
 800c480:	f000 f8ce 	bl	800c620 <RCC_GetHCLKClockFreq>
 800c484:	0002      	movs	r2, r0
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	685b      	ldr	r3, [r3, #4]
 800c48e:	0018      	movs	r0, r3
 800c490:	f000 f8de 	bl	800c650 <RCC_GetPCLK1ClockFreq>
 800c494:	0002      	movs	r2, r0
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	609a      	str	r2, [r3, #8]
}
 800c49a:	46c0      	nop			; (mov r8, r8)
 800c49c:	46bd      	mov	sp, r7
 800c49e:	b002      	add	sp, #8
 800c4a0:	bd80      	pop	{r7, pc}
	...

0800c4a4 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b084      	sub	sp, #16
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2b03      	cmp	r3, #3
 800c4b4:	d134      	bne.n	800c520 <LL_RCC_GetUSARTClockFreq+0x7c>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	0018      	movs	r0, r3
 800c4ba:	f7ff ff93 	bl	800c3e4 <LL_RCC_GetUSARTClockSource>
 800c4be:	0003      	movs	r3, r0
 800c4c0:	4a39      	ldr	r2, [pc, #228]	; (800c5a8 <LL_RCC_GetUSARTClockFreq+0x104>)
 800c4c2:	4293      	cmp	r3, r2
 800c4c4:	d016      	beq.n	800c4f4 <LL_RCC_GetUSARTClockFreq+0x50>
 800c4c6:	4a38      	ldr	r2, [pc, #224]	; (800c5a8 <LL_RCC_GetUSARTClockFreq+0x104>)
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	d81c      	bhi.n	800c506 <LL_RCC_GetUSARTClockFreq+0x62>
 800c4cc:	4a37      	ldr	r2, [pc, #220]	; (800c5ac <LL_RCC_GetUSARTClockFreq+0x108>)
 800c4ce:	4293      	cmp	r3, r2
 800c4d0:	d003      	beq.n	800c4da <LL_RCC_GetUSARTClockFreq+0x36>
 800c4d2:	4a37      	ldr	r2, [pc, #220]	; (800c5b0 <LL_RCC_GetUSARTClockFreq+0x10c>)
 800c4d4:	4293      	cmp	r3, r2
 800c4d6:	d005      	beq.n	800c4e4 <LL_RCC_GetUSARTClockFreq+0x40>
 800c4d8:	e015      	b.n	800c506 <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800c4da:	f000 f873 	bl	800c5c4 <RCC_GetSystemClockFreq>
 800c4de:	0003      	movs	r3, r0
 800c4e0:	60fb      	str	r3, [r7, #12]
        break;
 800c4e2:	e05c      	b.n	800c59e <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800c4e4:	f7ff ff36 	bl	800c354 <LL_RCC_HSI_IsReady>
 800c4e8:	0003      	movs	r3, r0
 800c4ea:	2b01      	cmp	r3, #1
 800c4ec:	d150      	bne.n	800c590 <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = HSI_VALUE;
 800c4ee:	4b31      	ldr	r3, [pc, #196]	; (800c5b4 <LL_RCC_GetUSARTClockFreq+0x110>)
 800c4f0:	60fb      	str	r3, [r7, #12]
        }
        break;
 800c4f2:	e04d      	b.n	800c590 <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800c4f4:	f7ff ff42 	bl	800c37c <LL_RCC_LSE_IsReady>
 800c4f8:	0003      	movs	r3, r0
 800c4fa:	2b01      	cmp	r3, #1
 800c4fc:	d14a      	bne.n	800c594 <LL_RCC_GetUSARTClockFreq+0xf0>
        {
          usart_frequency = LSE_VALUE;
 800c4fe:	2380      	movs	r3, #128	; 0x80
 800c500:	021b      	lsls	r3, r3, #8
 800c502:	60fb      	str	r3, [r7, #12]
        }
        break;
 800c504:	e046      	b.n	800c594 <LL_RCC_GetUSARTClockFreq+0xf0>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800c506:	f000 f85d 	bl	800c5c4 <RCC_GetSystemClockFreq>
 800c50a:	0003      	movs	r3, r0
 800c50c:	0018      	movs	r0, r3
 800c50e:	f000 f887 	bl	800c620 <RCC_GetHCLKClockFreq>
 800c512:	0003      	movs	r3, r0
 800c514:	0018      	movs	r0, r3
 800c516:	f000 f89b 	bl	800c650 <RCC_GetPCLK1ClockFreq>
 800c51a:	0003      	movs	r3, r0
 800c51c:	60fb      	str	r3, [r7, #12]
        break;
 800c51e:	e03e      	b.n	800c59e <LL_RCC_GetUSARTClockFreq+0xfa>
    }
  }
#if defined(RCC_CCIPR_USART2SEL)
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2b0c      	cmp	r3, #12
 800c524:	d13b      	bne.n	800c59e <LL_RCC_GetUSARTClockFreq+0xfa>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	0018      	movs	r0, r3
 800c52a:	f7ff ff5b 	bl	800c3e4 <LL_RCC_GetUSARTClockSource>
 800c52e:	0003      	movs	r3, r0
 800c530:	4a21      	ldr	r2, [pc, #132]	; (800c5b8 <LL_RCC_GetUSARTClockFreq+0x114>)
 800c532:	4293      	cmp	r3, r2
 800c534:	d016      	beq.n	800c564 <LL_RCC_GetUSARTClockFreq+0xc0>
 800c536:	4a20      	ldr	r2, [pc, #128]	; (800c5b8 <LL_RCC_GetUSARTClockFreq+0x114>)
 800c538:	4293      	cmp	r3, r2
 800c53a:	d81c      	bhi.n	800c576 <LL_RCC_GetUSARTClockFreq+0xd2>
 800c53c:	4a1f      	ldr	r2, [pc, #124]	; (800c5bc <LL_RCC_GetUSARTClockFreq+0x118>)
 800c53e:	4293      	cmp	r3, r2
 800c540:	d003      	beq.n	800c54a <LL_RCC_GetUSARTClockFreq+0xa6>
 800c542:	4a1f      	ldr	r2, [pc, #124]	; (800c5c0 <LL_RCC_GetUSARTClockFreq+0x11c>)
 800c544:	4293      	cmp	r3, r2
 800c546:	d005      	beq.n	800c554 <LL_RCC_GetUSARTClockFreq+0xb0>
 800c548:	e015      	b.n	800c576 <LL_RCC_GetUSARTClockFreq+0xd2>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800c54a:	f000 f83b 	bl	800c5c4 <RCC_GetSystemClockFreq>
 800c54e:	0003      	movs	r3, r0
 800c550:	60fb      	str	r3, [r7, #12]
        break;
 800c552:	e024      	b.n	800c59e <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800c554:	f7ff fefe 	bl	800c354 <LL_RCC_HSI_IsReady>
 800c558:	0003      	movs	r3, r0
 800c55a:	2b01      	cmp	r3, #1
 800c55c:	d11c      	bne.n	800c598 <LL_RCC_GetUSARTClockFreq+0xf4>
        {
          usart_frequency = HSI_VALUE;
 800c55e:	4b15      	ldr	r3, [pc, #84]	; (800c5b4 <LL_RCC_GetUSARTClockFreq+0x110>)
 800c560:	60fb      	str	r3, [r7, #12]
        }
        break;
 800c562:	e019      	b.n	800c598 <LL_RCC_GetUSARTClockFreq+0xf4>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800c564:	f7ff ff0a 	bl	800c37c <LL_RCC_LSE_IsReady>
 800c568:	0003      	movs	r3, r0
 800c56a:	2b01      	cmp	r3, #1
 800c56c:	d116      	bne.n	800c59c <LL_RCC_GetUSARTClockFreq+0xf8>
        {
          usart_frequency = LSE_VALUE;
 800c56e:	2380      	movs	r3, #128	; 0x80
 800c570:	021b      	lsls	r3, r3, #8
 800c572:	60fb      	str	r3, [r7, #12]
        }
        break;
 800c574:	e012      	b.n	800c59c <LL_RCC_GetUSARTClockFreq+0xf8>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800c576:	f000 f825 	bl	800c5c4 <RCC_GetSystemClockFreq>
 800c57a:	0003      	movs	r3, r0
 800c57c:	0018      	movs	r0, r3
 800c57e:	f000 f84f 	bl	800c620 <RCC_GetHCLKClockFreq>
 800c582:	0003      	movs	r3, r0
 800c584:	0018      	movs	r0, r3
 800c586:	f000 f863 	bl	800c650 <RCC_GetPCLK1ClockFreq>
 800c58a:	0003      	movs	r3, r0
 800c58c:	60fb      	str	r3, [r7, #12]
        break;
 800c58e:	e006      	b.n	800c59e <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800c590:	46c0      	nop			; (mov r8, r8)
 800c592:	e004      	b.n	800c59e <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800c594:	46c0      	nop			; (mov r8, r8)
 800c596:	e002      	b.n	800c59e <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800c598:	46c0      	nop			; (mov r8, r8)
 800c59a:	e000      	b.n	800c59e <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800c59c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 800c59e:	68fb      	ldr	r3, [r7, #12]
}
 800c5a0:	0018      	movs	r0, r3
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	b004      	add	sp, #16
 800c5a6:	bd80      	pop	{r7, pc}
 800c5a8:	00030003 	.word	0x00030003
 800c5ac:	00030001 	.word	0x00030001
 800c5b0:	00030002 	.word	0x00030002
 800c5b4:	00f42400 	.word	0x00f42400
 800c5b8:	000c000c 	.word	0x000c000c
 800c5bc:	000c0004 	.word	0x000c0004
 800c5c0:	000c0008 	.word	0x000c0008

0800c5c4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b082      	sub	sp, #8
 800c5c8:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800c5ca:	f7ff fee7 	bl	800c39c <LL_RCC_GetSysClkSource>
 800c5ce:	0003      	movs	r3, r0
 800c5d0:	2b08      	cmp	r3, #8
 800c5d2:	d002      	beq.n	800c5da <RCC_GetSystemClockFreq+0x16>
 800c5d4:	2b10      	cmp	r3, #16
 800c5d6:	d003      	beq.n	800c5e0 <RCC_GetSystemClockFreq+0x1c>
 800c5d8:	e007      	b.n	800c5ea <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800c5da:	4b0e      	ldr	r3, [pc, #56]	; (800c614 <RCC_GetSystemClockFreq+0x50>)
 800c5dc:	607b      	str	r3, [r7, #4]
      break;
 800c5de:	e014      	b.n	800c60a <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800c5e0:	f000 f84c 	bl	800c67c <RCC_PLL_GetFreqDomain_SYS>
 800c5e4:	0003      	movs	r3, r0
 800c5e6:	607b      	str	r3, [r7, #4]
      break;
 800c5e8:	e00f      	b.n	800c60a <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800c5ea:	4b0b      	ldr	r3, [pc, #44]	; (800c618 <RCC_GetSystemClockFreq+0x54>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	0adb      	lsrs	r3, r3, #11
 800c5f0:	2207      	movs	r2, #7
 800c5f2:	4013      	ands	r3, r2
 800c5f4:	2201      	movs	r2, #1
 800c5f6:	409a      	lsls	r2, r3
 800c5f8:	0013      	movs	r3, r2
 800c5fa:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 800c5fc:	6839      	ldr	r1, [r7, #0]
 800c5fe:	4807      	ldr	r0, [pc, #28]	; (800c61c <RCC_GetSystemClockFreq+0x58>)
 800c600:	f7f3 fd80 	bl	8000104 <__udivsi3>
 800c604:	0003      	movs	r3, r0
 800c606:	607b      	str	r3, [r7, #4]
      break;
 800c608:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 800c60a:	687b      	ldr	r3, [r7, #4]
}
 800c60c:	0018      	movs	r0, r3
 800c60e:	46bd      	mov	sp, r7
 800c610:	b002      	add	sp, #8
 800c612:	bd80      	pop	{r7, pc}
 800c614:	007a1200 	.word	0x007a1200
 800c618:	40021000 	.word	0x40021000
 800c61c:	00f42400 	.word	0x00f42400

0800c620 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b082      	sub	sp, #8
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800c628:	f7ff fec4 	bl	800c3b4 <LL_RCC_GetAHBPrescaler>
 800c62c:	0003      	movs	r3, r0
 800c62e:	0a1b      	lsrs	r3, r3, #8
 800c630:	220f      	movs	r2, #15
 800c632:	401a      	ands	r2, r3
 800c634:	4b05      	ldr	r3, [pc, #20]	; (800c64c <RCC_GetHCLKClockFreq+0x2c>)
 800c636:	0092      	lsls	r2, r2, #2
 800c638:	58d3      	ldr	r3, [r2, r3]
 800c63a:	221f      	movs	r2, #31
 800c63c:	4013      	ands	r3, r2
 800c63e:	687a      	ldr	r2, [r7, #4]
 800c640:	40da      	lsrs	r2, r3
 800c642:	0013      	movs	r3, r2
}
 800c644:	0018      	movs	r0, r3
 800c646:	46bd      	mov	sp, r7
 800c648:	b002      	add	sp, #8
 800c64a:	bd80      	pop	{r7, pc}
 800c64c:	08015fcc 	.word	0x08015fcc

0800c650 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b082      	sub	sp, #8
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800c658:	f7ff feb8 	bl	800c3cc <LL_RCC_GetAPB1Prescaler>
 800c65c:	0003      	movs	r3, r0
 800c65e:	0b1a      	lsrs	r2, r3, #12
 800c660:	4b05      	ldr	r3, [pc, #20]	; (800c678 <RCC_GetPCLK1ClockFreq+0x28>)
 800c662:	0092      	lsls	r2, r2, #2
 800c664:	58d3      	ldr	r3, [r2, r3]
 800c666:	221f      	movs	r2, #31
 800c668:	4013      	ands	r3, r2
 800c66a:	687a      	ldr	r2, [r7, #4]
 800c66c:	40da      	lsrs	r2, r3
 800c66e:	0013      	movs	r3, r2
}
 800c670:	0018      	movs	r0, r3
 800c672:	46bd      	mov	sp, r7
 800c674:	b002      	add	sp, #8
 800c676:	bd80      	pop	{r7, pc}
 800c678:	0801600c 	.word	0x0801600c

0800c67c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800c67c:	b590      	push	{r4, r7, lr}
 800c67e:	b083      	sub	sp, #12
 800c680:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800c682:	f7ff fed9 	bl	800c438 <LL_RCC_PLL_GetMainSource>
 800c686:	0003      	movs	r3, r0
 800c688:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	2b02      	cmp	r3, #2
 800c68e:	d003      	beq.n	800c698 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	2b03      	cmp	r3, #3
 800c694:	d003      	beq.n	800c69e <RCC_PLL_GetFreqDomain_SYS+0x22>
 800c696:	e005      	b.n	800c6a4 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800c698:	4b13      	ldr	r3, [pc, #76]	; (800c6e8 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800c69a:	607b      	str	r3, [r7, #4]
      break;
 800c69c:	e005      	b.n	800c6aa <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800c69e:	4b13      	ldr	r3, [pc, #76]	; (800c6ec <RCC_PLL_GetFreqDomain_SYS+0x70>)
 800c6a0:	607b      	str	r3, [r7, #4]
      break;
 800c6a2:	e002      	b.n	800c6aa <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 800c6a4:	4b10      	ldr	r3, [pc, #64]	; (800c6e8 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800c6a6:	607b      	str	r3, [r7, #4]
      break;
 800c6a8:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800c6aa:	f7ff fead 	bl	800c408 <LL_RCC_PLL_GetN>
 800c6ae:	0002      	movs	r2, r0
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	4353      	muls	r3, r2
 800c6b4:	001c      	movs	r4, r3
 800c6b6:	f7ff fecb 	bl	800c450 <LL_RCC_PLL_GetDivider>
 800c6ba:	0003      	movs	r3, r0
 800c6bc:	091b      	lsrs	r3, r3, #4
 800c6be:	3301      	adds	r3, #1
 800c6c0:	0019      	movs	r1, r3
 800c6c2:	0020      	movs	r0, r4
 800c6c4:	f7f3 fd1e 	bl	8000104 <__udivsi3>
 800c6c8:	0003      	movs	r3, r0
 800c6ca:	001c      	movs	r4, r3
 800c6cc:	f7ff fea8 	bl	800c420 <LL_RCC_PLL_GetR>
 800c6d0:	0003      	movs	r3, r0
 800c6d2:	0f5b      	lsrs	r3, r3, #29
 800c6d4:	3301      	adds	r3, #1
 800c6d6:	0019      	movs	r1, r3
 800c6d8:	0020      	movs	r0, r4
 800c6da:	f7f3 fd13 	bl	8000104 <__udivsi3>
 800c6de:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800c6e0:	0018      	movs	r0, r3
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	b003      	add	sp, #12
 800c6e6:	bd90      	pop	{r4, r7, pc}
 800c6e8:	00f42400 	.word	0x00f42400
 800c6ec:	007a1200 	.word	0x007a1200

0800c6f0 <LL_USART_IsEnabled>:
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b082      	sub	sp, #8
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	2201      	movs	r2, #1
 800c6fe:	4013      	ands	r3, r2
 800c700:	2b01      	cmp	r3, #1
 800c702:	d101      	bne.n	800c708 <LL_USART_IsEnabled+0x18>
 800c704:	2301      	movs	r3, #1
 800c706:	e000      	b.n	800c70a <LL_USART_IsEnabled+0x1a>
 800c708:	2300      	movs	r3, #0
}
 800c70a:	0018      	movs	r0, r3
 800c70c:	46bd      	mov	sp, r7
 800c70e:	b002      	add	sp, #8
 800c710:	bd80      	pop	{r7, pc}

0800c712 <LL_USART_SetPrescaler>:
{
 800c712:	b580      	push	{r7, lr}
 800c714:	b082      	sub	sp, #8
 800c716:	af00      	add	r7, sp, #0
 800c718:	6078      	str	r0, [r7, #4]
 800c71a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c720:	220f      	movs	r2, #15
 800c722:	4393      	bics	r3, r2
 800c724:	683a      	ldr	r2, [r7, #0]
 800c726:	b292      	uxth	r2, r2
 800c728:	431a      	orrs	r2, r3
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800c72e:	46c0      	nop			; (mov r8, r8)
 800c730:	46bd      	mov	sp, r7
 800c732:	b002      	add	sp, #8
 800c734:	bd80      	pop	{r7, pc}
	...

0800c738 <LL_USART_SetStopBitsLength>:
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b082      	sub	sp, #8
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
 800c740:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	685b      	ldr	r3, [r3, #4]
 800c746:	4a05      	ldr	r2, [pc, #20]	; (800c75c <LL_USART_SetStopBitsLength+0x24>)
 800c748:	401a      	ands	r2, r3
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	431a      	orrs	r2, r3
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	605a      	str	r2, [r3, #4]
}
 800c752:	46c0      	nop			; (mov r8, r8)
 800c754:	46bd      	mov	sp, r7
 800c756:	b002      	add	sp, #8
 800c758:	bd80      	pop	{r7, pc}
 800c75a:	46c0      	nop			; (mov r8, r8)
 800c75c:	ffffcfff 	.word	0xffffcfff

0800c760 <LL_USART_SetHWFlowCtrl>:
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b082      	sub	sp, #8
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
 800c768:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	689b      	ldr	r3, [r3, #8]
 800c76e:	4a05      	ldr	r2, [pc, #20]	; (800c784 <LL_USART_SetHWFlowCtrl+0x24>)
 800c770:	401a      	ands	r2, r3
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	431a      	orrs	r2, r3
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	609a      	str	r2, [r3, #8]
}
 800c77a:	46c0      	nop			; (mov r8, r8)
 800c77c:	46bd      	mov	sp, r7
 800c77e:	b002      	add	sp, #8
 800c780:	bd80      	pop	{r7, pc}
 800c782:	46c0      	nop			; (mov r8, r8)
 800c784:	fffffcff 	.word	0xfffffcff

0800c788 <LL_USART_SetBaudRate>:
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b086      	sub	sp, #24
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	60f8      	str	r0, [r7, #12]
 800c790:	60b9      	str	r1, [r7, #8]
 800c792:	607a      	str	r2, [r7, #4]
 800c794:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	2b0b      	cmp	r3, #11
 800c79a:	d846      	bhi.n	800c82a <LL_USART_SetBaudRate+0xa2>
  else if (BaudRate == 0U)
 800c79c:	6a3b      	ldr	r3, [r7, #32]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d043      	beq.n	800c82a <LL_USART_SetBaudRate+0xa2>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800c7a2:	683a      	ldr	r2, [r7, #0]
 800c7a4:	2380      	movs	r3, #128	; 0x80
 800c7a6:	021b      	lsls	r3, r3, #8
 800c7a8:	429a      	cmp	r2, r3
 800c7aa:	d126      	bne.n	800c7fa <LL_USART_SetBaudRate+0x72>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	b2db      	uxtb	r3, r3
 800c7b0:	001a      	movs	r2, r3
 800c7b2:	4b20      	ldr	r3, [pc, #128]	; (800c834 <LL_USART_SetBaudRate+0xac>)
 800c7b4:	0092      	lsls	r2, r2, #2
 800c7b6:	58d3      	ldr	r3, [r2, r3]
 800c7b8:	0019      	movs	r1, r3
 800c7ba:	68b8      	ldr	r0, [r7, #8]
 800c7bc:	f7f3 fca2 	bl	8000104 <__udivsi3>
 800c7c0:	0003      	movs	r3, r0
 800c7c2:	005a      	lsls	r2, r3, #1
 800c7c4:	6a3b      	ldr	r3, [r7, #32]
 800c7c6:	085b      	lsrs	r3, r3, #1
 800c7c8:	18d3      	adds	r3, r2, r3
 800c7ca:	6a39      	ldr	r1, [r7, #32]
 800c7cc:	0018      	movs	r0, r3
 800c7ce:	f7f3 fc99 	bl	8000104 <__udivsi3>
 800c7d2:	0003      	movs	r3, r0
 800c7d4:	b29b      	uxth	r3, r3
 800c7d6:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800c7d8:	697b      	ldr	r3, [r7, #20]
 800c7da:	4a17      	ldr	r2, [pc, #92]	; (800c838 <LL_USART_SetBaudRate+0xb0>)
 800c7dc:	4013      	ands	r3, r2
 800c7de:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c7e0:	697b      	ldr	r3, [r7, #20]
 800c7e2:	085b      	lsrs	r3, r3, #1
 800c7e4:	b29b      	uxth	r3, r3
 800c7e6:	001a      	movs	r2, r3
 800c7e8:	2307      	movs	r3, #7
 800c7ea:	4013      	ands	r3, r2
 800c7ec:	693a      	ldr	r2, [r7, #16]
 800c7ee:	4313      	orrs	r3, r2
 800c7f0:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	693a      	ldr	r2, [r7, #16]
 800c7f6:	60da      	str	r2, [r3, #12]
}
 800c7f8:	e017      	b.n	800c82a <LL_USART_SetBaudRate+0xa2>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	b2db      	uxtb	r3, r3
 800c7fe:	001a      	movs	r2, r3
 800c800:	4b0c      	ldr	r3, [pc, #48]	; (800c834 <LL_USART_SetBaudRate+0xac>)
 800c802:	0092      	lsls	r2, r2, #2
 800c804:	58d3      	ldr	r3, [r2, r3]
 800c806:	0019      	movs	r1, r3
 800c808:	68b8      	ldr	r0, [r7, #8]
 800c80a:	f7f3 fc7b 	bl	8000104 <__udivsi3>
 800c80e:	0003      	movs	r3, r0
 800c810:	001a      	movs	r2, r3
 800c812:	6a3b      	ldr	r3, [r7, #32]
 800c814:	085b      	lsrs	r3, r3, #1
 800c816:	18d3      	adds	r3, r2, r3
 800c818:	6a39      	ldr	r1, [r7, #32]
 800c81a:	0018      	movs	r0, r3
 800c81c:	f7f3 fc72 	bl	8000104 <__udivsi3>
 800c820:	0003      	movs	r3, r0
 800c822:	b29b      	uxth	r3, r3
 800c824:	001a      	movs	r2, r3
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	60da      	str	r2, [r3, #12]
}
 800c82a:	46c0      	nop			; (mov r8, r8)
 800c82c:	46bd      	mov	sp, r7
 800c82e:	b006      	add	sp, #24
 800c830:	bd80      	pop	{r7, pc}
 800c832:	46c0      	nop			; (mov r8, r8)
 800c834:	08016080 	.word	0x08016080
 800c838:	0000fff0 	.word	0x0000fff0

0800c83c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800c83c:	b590      	push	{r4, r7, lr}
 800c83e:	b08b      	sub	sp, #44	; 0x2c
 800c840:	af02      	add	r7, sp, #8
 800c842:	6078      	str	r0, [r7, #4]
 800c844:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800c846:	231f      	movs	r3, #31
 800c848:	18fb      	adds	r3, r7, r3
 800c84a:	2201      	movs	r2, #1
 800c84c:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800c84e:	2300      	movs	r3, #0
 800c850:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	0018      	movs	r0, r3
 800c856:	f7ff ff4b 	bl	800c6f0 <LL_USART_IsEnabled>
 800c85a:	1e03      	subs	r3, r0, #0
 800c85c:	d16a      	bne.n	800c934 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	4a38      	ldr	r2, [pc, #224]	; (800c944 <LL_USART_Init+0x108>)
 800c864:	401a      	ands	r2, r3
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	6899      	ldr	r1, [r3, #8]
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	691b      	ldr	r3, [r3, #16]
 800c86e:	4319      	orrs	r1, r3
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	695b      	ldr	r3, [r3, #20]
 800c874:	4319      	orrs	r1, r3
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	69db      	ldr	r3, [r3, #28]
 800c87a:	430b      	orrs	r3, r1
 800c87c:	431a      	orrs	r2, r3
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	68da      	ldr	r2, [r3, #12]
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	0011      	movs	r1, r2
 800c88a:	0018      	movs	r0, r3
 800c88c:	f7ff ff54 	bl	800c738 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	699a      	ldr	r2, [r3, #24]
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	0011      	movs	r1, r2
 800c898:	0018      	movs	r0, r3
 800c89a:	f7ff ff61 	bl	800c760 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	4a29      	ldr	r2, [pc, #164]	; (800c948 <LL_USART_Init+0x10c>)
 800c8a2:	4293      	cmp	r3, r2
 800c8a4:	d105      	bne.n	800c8b2 <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800c8a6:	2003      	movs	r0, #3
 800c8a8:	f7ff fdfc 	bl	800c4a4 <LL_RCC_GetUSARTClockFreq>
 800c8ac:	0003      	movs	r3, r0
 800c8ae:	61bb      	str	r3, [r7, #24]
 800c8b0:	e022      	b.n	800c8f8 <LL_USART_Init+0xbc>
    }
    else if (USARTx == USART2)
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	4a25      	ldr	r2, [pc, #148]	; (800c94c <LL_USART_Init+0x110>)
 800c8b6:	4293      	cmp	r3, r2
 800c8b8:	d105      	bne.n	800c8c6 <LL_USART_Init+0x8a>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800c8ba:	200c      	movs	r0, #12
 800c8bc:	f7ff fdf2 	bl	800c4a4 <LL_RCC_GetUSARTClockFreq>
 800c8c0:	0003      	movs	r3, r0
 800c8c2:	61bb      	str	r3, [r7, #24]
 800c8c4:	e018      	b.n	800c8f8 <LL_USART_Init+0xbc>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	4a21      	ldr	r2, [pc, #132]	; (800c950 <LL_USART_Init+0x114>)
 800c8ca:	4293      	cmp	r3, r2
 800c8cc:	d108      	bne.n	800c8e0 <LL_USART_Init+0xa4>
    {
#if defined(RCC_CCIPR_USART3SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800c8ce:	240c      	movs	r4, #12
 800c8d0:	193b      	adds	r3, r7, r4
 800c8d2:	0018      	movs	r0, r3
 800c8d4:	f7ff fdc8 	bl	800c468 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800c8d8:	193b      	adds	r3, r7, r4
 800c8da:	689b      	ldr	r3, [r3, #8]
 800c8dc:	61bb      	str	r3, [r7, #24]
 800c8de:	e00b      	b.n	800c8f8 <LL_USART_Init+0xbc>
#endif
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	4a1c      	ldr	r2, [pc, #112]	; (800c954 <LL_USART_Init+0x118>)
 800c8e4:	4293      	cmp	r3, r2
 800c8e6:	d107      	bne.n	800c8f8 <LL_USART_Init+0xbc>
    {
#if defined(RCC_CCIPR_USART4SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART4_CLKSOURCE);
#else
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800c8e8:	240c      	movs	r4, #12
 800c8ea:	193b      	adds	r3, r7, r4
 800c8ec:	0018      	movs	r0, r3
 800c8ee:	f7ff fdbb 	bl	800c468 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800c8f2:	193b      	adds	r3, r7, r4
 800c8f4:	689b      	ldr	r3, [r3, #8]
 800c8f6:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800c8f8:	69bb      	ldr	r3, [r7, #24]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d013      	beq.n	800c926 <LL_USART_Init+0xea>
        && (USART_InitStruct->BaudRate != 0U))
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	685b      	ldr	r3, [r3, #4]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d00f      	beq.n	800c926 <LL_USART_Init+0xea>
    {
      status = SUCCESS;
 800c906:	231f      	movs	r3, #31
 800c908:	18fb      	adds	r3, r7, r3
 800c90a:	2200      	movs	r2, #0
 800c90c:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	681a      	ldr	r2, [r3, #0]
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	69dc      	ldr	r4, [r3, #28]
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	685b      	ldr	r3, [r3, #4]
 800c91a:	69b9      	ldr	r1, [r7, #24]
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	9300      	str	r3, [sp, #0]
 800c920:	0023      	movs	r3, r4
 800c922:	f7ff ff31 	bl	800c788 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	681a      	ldr	r2, [r3, #0]
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	0011      	movs	r1, r2
 800c92e:	0018      	movs	r0, r3
 800c930:	f7ff feef 	bl	800c712 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800c934:	231f      	movs	r3, #31
 800c936:	18fb      	adds	r3, r7, r3
 800c938:	781b      	ldrb	r3, [r3, #0]
}
 800c93a:	0018      	movs	r0, r3
 800c93c:	46bd      	mov	sp, r7
 800c93e:	b009      	add	sp, #36	; 0x24
 800c940:	bd90      	pop	{r4, r7, pc}
 800c942:	46c0      	nop			; (mov r8, r8)
 800c944:	efff69f3 	.word	0xefff69f3
 800c948:	40013800 	.word	0x40013800
 800c94c:	40004400 	.word	0x40004400
 800c950:	40004800 	.word	0x40004800
 800c954:	40004c00 	.word	0x40004c00

0800c958 <__libc_init_array>:
 800c958:	b570      	push	{r4, r5, r6, lr}
 800c95a:	2600      	movs	r6, #0
 800c95c:	4d0c      	ldr	r5, [pc, #48]	; (800c990 <__libc_init_array+0x38>)
 800c95e:	4c0d      	ldr	r4, [pc, #52]	; (800c994 <__libc_init_array+0x3c>)
 800c960:	1b64      	subs	r4, r4, r5
 800c962:	10a4      	asrs	r4, r4, #2
 800c964:	42a6      	cmp	r6, r4
 800c966:	d109      	bne.n	800c97c <__libc_init_array+0x24>
 800c968:	2600      	movs	r6, #0
 800c96a:	f000 f821 	bl	800c9b0 <_init>
 800c96e:	4d0a      	ldr	r5, [pc, #40]	; (800c998 <__libc_init_array+0x40>)
 800c970:	4c0a      	ldr	r4, [pc, #40]	; (800c99c <__libc_init_array+0x44>)
 800c972:	1b64      	subs	r4, r4, r5
 800c974:	10a4      	asrs	r4, r4, #2
 800c976:	42a6      	cmp	r6, r4
 800c978:	d105      	bne.n	800c986 <__libc_init_array+0x2e>
 800c97a:	bd70      	pop	{r4, r5, r6, pc}
 800c97c:	00b3      	lsls	r3, r6, #2
 800c97e:	58eb      	ldr	r3, [r5, r3]
 800c980:	4798      	blx	r3
 800c982:	3601      	adds	r6, #1
 800c984:	e7ee      	b.n	800c964 <__libc_init_array+0xc>
 800c986:	00b3      	lsls	r3, r6, #2
 800c988:	58eb      	ldr	r3, [r5, r3]
 800c98a:	4798      	blx	r3
 800c98c:	3601      	adds	r6, #1
 800c98e:	e7f2      	b.n	800c976 <__libc_init_array+0x1e>
 800c990:	080160b0 	.word	0x080160b0
 800c994:	080160b0 	.word	0x080160b0
 800c998:	080160b0 	.word	0x080160b0
 800c99c:	080160b4 	.word	0x080160b4

0800c9a0 <memset>:
 800c9a0:	0003      	movs	r3, r0
 800c9a2:	1882      	adds	r2, r0, r2
 800c9a4:	4293      	cmp	r3, r2
 800c9a6:	d100      	bne.n	800c9aa <memset+0xa>
 800c9a8:	4770      	bx	lr
 800c9aa:	7019      	strb	r1, [r3, #0]
 800c9ac:	3301      	adds	r3, #1
 800c9ae:	e7f9      	b.n	800c9a4 <memset+0x4>

0800c9b0 <_init>:
 800c9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9b2:	46c0      	nop			; (mov r8, r8)
 800c9b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9b6:	bc08      	pop	{r3}
 800c9b8:	469e      	mov	lr, r3
 800c9ba:	4770      	bx	lr

0800c9bc <_fini>:
 800c9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9be:	46c0      	nop			; (mov r8, r8)
 800c9c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9c2:	bc08      	pop	{r3}
 800c9c4:	469e      	mov	lr, r3
 800c9c6:	4770      	bx	lr
