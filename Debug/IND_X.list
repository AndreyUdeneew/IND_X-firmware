
IND_X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c89c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000bae8  0800c958  0800c958  0001c958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018440  08018440  00030040  2**0
                  CONTENTS
  4 .ARM          00000000  08018440  08018440  00030040  2**0
                  CONTENTS
  5 .preinit_array 00000000  08018440  08018440  00030040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018440  08018440  00028440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018444  08018444  00028444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08018448  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012c4  20000040  08018488  00030040  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001304  08018488  00031304  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030040  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001935f  00000000  00000000  00030068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000359d  00000000  00000000  000493c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001938  00000000  00000000  0004c968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017c0  00000000  00000000  0004e2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c89a  00000000  00000000  0004fa60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c97c  00000000  00000000  0006c2fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000afb15  00000000  00000000  00088c76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013878b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c74  00000000  00000000  001387dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000040 	.word	0x20000040
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800c940 	.word	0x0800c940

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000044 	.word	0x20000044
 8000100:	0800c940 	.word	0x0800c940

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b7f      	cmp	r3, #127	; 0x7f
 800022e:	d809      	bhi.n	8000244 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000230:	1dfb      	adds	r3, r7, #7
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	001a      	movs	r2, r3
 8000236:	231f      	movs	r3, #31
 8000238:	401a      	ands	r2, r3
 800023a:	4b04      	ldr	r3, [pc, #16]	; (800024c <__NVIC_EnableIRQ+0x30>)
 800023c:	2101      	movs	r1, #1
 800023e:	4091      	lsls	r1, r2
 8000240:	000a      	movs	r2, r1
 8000242:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e100 	.word	0xe000e100

08000250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	0002      	movs	r2, r0
 8000258:	6039      	str	r1, [r7, #0]
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b7f      	cmp	r3, #127	; 0x7f
 8000264:	d828      	bhi.n	80002b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000266:	4a2f      	ldr	r2, [pc, #188]	; (8000324 <__NVIC_SetPriority+0xd4>)
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	b25b      	sxtb	r3, r3
 800026e:	089b      	lsrs	r3, r3, #2
 8000270:	33c0      	adds	r3, #192	; 0xc0
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	589b      	ldr	r3, [r3, r2]
 8000276:	1dfa      	adds	r2, r7, #7
 8000278:	7812      	ldrb	r2, [r2, #0]
 800027a:	0011      	movs	r1, r2
 800027c:	2203      	movs	r2, #3
 800027e:	400a      	ands	r2, r1
 8000280:	00d2      	lsls	r2, r2, #3
 8000282:	21ff      	movs	r1, #255	; 0xff
 8000284:	4091      	lsls	r1, r2
 8000286:	000a      	movs	r2, r1
 8000288:	43d2      	mvns	r2, r2
 800028a:	401a      	ands	r2, r3
 800028c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	019b      	lsls	r3, r3, #6
 8000292:	22ff      	movs	r2, #255	; 0xff
 8000294:	401a      	ands	r2, r3
 8000296:	1dfb      	adds	r3, r7, #7
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	0018      	movs	r0, r3
 800029c:	2303      	movs	r3, #3
 800029e:	4003      	ands	r3, r0
 80002a0:	00db      	lsls	r3, r3, #3
 80002a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a4:	481f      	ldr	r0, [pc, #124]	; (8000324 <__NVIC_SetPriority+0xd4>)
 80002a6:	1dfb      	adds	r3, r7, #7
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	b25b      	sxtb	r3, r3
 80002ac:	089b      	lsrs	r3, r3, #2
 80002ae:	430a      	orrs	r2, r1
 80002b0:	33c0      	adds	r3, #192	; 0xc0
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002b6:	e031      	b.n	800031c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <__NVIC_SetPriority+0xd8>)
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	0019      	movs	r1, r3
 80002c0:	230f      	movs	r3, #15
 80002c2:	400b      	ands	r3, r1
 80002c4:	3b08      	subs	r3, #8
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	3306      	adds	r3, #6
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	18d3      	adds	r3, r2, r3
 80002ce:	3304      	adds	r3, #4
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1dfa      	adds	r2, r7, #7
 80002d4:	7812      	ldrb	r2, [r2, #0]
 80002d6:	0011      	movs	r1, r2
 80002d8:	2203      	movs	r2, #3
 80002da:	400a      	ands	r2, r1
 80002dc:	00d2      	lsls	r2, r2, #3
 80002de:	21ff      	movs	r1, #255	; 0xff
 80002e0:	4091      	lsls	r1, r2
 80002e2:	000a      	movs	r2, r1
 80002e4:	43d2      	mvns	r2, r2
 80002e6:	401a      	ands	r2, r3
 80002e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	019b      	lsls	r3, r3, #6
 80002ee:	22ff      	movs	r2, #255	; 0xff
 80002f0:	401a      	ands	r2, r3
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	0018      	movs	r0, r3
 80002f8:	2303      	movs	r3, #3
 80002fa:	4003      	ands	r3, r0
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	4809      	ldr	r0, [pc, #36]	; (8000328 <__NVIC_SetPriority+0xd8>)
 8000302:	1dfb      	adds	r3, r7, #7
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	001c      	movs	r4, r3
 8000308:	230f      	movs	r3, #15
 800030a:	4023      	ands	r3, r4
 800030c:	3b08      	subs	r3, #8
 800030e:	089b      	lsrs	r3, r3, #2
 8000310:	430a      	orrs	r2, r1
 8000312:	3306      	adds	r3, #6
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	18c3      	adds	r3, r0, r3
 8000318:	3304      	adds	r3, #4
 800031a:	601a      	str	r2, [r3, #0]
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b003      	add	sp, #12
 8000322:	bd90      	pop	{r4, r7, pc}
 8000324:	e000e100 	.word	0xe000e100
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2201      	movs	r2, #1
 800033a:	431a      	orrs	r2, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	601a      	str	r2, [r3, #0]
}
 8000340:	46c0      	nop			; (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	b002      	add	sp, #8
 8000346:	bd80      	pop	{r7, pc}

08000348 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a03      	ldr	r2, [pc, #12]	; (8000364 <LL_USART_DisableFIFO+0x1c>)
 8000356:	401a      	ands	r2, r3
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	601a      	str	r2, [r3, #0]
}
 800035c:	46c0      	nop			; (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	b002      	add	sp, #8
 8000362:	bd80      	pop	{r7, pc}
 8000364:	dfffffff 	.word	0xdfffffff

08000368 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b086      	sub	sp, #24
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000372:	f3ef 8310 	mrs	r3, PRIMASK
 8000376:	60bb      	str	r3, [r7, #8]
  return(result);
 8000378:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 800037a:	617b      	str	r3, [r7, #20]
 800037c:	2301      	movs	r3, #1
 800037e:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f383 8810 	msr	PRIMASK, r3
}
 8000386:	46c0      	nop			; (mov r8, r8)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	689b      	ldr	r3, [r3, #8]
 800038c:	00db      	lsls	r3, r3, #3
 800038e:	08da      	lsrs	r2, r3, #3
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	075b      	lsls	r3, r3, #29
 8000394:	431a      	orrs	r2, r3
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	697b      	ldr	r3, [r7, #20]
 800039c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800039e:	693b      	ldr	r3, [r7, #16]
 80003a0:	f383 8810 	msr	PRIMASK, r3
}
 80003a4:	46c0      	nop			; (mov r8, r8)
}
 80003a6:	46c0      	nop			; (mov r8, r8)
 80003a8:	46bd      	mov	sp, r7
 80003aa:	b006      	add	sp, #24
 80003ac:	bd80      	pop	{r7, pc}
	...

080003b0 <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b086      	sub	sp, #24
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80003ba:	f3ef 8310 	mrs	r3, PRIMASK
 80003be:	60bb      	str	r3, [r7, #8]
  return(result);
 80003c0:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 80003c2:	617b      	str	r3, [r7, #20]
 80003c4:	2301      	movs	r3, #1
 80003c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	f383 8810 	msr	PRIMASK, r3
}
 80003ce:	46c0      	nop			; (mov r8, r8)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	689b      	ldr	r3, [r3, #8]
 80003d4:	4a08      	ldr	r2, [pc, #32]	; (80003f8 <LL_USART_SetRXFIFOThreshold+0x48>)
 80003d6:	401a      	ands	r2, r3
 80003d8:	683b      	ldr	r3, [r7, #0]
 80003da:	065b      	lsls	r3, r3, #25
 80003dc:	431a      	orrs	r2, r3
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	609a      	str	r2, [r3, #8]
 80003e2:	697b      	ldr	r3, [r7, #20]
 80003e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80003e6:	693b      	ldr	r3, [r7, #16]
 80003e8:	f383 8810 	msr	PRIMASK, r3
}
 80003ec:	46c0      	nop			; (mov r8, r8)
}
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	46bd      	mov	sp, r7
 80003f2:	b006      	add	sp, #24
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	46c0      	nop			; (mov r8, r8)
 80003f8:	f1ffffff 	.word	0xf1ffffff

080003fc <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	685b      	ldr	r3, [r3, #4]
 8000408:	4a07      	ldr	r2, [pc, #28]	; (8000428 <LL_USART_ConfigAsyncMode+0x2c>)
 800040a:	401a      	ands	r2, r3
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	689b      	ldr	r3, [r3, #8]
 8000414:	222a      	movs	r2, #42	; 0x2a
 8000416:	4393      	bics	r3, r2
 8000418:	001a      	movs	r2, r3
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	609a      	str	r2, [r3, #8]
}
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	46bd      	mov	sp, r7
 8000422:	b002      	add	sp, #8
 8000424:	bd80      	pop	{r7, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	ffffb7ff 	.word	0xffffb7ff

0800042c <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(const USART_TypeDef *USARTx)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	69da      	ldr	r2, [r3, #28]
 8000438:	2380      	movs	r3, #128	; 0x80
 800043a:	039b      	lsls	r3, r3, #14
 800043c:	401a      	ands	r2, r3
 800043e:	2380      	movs	r3, #128	; 0x80
 8000440:	039b      	lsls	r3, r3, #14
 8000442:	429a      	cmp	r2, r3
 8000444:	d101      	bne.n	800044a <LL_USART_IsActiveFlag_TEACK+0x1e>
 8000446:	2301      	movs	r3, #1
 8000448:	e000      	b.n	800044c <LL_USART_IsActiveFlag_TEACK+0x20>
 800044a:	2300      	movs	r3, #0
}
 800044c:	0018      	movs	r0, r3
 800044e:	46bd      	mov	sp, r7
 8000450:	b002      	add	sp, #8
 8000452:	bd80      	pop	{r7, pc}

08000454 <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(const USART_TypeDef *USARTx)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	69da      	ldr	r2, [r3, #28]
 8000460:	2380      	movs	r3, #128	; 0x80
 8000462:	03db      	lsls	r3, r3, #15
 8000464:	401a      	ands	r2, r3
 8000466:	2380      	movs	r3, #128	; 0x80
 8000468:	03db      	lsls	r3, r3, #15
 800046a:	429a      	cmp	r2, r3
 800046c:	d101      	bne.n	8000472 <LL_USART_IsActiveFlag_REACK+0x1e>
 800046e:	2301      	movs	r3, #1
 8000470:	e000      	b.n	8000474 <LL_USART_IsActiveFlag_REACK+0x20>
 8000472:	2300      	movs	r3, #0
}
 8000474:	0018      	movs	r0, r3
 8000476:	46bd      	mov	sp, r7
 8000478:	b002      	add	sp, #8
 800047a:	bd80      	pop	{r7, pc}

0800047c <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b086      	sub	sp, #24
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000484:	f3ef 8310 	mrs	r3, PRIMASK
 8000488:	60bb      	str	r3, [r7, #8]
  return(result);
 800048a:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800048c:	617b      	str	r3, [r7, #20]
 800048e:	2301      	movs	r3, #1
 8000490:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	f383 8810 	msr	PRIMASK, r3
}
 8000498:	46c0      	nop			; (mov r8, r8)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	2220      	movs	r2, #32
 80004a0:	431a      	orrs	r2, r3
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	601a      	str	r2, [r3, #0]
 80004a6:	697b      	ldr	r3, [r7, #20]
 80004a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80004aa:	693b      	ldr	r3, [r7, #16]
 80004ac:	f383 8810 	msr	PRIMASK, r3
}
 80004b0:	46c0      	nop			; (mov r8, r8)
}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	46bd      	mov	sp, r7
 80004b6:	b006      	add	sp, #24
 80004b8:	bd80      	pop	{r7, pc}

080004ba <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 80004ba:	b580      	push	{r7, lr}
 80004bc:	b086      	sub	sp, #24
 80004be:	af00      	add	r7, sp, #0
 80004c0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80004c2:	f3ef 8310 	mrs	r3, PRIMASK
 80004c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80004c8:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80004ca:	617b      	str	r3, [r7, #20]
 80004cc:	2301      	movs	r3, #1
 80004ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	f383 8810 	msr	PRIMASK, r3
}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	689b      	ldr	r3, [r3, #8]
 80004dc:	2201      	movs	r2, #1
 80004de:	431a      	orrs	r2, r3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	697b      	ldr	r3, [r7, #20]
 80004e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80004e8:	693b      	ldr	r3, [r7, #16]
 80004ea:	f383 8810 	msr	PRIMASK, r3
}
 80004ee:	46c0      	nop			; (mov r8, r8)
}
 80004f0:	46c0      	nop			; (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b006      	add	sp, #24
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <LL_USART_ReceiveData9>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData9
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
  */
__STATIC_INLINE uint16_t LL_USART_ReceiveData9(const USART_TypeDef *USARTx)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000504:	b29b      	uxth	r3, r3
 8000506:	05db      	lsls	r3, r3, #23
 8000508:	0ddb      	lsrs	r3, r3, #23
 800050a:	b29b      	uxth	r3, r3
}
 800050c:	0018      	movs	r0, r3
 800050e:	46bd      	mov	sp, r7
 8000510:	b002      	add	sp, #8
 8000512:	bd80      	pop	{r7, pc}

08000514 <LL_SYSCFG_EnableFastModePlus>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 800051c:	4b04      	ldr	r3, [pc, #16]	; (8000530 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 800051e:	6819      	ldr	r1, [r3, #0]
 8000520:	4b03      	ldr	r3, [pc, #12]	; (8000530 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8000522:	687a      	ldr	r2, [r7, #4]
 8000524:	430a      	orrs	r2, r1
 8000526:	601a      	str	r2, [r3, #0]
}
 8000528:	46c0      	nop			; (mov r8, r8)
 800052a:	46bd      	mov	sp, r7
 800052c:	b002      	add	sp, #8
 800052e:	bd80      	pop	{r7, pc}
 8000530:	40010000 	.word	0x40010000

08000534 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	683a      	ldr	r2, [r7, #0]
 8000542:	619a      	str	r2, [r3, #24]
}
 8000544:	46c0      	nop			; (mov r8, r8)
 8000546:	46bd      	mov	sp, r7
 8000548:	b002      	add	sp, #8
 800054a:	bd80      	pop	{r7, pc}

0800054c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	683a      	ldr	r2, [r7, #0]
 800055a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800055c:	46c0      	nop			; (mov r8, r8)
 800055e:	46bd      	mov	sp, r7
 8000560:	b002      	add	sp, #8
 8000562:	bd80      	pop	{r7, pc}

08000564 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 800056c:	4b07      	ldr	r3, [pc, #28]	; (800058c <LL_APB1_GRP1_EnableClock+0x28>)
 800056e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <LL_APB1_GRP1_EnableClock+0x28>)
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	430a      	orrs	r2, r1
 8000576:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <LL_APB1_GRP1_EnableClock+0x28>)
 800057a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	4013      	ands	r3, r2
 8000580:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000582:	68fb      	ldr	r3, [r7, #12]
}
 8000584:	46c0      	nop			; (mov r8, r8)
 8000586:	46bd      	mov	sp, r7
 8000588:	b004      	add	sp, #16
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40021000 	.word	0x40021000

08000590 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000598:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <LL_IOP_GRP1_EnableClock+0x28>)
 800059a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <LL_IOP_GRP1_EnableClock+0x28>)
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	430a      	orrs	r2, r1
 80005a2:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80005a4:	4b04      	ldr	r3, [pc, #16]	; (80005b8 <LL_IOP_GRP1_EnableClock+0x28>)
 80005a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	4013      	ands	r3, r2
 80005ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005ae:	68fb      	ldr	r3, [r7, #12]
}
 80005b0:	46c0      	nop			; (mov r8, r8)
 80005b2:	46bd      	mov	sp, r7
 80005b4:	b004      	add	sp, #16
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40021000 	.word	0x40021000

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t testINPUT = 0;
 80005c2:	231e      	movs	r3, #30
 80005c4:	18fb      	adds	r3, r7, r3
 80005c6:	2200      	movs	r2, #0
 80005c8:	801a      	strh	r2, [r3, #0]
	uint16_t testAns = 0;
 80005ca:	231c      	movs	r3, #28
 80005cc:	18fb      	adds	r3, r7, r3
 80005ce:	2200      	movs	r2, #0
 80005d0:	801a      	strh	r2, [r3, #0]
	uint16_t i = 0;
 80005d2:	231a      	movs	r3, #26
 80005d4:	18fb      	adds	r3, r7, r3
 80005d6:	2200      	movs	r2, #0
 80005d8:	801a      	strh	r2, [r3, #0]
	uint16_t beep1 = 0x0000;
 80005da:	2318      	movs	r3, #24
 80005dc:	18fb      	adds	r3, r7, r3
 80005de:	2200      	movs	r2, #0
 80005e0:	801a      	strh	r2, [r3, #0]
	uint16_t beep2 = 0xFFFF;
 80005e2:	2316      	movs	r3, #22
 80005e4:	18fb      	adds	r3, r7, r3
 80005e6:	2201      	movs	r2, #1
 80005e8:	4252      	negs	r2, r2
 80005ea:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ec:	f004 fe96 	bl	800531c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f0:	f000 f878 	bl	80006e4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005f4:	4b35      	ldr	r3, [pc, #212]	; (80006cc <main+0x110>)
 80005f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005f8:	4b34      	ldr	r3, [pc, #208]	; (80006cc <main+0x110>)
 80005fa:	2101      	movs	r1, #1
 80005fc:	430a      	orrs	r2, r1
 80005fe:	635a      	str	r2, [r3, #52]	; 0x34
 8000600:	4b32      	ldr	r3, [pc, #200]	; (80006cc <main+0x110>)
 8000602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000604:	2201      	movs	r2, #1
 8000606:	4013      	ands	r3, r2
 8000608:	60fb      	str	r3, [r7, #12]
 800060a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800060c:	4b2f      	ldr	r3, [pc, #188]	; (80006cc <main+0x110>)
 800060e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000610:	4b2e      	ldr	r3, [pc, #184]	; (80006cc <main+0x110>)
 8000612:	2102      	movs	r1, #2
 8000614:	430a      	orrs	r2, r1
 8000616:	635a      	str	r2, [r3, #52]	; 0x34
 8000618:	4b2c      	ldr	r3, [pc, #176]	; (80006cc <main+0x110>)
 800061a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800061c:	2202      	movs	r2, #2
 800061e:	4013      	ands	r3, r2
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000624:	4b29      	ldr	r3, [pc, #164]	; (80006cc <main+0x110>)
 8000626:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000628:	4b28      	ldr	r3, [pc, #160]	; (80006cc <main+0x110>)
 800062a:	2104      	movs	r1, #4
 800062c:	430a      	orrs	r2, r1
 800062e:	635a      	str	r2, [r3, #52]	; 0x34
 8000630:	4b26      	ldr	r3, [pc, #152]	; (80006cc <main+0x110>)
 8000632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000634:	2204      	movs	r2, #4
 8000636:	4013      	ands	r3, r2
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063c:	f000 fba0 	bl	8000d80 <MX_GPIO_Init>
  MX_DMA_Init();
 8000640:	f000 fb80 	bl	8000d44 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000644:	f000 fa86 	bl	8000b54 <MX_USART2_UART_Init>
  MX_COMP1_Init();
 8000648:	f000 f8aa 	bl	80007a0 <MX_COMP1_Init>
  MX_TIM1_Init();
 800064c:	f000 f988 	bl	8000960 <MX_TIM1_Init>
  MX_USART3_Init();
 8000650:	f000 fb36 	bl	8000cc0 <MX_USART3_Init>
  MX_I2S1_Init();
 8000654:	f000 f916 	bl	8000884 <MX_I2S1_Init>
  MX_I2C1_Init();
 8000658:	f000 f8d4 	bl	8000804 <MX_I2C1_Init>
  MX_SPI2_Init();
 800065c:	f000 f93c 	bl	80008d8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	HAL_COMP_Start(&hcomp1);
 8000660:	4b1b      	ldr	r3, [pc, #108]	; (80006d0 <main+0x114>)
 8000662:	0018      	movs	r0, r3
 8000664:	f005 f928 	bl	80058b8 <HAL_COMP_Start>
	HAL_Delay(100);
 8000668:	2064      	movs	r0, #100	; 0x64
 800066a:	f004 fedd 	bl	8005428 <HAL_Delay>
	uint8_t I2Cbuf[5];
	MEM_Reset();
 800066e:	f001 fd01 	bl	8002074 <MEM_Reset>

	weoInit();
 8000672:	f000 fded 	bl	8001250 <weoInit>
	HAL_Delay(1);
 8000676:	2001      	movs	r0, #1
 8000678:	f004 fed6 	bl	8005428 <HAL_Delay>
	weoClear();
 800067c:	f000 fe84 	bl	8001388 <weoClear>
	MEM_GetID();
 8000680:	f002 fa3a 	bl	8002af8 <MEM_GetID>
	soundSetup();
 8000684:	f001 f80a 	bl	800169c <soundSetup>
	LIS3DHsetup();
 8000688:	f004 f9fe 	bl	8004a88 <LIS3DHsetup>
//	I2C_SOUND_ChangePage(0x01);
//	WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
//	WriteReg_I2C_SOUND(0x2E, 0x24);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
//    squeak_triple(signal);
//    squeak_long();
  USART2->CR1 |= (USART_CR1_UE | USART_CR1_RE | USART_CR1_TE|USART_CR1_M); // Enable USART, Receive and Transmit
 800068c:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <main+0x118>)
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <main+0x118>)
 8000692:	4911      	ldr	r1, [pc, #68]	; (80006d8 <main+0x11c>)
 8000694:	430a      	orrs	r2, r1
 8000696:	601a      	str	r2, [r3, #0]
	LL_USART_EnableIT_RXNE(USART2);
 8000698:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <main+0x118>)
 800069a:	0018      	movs	r0, r3
 800069c:	f7ff feee 	bl	800047c <LL_USART_EnableIT_RXNE_RXFNE>
	LL_USART_EnableIT_ERROR(USART2);
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <main+0x118>)
 80006a2:	0018      	movs	r0, r3
 80006a4:	f7ff ff09 	bl	80004ba <LL_USART_EnableIT_ERROR>
	USART2->ICR|=USART_ICR_ORECF;
 80006a8:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <main+0x118>)
 80006aa:	6a1a      	ldr	r2, [r3, #32]
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <main+0x118>)
 80006ae:	2108      	movs	r1, #8
 80006b0:	430a      	orrs	r2, r1
 80006b2:	621a      	str	r2, [r3, #32]
//	{
//		soundPlay(k);
//		HAL_Delay(1000);
//	}
//    GPIOB->PUPDR &= ~0x3F000;
	GPIOC->ODR |= 1 << 6;
 80006b4:	4b09      	ldr	r3, [pc, #36]	; (80006dc <main+0x120>)
 80006b6:	695a      	ldr	r2, [r3, #20]
 80006b8:	4b08      	ldr	r3, [pc, #32]	; (80006dc <main+0x120>)
 80006ba:	2140      	movs	r1, #64	; 0x40
 80006bc:	430a      	orrs	r2, r1
 80006be:	615a      	str	r2, [r3, #20]
//	weoShowFullScreen(4);
	while (1) {
//		weoShowSmallImage(0x02,0x70,0x00);
//		LIS3DHreadData();
		cmdExecute(cmd2Execute);
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <main+0x124>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	0018      	movs	r0, r3
 80006c6:	f002 fa79 	bl	8002bbc <cmdExecute>
 80006ca:	e7f9      	b.n	80006c0 <main+0x104>
 80006cc:	40021000 	.word	0x40021000
 80006d0:	2000005c 	.word	0x2000005c
 80006d4:	40004400 	.word	0x40004400
 80006d8:	1000100d 	.word	0x1000100d
 80006dc:	50000800 	.word	0x50000800
 80006e0:	200002ea 	.word	0x200002ea

080006e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e4:	b590      	push	{r4, r7, lr}
 80006e6:	b093      	sub	sp, #76	; 0x4c
 80006e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ea:	2410      	movs	r4, #16
 80006ec:	193b      	adds	r3, r7, r4
 80006ee:	0018      	movs	r0, r3
 80006f0:	2338      	movs	r3, #56	; 0x38
 80006f2:	001a      	movs	r2, r3
 80006f4:	2100      	movs	r1, #0
 80006f6:	f00c f91b 	bl	800c930 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fa:	003b      	movs	r3, r7
 80006fc:	0018      	movs	r0, r3
 80006fe:	2310      	movs	r3, #16
 8000700:	001a      	movs	r2, r3
 8000702:	2100      	movs	r1, #0
 8000704:	f00c f914 	bl	800c930 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000708:	2380      	movs	r3, #128	; 0x80
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	0018      	movs	r0, r3
 800070e:	f007 fb2d 	bl	8007d6c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000712:	193b      	adds	r3, r7, r4
 8000714:	2202      	movs	r2, #2
 8000716:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000718:	193b      	adds	r3, r7, r4
 800071a:	2280      	movs	r2, #128	; 0x80
 800071c:	0052      	lsls	r2, r2, #1
 800071e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000720:	0021      	movs	r1, r4
 8000722:	187b      	adds	r3, r7, r1
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000728:	187b      	adds	r3, r7, r1
 800072a:	2240      	movs	r2, #64	; 0x40
 800072c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072e:	187b      	adds	r3, r7, r1
 8000730:	2202      	movs	r2, #2
 8000732:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000734:	187b      	adds	r3, r7, r1
 8000736:	2202      	movs	r2, #2
 8000738:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800073a:	187b      	adds	r3, r7, r1
 800073c:	2200      	movs	r2, #0
 800073e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000740:	187b      	adds	r3, r7, r1
 8000742:	2208      	movs	r2, #8
 8000744:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000746:	187b      	adds	r3, r7, r1
 8000748:	2280      	movs	r2, #128	; 0x80
 800074a:	0292      	lsls	r2, r2, #10
 800074c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800074e:	187b      	adds	r3, r7, r1
 8000750:	2280      	movs	r2, #128	; 0x80
 8000752:	0492      	lsls	r2, r2, #18
 8000754:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000756:	187b      	adds	r3, r7, r1
 8000758:	2280      	movs	r2, #128	; 0x80
 800075a:	0592      	lsls	r2, r2, #22
 800075c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075e:	187b      	adds	r3, r7, r1
 8000760:	0018      	movs	r0, r3
 8000762:	f007 fb4f 	bl	8007e04 <HAL_RCC_OscConfig>
 8000766:	1e03      	subs	r3, r0, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800076a:	f004 f9bf 	bl	8004aec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076e:	003b      	movs	r3, r7
 8000770:	2207      	movs	r2, #7
 8000772:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000774:	003b      	movs	r3, r7
 8000776:	2202      	movs	r2, #2
 8000778:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077a:	003b      	movs	r3, r7
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000780:	003b      	movs	r3, r7
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000786:	003b      	movs	r3, r7
 8000788:	2102      	movs	r1, #2
 800078a:	0018      	movs	r0, r3
 800078c:	f007 fe54 	bl	8008438 <HAL_RCC_ClockConfig>
 8000790:	1e03      	subs	r3, r0, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000794:	f004 f9aa 	bl	8004aec <Error_Handler>
  }
}
 8000798:	46c0      	nop			; (mov r8, r8)
 800079a:	46bd      	mov	sp, r7
 800079c:	b013      	add	sp, #76	; 0x4c
 800079e:	bd90      	pop	{r4, r7, pc}

080007a0 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 80007a4:	4b15      	ldr	r3, [pc, #84]	; (80007fc <MX_COMP1_Init+0x5c>)
 80007a6:	4a16      	ldr	r2, [pc, #88]	; (8000800 <MX_COMP1_Init+0x60>)
 80007a8:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 80007aa:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_COMP1_Init+0x5c>)
 80007ac:	2280      	movs	r2, #128	; 0x80
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 80007b2:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_COMP1_Init+0x5c>)
 80007b4:	2230      	movs	r2, #48	; 0x30
 80007b6:	615a      	str	r2, [r3, #20]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80007b8:	4b10      	ldr	r3, [pc, #64]	; (80007fc <MX_COMP1_Init+0x5c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 80007be:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_COMP1_Init+0x5c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80007c4:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <MX_COMP1_Init+0x5c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	619a      	str	r2, [r3, #24]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_TIM1_OC5;
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_COMP1_Init+0x5c>)
 80007cc:	2280      	movs	r2, #128	; 0x80
 80007ce:	0392      	lsls	r2, r2, #14
 80007d0:	621a      	str	r2, [r3, #32]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 80007d2:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <MX_COMP1_Init+0x5c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	60da      	str	r2, [r3, #12]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80007d8:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_COMP1_Init+0x5c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_EVENT_RISING;
 80007de:	4b07      	ldr	r3, [pc, #28]	; (80007fc <MX_COMP1_Init+0x5c>)
 80007e0:	2212      	movs	r2, #18
 80007e2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <MX_COMP1_Init+0x5c>)
 80007e6:	0018      	movs	r0, r3
 80007e8:	f004 ff04 	bl	80055f4 <HAL_COMP_Init>
 80007ec:	1e03      	subs	r3, r0, #0
 80007ee:	d001      	beq.n	80007f4 <MX_COMP1_Init+0x54>
  {
    Error_Handler();
 80007f0:	f004 f97c 	bl	8004aec <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 80007f4:	46c0      	nop			; (mov r8, r8)
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	2000005c 	.word	0x2000005c
 8000800:	40010200 	.word	0x40010200

08000804 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000808:	4b1b      	ldr	r3, [pc, #108]	; (8000878 <MX_I2C1_Init+0x74>)
 800080a:	4a1c      	ldr	r2, [pc, #112]	; (800087c <MX_I2C1_Init+0x78>)
 800080c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x1094102C;
 800080e:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <MX_I2C1_Init+0x74>)
 8000810:	4a1b      	ldr	r2, [pc, #108]	; (8000880 <MX_I2C1_Init+0x7c>)
 8000812:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000814:	4b18      	ldr	r3, [pc, #96]	; (8000878 <MX_I2C1_Init+0x74>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800081a:	4b17      	ldr	r3, [pc, #92]	; (8000878 <MX_I2C1_Init+0x74>)
 800081c:	2201      	movs	r2, #1
 800081e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000820:	4b15      	ldr	r3, [pc, #84]	; (8000878 <MX_I2C1_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000826:	4b14      	ldr	r3, [pc, #80]	; (8000878 <MX_I2C1_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800082c:	4b12      	ldr	r3, [pc, #72]	; (8000878 <MX_I2C1_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_I2C1_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <MX_I2C1_Init+0x74>)
 800083a:	2200      	movs	r2, #0
 800083c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_I2C1_Init+0x74>)
 8000840:	0018      	movs	r0, r3
 8000842:	f005 fd95 	bl	8006370 <HAL_I2C_Init>
 8000846:	1e03      	subs	r3, r0, #0
 8000848:	d001      	beq.n	800084e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800084a:	f004 f94f 	bl	8004aec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800084e:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <MX_I2C1_Init+0x74>)
 8000850:	2100      	movs	r1, #0
 8000852:	0018      	movs	r0, r3
 8000854:	f006 ff1e 	bl	8007694 <HAL_I2CEx_ConfigAnalogFilter>
 8000858:	1e03      	subs	r3, r0, #0
 800085a:	d001      	beq.n	8000860 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800085c:	f004 f946 	bl	8004aec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000860:	4b05      	ldr	r3, [pc, #20]	; (8000878 <MX_I2C1_Init+0x74>)
 8000862:	2100      	movs	r1, #0
 8000864:	0018      	movs	r0, r3
 8000866:	f006 ff61 	bl	800772c <HAL_I2CEx_ConfigDigitalFilter>
 800086a:	1e03      	subs	r3, r0, #0
 800086c:	d001      	beq.n	8000872 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800086e:	f004 f93d 	bl	8004aec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	2000008c 	.word	0x2000008c
 800087c:	40005400 	.word	0x40005400
 8000880:	1094102c 	.word	0x1094102c

08000884 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_I2S1_Init+0x4c>)
 800088a:	4a12      	ldr	r2, [pc, #72]	; (80008d4 <MX_I2S1_Init+0x50>)
 800088c:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <MX_I2S1_Init+0x4c>)
 8000890:	2280      	movs	r2, #128	; 0x80
 8000892:	0092      	lsls	r2, r2, #2
 8000894:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_I2S1_Init+0x4c>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_I2S1_Init+0x4c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <MX_I2S1_Init+0x4c>)
 80008a4:	2280      	movs	r2, #128	; 0x80
 80008a6:	0092      	lsls	r2, r2, #2
 80008a8:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_I2S1_Init+0x4c>)
 80008ac:	22fa      	movs	r2, #250	; 0xfa
 80008ae:	0192      	lsls	r2, r2, #6
 80008b0:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 80008b2:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <MX_I2S1_Init+0x4c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 80008b8:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <MX_I2S1_Init+0x4c>)
 80008ba:	0018      	movs	r0, r3
 80008bc:	f006 ff82 	bl	80077c4 <HAL_I2S_Init>
 80008c0:	1e03      	subs	r3, r0, #0
 80008c2:	d001      	beq.n	80008c8 <MX_I2S1_Init+0x44>
  {
    Error_Handler();
 80008c4:	f004 f912 	bl	8004aec <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 80008c8:	46c0      	nop			; (mov r8, r8)
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	200000e0 	.word	0x200000e0
 80008d4:	40013000 	.word	0x40013000

080008d8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80008dc:	4b1e      	ldr	r3, [pc, #120]	; (8000958 <MX_SPI2_Init+0x80>)
 80008de:	2208      	movs	r2, #8
 80008e0:	61da      	str	r2, [r3, #28]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008e2:	4b1d      	ldr	r3, [pc, #116]	; (8000958 <MX_SPI2_Init+0x80>)
 80008e4:	4a1d      	ldr	r2, [pc, #116]	; (800095c <MX_SPI2_Init+0x84>)
 80008e6:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008e8:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <MX_SPI2_Init+0x80>)
 80008ea:	2282      	movs	r2, #130	; 0x82
 80008ec:	0052      	lsls	r2, r2, #1
 80008ee:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008f0:	4b19      	ldr	r3, [pc, #100]	; (8000958 <MX_SPI2_Init+0x80>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008f6:	4b18      	ldr	r3, [pc, #96]	; (8000958 <MX_SPI2_Init+0x80>)
 80008f8:	22e0      	movs	r2, #224	; 0xe0
 80008fa:	00d2      	lsls	r2, r2, #3
 80008fc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008fe:	4b16      	ldr	r3, [pc, #88]	; (8000958 <MX_SPI2_Init+0x80>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000904:	4b14      	ldr	r3, [pc, #80]	; (8000958 <MX_SPI2_Init+0x80>)
 8000906:	2200      	movs	r2, #0
 8000908:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800090a:	4b13      	ldr	r3, [pc, #76]	; (8000958 <MX_SPI2_Init+0x80>)
 800090c:	2280      	movs	r2, #128	; 0x80
 800090e:	0092      	lsls	r2, r2, #2
 8000910:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000912:	4b11      	ldr	r3, [pc, #68]	; (8000958 <MX_SPI2_Init+0x80>)
 8000914:	2210      	movs	r2, #16
 8000916:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000918:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <MX_SPI2_Init+0x80>)
 800091a:	2200      	movs	r2, #0
 800091c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <MX_SPI2_Init+0x80>)
 8000920:	2200      	movs	r2, #0
 8000922:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <MX_SPI2_Init+0x80>)
 8000926:	2200      	movs	r2, #0
 8000928:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <MX_SPI2_Init+0x80>)
 800092c:	2207      	movs	r2, #7
 800092e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <MX_SPI2_Init+0x80>)
 8000932:	2200      	movs	r2, #0
 8000934:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <MX_SPI2_Init+0x80>)
 8000938:	2208      	movs	r2, #8
 800093a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <MX_SPI2_Init+0x80>)
 800093e:	0018      	movs	r0, r3
 8000940:	f008 fc24 	bl	800918c <HAL_SPI_Init>
 8000944:	1e03      	subs	r3, r0, #0
 8000946:	d001      	beq.n	800094c <MX_SPI2_Init+0x74>
  {
    Error_Handler();
 8000948:	f004 f8d0 	bl	8004aec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800094c:	4b02      	ldr	r3, [pc, #8]	; (8000958 <MX_SPI2_Init+0x80>)
 800094e:	2208      	movs	r2, #8
 8000950:	61da      	str	r2, [r3, #28]
  /* USER CODE END SPI2_Init 2 */

}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000178 	.word	0x20000178
 800095c:	40003800 	.word	0x40003800

08000960 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b09e      	sub	sp, #120	; 0x78
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000966:	2368      	movs	r3, #104	; 0x68
 8000968:	18fb      	adds	r3, r7, r3
 800096a:	0018      	movs	r0, r3
 800096c:	2310      	movs	r3, #16
 800096e:	001a      	movs	r2, r3
 8000970:	2100      	movs	r1, #0
 8000972:	f00b ffdd 	bl	800c930 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000976:	235c      	movs	r3, #92	; 0x5c
 8000978:	18fb      	adds	r3, r7, r3
 800097a:	0018      	movs	r0, r3
 800097c:	230c      	movs	r3, #12
 800097e:	001a      	movs	r2, r3
 8000980:	2100      	movs	r1, #0
 8000982:	f00b ffd5 	bl	800c930 <memset>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8000986:	2350      	movs	r3, #80	; 0x50
 8000988:	18fb      	adds	r3, r7, r3
 800098a:	0018      	movs	r0, r3
 800098c:	230c      	movs	r3, #12
 800098e:	001a      	movs	r2, r3
 8000990:	2100      	movs	r1, #0
 8000992:	f00b ffcd 	bl	800c930 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000996:	2334      	movs	r3, #52	; 0x34
 8000998:	18fb      	adds	r3, r7, r3
 800099a:	0018      	movs	r0, r3
 800099c:	231c      	movs	r3, #28
 800099e:	001a      	movs	r2, r3
 80009a0:	2100      	movs	r1, #0
 80009a2:	f00b ffc5 	bl	800c930 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009a6:	003b      	movs	r3, r7
 80009a8:	0018      	movs	r0, r3
 80009aa:	2334      	movs	r3, #52	; 0x34
 80009ac:	001a      	movs	r2, r3
 80009ae:	2100      	movs	r1, #0
 80009b0:	f00b ffbe 	bl	800c930 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009b4:	4b64      	ldr	r3, [pc, #400]	; (8000b48 <MX_TIM1_Init+0x1e8>)
 80009b6:	4a65      	ldr	r2, [pc, #404]	; (8000b4c <MX_TIM1_Init+0x1ec>)
 80009b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009ba:	4b63      	ldr	r3, [pc, #396]	; (8000b48 <MX_TIM1_Init+0x1e8>)
 80009bc:	2200      	movs	r2, #0
 80009be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c0:	4b61      	ldr	r3, [pc, #388]	; (8000b48 <MX_TIM1_Init+0x1e8>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 639;
 80009c6:	4b60      	ldr	r3, [pc, #384]	; (8000b48 <MX_TIM1_Init+0x1e8>)
 80009c8:	4a61      	ldr	r2, [pc, #388]	; (8000b50 <MX_TIM1_Init+0x1f0>)
 80009ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009cc:	4b5e      	ldr	r3, [pc, #376]	; (8000b48 <MX_TIM1_Init+0x1e8>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009d2:	4b5d      	ldr	r3, [pc, #372]	; (8000b48 <MX_TIM1_Init+0x1e8>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009d8:	4b5b      	ldr	r3, [pc, #364]	; (8000b48 <MX_TIM1_Init+0x1e8>)
 80009da:	2280      	movs	r2, #128	; 0x80
 80009dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009de:	4b5a      	ldr	r3, [pc, #360]	; (8000b48 <MX_TIM1_Init+0x1e8>)
 80009e0:	0018      	movs	r0, r3
 80009e2:	f009 fbf1 	bl	800a1c8 <HAL_TIM_Base_Init>
 80009e6:	1e03      	subs	r3, r0, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80009ea:	f004 f87f 	bl	8004aec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ee:	2168      	movs	r1, #104	; 0x68
 80009f0:	187b      	adds	r3, r7, r1
 80009f2:	2280      	movs	r2, #128	; 0x80
 80009f4:	0152      	lsls	r2, r2, #5
 80009f6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009f8:	187a      	adds	r2, r7, r1
 80009fa:	4b53      	ldr	r3, [pc, #332]	; (8000b48 <MX_TIM1_Init+0x1e8>)
 80009fc:	0011      	movs	r1, r2
 80009fe:	0018      	movs	r0, r3
 8000a00:	f009 fe84 	bl	800a70c <HAL_TIM_ConfigClockSource>
 8000a04:	1e03      	subs	r3, r0, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000a08:	f004 f870 	bl	8004aec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a0c:	4b4e      	ldr	r3, [pc, #312]	; (8000b48 <MX_TIM1_Init+0x1e8>)
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f009 fc32 	bl	800a278 <HAL_TIM_PWM_Init>
 8000a14:	1e03      	subs	r3, r0, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000a18:	f004 f868 	bl	8004aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a1c:	215c      	movs	r1, #92	; 0x5c
 8000a1e:	187b      	adds	r3, r7, r1
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	2200      	movs	r2, #0
 8000a28:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a30:	187a      	adds	r2, r7, r1
 8000a32:	4b45      	ldr	r3, [pc, #276]	; (8000b48 <MX_TIM1_Init+0x1e8>)
 8000a34:	0011      	movs	r1, r2
 8000a36:	0018      	movs	r0, r3
 8000a38:	f00a fb42 	bl	800b0c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a3c:	1e03      	subs	r3, r0, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8000a40:	f004 f854 	bl	8004aec <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8000a44:	2150      	movs	r1, #80	; 0x50
 8000a46:	187b      	adds	r3, r7, r1
 8000a48:	2202      	movs	r2, #2
 8000a4a:	601a      	str	r2, [r3, #0]
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	2201      	movs	r2, #1
 8000a50:	605a      	str	r2, [r3, #4]
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8000a52:	187b      	adds	r3, r7, r1
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8000a58:	187a      	adds	r2, r7, r1
 8000a5a:	4b3b      	ldr	r3, [pc, #236]	; (8000b48 <MX_TIM1_Init+0x1e8>)
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f00a fc42 	bl	800b2e8 <HAL_TIMEx_ConfigBreakInput>
 8000a64:	1e03      	subs	r3, r0, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000a68:	f004 f840 	bl	8004aec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a6c:	2134      	movs	r1, #52	; 0x34
 8000a6e:	187b      	adds	r3, r7, r1
 8000a70:	2260      	movs	r2, #96	; 0x60
 8000a72:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 200;
 8000a74:	187b      	adds	r3, r7, r1
 8000a76:	22c8      	movs	r2, #200	; 0xc8
 8000a78:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a7a:	187b      	adds	r3, r7, r1
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a80:	187b      	adds	r3, r7, r1
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000a86:	187b      	adds	r3, r7, r1
 8000a88:	2204      	movs	r2, #4
 8000a8a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a8c:	187b      	adds	r3, r7, r1
 8000a8e:	2200      	movs	r2, #0
 8000a90:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a92:	187b      	adds	r3, r7, r1
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a98:	1879      	adds	r1, r7, r1
 8000a9a:	4b2b      	ldr	r3, [pc, #172]	; (8000b48 <MX_TIM1_Init+0x1e8>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f009 fd34 	bl	800a50c <HAL_TIM_PWM_ConfigChannel>
 8000aa4:	1e03      	subs	r3, r0, #0
 8000aa6:	d001      	beq.n	8000aac <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 8000aa8:	f004 f820 	bl	8004aec <Error_Handler>
  }
  sConfigOC.Pulse = 50;
 8000aac:	2134      	movs	r1, #52	; 0x34
 8000aae:	187b      	adds	r3, r7, r1
 8000ab0:	2232      	movs	r2, #50	; 0x32
 8000ab2:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 8000ab4:	1879      	adds	r1, r7, r1
 8000ab6:	4b24      	ldr	r3, [pc, #144]	; (8000b48 <MX_TIM1_Init+0x1e8>)
 8000ab8:	2210      	movs	r2, #16
 8000aba:	0018      	movs	r0, r3
 8000abc:	f009 fd26 	bl	800a50c <HAL_TIM_PWM_ConfigChannel>
 8000ac0:	1e03      	subs	r3, r0, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM1_Init+0x168>
  {
    Error_Handler();
 8000ac4:	f004 f812 	bl	8004aec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000ac8:	003b      	movs	r3, r7
 8000aca:	2280      	movs	r2, #128	; 0x80
 8000acc:	0112      	lsls	r2, r2, #4
 8000ace:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000ad0:	003b      	movs	r3, r7
 8000ad2:	2280      	movs	r2, #128	; 0x80
 8000ad4:	00d2      	lsls	r2, r2, #3
 8000ad6:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ad8:	003b      	movs	r3, r7
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ade:	003b      	movs	r3, r7
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000ae4:	003b      	movs	r3, r7
 8000ae6:	2280      	movs	r2, #128	; 0x80
 8000ae8:	0152      	lsls	r2, r2, #5
 8000aea:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000aec:	003b      	movs	r3, r7
 8000aee:	2280      	movs	r2, #128	; 0x80
 8000af0:	0192      	lsls	r2, r2, #6
 8000af2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 10;
 8000af4:	003b      	movs	r3, r7
 8000af6:	220a      	movs	r2, #10
 8000af8:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000afa:	003b      	movs	r3, r7
 8000afc:	2200      	movs	r2, #0
 8000afe:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b00:	003b      	movs	r3, r7
 8000b02:	2200      	movs	r2, #0
 8000b04:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b06:	003b      	movs	r3, r7
 8000b08:	2280      	movs	r2, #128	; 0x80
 8000b0a:	0492      	lsls	r2, r2, #18
 8000b0c:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b0e:	003b      	movs	r3, r7
 8000b10:	2200      	movs	r2, #0
 8000b12:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000b14:	003b      	movs	r3, r7
 8000b16:	2200      	movs	r2, #0
 8000b18:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000b1a:	003b      	movs	r3, r7
 8000b1c:	2280      	movs	r2, #128	; 0x80
 8000b1e:	01d2      	lsls	r2, r2, #7
 8000b20:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b22:	003a      	movs	r2, r7
 8000b24:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <MX_TIM1_Init+0x1e8>)
 8000b26:	0011      	movs	r1, r2
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f00a fb37 	bl	800b19c <HAL_TIMEx_ConfigBreakDeadTime>
 8000b2e:	1e03      	subs	r3, r0, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM1_Init+0x1d6>
  {
    Error_Handler();
 8000b32:	f003 ffdb 	bl	8004aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b36:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <MX_TIM1_Init+0x1e8>)
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f004 fa05 	bl	8004f48 <HAL_TIM_MspPostInit>

}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	46bd      	mov	sp, r7
 8000b42:	b01e      	add	sp, #120	; 0x78
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	200001dc 	.word	0x200001dc
 8000b4c:	40012c00 	.word	0x40012c00
 8000b50:	0000027f 	.word	0x0000027f

08000b54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b54:	b590      	push	{r4, r7, lr}
 8000b56:	b09d      	sub	sp, #116	; 0x74
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000b5a:	2350      	movs	r3, #80	; 0x50
 8000b5c:	18fb      	adds	r3, r7, r3
 8000b5e:	0018      	movs	r0, r3
 8000b60:	2320      	movs	r3, #32
 8000b62:	001a      	movs	r2, r3
 8000b64:	2100      	movs	r1, #0
 8000b66:	f00b fee3 	bl	800c930 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6a:	2338      	movs	r3, #56	; 0x38
 8000b6c:	18fb      	adds	r3, r7, r3
 8000b6e:	0018      	movs	r0, r3
 8000b70:	2318      	movs	r3, #24
 8000b72:	001a      	movs	r2, r3
 8000b74:	2100      	movs	r1, #0
 8000b76:	f00b fedb 	bl	800c930 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	2334      	movs	r3, #52	; 0x34
 8000b80:	001a      	movs	r2, r3
 8000b82:	2100      	movs	r1, #0
 8000b84:	f00b fed4 	bl	800c930 <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b88:	1d3b      	adds	r3, r7, #4
 8000b8a:	2202      	movs	r2, #2
 8000b8c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b94:	1d3b      	adds	r3, r7, #4
 8000b96:	0018      	movs	r0, r3
 8000b98:	f007 fdf8 	bl	800878c <HAL_RCCEx_PeriphCLKConfig>
 8000b9c:	1e03      	subs	r3, r0, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
 8000ba0:	f003 ffa4 	bl	8004aec <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000ba4:	2380      	movs	r3, #128	; 0x80
 8000ba6:	029b      	lsls	r3, r3, #10
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f7ff fcdb 	bl	8000564 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000bae:	2001      	movs	r0, #1
 8000bb0:	f7ff fcee 	bl	8000590 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000bb4:	2438      	movs	r4, #56	; 0x38
 8000bb6:	193b      	adds	r3, r7, r4
 8000bb8:	2204      	movs	r2, #4
 8000bba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000bbc:	193b      	adds	r3, r7, r4
 8000bbe:	2202      	movs	r2, #2
 8000bc0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc2:	193b      	adds	r3, r7, r4
 8000bc4:	2203      	movs	r2, #3
 8000bc6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000bc8:	193b      	adds	r3, r7, r4
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000bce:	193b      	adds	r3, r7, r4
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000bd4:	193b      	adds	r3, r7, r4
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bda:	193a      	adds	r2, r7, r4
 8000bdc:	23a0      	movs	r3, #160	; 0xa0
 8000bde:	05db      	lsls	r3, r3, #23
 8000be0:	0011      	movs	r1, r2
 8000be2:	0018      	movs	r0, r3
 8000be4:	f00b fb22 	bl	800c22c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000be8:	0021      	movs	r1, r4
 8000bea:	187b      	adds	r3, r7, r1
 8000bec:	2208      	movs	r2, #8
 8000bee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000bf0:	187b      	adds	r3, r7, r1
 8000bf2:	2202      	movs	r2, #2
 8000bf4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf6:	187b      	adds	r3, r7, r1
 8000bf8:	2203      	movs	r2, #3
 8000bfa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000bfc:	187b      	adds	r3, r7, r1
 8000bfe:	2200      	movs	r2, #0
 8000c00:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000c02:	187b      	adds	r3, r7, r1
 8000c04:	2201      	movs	r2, #1
 8000c06:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0e:	187a      	adds	r2, r7, r1
 8000c10:	23a0      	movs	r3, #160	; 0xa0
 8000c12:	05db      	lsls	r3, r3, #23
 8000c14:	0011      	movs	r1, r2
 8000c16:	0018      	movs	r0, r3
 8000c18:	f00b fb08 	bl	800c22c <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	201c      	movs	r0, #28
 8000c20:	f7ff fb16 	bl	8000250 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000c24:	201c      	movs	r0, #28
 8000c26:	f7ff faf9 	bl	800021c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000c2a:	2150      	movs	r1, #80	; 0x50
 8000c2c:	187b      	adds	r3, r7, r1
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 57600;
 8000c32:	187b      	adds	r3, r7, r1
 8000c34:	22e1      	movs	r2, #225	; 0xe1
 8000c36:	0212      	lsls	r2, r2, #8
 8000c38:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8000c3a:	187b      	adds	r3, r7, r1
 8000c3c:	2280      	movs	r2, #128	; 0x80
 8000c3e:	0152      	lsls	r2, r2, #5
 8000c40:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000c42:	187b      	adds	r3, r7, r1
 8000c44:	2200      	movs	r2, #0
 8000c46:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000c48:	187b      	adds	r3, r7, r1
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000c4e:	187b      	adds	r3, r7, r1
 8000c50:	220c      	movs	r2, #12
 8000c52:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000c54:	187b      	adds	r3, r7, r1
 8000c56:	2200      	movs	r2, #0
 8000c58:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000c5a:	187b      	adds	r3, r7, r1
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART2, &USART_InitStruct);
 8000c60:	187b      	adds	r3, r7, r1
 8000c62:	4a16      	ldr	r2, [pc, #88]	; (8000cbc <MX_USART2_UART_Init+0x168>)
 8000c64:	0019      	movs	r1, r3
 8000c66:	0010      	movs	r0, r2
 8000c68:	f00b fdb0 	bl	800c7cc <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000c6c:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <MX_USART2_UART_Init+0x168>)
 8000c6e:	2100      	movs	r1, #0
 8000c70:	0018      	movs	r0, r3
 8000c72:	f7ff fb79 	bl	8000368 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000c76:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <MX_USART2_UART_Init+0x168>)
 8000c78:	2100      	movs	r1, #0
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f7ff fb98 	bl	80003b0 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART2);
 8000c80:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <MX_USART2_UART_Init+0x168>)
 8000c82:	0018      	movs	r0, r3
 8000c84:	f7ff fb60 	bl	8000348 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART2);
 8000c88:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <MX_USART2_UART_Init+0x168>)
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f7ff fbb6 	bl	80003fc <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 8000c90:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <MX_USART2_UART_Init+0x168>)
 8000c92:	0018      	movs	r0, r3
 8000c94:	f7ff fb4a 	bl	800032c <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 8000c98:	46c0      	nop			; (mov r8, r8)
 8000c9a:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <MX_USART2_UART_Init+0x168>)
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f7ff fbc5 	bl	800042c <LL_USART_IsActiveFlag_TEACK>
 8000ca2:	1e03      	subs	r3, r0, #0
 8000ca4:	d0f9      	beq.n	8000c9a <MX_USART2_UART_Init+0x146>
 8000ca6:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <MX_USART2_UART_Init+0x168>)
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f7ff fbd3 	bl	8000454 <LL_USART_IsActiveFlag_REACK>
 8000cae:	1e03      	subs	r3, r0, #0
 8000cb0:	d0f3      	beq.n	8000c9a <MX_USART2_UART_Init+0x146>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	46c0      	nop			; (mov r8, r8)
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	b01d      	add	sp, #116	; 0x74
 8000cba:	bd90      	pop	{r4, r7, pc}
 8000cbc:	40004400 	.word	0x40004400

08000cc0 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */
//	USART3->CR2 &= ~(USART_CR1_UE);
	USART3->CR2|=USART_CR2_MSBFIRST;
 8000cc4:	4b1c      	ldr	r3, [pc, #112]	; (8000d38 <MX_USART3_Init+0x78>)
 8000cc6:	685a      	ldr	r2, [r3, #4]
 8000cc8:	4b1b      	ldr	r3, [pc, #108]	; (8000d38 <MX_USART3_Init+0x78>)
 8000cca:	2180      	movs	r1, #128	; 0x80
 8000ccc:	0309      	lsls	r1, r1, #12
 8000cce:	430a      	orrs	r2, r1
 8000cd0:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8000cd2:	4b1a      	ldr	r3, [pc, #104]	; (8000d3c <MX_USART3_Init+0x7c>)
 8000cd4:	4a18      	ldr	r2, [pc, #96]	; (8000d38 <MX_USART3_Init+0x78>)
 8000cd6:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 8000000;
 8000cd8:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <MX_USART3_Init+0x7c>)
 8000cda:	4a19      	ldr	r2, [pc, #100]	; (8000d40 <MX_USART3_Init+0x80>)
 8000cdc:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8000cde:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <MX_USART3_Init+0x7c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8000ce4:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <MX_USART3_Init+0x7c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8000cea:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <MX_USART3_Init+0x7c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX;
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <MX_USART3_Init+0x7c>)
 8000cf2:	2208      	movs	r2, #8
 8000cf4:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_HIGH;
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <MX_USART3_Init+0x7c>)
 8000cf8:	2280      	movs	r2, #128	; 0x80
 8000cfa:	00d2      	lsls	r2, r2, #3
 8000cfc:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_2EDGE;
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <MX_USART3_Init+0x7c>)
 8000d00:	2280      	movs	r2, #128	; 0x80
 8000d02:	0092      	lsls	r2, r2, #2
 8000d04:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_ENABLE;
 8000d06:	4b0d      	ldr	r3, [pc, #52]	; (8000d3c <MX_USART3_Init+0x7c>)
 8000d08:	2280      	movs	r2, #128	; 0x80
 8000d0a:	0052      	lsls	r2, r2, #1
 8000d0c:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <MX_USART3_Init+0x7c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 8000d14:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <MX_USART3_Init+0x7c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8000d1a:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <MX_USART3_Init+0x7c>)
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f00a fb8f 	bl	800b440 <HAL_USART_Init>
 8000d22:	1e03      	subs	r3, r0, #0
 8000d24:	d001      	beq.n	8000d2a <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 8000d26:	f003 fee1 	bl	8004aec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  husart3.Init.BaudRate = 8000000;
 8000d2a:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <MX_USART3_Init+0x7c>)
 8000d2c:	4a04      	ldr	r2, [pc, #16]	; (8000d40 <MX_USART3_Init+0x80>)
 8000d2e:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 2 */

}
 8000d30:	46c0      	nop			; (mov r8, r8)
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	46c0      	nop			; (mov r8, r8)
 8000d38:	40004800 	.word	0x40004800
 8000d3c:	20000228 	.word	0x20000228
 8000d40:	007a1200 	.word	0x007a1200

08000d44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <MX_DMA_Init+0x38>)
 8000d4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <MX_DMA_Init+0x38>)
 8000d50:	2101      	movs	r1, #1
 8000d52:	430a      	orrs	r2, r1
 8000d54:	639a      	str	r2, [r3, #56]	; 0x38
 8000d56:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <MX_DMA_Init+0x38>)
 8000d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2100      	movs	r1, #0
 8000d66:	2009      	movs	r0, #9
 8000d68:	f004 fea4 	bl	8005ab4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d6c:	2009      	movs	r0, #9
 8000d6e:	f004 feb6 	bl	8005ade <HAL_NVIC_EnableIRQ>

}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	46bd      	mov	sp, r7
 8000d76:	b002      	add	sp, #8
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	40021000 	.word	0x40021000

08000d80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d86:	003b      	movs	r3, r7
 8000d88:	0018      	movs	r0, r3
 8000d8a:	2318      	movs	r3, #24
 8000d8c:	001a      	movs	r2, r3
 8000d8e:	2100      	movs	r1, #0
 8000d90:	f00b fdce 	bl	800c930 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000d94:	2002      	movs	r0, #2
 8000d96:	f7ff fbfb 	bl	8000590 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000d9a:	2004      	movs	r0, #4
 8000d9c:	f7ff fbf8 	bl	8000590 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000da0:	2001      	movs	r0, #1
 8000da2:	f7ff fbf5 	bl	8000590 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(MEM_CS_GPIO_Port, MEM_CS_Pin);
 8000da6:	2380      	movs	r3, #128	; 0x80
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	4aa0      	ldr	r2, [pc, #640]	; (800102c <MX_GPIO_Init+0x2ac>)
 8000dac:	0019      	movs	r1, r3
 8000dae:	0010      	movs	r0, r2
 8000db0:	f7ff fbc0 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_WP_GPIO_Port, MEM_WP_Pin);
 8000db4:	2380      	movs	r3, #128	; 0x80
 8000db6:	01db      	lsls	r3, r3, #7
 8000db8:	4a9d      	ldr	r2, [pc, #628]	; (8001030 <MX_GPIO_Init+0x2b0>)
 8000dba:	0019      	movs	r1, r3
 8000dbc:	0010      	movs	r0, r2
 8000dbe:	f7ff fbb9 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_HOLD_GPIO_Port, MEM_HOLD_Pin);
 8000dc2:	2380      	movs	r3, #128	; 0x80
 8000dc4:	021b      	lsls	r3, r3, #8
 8000dc6:	4a9a      	ldr	r2, [pc, #616]	; (8001030 <MX_GPIO_Init+0x2b0>)
 8000dc8:	0019      	movs	r1, r3
 8000dca:	0010      	movs	r0, r2
 8000dcc:	f7ff fbb2 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_CS_GPIO_Port, DISP_CS_Pin);
 8000dd0:	23a0      	movs	r3, #160	; 0xa0
 8000dd2:	05db      	lsls	r3, r3, #23
 8000dd4:	2140      	movs	r1, #64	; 0x40
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f7ff fbac 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_D_C_GPIO_Port, DISP_D_C_Pin);
 8000ddc:	23a0      	movs	r3, #160	; 0xa0
 8000dde:	05db      	lsls	r3, r3, #23
 8000de0:	2180      	movs	r1, #128	; 0x80
 8000de2:	0018      	movs	r0, r3
 8000de4:	f7ff fba6 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(BF_GPIO_Port, BF_Pin);
 8000de8:	4b91      	ldr	r3, [pc, #580]	; (8001030 <MX_GPIO_Init+0x2b0>)
 8000dea:	2140      	movs	r1, #64	; 0x40
 8000dec:	0018      	movs	r0, r3
 8000dee:	f7ff fba1 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_1_GPIO_Port, TEST_1_Pin);
 8000df2:	2380      	movs	r3, #128	; 0x80
 8000df4:	011a      	lsls	r2, r3, #4
 8000df6:	23a0      	movs	r3, #160	; 0xa0
 8000df8:	05db      	lsls	r3, r3, #23
 8000dfa:	0011      	movs	r1, r2
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f7ff fba5 	bl	800054c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_2_GPIO_Port, TEST_2_Pin);
 8000e02:	2380      	movs	r3, #128	; 0x80
 8000e04:	015a      	lsls	r2, r3, #5
 8000e06:	23a0      	movs	r3, #160	; 0xa0
 8000e08:	05db      	lsls	r3, r3, #23
 8000e0a:	0011      	movs	r1, r2
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f7ff fb9d 	bl	800054c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = MEM_CS_Pin;
 8000e12:	003b      	movs	r3, r7
 8000e14:	2280      	movs	r2, #128	; 0x80
 8000e16:	0092      	lsls	r2, r2, #2
 8000e18:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e1a:	003b      	movs	r3, r7
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e20:	003b      	movs	r3, r7
 8000e22:	2203      	movs	r2, #3
 8000e24:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e26:	003b      	movs	r3, r7
 8000e28:	2200      	movs	r2, #0
 8000e2a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e2c:	003b      	movs	r3, r7
 8000e2e:	2201      	movs	r2, #1
 8000e30:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_CS_GPIO_Port, &GPIO_InitStruct);
 8000e32:	003b      	movs	r3, r7
 8000e34:	4a7d      	ldr	r2, [pc, #500]	; (800102c <MX_GPIO_Init+0x2ac>)
 8000e36:	0019      	movs	r1, r3
 8000e38:	0010      	movs	r0, r2
 8000e3a:	f00b f9f7 	bl	800c22c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_WP_Pin;
 8000e3e:	003b      	movs	r3, r7
 8000e40:	2280      	movs	r2, #128	; 0x80
 8000e42:	01d2      	lsls	r2, r2, #7
 8000e44:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e46:	003b      	movs	r3, r7
 8000e48:	2201      	movs	r2, #1
 8000e4a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e4c:	003b      	movs	r3, r7
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e52:	003b      	movs	r3, r7
 8000e54:	2200      	movs	r2, #0
 8000e56:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e58:	003b      	movs	r3, r7
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_WP_GPIO_Port, &GPIO_InitStruct);
 8000e5e:	003b      	movs	r3, r7
 8000e60:	4a73      	ldr	r2, [pc, #460]	; (8001030 <MX_GPIO_Init+0x2b0>)
 8000e62:	0019      	movs	r1, r3
 8000e64:	0010      	movs	r0, r2
 8000e66:	f00b f9e1 	bl	800c22c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_HOLD_Pin;
 8000e6a:	003b      	movs	r3, r7
 8000e6c:	2280      	movs	r2, #128	; 0x80
 8000e6e:	0212      	lsls	r2, r2, #8
 8000e70:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e72:	003b      	movs	r3, r7
 8000e74:	2201      	movs	r2, #1
 8000e76:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e78:	003b      	movs	r3, r7
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e7e:	003b      	movs	r3, r7
 8000e80:	2200      	movs	r2, #0
 8000e82:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e84:	003b      	movs	r3, r7
 8000e86:	2201      	movs	r2, #1
 8000e88:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_HOLD_GPIO_Port, &GPIO_InitStruct);
 8000e8a:	003b      	movs	r3, r7
 8000e8c:	4a68      	ldr	r2, [pc, #416]	; (8001030 <MX_GPIO_Init+0x2b0>)
 8000e8e:	0019      	movs	r1, r3
 8000e90:	0010      	movs	r0, r2
 8000e92:	f00b f9cb 	bl	800c22c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_3_Pin;
 8000e96:	003b      	movs	r3, r7
 8000e98:	2201      	movs	r2, #1
 8000e9a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e9c:	003b      	movs	r3, r7
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000ea2:	003b      	movs	r3, r7
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_3_GPIO_Port, &GPIO_InitStruct);
 8000ea8:	003a      	movs	r2, r7
 8000eaa:	23a0      	movs	r3, #160	; 0xa0
 8000eac:	05db      	lsls	r3, r3, #23
 8000eae:	0011      	movs	r1, r2
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	f00b f9bb 	bl	800c22c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_2_Pin;
 8000eb6:	003b      	movs	r3, r7
 8000eb8:	2202      	movs	r2, #2
 8000eba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000ebc:	003b      	movs	r3, r7
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000ec2:	003b      	movs	r3, r7
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_2_GPIO_Port, &GPIO_InitStruct);
 8000ec8:	003a      	movs	r2, r7
 8000eca:	23a0      	movs	r3, #160	; 0xa0
 8000ecc:	05db      	lsls	r3, r3, #23
 8000ece:	0011      	movs	r1, r2
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f00b f9ab 	bl	800c22c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_1_Pin;
 8000ed6:	003b      	movs	r3, r7
 8000ed8:	2210      	movs	r2, #16
 8000eda:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000edc:	003b      	movs	r3, r7
 8000ede:	2200      	movs	r2, #0
 8000ee0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000ee2:	003b      	movs	r3, r7
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_1_GPIO_Port, &GPIO_InitStruct);
 8000ee8:	003a      	movs	r2, r7
 8000eea:	23a0      	movs	r3, #160	; 0xa0
 8000eec:	05db      	lsls	r3, r3, #23
 8000eee:	0011      	movs	r1, r2
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f00b f99b 	bl	800c22c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 8000ef6:	003b      	movs	r3, r7
 8000ef8:	2240      	movs	r2, #64	; 0x40
 8000efa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000efc:	003b      	movs	r3, r7
 8000efe:	2201      	movs	r2, #1
 8000f00:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f02:	003b      	movs	r3, r7
 8000f04:	2203      	movs	r2, #3
 8000f06:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f08:	003b      	movs	r3, r7
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f0e:	003b      	movs	r3, r7
 8000f10:	2200      	movs	r2, #0
 8000f12:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 8000f14:	003a      	movs	r2, r7
 8000f16:	23a0      	movs	r3, #160	; 0xa0
 8000f18:	05db      	lsls	r3, r3, #23
 8000f1a:	0011      	movs	r1, r2
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f00b f985 	bl	800c22c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_D_C_Pin;
 8000f22:	003b      	movs	r3, r7
 8000f24:	2280      	movs	r2, #128	; 0x80
 8000f26:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f28:	003b      	movs	r3, r7
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2e:	003b      	movs	r3, r7
 8000f30:	2203      	movs	r2, #3
 8000f32:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f34:	003b      	movs	r3, r7
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f3a:	003b      	movs	r3, r7
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_D_C_GPIO_Port, &GPIO_InitStruct);
 8000f40:	003a      	movs	r2, r7
 8000f42:	23a0      	movs	r3, #160	; 0xa0
 8000f44:	05db      	lsls	r3, r3, #23
 8000f46:	0011      	movs	r1, r2
 8000f48:	0018      	movs	r0, r3
 8000f4a:	f00b f96f 	bl	800c22c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BF_Pin;
 8000f4e:	003b      	movs	r3, r7
 8000f50:	2240      	movs	r2, #64	; 0x40
 8000f52:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f54:	003b      	movs	r3, r7
 8000f56:	2201      	movs	r2, #1
 8000f58:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5a:	003b      	movs	r3, r7
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f60:	003b      	movs	r3, r7
 8000f62:	2200      	movs	r2, #0
 8000f64:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000f66:	003b      	movs	r3, r7
 8000f68:	2201      	movs	r2, #1
 8000f6a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BF_GPIO_Port, &GPIO_InitStruct);
 8000f6c:	003b      	movs	r3, r7
 8000f6e:	4a30      	ldr	r2, [pc, #192]	; (8001030 <MX_GPIO_Init+0x2b0>)
 8000f70:	0019      	movs	r1, r3
 8000f72:	0010      	movs	r0, r2
 8000f74:	f00b f95a 	bl	800c22c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_1_Pin;
 8000f78:	003b      	movs	r3, r7
 8000f7a:	2280      	movs	r2, #128	; 0x80
 8000f7c:	0112      	lsls	r2, r2, #4
 8000f7e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f80:	003b      	movs	r3, r7
 8000f82:	2201      	movs	r2, #1
 8000f84:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f86:	003b      	movs	r3, r7
 8000f88:	2203      	movs	r2, #3
 8000f8a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f8c:	003b      	movs	r3, r7
 8000f8e:	2200      	movs	r2, #0
 8000f90:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f92:	003b      	movs	r3, r7
 8000f94:	2200      	movs	r2, #0
 8000f96:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_1_GPIO_Port, &GPIO_InitStruct);
 8000f98:	003a      	movs	r2, r7
 8000f9a:	23a0      	movs	r3, #160	; 0xa0
 8000f9c:	05db      	lsls	r3, r3, #23
 8000f9e:	0011      	movs	r1, r2
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f00b f943 	bl	800c22c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_2_Pin;
 8000fa6:	003b      	movs	r3, r7
 8000fa8:	2280      	movs	r2, #128	; 0x80
 8000faa:	0152      	lsls	r2, r2, #5
 8000fac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000fae:	003b      	movs	r3, r7
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb4:	003b      	movs	r3, r7
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fba:	003b      	movs	r3, r7
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fc0:	003b      	movs	r3, r7
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_2_GPIO_Port, &GPIO_InitStruct);
 8000fc6:	003a      	movs	r2, r7
 8000fc8:	23a0      	movs	r3, #160	; 0xa0
 8000fca:	05db      	lsls	r3, r3, #23
 8000fcc:	0011      	movs	r1, r2
 8000fce:	0018      	movs	r0, r3
 8000fd0:	f00b f92c 	bl	800c22c <LL_GPIO_Init>

  /**/

  //GPIO config after CUBE_MX
  /**/
  	  GPIO_InitStruct.Pin = KEY_4_Pin;
 8000fd4:	003b      	movs	r3, r7
 8000fd6:	2280      	movs	r2, #128	; 0x80
 8000fd8:	0192      	lsls	r2, r2, #6
 8000fda:	601a      	str	r2, [r3, #0]
  	  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000fdc:	003b      	movs	r3, r7
 8000fde:	2200      	movs	r2, #0
 8000fe0:	605a      	str	r2, [r3, #4]
  	  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000fe2:	003b      	movs	r3, r7
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	611a      	str	r2, [r3, #16]
  	  LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 8000fe8:	003a      	movs	r2, r7
 8000fea:	23a0      	movs	r3, #160	; 0xa0
 8000fec:	05db      	lsls	r3, r3, #23
 8000fee:	0011      	movs	r1, r2
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	f00b f91b 	bl	800c22c <LL_GPIO_Init>
  	  /**/
  	    GPIO_InitStruct.Pin = KEY_5_Pin;
 8000ff6:	003b      	movs	r3, r7
 8000ff8:	2280      	movs	r2, #128	; 0x80
 8000ffa:	01d2      	lsls	r2, r2, #7
 8000ffc:	601a      	str	r2, [r3, #0]
  	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000ffe:	003b      	movs	r3, r7
 8001000:	2200      	movs	r2, #0
 8001002:	605a      	str	r2, [r3, #4]
  	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001004:	003b      	movs	r3, r7
 8001006:	2201      	movs	r2, #1
 8001008:	611a      	str	r2, [r3, #16]
  	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 800100a:	003a      	movs	r2, r7
 800100c:	23a0      	movs	r3, #160	; 0xa0
 800100e:	05db      	lsls	r3, r3, #23
 8001010:	0011      	movs	r1, r2
 8001012:	0018      	movs	r0, r3
 8001014:	f00b f90a 	bl	800c22c <LL_GPIO_Init>
  	  /**/
  LL_SYSCFG_EnableFastModePlus(LL_SYSCFG_I2C_FASTMODEPLUS_PB9);
 8001018:	2380      	movs	r3, #128	; 0x80
 800101a:	031b      	lsls	r3, r3, #12
 800101c:	0018      	movs	r0, r3
 800101e:	f7ff fa79 	bl	8000514 <LL_SYSCFG_EnableFastModePlus>

}
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	46bd      	mov	sp, r7
 8001026:	b006      	add	sp, #24
 8001028:	bd80      	pop	{r7, pc}
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	50000400 	.word	0x50000400
 8001030:	50000800 	.word	0x50000800

08001034 <USART2_RX_Callback>:

/* USER CODE BEGIN 4 */

void  USART2_RX_Callback(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  dt1 = LL_USART_ReceiveData9(USART2);// LL implementaion of 1 byte receive
 8001038:	4b14      	ldr	r3, [pc, #80]	; (800108c <USART2_RX_Callback+0x58>)
 800103a:	0018      	movs	r0, r3
 800103c:	f7ff fa5c 	bl	80004f8 <LL_USART_ReceiveData9>
 8001040:	0003      	movs	r3, r0
 8001042:	001a      	movs	r2, r3
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <USART2_RX_Callback+0x5c>)
 8001046:	801a      	strh	r2, [r3, #0]
//	dt1 = (uint16_t)(USART2->RDR & 0x01FF);//CMSIS implementaion of 1 byte receive
  ByteReceived=1;
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <USART2_RX_Callback+0x60>)
 800104a:	2201      	movs	r2, #1
 800104c:	701a      	strb	r2, [r3, #0]
  if(dt1 & 0x100){
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <USART2_RX_Callback+0x5c>)
 8001050:	881b      	ldrh	r3, [r3, #0]
 8001052:	001a      	movs	r2, r3
 8001054:	2380      	movs	r3, #128	; 0x80
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	4013      	ands	r3, r2
 800105a:	d00a      	beq.n	8001072 <USART2_RX_Callback+0x3e>
	  cmd[0]=dt1;
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <USART2_RX_Callback+0x5c>)
 800105e:	881b      	ldrh	r3, [r3, #0]
 8001060:	b2da      	uxtb	r2, r3
 8001062:	4b0d      	ldr	r3, [pc, #52]	; (8001098 <USART2_RX_Callback+0x64>)
 8001064:	701a      	strb	r2, [r3, #0]
	  ind = 0;
 8001066:	4b0d      	ldr	r3, [pc, #52]	; (800109c <USART2_RX_Callback+0x68>)
 8001068:	2200      	movs	r2, #0
 800106a:	801a      	strh	r2, [r3, #0]
	  firstByteReceived=1;
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <USART2_RX_Callback+0x6c>)
 800106e:	2201      	movs	r2, #1
 8001070:	701a      	strb	r2, [r3, #0]
//  while (!LL_USART_IsActiveFlag_TXE(USART2)) {}
//  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
  }
//  cmdReceive();
  if(firstByteReceived==1){
 8001072:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <USART2_RX_Callback+0x6c>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d104      	bne.n	8001084 <USART2_RX_Callback+0x50>
	  cmdReceive(dt1);
 800107a:	4b05      	ldr	r3, [pc, #20]	; (8001090 <USART2_RX_Callback+0x5c>)
 800107c:	881b      	ldrh	r3, [r3, #0]
 800107e:	0018      	movs	r0, r3
 8001080:	f000 f84a 	bl	8001118 <cmdReceive>
  }
}
 8001084:	46c0      	nop			; (mov r8, r8)
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	40004400 	.word	0x40004400
 8001090:	200002e6 	.word	0x200002e6
 8001094:	200002e4 	.word	0x200002e4
 8001098:	200002b4 	.word	0x200002b4
 800109c:	200002e8 	.word	0x200002e8
 80010a0:	200002e5 	.word	0x200002e5

080010a4 <HAL_USART_TxCpltCallback>:
//return;
//	}
}
//==============================================================
void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart3)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
	GPIOA->ODR &= ~(1 << 7);	//reset dc
 80010ac:	23a0      	movs	r3, #160	; 0xa0
 80010ae:	05db      	lsls	r3, r3, #23
 80010b0:	695a      	ldr	r2, [r3, #20]
 80010b2:	23a0      	movs	r3, #160	; 0xa0
 80010b4:	05db      	lsls	r3, r3, #23
 80010b6:	2180      	movs	r1, #128	; 0x80
 80010b8:	438a      	bics	r2, r1
 80010ba:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= 1 << 6;	//set cs
 80010bc:	23a0      	movs	r3, #160	; 0xa0
 80010be:	05db      	lsls	r3, r3, #23
 80010c0:	695a      	ldr	r2, [r3, #20]
 80010c2:	23a0      	movs	r3, #160	; 0xa0
 80010c4:	05db      	lsls	r3, r3, #23
 80010c6:	2140      	movs	r1, #64	; 0x40
 80010c8:	430a      	orrs	r2, r1
 80010ca:	615a      	str	r2, [r3, #20]
	cmd2Execute=0;
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <HAL_USART_TxCpltCallback+0x44>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
//	while(BFEN==0){};
	GPIOC->ODR |= 1 << 6;	//set BF
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <HAL_USART_TxCpltCallback+0x48>)
 80010d4:	695a      	ldr	r2, [r3, #20]
 80010d6:	4b05      	ldr	r3, [pc, #20]	; (80010ec <HAL_USART_TxCpltCallback+0x48>)
 80010d8:	2140      	movs	r1, #64	; 0x40
 80010da:	430a      	orrs	r2, r1
 80010dc:	615a      	str	r2, [r3, #20]
}
 80010de:	46c0      	nop			; (mov r8, r8)
 80010e0:	46bd      	mov	sp, r7
 80010e2:	b002      	add	sp, #8
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	200002ea 	.word	0x200002ea
 80010ec:	50000800 	.word	0x50000800

080010f0 <HAL_I2S_TxHalfCpltCallback>:
	//	cmd2Execute=0;
//	GPIOC->ODR |= 1 << 6;	//set BF
}
//======================================================================================================================
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s1)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	sound_half_transfer_callback();
 80010f8:	f001 fc62 	bl	80029c0 <sound_half_transfer_callback>
}
 80010fc:	46c0      	nop			; (mov r8, r8)
 80010fe:	46bd      	mov	sp, r7
 8001100:	b002      	add	sp, #8
 8001102:	bd80      	pop	{r7, pc}

08001104 <HAL_I2S_TxCpltCallback>:
//======================================================================================================================
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s1)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	sound_full_transfer_callback();
 800110c:	f001 fc62 	bl	80029d4 <sound_full_transfer_callback>
}
 8001110:	46c0      	nop			; (mov r8, r8)
 8001112:	46bd      	mov	sp, r7
 8001114:	b002      	add	sp, #8
 8001116:	bd80      	pop	{r7, pc}

08001118 <cmdReceive>:
//=======================================================================================================================
	void cmdReceive (uint16_t dt1)
	{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	0002      	movs	r2, r0
 8001120:	1dbb      	adds	r3, r7, #6
 8001122:	801a      	strh	r2, [r3, #0]
//	  uint8_t inputCS=0;
	  uint8_t i=0;
 8001124:	230f      	movs	r3, #15
 8001126:	18fb      	adds	r3, r7, r3
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]
	  while (!ByteReceived) {}
 800112c:	46c0      	nop			; (mov r8, r8)
 800112e:	4b39      	ldr	r3, [pc, #228]	; (8001214 <cmdReceive+0xfc>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d0fb      	beq.n	800112e <cmdReceive+0x16>
	  ByteReceived=0;
 8001136:	4b37      	ldr	r3, [pc, #220]	; (8001214 <cmdReceive+0xfc>)
 8001138:	2200      	movs	r2, #0
 800113a:	701a      	strb	r2, [r3, #0]
	  cmd[ind] = dt1;
 800113c:	4b36      	ldr	r3, [pc, #216]	; (8001218 <cmdReceive+0x100>)
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	001a      	movs	r2, r3
 8001142:	1dbb      	adds	r3, r7, #6
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	b2d9      	uxtb	r1, r3
 8001148:	4b34      	ldr	r3, [pc, #208]	; (800121c <cmdReceive+0x104>)
 800114a:	5499      	strb	r1, [r3, r2]
//	  if(dt1==0x110){
//		  BFEN=0;
//	  }
	  ind++;
 800114c:	4b32      	ldr	r3, [pc, #200]	; (8001218 <cmdReceive+0x100>)
 800114e:	881b      	ldrh	r3, [r3, #0]
 8001150:	3301      	adds	r3, #1
 8001152:	b29a      	uxth	r2, r3
 8001154:	4b30      	ldr	r3, [pc, #192]	; (8001218 <cmdReceive+0x100>)
 8001156:	801a      	strh	r2, [r3, #0]
	  if(ind>=1){
 8001158:	4b2f      	ldr	r3, [pc, #188]	; (8001218 <cmdReceive+0x100>)
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d04f      	beq.n	8001200 <cmdReceive+0xe8>
//		  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
		  if(ind>cmd[1]+1){
 8001160:	4b2d      	ldr	r3, [pc, #180]	; (8001218 <cmdReceive+0x100>)
 8001162:	881b      	ldrh	r3, [r3, #0]
 8001164:	001a      	movs	r2, r3
 8001166:	4b2d      	ldr	r3, [pc, #180]	; (800121c <cmdReceive+0x104>)
 8001168:	785b      	ldrb	r3, [r3, #1]
 800116a:	3301      	adds	r3, #1
 800116c:	429a      	cmp	r2, r3
 800116e:	dd47      	ble.n	8001200 <cmdReceive+0xe8>
//			  LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 for(i=0;i<(cmd[1]+2);i++){
 8001170:	230f      	movs	r3, #15
 8001172:	18fb      	adds	r3, r7, r3
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]
 8001178:	e00f      	b.n	800119a <cmdReceive+0x82>
				 inputCS+=cmd[i];
 800117a:	210f      	movs	r1, #15
 800117c:	187b      	adds	r3, r7, r1
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	4a26      	ldr	r2, [pc, #152]	; (800121c <cmdReceive+0x104>)
 8001182:	5cd2      	ldrb	r2, [r2, r3]
 8001184:	4b26      	ldr	r3, [pc, #152]	; (8001220 <cmdReceive+0x108>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	18d3      	adds	r3, r2, r3
 800118a:	b2da      	uxtb	r2, r3
 800118c:	4b24      	ldr	r3, [pc, #144]	; (8001220 <cmdReceive+0x108>)
 800118e:	701a      	strb	r2, [r3, #0]
			 for(i=0;i<(cmd[1]+2);i++){
 8001190:	187b      	adds	r3, r7, r1
 8001192:	781a      	ldrb	r2, [r3, #0]
 8001194:	187b      	adds	r3, r7, r1
 8001196:	3201      	adds	r2, #1
 8001198:	701a      	strb	r2, [r3, #0]
 800119a:	4b20      	ldr	r3, [pc, #128]	; (800121c <cmdReceive+0x104>)
 800119c:	785b      	ldrb	r3, [r3, #1]
 800119e:	1c5a      	adds	r2, r3, #1
 80011a0:	210f      	movs	r1, #15
 80011a2:	187b      	adds	r3, r7, r1
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	dae7      	bge.n	800117a <cmdReceive+0x62>
			 }
			 if(!(inputCS==0x00)&&(ind==cmd[1]+2)){
 80011aa:	4b1d      	ldr	r3, [pc, #116]	; (8001220 <cmdReceive+0x108>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d022      	beq.n	80011f8 <cmdReceive+0xe0>
 80011b2:	4b19      	ldr	r3, [pc, #100]	; (8001218 <cmdReceive+0x100>)
 80011b4:	881b      	ldrh	r3, [r3, #0]
 80011b6:	001a      	movs	r2, r3
 80011b8:	4b18      	ldr	r3, [pc, #96]	; (800121c <cmdReceive+0x104>)
 80011ba:	785b      	ldrb	r3, [r3, #1]
 80011bc:	3302      	adds	r3, #2
 80011be:	429a      	cmp	r2, r3
 80011c0:	d11a      	bne.n	80011f8 <cmdReceive+0xe0>
//			 	LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
//				 firstByteReceived=0;
				 firstByteReceived=0;
 80011c2:	4b18      	ldr	r3, [pc, #96]	; (8001224 <cmdReceive+0x10c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	701a      	strb	r2, [r3, #0]
				 				 for (i=0;i<cmd[1]+2;i++){
 80011c8:	187b      	adds	r3, r7, r1
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]
 80011ce:	e00a      	b.n	80011e6 <cmdReceive+0xce>
				 					 cmd[i]=0;
 80011d0:	200f      	movs	r0, #15
 80011d2:	183b      	adds	r3, r7, r0
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	4a11      	ldr	r2, [pc, #68]	; (800121c <cmdReceive+0x104>)
 80011d8:	2100      	movs	r1, #0
 80011da:	54d1      	strb	r1, [r2, r3]
				 				 for (i=0;i<cmd[1]+2;i++){
 80011dc:	183b      	adds	r3, r7, r0
 80011de:	781a      	ldrb	r2, [r3, #0]
 80011e0:	183b      	adds	r3, r7, r0
 80011e2:	3201      	adds	r2, #1
 80011e4:	701a      	strb	r2, [r3, #0]
 80011e6:	4b0d      	ldr	r3, [pc, #52]	; (800121c <cmdReceive+0x104>)
 80011e8:	785b      	ldrb	r3, [r3, #1]
 80011ea:	1c5a      	adds	r2, r3, #1
 80011ec:	230f      	movs	r3, #15
 80011ee:	18fb      	adds	r3, r7, r3
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	daec      	bge.n	80011d0 <cmdReceive+0xb8>
			 if(!(inputCS==0x00)&&(ind==cmd[1]+2)){
 80011f6:	e003      	b.n	8001200 <cmdReceive+0xe8>
				 				 }
			 }
			 else{
				 answer2CPU(cmd);
 80011f8:	4b08      	ldr	r3, [pc, #32]	; (800121c <cmdReceive+0x104>)
 80011fa:	0018      	movs	r0, r3
 80011fc:	f000 fad8 	bl	80017b0 <answer2CPU>
//				 GPIOC->ODR |= 1 << 6;	//set BF
//			 }
		  }
	  }
//	  ind = 0;
	  USART2->ICR|=USART_ICR_ORECF;
 8001200:	4b09      	ldr	r3, [pc, #36]	; (8001228 <cmdReceive+0x110>)
 8001202:	6a1a      	ldr	r2, [r3, #32]
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <cmdReceive+0x110>)
 8001206:	2108      	movs	r1, #8
 8001208:	430a      	orrs	r2, r1
 800120a:	621a      	str	r2, [r3, #32]
	}
 800120c:	46c0      	nop			; (mov r8, r8)
 800120e:	46bd      	mov	sp, r7
 8001210:	b004      	add	sp, #16
 8001212:	bd80      	pop	{r7, pc}
 8001214:	200002e4 	.word	0x200002e4
 8001218:	200002e8 	.word	0x200002e8
 800121c:	200002b4 	.word	0x200002b4
 8001220:	200002ec 	.word	0x200002ec
 8001224:	200002e5 	.word	0x200002e5
 8001228:	40004400 	.word	0x40004400

0800122c <USART_AS_SPI_sendCMD>:
	void USART_AS_SPI_sendCMD(uint8_t byte) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	0002      	movs	r2, r0
 8001234:	1dfb      	adds	r3, r7, #7
 8001236:	701a      	strb	r2, [r3, #0]
			HAL_USART_Transmit(&husart3, (uint8_t*)&byte, 1, 10);
 8001238:	1df9      	adds	r1, r7, #7
 800123a:	4804      	ldr	r0, [pc, #16]	; (800124c <USART_AS_SPI_sendCMD+0x20>)
 800123c:	230a      	movs	r3, #10
 800123e:	2201      	movs	r2, #1
 8001240:	f00a f94e 	bl	800b4e0 <HAL_USART_Transmit>
		}
 8001244:	46c0      	nop			; (mov r8, r8)
 8001246:	46bd      	mov	sp, r7
 8001248:	b002      	add	sp, #8
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000228 	.word	0x20000228

08001250 <weoInit>:
	void USART_AS_SPI_sendDAT(uint8_t byte) //(Without CS and D/C)
	{
		HAL_USART_Transmit(&husart3, (uint8_t*) &byte, 1, 10);
	}
	void weoInit(void) {
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0

		USART3->CR1 &= ~(USART_CR1_UE);
 8001254:	4b4a      	ldr	r3, [pc, #296]	; (8001380 <weoInit+0x130>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	4b49      	ldr	r3, [pc, #292]	; (8001380 <weoInit+0x130>)
 800125a:	2101      	movs	r1, #1
 800125c:	438a      	bics	r2, r1
 800125e:	601a      	str	r2, [r3, #0]
		USART3->CR2 |= USART_CR2_MSBFIRST;
 8001260:	4b47      	ldr	r3, [pc, #284]	; (8001380 <weoInit+0x130>)
 8001262:	685a      	ldr	r2, [r3, #4]
 8001264:	4b46      	ldr	r3, [pc, #280]	; (8001380 <weoInit+0x130>)
 8001266:	2180      	movs	r1, #128	; 0x80
 8001268:	0309      	lsls	r1, r1, #12
 800126a:	430a      	orrs	r2, r1
 800126c:	605a      	str	r2, [r3, #4]
		USART3->CR1 |= USART_CR1_UE;
 800126e:	4b44      	ldr	r3, [pc, #272]	; (8001380 <weoInit+0x130>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	4b43      	ldr	r3, [pc, #268]	; (8001380 <weoInit+0x130>)
 8001274:	2101      	movs	r1, #1
 8001276:	430a      	orrs	r2, r1
 8001278:	601a      	str	r2, [r3, #0]

		HAL_Delay(1);
 800127a:	2001      	movs	r0, #1
 800127c:	f004 f8d4 	bl	8005428 <HAL_Delay>
		HAL_Delay(1);
 8001280:	2001      	movs	r0, #1
 8001282:	f004 f8d1 	bl	8005428 <HAL_Delay>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001286:	4b3f      	ldr	r3, [pc, #252]	; (8001384 <weoInit+0x134>)
 8001288:	2100      	movs	r1, #0
 800128a:	0018      	movs	r0, r3
 800128c:	f009 f854 	bl	800a338 <HAL_TIM_PWM_Start>
		HAL_Delay(1);
 8001290:	2001      	movs	r0, #1
 8001292:	f004 f8c9 	bl	8005428 <HAL_Delay>

		GPIOA->ODR &= ~(1 << 6);	//reset cs
 8001296:	23a0      	movs	r3, #160	; 0xa0
 8001298:	05db      	lsls	r3, r3, #23
 800129a:	695a      	ldr	r2, [r3, #20]
 800129c:	23a0      	movs	r3, #160	; 0xa0
 800129e:	05db      	lsls	r3, r3, #23
 80012a0:	2140      	movs	r1, #64	; 0x40
 80012a2:	438a      	bics	r2, r1
 80012a4:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1 << 7);	// reset dc
 80012a6:	23a0      	movs	r3, #160	; 0xa0
 80012a8:	05db      	lsls	r3, r3, #23
 80012aa:	695a      	ldr	r2, [r3, #20]
 80012ac:	23a0      	movs	r3, #160	; 0xa0
 80012ae:	05db      	lsls	r3, r3, #23
 80012b0:	2180      	movs	r1, #128	; 0x80
 80012b2:	438a      	bics	r2, r1
 80012b4:	615a      	str	r2, [r3, #20]
		USART_AS_SPI_sendCMD(0xAF);
 80012b6:	20af      	movs	r0, #175	; 0xaf
 80012b8:	f7ff ffb8 	bl	800122c <USART_AS_SPI_sendCMD>
//		USART_AS_SPI_sendCMD(0xB6);	//Set Second precharge Period
//		USART_AS_SPI_sendCMD(0x0F);	// 0x00 - 0x0F availible default = 0x04 = 0b0100
//		USART_AS_SPI_sendCMD(0xBC);	//Set Vp
//		USART_AS_SPI_sendCMD(0x08);	// 0x05 - default

		USART_AS_SPI_sendCMD(0xB8);
 80012bc:	20b8      	movs	r0, #184	; 0xb8
 80012be:	f7ff ffb5 	bl	800122c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0);
 80012c2:	2000      	movs	r0, #0
 80012c4:	f7ff ffb2 	bl	800122c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0);
 80012c8:	2000      	movs	r0, #0
 80012ca:	f7ff ffaf 	bl	800122c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(1);
 80012ce:	2001      	movs	r0, #1
 80012d0:	f7ff ffac 	bl	800122c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(2);
 80012d4:	2002      	movs	r0, #2
 80012d6:	f7ff ffa9 	bl	800122c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(4);
 80012da:	2004      	movs	r0, #4
 80012dc:	f7ff ffa6 	bl	800122c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(7);
 80012e0:	2007      	movs	r0, #7
 80012e2:	f7ff ffa3 	bl	800122c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(11);
 80012e6:	200b      	movs	r0, #11
 80012e8:	f7ff ffa0 	bl	800122c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(14);
 80012ec:	200e      	movs	r0, #14
 80012ee:	f7ff ff9d 	bl	800122c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(18);
 80012f2:	2012      	movs	r0, #18
 80012f4:	f7ff ff9a 	bl	800122c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(23);
 80012f8:	2017      	movs	r0, #23
 80012fa:	f7ff ff97 	bl	800122c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(27);
 80012fe:	201b      	movs	r0, #27
 8001300:	f7ff ff94 	bl	800122c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(33);
 8001304:	2021      	movs	r0, #33	; 0x21
 8001306:	f7ff ff91 	bl	800122c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(40);
 800130a:	2028      	movs	r0, #40	; 0x28
 800130c:	f7ff ff8e 	bl	800122c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(49);
 8001310:	2031      	movs	r0, #49	; 0x31
 8001312:	f7ff ff8b 	bl	800122c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(63);
 8001316:	203f      	movs	r0, #63	; 0x3f
 8001318:	f7ff ff88 	bl	800122c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA0);	//Set Re-map
 800131c:	20a0      	movs	r0, #160	; 0xa0
 800131e:	f7ff ff85 	bl	800122c <USART_AS_SPI_sendCMD>
//		USART_AS_SPI_sendCMD(0x54);
//		USART_AS_SPI_sendCMD(0b00010100);
		USART_AS_SPI_sendCMD(0x51); //	0x51 is a proper remap!
 8001322:	2051      	movs	r0, #81	; 0x51
 8001324:	f7ff ff82 	bl	800122c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 8001328:	2081      	movs	r0, #129	; 0x81
 800132a:	f7ff ff7f 	bl	800122c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xFF);
 800132e:	20ff      	movs	r0, #255	; 0xff
 8001330:	f7ff ff7c 	bl	800122c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA1);	//Set Display Start Line
 8001334:	20a1      	movs	r0, #161	; 0xa1
 8001336:	f7ff ff79 	bl	800122c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 800133a:	2000      	movs	r0, #0
 800133c:	f7ff ff76 	bl	800122c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA2);	//Set Display Offset
 8001340:	20a2      	movs	r0, #162	; 0xa2
 8001342:	f7ff ff73 	bl	800122c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 8001346:	2000      	movs	r0, #0
 8001348:	f7ff ff70 	bl	800122c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA8);  // Select Multiplex Ratio
 800134c:	20a8      	movs	r0, #168	; 0xa8
 800134e:	f7ff ff6d 	bl	800122c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x7F); // Default => 0x3F (1/64 Duty)	0x1F(1/32 Duty)
 8001352:	207f      	movs	r0, #127	; 0x7f
 8001354:	f7ff ff6a 	bl	800122c <USART_AS_SPI_sendCMD>


//		USART_AS_SPI_sendCMD(0xFF);
//		USART_AS_SPI_sendCMD(0xFF);
		GPIOA->ODR |= 1 << 7;	//set dc
 8001358:	23a0      	movs	r3, #160	; 0xa0
 800135a:	05db      	lsls	r3, r3, #23
 800135c:	695a      	ldr	r2, [r3, #20]
 800135e:	23a0      	movs	r3, #160	; 0xa0
 8001360:	05db      	lsls	r3, r3, #23
 8001362:	2180      	movs	r1, #128	; 0x80
 8001364:	430a      	orrs	r2, r1
 8001366:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= 1 << 6;	//set cs
 8001368:	23a0      	movs	r3, #160	; 0xa0
 800136a:	05db      	lsls	r3, r3, #23
 800136c:	695a      	ldr	r2, [r3, #20]
 800136e:	23a0      	movs	r3, #160	; 0xa0
 8001370:	05db      	lsls	r3, r3, #23
 8001372:	2140      	movs	r1, #64	; 0x40
 8001374:	430a      	orrs	r2, r1
 8001376:	615a      	str	r2, [r3, #20]
		//=======================================================================================================
	}
 8001378:	46c0      	nop			; (mov r8, r8)
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	46c0      	nop			; (mov r8, r8)
 8001380:	40004800 	.word	0x40004800
 8001384:	200001dc 	.word	0x200001dc

08001388 <weoClear>:
	void weoClear(void) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
		uint16_t i;

					GPIOA->ODR &= ~(1 << 6);	//reset cs
 800138e:	23a0      	movs	r3, #160	; 0xa0
 8001390:	05db      	lsls	r3, r3, #23
 8001392:	695a      	ldr	r2, [r3, #20]
 8001394:	23a0      	movs	r3, #160	; 0xa0
 8001396:	05db      	lsls	r3, r3, #23
 8001398:	2140      	movs	r1, #64	; 0x40
 800139a:	438a      	bics	r2, r1
 800139c:	615a      	str	r2, [r3, #20]
					GPIOA->ODR &= ~(1 << 7);	// reset dc
 800139e:	23a0      	movs	r3, #160	; 0xa0
 80013a0:	05db      	lsls	r3, r3, #23
 80013a2:	695a      	ldr	r2, [r3, #20]
 80013a4:	23a0      	movs	r3, #160	; 0xa0
 80013a6:	05db      	lsls	r3, r3, #23
 80013a8:	2180      	movs	r1, #128	; 0x80
 80013aa:	438a      	bics	r2, r1
 80013ac:	615a      	str	r2, [r3, #20]
						USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 80013ae:	2075      	movs	r0, #117	; 0x75
 80013b0:	f7ff ff3c 	bl	800122c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 80013b4:	2000      	movs	r0, #0
 80013b6:	f7ff ff39 	bl	800122c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 80013ba:	207f      	movs	r0, #127	; 0x7f
 80013bc:	f7ff ff36 	bl	800122c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 80013c0:	2015      	movs	r0, #21
 80013c2:	f7ff ff33 	bl	800122c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 80013c6:	2000      	movs	r0, #0
 80013c8:	f7ff ff30 	bl	800122c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 80013cc:	207f      	movs	r0, #127	; 0x7f
 80013ce:	f7ff ff2d 	bl	800122c <USART_AS_SPI_sendCMD>
					GPIOA->ODR &= ~(1 << 6);	//reset cs
 80013d2:	23a0      	movs	r3, #160	; 0xa0
 80013d4:	05db      	lsls	r3, r3, #23
 80013d6:	695a      	ldr	r2, [r3, #20]
 80013d8:	23a0      	movs	r3, #160	; 0xa0
 80013da:	05db      	lsls	r3, r3, #23
 80013dc:	2140      	movs	r1, #64	; 0x40
 80013de:	438a      	bics	r2, r1
 80013e0:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 7;	// set dc
 80013e2:	23a0      	movs	r3, #160	; 0xa0
 80013e4:	05db      	lsls	r3, r3, #23
 80013e6:	695a      	ldr	r2, [r3, #20]
 80013e8:	23a0      	movs	r3, #160	; 0xa0
 80013ea:	05db      	lsls	r3, r3, #23
 80013ec:	2180      	movs	r1, #128	; 0x80
 80013ee:	430a      	orrs	r2, r1
 80013f0:	615a      	str	r2, [r3, #20]
					for (i = 0; i <= 8193;i++) {	//fullScreen + small reserve
 80013f2:	1dbb      	adds	r3, r7, #6
 80013f4:	2200      	movs	r2, #0
 80013f6:	801a      	strh	r2, [r3, #0]
 80013f8:	e00d      	b.n	8001416 <weoClear+0x8e>
						while(!(USART3->ISR & USART_ISR_TXE)){};
 80013fa:	46c0      	nop			; (mov r8, r8)
 80013fc:	4b12      	ldr	r3, [pc, #72]	; (8001448 <weoClear+0xc0>)
 80013fe:	69db      	ldr	r3, [r3, #28]
 8001400:	2280      	movs	r2, #128	; 0x80
 8001402:	4013      	ands	r3, r2
 8001404:	d0fa      	beq.n	80013fc <weoClear+0x74>
						USART3->TDR = (uint8_t) 0x00;
 8001406:	4b10      	ldr	r3, [pc, #64]	; (8001448 <weoClear+0xc0>)
 8001408:	2200      	movs	r2, #0
 800140a:	629a      	str	r2, [r3, #40]	; 0x28
					for (i = 0; i <= 8193;i++) {	//fullScreen + small reserve
 800140c:	1dbb      	adds	r3, r7, #6
 800140e:	881a      	ldrh	r2, [r3, #0]
 8001410:	1dbb      	adds	r3, r7, #6
 8001412:	3201      	adds	r2, #1
 8001414:	801a      	strh	r2, [r3, #0]
 8001416:	1dbb      	adds	r3, r7, #6
 8001418:	881b      	ldrh	r3, [r3, #0]
 800141a:	4a0c      	ldr	r2, [pc, #48]	; (800144c <weoClear+0xc4>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d9ec      	bls.n	80013fa <weoClear+0x72>
					}
					GPIOA->ODR &= ~(1 << 7);	//reset dc
 8001420:	23a0      	movs	r3, #160	; 0xa0
 8001422:	05db      	lsls	r3, r3, #23
 8001424:	695a      	ldr	r2, [r3, #20]
 8001426:	23a0      	movs	r3, #160	; 0xa0
 8001428:	05db      	lsls	r3, r3, #23
 800142a:	2180      	movs	r1, #128	; 0x80
 800142c:	438a      	bics	r2, r1
 800142e:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 6;	//set cs
 8001430:	23a0      	movs	r3, #160	; 0xa0
 8001432:	05db      	lsls	r3, r3, #23
 8001434:	695a      	ldr	r2, [r3, #20]
 8001436:	23a0      	movs	r3, #160	; 0xa0
 8001438:	05db      	lsls	r3, r3, #23
 800143a:	2140      	movs	r1, #64	; 0x40
 800143c:	430a      	orrs	r2, r1
 800143e:	615a      	str	r2, [r3, #20]
	}
 8001440:	46c0      	nop			; (mov r8, r8)
 8001442:	46bd      	mov	sp, r7
 8001444:	b002      	add	sp, #8
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40004800 	.word	0x40004800
 800144c:	00002001 	.word	0x00002001

08001450 <weoDrawRectangleFilled>:
//========================================================================================================================
	void weoDrawRectangleFilled(unsigned char start_x, unsigned char start_y,
				unsigned char end_x, unsigned char end_y, unsigned char contrast,
				uint8_t MEM_Buffer[]) {
 8001450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	0005      	movs	r5, r0
 8001458:	000c      	movs	r4, r1
 800145a:	0010      	movs	r0, r2
 800145c:	0019      	movs	r1, r3
 800145e:	1dfb      	adds	r3, r7, #7
 8001460:	1c2a      	adds	r2, r5, #0
 8001462:	701a      	strb	r2, [r3, #0]
 8001464:	1dbb      	adds	r3, r7, #6
 8001466:	1c22      	adds	r2, r4, #0
 8001468:	701a      	strb	r2, [r3, #0]
 800146a:	1d7b      	adds	r3, r7, #5
 800146c:	1c02      	adds	r2, r0, #0
 800146e:	701a      	strb	r2, [r3, #0]
 8001470:	1d3b      	adds	r3, r7, #4
 8001472:	1c0a      	adds	r2, r1, #0
 8001474:	701a      	strb	r2, [r3, #0]
			uint16_t i = 0;
 8001476:	240e      	movs	r4, #14
 8001478:	193b      	adds	r3, r7, r4
 800147a:	2200      	movs	r2, #0
 800147c:	801a      	strh	r2, [r3, #0]
			uint8_t start_x_New,start_y_New,end_x_New,end_y_New;
			if (start_x > OLED_DIM_WIDTH || start_y > OLED_DIM_HEIGHT
 800147e:	1dfb      	adds	r3, r7, #7
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	b25b      	sxtb	r3, r3
 8001484:	2b00      	cmp	r3, #0
 8001486:	da00      	bge.n	800148a <weoDrawRectangleFilled+0x3a>
 8001488:	e0c2      	b.n	8001610 <weoDrawRectangleFilled+0x1c0>
 800148a:	1dbb      	adds	r3, r7, #6
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	b25b      	sxtb	r3, r3
 8001490:	2b00      	cmp	r3, #0
 8001492:	da00      	bge.n	8001496 <weoDrawRectangleFilled+0x46>
 8001494:	e0bc      	b.n	8001610 <weoDrawRectangleFilled+0x1c0>
					|| end_x > OLED_DIM_WIDTH || end_y > OLED_DIM_HEIGHT) {
 8001496:	1d7b      	adds	r3, r7, #5
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	b25b      	sxtb	r3, r3
 800149c:	2b00      	cmp	r3, #0
 800149e:	da00      	bge.n	80014a2 <weoDrawRectangleFilled+0x52>
 80014a0:	e0b6      	b.n	8001610 <weoDrawRectangleFilled+0x1c0>
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	b25b      	sxtb	r3, r3
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	da00      	bge.n	80014ae <weoDrawRectangleFilled+0x5e>
 80014ac:	e0b0      	b.n	8001610 <weoDrawRectangleFilled+0x1c0>
				return;
			}

			start_x_New=start_x;
 80014ae:	250d      	movs	r5, #13
 80014b0:	197b      	adds	r3, r7, r5
 80014b2:	1dfa      	adds	r2, r7, #7
 80014b4:	7812      	ldrb	r2, [r2, #0]
 80014b6:	701a      	strb	r2, [r3, #0]
			start_y_New=0x7F-end_y;
 80014b8:	260c      	movs	r6, #12
 80014ba:	19bb      	adds	r3, r7, r6
 80014bc:	1d3a      	adds	r2, r7, #4
 80014be:	7812      	ldrb	r2, [r2, #0]
 80014c0:	217f      	movs	r1, #127	; 0x7f
 80014c2:	1a8a      	subs	r2, r1, r2
 80014c4:	701a      	strb	r2, [r3, #0]
			end_x_New=end_x;
 80014c6:	230b      	movs	r3, #11
 80014c8:	18fb      	adds	r3, r7, r3
 80014ca:	1d7a      	adds	r2, r7, #5
 80014cc:	7812      	ldrb	r2, [r2, #0]
 80014ce:	701a      	strb	r2, [r3, #0]
			end_y_New=0x7F-start_y;
 80014d0:	220a      	movs	r2, #10
 80014d2:	18bb      	adds	r3, r7, r2
 80014d4:	1dba      	adds	r2, r7, #6
 80014d6:	7812      	ldrb	r2, [r2, #0]
 80014d8:	217f      	movs	r1, #127	; 0x7f
 80014da:	1a8a      	subs	r2, r1, r2
 80014dc:	701a      	strb	r2, [r3, #0]

			GPIOA->ODR &= ~(1 << 6);	//reset cs
 80014de:	23a0      	movs	r3, #160	; 0xa0
 80014e0:	05db      	lsls	r3, r3, #23
 80014e2:	695a      	ldr	r2, [r3, #20]
 80014e4:	23a0      	movs	r3, #160	; 0xa0
 80014e6:	05db      	lsls	r3, r3, #23
 80014e8:	2140      	movs	r1, #64	; 0x40
 80014ea:	438a      	bics	r2, r1
 80014ec:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 80014ee:	23a0      	movs	r3, #160	; 0xa0
 80014f0:	05db      	lsls	r3, r3, #23
 80014f2:	695a      	ldr	r2, [r3, #20]
 80014f4:	23a0      	movs	r3, #160	; 0xa0
 80014f6:	05db      	lsls	r3, r3, #23
 80014f8:	2180      	movs	r1, #128	; 0x80
 80014fa:	438a      	bics	r2, r1
 80014fc:	615a      	str	r2, [r3, #20]
					USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 80014fe:	2075      	movs	r0, #117	; 0x75
 8001500:	f7ff fe94 	bl	800122c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_x_New/1);
 8001504:	197b      	adds	r3, r7, r5
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	0018      	movs	r0, r3
 800150a:	f7ff fe8f 	bl	800122c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_x_New/1);
 800150e:	230b      	movs	r3, #11
 8001510:	18fb      	adds	r3, r7, r3
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	0018      	movs	r0, r3
 8001516:	f7ff fe89 	bl	800122c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 800151a:	2015      	movs	r0, #21
 800151c:	f7ff fe86 	bl	800122c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_y_New/2);
 8001520:	19bb      	adds	r3, r7, r6
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	085b      	lsrs	r3, r3, #1
 8001526:	b2db      	uxtb	r3, r3
 8001528:	0018      	movs	r0, r3
 800152a:	f7ff fe7f 	bl	800122c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_y_New/2);
 800152e:	220a      	movs	r2, #10
 8001530:	18bb      	adds	r3, r7, r2
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	085b      	lsrs	r3, r3, #1
 8001536:	b2db      	uxtb	r3, r3
 8001538:	0018      	movs	r0, r3
 800153a:	f7ff fe77 	bl	800122c <USART_AS_SPI_sendCMD>
//					USART_AS_SPI_sendCMD(0x81);	//Contrast Level
//					USART_AS_SPI_sendCMD(contrast);
			GPIOA->ODR |= 1 << 7;	//set dc
 800153e:	23a0      	movs	r3, #160	; 0xa0
 8001540:	05db      	lsls	r3, r3, #23
 8001542:	695a      	ldr	r2, [r3, #20]
 8001544:	23a0      	movs	r3, #160	; 0xa0
 8001546:	05db      	lsls	r3, r3, #23
 8001548:	2180      	movs	r1, #128	; 0x80
 800154a:	430a      	orrs	r2, r1
 800154c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 800154e:	23a0      	movs	r3, #160	; 0xa0
 8001550:	05db      	lsls	r3, r3, #23
 8001552:	695a      	ldr	r2, [r3, #20]
 8001554:	23a0      	movs	r3, #160	; 0xa0
 8001556:	05db      	lsls	r3, r3, #23
 8001558:	2140      	movs	r1, #64	; 0x40
 800155a:	430a      	orrs	r2, r1
 800155c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 6);	//reset cs
 800155e:	23a0      	movs	r3, #160	; 0xa0
 8001560:	05db      	lsls	r3, r3, #23
 8001562:	695a      	ldr	r2, [r3, #20]
 8001564:	23a0      	movs	r3, #160	; 0xa0
 8001566:	05db      	lsls	r3, r3, #23
 8001568:	2140      	movs	r1, #64	; 0x40
 800156a:	438a      	bics	r2, r1
 800156c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 7;	// set dc
 800156e:	23a0      	movs	r3, #160	; 0xa0
 8001570:	05db      	lsls	r3, r3, #23
 8001572:	695a      	ldr	r2, [r3, #20]
 8001574:	23a0      	movs	r3, #160	; 0xa0
 8001576:	05db      	lsls	r3, r3, #23
 8001578:	2180      	movs	r1, #128	; 0x80
 800157a:	430a      	orrs	r2, r1
 800157c:	615a      	str	r2, [r3, #20]

			for (i = 0; i < ((end_x_New - start_x_New + 1) * (end_y_New/2 - start_y_New /2 + 1)+1);i++) {
 800157e:	193b      	adds	r3, r7, r4
 8001580:	2200      	movs	r2, #0
 8001582:	801a      	strh	r2, [r3, #0]
 8001584:	e012      	b.n	80015ac <weoDrawRectangleFilled+0x15c>
//			for (i = 0; i < len;i++) {
				while(!(USART3->ISR & USART_ISR_TXE)){};
 8001586:	46c0      	nop			; (mov r8, r8)
 8001588:	4b23      	ldr	r3, [pc, #140]	; (8001618 <weoDrawRectangleFilled+0x1c8>)
 800158a:	69db      	ldr	r3, [r3, #28]
 800158c:	2280      	movs	r2, #128	; 0x80
 800158e:	4013      	ands	r3, r2
 8001590:	d0fa      	beq.n	8001588 <weoDrawRectangleFilled+0x138>
				USART3->TDR =MEM_Buffer[i];
 8001592:	210e      	movs	r1, #14
 8001594:	187b      	adds	r3, r7, r1
 8001596:	881b      	ldrh	r3, [r3, #0]
 8001598:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800159a:	18d3      	adds	r3, r2, r3
 800159c:	781a      	ldrb	r2, [r3, #0]
 800159e:	4b1e      	ldr	r3, [pc, #120]	; (8001618 <weoDrawRectangleFilled+0x1c8>)
 80015a0:	629a      	str	r2, [r3, #40]	; 0x28
			for (i = 0; i < ((end_x_New - start_x_New + 1) * (end_y_New/2 - start_y_New /2 + 1)+1);i++) {
 80015a2:	187b      	adds	r3, r7, r1
 80015a4:	881a      	ldrh	r2, [r3, #0]
 80015a6:	187b      	adds	r3, r7, r1
 80015a8:	3201      	adds	r2, #1
 80015aa:	801a      	strh	r2, [r3, #0]
 80015ac:	230b      	movs	r3, #11
 80015ae:	18fb      	adds	r3, r7, r3
 80015b0:	781a      	ldrb	r2, [r3, #0]
 80015b2:	230d      	movs	r3, #13
 80015b4:	18fb      	adds	r3, r7, r3
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	3301      	adds	r3, #1
 80015bc:	220a      	movs	r2, #10
 80015be:	18ba      	adds	r2, r7, r2
 80015c0:	7812      	ldrb	r2, [r2, #0]
 80015c2:	0852      	lsrs	r2, r2, #1
 80015c4:	b2d2      	uxtb	r2, r2
 80015c6:	0011      	movs	r1, r2
 80015c8:	220c      	movs	r2, #12
 80015ca:	18ba      	adds	r2, r7, r2
 80015cc:	7812      	ldrb	r2, [r2, #0]
 80015ce:	0852      	lsrs	r2, r2, #1
 80015d0:	b2d2      	uxtb	r2, r2
 80015d2:	1a8a      	subs	r2, r1, r2
 80015d4:	3201      	adds	r2, #1
 80015d6:	435a      	muls	r2, r3
 80015d8:	230e      	movs	r3, #14
 80015da:	18fb      	adds	r3, r7, r3
 80015dc:	881b      	ldrh	r3, [r3, #0]
 80015de:	429a      	cmp	r2, r3
 80015e0:	dad1      	bge.n	8001586 <weoDrawRectangleFilled+0x136>
			}
			while(!(USART3->ISR & USART_ISR_TXE)){};
 80015e2:	46c0      	nop			; (mov r8, r8)
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <weoDrawRectangleFilled+0x1c8>)
 80015e6:	69db      	ldr	r3, [r3, #28]
 80015e8:	2280      	movs	r2, #128	; 0x80
 80015ea:	4013      	ands	r3, r2
 80015ec:	d0fa      	beq.n	80015e4 <weoDrawRectangleFilled+0x194>
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 80015ee:	23a0      	movs	r3, #160	; 0xa0
 80015f0:	05db      	lsls	r3, r3, #23
 80015f2:	695a      	ldr	r2, [r3, #20]
 80015f4:	23a0      	movs	r3, #160	; 0xa0
 80015f6:	05db      	lsls	r3, r3, #23
 80015f8:	2180      	movs	r1, #128	; 0x80
 80015fa:	438a      	bics	r2, r1
 80015fc:	615a      	str	r2, [r3, #20]
//			USART_AS_SPI_sendCMD(0xBB);	// command for NOP
//			USART_AS_SPI_sendCMD(0x81);	//Contrast Level
//			USART_AS_SPI_sendCMD(0xFF);
//			HAL_Delay(1);
//			GPIOA->ODR &= ~(1 << 7);	//reset dc
			GPIOA->ODR |= 1 << 6;	//set cs
 80015fe:	23a0      	movs	r3, #160	; 0xa0
 8001600:	05db      	lsls	r3, r3, #23
 8001602:	695a      	ldr	r2, [r3, #20]
 8001604:	23a0      	movs	r3, #160	; 0xa0
 8001606:	05db      	lsls	r3, r3, #23
 8001608:	2140      	movs	r1, #64	; 0x40
 800160a:	430a      	orrs	r2, r1
 800160c:	615a      	str	r2, [r3, #20]
 800160e:	e000      	b.n	8001612 <weoDrawRectangleFilled+0x1c2>
				return;
 8001610:	46c0      	nop			; (mov r8, r8)
		}
 8001612:	46bd      	mov	sp, r7
 8001614:	b005      	add	sp, #20
 8001616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001618:	40004800 	.word	0x40004800

0800161c <I2C_SOUND_ChangePage>:
//		LL_GPIO_ResetOutputPin(GPIOC, DISP_RES_Pin);
		HAL_Delay(1);
//		LL_GPIO_SetOutputPin(GPIOC, DISP_RES_Pin);
		HAL_Delay(1);
	}
	void I2C_SOUND_ChangePage(uint8_t pageNum) {
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af02      	add	r7, sp, #8
 8001622:	0002      	movs	r2, r0
 8001624:	1dfb      	adds	r3, r7, #7
 8001626:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { 0x00, pageNum };
 8001628:	210c      	movs	r1, #12
 800162a:	187b      	adds	r3, r7, r1
 800162c:	2200      	movs	r2, #0
 800162e:	701a      	strb	r2, [r3, #0]
 8001630:	187b      	adds	r3, r7, r1
 8001632:	1dfa      	adds	r2, r7, #7
 8001634:	7812      	ldrb	r2, [r2, #0]
 8001636:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x30, buf, 2, 1000);
 8001638:	187a      	adds	r2, r7, r1
 800163a:	4806      	ldr	r0, [pc, #24]	; (8001654 <I2C_SOUND_ChangePage+0x38>)
 800163c:	23fa      	movs	r3, #250	; 0xfa
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	9300      	str	r3, [sp, #0]
 8001642:	2302      	movs	r3, #2
 8001644:	2130      	movs	r1, #48	; 0x30
 8001646:	f004 ff29 	bl	800649c <HAL_I2C_Master_Transmit>
	}
 800164a:	46c0      	nop			; (mov r8, r8)
 800164c:	46bd      	mov	sp, r7
 800164e:	b004      	add	sp, #16
 8001650:	bd80      	pop	{r7, pc}
 8001652:	46c0      	nop			; (mov r8, r8)
 8001654:	2000008c 	.word	0x2000008c

08001658 <WriteReg_I2C_SOUND>:
	void WriteReg_I2C_SOUND(uint8_t reg, uint8_t data) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af02      	add	r7, sp, #8
 800165e:	0002      	movs	r2, r0
 8001660:	1dfb      	adds	r3, r7, #7
 8001662:	701a      	strb	r2, [r3, #0]
 8001664:	1dbb      	adds	r3, r7, #6
 8001666:	1c0a      	adds	r2, r1, #0
 8001668:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { reg, data };
 800166a:	210c      	movs	r1, #12
 800166c:	187b      	adds	r3, r7, r1
 800166e:	1dfa      	adds	r2, r7, #7
 8001670:	7812      	ldrb	r2, [r2, #0]
 8001672:	701a      	strb	r2, [r3, #0]
 8001674:	187b      	adds	r3, r7, r1
 8001676:	1dba      	adds	r2, r7, #6
 8001678:	7812      	ldrb	r2, [r2, #0]
 800167a:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x30, buf, 2, 1000);	//(uint8_t*)&
 800167c:	187a      	adds	r2, r7, r1
 800167e:	4806      	ldr	r0, [pc, #24]	; (8001698 <WriteReg_I2C_SOUND+0x40>)
 8001680:	23fa      	movs	r3, #250	; 0xfa
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	2302      	movs	r3, #2
 8001688:	2130      	movs	r1, #48	; 0x30
 800168a:	f004 ff07 	bl	800649c <HAL_I2C_Master_Transmit>
	}
 800168e:	46c0      	nop			; (mov r8, r8)
 8001690:	46bd      	mov	sp, r7
 8001692:	b004      	add	sp, #16
 8001694:	bd80      	pop	{r7, pc}
 8001696:	46c0      	nop			; (mov r8, r8)
 8001698:	2000008c 	.word	0x2000008c

0800169c <soundSetup>:
	void soundSetup(void) {
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
		I2C_SOUND_ChangePage(0x00);
 80016a0:	2000      	movs	r0, #0
 80016a2:	f7ff ffbb 	bl	800161c <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x01);	//Assert Software reset (P0, R1, D0=1)
 80016a6:	2101      	movs	r1, #1
 80016a8:	2001      	movs	r0, #1
 80016aa:	f7ff ffd5 	bl	8001658 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x01);
 80016ae:	2001      	movs	r0, #1
 80016b0:	f7ff ffb4 	bl	800161c <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x02, 0x00);	//LDO output programmed as 1.8V and Level shifters powered up. (P1, R2, D5-D4=00, D3=0)
 80016b4:	2100      	movs	r1, #0
 80016b6:	2002      	movs	r0, #2
 80016b8:	f7ff ffce 	bl	8001658 <WriteReg_I2C_SOUND>
		HAL_Delay(15);
 80016bc:	200f      	movs	r0, #15
 80016be:	f003 feb3 	bl	8005428 <HAL_Delay>
		I2C_SOUND_ChangePage(0x00);
 80016c2:	2000      	movs	r0, #0
 80016c4:	f7ff ffaa 	bl	800161c <I2C_SOUND_ChangePage>
	WriteReg_I2C_SOUND(0x04,0x03);//PLL_clkin = MCLK, codec_clkin = PLL_CLK, MCLK should be 11.2896MHz
 80016c8:	2103      	movs	r1, #3
 80016ca:	2004      	movs	r0, #4
 80016cc:	f7ff ffc4 	bl	8001658 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x05,0x91);//Power up PLL, set P=1, R=1
 80016d0:	2191      	movs	r1, #145	; 0x91
 80016d2:	2005      	movs	r0, #5
 80016d4:	f7ff ffc0 	bl	8001658 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x06,0x04);//Set J = 4
 80016d8:	2104      	movs	r1, #4
 80016da:	2006      	movs	r0, #6
 80016dc:	f7ff ffbc 	bl	8001658 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x07,0x00);//SET D=0000
 80016e0:	2100      	movs	r1, #0
 80016e2:	2007      	movs	r0, #7
 80016e4:	f7ff ffb8 	bl	8001658 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x08,0x00);//SET D=0000
 80016e8:	2100      	movs	r1, #0
 80016ea:	2008      	movs	r0, #8
 80016ec:	f7ff ffb4 	bl	8001658 <WriteReg_I2C_SOUND>
	HAL_Delay(15);
 80016f0:	200f      	movs	r0, #15
 80016f2:	f003 fe99 	bl	8005428 <HAL_Delay>
	WriteReg_I2C_SOUND(0x0B,0x84);//DAC NDAC Powered up, set NDAC = 4
 80016f6:	2184      	movs	r1, #132	; 0x84
 80016f8:	200b      	movs	r0, #11
 80016fa:	f7ff ffad 	bl	8001658 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0C,0x82);//DAC MDAC Powered up, set MDAC = 2
 80016fe:	2182      	movs	r1, #130	; 0x82
 8001700:	200c      	movs	r0, #12
 8001702:	f7ff ffa9 	bl	8001658 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0D,0x00);//DAC OSR(9:0)-> DOSR=128
 8001706:	2100      	movs	r1, #0
 8001708:	200d      	movs	r0, #13
 800170a:	f7ff ffa5 	bl	8001658 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0E,0x80);//DAC OSR(9:0)
 800170e:	2180      	movs	r1, #128	; 0x80
 8001710:	200e      	movs	r0, #14
 8001712:	f7ff ffa1 	bl	8001658 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x1B, 0x00);	//Codec Interface control Word length = 16bits, BCLK&WCLK inputs, I2S mode. (P0, R27, D7-D6=00, D5-D4=00, D3-D2=00)
 8001716:	2100      	movs	r1, #0
 8001718:	201b      	movs	r0, #27
 800171a:	f7ff ff9d 	bl	8001658 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x1C,0x00);//Data slot offset
 800171e:	2100      	movs	r1, #0
 8001720:	201c      	movs	r0, #28
 8001722:	f7ff ff99 	bl	8001658 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x3c,0x02);//Dac Instruction programming PRB #2 for Mono routing. Type interpolation (x8) and 3 programmable	Biquads. (P0, R60, D4-D0=0010)
 8001726:	2102      	movs	r1, #2
 8001728:	203c      	movs	r0, #60	; 0x3c
 800172a:	f7ff ff95 	bl	8001658 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x01);
 800172e:	2001      	movs	r0, #1
 8001730:	f7ff ff74 	bl	800161c <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x10);	//Master Reference Powered on (P1, R1, D4=1)
 8001734:	2110      	movs	r1, #16
 8001736:	2001      	movs	r0, #1
 8001738:	f7ff ff8e 	bl	8001658 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x0A, 0x00);	//Output common mode for DAC set to 0.9V (default) (P1, R10)
 800173c:	2100      	movs	r1, #0
 800173e:	200a      	movs	r0, #10
 8001740:	f7ff ff8a 	bl	8001658 <WriteReg_I2C_SOUND>
		////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x0C, 0x00);	// No analog routing to headphone//0x0c,0x15 by SB
 8001744:	2100      	movs	r1, #0
 8001746:	200c      	movs	r0, #12
 8001748:	f7ff ff86 	bl	8001658 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x16, 0x00);	// Headphone volume=0//0x16,0x75 by SB
 800174c:	2100      	movs	r1, #0
 800174e:	2016      	movs	r0, #22
 8001750:	f7ff ff82 	bl	8001658 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x18, 0x00);	//No need to enable Mixer M and Mixer P, AINL Voulme, 0dB Gain 0x18,0x75 by SB
 8001754:	2100      	movs	r1, #0
 8001756:	2018      	movs	r0, #24
 8001758:	f7ff ff7e 	bl	8001658 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x19, 0x00);	//No need to enable Mixer M and Mixer P, AINR Voulme, 0dB Gain 0x19,0x75 by SB
 800175c:	2100      	movs	r1, #0
 800175e:	2019      	movs	r0, #25
 8001760:	f7ff ff7a 	bl	8001658 <WriteReg_I2C_SOUND>
		//////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x09, 0x00);	//AINL,AINR are powered down
 8001764:	2100      	movs	r1, #0
 8001766:	2009      	movs	r0, #9
 8001768:	f7ff ff76 	bl	8001658 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 800176c:	2100      	movs	r1, #0
 800176e:	2010      	movs	r0, #16
 8001770:	f7ff ff72 	bl	8001658 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x2E, 0x00);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000)
 8001774:	2100      	movs	r1, #0
 8001776:	202e      	movs	r0, #46	; 0x2e
 8001778:	f7ff ff6e 	bl	8001658 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x30, 0x10);	//SPK driver Gain=6.0dB (P1, R48, D6-D4=001)
 800177c:	2110      	movs	r1, #16
 800177e:	2030      	movs	r0, #48	; 0x30
 8001780:	f7ff ff6a 	bl	8001658 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x2D, 0x02);	//SPK powered up (P1, R45, D1=1)
 8001784:	2102      	movs	r1, #2
 8001786:	202d      	movs	r0, #45	; 0x2d
 8001788:	f7ff ff66 	bl	8001658 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x00);
 800178c:	2000      	movs	r0, #0
 800178e:	f7ff ff45 	bl	800161c <I2C_SOUND_ChangePage>
		//////////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x3F, 0x90);	//DAC powered up, Soft step 1 per Fs. (P0, R63, D7=1, D5-D4=01, D3-D2=00, D1-D0=00)
 8001792:	2190      	movs	r1, #144	; 0x90
 8001794:	203f      	movs	r0, #63	; 0x3f
 8001796:	f7ff ff5f 	bl	8001658 <WriteReg_I2C_SOUND>
		// 1<<7|1<<4|2 by SB
		WriteReg_I2C_SOUND(0x41, 0x00);	//DAC digital gain 0dB (P0, R65, D7-D0=00000000) cnDacValueOn by SB
 800179a:	2100      	movs	r1, #0
 800179c:	2041      	movs	r0, #65	; 0x41
 800179e:	f7ff ff5b 	bl	8001658 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x40, 0x04);	//DAC volume not muted. (P0, R64, D3=0, D2=1) 1<<4 by SB
 80017a2:	2104      	movs	r1, #4
 80017a4:	2040      	movs	r0, #64	; 0x40
 80017a6:	f7ff ff57 	bl	8001658 <WriteReg_I2C_SOUND>
	}
 80017aa:	46c0      	nop			; (mov r8, r8)
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <answer2CPU>:
//=============================================================================================
	uint8_t answer2CPU(uint8_t cmd[]) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
		uint8_t keyboard = 0xFF;
 80017b8:	230f      	movs	r3, #15
 80017ba:	18fb      	adds	r3, r7, r3
 80017bc:	22ff      	movs	r2, #255	; 0xff
 80017be:	701a      	strb	r2, [r3, #0]
//		uint16_t ans[10];
		uint8_t i;
		uint8_t myCS = 0;					//   COMMON PART FOR EVERY COMMAND
 80017c0:	230d      	movs	r3, #13
 80017c2:	18fb      	adds	r3, r7, r3
 80017c4:	2200      	movs	r2, #0
 80017c6:	701a      	strb	r2, [r3, #0]
		uint8_t myLength;
		isReceiverDisabled=1;
 80017c8:	4bd4      	ldr	r3, [pc, #848]	; (8001b1c <answer2CPU+0x36c>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	701a      	strb	r2, [r3, #0]

		cmd2Execute=0;
 80017ce:	4bd4      	ldr	r3, [pc, #848]	; (8001b20 <answer2CPU+0x370>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	701a      	strb	r2, [r3, #0]
		cmd[0]&=~0x100;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	781a      	ldrb	r2, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	701a      	strb	r2, [r3, #0]
		if ((cmd[0] == 0x11)||(cmd[0] == 0x12)||(cmd[0] == 0x13)||(cmd[0] == 0x14)||(cmd[0] == 0x15)) {GPIOC->ODR &= ~(1 << 6);}//reset BF
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b11      	cmp	r3, #17
 80017e2:	d00f      	beq.n	8001804 <answer2CPU+0x54>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b12      	cmp	r3, #18
 80017ea:	d00b      	beq.n	8001804 <answer2CPU+0x54>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b13      	cmp	r3, #19
 80017f2:	d007      	beq.n	8001804 <answer2CPU+0x54>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b14      	cmp	r3, #20
 80017fa:	d003      	beq.n	8001804 <answer2CPU+0x54>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b15      	cmp	r3, #21
 8001802:	d105      	bne.n	8001810 <answer2CPU+0x60>
 8001804:	4bc7      	ldr	r3, [pc, #796]	; (8001b24 <answer2CPU+0x374>)
 8001806:	695a      	ldr	r2, [r3, #20]
 8001808:	4bc6      	ldr	r3, [pc, #792]	; (8001b24 <answer2CPU+0x374>)
 800180a:	2140      	movs	r1, #64	; 0x40
 800180c:	438a      	bics	r2, r1
 800180e:	615a      	str	r2, [r3, #20]
		if (cmd[0] == 0x11) {
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b11      	cmp	r3, #17
 8001816:	d105      	bne.n	8001824 <answer2CPU+0x74>
//			GPIOC->ODR &= ~(1 << 6);
			GPIOC->ODR &=~ GPIO_ODR_OD6;
 8001818:	4bc2      	ldr	r3, [pc, #776]	; (8001b24 <answer2CPU+0x374>)
 800181a:	695a      	ldr	r2, [r3, #20]
 800181c:	4bc1      	ldr	r3, [pc, #772]	; (8001b24 <answer2CPU+0x374>)
 800181e:	2140      	movs	r1, #64	; 0x40
 8001820:	438a      	bics	r2, r1
 8001822:	615a      	str	r2, [r3, #20]
		}//reset BF
		ans[0] = cmd[0]|0x80;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2280      	movs	r2, #128	; 0x80
 800182a:	4252      	negs	r2, r2
 800182c:	4313      	orrs	r3, r2
 800182e:	b2db      	uxtb	r3, r3
 8001830:	b29a      	uxth	r2, r3
 8001832:	4bbd      	ldr	r3, [pc, #756]	; (8001b28 <answer2CPU+0x378>)
 8001834:	801a      	strh	r2, [r3, #0]
//==================================================================================================
			if ((cmd[0] >= 0x10)&&(cmd[0] < 0x16)) { //answer is keyboard + stuff information                  0003
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	2b0f      	cmp	r3, #15
 800183c:	d800      	bhi.n	8001840 <answer2CPU+0x90>
 800183e:	e157      	b.n	8001af0 <answer2CPU+0x340>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b15      	cmp	r3, #21
 8001846:	d900      	bls.n	800184a <answer2CPU+0x9a>
 8001848:	e152      	b.n	8001af0 <answer2CPU+0x340>
//		if (cmd[0] != 0x10) {
//			GPIOC->ODR &= ~(1 << 6);
				if ((GPIOA->IDR & (1 << 4)) == 0) {
 800184a:	23a0      	movs	r3, #160	; 0xa0
 800184c:	05db      	lsls	r3, r3, #23
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	2210      	movs	r2, #16
 8001852:	4013      	ands	r3, r2
 8001854:	d106      	bne.n	8001864 <answer2CPU+0xb4>
					keyboard &= 0b11111110;
 8001856:	220f      	movs	r2, #15
 8001858:	18bb      	adds	r3, r7, r2
 800185a:	18ba      	adds	r2, r7, r2
 800185c:	7812      	ldrb	r2, [r2, #0]
 800185e:	2101      	movs	r1, #1
 8001860:	438a      	bics	r2, r1
 8001862:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 1)) == 0) {
 8001864:	23a0      	movs	r3, #160	; 0xa0
 8001866:	05db      	lsls	r3, r3, #23
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	2202      	movs	r2, #2
 800186c:	4013      	ands	r3, r2
 800186e:	d106      	bne.n	800187e <answer2CPU+0xce>
					keyboard &= 0b11111101;
 8001870:	220f      	movs	r2, #15
 8001872:	18bb      	adds	r3, r7, r2
 8001874:	18ba      	adds	r2, r7, r2
 8001876:	7812      	ldrb	r2, [r2, #0]
 8001878:	2102      	movs	r1, #2
 800187a:	438a      	bics	r2, r1
 800187c:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 0)) == 0) {
 800187e:	23a0      	movs	r3, #160	; 0xa0
 8001880:	05db      	lsls	r3, r3, #23
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	2201      	movs	r2, #1
 8001886:	4013      	ands	r3, r2
 8001888:	d106      	bne.n	8001898 <answer2CPU+0xe8>
					keyboard &= 0b11111011;
 800188a:	220f      	movs	r2, #15
 800188c:	18bb      	adds	r3, r7, r2
 800188e:	18ba      	adds	r2, r7, r2
 8001890:	7812      	ldrb	r2, [r2, #0]
 8001892:	2104      	movs	r1, #4
 8001894:	438a      	bics	r2, r1
 8001896:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 13)) == 0) {
 8001898:	23a0      	movs	r3, #160	; 0xa0
 800189a:	05db      	lsls	r3, r3, #23
 800189c:	691a      	ldr	r2, [r3, #16]
 800189e:	2380      	movs	r3, #128	; 0x80
 80018a0:	019b      	lsls	r3, r3, #6
 80018a2:	4013      	ands	r3, r2
 80018a4:	d106      	bne.n	80018b4 <answer2CPU+0x104>
					keyboard &= 0b11110111;
 80018a6:	220f      	movs	r2, #15
 80018a8:	18bb      	adds	r3, r7, r2
 80018aa:	18ba      	adds	r2, r7, r2
 80018ac:	7812      	ldrb	r2, [r2, #0]
 80018ae:	2108      	movs	r1, #8
 80018b0:	438a      	bics	r2, r1
 80018b2:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 14)) == 0) {
 80018b4:	23a0      	movs	r3, #160	; 0xa0
 80018b6:	05db      	lsls	r3, r3, #23
 80018b8:	691a      	ldr	r2, [r3, #16]
 80018ba:	2380      	movs	r3, #128	; 0x80
 80018bc:	01db      	lsls	r3, r3, #7
 80018be:	4013      	ands	r3, r2
 80018c0:	d106      	bne.n	80018d0 <answer2CPU+0x120>
					keyboard &= 0b11101111;
 80018c2:	220f      	movs	r2, #15
 80018c4:	18bb      	adds	r3, r7, r2
 80018c6:	18ba      	adds	r2, r7, r2
 80018c8:	7812      	ldrb	r2, [r2, #0]
 80018ca:	2110      	movs	r1, #16
 80018cc:	438a      	bics	r2, r1
 80018ce:	701a      	strb	r2, [r3, #0]
				}

				keyboard = ~keyboard;
 80018d0:	210f      	movs	r1, #15
 80018d2:	187b      	adds	r3, r7, r1
 80018d4:	187a      	adds	r2, r7, r1
 80018d6:	7812      	ldrb	r2, [r2, #0]
 80018d8:	43d2      	mvns	r2, r2
 80018da:	701a      	strb	r2, [r3, #0]
//				keyboard&=bf;
				myLength = 0x04;
 80018dc:	200c      	movs	r0, #12
 80018de:	183b      	adds	r3, r7, r0
 80018e0:	2204      	movs	r2, #4
 80018e2:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 80018e4:	183b      	adds	r3, r7, r0
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	3b02      	subs	r3, #2
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	4b8e      	ldr	r3, [pc, #568]	; (8001b28 <answer2CPU+0x378>)
 80018f0:	805a      	strh	r2, [r3, #2]
				ans[2] = keyboard;				//			MANAGEMENT COMMANDS
 80018f2:	187b      	adds	r3, r7, r1
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	4b8b      	ldr	r3, [pc, #556]	; (8001b28 <answer2CPU+0x378>)
 80018fa:	809a      	strh	r2, [r3, #4]

				for (i = 0; i < myLength-1; i++) {
 80018fc:	230e      	movs	r3, #14
 80018fe:	18fb      	adds	r3, r7, r3
 8001900:	2200      	movs	r2, #0
 8001902:	701a      	strb	r2, [r3, #0]
 8001904:	e011      	b.n	800192a <answer2CPU+0x17a>
					myCS = myCS + ans[i];
 8001906:	200e      	movs	r0, #14
 8001908:	183b      	adds	r3, r7, r0
 800190a:	781a      	ldrb	r2, [r3, #0]
 800190c:	4b86      	ldr	r3, [pc, #536]	; (8001b28 <answer2CPU+0x378>)
 800190e:	0052      	lsls	r2, r2, #1
 8001910:	5ad3      	ldrh	r3, [r2, r3]
 8001912:	b2d9      	uxtb	r1, r3
 8001914:	220d      	movs	r2, #13
 8001916:	18bb      	adds	r3, r7, r2
 8001918:	18ba      	adds	r2, r7, r2
 800191a:	7812      	ldrb	r2, [r2, #0]
 800191c:	188a      	adds	r2, r1, r2
 800191e:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001920:	183b      	adds	r3, r7, r0
 8001922:	781a      	ldrb	r2, [r3, #0]
 8001924:	183b      	adds	r3, r7, r0
 8001926:	3201      	adds	r2, #1
 8001928:	701a      	strb	r2, [r3, #0]
 800192a:	200e      	movs	r0, #14
 800192c:	183b      	adds	r3, r7, r0
 800192e:	781a      	ldrb	r2, [r3, #0]
 8001930:	230c      	movs	r3, #12
 8001932:	18fb      	adds	r3, r7, r3
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	3b01      	subs	r3, #1
 8001938:	429a      	cmp	r2, r3
 800193a:	dbe4      	blt.n	8001906 <answer2CPU+0x156>
				}
				myCS = 0 - myCS;
 800193c:	210d      	movs	r1, #13
 800193e:	187b      	adds	r3, r7, r1
 8001940:	187a      	adds	r2, r7, r1
 8001942:	7812      	ldrb	r2, [r2, #0]
 8001944:	4252      	negs	r2, r2
 8001946:	701a      	strb	r2, [r3, #0]
				ans[3] = myCS;
 8001948:	187b      	adds	r3, r7, r1
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	b29a      	uxth	r2, r3
 800194e:	4b76      	ldr	r3, [pc, #472]	; (8001b28 <answer2CPU+0x378>)
 8001950:	80da      	strh	r2, [r3, #6]
				i=0;
 8001952:	183b      	adds	r3, r7, r0
 8001954:	2200      	movs	r2, #0
 8001956:	701a      	strb	r2, [r3, #0]
//======================================================================================================================================

				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001958:	46c0      	nop			; (mov r8, r8)
 800195a:	4b74      	ldr	r3, [pc, #464]	; (8001b2c <answer2CPU+0x37c>)
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	2280      	movs	r2, #128	; 0x80
 8001960:	4013      	ands	r3, r2
 8001962:	d0fa      	beq.n	800195a <answer2CPU+0x1aa>
				USART2->TDR = ans[0]|0x0100;
 8001964:	4b70      	ldr	r3, [pc, #448]	; (8001b28 <answer2CPU+0x378>)
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	2280      	movs	r2, #128	; 0x80
 800196a:	0052      	lsls	r2, r2, #1
 800196c:	4313      	orrs	r3, r2
 800196e:	b29a      	uxth	r2, r3
 8001970:	4b6e      	ldr	r3, [pc, #440]	; (8001b2c <answer2CPU+0x37c>)
 8001972:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 8001974:	230e      	movs	r3, #14
 8001976:	18fb      	adds	r3, r7, r3
 8001978:	2201      	movs	r2, #1
 800197a:	701a      	strb	r2, [r3, #0]
 800197c:	e013      	b.n	80019a6 <answer2CPU+0x1f6>
				  {												//answer2cpu was given
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 800197e:	46c0      	nop			; (mov r8, r8)
 8001980:	4b6a      	ldr	r3, [pc, #424]	; (8001b2c <answer2CPU+0x37c>)
 8001982:	69db      	ldr	r3, [r3, #28]
 8001984:	2280      	movs	r2, #128	; 0x80
 8001986:	4013      	ands	r3, r2
 8001988:	d0fa      	beq.n	8001980 <answer2CPU+0x1d0>
				    USART2->TDR = (uint8_t)ans[i];
 800198a:	210e      	movs	r1, #14
 800198c:	187b      	adds	r3, r7, r1
 800198e:	781a      	ldrb	r2, [r3, #0]
 8001990:	4b65      	ldr	r3, [pc, #404]	; (8001b28 <answer2CPU+0x378>)
 8001992:	0052      	lsls	r2, r2, #1
 8001994:	5ad3      	ldrh	r3, [r2, r3]
 8001996:	b2da      	uxtb	r2, r3
 8001998:	4b64      	ldr	r3, [pc, #400]	; (8001b2c <answer2CPU+0x37c>)
 800199a:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 800199c:	187b      	adds	r3, r7, r1
 800199e:	781a      	ldrb	r2, [r3, #0]
 80019a0:	187b      	adds	r3, r7, r1
 80019a2:	3201      	adds	r2, #1
 80019a4:	701a      	strb	r2, [r3, #0]
 80019a6:	230e      	movs	r3, #14
 80019a8:	18fa      	adds	r2, r7, r3
 80019aa:	230c      	movs	r3, #12
 80019ac:	18fb      	adds	r3, r7, r3
 80019ae:	7812      	ldrb	r2, [r2, #0]
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d3e3      	bcc.n	800197e <answer2CPU+0x1ce>
				  }
//				HAL_Delay(1);
				USART2->CR1 |= USART_CR1_RE;
 80019b6:	4b5d      	ldr	r3, [pc, #372]	; (8001b2c <answer2CPU+0x37c>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	4b5c      	ldr	r3, [pc, #368]	; (8001b2c <answer2CPU+0x37c>)
 80019bc:	2104      	movs	r1, #4
 80019be:	430a      	orrs	r2, r1
 80019c0:	601a      	str	r2, [r3, #0]
				isReceiverDisabled=0;
 80019c2:	4b56      	ldr	r3, [pc, #344]	; (8001b1c <answer2CPU+0x36c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	701a      	strb	r2, [r3, #0]
//				BFEN=1;
//=======================================================================================================================================
				if (cmd[0] == 0x11) {//Show full screen background;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b11      	cmp	r3, #17
 80019ce:	d109      	bne.n	80019e4 <answer2CPU+0x234>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					picNum = cmd[2];
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	789a      	ldrb	r2, [r3, #2]
 80019d4:	4b56      	ldr	r3, [pc, #344]	; (8001b30 <answer2CPU+0x380>)
 80019d6:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x11;
 80019d8:	4b51      	ldr	r3, [pc, #324]	; (8001b20 <answer2CPU+0x370>)
 80019da:	2211      	movs	r2, #17
 80019dc:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 80019de:	4b55      	ldr	r3, [pc, #340]	; (8001b34 <answer2CPU+0x384>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	701a      	strb	r2, [r3, #0]
				}
//=======================================================================================================================================
				if (cmd[0] == 0x12) {				//show small image
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b12      	cmp	r3, #18
 80019ea:	d115      	bne.n	8001a18 <answer2CPU+0x268>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3302      	adds	r3, #2
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	001a      	movs	r2, r3
 80019f4:	4b50      	ldr	r3, [pc, #320]	; (8001b38 <answer2CPU+0x388>)
 80019f6:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3303      	adds	r3, #3
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	001a      	movs	r2, r3
 8001a00:	4b4e      	ldr	r3, [pc, #312]	; (8001b3c <answer2CPU+0x38c>)
 8001a02:	601a      	str	r2, [r3, #0]
					picNum=cmd[4];
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	791a      	ldrb	r2, [r3, #4]
 8001a08:	4b49      	ldr	r3, [pc, #292]	; (8001b30 <answer2CPU+0x380>)
 8001a0a:	701a      	strb	r2, [r3, #0]
//					weoShowSmallImage(dataASCII[i], ASCII_X, ASCII_Y);
					cmd2Execute=0x12;
 8001a0c:	4b44      	ldr	r3, [pc, #272]	; (8001b20 <answer2CPU+0x370>)
 8001a0e:	2212      	movs	r2, #18
 8001a10:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001a12:	4b48      	ldr	r3, [pc, #288]	; (8001b34 <answer2CPU+0x384>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x13) {			//show ASCII code(s)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b13      	cmp	r3, #19
 8001a1e:	d140      	bne.n	8001aa2 <answer2CPU+0x2f2>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3302      	adds	r3, #2
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	001a      	movs	r2, r3
 8001a28:	4b43      	ldr	r3, [pc, #268]	; (8001b38 <answer2CPU+0x388>)
 8001a2a:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3303      	adds	r3, #3
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	001a      	movs	r2, r3
 8001a34:	4b41      	ldr	r3, [pc, #260]	; (8001b3c <answer2CPU+0x38c>)
 8001a36:	601a      	str	r2, [r3, #0]
					fontInfo= cmd[4];
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	791a      	ldrb	r2, [r3, #4]
 8001a3c:	4b40      	ldr	r3, [pc, #256]	; (8001b40 <answer2CPU+0x390>)
 8001a3e:	701a      	strb	r2, [r3, #0]
					color=fontInfo|0xF0;
 8001a40:	4b3f      	ldr	r3, [pc, #252]	; (8001b40 <answer2CPU+0x390>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2210      	movs	r2, #16
 8001a46:	4252      	negs	r2, r2
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	4b3d      	ldr	r3, [pc, #244]	; (8001b44 <answer2CPU+0x394>)
 8001a4e:	701a      	strb	r2, [r3, #0]
					strLen = cmd[1] - 0x04;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3301      	adds	r3, #1
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	3b04      	subs	r3, #4
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	4b3b      	ldr	r3, [pc, #236]	; (8001b48 <answer2CPU+0x398>)
 8001a5c:	701a      	strb	r2, [r3, #0]
					for (i = 0; i <strLen; i++) {
 8001a5e:	230e      	movs	r3, #14
 8001a60:	18fb      	adds	r3, r7, r3
 8001a62:	2200      	movs	r2, #0
 8001a64:	701a      	strb	r2, [r3, #0]
 8001a66:	e00f      	b.n	8001a88 <answer2CPU+0x2d8>
					dataASCII[i] = cmd[i+5];
 8001a68:	200e      	movs	r0, #14
 8001a6a:	183b      	adds	r3, r7, r0
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	3305      	adds	r3, #5
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	18d2      	adds	r2, r2, r3
 8001a74:	183b      	adds	r3, r7, r0
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	7811      	ldrb	r1, [r2, #0]
 8001a7a:	4a34      	ldr	r2, [pc, #208]	; (8001b4c <answer2CPU+0x39c>)
 8001a7c:	54d1      	strb	r1, [r2, r3]
					for (i = 0; i <strLen; i++) {
 8001a7e:	183b      	adds	r3, r7, r0
 8001a80:	781a      	ldrb	r2, [r3, #0]
 8001a82:	183b      	adds	r3, r7, r0
 8001a84:	3201      	adds	r2, #1
 8001a86:	701a      	strb	r2, [r3, #0]
 8001a88:	4b2f      	ldr	r3, [pc, #188]	; (8001b48 <answer2CPU+0x398>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	220e      	movs	r2, #14
 8001a8e:	18ba      	adds	r2, r7, r2
 8001a90:	7812      	ldrb	r2, [r2, #0]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d3e8      	bcc.n	8001a68 <answer2CPU+0x2b8>
				}
					cmd2Execute=0x13;
 8001a96:	4b22      	ldr	r3, [pc, #136]	; (8001b20 <answer2CPU+0x370>)
 8001a98:	2213      	movs	r2, #19
 8001a9a:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001a9c:	4b25      	ldr	r3, [pc, #148]	; (8001b34 <answer2CPU+0x384>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x14) {			//издать звук
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b14      	cmp	r3, #20
 8001aa8:	d109      	bne.n	8001abe <answer2CPU+0x30e>
					numSound = cmd[2];
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	789a      	ldrb	r2, [r3, #2]
 8001aae:	4b28      	ldr	r3, [pc, #160]	; (8001b50 <answer2CPU+0x3a0>)
 8001ab0:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x14;
 8001ab2:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <answer2CPU+0x370>)
 8001ab4:	2214      	movs	r2, #20
 8001ab6:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001ab8:	4b1e      	ldr	r3, [pc, #120]	; (8001b34 <answer2CPU+0x384>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x15) {
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b15      	cmp	r3, #21
 8001ac4:	d10d      	bne.n	8001ae2 <answer2CPU+0x332>
					volume = cmd[2];
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	789a      	ldrb	r2, [r3, #2]
 8001aca:	4b22      	ldr	r3, [pc, #136]	; (8001b54 <answer2CPU+0x3a4>)
 8001acc:	701a      	strb	r2, [r3, #0]
					contrast = cmd[3];
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	78da      	ldrb	r2, [r3, #3]
 8001ad2:	4b21      	ldr	r3, [pc, #132]	; (8001b58 <answer2CPU+0x3a8>)
 8001ad4:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x15;
 8001ad6:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <answer2CPU+0x370>)
 8001ad8:	2215      	movs	r2, #21
 8001ada:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001adc:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <answer2CPU+0x384>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x16) {
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b16      	cmp	r3, #22
 8001ae8:	d102      	bne.n	8001af0 <answer2CPU+0x340>
//					volume = cmd[3];
//					contrast = cmd[4];
//					cmd2Execute=0x16;
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001aea:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <answer2CPU+0x384>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]
				}
//				weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, Image);
//				USART2->ICR|=USART_ICR_ORECF;
			}
//==========================================================================================================================
			if (cmd[0] == 0x00) { //request of pcb type
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d000      	beq.n	8001afa <answer2CPU+0x34a>
 8001af8:	e0a0      	b.n	8001c3c <answer2CPU+0x48c>
				myLength = 0x14; //20 bytes length answer
 8001afa:	210c      	movs	r1, #12
 8001afc:	187b      	adds	r3, r7, r1
 8001afe:	2214      	movs	r2, #20
 8001b00:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001b02:	187b      	adds	r3, r7, r1
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	3b02      	subs	r3, #2
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <answer2CPU+0x378>)
 8001b0e:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001b10:	230e      	movs	r3, #14
 8001b12:	18fb      	adds	r3, r7, r3
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]
 8001b18:	e031      	b.n	8001b7e <answer2CPU+0x3ce>
 8001b1a:	46c0      	nop			; (mov r8, r8)
 8001b1c:	20000288 	.word	0x20000288
 8001b20:	200002ea 	.word	0x200002ea
 8001b24:	50000800 	.word	0x50000800
 8001b28:	200002d0 	.word	0x200002d0
 8001b2c:	40004400 	.word	0x40004400
 8001b30:	20000289 	.word	0x20000289
 8001b34:	200002eb 	.word	0x200002eb
 8001b38:	20000290 	.word	0x20000290
 8001b3c:	20000294 	.word	0x20000294
 8001b40:	200002f1 	.word	0x200002f1
 8001b44:	200002f2 	.word	0x200002f2
 8001b48:	2000028e 	.word	0x2000028e
 8001b4c:	2000029c 	.word	0x2000029c
 8001b50:	2000028a 	.word	0x2000028a
 8001b54:	2000028b 	.word	0x2000028b
 8001b58:	2000028c 	.word	0x2000028c
					ans[i + 2] = PCB_type[i];
 8001b5c:	200e      	movs	r0, #14
 8001b5e:	183b      	adds	r3, r7, r0
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	4acb      	ldr	r2, [pc, #812]	; (8001e90 <answer2CPU+0x6e0>)
 8001b64:	5cd1      	ldrb	r1, [r2, r3]
 8001b66:	183b      	adds	r3, r7, r0
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	1c9a      	adds	r2, r3, #2
 8001b6c:	b289      	uxth	r1, r1
 8001b6e:	4bc9      	ldr	r3, [pc, #804]	; (8001e94 <answer2CPU+0x6e4>)
 8001b70:	0052      	lsls	r2, r2, #1
 8001b72:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001b74:	183b      	adds	r3, r7, r0
 8001b76:	781a      	ldrb	r2, [r3, #0]
 8001b78:	183b      	adds	r3, r7, r0
 8001b7a:	3201      	adds	r2, #1
 8001b7c:	701a      	strb	r2, [r3, #0]
 8001b7e:	220e      	movs	r2, #14
 8001b80:	18bb      	adds	r3, r7, r2
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b10      	cmp	r3, #16
 8001b86:	d9e9      	bls.n	8001b5c <answer2CPU+0x3ac>
				}
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8001b88:	18bb      	adds	r3, r7, r2
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	701a      	strb	r2, [r3, #0]
 8001b8e:	e011      	b.n	8001bb4 <answer2CPU+0x404>
					myCS = myCS + ans[i];
 8001b90:	200e      	movs	r0, #14
 8001b92:	183b      	adds	r3, r7, r0
 8001b94:	781a      	ldrb	r2, [r3, #0]
 8001b96:	4bbf      	ldr	r3, [pc, #764]	; (8001e94 <answer2CPU+0x6e4>)
 8001b98:	0052      	lsls	r2, r2, #1
 8001b9a:	5ad3      	ldrh	r3, [r2, r3]
 8001b9c:	b2d9      	uxtb	r1, r3
 8001b9e:	220d      	movs	r2, #13
 8001ba0:	18bb      	adds	r3, r7, r2
 8001ba2:	18ba      	adds	r2, r7, r2
 8001ba4:	7812      	ldrb	r2, [r2, #0]
 8001ba6:	188a      	adds	r2, r1, r2
 8001ba8:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8001baa:	183b      	adds	r3, r7, r0
 8001bac:	781a      	ldrb	r2, [r3, #0]
 8001bae:	183b      	adds	r3, r7, r0
 8001bb0:	3201      	adds	r2, #1
 8001bb2:	701a      	strb	r2, [r3, #0]
 8001bb4:	230e      	movs	r3, #14
 8001bb6:	18fb      	adds	r3, r7, r3
 8001bb8:	781a      	ldrb	r2, [r3, #0]
 8001bba:	200c      	movs	r0, #12
 8001bbc:	183b      	adds	r3, r7, r0
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	dbe4      	blt.n	8001b90 <answer2CPU+0x3e0>
				}
				myCS = 0 - myCS;
 8001bc6:	210d      	movs	r1, #13
 8001bc8:	187b      	adds	r3, r7, r1
 8001bca:	187a      	adds	r2, r7, r1
 8001bcc:	7812      	ldrb	r2, [r2, #0]
 8001bce:	4252      	negs	r2, r2
 8001bd0:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001bd2:	183b      	adds	r3, r7, r0
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	1e5a      	subs	r2, r3, #1
 8001bd8:	187b      	adds	r3, r7, r1
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	b299      	uxth	r1, r3
 8001bde:	4bad      	ldr	r3, [pc, #692]	; (8001e94 <answer2CPU+0x6e4>)
 8001be0:	0052      	lsls	r2, r2, #1
 8001be2:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001be4:	46c0      	nop			; (mov r8, r8)
 8001be6:	4bac      	ldr	r3, [pc, #688]	; (8001e98 <answer2CPU+0x6e8>)
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	2280      	movs	r2, #128	; 0x80
 8001bec:	4013      	ands	r3, r2
 8001bee:	d0fa      	beq.n	8001be6 <answer2CPU+0x436>
				USART2->TDR = ans[0]|0x0100;
 8001bf0:	4ba8      	ldr	r3, [pc, #672]	; (8001e94 <answer2CPU+0x6e4>)
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	2280      	movs	r2, #128	; 0x80
 8001bf6:	0052      	lsls	r2, r2, #1
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	4ba6      	ldr	r3, [pc, #664]	; (8001e98 <answer2CPU+0x6e8>)
 8001bfe:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001c00:	e014      	b.n	8001c2c <answer2CPU+0x47c>
				  {
				    i++;
 8001c02:	210e      	movs	r1, #14
 8001c04:	187b      	adds	r3, r7, r1
 8001c06:	781a      	ldrb	r2, [r3, #0]
 8001c08:	187b      	adds	r3, r7, r1
 8001c0a:	3201      	adds	r2, #1
 8001c0c:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001c0e:	46c0      	nop			; (mov r8, r8)
 8001c10:	4ba1      	ldr	r3, [pc, #644]	; (8001e98 <answer2CPU+0x6e8>)
 8001c12:	69db      	ldr	r3, [r3, #28]
 8001c14:	2280      	movs	r2, #128	; 0x80
 8001c16:	4013      	ands	r3, r2
 8001c18:	d0fa      	beq.n	8001c10 <answer2CPU+0x460>
				    USART2->TDR = (uint8_t)ans[i];
 8001c1a:	230e      	movs	r3, #14
 8001c1c:	18fb      	adds	r3, r7, r3
 8001c1e:	781a      	ldrb	r2, [r3, #0]
 8001c20:	4b9c      	ldr	r3, [pc, #624]	; (8001e94 <answer2CPU+0x6e4>)
 8001c22:	0052      	lsls	r2, r2, #1
 8001c24:	5ad3      	ldrh	r3, [r2, r3]
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	4b9b      	ldr	r3, [pc, #620]	; (8001e98 <answer2CPU+0x6e8>)
 8001c2a:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001c2c:	230e      	movs	r3, #14
 8001c2e:	18fb      	adds	r3, r7, r3
 8001c30:	781a      	ldrb	r2, [r3, #0]
 8001c32:	4b98      	ldr	r3, [pc, #608]	; (8001e94 <answer2CPU+0x6e4>)
 8001c34:	0052      	lsls	r2, r2, #1
 8001c36:	5ad3      	ldrh	r3, [r2, r3]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d1e2      	bne.n	8001c02 <answer2CPU+0x452>
				  }
//				 cmd2Execute=0x00;
			}
//============================================================================================================================
			if (cmd[0] == 0x01) { //request of pcb revision
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d000      	beq.n	8001c46 <answer2CPU+0x496>
 8001c44:	e07f      	b.n	8001d46 <answer2CPU+0x596>
				myLength = 0x0B; //19 bytes length answer
 8001c46:	210c      	movs	r1, #12
 8001c48:	187b      	adds	r3, r7, r1
 8001c4a:	220b      	movs	r2, #11
 8001c4c:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001c4e:	187b      	adds	r3, r7, r1
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	3b02      	subs	r3, #2
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	4b8e      	ldr	r3, [pc, #568]	; (8001e94 <answer2CPU+0x6e4>)
 8001c5a:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001c5c:	230e      	movs	r3, #14
 8001c5e:	18fb      	adds	r3, r7, r3
 8001c60:	2200      	movs	r2, #0
 8001c62:	701a      	strb	r2, [r3, #0]
 8001c64:	e010      	b.n	8001c88 <answer2CPU+0x4d8>
					ans[i + 2] = PCB_rev[i];
 8001c66:	200e      	movs	r0, #14
 8001c68:	183b      	adds	r3, r7, r0
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	4a8b      	ldr	r2, [pc, #556]	; (8001e9c <answer2CPU+0x6ec>)
 8001c6e:	5cd1      	ldrb	r1, [r2, r3]
 8001c70:	183b      	adds	r3, r7, r0
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	1c9a      	adds	r2, r3, #2
 8001c76:	b289      	uxth	r1, r1
 8001c78:	4b86      	ldr	r3, [pc, #536]	; (8001e94 <answer2CPU+0x6e4>)
 8001c7a:	0052      	lsls	r2, r2, #1
 8001c7c:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001c7e:	183b      	adds	r3, r7, r0
 8001c80:	781a      	ldrb	r2, [r3, #0]
 8001c82:	183b      	adds	r3, r7, r0
 8001c84:	3201      	adds	r2, #1
 8001c86:	701a      	strb	r2, [r3, #0]
 8001c88:	220e      	movs	r2, #14
 8001c8a:	18bb      	adds	r3, r7, r2
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b10      	cmp	r3, #16
 8001c90:	d9e9      	bls.n	8001c66 <answer2CPU+0x4b6>
				}
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001c92:	18bb      	adds	r3, r7, r2
 8001c94:	2200      	movs	r2, #0
 8001c96:	701a      	strb	r2, [r3, #0]
 8001c98:	e011      	b.n	8001cbe <answer2CPU+0x50e>
					myCS = myCS + ans[i];
 8001c9a:	200e      	movs	r0, #14
 8001c9c:	183b      	adds	r3, r7, r0
 8001c9e:	781a      	ldrb	r2, [r3, #0]
 8001ca0:	4b7c      	ldr	r3, [pc, #496]	; (8001e94 <answer2CPU+0x6e4>)
 8001ca2:	0052      	lsls	r2, r2, #1
 8001ca4:	5ad3      	ldrh	r3, [r2, r3]
 8001ca6:	b2d9      	uxtb	r1, r3
 8001ca8:	220d      	movs	r2, #13
 8001caa:	18bb      	adds	r3, r7, r2
 8001cac:	18ba      	adds	r2, r7, r2
 8001cae:	7812      	ldrb	r2, [r2, #0]
 8001cb0:	188a      	adds	r2, r1, r2
 8001cb2:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001cb4:	183b      	adds	r3, r7, r0
 8001cb6:	781a      	ldrb	r2, [r3, #0]
 8001cb8:	183b      	adds	r3, r7, r0
 8001cba:	3201      	adds	r2, #1
 8001cbc:	701a      	strb	r2, [r3, #0]
 8001cbe:	230e      	movs	r3, #14
 8001cc0:	18fb      	adds	r3, r7, r3
 8001cc2:	781a      	ldrb	r2, [r3, #0]
 8001cc4:	200c      	movs	r0, #12
 8001cc6:	183b      	adds	r3, r7, r0
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	dbe4      	blt.n	8001c9a <answer2CPU+0x4ea>
				}
				myCS = 0 - myCS;
 8001cd0:	210d      	movs	r1, #13
 8001cd2:	187b      	adds	r3, r7, r1
 8001cd4:	187a      	adds	r2, r7, r1
 8001cd6:	7812      	ldrb	r2, [r2, #0]
 8001cd8:	4252      	negs	r2, r2
 8001cda:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001cdc:	183b      	adds	r3, r7, r0
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	1e5a      	subs	r2, r3, #1
 8001ce2:	187b      	adds	r3, r7, r1
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	b299      	uxth	r1, r3
 8001ce8:	4b6a      	ldr	r3, [pc, #424]	; (8001e94 <answer2CPU+0x6e4>)
 8001cea:	0052      	lsls	r2, r2, #1
 8001cec:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001cee:	46c0      	nop			; (mov r8, r8)
 8001cf0:	4b69      	ldr	r3, [pc, #420]	; (8001e98 <answer2CPU+0x6e8>)
 8001cf2:	69db      	ldr	r3, [r3, #28]
 8001cf4:	2280      	movs	r2, #128	; 0x80
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	d0fa      	beq.n	8001cf0 <answer2CPU+0x540>
				USART2->TDR = ans[0]|0x0100;
 8001cfa:	4b66      	ldr	r3, [pc, #408]	; (8001e94 <answer2CPU+0x6e4>)
 8001cfc:	881b      	ldrh	r3, [r3, #0]
 8001cfe:	2280      	movs	r2, #128	; 0x80
 8001d00:	0052      	lsls	r2, r2, #1
 8001d02:	4313      	orrs	r3, r2
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	4b64      	ldr	r3, [pc, #400]	; (8001e98 <answer2CPU+0x6e8>)
 8001d08:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001d0a:	e014      	b.n	8001d36 <answer2CPU+0x586>
					  {
					    i++;
 8001d0c:	210e      	movs	r1, #14
 8001d0e:	187b      	adds	r3, r7, r1
 8001d10:	781a      	ldrb	r2, [r3, #0]
 8001d12:	187b      	adds	r3, r7, r1
 8001d14:	3201      	adds	r2, #1
 8001d16:	701a      	strb	r2, [r3, #0]
					    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001d18:	46c0      	nop			; (mov r8, r8)
 8001d1a:	4b5f      	ldr	r3, [pc, #380]	; (8001e98 <answer2CPU+0x6e8>)
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	2280      	movs	r2, #128	; 0x80
 8001d20:	4013      	ands	r3, r2
 8001d22:	d0fa      	beq.n	8001d1a <answer2CPU+0x56a>
					    USART2->TDR = (uint8_t)ans[i];
 8001d24:	230e      	movs	r3, #14
 8001d26:	18fb      	adds	r3, r7, r3
 8001d28:	781a      	ldrb	r2, [r3, #0]
 8001d2a:	4b5a      	ldr	r3, [pc, #360]	; (8001e94 <answer2CPU+0x6e4>)
 8001d2c:	0052      	lsls	r2, r2, #1
 8001d2e:	5ad3      	ldrh	r3, [r2, r3]
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	4b59      	ldr	r3, [pc, #356]	; (8001e98 <answer2CPU+0x6e8>)
 8001d34:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001d36:	230e      	movs	r3, #14
 8001d38:	18fb      	adds	r3, r7, r3
 8001d3a:	781a      	ldrb	r2, [r3, #0]
 8001d3c:	4b55      	ldr	r3, [pc, #340]	; (8001e94 <answer2CPU+0x6e4>)
 8001d3e:	0052      	lsls	r2, r2, #1
 8001d40:	5ad3      	ldrh	r3, [r2, r3]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1e2      	bne.n	8001d0c <answer2CPU+0x55c>
					  }
//				 cmd2Execute=0x01;
			}
//================================================================================================================================
			if (cmd[0] == 0x02) { //request of emitter SN
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d000      	beq.n	8001d50 <answer2CPU+0x5a0>
 8001d4e:	e07f      	b.n	8001e50 <answer2CPU+0x6a0>
				myLength = 0x13; //19 bytes length answer
 8001d50:	210c      	movs	r1, #12
 8001d52:	187b      	adds	r3, r7, r1
 8001d54:	2213      	movs	r2, #19
 8001d56:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001d58:	187b      	adds	r3, r7, r1
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	3b02      	subs	r3, #2
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	4b4c      	ldr	r3, [pc, #304]	; (8001e94 <answer2CPU+0x6e4>)
 8001d64:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001d66:	230e      	movs	r3, #14
 8001d68:	18fb      	adds	r3, r7, r3
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	701a      	strb	r2, [r3, #0]
 8001d6e:	e010      	b.n	8001d92 <answer2CPU+0x5e2>
					ans[i + 2] = EmitterSN[i];
 8001d70:	200e      	movs	r0, #14
 8001d72:	183b      	adds	r3, r7, r0
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	4a4a      	ldr	r2, [pc, #296]	; (8001ea0 <answer2CPU+0x6f0>)
 8001d78:	5cd1      	ldrb	r1, [r2, r3]
 8001d7a:	183b      	adds	r3, r7, r0
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	1c9a      	adds	r2, r3, #2
 8001d80:	b289      	uxth	r1, r1
 8001d82:	4b44      	ldr	r3, [pc, #272]	; (8001e94 <answer2CPU+0x6e4>)
 8001d84:	0052      	lsls	r2, r2, #1
 8001d86:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001d88:	183b      	adds	r3, r7, r0
 8001d8a:	781a      	ldrb	r2, [r3, #0]
 8001d8c:	183b      	adds	r3, r7, r0
 8001d8e:	3201      	adds	r2, #1
 8001d90:	701a      	strb	r2, [r3, #0]
 8001d92:	220e      	movs	r2, #14
 8001d94:	18bb      	adds	r3, r7, r2
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b10      	cmp	r3, #16
 8001d9a:	d9e9      	bls.n	8001d70 <answer2CPU+0x5c0>
				}
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001d9c:	18bb      	adds	r3, r7, r2
 8001d9e:	2200      	movs	r2, #0
 8001da0:	701a      	strb	r2, [r3, #0]
 8001da2:	e011      	b.n	8001dc8 <answer2CPU+0x618>
					myCS = myCS + ans[i];
 8001da4:	200e      	movs	r0, #14
 8001da6:	183b      	adds	r3, r7, r0
 8001da8:	781a      	ldrb	r2, [r3, #0]
 8001daa:	4b3a      	ldr	r3, [pc, #232]	; (8001e94 <answer2CPU+0x6e4>)
 8001dac:	0052      	lsls	r2, r2, #1
 8001dae:	5ad3      	ldrh	r3, [r2, r3]
 8001db0:	b2d9      	uxtb	r1, r3
 8001db2:	220d      	movs	r2, #13
 8001db4:	18bb      	adds	r3, r7, r2
 8001db6:	18ba      	adds	r2, r7, r2
 8001db8:	7812      	ldrb	r2, [r2, #0]
 8001dba:	188a      	adds	r2, r1, r2
 8001dbc:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001dbe:	183b      	adds	r3, r7, r0
 8001dc0:	781a      	ldrb	r2, [r3, #0]
 8001dc2:	183b      	adds	r3, r7, r0
 8001dc4:	3201      	adds	r2, #1
 8001dc6:	701a      	strb	r2, [r3, #0]
 8001dc8:	230e      	movs	r3, #14
 8001dca:	18fb      	adds	r3, r7, r3
 8001dcc:	781a      	ldrb	r2, [r3, #0]
 8001dce:	200c      	movs	r0, #12
 8001dd0:	183b      	adds	r3, r7, r0
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	dbe4      	blt.n	8001da4 <answer2CPU+0x5f4>
				}
				myCS = 0 - myCS;
 8001dda:	210d      	movs	r1, #13
 8001ddc:	187b      	adds	r3, r7, r1
 8001dde:	187a      	adds	r2, r7, r1
 8001de0:	7812      	ldrb	r2, [r2, #0]
 8001de2:	4252      	negs	r2, r2
 8001de4:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001de6:	183b      	adds	r3, r7, r0
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	1e5a      	subs	r2, r3, #1
 8001dec:	187b      	adds	r3, r7, r1
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	b299      	uxth	r1, r3
 8001df2:	4b28      	ldr	r3, [pc, #160]	; (8001e94 <answer2CPU+0x6e4>)
 8001df4:	0052      	lsls	r2, r2, #1
 8001df6:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001df8:	46c0      	nop			; (mov r8, r8)
 8001dfa:	4b27      	ldr	r3, [pc, #156]	; (8001e98 <answer2CPU+0x6e8>)
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	2280      	movs	r2, #128	; 0x80
 8001e00:	4013      	ands	r3, r2
 8001e02:	d0fa      	beq.n	8001dfa <answer2CPU+0x64a>
				USART2->TDR = ans[0]|0x0100;
 8001e04:	4b23      	ldr	r3, [pc, #140]	; (8001e94 <answer2CPU+0x6e4>)
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	2280      	movs	r2, #128	; 0x80
 8001e0a:	0052      	lsls	r2, r2, #1
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	4b21      	ldr	r3, [pc, #132]	; (8001e98 <answer2CPU+0x6e8>)
 8001e12:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001e14:	e014      	b.n	8001e40 <answer2CPU+0x690>
				  {
				    i++;
 8001e16:	210e      	movs	r1, #14
 8001e18:	187b      	adds	r3, r7, r1
 8001e1a:	781a      	ldrb	r2, [r3, #0]
 8001e1c:	187b      	adds	r3, r7, r1
 8001e1e:	3201      	adds	r2, #1
 8001e20:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001e22:	46c0      	nop			; (mov r8, r8)
 8001e24:	4b1c      	ldr	r3, [pc, #112]	; (8001e98 <answer2CPU+0x6e8>)
 8001e26:	69db      	ldr	r3, [r3, #28]
 8001e28:	2280      	movs	r2, #128	; 0x80
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d0fa      	beq.n	8001e24 <answer2CPU+0x674>
				    	USART2->TDR = (uint8_t)ans[i];
 8001e2e:	230e      	movs	r3, #14
 8001e30:	18fb      	adds	r3, r7, r3
 8001e32:	781a      	ldrb	r2, [r3, #0]
 8001e34:	4b17      	ldr	r3, [pc, #92]	; (8001e94 <answer2CPU+0x6e4>)
 8001e36:	0052      	lsls	r2, r2, #1
 8001e38:	5ad3      	ldrh	r3, [r2, r3]
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	4b16      	ldr	r3, [pc, #88]	; (8001e98 <answer2CPU+0x6e8>)
 8001e3e:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001e40:	230e      	movs	r3, #14
 8001e42:	18fb      	adds	r3, r7, r3
 8001e44:	781a      	ldrb	r2, [r3, #0]
 8001e46:	4b13      	ldr	r3, [pc, #76]	; (8001e94 <answer2CPU+0x6e4>)
 8001e48:	0052      	lsls	r2, r2, #1
 8001e4a:	5ad3      	ldrh	r3, [r2, r3]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1e2      	bne.n	8001e16 <answer2CPU+0x666>
				  }
//				cmd2Execute=0x02;
			}
//===============================================================================================================================
			if (cmd[0] == 0x03) { //request of current consumption
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b03      	cmp	r3, #3
 8001e56:	d000      	beq.n	8001e5a <answer2CPU+0x6aa>
 8001e58:	e07c      	b.n	8001f54 <answer2CPU+0x7a4>
				myLength = 0x04; //4 bytes length answer
 8001e5a:	210c      	movs	r1, #12
 8001e5c:	187b      	adds	r3, r7, r1
 8001e5e:	2204      	movs	r2, #4
 8001e60:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001e62:	187b      	adds	r3, r7, r1
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	3b02      	subs	r3, #2
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <answer2CPU+0x6e4>)
 8001e6e:	805a      	strh	r2, [r3, #2]
				ans[2] = currentConsumption;
 8001e70:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <answer2CPU+0x6f4>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	4b07      	ldr	r3, [pc, #28]	; (8001e94 <answer2CPU+0x6e4>)
 8001e78:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8001e7a:	230d      	movs	r3, #13
 8001e7c:	18fb      	adds	r3, r7, r3
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	4b04      	ldr	r3, [pc, #16]	; (8001e94 <answer2CPU+0x6e4>)
 8001e84:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8001e86:	230e      	movs	r3, #14
 8001e88:	18fb      	adds	r3, r7, r3
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	701a      	strb	r2, [r3, #0]
 8001e8e:	e01d      	b.n	8001ecc <answer2CPU+0x71c>
 8001e90:	20000000 	.word	0x20000000
 8001e94:	200002d0 	.word	0x200002d0
 8001e98:	40004400 	.word	0x40004400
 8001e9c:	20000014 	.word	0x20000014
 8001ea0:	20000020 	.word	0x20000020
 8001ea4:	2000001c 	.word	0x2000001c
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8001ea8:	200e      	movs	r0, #14
 8001eaa:	183b      	adds	r3, r7, r0
 8001eac:	781a      	ldrb	r2, [r3, #0]
 8001eae:	4b6d      	ldr	r3, [pc, #436]	; (8002064 <answer2CPU+0x8b4>)
 8001eb0:	0052      	lsls	r2, r2, #1
 8001eb2:	5ad3      	ldrh	r3, [r2, r3]
 8001eb4:	b2d9      	uxtb	r1, r3
 8001eb6:	220d      	movs	r2, #13
 8001eb8:	18bb      	adds	r3, r7, r2
 8001eba:	18ba      	adds	r2, r7, r2
 8001ebc:	7812      	ldrb	r2, [r2, #0]
 8001ebe:	188a      	adds	r2, r1, r2
 8001ec0:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001ec2:	183b      	adds	r3, r7, r0
 8001ec4:	781a      	ldrb	r2, [r3, #0]
 8001ec6:	183b      	adds	r3, r7, r0
 8001ec8:	3201      	adds	r2, #1
 8001eca:	701a      	strb	r2, [r3, #0]
 8001ecc:	230e      	movs	r3, #14
 8001ece:	18fb      	adds	r3, r7, r3
 8001ed0:	781a      	ldrb	r2, [r3, #0]
 8001ed2:	200c      	movs	r0, #12
 8001ed4:	183b      	adds	r3, r7, r0
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	429a      	cmp	r2, r3
 8001edc:	dbe4      	blt.n	8001ea8 <answer2CPU+0x6f8>
				}
				myCS = 0 - myCS;
 8001ede:	210d      	movs	r1, #13
 8001ee0:	187b      	adds	r3, r7, r1
 8001ee2:	187a      	adds	r2, r7, r1
 8001ee4:	7812      	ldrb	r2, [r2, #0]
 8001ee6:	4252      	negs	r2, r2
 8001ee8:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001eea:	183b      	adds	r3, r7, r0
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	1e5a      	subs	r2, r3, #1
 8001ef0:	187b      	adds	r3, r7, r1
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	b299      	uxth	r1, r3
 8001ef6:	4b5b      	ldr	r3, [pc, #364]	; (8002064 <answer2CPU+0x8b4>)
 8001ef8:	0052      	lsls	r2, r2, #1
 8001efa:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001efc:	46c0      	nop			; (mov r8, r8)
 8001efe:	4b5a      	ldr	r3, [pc, #360]	; (8002068 <answer2CPU+0x8b8>)
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	2280      	movs	r2, #128	; 0x80
 8001f04:	4013      	ands	r3, r2
 8001f06:	d0fa      	beq.n	8001efe <answer2CPU+0x74e>
					USART2->TDR = ans[0]|0x0100;
 8001f08:	4b56      	ldr	r3, [pc, #344]	; (8002064 <answer2CPU+0x8b4>)
 8001f0a:	881b      	ldrh	r3, [r3, #0]
 8001f0c:	2280      	movs	r2, #128	; 0x80
 8001f0e:	0052      	lsls	r2, r2, #1
 8001f10:	4313      	orrs	r3, r2
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	4b54      	ldr	r3, [pc, #336]	; (8002068 <answer2CPU+0x8b8>)
 8001f16:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8001f18:	e014      	b.n	8001f44 <answer2CPU+0x794>
						{
						  i++;
 8001f1a:	210e      	movs	r1, #14
 8001f1c:	187b      	adds	r3, r7, r1
 8001f1e:	781a      	ldrb	r2, [r3, #0]
 8001f20:	187b      	adds	r3, r7, r1
 8001f22:	3201      	adds	r2, #1
 8001f24:	701a      	strb	r2, [r3, #0]
						  while(!(USART2->ISR & USART_ISR_TXE)){};
 8001f26:	46c0      	nop			; (mov r8, r8)
 8001f28:	4b4f      	ldr	r3, [pc, #316]	; (8002068 <answer2CPU+0x8b8>)
 8001f2a:	69db      	ldr	r3, [r3, #28]
 8001f2c:	2280      	movs	r2, #128	; 0x80
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d0fa      	beq.n	8001f28 <answer2CPU+0x778>
						     USART2->TDR = (uint8_t)ans[i];
 8001f32:	230e      	movs	r3, #14
 8001f34:	18fb      	adds	r3, r7, r3
 8001f36:	781a      	ldrb	r2, [r3, #0]
 8001f38:	4b4a      	ldr	r3, [pc, #296]	; (8002064 <answer2CPU+0x8b4>)
 8001f3a:	0052      	lsls	r2, r2, #1
 8001f3c:	5ad3      	ldrh	r3, [r2, r3]
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	4b49      	ldr	r3, [pc, #292]	; (8002068 <answer2CPU+0x8b8>)
 8001f42:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8001f44:	230e      	movs	r3, #14
 8001f46:	18fb      	adds	r3, r7, r3
 8001f48:	781a      	ldrb	r2, [r3, #0]
 8001f4a:	4b46      	ldr	r3, [pc, #280]	; (8002064 <answer2CPU+0x8b4>)
 8001f4c:	0052      	lsls	r2, r2, #1
 8001f4e:	5ad3      	ldrh	r3, [r2, r3]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1e2      	bne.n	8001f1a <answer2CPU+0x76a>
						}
//					cmd2Execute=0x03;
			}
			if (cmd[0] == 0x04) { //request of current consumption
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b04      	cmp	r3, #4
 8001f5a:	d000      	beq.n	8001f5e <answer2CPU+0x7ae>
 8001f5c:	e076      	b.n	800204c <answer2CPU+0x89c>
				myLength = 0x04; //4 bytes length answer
 8001f5e:	210c      	movs	r1, #12
 8001f60:	187b      	adds	r3, r7, r1
 8001f62:	2204      	movs	r2, #4
 8001f64:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001f66:	187b      	adds	r3, r7, r1
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	3b02      	subs	r3, #2
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	4b3c      	ldr	r3, [pc, #240]	; (8002064 <answer2CPU+0x8b4>)
 8001f72:	805a      	strh	r2, [r3, #2]
				uartSpeed = cmd[2];
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3302      	adds	r3, #2
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	001a      	movs	r2, r3
 8001f7c:	4b3b      	ldr	r3, [pc, #236]	; (800206c <answer2CPU+0x8bc>)
 8001f7e:	601a      	str	r2, [r3, #0]
				ans[2] = currentUARTspeed;
 8001f80:	4b3b      	ldr	r3, [pc, #236]	; (8002070 <answer2CPU+0x8c0>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	4b37      	ldr	r3, [pc, #220]	; (8002064 <answer2CPU+0x8b4>)
 8001f88:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8001f8a:	230d      	movs	r3, #13
 8001f8c:	18fb      	adds	r3, r7, r3
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	4b34      	ldr	r3, [pc, #208]	; (8002064 <answer2CPU+0x8b4>)
 8001f94:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8001f96:	230e      	movs	r3, #14
 8001f98:	18fb      	adds	r3, r7, r3
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	701a      	strb	r2, [r3, #0]
 8001f9e:	e011      	b.n	8001fc4 <answer2CPU+0x814>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8001fa0:	200e      	movs	r0, #14
 8001fa2:	183b      	adds	r3, r7, r0
 8001fa4:	781a      	ldrb	r2, [r3, #0]
 8001fa6:	4b2f      	ldr	r3, [pc, #188]	; (8002064 <answer2CPU+0x8b4>)
 8001fa8:	0052      	lsls	r2, r2, #1
 8001faa:	5ad3      	ldrh	r3, [r2, r3]
 8001fac:	b2d9      	uxtb	r1, r3
 8001fae:	220d      	movs	r2, #13
 8001fb0:	18bb      	adds	r3, r7, r2
 8001fb2:	18ba      	adds	r2, r7, r2
 8001fb4:	7812      	ldrb	r2, [r2, #0]
 8001fb6:	188a      	adds	r2, r1, r2
 8001fb8:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001fba:	183b      	adds	r3, r7, r0
 8001fbc:	781a      	ldrb	r2, [r3, #0]
 8001fbe:	183b      	adds	r3, r7, r0
 8001fc0:	3201      	adds	r2, #1
 8001fc2:	701a      	strb	r2, [r3, #0]
 8001fc4:	230e      	movs	r3, #14
 8001fc6:	18fb      	adds	r3, r7, r3
 8001fc8:	781a      	ldrb	r2, [r3, #0]
 8001fca:	200c      	movs	r0, #12
 8001fcc:	183b      	adds	r3, r7, r0
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	dbe4      	blt.n	8001fa0 <answer2CPU+0x7f0>
				}
				myCS = 0 - myCS;
 8001fd6:	210d      	movs	r1, #13
 8001fd8:	187b      	adds	r3, r7, r1
 8001fda:	187a      	adds	r2, r7, r1
 8001fdc:	7812      	ldrb	r2, [r2, #0]
 8001fde:	4252      	negs	r2, r2
 8001fe0:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001fe2:	183b      	adds	r3, r7, r0
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	1e5a      	subs	r2, r3, #1
 8001fe8:	187b      	adds	r3, r7, r1
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	b299      	uxth	r1, r3
 8001fee:	4b1d      	ldr	r3, [pc, #116]	; (8002064 <answer2CPU+0x8b4>)
 8001ff0:	0052      	lsls	r2, r2, #1
 8001ff2:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001ff4:	46c0      	nop			; (mov r8, r8)
 8001ff6:	4b1c      	ldr	r3, [pc, #112]	; (8002068 <answer2CPU+0x8b8>)
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	2280      	movs	r2, #128	; 0x80
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	d0fa      	beq.n	8001ff6 <answer2CPU+0x846>
				USART2->TDR = ans[0]|0x0100;
 8002000:	4b18      	ldr	r3, [pc, #96]	; (8002064 <answer2CPU+0x8b4>)
 8002002:	881b      	ldrh	r3, [r3, #0]
 8002004:	2280      	movs	r2, #128	; 0x80
 8002006:	0052      	lsls	r2, r2, #1
 8002008:	4313      	orrs	r3, r2
 800200a:	b29a      	uxth	r2, r3
 800200c:	4b16      	ldr	r3, [pc, #88]	; (8002068 <answer2CPU+0x8b8>)
 800200e:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8002010:	e014      	b.n	800203c <answer2CPU+0x88c>
				{
				  i++;
 8002012:	210e      	movs	r1, #14
 8002014:	187b      	adds	r3, r7, r1
 8002016:	781a      	ldrb	r2, [r3, #0]
 8002018:	187b      	adds	r3, r7, r1
 800201a:	3201      	adds	r2, #1
 800201c:	701a      	strb	r2, [r3, #0]
				  while(!(USART2->ISR & USART_ISR_TXE)){};
 800201e:	46c0      	nop			; (mov r8, r8)
 8002020:	4b11      	ldr	r3, [pc, #68]	; (8002068 <answer2CPU+0x8b8>)
 8002022:	69db      	ldr	r3, [r3, #28]
 8002024:	2280      	movs	r2, #128	; 0x80
 8002026:	4013      	ands	r3, r2
 8002028:	d0fa      	beq.n	8002020 <answer2CPU+0x870>
				  USART2->TDR = (uint8_t)ans[i];
 800202a:	230e      	movs	r3, #14
 800202c:	18fb      	adds	r3, r7, r3
 800202e:	781a      	ldrb	r2, [r3, #0]
 8002030:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <answer2CPU+0x8b4>)
 8002032:	0052      	lsls	r2, r2, #1
 8002034:	5ad3      	ldrh	r3, [r2, r3]
 8002036:	b2da      	uxtb	r2, r3
 8002038:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <answer2CPU+0x8b8>)
 800203a:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 800203c:	230e      	movs	r3, #14
 800203e:	18fb      	adds	r3, r7, r3
 8002040:	781a      	ldrb	r2, [r3, #0]
 8002042:	4b08      	ldr	r3, [pc, #32]	; (8002064 <answer2CPU+0x8b4>)
 8002044:	0052      	lsls	r2, r2, #1
 8002046:	5ad3      	ldrh	r3, [r2, r3]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1e2      	bne.n	8002012 <answer2CPU+0x862>
				}
//				cmd2Execute=0x04;
			}
//			weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, coala);
			USART2->ICR|=USART_ICR_ORECF;
 800204c:	4b06      	ldr	r3, [pc, #24]	; (8002068 <answer2CPU+0x8b8>)
 800204e:	6a1a      	ldr	r2, [r3, #32]
 8002050:	4b05      	ldr	r3, [pc, #20]	; (8002068 <answer2CPU+0x8b8>)
 8002052:	2108      	movs	r1, #8
 8002054:	430a      	orrs	r2, r1
 8002056:	621a      	str	r2, [r3, #32]
}
 8002058:	46c0      	nop			; (mov r8, r8)
 800205a:	0018      	movs	r0, r3
 800205c:	46bd      	mov	sp, r7
 800205e:	b004      	add	sp, #16
 8002060:	bd80      	pop	{r7, pc}
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	200002d0 	.word	0x200002d0
 8002068:	40004400 	.word	0x40004400
 800206c:	20000298 	.word	0x20000298
 8002070:	2000028d 	.word	0x2000028d

08002074 <MEM_Reset>:
//==================================================================================================================================
	void MEM_Reset(void) {
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
		uint8_t memCMD;
		HAL_Delay(1); //200 ms by Andrew
 800207a:	2001      	movs	r0, #1
 800207c:	f003 f9d4 	bl	8005428 <HAL_Delay>
		GPIOB->ODR &= ~(1 << 9); //reset cs
 8002080:	4b28      	ldr	r3, [pc, #160]	; (8002124 <MEM_Reset+0xb0>)
 8002082:	695a      	ldr	r2, [r3, #20]
 8002084:	4b27      	ldr	r3, [pc, #156]	; (8002124 <MEM_Reset+0xb0>)
 8002086:	4928      	ldr	r1, [pc, #160]	; (8002128 <MEM_Reset+0xb4>)
 8002088:	400a      	ands	r2, r1
 800208a:	615a      	str	r2, [r3, #20]
		memCMD = 0x66;
 800208c:	1dfb      	adds	r3, r7, #7
 800208e:	2266      	movs	r2, #102	; 0x66
 8002090:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8002092:	1df9      	adds	r1, r7, #7
 8002094:	4825      	ldr	r0, [pc, #148]	; (800212c <MEM_Reset+0xb8>)
 8002096:	2305      	movs	r3, #5
 8002098:	2201      	movs	r2, #1
 800209a:	f007 f92f 	bl	80092fc <HAL_SPI_Transmit>
		GPIOB->ODR |= 1 << 9; // set cs
 800209e:	4b21      	ldr	r3, [pc, #132]	; (8002124 <MEM_Reset+0xb0>)
 80020a0:	695a      	ldr	r2, [r3, #20]
 80020a2:	4b20      	ldr	r3, [pc, #128]	; (8002124 <MEM_Reset+0xb0>)
 80020a4:	2180      	movs	r1, #128	; 0x80
 80020a6:	0089      	lsls	r1, r1, #2
 80020a8:	430a      	orrs	r2, r1
 80020aa:	615a      	str	r2, [r3, #20]
		asm("NOP");
 80020ac:	46c0      	nop			; (mov r8, r8)
		__NOP();
 80020ae:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 80020b0:	46c0      	nop			; (mov r8, r8)
		__NOP();			//May be less NOPs?
 80020b2:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 80020b4:	46c0      	nop			; (mov r8, r8)
		__NOP();
 80020b6:	46c0      	nop			; (mov r8, r8)
		GPIOB->ODR &= ~(1 << 9);			//reset cs
 80020b8:	4b1a      	ldr	r3, [pc, #104]	; (8002124 <MEM_Reset+0xb0>)
 80020ba:	695a      	ldr	r2, [r3, #20]
 80020bc:	4b19      	ldr	r3, [pc, #100]	; (8002124 <MEM_Reset+0xb0>)
 80020be:	491a      	ldr	r1, [pc, #104]	; (8002128 <MEM_Reset+0xb4>)
 80020c0:	400a      	ands	r2, r1
 80020c2:	615a      	str	r2, [r3, #20]
		memCMD = 0x99;
 80020c4:	1dfb      	adds	r3, r7, #7
 80020c6:	2299      	movs	r2, #153	; 0x99
 80020c8:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset memory
 80020ca:	1df9      	adds	r1, r7, #7
 80020cc:	4817      	ldr	r0, [pc, #92]	; (800212c <MEM_Reset+0xb8>)
 80020ce:	2305      	movs	r3, #5
 80020d0:	2201      	movs	r2, #1
 80020d2:	f007 f913 	bl	80092fc <HAL_SPI_Transmit>
		GPIOB->ODR |= 1 << 9; // set cs
 80020d6:	4b13      	ldr	r3, [pc, #76]	; (8002124 <MEM_Reset+0xb0>)
 80020d8:	695a      	ldr	r2, [r3, #20]
 80020da:	4b12      	ldr	r3, [pc, #72]	; (8002124 <MEM_Reset+0xb0>)
 80020dc:	2180      	movs	r1, #128	; 0x80
 80020de:	0089      	lsls	r1, r1, #2
 80020e0:	430a      	orrs	r2, r1
 80020e2:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 80020e4:	2001      	movs	r0, #1
 80020e6:	f003 f99f 	bl	8005428 <HAL_Delay>
//=============================================================================================================
		memCMD = 0xB7;												//	Activation 0f 4-bytes address mode
 80020ea:	1dfb      	adds	r3, r7, #7
 80020ec:	22b7      	movs	r2, #183	; 0xb7
 80020ee:	701a      	strb	r2, [r3, #0]
		GPIOB->ODR &= ~(1 << 9); //reset cs
 80020f0:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <MEM_Reset+0xb0>)
 80020f2:	695a      	ldr	r2, [r3, #20]
 80020f4:	4b0b      	ldr	r3, [pc, #44]	; (8002124 <MEM_Reset+0xb0>)
 80020f6:	490c      	ldr	r1, [pc, #48]	; (8002128 <MEM_Reset+0xb4>)
 80020f8:	400a      	ands	r2, r1
 80020fa:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 80020fc:	1df9      	adds	r1, r7, #7
 80020fe:	480b      	ldr	r0, [pc, #44]	; (800212c <MEM_Reset+0xb8>)
 8002100:	2305      	movs	r3, #5
 8002102:	2201      	movs	r2, #1
 8002104:	f007 f8fa 	bl	80092fc <HAL_SPI_Transmit>
		GPIOB->ODR |= 1 << 9; // set cs
 8002108:	4b06      	ldr	r3, [pc, #24]	; (8002124 <MEM_Reset+0xb0>)
 800210a:	695a      	ldr	r2, [r3, #20]
 800210c:	4b05      	ldr	r3, [pc, #20]	; (8002124 <MEM_Reset+0xb0>)
 800210e:	2180      	movs	r1, #128	; 0x80
 8002110:	0089      	lsls	r1, r1, #2
 8002112:	430a      	orrs	r2, r1
 8002114:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8002116:	2001      	movs	r0, #1
 8002118:	f003 f986 	bl	8005428 <HAL_Delay>
	}
 800211c:	46c0      	nop			; (mov r8, r8)
 800211e:	46bd      	mov	sp, r7
 8002120:	b002      	add	sp, #8
 8002122:	bd80      	pop	{r7, pc}
 8002124:	50000400 	.word	0x50000400
 8002128:	fffffdff 	.word	0xfffffdff
 800212c:	20000178 	.word	0x20000178

08002130 <weoShowFullScreen>:
//==================================================================================================================================
	uint8_t weoShowFullScreen(uint8_t picNum) {
 8002130:	b5b0      	push	{r4, r5, r7, lr}
 8002132:	4c42      	ldr	r4, [pc, #264]	; (800223c <weoShowFullScreen+0x10c>)
 8002134:	44a5      	add	sp, r4
 8002136:	af02      	add	r7, sp, #8
 8002138:	0002      	movs	r2, r0
 800213a:	4b41      	ldr	r3, [pc, #260]	; (8002240 <weoShowFullScreen+0x110>)
 800213c:	4941      	ldr	r1, [pc, #260]	; (8002244 <weoShowFullScreen+0x114>)
 800213e:	185b      	adds	r3, r3, r1
 8002140:	19db      	adds	r3, r3, r7
 8002142:	701a      	strb	r2, [r3, #0]
		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H;
		uint8_t MEM_Buffer[8192], firstImAddrArray[4],addrArray[4];
		uint16_t i, len;
		uint32_t addrInfo,addr,firstImAddr;
		memCMD = 0x13; //read command with 4-byte address
 8002144:	4c40      	ldr	r4, [pc, #256]	; (8002248 <weoShowFullScreen+0x118>)
 8002146:	193b      	adds	r3, r7, r4
 8002148:	2213      	movs	r2, #19
 800214a:	701a      	strb	r2, [r3, #0]
//		picNum=0x02;
		addr=(picNum)*0x2000;
 800214c:	4b3c      	ldr	r3, [pc, #240]	; (8002240 <weoShowFullScreen+0x110>)
 800214e:	185b      	adds	r3, r3, r1
 8002150:	19db      	adds	r3, r3, r7
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	035b      	lsls	r3, r3, #13
 8002156:	483d      	ldr	r0, [pc, #244]	; (800224c <weoShowFullScreen+0x11c>)
 8002158:	183a      	adds	r2, r7, r0
 800215a:	6013      	str	r3, [r2, #0]
//		addr=0x00003800;
		addrArray[0]=addr & 0xFF;
 800215c:	183b      	adds	r3, r7, r0
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	b2da      	uxtb	r2, r3
 8002162:	4b3b      	ldr	r3, [pc, #236]	; (8002250 <weoShowFullScreen+0x120>)
 8002164:	185b      	adds	r3, r3, r1
 8002166:	19db      	adds	r3, r3, r7
 8002168:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 800216a:	183b      	adds	r3, r7, r0
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	0a1b      	lsrs	r3, r3, #8
 8002170:	b2da      	uxtb	r2, r3
 8002172:	4b37      	ldr	r3, [pc, #220]	; (8002250 <weoShowFullScreen+0x120>)
 8002174:	185b      	adds	r3, r3, r1
 8002176:	19db      	adds	r3, r3, r7
 8002178:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 800217a:	183b      	adds	r3, r7, r0
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	0c1b      	lsrs	r3, r3, #16
 8002180:	b2da      	uxtb	r2, r3
 8002182:	4b33      	ldr	r3, [pc, #204]	; (8002250 <weoShowFullScreen+0x120>)
 8002184:	185b      	adds	r3, r3, r1
 8002186:	19db      	adds	r3, r3, r7
 8002188:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 800218a:	183b      	adds	r3, r7, r0
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	0e1b      	lsrs	r3, r3, #24
 8002190:	b2da      	uxtb	r2, r3
 8002192:	4b2f      	ldr	r3, [pc, #188]	; (8002250 <weoShowFullScreen+0x120>)
 8002194:	185b      	adds	r3, r3, r1
 8002196:	19db      	adds	r3, r3, r7
 8002198:	70da      	strb	r2, [r3, #3]

		GPIOB->ODR &= ~(1 << 9); //reset cs
 800219a:	4b2e      	ldr	r3, [pc, #184]	; (8002254 <weoShowFullScreen+0x124>)
 800219c:	695a      	ldr	r2, [r3, #20]
 800219e:	4b2d      	ldr	r3, [pc, #180]	; (8002254 <weoShowFullScreen+0x124>)
 80021a0:	492d      	ldr	r1, [pc, #180]	; (8002258 <weoShowFullScreen+0x128>)
 80021a2:	400a      	ands	r2, r1
 80021a4:	615a      	str	r2, [r3, #20]
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 80021a6:	1939      	adds	r1, r7, r4
 80021a8:	482c      	ldr	r0, [pc, #176]	; (800225c <weoShowFullScreen+0x12c>)
 80021aa:	2332      	movs	r3, #50	; 0x32
 80021ac:	2201      	movs	r2, #1
 80021ae:	f007 f8a5 	bl	80092fc <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 80021b2:	2408      	movs	r4, #8
 80021b4:	193b      	adds	r3, r7, r4
 80021b6:	1cd9      	adds	r1, r3, #3
 80021b8:	4828      	ldr	r0, [pc, #160]	; (800225c <weoShowFullScreen+0x12c>)
 80021ba:	2332      	movs	r3, #50	; 0x32
 80021bc:	2201      	movs	r2, #1
 80021be:	f007 f89d 	bl	80092fc <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 80021c2:	193b      	adds	r3, r7, r4
 80021c4:	1c99      	adds	r1, r3, #2
 80021c6:	4825      	ldr	r0, [pc, #148]	; (800225c <weoShowFullScreen+0x12c>)
 80021c8:	2332      	movs	r3, #50	; 0x32
 80021ca:	2201      	movs	r2, #1
 80021cc:	f007 f896 	bl	80092fc <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 80021d0:	193b      	adds	r3, r7, r4
 80021d2:	1c59      	adds	r1, r3, #1
 80021d4:	4821      	ldr	r0, [pc, #132]	; (800225c <weoShowFullScreen+0x12c>)
 80021d6:	2332      	movs	r3, #50	; 0x32
 80021d8:	2201      	movs	r2, #1
 80021da:	f007 f88f 	bl	80092fc <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 80021de:	1939      	adds	r1, r7, r4
 80021e0:	481e      	ldr	r0, [pc, #120]	; (800225c <weoShowFullScreen+0x12c>)
 80021e2:	2332      	movs	r3, #50	; 0x32
 80021e4:	2201      	movs	r2, #1
 80021e6:	f007 f889 	bl	80092fc <HAL_SPI_Transmit>
			HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,8192, 5000);
 80021ea:	4c1d      	ldr	r4, [pc, #116]	; (8002260 <weoShowFullScreen+0x130>)
 80021ec:	2380      	movs	r3, #128	; 0x80
 80021ee:	019a      	lsls	r2, r3, #6
 80021f0:	2510      	movs	r5, #16
 80021f2:	1979      	adds	r1, r7, r5
 80021f4:	4819      	ldr	r0, [pc, #100]	; (800225c <weoShowFullScreen+0x12c>)
 80021f6:	0023      	movs	r3, r4
 80021f8:	f007 f9d8 	bl	80095ac <HAL_SPI_Receive>
		GPIOB->ODR |= 1 << 9; // set cs
 80021fc:	4b15      	ldr	r3, [pc, #84]	; (8002254 <weoShowFullScreen+0x124>)
 80021fe:	695a      	ldr	r2, [r3, #20]
 8002200:	4b14      	ldr	r3, [pc, #80]	; (8002254 <weoShowFullScreen+0x124>)
 8002202:	2180      	movs	r1, #128	; 0x80
 8002204:	0089      	lsls	r1, r1, #2
 8002206:	430a      	orrs	r2, r1
 8002208:	615a      	str	r2, [r3, #20]

		weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, MEM_Buffer); // Здесь ещё работает
 800220a:	197b      	adds	r3, r7, r5
 800220c:	9301      	str	r3, [sp, #4]
 800220e:	23ff      	movs	r3, #255	; 0xff
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	237f      	movs	r3, #127	; 0x7f
 8002214:	227f      	movs	r2, #127	; 0x7f
 8002216:	2100      	movs	r1, #0
 8002218:	2000      	movs	r0, #0
 800221a:	f7ff f919 	bl	8001450 <weoDrawRectangleFilled>
		cmd2Execute=0;
 800221e:	4b11      	ldr	r3, [pc, #68]	; (8002264 <weoShowFullScreen+0x134>)
 8002220:	2200      	movs	r2, #0
 8002222:	701a      	strb	r2, [r3, #0]
//		while(BFEN==0){};
		GPIOC->ODR |= 1 << 6;	//set BF
 8002224:	4b10      	ldr	r3, [pc, #64]	; (8002268 <weoShowFullScreen+0x138>)
 8002226:	695a      	ldr	r2, [r3, #20]
 8002228:	4b0f      	ldr	r3, [pc, #60]	; (8002268 <weoShowFullScreen+0x138>)
 800222a:	2140      	movs	r1, #64	; 0x40
 800222c:	430a      	orrs	r2, r1
 800222e:	615a      	str	r2, [r3, #20]
	}
 8002230:	46c0      	nop			; (mov r8, r8)
 8002232:	0018      	movs	r0, r3
 8002234:	46bd      	mov	sp, r7
 8002236:	4b03      	ldr	r3, [pc, #12]	; (8002244 <weoShowFullScreen+0x114>)
 8002238:	449d      	add	sp, r3
 800223a:	bdb0      	pop	{r4, r5, r7, pc}
 800223c:	ffffdfe0 	.word	0xffffdfe0
 8002240:	ffffdfef 	.word	0xffffdfef
 8002244:	00002018 	.word	0x00002018
 8002248:	00002013 	.word	0x00002013
 800224c:	00002014 	.word	0x00002014
 8002250:	ffffdff0 	.word	0xffffdff0
 8002254:	50000400 	.word	0x50000400
 8002258:	fffffdff 	.word	0xfffffdff
 800225c:	20000178 	.word	0x20000178
 8002260:	00001388 	.word	0x00001388
 8002264:	200002ea 	.word	0x200002ea
 8002268:	50000800 	.word	0x50000800

0800226c <weoShowSmallImage>:
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &MEM_Buffer ,len);
	}
//==========================================================================================================================
	uint8_t weoShowSmallImage(uint8_t picNum, uint8_t imX, uint8_t imY) {
 800226c:	b5b0      	push	{r4, r5, r7, lr}
 800226e:	4ca7      	ldr	r4, [pc, #668]	; (800250c <weoShowSmallImage+0x2a0>)
 8002270:	44a5      	add	sp, r4
 8002272:	af02      	add	r7, sp, #8
 8002274:	0004      	movs	r4, r0
 8002276:	0008      	movs	r0, r1
 8002278:	0011      	movs	r1, r2
 800227a:	4ba5      	ldr	r3, [pc, #660]	; (8002510 <weoShowSmallImage+0x2a4>)
 800227c:	4da5      	ldr	r5, [pc, #660]	; (8002514 <weoShowSmallImage+0x2a8>)
 800227e:	195b      	adds	r3, r3, r5
 8002280:	19db      	adds	r3, r3, r7
 8002282:	1c22      	adds	r2, r4, #0
 8002284:	701a      	strb	r2, [r3, #0]
 8002286:	4ba4      	ldr	r3, [pc, #656]	; (8002518 <weoShowSmallImage+0x2ac>)
 8002288:	002c      	movs	r4, r5
 800228a:	191b      	adds	r3, r3, r4
 800228c:	19db      	adds	r3, r3, r7
 800228e:	1c02      	adds	r2, r0, #0
 8002290:	701a      	strb	r2, [r3, #0]
 8002292:	4ba2      	ldr	r3, [pc, #648]	; (800251c <weoShowSmallImage+0x2b0>)
 8002294:	0020      	movs	r0, r4
 8002296:	181b      	adds	r3, r3, r0
 8002298:	19db      	adds	r3, r3, r7
 800229a:	1c0a      	adds	r2, r1, #0
 800229c:	701a      	strb	r2, [r3, #0]
		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H;
		uint8_t MEM_Buffer[8192];
		uint8_t imInfo[2],addrArray[4];
		uint16_t i;
		uint32_t addr,addrData;
		addr=0x00000000;
 800229e:	2300      	movs	r3, #0
 80022a0:	4c9f      	ldr	r4, [pc, #636]	; (8002520 <weoShowSmallImage+0x2b4>)
 80022a2:	193a      	adds	r2, r7, r4
 80022a4:	6013      	str	r3, [r2, #0]
		memCMD = 0x13; //read command with 4-byte address
 80022a6:	4d9f      	ldr	r5, [pc, #636]	; (8002524 <weoShowSmallImage+0x2b8>)
 80022a8:	197b      	adds	r3, r7, r5
 80022aa:	2213      	movs	r2, #19
 80022ac:	701a      	strb	r2, [r3, #0]
		//look at info about image
		addr=(picNum*0x2000)+0x200000;// the right path is to multiply picNum * image repeat period!
 80022ae:	4b98      	ldr	r3, [pc, #608]	; (8002510 <weoShowSmallImage+0x2a4>)
 80022b0:	0001      	movs	r1, r0
 80022b2:	185b      	adds	r3, r3, r1
 80022b4:	19db      	adds	r3, r3, r7
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	3301      	adds	r3, #1
 80022ba:	33ff      	adds	r3, #255	; 0xff
 80022bc:	035b      	lsls	r3, r3, #13
 80022be:	0020      	movs	r0, r4
 80022c0:	183a      	adds	r2, r7, r0
 80022c2:	6013      	str	r3, [r2, #0]
//		addr=(picNum*0x2000);

		addrArray[0]=addr & 0xFF;
 80022c4:	183b      	adds	r3, r7, r0
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	4b97      	ldr	r3, [pc, #604]	; (8002528 <weoShowSmallImage+0x2bc>)
 80022cc:	000c      	movs	r4, r1
 80022ce:	191b      	adds	r3, r3, r4
 80022d0:	19db      	adds	r3, r3, r7
 80022d2:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 80022d4:	0001      	movs	r1, r0
 80022d6:	187b      	adds	r3, r7, r1
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	0a1b      	lsrs	r3, r3, #8
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	4b92      	ldr	r3, [pc, #584]	; (8002528 <weoShowSmallImage+0x2bc>)
 80022e0:	191b      	adds	r3, r3, r4
 80022e2:	19db      	adds	r3, r3, r7
 80022e4:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 80022e6:	187b      	adds	r3, r7, r1
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	0c1b      	lsrs	r3, r3, #16
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	4b8e      	ldr	r3, [pc, #568]	; (8002528 <weoShowSmallImage+0x2bc>)
 80022f0:	191b      	adds	r3, r3, r4
 80022f2:	19db      	adds	r3, r3, r7
 80022f4:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 80022f6:	187b      	adds	r3, r7, r1
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	0e1b      	lsrs	r3, r3, #24
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	4b8a      	ldr	r3, [pc, #552]	; (8002528 <weoShowSmallImage+0x2bc>)
 8002300:	191b      	adds	r3, r3, r4
 8002302:	19db      	adds	r3, r3, r7
 8002304:	70da      	strb	r2, [r3, #3]

		GPIOB->ODR &= ~(1 << 9); //reset cs
 8002306:	4b89      	ldr	r3, [pc, #548]	; (800252c <weoShowSmallImage+0x2c0>)
 8002308:	695a      	ldr	r2, [r3, #20]
 800230a:	4b88      	ldr	r3, [pc, #544]	; (800252c <weoShowSmallImage+0x2c0>)
 800230c:	4988      	ldr	r1, [pc, #544]	; (8002530 <weoShowSmallImage+0x2c4>)
 800230e:	400a      	ands	r2, r1
 8002310:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 8002312:	1979      	adds	r1, r7, r5
 8002314:	4887      	ldr	r0, [pc, #540]	; (8002534 <weoShowSmallImage+0x2c8>)
 8002316:	2332      	movs	r3, #50	; 0x32
 8002318:	2201      	movs	r2, #1
 800231a:	f006 ffef 	bl	80092fc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 800231e:	2508      	movs	r5, #8
 8002320:	197b      	adds	r3, r7, r5
 8002322:	1cd9      	adds	r1, r3, #3
 8002324:	4883      	ldr	r0, [pc, #524]	; (8002534 <weoShowSmallImage+0x2c8>)
 8002326:	2332      	movs	r3, #50	; 0x32
 8002328:	2201      	movs	r2, #1
 800232a:	f006 ffe7 	bl	80092fc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 800232e:	197b      	adds	r3, r7, r5
 8002330:	1c99      	adds	r1, r3, #2
 8002332:	4880      	ldr	r0, [pc, #512]	; (8002534 <weoShowSmallImage+0x2c8>)
 8002334:	2332      	movs	r3, #50	; 0x32
 8002336:	2201      	movs	r2, #1
 8002338:	f006 ffe0 	bl	80092fc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 800233c:	197b      	adds	r3, r7, r5
 800233e:	1c59      	adds	r1, r3, #1
 8002340:	487c      	ldr	r0, [pc, #496]	; (8002534 <weoShowSmallImage+0x2c8>)
 8002342:	2332      	movs	r3, #50	; 0x32
 8002344:	2201      	movs	r2, #1
 8002346:	f006 ffd9 	bl	80092fc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 800234a:	1979      	adds	r1, r7, r5
 800234c:	4879      	ldr	r0, [pc, #484]	; (8002534 <weoShowSmallImage+0x2c8>)
 800234e:	2332      	movs	r3, #50	; 0x32
 8002350:	2201      	movs	r2, #1
 8002352:	f006 ffd3 	bl	80092fc <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &imInfo,2, 5000);
 8002356:	4b78      	ldr	r3, [pc, #480]	; (8002538 <weoShowSmallImage+0x2cc>)
 8002358:	220c      	movs	r2, #12
 800235a:	18b9      	adds	r1, r7, r2
 800235c:	4875      	ldr	r0, [pc, #468]	; (8002534 <weoShowSmallImage+0x2c8>)
 800235e:	2202      	movs	r2, #2
 8002360:	f007 f924 	bl	80095ac <HAL_SPI_Receive>
		GPIOB->ODR |= 1 << 9; // set cs
 8002364:	4b71      	ldr	r3, [pc, #452]	; (800252c <weoShowSmallImage+0x2c0>)
 8002366:	695a      	ldr	r2, [r3, #20]
 8002368:	4b70      	ldr	r3, [pc, #448]	; (800252c <weoShowSmallImage+0x2c0>)
 800236a:	2180      	movs	r1, #128	; 0x80
 800236c:	0089      	lsls	r1, r1, #2
 800236e:	430a      	orrs	r2, r1
 8002370:	615a      	str	r2, [r3, #20]

		width=imInfo[0];
 8002372:	4972      	ldr	r1, [pc, #456]	; (800253c <weoShowSmallImage+0x2d0>)
 8002374:	187b      	adds	r3, r7, r1
 8002376:	4a72      	ldr	r2, [pc, #456]	; (8002540 <weoShowSmallImage+0x2d4>)
 8002378:	1912      	adds	r2, r2, r4
 800237a:	19d2      	adds	r2, r2, r7
 800237c:	7812      	ldrb	r2, [r2, #0]
 800237e:	701a      	strb	r2, [r3, #0]
		height=imInfo[1];
 8002380:	4870      	ldr	r0, [pc, #448]	; (8002544 <weoShowSmallImage+0x2d8>)
 8002382:	183b      	adds	r3, r7, r0
 8002384:	4a6e      	ldr	r2, [pc, #440]	; (8002540 <weoShowSmallImage+0x2d4>)
 8002386:	1912      	adds	r2, r2, r4
 8002388:	19d2      	adds	r2, r2, r7
 800238a:	7852      	ldrb	r2, [r2, #1]
 800238c:	701a      	strb	r2, [r3, #0]

		len=width*height/2+2;
 800238e:	187b      	adds	r3, r7, r1
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	183a      	adds	r2, r7, r0
 8002394:	7812      	ldrb	r2, [r2, #0]
 8002396:	4353      	muls	r3, r2
 8002398:	2b00      	cmp	r3, #0
 800239a:	da00      	bge.n	800239e <weoShowSmallImage+0x132>
 800239c:	3301      	adds	r3, #1
 800239e:	105b      	asrs	r3, r3, #1
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	3302      	adds	r3, #2
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	4b68      	ldr	r3, [pc, #416]	; (8002548 <weoShowSmallImage+0x2dc>)
 80023a8:	801a      	strh	r2, [r3, #0]

		addrData=addr+0x02;
 80023aa:	4b5d      	ldr	r3, [pc, #372]	; (8002520 <weoShowSmallImage+0x2b4>)
 80023ac:	18fb      	adds	r3, r7, r3
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	3302      	adds	r3, #2
 80023b2:	4966      	ldr	r1, [pc, #408]	; (800254c <weoShowSmallImage+0x2e0>)
 80023b4:	187a      	adds	r2, r7, r1
 80023b6:	6013      	str	r3, [r2, #0]
		addrArray[0]=addrData & 0xFF;
 80023b8:	187b      	adds	r3, r7, r1
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	4b5a      	ldr	r3, [pc, #360]	; (8002528 <weoShowSmallImage+0x2bc>)
 80023c0:	4c54      	ldr	r4, [pc, #336]	; (8002514 <weoShowSmallImage+0x2a8>)
 80023c2:	191b      	adds	r3, r3, r4
 80023c4:	19db      	adds	r3, r3, r7
 80023c6:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addrData >> 8) & 0xFF;
 80023c8:	187b      	adds	r3, r7, r1
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	0a1b      	lsrs	r3, r3, #8
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	4b55      	ldr	r3, [pc, #340]	; (8002528 <weoShowSmallImage+0x2bc>)
 80023d2:	191b      	adds	r3, r3, r4
 80023d4:	19db      	adds	r3, r3, r7
 80023d6:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addrData >> 16) & 0xFF;
 80023d8:	187b      	adds	r3, r7, r1
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	0c1b      	lsrs	r3, r3, #16
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	4b51      	ldr	r3, [pc, #324]	; (8002528 <weoShowSmallImage+0x2bc>)
 80023e2:	191b      	adds	r3, r3, r4
 80023e4:	19db      	adds	r3, r3, r7
 80023e6:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addrData >> 24) & 0xFF;
 80023e8:	187b      	adds	r3, r7, r1
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	0e1b      	lsrs	r3, r3, #24
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	4b4d      	ldr	r3, [pc, #308]	; (8002528 <weoShowSmallImage+0x2bc>)
 80023f2:	191b      	adds	r3, r3, r4
 80023f4:	19db      	adds	r3, r3, r7
 80023f6:	70da      	strb	r2, [r3, #3]

		USART2->ICR|=USART_ICR_ORECF;
 80023f8:	4b55      	ldr	r3, [pc, #340]	; (8002550 <weoShowSmallImage+0x2e4>)
 80023fa:	6a1a      	ldr	r2, [r3, #32]
 80023fc:	4b54      	ldr	r3, [pc, #336]	; (8002550 <weoShowSmallImage+0x2e4>)
 80023fe:	2108      	movs	r1, #8
 8002400:	430a      	orrs	r2, r1
 8002402:	621a      	str	r2, [r3, #32]
		memCMD = 0x13; //read command with 4-byte address
 8002404:	4847      	ldr	r0, [pc, #284]	; (8002524 <weoShowSmallImage+0x2b8>)
 8002406:	183b      	adds	r3, r7, r0
 8002408:	2213      	movs	r2, #19
 800240a:	701a      	strb	r2, [r3, #0]

		GPIOB->ODR &= ~(1 <<9);	//reset cs
 800240c:	4b47      	ldr	r3, [pc, #284]	; (800252c <weoShowSmallImage+0x2c0>)
 800240e:	695a      	ldr	r2, [r3, #20]
 8002410:	4b46      	ldr	r3, [pc, #280]	; (800252c <weoShowSmallImage+0x2c0>)
 8002412:	4947      	ldr	r1, [pc, #284]	; (8002530 <weoShowSmallImage+0x2c4>)
 8002414:	400a      	ands	r2, r1
 8002416:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50);//read command with 4-byte address
 8002418:	1839      	adds	r1, r7, r0
 800241a:	4846      	ldr	r0, [pc, #280]	; (8002534 <weoShowSmallImage+0x2c8>)
 800241c:	2332      	movs	r3, #50	; 0x32
 800241e:	2201      	movs	r2, #1
 8002420:	f006 ff6c 	bl	80092fc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3],1, 50);	//send address
 8002424:	2508      	movs	r5, #8
 8002426:	197b      	adds	r3, r7, r5
 8002428:	1cd9      	adds	r1, r3, #3
 800242a:	4842      	ldr	r0, [pc, #264]	; (8002534 <weoShowSmallImage+0x2c8>)
 800242c:	2332      	movs	r3, #50	; 0x32
 800242e:	2201      	movs	r2, #1
 8002430:	f006 ff64 	bl	80092fc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2],1, 50);	//send address
 8002434:	197b      	adds	r3, r7, r5
 8002436:	1c99      	adds	r1, r3, #2
 8002438:	483e      	ldr	r0, [pc, #248]	; (8002534 <weoShowSmallImage+0x2c8>)
 800243a:	2332      	movs	r3, #50	; 0x32
 800243c:	2201      	movs	r2, #1
 800243e:	f006 ff5d 	bl	80092fc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1],1, 50);	//send address
 8002442:	197b      	adds	r3, r7, r5
 8002444:	1c59      	adds	r1, r3, #1
 8002446:	483b      	ldr	r0, [pc, #236]	; (8002534 <weoShowSmallImage+0x2c8>)
 8002448:	2332      	movs	r3, #50	; 0x32
 800244a:	2201      	movs	r2, #1
 800244c:	f006 ff56 	bl	80092fc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0],1, 50);	//send address
 8002450:	1979      	adds	r1, r7, r5
 8002452:	4838      	ldr	r0, [pc, #224]	; (8002534 <weoShowSmallImage+0x2c8>)
 8002454:	2332      	movs	r3, #50	; 0x32
 8002456:	2201      	movs	r2, #1
 8002458:	f006 ff50 	bl	80092fc <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,len, 5000);// 7 information bits about the image
 800245c:	4b3a      	ldr	r3, [pc, #232]	; (8002548 <weoShowSmallImage+0x2dc>)
 800245e:	881a      	ldrh	r2, [r3, #0]
 8002460:	4b35      	ldr	r3, [pc, #212]	; (8002538 <weoShowSmallImage+0x2cc>)
 8002462:	2110      	movs	r1, #16
 8002464:	1879      	adds	r1, r7, r1
 8002466:	4833      	ldr	r0, [pc, #204]	; (8002534 <weoShowSmallImage+0x2c8>)
 8002468:	f007 f8a0 	bl	80095ac <HAL_SPI_Receive>
		GPIOB->ODR |= 1 << 9;	// set cs
 800246c:	4b2f      	ldr	r3, [pc, #188]	; (800252c <weoShowSmallImage+0x2c0>)
 800246e:	695a      	ldr	r2, [r3, #20]
 8002470:	4b2e      	ldr	r3, [pc, #184]	; (800252c <weoShowSmallImage+0x2c0>)
 8002472:	2180      	movs	r1, #128	; 0x80
 8002474:	0089      	lsls	r1, r1, #2
 8002476:	430a      	orrs	r2, r1
 8002478:	615a      	str	r2, [r3, #20]

		decY=0x01;
 800247a:	4b36      	ldr	r3, [pc, #216]	; (8002554 <weoShowSmallImage+0x2e8>)
 800247c:	2201      	movs	r2, #1
 800247e:	701a      	strb	r2, [r3, #0]
		if(imY % 2 !=0){
 8002480:	4b26      	ldr	r3, [pc, #152]	; (800251c <weoShowSmallImage+0x2b0>)
 8002482:	191b      	adds	r3, r3, r4
 8002484:	19db      	adds	r3, r3, r7
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2201      	movs	r2, #1
 800248a:	4013      	ands	r3, r2
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d002      	beq.n	8002498 <weoShowSmallImage+0x22c>
			decY=0x02;
 8002492:	4b30      	ldr	r3, [pc, #192]	; (8002554 <weoShowSmallImage+0x2e8>)
 8002494:	2202      	movs	r2, #2
 8002496:	701a      	strb	r2, [r3, #0]
		}
		weoDrawRectangleFilled(imX, imY, imX+width-1, imY+height-decY, 0xFF,MEM_Buffer);	// Здесь ещё работает 0xFF - затычка
 8002498:	4b1f      	ldr	r3, [pc, #124]	; (8002518 <weoShowSmallImage+0x2ac>)
 800249a:	491e      	ldr	r1, [pc, #120]	; (8002514 <weoShowSmallImage+0x2a8>)
 800249c:	185b      	adds	r3, r3, r1
 800249e:	19da      	adds	r2, r3, r7
 80024a0:	4b26      	ldr	r3, [pc, #152]	; (800253c <weoShowSmallImage+0x2d0>)
 80024a2:	18fb      	adds	r3, r7, r3
 80024a4:	7812      	ldrb	r2, [r2, #0]
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	18d3      	adds	r3, r2, r3
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	3b01      	subs	r3, #1
 80024ae:	b2dc      	uxtb	r4, r3
 80024b0:	4b1a      	ldr	r3, [pc, #104]	; (800251c <weoShowSmallImage+0x2b0>)
 80024b2:	185b      	adds	r3, r3, r1
 80024b4:	19da      	adds	r2, r3, r7
 80024b6:	4b23      	ldr	r3, [pc, #140]	; (8002544 <weoShowSmallImage+0x2d8>)
 80024b8:	18fb      	adds	r3, r7, r3
 80024ba:	7812      	ldrb	r2, [r2, #0]
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	18d3      	adds	r3, r2, r3
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	4b24      	ldr	r3, [pc, #144]	; (8002554 <weoShowSmallImage+0x2e8>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	4b14      	ldr	r3, [pc, #80]	; (800251c <weoShowSmallImage+0x2b0>)
 80024cc:	0008      	movs	r0, r1
 80024ce:	185b      	adds	r3, r3, r1
 80024d0:	19db      	adds	r3, r3, r7
 80024d2:	7819      	ldrb	r1, [r3, #0]
 80024d4:	4b10      	ldr	r3, [pc, #64]	; (8002518 <weoShowSmallImage+0x2ac>)
 80024d6:	181b      	adds	r3, r3, r0
 80024d8:	19db      	adds	r3, r3, r7
 80024da:	7818      	ldrb	r0, [r3, #0]
 80024dc:	2310      	movs	r3, #16
 80024de:	18fb      	adds	r3, r7, r3
 80024e0:	9301      	str	r3, [sp, #4]
 80024e2:	23ff      	movs	r3, #255	; 0xff
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	0013      	movs	r3, r2
 80024e8:	0022      	movs	r2, r4
 80024ea:	f7fe ffb1 	bl	8001450 <weoDrawRectangleFilled>
		cmd2Execute=0;
 80024ee:	4b1a      	ldr	r3, [pc, #104]	; (8002558 <weoShowSmallImage+0x2ec>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	701a      	strb	r2, [r3, #0]
//		while(BFEN==0){};
		GPIOC->ODR |= 1 << 6;	//set BF
 80024f4:	4b19      	ldr	r3, [pc, #100]	; (800255c <weoShowSmallImage+0x2f0>)
 80024f6:	695a      	ldr	r2, [r3, #20]
 80024f8:	4b18      	ldr	r3, [pc, #96]	; (800255c <weoShowSmallImage+0x2f0>)
 80024fa:	2140      	movs	r1, #64	; 0x40
 80024fc:	430a      	orrs	r2, r1
 80024fe:	615a      	str	r2, [r3, #20]
	}
 8002500:	46c0      	nop			; (mov r8, r8)
 8002502:	0018      	movs	r0, r3
 8002504:	46bd      	mov	sp, r7
 8002506:	4b03      	ldr	r3, [pc, #12]	; (8002514 <weoShowSmallImage+0x2a8>)
 8002508:	449d      	add	sp, r3
 800250a:	bdb0      	pop	{r4, r5, r7, pc}
 800250c:	ffffdfd8 	.word	0xffffdfd8
 8002510:	ffffdfe7 	.word	0xffffdfe7
 8002514:	00002020 	.word	0x00002020
 8002518:	ffffdfe6 	.word	0xffffdfe6
 800251c:	ffffdfe5 	.word	0xffffdfe5
 8002520:	0000201c 	.word	0x0000201c
 8002524:	00002013 	.word	0x00002013
 8002528:	ffffdfe8 	.word	0xffffdfe8
 800252c:	50000400 	.word	0x50000400
 8002530:	fffffdff 	.word	0xfffffdff
 8002534:	20000178 	.word	0x20000178
 8002538:	00001388 	.word	0x00001388
 800253c:	0000201b 	.word	0x0000201b
 8002540:	ffffdfec 	.word	0xffffdfec
 8002544:	0000201a 	.word	0x0000201a
 8002548:	200002ee 	.word	0x200002ee
 800254c:	00002014 	.word	0x00002014
 8002550:	40004400 	.word	0x40004400
 8002554:	200002f0 	.word	0x200002f0
 8002558:	200002ea 	.word	0x200002ea
 800255c:	50000800 	.word	0x50000800

08002560 <soundPlay>:
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1],1, 50);	//send address
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0],1, 50);	//send address
		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &MEM_Buffer ,len);
	}
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		uint8_t soundPlay(uint8_t soundNum) {
 8002560:	b590      	push	{r4, r7, lr}
 8002562:	b08d      	sub	sp, #52	; 0x34
 8002564:	af00      	add	r7, sp, #0
 8002566:	0002      	movs	r2, r0
 8002568:	1dfb      	adds	r3, r7, #7
 800256a:	701a      	strb	r2, [r3, #0]
			uint8_t memCMD = 0x13; //read command with 4-byte address
 800256c:	232b      	movs	r3, #43	; 0x2b
 800256e:	18fb      	adds	r3, r7, r3
 8002570:	2213      	movs	r2, #19
 8002572:	701a      	strb	r2, [r3, #0]
			uint8_t soundInfo[9],addrINFO[4],addr[4],length[4];
			volatile uint32_t addrSound, address;
			uint32_t i;
			GPIOC->ODR |= 1 << 6;	//set BF //just 4 test
 8002574:	4b97      	ldr	r3, [pc, #604]	; (80027d4 <soundPlay+0x274>)
 8002576:	695a      	ldr	r2, [r3, #20]
 8002578:	4b96      	ldr	r3, [pc, #600]	; (80027d4 <soundPlay+0x274>)
 800257a:	2140      	movs	r1, #64	; 0x40
 800257c:	430a      	orrs	r2, r1
 800257e:	615a      	str	r2, [r3, #20]
//			setVolume(0x10, 0x30, 10);	// it was setVolume(0x10, 0x30, 0x00);
//			soundNum = 0;
			address = 4194304 + (soundNum * 9);
 8002580:	1dfb      	adds	r3, r7, #7
 8002582:	781a      	ldrb	r2, [r3, #0]
 8002584:	0013      	movs	r3, r2
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	189b      	adds	r3, r3, r2
 800258a:	2280      	movs	r2, #128	; 0x80
 800258c:	03d2      	lsls	r2, r2, #15
 800258e:	4694      	mov	ip, r2
 8002590:	4463      	add	r3, ip
 8002592:	60fb      	str	r3, [r7, #12]
//			address = 0 + (soundNum * 9);

			curBuf = 0;
 8002594:	4b90      	ldr	r3, [pc, #576]	; (80027d8 <soundPlay+0x278>)
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]
			uint32_t lenOfsound = 0;
 800259a:	2300      	movs	r3, #0
 800259c:	62fb      	str	r3, [r7, #44]	; 0x2c
			isSoundOver = 0;
 800259e:	4b8f      	ldr	r3, [pc, #572]	; (80027dc <soundPlay+0x27c>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	701a      	strb	r2, [r3, #0]
			addrSound = 0;
 80025a4:	2300      	movs	r3, #0
 80025a6:	613b      	str	r3, [r7, #16]

			if(isSoundOver == 1)
 80025a8:	4b8c      	ldr	r3, [pc, #560]	; (80027dc <soundPlay+0x27c>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d109      	bne.n	80025c4 <soundPlay+0x64>
			{
				GPIOC->ODR |= 1 << 6;	//set BF
 80025b0:	4b88      	ldr	r3, [pc, #544]	; (80027d4 <soundPlay+0x274>)
 80025b2:	695a      	ldr	r2, [r3, #20]
 80025b4:	4b87      	ldr	r3, [pc, #540]	; (80027d4 <soundPlay+0x274>)
 80025b6:	2140      	movs	r1, #64	; 0x40
 80025b8:	430a      	orrs	r2, r1
 80025ba:	615a      	str	r2, [r3, #20]
				curBuf = 0;
 80025bc:	4b86      	ldr	r3, [pc, #536]	; (80027d8 <soundPlay+0x278>)
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
				return;
 80025c2:	e1e3      	b.n	800298c <soundPlay+0x42c>
			}

			if (curBuf == 0){
 80025c4:	4b84      	ldr	r3, [pc, #528]	; (80027d8 <soundPlay+0x278>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d000      	beq.n	80025ce <soundPlay+0x6e>
 80025cc:	e0af      	b.n	800272e <soundPlay+0x1ce>



				addrINFO[0] = address & 0xFF;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	241c      	movs	r4, #28
 80025d4:	193b      	adds	r3, r7, r4
 80025d6:	701a      	strb	r2, [r3, #0]
				addrINFO[1] = (address >> 8) & 0xFF;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	0a1b      	lsrs	r3, r3, #8
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	193b      	adds	r3, r7, r4
 80025e0:	705a      	strb	r2, [r3, #1]
				addrINFO[2] = (address >> 16) & 0xFF;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	0c1b      	lsrs	r3, r3, #16
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	193b      	adds	r3, r7, r4
 80025ea:	709a      	strb	r2, [r3, #2]
				addrINFO[3] = (address >> 24) & 0xFF;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	0e1b      	lsrs	r3, r3, #24
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	193b      	adds	r3, r7, r4
 80025f4:	70da      	strb	r2, [r3, #3]

				GPIOB->ODR &= ~(1 << 9); //reset cs
 80025f6:	4b7a      	ldr	r3, [pc, #488]	; (80027e0 <soundPlay+0x280>)
 80025f8:	695a      	ldr	r2, [r3, #20]
 80025fa:	4b79      	ldr	r3, [pc, #484]	; (80027e0 <soundPlay+0x280>)
 80025fc:	4979      	ldr	r1, [pc, #484]	; (80027e4 <soundPlay+0x284>)
 80025fe:	400a      	ands	r2, r1
 8002600:	615a      	str	r2, [r3, #20]
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & memCMD, 1, 50); //read command with 4-byte address
 8002602:	232b      	movs	r3, #43	; 0x2b
 8002604:	18f9      	adds	r1, r7, r3
 8002606:	4878      	ldr	r0, [pc, #480]	; (80027e8 <soundPlay+0x288>)
 8002608:	2332      	movs	r3, #50	; 0x32
 800260a:	2201      	movs	r2, #1
 800260c:	f006 fe76 	bl	80092fc <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & addrINFO[3], 1, 50); //send address
 8002610:	193b      	adds	r3, r7, r4
 8002612:	1cd9      	adds	r1, r3, #3
 8002614:	4874      	ldr	r0, [pc, #464]	; (80027e8 <soundPlay+0x288>)
 8002616:	2332      	movs	r3, #50	; 0x32
 8002618:	2201      	movs	r2, #1
 800261a:	f006 fe6f 	bl	80092fc <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & addrINFO[2], 1, 50); //send address
 800261e:	193b      	adds	r3, r7, r4
 8002620:	1c99      	adds	r1, r3, #2
 8002622:	4871      	ldr	r0, [pc, #452]	; (80027e8 <soundPlay+0x288>)
 8002624:	2332      	movs	r3, #50	; 0x32
 8002626:	2201      	movs	r2, #1
 8002628:	f006 fe68 	bl	80092fc <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & addrINFO[1], 1, 50); //send address
 800262c:	193b      	adds	r3, r7, r4
 800262e:	1c59      	adds	r1, r3, #1
 8002630:	486d      	ldr	r0, [pc, #436]	; (80027e8 <soundPlay+0x288>)
 8002632:	2332      	movs	r3, #50	; 0x32
 8002634:	2201      	movs	r2, #1
 8002636:	f006 fe61 	bl	80092fc <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & addrINFO[0], 1, 50); //send address
 800263a:	1939      	adds	r1, r7, r4
 800263c:	486a      	ldr	r0, [pc, #424]	; (80027e8 <soundPlay+0x288>)
 800263e:	2332      	movs	r3, #50	; 0x32
 8002640:	2201      	movs	r2, #1
 8002642:	f006 fe5b 	bl	80092fc <HAL_SPI_Transmit>
				HAL_SPI_Receive(&hspi2, (uint8_t*) & soundInfo, 9, 5000);//9 bytes of soundInfo
 8002646:	4b69      	ldr	r3, [pc, #420]	; (80027ec <soundPlay+0x28c>)
 8002648:	2420      	movs	r4, #32
 800264a:	1939      	adds	r1, r7, r4
 800264c:	4866      	ldr	r0, [pc, #408]	; (80027e8 <soundPlay+0x288>)
 800264e:	2209      	movs	r2, #9
 8002650:	f006 ffac 	bl	80095ac <HAL_SPI_Receive>
				GPIOB->ODR |= 1 << 9; // set cs
 8002654:	4b62      	ldr	r3, [pc, #392]	; (80027e0 <soundPlay+0x280>)
 8002656:	695a      	ldr	r2, [r3, #20]
 8002658:	4b61      	ldr	r3, [pc, #388]	; (80027e0 <soundPlay+0x280>)
 800265a:	2180      	movs	r1, #128	; 0x80
 800265c:	0089      	lsls	r1, r1, #2
 800265e:	430a      	orrs	r2, r1
 8002660:	615a      	str	r2, [r3, #20]

				addr[0] = soundInfo[4];
 8002662:	0021      	movs	r1, r4
 8002664:	187b      	adds	r3, r7, r1
 8002666:	791a      	ldrb	r2, [r3, #4]
 8002668:	2018      	movs	r0, #24
 800266a:	183b      	adds	r3, r7, r0
 800266c:	701a      	strb	r2, [r3, #0]
				addr[1] = soundInfo[3];
 800266e:	187b      	adds	r3, r7, r1
 8002670:	78da      	ldrb	r2, [r3, #3]
 8002672:	183b      	adds	r3, r7, r0
 8002674:	705a      	strb	r2, [r3, #1]
				addr[2] = soundInfo[2];
 8002676:	187b      	adds	r3, r7, r1
 8002678:	789a      	ldrb	r2, [r3, #2]
 800267a:	183b      	adds	r3, r7, r0
 800267c:	709a      	strb	r2, [r3, #2]
				addr[3] = soundInfo[1];
 800267e:	187b      	adds	r3, r7, r1
 8002680:	785a      	ldrb	r2, [r3, #1]
 8002682:	183b      	adds	r3, r7, r0
 8002684:	70da      	strb	r2, [r3, #3]

//				address = 0;
	//			address = 0x29f170;

				address |= addr[3];
 8002686:	183b      	adds	r3, r7, r0
 8002688:	78db      	ldrb	r3, [r3, #3]
 800268a:	001a      	movs	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	4313      	orrs	r3, r2
 8002690:	60fb      	str	r3, [r7, #12]
				address <<= 8;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	021b      	lsls	r3, r3, #8
 8002696:	60fb      	str	r3, [r7, #12]
				address |= addr[2];
 8002698:	183b      	adds	r3, r7, r0
 800269a:	789b      	ldrb	r3, [r3, #2]
 800269c:	001a      	movs	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	60fb      	str	r3, [r7, #12]
				address <<= 8;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	021b      	lsls	r3, r3, #8
 80026a8:	60fb      	str	r3, [r7, #12]
				address |= addr[1];
 80026aa:	183b      	adds	r3, r7, r0
 80026ac:	785b      	ldrb	r3, [r3, #1]
 80026ae:	001a      	movs	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	60fb      	str	r3, [r7, #12]
				address <<= 8;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	021b      	lsls	r3, r3, #8
 80026ba:	60fb      	str	r3, [r7, #12]
				address |= addr[0];
 80026bc:	183b      	adds	r3, r7, r0
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	001a      	movs	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	60fb      	str	r3, [r7, #12]
	//									address <<= 8;
	//									address |= addr[1];
	//									address <<= 8;
	//									address |= addr[0];

				length[0] = soundInfo[8];	//Commented 4 test
 80026c8:	187b      	adds	r3, r7, r1
 80026ca:	7a1a      	ldrb	r2, [r3, #8]
 80026cc:	2014      	movs	r0, #20
 80026ce:	183b      	adds	r3, r7, r0
 80026d0:	701a      	strb	r2, [r3, #0]
				length[1] = soundInfo[7];	//Commented 4 test
 80026d2:	187b      	adds	r3, r7, r1
 80026d4:	79da      	ldrb	r2, [r3, #7]
 80026d6:	183b      	adds	r3, r7, r0
 80026d8:	705a      	strb	r2, [r3, #1]
				length[2] = soundInfo[6];	//Commented 4 test
 80026da:	187b      	adds	r3, r7, r1
 80026dc:	799a      	ldrb	r2, [r3, #6]
 80026de:	183b      	adds	r3, r7, r0
 80026e0:	709a      	strb	r2, [r3, #2]
				length[3] = soundInfo[5];	//Commented 4 test
 80026e2:	187b      	adds	r3, r7, r1
 80026e4:	795a      	ldrb	r2, [r3, #5]
 80026e6:	0001      	movs	r1, r0
 80026e8:	187b      	adds	r3, r7, r1
 80026ea:	70da      	strb	r2, [r3, #3]

				lenOfsound |= length[3];
 80026ec:	187b      	adds	r3, r7, r1
 80026ee:	78db      	ldrb	r3, [r3, #3]
 80026f0:	001a      	movs	r2, r3
 80026f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f4:	4313      	orrs	r3, r2
 80026f6:	62fb      	str	r3, [r7, #44]	; 0x2c
				lenOfsound <<= 8;
 80026f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026fa:	021b      	lsls	r3, r3, #8
 80026fc:	62fb      	str	r3, [r7, #44]	; 0x2c
				lenOfsound |= length[2];
 80026fe:	187b      	adds	r3, r7, r1
 8002700:	789b      	ldrb	r3, [r3, #2]
 8002702:	001a      	movs	r2, r3
 8002704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002706:	4313      	orrs	r3, r2
 8002708:	62fb      	str	r3, [r7, #44]	; 0x2c
				lenOfsound <<= 8;
 800270a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270c:	021b      	lsls	r3, r3, #8
 800270e:	62fb      	str	r3, [r7, #44]	; 0x2c
				lenOfsound |= length[1];
 8002710:	187b      	adds	r3, r7, r1
 8002712:	785b      	ldrb	r3, [r3, #1]
 8002714:	001a      	movs	r2, r3
 8002716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002718:	4313      	orrs	r3, r2
 800271a:	62fb      	str	r3, [r7, #44]	; 0x2c
				lenOfsound <<= 8;
 800271c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800271e:	021b      	lsls	r3, r3, #8
 8002720:	62fb      	str	r3, [r7, #44]	; 0x2c
				lenOfsound |= length[0];
 8002722:	187b      	adds	r3, r7, r1
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	001a      	movs	r2, r3
 8002728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800272a:	4313      	orrs	r3, r2
 800272c:	62fb      	str	r3, [r7, #44]	; 0x2c
			}

	//			lenOfsound = 0xe7a4;	//len1
	////			lenOfsound = 1374248;	//len0
				bufCount = lenOfsound / bufLen;
 800272e:	4b30      	ldr	r3, [pc, #192]	; (80027f0 <soundPlay+0x290>)
 8002730:	881b      	ldrh	r3, [r3, #0]
 8002732:	0019      	movs	r1, r3
 8002734:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002736:	f7fd fce5 	bl	8000104 <__udivsi3>
 800273a:	0003      	movs	r3, r0
 800273c:	001a      	movs	r2, r3
 800273e:	4b2d      	ldr	r3, [pc, #180]	; (80027f4 <soundPlay+0x294>)
 8002740:	601a      	str	r2, [r3, #0]
	//////////////////////////////////////////////////////////////////////////////////////// IF before is correct, after is correct //////////
				GPIOB->ODR &= ~(1 << 9); //reset FLASH CS
 8002742:	4b27      	ldr	r3, [pc, #156]	; (80027e0 <soundPlay+0x280>)
 8002744:	695a      	ldr	r2, [r3, #20]
 8002746:	4b26      	ldr	r3, [pc, #152]	; (80027e0 <soundPlay+0x280>)
 8002748:	4926      	ldr	r1, [pc, #152]	; (80027e4 <soundPlay+0x284>)
 800274a:	400a      	ands	r2, r1
 800274c:	615a      	str	r2, [r3, #20]
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & memCMD, 1, 50); //read command with 4-byte address
 800274e:	232b      	movs	r3, #43	; 0x2b
 8002750:	18f9      	adds	r1, r7, r3
 8002752:	4825      	ldr	r0, [pc, #148]	; (80027e8 <soundPlay+0x288>)
 8002754:	2332      	movs	r3, #50	; 0x32
 8002756:	2201      	movs	r2, #1
 8002758:	f006 fdd0 	bl	80092fc <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[3], 1, 50); //send address
 800275c:	2418      	movs	r4, #24
 800275e:	193b      	adds	r3, r7, r4
 8002760:	1cd9      	adds	r1, r3, #3
 8002762:	4821      	ldr	r0, [pc, #132]	; (80027e8 <soundPlay+0x288>)
 8002764:	2332      	movs	r3, #50	; 0x32
 8002766:	2201      	movs	r2, #1
 8002768:	f006 fdc8 	bl	80092fc <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[2], 1, 50); //send address
 800276c:	193b      	adds	r3, r7, r4
 800276e:	1c99      	adds	r1, r3, #2
 8002770:	481d      	ldr	r0, [pc, #116]	; (80027e8 <soundPlay+0x288>)
 8002772:	2332      	movs	r3, #50	; 0x32
 8002774:	2201      	movs	r2, #1
 8002776:	f006 fdc1 	bl	80092fc <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[1], 1, 50); //send address
 800277a:	193b      	adds	r3, r7, r4
 800277c:	1c59      	adds	r1, r3, #1
 800277e:	481a      	ldr	r0, [pc, #104]	; (80027e8 <soundPlay+0x288>)
 8002780:	2332      	movs	r3, #50	; 0x32
 8002782:	2201      	movs	r2, #1
 8002784:	f006 fdba 	bl	80092fc <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[0], 1, 50); //send address
 8002788:	1939      	adds	r1, r7, r4
 800278a:	4817      	ldr	r0, [pc, #92]	; (80027e8 <soundPlay+0x288>)
 800278c:	2332      	movs	r3, #50	; 0x32
 800278e:	2201      	movs	r2, #1
 8002790:	f006 fdb4 	bl	80092fc <HAL_SPI_Transmit>
				HAL_SPI_Receive(&hspi2, (uint8_t*)  & soundBuf[0], bufLen, 5000);
 8002794:	4b16      	ldr	r3, [pc, #88]	; (80027f0 <soundPlay+0x290>)
 8002796:	881a      	ldrh	r2, [r3, #0]
 8002798:	4b14      	ldr	r3, [pc, #80]	; (80027ec <soundPlay+0x28c>)
 800279a:	4917      	ldr	r1, [pc, #92]	; (80027f8 <soundPlay+0x298>)
 800279c:	4812      	ldr	r0, [pc, #72]	; (80027e8 <soundPlay+0x288>)
 800279e:	f006 ff05 	bl	80095ac <HAL_SPI_Receive>
				GPIOB->ODR |= 1 << 9;	//set FLASH CS
 80027a2:	4b0f      	ldr	r3, [pc, #60]	; (80027e0 <soundPlay+0x280>)
 80027a4:	695a      	ldr	r2, [r3, #20]
 80027a6:	4b0e      	ldr	r3, [pc, #56]	; (80027e0 <soundPlay+0x280>)
 80027a8:	2180      	movs	r1, #128	; 0x80
 80027aa:	0089      	lsls	r1, r1, #2
 80027ac:	430a      	orrs	r2, r1
 80027ae:	615a      	str	r2, [r3, #20]



	//			addrSound = 9;	// 4 test only!
				addrSound = address;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	613b      	str	r3, [r7, #16]

				speakerPowerUp();
 80027b4:	f000 f993 	bl	8002ade <speakerPowerUp>

				HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*) & soundBuf[0], (bufLen >> 1));
 80027b8:	4b0d      	ldr	r3, [pc, #52]	; (80027f0 <soundPlay+0x290>)
 80027ba:	881b      	ldrh	r3, [r3, #0]
 80027bc:	085b      	lsrs	r3, r3, #1
 80027be:	b29a      	uxth	r2, r3
 80027c0:	490d      	ldr	r1, [pc, #52]	; (80027f8 <soundPlay+0x298>)
 80027c2:	4b0e      	ldr	r3, [pc, #56]	; (80027fc <soundPlay+0x29c>)
 80027c4:	0018      	movs	r0, r3
 80027c6:	f005 f8f3 	bl	80079b0 <HAL_I2S_Transmit_DMA>
				half_of_buf = 1;
 80027ca:	4b0d      	ldr	r3, [pc, #52]	; (8002800 <soundPlay+0x2a0>)
 80027cc:	2201      	movs	r2, #1
 80027ce:	701a      	strb	r2, [r3, #0]
	//==================================================1st time play buffer =========================================================
	//			GPIOC->ODR |= 1 << 6;	//set BF
	//			GPIOC->ODR &= ~(1 << 6);	//set BF сюда приходит
				while(curBuf <= bufCount)
 80027d0:	e0d4      	b.n	800297c <soundPlay+0x41c>
 80027d2:	46c0      	nop			; (mov r8, r8)
 80027d4:	50000800 	.word	0x50000800
 80027d8:	200002f4 	.word	0x200002f4
 80027dc:	200012fd 	.word	0x200012fd
 80027e0:	50000400 	.word	0x50000400
 80027e4:	fffffdff 	.word	0xfffffdff
 80027e8:	20000178 	.word	0x20000178
 80027ec:	00001388 	.word	0x00001388
 80027f0:	20000030 	.word	0x20000030
 80027f4:	200002f8 	.word	0x200002f8
 80027f8:	200002fc 	.word	0x200002fc
 80027fc:	200000e0 	.word	0x200000e0
 8002800:	200012fc 	.word	0x200012fc
				{
	//							GPIOC->ODR |= 1 << 6;	//set BF
	//							GPIOC->ODR &= ~(1 << 6);	//set BF сюда приходит
					if(half_of_buf == 2)
 8002804:	4b63      	ldr	r3, [pc, #396]	; (8002994 <soundPlay+0x434>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	2b02      	cmp	r3, #2
 800280a:	d15c      	bne.n	80028c6 <soundPlay+0x366>
					{
						GPIOC->ODR |= 1 << 6;	//set BF
 800280c:	4b62      	ldr	r3, [pc, #392]	; (8002998 <soundPlay+0x438>)
 800280e:	695a      	ldr	r2, [r3, #20]
 8002810:	4b61      	ldr	r3, [pc, #388]	; (8002998 <soundPlay+0x438>)
 8002812:	2140      	movs	r1, #64	; 0x40
 8002814:	430a      	orrs	r2, r1
 8002816:	615a      	str	r2, [r3, #20]
	//					GPIOC->ODR &= ~(1 << 6);	//set BF сюда приходит
						addrSound = (addrSound + (bufLen >> 1));
 8002818:	4b60      	ldr	r3, [pc, #384]	; (800299c <soundPlay+0x43c>)
 800281a:	881b      	ldrh	r3, [r3, #0]
 800281c:	085b      	lsrs	r3, r3, #1
 800281e:	b29b      	uxth	r3, r3
 8002820:	001a      	movs	r2, r3
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	18d3      	adds	r3, r2, r3
 8002826:	613b      	str	r3, [r7, #16]

						addr[0] = addrSound & 0xFF;
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	b2da      	uxtb	r2, r3
 800282c:	2418      	movs	r4, #24
 800282e:	193b      	adds	r3, r7, r4
 8002830:	701a      	strb	r2, [r3, #0]
						addr[1] = (addrSound >> 8) & 0xFF;
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	0a1b      	lsrs	r3, r3, #8
 8002836:	b2da      	uxtb	r2, r3
 8002838:	193b      	adds	r3, r7, r4
 800283a:	705a      	strb	r2, [r3, #1]
						addr[2] = (addrSound >> 16) & 0xFF;
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	0c1b      	lsrs	r3, r3, #16
 8002840:	b2da      	uxtb	r2, r3
 8002842:	193b      	adds	r3, r7, r4
 8002844:	709a      	strb	r2, [r3, #2]
						addr[3] = (addrSound >> 24) & 0xFF;
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	0e1b      	lsrs	r3, r3, #24
 800284a:	b2da      	uxtb	r2, r3
 800284c:	193b      	adds	r3, r7, r4
 800284e:	70da      	strb	r2, [r3, #3]

						GPIOB->ODR &= ~(1 << 9); //reset FLASH CS
 8002850:	4b53      	ldr	r3, [pc, #332]	; (80029a0 <soundPlay+0x440>)
 8002852:	695a      	ldr	r2, [r3, #20]
 8002854:	4b52      	ldr	r3, [pc, #328]	; (80029a0 <soundPlay+0x440>)
 8002856:	4953      	ldr	r1, [pc, #332]	; (80029a4 <soundPlay+0x444>)
 8002858:	400a      	ands	r2, r1
 800285a:	615a      	str	r2, [r3, #20]
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & memCMD, 1, 50); //read command with 4-byte address
 800285c:	232b      	movs	r3, #43	; 0x2b
 800285e:	18f9      	adds	r1, r7, r3
 8002860:	4851      	ldr	r0, [pc, #324]	; (80029a8 <soundPlay+0x448>)
 8002862:	2332      	movs	r3, #50	; 0x32
 8002864:	2201      	movs	r2, #1
 8002866:	f006 fd49 	bl	80092fc <HAL_SPI_Transmit>
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[3], 1, 50); //send address
 800286a:	193b      	adds	r3, r7, r4
 800286c:	1cd9      	adds	r1, r3, #3
 800286e:	484e      	ldr	r0, [pc, #312]	; (80029a8 <soundPlay+0x448>)
 8002870:	2332      	movs	r3, #50	; 0x32
 8002872:	2201      	movs	r2, #1
 8002874:	f006 fd42 	bl	80092fc <HAL_SPI_Transmit>
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[2], 1, 50); //send address
 8002878:	193b      	adds	r3, r7, r4
 800287a:	1c99      	adds	r1, r3, #2
 800287c:	484a      	ldr	r0, [pc, #296]	; (80029a8 <soundPlay+0x448>)
 800287e:	2332      	movs	r3, #50	; 0x32
 8002880:	2201      	movs	r2, #1
 8002882:	f006 fd3b 	bl	80092fc <HAL_SPI_Transmit>
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[1], 1, 50); //send address
 8002886:	193b      	adds	r3, r7, r4
 8002888:	1c59      	adds	r1, r3, #1
 800288a:	4847      	ldr	r0, [pc, #284]	; (80029a8 <soundPlay+0x448>)
 800288c:	2332      	movs	r3, #50	; 0x32
 800288e:	2201      	movs	r2, #1
 8002890:	f006 fd34 	bl	80092fc <HAL_SPI_Transmit>
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[0], 1, 50); //send address
 8002894:	1939      	adds	r1, r7, r4
 8002896:	4844      	ldr	r0, [pc, #272]	; (80029a8 <soundPlay+0x448>)
 8002898:	2332      	movs	r3, #50	; 0x32
 800289a:	2201      	movs	r2, #1
 800289c:	f006 fd2e 	bl	80092fc <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi2, (uint8_t*)&soundBuf[0], (bufLen >> 1), 5000);
 80028a0:	4b3e      	ldr	r3, [pc, #248]	; (800299c <soundPlay+0x43c>)
 80028a2:	881b      	ldrh	r3, [r3, #0]
 80028a4:	085b      	lsrs	r3, r3, #1
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	4b40      	ldr	r3, [pc, #256]	; (80029ac <soundPlay+0x44c>)
 80028aa:	4941      	ldr	r1, [pc, #260]	; (80029b0 <soundPlay+0x450>)
 80028ac:	483e      	ldr	r0, [pc, #248]	; (80029a8 <soundPlay+0x448>)
 80028ae:	f006 fe7d 	bl	80095ac <HAL_SPI_Receive>
						GPIOB->ODR |= 1 << 9;	//set FLASH CS
 80028b2:	4b3b      	ldr	r3, [pc, #236]	; (80029a0 <soundPlay+0x440>)
 80028b4:	695a      	ldr	r2, [r3, #20]
 80028b6:	4b3a      	ldr	r3, [pc, #232]	; (80029a0 <soundPlay+0x440>)
 80028b8:	2180      	movs	r1, #128	; 0x80
 80028ba:	0089      	lsls	r1, r1, #2
 80028bc:	430a      	orrs	r2, r1
 80028be:	615a      	str	r2, [r3, #20]
						half_of_buf = 1;
 80028c0:	4b34      	ldr	r3, [pc, #208]	; (8002994 <soundPlay+0x434>)
 80028c2:	2201      	movs	r2, #1
 80028c4:	701a      	strb	r2, [r3, #0]
					}
					if(half_of_buf == 0)
 80028c6:	4b33      	ldr	r3, [pc, #204]	; (8002994 <soundPlay+0x434>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d156      	bne.n	800297c <soundPlay+0x41c>
					{
	//					GPIOC->ODR |= 1 << 6;	//set BF
//						GPIOC->ODR &= ~(1 << 6);	//set BF сюда приходит
						addrSound = (addrSound + (bufLen >> 1));
 80028ce:	4b33      	ldr	r3, [pc, #204]	; (800299c <soundPlay+0x43c>)
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	085b      	lsrs	r3, r3, #1
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	001a      	movs	r2, r3
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	18d3      	adds	r3, r2, r3
 80028dc:	613b      	str	r3, [r7, #16]

						addr[0] = addrSound & 0xFF;
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	2418      	movs	r4, #24
 80028e4:	193b      	adds	r3, r7, r4
 80028e6:	701a      	strb	r2, [r3, #0]
						addr[1] = (addrSound >> 8) & 0xFF;
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	0a1b      	lsrs	r3, r3, #8
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	193b      	adds	r3, r7, r4
 80028f0:	705a      	strb	r2, [r3, #1]
						addr[2] = (addrSound >> 16) & 0xFF;
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	0c1b      	lsrs	r3, r3, #16
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	193b      	adds	r3, r7, r4
 80028fa:	709a      	strb	r2, [r3, #2]
						addr[3] = (addrSound >> 24) & 0xFF;
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	0e1b      	lsrs	r3, r3, #24
 8002900:	b2da      	uxtb	r2, r3
 8002902:	193b      	adds	r3, r7, r4
 8002904:	70da      	strb	r2, [r3, #3]

						GPIOB->ODR &= ~(1 << 9); //reset FLASH CS
 8002906:	4b26      	ldr	r3, [pc, #152]	; (80029a0 <soundPlay+0x440>)
 8002908:	695a      	ldr	r2, [r3, #20]
 800290a:	4b25      	ldr	r3, [pc, #148]	; (80029a0 <soundPlay+0x440>)
 800290c:	4925      	ldr	r1, [pc, #148]	; (80029a4 <soundPlay+0x444>)
 800290e:	400a      	ands	r2, r1
 8002910:	615a      	str	r2, [r3, #20]
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & memCMD, 1, 50); //read command with 4-byte address
 8002912:	232b      	movs	r3, #43	; 0x2b
 8002914:	18f9      	adds	r1, r7, r3
 8002916:	4824      	ldr	r0, [pc, #144]	; (80029a8 <soundPlay+0x448>)
 8002918:	2332      	movs	r3, #50	; 0x32
 800291a:	2201      	movs	r2, #1
 800291c:	f006 fcee 	bl	80092fc <HAL_SPI_Transmit>
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[3], 1, 50); //send address
 8002920:	193b      	adds	r3, r7, r4
 8002922:	1cd9      	adds	r1, r3, #3
 8002924:	4820      	ldr	r0, [pc, #128]	; (80029a8 <soundPlay+0x448>)
 8002926:	2332      	movs	r3, #50	; 0x32
 8002928:	2201      	movs	r2, #1
 800292a:	f006 fce7 	bl	80092fc <HAL_SPI_Transmit>
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[2], 1, 50); //send address
 800292e:	193b      	adds	r3, r7, r4
 8002930:	1c99      	adds	r1, r3, #2
 8002932:	481d      	ldr	r0, [pc, #116]	; (80029a8 <soundPlay+0x448>)
 8002934:	2332      	movs	r3, #50	; 0x32
 8002936:	2201      	movs	r2, #1
 8002938:	f006 fce0 	bl	80092fc <HAL_SPI_Transmit>
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[1], 1, 50); //send address
 800293c:	193b      	adds	r3, r7, r4
 800293e:	1c59      	adds	r1, r3, #1
 8002940:	4819      	ldr	r0, [pc, #100]	; (80029a8 <soundPlay+0x448>)
 8002942:	2332      	movs	r3, #50	; 0x32
 8002944:	2201      	movs	r2, #1
 8002946:	f006 fcd9 	bl	80092fc <HAL_SPI_Transmit>
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[0], 1, 50); //send address
 800294a:	1939      	adds	r1, r7, r4
 800294c:	4816      	ldr	r0, [pc, #88]	; (80029a8 <soundPlay+0x448>)
 800294e:	2332      	movs	r3, #50	; 0x32
 8002950:	2201      	movs	r2, #1
 8002952:	f006 fcd3 	bl	80092fc <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi2, (uint8_t*)&soundBuf[2048], (bufLen >> 1), 5000);
 8002956:	4b11      	ldr	r3, [pc, #68]	; (800299c <soundPlay+0x43c>)
 8002958:	881b      	ldrh	r3, [r3, #0]
 800295a:	085b      	lsrs	r3, r3, #1
 800295c:	b29a      	uxth	r2, r3
 800295e:	4b13      	ldr	r3, [pc, #76]	; (80029ac <soundPlay+0x44c>)
 8002960:	4914      	ldr	r1, [pc, #80]	; (80029b4 <soundPlay+0x454>)
 8002962:	4811      	ldr	r0, [pc, #68]	; (80029a8 <soundPlay+0x448>)
 8002964:	f006 fe22 	bl	80095ac <HAL_SPI_Receive>
						GPIOB->ODR |= 1 << 9;	//set FLASH CS
 8002968:	4b0d      	ldr	r3, [pc, #52]	; (80029a0 <soundPlay+0x440>)
 800296a:	695a      	ldr	r2, [r3, #20]
 800296c:	4b0c      	ldr	r3, [pc, #48]	; (80029a0 <soundPlay+0x440>)
 800296e:	2180      	movs	r1, #128	; 0x80
 8002970:	0089      	lsls	r1, r1, #2
 8002972:	430a      	orrs	r2, r1
 8002974:	615a      	str	r2, [r3, #20]
						half_of_buf = 1;
 8002976:	4b07      	ldr	r3, [pc, #28]	; (8002994 <soundPlay+0x434>)
 8002978:	2201      	movs	r2, #1
 800297a:	701a      	strb	r2, [r3, #0]
				while(curBuf <= bufCount)
 800297c:	4b0e      	ldr	r3, [pc, #56]	; (80029b8 <soundPlay+0x458>)
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	4b0e      	ldr	r3, [pc, #56]	; (80029bc <soundPlay+0x45c>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	429a      	cmp	r2, r3
 8002986:	d800      	bhi.n	800298a <soundPlay+0x42a>
 8002988:	e73c      	b.n	8002804 <soundPlay+0x2a4>
					}
				}
				return;
 800298a:	46c0      	nop			; (mov r8, r8)
			}
 800298c:	0018      	movs	r0, r3
 800298e:	46bd      	mov	sp, r7
 8002990:	b00d      	add	sp, #52	; 0x34
 8002992:	bd90      	pop	{r4, r7, pc}
 8002994:	200012fc 	.word	0x200012fc
 8002998:	50000800 	.word	0x50000800
 800299c:	20000030 	.word	0x20000030
 80029a0:	50000400 	.word	0x50000400
 80029a4:	fffffdff 	.word	0xfffffdff
 80029a8:	20000178 	.word	0x20000178
 80029ac:	00001388 	.word	0x00001388
 80029b0:	200002fc 	.word	0x200002fc
 80029b4:	20000afc 	.word	0x20000afc
 80029b8:	200002f4 	.word	0x200002f4
 80029bc:	200002f8 	.word	0x200002f8

080029c0 <sound_half_transfer_callback>:
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void sound_half_transfer_callback()
		{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
			half_of_buf = 2;
 80029c4:	4b02      	ldr	r3, [pc, #8]	; (80029d0 <sound_half_transfer_callback+0x10>)
 80029c6:	2202      	movs	r2, #2
 80029c8:	701a      	strb	r2, [r3, #0]
		}
 80029ca:	46c0      	nop			; (mov r8, r8)
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	200012fc 	.word	0x200012fc

080029d4 <sound_full_transfer_callback>:
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void sound_full_transfer_callback()
		{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
			curBuf += 1;
 80029d8:	4b0f      	ldr	r3, [pc, #60]	; (8002a18 <sound_full_transfer_callback+0x44>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	1c5a      	adds	r2, r3, #1
 80029de:	4b0e      	ldr	r3, [pc, #56]	; (8002a18 <sound_full_transfer_callback+0x44>)
 80029e0:	601a      	str	r2, [r3, #0]
			if(curBuf <= bufCount)
 80029e2:	4b0d      	ldr	r3, [pc, #52]	; (8002a18 <sound_full_transfer_callback+0x44>)
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	4b0d      	ldr	r3, [pc, #52]	; (8002a1c <sound_full_transfer_callback+0x48>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d80c      	bhi.n	8002a08 <sound_full_transfer_callback+0x34>
			{
				HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*) & soundBuf[0], (bufLen >> 1));
 80029ee:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <sound_full_transfer_callback+0x4c>)
 80029f0:	881b      	ldrh	r3, [r3, #0]
 80029f2:	085b      	lsrs	r3, r3, #1
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	490b      	ldr	r1, [pc, #44]	; (8002a24 <sound_full_transfer_callback+0x50>)
 80029f8:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <sound_full_transfer_callback+0x54>)
 80029fa:	0018      	movs	r0, r3
 80029fc:	f004 ffd8 	bl	80079b0 <HAL_I2S_Transmit_DMA>
				half_of_buf = 0;
 8002a00:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <sound_full_transfer_callback+0x58>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	701a      	strb	r2, [r3, #0]
			else
			{
				isSoundOver = 1;
				speakerMute();
			}
		}
 8002a06:	e004      	b.n	8002a12 <sound_full_transfer_callback+0x3e>
				isSoundOver = 1;
 8002a08:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <sound_full_transfer_callback+0x5c>)
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	701a      	strb	r2, [r3, #0]
				speakerMute();
 8002a0e:	f000 f85a 	bl	8002ac6 <speakerMute>
		}
 8002a12:	46c0      	nop			; (mov r8, r8)
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	200002f4 	.word	0x200002f4
 8002a1c:	200002f8 	.word	0x200002f8
 8002a20:	20000030 	.word	0x20000030
 8002a24:	200002fc 	.word	0x200002fc
 8002a28:	200000e0 	.word	0x200000e0
 8002a2c:	200012fc 	.word	0x200012fc
 8002a30:	200012fd 	.word	0x200012fd

08002a34 <setVolume>:
		//=============================================================================================
			void setVolume(uint8_t AMP, uint8_t DAC_Gain, uint8_t volume)
			{
 8002a34:	b590      	push	{r4, r7, lr}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	0004      	movs	r4, r0
 8002a3c:	0008      	movs	r0, r1
 8002a3e:	0011      	movs	r1, r2
 8002a40:	1dfb      	adds	r3, r7, #7
 8002a42:	1c22      	adds	r2, r4, #0
 8002a44:	701a      	strb	r2, [r3, #0]
 8002a46:	1dbb      	adds	r3, r7, #6
 8002a48:	1c02      	adds	r2, r0, #0
 8002a4a:	701a      	strb	r2, [r3, #0]
 8002a4c:	1d7b      	adds	r3, r7, #5
 8002a4e:	1c0a      	adds	r2, r1, #0
 8002a50:	701a      	strb	r2, [r3, #0]
				uint8_t volumeResult = 0;
 8002a52:	210f      	movs	r1, #15
 8002a54:	187b      	adds	r3, r7, r1
 8002a56:	2200      	movs	r2, #0
 8002a58:	701a      	strb	r2, [r3, #0]
				volumeResult = 116 - (volume * 10);
 8002a5a:	1d7b      	adds	r3, r7, #5
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	1c1a      	adds	r2, r3, #0
 8002a60:	0152      	lsls	r2, r2, #5
 8002a62:	1ad2      	subs	r2, r2, r3
 8002a64:	0092      	lsls	r2, r2, #2
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	18db      	adds	r3, r3, r3
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	000c      	movs	r4, r1
 8002a6e:	187b      	adds	r3, r7, r1
 8002a70:	3274      	adds	r2, #116	; 0x74
 8002a72:	701a      	strb	r2, [r3, #0]
				AMP = 16*5;
 8002a74:	1dfb      	adds	r3, r7, #7
 8002a76:	2250      	movs	r2, #80	; 0x50
 8002a78:	701a      	strb	r2, [r3, #0]
				DAC_Gain = 48;
 8002a7a:	1dbb      	adds	r3, r7, #6
 8002a7c:	2230      	movs	r2, #48	; 0x30
 8002a7e:	701a      	strb	r2, [r3, #0]
				I2C_SOUND_ChangePage(0x00);
 8002a80:	2000      	movs	r0, #0
 8002a82:	f7fe fdcb 	bl	800161c <I2C_SOUND_ChangePage>
				WriteReg_I2C_SOUND(0x41, DAC_Gain);	//DAC digital gain 0dB (P0, R65, D7-D0=00000000) cnDacValueOn by SB
 8002a86:	1dbb      	adds	r3, r7, #6
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	0019      	movs	r1, r3
 8002a8c:	2041      	movs	r0, #65	; 0x41
 8002a8e:	f7fe fde3 	bl	8001658 <WriteReg_I2C_SOUND>
					I2C_SOUND_ChangePage(0x01);
 8002a92:	2001      	movs	r0, #1
 8002a94:	f7fe fdc2 	bl	800161c <I2C_SOUND_ChangePage>
					WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 8002a98:	2100      	movs	r1, #0
 8002a9a:	2010      	movs	r0, #16
 8002a9c:	f7fe fddc 	bl	8001658 <WriteReg_I2C_SOUND>
					WriteReg_I2C_SOUND(0x2E, volumeResult);	//SPK attn. Gain =0dB (P1, R46, 0d - 116 d, 255d)
 8002aa0:	193b      	adds	r3, r7, r4
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	0019      	movs	r1, r3
 8002aa6:	202e      	movs	r0, #46	; 0x2e
 8002aa8:	f7fe fdd6 	bl	8001658 <WriteReg_I2C_SOUND>
					WriteReg_I2C_SOUND(0x30, AMP);	//SPK driver Gain=6.0dB (P1, R48, 16d - 80d)
 8002aac:	1dfb      	adds	r3, r7, #7
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	0019      	movs	r1, r3
 8002ab2:	2030      	movs	r0, #48	; 0x30
 8002ab4:	f7fe fdd0 	bl	8001658 <WriteReg_I2C_SOUND>
//					WriteReg_I2C_SOUND(0x30, volume);	//SPK driver Gain=6.0dB (P1, R48, D6-D4=001
					HAL_Delay(3);
 8002ab8:	2003      	movs	r0, #3
 8002aba:	f002 fcb5 	bl	8005428 <HAL_Delay>
			}
 8002abe:	46c0      	nop			; (mov r8, r8)
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	b005      	add	sp, #20
 8002ac4:	bd90      	pop	{r4, r7, pc}

08002ac6 <speakerMute>:
			//=============================================================================================
			void speakerMute(void)
			{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	af00      	add	r7, sp, #0
				I2C_SOUND_ChangePage(0x01);
 8002aca:	2001      	movs	r0, #1
 8002acc:	f7fe fda6 	bl	800161c <I2C_SOUND_ChangePage>
				WriteReg_I2C_SOUND(0x2D, 0);
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	202d      	movs	r0, #45	; 0x2d
 8002ad4:	f7fe fdc0 	bl	8001658 <WriteReg_I2C_SOUND>
			}
 8002ad8:	46c0      	nop			; (mov r8, r8)
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <speakerPowerUp>:
			//=============================================================================================
			void speakerPowerUp(void)
			{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	af00      	add	r7, sp, #0
				I2C_SOUND_ChangePage(0x01);
 8002ae2:	2001      	movs	r0, #1
 8002ae4:	f7fe fd9a 	bl	800161c <I2C_SOUND_ChangePage>
				WriteReg_I2C_SOUND(0x2D, 2);
 8002ae8:	2102      	movs	r1, #2
 8002aea:	202d      	movs	r0, #45	; 0x2d
 8002aec:	f7fe fdb4 	bl	8001658 <WriteReg_I2C_SOUND>
			}
 8002af0:	46c0      	nop			; (mov r8, r8)
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
	...

08002af8 <MEM_GetID>:
		dat = 0x04;
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 5);//write disable Is it neccessary, if WP pin is used????????????????????????????
		GPIOB->ODR |= 1 << 9;	// set cs
//    GPIOC->ODR &= ~(1 << 14);//Write Disable
	}
	uint32_t MEM_GetID(void) {
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
		uint8_t dat;
		uint8_t tmp[1] = { 0x00 };
 8002afe:	1d3b      	adds	r3, r7, #4
 8002b00:	4a29      	ldr	r2, [pc, #164]	; (8002ba8 <MEM_GetID+0xb0>)
 8002b02:	7812      	ldrb	r2, [r2, #0]
 8002b04:	701a      	strb	r2, [r3, #0]
		dat = 0x9E;
 8002b06:	1dfb      	adds	r3, r7, #7
 8002b08:	229e      	movs	r2, #158	; 0x9e
 8002b0a:	701a      	strb	r2, [r3, #0]
		GPIOB->ODR &= ~(1 <<9);	//reset cs
 8002b0c:	4b27      	ldr	r3, [pc, #156]	; (8002bac <MEM_GetID+0xb4>)
 8002b0e:	695a      	ldr	r2, [r3, #20]
 8002b10:	4b26      	ldr	r3, [pc, #152]	; (8002bac <MEM_GetID+0xb4>)
 8002b12:	4927      	ldr	r1, [pc, #156]	; (8002bb0 <MEM_GetID+0xb8>)
 8002b14:	400a      	ands	r2, r1
 8002b16:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 50);	//read ID command
 8002b18:	1df9      	adds	r1, r7, #7
 8002b1a:	4826      	ldr	r0, [pc, #152]	; (8002bb4 <MEM_GetID+0xbc>)
 8002b1c:	2332      	movs	r3, #50	; 0x32
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f006 fbec 	bl	80092fc <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002b24:	23fa      	movs	r3, #250	; 0xfa
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	1d39      	adds	r1, r7, #4
 8002b2a:	4822      	ldr	r0, [pc, #136]	; (8002bb4 <MEM_GetID+0xbc>)
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f006 fd3d 	bl	80095ac <HAL_SPI_Receive>
		MEM_ID = (uint32_t) tmp[0];
 8002b32:	1d3b      	adds	r3, r7, #4
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	001a      	movs	r2, r3
 8002b38:	4b1f      	ldr	r3, [pc, #124]	; (8002bb8 <MEM_GetID+0xc0>)
 8002b3a:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;                    			//MSB
 8002b3c:	4b1e      	ldr	r3, [pc, #120]	; (8002bb8 <MEM_GetID+0xc0>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	021a      	lsls	r2, r3, #8
 8002b42:	4b1d      	ldr	r3, [pc, #116]	; (8002bb8 <MEM_GetID+0xc0>)
 8002b44:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002b46:	23fa      	movs	r3, #250	; 0xfa
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	1d39      	adds	r1, r7, #4
 8002b4c:	4819      	ldr	r0, [pc, #100]	; (8002bb4 <MEM_GetID+0xbc>)
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f006 fd2c 	bl	80095ac <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8002b54:	1d3b      	adds	r3, r7, #4
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	001a      	movs	r2, r3
 8002b5a:	4b17      	ldr	r3, [pc, #92]	; (8002bb8 <MEM_GetID+0xc0>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	18d2      	adds	r2, r2, r3
 8002b60:	4b15      	ldr	r3, [pc, #84]	; (8002bb8 <MEM_GetID+0xc0>)
 8002b62:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;
 8002b64:	4b14      	ldr	r3, [pc, #80]	; (8002bb8 <MEM_GetID+0xc0>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	021a      	lsls	r2, r3, #8
 8002b6a:	4b13      	ldr	r3, [pc, #76]	; (8002bb8 <MEM_GetID+0xc0>)
 8002b6c:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002b6e:	23fa      	movs	r3, #250	; 0xfa
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	1d39      	adds	r1, r7, #4
 8002b74:	480f      	ldr	r0, [pc, #60]	; (8002bb4 <MEM_GetID+0xbc>)
 8002b76:	2201      	movs	r2, #1
 8002b78:	f006 fd18 	bl	80095ac <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8002b7c:	1d3b      	adds	r3, r7, #4
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	001a      	movs	r2, r3
 8002b82:	4b0d      	ldr	r3, [pc, #52]	; (8002bb8 <MEM_GetID+0xc0>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	18d2      	adds	r2, r2, r3
 8002b88:	4b0b      	ldr	r3, [pc, #44]	; (8002bb8 <MEM_GetID+0xc0>)
 8002b8a:	601a      	str	r2, [r3, #0]
		GPIOB->ODR |= 1 << 9;                    			// set cs
 8002b8c:	4b07      	ldr	r3, [pc, #28]	; (8002bac <MEM_GetID+0xb4>)
 8002b8e:	695a      	ldr	r2, [r3, #20]
 8002b90:	4b06      	ldr	r3, [pc, #24]	; (8002bac <MEM_GetID+0xb4>)
 8002b92:	2180      	movs	r1, #128	; 0x80
 8002b94:	0089      	lsls	r1, r1, #2
 8002b96:	430a      	orrs	r2, r1
 8002b98:	615a      	str	r2, [r3, #20]
		return (MEM_ID);
 8002b9a:	4b07      	ldr	r3, [pc, #28]	; (8002bb8 <MEM_GetID+0xc0>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
	}
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	b002      	add	sp, #8
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	46c0      	nop			; (mov r8, r8)
 8002ba8:	0800c958 	.word	0x0800c958
 8002bac:	50000400 	.word	0x50000400
 8002bb0:	fffffdff 	.word	0xfffffdff
 8002bb4:	20000178 	.word	0x20000178
 8002bb8:	200002b0 	.word	0x200002b0

08002bbc <cmdExecute>:
	uint16_t Scount(void){
		LIS3DHreadData();

	}
//====================================================================================================================
	uint8_t cmdExecute(uint8_t cmd2Execute){
 8002bbc:	b590      	push	{r4, r7, lr}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af02      	add	r7, sp, #8
 8002bc2:	0002      	movs	r2, r0
 8002bc4:	1dfb      	adds	r3, r7, #7
 8002bc6:	701a      	strb	r2, [r3, #0]
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 8002bc8:	4b65      	ldr	r3, [pc, #404]	; (8002d60 <cmdExecute+0x1a4>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	2b10      	cmp	r3, #16
 8002bce:	d100      	bne.n	8002bd2 <cmdExecute+0x16>
 8002bd0:	e0bd      	b.n	8002d4e <cmdExecute+0x192>
		if(soundReady==0){return;}
 8002bd2:	4b64      	ldr	r3, [pc, #400]	; (8002d64 <cmdExecute+0x1a8>)
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d100      	bne.n	8002bdc <cmdExecute+0x20>
 8002bda:	e0ba      	b.n	8002d52 <cmdExecute+0x196>
//		if(cmd[0]==00){return;}
		if (bf4me!=0x00){return;}	// protection against false BF resets
 8002bdc:	4b62      	ldr	r3, [pc, #392]	; (8002d68 <cmdExecute+0x1ac>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d000      	beq.n	8002be6 <cmdExecute+0x2a>
 8002be4:	e0b7      	b.n	8002d56 <cmdExecute+0x19a>
		USART2->ICR|=USART_ICR_ORECF;
 8002be6:	4b61      	ldr	r3, [pc, #388]	; (8002d6c <cmdExecute+0x1b0>)
 8002be8:	6a1a      	ldr	r2, [r3, #32]
 8002bea:	4b60      	ldr	r3, [pc, #384]	; (8002d6c <cmdExecute+0x1b0>)
 8002bec:	2108      	movs	r1, #8
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	621a      	str	r2, [r3, #32]
		if(cmd2Execute==0x02){}
		if(cmd2Execute==0x03){}
		if(cmd2Execute==0x04){}
		if(cmd2Execute==0x10){}

		if(cmd2Execute==0x11)
 8002bf2:	1dfb      	adds	r3, r7, #7
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	2b11      	cmp	r3, #17
 8002bf8:	d113      	bne.n	8002c22 <cmdExecute+0x66>
		{
			GPIOC->ODR &=~ GPIO_ODR_OD6;
 8002bfa:	4b5d      	ldr	r3, [pc, #372]	; (8002d70 <cmdExecute+0x1b4>)
 8002bfc:	695a      	ldr	r2, [r3, #20]
 8002bfe:	4b5c      	ldr	r3, [pc, #368]	; (8002d70 <cmdExecute+0x1b4>)
 8002c00:	2140      	movs	r1, #64	; 0x40
 8002c02:	438a      	bics	r2, r1
 8002c04:	615a      	str	r2, [r3, #20]
			bf4me=0x11;	//set BF flag 4 me
 8002c06:	4b58      	ldr	r3, [pc, #352]	; (8002d68 <cmdExecute+0x1ac>)
 8002c08:	2211      	movs	r2, #17
 8002c0a:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
			weoShowFullScreen(picNum);
 8002c0c:	4b59      	ldr	r3, [pc, #356]	; (8002d74 <cmdExecute+0x1b8>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	0018      	movs	r0, r3
 8002c12:	f7ff fa8d 	bl	8002130 <weoShowFullScreen>
//			weoShowFullScreenDMA(picNum);
			USART2->ICR|=USART_ICR_ORECF;
 8002c16:	4b55      	ldr	r3, [pc, #340]	; (8002d6c <cmdExecute+0x1b0>)
 8002c18:	6a1a      	ldr	r2, [r3, #32]
 8002c1a:	4b54      	ldr	r3, [pc, #336]	; (8002d6c <cmdExecute+0x1b0>)
 8002c1c:	2108      	movs	r1, #8
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	621a      	str	r2, [r3, #32]
		}

		if(cmd2Execute==0x12)
 8002c22:	1dfb      	adds	r3, r7, #7
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	2b12      	cmp	r3, #18
 8002c28:	d10d      	bne.n	8002c46 <cmdExecute+0x8a>
		{
			bf4me=0x12;	//set BF flag 4 me
 8002c2a:	4b4f      	ldr	r3, [pc, #316]	; (8002d68 <cmdExecute+0x1ac>)
 8002c2c:	2212      	movs	r2, #18
 8002c2e:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
//			weoShowSmallImageDMA(picNum,imX,imY);
			weoShowSmallImage(picNum,imX,imY);
 8002c30:	4b50      	ldr	r3, [pc, #320]	; (8002d74 <cmdExecute+0x1b8>)
 8002c32:	7818      	ldrb	r0, [r3, #0]
 8002c34:	4b50      	ldr	r3, [pc, #320]	; (8002d78 <cmdExecute+0x1bc>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	b2d9      	uxtb	r1, r3
 8002c3a:	4b50      	ldr	r3, [pc, #320]	; (8002d7c <cmdExecute+0x1c0>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	001a      	movs	r2, r3
 8002c42:	f7ff fb13 	bl	800226c <weoShowSmallImage>
		}

		if(cmd2Execute==0x13)
 8002c46:	1dfb      	adds	r3, r7, #7
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	2b13      	cmp	r3, #19
 8002c4c:	d111      	bne.n	8002c72 <cmdExecute+0xb6>
		{
			bf4me=0x13;	//set BF flag 4 me
 8002c4e:	4b46      	ldr	r3, [pc, #280]	; (8002d68 <cmdExecute+0x1ac>)
 8002c50:	2213      	movs	r2, #19
 8002c52:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF

//			printASCIIarray_old(imX,imY, strLen,dataASCII);
			printASCIIarray(imX,imY,strLen,fontInfo,dataASCII);
 8002c54:	4b48      	ldr	r3, [pc, #288]	; (8002d78 <cmdExecute+0x1bc>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	b2d8      	uxtb	r0, r3
 8002c5a:	4b48      	ldr	r3, [pc, #288]	; (8002d7c <cmdExecute+0x1c0>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	b2d9      	uxtb	r1, r3
 8002c60:	4b47      	ldr	r3, [pc, #284]	; (8002d80 <cmdExecute+0x1c4>)
 8002c62:	781a      	ldrb	r2, [r3, #0]
 8002c64:	4b47      	ldr	r3, [pc, #284]	; (8002d84 <cmdExecute+0x1c8>)
 8002c66:	781c      	ldrb	r4, [r3, #0]
 8002c68:	4b47      	ldr	r3, [pc, #284]	; (8002d88 <cmdExecute+0x1cc>)
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	0023      	movs	r3, r4
 8002c6e:	f000 f893 	bl	8002d98 <printASCIIarray>
		}

		if(cmd2Execute==0x14)
 8002c72:	1dfb      	adds	r3, r7, #7
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	2b14      	cmp	r3, #20
 8002c78:	d10d      	bne.n	8002c96 <cmdExecute+0xda>
		{
//			if(soundReady!=1){return;}
			bf4me=0x14;	//set BF flag 4 me
 8002c7a:	4b3b      	ldr	r3, [pc, #236]	; (8002d68 <cmdExecute+0x1ac>)
 8002c7c:	2214      	movs	r2, #20
 8002c7e:	701a      	strb	r2, [r3, #0]
			soundPlay(numSound);
 8002c80:	4b42      	ldr	r3, [pc, #264]	; (8002d8c <cmdExecute+0x1d0>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	0018      	movs	r0, r3
 8002c86:	f7ff fc6b 	bl	8002560 <soundPlay>
			GPIOC->ODR |= 1 << 6;	//set BF
 8002c8a:	4b39      	ldr	r3, [pc, #228]	; (8002d70 <cmdExecute+0x1b4>)
 8002c8c:	695a      	ldr	r2, [r3, #20]
 8002c8e:	4b38      	ldr	r3, [pc, #224]	; (8002d70 <cmdExecute+0x1b4>)
 8002c90:	2140      	movs	r1, #64	; 0x40
 8002c92:	430a      	orrs	r2, r1
 8002c94:	615a      	str	r2, [r3, #20]
		}

		if(cmd2Execute==0x15)
 8002c96:	1dfb      	adds	r3, r7, #7
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b15      	cmp	r3, #21
 8002c9c:	d146      	bne.n	8002d2c <cmdExecute+0x170>
		{
			bf4me=0x15;	//set BF flag 4 me
 8002c9e:	4b32      	ldr	r3, [pc, #200]	; (8002d68 <cmdExecute+0x1ac>)
 8002ca0:	2215      	movs	r2, #21
 8002ca2:	701a      	strb	r2, [r3, #0]
			if(volume==0x00)
 8002ca4:	4b3a      	ldr	r3, [pc, #232]	; (8002d90 <cmdExecute+0x1d4>)
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d101      	bne.n	8002cb0 <cmdExecute+0xf4>
			{
				speakerMute();
 8002cac:	f7ff ff0b 	bl	8002ac6 <speakerMute>
			}
			setVolume(0, 0, volume);
 8002cb0:	4b37      	ldr	r3, [pc, #220]	; (8002d90 <cmdExecute+0x1d4>)
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	001a      	movs	r2, r3
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	2000      	movs	r0, #0
 8002cba:	f7ff febb 	bl	8002a34 <setVolume>
			if(contrast==0x00)
 8002cbe:	4b35      	ldr	r3, [pc, #212]	; (8002d94 <cmdExecute+0x1d8>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d102      	bne.n	8002ccc <cmdExecute+0x110>
			{
				weoClear();
 8002cc6:	f7fe fb5f 	bl	8001388 <weoClear>
 8002cca:	e029      	b.n	8002d20 <cmdExecute+0x164>
			}
			else{
				GPIOA->ODR &= ~(1 << 6);	//reset cs
 8002ccc:	23a0      	movs	r3, #160	; 0xa0
 8002cce:	05db      	lsls	r3, r3, #23
 8002cd0:	695a      	ldr	r2, [r3, #20]
 8002cd2:	23a0      	movs	r3, #160	; 0xa0
 8002cd4:	05db      	lsls	r3, r3, #23
 8002cd6:	2140      	movs	r1, #64	; 0x40
 8002cd8:	438a      	bics	r2, r1
 8002cda:	615a      	str	r2, [r3, #20]
				GPIOA->ODR &= ~(1 << 7);	// reset dc
 8002cdc:	23a0      	movs	r3, #160	; 0xa0
 8002cde:	05db      	lsls	r3, r3, #23
 8002ce0:	695a      	ldr	r2, [r3, #20]
 8002ce2:	23a0      	movs	r3, #160	; 0xa0
 8002ce4:	05db      	lsls	r3, r3, #23
 8002ce6:	2180      	movs	r1, #128	; 0x80
 8002ce8:	438a      	bics	r2, r1
 8002cea:	615a      	str	r2, [r3, #20]
				USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 8002cec:	2081      	movs	r0, #129	; 0x81
 8002cee:	f7fe fa9d 	bl	800122c <USART_AS_SPI_sendCMD>
				USART_AS_SPI_sendCMD(contrast*0x10);
 8002cf2:	4b28      	ldr	r3, [pc, #160]	; (8002d94 <cmdExecute+0x1d8>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	011b      	lsls	r3, r3, #4
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	f7fe fa96 	bl	800122c <USART_AS_SPI_sendCMD>
				GPIOA->ODR |= 1 << 7;	//set dc
 8002d00:	23a0      	movs	r3, #160	; 0xa0
 8002d02:	05db      	lsls	r3, r3, #23
 8002d04:	695a      	ldr	r2, [r3, #20]
 8002d06:	23a0      	movs	r3, #160	; 0xa0
 8002d08:	05db      	lsls	r3, r3, #23
 8002d0a:	2180      	movs	r1, #128	; 0x80
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= 1 << 6;	//set cs
 8002d10:	23a0      	movs	r3, #160	; 0xa0
 8002d12:	05db      	lsls	r3, r3, #23
 8002d14:	695a      	ldr	r2, [r3, #20]
 8002d16:	23a0      	movs	r3, #160	; 0xa0
 8002d18:	05db      	lsls	r3, r3, #23
 8002d1a:	2140      	movs	r1, #64	; 0x40
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	615a      	str	r2, [r3, #20]
			}
			GPIOC->ODR |= 1 << 6;	//set BF
 8002d20:	4b13      	ldr	r3, [pc, #76]	; (8002d70 <cmdExecute+0x1b4>)
 8002d22:	695a      	ldr	r2, [r3, #20]
 8002d24:	4b12      	ldr	r3, [pc, #72]	; (8002d70 <cmdExecute+0x1b4>)
 8002d26:	2140      	movs	r1, #64	; 0x40
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	615a      	str	r2, [r3, #20]
		}

		if(cmd2Execute==0x16)
 8002d2c:	1dfb      	adds	r3, r7, #7
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	2b16      	cmp	r3, #22
 8002d32:	d102      	bne.n	8002d3a <cmdExecute+0x17e>
		{
			bf4me=0x16;	//set BF flag 4 me
 8002d34:	4b0c      	ldr	r3, [pc, #48]	; (8002d68 <cmdExecute+0x1ac>)
 8002d36:	2216      	movs	r2, #22
 8002d38:	701a      	strb	r2, [r3, #0]

				}
		if(cmd2Execute==0x00){

				}
		if(cmd2Execute=0x00){
 8002d3a:	1dfb      	adds	r3, r7, #7
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	701a      	strb	r2, [r3, #0]

				}
//			}
//		}
		USART2->ICR|=USART_ICR_ORECF;
 8002d40:	4b0a      	ldr	r3, [pc, #40]	; (8002d6c <cmdExecute+0x1b0>)
 8002d42:	6a1a      	ldr	r2, [r3, #32]
 8002d44:	4b09      	ldr	r3, [pc, #36]	; (8002d6c <cmdExecute+0x1b0>)
 8002d46:	2108      	movs	r1, #8
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	621a      	str	r2, [r3, #32]
 8002d4c:	e004      	b.n	8002d58 <cmdExecute+0x19c>
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 8002d4e:	46c0      	nop			; (mov r8, r8)
 8002d50:	e002      	b.n	8002d58 <cmdExecute+0x19c>
		if(soundReady==0){return;}
 8002d52:	46c0      	nop			; (mov r8, r8)
 8002d54:	e000      	b.n	8002d58 <cmdExecute+0x19c>
		if (bf4me!=0x00){return;}	// protection against false BF resets
 8002d56:	46c0      	nop			; (mov r8, r8)
	}
 8002d58:	0018      	movs	r0, r3
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	b003      	add	sp, #12
 8002d5e:	bd90      	pop	{r4, r7, pc}
 8002d60:	200002b4 	.word	0x200002b4
 8002d64:	20000032 	.word	0x20000032
 8002d68:	200002eb 	.word	0x200002eb
 8002d6c:	40004400 	.word	0x40004400
 8002d70:	50000800 	.word	0x50000800
 8002d74:	20000289 	.word	0x20000289
 8002d78:	20000290 	.word	0x20000290
 8002d7c:	20000294 	.word	0x20000294
 8002d80:	2000028e 	.word	0x2000028e
 8002d84:	200002f1 	.word	0x200002f1
 8002d88:	2000029c 	.word	0x2000029c
 8002d8c:	2000028a 	.word	0x2000028a
 8002d90:	2000028b 	.word	0x2000028b
 8002d94:	2000028c 	.word	0x2000028c

08002d98 <printASCIIarray>:
//========================================================================================================================
	uint8_t printASCIIarray(uint8_t imX,uint8_t imY,uint8_t strLen,uint8_t fontInfo,uint8_t dataASCII[]){
 8002d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d9a:	46ce      	mov	lr, r9
 8002d9c:	4647      	mov	r7, r8
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b0e5      	sub	sp, #404	; 0x194
 8002da2:	af02      	add	r7, sp, #8
 8002da4:	0016      	movs	r6, r2
 8002da6:	469c      	mov	ip, r3
 8002da8:	2320      	movs	r3, #32
 8002daa:	33ff      	adds	r3, #255	; 0xff
 8002dac:	2208      	movs	r2, #8
 8002dae:	189b      	adds	r3, r3, r2
 8002db0:	19da      	adds	r2, r3, r7
 8002db2:	1c03      	adds	r3, r0, #0
 8002db4:	7013      	strb	r3, [r2, #0]
 8002db6:	238f      	movs	r3, #143	; 0x8f
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	2208      	movs	r2, #8
 8002dbc:	189b      	adds	r3, r3, r2
 8002dbe:	19da      	adds	r2, r3, r7
 8002dc0:	1c0b      	adds	r3, r1, #0
 8002dc2:	7013      	strb	r3, [r2, #0]
 8002dc4:	221e      	movs	r2, #30
 8002dc6:	32ff      	adds	r2, #255	; 0xff
 8002dc8:	2308      	movs	r3, #8
 8002dca:	18d3      	adds	r3, r2, r3
 8002dcc:	19da      	adds	r2, r3, r7
 8002dce:	1c33      	adds	r3, r6, #0
 8002dd0:	7013      	strb	r3, [r2, #0]
 8002dd2:	268e      	movs	r6, #142	; 0x8e
 8002dd4:	0076      	lsls	r6, r6, #1
 8002dd6:	2308      	movs	r3, #8
 8002dd8:	18f3      	adds	r3, r6, r3
 8002dda:	19da      	adds	r2, r3, r7
 8002ddc:	4663      	mov	r3, ip
 8002dde:	7013      	strb	r3, [r2, #0]
			uint8_t X_increment,ASCII_height,X_width,ASCII_X,decY,fontCur,contrast,contrastH,contrastL;
//			uint8_t weoBuffer1[49],weoBuffer2[49],weoBuffer[49];
			uint16_t i,j,k, symLen;
			ASCII_X=imX;
 8002de0:	235f      	movs	r3, #95	; 0x5f
 8002de2:	218c      	movs	r1, #140	; 0x8c
 8002de4:	0049      	lsls	r1, r1, #1
 8002de6:	185a      	adds	r2, r3, r1
 8002de8:	2308      	movs	r3, #8
 8002dea:	469c      	mov	ip, r3
 8002dec:	44bc      	add	ip, r7
 8002dee:	4462      	add	r2, ip
 8002df0:	2020      	movs	r0, #32
 8002df2:	30ff      	adds	r0, #255	; 0xff
 8002df4:	2308      	movs	r3, #8
 8002df6:	18c3      	adds	r3, r0, r3
 8002df8:	19db      	adds	r3, r3, r7
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	7013      	strb	r3, [r2, #0]

			contrastL = (fontInfo & 0xF0)>>4;
 8002dfe:	205e      	movs	r0, #94	; 0x5e
 8002e00:	1842      	adds	r2, r0, r1
 8002e02:	2308      	movs	r3, #8
 8002e04:	469c      	mov	ip, r3
 8002e06:	44bc      	add	ip, r7
 8002e08:	4462      	add	r2, ip
 8002e0a:	2308      	movs	r3, #8
 8002e0c:	18f3      	adds	r3, r6, r3
 8002e0e:	19db      	adds	r3, r3, r7
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	091b      	lsrs	r3, r3, #4
 8002e14:	7013      	strb	r3, [r2, #0]
			contrastH = (contrastL)<<4;
 8002e16:	265d      	movs	r6, #93	; 0x5d
 8002e18:	1872      	adds	r2, r6, r1
 8002e1a:	2308      	movs	r3, #8
 8002e1c:	469c      	mov	ip, r3
 8002e1e:	44bc      	add	ip, r7
 8002e20:	4462      	add	r2, ip
 8002e22:	1843      	adds	r3, r0, r1
 8002e24:	603b      	str	r3, [r7, #0]
 8002e26:	2308      	movs	r3, #8
 8002e28:	469c      	mov	ip, r3
 8002e2a:	44bc      	add	ip, r7
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	4463      	add	r3, ip
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	011b      	lsls	r3, r3, #4
 8002e34:	7013      	strb	r3, [r2, #0]
			contrast = contrastH|contrastL;
 8002e36:	235c      	movs	r3, #92	; 0x5c
 8002e38:	000a      	movs	r2, r1
 8002e3a:	1859      	adds	r1, r3, r1
 8002e3c:	2308      	movs	r3, #8
 8002e3e:	469c      	mov	ip, r3
 8002e40:	44bc      	add	ip, r7
 8002e42:	4461      	add	r1, ip
 8002e44:	0013      	movs	r3, r2
 8002e46:	18f2      	adds	r2, r6, r3
 8002e48:	2608      	movs	r6, #8
 8002e4a:	46b4      	mov	ip, r6
 8002e4c:	44bc      	add	ip, r7
 8002e4e:	4462      	add	r2, ip
 8002e50:	001e      	movs	r6, r3
 8002e52:	18c0      	adds	r0, r0, r3
 8002e54:	2308      	movs	r3, #8
 8002e56:	18fb      	adds	r3, r7, r3
 8002e58:	18c3      	adds	r3, r0, r3
 8002e5a:	7812      	ldrb	r2, [r2, #0]
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	700b      	strb	r3, [r1, #0]
//			contrast = (fontInfo & 0xF0)>>4;
//			contrast=0x33;

			decY=0x01;
 8002e62:	2160      	movs	r1, #96	; 0x60
 8002e64:	0030      	movs	r0, r6
 8002e66:	180a      	adds	r2, r1, r0
 8002e68:	2308      	movs	r3, #8
 8002e6a:	469c      	mov	ip, r3
 8002e6c:	44bc      	add	ip, r7
 8002e6e:	4462      	add	r2, ip
 8002e70:	2301      	movs	r3, #1
 8002e72:	7013      	strb	r3, [r2, #0]
			if(imY % 2 !=0){
 8002e74:	238f      	movs	r3, #143	; 0x8f
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	2208      	movs	r2, #8
 8002e7a:	189b      	adds	r3, r3, r2
 8002e7c:	19db      	adds	r3, r3, r7
 8002e7e:	781a      	ldrb	r2, [r3, #0]
 8002e80:	2301      	movs	r3, #1
 8002e82:	4013      	ands	r3, r2
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d005      	beq.n	8002e96 <printASCIIarray+0xfe>
				decY=0x02;
 8002e8a:	180b      	adds	r3, r1, r0
 8002e8c:	2208      	movs	r2, #8
 8002e8e:	18ba      	adds	r2, r7, r2
 8002e90:	189a      	adds	r2, r3, r2
 8002e92:	2302      	movs	r3, #2
 8002e94:	7013      	strb	r3, [r2, #0]
			}
			if((fontInfo & 0x00)==0){
				fontCur=0;
 8002e96:	2161      	movs	r1, #97	; 0x61
 8002e98:	208c      	movs	r0, #140	; 0x8c
 8002e9a:	0040      	lsls	r0, r0, #1
 8002e9c:	180b      	adds	r3, r1, r0
 8002e9e:	2208      	movs	r2, #8
 8002ea0:	18ba      	adds	r2, r7, r2
 8002ea2:	189a      	adds	r2, r3, r2
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	7013      	strb	r3, [r2, #0]
			}
			if((fontInfo & 0x01)==1){
 8002ea8:	238e      	movs	r3, #142	; 0x8e
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	2208      	movs	r2, #8
 8002eae:	189b      	adds	r3, r3, r2
 8002eb0:	19db      	adds	r3, r3, r7
 8002eb2:	781a      	ldrb	r2, [r3, #0]
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	d005      	beq.n	8002ec6 <printASCIIarray+0x12e>
				fontCur=1;
 8002eba:	180b      	adds	r3, r1, r0
 8002ebc:	2208      	movs	r2, #8
 8002ebe:	18ba      	adds	r2, r7, r2
 8002ec0:	189a      	adds	r2, r3, r2
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	7013      	strb	r3, [r2, #0]
			}
			if((fontInfo & 0x02)==2){
 8002ec6:	238e      	movs	r3, #142	; 0x8e
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	2208      	movs	r2, #8
 8002ecc:	189b      	adds	r3, r3, r2
 8002ece:	19db      	adds	r3, r3, r7
 8002ed0:	781a      	ldrb	r2, [r3, #0]
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	d008      	beq.n	8002eea <printASCIIarray+0x152>
				fontCur=2;
 8002ed8:	2361      	movs	r3, #97	; 0x61
 8002eda:	228c      	movs	r2, #140	; 0x8c
 8002edc:	0052      	lsls	r2, r2, #1
 8002ede:	189b      	adds	r3, r3, r2
 8002ee0:	2208      	movs	r2, #8
 8002ee2:	18ba      	adds	r2, r7, r2
 8002ee4:	189a      	adds	r2, r3, r2
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	7013      	strb	r3, [r2, #0]
			}
//			fontCur=2;
			if(fontCur==0){
 8002eea:	2361      	movs	r3, #97	; 0x61
 8002eec:	268c      	movs	r6, #140	; 0x8c
 8002eee:	0076      	lsls	r6, r6, #1
 8002ef0:	199b      	adds	r3, r3, r6
 8002ef2:	2208      	movs	r2, #8
 8002ef4:	4694      	mov	ip, r2
 8002ef6:	44bc      	add	ip, r7
 8002ef8:	4463      	add	r3, ip
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d000      	beq.n	8002f02 <printASCIIarray+0x16a>
 8002f00:	e2a7      	b.n	8003452 <printASCIIarray+0x6ba>
 8002f02:	466b      	mov	r3, sp
 8002f04:	4698      	mov	r8, r3
				symLen=49;
 8002f06:	215a      	movs	r1, #90	; 0x5a
 8002f08:	198b      	adds	r3, r1, r6
 8002f0a:	2208      	movs	r2, #8
 8002f0c:	18ba      	adds	r2, r7, r2
 8002f0e:	189a      	adds	r2, r3, r2
 8002f10:	2331      	movs	r3, #49	; 0x31
 8002f12:	8013      	strh	r3, [r2, #0]
				uint8_t weoBuffer[symLen];
 8002f14:	198b      	adds	r3, r1, r6
 8002f16:	2208      	movs	r2, #8
 8002f18:	4694      	mov	ip, r2
 8002f1a:	44bc      	add	ip, r7
 8002f1c:	4463      	add	r3, ip
 8002f1e:	881a      	ldrh	r2, [r3, #0]
 8002f20:	0013      	movs	r3, r2
 8002f22:	3b01      	subs	r3, #1
 8002f24:	21b6      	movs	r1, #182	; 0xb6
 8002f26:	0049      	lsls	r1, r1, #1
 8002f28:	2008      	movs	r0, #8
 8002f2a:	1809      	adds	r1, r1, r0
 8002f2c:	19c9      	adds	r1, r1, r7
 8002f2e:	600b      	str	r3, [r1, #0]
 8002f30:	2188      	movs	r1, #136	; 0x88
 8002f32:	2308      	movs	r3, #8
 8002f34:	18cb      	adds	r3, r1, r3
 8002f36:	19db      	adds	r3, r3, r7
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	208c      	movs	r0, #140	; 0x8c
 8002f3e:	2608      	movs	r6, #8
 8002f40:	1980      	adds	r0, r0, r6
 8002f42:	19c0      	adds	r0, r0, r7
 8002f44:	6003      	str	r3, [r0, #0]
 8002f46:	2308      	movs	r3, #8
 8002f48:	18cb      	adds	r3, r1, r3
 8002f4a:	19db      	adds	r3, r3, r7
 8002f4c:	6818      	ldr	r0, [r3, #0]
 8002f4e:	6859      	ldr	r1, [r3, #4]
 8002f50:	0003      	movs	r3, r0
 8002f52:	0f5b      	lsrs	r3, r3, #29
 8002f54:	000e      	movs	r6, r1
 8002f56:	00f5      	lsls	r5, r6, #3
 8002f58:	431d      	orrs	r5, r3
 8002f5a:	0003      	movs	r3, r0
 8002f5c:	00dc      	lsls	r4, r3, #3
 8002f5e:	2180      	movs	r1, #128	; 0x80
 8002f60:	2308      	movs	r3, #8
 8002f62:	18cb      	adds	r3, r1, r3
 8002f64:	19db      	adds	r3, r3, r7
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	2300      	movs	r3, #0
 8002f6a:	2084      	movs	r0, #132	; 0x84
 8002f6c:	2408      	movs	r4, #8
 8002f6e:	1900      	adds	r0, r0, r4
 8002f70:	19c0      	adds	r0, r0, r7
 8002f72:	6003      	str	r3, [r0, #0]
 8002f74:	2308      	movs	r3, #8
 8002f76:	18cb      	adds	r3, r1, r3
 8002f78:	19db      	adds	r3, r3, r7
 8002f7a:	6818      	ldr	r0, [r3, #0]
 8002f7c:	6859      	ldr	r1, [r3, #4]
 8002f7e:	0003      	movs	r3, r0
 8002f80:	0f5b      	lsrs	r3, r3, #29
 8002f82:	000d      	movs	r5, r1
 8002f84:	00ed      	lsls	r5, r5, #3
 8002f86:	248a      	movs	r4, #138	; 0x8a
 8002f88:	0064      	lsls	r4, r4, #1
 8002f8a:	2608      	movs	r6, #8
 8002f8c:	19a6      	adds	r6, r4, r6
 8002f8e:	19f6      	adds	r6, r6, r7
 8002f90:	6035      	str	r5, [r6, #0]
 8002f92:	2508      	movs	r5, #8
 8002f94:	1965      	adds	r5, r4, r5
 8002f96:	19ed      	adds	r5, r5, r7
 8002f98:	682d      	ldr	r5, [r5, #0]
 8002f9a:	431d      	orrs	r5, r3
 8002f9c:	2308      	movs	r3, #8
 8002f9e:	18e3      	adds	r3, r4, r3
 8002fa0:	19db      	adds	r3, r3, r7
 8002fa2:	601d      	str	r5, [r3, #0]
 8002fa4:	0003      	movs	r3, r0
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	2188      	movs	r1, #136	; 0x88
 8002faa:	0049      	lsls	r1, r1, #1
 8002fac:	2008      	movs	r0, #8
 8002fae:	1809      	adds	r1, r1, r0
 8002fb0:	19c9      	adds	r1, r1, r7
 8002fb2:	600b      	str	r3, [r1, #0]
 8002fb4:	0013      	movs	r3, r2
 8002fb6:	3307      	adds	r3, #7
 8002fb8:	08db      	lsrs	r3, r3, #3
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	466a      	mov	r2, sp
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	469d      	mov	sp, r3
 8002fc2:	ab02      	add	r3, sp, #8
 8002fc4:	3300      	adds	r3, #0
 8002fc6:	22b4      	movs	r2, #180	; 0xb4
 8002fc8:	0052      	lsls	r2, r2, #1
 8002fca:	2108      	movs	r1, #8
 8002fcc:	1852      	adds	r2, r2, r1
 8002fce:	19d2      	adds	r2, r2, r7
 8002fd0:	6013      	str	r3, [r2, #0]
				uint8_t weoBuffer1[symLen];
 8002fd2:	245a      	movs	r4, #90	; 0x5a
 8002fd4:	2390      	movs	r3, #144	; 0x90
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	18fb      	adds	r3, r7, r3
 8002fda:	601c      	str	r4, [r3, #0]
 8002fdc:	268c      	movs	r6, #140	; 0x8c
 8002fde:	0076      	lsls	r6, r6, #1
 8002fe0:	19a3      	adds	r3, r4, r6
 8002fe2:	2208      	movs	r2, #8
 8002fe4:	4694      	mov	ip, r2
 8002fe6:	44bc      	add	ip, r7
 8002fe8:	4463      	add	r3, ip
 8002fea:	881a      	ldrh	r2, [r3, #0]
 8002fec:	0013      	movs	r3, r2
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	21b2      	movs	r1, #178	; 0xb2
 8002ff2:	0049      	lsls	r1, r1, #1
 8002ff4:	2008      	movs	r0, #8
 8002ff6:	1809      	adds	r1, r1, r0
 8002ff8:	19c9      	adds	r1, r1, r7
 8002ffa:	600b      	str	r3, [r1, #0]
 8002ffc:	2380      	movs	r3, #128	; 0x80
 8002ffe:	18fb      	adds	r3, r7, r3
 8003000:	601a      	str	r2, [r3, #0]
 8003002:	2300      	movs	r3, #0
 8003004:	2184      	movs	r1, #132	; 0x84
 8003006:	1879      	adds	r1, r7, r1
 8003008:	600b      	str	r3, [r1, #0]
 800300a:	2380      	movs	r3, #128	; 0x80
 800300c:	18fb      	adds	r3, r7, r3
 800300e:	6818      	ldr	r0, [r3, #0]
 8003010:	6859      	ldr	r1, [r3, #4]
 8003012:	0003      	movs	r3, r0
 8003014:	0f5b      	lsrs	r3, r3, #29
 8003016:	469c      	mov	ip, r3
 8003018:	000d      	movs	r5, r1
 800301a:	00ed      	lsls	r5, r5, #3
 800301c:	2486      	movs	r4, #134	; 0x86
 800301e:	0064      	lsls	r4, r4, #1
 8003020:	2308      	movs	r3, #8
 8003022:	18e4      	adds	r4, r4, r3
 8003024:	19e4      	adds	r4, r4, r7
 8003026:	6025      	str	r5, [r4, #0]
 8003028:	2586      	movs	r5, #134	; 0x86
 800302a:	006d      	lsls	r5, r5, #1
 800302c:	2308      	movs	r3, #8
 800302e:	18eb      	adds	r3, r5, r3
 8003030:	19dc      	adds	r4, r3, r7
 8003032:	6825      	ldr	r5, [r4, #0]
 8003034:	4663      	mov	r3, ip
 8003036:	431d      	orrs	r5, r3
 8003038:	2386      	movs	r3, #134	; 0x86
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	2408      	movs	r4, #8
 800303e:	191b      	adds	r3, r3, r4
 8003040:	19db      	adds	r3, r3, r7
 8003042:	601d      	str	r5, [r3, #0]
 8003044:	0003      	movs	r3, r0
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	2184      	movs	r1, #132	; 0x84
 800304a:	0049      	lsls	r1, r1, #1
 800304c:	2008      	movs	r0, #8
 800304e:	1809      	adds	r1, r1, r0
 8003050:	19c9      	adds	r1, r1, r7
 8003052:	600b      	str	r3, [r1, #0]
 8003054:	67ba      	str	r2, [r7, #120]	; 0x78
 8003056:	2300      	movs	r3, #0
 8003058:	67fb      	str	r3, [r7, #124]	; 0x7c
 800305a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800305c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800305e:	0003      	movs	r3, r0
 8003060:	0f5b      	lsrs	r3, r3, #29
 8003062:	000d      	movs	r5, r1
 8003064:	00ed      	lsls	r5, r5, #3
 8003066:	2486      	movs	r4, #134	; 0x86
 8003068:	0064      	lsls	r4, r4, #1
 800306a:	193c      	adds	r4, r7, r4
 800306c:	6025      	str	r5, [r4, #0]
 800306e:	2486      	movs	r4, #134	; 0x86
 8003070:	0064      	lsls	r4, r4, #1
 8003072:	193c      	adds	r4, r7, r4
 8003074:	6825      	ldr	r5, [r4, #0]
 8003076:	431d      	orrs	r5, r3
 8003078:	2386      	movs	r3, #134	; 0x86
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	18fb      	adds	r3, r7, r3
 800307e:	601d      	str	r5, [r3, #0]
 8003080:	0003      	movs	r3, r0
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	2184      	movs	r1, #132	; 0x84
 8003086:	0049      	lsls	r1, r1, #1
 8003088:	1879      	adds	r1, r7, r1
 800308a:	600b      	str	r3, [r1, #0]
 800308c:	0013      	movs	r3, r2
 800308e:	3307      	adds	r3, #7
 8003090:	08db      	lsrs	r3, r3, #3
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	466a      	mov	r2, sp
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	469d      	mov	sp, r3
 800309a:	ab02      	add	r3, sp, #8
 800309c:	3300      	adds	r3, #0
 800309e:	22b0      	movs	r2, #176	; 0xb0
 80030a0:	0052      	lsls	r2, r2, #1
 80030a2:	2108      	movs	r1, #8
 80030a4:	1852      	adds	r2, r2, r1
 80030a6:	19d2      	adds	r2, r2, r7
 80030a8:	6013      	str	r3, [r2, #0]
				uint8_t weoBuffer2[symLen];
 80030aa:	2390      	movs	r3, #144	; 0x90
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	18fb      	adds	r3, r7, r3
 80030b0:	681c      	ldr	r4, [r3, #0]
 80030b2:	0035      	movs	r5, r6
 80030b4:	1963      	adds	r3, r4, r5
 80030b6:	2208      	movs	r2, #8
 80030b8:	4694      	mov	ip, r2
 80030ba:	44bc      	add	ip, r7
 80030bc:	4463      	add	r3, ip
 80030be:	881a      	ldrh	r2, [r3, #0]
 80030c0:	0013      	movs	r3, r2
 80030c2:	3b01      	subs	r3, #1
 80030c4:	21ae      	movs	r1, #174	; 0xae
 80030c6:	0049      	lsls	r1, r1, #1
 80030c8:	2008      	movs	r0, #8
 80030ca:	1809      	adds	r1, r1, r0
 80030cc:	19c9      	adds	r1, r1, r7
 80030ce:	600b      	str	r3, [r1, #0]
 80030d0:	673a      	str	r2, [r7, #112]	; 0x70
 80030d2:	2300      	movs	r3, #0
 80030d4:	677b      	str	r3, [r7, #116]	; 0x74
 80030d6:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80030d8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80030da:	0003      	movs	r3, r0
 80030dc:	0f5b      	lsrs	r3, r3, #29
 80030de:	000c      	movs	r4, r1
 80030e0:	00e4      	lsls	r4, r4, #3
 80030e2:	26fc      	movs	r6, #252	; 0xfc
 80030e4:	2508      	movs	r5, #8
 80030e6:	1975      	adds	r5, r6, r5
 80030e8:	19ed      	adds	r5, r5, r7
 80030ea:	602c      	str	r4, [r5, #0]
 80030ec:	2408      	movs	r4, #8
 80030ee:	1934      	adds	r4, r6, r4
 80030f0:	19e4      	adds	r4, r4, r7
 80030f2:	6824      	ldr	r4, [r4, #0]
 80030f4:	431c      	orrs	r4, r3
 80030f6:	2308      	movs	r3, #8
 80030f8:	18f3      	adds	r3, r6, r3
 80030fa:	19db      	adds	r3, r3, r7
 80030fc:	601c      	str	r4, [r3, #0]
 80030fe:	0003      	movs	r3, r0
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	21f8      	movs	r1, #248	; 0xf8
 8003104:	2008      	movs	r0, #8
 8003106:	1809      	adds	r1, r1, r0
 8003108:	19c9      	adds	r1, r1, r7
 800310a:	600b      	str	r3, [r1, #0]
 800310c:	66ba      	str	r2, [r7, #104]	; 0x68
 800310e:	2300      	movs	r3, #0
 8003110:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003112:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003114:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8003116:	0003      	movs	r3, r0
 8003118:	0f5b      	lsrs	r3, r3, #29
 800311a:	000c      	movs	r4, r1
 800311c:	00e4      	lsls	r4, r4, #3
 800311e:	26f4      	movs	r6, #244	; 0xf4
 8003120:	2508      	movs	r5, #8
 8003122:	1975      	adds	r5, r6, r5
 8003124:	19ed      	adds	r5, r5, r7
 8003126:	602c      	str	r4, [r5, #0]
 8003128:	2408      	movs	r4, #8
 800312a:	1934      	adds	r4, r6, r4
 800312c:	19e4      	adds	r4, r4, r7
 800312e:	6824      	ldr	r4, [r4, #0]
 8003130:	431c      	orrs	r4, r3
 8003132:	2308      	movs	r3, #8
 8003134:	18f3      	adds	r3, r6, r3
 8003136:	19db      	adds	r3, r3, r7
 8003138:	601c      	str	r4, [r3, #0]
 800313a:	0003      	movs	r3, r0
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	21f0      	movs	r1, #240	; 0xf0
 8003140:	2008      	movs	r0, #8
 8003142:	1809      	adds	r1, r1, r0
 8003144:	19c9      	adds	r1, r1, r7
 8003146:	600b      	str	r3, [r1, #0]
 8003148:	0013      	movs	r3, r2
 800314a:	3307      	adds	r3, #7
 800314c:	08db      	lsrs	r3, r3, #3
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	466a      	mov	r2, sp
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	469d      	mov	sp, r3
 8003156:	ab02      	add	r3, sp, #8
 8003158:	3300      	adds	r3, #0
 800315a:	22ac      	movs	r2, #172	; 0xac
 800315c:	0052      	lsls	r2, r2, #1
 800315e:	2108      	movs	r1, #8
 8003160:	1852      	adds	r2, r2, r1
 8003162:	19d2      	adds	r2, r2, r7
 8003164:	6013      	str	r3, [r2, #0]
				X_increment=0x07;
 8003166:	233f      	movs	r3, #63	; 0x3f
 8003168:	258c      	movs	r5, #140	; 0x8c
 800316a:	006d      	lsls	r5, r5, #1
 800316c:	195b      	adds	r3, r3, r5
 800316e:	2208      	movs	r2, #8
 8003170:	18ba      	adds	r2, r7, r2
 8003172:	189a      	adds	r2, r3, r2
 8003174:	2307      	movs	r3, #7
 8003176:	7013      	strb	r3, [r2, #0]
				ASCII_height=0x0E;
 8003178:	233e      	movs	r3, #62	; 0x3e
 800317a:	195b      	adds	r3, r3, r5
 800317c:	2208      	movs	r2, #8
 800317e:	18ba      	adds	r2, r7, r2
 8003180:	189a      	adds	r2, r3, r2
 8003182:	230e      	movs	r3, #14
 8003184:	7013      	strb	r3, [r2, #0]
				for(i=0;i<strLen;i++){
 8003186:	2362      	movs	r3, #98	; 0x62
 8003188:	195b      	adds	r3, r3, r5
 800318a:	2208      	movs	r2, #8
 800318c:	18ba      	adds	r2, r7, r2
 800318e:	189a      	adds	r2, r3, r2
 8003190:	2300      	movs	r3, #0
 8003192:	8013      	strh	r3, [r2, #0]
 8003194:	e110      	b.n	80033b8 <printASCIIarray+0x620>
					for(j=0;j<symLen;j++){
 8003196:	2364      	movs	r3, #100	; 0x64
 8003198:	228c      	movs	r2, #140	; 0x8c
 800319a:	0052      	lsls	r2, r2, #1
 800319c:	189b      	adds	r3, r3, r2
 800319e:	2208      	movs	r2, #8
 80031a0:	18ba      	adds	r2, r7, r2
 80031a2:	189a      	adds	r2, r3, r2
 80031a4:	2300      	movs	r3, #0
 80031a6:	8013      	strh	r3, [r2, #0]
 80031a8:	e042      	b.n	8003230 <printASCIIarray+0x498>
						weoBuffer[j]=F1[dataASCII[i]][j];
 80031aa:	2362      	movs	r3, #98	; 0x62
 80031ac:	218c      	movs	r1, #140	; 0x8c
 80031ae:	0049      	lsls	r1, r1, #1
 80031b0:	185b      	adds	r3, r3, r1
 80031b2:	2208      	movs	r2, #8
 80031b4:	4694      	mov	ip, r2
 80031b6:	44bc      	add	ip, r7
 80031b8:	4463      	add	r3, ip
 80031ba:	881a      	ldrh	r2, [r3, #0]
 80031bc:	2380      	movs	r3, #128	; 0x80
 80031be:	185b      	adds	r3, r3, r1
 80031c0:	2008      	movs	r0, #8
 80031c2:	4684      	mov	ip, r0
 80031c4:	2008      	movs	r0, #8
 80031c6:	4681      	mov	r9, r0
 80031c8:	44b9      	add	r9, r7
 80031ca:	44cc      	add	ip, r9
 80031cc:	4463      	add	r3, ip
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	189b      	adds	r3, r3, r2
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	001d      	movs	r5, r3
 80031d6:	2264      	movs	r2, #100	; 0x64
 80031d8:	1853      	adds	r3, r2, r1
 80031da:	2008      	movs	r0, #8
 80031dc:	4684      	mov	ip, r0
 80031de:	44bc      	add	ip, r7
 80031e0:	4463      	add	r3, ip
 80031e2:	8818      	ldrh	r0, [r3, #0]
 80031e4:	0016      	movs	r6, r2
 80031e6:	1853      	adds	r3, r2, r1
 80031e8:	2208      	movs	r2, #8
 80031ea:	4694      	mov	ip, r2
 80031ec:	44bc      	add	ip, r7
 80031ee:	4463      	add	r3, ip
 80031f0:	881c      	ldrh	r4, [r3, #0]
 80031f2:	497e      	ldr	r1, [pc, #504]	; (80033ec <printASCIIarray+0x654>)
 80031f4:	002a      	movs	r2, r5
 80031f6:	00d2      	lsls	r2, r2, #3
 80031f8:	1b52      	subs	r2, r2, r5
 80031fa:	00d3      	lsls	r3, r2, #3
 80031fc:	1a9b      	subs	r3, r3, r2
 80031fe:	18cb      	adds	r3, r1, r3
 8003200:	5c1b      	ldrb	r3, [r3, r0]
 8003202:	22b4      	movs	r2, #180	; 0xb4
 8003204:	0052      	lsls	r2, r2, #1
 8003206:	2108      	movs	r1, #8
 8003208:	1852      	adds	r2, r2, r1
 800320a:	19d2      	adds	r2, r2, r7
 800320c:	6812      	ldr	r2, [r2, #0]
 800320e:	5513      	strb	r3, [r2, r4]
					for(j=0;j<symLen;j++){
 8003210:	0032      	movs	r2, r6
 8003212:	218c      	movs	r1, #140	; 0x8c
 8003214:	0049      	lsls	r1, r1, #1
 8003216:	1853      	adds	r3, r2, r1
 8003218:	2008      	movs	r0, #8
 800321a:	4684      	mov	ip, r0
 800321c:	44bc      	add	ip, r7
 800321e:	4463      	add	r3, ip
 8003220:	881b      	ldrh	r3, [r3, #0]
 8003222:	1852      	adds	r2, r2, r1
 8003224:	2108      	movs	r1, #8
 8003226:	468c      	mov	ip, r1
 8003228:	44bc      	add	ip, r7
 800322a:	4462      	add	r2, ip
 800322c:	3301      	adds	r3, #1
 800322e:	8013      	strh	r3, [r2, #0]
 8003230:	2364      	movs	r3, #100	; 0x64
 8003232:	218c      	movs	r1, #140	; 0x8c
 8003234:	0049      	lsls	r1, r1, #1
 8003236:	185b      	adds	r3, r3, r1
 8003238:	2208      	movs	r2, #8
 800323a:	18ba      	adds	r2, r7, r2
 800323c:	189a      	adds	r2, r3, r2
 800323e:	235a      	movs	r3, #90	; 0x5a
 8003240:	185b      	adds	r3, r3, r1
 8003242:	2008      	movs	r0, #8
 8003244:	4684      	mov	ip, r0
 8003246:	44bc      	add	ip, r7
 8003248:	4463      	add	r3, ip
 800324a:	8812      	ldrh	r2, [r2, #0]
 800324c:	881b      	ldrh	r3, [r3, #0]
 800324e:	429a      	cmp	r2, r3
 8003250:	d3ab      	bcc.n	80031aa <printASCIIarray+0x412>
//							weoBuffer2[k]=((weoBuffer[k]&0xF0)>>4)&contrast;
//						}
//					for (k=0;k<symLen;k++){
//							weoBuffer[k]=(weoBuffer2[k]<<4)|weoBuffer1[k];
//						}
					for (k=0;k<symLen;k++){
 8003252:	2366      	movs	r3, #102	; 0x66
 8003254:	185b      	adds	r3, r3, r1
 8003256:	2208      	movs	r2, #8
 8003258:	18ba      	adds	r2, r7, r2
 800325a:	189a      	adds	r2, r3, r2
 800325c:	2300      	movs	r3, #0
 800325e:	8013      	strh	r3, [r2, #0]
 8003260:	e030      	b.n	80032c4 <printASCIIarray+0x52c>
						weoBuffer[k]=weoBuffer[k] & contrast;
 8003262:	2066      	movs	r0, #102	; 0x66
 8003264:	248c      	movs	r4, #140	; 0x8c
 8003266:	0064      	lsls	r4, r4, #1
 8003268:	1903      	adds	r3, r0, r4
 800326a:	2208      	movs	r2, #8
 800326c:	4694      	mov	ip, r2
 800326e:	44bc      	add	ip, r7
 8003270:	4463      	add	r3, ip
 8003272:	881a      	ldrh	r2, [r3, #0]
 8003274:	25b4      	movs	r5, #180	; 0xb4
 8003276:	006d      	lsls	r5, r5, #1
 8003278:	2308      	movs	r3, #8
 800327a:	18eb      	adds	r3, r5, r3
 800327c:	19db      	adds	r3, r3, r7
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	5c9a      	ldrb	r2, [r3, r2]
 8003282:	1903      	adds	r3, r0, r4
 8003284:	2108      	movs	r1, #8
 8003286:	468c      	mov	ip, r1
 8003288:	44bc      	add	ip, r7
 800328a:	4463      	add	r3, ip
 800328c:	8819      	ldrh	r1, [r3, #0]
 800328e:	235c      	movs	r3, #92	; 0x5c
 8003290:	191b      	adds	r3, r3, r4
 8003292:	2608      	movs	r6, #8
 8003294:	46b4      	mov	ip, r6
 8003296:	44bc      	add	ip, r7
 8003298:	4463      	add	r3, ip
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	4013      	ands	r3, r2
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2208      	movs	r2, #8
 80032a2:	18aa      	adds	r2, r5, r2
 80032a4:	19d2      	adds	r2, r2, r7
 80032a6:	6812      	ldr	r2, [r2, #0]
 80032a8:	5453      	strb	r3, [r2, r1]
					for (k=0;k<symLen;k++){
 80032aa:	1903      	adds	r3, r0, r4
 80032ac:	2208      	movs	r2, #8
 80032ae:	4694      	mov	ip, r2
 80032b0:	44bc      	add	ip, r7
 80032b2:	4463      	add	r3, ip
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	1902      	adds	r2, r0, r4
 80032b8:	2108      	movs	r1, #8
 80032ba:	468c      	mov	ip, r1
 80032bc:	44bc      	add	ip, r7
 80032be:	4462      	add	r2, ip
 80032c0:	3301      	adds	r3, #1
 80032c2:	8013      	strh	r3, [r2, #0]
 80032c4:	2366      	movs	r3, #102	; 0x66
 80032c6:	258c      	movs	r5, #140	; 0x8c
 80032c8:	006d      	lsls	r5, r5, #1
 80032ca:	195b      	adds	r3, r3, r5
 80032cc:	2208      	movs	r2, #8
 80032ce:	18ba      	adds	r2, r7, r2
 80032d0:	189a      	adds	r2, r3, r2
 80032d2:	235a      	movs	r3, #90	; 0x5a
 80032d4:	195b      	adds	r3, r3, r5
 80032d6:	2108      	movs	r1, #8
 80032d8:	468c      	mov	ip, r1
 80032da:	44bc      	add	ip, r7
 80032dc:	4463      	add	r3, ip
 80032de:	8812      	ldrh	r2, [r2, #0]
 80032e0:	881b      	ldrh	r3, [r3, #0]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d3bd      	bcc.n	8003262 <printASCIIarray+0x4ca>
					}
				weoDrawRectangleFilled(ASCII_X, imY, ASCII_X+X_increment-1, imY + ASCII_height - decY, 0xFF, weoBuffer);
 80032e6:	205f      	movs	r0, #95	; 0x5f
 80032e8:	1943      	adds	r3, r0, r5
 80032ea:	2208      	movs	r2, #8
 80032ec:	18ba      	adds	r2, r7, r2
 80032ee:	189a      	adds	r2, r3, r2
 80032f0:	233f      	movs	r3, #63	; 0x3f
 80032f2:	001e      	movs	r6, r3
 80032f4:	195b      	adds	r3, r3, r5
 80032f6:	2108      	movs	r1, #8
 80032f8:	468c      	mov	ip, r1
 80032fa:	44bc      	add	ip, r7
 80032fc:	4463      	add	r3, ip
 80032fe:	7812      	ldrb	r2, [r2, #0]
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	18d3      	adds	r3, r2, r3
 8003304:	b2db      	uxtb	r3, r3
 8003306:	3b01      	subs	r3, #1
 8003308:	b2dc      	uxtb	r4, r3
 800330a:	218f      	movs	r1, #143	; 0x8f
 800330c:	0049      	lsls	r1, r1, #1
 800330e:	2308      	movs	r3, #8
 8003310:	18cb      	adds	r3, r1, r3
 8003312:	19da      	adds	r2, r3, r7
 8003314:	213e      	movs	r1, #62	; 0x3e
 8003316:	194b      	adds	r3, r1, r5
 8003318:	2108      	movs	r1, #8
 800331a:	468c      	mov	ip, r1
 800331c:	44bc      	add	ip, r7
 800331e:	4463      	add	r3, ip
 8003320:	7812      	ldrb	r2, [r2, #0]
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	18d3      	adds	r3, r2, r3
 8003326:	b2da      	uxtb	r2, r3
 8003328:	2160      	movs	r1, #96	; 0x60
 800332a:	194b      	adds	r3, r1, r5
 800332c:	2108      	movs	r1, #8
 800332e:	468c      	mov	ip, r1
 8003330:	44bc      	add	ip, r7
 8003332:	4463      	add	r3, ip
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	b2db      	uxtb	r3, r3
 800333a:	4699      	mov	r9, r3
 800333c:	218f      	movs	r1, #143	; 0x8f
 800333e:	0049      	lsls	r1, r1, #1
 8003340:	2308      	movs	r3, #8
 8003342:	18cb      	adds	r3, r1, r3
 8003344:	19db      	adds	r3, r3, r7
 8003346:	7819      	ldrb	r1, [r3, #0]
 8003348:	0005      	movs	r5, r0
 800334a:	238c      	movs	r3, #140	; 0x8c
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	18c3      	adds	r3, r0, r3
 8003350:	2208      	movs	r2, #8
 8003352:	4694      	mov	ip, r2
 8003354:	44bc      	add	ip, r7
 8003356:	4463      	add	r3, ip
 8003358:	7818      	ldrb	r0, [r3, #0]
 800335a:	23b4      	movs	r3, #180	; 0xb4
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	2208      	movs	r2, #8
 8003360:	189b      	adds	r3, r3, r2
 8003362:	19db      	adds	r3, r3, r7
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	9301      	str	r3, [sp, #4]
 8003368:	23ff      	movs	r3, #255	; 0xff
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	464b      	mov	r3, r9
 800336e:	0022      	movs	r2, r4
 8003370:	f7fe f86e 	bl	8001450 <weoDrawRectangleFilled>
				ASCII_X += X_increment;
 8003374:	208c      	movs	r0, #140	; 0x8c
 8003376:	0040      	lsls	r0, r0, #1
 8003378:	182b      	adds	r3, r5, r0
 800337a:	2208      	movs	r2, #8
 800337c:	18ba      	adds	r2, r7, r2
 800337e:	1899      	adds	r1, r3, r2
 8003380:	182b      	adds	r3, r5, r0
 8003382:	2208      	movs	r2, #8
 8003384:	18ba      	adds	r2, r7, r2
 8003386:	189a      	adds	r2, r3, r2
 8003388:	0033      	movs	r3, r6
 800338a:	181b      	adds	r3, r3, r0
 800338c:	2408      	movs	r4, #8
 800338e:	46a4      	mov	ip, r4
 8003390:	44bc      	add	ip, r7
 8003392:	4463      	add	r3, ip
 8003394:	7812      	ldrb	r2, [r2, #0]
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	18d3      	adds	r3, r2, r3
 800339a:	700b      	strb	r3, [r1, #0]
				for(i=0;i<strLen;i++){
 800339c:	2262      	movs	r2, #98	; 0x62
 800339e:	1813      	adds	r3, r2, r0
 80033a0:	2108      	movs	r1, #8
 80033a2:	468c      	mov	ip, r1
 80033a4:	44bc      	add	ip, r7
 80033a6:	4463      	add	r3, ip
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	1812      	adds	r2, r2, r0
 80033ac:	2108      	movs	r1, #8
 80033ae:	468c      	mov	ip, r1
 80033b0:	44bc      	add	ip, r7
 80033b2:	4462      	add	r2, ip
 80033b4:	3301      	adds	r3, #1
 80033b6:	8013      	strh	r3, [r2, #0]
 80033b8:	231e      	movs	r3, #30
 80033ba:	33ff      	adds	r3, #255	; 0xff
 80033bc:	2208      	movs	r2, #8
 80033be:	189b      	adds	r3, r3, r2
 80033c0:	19db      	adds	r3, r3, r7
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	2162      	movs	r1, #98	; 0x62
 80033c8:	208c      	movs	r0, #140	; 0x8c
 80033ca:	0040      	lsls	r0, r0, #1
 80033cc:	180b      	adds	r3, r1, r0
 80033ce:	2408      	movs	r4, #8
 80033d0:	46a4      	mov	ip, r4
 80033d2:	44bc      	add	ip, r7
 80033d4:	4463      	add	r3, ip
 80033d6:	881b      	ldrh	r3, [r3, #0]
 80033d8:	4293      	cmp	r3, r2
 80033da:	d200      	bcs.n	80033de <printASCIIarray+0x646>
 80033dc:	e6db      	b.n	8003196 <printASCIIarray+0x3fe>
				}
				for(i=0;i<symLen;i++){
 80033de:	180b      	adds	r3, r1, r0
 80033e0:	2208      	movs	r2, #8
 80033e2:	18ba      	adds	r2, r7, r2
 80033e4:	189a      	adds	r2, r3, r2
 80033e6:	2300      	movs	r3, #0
 80033e8:	8013      	strh	r3, [r2, #0]
 80033ea:	e020      	b.n	800342e <printASCIIarray+0x696>
 80033ec:	0800c95c 	.word	0x0800c95c
									weoBuffer[j]=0x00;
 80033f0:	2364      	movs	r3, #100	; 0x64
 80033f2:	208c      	movs	r0, #140	; 0x8c
 80033f4:	0040      	lsls	r0, r0, #1
 80033f6:	181b      	adds	r3, r3, r0
 80033f8:	2208      	movs	r2, #8
 80033fa:	4694      	mov	ip, r2
 80033fc:	44bc      	add	ip, r7
 80033fe:	4463      	add	r3, ip
 8003400:	8819      	ldrh	r1, [r3, #0]
 8003402:	23b4      	movs	r3, #180	; 0xb4
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	2208      	movs	r2, #8
 8003408:	189b      	adds	r3, r3, r2
 800340a:	19db      	adds	r3, r3, r7
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	2300      	movs	r3, #0
 8003410:	5453      	strb	r3, [r2, r1]
				for(i=0;i<symLen;i++){
 8003412:	2262      	movs	r2, #98	; 0x62
 8003414:	1813      	adds	r3, r2, r0
 8003416:	2108      	movs	r1, #8
 8003418:	468c      	mov	ip, r1
 800341a:	44bc      	add	ip, r7
 800341c:	4463      	add	r3, ip
 800341e:	881b      	ldrh	r3, [r3, #0]
 8003420:	1812      	adds	r2, r2, r0
 8003422:	2108      	movs	r1, #8
 8003424:	468c      	mov	ip, r1
 8003426:	44bc      	add	ip, r7
 8003428:	4462      	add	r2, ip
 800342a:	3301      	adds	r3, #1
 800342c:	8013      	strh	r3, [r2, #0]
 800342e:	2362      	movs	r3, #98	; 0x62
 8003430:	218c      	movs	r1, #140	; 0x8c
 8003432:	0049      	lsls	r1, r1, #1
 8003434:	185b      	adds	r3, r3, r1
 8003436:	2208      	movs	r2, #8
 8003438:	18ba      	adds	r2, r7, r2
 800343a:	189a      	adds	r2, r3, r2
 800343c:	235a      	movs	r3, #90	; 0x5a
 800343e:	185b      	adds	r3, r3, r1
 8003440:	2108      	movs	r1, #8
 8003442:	468c      	mov	ip, r1
 8003444:	44bc      	add	ip, r7
 8003446:	4463      	add	r3, ip
 8003448:	8812      	ldrh	r2, [r2, #0]
 800344a:	881b      	ldrh	r3, [r3, #0]
 800344c:	429a      	cmp	r2, r3
 800344e:	d3cf      	bcc.n	80033f0 <printASCIIarray+0x658>
 8003450:	46c5      	mov	sp, r8
							}
			}
			if(fontCur==1){
 8003452:	2361      	movs	r3, #97	; 0x61
 8003454:	228c      	movs	r2, #140	; 0x8c
 8003456:	0052      	lsls	r2, r2, #1
 8003458:	189b      	adds	r3, r3, r2
 800345a:	2108      	movs	r1, #8
 800345c:	468c      	mov	ip, r1
 800345e:	44bc      	add	ip, r7
 8003460:	4463      	add	r3, ip
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d000      	beq.n	800346a <printASCIIarray+0x6d2>
 8003468:	e29d      	b.n	80039a6 <printASCIIarray+0xc0e>
 800346a:	466b      	mov	r3, sp
 800346c:	4698      	mov	r8, r3
				symLen=99;
 800346e:	245a      	movs	r4, #90	; 0x5a
 8003470:	0015      	movs	r5, r2
 8003472:	18a3      	adds	r3, r4, r2
 8003474:	2208      	movs	r2, #8
 8003476:	18ba      	adds	r2, r7, r2
 8003478:	189a      	adds	r2, r3, r2
 800347a:	2363      	movs	r3, #99	; 0x63
 800347c:	8013      	strh	r3, [r2, #0]
				uint8_t weoBuffer[symLen];
 800347e:	2390      	movs	r3, #144	; 0x90
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	18fb      	adds	r3, r7, r3
 8003484:	601c      	str	r4, [r3, #0]
 8003486:	1963      	adds	r3, r4, r5
 8003488:	2208      	movs	r2, #8
 800348a:	4694      	mov	ip, r2
 800348c:	44bc      	add	ip, r7
 800348e:	4463      	add	r3, ip
 8003490:	881a      	ldrh	r2, [r3, #0]
 8003492:	0013      	movs	r3, r2
 8003494:	3b01      	subs	r3, #1
 8003496:	21a8      	movs	r1, #168	; 0xa8
 8003498:	0049      	lsls	r1, r1, #1
 800349a:	2008      	movs	r0, #8
 800349c:	1809      	adds	r1, r1, r0
 800349e:	19c9      	adds	r1, r1, r7
 80034a0:	600b      	str	r3, [r1, #0]
 80034a2:	663a      	str	r2, [r7, #96]	; 0x60
 80034a4:	2300      	movs	r3, #0
 80034a6:	667b      	str	r3, [r7, #100]	; 0x64
 80034a8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80034aa:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80034ac:	0003      	movs	r3, r0
 80034ae:	0f5b      	lsrs	r3, r3, #29
 80034b0:	000d      	movs	r5, r1
 80034b2:	00ed      	lsls	r5, r5, #3
 80034b4:	26ec      	movs	r6, #236	; 0xec
 80034b6:	2408      	movs	r4, #8
 80034b8:	1934      	adds	r4, r6, r4
 80034ba:	19e4      	adds	r4, r4, r7
 80034bc:	6025      	str	r5, [r4, #0]
 80034be:	2408      	movs	r4, #8
 80034c0:	1934      	adds	r4, r6, r4
 80034c2:	19e4      	adds	r4, r4, r7
 80034c4:	6825      	ldr	r5, [r4, #0]
 80034c6:	431d      	orrs	r5, r3
 80034c8:	2308      	movs	r3, #8
 80034ca:	18f3      	adds	r3, r6, r3
 80034cc:	19db      	adds	r3, r3, r7
 80034ce:	601d      	str	r5, [r3, #0]
 80034d0:	0003      	movs	r3, r0
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	21e8      	movs	r1, #232	; 0xe8
 80034d6:	2008      	movs	r0, #8
 80034d8:	1809      	adds	r1, r1, r0
 80034da:	19c9      	adds	r1, r1, r7
 80034dc:	600b      	str	r3, [r1, #0]
 80034de:	65ba      	str	r2, [r7, #88]	; 0x58
 80034e0:	2300      	movs	r3, #0
 80034e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034e4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80034e6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80034e8:	0003      	movs	r3, r0
 80034ea:	0f5b      	lsrs	r3, r3, #29
 80034ec:	000d      	movs	r5, r1
 80034ee:	00ed      	lsls	r5, r5, #3
 80034f0:	26e4      	movs	r6, #228	; 0xe4
 80034f2:	2408      	movs	r4, #8
 80034f4:	1934      	adds	r4, r6, r4
 80034f6:	19e4      	adds	r4, r4, r7
 80034f8:	6025      	str	r5, [r4, #0]
 80034fa:	2408      	movs	r4, #8
 80034fc:	1934      	adds	r4, r6, r4
 80034fe:	19e5      	adds	r5, r4, r7
 8003500:	682d      	ldr	r5, [r5, #0]
 8003502:	431d      	orrs	r5, r3
 8003504:	2308      	movs	r3, #8
 8003506:	18f3      	adds	r3, r6, r3
 8003508:	19db      	adds	r3, r3, r7
 800350a:	601d      	str	r5, [r3, #0]
 800350c:	0003      	movs	r3, r0
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	21e0      	movs	r1, #224	; 0xe0
 8003512:	2008      	movs	r0, #8
 8003514:	1809      	adds	r1, r1, r0
 8003516:	19c9      	adds	r1, r1, r7
 8003518:	600b      	str	r3, [r1, #0]
 800351a:	0013      	movs	r3, r2
 800351c:	3307      	adds	r3, #7
 800351e:	08db      	lsrs	r3, r3, #3
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	466a      	mov	r2, sp
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	469d      	mov	sp, r3
 8003528:	ab02      	add	r3, sp, #8
 800352a:	3300      	adds	r3, #0
 800352c:	21a6      	movs	r1, #166	; 0xa6
 800352e:	0049      	lsls	r1, r1, #1
 8003530:	2208      	movs	r2, #8
 8003532:	188a      	adds	r2, r1, r2
 8003534:	19d1      	adds	r1, r2, r7
 8003536:	600b      	str	r3, [r1, #0]
				uint8_t weoBuffer1[symLen];
 8003538:	2390      	movs	r3, #144	; 0x90
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	18fb      	adds	r3, r7, r3
 800353e:	681c      	ldr	r4, [r3, #0]
 8003540:	2390      	movs	r3, #144	; 0x90
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	18fb      	adds	r3, r7, r3
 8003546:	601c      	str	r4, [r3, #0]
 8003548:	258c      	movs	r5, #140	; 0x8c
 800354a:	006d      	lsls	r5, r5, #1
 800354c:	1963      	adds	r3, r4, r5
 800354e:	2208      	movs	r2, #8
 8003550:	4694      	mov	ip, r2
 8003552:	44bc      	add	ip, r7
 8003554:	4463      	add	r3, ip
 8003556:	881a      	ldrh	r2, [r3, #0]
 8003558:	0013      	movs	r3, r2
 800355a:	3b01      	subs	r3, #1
 800355c:	21a4      	movs	r1, #164	; 0xa4
 800355e:	0049      	lsls	r1, r1, #1
 8003560:	2008      	movs	r0, #8
 8003562:	1809      	adds	r1, r1, r0
 8003564:	19c9      	adds	r1, r1, r7
 8003566:	600b      	str	r3, [r1, #0]
 8003568:	653a      	str	r2, [r7, #80]	; 0x50
 800356a:	2300      	movs	r3, #0
 800356c:	657b      	str	r3, [r7, #84]	; 0x54
 800356e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003570:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003572:	0003      	movs	r3, r0
 8003574:	0f5b      	lsrs	r3, r3, #29
 8003576:	000d      	movs	r5, r1
 8003578:	00ed      	lsls	r5, r5, #3
 800357a:	26dc      	movs	r6, #220	; 0xdc
 800357c:	2408      	movs	r4, #8
 800357e:	1934      	adds	r4, r6, r4
 8003580:	19e4      	adds	r4, r4, r7
 8003582:	6025      	str	r5, [r4, #0]
 8003584:	2408      	movs	r4, #8
 8003586:	1934      	adds	r4, r6, r4
 8003588:	19e4      	adds	r4, r4, r7
 800358a:	6825      	ldr	r5, [r4, #0]
 800358c:	431d      	orrs	r5, r3
 800358e:	2308      	movs	r3, #8
 8003590:	18f3      	adds	r3, r6, r3
 8003592:	19db      	adds	r3, r3, r7
 8003594:	601d      	str	r5, [r3, #0]
 8003596:	0003      	movs	r3, r0
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	21d8      	movs	r1, #216	; 0xd8
 800359c:	2008      	movs	r0, #8
 800359e:	1809      	adds	r1, r1, r0
 80035a0:	19c9      	adds	r1, r1, r7
 80035a2:	600b      	str	r3, [r1, #0]
 80035a4:	64ba      	str	r2, [r7, #72]	; 0x48
 80035a6:	2300      	movs	r3, #0
 80035a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035aa:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80035ac:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80035ae:	0003      	movs	r3, r0
 80035b0:	0f5b      	lsrs	r3, r3, #29
 80035b2:	000d      	movs	r5, r1
 80035b4:	00ed      	lsls	r5, r5, #3
 80035b6:	26d4      	movs	r6, #212	; 0xd4
 80035b8:	2408      	movs	r4, #8
 80035ba:	1934      	adds	r4, r6, r4
 80035bc:	19e4      	adds	r4, r4, r7
 80035be:	6025      	str	r5, [r4, #0]
 80035c0:	2408      	movs	r4, #8
 80035c2:	1934      	adds	r4, r6, r4
 80035c4:	19e5      	adds	r5, r4, r7
 80035c6:	682d      	ldr	r5, [r5, #0]
 80035c8:	431d      	orrs	r5, r3
 80035ca:	2308      	movs	r3, #8
 80035cc:	18f3      	adds	r3, r6, r3
 80035ce:	19db      	adds	r3, r3, r7
 80035d0:	601d      	str	r5, [r3, #0]
 80035d2:	0003      	movs	r3, r0
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	21d0      	movs	r1, #208	; 0xd0
 80035d8:	2008      	movs	r0, #8
 80035da:	1809      	adds	r1, r1, r0
 80035dc:	19c9      	adds	r1, r1, r7
 80035de:	600b      	str	r3, [r1, #0]
 80035e0:	0013      	movs	r3, r2
 80035e2:	3307      	adds	r3, #7
 80035e4:	08db      	lsrs	r3, r3, #3
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	466a      	mov	r2, sp
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	469d      	mov	sp, r3
 80035ee:	ab02      	add	r3, sp, #8
 80035f0:	3300      	adds	r3, #0
 80035f2:	21a2      	movs	r1, #162	; 0xa2
 80035f4:	0049      	lsls	r1, r1, #1
 80035f6:	2208      	movs	r2, #8
 80035f8:	188a      	adds	r2, r1, r2
 80035fa:	19d1      	adds	r1, r2, r7
 80035fc:	600b      	str	r3, [r1, #0]
				uint8_t weoBuffer2[symLen];
 80035fe:	2390      	movs	r3, #144	; 0x90
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	18fb      	adds	r3, r7, r3
 8003604:	681c      	ldr	r4, [r3, #0]
 8003606:	258c      	movs	r5, #140	; 0x8c
 8003608:	006d      	lsls	r5, r5, #1
 800360a:	1963      	adds	r3, r4, r5
 800360c:	2208      	movs	r2, #8
 800360e:	4694      	mov	ip, r2
 8003610:	44bc      	add	ip, r7
 8003612:	4463      	add	r3, ip
 8003614:	881a      	ldrh	r2, [r3, #0]
 8003616:	0013      	movs	r3, r2
 8003618:	3b01      	subs	r3, #1
 800361a:	21a0      	movs	r1, #160	; 0xa0
 800361c:	0049      	lsls	r1, r1, #1
 800361e:	2008      	movs	r0, #8
 8003620:	1809      	adds	r1, r1, r0
 8003622:	19c9      	adds	r1, r1, r7
 8003624:	600b      	str	r3, [r1, #0]
 8003626:	643a      	str	r2, [r7, #64]	; 0x40
 8003628:	2300      	movs	r3, #0
 800362a:	647b      	str	r3, [r7, #68]	; 0x44
 800362c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800362e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003630:	0003      	movs	r3, r0
 8003632:	0f5b      	lsrs	r3, r3, #29
 8003634:	000c      	movs	r4, r1
 8003636:	00e4      	lsls	r4, r4, #3
 8003638:	26cc      	movs	r6, #204	; 0xcc
 800363a:	2508      	movs	r5, #8
 800363c:	1975      	adds	r5, r6, r5
 800363e:	19ed      	adds	r5, r5, r7
 8003640:	602c      	str	r4, [r5, #0]
 8003642:	2408      	movs	r4, #8
 8003644:	1934      	adds	r4, r6, r4
 8003646:	19e4      	adds	r4, r4, r7
 8003648:	6824      	ldr	r4, [r4, #0]
 800364a:	431c      	orrs	r4, r3
 800364c:	2308      	movs	r3, #8
 800364e:	18f3      	adds	r3, r6, r3
 8003650:	19db      	adds	r3, r3, r7
 8003652:	601c      	str	r4, [r3, #0]
 8003654:	0003      	movs	r3, r0
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	21c8      	movs	r1, #200	; 0xc8
 800365a:	2008      	movs	r0, #8
 800365c:	1809      	adds	r1, r1, r0
 800365e:	19c9      	adds	r1, r1, r7
 8003660:	600b      	str	r3, [r1, #0]
 8003662:	63ba      	str	r2, [r7, #56]	; 0x38
 8003664:	2300      	movs	r3, #0
 8003666:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003668:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800366a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800366c:	0003      	movs	r3, r0
 800366e:	0f5b      	lsrs	r3, r3, #29
 8003670:	469c      	mov	ip, r3
 8003672:	000c      	movs	r4, r1
 8003674:	00e4      	lsls	r4, r4, #3
 8003676:	26c4      	movs	r6, #196	; 0xc4
 8003678:	0035      	movs	r5, r6
 800367a:	2308      	movs	r3, #8
 800367c:	18f6      	adds	r6, r6, r3
 800367e:	19f6      	adds	r6, r6, r7
 8003680:	6034      	str	r4, [r6, #0]
 8003682:	002c      	movs	r4, r5
 8003684:	0025      	movs	r5, r4
 8003686:	2308      	movs	r3, #8
 8003688:	18e3      	adds	r3, r4, r3
 800368a:	19de      	adds	r6, r3, r7
 800368c:	6834      	ldr	r4, [r6, #0]
 800368e:	4663      	mov	r3, ip
 8003690:	431c      	orrs	r4, r3
 8003692:	002b      	movs	r3, r5
 8003694:	2508      	movs	r5, #8
 8003696:	195b      	adds	r3, r3, r5
 8003698:	19db      	adds	r3, r3, r7
 800369a:	601c      	str	r4, [r3, #0]
 800369c:	0003      	movs	r3, r0
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	21c0      	movs	r1, #192	; 0xc0
 80036a2:	2008      	movs	r0, #8
 80036a4:	1809      	adds	r1, r1, r0
 80036a6:	19c9      	adds	r1, r1, r7
 80036a8:	600b      	str	r3, [r1, #0]
 80036aa:	0013      	movs	r3, r2
 80036ac:	3307      	adds	r3, #7
 80036ae:	08db      	lsrs	r3, r3, #3
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	466a      	mov	r2, sp
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	469d      	mov	sp, r3
 80036b8:	ab02      	add	r3, sp, #8
 80036ba:	3300      	adds	r3, #0
 80036bc:	229e      	movs	r2, #158	; 0x9e
 80036be:	0052      	lsls	r2, r2, #1
 80036c0:	2108      	movs	r1, #8
 80036c2:	1852      	adds	r2, r2, r1
 80036c4:	19d2      	adds	r2, r2, r7
 80036c6:	6013      	str	r3, [r2, #0]
				X_increment=0x07;
 80036c8:	233f      	movs	r3, #63	; 0x3f
 80036ca:	258c      	movs	r5, #140	; 0x8c
 80036cc:	006d      	lsls	r5, r5, #1
 80036ce:	195b      	adds	r3, r3, r5
 80036d0:	2208      	movs	r2, #8
 80036d2:	18ba      	adds	r2, r7, r2
 80036d4:	189a      	adds	r2, r3, r2
 80036d6:	2307      	movs	r3, #7
 80036d8:	7013      	strb	r3, [r2, #0]
				ASCII_height=0x12;
 80036da:	233e      	movs	r3, #62	; 0x3e
 80036dc:	195b      	adds	r3, r3, r5
 80036de:	2208      	movs	r2, #8
 80036e0:	18ba      	adds	r2, r7, r2
 80036e2:	189a      	adds	r2, r3, r2
 80036e4:	2312      	movs	r3, #18
 80036e6:	7013      	strb	r3, [r2, #0]
				for(i=0;i<strLen;i++){
 80036e8:	2362      	movs	r3, #98	; 0x62
 80036ea:	195b      	adds	r3, r3, r5
 80036ec:	2208      	movs	r2, #8
 80036ee:	18ba      	adds	r2, r7, r2
 80036f0:	189a      	adds	r2, r3, r2
 80036f2:	2300      	movs	r3, #0
 80036f4:	8013      	strh	r3, [r2, #0]
 80036f6:	e109      	b.n	800390c <printASCIIarray+0xb74>
					for(j=0;j<symLen;j++){
 80036f8:	2364      	movs	r3, #100	; 0x64
 80036fa:	228c      	movs	r2, #140	; 0x8c
 80036fc:	0052      	lsls	r2, r2, #1
 80036fe:	189b      	adds	r3, r3, r2
 8003700:	2208      	movs	r2, #8
 8003702:	18ba      	adds	r2, r7, r2
 8003704:	189a      	adds	r2, r3, r2
 8003706:	2300      	movs	r3, #0
 8003708:	8013      	strh	r3, [r2, #0]
 800370a:	e041      	b.n	8003790 <printASCIIarray+0x9f8>
						weoBuffer[j]=F2[dataASCII[i]][j];
 800370c:	2362      	movs	r3, #98	; 0x62
 800370e:	218c      	movs	r1, #140	; 0x8c
 8003710:	0049      	lsls	r1, r1, #1
 8003712:	185b      	adds	r3, r3, r1
 8003714:	2208      	movs	r2, #8
 8003716:	4694      	mov	ip, r2
 8003718:	44bc      	add	ip, r7
 800371a:	4463      	add	r3, ip
 800371c:	881a      	ldrh	r2, [r3, #0]
 800371e:	2380      	movs	r3, #128	; 0x80
 8003720:	185b      	adds	r3, r3, r1
 8003722:	2008      	movs	r0, #8
 8003724:	4684      	mov	ip, r0
 8003726:	2008      	movs	r0, #8
 8003728:	4681      	mov	r9, r0
 800372a:	44b9      	add	r9, r7
 800372c:	44cc      	add	ip, r9
 800372e:	4463      	add	r3, ip
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	189b      	adds	r3, r3, r2
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	001d      	movs	r5, r3
 8003738:	2264      	movs	r2, #100	; 0x64
 800373a:	1853      	adds	r3, r2, r1
 800373c:	2008      	movs	r0, #8
 800373e:	4684      	mov	ip, r0
 8003740:	44bc      	add	ip, r7
 8003742:	4463      	add	r3, ip
 8003744:	8818      	ldrh	r0, [r3, #0]
 8003746:	000e      	movs	r6, r1
 8003748:	1853      	adds	r3, r2, r1
 800374a:	2208      	movs	r2, #8
 800374c:	4694      	mov	ip, r2
 800374e:	44bc      	add	ip, r7
 8003750:	4463      	add	r3, ip
 8003752:	881c      	ldrh	r4, [r3, #0]
 8003754:	497a      	ldr	r1, [pc, #488]	; (8003940 <printASCIIarray+0xba8>)
 8003756:	002a      	movs	r2, r5
 8003758:	0052      	lsls	r2, r2, #1
 800375a:	1952      	adds	r2, r2, r5
 800375c:	0153      	lsls	r3, r2, #5
 800375e:	18d2      	adds	r2, r2, r3
 8003760:	188b      	adds	r3, r1, r2
 8003762:	5c1b      	ldrb	r3, [r3, r0]
 8003764:	22a6      	movs	r2, #166	; 0xa6
 8003766:	0052      	lsls	r2, r2, #1
 8003768:	2108      	movs	r1, #8
 800376a:	1852      	adds	r2, r2, r1
 800376c:	19d2      	adds	r2, r2, r7
 800376e:	6812      	ldr	r2, [r2, #0]
 8003770:	5513      	strb	r3, [r2, r4]
					for(j=0;j<symLen;j++){
 8003772:	2264      	movs	r2, #100	; 0x64
 8003774:	0031      	movs	r1, r6
 8003776:	1853      	adds	r3, r2, r1
 8003778:	2008      	movs	r0, #8
 800377a:	4684      	mov	ip, r0
 800377c:	44bc      	add	ip, r7
 800377e:	4463      	add	r3, ip
 8003780:	881b      	ldrh	r3, [r3, #0]
 8003782:	1852      	adds	r2, r2, r1
 8003784:	2108      	movs	r1, #8
 8003786:	468c      	mov	ip, r1
 8003788:	44bc      	add	ip, r7
 800378a:	4462      	add	r2, ip
 800378c:	3301      	adds	r3, #1
 800378e:	8013      	strh	r3, [r2, #0]
 8003790:	2364      	movs	r3, #100	; 0x64
 8003792:	218c      	movs	r1, #140	; 0x8c
 8003794:	0049      	lsls	r1, r1, #1
 8003796:	185b      	adds	r3, r3, r1
 8003798:	2208      	movs	r2, #8
 800379a:	18ba      	adds	r2, r7, r2
 800379c:	189a      	adds	r2, r3, r2
 800379e:	235a      	movs	r3, #90	; 0x5a
 80037a0:	185b      	adds	r3, r3, r1
 80037a2:	2008      	movs	r0, #8
 80037a4:	4684      	mov	ip, r0
 80037a6:	44bc      	add	ip, r7
 80037a8:	4463      	add	r3, ip
 80037aa:	8812      	ldrh	r2, [r2, #0]
 80037ac:	881b      	ldrh	r3, [r3, #0]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d3ac      	bcc.n	800370c <printASCIIarray+0x974>
//							weoBuffer2[k]=((weoBuffer[k]&0xF0)>>4)&contrast;
//						}
//					for (k=0;k<symLen;k++){
//							weoBuffer[k]=(weoBuffer2[k]<<4)|weoBuffer1[k];
//						}
					for (k=0;k<symLen;k++){
 80037b2:	2366      	movs	r3, #102	; 0x66
 80037b4:	185b      	adds	r3, r3, r1
 80037b6:	2208      	movs	r2, #8
 80037b8:	18ba      	adds	r2, r7, r2
 80037ba:	189a      	adds	r2, r3, r2
 80037bc:	2300      	movs	r3, #0
 80037be:	8013      	strh	r3, [r2, #0]
 80037c0:	e030      	b.n	8003824 <printASCIIarray+0xa8c>
						weoBuffer[k]=weoBuffer[k] & contrast;
 80037c2:	2066      	movs	r0, #102	; 0x66
 80037c4:	248c      	movs	r4, #140	; 0x8c
 80037c6:	0064      	lsls	r4, r4, #1
 80037c8:	1903      	adds	r3, r0, r4
 80037ca:	2208      	movs	r2, #8
 80037cc:	4694      	mov	ip, r2
 80037ce:	44bc      	add	ip, r7
 80037d0:	4463      	add	r3, ip
 80037d2:	881a      	ldrh	r2, [r3, #0]
 80037d4:	25a6      	movs	r5, #166	; 0xa6
 80037d6:	006d      	lsls	r5, r5, #1
 80037d8:	2308      	movs	r3, #8
 80037da:	18eb      	adds	r3, r5, r3
 80037dc:	19db      	adds	r3, r3, r7
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	5c9a      	ldrb	r2, [r3, r2]
 80037e2:	1903      	adds	r3, r0, r4
 80037e4:	2108      	movs	r1, #8
 80037e6:	468c      	mov	ip, r1
 80037e8:	44bc      	add	ip, r7
 80037ea:	4463      	add	r3, ip
 80037ec:	8819      	ldrh	r1, [r3, #0]
 80037ee:	235c      	movs	r3, #92	; 0x5c
 80037f0:	191b      	adds	r3, r3, r4
 80037f2:	2608      	movs	r6, #8
 80037f4:	46b4      	mov	ip, r6
 80037f6:	44bc      	add	ip, r7
 80037f8:	4463      	add	r3, ip
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	4013      	ands	r3, r2
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	2208      	movs	r2, #8
 8003802:	18aa      	adds	r2, r5, r2
 8003804:	19d2      	adds	r2, r2, r7
 8003806:	6812      	ldr	r2, [r2, #0]
 8003808:	5453      	strb	r3, [r2, r1]
					for (k=0;k<symLen;k++){
 800380a:	1903      	adds	r3, r0, r4
 800380c:	2208      	movs	r2, #8
 800380e:	4694      	mov	ip, r2
 8003810:	44bc      	add	ip, r7
 8003812:	4463      	add	r3, ip
 8003814:	881b      	ldrh	r3, [r3, #0]
 8003816:	1902      	adds	r2, r0, r4
 8003818:	2108      	movs	r1, #8
 800381a:	468c      	mov	ip, r1
 800381c:	44bc      	add	ip, r7
 800381e:	4462      	add	r2, ip
 8003820:	3301      	adds	r3, #1
 8003822:	8013      	strh	r3, [r2, #0]
 8003824:	2366      	movs	r3, #102	; 0x66
 8003826:	258c      	movs	r5, #140	; 0x8c
 8003828:	006d      	lsls	r5, r5, #1
 800382a:	195b      	adds	r3, r3, r5
 800382c:	2208      	movs	r2, #8
 800382e:	18ba      	adds	r2, r7, r2
 8003830:	189a      	adds	r2, r3, r2
 8003832:	235a      	movs	r3, #90	; 0x5a
 8003834:	195b      	adds	r3, r3, r5
 8003836:	2108      	movs	r1, #8
 8003838:	468c      	mov	ip, r1
 800383a:	44bc      	add	ip, r7
 800383c:	4463      	add	r3, ip
 800383e:	8812      	ldrh	r2, [r2, #0]
 8003840:	881b      	ldrh	r3, [r3, #0]
 8003842:	429a      	cmp	r2, r3
 8003844:	d3bd      	bcc.n	80037c2 <printASCIIarray+0xa2a>
					}
				weoDrawRectangleFilled(ASCII_X, imY, ASCII_X+X_increment-1, imY + ASCII_height - decY, 0xFF, weoBuffer);
 8003846:	205f      	movs	r0, #95	; 0x5f
 8003848:	1943      	adds	r3, r0, r5
 800384a:	2208      	movs	r2, #8
 800384c:	18ba      	adds	r2, r7, r2
 800384e:	189a      	adds	r2, r3, r2
 8003850:	233f      	movs	r3, #63	; 0x3f
 8003852:	195b      	adds	r3, r3, r5
 8003854:	2108      	movs	r1, #8
 8003856:	468c      	mov	ip, r1
 8003858:	44bc      	add	ip, r7
 800385a:	4463      	add	r3, ip
 800385c:	7812      	ldrb	r2, [r2, #0]
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	18d3      	adds	r3, r2, r3
 8003862:	b2db      	uxtb	r3, r3
 8003864:	3b01      	subs	r3, #1
 8003866:	b2dc      	uxtb	r4, r3
 8003868:	268f      	movs	r6, #143	; 0x8f
 800386a:	0076      	lsls	r6, r6, #1
 800386c:	2308      	movs	r3, #8
 800386e:	18f3      	adds	r3, r6, r3
 8003870:	19da      	adds	r2, r3, r7
 8003872:	213e      	movs	r1, #62	; 0x3e
 8003874:	194b      	adds	r3, r1, r5
 8003876:	2108      	movs	r1, #8
 8003878:	468c      	mov	ip, r1
 800387a:	44bc      	add	ip, r7
 800387c:	4463      	add	r3, ip
 800387e:	7812      	ldrb	r2, [r2, #0]
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	18d3      	adds	r3, r2, r3
 8003884:	b2da      	uxtb	r2, r3
 8003886:	2160      	movs	r1, #96	; 0x60
 8003888:	1949      	adds	r1, r1, r5
 800388a:	2308      	movs	r3, #8
 800388c:	18fb      	adds	r3, r7, r3
 800388e:	18cb      	adds	r3, r1, r3
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	b2da      	uxtb	r2, r3
 8003896:	2308      	movs	r3, #8
 8003898:	18f3      	adds	r3, r6, r3
 800389a:	19db      	adds	r3, r3, r7
 800389c:	7819      	ldrb	r1, [r3, #0]
 800389e:	0005      	movs	r5, r0
 80038a0:	238c      	movs	r3, #140	; 0x8c
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	18c6      	adds	r6, r0, r3
 80038a6:	2308      	movs	r3, #8
 80038a8:	18fb      	adds	r3, r7, r3
 80038aa:	18f3      	adds	r3, r6, r3
 80038ac:	7818      	ldrb	r0, [r3, #0]
 80038ae:	26a6      	movs	r6, #166	; 0xa6
 80038b0:	0076      	lsls	r6, r6, #1
 80038b2:	2308      	movs	r3, #8
 80038b4:	18f3      	adds	r3, r6, r3
 80038b6:	19de      	adds	r6, r3, r7
 80038b8:	6833      	ldr	r3, [r6, #0]
 80038ba:	9301      	str	r3, [sp, #4]
 80038bc:	23ff      	movs	r3, #255	; 0xff
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	0013      	movs	r3, r2
 80038c2:	0022      	movs	r2, r4
 80038c4:	f7fd fdc4 	bl	8001450 <weoDrawRectangleFilled>
				ASCII_X += X_increment;
 80038c8:	208c      	movs	r0, #140	; 0x8c
 80038ca:	0040      	lsls	r0, r0, #1
 80038cc:	182b      	adds	r3, r5, r0
 80038ce:	2208      	movs	r2, #8
 80038d0:	18ba      	adds	r2, r7, r2
 80038d2:	1899      	adds	r1, r3, r2
 80038d4:	182b      	adds	r3, r5, r0
 80038d6:	2208      	movs	r2, #8
 80038d8:	18ba      	adds	r2, r7, r2
 80038da:	189a      	adds	r2, r3, r2
 80038dc:	233f      	movs	r3, #63	; 0x3f
 80038de:	181b      	adds	r3, r3, r0
 80038e0:	2408      	movs	r4, #8
 80038e2:	46a4      	mov	ip, r4
 80038e4:	44bc      	add	ip, r7
 80038e6:	4463      	add	r3, ip
 80038e8:	7812      	ldrb	r2, [r2, #0]
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	18d3      	adds	r3, r2, r3
 80038ee:	700b      	strb	r3, [r1, #0]
				for(i=0;i<strLen;i++){
 80038f0:	2262      	movs	r2, #98	; 0x62
 80038f2:	1813      	adds	r3, r2, r0
 80038f4:	2108      	movs	r1, #8
 80038f6:	468c      	mov	ip, r1
 80038f8:	44bc      	add	ip, r7
 80038fa:	4463      	add	r3, ip
 80038fc:	881b      	ldrh	r3, [r3, #0]
 80038fe:	1812      	adds	r2, r2, r0
 8003900:	2108      	movs	r1, #8
 8003902:	468c      	mov	ip, r1
 8003904:	44bc      	add	ip, r7
 8003906:	4462      	add	r2, ip
 8003908:	3301      	adds	r3, #1
 800390a:	8013      	strh	r3, [r2, #0]
 800390c:	231e      	movs	r3, #30
 800390e:	33ff      	adds	r3, #255	; 0xff
 8003910:	2208      	movs	r2, #8
 8003912:	189b      	adds	r3, r3, r2
 8003914:	19db      	adds	r3, r3, r7
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	b29a      	uxth	r2, r3
 800391a:	2162      	movs	r1, #98	; 0x62
 800391c:	208c      	movs	r0, #140	; 0x8c
 800391e:	0040      	lsls	r0, r0, #1
 8003920:	180b      	adds	r3, r1, r0
 8003922:	2408      	movs	r4, #8
 8003924:	46a4      	mov	ip, r4
 8003926:	44bc      	add	ip, r7
 8003928:	4463      	add	r3, ip
 800392a:	881b      	ldrh	r3, [r3, #0]
 800392c:	4293      	cmp	r3, r2
 800392e:	d200      	bcs.n	8003932 <printASCIIarray+0xb9a>
 8003930:	e6e2      	b.n	80036f8 <printASCIIarray+0x960>
				}
				for(i=0;i<symLen;i++){
 8003932:	180b      	adds	r3, r1, r0
 8003934:	2208      	movs	r2, #8
 8003936:	18ba      	adds	r2, r7, r2
 8003938:	189a      	adds	r2, r3, r2
 800393a:	2300      	movs	r3, #0
 800393c:	8013      	strh	r3, [r2, #0]
 800393e:	e020      	b.n	8003982 <printASCIIarray+0xbea>
 8003940:	0800fa5c 	.word	0x0800fa5c
									weoBuffer[j]=0x00;
 8003944:	2364      	movs	r3, #100	; 0x64
 8003946:	208c      	movs	r0, #140	; 0x8c
 8003948:	0040      	lsls	r0, r0, #1
 800394a:	181b      	adds	r3, r3, r0
 800394c:	2208      	movs	r2, #8
 800394e:	4694      	mov	ip, r2
 8003950:	44bc      	add	ip, r7
 8003952:	4463      	add	r3, ip
 8003954:	8819      	ldrh	r1, [r3, #0]
 8003956:	23a6      	movs	r3, #166	; 0xa6
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	2208      	movs	r2, #8
 800395c:	189b      	adds	r3, r3, r2
 800395e:	19db      	adds	r3, r3, r7
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	2300      	movs	r3, #0
 8003964:	5453      	strb	r3, [r2, r1]
				for(i=0;i<symLen;i++){
 8003966:	2262      	movs	r2, #98	; 0x62
 8003968:	1813      	adds	r3, r2, r0
 800396a:	2108      	movs	r1, #8
 800396c:	468c      	mov	ip, r1
 800396e:	44bc      	add	ip, r7
 8003970:	4463      	add	r3, ip
 8003972:	881b      	ldrh	r3, [r3, #0]
 8003974:	1812      	adds	r2, r2, r0
 8003976:	2108      	movs	r1, #8
 8003978:	468c      	mov	ip, r1
 800397a:	44bc      	add	ip, r7
 800397c:	4462      	add	r2, ip
 800397e:	3301      	adds	r3, #1
 8003980:	8013      	strh	r3, [r2, #0]
 8003982:	2362      	movs	r3, #98	; 0x62
 8003984:	218c      	movs	r1, #140	; 0x8c
 8003986:	0049      	lsls	r1, r1, #1
 8003988:	185b      	adds	r3, r3, r1
 800398a:	2208      	movs	r2, #8
 800398c:	18ba      	adds	r2, r7, r2
 800398e:	189a      	adds	r2, r3, r2
 8003990:	235a      	movs	r3, #90	; 0x5a
 8003992:	185b      	adds	r3, r3, r1
 8003994:	2108      	movs	r1, #8
 8003996:	468c      	mov	ip, r1
 8003998:	44bc      	add	ip, r7
 800399a:	4463      	add	r3, ip
 800399c:	8812      	ldrh	r2, [r2, #0]
 800399e:	881b      	ldrh	r3, [r3, #0]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d3cf      	bcc.n	8003944 <printASCIIarray+0xbac>
 80039a4:	46c5      	mov	sp, r8
							}
			}
			if(fontCur==2){
 80039a6:	2361      	movs	r3, #97	; 0x61
 80039a8:	268c      	movs	r6, #140	; 0x8c
 80039aa:	0076      	lsls	r6, r6, #1
 80039ac:	199b      	adds	r3, r3, r6
 80039ae:	2208      	movs	r2, #8
 80039b0:	4694      	mov	ip, r2
 80039b2:	44bc      	add	ip, r7
 80039b4:	4463      	add	r3, ip
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d001      	beq.n	80039c0 <printASCIIarray+0xc28>
 80039bc:	f001 f82b 	bl	8004a16 <printASCIIarray+0x1c7e>
 80039c0:	466b      	mov	r3, sp
 80039c2:	001d      	movs	r5, r3
				symLen=304;
 80039c4:	245a      	movs	r4, #90	; 0x5a
 80039c6:	19a3      	adds	r3, r4, r6
 80039c8:	2208      	movs	r2, #8
 80039ca:	18ba      	adds	r2, r7, r2
 80039cc:	189a      	adds	r2, r3, r2
 80039ce:	2398      	movs	r3, #152	; 0x98
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	8013      	strh	r3, [r2, #0]
				uint8_t weoBuffer[symLen];
 80039d4:	607c      	str	r4, [r7, #4]
 80039d6:	19a3      	adds	r3, r4, r6
 80039d8:	2208      	movs	r2, #8
 80039da:	4694      	mov	ip, r2
 80039dc:	44bc      	add	ip, r7
 80039de:	4463      	add	r3, ip
 80039e0:	881b      	ldrh	r3, [r3, #0]
 80039e2:	2290      	movs	r2, #144	; 0x90
 80039e4:	0052      	lsls	r2, r2, #1
 80039e6:	18ba      	adds	r2, r7, r2
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	2390      	movs	r3, #144	; 0x90
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	18fb      	adds	r3, r7, r3
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	219c      	movs	r1, #156	; 0x9c
 80039f6:	0049      	lsls	r1, r1, #1
 80039f8:	2208      	movs	r2, #8
 80039fa:	188a      	adds	r2, r1, r2
 80039fc:	19d1      	adds	r1, r2, r7
 80039fe:	600b      	str	r3, [r1, #0]
 8003a00:	2390      	movs	r3, #144	; 0x90
 8003a02:	005b      	lsls	r3, r3, #1
 8003a04:	18fb      	adds	r3, r7, r3
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	633b      	str	r3, [r7, #48]	; 0x30
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8003a0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a10:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003a12:	0003      	movs	r3, r0
 8003a14:	0f5b      	lsrs	r3, r3, #29
 8003a16:	000e      	movs	r6, r1
 8003a18:	00f6      	lsls	r6, r6, #3
 8003a1a:	24bc      	movs	r4, #188	; 0xbc
 8003a1c:	2208      	movs	r2, #8
 8003a1e:	18a2      	adds	r2, r4, r2
 8003a20:	19d2      	adds	r2, r2, r7
 8003a22:	6016      	str	r6, [r2, #0]
 8003a24:	2208      	movs	r2, #8
 8003a26:	18a2      	adds	r2, r4, r2
 8003a28:	19d6      	adds	r6, r2, r7
 8003a2a:	6836      	ldr	r6, [r6, #0]
 8003a2c:	431e      	orrs	r6, r3
 8003a2e:	2308      	movs	r3, #8
 8003a30:	18e3      	adds	r3, r4, r3
 8003a32:	19db      	adds	r3, r3, r7
 8003a34:	601e      	str	r6, [r3, #0]
 8003a36:	0003      	movs	r3, r0
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	21b8      	movs	r1, #184	; 0xb8
 8003a3c:	2208      	movs	r2, #8
 8003a3e:	188a      	adds	r2, r1, r2
 8003a40:	19d1      	adds	r1, r2, r7
 8003a42:	600b      	str	r3, [r1, #0]
 8003a44:	2390      	movs	r3, #144	; 0x90
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	18fb      	adds	r3, r7, r3
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a4e:	2300      	movs	r3, #0
 8003a50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a56:	0003      	movs	r3, r0
 8003a58:	0f5b      	lsrs	r3, r3, #29
 8003a5a:	469c      	mov	ip, r3
 8003a5c:	000e      	movs	r6, r1
 8003a5e:	00f6      	lsls	r6, r6, #3
 8003a60:	24b4      	movs	r4, #180	; 0xb4
 8003a62:	0022      	movs	r2, r4
 8003a64:	2308      	movs	r3, #8
 8003a66:	18e4      	adds	r4, r4, r3
 8003a68:	19e4      	adds	r4, r4, r7
 8003a6a:	6026      	str	r6, [r4, #0]
 8003a6c:	0016      	movs	r6, r2
 8003a6e:	0032      	movs	r2, r6
 8003a70:	2308      	movs	r3, #8
 8003a72:	18f3      	adds	r3, r6, r3
 8003a74:	19dc      	adds	r4, r3, r7
 8003a76:	6826      	ldr	r6, [r4, #0]
 8003a78:	4663      	mov	r3, ip
 8003a7a:	431e      	orrs	r6, r3
 8003a7c:	0013      	movs	r3, r2
 8003a7e:	2208      	movs	r2, #8
 8003a80:	189b      	adds	r3, r3, r2
 8003a82:	19db      	adds	r3, r3, r7
 8003a84:	601e      	str	r6, [r3, #0]
 8003a86:	0003      	movs	r3, r0
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	21b0      	movs	r1, #176	; 0xb0
 8003a8c:	2208      	movs	r2, #8
 8003a8e:	188a      	adds	r2, r1, r2
 8003a90:	19d1      	adds	r1, r2, r7
 8003a92:	600b      	str	r3, [r1, #0]
 8003a94:	2390      	movs	r3, #144	; 0x90
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	18fb      	adds	r3, r7, r3
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	3307      	adds	r3, #7
 8003a9e:	08db      	lsrs	r3, r3, #3
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	466a      	mov	r2, sp
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	469d      	mov	sp, r3
 8003aa8:	ab02      	add	r3, sp, #8
 8003aaa:	3300      	adds	r3, #0
 8003aac:	229a      	movs	r2, #154	; 0x9a
 8003aae:	0052      	lsls	r2, r2, #1
 8003ab0:	2108      	movs	r1, #8
 8003ab2:	1852      	adds	r2, r2, r1
 8003ab4:	19d2      	adds	r2, r2, r7
 8003ab6:	6013      	str	r3, [r2, #0]
				uint8_t weoBuffer1[symLen];
 8003ab8:	687c      	ldr	r4, [r7, #4]
 8003aba:	607c      	str	r4, [r7, #4]
 8003abc:	268c      	movs	r6, #140	; 0x8c
 8003abe:	0076      	lsls	r6, r6, #1
 8003ac0:	19a3      	adds	r3, r4, r6
 8003ac2:	2208      	movs	r2, #8
 8003ac4:	4694      	mov	ip, r2
 8003ac6:	44bc      	add	ip, r7
 8003ac8:	4463      	add	r3, ip
 8003aca:	881b      	ldrh	r3, [r3, #0]
 8003acc:	2290      	movs	r2, #144	; 0x90
 8003ace:	0052      	lsls	r2, r2, #1
 8003ad0:	18ba      	adds	r2, r7, r2
 8003ad2:	6013      	str	r3, [r2, #0]
 8003ad4:	2390      	movs	r3, #144	; 0x90
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	18fb      	adds	r3, r7, r3
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	3b01      	subs	r3, #1
 8003ade:	2198      	movs	r1, #152	; 0x98
 8003ae0:	0049      	lsls	r1, r1, #1
 8003ae2:	2208      	movs	r2, #8
 8003ae4:	188a      	adds	r2, r1, r2
 8003ae6:	19d1      	adds	r1, r2, r7
 8003ae8:	600b      	str	r3, [r1, #0]
 8003aea:	2390      	movs	r3, #144	; 0x90
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	18fb      	adds	r3, r7, r3
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	623b      	str	r3, [r7, #32]
 8003af4:	2300      	movs	r3, #0
 8003af6:	627b      	str	r3, [r7, #36]	; 0x24
 8003af8:	6a38      	ldr	r0, [r7, #32]
 8003afa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003afc:	0003      	movs	r3, r0
 8003afe:	0f5b      	lsrs	r3, r3, #29
 8003b00:	000e      	movs	r6, r1
 8003b02:	00f6      	lsls	r6, r6, #3
 8003b04:	24ac      	movs	r4, #172	; 0xac
 8003b06:	2208      	movs	r2, #8
 8003b08:	18a2      	adds	r2, r4, r2
 8003b0a:	19d2      	adds	r2, r2, r7
 8003b0c:	6016      	str	r6, [r2, #0]
 8003b0e:	2208      	movs	r2, #8
 8003b10:	18a2      	adds	r2, r4, r2
 8003b12:	19d6      	adds	r6, r2, r7
 8003b14:	6836      	ldr	r6, [r6, #0]
 8003b16:	431e      	orrs	r6, r3
 8003b18:	2308      	movs	r3, #8
 8003b1a:	18e3      	adds	r3, r4, r3
 8003b1c:	19db      	adds	r3, r3, r7
 8003b1e:	601e      	str	r6, [r3, #0]
 8003b20:	0003      	movs	r3, r0
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	21a8      	movs	r1, #168	; 0xa8
 8003b26:	2208      	movs	r2, #8
 8003b28:	188a      	adds	r2, r1, r2
 8003b2a:	19d1      	adds	r1, r2, r7
 8003b2c:	600b      	str	r3, [r1, #0]
 8003b2e:	2390      	movs	r3, #144	; 0x90
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	18fb      	adds	r3, r7, r3
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	61bb      	str	r3, [r7, #24]
 8003b38:	2300      	movs	r3, #0
 8003b3a:	61fb      	str	r3, [r7, #28]
 8003b3c:	69b8      	ldr	r0, [r7, #24]
 8003b3e:	69f9      	ldr	r1, [r7, #28]
 8003b40:	0003      	movs	r3, r0
 8003b42:	0f5b      	lsrs	r3, r3, #29
 8003b44:	469c      	mov	ip, r3
 8003b46:	000e      	movs	r6, r1
 8003b48:	00f6      	lsls	r6, r6, #3
 8003b4a:	24a4      	movs	r4, #164	; 0xa4
 8003b4c:	0022      	movs	r2, r4
 8003b4e:	2308      	movs	r3, #8
 8003b50:	18e4      	adds	r4, r4, r3
 8003b52:	19e4      	adds	r4, r4, r7
 8003b54:	6026      	str	r6, [r4, #0]
 8003b56:	0016      	movs	r6, r2
 8003b58:	0032      	movs	r2, r6
 8003b5a:	2308      	movs	r3, #8
 8003b5c:	18f3      	adds	r3, r6, r3
 8003b5e:	19dc      	adds	r4, r3, r7
 8003b60:	6826      	ldr	r6, [r4, #0]
 8003b62:	4663      	mov	r3, ip
 8003b64:	431e      	orrs	r6, r3
 8003b66:	0013      	movs	r3, r2
 8003b68:	2208      	movs	r2, #8
 8003b6a:	189b      	adds	r3, r3, r2
 8003b6c:	19db      	adds	r3, r3, r7
 8003b6e:	601e      	str	r6, [r3, #0]
 8003b70:	0003      	movs	r3, r0
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	21a0      	movs	r1, #160	; 0xa0
 8003b76:	2208      	movs	r2, #8
 8003b78:	188a      	adds	r2, r1, r2
 8003b7a:	19d1      	adds	r1, r2, r7
 8003b7c:	600b      	str	r3, [r1, #0]
 8003b7e:	2390      	movs	r3, #144	; 0x90
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	18fb      	adds	r3, r7, r3
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	3307      	adds	r3, #7
 8003b88:	08db      	lsrs	r3, r3, #3
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	466a      	mov	r2, sp
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	469d      	mov	sp, r3
 8003b92:	ab02      	add	r3, sp, #8
 8003b94:	3300      	adds	r3, #0
 8003b96:	2296      	movs	r2, #150	; 0x96
 8003b98:	0052      	lsls	r2, r2, #1
 8003b9a:	2108      	movs	r1, #8
 8003b9c:	1852      	adds	r2, r2, r1
 8003b9e:	19d2      	adds	r2, r2, r7
 8003ba0:	6013      	str	r3, [r2, #0]
				uint8_t weoBuffer2[symLen];
 8003ba2:	687c      	ldr	r4, [r7, #4]
 8003ba4:	268c      	movs	r6, #140	; 0x8c
 8003ba6:	0076      	lsls	r6, r6, #1
 8003ba8:	19a3      	adds	r3, r4, r6
 8003baa:	2208      	movs	r2, #8
 8003bac:	4694      	mov	ip, r2
 8003bae:	44bc      	add	ip, r7
 8003bb0:	4463      	add	r3, ip
 8003bb2:	881b      	ldrh	r3, [r3, #0]
 8003bb4:	2290      	movs	r2, #144	; 0x90
 8003bb6:	0052      	lsls	r2, r2, #1
 8003bb8:	18ba      	adds	r2, r7, r2
 8003bba:	6013      	str	r3, [r2, #0]
 8003bbc:	2390      	movs	r3, #144	; 0x90
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	18fb      	adds	r3, r7, r3
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	3a01      	subs	r2, #1
 8003bc6:	2194      	movs	r1, #148	; 0x94
 8003bc8:	0049      	lsls	r1, r1, #1
 8003bca:	2308      	movs	r3, #8
 8003bcc:	18cb      	adds	r3, r1, r3
 8003bce:	19d9      	adds	r1, r3, r7
 8003bd0:	600a      	str	r2, [r1, #0]
 8003bd2:	2390      	movs	r3, #144	; 0x90
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	18fb      	adds	r3, r7, r3
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	613b      	str	r3, [r7, #16]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	617a      	str	r2, [r7, #20]
 8003be0:	6938      	ldr	r0, [r7, #16]
 8003be2:	6979      	ldr	r1, [r7, #20]
 8003be4:	0002      	movs	r2, r0
 8003be6:	0f52      	lsrs	r2, r2, #29
 8003be8:	000c      	movs	r4, r1
 8003bea:	00e4      	lsls	r4, r4, #3
 8003bec:	269c      	movs	r6, #156	; 0x9c
 8003bee:	2308      	movs	r3, #8
 8003bf0:	18f3      	adds	r3, r6, r3
 8003bf2:	19db      	adds	r3, r3, r7
 8003bf4:	601c      	str	r4, [r3, #0]
 8003bf6:	2308      	movs	r3, #8
 8003bf8:	18f3      	adds	r3, r6, r3
 8003bfa:	19dc      	adds	r4, r3, r7
 8003bfc:	6824      	ldr	r4, [r4, #0]
 8003bfe:	4314      	orrs	r4, r2
 8003c00:	2308      	movs	r3, #8
 8003c02:	18f3      	adds	r3, r6, r3
 8003c04:	19da      	adds	r2, r3, r7
 8003c06:	6014      	str	r4, [r2, #0]
 8003c08:	0002      	movs	r2, r0
 8003c0a:	00d2      	lsls	r2, r2, #3
 8003c0c:	2198      	movs	r1, #152	; 0x98
 8003c0e:	2308      	movs	r3, #8
 8003c10:	18cb      	adds	r3, r1, r3
 8003c12:	19d9      	adds	r1, r3, r7
 8003c14:	600a      	str	r2, [r1, #0]
 8003c16:	2390      	movs	r3, #144	; 0x90
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	18fb      	adds	r3, r7, r3
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	60bb      	str	r3, [r7, #8]
 8003c20:	2200      	movs	r2, #0
 8003c22:	60fa      	str	r2, [r7, #12]
 8003c24:	68b8      	ldr	r0, [r7, #8]
 8003c26:	68f9      	ldr	r1, [r7, #12]
 8003c28:	0002      	movs	r2, r0
 8003c2a:	0f52      	lsrs	r2, r2, #29
 8003c2c:	000c      	movs	r4, r1
 8003c2e:	00e4      	lsls	r4, r4, #3
 8003c30:	2694      	movs	r6, #148	; 0x94
 8003c32:	603e      	str	r6, [r7, #0]
 8003c34:	2308      	movs	r3, #8
 8003c36:	18f6      	adds	r6, r6, r3
 8003c38:	19f6      	adds	r6, r6, r7
 8003c3a:	6034      	str	r4, [r6, #0]
 8003c3c:	683c      	ldr	r4, [r7, #0]
 8003c3e:	0023      	movs	r3, r4
 8003c40:	2608      	movs	r6, #8
 8003c42:	19a4      	adds	r4, r4, r6
 8003c44:	19e6      	adds	r6, r4, r7
 8003c46:	6834      	ldr	r4, [r6, #0]
 8003c48:	4314      	orrs	r4, r2
 8003c4a:	001a      	movs	r2, r3
 8003c4c:	2308      	movs	r3, #8
 8003c4e:	18d3      	adds	r3, r2, r3
 8003c50:	19da      	adds	r2, r3, r7
 8003c52:	6014      	str	r4, [r2, #0]
 8003c54:	0002      	movs	r2, r0
 8003c56:	00d2      	lsls	r2, r2, #3
 8003c58:	2190      	movs	r1, #144	; 0x90
 8003c5a:	2308      	movs	r3, #8
 8003c5c:	18cb      	adds	r3, r1, r3
 8003c5e:	19d9      	adds	r1, r3, r7
 8003c60:	600a      	str	r2, [r1, #0]
 8003c62:	2390      	movs	r3, #144	; 0x90
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	18fb      	adds	r3, r7, r3
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	3307      	adds	r3, #7
 8003c6c:	08db      	lsrs	r3, r3, #3
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	466a      	mov	r2, sp
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	469d      	mov	sp, r3
 8003c76:	ab02      	add	r3, sp, #8
 8003c78:	3300      	adds	r3, #0
 8003c7a:	2292      	movs	r2, #146	; 0x92
 8003c7c:	0052      	lsls	r2, r2, #1
 8003c7e:	2108      	movs	r1, #8
 8003c80:	1852      	adds	r2, r2, r1
 8003c82:	19d2      	adds	r2, r2, r7
 8003c84:	6013      	str	r3, [r2, #0]
				X_increment=0x10;
 8003c86:	233f      	movs	r3, #63	; 0x3f
 8003c88:	268c      	movs	r6, #140	; 0x8c
 8003c8a:	0076      	lsls	r6, r6, #1
 8003c8c:	199b      	adds	r3, r3, r6
 8003c8e:	2208      	movs	r2, #8
 8003c90:	4694      	mov	ip, r2
 8003c92:	44bc      	add	ip, r7
 8003c94:	4463      	add	r3, ip
 8003c96:	2210      	movs	r2, #16
 8003c98:	701a      	strb	r2, [r3, #0]
				ASCII_height=0x26;
 8003c9a:	233e      	movs	r3, #62	; 0x3e
 8003c9c:	199b      	adds	r3, r3, r6
 8003c9e:	2208      	movs	r2, #8
 8003ca0:	4694      	mov	ip, r2
 8003ca2:	44bc      	add	ip, r7
 8003ca4:	4463      	add	r3, ip
 8003ca6:	2226      	movs	r2, #38	; 0x26
 8003ca8:	701a      	strb	r2, [r3, #0]
				for(i=0;i<strLen;i++){
 8003caa:	2362      	movs	r3, #98	; 0x62
 8003cac:	199b      	adds	r3, r3, r6
 8003cae:	2208      	movs	r2, #8
 8003cb0:	4694      	mov	ip, r2
 8003cb2:	44bc      	add	ip, r7
 8003cb4:	4463      	add	r3, ip
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	801a      	strh	r2, [r3, #0]
 8003cba:	f000 fd30 	bl	800471e <printASCIIarray+0x1986>
					if(dataASCII[i]==0x20){dataASCII[i]=0x00;}
 8003cbe:	2162      	movs	r1, #98	; 0x62
 8003cc0:	248c      	movs	r4, #140	; 0x8c
 8003cc2:	0064      	lsls	r4, r4, #1
 8003cc4:	190b      	adds	r3, r1, r4
 8003cc6:	2208      	movs	r2, #8
 8003cc8:	4694      	mov	ip, r2
 8003cca:	44bc      	add	ip, r7
 8003ccc:	4463      	add	r3, ip
 8003cce:	881b      	ldrh	r3, [r3, #0]
 8003cd0:	2080      	movs	r0, #128	; 0x80
 8003cd2:	1902      	adds	r2, r0, r4
 8003cd4:	2608      	movs	r6, #8
 8003cd6:	46b4      	mov	ip, r6
 8003cd8:	2608      	movs	r6, #8
 8003cda:	46b0      	mov	r8, r6
 8003cdc:	44b8      	add	r8, r7
 8003cde:	44c4      	add	ip, r8
 8003ce0:	4462      	add	r2, ip
 8003ce2:	6812      	ldr	r2, [r2, #0]
 8003ce4:	18d3      	adds	r3, r2, r3
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	2b20      	cmp	r3, #32
 8003cea:	d111      	bne.n	8003d10 <printASCIIarray+0xf78>
 8003cec:	190b      	adds	r3, r1, r4
 8003cee:	2208      	movs	r2, #8
 8003cf0:	4694      	mov	ip, r2
 8003cf2:	44bc      	add	ip, r7
 8003cf4:	4463      	add	r3, ip
 8003cf6:	881b      	ldrh	r3, [r3, #0]
 8003cf8:	1902      	adds	r2, r0, r4
 8003cfa:	2108      	movs	r1, #8
 8003cfc:	468c      	mov	ip, r1
 8003cfe:	2108      	movs	r1, #8
 8003d00:	4688      	mov	r8, r1
 8003d02:	44b8      	add	r8, r7
 8003d04:	44c4      	add	ip, r8
 8003d06:	4462      	add	r2, ip
 8003d08:	6812      	ldr	r2, [r2, #0]
 8003d0a:	18d3      	adds	r3, r2, r3
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x21){dataASCII[i]=0x01;}
 8003d10:	2162      	movs	r1, #98	; 0x62
 8003d12:	248c      	movs	r4, #140	; 0x8c
 8003d14:	0064      	lsls	r4, r4, #1
 8003d16:	190b      	adds	r3, r1, r4
 8003d18:	2208      	movs	r2, #8
 8003d1a:	4694      	mov	ip, r2
 8003d1c:	44bc      	add	ip, r7
 8003d1e:	4463      	add	r3, ip
 8003d20:	881b      	ldrh	r3, [r3, #0]
 8003d22:	2080      	movs	r0, #128	; 0x80
 8003d24:	1902      	adds	r2, r0, r4
 8003d26:	2608      	movs	r6, #8
 8003d28:	46b4      	mov	ip, r6
 8003d2a:	2608      	movs	r6, #8
 8003d2c:	46b0      	mov	r8, r6
 8003d2e:	44b8      	add	r8, r7
 8003d30:	44c4      	add	ip, r8
 8003d32:	4462      	add	r2, ip
 8003d34:	6812      	ldr	r2, [r2, #0]
 8003d36:	18d3      	adds	r3, r2, r3
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	2b21      	cmp	r3, #33	; 0x21
 8003d3c:	d111      	bne.n	8003d62 <printASCIIarray+0xfca>
 8003d3e:	190b      	adds	r3, r1, r4
 8003d40:	2208      	movs	r2, #8
 8003d42:	4694      	mov	ip, r2
 8003d44:	44bc      	add	ip, r7
 8003d46:	4463      	add	r3, ip
 8003d48:	881b      	ldrh	r3, [r3, #0]
 8003d4a:	1902      	adds	r2, r0, r4
 8003d4c:	2108      	movs	r1, #8
 8003d4e:	468c      	mov	ip, r1
 8003d50:	2108      	movs	r1, #8
 8003d52:	4688      	mov	r8, r1
 8003d54:	44b8      	add	r8, r7
 8003d56:	44c4      	add	ip, r8
 8003d58:	4462      	add	r2, ip
 8003d5a:	6812      	ldr	r2, [r2, #0]
 8003d5c:	18d3      	adds	r3, r2, r3
 8003d5e:	2201      	movs	r2, #1
 8003d60:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x25){dataASCII[i]=0x02;}
 8003d62:	2162      	movs	r1, #98	; 0x62
 8003d64:	248c      	movs	r4, #140	; 0x8c
 8003d66:	0064      	lsls	r4, r4, #1
 8003d68:	190b      	adds	r3, r1, r4
 8003d6a:	2208      	movs	r2, #8
 8003d6c:	4694      	mov	ip, r2
 8003d6e:	44bc      	add	ip, r7
 8003d70:	4463      	add	r3, ip
 8003d72:	881b      	ldrh	r3, [r3, #0]
 8003d74:	2080      	movs	r0, #128	; 0x80
 8003d76:	1902      	adds	r2, r0, r4
 8003d78:	2608      	movs	r6, #8
 8003d7a:	46b4      	mov	ip, r6
 8003d7c:	2608      	movs	r6, #8
 8003d7e:	46b0      	mov	r8, r6
 8003d80:	44b8      	add	r8, r7
 8003d82:	44c4      	add	ip, r8
 8003d84:	4462      	add	r2, ip
 8003d86:	6812      	ldr	r2, [r2, #0]
 8003d88:	18d3      	adds	r3, r2, r3
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	2b25      	cmp	r3, #37	; 0x25
 8003d8e:	d111      	bne.n	8003db4 <printASCIIarray+0x101c>
 8003d90:	190b      	adds	r3, r1, r4
 8003d92:	2208      	movs	r2, #8
 8003d94:	4694      	mov	ip, r2
 8003d96:	44bc      	add	ip, r7
 8003d98:	4463      	add	r3, ip
 8003d9a:	881b      	ldrh	r3, [r3, #0]
 8003d9c:	1902      	adds	r2, r0, r4
 8003d9e:	2108      	movs	r1, #8
 8003da0:	468c      	mov	ip, r1
 8003da2:	2108      	movs	r1, #8
 8003da4:	4688      	mov	r8, r1
 8003da6:	44b8      	add	r8, r7
 8003da8:	44c4      	add	ip, r8
 8003daa:	4462      	add	r2, ip
 8003dac:	6812      	ldr	r2, [r2, #0]
 8003dae:	18d3      	adds	r3, r2, r3
 8003db0:	2202      	movs	r2, #2
 8003db2:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x28){dataASCII[i]=0x03;}
 8003db4:	2162      	movs	r1, #98	; 0x62
 8003db6:	248c      	movs	r4, #140	; 0x8c
 8003db8:	0064      	lsls	r4, r4, #1
 8003dba:	190b      	adds	r3, r1, r4
 8003dbc:	2208      	movs	r2, #8
 8003dbe:	4694      	mov	ip, r2
 8003dc0:	44bc      	add	ip, r7
 8003dc2:	4463      	add	r3, ip
 8003dc4:	881b      	ldrh	r3, [r3, #0]
 8003dc6:	2080      	movs	r0, #128	; 0x80
 8003dc8:	1902      	adds	r2, r0, r4
 8003dca:	2608      	movs	r6, #8
 8003dcc:	46b4      	mov	ip, r6
 8003dce:	2608      	movs	r6, #8
 8003dd0:	46b0      	mov	r8, r6
 8003dd2:	44b8      	add	r8, r7
 8003dd4:	44c4      	add	ip, r8
 8003dd6:	4462      	add	r2, ip
 8003dd8:	6812      	ldr	r2, [r2, #0]
 8003dda:	18d3      	adds	r3, r2, r3
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	2b28      	cmp	r3, #40	; 0x28
 8003de0:	d111      	bne.n	8003e06 <printASCIIarray+0x106e>
 8003de2:	190b      	adds	r3, r1, r4
 8003de4:	2208      	movs	r2, #8
 8003de6:	4694      	mov	ip, r2
 8003de8:	44bc      	add	ip, r7
 8003dea:	4463      	add	r3, ip
 8003dec:	881b      	ldrh	r3, [r3, #0]
 8003dee:	1902      	adds	r2, r0, r4
 8003df0:	2108      	movs	r1, #8
 8003df2:	468c      	mov	ip, r1
 8003df4:	2108      	movs	r1, #8
 8003df6:	4688      	mov	r8, r1
 8003df8:	44b8      	add	r8, r7
 8003dfa:	44c4      	add	ip, r8
 8003dfc:	4462      	add	r2, ip
 8003dfe:	6812      	ldr	r2, [r2, #0]
 8003e00:	18d3      	adds	r3, r2, r3
 8003e02:	2203      	movs	r2, #3
 8003e04:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x29){dataASCII[i]=0x04;}
 8003e06:	2162      	movs	r1, #98	; 0x62
 8003e08:	248c      	movs	r4, #140	; 0x8c
 8003e0a:	0064      	lsls	r4, r4, #1
 8003e0c:	190b      	adds	r3, r1, r4
 8003e0e:	2208      	movs	r2, #8
 8003e10:	4694      	mov	ip, r2
 8003e12:	44bc      	add	ip, r7
 8003e14:	4463      	add	r3, ip
 8003e16:	881b      	ldrh	r3, [r3, #0]
 8003e18:	2080      	movs	r0, #128	; 0x80
 8003e1a:	1902      	adds	r2, r0, r4
 8003e1c:	2608      	movs	r6, #8
 8003e1e:	46b4      	mov	ip, r6
 8003e20:	2608      	movs	r6, #8
 8003e22:	46b0      	mov	r8, r6
 8003e24:	44b8      	add	r8, r7
 8003e26:	44c4      	add	ip, r8
 8003e28:	4462      	add	r2, ip
 8003e2a:	6812      	ldr	r2, [r2, #0]
 8003e2c:	18d3      	adds	r3, r2, r3
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	2b29      	cmp	r3, #41	; 0x29
 8003e32:	d111      	bne.n	8003e58 <printASCIIarray+0x10c0>
 8003e34:	190b      	adds	r3, r1, r4
 8003e36:	2208      	movs	r2, #8
 8003e38:	4694      	mov	ip, r2
 8003e3a:	44bc      	add	ip, r7
 8003e3c:	4463      	add	r3, ip
 8003e3e:	881b      	ldrh	r3, [r3, #0]
 8003e40:	1902      	adds	r2, r0, r4
 8003e42:	2108      	movs	r1, #8
 8003e44:	468c      	mov	ip, r1
 8003e46:	2108      	movs	r1, #8
 8003e48:	4688      	mov	r8, r1
 8003e4a:	44b8      	add	r8, r7
 8003e4c:	44c4      	add	ip, r8
 8003e4e:	4462      	add	r2, ip
 8003e50:	6812      	ldr	r2, [r2, #0]
 8003e52:	18d3      	adds	r3, r2, r3
 8003e54:	2204      	movs	r2, #4
 8003e56:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2a){dataASCII[i]=0x05;}
 8003e58:	2162      	movs	r1, #98	; 0x62
 8003e5a:	248c      	movs	r4, #140	; 0x8c
 8003e5c:	0064      	lsls	r4, r4, #1
 8003e5e:	190b      	adds	r3, r1, r4
 8003e60:	2208      	movs	r2, #8
 8003e62:	4694      	mov	ip, r2
 8003e64:	44bc      	add	ip, r7
 8003e66:	4463      	add	r3, ip
 8003e68:	881b      	ldrh	r3, [r3, #0]
 8003e6a:	2080      	movs	r0, #128	; 0x80
 8003e6c:	1902      	adds	r2, r0, r4
 8003e6e:	2608      	movs	r6, #8
 8003e70:	46b4      	mov	ip, r6
 8003e72:	2608      	movs	r6, #8
 8003e74:	46b0      	mov	r8, r6
 8003e76:	44b8      	add	r8, r7
 8003e78:	44c4      	add	ip, r8
 8003e7a:	4462      	add	r2, ip
 8003e7c:	6812      	ldr	r2, [r2, #0]
 8003e7e:	18d3      	adds	r3, r2, r3
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	2b2a      	cmp	r3, #42	; 0x2a
 8003e84:	d111      	bne.n	8003eaa <printASCIIarray+0x1112>
 8003e86:	190b      	adds	r3, r1, r4
 8003e88:	2208      	movs	r2, #8
 8003e8a:	4694      	mov	ip, r2
 8003e8c:	44bc      	add	ip, r7
 8003e8e:	4463      	add	r3, ip
 8003e90:	881b      	ldrh	r3, [r3, #0]
 8003e92:	1902      	adds	r2, r0, r4
 8003e94:	2108      	movs	r1, #8
 8003e96:	468c      	mov	ip, r1
 8003e98:	2108      	movs	r1, #8
 8003e9a:	4688      	mov	r8, r1
 8003e9c:	44b8      	add	r8, r7
 8003e9e:	44c4      	add	ip, r8
 8003ea0:	4462      	add	r2, ip
 8003ea2:	6812      	ldr	r2, [r2, #0]
 8003ea4:	18d3      	adds	r3, r2, r3
 8003ea6:	2205      	movs	r2, #5
 8003ea8:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2b){dataASCII[i]=0x06;}
 8003eaa:	2162      	movs	r1, #98	; 0x62
 8003eac:	248c      	movs	r4, #140	; 0x8c
 8003eae:	0064      	lsls	r4, r4, #1
 8003eb0:	190b      	adds	r3, r1, r4
 8003eb2:	2208      	movs	r2, #8
 8003eb4:	4694      	mov	ip, r2
 8003eb6:	44bc      	add	ip, r7
 8003eb8:	4463      	add	r3, ip
 8003eba:	881b      	ldrh	r3, [r3, #0]
 8003ebc:	2080      	movs	r0, #128	; 0x80
 8003ebe:	1902      	adds	r2, r0, r4
 8003ec0:	2608      	movs	r6, #8
 8003ec2:	46b4      	mov	ip, r6
 8003ec4:	2608      	movs	r6, #8
 8003ec6:	46b0      	mov	r8, r6
 8003ec8:	44b8      	add	r8, r7
 8003eca:	44c4      	add	ip, r8
 8003ecc:	4462      	add	r2, ip
 8003ece:	6812      	ldr	r2, [r2, #0]
 8003ed0:	18d3      	adds	r3, r2, r3
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	2b2b      	cmp	r3, #43	; 0x2b
 8003ed6:	d111      	bne.n	8003efc <printASCIIarray+0x1164>
 8003ed8:	190b      	adds	r3, r1, r4
 8003eda:	2208      	movs	r2, #8
 8003edc:	4694      	mov	ip, r2
 8003ede:	44bc      	add	ip, r7
 8003ee0:	4463      	add	r3, ip
 8003ee2:	881b      	ldrh	r3, [r3, #0]
 8003ee4:	1902      	adds	r2, r0, r4
 8003ee6:	2108      	movs	r1, #8
 8003ee8:	468c      	mov	ip, r1
 8003eea:	2108      	movs	r1, #8
 8003eec:	4688      	mov	r8, r1
 8003eee:	44b8      	add	r8, r7
 8003ef0:	44c4      	add	ip, r8
 8003ef2:	4462      	add	r2, ip
 8003ef4:	6812      	ldr	r2, [r2, #0]
 8003ef6:	18d3      	adds	r3, r2, r3
 8003ef8:	2206      	movs	r2, #6
 8003efa:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2c){dataASCII[i]=0x07;}
 8003efc:	2162      	movs	r1, #98	; 0x62
 8003efe:	248c      	movs	r4, #140	; 0x8c
 8003f00:	0064      	lsls	r4, r4, #1
 8003f02:	190b      	adds	r3, r1, r4
 8003f04:	2208      	movs	r2, #8
 8003f06:	4694      	mov	ip, r2
 8003f08:	44bc      	add	ip, r7
 8003f0a:	4463      	add	r3, ip
 8003f0c:	881b      	ldrh	r3, [r3, #0]
 8003f0e:	2080      	movs	r0, #128	; 0x80
 8003f10:	1902      	adds	r2, r0, r4
 8003f12:	2608      	movs	r6, #8
 8003f14:	46b4      	mov	ip, r6
 8003f16:	2608      	movs	r6, #8
 8003f18:	46b0      	mov	r8, r6
 8003f1a:	44b8      	add	r8, r7
 8003f1c:	44c4      	add	ip, r8
 8003f1e:	4462      	add	r2, ip
 8003f20:	6812      	ldr	r2, [r2, #0]
 8003f22:	18d3      	adds	r3, r2, r3
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	2b2c      	cmp	r3, #44	; 0x2c
 8003f28:	d111      	bne.n	8003f4e <printASCIIarray+0x11b6>
 8003f2a:	190b      	adds	r3, r1, r4
 8003f2c:	2208      	movs	r2, #8
 8003f2e:	4694      	mov	ip, r2
 8003f30:	44bc      	add	ip, r7
 8003f32:	4463      	add	r3, ip
 8003f34:	881b      	ldrh	r3, [r3, #0]
 8003f36:	1902      	adds	r2, r0, r4
 8003f38:	2108      	movs	r1, #8
 8003f3a:	468c      	mov	ip, r1
 8003f3c:	2108      	movs	r1, #8
 8003f3e:	4688      	mov	r8, r1
 8003f40:	44b8      	add	r8, r7
 8003f42:	44c4      	add	ip, r8
 8003f44:	4462      	add	r2, ip
 8003f46:	6812      	ldr	r2, [r2, #0]
 8003f48:	18d3      	adds	r3, r2, r3
 8003f4a:	2207      	movs	r2, #7
 8003f4c:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2d){dataASCII[i]=0x08;}
 8003f4e:	2162      	movs	r1, #98	; 0x62
 8003f50:	248c      	movs	r4, #140	; 0x8c
 8003f52:	0064      	lsls	r4, r4, #1
 8003f54:	190b      	adds	r3, r1, r4
 8003f56:	2208      	movs	r2, #8
 8003f58:	4694      	mov	ip, r2
 8003f5a:	44bc      	add	ip, r7
 8003f5c:	4463      	add	r3, ip
 8003f5e:	881b      	ldrh	r3, [r3, #0]
 8003f60:	2080      	movs	r0, #128	; 0x80
 8003f62:	1902      	adds	r2, r0, r4
 8003f64:	2608      	movs	r6, #8
 8003f66:	46b4      	mov	ip, r6
 8003f68:	2608      	movs	r6, #8
 8003f6a:	46b0      	mov	r8, r6
 8003f6c:	44b8      	add	r8, r7
 8003f6e:	44c4      	add	ip, r8
 8003f70:	4462      	add	r2, ip
 8003f72:	6812      	ldr	r2, [r2, #0]
 8003f74:	18d3      	adds	r3, r2, r3
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	2b2d      	cmp	r3, #45	; 0x2d
 8003f7a:	d111      	bne.n	8003fa0 <printASCIIarray+0x1208>
 8003f7c:	190b      	adds	r3, r1, r4
 8003f7e:	2208      	movs	r2, #8
 8003f80:	4694      	mov	ip, r2
 8003f82:	44bc      	add	ip, r7
 8003f84:	4463      	add	r3, ip
 8003f86:	881b      	ldrh	r3, [r3, #0]
 8003f88:	1902      	adds	r2, r0, r4
 8003f8a:	2108      	movs	r1, #8
 8003f8c:	468c      	mov	ip, r1
 8003f8e:	2108      	movs	r1, #8
 8003f90:	4688      	mov	r8, r1
 8003f92:	44b8      	add	r8, r7
 8003f94:	44c4      	add	ip, r8
 8003f96:	4462      	add	r2, ip
 8003f98:	6812      	ldr	r2, [r2, #0]
 8003f9a:	18d3      	adds	r3, r2, r3
 8003f9c:	2208      	movs	r2, #8
 8003f9e:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2e){dataASCII[i]=0x09;}
 8003fa0:	2162      	movs	r1, #98	; 0x62
 8003fa2:	248c      	movs	r4, #140	; 0x8c
 8003fa4:	0064      	lsls	r4, r4, #1
 8003fa6:	190b      	adds	r3, r1, r4
 8003fa8:	2208      	movs	r2, #8
 8003faa:	4694      	mov	ip, r2
 8003fac:	44bc      	add	ip, r7
 8003fae:	4463      	add	r3, ip
 8003fb0:	881b      	ldrh	r3, [r3, #0]
 8003fb2:	2080      	movs	r0, #128	; 0x80
 8003fb4:	1902      	adds	r2, r0, r4
 8003fb6:	2608      	movs	r6, #8
 8003fb8:	46b4      	mov	ip, r6
 8003fba:	2608      	movs	r6, #8
 8003fbc:	46b0      	mov	r8, r6
 8003fbe:	44b8      	add	r8, r7
 8003fc0:	44c4      	add	ip, r8
 8003fc2:	4462      	add	r2, ip
 8003fc4:	6812      	ldr	r2, [r2, #0]
 8003fc6:	18d3      	adds	r3, r2, r3
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	2b2e      	cmp	r3, #46	; 0x2e
 8003fcc:	d111      	bne.n	8003ff2 <printASCIIarray+0x125a>
 8003fce:	190b      	adds	r3, r1, r4
 8003fd0:	2208      	movs	r2, #8
 8003fd2:	4694      	mov	ip, r2
 8003fd4:	44bc      	add	ip, r7
 8003fd6:	4463      	add	r3, ip
 8003fd8:	881b      	ldrh	r3, [r3, #0]
 8003fda:	1902      	adds	r2, r0, r4
 8003fdc:	2108      	movs	r1, #8
 8003fde:	468c      	mov	ip, r1
 8003fe0:	2108      	movs	r1, #8
 8003fe2:	4688      	mov	r8, r1
 8003fe4:	44b8      	add	r8, r7
 8003fe6:	44c4      	add	ip, r8
 8003fe8:	4462      	add	r2, ip
 8003fea:	6812      	ldr	r2, [r2, #0]
 8003fec:	18d3      	adds	r3, r2, r3
 8003fee:	2209      	movs	r2, #9
 8003ff0:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2f){dataASCII[i]=0x0a;}
 8003ff2:	2162      	movs	r1, #98	; 0x62
 8003ff4:	248c      	movs	r4, #140	; 0x8c
 8003ff6:	0064      	lsls	r4, r4, #1
 8003ff8:	190b      	adds	r3, r1, r4
 8003ffa:	2208      	movs	r2, #8
 8003ffc:	4694      	mov	ip, r2
 8003ffe:	44bc      	add	ip, r7
 8004000:	4463      	add	r3, ip
 8004002:	881b      	ldrh	r3, [r3, #0]
 8004004:	2080      	movs	r0, #128	; 0x80
 8004006:	1902      	adds	r2, r0, r4
 8004008:	2608      	movs	r6, #8
 800400a:	46b4      	mov	ip, r6
 800400c:	2608      	movs	r6, #8
 800400e:	46b0      	mov	r8, r6
 8004010:	44b8      	add	r8, r7
 8004012:	44c4      	add	ip, r8
 8004014:	4462      	add	r2, ip
 8004016:	6812      	ldr	r2, [r2, #0]
 8004018:	18d3      	adds	r3, r2, r3
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	2b2f      	cmp	r3, #47	; 0x2f
 800401e:	d111      	bne.n	8004044 <printASCIIarray+0x12ac>
 8004020:	190b      	adds	r3, r1, r4
 8004022:	2208      	movs	r2, #8
 8004024:	4694      	mov	ip, r2
 8004026:	44bc      	add	ip, r7
 8004028:	4463      	add	r3, ip
 800402a:	881b      	ldrh	r3, [r3, #0]
 800402c:	1902      	adds	r2, r0, r4
 800402e:	2108      	movs	r1, #8
 8004030:	468c      	mov	ip, r1
 8004032:	2108      	movs	r1, #8
 8004034:	4688      	mov	r8, r1
 8004036:	44b8      	add	r8, r7
 8004038:	44c4      	add	ip, r8
 800403a:	4462      	add	r2, ip
 800403c:	6812      	ldr	r2, [r2, #0]
 800403e:	18d3      	adds	r3, r2, r3
 8004040:	220a      	movs	r2, #10
 8004042:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x30){dataASCII[i]=0x0b;}
 8004044:	2162      	movs	r1, #98	; 0x62
 8004046:	248c      	movs	r4, #140	; 0x8c
 8004048:	0064      	lsls	r4, r4, #1
 800404a:	190b      	adds	r3, r1, r4
 800404c:	2208      	movs	r2, #8
 800404e:	4694      	mov	ip, r2
 8004050:	44bc      	add	ip, r7
 8004052:	4463      	add	r3, ip
 8004054:	881b      	ldrh	r3, [r3, #0]
 8004056:	2080      	movs	r0, #128	; 0x80
 8004058:	1902      	adds	r2, r0, r4
 800405a:	2608      	movs	r6, #8
 800405c:	46b4      	mov	ip, r6
 800405e:	2608      	movs	r6, #8
 8004060:	46b0      	mov	r8, r6
 8004062:	44b8      	add	r8, r7
 8004064:	44c4      	add	ip, r8
 8004066:	4462      	add	r2, ip
 8004068:	6812      	ldr	r2, [r2, #0]
 800406a:	18d3      	adds	r3, r2, r3
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	2b30      	cmp	r3, #48	; 0x30
 8004070:	d111      	bne.n	8004096 <printASCIIarray+0x12fe>
 8004072:	190b      	adds	r3, r1, r4
 8004074:	2208      	movs	r2, #8
 8004076:	4694      	mov	ip, r2
 8004078:	44bc      	add	ip, r7
 800407a:	4463      	add	r3, ip
 800407c:	881b      	ldrh	r3, [r3, #0]
 800407e:	1902      	adds	r2, r0, r4
 8004080:	2108      	movs	r1, #8
 8004082:	468c      	mov	ip, r1
 8004084:	2108      	movs	r1, #8
 8004086:	4688      	mov	r8, r1
 8004088:	44b8      	add	r8, r7
 800408a:	44c4      	add	ip, r8
 800408c:	4462      	add	r2, ip
 800408e:	6812      	ldr	r2, [r2, #0]
 8004090:	18d3      	adds	r3, r2, r3
 8004092:	220b      	movs	r2, #11
 8004094:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x31){dataASCII[i]=0x0c;}
 8004096:	2162      	movs	r1, #98	; 0x62
 8004098:	248c      	movs	r4, #140	; 0x8c
 800409a:	0064      	lsls	r4, r4, #1
 800409c:	190b      	adds	r3, r1, r4
 800409e:	2208      	movs	r2, #8
 80040a0:	4694      	mov	ip, r2
 80040a2:	44bc      	add	ip, r7
 80040a4:	4463      	add	r3, ip
 80040a6:	881b      	ldrh	r3, [r3, #0]
 80040a8:	2080      	movs	r0, #128	; 0x80
 80040aa:	1902      	adds	r2, r0, r4
 80040ac:	2608      	movs	r6, #8
 80040ae:	46b4      	mov	ip, r6
 80040b0:	2608      	movs	r6, #8
 80040b2:	46b0      	mov	r8, r6
 80040b4:	44b8      	add	r8, r7
 80040b6:	44c4      	add	ip, r8
 80040b8:	4462      	add	r2, ip
 80040ba:	6812      	ldr	r2, [r2, #0]
 80040bc:	18d3      	adds	r3, r2, r3
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	2b31      	cmp	r3, #49	; 0x31
 80040c2:	d111      	bne.n	80040e8 <printASCIIarray+0x1350>
 80040c4:	190b      	adds	r3, r1, r4
 80040c6:	2208      	movs	r2, #8
 80040c8:	4694      	mov	ip, r2
 80040ca:	44bc      	add	ip, r7
 80040cc:	4463      	add	r3, ip
 80040ce:	881b      	ldrh	r3, [r3, #0]
 80040d0:	1902      	adds	r2, r0, r4
 80040d2:	2108      	movs	r1, #8
 80040d4:	468c      	mov	ip, r1
 80040d6:	2108      	movs	r1, #8
 80040d8:	4688      	mov	r8, r1
 80040da:	44b8      	add	r8, r7
 80040dc:	44c4      	add	ip, r8
 80040de:	4462      	add	r2, ip
 80040e0:	6812      	ldr	r2, [r2, #0]
 80040e2:	18d3      	adds	r3, r2, r3
 80040e4:	220c      	movs	r2, #12
 80040e6:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x32){dataASCII[i]=0x0d;}
 80040e8:	2162      	movs	r1, #98	; 0x62
 80040ea:	248c      	movs	r4, #140	; 0x8c
 80040ec:	0064      	lsls	r4, r4, #1
 80040ee:	190b      	adds	r3, r1, r4
 80040f0:	2208      	movs	r2, #8
 80040f2:	4694      	mov	ip, r2
 80040f4:	44bc      	add	ip, r7
 80040f6:	4463      	add	r3, ip
 80040f8:	881b      	ldrh	r3, [r3, #0]
 80040fa:	2080      	movs	r0, #128	; 0x80
 80040fc:	1902      	adds	r2, r0, r4
 80040fe:	2608      	movs	r6, #8
 8004100:	46b4      	mov	ip, r6
 8004102:	2608      	movs	r6, #8
 8004104:	46b0      	mov	r8, r6
 8004106:	44b8      	add	r8, r7
 8004108:	44c4      	add	ip, r8
 800410a:	4462      	add	r2, ip
 800410c:	6812      	ldr	r2, [r2, #0]
 800410e:	18d3      	adds	r3, r2, r3
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	2b32      	cmp	r3, #50	; 0x32
 8004114:	d111      	bne.n	800413a <printASCIIarray+0x13a2>
 8004116:	190b      	adds	r3, r1, r4
 8004118:	2208      	movs	r2, #8
 800411a:	4694      	mov	ip, r2
 800411c:	44bc      	add	ip, r7
 800411e:	4463      	add	r3, ip
 8004120:	881b      	ldrh	r3, [r3, #0]
 8004122:	1902      	adds	r2, r0, r4
 8004124:	2108      	movs	r1, #8
 8004126:	468c      	mov	ip, r1
 8004128:	2108      	movs	r1, #8
 800412a:	4688      	mov	r8, r1
 800412c:	44b8      	add	r8, r7
 800412e:	44c4      	add	ip, r8
 8004130:	4462      	add	r2, ip
 8004132:	6812      	ldr	r2, [r2, #0]
 8004134:	18d3      	adds	r3, r2, r3
 8004136:	220d      	movs	r2, #13
 8004138:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x33){dataASCII[i]=0x0e;}
 800413a:	2162      	movs	r1, #98	; 0x62
 800413c:	248c      	movs	r4, #140	; 0x8c
 800413e:	0064      	lsls	r4, r4, #1
 8004140:	190b      	adds	r3, r1, r4
 8004142:	2208      	movs	r2, #8
 8004144:	4694      	mov	ip, r2
 8004146:	44bc      	add	ip, r7
 8004148:	4463      	add	r3, ip
 800414a:	881b      	ldrh	r3, [r3, #0]
 800414c:	2080      	movs	r0, #128	; 0x80
 800414e:	1902      	adds	r2, r0, r4
 8004150:	2608      	movs	r6, #8
 8004152:	46b4      	mov	ip, r6
 8004154:	2608      	movs	r6, #8
 8004156:	46b0      	mov	r8, r6
 8004158:	44b8      	add	r8, r7
 800415a:	44c4      	add	ip, r8
 800415c:	4462      	add	r2, ip
 800415e:	6812      	ldr	r2, [r2, #0]
 8004160:	18d3      	adds	r3, r2, r3
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	2b33      	cmp	r3, #51	; 0x33
 8004166:	d111      	bne.n	800418c <printASCIIarray+0x13f4>
 8004168:	190b      	adds	r3, r1, r4
 800416a:	2208      	movs	r2, #8
 800416c:	4694      	mov	ip, r2
 800416e:	44bc      	add	ip, r7
 8004170:	4463      	add	r3, ip
 8004172:	881b      	ldrh	r3, [r3, #0]
 8004174:	1902      	adds	r2, r0, r4
 8004176:	2108      	movs	r1, #8
 8004178:	468c      	mov	ip, r1
 800417a:	2108      	movs	r1, #8
 800417c:	4688      	mov	r8, r1
 800417e:	44b8      	add	r8, r7
 8004180:	44c4      	add	ip, r8
 8004182:	4462      	add	r2, ip
 8004184:	6812      	ldr	r2, [r2, #0]
 8004186:	18d3      	adds	r3, r2, r3
 8004188:	220e      	movs	r2, #14
 800418a:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x34){dataASCII[i]=0x0f;}
 800418c:	2162      	movs	r1, #98	; 0x62
 800418e:	248c      	movs	r4, #140	; 0x8c
 8004190:	0064      	lsls	r4, r4, #1
 8004192:	190b      	adds	r3, r1, r4
 8004194:	2208      	movs	r2, #8
 8004196:	4694      	mov	ip, r2
 8004198:	44bc      	add	ip, r7
 800419a:	4463      	add	r3, ip
 800419c:	881b      	ldrh	r3, [r3, #0]
 800419e:	2080      	movs	r0, #128	; 0x80
 80041a0:	1902      	adds	r2, r0, r4
 80041a2:	2608      	movs	r6, #8
 80041a4:	46b4      	mov	ip, r6
 80041a6:	2608      	movs	r6, #8
 80041a8:	46b0      	mov	r8, r6
 80041aa:	44b8      	add	r8, r7
 80041ac:	44c4      	add	ip, r8
 80041ae:	4462      	add	r2, ip
 80041b0:	6812      	ldr	r2, [r2, #0]
 80041b2:	18d3      	adds	r3, r2, r3
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	2b34      	cmp	r3, #52	; 0x34
 80041b8:	d111      	bne.n	80041de <printASCIIarray+0x1446>
 80041ba:	190b      	adds	r3, r1, r4
 80041bc:	2208      	movs	r2, #8
 80041be:	4694      	mov	ip, r2
 80041c0:	44bc      	add	ip, r7
 80041c2:	4463      	add	r3, ip
 80041c4:	881b      	ldrh	r3, [r3, #0]
 80041c6:	1902      	adds	r2, r0, r4
 80041c8:	2108      	movs	r1, #8
 80041ca:	468c      	mov	ip, r1
 80041cc:	2108      	movs	r1, #8
 80041ce:	4688      	mov	r8, r1
 80041d0:	44b8      	add	r8, r7
 80041d2:	44c4      	add	ip, r8
 80041d4:	4462      	add	r2, ip
 80041d6:	6812      	ldr	r2, [r2, #0]
 80041d8:	18d3      	adds	r3, r2, r3
 80041da:	220f      	movs	r2, #15
 80041dc:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x35){dataASCII[i]=0x10;}
 80041de:	2162      	movs	r1, #98	; 0x62
 80041e0:	248c      	movs	r4, #140	; 0x8c
 80041e2:	0064      	lsls	r4, r4, #1
 80041e4:	190b      	adds	r3, r1, r4
 80041e6:	2208      	movs	r2, #8
 80041e8:	4694      	mov	ip, r2
 80041ea:	44bc      	add	ip, r7
 80041ec:	4463      	add	r3, ip
 80041ee:	881b      	ldrh	r3, [r3, #0]
 80041f0:	2080      	movs	r0, #128	; 0x80
 80041f2:	1902      	adds	r2, r0, r4
 80041f4:	2608      	movs	r6, #8
 80041f6:	46b4      	mov	ip, r6
 80041f8:	2608      	movs	r6, #8
 80041fa:	46b0      	mov	r8, r6
 80041fc:	44b8      	add	r8, r7
 80041fe:	44c4      	add	ip, r8
 8004200:	4462      	add	r2, ip
 8004202:	6812      	ldr	r2, [r2, #0]
 8004204:	18d3      	adds	r3, r2, r3
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	2b35      	cmp	r3, #53	; 0x35
 800420a:	d111      	bne.n	8004230 <printASCIIarray+0x1498>
 800420c:	190b      	adds	r3, r1, r4
 800420e:	2208      	movs	r2, #8
 8004210:	4694      	mov	ip, r2
 8004212:	44bc      	add	ip, r7
 8004214:	4463      	add	r3, ip
 8004216:	881b      	ldrh	r3, [r3, #0]
 8004218:	1902      	adds	r2, r0, r4
 800421a:	2108      	movs	r1, #8
 800421c:	468c      	mov	ip, r1
 800421e:	2108      	movs	r1, #8
 8004220:	4688      	mov	r8, r1
 8004222:	44b8      	add	r8, r7
 8004224:	44c4      	add	ip, r8
 8004226:	4462      	add	r2, ip
 8004228:	6812      	ldr	r2, [r2, #0]
 800422a:	18d3      	adds	r3, r2, r3
 800422c:	2210      	movs	r2, #16
 800422e:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x36){dataASCII[i]=0x11;}
 8004230:	2162      	movs	r1, #98	; 0x62
 8004232:	248c      	movs	r4, #140	; 0x8c
 8004234:	0064      	lsls	r4, r4, #1
 8004236:	190b      	adds	r3, r1, r4
 8004238:	2208      	movs	r2, #8
 800423a:	4694      	mov	ip, r2
 800423c:	44bc      	add	ip, r7
 800423e:	4463      	add	r3, ip
 8004240:	881b      	ldrh	r3, [r3, #0]
 8004242:	2080      	movs	r0, #128	; 0x80
 8004244:	1902      	adds	r2, r0, r4
 8004246:	2608      	movs	r6, #8
 8004248:	46b4      	mov	ip, r6
 800424a:	2608      	movs	r6, #8
 800424c:	46b0      	mov	r8, r6
 800424e:	44b8      	add	r8, r7
 8004250:	44c4      	add	ip, r8
 8004252:	4462      	add	r2, ip
 8004254:	6812      	ldr	r2, [r2, #0]
 8004256:	18d3      	adds	r3, r2, r3
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	2b36      	cmp	r3, #54	; 0x36
 800425c:	d111      	bne.n	8004282 <printASCIIarray+0x14ea>
 800425e:	190b      	adds	r3, r1, r4
 8004260:	2208      	movs	r2, #8
 8004262:	4694      	mov	ip, r2
 8004264:	44bc      	add	ip, r7
 8004266:	4463      	add	r3, ip
 8004268:	881b      	ldrh	r3, [r3, #0]
 800426a:	1902      	adds	r2, r0, r4
 800426c:	2108      	movs	r1, #8
 800426e:	468c      	mov	ip, r1
 8004270:	2108      	movs	r1, #8
 8004272:	4688      	mov	r8, r1
 8004274:	44b8      	add	r8, r7
 8004276:	44c4      	add	ip, r8
 8004278:	4462      	add	r2, ip
 800427a:	6812      	ldr	r2, [r2, #0]
 800427c:	18d3      	adds	r3, r2, r3
 800427e:	2211      	movs	r2, #17
 8004280:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x37){dataASCII[i]=0x12;}
 8004282:	2162      	movs	r1, #98	; 0x62
 8004284:	248c      	movs	r4, #140	; 0x8c
 8004286:	0064      	lsls	r4, r4, #1
 8004288:	190b      	adds	r3, r1, r4
 800428a:	2208      	movs	r2, #8
 800428c:	4694      	mov	ip, r2
 800428e:	44bc      	add	ip, r7
 8004290:	4463      	add	r3, ip
 8004292:	881b      	ldrh	r3, [r3, #0]
 8004294:	2080      	movs	r0, #128	; 0x80
 8004296:	1902      	adds	r2, r0, r4
 8004298:	2608      	movs	r6, #8
 800429a:	46b4      	mov	ip, r6
 800429c:	2608      	movs	r6, #8
 800429e:	46b0      	mov	r8, r6
 80042a0:	44b8      	add	r8, r7
 80042a2:	44c4      	add	ip, r8
 80042a4:	4462      	add	r2, ip
 80042a6:	6812      	ldr	r2, [r2, #0]
 80042a8:	18d3      	adds	r3, r2, r3
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	2b37      	cmp	r3, #55	; 0x37
 80042ae:	d111      	bne.n	80042d4 <printASCIIarray+0x153c>
 80042b0:	190b      	adds	r3, r1, r4
 80042b2:	2208      	movs	r2, #8
 80042b4:	4694      	mov	ip, r2
 80042b6:	44bc      	add	ip, r7
 80042b8:	4463      	add	r3, ip
 80042ba:	881b      	ldrh	r3, [r3, #0]
 80042bc:	1902      	adds	r2, r0, r4
 80042be:	2108      	movs	r1, #8
 80042c0:	468c      	mov	ip, r1
 80042c2:	2108      	movs	r1, #8
 80042c4:	4688      	mov	r8, r1
 80042c6:	44b8      	add	r8, r7
 80042c8:	44c4      	add	ip, r8
 80042ca:	4462      	add	r2, ip
 80042cc:	6812      	ldr	r2, [r2, #0]
 80042ce:	18d3      	adds	r3, r2, r3
 80042d0:	2212      	movs	r2, #18
 80042d2:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x38){dataASCII[i]=0x13;}
 80042d4:	2162      	movs	r1, #98	; 0x62
 80042d6:	248c      	movs	r4, #140	; 0x8c
 80042d8:	0064      	lsls	r4, r4, #1
 80042da:	190b      	adds	r3, r1, r4
 80042dc:	2208      	movs	r2, #8
 80042de:	4694      	mov	ip, r2
 80042e0:	44bc      	add	ip, r7
 80042e2:	4463      	add	r3, ip
 80042e4:	881b      	ldrh	r3, [r3, #0]
 80042e6:	2080      	movs	r0, #128	; 0x80
 80042e8:	1902      	adds	r2, r0, r4
 80042ea:	2608      	movs	r6, #8
 80042ec:	46b4      	mov	ip, r6
 80042ee:	2608      	movs	r6, #8
 80042f0:	46b0      	mov	r8, r6
 80042f2:	44b8      	add	r8, r7
 80042f4:	44c4      	add	ip, r8
 80042f6:	4462      	add	r2, ip
 80042f8:	6812      	ldr	r2, [r2, #0]
 80042fa:	18d3      	adds	r3, r2, r3
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	2b38      	cmp	r3, #56	; 0x38
 8004300:	d111      	bne.n	8004326 <printASCIIarray+0x158e>
 8004302:	190b      	adds	r3, r1, r4
 8004304:	2208      	movs	r2, #8
 8004306:	4694      	mov	ip, r2
 8004308:	44bc      	add	ip, r7
 800430a:	4463      	add	r3, ip
 800430c:	881b      	ldrh	r3, [r3, #0]
 800430e:	1902      	adds	r2, r0, r4
 8004310:	2108      	movs	r1, #8
 8004312:	468c      	mov	ip, r1
 8004314:	2108      	movs	r1, #8
 8004316:	4688      	mov	r8, r1
 8004318:	44b8      	add	r8, r7
 800431a:	44c4      	add	ip, r8
 800431c:	4462      	add	r2, ip
 800431e:	6812      	ldr	r2, [r2, #0]
 8004320:	18d3      	adds	r3, r2, r3
 8004322:	2213      	movs	r2, #19
 8004324:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x39){dataASCII[i]=0x14;}
 8004326:	2162      	movs	r1, #98	; 0x62
 8004328:	248c      	movs	r4, #140	; 0x8c
 800432a:	0064      	lsls	r4, r4, #1
 800432c:	190b      	adds	r3, r1, r4
 800432e:	2208      	movs	r2, #8
 8004330:	4694      	mov	ip, r2
 8004332:	44bc      	add	ip, r7
 8004334:	4463      	add	r3, ip
 8004336:	881b      	ldrh	r3, [r3, #0]
 8004338:	2080      	movs	r0, #128	; 0x80
 800433a:	1902      	adds	r2, r0, r4
 800433c:	2608      	movs	r6, #8
 800433e:	46b4      	mov	ip, r6
 8004340:	2608      	movs	r6, #8
 8004342:	46b0      	mov	r8, r6
 8004344:	44b8      	add	r8, r7
 8004346:	44c4      	add	ip, r8
 8004348:	4462      	add	r2, ip
 800434a:	6812      	ldr	r2, [r2, #0]
 800434c:	18d3      	adds	r3, r2, r3
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	2b39      	cmp	r3, #57	; 0x39
 8004352:	d111      	bne.n	8004378 <printASCIIarray+0x15e0>
 8004354:	190b      	adds	r3, r1, r4
 8004356:	2208      	movs	r2, #8
 8004358:	4694      	mov	ip, r2
 800435a:	44bc      	add	ip, r7
 800435c:	4463      	add	r3, ip
 800435e:	881b      	ldrh	r3, [r3, #0]
 8004360:	1902      	adds	r2, r0, r4
 8004362:	2108      	movs	r1, #8
 8004364:	468c      	mov	ip, r1
 8004366:	2108      	movs	r1, #8
 8004368:	4688      	mov	r8, r1
 800436a:	44b8      	add	r8, r7
 800436c:	44c4      	add	ip, r8
 800436e:	4462      	add	r2, ip
 8004370:	6812      	ldr	r2, [r2, #0]
 8004372:	18d3      	adds	r3, r2, r3
 8004374:	2214      	movs	r2, #20
 8004376:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3a){dataASCII[i]=0x15;}
 8004378:	2162      	movs	r1, #98	; 0x62
 800437a:	248c      	movs	r4, #140	; 0x8c
 800437c:	0064      	lsls	r4, r4, #1
 800437e:	190b      	adds	r3, r1, r4
 8004380:	2208      	movs	r2, #8
 8004382:	4694      	mov	ip, r2
 8004384:	44bc      	add	ip, r7
 8004386:	4463      	add	r3, ip
 8004388:	881b      	ldrh	r3, [r3, #0]
 800438a:	2080      	movs	r0, #128	; 0x80
 800438c:	1902      	adds	r2, r0, r4
 800438e:	2608      	movs	r6, #8
 8004390:	46b4      	mov	ip, r6
 8004392:	2608      	movs	r6, #8
 8004394:	46b0      	mov	r8, r6
 8004396:	44b8      	add	r8, r7
 8004398:	44c4      	add	ip, r8
 800439a:	4462      	add	r2, ip
 800439c:	6812      	ldr	r2, [r2, #0]
 800439e:	18d3      	adds	r3, r2, r3
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	2b3a      	cmp	r3, #58	; 0x3a
 80043a4:	d111      	bne.n	80043ca <printASCIIarray+0x1632>
 80043a6:	190b      	adds	r3, r1, r4
 80043a8:	2208      	movs	r2, #8
 80043aa:	4694      	mov	ip, r2
 80043ac:	44bc      	add	ip, r7
 80043ae:	4463      	add	r3, ip
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	1902      	adds	r2, r0, r4
 80043b4:	2108      	movs	r1, #8
 80043b6:	468c      	mov	ip, r1
 80043b8:	2108      	movs	r1, #8
 80043ba:	4688      	mov	r8, r1
 80043bc:	44b8      	add	r8, r7
 80043be:	44c4      	add	ip, r8
 80043c0:	4462      	add	r2, ip
 80043c2:	6812      	ldr	r2, [r2, #0]
 80043c4:	18d3      	adds	r3, r2, r3
 80043c6:	2215      	movs	r2, #21
 80043c8:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3b){dataASCII[i]=0x16;}
 80043ca:	2162      	movs	r1, #98	; 0x62
 80043cc:	248c      	movs	r4, #140	; 0x8c
 80043ce:	0064      	lsls	r4, r4, #1
 80043d0:	190b      	adds	r3, r1, r4
 80043d2:	2208      	movs	r2, #8
 80043d4:	4694      	mov	ip, r2
 80043d6:	44bc      	add	ip, r7
 80043d8:	4463      	add	r3, ip
 80043da:	881b      	ldrh	r3, [r3, #0]
 80043dc:	2080      	movs	r0, #128	; 0x80
 80043de:	1902      	adds	r2, r0, r4
 80043e0:	2608      	movs	r6, #8
 80043e2:	46b4      	mov	ip, r6
 80043e4:	2608      	movs	r6, #8
 80043e6:	46b0      	mov	r8, r6
 80043e8:	44b8      	add	r8, r7
 80043ea:	44c4      	add	ip, r8
 80043ec:	4462      	add	r2, ip
 80043ee:	6812      	ldr	r2, [r2, #0]
 80043f0:	18d3      	adds	r3, r2, r3
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	2b3b      	cmp	r3, #59	; 0x3b
 80043f6:	d111      	bne.n	800441c <printASCIIarray+0x1684>
 80043f8:	190b      	adds	r3, r1, r4
 80043fa:	2208      	movs	r2, #8
 80043fc:	4694      	mov	ip, r2
 80043fe:	44bc      	add	ip, r7
 8004400:	4463      	add	r3, ip
 8004402:	881b      	ldrh	r3, [r3, #0]
 8004404:	1902      	adds	r2, r0, r4
 8004406:	2108      	movs	r1, #8
 8004408:	468c      	mov	ip, r1
 800440a:	2108      	movs	r1, #8
 800440c:	4688      	mov	r8, r1
 800440e:	44b8      	add	r8, r7
 8004410:	44c4      	add	ip, r8
 8004412:	4462      	add	r2, ip
 8004414:	6812      	ldr	r2, [r2, #0]
 8004416:	18d3      	adds	r3, r2, r3
 8004418:	2216      	movs	r2, #22
 800441a:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3c){dataASCII[i]=0x17;}
 800441c:	2162      	movs	r1, #98	; 0x62
 800441e:	248c      	movs	r4, #140	; 0x8c
 8004420:	0064      	lsls	r4, r4, #1
 8004422:	190b      	adds	r3, r1, r4
 8004424:	2208      	movs	r2, #8
 8004426:	4694      	mov	ip, r2
 8004428:	44bc      	add	ip, r7
 800442a:	4463      	add	r3, ip
 800442c:	881b      	ldrh	r3, [r3, #0]
 800442e:	2080      	movs	r0, #128	; 0x80
 8004430:	1902      	adds	r2, r0, r4
 8004432:	2608      	movs	r6, #8
 8004434:	46b4      	mov	ip, r6
 8004436:	2608      	movs	r6, #8
 8004438:	46b0      	mov	r8, r6
 800443a:	44b8      	add	r8, r7
 800443c:	44c4      	add	ip, r8
 800443e:	4462      	add	r2, ip
 8004440:	6812      	ldr	r2, [r2, #0]
 8004442:	18d3      	adds	r3, r2, r3
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	2b3c      	cmp	r3, #60	; 0x3c
 8004448:	d111      	bne.n	800446e <printASCIIarray+0x16d6>
 800444a:	190b      	adds	r3, r1, r4
 800444c:	2208      	movs	r2, #8
 800444e:	4694      	mov	ip, r2
 8004450:	44bc      	add	ip, r7
 8004452:	4463      	add	r3, ip
 8004454:	881b      	ldrh	r3, [r3, #0]
 8004456:	1902      	adds	r2, r0, r4
 8004458:	2108      	movs	r1, #8
 800445a:	468c      	mov	ip, r1
 800445c:	2108      	movs	r1, #8
 800445e:	4688      	mov	r8, r1
 8004460:	44b8      	add	r8, r7
 8004462:	44c4      	add	ip, r8
 8004464:	4462      	add	r2, ip
 8004466:	6812      	ldr	r2, [r2, #0]
 8004468:	18d3      	adds	r3, r2, r3
 800446a:	2217      	movs	r2, #23
 800446c:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3d){dataASCII[i]=0x18;}
 800446e:	2162      	movs	r1, #98	; 0x62
 8004470:	248c      	movs	r4, #140	; 0x8c
 8004472:	0064      	lsls	r4, r4, #1
 8004474:	190b      	adds	r3, r1, r4
 8004476:	2208      	movs	r2, #8
 8004478:	4694      	mov	ip, r2
 800447a:	44bc      	add	ip, r7
 800447c:	4463      	add	r3, ip
 800447e:	881b      	ldrh	r3, [r3, #0]
 8004480:	2080      	movs	r0, #128	; 0x80
 8004482:	1902      	adds	r2, r0, r4
 8004484:	2608      	movs	r6, #8
 8004486:	46b4      	mov	ip, r6
 8004488:	2608      	movs	r6, #8
 800448a:	46b0      	mov	r8, r6
 800448c:	44b8      	add	r8, r7
 800448e:	44c4      	add	ip, r8
 8004490:	4462      	add	r2, ip
 8004492:	6812      	ldr	r2, [r2, #0]
 8004494:	18d3      	adds	r3, r2, r3
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	2b3d      	cmp	r3, #61	; 0x3d
 800449a:	d111      	bne.n	80044c0 <printASCIIarray+0x1728>
 800449c:	190b      	adds	r3, r1, r4
 800449e:	2208      	movs	r2, #8
 80044a0:	4694      	mov	ip, r2
 80044a2:	44bc      	add	ip, r7
 80044a4:	4463      	add	r3, ip
 80044a6:	881b      	ldrh	r3, [r3, #0]
 80044a8:	1902      	adds	r2, r0, r4
 80044aa:	2108      	movs	r1, #8
 80044ac:	468c      	mov	ip, r1
 80044ae:	2108      	movs	r1, #8
 80044b0:	4688      	mov	r8, r1
 80044b2:	44b8      	add	r8, r7
 80044b4:	44c4      	add	ip, r8
 80044b6:	4462      	add	r2, ip
 80044b8:	6812      	ldr	r2, [r2, #0]
 80044ba:	18d3      	adds	r3, r2, r3
 80044bc:	2218      	movs	r2, #24
 80044be:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3e){dataASCII[i]=0x19;}
 80044c0:	2162      	movs	r1, #98	; 0x62
 80044c2:	248c      	movs	r4, #140	; 0x8c
 80044c4:	0064      	lsls	r4, r4, #1
 80044c6:	190b      	adds	r3, r1, r4
 80044c8:	2208      	movs	r2, #8
 80044ca:	4694      	mov	ip, r2
 80044cc:	44bc      	add	ip, r7
 80044ce:	4463      	add	r3, ip
 80044d0:	881b      	ldrh	r3, [r3, #0]
 80044d2:	2080      	movs	r0, #128	; 0x80
 80044d4:	1902      	adds	r2, r0, r4
 80044d6:	2608      	movs	r6, #8
 80044d8:	46b4      	mov	ip, r6
 80044da:	2608      	movs	r6, #8
 80044dc:	46b0      	mov	r8, r6
 80044de:	44b8      	add	r8, r7
 80044e0:	44c4      	add	ip, r8
 80044e2:	4462      	add	r2, ip
 80044e4:	6812      	ldr	r2, [r2, #0]
 80044e6:	18d3      	adds	r3, r2, r3
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	2b3e      	cmp	r3, #62	; 0x3e
 80044ec:	d111      	bne.n	8004512 <printASCIIarray+0x177a>
 80044ee:	190b      	adds	r3, r1, r4
 80044f0:	2208      	movs	r2, #8
 80044f2:	4694      	mov	ip, r2
 80044f4:	44bc      	add	ip, r7
 80044f6:	4463      	add	r3, ip
 80044f8:	881b      	ldrh	r3, [r3, #0]
 80044fa:	1902      	adds	r2, r0, r4
 80044fc:	2108      	movs	r1, #8
 80044fe:	468c      	mov	ip, r1
 8004500:	2108      	movs	r1, #8
 8004502:	4688      	mov	r8, r1
 8004504:	44b8      	add	r8, r7
 8004506:	44c4      	add	ip, r8
 8004508:	4462      	add	r2, ip
 800450a:	6812      	ldr	r2, [r2, #0]
 800450c:	18d3      	adds	r3, r2, r3
 800450e:	2219      	movs	r2, #25
 8004510:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3f){dataASCII[i]=0x1a;}
 8004512:	2162      	movs	r1, #98	; 0x62
 8004514:	248c      	movs	r4, #140	; 0x8c
 8004516:	0064      	lsls	r4, r4, #1
 8004518:	190b      	adds	r3, r1, r4
 800451a:	2208      	movs	r2, #8
 800451c:	4694      	mov	ip, r2
 800451e:	44bc      	add	ip, r7
 8004520:	4463      	add	r3, ip
 8004522:	881b      	ldrh	r3, [r3, #0]
 8004524:	2080      	movs	r0, #128	; 0x80
 8004526:	1902      	adds	r2, r0, r4
 8004528:	2608      	movs	r6, #8
 800452a:	46b4      	mov	ip, r6
 800452c:	2608      	movs	r6, #8
 800452e:	46b0      	mov	r8, r6
 8004530:	44b8      	add	r8, r7
 8004532:	44c4      	add	ip, r8
 8004534:	4462      	add	r2, ip
 8004536:	6812      	ldr	r2, [r2, #0]
 8004538:	18d3      	adds	r3, r2, r3
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	2b3f      	cmp	r3, #63	; 0x3f
 800453e:	d111      	bne.n	8004564 <printASCIIarray+0x17cc>
 8004540:	190b      	adds	r3, r1, r4
 8004542:	2208      	movs	r2, #8
 8004544:	4694      	mov	ip, r2
 8004546:	44bc      	add	ip, r7
 8004548:	4463      	add	r3, ip
 800454a:	881b      	ldrh	r3, [r3, #0]
 800454c:	1902      	adds	r2, r0, r4
 800454e:	2108      	movs	r1, #8
 8004550:	468c      	mov	ip, r1
 8004552:	2108      	movs	r1, #8
 8004554:	4688      	mov	r8, r1
 8004556:	44b8      	add	r8, r7
 8004558:	44c4      	add	ip, r8
 800455a:	4462      	add	r2, ip
 800455c:	6812      	ldr	r2, [r2, #0]
 800455e:	18d3      	adds	r3, r2, r3
 8004560:	221a      	movs	r2, #26
 8004562:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5b){dataASCII[i]=0x1b;}
 8004564:	2162      	movs	r1, #98	; 0x62
 8004566:	248c      	movs	r4, #140	; 0x8c
 8004568:	0064      	lsls	r4, r4, #1
 800456a:	190b      	adds	r3, r1, r4
 800456c:	2208      	movs	r2, #8
 800456e:	4694      	mov	ip, r2
 8004570:	44bc      	add	ip, r7
 8004572:	4463      	add	r3, ip
 8004574:	881b      	ldrh	r3, [r3, #0]
 8004576:	2080      	movs	r0, #128	; 0x80
 8004578:	1902      	adds	r2, r0, r4
 800457a:	2608      	movs	r6, #8
 800457c:	46b4      	mov	ip, r6
 800457e:	2608      	movs	r6, #8
 8004580:	46b0      	mov	r8, r6
 8004582:	44b8      	add	r8, r7
 8004584:	44c4      	add	ip, r8
 8004586:	4462      	add	r2, ip
 8004588:	6812      	ldr	r2, [r2, #0]
 800458a:	18d3      	adds	r3, r2, r3
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	2b5b      	cmp	r3, #91	; 0x5b
 8004590:	d111      	bne.n	80045b6 <printASCIIarray+0x181e>
 8004592:	190b      	adds	r3, r1, r4
 8004594:	2208      	movs	r2, #8
 8004596:	4694      	mov	ip, r2
 8004598:	44bc      	add	ip, r7
 800459a:	4463      	add	r3, ip
 800459c:	881b      	ldrh	r3, [r3, #0]
 800459e:	1902      	adds	r2, r0, r4
 80045a0:	2108      	movs	r1, #8
 80045a2:	468c      	mov	ip, r1
 80045a4:	2108      	movs	r1, #8
 80045a6:	4688      	mov	r8, r1
 80045a8:	44b8      	add	r8, r7
 80045aa:	44c4      	add	ip, r8
 80045ac:	4462      	add	r2, ip
 80045ae:	6812      	ldr	r2, [r2, #0]
 80045b0:	18d3      	adds	r3, r2, r3
 80045b2:	221b      	movs	r2, #27
 80045b4:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5c){dataASCII[i]=0x1c;}
 80045b6:	2162      	movs	r1, #98	; 0x62
 80045b8:	248c      	movs	r4, #140	; 0x8c
 80045ba:	0064      	lsls	r4, r4, #1
 80045bc:	190b      	adds	r3, r1, r4
 80045be:	2208      	movs	r2, #8
 80045c0:	4694      	mov	ip, r2
 80045c2:	44bc      	add	ip, r7
 80045c4:	4463      	add	r3, ip
 80045c6:	881b      	ldrh	r3, [r3, #0]
 80045c8:	2080      	movs	r0, #128	; 0x80
 80045ca:	1902      	adds	r2, r0, r4
 80045cc:	2608      	movs	r6, #8
 80045ce:	46b4      	mov	ip, r6
 80045d0:	2608      	movs	r6, #8
 80045d2:	46b0      	mov	r8, r6
 80045d4:	44b8      	add	r8, r7
 80045d6:	44c4      	add	ip, r8
 80045d8:	4462      	add	r2, ip
 80045da:	6812      	ldr	r2, [r2, #0]
 80045dc:	18d3      	adds	r3, r2, r3
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	2b5c      	cmp	r3, #92	; 0x5c
 80045e2:	d111      	bne.n	8004608 <printASCIIarray+0x1870>
 80045e4:	190b      	adds	r3, r1, r4
 80045e6:	2208      	movs	r2, #8
 80045e8:	4694      	mov	ip, r2
 80045ea:	44bc      	add	ip, r7
 80045ec:	4463      	add	r3, ip
 80045ee:	881b      	ldrh	r3, [r3, #0]
 80045f0:	1902      	adds	r2, r0, r4
 80045f2:	2108      	movs	r1, #8
 80045f4:	468c      	mov	ip, r1
 80045f6:	2108      	movs	r1, #8
 80045f8:	4688      	mov	r8, r1
 80045fa:	44b8      	add	r8, r7
 80045fc:	44c4      	add	ip, r8
 80045fe:	4462      	add	r2, ip
 8004600:	6812      	ldr	r2, [r2, #0]
 8004602:	18d3      	adds	r3, r2, r3
 8004604:	221c      	movs	r2, #28
 8004606:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5d){dataASCII[i]=0x1d;}
 8004608:	2162      	movs	r1, #98	; 0x62
 800460a:	248c      	movs	r4, #140	; 0x8c
 800460c:	0064      	lsls	r4, r4, #1
 800460e:	190b      	adds	r3, r1, r4
 8004610:	2208      	movs	r2, #8
 8004612:	4694      	mov	ip, r2
 8004614:	44bc      	add	ip, r7
 8004616:	4463      	add	r3, ip
 8004618:	881b      	ldrh	r3, [r3, #0]
 800461a:	2080      	movs	r0, #128	; 0x80
 800461c:	1902      	adds	r2, r0, r4
 800461e:	2608      	movs	r6, #8
 8004620:	46b4      	mov	ip, r6
 8004622:	2608      	movs	r6, #8
 8004624:	46b0      	mov	r8, r6
 8004626:	44b8      	add	r8, r7
 8004628:	44c4      	add	ip, r8
 800462a:	4462      	add	r2, ip
 800462c:	6812      	ldr	r2, [r2, #0]
 800462e:	18d3      	adds	r3, r2, r3
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	2b5d      	cmp	r3, #93	; 0x5d
 8004634:	d111      	bne.n	800465a <printASCIIarray+0x18c2>
 8004636:	190b      	adds	r3, r1, r4
 8004638:	2208      	movs	r2, #8
 800463a:	4694      	mov	ip, r2
 800463c:	44bc      	add	ip, r7
 800463e:	4463      	add	r3, ip
 8004640:	881b      	ldrh	r3, [r3, #0]
 8004642:	1902      	adds	r2, r0, r4
 8004644:	2108      	movs	r1, #8
 8004646:	468c      	mov	ip, r1
 8004648:	2108      	movs	r1, #8
 800464a:	4688      	mov	r8, r1
 800464c:	44b8      	add	r8, r7
 800464e:	44c4      	add	ip, r8
 8004650:	4462      	add	r2, ip
 8004652:	6812      	ldr	r2, [r2, #0]
 8004654:	18d3      	adds	r3, r2, r3
 8004656:	221d      	movs	r2, #29
 8004658:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5f){dataASCII[i]=0x1e;}
 800465a:	2162      	movs	r1, #98	; 0x62
 800465c:	248c      	movs	r4, #140	; 0x8c
 800465e:	0064      	lsls	r4, r4, #1
 8004660:	190b      	adds	r3, r1, r4
 8004662:	2208      	movs	r2, #8
 8004664:	4694      	mov	ip, r2
 8004666:	44bc      	add	ip, r7
 8004668:	4463      	add	r3, ip
 800466a:	881b      	ldrh	r3, [r3, #0]
 800466c:	2080      	movs	r0, #128	; 0x80
 800466e:	1902      	adds	r2, r0, r4
 8004670:	2608      	movs	r6, #8
 8004672:	46b4      	mov	ip, r6
 8004674:	2608      	movs	r6, #8
 8004676:	46b0      	mov	r8, r6
 8004678:	44b8      	add	r8, r7
 800467a:	44c4      	add	ip, r8
 800467c:	4462      	add	r2, ip
 800467e:	6812      	ldr	r2, [r2, #0]
 8004680:	18d3      	adds	r3, r2, r3
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	2b5f      	cmp	r3, #95	; 0x5f
 8004686:	d111      	bne.n	80046ac <printASCIIarray+0x1914>
 8004688:	190b      	adds	r3, r1, r4
 800468a:	2208      	movs	r2, #8
 800468c:	4694      	mov	ip, r2
 800468e:	44bc      	add	ip, r7
 8004690:	4463      	add	r3, ip
 8004692:	881b      	ldrh	r3, [r3, #0]
 8004694:	1902      	adds	r2, r0, r4
 8004696:	2108      	movs	r1, #8
 8004698:	468c      	mov	ip, r1
 800469a:	2108      	movs	r1, #8
 800469c:	4688      	mov	r8, r1
 800469e:	44b8      	add	r8, r7
 80046a0:	44c4      	add	ip, r8
 80046a2:	4462      	add	r2, ip
 80046a4:	6812      	ldr	r2, [r2, #0]
 80046a6:	18d3      	adds	r3, r2, r3
 80046a8:	221e      	movs	r2, #30
 80046aa:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x7c){dataASCII[i]=0x1f;}
 80046ac:	2162      	movs	r1, #98	; 0x62
 80046ae:	248c      	movs	r4, #140	; 0x8c
 80046b0:	0064      	lsls	r4, r4, #1
 80046b2:	190b      	adds	r3, r1, r4
 80046b4:	2208      	movs	r2, #8
 80046b6:	4694      	mov	ip, r2
 80046b8:	44bc      	add	ip, r7
 80046ba:	4463      	add	r3, ip
 80046bc:	881b      	ldrh	r3, [r3, #0]
 80046be:	2080      	movs	r0, #128	; 0x80
 80046c0:	1902      	adds	r2, r0, r4
 80046c2:	2608      	movs	r6, #8
 80046c4:	46b4      	mov	ip, r6
 80046c6:	2608      	movs	r6, #8
 80046c8:	46b0      	mov	r8, r6
 80046ca:	44b8      	add	r8, r7
 80046cc:	44c4      	add	ip, r8
 80046ce:	4462      	add	r2, ip
 80046d0:	6812      	ldr	r2, [r2, #0]
 80046d2:	18d3      	adds	r3, r2, r3
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	2b7c      	cmp	r3, #124	; 0x7c
 80046d8:	d111      	bne.n	80046fe <printASCIIarray+0x1966>
 80046da:	190b      	adds	r3, r1, r4
 80046dc:	2208      	movs	r2, #8
 80046de:	4694      	mov	ip, r2
 80046e0:	44bc      	add	ip, r7
 80046e2:	4463      	add	r3, ip
 80046e4:	881b      	ldrh	r3, [r3, #0]
 80046e6:	1902      	adds	r2, r0, r4
 80046e8:	2108      	movs	r1, #8
 80046ea:	468c      	mov	ip, r1
 80046ec:	2108      	movs	r1, #8
 80046ee:	4688      	mov	r8, r1
 80046f0:	44b8      	add	r8, r7
 80046f2:	44c4      	add	ip, r8
 80046f4:	4462      	add	r2, ip
 80046f6:	6812      	ldr	r2, [r2, #0]
 80046f8:	18d3      	adds	r3, r2, r3
 80046fa:	221f      	movs	r2, #31
 80046fc:	701a      	strb	r2, [r3, #0]
				for(i=0;i<strLen;i++){
 80046fe:	2162      	movs	r1, #98	; 0x62
 8004700:	208c      	movs	r0, #140	; 0x8c
 8004702:	0040      	lsls	r0, r0, #1
 8004704:	180b      	adds	r3, r1, r0
 8004706:	2208      	movs	r2, #8
 8004708:	4694      	mov	ip, r2
 800470a:	44bc      	add	ip, r7
 800470c:	4463      	add	r3, ip
 800470e:	881a      	ldrh	r2, [r3, #0]
 8004710:	180b      	adds	r3, r1, r0
 8004712:	2108      	movs	r1, #8
 8004714:	468c      	mov	ip, r1
 8004716:	44bc      	add	ip, r7
 8004718:	4463      	add	r3, ip
 800471a:	3201      	adds	r2, #1
 800471c:	801a      	strh	r2, [r3, #0]
 800471e:	231e      	movs	r3, #30
 8004720:	33ff      	adds	r3, #255	; 0xff
 8004722:	2208      	movs	r2, #8
 8004724:	189b      	adds	r3, r3, r2
 8004726:	19db      	adds	r3, r3, r7
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	b29b      	uxth	r3, r3
 800472c:	2162      	movs	r1, #98	; 0x62
 800472e:	208c      	movs	r0, #140	; 0x8c
 8004730:	0040      	lsls	r0, r0, #1
 8004732:	180a      	adds	r2, r1, r0
 8004734:	2408      	movs	r4, #8
 8004736:	46a4      	mov	ip, r4
 8004738:	44bc      	add	ip, r7
 800473a:	4462      	add	r2, ip
 800473c:	8812      	ldrh	r2, [r2, #0]
 800473e:	429a      	cmp	r2, r3
 8004740:	d201      	bcs.n	8004746 <printASCIIarray+0x19ae>
 8004742:	f7ff fabc 	bl	8003cbe <printASCIIarray+0xf26>
				}
				for(i=0;i<strLen;i++){
 8004746:	180b      	adds	r3, r1, r0
 8004748:	2208      	movs	r2, #8
 800474a:	4694      	mov	ip, r2
 800474c:	44bc      	add	ip, r7
 800474e:	4463      	add	r3, ip
 8004750:	2200      	movs	r2, #0
 8004752:	801a      	strh	r2, [r3, #0]
 8004754:	e113      	b.n	800497e <printASCIIarray+0x1be6>
					for(j=0;j<symLen;j++){
 8004756:	2364      	movs	r3, #100	; 0x64
 8004758:	228c      	movs	r2, #140	; 0x8c
 800475a:	0052      	lsls	r2, r2, #1
 800475c:	189b      	adds	r3, r3, r2
 800475e:	2208      	movs	r2, #8
 8004760:	4694      	mov	ip, r2
 8004762:	44bc      	add	ip, r7
 8004764:	4463      	add	r3, ip
 8004766:	2200      	movs	r2, #0
 8004768:	801a      	strh	r2, [r3, #0]
 800476a:	e041      	b.n	80047f0 <printASCIIarray+0x1a58>
						weoBuffer[j]=F3[dataASCII[i]][j];
 800476c:	2362      	movs	r3, #98	; 0x62
 800476e:	218c      	movs	r1, #140	; 0x8c
 8004770:	0049      	lsls	r1, r1, #1
 8004772:	185b      	adds	r3, r3, r1
 8004774:	2208      	movs	r2, #8
 8004776:	4694      	mov	ip, r2
 8004778:	44bc      	add	ip, r7
 800477a:	4463      	add	r3, ip
 800477c:	881b      	ldrh	r3, [r3, #0]
 800477e:	2280      	movs	r2, #128	; 0x80
 8004780:	1852      	adds	r2, r2, r1
 8004782:	2008      	movs	r0, #8
 8004784:	4684      	mov	ip, r0
 8004786:	2008      	movs	r0, #8
 8004788:	4680      	mov	r8, r0
 800478a:	44b8      	add	r8, r7
 800478c:	44c4      	add	ip, r8
 800478e:	4462      	add	r2, ip
 8004790:	6812      	ldr	r2, [r2, #0]
 8004792:	18d3      	adds	r3, r2, r3
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	001a      	movs	r2, r3
 8004798:	2664      	movs	r6, #100	; 0x64
 800479a:	1873      	adds	r3, r6, r1
 800479c:	2008      	movs	r0, #8
 800479e:	4684      	mov	ip, r0
 80047a0:	44bc      	add	ip, r7
 80047a2:	4463      	add	r3, ip
 80047a4:	8818      	ldrh	r0, [r3, #0]
 80047a6:	1873      	adds	r3, r6, r1
 80047a8:	2108      	movs	r1, #8
 80047aa:	468c      	mov	ip, r1
 80047ac:	44bc      	add	ip, r7
 80047ae:	4463      	add	r3, ip
 80047b0:	8819      	ldrh	r1, [r3, #0]
 80047b2:	4ca1      	ldr	r4, [pc, #644]	; (8004a38 <printASCIIarray+0x1ca0>)
 80047b4:	0013      	movs	r3, r2
 80047b6:	00db      	lsls	r3, r3, #3
 80047b8:	189b      	adds	r3, r3, r2
 80047ba:	005b      	lsls	r3, r3, #1
 80047bc:	189b      	adds	r3, r3, r2
 80047be:	011b      	lsls	r3, r3, #4
 80047c0:	18e3      	adds	r3, r4, r3
 80047c2:	5c1a      	ldrb	r2, [r3, r0]
 80047c4:	239a      	movs	r3, #154	; 0x9a
 80047c6:	005b      	lsls	r3, r3, #1
 80047c8:	2008      	movs	r0, #8
 80047ca:	181b      	adds	r3, r3, r0
 80047cc:	19db      	adds	r3, r3, r7
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	545a      	strb	r2, [r3, r1]
					for(j=0;j<symLen;j++){
 80047d2:	218c      	movs	r1, #140	; 0x8c
 80047d4:	0049      	lsls	r1, r1, #1
 80047d6:	1873      	adds	r3, r6, r1
 80047d8:	2208      	movs	r2, #8
 80047da:	4694      	mov	ip, r2
 80047dc:	44bc      	add	ip, r7
 80047de:	4463      	add	r3, ip
 80047e0:	881a      	ldrh	r2, [r3, #0]
 80047e2:	1873      	adds	r3, r6, r1
 80047e4:	2108      	movs	r1, #8
 80047e6:	468c      	mov	ip, r1
 80047e8:	44bc      	add	ip, r7
 80047ea:	4463      	add	r3, ip
 80047ec:	3201      	adds	r2, #1
 80047ee:	801a      	strh	r2, [r3, #0]
 80047f0:	2364      	movs	r3, #100	; 0x64
 80047f2:	218c      	movs	r1, #140	; 0x8c
 80047f4:	0049      	lsls	r1, r1, #1
 80047f6:	185b      	adds	r3, r3, r1
 80047f8:	2208      	movs	r2, #8
 80047fa:	18ba      	adds	r2, r7, r2
 80047fc:	189a      	adds	r2, r3, r2
 80047fe:	235a      	movs	r3, #90	; 0x5a
 8004800:	185b      	adds	r3, r3, r1
 8004802:	2008      	movs	r0, #8
 8004804:	4684      	mov	ip, r0
 8004806:	44bc      	add	ip, r7
 8004808:	4463      	add	r3, ip
 800480a:	8812      	ldrh	r2, [r2, #0]
 800480c:	881b      	ldrh	r3, [r3, #0]
 800480e:	429a      	cmp	r2, r3
 8004810:	d3ac      	bcc.n	800476c <printASCIIarray+0x19d4>
//							weoBuffer2[k]=((weoBuffer[k]&0xF0)>>4)&contrast;
//						}
//					for (k=0;k<symLen;k++){
//							weoBuffer[k]=(weoBuffer2[k]<<4)|weoBuffer1[k];
//						}
					for (k=0;k<symLen;k++){
 8004812:	2366      	movs	r3, #102	; 0x66
 8004814:	185b      	adds	r3, r3, r1
 8004816:	2208      	movs	r2, #8
 8004818:	4694      	mov	ip, r2
 800481a:	44bc      	add	ip, r7
 800481c:	4463      	add	r3, ip
 800481e:	2200      	movs	r2, #0
 8004820:	801a      	strh	r2, [r3, #0]
 8004822:	e032      	b.n	800488a <printASCIIarray+0x1af2>
						weoBuffer[k]=weoBuffer[k] & contrast;
 8004824:	2066      	movs	r0, #102	; 0x66
 8004826:	248c      	movs	r4, #140	; 0x8c
 8004828:	0064      	lsls	r4, r4, #1
 800482a:	1903      	adds	r3, r0, r4
 800482c:	2208      	movs	r2, #8
 800482e:	4694      	mov	ip, r2
 8004830:	44bc      	add	ip, r7
 8004832:	4463      	add	r3, ip
 8004834:	881b      	ldrh	r3, [r3, #0]
 8004836:	269a      	movs	r6, #154	; 0x9a
 8004838:	0076      	lsls	r6, r6, #1
 800483a:	2208      	movs	r2, #8
 800483c:	18b2      	adds	r2, r6, r2
 800483e:	19d2      	adds	r2, r2, r7
 8004840:	6812      	ldr	r2, [r2, #0]
 8004842:	5cd2      	ldrb	r2, [r2, r3]
 8004844:	1903      	adds	r3, r0, r4
 8004846:	2108      	movs	r1, #8
 8004848:	468c      	mov	ip, r1
 800484a:	44bc      	add	ip, r7
 800484c:	4463      	add	r3, ip
 800484e:	881b      	ldrh	r3, [r3, #0]
 8004850:	4698      	mov	r8, r3
 8004852:	215c      	movs	r1, #92	; 0x5c
 8004854:	1909      	adds	r1, r1, r4
 8004856:	2308      	movs	r3, #8
 8004858:	469c      	mov	ip, r3
 800485a:	44bc      	add	ip, r7
 800485c:	4461      	add	r1, ip
 800485e:	7809      	ldrb	r1, [r1, #0]
 8004860:	400a      	ands	r2, r1
 8004862:	b2d1      	uxtb	r1, r2
 8004864:	2208      	movs	r2, #8
 8004866:	18b2      	adds	r2, r6, r2
 8004868:	19d2      	adds	r2, r2, r7
 800486a:	6812      	ldr	r2, [r2, #0]
 800486c:	4643      	mov	r3, r8
 800486e:	54d1      	strb	r1, [r2, r3]
					for (k=0;k<symLen;k++){
 8004870:	1903      	adds	r3, r0, r4
 8004872:	2208      	movs	r2, #8
 8004874:	4694      	mov	ip, r2
 8004876:	44bc      	add	ip, r7
 8004878:	4463      	add	r3, ip
 800487a:	881a      	ldrh	r2, [r3, #0]
 800487c:	1903      	adds	r3, r0, r4
 800487e:	2108      	movs	r1, #8
 8004880:	468c      	mov	ip, r1
 8004882:	44bc      	add	ip, r7
 8004884:	4463      	add	r3, ip
 8004886:	3201      	adds	r2, #1
 8004888:	801a      	strh	r2, [r3, #0]
 800488a:	2366      	movs	r3, #102	; 0x66
 800488c:	268c      	movs	r6, #140	; 0x8c
 800488e:	0076      	lsls	r6, r6, #1
 8004890:	199b      	adds	r3, r3, r6
 8004892:	2208      	movs	r2, #8
 8004894:	18ba      	adds	r2, r7, r2
 8004896:	189a      	adds	r2, r3, r2
 8004898:	235a      	movs	r3, #90	; 0x5a
 800489a:	199b      	adds	r3, r3, r6
 800489c:	2108      	movs	r1, #8
 800489e:	468c      	mov	ip, r1
 80048a0:	44bc      	add	ip, r7
 80048a2:	4463      	add	r3, ip
 80048a4:	8812      	ldrh	r2, [r2, #0]
 80048a6:	881b      	ldrh	r3, [r3, #0]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d3bb      	bcc.n	8004824 <printASCIIarray+0x1a8c>
					}
				weoDrawRectangleFilled(ASCII_X, imY, ASCII_X+X_increment-1, imY + ASCII_height - decY, 0xFF, weoBuffer);
 80048ac:	205f      	movs	r0, #95	; 0x5f
 80048ae:	1983      	adds	r3, r0, r6
 80048b0:	2208      	movs	r2, #8
 80048b2:	18ba      	adds	r2, r7, r2
 80048b4:	189a      	adds	r2, r3, r2
 80048b6:	233f      	movs	r3, #63	; 0x3f
 80048b8:	199b      	adds	r3, r3, r6
 80048ba:	2108      	movs	r1, #8
 80048bc:	468c      	mov	ip, r1
 80048be:	44bc      	add	ip, r7
 80048c0:	4463      	add	r3, ip
 80048c2:	7812      	ldrb	r2, [r2, #0]
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	18d3      	adds	r3, r2, r3
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	3b01      	subs	r3, #1
 80048cc:	b2dc      	uxtb	r4, r3
 80048ce:	218f      	movs	r1, #143	; 0x8f
 80048d0:	0049      	lsls	r1, r1, #1
 80048d2:	2308      	movs	r3, #8
 80048d4:	18cb      	adds	r3, r1, r3
 80048d6:	19da      	adds	r2, r3, r7
 80048d8:	213e      	movs	r1, #62	; 0x3e
 80048da:	198b      	adds	r3, r1, r6
 80048dc:	2108      	movs	r1, #8
 80048de:	468c      	mov	ip, r1
 80048e0:	44bc      	add	ip, r7
 80048e2:	4463      	add	r3, ip
 80048e4:	7812      	ldrb	r2, [r2, #0]
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	18d3      	adds	r3, r2, r3
 80048ea:	b2da      	uxtb	r2, r3
 80048ec:	2160      	movs	r1, #96	; 0x60
 80048ee:	198b      	adds	r3, r1, r6
 80048f0:	2108      	movs	r1, #8
 80048f2:	468c      	mov	ip, r1
 80048f4:	44bc      	add	ip, r7
 80048f6:	4463      	add	r3, ip
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	4698      	mov	r8, r3
 8004900:	218f      	movs	r1, #143	; 0x8f
 8004902:	0049      	lsls	r1, r1, #1
 8004904:	2308      	movs	r3, #8
 8004906:	18cb      	adds	r3, r1, r3
 8004908:	19db      	adds	r3, r3, r7
 800490a:	7819      	ldrb	r1, [r3, #0]
 800490c:	0006      	movs	r6, r0
 800490e:	238c      	movs	r3, #140	; 0x8c
 8004910:	005b      	lsls	r3, r3, #1
 8004912:	18c3      	adds	r3, r0, r3
 8004914:	2208      	movs	r2, #8
 8004916:	4694      	mov	ip, r2
 8004918:	44bc      	add	ip, r7
 800491a:	4463      	add	r3, ip
 800491c:	7818      	ldrb	r0, [r3, #0]
 800491e:	239a      	movs	r3, #154	; 0x9a
 8004920:	005b      	lsls	r3, r3, #1
 8004922:	2208      	movs	r2, #8
 8004924:	189b      	adds	r3, r3, r2
 8004926:	19db      	adds	r3, r3, r7
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	9301      	str	r3, [sp, #4]
 800492c:	23ff      	movs	r3, #255	; 0xff
 800492e:	9300      	str	r3, [sp, #0]
 8004930:	4643      	mov	r3, r8
 8004932:	0022      	movs	r2, r4
 8004934:	f7fc fd8c 	bl	8001450 <weoDrawRectangleFilled>
				ASCII_X += X_increment;
 8004938:	208c      	movs	r0, #140	; 0x8c
 800493a:	0040      	lsls	r0, r0, #1
 800493c:	1833      	adds	r3, r6, r0
 800493e:	2208      	movs	r2, #8
 8004940:	4694      	mov	ip, r2
 8004942:	44bc      	add	ip, r7
 8004944:	4463      	add	r3, ip
 8004946:	1832      	adds	r2, r6, r0
 8004948:	2108      	movs	r1, #8
 800494a:	1879      	adds	r1, r7, r1
 800494c:	1851      	adds	r1, r2, r1
 800494e:	223f      	movs	r2, #63	; 0x3f
 8004950:	1812      	adds	r2, r2, r0
 8004952:	2408      	movs	r4, #8
 8004954:	46a4      	mov	ip, r4
 8004956:	44bc      	add	ip, r7
 8004958:	4462      	add	r2, ip
 800495a:	7809      	ldrb	r1, [r1, #0]
 800495c:	7812      	ldrb	r2, [r2, #0]
 800495e:	188a      	adds	r2, r1, r2
 8004960:	701a      	strb	r2, [r3, #0]
				for(i=0;i<strLen;i++){
 8004962:	2162      	movs	r1, #98	; 0x62
 8004964:	180b      	adds	r3, r1, r0
 8004966:	2208      	movs	r2, #8
 8004968:	4694      	mov	ip, r2
 800496a:	44bc      	add	ip, r7
 800496c:	4463      	add	r3, ip
 800496e:	881a      	ldrh	r2, [r3, #0]
 8004970:	180b      	adds	r3, r1, r0
 8004972:	2108      	movs	r1, #8
 8004974:	468c      	mov	ip, r1
 8004976:	44bc      	add	ip, r7
 8004978:	4463      	add	r3, ip
 800497a:	3201      	adds	r2, #1
 800497c:	801a      	strh	r2, [r3, #0]
 800497e:	231e      	movs	r3, #30
 8004980:	33ff      	adds	r3, #255	; 0xff
 8004982:	2208      	movs	r2, #8
 8004984:	189b      	adds	r3, r3, r2
 8004986:	19db      	adds	r3, r3, r7
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	b29b      	uxth	r3, r3
 800498c:	2162      	movs	r1, #98	; 0x62
 800498e:	208c      	movs	r0, #140	; 0x8c
 8004990:	0040      	lsls	r0, r0, #1
 8004992:	180a      	adds	r2, r1, r0
 8004994:	2408      	movs	r4, #8
 8004996:	46a4      	mov	ip, r4
 8004998:	44bc      	add	ip, r7
 800499a:	4462      	add	r2, ip
 800499c:	8812      	ldrh	r2, [r2, #0]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d200      	bcs.n	80049a4 <printASCIIarray+0x1c0c>
 80049a2:	e6d8      	b.n	8004756 <printASCIIarray+0x19be>
				}
				for(i=0;i<symLen;i++){
 80049a4:	180b      	adds	r3, r1, r0
 80049a6:	2208      	movs	r2, #8
 80049a8:	4694      	mov	ip, r2
 80049aa:	44bc      	add	ip, r7
 80049ac:	4463      	add	r3, ip
 80049ae:	2200      	movs	r2, #0
 80049b0:	801a      	strh	r2, [r3, #0]
 80049b2:	e01e      	b.n	80049f2 <printASCIIarray+0x1c5a>
									weoBuffer[j]=0x00;
 80049b4:	2364      	movs	r3, #100	; 0x64
 80049b6:	208c      	movs	r0, #140	; 0x8c
 80049b8:	0040      	lsls	r0, r0, #1
 80049ba:	181b      	adds	r3, r3, r0
 80049bc:	2208      	movs	r2, #8
 80049be:	4694      	mov	ip, r2
 80049c0:	44bc      	add	ip, r7
 80049c2:	4463      	add	r3, ip
 80049c4:	881b      	ldrh	r3, [r3, #0]
 80049c6:	229a      	movs	r2, #154	; 0x9a
 80049c8:	0052      	lsls	r2, r2, #1
 80049ca:	2108      	movs	r1, #8
 80049cc:	1852      	adds	r2, r2, r1
 80049ce:	19d2      	adds	r2, r2, r7
 80049d0:	6812      	ldr	r2, [r2, #0]
 80049d2:	2100      	movs	r1, #0
 80049d4:	54d1      	strb	r1, [r2, r3]
				for(i=0;i<symLen;i++){
 80049d6:	2162      	movs	r1, #98	; 0x62
 80049d8:	180b      	adds	r3, r1, r0
 80049da:	2208      	movs	r2, #8
 80049dc:	4694      	mov	ip, r2
 80049de:	44bc      	add	ip, r7
 80049e0:	4463      	add	r3, ip
 80049e2:	881a      	ldrh	r2, [r3, #0]
 80049e4:	180b      	adds	r3, r1, r0
 80049e6:	2108      	movs	r1, #8
 80049e8:	468c      	mov	ip, r1
 80049ea:	44bc      	add	ip, r7
 80049ec:	4463      	add	r3, ip
 80049ee:	3201      	adds	r2, #1
 80049f0:	801a      	strh	r2, [r3, #0]
 80049f2:	2362      	movs	r3, #98	; 0x62
 80049f4:	218c      	movs	r1, #140	; 0x8c
 80049f6:	0049      	lsls	r1, r1, #1
 80049f8:	185b      	adds	r3, r3, r1
 80049fa:	2208      	movs	r2, #8
 80049fc:	18ba      	adds	r2, r7, r2
 80049fe:	189a      	adds	r2, r3, r2
 8004a00:	235a      	movs	r3, #90	; 0x5a
 8004a02:	185b      	adds	r3, r3, r1
 8004a04:	2108      	movs	r1, #8
 8004a06:	468c      	mov	ip, r1
 8004a08:	44bc      	add	ip, r7
 8004a0a:	4463      	add	r3, ip
 8004a0c:	8812      	ldrh	r2, [r2, #0]
 8004a0e:	881b      	ldrh	r3, [r3, #0]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d3cf      	bcc.n	80049b4 <printASCIIarray+0x1c1c>
 8004a14:	46ad      	mov	sp, r5
							}
			}
			cmd2Execute=0;
 8004a16:	4b09      	ldr	r3, [pc, #36]	; (8004a3c <printASCIIarray+0x1ca4>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	701a      	strb	r2, [r3, #0]
//			while(BFEN==0){};
			GPIOC->ODR |= 1 << 6;	//set BF
 8004a1c:	4b08      	ldr	r3, [pc, #32]	; (8004a40 <printASCIIarray+0x1ca8>)
 8004a1e:	695a      	ldr	r2, [r3, #20]
 8004a20:	4b07      	ldr	r3, [pc, #28]	; (8004a40 <printASCIIarray+0x1ca8>)
 8004a22:	2140      	movs	r1, #64	; 0x40
 8004a24:	430a      	orrs	r2, r1
 8004a26:	615a      	str	r2, [r3, #20]

	}
 8004a28:	46c0      	nop			; (mov r8, r8)
 8004a2a:	0018      	movs	r0, r3
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	b063      	add	sp, #396	; 0x18c
 8004a30:	bcc0      	pop	{r6, r7}
 8004a32:	46b9      	mov	r9, r7
 8004a34:	46b0      	mov	r8, r6
 8004a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a38:	08015d5c 	.word	0x08015d5c
 8004a3c:	200002ea 	.word	0x200002ea
 8004a40:	50000800 	.word	0x50000800

08004a44 <LIS3DHsendCMD>:
//		HAL_Delay(500);
//		GPIOC->ODR |= 1 << 6;	//set BF
//		cmd2Execute=0;
	}
//=============================================================================================================
	void LIS3DHsendCMD(uint8_t reg, uint8_t data) {
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b086      	sub	sp, #24
 8004a48:	af02      	add	r7, sp, #8
 8004a4a:	0002      	movs	r2, r0
 8004a4c:	1dfb      	adds	r3, r7, #7
 8004a4e:	701a      	strb	r2, [r3, #0]
 8004a50:	1dbb      	adds	r3, r7, #6
 8004a52:	1c0a      	adds	r2, r1, #0
 8004a54:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { reg, data };
 8004a56:	210c      	movs	r1, #12
 8004a58:	187b      	adds	r3, r7, r1
 8004a5a:	1dfa      	adds	r2, r7, #7
 8004a5c:	7812      	ldrb	r2, [r2, #0]
 8004a5e:	701a      	strb	r2, [r3, #0]
 8004a60:	187b      	adds	r3, r7, r1
 8004a62:	1dba      	adds	r2, r7, #6
 8004a64:	7812      	ldrb	r2, [r2, #0]
 8004a66:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x32, buf, 2, 1000);	//32h - address for writing
 8004a68:	187a      	adds	r2, r7, r1
 8004a6a:	4806      	ldr	r0, [pc, #24]	; (8004a84 <LIS3DHsendCMD+0x40>)
 8004a6c:	23fa      	movs	r3, #250	; 0xfa
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	2302      	movs	r3, #2
 8004a74:	2132      	movs	r1, #50	; 0x32
 8004a76:	f001 fd11 	bl	800649c <HAL_I2C_Master_Transmit>
	}
 8004a7a:	46c0      	nop			; (mov r8, r8)
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	b004      	add	sp, #16
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	46c0      	nop			; (mov r8, r8)
 8004a84:	2000008c 	.word	0x2000008c

08004a88 <LIS3DHsetup>:
//	  xVal = buffer[0];
//	  yVal = buffer[1];
//	  zVal = buffer[2];
//	}
//=============================================================================================================
	void LIS3DHsetup(void){
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
		uint8_t CTRL_REG1_val=0x00;
 8004a8e:	1dfb      	adds	r3, r7, #7
 8004a90:	2200      	movs	r2, #0
 8004a92:	701a      	strb	r2, [r3, #0]
		uint8_t CTRL_REG4_val=0x00;
 8004a94:	1dbb      	adds	r3, r7, #6
 8004a96:	2200      	movs	r2, #0
 8004a98:	701a      	strb	r2, [r3, #0]
		uint8_t CTRL_REG5_val=0x00;
 8004a9a:	1d7b      	adds	r3, r7, #5
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	701a      	strb	r2, [r3, #0]
		uint8_t CTRL_REG6_val=0x00;
 8004aa0:	1d3b      	adds	r3, r7, #4
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	701a      	strb	r2, [r3, #0]
		uint8_t FIFO_CTRL_REG_val=0x00;
 8004aa6:	1cfb      	adds	r3, r7, #3
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	701a      	strb	r2, [r3, #0]
		uint8_t FIFO_SRC_REG_val=0x00;
 8004aac:	1cbb      	adds	r3, r7, #2
 8004aae:	2200      	movs	r2, #0
 8004ab0:	701a      	strb	r2, [r3, #0]
		uint8_t INT_1_CFG_val=0x00;
 8004ab2:	1c7b      	adds	r3, r7, #1
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	701a      	strb	r2, [r3, #0]
		uint8_t INT_1_SRC_val=0x00;
 8004ab8:	003b      	movs	r3, r7
 8004aba:	2200      	movs	r2, #0
 8004abc:	701a      	strb	r2, [r3, #0]

		LIS3DHsendCMD(CTRL_REG1,(CTRL_REG1_val|accelDataRate_25_Hz|Xen|Yen|Zen));//data rate selection
 8004abe:	1dfb      	adds	r3, r7, #7
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	2237      	movs	r2, #55	; 0x37
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	0019      	movs	r1, r3
 8004aca:	2020      	movs	r0, #32
 8004acc:	f7ff ffba 	bl	8004a44 <LIS3DHsendCMD>
//		LIS3DHsendCMD(CTRL_REG2,);//HPFilter
//		LIS3DHsendCMD(CTRL_REG3,);
		LIS3DHsendCMD(CTRL_REG4,(CTRL_REG4_val|BDU|FULL_SCALE_2G|HR));
 8004ad0:	1dbb      	adds	r3, r7, #6
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	227c      	movs	r2, #124	; 0x7c
 8004ad6:	4252      	negs	r2, r2
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	0019      	movs	r1, r3
 8004ade:	2023      	movs	r0, #35	; 0x23
 8004ae0:	f7ff ffb0 	bl	8004a44 <LIS3DHsendCMD>
//		LIS3DHsendCMD(CTRL_REG6,);
//		LIS3DHsendCMD(FIFO_CTRL_REG,FIFO_CTRL_REG_val);	//	2B configured
//		LIS3DHsendCMD(FIFO_SRC_REG,FIFO_SRC_REG_val);	//	2B configured
//		LIS3DHsendCMD(INT_1_CFG,INT_1_CFG_val);	//	2B configured
//		LIS3DHsendCMD(INT_1_SRC_val,INT_1_SRC_val);	//	2B configured
	}
 8004ae4:	46c0      	nop			; (mov r8, r8)
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	b002      	add	sp, #8
 8004aea:	bd80      	pop	{r7, pc}

08004aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004af0:	46c0      	nop			; (mov r8, r8)
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
	...

08004af8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004afe:	4b11      	ldr	r3, [pc, #68]	; (8004b44 <HAL_MspInit+0x4c>)
 8004b00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b02:	4b10      	ldr	r3, [pc, #64]	; (8004b44 <HAL_MspInit+0x4c>)
 8004b04:	2101      	movs	r1, #1
 8004b06:	430a      	orrs	r2, r1
 8004b08:	641a      	str	r2, [r3, #64]	; 0x40
 8004b0a:	4b0e      	ldr	r3, [pc, #56]	; (8004b44 <HAL_MspInit+0x4c>)
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0e:	2201      	movs	r2, #1
 8004b10:	4013      	ands	r3, r2
 8004b12:	607b      	str	r3, [r7, #4]
 8004b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b16:	4b0b      	ldr	r3, [pc, #44]	; (8004b44 <HAL_MspInit+0x4c>)
 8004b18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b1a:	4b0a      	ldr	r3, [pc, #40]	; (8004b44 <HAL_MspInit+0x4c>)
 8004b1c:	2180      	movs	r1, #128	; 0x80
 8004b1e:	0549      	lsls	r1, r1, #21
 8004b20:	430a      	orrs	r2, r1
 8004b22:	63da      	str	r2, [r3, #60]	; 0x3c
 8004b24:	4b07      	ldr	r3, [pc, #28]	; (8004b44 <HAL_MspInit+0x4c>)
 8004b26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b28:	2380      	movs	r3, #128	; 0x80
 8004b2a:	055b      	lsls	r3, r3, #21
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	603b      	str	r3, [r7, #0]
 8004b30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 8004b32:	2380      	movs	r3, #128	; 0x80
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	0018      	movs	r0, r3
 8004b38:	f000 fc9a 	bl	8005470 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b3c:	46c0      	nop			; (mov r8, r8)
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	b002      	add	sp, #8
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	40021000 	.word	0x40021000

08004b48 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8004b48:	b590      	push	{r4, r7, lr}
 8004b4a:	b089      	sub	sp, #36	; 0x24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b50:	240c      	movs	r4, #12
 8004b52:	193b      	adds	r3, r7, r4
 8004b54:	0018      	movs	r0, r3
 8004b56:	2314      	movs	r3, #20
 8004b58:	001a      	movs	r2, r3
 8004b5a:	2100      	movs	r1, #0
 8004b5c:	f007 fee8 	bl	800c930 <memset>
  if(hcomp->Instance==COMP1)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a10      	ldr	r2, [pc, #64]	; (8004ba8 <HAL_COMP_MspInit+0x60>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d11a      	bne.n	8004ba0 <HAL_COMP_MspInit+0x58>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b6a:	4b10      	ldr	r3, [pc, #64]	; (8004bac <HAL_COMP_MspInit+0x64>)
 8004b6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b6e:	4b0f      	ldr	r3, [pc, #60]	; (8004bac <HAL_COMP_MspInit+0x64>)
 8004b70:	2102      	movs	r1, #2
 8004b72:	430a      	orrs	r2, r1
 8004b74:	635a      	str	r2, [r3, #52]	; 0x34
 8004b76:	4b0d      	ldr	r3, [pc, #52]	; (8004bac <HAL_COMP_MspInit+0x64>)
 8004b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	60bb      	str	r3, [r7, #8]
 8004b80:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004b82:	193b      	adds	r3, r7, r4
 8004b84:	2204      	movs	r2, #4
 8004b86:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004b88:	193b      	adds	r3, r7, r4
 8004b8a:	2203      	movs	r2, #3
 8004b8c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b8e:	193b      	adds	r3, r7, r4
 8004b90:	2200      	movs	r2, #0
 8004b92:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b94:	193b      	adds	r3, r7, r4
 8004b96:	4a06      	ldr	r2, [pc, #24]	; (8004bb0 <HAL_COMP_MspInit+0x68>)
 8004b98:	0019      	movs	r1, r3
 8004b9a:	0010      	movs	r0, r2
 8004b9c:	f001 fa84 	bl	80060a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 8004ba0:	46c0      	nop			; (mov r8, r8)
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	b009      	add	sp, #36	; 0x24
 8004ba6:	bd90      	pop	{r4, r7, pc}
 8004ba8:	40010200 	.word	0x40010200
 8004bac:	40021000 	.word	0x40021000
 8004bb0:	50000400 	.word	0x50000400

08004bb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004bb4:	b590      	push	{r4, r7, lr}
 8004bb6:	b097      	sub	sp, #92	; 0x5c
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bbc:	2344      	movs	r3, #68	; 0x44
 8004bbe:	18fb      	adds	r3, r7, r3
 8004bc0:	0018      	movs	r0, r3
 8004bc2:	2314      	movs	r3, #20
 8004bc4:	001a      	movs	r2, r3
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	f007 feb2 	bl	800c930 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004bcc:	2410      	movs	r4, #16
 8004bce:	193b      	adds	r3, r7, r4
 8004bd0:	0018      	movs	r0, r3
 8004bd2:	2334      	movs	r3, #52	; 0x34
 8004bd4:	001a      	movs	r2, r3
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	f007 feaa 	bl	800c930 <memset>
  if(hi2c->Instance==I2C1)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a27      	ldr	r2, [pc, #156]	; (8004c80 <HAL_I2C_MspInit+0xcc>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d147      	bne.n	8004c76 <HAL_I2C_MspInit+0xc2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004be6:	193b      	adds	r3, r7, r4
 8004be8:	2220      	movs	r2, #32
 8004bea:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004bec:	193b      	adds	r3, r7, r4
 8004bee:	2200      	movs	r2, #0
 8004bf0:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004bf2:	193b      	adds	r3, r7, r4
 8004bf4:	0018      	movs	r0, r3
 8004bf6:	f003 fdc9 	bl	800878c <HAL_RCCEx_PeriphCLKConfig>
 8004bfa:	1e03      	subs	r3, r0, #0
 8004bfc:	d001      	beq.n	8004c02 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004bfe:	f7ff ff75 	bl	8004aec <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c02:	4b20      	ldr	r3, [pc, #128]	; (8004c84 <HAL_I2C_MspInit+0xd0>)
 8004c04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c06:	4b1f      	ldr	r3, [pc, #124]	; (8004c84 <HAL_I2C_MspInit+0xd0>)
 8004c08:	2101      	movs	r1, #1
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	635a      	str	r2, [r3, #52]	; 0x34
 8004c0e:	4b1d      	ldr	r3, [pc, #116]	; (8004c84 <HAL_I2C_MspInit+0xd0>)
 8004c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c12:	2201      	movs	r2, #1
 8004c14:	4013      	ands	r3, r2
 8004c16:	60fb      	str	r3, [r7, #12]
 8004c18:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004c1a:	2144      	movs	r1, #68	; 0x44
 8004c1c:	187b      	adds	r3, r7, r1
 8004c1e:	22c0      	movs	r2, #192	; 0xc0
 8004c20:	00d2      	lsls	r2, r2, #3
 8004c22:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c24:	187b      	adds	r3, r7, r1
 8004c26:	2212      	movs	r2, #18
 8004c28:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c2a:	187b      	adds	r3, r7, r1
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c30:	187b      	adds	r3, r7, r1
 8004c32:	2200      	movs	r2, #0
 8004c34:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8004c36:	187b      	adds	r3, r7, r1
 8004c38:	2206      	movs	r2, #6
 8004c3a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c3c:	187a      	adds	r2, r7, r1
 8004c3e:	23a0      	movs	r3, #160	; 0xa0
 8004c40:	05db      	lsls	r3, r3, #23
 8004c42:	0011      	movs	r1, r2
 8004c44:	0018      	movs	r0, r3
 8004c46:	f001 fa2f 	bl	80060a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004c4a:	4b0e      	ldr	r3, [pc, #56]	; (8004c84 <HAL_I2C_MspInit+0xd0>)
 8004c4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c4e:	4b0d      	ldr	r3, [pc, #52]	; (8004c84 <HAL_I2C_MspInit+0xd0>)
 8004c50:	2180      	movs	r1, #128	; 0x80
 8004c52:	0389      	lsls	r1, r1, #14
 8004c54:	430a      	orrs	r2, r1
 8004c56:	63da      	str	r2, [r3, #60]	; 0x3c
 8004c58:	4b0a      	ldr	r3, [pc, #40]	; (8004c84 <HAL_I2C_MspInit+0xd0>)
 8004c5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c5c:	2380      	movs	r3, #128	; 0x80
 8004c5e:	039b      	lsls	r3, r3, #14
 8004c60:	4013      	ands	r3, r2
 8004c62:	60bb      	str	r3, [r7, #8]
 8004c64:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8004c66:	2200      	movs	r2, #0
 8004c68:	2100      	movs	r1, #0
 8004c6a:	2017      	movs	r0, #23
 8004c6c:	f000 ff22 	bl	8005ab4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8004c70:	2017      	movs	r0, #23
 8004c72:	f000 ff34 	bl	8005ade <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004c76:	46c0      	nop			; (mov r8, r8)
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	b017      	add	sp, #92	; 0x5c
 8004c7c:	bd90      	pop	{r4, r7, pc}
 8004c7e:	46c0      	nop			; (mov r8, r8)
 8004c80:	40005400 	.word	0x40005400
 8004c84:	40021000 	.word	0x40021000

08004c88 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8004c88:	b590      	push	{r4, r7, lr}
 8004c8a:	b099      	sub	sp, #100	; 0x64
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c90:	234c      	movs	r3, #76	; 0x4c
 8004c92:	18fb      	adds	r3, r7, r3
 8004c94:	0018      	movs	r0, r3
 8004c96:	2314      	movs	r3, #20
 8004c98:	001a      	movs	r2, r3
 8004c9a:	2100      	movs	r1, #0
 8004c9c:	f007 fe48 	bl	800c930 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004ca0:	2418      	movs	r4, #24
 8004ca2:	193b      	adds	r3, r7, r4
 8004ca4:	0018      	movs	r0, r3
 8004ca6:	2334      	movs	r3, #52	; 0x34
 8004ca8:	001a      	movs	r2, r3
 8004caa:	2100      	movs	r1, #0
 8004cac:	f007 fe40 	bl	800c930 <memset>
  if(hi2s->Instance==SPI1)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a4f      	ldr	r2, [pc, #316]	; (8004df4 <HAL_I2S_MspInit+0x16c>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d000      	beq.n	8004cbc <HAL_I2S_MspInit+0x34>
 8004cba:	e097      	b.n	8004dec <HAL_I2S_MspInit+0x164>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 8004cbc:	193b      	adds	r3, r7, r4
 8004cbe:	2280      	movs	r2, #128	; 0x80
 8004cc0:	0112      	lsls	r2, r2, #4
 8004cc2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8004cc4:	193b      	adds	r3, r7, r4
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004cca:	193b      	adds	r3, r7, r4
 8004ccc:	0018      	movs	r0, r3
 8004cce:	f003 fd5d 	bl	800878c <HAL_RCCEx_PeriphCLKConfig>
 8004cd2:	1e03      	subs	r3, r0, #0
 8004cd4:	d001      	beq.n	8004cda <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8004cd6:	f7ff ff09 	bl	8004aec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004cda:	4b47      	ldr	r3, [pc, #284]	; (8004df8 <HAL_I2S_MspInit+0x170>)
 8004cdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cde:	4b46      	ldr	r3, [pc, #280]	; (8004df8 <HAL_I2S_MspInit+0x170>)
 8004ce0:	2180      	movs	r1, #128	; 0x80
 8004ce2:	0149      	lsls	r1, r1, #5
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	641a      	str	r2, [r3, #64]	; 0x40
 8004ce8:	4b43      	ldr	r3, [pc, #268]	; (8004df8 <HAL_I2S_MspInit+0x170>)
 8004cea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cec:	2380      	movs	r3, #128	; 0x80
 8004cee:	015b      	lsls	r3, r3, #5
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	617b      	str	r3, [r7, #20]
 8004cf4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cf6:	4b40      	ldr	r3, [pc, #256]	; (8004df8 <HAL_I2S_MspInit+0x170>)
 8004cf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cfa:	4b3f      	ldr	r3, [pc, #252]	; (8004df8 <HAL_I2S_MspInit+0x170>)
 8004cfc:	2101      	movs	r1, #1
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	635a      	str	r2, [r3, #52]	; 0x34
 8004d02:	4b3d      	ldr	r3, [pc, #244]	; (8004df8 <HAL_I2S_MspInit+0x170>)
 8004d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d06:	2201      	movs	r2, #1
 8004d08:	4013      	ands	r3, r2
 8004d0a:	613b      	str	r3, [r7, #16]
 8004d0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d0e:	4b3a      	ldr	r3, [pc, #232]	; (8004df8 <HAL_I2S_MspInit+0x170>)
 8004d10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d12:	4b39      	ldr	r3, [pc, #228]	; (8004df8 <HAL_I2S_MspInit+0x170>)
 8004d14:	2102      	movs	r1, #2
 8004d16:	430a      	orrs	r2, r1
 8004d18:	635a      	str	r2, [r3, #52]	; 0x34
 8004d1a:	4b37      	ldr	r3, [pc, #220]	; (8004df8 <HAL_I2S_MspInit+0x170>)
 8004d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d1e:	2202      	movs	r2, #2
 8004d20:	4013      	ands	r3, r2
 8004d22:	60fb      	str	r3, [r7, #12]
 8004d24:	68fb      	ldr	r3, [r7, #12]
    PA15     ------> I2S1_WS
    PB3     ------> I2S1_CK
    PB4     ------> I2S1_MCK
    PB5     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004d26:	214c      	movs	r1, #76	; 0x4c
 8004d28:	187b      	adds	r3, r7, r1
 8004d2a:	2280      	movs	r2, #128	; 0x80
 8004d2c:	0212      	lsls	r2, r2, #8
 8004d2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d30:	000c      	movs	r4, r1
 8004d32:	193b      	adds	r3, r7, r4
 8004d34:	2202      	movs	r2, #2
 8004d36:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d38:	193b      	adds	r3, r7, r4
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d3e:	193b      	adds	r3, r7, r4
 8004d40:	2203      	movs	r2, #3
 8004d42:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004d44:	193b      	adds	r3, r7, r4
 8004d46:	2200      	movs	r2, #0
 8004d48:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d4a:	193a      	adds	r2, r7, r4
 8004d4c:	23a0      	movs	r3, #160	; 0xa0
 8004d4e:	05db      	lsls	r3, r3, #23
 8004d50:	0011      	movs	r1, r2
 8004d52:	0018      	movs	r0, r3
 8004d54:	f001 f9a8 	bl	80060a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8004d58:	0021      	movs	r1, r4
 8004d5a:	187b      	adds	r3, r7, r1
 8004d5c:	2238      	movs	r2, #56	; 0x38
 8004d5e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d60:	187b      	adds	r3, r7, r1
 8004d62:	2202      	movs	r2, #2
 8004d64:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d66:	187b      	adds	r3, r7, r1
 8004d68:	2201      	movs	r2, #1
 8004d6a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d6c:	187b      	adds	r3, r7, r1
 8004d6e:	2203      	movs	r2, #3
 8004d70:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004d72:	187b      	adds	r3, r7, r1
 8004d74:	2200      	movs	r2, #0
 8004d76:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d78:	187b      	adds	r3, r7, r1
 8004d7a:	4a20      	ldr	r2, [pc, #128]	; (8004dfc <HAL_I2S_MspInit+0x174>)
 8004d7c:	0019      	movs	r1, r3
 8004d7e:	0010      	movs	r0, r2
 8004d80:	f001 f992 	bl	80060a8 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8004d84:	4b1e      	ldr	r3, [pc, #120]	; (8004e00 <HAL_I2S_MspInit+0x178>)
 8004d86:	4a1f      	ldr	r2, [pc, #124]	; (8004e04 <HAL_I2S_MspInit+0x17c>)
 8004d88:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8004d8a:	4b1d      	ldr	r3, [pc, #116]	; (8004e00 <HAL_I2S_MspInit+0x178>)
 8004d8c:	2211      	movs	r2, #17
 8004d8e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d90:	4b1b      	ldr	r3, [pc, #108]	; (8004e00 <HAL_I2S_MspInit+0x178>)
 8004d92:	2210      	movs	r2, #16
 8004d94:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d96:	4b1a      	ldr	r3, [pc, #104]	; (8004e00 <HAL_I2S_MspInit+0x178>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004d9c:	4b18      	ldr	r3, [pc, #96]	; (8004e00 <HAL_I2S_MspInit+0x178>)
 8004d9e:	2280      	movs	r2, #128	; 0x80
 8004da0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004da2:	4b17      	ldr	r3, [pc, #92]	; (8004e00 <HAL_I2S_MspInit+0x178>)
 8004da4:	2280      	movs	r2, #128	; 0x80
 8004da6:	0052      	lsls	r2, r2, #1
 8004da8:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004daa:	4b15      	ldr	r3, [pc, #84]	; (8004e00 <HAL_I2S_MspInit+0x178>)
 8004dac:	2280      	movs	r2, #128	; 0x80
 8004dae:	00d2      	lsls	r2, r2, #3
 8004db0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8004db2:	4b13      	ldr	r3, [pc, #76]	; (8004e00 <HAL_I2S_MspInit+0x178>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004db8:	4b11      	ldr	r3, [pc, #68]	; (8004e00 <HAL_I2S_MspInit+0x178>)
 8004dba:	22c0      	movs	r2, #192	; 0xc0
 8004dbc:	0192      	lsls	r2, r2, #6
 8004dbe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8004dc0:	4b0f      	ldr	r3, [pc, #60]	; (8004e00 <HAL_I2S_MspInit+0x178>)
 8004dc2:	0018      	movs	r0, r3
 8004dc4:	f000 fea8 	bl	8005b18 <HAL_DMA_Init>
 8004dc8:	1e03      	subs	r3, r0, #0
 8004dca:	d001      	beq.n	8004dd0 <HAL_I2S_MspInit+0x148>
    {
      Error_Handler();
 8004dcc:	f7ff fe8e 	bl	8004aec <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a0b      	ldr	r2, [pc, #44]	; (8004e00 <HAL_I2S_MspInit+0x178>)
 8004dd4:	62da      	str	r2, [r3, #44]	; 0x2c
 8004dd6:	4b0a      	ldr	r3, [pc, #40]	; (8004e00 <HAL_I2S_MspInit+0x178>)
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	629a      	str	r2, [r3, #40]	; 0x28

    /* I2S1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8004ddc:	2200      	movs	r2, #0
 8004dde:	2100      	movs	r1, #0
 8004de0:	2019      	movs	r0, #25
 8004de2:	f000 fe67 	bl	8005ab4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004de6:	2019      	movs	r0, #25
 8004de8:	f000 fe79 	bl	8005ade <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004dec:	46c0      	nop			; (mov r8, r8)
 8004dee:	46bd      	mov	sp, r7
 8004df0:	b019      	add	sp, #100	; 0x64
 8004df2:	bd90      	pop	{r4, r7, pc}
 8004df4:	40013000 	.word	0x40013000
 8004df8:	40021000 	.word	0x40021000
 8004dfc:	50000400 	.word	0x50000400
 8004e00:	2000011c 	.word	0x2000011c
 8004e04:	40020008 	.word	0x40020008

08004e08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004e08:	b590      	push	{r4, r7, lr}
 8004e0a:	b08b      	sub	sp, #44	; 0x2c
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e10:	2414      	movs	r4, #20
 8004e12:	193b      	adds	r3, r7, r4
 8004e14:	0018      	movs	r0, r3
 8004e16:	2314      	movs	r3, #20
 8004e18:	001a      	movs	r2, r3
 8004e1a:	2100      	movs	r1, #0
 8004e1c:	f007 fd88 	bl	800c930 <memset>
  if(hspi->Instance==SPI2)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a2a      	ldr	r2, [pc, #168]	; (8004ed0 <HAL_SPI_MspInit+0xc8>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d14d      	bne.n	8004ec6 <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004e2a:	4b2a      	ldr	r3, [pc, #168]	; (8004ed4 <HAL_SPI_MspInit+0xcc>)
 8004e2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e2e:	4b29      	ldr	r3, [pc, #164]	; (8004ed4 <HAL_SPI_MspInit+0xcc>)
 8004e30:	2180      	movs	r1, #128	; 0x80
 8004e32:	01c9      	lsls	r1, r1, #7
 8004e34:	430a      	orrs	r2, r1
 8004e36:	63da      	str	r2, [r3, #60]	; 0x3c
 8004e38:	4b26      	ldr	r3, [pc, #152]	; (8004ed4 <HAL_SPI_MspInit+0xcc>)
 8004e3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e3c:	2380      	movs	r3, #128	; 0x80
 8004e3e:	01db      	lsls	r3, r3, #7
 8004e40:	4013      	ands	r3, r2
 8004e42:	613b      	str	r3, [r7, #16]
 8004e44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e46:	4b23      	ldr	r3, [pc, #140]	; (8004ed4 <HAL_SPI_MspInit+0xcc>)
 8004e48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e4a:	4b22      	ldr	r3, [pc, #136]	; (8004ed4 <HAL_SPI_MspInit+0xcc>)
 8004e4c:	2102      	movs	r1, #2
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	635a      	str	r2, [r3, #52]	; 0x34
 8004e52:	4b20      	ldr	r3, [pc, #128]	; (8004ed4 <HAL_SPI_MspInit+0xcc>)
 8004e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e56:	2202      	movs	r2, #2
 8004e58:	4013      	ands	r3, r2
 8004e5a:	60fb      	str	r3, [r7, #12]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB6     ------> SPI2_MISO
    PB7     ------> SPI2_MOSI
    PB8     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004e5e:	193b      	adds	r3, r7, r4
 8004e60:	2240      	movs	r2, #64	; 0x40
 8004e62:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e64:	193b      	adds	r3, r7, r4
 8004e66:	2202      	movs	r2, #2
 8004e68:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e6a:	193b      	adds	r3, r7, r4
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e70:	193b      	adds	r3, r7, r4
 8004e72:	2200      	movs	r2, #0
 8004e74:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI2;
 8004e76:	193b      	adds	r3, r7, r4
 8004e78:	2204      	movs	r2, #4
 8004e7a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e7c:	193b      	adds	r3, r7, r4
 8004e7e:	4a16      	ldr	r2, [pc, #88]	; (8004ed8 <HAL_SPI_MspInit+0xd0>)
 8004e80:	0019      	movs	r1, r3
 8004e82:	0010      	movs	r0, r2
 8004e84:	f001 f910 	bl	80060a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8004e88:	0021      	movs	r1, r4
 8004e8a:	187b      	adds	r3, r7, r1
 8004e8c:	22c0      	movs	r2, #192	; 0xc0
 8004e8e:	0052      	lsls	r2, r2, #1
 8004e90:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e92:	187b      	adds	r3, r7, r1
 8004e94:	2202      	movs	r2, #2
 8004e96:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e98:	187b      	adds	r3, r7, r1
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e9e:	187b      	adds	r3, r7, r1
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8004ea4:	187b      	adds	r3, r7, r1
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004eaa:	187b      	adds	r3, r7, r1
 8004eac:	4a0a      	ldr	r2, [pc, #40]	; (8004ed8 <HAL_SPI_MspInit+0xd0>)
 8004eae:	0019      	movs	r1, r3
 8004eb0:	0010      	movs	r0, r2
 8004eb2:	f001 f8f9 	bl	80060a8 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	2100      	movs	r1, #0
 8004eba:	201a      	movs	r0, #26
 8004ebc:	f000 fdfa 	bl	8005ab4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004ec0:	201a      	movs	r0, #26
 8004ec2:	f000 fe0c 	bl	8005ade <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004ec6:	46c0      	nop			; (mov r8, r8)
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	b00b      	add	sp, #44	; 0x2c
 8004ecc:	bd90      	pop	{r4, r7, pc}
 8004ece:	46c0      	nop			; (mov r8, r8)
 8004ed0:	40003800 	.word	0x40003800
 8004ed4:	40021000 	.word	0x40021000
 8004ed8:	50000400 	.word	0x50000400

08004edc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004edc:	b590      	push	{r4, r7, lr}
 8004ede:	b091      	sub	sp, #68	; 0x44
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004ee4:	240c      	movs	r4, #12
 8004ee6:	193b      	adds	r3, r7, r4
 8004ee8:	0018      	movs	r0, r3
 8004eea:	2334      	movs	r3, #52	; 0x34
 8004eec:	001a      	movs	r2, r3
 8004eee:	2100      	movs	r1, #0
 8004ef0:	f007 fd1e 	bl	800c930 <memset>
  if(htim_base->Instance==TIM1)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a11      	ldr	r2, [pc, #68]	; (8004f40 <HAL_TIM_Base_MspInit+0x64>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d11c      	bne.n	8004f38 <HAL_TIM_Base_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8004efe:	193b      	adds	r3, r7, r4
 8004f00:	2280      	movs	r2, #128	; 0x80
 8004f02:	0392      	lsls	r2, r2, #14
 8004f04:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8004f06:	193b      	adds	r3, r7, r4
 8004f08:	2200      	movs	r2, #0
 8004f0a:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004f0c:	193b      	adds	r3, r7, r4
 8004f0e:	0018      	movs	r0, r3
 8004f10:	f003 fc3c 	bl	800878c <HAL_RCCEx_PeriphCLKConfig>
 8004f14:	1e03      	subs	r3, r0, #0
 8004f16:	d001      	beq.n	8004f1c <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8004f18:	f7ff fde8 	bl	8004aec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004f1c:	4b09      	ldr	r3, [pc, #36]	; (8004f44 <HAL_TIM_Base_MspInit+0x68>)
 8004f1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f20:	4b08      	ldr	r3, [pc, #32]	; (8004f44 <HAL_TIM_Base_MspInit+0x68>)
 8004f22:	2180      	movs	r1, #128	; 0x80
 8004f24:	0109      	lsls	r1, r1, #4
 8004f26:	430a      	orrs	r2, r1
 8004f28:	641a      	str	r2, [r3, #64]	; 0x40
 8004f2a:	4b06      	ldr	r3, [pc, #24]	; (8004f44 <HAL_TIM_Base_MspInit+0x68>)
 8004f2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f2e:	2380      	movs	r3, #128	; 0x80
 8004f30:	011b      	lsls	r3, r3, #4
 8004f32:	4013      	ands	r3, r2
 8004f34:	60bb      	str	r3, [r7, #8]
 8004f36:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004f38:	46c0      	nop			; (mov r8, r8)
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	b011      	add	sp, #68	; 0x44
 8004f3e:	bd90      	pop	{r4, r7, pc}
 8004f40:	40012c00 	.word	0x40012c00
 8004f44:	40021000 	.word	0x40021000

08004f48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004f48:	b590      	push	{r4, r7, lr}
 8004f4a:	b089      	sub	sp, #36	; 0x24
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f50:	240c      	movs	r4, #12
 8004f52:	193b      	adds	r3, r7, r4
 8004f54:	0018      	movs	r0, r3
 8004f56:	2314      	movs	r3, #20
 8004f58:	001a      	movs	r2, r3
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	f007 fce8 	bl	800c930 <memset>
  if(htim->Instance==TIM1)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a15      	ldr	r2, [pc, #84]	; (8004fbc <HAL_TIM_MspPostInit+0x74>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d123      	bne.n	8004fb2 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f6a:	4b15      	ldr	r3, [pc, #84]	; (8004fc0 <HAL_TIM_MspPostInit+0x78>)
 8004f6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f6e:	4b14      	ldr	r3, [pc, #80]	; (8004fc0 <HAL_TIM_MspPostInit+0x78>)
 8004f70:	2101      	movs	r1, #1
 8004f72:	430a      	orrs	r2, r1
 8004f74:	635a      	str	r2, [r3, #52]	; 0x34
 8004f76:	4b12      	ldr	r3, [pc, #72]	; (8004fc0 <HAL_TIM_MspPostInit+0x78>)
 8004f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	60bb      	str	r3, [r7, #8]
 8004f80:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004f82:	193b      	adds	r3, r7, r4
 8004f84:	2280      	movs	r2, #128	; 0x80
 8004f86:	0052      	lsls	r2, r2, #1
 8004f88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f8a:	0021      	movs	r1, r4
 8004f8c:	187b      	adds	r3, r7, r1
 8004f8e:	2202      	movs	r2, #2
 8004f90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004f92:	187b      	adds	r3, r7, r1
 8004f94:	2202      	movs	r2, #2
 8004f96:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f98:	187b      	adds	r3, r7, r1
 8004f9a:	2203      	movs	r2, #3
 8004f9c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004f9e:	187b      	adds	r3, r7, r1
 8004fa0:	2202      	movs	r2, #2
 8004fa2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fa4:	187a      	adds	r2, r7, r1
 8004fa6:	23a0      	movs	r3, #160	; 0xa0
 8004fa8:	05db      	lsls	r3, r3, #23
 8004faa:	0011      	movs	r1, r2
 8004fac:	0018      	movs	r0, r3
 8004fae:	f001 f87b 	bl	80060a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004fb2:	46c0      	nop			; (mov r8, r8)
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	b009      	add	sp, #36	; 0x24
 8004fb8:	bd90      	pop	{r4, r7, pc}
 8004fba:	46c0      	nop			; (mov r8, r8)
 8004fbc:	40012c00 	.word	0x40012c00
 8004fc0:	40021000 	.word	0x40021000

08004fc4 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8004fc4:	b590      	push	{r4, r7, lr}
 8004fc6:	b08b      	sub	sp, #44	; 0x2c
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fcc:	2414      	movs	r4, #20
 8004fce:	193b      	adds	r3, r7, r4
 8004fd0:	0018      	movs	r0, r3
 8004fd2:	2314      	movs	r3, #20
 8004fd4:	001a      	movs	r2, r3
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	f007 fcaa 	bl	800c930 <memset>
  if(husart->Instance==USART3)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a30      	ldr	r2, [pc, #192]	; (80050a4 <HAL_USART_MspInit+0xe0>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d159      	bne.n	800509a <HAL_USART_MspInit+0xd6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004fe6:	4b30      	ldr	r3, [pc, #192]	; (80050a8 <HAL_USART_MspInit+0xe4>)
 8004fe8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fea:	4b2f      	ldr	r3, [pc, #188]	; (80050a8 <HAL_USART_MspInit+0xe4>)
 8004fec:	2180      	movs	r1, #128	; 0x80
 8004fee:	02c9      	lsls	r1, r1, #11
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	63da      	str	r2, [r3, #60]	; 0x3c
 8004ff4:	4b2c      	ldr	r3, [pc, #176]	; (80050a8 <HAL_USART_MspInit+0xe4>)
 8004ff6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ff8:	2380      	movs	r3, #128	; 0x80
 8004ffa:	02db      	lsls	r3, r3, #11
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	613b      	str	r3, [r7, #16]
 8005000:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005002:	4b29      	ldr	r3, [pc, #164]	; (80050a8 <HAL_USART_MspInit+0xe4>)
 8005004:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005006:	4b28      	ldr	r3, [pc, #160]	; (80050a8 <HAL_USART_MspInit+0xe4>)
 8005008:	2101      	movs	r1, #1
 800500a:	430a      	orrs	r2, r1
 800500c:	635a      	str	r2, [r3, #52]	; 0x34
 800500e:	4b26      	ldr	r3, [pc, #152]	; (80050a8 <HAL_USART_MspInit+0xe4>)
 8005010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005012:	2201      	movs	r2, #1
 8005014:	4013      	ands	r3, r2
 8005016:	60fb      	str	r3, [r7, #12]
 8005018:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800501a:	4b23      	ldr	r3, [pc, #140]	; (80050a8 <HAL_USART_MspInit+0xe4>)
 800501c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800501e:	4b22      	ldr	r3, [pc, #136]	; (80050a8 <HAL_USART_MspInit+0xe4>)
 8005020:	2102      	movs	r1, #2
 8005022:	430a      	orrs	r2, r1
 8005024:	635a      	str	r2, [r3, #52]	; 0x34
 8005026:	4b20      	ldr	r3, [pc, #128]	; (80050a8 <HAL_USART_MspInit+0xe4>)
 8005028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800502a:	2202      	movs	r2, #2
 800502c:	4013      	ands	r3, r2
 800502e:	60bb      	str	r3, [r7, #8]
 8005030:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA5     ------> USART3_TX
    PB0     ------> USART3_RX
    PB1     ------> USART3_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005032:	193b      	adds	r3, r7, r4
 8005034:	2220      	movs	r2, #32
 8005036:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005038:	193b      	adds	r3, r7, r4
 800503a:	2202      	movs	r2, #2
 800503c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800503e:	193b      	adds	r3, r7, r4
 8005040:	2200      	movs	r2, #0
 8005042:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005044:	193b      	adds	r3, r7, r4
 8005046:	2203      	movs	r2, #3
 8005048:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 800504a:	193b      	adds	r3, r7, r4
 800504c:	2204      	movs	r2, #4
 800504e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005050:	193a      	adds	r2, r7, r4
 8005052:	23a0      	movs	r3, #160	; 0xa0
 8005054:	05db      	lsls	r3, r3, #23
 8005056:	0011      	movs	r1, r2
 8005058:	0018      	movs	r0, r3
 800505a:	f001 f825 	bl	80060a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800505e:	0021      	movs	r1, r4
 8005060:	187b      	adds	r3, r7, r1
 8005062:	2203      	movs	r2, #3
 8005064:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005066:	187b      	adds	r3, r7, r1
 8005068:	2202      	movs	r2, #2
 800506a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800506c:	187b      	adds	r3, r7, r1
 800506e:	2200      	movs	r2, #0
 8005070:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005072:	187b      	adds	r3, r7, r1
 8005074:	2203      	movs	r2, #3
 8005076:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8005078:	187b      	adds	r3, r7, r1
 800507a:	2204      	movs	r2, #4
 800507c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800507e:	187b      	adds	r3, r7, r1
 8005080:	4a0a      	ldr	r2, [pc, #40]	; (80050ac <HAL_USART_MspInit+0xe8>)
 8005082:	0019      	movs	r1, r3
 8005084:	0010      	movs	r0, r2
 8005086:	f001 f80f 	bl	80060a8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 800508a:	2200      	movs	r2, #0
 800508c:	2100      	movs	r1, #0
 800508e:	201d      	movs	r0, #29
 8005090:	f000 fd10 	bl	8005ab4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 8005094:	201d      	movs	r0, #29
 8005096:	f000 fd22 	bl	8005ade <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800509a:	46c0      	nop			; (mov r8, r8)
 800509c:	46bd      	mov	sp, r7
 800509e:	b00b      	add	sp, #44	; 0x2c
 80050a0:	bd90      	pop	{r4, r7, pc}
 80050a2:	46c0      	nop			; (mov r8, r8)
 80050a4:	40004800 	.word	0x40004800
 80050a8:	40021000 	.word	0x40021000
 80050ac:	50000400 	.word	0x50000400

080050b0 <LL_USART_IsActiveFlag_FE>:
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	69db      	ldr	r3, [r3, #28]
 80050bc:	2202      	movs	r2, #2
 80050be:	4013      	ands	r3, r2
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d101      	bne.n	80050c8 <LL_USART_IsActiveFlag_FE+0x18>
 80050c4:	2301      	movs	r3, #1
 80050c6:	e000      	b.n	80050ca <LL_USART_IsActiveFlag_FE+0x1a>
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	0018      	movs	r0, r3
 80050cc:	46bd      	mov	sp, r7
 80050ce:	b002      	add	sp, #8
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <LL_USART_IsActiveFlag_NE>:
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b082      	sub	sp, #8
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	69db      	ldr	r3, [r3, #28]
 80050de:	2204      	movs	r2, #4
 80050e0:	4013      	ands	r3, r2
 80050e2:	2b04      	cmp	r3, #4
 80050e4:	d101      	bne.n	80050ea <LL_USART_IsActiveFlag_NE+0x18>
 80050e6:	2301      	movs	r3, #1
 80050e8:	e000      	b.n	80050ec <LL_USART_IsActiveFlag_NE+0x1a>
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	0018      	movs	r0, r3
 80050ee:	46bd      	mov	sp, r7
 80050f0:	b002      	add	sp, #8
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <LL_USART_IsActiveFlag_ORE>:
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	69db      	ldr	r3, [r3, #28]
 8005100:	2208      	movs	r2, #8
 8005102:	4013      	ands	r3, r2
 8005104:	2b08      	cmp	r3, #8
 8005106:	d101      	bne.n	800510c <LL_USART_IsActiveFlag_ORE+0x18>
 8005108:	2301      	movs	r3, #1
 800510a:	e000      	b.n	800510e <LL_USART_IsActiveFlag_ORE+0x1a>
 800510c:	2300      	movs	r3, #0
}
 800510e:	0018      	movs	r0, r3
 8005110:	46bd      	mov	sp, r7
 8005112:	b002      	add	sp, #8
 8005114:	bd80      	pop	{r7, pc}

08005116 <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b082      	sub	sp, #8
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	2220      	movs	r2, #32
 8005124:	4013      	ands	r3, r2
 8005126:	2b20      	cmp	r3, #32
 8005128:	d101      	bne.n	800512e <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 800512a:	2301      	movs	r3, #1
 800512c:	e000      	b.n	8005130 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 800512e:	2300      	movs	r3, #0
}
 8005130:	0018      	movs	r0, r3
 8005132:	46bd      	mov	sp, r7
 8005134:	b002      	add	sp, #8
 8005136:	bd80      	pop	{r7, pc}

08005138 <LL_USART_IsEnabledIT_RXNE_RXFNE>:
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2220      	movs	r2, #32
 8005146:	4013      	ands	r3, r2
 8005148:	2b20      	cmp	r3, #32
 800514a:	d101      	bne.n	8005150 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 800514c:	2301      	movs	r3, #1
 800514e:	e000      	b.n	8005152 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 8005150:	2300      	movs	r3, #0
}
 8005152:	0018      	movs	r0, r3
 8005154:	46bd      	mov	sp, r7
 8005156:	b002      	add	sp, #8
 8005158:	bd80      	pop	{r7, pc}

0800515a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800515a:	b580      	push	{r7, lr}
 800515c:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800515e:	46c0      	nop			; (mov r8, r8)
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005168:	e7fe      	b.n	8005168 <HardFault_Handler+0x4>

0800516a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800516a:	b580      	push	{r7, lr}
 800516c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800516e:	46c0      	nop			; (mov r8, r8)
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005178:	46c0      	nop			; (mov r8, r8)
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800517e:	b580      	push	{r7, lr}
 8005180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005182:	f000 f935 	bl	80053f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005186:	46c0      	nop			; (mov r8, r8)
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8005190:	4b03      	ldr	r3, [pc, #12]	; (80051a0 <DMA1_Channel1_IRQHandler+0x14>)
 8005192:	0018      	movs	r0, r3
 8005194:	f000 fe3a 	bl	8005e0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005198:	46c0      	nop			; (mov r8, r8)
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	46c0      	nop			; (mov r8, r8)
 80051a0:	2000011c 	.word	0x2000011c

080051a4 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80051a8:	4b09      	ldr	r3, [pc, #36]	; (80051d0 <I2C1_IRQHandler+0x2c>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	699a      	ldr	r2, [r3, #24]
 80051ae:	23e0      	movs	r3, #224	; 0xe0
 80051b0:	00db      	lsls	r3, r3, #3
 80051b2:	4013      	ands	r3, r2
 80051b4:	d004      	beq.n	80051c0 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80051b6:	4b06      	ldr	r3, [pc, #24]	; (80051d0 <I2C1_IRQHandler+0x2c>)
 80051b8:	0018      	movs	r0, r3
 80051ba:	f001 fa91 	bl	80066e0 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80051be:	e003      	b.n	80051c8 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80051c0:	4b03      	ldr	r3, [pc, #12]	; (80051d0 <I2C1_IRQHandler+0x2c>)
 80051c2:	0018      	movs	r0, r3
 80051c4:	f001 fa72 	bl	80066ac <HAL_I2C_EV_IRQHandler>
}
 80051c8:	46c0      	nop			; (mov r8, r8)
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	46c0      	nop			; (mov r8, r8)
 80051d0:	2000008c 	.word	0x2000008c

080051d4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s1);
 80051d8:	4b03      	ldr	r3, [pc, #12]	; (80051e8 <SPI1_IRQHandler+0x14>)
 80051da:	0018      	movs	r0, r3
 80051dc:	f002 fc94 	bl	8007b08 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80051e0:	46c0      	nop			; (mov r8, r8)
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	46c0      	nop			; (mov r8, r8)
 80051e8:	200000e0 	.word	0x200000e0

080051ec <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80051f0:	4b03      	ldr	r3, [pc, #12]	; (8005200 <SPI2_IRQHandler+0x14>)
 80051f2:	0018      	movs	r0, r3
 80051f4:	f004 fcf8 	bl	8009be8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80051f8:	46c0      	nop			; (mov r8, r8)
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	46c0      	nop			; (mov r8, r8)
 8005200:	20000178 	.word	0x20000178

08005204 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART2->ICR|=USART_ICR_ORECF;
 8005208:	4b25      	ldr	r3, [pc, #148]	; (80052a0 <USART2_IRQHandler+0x9c>)
 800520a:	6a1a      	ldr	r2, [r3, #32]
 800520c:	4b24      	ldr	r3, [pc, #144]	; (80052a0 <USART2_IRQHandler+0x9c>)
 800520e:	2108      	movs	r1, #8
 8005210:	430a      	orrs	r2, r1
 8005212:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_FECF;
 8005214:	4b22      	ldr	r3, [pc, #136]	; (80052a0 <USART2_IRQHandler+0x9c>)
 8005216:	6a1a      	ldr	r2, [r3, #32]
 8005218:	4b21      	ldr	r3, [pc, #132]	; (80052a0 <USART2_IRQHandler+0x9c>)
 800521a:	2102      	movs	r1, #2
 800521c:	430a      	orrs	r2, r1
 800521e:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_NECF;
 8005220:	4b1f      	ldr	r3, [pc, #124]	; (80052a0 <USART2_IRQHandler+0x9c>)
 8005222:	6a1a      	ldr	r2, [r3, #32]
 8005224:	4b1e      	ldr	r3, [pc, #120]	; (80052a0 <USART2_IRQHandler+0x9c>)
 8005226:	2104      	movs	r1, #4
 8005228:	430a      	orrs	r2, r1
 800522a:	621a      	str	r2, [r3, #32]
	if(LL_USART_IsActiveFlag_RXNE(USART2) && LL_USART_IsEnabledIT_RXNE(USART2))
 800522c:	4b1c      	ldr	r3, [pc, #112]	; (80052a0 <USART2_IRQHandler+0x9c>)
 800522e:	0018      	movs	r0, r3
 8005230:	f7ff ff71 	bl	8005116 <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8005234:	1e03      	subs	r3, r0, #0
 8005236:	d009      	beq.n	800524c <USART2_IRQHandler+0x48>
 8005238:	4b19      	ldr	r3, [pc, #100]	; (80052a0 <USART2_IRQHandler+0x9c>)
 800523a:	0018      	movs	r0, r3
 800523c:	f7ff ff7c 	bl	8005138 <LL_USART_IsEnabledIT_RXNE_RXFNE>
 8005240:	1e03      	subs	r3, r0, #0
 8005242:	d003      	beq.n	800524c <USART2_IRQHandler+0x48>
	  {
	    USART2_RX_Callback();// launching the receiving callback function //LL implentation
 8005244:	f7fb fef6 	bl	8001034 <USART2_RX_Callback>
	  {
 8005248:	46c0      	nop			; (mov r8, r8)
	  }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800524a:	e025      	b.n	8005298 <USART2_IRQHandler+0x94>
		  USART2->ICR|=USART_ICR_ORECF;
 800524c:	4b14      	ldr	r3, [pc, #80]	; (80052a0 <USART2_IRQHandler+0x9c>)
 800524e:	6a1a      	ldr	r2, [r3, #32]
 8005250:	4b13      	ldr	r3, [pc, #76]	; (80052a0 <USART2_IRQHandler+0x9c>)
 8005252:	2108      	movs	r1, #8
 8005254:	430a      	orrs	r2, r1
 8005256:	621a      	str	r2, [r3, #32]
	    if(LL_USART_IsActiveFlag_ORE(USART2))//clear the overrun flag by reading from RDR
 8005258:	4b11      	ldr	r3, [pc, #68]	; (80052a0 <USART2_IRQHandler+0x9c>)
 800525a:	0018      	movs	r0, r3
 800525c:	f7ff ff4a 	bl	80050f4 <LL_USART_IsActiveFlag_ORE>
 8005260:	1e03      	subs	r3, r0, #0
 8005262:	d008      	beq.n	8005276 <USART2_IRQHandler+0x72>
	    	USART2->ICR|=USART_ICR_ORECF;
 8005264:	4b0e      	ldr	r3, [pc, #56]	; (80052a0 <USART2_IRQHandler+0x9c>)
 8005266:	6a1a      	ldr	r2, [r3, #32]
 8005268:	4b0d      	ldr	r3, [pc, #52]	; (80052a0 <USART2_IRQHandler+0x9c>)
 800526a:	2108      	movs	r1, #8
 800526c:	430a      	orrs	r2, r1
 800526e:	621a      	str	r2, [r3, #32]
	      (void) USART2->RDR;
 8005270:	4b0b      	ldr	r3, [pc, #44]	; (80052a0 <USART2_IRQHandler+0x9c>)
 8005272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8005274:	e010      	b.n	8005298 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_FE(USART2))//clear another flag by reading from RDR
 8005276:	4b0a      	ldr	r3, [pc, #40]	; (80052a0 <USART2_IRQHandler+0x9c>)
 8005278:	0018      	movs	r0, r3
 800527a:	f7ff ff19 	bl	80050b0 <LL_USART_IsActiveFlag_FE>
 800527e:	1e03      	subs	r3, r0, #0
 8005280:	d002      	beq.n	8005288 <USART2_IRQHandler+0x84>
	      (void) USART2->RDR;
 8005282:	4b07      	ldr	r3, [pc, #28]	; (80052a0 <USART2_IRQHandler+0x9c>)
 8005284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8005286:	e007      	b.n	8005298 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_NE(USART2))//clear another flag by reading from RDR
 8005288:	4b05      	ldr	r3, [pc, #20]	; (80052a0 <USART2_IRQHandler+0x9c>)
 800528a:	0018      	movs	r0, r3
 800528c:	f7ff ff21 	bl	80050d2 <LL_USART_IsActiveFlag_NE>
 8005290:	1e03      	subs	r3, r0, #0
 8005292:	d001      	beq.n	8005298 <USART2_IRQHandler+0x94>
	      (void) USART2->RDR;
 8005294:	4b02      	ldr	r3, [pc, #8]	; (80052a0 <USART2_IRQHandler+0x9c>)
 8005296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8005298:	46c0      	nop			; (mov r8, r8)
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	46c0      	nop			; (mov r8, r8)
 80052a0:	40004400 	.word	0x40004400

080052a4 <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_USART_IRQHandler(&husart3);
 80052a8:	4b03      	ldr	r3, [pc, #12]	; (80052b8 <USART3_4_LPUART1_IRQHandler+0x14>)
 80052aa:	0018      	movs	r0, r3
 80052ac:	f006 f9d6 	bl	800b65c <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 80052b0:	46c0      	nop			; (mov r8, r8)
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	46c0      	nop			; (mov r8, r8)
 80052b8:	20000228 	.word	0x20000228

080052bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80052c0:	46c0      	nop			; (mov r8, r8)
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
	...

080052c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80052c8:	480d      	ldr	r0, [pc, #52]	; (8005300 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80052ca:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80052cc:	f7ff fff6 	bl	80052bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80052d0:	480c      	ldr	r0, [pc, #48]	; (8005304 <LoopForever+0x6>)
  ldr r1, =_edata
 80052d2:	490d      	ldr	r1, [pc, #52]	; (8005308 <LoopForever+0xa>)
  ldr r2, =_sidata
 80052d4:	4a0d      	ldr	r2, [pc, #52]	; (800530c <LoopForever+0xe>)
  movs r3, #0
 80052d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80052d8:	e002      	b.n	80052e0 <LoopCopyDataInit>

080052da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80052da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80052dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80052de:	3304      	adds	r3, #4

080052e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80052e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80052e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80052e4:	d3f9      	bcc.n	80052da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80052e6:	4a0a      	ldr	r2, [pc, #40]	; (8005310 <LoopForever+0x12>)
  ldr r4, =_ebss
 80052e8:	4c0a      	ldr	r4, [pc, #40]	; (8005314 <LoopForever+0x16>)
  movs r3, #0
 80052ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80052ec:	e001      	b.n	80052f2 <LoopFillZerobss>

080052ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80052ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80052f0:	3204      	adds	r2, #4

080052f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80052f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80052f4:	d3fb      	bcc.n	80052ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80052f6:	f007 faf7 	bl	800c8e8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80052fa:	f7fb f95f 	bl	80005bc <main>

080052fe <LoopForever>:

LoopForever:
  b LoopForever
 80052fe:	e7fe      	b.n	80052fe <LoopForever>
  ldr   r0, =_estack
 8005300:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8005304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005308:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 800530c:	08018448 	.word	0x08018448
  ldr r2, =_sbss
 8005310:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8005314:	20001304 	.word	0x20001304

08005318 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005318:	e7fe      	b.n	8005318 <ADC1_COMP_IRQHandler>
	...

0800531c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005322:	1dfb      	adds	r3, r7, #7
 8005324:	2200      	movs	r2, #0
 8005326:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005328:	4b0b      	ldr	r3, [pc, #44]	; (8005358 <HAL_Init+0x3c>)
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	4b0a      	ldr	r3, [pc, #40]	; (8005358 <HAL_Init+0x3c>)
 800532e:	2180      	movs	r1, #128	; 0x80
 8005330:	0049      	lsls	r1, r1, #1
 8005332:	430a      	orrs	r2, r1
 8005334:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005336:	2000      	movs	r0, #0
 8005338:	f000 f810 	bl	800535c <HAL_InitTick>
 800533c:	1e03      	subs	r3, r0, #0
 800533e:	d003      	beq.n	8005348 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8005340:	1dfb      	adds	r3, r7, #7
 8005342:	2201      	movs	r2, #1
 8005344:	701a      	strb	r2, [r3, #0]
 8005346:	e001      	b.n	800534c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8005348:	f7ff fbd6 	bl	8004af8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800534c:	1dfb      	adds	r3, r7, #7
 800534e:	781b      	ldrb	r3, [r3, #0]
}
 8005350:	0018      	movs	r0, r3
 8005352:	46bd      	mov	sp, r7
 8005354:	b002      	add	sp, #8
 8005356:	bd80      	pop	{r7, pc}
 8005358:	40022000 	.word	0x40022000

0800535c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800535c:	b590      	push	{r4, r7, lr}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005364:	230f      	movs	r3, #15
 8005366:	18fb      	adds	r3, r7, r3
 8005368:	2200      	movs	r2, #0
 800536a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800536c:	4b1d      	ldr	r3, [pc, #116]	; (80053e4 <HAL_InitTick+0x88>)
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d02b      	beq.n	80053cc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8005374:	4b1c      	ldr	r3, [pc, #112]	; (80053e8 <HAL_InitTick+0x8c>)
 8005376:	681c      	ldr	r4, [r3, #0]
 8005378:	4b1a      	ldr	r3, [pc, #104]	; (80053e4 <HAL_InitTick+0x88>)
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	0019      	movs	r1, r3
 800537e:	23fa      	movs	r3, #250	; 0xfa
 8005380:	0098      	lsls	r0, r3, #2
 8005382:	f7fa febf 	bl	8000104 <__udivsi3>
 8005386:	0003      	movs	r3, r0
 8005388:	0019      	movs	r1, r3
 800538a:	0020      	movs	r0, r4
 800538c:	f7fa feba 	bl	8000104 <__udivsi3>
 8005390:	0003      	movs	r3, r0
 8005392:	0018      	movs	r0, r3
 8005394:	f000 fbb3 	bl	8005afe <HAL_SYSTICK_Config>
 8005398:	1e03      	subs	r3, r0, #0
 800539a:	d112      	bne.n	80053c2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b03      	cmp	r3, #3
 80053a0:	d80a      	bhi.n	80053b8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80053a2:	6879      	ldr	r1, [r7, #4]
 80053a4:	2301      	movs	r3, #1
 80053a6:	425b      	negs	r3, r3
 80053a8:	2200      	movs	r2, #0
 80053aa:	0018      	movs	r0, r3
 80053ac:	f000 fb82 	bl	8005ab4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80053b0:	4b0e      	ldr	r3, [pc, #56]	; (80053ec <HAL_InitTick+0x90>)
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	601a      	str	r2, [r3, #0]
 80053b6:	e00d      	b.n	80053d4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80053b8:	230f      	movs	r3, #15
 80053ba:	18fb      	adds	r3, r7, r3
 80053bc:	2201      	movs	r2, #1
 80053be:	701a      	strb	r2, [r3, #0]
 80053c0:	e008      	b.n	80053d4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80053c2:	230f      	movs	r3, #15
 80053c4:	18fb      	adds	r3, r7, r3
 80053c6:	2201      	movs	r2, #1
 80053c8:	701a      	strb	r2, [r3, #0]
 80053ca:	e003      	b.n	80053d4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80053cc:	230f      	movs	r3, #15
 80053ce:	18fb      	adds	r3, r7, r3
 80053d0:	2201      	movs	r2, #1
 80053d2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80053d4:	230f      	movs	r3, #15
 80053d6:	18fb      	adds	r3, r7, r3
 80053d8:	781b      	ldrb	r3, [r3, #0]
}
 80053da:	0018      	movs	r0, r3
 80053dc:	46bd      	mov	sp, r7
 80053de:	b005      	add	sp, #20
 80053e0:	bd90      	pop	{r4, r7, pc}
 80053e2:	46c0      	nop			; (mov r8, r8)
 80053e4:	2000003c 	.word	0x2000003c
 80053e8:	20000034 	.word	0x20000034
 80053ec:	20000038 	.word	0x20000038

080053f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80053f4:	4b05      	ldr	r3, [pc, #20]	; (800540c <HAL_IncTick+0x1c>)
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	001a      	movs	r2, r3
 80053fa:	4b05      	ldr	r3, [pc, #20]	; (8005410 <HAL_IncTick+0x20>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	18d2      	adds	r2, r2, r3
 8005400:	4b03      	ldr	r3, [pc, #12]	; (8005410 <HAL_IncTick+0x20>)
 8005402:	601a      	str	r2, [r3, #0]
}
 8005404:	46c0      	nop			; (mov r8, r8)
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	46c0      	nop			; (mov r8, r8)
 800540c:	2000003c 	.word	0x2000003c
 8005410:	20001300 	.word	0x20001300

08005414 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	af00      	add	r7, sp, #0
  return uwTick;
 8005418:	4b02      	ldr	r3, [pc, #8]	; (8005424 <HAL_GetTick+0x10>)
 800541a:	681b      	ldr	r3, [r3, #0]
}
 800541c:	0018      	movs	r0, r3
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	46c0      	nop			; (mov r8, r8)
 8005424:	20001300 	.word	0x20001300

08005428 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005430:	f7ff fff0 	bl	8005414 <HAL_GetTick>
 8005434:	0003      	movs	r3, r0
 8005436:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	3301      	adds	r3, #1
 8005440:	d005      	beq.n	800544e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005442:	4b0a      	ldr	r3, [pc, #40]	; (800546c <HAL_Delay+0x44>)
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	001a      	movs	r2, r3
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	189b      	adds	r3, r3, r2
 800544c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800544e:	46c0      	nop			; (mov r8, r8)
 8005450:	f7ff ffe0 	bl	8005414 <HAL_GetTick>
 8005454:	0002      	movs	r2, r0
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	429a      	cmp	r2, r3
 800545e:	d8f7      	bhi.n	8005450 <HAL_Delay+0x28>
  {
  }
}
 8005460:	46c0      	nop			; (mov r8, r8)
 8005462:	46c0      	nop			; (mov r8, r8)
 8005464:	46bd      	mov	sp, r7
 8005466:	b004      	add	sp, #16
 8005468:	bd80      	pop	{r7, pc}
 800546a:	46c0      	nop			; (mov r8, r8)
 800546c:	2000003c 	.word	0x2000003c

08005470 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8005478:	4b06      	ldr	r3, [pc, #24]	; (8005494 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a06      	ldr	r2, [pc, #24]	; (8005498 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800547e:	4013      	ands	r3, r2
 8005480:	0019      	movs	r1, r3
 8005482:	4b04      	ldr	r3, [pc, #16]	; (8005494 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	430a      	orrs	r2, r1
 8005488:	601a      	str	r2, [r3, #0]
}
 800548a:	46c0      	nop			; (mov r8, r8)
 800548c:	46bd      	mov	sp, r7
 800548e:	b002      	add	sp, #8
 8005490:	bd80      	pop	{r7, pc}
 8005492:	46c0      	nop			; (mov r8, r8)
 8005494:	40010000 	.word	0x40010000
 8005498:	fffff9ff 	.word	0xfffff9ff

0800549c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80054a4:	4a05      	ldr	r2, [pc, #20]	; (80054bc <LL_EXTI_EnableIT_0_31+0x20>)
 80054a6:	2380      	movs	r3, #128	; 0x80
 80054a8:	58d2      	ldr	r2, [r2, r3]
 80054aa:	4904      	ldr	r1, [pc, #16]	; (80054bc <LL_EXTI_EnableIT_0_31+0x20>)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	2280      	movs	r2, #128	; 0x80
 80054b2:	508b      	str	r3, [r1, r2]
}
 80054b4:	46c0      	nop			; (mov r8, r8)
 80054b6:	46bd      	mov	sp, r7
 80054b8:	b002      	add	sp, #8
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	40021800 	.word	0x40021800

080054c0 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80054c8:	4a06      	ldr	r2, [pc, #24]	; (80054e4 <LL_EXTI_DisableIT_0_31+0x24>)
 80054ca:	2380      	movs	r3, #128	; 0x80
 80054cc:	58d3      	ldr	r3, [r2, r3]
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	43d2      	mvns	r2, r2
 80054d2:	4904      	ldr	r1, [pc, #16]	; (80054e4 <LL_EXTI_DisableIT_0_31+0x24>)
 80054d4:	4013      	ands	r3, r2
 80054d6:	2280      	movs	r2, #128	; 0x80
 80054d8:	508b      	str	r3, [r1, r2]
}
 80054da:	46c0      	nop			; (mov r8, r8)
 80054dc:	46bd      	mov	sp, r7
 80054de:	b002      	add	sp, #8
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	46c0      	nop			; (mov r8, r8)
 80054e4:	40021800 	.word	0x40021800

080054e8 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80054f0:	4a05      	ldr	r2, [pc, #20]	; (8005508 <LL_EXTI_EnableEvent_0_31+0x20>)
 80054f2:	2384      	movs	r3, #132	; 0x84
 80054f4:	58d2      	ldr	r2, [r2, r3]
 80054f6:	4904      	ldr	r1, [pc, #16]	; (8005508 <LL_EXTI_EnableEvent_0_31+0x20>)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	2284      	movs	r2, #132	; 0x84
 80054fe:	508b      	str	r3, [r1, r2]

}
 8005500:	46c0      	nop			; (mov r8, r8)
 8005502:	46bd      	mov	sp, r7
 8005504:	b002      	add	sp, #8
 8005506:	bd80      	pop	{r7, pc}
 8005508:	40021800 	.word	0x40021800

0800550c <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8005514:	4a06      	ldr	r2, [pc, #24]	; (8005530 <LL_EXTI_DisableEvent_0_31+0x24>)
 8005516:	2384      	movs	r3, #132	; 0x84
 8005518:	58d3      	ldr	r3, [r2, r3]
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	43d2      	mvns	r2, r2
 800551e:	4904      	ldr	r1, [pc, #16]	; (8005530 <LL_EXTI_DisableEvent_0_31+0x24>)
 8005520:	4013      	ands	r3, r2
 8005522:	2284      	movs	r2, #132	; 0x84
 8005524:	508b      	str	r3, [r1, r2]
}
 8005526:	46c0      	nop			; (mov r8, r8)
 8005528:	46bd      	mov	sp, r7
 800552a:	b002      	add	sp, #8
 800552c:	bd80      	pop	{r7, pc}
 800552e:	46c0      	nop			; (mov r8, r8)
 8005530:	40021800 	.word	0x40021800

08005534 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800553c:	4b04      	ldr	r3, [pc, #16]	; (8005550 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 800553e:	6819      	ldr	r1, [r3, #0]
 8005540:	4b03      	ldr	r3, [pc, #12]	; (8005550 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	430a      	orrs	r2, r1
 8005546:	601a      	str	r2, [r3, #0]

}
 8005548:	46c0      	nop			; (mov r8, r8)
 800554a:	46bd      	mov	sp, r7
 800554c:	b002      	add	sp, #8
 800554e:	bd80      	pop	{r7, pc}
 8005550:	40021800 	.word	0x40021800

08005554 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800555c:	4b05      	ldr	r3, [pc, #20]	; (8005574 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	43d9      	mvns	r1, r3
 8005564:	4b03      	ldr	r3, [pc, #12]	; (8005574 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8005566:	400a      	ands	r2, r1
 8005568:	601a      	str	r2, [r3, #0]

}
 800556a:	46c0      	nop			; (mov r8, r8)
 800556c:	46bd      	mov	sp, r7
 800556e:	b002      	add	sp, #8
 8005570:	bd80      	pop	{r7, pc}
 8005572:	46c0      	nop			; (mov r8, r8)
 8005574:	40021800 	.word	0x40021800

08005578 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8005580:	4b04      	ldr	r3, [pc, #16]	; (8005594 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8005582:	6859      	ldr	r1, [r3, #4]
 8005584:	4b03      	ldr	r3, [pc, #12]	; (8005594 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	430a      	orrs	r2, r1
 800558a:	605a      	str	r2, [r3, #4]
}
 800558c:	46c0      	nop			; (mov r8, r8)
 800558e:	46bd      	mov	sp, r7
 8005590:	b002      	add	sp, #8
 8005592:	bd80      	pop	{r7, pc}
 8005594:	40021800 	.word	0x40021800

08005598 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80055a0:	4b05      	ldr	r3, [pc, #20]	; (80055b8 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80055a2:	685a      	ldr	r2, [r3, #4]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	43d9      	mvns	r1, r3
 80055a8:	4b03      	ldr	r3, [pc, #12]	; (80055b8 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80055aa:	400a      	ands	r2, r1
 80055ac:	605a      	str	r2, [r3, #4]
}
 80055ae:	46c0      	nop			; (mov r8, r8)
 80055b0:	46bd      	mov	sp, r7
 80055b2:	b002      	add	sp, #8
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	46c0      	nop			; (mov r8, r8)
 80055b8:	40021800 	.word	0x40021800

080055bc <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 80055c4:	4b03      	ldr	r3, [pc, #12]	; (80055d4 <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	611a      	str	r2, [r3, #16]
}
 80055ca:	46c0      	nop			; (mov r8, r8)
 80055cc:	46bd      	mov	sp, r7
 80055ce:	b002      	add	sp, #8
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	46c0      	nop			; (mov r8, r8)
 80055d4:	40021800 	.word	0x40021800

080055d8 <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 80055e0:	4b03      	ldr	r3, [pc, #12]	; (80055f0 <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	60da      	str	r2, [r3, #12]
}
 80055e6:	46c0      	nop			; (mov r8, r8)
 80055e8:	46bd      	mov	sp, r7
 80055ea:	b002      	add	sp, #8
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	46c0      	nop			; (mov r8, r8)
 80055f0:	40021800 	.word	0x40021800

080055f4 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b088      	sub	sp, #32
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80055fc:	2300      	movs	r3, #0
 80055fe:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005600:	211f      	movs	r1, #31
 8005602:	187b      	adds	r3, r7, r1
 8005604:	2200      	movs	r2, #0
 8005606:	701a      	strb	r2, [r3, #0]
  __IO uint32_t * comp_common_odd;
  __IO uint32_t * comp_common_even;
#endif /* COMP3 */

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d103      	bne.n	8005616 <HAL_COMP_Init+0x22>
  {
    status = HAL_ERROR;
 800560e:	187b      	adds	r3, r7, r1
 8005610:	2201      	movs	r2, #1
 8005612:	701a      	strb	r2, [r3, #0]
 8005614:	e13d      	b.n	8005892 <HAL_COMP_Init+0x29e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	0fdb      	lsrs	r3, r3, #31
 800561e:	07da      	lsls	r2, r3, #31
 8005620:	2380      	movs	r3, #128	; 0x80
 8005622:	061b      	lsls	r3, r3, #24
 8005624:	429a      	cmp	r2, r3
 8005626:	d104      	bne.n	8005632 <HAL_COMP_Init+0x3e>
  {
    status = HAL_ERROR;
 8005628:	231f      	movs	r3, #31
 800562a:	18fb      	adds	r3, r7, r3
 800562c:	2201      	movs	r2, #1
 800562e:	701a      	strb	r2, [r3, #0]
 8005630:	e12f      	b.n	8005892 <HAL_COMP_Init+0x29e>
    if(hcomp->Init.WindowMode != COMP_WINDOWMODE_DISABLE)
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2229      	movs	r2, #41	; 0x29
 8005636:	5c9b      	ldrb	r3, [r3, r2]
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d10a      	bne.n	8005654 <HAL_COMP_Init+0x60>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2228      	movs	r2, #40	; 0x28
 8005642:	2100      	movs	r1, #0
 8005644:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	0018      	movs	r0, r3
 8005650:	f7ff fa7a 	bl	8004b48 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2230      	movs	r2, #48	; 0x30
 800565c:	4013      	ands	r3, r2
 800565e:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	69db      	ldr	r3, [r3, #28]
 800567a:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (  hcomp->Init.InputMinus
 8005680:	4313      	orrs	r3, r2
 8005682:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a85      	ldr	r2, [pc, #532]	; (80058a0 <HAL_COMP_Init+0x2ac>)
 800568c:	4013      	ands	r3, r2
 800568e:	0019      	movs	r1, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	430a      	orrs	r2, r1
 8005698:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(*comp_common_odd, COMP_CSR_WINOUT);
        CLEAR_BIT(*comp_common_even, COMP_CSR_WINOUT);
        break;
    }
#else
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685a      	ldr	r2, [r3, #4]
 800569e:	2380      	movs	r3, #128	; 0x80
 80056a0:	011b      	lsls	r3, r3, #4
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d10d      	bne.n	80056c2 <HAL_COMP_Init+0xce>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 80056a6:	4b7f      	ldr	r3, [pc, #508]	; (80058a4 <HAL_COMP_Init+0x2b0>)
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	4b7e      	ldr	r3, [pc, #504]	; (80058a4 <HAL_COMP_Init+0x2b0>)
 80056ac:	497e      	ldr	r1, [pc, #504]	; (80058a8 <HAL_COMP_Init+0x2b4>)
 80056ae:	400a      	ands	r2, r1
 80056b0:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 80056b2:	4b7c      	ldr	r3, [pc, #496]	; (80058a4 <HAL_COMP_Init+0x2b0>)
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	4b7b      	ldr	r3, [pc, #492]	; (80058a4 <HAL_COMP_Init+0x2b0>)
 80056b8:	2180      	movs	r1, #128	; 0x80
 80056ba:	0109      	lsls	r1, r1, #4
 80056bc:	430a      	orrs	r2, r1
 80056be:	605a      	str	r2, [r3, #4]
 80056c0:	e01f      	b.n	8005702 <HAL_COMP_Init+0x10e>
    }
    else if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	23c0      	movs	r3, #192	; 0xc0
 80056c8:	015b      	lsls	r3, r3, #5
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d10d      	bne.n	80056ea <HAL_COMP_Init+0xf6>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 80056ce:	4b75      	ldr	r3, [pc, #468]	; (80058a4 <HAL_COMP_Init+0x2b0>)
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	4b74      	ldr	r3, [pc, #464]	; (80058a4 <HAL_COMP_Init+0x2b0>)
 80056d4:	2180      	movs	r1, #128	; 0x80
 80056d6:	0109      	lsls	r1, r1, #4
 80056d8:	430a      	orrs	r2, r1
 80056da:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 80056dc:	4b71      	ldr	r3, [pc, #452]	; (80058a4 <HAL_COMP_Init+0x2b0>)
 80056de:	685a      	ldr	r2, [r3, #4]
 80056e0:	4b70      	ldr	r3, [pc, #448]	; (80058a4 <HAL_COMP_Init+0x2b0>)
 80056e2:	4971      	ldr	r1, [pc, #452]	; (80058a8 <HAL_COMP_Init+0x2b4>)
 80056e4:	400a      	ands	r2, r1
 80056e6:	605a      	str	r2, [r3, #4]
 80056e8:	e00b      	b.n	8005702 <HAL_COMP_Init+0x10e>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 80056ea:	4b6e      	ldr	r3, [pc, #440]	; (80058a4 <HAL_COMP_Init+0x2b0>)
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	4b6d      	ldr	r3, [pc, #436]	; (80058a4 <HAL_COMP_Init+0x2b0>)
 80056f0:	496d      	ldr	r1, [pc, #436]	; (80058a8 <HAL_COMP_Init+0x2b4>)
 80056f2:	400a      	ands	r2, r1
 80056f4:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 80056f6:	4b6b      	ldr	r3, [pc, #428]	; (80058a4 <HAL_COMP_Init+0x2b0>)
 80056f8:	685a      	ldr	r2, [r3, #4]
 80056fa:	4b6a      	ldr	r3, [pc, #424]	; (80058a4 <HAL_COMP_Init+0x2b0>)
 80056fc:	496a      	ldr	r1, [pc, #424]	; (80058a8 <HAL_COMP_Init+0x2b4>)
 80056fe:	400a      	ands	r2, r1
 8005700:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	22a0      	movs	r2, #160	; 0xa0
 8005708:	01d2      	lsls	r2, r2, #7
 800570a:	4293      	cmp	r3, r2
 800570c:	d017      	beq.n	800573e <HAL_COMP_Init+0x14a>
 800570e:	22a0      	movs	r2, #160	; 0xa0
 8005710:	01d2      	lsls	r2, r2, #7
 8005712:	4293      	cmp	r3, r2
 8005714:	d830      	bhi.n	8005778 <HAL_COMP_Init+0x184>
 8005716:	2b01      	cmp	r3, #1
 8005718:	d01f      	beq.n	800575a <HAL_COMP_Init+0x166>
 800571a:	2280      	movs	r2, #128	; 0x80
 800571c:	01d2      	lsls	r2, r2, #7
 800571e:	4293      	cmp	r3, r2
 8005720:	d12a      	bne.n	8005778 <HAL_COMP_Init+0x184>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8005722:	4b60      	ldr	r3, [pc, #384]	; (80058a4 <HAL_COMP_Init+0x2b0>)
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	4b5f      	ldr	r3, [pc, #380]	; (80058a4 <HAL_COMP_Init+0x2b0>)
 8005728:	2180      	movs	r1, #128	; 0x80
 800572a:	01c9      	lsls	r1, r1, #7
 800572c:	430a      	orrs	r2, r1
 800572e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8005730:	4b5c      	ldr	r3, [pc, #368]	; (80058a4 <HAL_COMP_Init+0x2b0>)
 8005732:	685a      	ldr	r2, [r3, #4]
 8005734:	4b5b      	ldr	r3, [pc, #364]	; (80058a4 <HAL_COMP_Init+0x2b0>)
 8005736:	495d      	ldr	r1, [pc, #372]	; (80058ac <HAL_COMP_Init+0x2b8>)
 8005738:	400a      	ands	r2, r1
 800573a:	605a      	str	r2, [r3, #4]
        break;
 800573c:	e029      	b.n	8005792 <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800573e:	4b59      	ldr	r3, [pc, #356]	; (80058a4 <HAL_COMP_Init+0x2b0>)
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	4b58      	ldr	r3, [pc, #352]	; (80058a4 <HAL_COMP_Init+0x2b0>)
 8005744:	4959      	ldr	r1, [pc, #356]	; (80058ac <HAL_COMP_Init+0x2b8>)
 8005746:	400a      	ands	r2, r1
 8005748:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 800574a:	4b56      	ldr	r3, [pc, #344]	; (80058a4 <HAL_COMP_Init+0x2b0>)
 800574c:	685a      	ldr	r2, [r3, #4]
 800574e:	4b55      	ldr	r3, [pc, #340]	; (80058a4 <HAL_COMP_Init+0x2b0>)
 8005750:	2180      	movs	r1, #128	; 0x80
 8005752:	01c9      	lsls	r1, r1, #7
 8005754:	430a      	orrs	r2, r1
 8005756:	605a      	str	r2, [r3, #4]
        break;
 8005758:	e01b      	b.n	8005792 <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800575a:	4b52      	ldr	r3, [pc, #328]	; (80058a4 <HAL_COMP_Init+0x2b0>)
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	4b51      	ldr	r3, [pc, #324]	; (80058a4 <HAL_COMP_Init+0x2b0>)
 8005760:	2180      	movs	r1, #128	; 0x80
 8005762:	01c9      	lsls	r1, r1, #7
 8005764:	430a      	orrs	r2, r1
 8005766:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8005768:	4b4e      	ldr	r3, [pc, #312]	; (80058a4 <HAL_COMP_Init+0x2b0>)
 800576a:	685a      	ldr	r2, [r3, #4]
 800576c:	4b4d      	ldr	r3, [pc, #308]	; (80058a4 <HAL_COMP_Init+0x2b0>)
 800576e:	2180      	movs	r1, #128	; 0x80
 8005770:	01c9      	lsls	r1, r1, #7
 8005772:	430a      	orrs	r2, r1
 8005774:	605a      	str	r2, [r3, #4]
        break;
 8005776:	e00c      	b.n	8005792 <HAL_COMP_Init+0x19e>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8005778:	4b4a      	ldr	r3, [pc, #296]	; (80058a4 <HAL_COMP_Init+0x2b0>)
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	4b49      	ldr	r3, [pc, #292]	; (80058a4 <HAL_COMP_Init+0x2b0>)
 800577e:	494b      	ldr	r1, [pc, #300]	; (80058ac <HAL_COMP_Init+0x2b8>)
 8005780:	400a      	ands	r2, r1
 8005782:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8005784:	4b47      	ldr	r3, [pc, #284]	; (80058a4 <HAL_COMP_Init+0x2b0>)
 8005786:	685a      	ldr	r2, [r3, #4]
 8005788:	4b46      	ldr	r3, [pc, #280]	; (80058a4 <HAL_COMP_Init+0x2b0>)
 800578a:	4948      	ldr	r1, [pc, #288]	; (80058ac <HAL_COMP_Init+0x2b8>)
 800578c:	400a      	ands	r2, r1
 800578e:	605a      	str	r2, [r3, #4]
        break;
 8005790:	46c0      	nop			; (mov r8, r8)
    }
#endif /* COMP3 */

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2230      	movs	r2, #48	; 0x30
 800579a:	4013      	ands	r3, r2
 800579c:	d016      	beq.n	80057cc <HAL_COMP_Init+0x1d8>
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d113      	bne.n	80057cc <HAL_COMP_Init+0x1d8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80057a4:	4b42      	ldr	r3, [pc, #264]	; (80058b0 <HAL_COMP_Init+0x2bc>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4942      	ldr	r1, [pc, #264]	; (80058b4 <HAL_COMP_Init+0x2c0>)
 80057aa:	0018      	movs	r0, r3
 80057ac:	f7fa fcaa 	bl	8000104 <__udivsi3>
 80057b0:	0003      	movs	r3, r0
 80057b2:	1c5a      	adds	r2, r3, #1
 80057b4:	0013      	movs	r3, r2
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	189b      	adds	r3, r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80057be:	e002      	b.n	80057c6 <HAL_COMP_Init+0x1d2>
      {
        wait_loop_index--;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	3b01      	subs	r3, #1
 80057c4:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1f9      	bne.n	80057c0 <HAL_COMP_Init+0x1cc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a34      	ldr	r2, [pc, #208]	; (80058a4 <HAL_COMP_Init+0x2b0>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d102      	bne.n	80057dc <HAL_COMP_Init+0x1e8>
 80057d6:	2380      	movs	r3, #128	; 0x80
 80057d8:	029b      	lsls	r3, r3, #10
 80057da:	e001      	b.n	80057e0 <HAL_COMP_Init+0x1ec>
 80057dc:	2380      	movs	r3, #128	; 0x80
 80057de:	02db      	lsls	r3, r3, #11
 80057e0:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e6:	2203      	movs	r2, #3
 80057e8:	4013      	ands	r3, r2
 80057ea:	d040      	beq.n	800586e <HAL_COMP_Init+0x27a>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f0:	2210      	movs	r2, #16
 80057f2:	4013      	ands	r3, r2
 80057f4:	d004      	beq.n	8005800 <HAL_COMP_Init+0x20c>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	0018      	movs	r0, r3
 80057fa:	f7ff fe9b 	bl	8005534 <LL_EXTI_EnableRisingTrig_0_31>
 80057fe:	e003      	b.n	8005808 <HAL_COMP_Init+0x214>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	0018      	movs	r0, r3
 8005804:	f7ff fea6 	bl	8005554 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580c:	2220      	movs	r2, #32
 800580e:	4013      	ands	r3, r2
 8005810:	d004      	beq.n	800581c <HAL_COMP_Init+0x228>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	0018      	movs	r0, r3
 8005816:	f7ff feaf 	bl	8005578 <LL_EXTI_EnableFallingTrig_0_31>
 800581a:	e003      	b.n	8005824 <HAL_COMP_Init+0x230>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	0018      	movs	r0, r3
 8005820:	f7ff feba 	bl	8005598 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	0018      	movs	r0, r3
 8005828:	f7ff fed6 	bl	80055d8 <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	0018      	movs	r0, r3
 8005830:	f7ff fec4 	bl	80055bc <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005838:	2202      	movs	r2, #2
 800583a:	4013      	ands	r3, r2
 800583c:	d004      	beq.n	8005848 <HAL_COMP_Init+0x254>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	0018      	movs	r0, r3
 8005842:	f7ff fe51 	bl	80054e8 <LL_EXTI_EnableEvent_0_31>
 8005846:	e003      	b.n	8005850 <HAL_COMP_Init+0x25c>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	0018      	movs	r0, r3
 800584c:	f7ff fe5e 	bl	800550c <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005854:	2201      	movs	r2, #1
 8005856:	4013      	ands	r3, r2
 8005858:	d004      	beq.n	8005864 <HAL_COMP_Init+0x270>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	0018      	movs	r0, r3
 800585e:	f7ff fe1d 	bl	800549c <LL_EXTI_EnableIT_0_31>
 8005862:	e00c      	b.n	800587e <HAL_COMP_Init+0x28a>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	0018      	movs	r0, r3
 8005868:	f7ff fe2a 	bl	80054c0 <LL_EXTI_DisableIT_0_31>
 800586c:	e007      	b.n	800587e <HAL_COMP_Init+0x28a>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	0018      	movs	r0, r3
 8005872:	f7ff fe4b 	bl	800550c <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	0018      	movs	r0, r3
 800587a:	f7ff fe21 	bl	80054c0 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2229      	movs	r2, #41	; 0x29
 8005882:	5c9b      	ldrb	r3, [r3, r2]
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d103      	bne.n	8005892 <HAL_COMP_Init+0x29e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2229      	movs	r2, #41	; 0x29
 800588e:	2101      	movs	r1, #1
 8005890:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8005892:	231f      	movs	r3, #31
 8005894:	18fb      	adds	r3, r7, r3
 8005896:	781b      	ldrb	r3, [r3, #0]
}
 8005898:	0018      	movs	r0, r3
 800589a:	46bd      	mov	sp, r7
 800589c:	b008      	add	sp, #32
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	fe00740f 	.word	0xfe00740f
 80058a4:	40010200 	.word	0x40010200
 80058a8:	fffff7ff 	.word	0xfffff7ff
 80058ac:	ffffbfff 	.word	0xffffbfff
 80058b0:	20000034 	.word	0x20000034
 80058b4:	00030d40 	.word	0x00030d40

080058b8 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 80058c0:	2300      	movs	r3, #0
 80058c2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80058c4:	210f      	movs	r1, #15
 80058c6:	187b      	adds	r3, r7, r1
 80058c8:	2200      	movs	r2, #0
 80058ca:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d103      	bne.n	80058da <HAL_COMP_Start+0x22>
  {
    status = HAL_ERROR;
 80058d2:	187b      	adds	r3, r7, r1
 80058d4:	2201      	movs	r2, #1
 80058d6:	701a      	strb	r2, [r3, #0]
 80058d8:	e035      	b.n	8005946 <HAL_COMP_Start+0x8e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	0fdb      	lsrs	r3, r3, #31
 80058e2:	07da      	lsls	r2, r3, #31
 80058e4:	2380      	movs	r3, #128	; 0x80
 80058e6:	061b      	lsls	r3, r3, #24
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d104      	bne.n	80058f6 <HAL_COMP_Start+0x3e>
  {
    status = HAL_ERROR;
 80058ec:	230f      	movs	r3, #15
 80058ee:	18fb      	adds	r3, r7, r3
 80058f0:	2201      	movs	r2, #1
 80058f2:	701a      	strb	r2, [r3, #0]
 80058f4:	e027      	b.n	8005946 <HAL_COMP_Start+0x8e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2229      	movs	r2, #41	; 0x29
 80058fa:	5c9b      	ldrb	r3, [r3, r2]
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d11d      	bne.n	800593e <HAL_COMP_Start+0x86>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2101      	movs	r1, #1
 800590e:	430a      	orrs	r2, r1
 8005910:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2229      	movs	r2, #41	; 0x29
 8005916:	2102      	movs	r1, #2
 8005918:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800591a:	4b0e      	ldr	r3, [pc, #56]	; (8005954 <HAL_COMP_Start+0x9c>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	490e      	ldr	r1, [pc, #56]	; (8005958 <HAL_COMP_Start+0xa0>)
 8005920:	0018      	movs	r0, r3
 8005922:	f7fa fbef 	bl	8000104 <__udivsi3>
 8005926:	0003      	movs	r3, r0
 8005928:	3301      	adds	r3, #1
 800592a:	00db      	lsls	r3, r3, #3
 800592c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800592e:	e002      	b.n	8005936 <HAL_COMP_Start+0x7e>
      {
        wait_loop_index--;
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	3b01      	subs	r3, #1
 8005934:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1f9      	bne.n	8005930 <HAL_COMP_Start+0x78>
 800593c:	e003      	b.n	8005946 <HAL_COMP_Start+0x8e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800593e:	230f      	movs	r3, #15
 8005940:	18fb      	adds	r3, r7, r3
 8005942:	2201      	movs	r2, #1
 8005944:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8005946:	230f      	movs	r3, #15
 8005948:	18fb      	adds	r3, r7, r3
 800594a:	781b      	ldrb	r3, [r3, #0]
}
 800594c:	0018      	movs	r0, r3
 800594e:	46bd      	mov	sp, r7
 8005950:	b004      	add	sp, #16
 8005952:	bd80      	pop	{r7, pc}
 8005954:	20000034 	.word	0x20000034
 8005958:	00030d40 	.word	0x00030d40

0800595c <__NVIC_EnableIRQ>:
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	0002      	movs	r2, r0
 8005964:	1dfb      	adds	r3, r7, #7
 8005966:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005968:	1dfb      	adds	r3, r7, #7
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	2b7f      	cmp	r3, #127	; 0x7f
 800596e:	d809      	bhi.n	8005984 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005970:	1dfb      	adds	r3, r7, #7
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	001a      	movs	r2, r3
 8005976:	231f      	movs	r3, #31
 8005978:	401a      	ands	r2, r3
 800597a:	4b04      	ldr	r3, [pc, #16]	; (800598c <__NVIC_EnableIRQ+0x30>)
 800597c:	2101      	movs	r1, #1
 800597e:	4091      	lsls	r1, r2
 8005980:	000a      	movs	r2, r1
 8005982:	601a      	str	r2, [r3, #0]
}
 8005984:	46c0      	nop			; (mov r8, r8)
 8005986:	46bd      	mov	sp, r7
 8005988:	b002      	add	sp, #8
 800598a:	bd80      	pop	{r7, pc}
 800598c:	e000e100 	.word	0xe000e100

08005990 <__NVIC_SetPriority>:
{
 8005990:	b590      	push	{r4, r7, lr}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	0002      	movs	r2, r0
 8005998:	6039      	str	r1, [r7, #0]
 800599a:	1dfb      	adds	r3, r7, #7
 800599c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800599e:	1dfb      	adds	r3, r7, #7
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	2b7f      	cmp	r3, #127	; 0x7f
 80059a4:	d828      	bhi.n	80059f8 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80059a6:	4a2f      	ldr	r2, [pc, #188]	; (8005a64 <__NVIC_SetPriority+0xd4>)
 80059a8:	1dfb      	adds	r3, r7, #7
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	b25b      	sxtb	r3, r3
 80059ae:	089b      	lsrs	r3, r3, #2
 80059b0:	33c0      	adds	r3, #192	; 0xc0
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	589b      	ldr	r3, [r3, r2]
 80059b6:	1dfa      	adds	r2, r7, #7
 80059b8:	7812      	ldrb	r2, [r2, #0]
 80059ba:	0011      	movs	r1, r2
 80059bc:	2203      	movs	r2, #3
 80059be:	400a      	ands	r2, r1
 80059c0:	00d2      	lsls	r2, r2, #3
 80059c2:	21ff      	movs	r1, #255	; 0xff
 80059c4:	4091      	lsls	r1, r2
 80059c6:	000a      	movs	r2, r1
 80059c8:	43d2      	mvns	r2, r2
 80059ca:	401a      	ands	r2, r3
 80059cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	019b      	lsls	r3, r3, #6
 80059d2:	22ff      	movs	r2, #255	; 0xff
 80059d4:	401a      	ands	r2, r3
 80059d6:	1dfb      	adds	r3, r7, #7
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	0018      	movs	r0, r3
 80059dc:	2303      	movs	r3, #3
 80059de:	4003      	ands	r3, r0
 80059e0:	00db      	lsls	r3, r3, #3
 80059e2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80059e4:	481f      	ldr	r0, [pc, #124]	; (8005a64 <__NVIC_SetPriority+0xd4>)
 80059e6:	1dfb      	adds	r3, r7, #7
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	b25b      	sxtb	r3, r3
 80059ec:	089b      	lsrs	r3, r3, #2
 80059ee:	430a      	orrs	r2, r1
 80059f0:	33c0      	adds	r3, #192	; 0xc0
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	501a      	str	r2, [r3, r0]
}
 80059f6:	e031      	b.n	8005a5c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80059f8:	4a1b      	ldr	r2, [pc, #108]	; (8005a68 <__NVIC_SetPriority+0xd8>)
 80059fa:	1dfb      	adds	r3, r7, #7
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	0019      	movs	r1, r3
 8005a00:	230f      	movs	r3, #15
 8005a02:	400b      	ands	r3, r1
 8005a04:	3b08      	subs	r3, #8
 8005a06:	089b      	lsrs	r3, r3, #2
 8005a08:	3306      	adds	r3, #6
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	18d3      	adds	r3, r2, r3
 8005a0e:	3304      	adds	r3, #4
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	1dfa      	adds	r2, r7, #7
 8005a14:	7812      	ldrb	r2, [r2, #0]
 8005a16:	0011      	movs	r1, r2
 8005a18:	2203      	movs	r2, #3
 8005a1a:	400a      	ands	r2, r1
 8005a1c:	00d2      	lsls	r2, r2, #3
 8005a1e:	21ff      	movs	r1, #255	; 0xff
 8005a20:	4091      	lsls	r1, r2
 8005a22:	000a      	movs	r2, r1
 8005a24:	43d2      	mvns	r2, r2
 8005a26:	401a      	ands	r2, r3
 8005a28:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	019b      	lsls	r3, r3, #6
 8005a2e:	22ff      	movs	r2, #255	; 0xff
 8005a30:	401a      	ands	r2, r3
 8005a32:	1dfb      	adds	r3, r7, #7
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	0018      	movs	r0, r3
 8005a38:	2303      	movs	r3, #3
 8005a3a:	4003      	ands	r3, r0
 8005a3c:	00db      	lsls	r3, r3, #3
 8005a3e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005a40:	4809      	ldr	r0, [pc, #36]	; (8005a68 <__NVIC_SetPriority+0xd8>)
 8005a42:	1dfb      	adds	r3, r7, #7
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	001c      	movs	r4, r3
 8005a48:	230f      	movs	r3, #15
 8005a4a:	4023      	ands	r3, r4
 8005a4c:	3b08      	subs	r3, #8
 8005a4e:	089b      	lsrs	r3, r3, #2
 8005a50:	430a      	orrs	r2, r1
 8005a52:	3306      	adds	r3, #6
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	18c3      	adds	r3, r0, r3
 8005a58:	3304      	adds	r3, #4
 8005a5a:	601a      	str	r2, [r3, #0]
}
 8005a5c:	46c0      	nop			; (mov r8, r8)
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	b003      	add	sp, #12
 8005a62:	bd90      	pop	{r4, r7, pc}
 8005a64:	e000e100 	.word	0xe000e100
 8005a68:	e000ed00 	.word	0xe000ed00

08005a6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	1e5a      	subs	r2, r3, #1
 8005a78:	2380      	movs	r3, #128	; 0x80
 8005a7a:	045b      	lsls	r3, r3, #17
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d301      	bcc.n	8005a84 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a80:	2301      	movs	r3, #1
 8005a82:	e010      	b.n	8005aa6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a84:	4b0a      	ldr	r3, [pc, #40]	; (8005ab0 <SysTick_Config+0x44>)
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	3a01      	subs	r2, #1
 8005a8a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	425b      	negs	r3, r3
 8005a90:	2103      	movs	r1, #3
 8005a92:	0018      	movs	r0, r3
 8005a94:	f7ff ff7c 	bl	8005990 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a98:	4b05      	ldr	r3, [pc, #20]	; (8005ab0 <SysTick_Config+0x44>)
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a9e:	4b04      	ldr	r3, [pc, #16]	; (8005ab0 <SysTick_Config+0x44>)
 8005aa0:	2207      	movs	r2, #7
 8005aa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	0018      	movs	r0, r3
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	b002      	add	sp, #8
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	46c0      	nop			; (mov r8, r8)
 8005ab0:	e000e010 	.word	0xe000e010

08005ab4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60b9      	str	r1, [r7, #8]
 8005abc:	607a      	str	r2, [r7, #4]
 8005abe:	210f      	movs	r1, #15
 8005ac0:	187b      	adds	r3, r7, r1
 8005ac2:	1c02      	adds	r2, r0, #0
 8005ac4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	187b      	adds	r3, r7, r1
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	b25b      	sxtb	r3, r3
 8005ace:	0011      	movs	r1, r2
 8005ad0:	0018      	movs	r0, r3
 8005ad2:	f7ff ff5d 	bl	8005990 <__NVIC_SetPriority>
}
 8005ad6:	46c0      	nop			; (mov r8, r8)
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	b004      	add	sp, #16
 8005adc:	bd80      	pop	{r7, pc}

08005ade <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b082      	sub	sp, #8
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	0002      	movs	r2, r0
 8005ae6:	1dfb      	adds	r3, r7, #7
 8005ae8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005aea:	1dfb      	adds	r3, r7, #7
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	b25b      	sxtb	r3, r3
 8005af0:	0018      	movs	r0, r3
 8005af2:	f7ff ff33 	bl	800595c <__NVIC_EnableIRQ>
}
 8005af6:	46c0      	nop			; (mov r8, r8)
 8005af8:	46bd      	mov	sp, r7
 8005afa:	b002      	add	sp, #8
 8005afc:	bd80      	pop	{r7, pc}

08005afe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005afe:	b580      	push	{r7, lr}
 8005b00:	b082      	sub	sp, #8
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	0018      	movs	r0, r3
 8005b0a:	f7ff ffaf 	bl	8005a6c <SysTick_Config>
 8005b0e:	0003      	movs	r3, r0
}
 8005b10:	0018      	movs	r0, r3
 8005b12:	46bd      	mov	sp, r7
 8005b14:	b002      	add	sp, #8
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d101      	bne.n	8005b2a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e077      	b.n	8005c1a <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a3d      	ldr	r2, [pc, #244]	; (8005c24 <HAL_DMA_Init+0x10c>)
 8005b30:	4694      	mov	ip, r2
 8005b32:	4463      	add	r3, ip
 8005b34:	2114      	movs	r1, #20
 8005b36:	0018      	movs	r0, r3
 8005b38:	f7fa fae4 	bl	8000104 <__udivsi3>
 8005b3c:	0003      	movs	r3, r0
 8005b3e:	009a      	lsls	r2, r3, #2
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2225      	movs	r2, #37	; 0x25
 8005b48:	2102      	movs	r1, #2
 8005b4a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4934      	ldr	r1, [pc, #208]	; (8005c28 <HAL_DMA_Init+0x110>)
 8005b58:	400a      	ands	r2, r1
 8005b5a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6819      	ldr	r1, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	689a      	ldr	r2, [r3, #8]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	431a      	orrs	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	431a      	orrs	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	695b      	ldr	r3, [r3, #20]
 8005b76:	431a      	orrs	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	699b      	ldr	r3, [r3, #24]
 8005b7c:	431a      	orrs	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	69db      	ldr	r3, [r3, #28]
 8005b82:	431a      	orrs	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a1b      	ldr	r3, [r3, #32]
 8005b88:	431a      	orrs	r2, r3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	0018      	movs	r0, r3
 8005b96:	f000 fa37 	bl	8006008 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	689a      	ldr	r2, [r3, #8]
 8005b9e:	2380      	movs	r3, #128	; 0x80
 8005ba0:	01db      	lsls	r3, r3, #7
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d102      	bne.n	8005bac <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685a      	ldr	r2, [r3, #4]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bb4:	213f      	movs	r1, #63	; 0x3f
 8005bb6:	400a      	ands	r2, r1
 8005bb8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005bc2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d011      	beq.n	8005bf0 <HAL_DMA_Init+0xd8>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	2b04      	cmp	r3, #4
 8005bd2:	d80d      	bhi.n	8005bf0 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	0018      	movs	r0, r3
 8005bd8:	f000 fa42 	bl	8006060 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005be0:	2200      	movs	r2, #0
 8005be2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005bec:	605a      	str	r2, [r3, #4]
 8005bee:	e008      	b.n	8005c02 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2225      	movs	r2, #37	; 0x25
 8005c0c:	2101      	movs	r1, #1
 8005c0e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2224      	movs	r2, #36	; 0x24
 8005c14:	2100      	movs	r1, #0
 8005c16:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	0018      	movs	r0, r3
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	b002      	add	sp, #8
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	46c0      	nop			; (mov r8, r8)
 8005c24:	bffdfff8 	.word	0xbffdfff8
 8005c28:	ffff800f 	.word	0xffff800f

08005c2c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b086      	sub	sp, #24
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
 8005c38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c3a:	2317      	movs	r3, #23
 8005c3c:	18fb      	adds	r3, r7, r3
 8005c3e:	2200      	movs	r2, #0
 8005c40:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2224      	movs	r2, #36	; 0x24
 8005c46:	5c9b      	ldrb	r3, [r3, r2]
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d101      	bne.n	8005c50 <HAL_DMA_Start_IT+0x24>
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	e06f      	b.n	8005d30 <HAL_DMA_Start_IT+0x104>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2224      	movs	r2, #36	; 0x24
 8005c54:	2101      	movs	r1, #1
 8005c56:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2225      	movs	r2, #37	; 0x25
 8005c5c:	5c9b      	ldrb	r3, [r3, r2]
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d157      	bne.n	8005d14 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2225      	movs	r2, #37	; 0x25
 8005c68:	2102      	movs	r1, #2
 8005c6a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2101      	movs	r1, #1
 8005c7e:	438a      	bics	r2, r1
 8005c80:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	68b9      	ldr	r1, [r7, #8]
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f000 f97d 	bl	8005f88 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d008      	beq.n	8005ca8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	210e      	movs	r1, #14
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	601a      	str	r2, [r3, #0]
 8005ca6:	e00f      	b.n	8005cc8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2104      	movs	r1, #4
 8005cb4:	438a      	bics	r2, r1
 8005cb6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	210a      	movs	r1, #10
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	2380      	movs	r3, #128	; 0x80
 8005cd0:	025b      	lsls	r3, r3, #9
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	d008      	beq.n	8005ce8 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ce0:	2180      	movs	r1, #128	; 0x80
 8005ce2:	0049      	lsls	r1, r1, #1
 8005ce4:	430a      	orrs	r2, r1
 8005ce6:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d008      	beq.n	8005d02 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cfa:	2180      	movs	r1, #128	; 0x80
 8005cfc:	0049      	lsls	r1, r1, #1
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2101      	movs	r1, #1
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	601a      	str	r2, [r3, #0]
 8005d12:	e00a      	b.n	8005d2a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2280      	movs	r2, #128	; 0x80
 8005d18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2224      	movs	r2, #36	; 0x24
 8005d1e:	2100      	movs	r1, #0
 8005d20:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8005d22:	2317      	movs	r3, #23
 8005d24:	18fb      	adds	r3, r7, r3
 8005d26:	2201      	movs	r2, #1
 8005d28:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8005d2a:	2317      	movs	r3, #23
 8005d2c:	18fb      	adds	r3, r7, r3
 8005d2e:	781b      	ldrb	r3, [r3, #0]
}
 8005d30:	0018      	movs	r0, r3
 8005d32:	46bd      	mov	sp, r7
 8005d34:	b006      	add	sp, #24
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d40:	210f      	movs	r1, #15
 8005d42:	187b      	adds	r3, r7, r1
 8005d44:	2200      	movs	r2, #0
 8005d46:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2225      	movs	r2, #37	; 0x25
 8005d4c:	5c9b      	ldrb	r3, [r3, r2]
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d006      	beq.n	8005d62 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2204      	movs	r2, #4
 8005d58:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005d5a:	187b      	adds	r3, r7, r1
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	701a      	strb	r2, [r3, #0]
 8005d60:	e049      	b.n	8005df6 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	210e      	movs	r1, #14
 8005d6e:	438a      	bics	r2, r1
 8005d70:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2101      	movs	r1, #1
 8005d7e:	438a      	bics	r2, r1
 8005d80:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d8c:	491d      	ldr	r1, [pc, #116]	; (8005e04 <HAL_DMA_Abort_IT+0xcc>)
 8005d8e:	400a      	ands	r2, r1
 8005d90:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8005d92:	4b1d      	ldr	r3, [pc, #116]	; (8005e08 <HAL_DMA_Abort_IT+0xd0>)
 8005d94:	6859      	ldr	r1, [r3, #4]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9a:	221c      	movs	r2, #28
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	2201      	movs	r2, #1
 8005da0:	409a      	lsls	r2, r3
 8005da2:	4b19      	ldr	r3, [pc, #100]	; (8005e08 <HAL_DMA_Abort_IT+0xd0>)
 8005da4:	430a      	orrs	r2, r1
 8005da6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005db0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00c      	beq.n	8005dd4 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dc4:	490f      	ldr	r1, [pc, #60]	; (8005e04 <HAL_DMA_Abort_IT+0xcc>)
 8005dc6:	400a      	ands	r2, r1
 8005dc8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005dd2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2225      	movs	r2, #37	; 0x25
 8005dd8:	2101      	movs	r1, #1
 8005dda:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2224      	movs	r2, #36	; 0x24
 8005de0:	2100      	movs	r1, #0
 8005de2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d004      	beq.n	8005df6 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	0010      	movs	r0, r2
 8005df4:	4798      	blx	r3
    }
  }
  return status;
 8005df6:	230f      	movs	r3, #15
 8005df8:	18fb      	adds	r3, r7, r3
 8005dfa:	781b      	ldrb	r3, [r3, #0]
}
 8005dfc:	0018      	movs	r0, r3
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	b004      	add	sp, #16
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	fffffeff 	.word	0xfffffeff
 8005e08:	40020000 	.word	0x40020000

08005e0c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8005e14:	4b55      	ldr	r3, [pc, #340]	; (8005f6c <HAL_DMA_IRQHandler+0x160>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e26:	221c      	movs	r2, #28
 8005e28:	4013      	ands	r3, r2
 8005e2a:	2204      	movs	r2, #4
 8005e2c:	409a      	lsls	r2, r3
 8005e2e:	0013      	movs	r3, r2
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	4013      	ands	r3, r2
 8005e34:	d027      	beq.n	8005e86 <HAL_DMA_IRQHandler+0x7a>
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	2204      	movs	r2, #4
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	d023      	beq.n	8005e86 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2220      	movs	r2, #32
 8005e46:	4013      	ands	r3, r2
 8005e48:	d107      	bne.n	8005e5a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2104      	movs	r1, #4
 8005e56:	438a      	bics	r2, r1
 8005e58:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8005e5a:	4b44      	ldr	r3, [pc, #272]	; (8005f6c <HAL_DMA_IRQHandler+0x160>)
 8005e5c:	6859      	ldr	r1, [r3, #4]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e62:	221c      	movs	r2, #28
 8005e64:	4013      	ands	r3, r2
 8005e66:	2204      	movs	r2, #4
 8005e68:	409a      	lsls	r2, r3
 8005e6a:	4b40      	ldr	r3, [pc, #256]	; (8005f6c <HAL_DMA_IRQHandler+0x160>)
 8005e6c:	430a      	orrs	r2, r1
 8005e6e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d100      	bne.n	8005e7a <HAL_DMA_IRQHandler+0x6e>
 8005e78:	e073      	b.n	8005f62 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	0010      	movs	r0, r2
 8005e82:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8005e84:	e06d      	b.n	8005f62 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8a:	221c      	movs	r2, #28
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	2202      	movs	r2, #2
 8005e90:	409a      	lsls	r2, r3
 8005e92:	0013      	movs	r3, r2
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	4013      	ands	r3, r2
 8005e98:	d02e      	beq.n	8005ef8 <HAL_DMA_IRQHandler+0xec>
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	2202      	movs	r2, #2
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	d02a      	beq.n	8005ef8 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2220      	movs	r2, #32
 8005eaa:	4013      	ands	r3, r2
 8005eac:	d10b      	bne.n	8005ec6 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	210a      	movs	r1, #10
 8005eba:	438a      	bics	r2, r1
 8005ebc:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2225      	movs	r2, #37	; 0x25
 8005ec2:	2101      	movs	r1, #1
 8005ec4:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8005ec6:	4b29      	ldr	r3, [pc, #164]	; (8005f6c <HAL_DMA_IRQHandler+0x160>)
 8005ec8:	6859      	ldr	r1, [r3, #4]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ece:	221c      	movs	r2, #28
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	409a      	lsls	r2, r3
 8005ed6:	4b25      	ldr	r3, [pc, #148]	; (8005f6c <HAL_DMA_IRQHandler+0x160>)
 8005ed8:	430a      	orrs	r2, r1
 8005eda:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2224      	movs	r2, #36	; 0x24
 8005ee0:	2100      	movs	r1, #0
 8005ee2:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d03a      	beq.n	8005f62 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	0010      	movs	r0, r2
 8005ef4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8005ef6:	e034      	b.n	8005f62 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efc:	221c      	movs	r2, #28
 8005efe:	4013      	ands	r3, r2
 8005f00:	2208      	movs	r2, #8
 8005f02:	409a      	lsls	r2, r3
 8005f04:	0013      	movs	r3, r2
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	4013      	ands	r3, r2
 8005f0a:	d02b      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x158>
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	2208      	movs	r2, #8
 8005f10:	4013      	ands	r3, r2
 8005f12:	d027      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	210e      	movs	r1, #14
 8005f20:	438a      	bics	r2, r1
 8005f22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8005f24:	4b11      	ldr	r3, [pc, #68]	; (8005f6c <HAL_DMA_IRQHandler+0x160>)
 8005f26:	6859      	ldr	r1, [r3, #4]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2c:	221c      	movs	r2, #28
 8005f2e:	4013      	ands	r3, r2
 8005f30:	2201      	movs	r2, #1
 8005f32:	409a      	lsls	r2, r3
 8005f34:	4b0d      	ldr	r3, [pc, #52]	; (8005f6c <HAL_DMA_IRQHandler+0x160>)
 8005f36:	430a      	orrs	r2, r1
 8005f38:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2225      	movs	r2, #37	; 0x25
 8005f44:	2101      	movs	r1, #1
 8005f46:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2224      	movs	r2, #36	; 0x24
 8005f4c:	2100      	movs	r1, #0
 8005f4e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d005      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	0010      	movs	r0, r2
 8005f60:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005f62:	46c0      	nop			; (mov r8, r8)
 8005f64:	46c0      	nop			; (mov r8, r8)
}
 8005f66:	46bd      	mov	sp, r7
 8005f68:	b004      	add	sp, #16
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	40020000 	.word	0x40020000

08005f70 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2225      	movs	r2, #37	; 0x25
 8005f7c:	5c9b      	ldrb	r3, [r3, r2]
 8005f7e:	b2db      	uxtb	r3, r3
}
 8005f80:	0018      	movs	r0, r3
 8005f82:	46bd      	mov	sp, r7
 8005f84:	b002      	add	sp, #8
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	607a      	str	r2, [r7, #4]
 8005f94:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005f9e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d004      	beq.n	8005fb2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005fb0:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8005fb2:	4b14      	ldr	r3, [pc, #80]	; (8006004 <DMA_SetConfig+0x7c>)
 8005fb4:	6859      	ldr	r1, [r3, #4]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fba:	221c      	movs	r2, #28
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	409a      	lsls	r2, r3
 8005fc2:	4b10      	ldr	r3, [pc, #64]	; (8006004 <DMA_SetConfig+0x7c>)
 8005fc4:	430a      	orrs	r2, r1
 8005fc6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	683a      	ldr	r2, [r7, #0]
 8005fce:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	2b10      	cmp	r3, #16
 8005fd6:	d108      	bne.n	8005fea <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005fe8:	e007      	b.n	8005ffa <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68ba      	ldr	r2, [r7, #8]
 8005ff0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	60da      	str	r2, [r3, #12]
}
 8005ffa:	46c0      	nop			; (mov r8, r8)
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	b004      	add	sp, #16
 8006000:	bd80      	pop	{r7, pc}
 8006002:	46c0      	nop			; (mov r8, r8)
 8006004:	40020000 	.word	0x40020000

08006008 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006014:	089b      	lsrs	r3, r3, #2
 8006016:	4a10      	ldr	r2, [pc, #64]	; (8006058 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8006018:	4694      	mov	ip, r2
 800601a:	4463      	add	r3, ip
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	001a      	movs	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	001a      	movs	r2, r3
 800602a:	23ff      	movs	r3, #255	; 0xff
 800602c:	4013      	ands	r3, r2
 800602e:	3b08      	subs	r3, #8
 8006030:	2114      	movs	r1, #20
 8006032:	0018      	movs	r0, r3
 8006034:	f7fa f866 	bl	8000104 <__udivsi3>
 8006038:	0003      	movs	r3, r0
 800603a:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a07      	ldr	r2, [pc, #28]	; (800605c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8006040:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	221f      	movs	r2, #31
 8006046:	4013      	ands	r3, r2
 8006048:	2201      	movs	r2, #1
 800604a:	409a      	lsls	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8006050:	46c0      	nop			; (mov r8, r8)
 8006052:	46bd      	mov	sp, r7
 8006054:	b004      	add	sp, #16
 8006056:	bd80      	pop	{r7, pc}
 8006058:	10008200 	.word	0x10008200
 800605c:	40020880 	.word	0x40020880

08006060 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	223f      	movs	r2, #63	; 0x3f
 800606e:	4013      	ands	r3, r2
 8006070:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	4a0a      	ldr	r2, [pc, #40]	; (80060a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006076:	4694      	mov	ip, r2
 8006078:	4463      	add	r3, ip
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	001a      	movs	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a07      	ldr	r2, [pc, #28]	; (80060a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006086:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	3b01      	subs	r3, #1
 800608c:	2203      	movs	r2, #3
 800608e:	4013      	ands	r3, r2
 8006090:	2201      	movs	r2, #1
 8006092:	409a      	lsls	r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	659a      	str	r2, [r3, #88]	; 0x58
}
 8006098:	46c0      	nop			; (mov r8, r8)
 800609a:	46bd      	mov	sp, r7
 800609c:	b004      	add	sp, #16
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	1000823f 	.word	0x1000823f
 80060a4:	40020940 	.word	0x40020940

080060a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b086      	sub	sp, #24
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80060b2:	2300      	movs	r3, #0
 80060b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80060b6:	e147      	b.n	8006348 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2101      	movs	r1, #1
 80060be:	697a      	ldr	r2, [r7, #20]
 80060c0:	4091      	lsls	r1, r2
 80060c2:	000a      	movs	r2, r1
 80060c4:	4013      	ands	r3, r2
 80060c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d100      	bne.n	80060d0 <HAL_GPIO_Init+0x28>
 80060ce:	e138      	b.n	8006342 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	2203      	movs	r2, #3
 80060d6:	4013      	ands	r3, r2
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d005      	beq.n	80060e8 <HAL_GPIO_Init+0x40>
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	2203      	movs	r2, #3
 80060e2:	4013      	ands	r3, r2
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d130      	bne.n	800614a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	005b      	lsls	r3, r3, #1
 80060f2:	2203      	movs	r2, #3
 80060f4:	409a      	lsls	r2, r3
 80060f6:	0013      	movs	r3, r2
 80060f8:	43da      	mvns	r2, r3
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	4013      	ands	r3, r2
 80060fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	68da      	ldr	r2, [r3, #12]
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	005b      	lsls	r3, r3, #1
 8006108:	409a      	lsls	r2, r3
 800610a:	0013      	movs	r3, r2
 800610c:	693a      	ldr	r2, [r7, #16]
 800610e:	4313      	orrs	r3, r2
 8006110:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	693a      	ldr	r2, [r7, #16]
 8006116:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800611e:	2201      	movs	r2, #1
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	409a      	lsls	r2, r3
 8006124:	0013      	movs	r3, r2
 8006126:	43da      	mvns	r2, r3
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	4013      	ands	r3, r2
 800612c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	091b      	lsrs	r3, r3, #4
 8006134:	2201      	movs	r2, #1
 8006136:	401a      	ands	r2, r3
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	409a      	lsls	r2, r3
 800613c:	0013      	movs	r3, r2
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	4313      	orrs	r3, r2
 8006142:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	2203      	movs	r2, #3
 8006150:	4013      	ands	r3, r2
 8006152:	2b03      	cmp	r3, #3
 8006154:	d017      	beq.n	8006186 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	005b      	lsls	r3, r3, #1
 8006160:	2203      	movs	r2, #3
 8006162:	409a      	lsls	r2, r3
 8006164:	0013      	movs	r3, r2
 8006166:	43da      	mvns	r2, r3
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	4013      	ands	r3, r2
 800616c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	689a      	ldr	r2, [r3, #8]
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	005b      	lsls	r3, r3, #1
 8006176:	409a      	lsls	r2, r3
 8006178:	0013      	movs	r3, r2
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	4313      	orrs	r3, r2
 800617e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	693a      	ldr	r2, [r7, #16]
 8006184:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	2203      	movs	r2, #3
 800618c:	4013      	ands	r3, r2
 800618e:	2b02      	cmp	r3, #2
 8006190:	d123      	bne.n	80061da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	08da      	lsrs	r2, r3, #3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	3208      	adds	r2, #8
 800619a:	0092      	lsls	r2, r2, #2
 800619c:	58d3      	ldr	r3, [r2, r3]
 800619e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	2207      	movs	r2, #7
 80061a4:	4013      	ands	r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	220f      	movs	r2, #15
 80061aa:	409a      	lsls	r2, r3
 80061ac:	0013      	movs	r3, r2
 80061ae:	43da      	mvns	r2, r3
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	4013      	ands	r3, r2
 80061b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	691a      	ldr	r2, [r3, #16]
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	2107      	movs	r1, #7
 80061be:	400b      	ands	r3, r1
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	409a      	lsls	r2, r3
 80061c4:	0013      	movs	r3, r2
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	08da      	lsrs	r2, r3, #3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	3208      	adds	r2, #8
 80061d4:	0092      	lsls	r2, r2, #2
 80061d6:	6939      	ldr	r1, [r7, #16]
 80061d8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	005b      	lsls	r3, r3, #1
 80061e4:	2203      	movs	r2, #3
 80061e6:	409a      	lsls	r2, r3
 80061e8:	0013      	movs	r3, r2
 80061ea:	43da      	mvns	r2, r3
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	4013      	ands	r3, r2
 80061f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	2203      	movs	r2, #3
 80061f8:	401a      	ands	r2, r3
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	005b      	lsls	r3, r3, #1
 80061fe:	409a      	lsls	r2, r3
 8006200:	0013      	movs	r3, r2
 8006202:	693a      	ldr	r2, [r7, #16]
 8006204:	4313      	orrs	r3, r2
 8006206:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	693a      	ldr	r2, [r7, #16]
 800620c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	685a      	ldr	r2, [r3, #4]
 8006212:	23c0      	movs	r3, #192	; 0xc0
 8006214:	029b      	lsls	r3, r3, #10
 8006216:	4013      	ands	r3, r2
 8006218:	d100      	bne.n	800621c <HAL_GPIO_Init+0x174>
 800621a:	e092      	b.n	8006342 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800621c:	4a50      	ldr	r2, [pc, #320]	; (8006360 <HAL_GPIO_Init+0x2b8>)
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	089b      	lsrs	r3, r3, #2
 8006222:	3318      	adds	r3, #24
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	589b      	ldr	r3, [r3, r2]
 8006228:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	2203      	movs	r2, #3
 800622e:	4013      	ands	r3, r2
 8006230:	00db      	lsls	r3, r3, #3
 8006232:	220f      	movs	r2, #15
 8006234:	409a      	lsls	r2, r3
 8006236:	0013      	movs	r3, r2
 8006238:	43da      	mvns	r2, r3
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	4013      	ands	r3, r2
 800623e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	23a0      	movs	r3, #160	; 0xa0
 8006244:	05db      	lsls	r3, r3, #23
 8006246:	429a      	cmp	r2, r3
 8006248:	d013      	beq.n	8006272 <HAL_GPIO_Init+0x1ca>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a45      	ldr	r2, [pc, #276]	; (8006364 <HAL_GPIO_Init+0x2bc>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d00d      	beq.n	800626e <HAL_GPIO_Init+0x1c6>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a44      	ldr	r2, [pc, #272]	; (8006368 <HAL_GPIO_Init+0x2c0>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d007      	beq.n	800626a <HAL_GPIO_Init+0x1c2>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a43      	ldr	r2, [pc, #268]	; (800636c <HAL_GPIO_Init+0x2c4>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d101      	bne.n	8006266 <HAL_GPIO_Init+0x1be>
 8006262:	2303      	movs	r3, #3
 8006264:	e006      	b.n	8006274 <HAL_GPIO_Init+0x1cc>
 8006266:	2305      	movs	r3, #5
 8006268:	e004      	b.n	8006274 <HAL_GPIO_Init+0x1cc>
 800626a:	2302      	movs	r3, #2
 800626c:	e002      	b.n	8006274 <HAL_GPIO_Init+0x1cc>
 800626e:	2301      	movs	r3, #1
 8006270:	e000      	b.n	8006274 <HAL_GPIO_Init+0x1cc>
 8006272:	2300      	movs	r3, #0
 8006274:	697a      	ldr	r2, [r7, #20]
 8006276:	2103      	movs	r1, #3
 8006278:	400a      	ands	r2, r1
 800627a:	00d2      	lsls	r2, r2, #3
 800627c:	4093      	lsls	r3, r2
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	4313      	orrs	r3, r2
 8006282:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8006284:	4936      	ldr	r1, [pc, #216]	; (8006360 <HAL_GPIO_Init+0x2b8>)
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	089b      	lsrs	r3, r3, #2
 800628a:	3318      	adds	r3, #24
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	693a      	ldr	r2, [r7, #16]
 8006290:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006292:	4b33      	ldr	r3, [pc, #204]	; (8006360 <HAL_GPIO_Init+0x2b8>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	43da      	mvns	r2, r3
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	4013      	ands	r3, r2
 80062a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	685a      	ldr	r2, [r3, #4]
 80062a6:	2380      	movs	r3, #128	; 0x80
 80062a8:	035b      	lsls	r3, r3, #13
 80062aa:	4013      	ands	r3, r2
 80062ac:	d003      	beq.n	80062b6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80062ae:	693a      	ldr	r2, [r7, #16]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80062b6:	4b2a      	ldr	r3, [pc, #168]	; (8006360 <HAL_GPIO_Init+0x2b8>)
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80062bc:	4b28      	ldr	r3, [pc, #160]	; (8006360 <HAL_GPIO_Init+0x2b8>)
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	43da      	mvns	r2, r3
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	4013      	ands	r3, r2
 80062ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	685a      	ldr	r2, [r3, #4]
 80062d0:	2380      	movs	r3, #128	; 0x80
 80062d2:	039b      	lsls	r3, r3, #14
 80062d4:	4013      	ands	r3, r2
 80062d6:	d003      	beq.n	80062e0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	4313      	orrs	r3, r2
 80062de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80062e0:	4b1f      	ldr	r3, [pc, #124]	; (8006360 <HAL_GPIO_Init+0x2b8>)
 80062e2:	693a      	ldr	r2, [r7, #16]
 80062e4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80062e6:	4a1e      	ldr	r2, [pc, #120]	; (8006360 <HAL_GPIO_Init+0x2b8>)
 80062e8:	2384      	movs	r3, #132	; 0x84
 80062ea:	58d3      	ldr	r3, [r2, r3]
 80062ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	43da      	mvns	r2, r3
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	4013      	ands	r3, r2
 80062f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	685a      	ldr	r2, [r3, #4]
 80062fc:	2380      	movs	r3, #128	; 0x80
 80062fe:	029b      	lsls	r3, r3, #10
 8006300:	4013      	ands	r3, r2
 8006302:	d003      	beq.n	800630c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8006304:	693a      	ldr	r2, [r7, #16]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	4313      	orrs	r3, r2
 800630a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800630c:	4914      	ldr	r1, [pc, #80]	; (8006360 <HAL_GPIO_Init+0x2b8>)
 800630e:	2284      	movs	r2, #132	; 0x84
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8006314:	4a12      	ldr	r2, [pc, #72]	; (8006360 <HAL_GPIO_Init+0x2b8>)
 8006316:	2380      	movs	r3, #128	; 0x80
 8006318:	58d3      	ldr	r3, [r2, r3]
 800631a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	43da      	mvns	r2, r3
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	4013      	ands	r3, r2
 8006324:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	685a      	ldr	r2, [r3, #4]
 800632a:	2380      	movs	r3, #128	; 0x80
 800632c:	025b      	lsls	r3, r3, #9
 800632e:	4013      	ands	r3, r2
 8006330:	d003      	beq.n	800633a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8006332:	693a      	ldr	r2, [r7, #16]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	4313      	orrs	r3, r2
 8006338:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800633a:	4909      	ldr	r1, [pc, #36]	; (8006360 <HAL_GPIO_Init+0x2b8>)
 800633c:	2280      	movs	r2, #128	; 0x80
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	3301      	adds	r3, #1
 8006346:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	40da      	lsrs	r2, r3
 8006350:	1e13      	subs	r3, r2, #0
 8006352:	d000      	beq.n	8006356 <HAL_GPIO_Init+0x2ae>
 8006354:	e6b0      	b.n	80060b8 <HAL_GPIO_Init+0x10>
  }
}
 8006356:	46c0      	nop			; (mov r8, r8)
 8006358:	46c0      	nop			; (mov r8, r8)
 800635a:	46bd      	mov	sp, r7
 800635c:	b006      	add	sp, #24
 800635e:	bd80      	pop	{r7, pc}
 8006360:	40021800 	.word	0x40021800
 8006364:	50000400 	.word	0x50000400
 8006368:	50000800 	.word	0x50000800
 800636c:	50000c00 	.word	0x50000c00

08006370 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d101      	bne.n	8006382 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e082      	b.n	8006488 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2241      	movs	r2, #65	; 0x41
 8006386:	5c9b      	ldrb	r3, [r3, r2]
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b00      	cmp	r3, #0
 800638c:	d107      	bne.n	800639e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2240      	movs	r2, #64	; 0x40
 8006392:	2100      	movs	r1, #0
 8006394:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	0018      	movs	r0, r3
 800639a:	f7fe fc0b 	bl	8004bb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2241      	movs	r2, #65	; 0x41
 80063a2:	2124      	movs	r1, #36	; 0x24
 80063a4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2101      	movs	r1, #1
 80063b2:	438a      	bics	r2, r1
 80063b4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	685a      	ldr	r2, [r3, #4]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4934      	ldr	r1, [pc, #208]	; (8006490 <HAL_I2C_Init+0x120>)
 80063c0:	400a      	ands	r2, r1
 80063c2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	689a      	ldr	r2, [r3, #8]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4931      	ldr	r1, [pc, #196]	; (8006494 <HAL_I2C_Init+0x124>)
 80063d0:	400a      	ands	r2, r1
 80063d2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d108      	bne.n	80063ee <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	689a      	ldr	r2, [r3, #8]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2180      	movs	r1, #128	; 0x80
 80063e6:	0209      	lsls	r1, r1, #8
 80063e8:	430a      	orrs	r2, r1
 80063ea:	609a      	str	r2, [r3, #8]
 80063ec:	e007      	b.n	80063fe <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	689a      	ldr	r2, [r3, #8]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2184      	movs	r1, #132	; 0x84
 80063f8:	0209      	lsls	r1, r1, #8
 80063fa:	430a      	orrs	r2, r1
 80063fc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	2b02      	cmp	r3, #2
 8006404:	d104      	bne.n	8006410 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2280      	movs	r2, #128	; 0x80
 800640c:	0112      	lsls	r2, r2, #4
 800640e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	685a      	ldr	r2, [r3, #4]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	491f      	ldr	r1, [pc, #124]	; (8006498 <HAL_I2C_Init+0x128>)
 800641c:	430a      	orrs	r2, r1
 800641e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68da      	ldr	r2, [r3, #12]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	491a      	ldr	r1, [pc, #104]	; (8006494 <HAL_I2C_Init+0x124>)
 800642c:	400a      	ands	r2, r1
 800642e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	691a      	ldr	r2, [r3, #16]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	695b      	ldr	r3, [r3, #20]
 8006438:	431a      	orrs	r2, r3
 800643a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	699b      	ldr	r3, [r3, #24]
 8006440:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	430a      	orrs	r2, r1
 8006448:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	69d9      	ldr	r1, [r3, #28]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a1a      	ldr	r2, [r3, #32]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	430a      	orrs	r2, r1
 8006458:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2101      	movs	r1, #1
 8006466:	430a      	orrs	r2, r1
 8006468:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2241      	movs	r2, #65	; 0x41
 8006474:	2120      	movs	r1, #32
 8006476:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2242      	movs	r2, #66	; 0x42
 8006482:	2100      	movs	r1, #0
 8006484:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006486:	2300      	movs	r3, #0
}
 8006488:	0018      	movs	r0, r3
 800648a:	46bd      	mov	sp, r7
 800648c:	b002      	add	sp, #8
 800648e:	bd80      	pop	{r7, pc}
 8006490:	f0ffffff 	.word	0xf0ffffff
 8006494:	ffff7fff 	.word	0xffff7fff
 8006498:	02008000 	.word	0x02008000

0800649c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800649c:	b590      	push	{r4, r7, lr}
 800649e:	b089      	sub	sp, #36	; 0x24
 80064a0:	af02      	add	r7, sp, #8
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	0008      	movs	r0, r1
 80064a6:	607a      	str	r2, [r7, #4]
 80064a8:	0019      	movs	r1, r3
 80064aa:	230a      	movs	r3, #10
 80064ac:	18fb      	adds	r3, r7, r3
 80064ae:	1c02      	adds	r2, r0, #0
 80064b0:	801a      	strh	r2, [r3, #0]
 80064b2:	2308      	movs	r3, #8
 80064b4:	18fb      	adds	r3, r7, r3
 80064b6:	1c0a      	adds	r2, r1, #0
 80064b8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2241      	movs	r2, #65	; 0x41
 80064be:	5c9b      	ldrb	r3, [r3, r2]
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	2b20      	cmp	r3, #32
 80064c4:	d000      	beq.n	80064c8 <HAL_I2C_Master_Transmit+0x2c>
 80064c6:	e0e7      	b.n	8006698 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2240      	movs	r2, #64	; 0x40
 80064cc:	5c9b      	ldrb	r3, [r3, r2]
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d101      	bne.n	80064d6 <HAL_I2C_Master_Transmit+0x3a>
 80064d2:	2302      	movs	r3, #2
 80064d4:	e0e1      	b.n	800669a <HAL_I2C_Master_Transmit+0x1fe>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2240      	movs	r2, #64	; 0x40
 80064da:	2101      	movs	r1, #1
 80064dc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80064de:	f7fe ff99 	bl	8005414 <HAL_GetTick>
 80064e2:	0003      	movs	r3, r0
 80064e4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80064e6:	2380      	movs	r3, #128	; 0x80
 80064e8:	0219      	lsls	r1, r3, #8
 80064ea:	68f8      	ldr	r0, [r7, #12]
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	9300      	str	r3, [sp, #0]
 80064f0:	2319      	movs	r3, #25
 80064f2:	2201      	movs	r2, #1
 80064f4:	f000 fe76 	bl	80071e4 <I2C_WaitOnFlagUntilTimeout>
 80064f8:	1e03      	subs	r3, r0, #0
 80064fa:	d001      	beq.n	8006500 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e0cc      	b.n	800669a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2241      	movs	r2, #65	; 0x41
 8006504:	2121      	movs	r1, #33	; 0x21
 8006506:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2242      	movs	r2, #66	; 0x42
 800650c:	2110      	movs	r1, #16
 800650e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2208      	movs	r2, #8
 8006520:	18ba      	adds	r2, r7, r2
 8006522:	8812      	ldrh	r2, [r2, #0]
 8006524:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006530:	b29b      	uxth	r3, r3
 8006532:	2bff      	cmp	r3, #255	; 0xff
 8006534:	d911      	bls.n	800655a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	22ff      	movs	r2, #255	; 0xff
 800653a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006540:	b2da      	uxtb	r2, r3
 8006542:	2380      	movs	r3, #128	; 0x80
 8006544:	045c      	lsls	r4, r3, #17
 8006546:	230a      	movs	r3, #10
 8006548:	18fb      	adds	r3, r7, r3
 800654a:	8819      	ldrh	r1, [r3, #0]
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	4b55      	ldr	r3, [pc, #340]	; (80066a4 <HAL_I2C_Master_Transmit+0x208>)
 8006550:	9300      	str	r3, [sp, #0]
 8006552:	0023      	movs	r3, r4
 8006554:	f001 f800 	bl	8007558 <I2C_TransferConfig>
 8006558:	e075      	b.n	8006646 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800655e:	b29a      	uxth	r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006568:	b2da      	uxtb	r2, r3
 800656a:	2380      	movs	r3, #128	; 0x80
 800656c:	049c      	lsls	r4, r3, #18
 800656e:	230a      	movs	r3, #10
 8006570:	18fb      	adds	r3, r7, r3
 8006572:	8819      	ldrh	r1, [r3, #0]
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	4b4b      	ldr	r3, [pc, #300]	; (80066a4 <HAL_I2C_Master_Transmit+0x208>)
 8006578:	9300      	str	r3, [sp, #0]
 800657a:	0023      	movs	r3, r4
 800657c:	f000 ffec 	bl	8007558 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006580:	e061      	b.n	8006646 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006582:	697a      	ldr	r2, [r7, #20]
 8006584:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	0018      	movs	r0, r3
 800658a:	f000 fe6a 	bl	8007262 <I2C_WaitOnTXISFlagUntilTimeout>
 800658e:	1e03      	subs	r3, r0, #0
 8006590:	d001      	beq.n	8006596 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e081      	b.n	800669a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659a:	781a      	ldrb	r2, [r3, #0]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a6:	1c5a      	adds	r2, r3, #1
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	3b01      	subs	r3, #1
 80065b4:	b29a      	uxth	r2, r3
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065be:	3b01      	subs	r3, #1
 80065c0:	b29a      	uxth	r2, r3
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d03a      	beq.n	8006646 <HAL_I2C_Master_Transmit+0x1aa>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d136      	bne.n	8006646 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80065d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065da:	68f8      	ldr	r0, [r7, #12]
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	9300      	str	r3, [sp, #0]
 80065e0:	0013      	movs	r3, r2
 80065e2:	2200      	movs	r2, #0
 80065e4:	2180      	movs	r1, #128	; 0x80
 80065e6:	f000 fdfd 	bl	80071e4 <I2C_WaitOnFlagUntilTimeout>
 80065ea:	1e03      	subs	r3, r0, #0
 80065ec:	d001      	beq.n	80065f2 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e053      	b.n	800669a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	2bff      	cmp	r3, #255	; 0xff
 80065fa:	d911      	bls.n	8006620 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	22ff      	movs	r2, #255	; 0xff
 8006600:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006606:	b2da      	uxtb	r2, r3
 8006608:	2380      	movs	r3, #128	; 0x80
 800660a:	045c      	lsls	r4, r3, #17
 800660c:	230a      	movs	r3, #10
 800660e:	18fb      	adds	r3, r7, r3
 8006610:	8819      	ldrh	r1, [r3, #0]
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	2300      	movs	r3, #0
 8006616:	9300      	str	r3, [sp, #0]
 8006618:	0023      	movs	r3, r4
 800661a:	f000 ff9d 	bl	8007558 <I2C_TransferConfig>
 800661e:	e012      	b.n	8006646 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006624:	b29a      	uxth	r2, r3
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800662e:	b2da      	uxtb	r2, r3
 8006630:	2380      	movs	r3, #128	; 0x80
 8006632:	049c      	lsls	r4, r3, #18
 8006634:	230a      	movs	r3, #10
 8006636:	18fb      	adds	r3, r7, r3
 8006638:	8819      	ldrh	r1, [r3, #0]
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	2300      	movs	r3, #0
 800663e:	9300      	str	r3, [sp, #0]
 8006640:	0023      	movs	r3, r4
 8006642:	f000 ff89 	bl	8007558 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800664a:	b29b      	uxth	r3, r3
 800664c:	2b00      	cmp	r3, #0
 800664e:	d198      	bne.n	8006582 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006650:	697a      	ldr	r2, [r7, #20]
 8006652:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	0018      	movs	r0, r3
 8006658:	f000 fe42 	bl	80072e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800665c:	1e03      	subs	r3, r0, #0
 800665e:	d001      	beq.n	8006664 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e01a      	b.n	800669a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2220      	movs	r2, #32
 800666a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	685a      	ldr	r2, [r3, #4]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	490c      	ldr	r1, [pc, #48]	; (80066a8 <HAL_I2C_Master_Transmit+0x20c>)
 8006678:	400a      	ands	r2, r1
 800667a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2241      	movs	r2, #65	; 0x41
 8006680:	2120      	movs	r1, #32
 8006682:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2242      	movs	r2, #66	; 0x42
 8006688:	2100      	movs	r1, #0
 800668a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2240      	movs	r2, #64	; 0x40
 8006690:	2100      	movs	r1, #0
 8006692:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006694:	2300      	movs	r3, #0
 8006696:	e000      	b.n	800669a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8006698:	2302      	movs	r3, #2
  }
}
 800669a:	0018      	movs	r0, r3
 800669c:	46bd      	mov	sp, r7
 800669e:	b007      	add	sp, #28
 80066a0:	bd90      	pop	{r4, r7, pc}
 80066a2:	46c0      	nop			; (mov r8, r8)
 80066a4:	80002000 	.word	0x80002000
 80066a8:	fe00e800 	.word	0xfe00e800

080066ac <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	699b      	ldr	r3, [r3, #24]
 80066ba:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d005      	beq.n	80066d8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066d0:	68ba      	ldr	r2, [r7, #8]
 80066d2:	68f9      	ldr	r1, [r7, #12]
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	4798      	blx	r3
  }
}
 80066d8:	46c0      	nop			; (mov r8, r8)
 80066da:	46bd      	mov	sp, r7
 80066dc:	b004      	add	sp, #16
 80066de:	bd80      	pop	{r7, pc}

080066e0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b086      	sub	sp, #24
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	699b      	ldr	r3, [r3, #24]
 80066ee:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	0a1b      	lsrs	r3, r3, #8
 80066fc:	001a      	movs	r2, r3
 80066fe:	2301      	movs	r3, #1
 8006700:	4013      	ands	r3, r2
 8006702:	d010      	beq.n	8006726 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	09db      	lsrs	r3, r3, #7
 8006708:	001a      	movs	r2, r3
 800670a:	2301      	movs	r3, #1
 800670c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800670e:	d00a      	beq.n	8006726 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006714:	2201      	movs	r2, #1
 8006716:	431a      	orrs	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2280      	movs	r2, #128	; 0x80
 8006722:	0052      	lsls	r2, r2, #1
 8006724:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	0a9b      	lsrs	r3, r3, #10
 800672a:	001a      	movs	r2, r3
 800672c:	2301      	movs	r3, #1
 800672e:	4013      	ands	r3, r2
 8006730:	d010      	beq.n	8006754 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	09db      	lsrs	r3, r3, #7
 8006736:	001a      	movs	r2, r3
 8006738:	2301      	movs	r3, #1
 800673a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800673c:	d00a      	beq.n	8006754 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006742:	2208      	movs	r2, #8
 8006744:	431a      	orrs	r2, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2280      	movs	r2, #128	; 0x80
 8006750:	00d2      	lsls	r2, r2, #3
 8006752:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	0a5b      	lsrs	r3, r3, #9
 8006758:	001a      	movs	r2, r3
 800675a:	2301      	movs	r3, #1
 800675c:	4013      	ands	r3, r2
 800675e:	d010      	beq.n	8006782 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	09db      	lsrs	r3, r3, #7
 8006764:	001a      	movs	r2, r3
 8006766:	2301      	movs	r3, #1
 8006768:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800676a:	d00a      	beq.n	8006782 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006770:	2202      	movs	r2, #2
 8006772:	431a      	orrs	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2280      	movs	r2, #128	; 0x80
 800677e:	0092      	lsls	r2, r2, #2
 8006780:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006786:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	220b      	movs	r2, #11
 800678c:	4013      	ands	r3, r2
 800678e:	d005      	beq.n	800679c <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	0011      	movs	r1, r2
 8006796:	0018      	movs	r0, r3
 8006798:	f000 fbd8 	bl	8006f4c <I2C_ITError>
  }
}
 800679c:	46c0      	nop			; (mov r8, r8)
 800679e:	46bd      	mov	sp, r7
 80067a0:	b006      	add	sp, #24
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80067ac:	46c0      	nop			; (mov r8, r8)
 80067ae:	46bd      	mov	sp, r7
 80067b0:	b002      	add	sp, #8
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80067bc:	46c0      	nop			; (mov r8, r8)
 80067be:	46bd      	mov	sp, r7
 80067c0:	b002      	add	sp, #8
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b082      	sub	sp, #8
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	0008      	movs	r0, r1
 80067ce:	0011      	movs	r1, r2
 80067d0:	1cfb      	adds	r3, r7, #3
 80067d2:	1c02      	adds	r2, r0, #0
 80067d4:	701a      	strb	r2, [r3, #0]
 80067d6:	003b      	movs	r3, r7
 80067d8:	1c0a      	adds	r2, r1, #0
 80067da:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80067dc:	46c0      	nop			; (mov r8, r8)
 80067de:	46bd      	mov	sp, r7
 80067e0:	b002      	add	sp, #8
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80067ec:	46c0      	nop			; (mov r8, r8)
 80067ee:	46bd      	mov	sp, r7
 80067f0:	b002      	add	sp, #8
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80067fc:	46c0      	nop			; (mov r8, r8)
 80067fe:	46bd      	mov	sp, r7
 8006800:	b002      	add	sp, #8
 8006802:	bd80      	pop	{r7, pc}

08006804 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800680c:	46c0      	nop			; (mov r8, r8)
 800680e:	46bd      	mov	sp, r7
 8006810:	b002      	add	sp, #8
 8006812:	bd80      	pop	{r7, pc}

08006814 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b086      	sub	sp, #24
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006824:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2240      	movs	r2, #64	; 0x40
 800682e:	5c9b      	ldrb	r3, [r3, r2]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d101      	bne.n	8006838 <I2C_Slave_ISR_IT+0x24>
 8006834:	2302      	movs	r3, #2
 8006836:	e0fa      	b.n	8006a2e <I2C_Slave_ISR_IT+0x21a>
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2240      	movs	r2, #64	; 0x40
 800683c:	2101      	movs	r1, #1
 800683e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	095b      	lsrs	r3, r3, #5
 8006844:	001a      	movs	r2, r3
 8006846:	2301      	movs	r3, #1
 8006848:	4013      	ands	r3, r2
 800684a:	d00b      	beq.n	8006864 <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	095b      	lsrs	r3, r3, #5
 8006850:	001a      	movs	r2, r3
 8006852:	2301      	movs	r3, #1
 8006854:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006856:	d005      	beq.n	8006864 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006858:	693a      	ldr	r2, [r7, #16]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	0011      	movs	r1, r2
 800685e:	0018      	movs	r0, r3
 8006860:	f000 f9f6 	bl	8006c50 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	091b      	lsrs	r3, r3, #4
 8006868:	001a      	movs	r2, r3
 800686a:	2301      	movs	r3, #1
 800686c:	4013      	ands	r3, r2
 800686e:	d054      	beq.n	800691a <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	091b      	lsrs	r3, r3, #4
 8006874:	001a      	movs	r2, r3
 8006876:	2301      	movs	r3, #1
 8006878:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800687a:	d04e      	beq.n	800691a <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006880:	b29b      	uxth	r3, r3
 8006882:	2b00      	cmp	r3, #0
 8006884:	d12d      	bne.n	80068e2 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2241      	movs	r2, #65	; 0x41
 800688a:	5c9b      	ldrb	r3, [r3, r2]
 800688c:	b2db      	uxtb	r3, r3
 800688e:	2b28      	cmp	r3, #40	; 0x28
 8006890:	d10b      	bne.n	80068aa <I2C_Slave_ISR_IT+0x96>
 8006892:	697a      	ldr	r2, [r7, #20]
 8006894:	2380      	movs	r3, #128	; 0x80
 8006896:	049b      	lsls	r3, r3, #18
 8006898:	429a      	cmp	r2, r3
 800689a:	d106      	bne.n	80068aa <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	0011      	movs	r1, r2
 80068a2:	0018      	movs	r0, r3
 80068a4:	f000 faf8 	bl	8006e98 <I2C_ITListenCplt>
 80068a8:	e036      	b.n	8006918 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2241      	movs	r2, #65	; 0x41
 80068ae:	5c9b      	ldrb	r3, [r3, r2]
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	2b29      	cmp	r3, #41	; 0x29
 80068b4:	d110      	bne.n	80068d8 <I2C_Slave_ISR_IT+0xc4>
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	4a5f      	ldr	r2, [pc, #380]	; (8006a38 <I2C_Slave_ISR_IT+0x224>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d00c      	beq.n	80068d8 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2210      	movs	r2, #16
 80068c4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	0018      	movs	r0, r3
 80068ca:	f000 fc4a 	bl	8007162 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	0018      	movs	r0, r3
 80068d2:	f000 f957 	bl	8006b84 <I2C_ITSlaveSeqCplt>
 80068d6:	e01f      	b.n	8006918 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2210      	movs	r2, #16
 80068de:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80068e0:	e09d      	b.n	8006a1e <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2210      	movs	r2, #16
 80068e8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ee:	2204      	movs	r2, #4
 80068f0:	431a      	orrs	r2, r3
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d005      	beq.n	8006908 <I2C_Slave_ISR_IT+0xf4>
 80068fc:	697a      	ldr	r2, [r7, #20]
 80068fe:	2380      	movs	r3, #128	; 0x80
 8006900:	045b      	lsls	r3, r3, #17
 8006902:	429a      	cmp	r2, r3
 8006904:	d000      	beq.n	8006908 <I2C_Slave_ISR_IT+0xf4>
 8006906:	e08a      	b.n	8006a1e <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	0011      	movs	r1, r2
 8006910:	0018      	movs	r0, r3
 8006912:	f000 fb1b 	bl	8006f4c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006916:	e082      	b.n	8006a1e <I2C_Slave_ISR_IT+0x20a>
 8006918:	e081      	b.n	8006a1e <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	089b      	lsrs	r3, r3, #2
 800691e:	001a      	movs	r2, r3
 8006920:	2301      	movs	r3, #1
 8006922:	4013      	ands	r3, r2
 8006924:	d031      	beq.n	800698a <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	089b      	lsrs	r3, r3, #2
 800692a:	001a      	movs	r2, r3
 800692c:	2301      	movs	r3, #1
 800692e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006930:	d02b      	beq.n	800698a <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006936:	b29b      	uxth	r3, r3
 8006938:	2b00      	cmp	r3, #0
 800693a:	d018      	beq.n	800696e <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006946:	b2d2      	uxtb	r2, r2
 8006948:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694e:	1c5a      	adds	r2, r3, #1
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006958:	3b01      	subs	r3, #1
 800695a:	b29a      	uxth	r2, r3
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006964:	b29b      	uxth	r3, r3
 8006966:	3b01      	subs	r3, #1
 8006968:	b29a      	uxth	r2, r3
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006972:	b29b      	uxth	r3, r3
 8006974:	2b00      	cmp	r3, #0
 8006976:	d154      	bne.n	8006a22 <I2C_Slave_ISR_IT+0x20e>
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	4a2f      	ldr	r2, [pc, #188]	; (8006a38 <I2C_Slave_ISR_IT+0x224>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d050      	beq.n	8006a22 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	0018      	movs	r0, r3
 8006984:	f000 f8fe 	bl	8006b84 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006988:	e04b      	b.n	8006a22 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	08db      	lsrs	r3, r3, #3
 800698e:	001a      	movs	r2, r3
 8006990:	2301      	movs	r3, #1
 8006992:	4013      	ands	r3, r2
 8006994:	d00c      	beq.n	80069b0 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	08db      	lsrs	r3, r3, #3
 800699a:	001a      	movs	r2, r3
 800699c:	2301      	movs	r3, #1
 800699e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80069a0:	d006      	beq.n	80069b0 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80069a2:	693a      	ldr	r2, [r7, #16]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	0011      	movs	r1, r2
 80069a8:	0018      	movs	r0, r3
 80069aa:	f000 f847 	bl	8006a3c <I2C_ITAddrCplt>
 80069ae:	e039      	b.n	8006a24 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	085b      	lsrs	r3, r3, #1
 80069b4:	001a      	movs	r2, r3
 80069b6:	2301      	movs	r3, #1
 80069b8:	4013      	ands	r3, r2
 80069ba:	d033      	beq.n	8006a24 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	085b      	lsrs	r3, r3, #1
 80069c0:	001a      	movs	r2, r3
 80069c2:	2301      	movs	r3, #1
 80069c4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80069c6:	d02d      	beq.n	8006a24 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d018      	beq.n	8006a04 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d6:	781a      	ldrb	r2, [r3, #0]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e2:	1c5a      	adds	r2, r3, #1
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	3b01      	subs	r3, #1
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069fa:	3b01      	subs	r3, #1
 80069fc:	b29a      	uxth	r2, r3
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	851a      	strh	r2, [r3, #40]	; 0x28
 8006a02:	e00f      	b.n	8006a24 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006a04:	697a      	ldr	r2, [r7, #20]
 8006a06:	2380      	movs	r3, #128	; 0x80
 8006a08:	045b      	lsls	r3, r3, #17
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d002      	beq.n	8006a14 <I2C_Slave_ISR_IT+0x200>
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d107      	bne.n	8006a24 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	0018      	movs	r0, r3
 8006a18:	f000 f8b4 	bl	8006b84 <I2C_ITSlaveSeqCplt>
 8006a1c:	e002      	b.n	8006a24 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 8006a1e:	46c0      	nop			; (mov r8, r8)
 8006a20:	e000      	b.n	8006a24 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8006a22:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2240      	movs	r2, #64	; 0x40
 8006a28:	2100      	movs	r1, #0
 8006a2a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	0018      	movs	r0, r3
 8006a30:	46bd      	mov	sp, r7
 8006a32:	b006      	add	sp, #24
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	46c0      	nop			; (mov r8, r8)
 8006a38:	ffff0000 	.word	0xffff0000

08006a3c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006a3c:	b5b0      	push	{r4, r5, r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2241      	movs	r2, #65	; 0x41
 8006a4a:	5c9b      	ldrb	r3, [r3, r2]
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	001a      	movs	r2, r3
 8006a50:	2328      	movs	r3, #40	; 0x28
 8006a52:	4013      	ands	r3, r2
 8006a54:	2b28      	cmp	r3, #40	; 0x28
 8006a56:	d000      	beq.n	8006a5a <I2C_ITAddrCplt+0x1e>
 8006a58:	e088      	b.n	8006b6c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	699b      	ldr	r3, [r3, #24]
 8006a60:	0c1b      	lsrs	r3, r3, #16
 8006a62:	b2da      	uxtb	r2, r3
 8006a64:	250f      	movs	r5, #15
 8006a66:	197b      	adds	r3, r7, r5
 8006a68:	2101      	movs	r1, #1
 8006a6a:	400a      	ands	r2, r1
 8006a6c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	699b      	ldr	r3, [r3, #24]
 8006a74:	0c1b      	lsrs	r3, r3, #16
 8006a76:	b29a      	uxth	r2, r3
 8006a78:	200c      	movs	r0, #12
 8006a7a:	183b      	adds	r3, r7, r0
 8006a7c:	21fe      	movs	r1, #254	; 0xfe
 8006a7e:	400a      	ands	r2, r1
 8006a80:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	240a      	movs	r4, #10
 8006a8c:	193b      	adds	r3, r7, r4
 8006a8e:	0592      	lsls	r2, r2, #22
 8006a90:	0d92      	lsrs	r2, r2, #22
 8006a92:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	68db      	ldr	r3, [r3, #12]
 8006a9a:	b29a      	uxth	r2, r3
 8006a9c:	2308      	movs	r3, #8
 8006a9e:	18fb      	adds	r3, r7, r3
 8006aa0:	21fe      	movs	r1, #254	; 0xfe
 8006aa2:	400a      	ands	r2, r1
 8006aa4:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	2b02      	cmp	r3, #2
 8006aac:	d148      	bne.n	8006b40 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006aae:	0021      	movs	r1, r4
 8006ab0:	187b      	adds	r3, r7, r1
 8006ab2:	881b      	ldrh	r3, [r3, #0]
 8006ab4:	09db      	lsrs	r3, r3, #7
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	183b      	adds	r3, r7, r0
 8006aba:	881b      	ldrh	r3, [r3, #0]
 8006abc:	4053      	eors	r3, r2
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	001a      	movs	r2, r3
 8006ac2:	2306      	movs	r3, #6
 8006ac4:	4013      	ands	r3, r2
 8006ac6:	d120      	bne.n	8006b0a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8006ac8:	183b      	adds	r3, r7, r0
 8006aca:	187a      	adds	r2, r7, r1
 8006acc:	8812      	ldrh	r2, [r2, #0]
 8006ace:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ad4:	1c5a      	adds	r2, r3, #1
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	d14c      	bne.n	8006b7c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2208      	movs	r2, #8
 8006aee:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2240      	movs	r2, #64	; 0x40
 8006af4:	2100      	movs	r1, #0
 8006af6:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006af8:	183b      	adds	r3, r7, r0
 8006afa:	881a      	ldrh	r2, [r3, #0]
 8006afc:	197b      	adds	r3, r7, r5
 8006afe:	7819      	ldrb	r1, [r3, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	0018      	movs	r0, r3
 8006b04:	f7ff fe5e 	bl	80067c4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006b08:	e038      	b.n	8006b7c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8006b0a:	240c      	movs	r4, #12
 8006b0c:	193b      	adds	r3, r7, r4
 8006b0e:	2208      	movs	r2, #8
 8006b10:	18ba      	adds	r2, r7, r2
 8006b12:	8812      	ldrh	r2, [r2, #0]
 8006b14:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006b16:	2380      	movs	r3, #128	; 0x80
 8006b18:	021a      	lsls	r2, r3, #8
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	0011      	movs	r1, r2
 8006b1e:	0018      	movs	r0, r3
 8006b20:	f000 fd54 	bl	80075cc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2240      	movs	r2, #64	; 0x40
 8006b28:	2100      	movs	r1, #0
 8006b2a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006b2c:	193b      	adds	r3, r7, r4
 8006b2e:	881a      	ldrh	r2, [r3, #0]
 8006b30:	230f      	movs	r3, #15
 8006b32:	18fb      	adds	r3, r7, r3
 8006b34:	7819      	ldrb	r1, [r3, #0]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	0018      	movs	r0, r3
 8006b3a:	f7ff fe43 	bl	80067c4 <HAL_I2C_AddrCallback>
}
 8006b3e:	e01d      	b.n	8006b7c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006b40:	2380      	movs	r3, #128	; 0x80
 8006b42:	021a      	lsls	r2, r3, #8
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	0011      	movs	r1, r2
 8006b48:	0018      	movs	r0, r3
 8006b4a:	f000 fd3f 	bl	80075cc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2240      	movs	r2, #64	; 0x40
 8006b52:	2100      	movs	r1, #0
 8006b54:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006b56:	230c      	movs	r3, #12
 8006b58:	18fb      	adds	r3, r7, r3
 8006b5a:	881a      	ldrh	r2, [r3, #0]
 8006b5c:	230f      	movs	r3, #15
 8006b5e:	18fb      	adds	r3, r7, r3
 8006b60:	7819      	ldrb	r1, [r3, #0]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	0018      	movs	r0, r3
 8006b66:	f7ff fe2d 	bl	80067c4 <HAL_I2C_AddrCallback>
}
 8006b6a:	e007      	b.n	8006b7c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2208      	movs	r2, #8
 8006b72:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2240      	movs	r2, #64	; 0x40
 8006b78:	2100      	movs	r1, #0
 8006b7a:	5499      	strb	r1, [r3, r2]
}
 8006b7c:	46c0      	nop			; (mov r8, r8)
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	b004      	add	sp, #16
 8006b82:	bdb0      	pop	{r4, r5, r7, pc}

08006b84 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2242      	movs	r2, #66	; 0x42
 8006b98:	2100      	movs	r1, #0
 8006b9a:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	0b9b      	lsrs	r3, r3, #14
 8006ba0:	001a      	movs	r2, r3
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	d008      	beq.n	8006bba <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4925      	ldr	r1, [pc, #148]	; (8006c48 <I2C_ITSlaveSeqCplt+0xc4>)
 8006bb4:	400a      	ands	r2, r1
 8006bb6:	601a      	str	r2, [r3, #0]
 8006bb8:	e00d      	b.n	8006bd6 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	0bdb      	lsrs	r3, r3, #15
 8006bbe:	001a      	movs	r2, r3
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	d007      	beq.n	8006bd6 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	491e      	ldr	r1, [pc, #120]	; (8006c4c <I2C_ITSlaveSeqCplt+0xc8>)
 8006bd2:	400a      	ands	r2, r1
 8006bd4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2241      	movs	r2, #65	; 0x41
 8006bda:	5c9b      	ldrb	r3, [r3, r2]
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b29      	cmp	r3, #41	; 0x29
 8006be0:	d114      	bne.n	8006c0c <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2241      	movs	r2, #65	; 0x41
 8006be6:	2128      	movs	r1, #40	; 0x28
 8006be8:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2221      	movs	r2, #33	; 0x21
 8006bee:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2101      	movs	r1, #1
 8006bf4:	0018      	movs	r0, r3
 8006bf6:	f000 fce9 	bl	80075cc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2240      	movs	r2, #64	; 0x40
 8006bfe:	2100      	movs	r1, #0
 8006c00:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	0018      	movs	r0, r3
 8006c06:	f7ff fdcd 	bl	80067a4 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006c0a:	e019      	b.n	8006c40 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2241      	movs	r2, #65	; 0x41
 8006c10:	5c9b      	ldrb	r3, [r3, r2]
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	2b2a      	cmp	r3, #42	; 0x2a
 8006c16:	d113      	bne.n	8006c40 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2241      	movs	r2, #65	; 0x41
 8006c1c:	2128      	movs	r1, #40	; 0x28
 8006c1e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2222      	movs	r2, #34	; 0x22
 8006c24:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2102      	movs	r1, #2
 8006c2a:	0018      	movs	r0, r3
 8006c2c:	f000 fcce 	bl	80075cc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2240      	movs	r2, #64	; 0x40
 8006c34:	2100      	movs	r1, #0
 8006c36:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	0018      	movs	r0, r3
 8006c3c:	f7ff fdba 	bl	80067b4 <HAL_I2C_SlaveRxCpltCallback>
}
 8006c40:	46c0      	nop			; (mov r8, r8)
 8006c42:	46bd      	mov	sp, r7
 8006c44:	b004      	add	sp, #16
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	ffffbfff 	.word	0xffffbfff
 8006c4c:	ffff7fff 	.word	0xffff7fff

08006c50 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b086      	sub	sp, #24
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006c66:	200f      	movs	r0, #15
 8006c68:	183b      	adds	r3, r7, r0
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	2141      	movs	r1, #65	; 0x41
 8006c6e:	5c52      	ldrb	r2, [r2, r1]
 8006c70:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2220      	movs	r2, #32
 8006c78:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006c7a:	183b      	adds	r3, r7, r0
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	2b21      	cmp	r3, #33	; 0x21
 8006c80:	d003      	beq.n	8006c8a <I2C_ITSlaveCplt+0x3a>
 8006c82:	183b      	adds	r3, r7, r0
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	2b29      	cmp	r3, #41	; 0x29
 8006c88:	d109      	bne.n	8006c9e <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006c8a:	4a7d      	ldr	r2, [pc, #500]	; (8006e80 <I2C_ITSlaveCplt+0x230>)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	0011      	movs	r1, r2
 8006c90:	0018      	movs	r0, r3
 8006c92:	f000 fc9b 	bl	80075cc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2221      	movs	r2, #33	; 0x21
 8006c9a:	631a      	str	r2, [r3, #48]	; 0x30
 8006c9c:	e011      	b.n	8006cc2 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006c9e:	220f      	movs	r2, #15
 8006ca0:	18bb      	adds	r3, r7, r2
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	2b22      	cmp	r3, #34	; 0x22
 8006ca6:	d003      	beq.n	8006cb0 <I2C_ITSlaveCplt+0x60>
 8006ca8:	18bb      	adds	r3, r7, r2
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	2b2a      	cmp	r3, #42	; 0x2a
 8006cae:	d108      	bne.n	8006cc2 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006cb0:	4a74      	ldr	r2, [pc, #464]	; (8006e84 <I2C_ITSlaveCplt+0x234>)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	0011      	movs	r1, r2
 8006cb6:	0018      	movs	r0, r3
 8006cb8:	f000 fc88 	bl	80075cc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2222      	movs	r2, #34	; 0x22
 8006cc0:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	685a      	ldr	r2, [r3, #4]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2180      	movs	r1, #128	; 0x80
 8006cce:	0209      	lsls	r1, r1, #8
 8006cd0:	430a      	orrs	r2, r1
 8006cd2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	685a      	ldr	r2, [r3, #4]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	496a      	ldr	r1, [pc, #424]	; (8006e88 <I2C_ITSlaveCplt+0x238>)
 8006ce0:	400a      	ands	r2, r1
 8006ce2:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	0018      	movs	r0, r3
 8006ce8:	f000 fa3b 	bl	8007162 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	0b9b      	lsrs	r3, r3, #14
 8006cf0:	001a      	movs	r2, r3
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	d013      	beq.n	8006d20 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4962      	ldr	r1, [pc, #392]	; (8006e8c <I2C_ITSlaveCplt+0x23c>)
 8006d04:	400a      	ands	r2, r1
 8006d06:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d020      	beq.n	8006d52 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	b29a      	uxth	r2, r3
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d1e:	e018      	b.n	8006d52 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	0bdb      	lsrs	r3, r3, #15
 8006d24:	001a      	movs	r2, r3
 8006d26:	2301      	movs	r3, #1
 8006d28:	4013      	ands	r3, r2
 8006d2a:	d012      	beq.n	8006d52 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4956      	ldr	r1, [pc, #344]	; (8006e90 <I2C_ITSlaveCplt+0x240>)
 8006d38:	400a      	ands	r2, r1
 8006d3a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d006      	beq.n	8006d52 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	b29a      	uxth	r2, r3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	089b      	lsrs	r3, r3, #2
 8006d56:	001a      	movs	r2, r3
 8006d58:	2301      	movs	r3, #1
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	d020      	beq.n	8006da0 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	2204      	movs	r2, #4
 8006d62:	4393      	bics	r3, r2
 8006d64:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d70:	b2d2      	uxtb	r2, r2
 8006d72:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d78:	1c5a      	adds	r2, r3, #1
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00c      	beq.n	8006da0 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d8a:	3b01      	subs	r3, #1
 8006d8c:	b29a      	uxth	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	b29a      	uxth	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d005      	beq.n	8006db6 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dae:	2204      	movs	r2, #4
 8006db0:	431a      	orrs	r2, r3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2242      	movs	r2, #66	; 0x42
 8006dba:	2100      	movs	r1, #0
 8006dbc:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d013      	beq.n	8006df4 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	0011      	movs	r1, r2
 8006dd4:	0018      	movs	r0, r3
 8006dd6:	f000 f8b9 	bl	8006f4c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2241      	movs	r2, #65	; 0x41
 8006dde:	5c9b      	ldrb	r3, [r3, r2]
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	2b28      	cmp	r3, #40	; 0x28
 8006de4:	d147      	bne.n	8006e76 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006de6:	697a      	ldr	r2, [r7, #20]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	0011      	movs	r1, r2
 8006dec:	0018      	movs	r0, r3
 8006dee:	f000 f853 	bl	8006e98 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006df2:	e040      	b.n	8006e76 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df8:	4a26      	ldr	r2, [pc, #152]	; (8006e94 <I2C_ITSlaveCplt+0x244>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d016      	beq.n	8006e2c <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	0018      	movs	r0, r3
 8006e02:	f7ff febf 	bl	8006b84 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4a22      	ldr	r2, [pc, #136]	; (8006e94 <I2C_ITSlaveCplt+0x244>)
 8006e0a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2241      	movs	r2, #65	; 0x41
 8006e10:	2120      	movs	r1, #32
 8006e12:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2240      	movs	r2, #64	; 0x40
 8006e1e:	2100      	movs	r1, #0
 8006e20:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	0018      	movs	r0, r3
 8006e26:	f7ff fcdd 	bl	80067e4 <HAL_I2C_ListenCpltCallback>
}
 8006e2a:	e024      	b.n	8006e76 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2241      	movs	r2, #65	; 0x41
 8006e30:	5c9b      	ldrb	r3, [r3, r2]
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	2b22      	cmp	r3, #34	; 0x22
 8006e36:	d10f      	bne.n	8006e58 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2241      	movs	r2, #65	; 0x41
 8006e3c:	2120      	movs	r1, #32
 8006e3e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2240      	movs	r2, #64	; 0x40
 8006e4a:	2100      	movs	r1, #0
 8006e4c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	0018      	movs	r0, r3
 8006e52:	f7ff fcaf 	bl	80067b4 <HAL_I2C_SlaveRxCpltCallback>
}
 8006e56:	e00e      	b.n	8006e76 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2241      	movs	r2, #65	; 0x41
 8006e5c:	2120      	movs	r1, #32
 8006e5e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2240      	movs	r2, #64	; 0x40
 8006e6a:	2100      	movs	r1, #0
 8006e6c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	0018      	movs	r0, r3
 8006e72:	f7ff fc97 	bl	80067a4 <HAL_I2C_SlaveTxCpltCallback>
}
 8006e76:	46c0      	nop			; (mov r8, r8)
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	b006      	add	sp, #24
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	46c0      	nop			; (mov r8, r8)
 8006e80:	00008001 	.word	0x00008001
 8006e84:	00008002 	.word	0x00008002
 8006e88:	fe00e800 	.word	0xfe00e800
 8006e8c:	ffffbfff 	.word	0xffffbfff
 8006e90:	ffff7fff 	.word	0xffff7fff
 8006e94:	ffff0000 	.word	0xffff0000

08006e98 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4a27      	ldr	r2, [pc, #156]	; (8006f44 <I2C_ITListenCplt+0xac>)
 8006ea6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2241      	movs	r2, #65	; 0x41
 8006eb2:	2120      	movs	r1, #32
 8006eb4:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2242      	movs	r2, #66	; 0x42
 8006eba:	2100      	movs	r1, #0
 8006ebc:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	089b      	lsrs	r3, r3, #2
 8006ec8:	001a      	movs	r2, r3
 8006eca:	2301      	movs	r3, #1
 8006ecc:	4013      	ands	r3, r2
 8006ece:	d022      	beq.n	8006f16 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eda:	b2d2      	uxtb	r2, r2
 8006edc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee2:	1c5a      	adds	r2, r3, #1
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d012      	beq.n	8006f16 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	3b01      	subs	r3, #1
 8006f04:	b29a      	uxth	r2, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f0e:	2204      	movs	r2, #4
 8006f10:	431a      	orrs	r2, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006f16:	4a0c      	ldr	r2, [pc, #48]	; (8006f48 <I2C_ITListenCplt+0xb0>)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	0011      	movs	r1, r2
 8006f1c:	0018      	movs	r0, r3
 8006f1e:	f000 fb55 	bl	80075cc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2210      	movs	r2, #16
 8006f28:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2240      	movs	r2, #64	; 0x40
 8006f2e:	2100      	movs	r1, #0
 8006f30:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	0018      	movs	r0, r3
 8006f36:	f7ff fc55 	bl	80067e4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006f3a:	46c0      	nop			; (mov r8, r8)
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	b002      	add	sp, #8
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	46c0      	nop			; (mov r8, r8)
 8006f44:	ffff0000 	.word	0xffff0000
 8006f48:	00008003 	.word	0x00008003

08006f4c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006f56:	200f      	movs	r0, #15
 8006f58:	183b      	adds	r3, r7, r0
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	2141      	movs	r1, #65	; 0x41
 8006f5e:	5c52      	ldrb	r2, [r2, r1]
 8006f60:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2242      	movs	r2, #66	; 0x42
 8006f66:	2100      	movs	r1, #0
 8006f68:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a62      	ldr	r2, [pc, #392]	; (80070f8 <I2C_ITError+0x1ac>)
 8006f6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	431a      	orrs	r2, r3
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006f82:	183b      	adds	r3, r7, r0
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	2b28      	cmp	r3, #40	; 0x28
 8006f88:	d007      	beq.n	8006f9a <I2C_ITError+0x4e>
 8006f8a:	183b      	adds	r3, r7, r0
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	2b29      	cmp	r3, #41	; 0x29
 8006f90:	d003      	beq.n	8006f9a <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006f92:	183b      	adds	r3, r7, r0
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	2b2a      	cmp	r3, #42	; 0x2a
 8006f98:	d10c      	bne.n	8006fb4 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2103      	movs	r1, #3
 8006f9e:	0018      	movs	r0, r3
 8006fa0:	f000 fb14 	bl	80075cc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2241      	movs	r2, #65	; 0x41
 8006fa8:	2128      	movs	r1, #40	; 0x28
 8006faa:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a53      	ldr	r2, [pc, #332]	; (80070fc <I2C_ITError+0x1b0>)
 8006fb0:	635a      	str	r2, [r3, #52]	; 0x34
 8006fb2:	e012      	b.n	8006fda <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006fb4:	4a52      	ldr	r2, [pc, #328]	; (8007100 <I2C_ITError+0x1b4>)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	0011      	movs	r1, r2
 8006fba:	0018      	movs	r0, r3
 8006fbc:	f000 fb06 	bl	80075cc <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2241      	movs	r2, #65	; 0x41
 8006fc4:	5c9b      	ldrb	r3, [r3, r2]
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	2b60      	cmp	r3, #96	; 0x60
 8006fca:	d003      	beq.n	8006fd4 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2241      	movs	r2, #65	; 0x41
 8006fd0:	2120      	movs	r1, #32
 8006fd2:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fde:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d03b      	beq.n	8007060 <I2C_ITError+0x114>
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	2b11      	cmp	r3, #17
 8006fec:	d002      	beq.n	8006ff4 <I2C_ITError+0xa8>
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	2b21      	cmp	r3, #33	; 0x21
 8006ff2:	d135      	bne.n	8007060 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	2380      	movs	r3, #128	; 0x80
 8006ffc:	01db      	lsls	r3, r3, #7
 8006ffe:	401a      	ands	r2, r3
 8007000:	2380      	movs	r3, #128	; 0x80
 8007002:	01db      	lsls	r3, r3, #7
 8007004:	429a      	cmp	r2, r3
 8007006:	d107      	bne.n	8007018 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	493c      	ldr	r1, [pc, #240]	; (8007104 <I2C_ITError+0x1b8>)
 8007014:	400a      	ands	r2, r1
 8007016:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701c:	0018      	movs	r0, r3
 800701e:	f7fe ffa7 	bl	8005f70 <HAL_DMA_GetState>
 8007022:	0003      	movs	r3, r0
 8007024:	2b01      	cmp	r3, #1
 8007026:	d016      	beq.n	8007056 <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702c:	4a36      	ldr	r2, [pc, #216]	; (8007108 <I2C_ITError+0x1bc>)
 800702e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2240      	movs	r2, #64	; 0x40
 8007034:	2100      	movs	r1, #0
 8007036:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800703c:	0018      	movs	r0, r3
 800703e:	f7fe fe7b 	bl	8005d38 <HAL_DMA_Abort_IT>
 8007042:	1e03      	subs	r3, r0, #0
 8007044:	d051      	beq.n	80070ea <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007050:	0018      	movs	r0, r3
 8007052:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007054:	e049      	b.n	80070ea <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	0018      	movs	r0, r3
 800705a:	f000 f859 	bl	8007110 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800705e:	e044      	b.n	80070ea <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007064:	2b00      	cmp	r3, #0
 8007066:	d03b      	beq.n	80070e0 <I2C_ITError+0x194>
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	2b12      	cmp	r3, #18
 800706c:	d002      	beq.n	8007074 <I2C_ITError+0x128>
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	2b22      	cmp	r3, #34	; 0x22
 8007072:	d135      	bne.n	80070e0 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	2380      	movs	r3, #128	; 0x80
 800707c:	021b      	lsls	r3, r3, #8
 800707e:	401a      	ands	r2, r3
 8007080:	2380      	movs	r3, #128	; 0x80
 8007082:	021b      	lsls	r3, r3, #8
 8007084:	429a      	cmp	r2, r3
 8007086:	d107      	bne.n	8007098 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	491e      	ldr	r1, [pc, #120]	; (800710c <I2C_ITError+0x1c0>)
 8007094:	400a      	ands	r2, r1
 8007096:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800709c:	0018      	movs	r0, r3
 800709e:	f7fe ff67 	bl	8005f70 <HAL_DMA_GetState>
 80070a2:	0003      	movs	r3, r0
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d016      	beq.n	80070d6 <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ac:	4a16      	ldr	r2, [pc, #88]	; (8007108 <I2C_ITError+0x1bc>)
 80070ae:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2240      	movs	r2, #64	; 0x40
 80070b4:	2100      	movs	r1, #0
 80070b6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070bc:	0018      	movs	r0, r3
 80070be:	f7fe fe3b 	bl	8005d38 <HAL_DMA_Abort_IT>
 80070c2:	1e03      	subs	r3, r0, #0
 80070c4:	d013      	beq.n	80070ee <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070d0:	0018      	movs	r0, r3
 80070d2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80070d4:	e00b      	b.n	80070ee <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	0018      	movs	r0, r3
 80070da:	f000 f819 	bl	8007110 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80070de:	e006      	b.n	80070ee <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	0018      	movs	r0, r3
 80070e4:	f000 f814 	bl	8007110 <I2C_TreatErrorCallback>
  }
}
 80070e8:	e002      	b.n	80070f0 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80070ea:	46c0      	nop			; (mov r8, r8)
 80070ec:	e000      	b.n	80070f0 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80070ee:	46c0      	nop			; (mov r8, r8)
}
 80070f0:	46c0      	nop			; (mov r8, r8)
 80070f2:	46bd      	mov	sp, r7
 80070f4:	b004      	add	sp, #16
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	ffff0000 	.word	0xffff0000
 80070fc:	08006815 	.word	0x08006815
 8007100:	00008003 	.word	0x00008003
 8007104:	ffffbfff 	.word	0xffffbfff
 8007108:	080071a7 	.word	0x080071a7
 800710c:	ffff7fff 	.word	0xffff7fff

08007110 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2241      	movs	r2, #65	; 0x41
 800711c:	5c9b      	ldrb	r3, [r3, r2]
 800711e:	b2db      	uxtb	r3, r3
 8007120:	2b60      	cmp	r3, #96	; 0x60
 8007122:	d10f      	bne.n	8007144 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2241      	movs	r2, #65	; 0x41
 8007128:	2120      	movs	r1, #32
 800712a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2240      	movs	r2, #64	; 0x40
 8007136:	2100      	movs	r1, #0
 8007138:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	0018      	movs	r0, r3
 800713e:	f7ff fb61 	bl	8006804 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007142:	e00a      	b.n	800715a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2240      	movs	r2, #64	; 0x40
 800714e:	2100      	movs	r1, #0
 8007150:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	0018      	movs	r0, r3
 8007156:	f7ff fb4d 	bl	80067f4 <HAL_I2C_ErrorCallback>
}
 800715a:	46c0      	nop			; (mov r8, r8)
 800715c:	46bd      	mov	sp, r7
 800715e:	b002      	add	sp, #8
 8007160:	bd80      	pop	{r7, pc}

08007162 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007162:	b580      	push	{r7, lr}
 8007164:	b082      	sub	sp, #8
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	699b      	ldr	r3, [r3, #24]
 8007170:	2202      	movs	r2, #2
 8007172:	4013      	ands	r3, r2
 8007174:	2b02      	cmp	r3, #2
 8007176:	d103      	bne.n	8007180 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2200      	movs	r2, #0
 800717e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	2201      	movs	r2, #1
 8007188:	4013      	ands	r3, r2
 800718a:	2b01      	cmp	r3, #1
 800718c:	d007      	beq.n	800719e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	699a      	ldr	r2, [r3, #24]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2101      	movs	r1, #1
 800719a:	430a      	orrs	r2, r1
 800719c:	619a      	str	r2, [r3, #24]
  }
}
 800719e:	46c0      	nop			; (mov r8, r8)
 80071a0:	46bd      	mov	sp, r7
 80071a2:	b002      	add	sp, #8
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b084      	sub	sp, #16
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d003      	beq.n	80071c4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c0:	2200      	movs	r2, #0
 80071c2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d003      	beq.n	80071d4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071d0:	2200      	movs	r2, #0
 80071d2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	0018      	movs	r0, r3
 80071d8:	f7ff ff9a 	bl	8007110 <I2C_TreatErrorCallback>
}
 80071dc:	46c0      	nop			; (mov r8, r8)
 80071de:	46bd      	mov	sp, r7
 80071e0:	b004      	add	sp, #16
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	603b      	str	r3, [r7, #0]
 80071f0:	1dfb      	adds	r3, r7, #7
 80071f2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80071f4:	e021      	b.n	800723a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	3301      	adds	r3, #1
 80071fa:	d01e      	beq.n	800723a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071fc:	f7fe f90a 	bl	8005414 <HAL_GetTick>
 8007200:	0002      	movs	r2, r0
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	1ad3      	subs	r3, r2, r3
 8007206:	683a      	ldr	r2, [r7, #0]
 8007208:	429a      	cmp	r2, r3
 800720a:	d302      	bcc.n	8007212 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d113      	bne.n	800723a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007216:	2220      	movs	r2, #32
 8007218:	431a      	orrs	r2, r3
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2241      	movs	r2, #65	; 0x41
 8007222:	2120      	movs	r1, #32
 8007224:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2242      	movs	r2, #66	; 0x42
 800722a:	2100      	movs	r1, #0
 800722c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2240      	movs	r2, #64	; 0x40
 8007232:	2100      	movs	r1, #0
 8007234:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e00f      	b.n	800725a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	699b      	ldr	r3, [r3, #24]
 8007240:	68ba      	ldr	r2, [r7, #8]
 8007242:	4013      	ands	r3, r2
 8007244:	68ba      	ldr	r2, [r7, #8]
 8007246:	1ad3      	subs	r3, r2, r3
 8007248:	425a      	negs	r2, r3
 800724a:	4153      	adcs	r3, r2
 800724c:	b2db      	uxtb	r3, r3
 800724e:	001a      	movs	r2, r3
 8007250:	1dfb      	adds	r3, r7, #7
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	429a      	cmp	r2, r3
 8007256:	d0ce      	beq.n	80071f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007258:	2300      	movs	r3, #0
}
 800725a:	0018      	movs	r0, r3
 800725c:	46bd      	mov	sp, r7
 800725e:	b004      	add	sp, #16
 8007260:	bd80      	pop	{r7, pc}

08007262 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	b084      	sub	sp, #16
 8007266:	af00      	add	r7, sp, #0
 8007268:	60f8      	str	r0, [r7, #12]
 800726a:	60b9      	str	r1, [r7, #8]
 800726c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800726e:	e02b      	b.n	80072c8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	68b9      	ldr	r1, [r7, #8]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	0018      	movs	r0, r3
 8007278:	f000 f86e 	bl	8007358 <I2C_IsErrorOccurred>
 800727c:	1e03      	subs	r3, r0, #0
 800727e:	d001      	beq.n	8007284 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	e029      	b.n	80072d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	3301      	adds	r3, #1
 8007288:	d01e      	beq.n	80072c8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800728a:	f7fe f8c3 	bl	8005414 <HAL_GetTick>
 800728e:	0002      	movs	r2, r0
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	68ba      	ldr	r2, [r7, #8]
 8007296:	429a      	cmp	r2, r3
 8007298:	d302      	bcc.n	80072a0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d113      	bne.n	80072c8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072a4:	2220      	movs	r2, #32
 80072a6:	431a      	orrs	r2, r3
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2241      	movs	r2, #65	; 0x41
 80072b0:	2120      	movs	r1, #32
 80072b2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2242      	movs	r2, #66	; 0x42
 80072b8:	2100      	movs	r1, #0
 80072ba:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2240      	movs	r2, #64	; 0x40
 80072c0:	2100      	movs	r1, #0
 80072c2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	e007      	b.n	80072d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	699b      	ldr	r3, [r3, #24]
 80072ce:	2202      	movs	r2, #2
 80072d0:	4013      	ands	r3, r2
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	d1cc      	bne.n	8007270 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	0018      	movs	r0, r3
 80072da:	46bd      	mov	sp, r7
 80072dc:	b004      	add	sp, #16
 80072de:	bd80      	pop	{r7, pc}

080072e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80072ec:	e028      	b.n	8007340 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	68b9      	ldr	r1, [r7, #8]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	0018      	movs	r0, r3
 80072f6:	f000 f82f 	bl	8007358 <I2C_IsErrorOccurred>
 80072fa:	1e03      	subs	r3, r0, #0
 80072fc:	d001      	beq.n	8007302 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	e026      	b.n	8007350 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007302:	f7fe f887 	bl	8005414 <HAL_GetTick>
 8007306:	0002      	movs	r2, r0
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	1ad3      	subs	r3, r2, r3
 800730c:	68ba      	ldr	r2, [r7, #8]
 800730e:	429a      	cmp	r2, r3
 8007310:	d302      	bcc.n	8007318 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d113      	bne.n	8007340 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800731c:	2220      	movs	r2, #32
 800731e:	431a      	orrs	r2, r3
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2241      	movs	r2, #65	; 0x41
 8007328:	2120      	movs	r1, #32
 800732a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2242      	movs	r2, #66	; 0x42
 8007330:	2100      	movs	r1, #0
 8007332:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2240      	movs	r2, #64	; 0x40
 8007338:	2100      	movs	r1, #0
 800733a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	e007      	b.n	8007350 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	699b      	ldr	r3, [r3, #24]
 8007346:	2220      	movs	r2, #32
 8007348:	4013      	ands	r3, r2
 800734a:	2b20      	cmp	r3, #32
 800734c:	d1cf      	bne.n	80072ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800734e:	2300      	movs	r3, #0
}
 8007350:	0018      	movs	r0, r3
 8007352:	46bd      	mov	sp, r7
 8007354:	b004      	add	sp, #16
 8007356:	bd80      	pop	{r7, pc}

08007358 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007358:	b590      	push	{r4, r7, lr}
 800735a:	b08b      	sub	sp, #44	; 0x2c
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007364:	2327      	movs	r3, #39	; 0x27
 8007366:	18fb      	adds	r3, r7, r3
 8007368:	2200      	movs	r2, #0
 800736a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	699b      	ldr	r3, [r3, #24]
 8007372:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007374:	2300      	movs	r3, #0
 8007376:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	2210      	movs	r2, #16
 8007380:	4013      	ands	r3, r2
 8007382:	d100      	bne.n	8007386 <I2C_IsErrorOccurred+0x2e>
 8007384:	e082      	b.n	800748c <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2210      	movs	r2, #16
 800738c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800738e:	e060      	b.n	8007452 <I2C_IsErrorOccurred+0xfa>
 8007390:	2427      	movs	r4, #39	; 0x27
 8007392:	193b      	adds	r3, r7, r4
 8007394:	193a      	adds	r2, r7, r4
 8007396:	7812      	ldrb	r2, [r2, #0]
 8007398:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	3301      	adds	r3, #1
 800739e:	d058      	beq.n	8007452 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80073a0:	f7fe f838 	bl	8005414 <HAL_GetTick>
 80073a4:	0002      	movs	r2, r0
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	68ba      	ldr	r2, [r7, #8]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d306      	bcc.n	80073be <I2C_IsErrorOccurred+0x66>
 80073b0:	193b      	adds	r3, r7, r4
 80073b2:	193a      	adds	r2, r7, r4
 80073b4:	7812      	ldrb	r2, [r2, #0]
 80073b6:	701a      	strb	r2, [r3, #0]
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d149      	bne.n	8007452 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	685a      	ldr	r2, [r3, #4]
 80073c4:	2380      	movs	r3, #128	; 0x80
 80073c6:	01db      	lsls	r3, r3, #7
 80073c8:	4013      	ands	r3, r2
 80073ca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80073cc:	2013      	movs	r0, #19
 80073ce:	183b      	adds	r3, r7, r0
 80073d0:	68fa      	ldr	r2, [r7, #12]
 80073d2:	2142      	movs	r1, #66	; 0x42
 80073d4:	5c52      	ldrb	r2, [r2, r1]
 80073d6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	699a      	ldr	r2, [r3, #24]
 80073de:	2380      	movs	r3, #128	; 0x80
 80073e0:	021b      	lsls	r3, r3, #8
 80073e2:	401a      	ands	r2, r3
 80073e4:	2380      	movs	r3, #128	; 0x80
 80073e6:	021b      	lsls	r3, r3, #8
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d126      	bne.n	800743a <I2C_IsErrorOccurred+0xe2>
 80073ec:	697a      	ldr	r2, [r7, #20]
 80073ee:	2380      	movs	r3, #128	; 0x80
 80073f0:	01db      	lsls	r3, r3, #7
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d021      	beq.n	800743a <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80073f6:	183b      	adds	r3, r7, r0
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	2b20      	cmp	r3, #32
 80073fc:	d01d      	beq.n	800743a <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	685a      	ldr	r2, [r3, #4]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2180      	movs	r1, #128	; 0x80
 800740a:	01c9      	lsls	r1, r1, #7
 800740c:	430a      	orrs	r2, r1
 800740e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007410:	f7fe f800 	bl	8005414 <HAL_GetTick>
 8007414:	0003      	movs	r3, r0
 8007416:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007418:	e00f      	b.n	800743a <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800741a:	f7fd fffb 	bl	8005414 <HAL_GetTick>
 800741e:	0002      	movs	r2, r0
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	1ad3      	subs	r3, r2, r3
 8007424:	2b19      	cmp	r3, #25
 8007426:	d908      	bls.n	800743a <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8007428:	6a3b      	ldr	r3, [r7, #32]
 800742a:	2220      	movs	r2, #32
 800742c:	4313      	orrs	r3, r2
 800742e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007430:	2327      	movs	r3, #39	; 0x27
 8007432:	18fb      	adds	r3, r7, r3
 8007434:	2201      	movs	r2, #1
 8007436:	701a      	strb	r2, [r3, #0]

              break;
 8007438:	e00b      	b.n	8007452 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	699b      	ldr	r3, [r3, #24]
 8007440:	2220      	movs	r2, #32
 8007442:	4013      	ands	r3, r2
 8007444:	2127      	movs	r1, #39	; 0x27
 8007446:	187a      	adds	r2, r7, r1
 8007448:	1879      	adds	r1, r7, r1
 800744a:	7809      	ldrb	r1, [r1, #0]
 800744c:	7011      	strb	r1, [r2, #0]
 800744e:	2b20      	cmp	r3, #32
 8007450:	d1e3      	bne.n	800741a <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	699b      	ldr	r3, [r3, #24]
 8007458:	2220      	movs	r2, #32
 800745a:	4013      	ands	r3, r2
 800745c:	2b20      	cmp	r3, #32
 800745e:	d004      	beq.n	800746a <I2C_IsErrorOccurred+0x112>
 8007460:	2327      	movs	r3, #39	; 0x27
 8007462:	18fb      	adds	r3, r7, r3
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d092      	beq.n	8007390 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800746a:	2327      	movs	r3, #39	; 0x27
 800746c:	18fb      	adds	r3, r7, r3
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d103      	bne.n	800747c <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	2220      	movs	r2, #32
 800747a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800747c:	6a3b      	ldr	r3, [r7, #32]
 800747e:	2204      	movs	r2, #4
 8007480:	4313      	orrs	r3, r2
 8007482:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007484:	2327      	movs	r3, #39	; 0x27
 8007486:	18fb      	adds	r3, r7, r3
 8007488:	2201      	movs	r2, #1
 800748a:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	699b      	ldr	r3, [r3, #24]
 8007492:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007494:	69ba      	ldr	r2, [r7, #24]
 8007496:	2380      	movs	r3, #128	; 0x80
 8007498:	005b      	lsls	r3, r3, #1
 800749a:	4013      	ands	r3, r2
 800749c:	d00c      	beq.n	80074b8 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800749e:	6a3b      	ldr	r3, [r7, #32]
 80074a0:	2201      	movs	r2, #1
 80074a2:	4313      	orrs	r3, r2
 80074a4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	2280      	movs	r2, #128	; 0x80
 80074ac:	0052      	lsls	r2, r2, #1
 80074ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80074b0:	2327      	movs	r3, #39	; 0x27
 80074b2:	18fb      	adds	r3, r7, r3
 80074b4:	2201      	movs	r2, #1
 80074b6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80074b8:	69ba      	ldr	r2, [r7, #24]
 80074ba:	2380      	movs	r3, #128	; 0x80
 80074bc:	00db      	lsls	r3, r3, #3
 80074be:	4013      	ands	r3, r2
 80074c0:	d00c      	beq.n	80074dc <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80074c2:	6a3b      	ldr	r3, [r7, #32]
 80074c4:	2208      	movs	r2, #8
 80074c6:	4313      	orrs	r3, r2
 80074c8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2280      	movs	r2, #128	; 0x80
 80074d0:	00d2      	lsls	r2, r2, #3
 80074d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80074d4:	2327      	movs	r3, #39	; 0x27
 80074d6:	18fb      	adds	r3, r7, r3
 80074d8:	2201      	movs	r2, #1
 80074da:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80074dc:	69ba      	ldr	r2, [r7, #24]
 80074de:	2380      	movs	r3, #128	; 0x80
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	4013      	ands	r3, r2
 80074e4:	d00c      	beq.n	8007500 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80074e6:	6a3b      	ldr	r3, [r7, #32]
 80074e8:	2202      	movs	r2, #2
 80074ea:	4313      	orrs	r3, r2
 80074ec:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	2280      	movs	r2, #128	; 0x80
 80074f4:	0092      	lsls	r2, r2, #2
 80074f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80074f8:	2327      	movs	r3, #39	; 0x27
 80074fa:	18fb      	adds	r3, r7, r3
 80074fc:	2201      	movs	r2, #1
 80074fe:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8007500:	2327      	movs	r3, #39	; 0x27
 8007502:	18fb      	adds	r3, r7, r3
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d01d      	beq.n	8007546 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	0018      	movs	r0, r3
 800750e:	f7ff fe28 	bl	8007162 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	685a      	ldr	r2, [r3, #4]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	490d      	ldr	r1, [pc, #52]	; (8007554 <I2C_IsErrorOccurred+0x1fc>)
 800751e:	400a      	ands	r2, r1
 8007520:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007526:	6a3b      	ldr	r3, [r7, #32]
 8007528:	431a      	orrs	r2, r3
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2241      	movs	r2, #65	; 0x41
 8007532:	2120      	movs	r1, #32
 8007534:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2242      	movs	r2, #66	; 0x42
 800753a:	2100      	movs	r1, #0
 800753c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2240      	movs	r2, #64	; 0x40
 8007542:	2100      	movs	r1, #0
 8007544:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8007546:	2327      	movs	r3, #39	; 0x27
 8007548:	18fb      	adds	r3, r7, r3
 800754a:	781b      	ldrb	r3, [r3, #0]
}
 800754c:	0018      	movs	r0, r3
 800754e:	46bd      	mov	sp, r7
 8007550:	b00b      	add	sp, #44	; 0x2c
 8007552:	bd90      	pop	{r4, r7, pc}
 8007554:	fe00e800 	.word	0xfe00e800

08007558 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007558:	b590      	push	{r4, r7, lr}
 800755a:	b087      	sub	sp, #28
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	0008      	movs	r0, r1
 8007562:	0011      	movs	r1, r2
 8007564:	607b      	str	r3, [r7, #4]
 8007566:	240a      	movs	r4, #10
 8007568:	193b      	adds	r3, r7, r4
 800756a:	1c02      	adds	r2, r0, #0
 800756c:	801a      	strh	r2, [r3, #0]
 800756e:	2009      	movs	r0, #9
 8007570:	183b      	adds	r3, r7, r0
 8007572:	1c0a      	adds	r2, r1, #0
 8007574:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007576:	193b      	adds	r3, r7, r4
 8007578:	881b      	ldrh	r3, [r3, #0]
 800757a:	059b      	lsls	r3, r3, #22
 800757c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800757e:	183b      	adds	r3, r7, r0
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	0419      	lsls	r1, r3, #16
 8007584:	23ff      	movs	r3, #255	; 0xff
 8007586:	041b      	lsls	r3, r3, #16
 8007588:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800758a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007592:	4313      	orrs	r3, r2
 8007594:	005b      	lsls	r3, r3, #1
 8007596:	085b      	lsrs	r3, r3, #1
 8007598:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075a2:	0d51      	lsrs	r1, r2, #21
 80075a4:	2280      	movs	r2, #128	; 0x80
 80075a6:	00d2      	lsls	r2, r2, #3
 80075a8:	400a      	ands	r2, r1
 80075aa:	4907      	ldr	r1, [pc, #28]	; (80075c8 <I2C_TransferConfig+0x70>)
 80075ac:	430a      	orrs	r2, r1
 80075ae:	43d2      	mvns	r2, r2
 80075b0:	401a      	ands	r2, r3
 80075b2:	0011      	movs	r1, r2
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	697a      	ldr	r2, [r7, #20]
 80075ba:	430a      	orrs	r2, r1
 80075bc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80075be:	46c0      	nop			; (mov r8, r8)
 80075c0:	46bd      	mov	sp, r7
 80075c2:	b007      	add	sp, #28
 80075c4:	bd90      	pop	{r4, r7, pc}
 80075c6:	46c0      	nop			; (mov r8, r8)
 80075c8:	03ff63ff 	.word	0x03ff63ff

080075cc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	000a      	movs	r2, r1
 80075d6:	1cbb      	adds	r3, r7, #2
 80075d8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80075da:	2300      	movs	r3, #0
 80075dc:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80075de:	1cbb      	adds	r3, r7, #2
 80075e0:	881b      	ldrh	r3, [r3, #0]
 80075e2:	2201      	movs	r2, #1
 80075e4:	4013      	ands	r3, r2
 80075e6:	d010      	beq.n	800760a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2242      	movs	r2, #66	; 0x42
 80075ec:	4313      	orrs	r3, r2
 80075ee:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2241      	movs	r2, #65	; 0x41
 80075f4:	5c9b      	ldrb	r3, [r3, r2]
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	001a      	movs	r2, r3
 80075fa:	2328      	movs	r3, #40	; 0x28
 80075fc:	4013      	ands	r3, r2
 80075fe:	2b28      	cmp	r3, #40	; 0x28
 8007600:	d003      	beq.n	800760a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	22b0      	movs	r2, #176	; 0xb0
 8007606:	4313      	orrs	r3, r2
 8007608:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800760a:	1cbb      	adds	r3, r7, #2
 800760c:	881b      	ldrh	r3, [r3, #0]
 800760e:	2202      	movs	r2, #2
 8007610:	4013      	ands	r3, r2
 8007612:	d010      	beq.n	8007636 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2244      	movs	r2, #68	; 0x44
 8007618:	4313      	orrs	r3, r2
 800761a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2241      	movs	r2, #65	; 0x41
 8007620:	5c9b      	ldrb	r3, [r3, r2]
 8007622:	b2db      	uxtb	r3, r3
 8007624:	001a      	movs	r2, r3
 8007626:	2328      	movs	r3, #40	; 0x28
 8007628:	4013      	ands	r3, r2
 800762a:	2b28      	cmp	r3, #40	; 0x28
 800762c:	d003      	beq.n	8007636 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	22b0      	movs	r2, #176	; 0xb0
 8007632:	4313      	orrs	r3, r2
 8007634:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007636:	1cbb      	adds	r3, r7, #2
 8007638:	2200      	movs	r2, #0
 800763a:	5e9b      	ldrsh	r3, [r3, r2]
 800763c:	2b00      	cmp	r3, #0
 800763e:	da03      	bge.n	8007648 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	22b8      	movs	r2, #184	; 0xb8
 8007644:	4313      	orrs	r3, r2
 8007646:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007648:	1cbb      	adds	r3, r7, #2
 800764a:	881b      	ldrh	r3, [r3, #0]
 800764c:	2b10      	cmp	r3, #16
 800764e:	d103      	bne.n	8007658 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2290      	movs	r2, #144	; 0x90
 8007654:	4313      	orrs	r3, r2
 8007656:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007658:	1cbb      	adds	r3, r7, #2
 800765a:	881b      	ldrh	r3, [r3, #0]
 800765c:	2b20      	cmp	r3, #32
 800765e:	d103      	bne.n	8007668 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2220      	movs	r2, #32
 8007664:	4313      	orrs	r3, r2
 8007666:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007668:	1cbb      	adds	r3, r7, #2
 800766a:	881b      	ldrh	r3, [r3, #0]
 800766c:	2b40      	cmp	r3, #64	; 0x40
 800766e:	d103      	bne.n	8007678 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2240      	movs	r2, #64	; 0x40
 8007674:	4313      	orrs	r3, r2
 8007676:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	43d9      	mvns	r1, r3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	400a      	ands	r2, r1
 8007688:	601a      	str	r2, [r3, #0]
}
 800768a:	46c0      	nop			; (mov r8, r8)
 800768c:	46bd      	mov	sp, r7
 800768e:	b004      	add	sp, #16
 8007690:	bd80      	pop	{r7, pc}
	...

08007694 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2241      	movs	r2, #65	; 0x41
 80076a2:	5c9b      	ldrb	r3, [r3, r2]
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	2b20      	cmp	r3, #32
 80076a8:	d138      	bne.n	800771c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2240      	movs	r2, #64	; 0x40
 80076ae:	5c9b      	ldrb	r3, [r3, r2]
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d101      	bne.n	80076b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80076b4:	2302      	movs	r3, #2
 80076b6:	e032      	b.n	800771e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2240      	movs	r2, #64	; 0x40
 80076bc:	2101      	movs	r1, #1
 80076be:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2241      	movs	r2, #65	; 0x41
 80076c4:	2124      	movs	r1, #36	; 0x24
 80076c6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	2101      	movs	r1, #1
 80076d4:	438a      	bics	r2, r1
 80076d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4911      	ldr	r1, [pc, #68]	; (8007728 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80076e4:	400a      	ands	r2, r1
 80076e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	6819      	ldr	r1, [r3, #0]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	683a      	ldr	r2, [r7, #0]
 80076f4:	430a      	orrs	r2, r1
 80076f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	2101      	movs	r1, #1
 8007704:	430a      	orrs	r2, r1
 8007706:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2241      	movs	r2, #65	; 0x41
 800770c:	2120      	movs	r1, #32
 800770e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2240      	movs	r2, #64	; 0x40
 8007714:	2100      	movs	r1, #0
 8007716:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007718:	2300      	movs	r3, #0
 800771a:	e000      	b.n	800771e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800771c:	2302      	movs	r3, #2
  }
}
 800771e:	0018      	movs	r0, r3
 8007720:	46bd      	mov	sp, r7
 8007722:	b002      	add	sp, #8
 8007724:	bd80      	pop	{r7, pc}
 8007726:	46c0      	nop			; (mov r8, r8)
 8007728:	ffffefff 	.word	0xffffefff

0800772c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2241      	movs	r2, #65	; 0x41
 800773a:	5c9b      	ldrb	r3, [r3, r2]
 800773c:	b2db      	uxtb	r3, r3
 800773e:	2b20      	cmp	r3, #32
 8007740:	d139      	bne.n	80077b6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2240      	movs	r2, #64	; 0x40
 8007746:	5c9b      	ldrb	r3, [r3, r2]
 8007748:	2b01      	cmp	r3, #1
 800774a:	d101      	bne.n	8007750 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800774c:	2302      	movs	r3, #2
 800774e:	e033      	b.n	80077b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2240      	movs	r2, #64	; 0x40
 8007754:	2101      	movs	r1, #1
 8007756:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2241      	movs	r2, #65	; 0x41
 800775c:	2124      	movs	r1, #36	; 0x24
 800775e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	2101      	movs	r1, #1
 800776c:	438a      	bics	r2, r1
 800776e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	4a11      	ldr	r2, [pc, #68]	; (80077c0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800777c:	4013      	ands	r3, r2
 800777e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	021b      	lsls	r3, r3, #8
 8007784:	68fa      	ldr	r2, [r7, #12]
 8007786:	4313      	orrs	r3, r2
 8007788:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	68fa      	ldr	r2, [r7, #12]
 8007790:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2101      	movs	r1, #1
 800779e:	430a      	orrs	r2, r1
 80077a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2241      	movs	r2, #65	; 0x41
 80077a6:	2120      	movs	r1, #32
 80077a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2240      	movs	r2, #64	; 0x40
 80077ae:	2100      	movs	r1, #0
 80077b0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80077b2:	2300      	movs	r3, #0
 80077b4:	e000      	b.n	80077b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80077b6:	2302      	movs	r3, #2
  }
}
 80077b8:	0018      	movs	r0, r3
 80077ba:	46bd      	mov	sp, r7
 80077bc:	b004      	add	sp, #16
 80077be:	bd80      	pop	{r7, pc}
 80077c0:	fffff0ff 	.word	0xfffff0ff

080077c4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b088      	sub	sp, #32
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d101      	bne.n	80077d6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	e0e5      	b.n	80079a2 <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2235      	movs	r2, #53	; 0x35
 80077da:	5c9b      	ldrb	r3, [r3, r2]
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d107      	bne.n	80077f2 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2234      	movs	r2, #52	; 0x34
 80077e6:	2100      	movs	r1, #0
 80077e8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	0018      	movs	r0, r3
 80077ee:	f7fd fa4b 	bl	8004c88 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2235      	movs	r2, #53	; 0x35
 80077f6:	2102      	movs	r1, #2
 80077f8:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	69da      	ldr	r2, [r3, #28]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4969      	ldr	r1, [pc, #420]	; (80079ac <HAL_I2S_Init+0x1e8>)
 8007806:	400a      	ands	r2, r1
 8007808:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2202      	movs	r2, #2
 8007810:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	695b      	ldr	r3, [r3, #20]
 8007816:	2b02      	cmp	r3, #2
 8007818:	d100      	bne.n	800781c <HAL_I2S_Init+0x58>
 800781a:	e076      	b.n	800790a <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d102      	bne.n	800782a <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8007824:	2310      	movs	r3, #16
 8007826:	617b      	str	r3, [r7, #20]
 8007828:	e001      	b.n	800782e <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800782a:	2320      	movs	r3, #32
 800782c:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	2b20      	cmp	r3, #32
 8007834:	d802      	bhi.n	800783c <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	005b      	lsls	r3, r3, #1
 800783a:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 800783c:	2380      	movs	r3, #128	; 0x80
 800783e:	011b      	lsls	r3, r3, #4
 8007840:	0018      	movs	r0, r3
 8007842:	f001 f95b 	bl	8008afc <HAL_RCCEx_GetPeriphCLKFreq>
 8007846:	0003      	movs	r3, r0
 8007848:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PERIPHCLK_I2S2 */
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	691a      	ldr	r2, [r3, #16]
 800784e:	2380      	movs	r3, #128	; 0x80
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	429a      	cmp	r2, r3
 8007854:	d131      	bne.n	80078ba <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d016      	beq.n	800788c <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	0019      	movs	r1, r3
 8007864:	68f8      	ldr	r0, [r7, #12]
 8007866:	f7f8 fc4d 	bl	8000104 <__udivsi3>
 800786a:	0003      	movs	r3, r0
 800786c:	001a      	movs	r2, r3
 800786e:	0013      	movs	r3, r2
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	189b      	adds	r3, r3, r2
 8007874:	005b      	lsls	r3, r3, #1
 8007876:	001a      	movs	r2, r3
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	695b      	ldr	r3, [r3, #20]
 800787c:	0019      	movs	r1, r3
 800787e:	0010      	movs	r0, r2
 8007880:	f7f8 fc40 	bl	8000104 <__udivsi3>
 8007884:	0003      	movs	r3, r0
 8007886:	3305      	adds	r3, #5
 8007888:	613b      	str	r3, [r7, #16]
 800788a:	e02a      	b.n	80078e2 <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	00db      	lsls	r3, r3, #3
 8007890:	0019      	movs	r1, r3
 8007892:	68f8      	ldr	r0, [r7, #12]
 8007894:	f7f8 fc36 	bl	8000104 <__udivsi3>
 8007898:	0003      	movs	r3, r0
 800789a:	001a      	movs	r2, r3
 800789c:	0013      	movs	r3, r2
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	189b      	adds	r3, r3, r2
 80078a2:	005b      	lsls	r3, r3, #1
 80078a4:	001a      	movs	r2, r3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	695b      	ldr	r3, [r3, #20]
 80078aa:	0019      	movs	r1, r3
 80078ac:	0010      	movs	r0, r2
 80078ae:	f7f8 fc29 	bl	8000104 <__udivsi3>
 80078b2:	0003      	movs	r3, r0
 80078b4:	3305      	adds	r3, #5
 80078b6:	613b      	str	r3, [r7, #16]
 80078b8:	e013      	b.n	80078e2 <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80078ba:	6979      	ldr	r1, [r7, #20]
 80078bc:	68f8      	ldr	r0, [r7, #12]
 80078be:	f7f8 fc21 	bl	8000104 <__udivsi3>
 80078c2:	0003      	movs	r3, r0
 80078c4:	001a      	movs	r2, r3
 80078c6:	0013      	movs	r3, r2
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	189b      	adds	r3, r3, r2
 80078cc:	005b      	lsls	r3, r3, #1
 80078ce:	001a      	movs	r2, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	695b      	ldr	r3, [r3, #20]
 80078d4:	0019      	movs	r1, r3
 80078d6:	0010      	movs	r0, r2
 80078d8:	f7f8 fc14 	bl	8000104 <__udivsi3>
 80078dc:	0003      	movs	r3, r0
 80078de:	3305      	adds	r3, #5
 80078e0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	210a      	movs	r1, #10
 80078e6:	0018      	movs	r0, r3
 80078e8:	f7f8 fc0c 	bl	8000104 <__udivsi3>
 80078ec:	0003      	movs	r3, r0
 80078ee:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	2201      	movs	r2, #1
 80078f4:	4013      	ands	r3, r2
 80078f6:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80078f8:	693a      	ldr	r2, [r7, #16]
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	1ad3      	subs	r3, r2, r3
 80078fe:	085b      	lsrs	r3, r3, #1
 8007900:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8007902:	69bb      	ldr	r3, [r7, #24]
 8007904:	021b      	lsls	r3, r3, #8
 8007906:	61bb      	str	r3, [r7, #24]
 8007908:	e003      	b.n	8007912 <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800790a:	2302      	movs	r3, #2
 800790c:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800790e:	2300      	movs	r3, #0
 8007910:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	2b01      	cmp	r3, #1
 8007916:	d902      	bls.n	800791e <HAL_I2S_Init+0x15a>
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	2bff      	cmp	r3, #255	; 0xff
 800791c:	d907      	bls.n	800792e <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007922:	2210      	movs	r2, #16
 8007924:	431a      	orrs	r2, r3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e039      	b.n	80079a2 <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	691a      	ldr	r2, [r3, #16]
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	431a      	orrs	r2, r3
 8007936:	0011      	movs	r1, r2
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	69fa      	ldr	r2, [r7, #28]
 800793e:	430a      	orrs	r2, r1
 8007940:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	69db      	ldr	r3, [r3, #28]
 8007948:	4a18      	ldr	r2, [pc, #96]	; (80079ac <HAL_I2S_Init+0x1e8>)
 800794a:	401a      	ands	r2, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6859      	ldr	r1, [r3, #4]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	4319      	orrs	r1, r3
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	4319      	orrs	r1, r3
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	699b      	ldr	r3, [r3, #24]
 8007960:	430b      	orrs	r3, r1
 8007962:	431a      	orrs	r2, r3
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2180      	movs	r1, #128	; 0x80
 800796a:	0109      	lsls	r1, r1, #4
 800796c:	430a      	orrs	r2, r1
 800796e:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	2b30      	cmp	r3, #48	; 0x30
 8007976:	d003      	beq.n	8007980 <HAL_I2S_Init+0x1bc>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	2bb0      	cmp	r3, #176	; 0xb0
 800797e:	d108      	bne.n	8007992 <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	69da      	ldr	r2, [r3, #28]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	2180      	movs	r1, #128	; 0x80
 800798c:	0149      	lsls	r1, r1, #5
 800798e:	430a      	orrs	r2, r1
 8007990:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2235      	movs	r2, #53	; 0x35
 800799c:	2101      	movs	r1, #1
 800799e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80079a0:	2300      	movs	r3, #0
}
 80079a2:	0018      	movs	r0, r3
 80079a4:	46bd      	mov	sp, r7
 80079a6:	b008      	add	sp, #32
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	46c0      	nop			; (mov r8, r8)
 80079ac:	fffff040 	.word	0xfffff040

080079b0 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b086      	sub	sp, #24
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	1dbb      	adds	r3, r7, #6
 80079bc:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d003      	beq.n	80079cc <HAL_I2S_Transmit_DMA+0x1c>
 80079c4:	1dbb      	adds	r3, r7, #6
 80079c6:	881b      	ldrh	r3, [r3, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d101      	bne.n	80079d0 <HAL_I2S_Transmit_DMA+0x20>
  {
    return  HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	e091      	b.n	8007af4 <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2234      	movs	r2, #52	; 0x34
 80079d4:	5c9b      	ldrb	r3, [r3, r2]
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d101      	bne.n	80079e0 <HAL_I2S_Transmit_DMA+0x30>
 80079dc:	2302      	movs	r3, #2
 80079de:	e089      	b.n	8007af4 <HAL_I2S_Transmit_DMA+0x144>
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2234      	movs	r2, #52	; 0x34
 80079e4:	2101      	movs	r1, #1
 80079e6:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2235      	movs	r2, #53	; 0x35
 80079ec:	5c9b      	ldrb	r3, [r3, r2]
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d005      	beq.n	8007a00 <HAL_I2S_Transmit_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2234      	movs	r2, #52	; 0x34
 80079f8:	2100      	movs	r1, #0
 80079fa:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 80079fc:	2302      	movs	r3, #2
 80079fe:	e079      	b.n	8007af4 <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2235      	movs	r2, #53	; 0x35
 8007a04:	2103      	movs	r1, #3
 8007a06:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->pTxBuffPtr = pData;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	68ba      	ldr	r2, [r7, #8]
 8007a12:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	69db      	ldr	r3, [r3, #28]
 8007a1a:	2207      	movs	r2, #7
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	2b03      	cmp	r3, #3
 8007a24:	d002      	beq.n	8007a2c <HAL_I2S_Transmit_DMA+0x7c>
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	2b05      	cmp	r3, #5
 8007a2a:	d10c      	bne.n	8007a46 <HAL_I2S_Transmit_DMA+0x96>
  {
    hi2s->TxXferSize = (Size << 1U);
 8007a2c:	1dbb      	adds	r3, r7, #6
 8007a2e:	881b      	ldrh	r3, [r3, #0]
 8007a30:	18db      	adds	r3, r3, r3
 8007a32:	b29a      	uxth	r2, r3
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 8007a38:	1dbb      	adds	r3, r7, #6
 8007a3a:	881b      	ldrh	r3, [r3, #0]
 8007a3c:	18db      	adds	r3, r3, r3
 8007a3e:	b29a      	uxth	r2, r3
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	845a      	strh	r2, [r3, #34]	; 0x22
 8007a44:	e007      	b.n	8007a56 <HAL_I2S_Transmit_DMA+0xa6>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	1dba      	adds	r2, r7, #6
 8007a4a:	8812      	ldrh	r2, [r2, #0]
 8007a4c:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	1dba      	adds	r2, r7, #6
 8007a52:	8812      	ldrh	r2, [r2, #0]
 8007a54:	845a      	strh	r2, [r3, #34]	; 0x22
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a5a:	4a28      	ldr	r2, [pc, #160]	; (8007afc <HAL_I2S_Transmit_DMA+0x14c>)
 8007a5c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a62:	4a27      	ldr	r2, [pc, #156]	; (8007b00 <HAL_I2S_Transmit_DMA+0x150>)
 8007a64:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a6a:	4a26      	ldr	r2, [pc, #152]	; (8007b04 <HAL_I2S_Transmit_DMA+0x154>)
 8007a6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
                                 (uint32_t)hi2s->pTxBuffPtr,
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	69db      	ldr	r3, [r3, #28]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007a76:	0019      	movs	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007a7e:	001a      	movs	r2, r3
                                 hi2s->TxXferSize))
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	8c1b      	ldrh	r3, [r3, #32]
 8007a84:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007a86:	f7fe f8d1 	bl	8005c2c <HAL_DMA_Start_IT>
 8007a8a:	1e03      	subs	r3, r0, #0
 8007a8c:	d00f      	beq.n	8007aae <HAL_I2S_Transmit_DMA+0xfe>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a92:	2208      	movs	r2, #8
 8007a94:	431a      	orrs	r2, r3
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	639a      	str	r2, [r3, #56]	; 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2235      	movs	r2, #53	; 0x35
 8007a9e:	2101      	movs	r1, #1
 8007aa0:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2234      	movs	r2, #52	; 0x34
 8007aa6:	2100      	movs	r1, #0
 8007aa8:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e022      	b.n	8007af4 <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	69da      	ldr	r2, [r3, #28]
 8007ab4:	2380      	movs	r3, #128	; 0x80
 8007ab6:	00db      	lsls	r3, r3, #3
 8007ab8:	4013      	ands	r3, r2
 8007aba:	d108      	bne.n	8007ace <HAL_I2S_Transmit_DMA+0x11e>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	69da      	ldr	r2, [r3, #28]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	2180      	movs	r1, #128	; 0x80
 8007ac8:	00c9      	lsls	r1, r1, #3
 8007aca:	430a      	orrs	r2, r1
 8007acc:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	2202      	movs	r2, #2
 8007ad6:	4013      	ands	r3, r2
 8007ad8:	d107      	bne.n	8007aea <HAL_I2S_Transmit_DMA+0x13a>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	685a      	ldr	r2, [r3, #4]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2102      	movs	r1, #2
 8007ae6:	430a      	orrs	r2, r1
 8007ae8:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2234      	movs	r2, #52	; 0x34
 8007aee:	2100      	movs	r1, #0
 8007af0:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8007af2:	2300      	movs	r3, #0
}
 8007af4:	0018      	movs	r0, r3
 8007af6:	46bd      	mov	sp, r7
 8007af8:	b006      	add	sp, #24
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	08007c43 	.word	0x08007c43
 8007b00:	08007bff 	.word	0x08007bff
 8007b04:	08007c61 	.word	0x08007c61

08007b08 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hi2s->Instance->CR2;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hi2s->Instance->SR;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	60bb      	str	r3, [r7, #8]

  /* I2S in mode Receiver ------------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	099b      	lsrs	r3, r3, #6
 8007b24:	001a      	movs	r2, r3
 8007b26:	2301      	movs	r3, #1
 8007b28:	4013      	ands	r3, r2
 8007b2a:	d10e      	bne.n	8007b4a <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	4013      	ands	r3, r2
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8007b32:	d00a      	beq.n	8007b4a <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	099b      	lsrs	r3, r3, #6
 8007b38:	001a      	movs	r2, r3
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	4013      	ands	r3, r2
 8007b3e:	d004      	beq.n	8007b4a <HAL_I2S_IRQHandler+0x42>
  {
    I2S_Receive_IT(hi2s);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	0018      	movs	r0, r3
 8007b44:	f000 f8e2 	bl	8007d0c <I2S_Receive_IT>
    return;
 8007b48:	e046      	b.n	8007bd8 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S in mode Tramitter -----------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_TXE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_TXE) != RESET))
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	085b      	lsrs	r3, r3, #1
 8007b4e:	001a      	movs	r2, r3
 8007b50:	2301      	movs	r3, #1
 8007b52:	4013      	ands	r3, r2
 8007b54:	d00a      	beq.n	8007b6c <HAL_I2S_IRQHandler+0x64>
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	09db      	lsrs	r3, r3, #7
 8007b5a:	001a      	movs	r2, r3
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	4013      	ands	r3, r2
 8007b60:	d004      	beq.n	8007b6c <HAL_I2S_IRQHandler+0x64>
  {
    I2S_Transmit_IT(hi2s);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	0018      	movs	r0, r3
 8007b66:	f000 f8a2 	bl	8007cae <I2S_Transmit_IT>
    return;
 8007b6a:	e035      	b.n	8007bd8 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S interrupt error -------------------------------------------------*/
  if (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_ERR) != RESET)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	095b      	lsrs	r3, r3, #5
 8007b70:	001a      	movs	r2, r3
 8007b72:	2301      	movs	r3, #1
 8007b74:	4013      	ands	r3, r2
 8007b76:	d02f      	beq.n	8007bd8 <HAL_I2S_IRQHandler+0xd0>
  {
    /* I2S Overrun error interrupt occurred ---------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) != RESET)
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	099b      	lsrs	r3, r3, #6
 8007b7c:	001a      	movs	r2, r3
 8007b7e:	2301      	movs	r3, #1
 8007b80:	4013      	ands	r3, r2
 8007b82:	d00d      	beq.n	8007ba0 <HAL_I2S_IRQHandler+0x98>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	685a      	ldr	r2, [r3, #4]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2160      	movs	r1, #96	; 0x60
 8007b90:	438a      	bics	r2, r1
 8007b92:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b98:	2202      	movs	r2, #2
 8007b9a:	431a      	orrs	r2, r3
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_UDR) != RESET)
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	08db      	lsrs	r3, r3, #3
 8007ba4:	001a      	movs	r2, r3
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	4013      	ands	r3, r2
 8007baa:	d00d      	beq.n	8007bc8 <HAL_I2S_IRQHandler+0xc0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	685a      	ldr	r2, [r3, #4]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	21a0      	movs	r1, #160	; 0xa0
 8007bb8:	438a      	bics	r2, r1
 8007bba:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc0:	2204      	movs	r2, #4
 8007bc2:	431a      	orrs	r2, r3
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Set the I2S State ready */
    hi2s->State = HAL_I2S_STATE_READY;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2235      	movs	r2, #53	; 0x35
 8007bcc:	2101      	movs	r1, #1
 8007bce:	5499      	strb	r1, [r3, r2]

    /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->ErrorCallback(hi2s);
#else
    HAL_I2S_ErrorCallback(hi2s);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	0018      	movs	r0, r3
 8007bd4:	f000 f80b 	bl	8007bee <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	b004      	add	sp, #16
 8007bdc:	bd80      	pop	{r7, pc}

08007bde <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007bde:	b580      	push	{r7, lr}
 8007be0:	b082      	sub	sp, #8
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8007be6:	46c0      	nop			; (mov r8, r8)
 8007be8:	46bd      	mov	sp, r7
 8007bea:	b002      	add	sp, #8
 8007bec:	bd80      	pop	{r7, pc}

08007bee <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b082      	sub	sp, #8
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8007bf6:	46c0      	nop			; (mov r8, r8)
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	b002      	add	sp, #8
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b084      	sub	sp, #16
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c0a:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	69db      	ldr	r3, [r3, #28]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d10e      	bne.n	8007c32 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	685a      	ldr	r2, [r3, #4]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2102      	movs	r1, #2
 8007c20:	438a      	bics	r2, r1
 8007c22:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2200      	movs	r2, #0
 8007c28:	845a      	strh	r2, [r3, #34]	; 0x22
    hi2s->State = HAL_I2S_STATE_READY;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2235      	movs	r2, #53	; 0x35
 8007c2e:	2101      	movs	r1, #1
 8007c30:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	0018      	movs	r0, r3
 8007c36:	f7f9 fa65 	bl	8001104 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007c3a:	46c0      	nop			; (mov r8, r8)
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	b004      	add	sp, #16
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b084      	sub	sp, #16
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c4e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	0018      	movs	r0, r3
 8007c54:	f7f9 fa4c 	bl	80010f0 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007c58:	46c0      	nop			; (mov r8, r8)
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	b004      	add	sp, #16
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c6c:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	685a      	ldr	r2, [r3, #4]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	2103      	movs	r1, #3
 8007c7a:	438a      	bics	r2, r1
 8007c7c:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2200      	movs	r2, #0
 8007c82:	845a      	strh	r2, [r3, #34]	; 0x22
  hi2s->RxXferCount = 0U;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2200      	movs	r2, #0
 8007c88:	855a      	strh	r2, [r3, #42]	; 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2235      	movs	r2, #53	; 0x35
 8007c8e:	2101      	movs	r1, #1
 8007c90:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c96:	2208      	movs	r2, #8
 8007c98:	431a      	orrs	r2, r3
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	0018      	movs	r0, r3
 8007ca2:	f7ff ffa4 	bl	8007bee <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007ca6:	46c0      	nop			; (mov r8, r8)
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	b004      	add	sp, #16
 8007cac:	bd80      	pop	{r7, pc}

08007cae <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b082      	sub	sp, #8
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	69db      	ldr	r3, [r3, #28]
 8007cba:	881a      	ldrh	r2, [r3, #0]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	69db      	ldr	r3, [r3, #28]
 8007cc6:	1c9a      	adds	r2, r3, #2
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	61da      	str	r2, [r3, #28]
  hi2s->TxXferCount--;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	3b01      	subs	r3, #1
 8007cd4:	b29a      	uxth	r2, r3
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	845a      	strh	r2, [r3, #34]	; 0x22

  if (hi2s->TxXferCount == 0U)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d10f      	bne.n	8007d04 <I2S_Transmit_IT+0x56>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	685a      	ldr	r2, [r3, #4]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	21a0      	movs	r1, #160	; 0xa0
 8007cf0:	438a      	bics	r2, r1
 8007cf2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2235      	movs	r2, #53	; 0x35
 8007cf8:	2101      	movs	r1, #1
 8007cfa:	5499      	strb	r1, [r3, r2]
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	0018      	movs	r0, r3
 8007d00:	f7f9 fa00 	bl	8001104 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007d04:	46c0      	nop			; (mov r8, r8)
 8007d06:	46bd      	mov	sp, r7
 8007d08:	b002      	add	sp, #8
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	68da      	ldr	r2, [r3, #12]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1e:	b292      	uxth	r2, r2
 8007d20:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d26:	1c9a      	adds	r2, r3, #2
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->RxXferCount--;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	3b01      	subs	r3, #1
 8007d34:	b29a      	uxth	r2, r3
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->RxXferCount == 0U)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d10f      	bne.n	8007d64 <I2S_Receive_IT+0x58>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	685a      	ldr	r2, [r3, #4]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2160      	movs	r1, #96	; 0x60
 8007d50:	438a      	bics	r2, r1
 8007d52:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2235      	movs	r2, #53	; 0x35
 8007d58:	2101      	movs	r1, #1
 8007d5a:	5499      	strb	r1, [r3, r2]
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	0018      	movs	r0, r3
 8007d60:	f7ff ff3d 	bl	8007bde <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007d64:	46c0      	nop			; (mov r8, r8)
 8007d66:	46bd      	mov	sp, r7
 8007d68:	b002      	add	sp, #8
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8007d74:	4b19      	ldr	r3, [pc, #100]	; (8007ddc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a19      	ldr	r2, [pc, #100]	; (8007de0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8007d7a:	4013      	ands	r3, r2
 8007d7c:	0019      	movs	r1, r3
 8007d7e:	4b17      	ldr	r3, [pc, #92]	; (8007ddc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	430a      	orrs	r2, r1
 8007d84:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	2380      	movs	r3, #128	; 0x80
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d11f      	bne.n	8007dd0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8007d90:	4b14      	ldr	r3, [pc, #80]	; (8007de4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	0013      	movs	r3, r2
 8007d96:	005b      	lsls	r3, r3, #1
 8007d98:	189b      	adds	r3, r3, r2
 8007d9a:	005b      	lsls	r3, r3, #1
 8007d9c:	4912      	ldr	r1, [pc, #72]	; (8007de8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8007d9e:	0018      	movs	r0, r3
 8007da0:	f7f8 f9b0 	bl	8000104 <__udivsi3>
 8007da4:	0003      	movs	r3, r0
 8007da6:	3301      	adds	r3, #1
 8007da8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007daa:	e008      	b.n	8007dbe <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d003      	beq.n	8007dba <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	3b01      	subs	r3, #1
 8007db6:	60fb      	str	r3, [r7, #12]
 8007db8:	e001      	b.n	8007dbe <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8007dba:	2303      	movs	r3, #3
 8007dbc:	e009      	b.n	8007dd2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007dbe:	4b07      	ldr	r3, [pc, #28]	; (8007ddc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007dc0:	695a      	ldr	r2, [r3, #20]
 8007dc2:	2380      	movs	r3, #128	; 0x80
 8007dc4:	00db      	lsls	r3, r3, #3
 8007dc6:	401a      	ands	r2, r3
 8007dc8:	2380      	movs	r3, #128	; 0x80
 8007dca:	00db      	lsls	r3, r3, #3
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d0ed      	beq.n	8007dac <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	0018      	movs	r0, r3
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	b004      	add	sp, #16
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	46c0      	nop			; (mov r8, r8)
 8007ddc:	40007000 	.word	0x40007000
 8007de0:	fffff9ff 	.word	0xfffff9ff
 8007de4:	20000034 	.word	0x20000034
 8007de8:	000f4240 	.word	0x000f4240

08007dec <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8007df0:	4b03      	ldr	r3, [pc, #12]	; (8007e00 <LL_RCC_GetAPB1Prescaler+0x14>)
 8007df2:	689a      	ldr	r2, [r3, #8]
 8007df4:	23e0      	movs	r3, #224	; 0xe0
 8007df6:	01db      	lsls	r3, r3, #7
 8007df8:	4013      	ands	r3, r2
}
 8007dfa:	0018      	movs	r0, r3
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	40021000 	.word	0x40021000

08007e04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b088      	sub	sp, #32
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d101      	bne.n	8007e16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	e2fe      	b.n	8008414 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	4013      	ands	r3, r2
 8007e1e:	d100      	bne.n	8007e22 <HAL_RCC_OscConfig+0x1e>
 8007e20:	e07c      	b.n	8007f1c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e22:	4bc3      	ldr	r3, [pc, #780]	; (8008130 <HAL_RCC_OscConfig+0x32c>)
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	2238      	movs	r2, #56	; 0x38
 8007e28:	4013      	ands	r3, r2
 8007e2a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007e2c:	4bc0      	ldr	r3, [pc, #768]	; (8008130 <HAL_RCC_OscConfig+0x32c>)
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	2203      	movs	r2, #3
 8007e32:	4013      	ands	r3, r2
 8007e34:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8007e36:	69bb      	ldr	r3, [r7, #24]
 8007e38:	2b10      	cmp	r3, #16
 8007e3a:	d102      	bne.n	8007e42 <HAL_RCC_OscConfig+0x3e>
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	2b03      	cmp	r3, #3
 8007e40:	d002      	beq.n	8007e48 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	2b08      	cmp	r3, #8
 8007e46:	d10b      	bne.n	8007e60 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e48:	4bb9      	ldr	r3, [pc, #740]	; (8008130 <HAL_RCC_OscConfig+0x32c>)
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	2380      	movs	r3, #128	; 0x80
 8007e4e:	029b      	lsls	r3, r3, #10
 8007e50:	4013      	ands	r3, r2
 8007e52:	d062      	beq.n	8007f1a <HAL_RCC_OscConfig+0x116>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d15e      	bne.n	8007f1a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e2d9      	b.n	8008414 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	685a      	ldr	r2, [r3, #4]
 8007e64:	2380      	movs	r3, #128	; 0x80
 8007e66:	025b      	lsls	r3, r3, #9
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d107      	bne.n	8007e7c <HAL_RCC_OscConfig+0x78>
 8007e6c:	4bb0      	ldr	r3, [pc, #704]	; (8008130 <HAL_RCC_OscConfig+0x32c>)
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	4baf      	ldr	r3, [pc, #700]	; (8008130 <HAL_RCC_OscConfig+0x32c>)
 8007e72:	2180      	movs	r1, #128	; 0x80
 8007e74:	0249      	lsls	r1, r1, #9
 8007e76:	430a      	orrs	r2, r1
 8007e78:	601a      	str	r2, [r3, #0]
 8007e7a:	e020      	b.n	8007ebe <HAL_RCC_OscConfig+0xba>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	685a      	ldr	r2, [r3, #4]
 8007e80:	23a0      	movs	r3, #160	; 0xa0
 8007e82:	02db      	lsls	r3, r3, #11
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d10e      	bne.n	8007ea6 <HAL_RCC_OscConfig+0xa2>
 8007e88:	4ba9      	ldr	r3, [pc, #676]	; (8008130 <HAL_RCC_OscConfig+0x32c>)
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	4ba8      	ldr	r3, [pc, #672]	; (8008130 <HAL_RCC_OscConfig+0x32c>)
 8007e8e:	2180      	movs	r1, #128	; 0x80
 8007e90:	02c9      	lsls	r1, r1, #11
 8007e92:	430a      	orrs	r2, r1
 8007e94:	601a      	str	r2, [r3, #0]
 8007e96:	4ba6      	ldr	r3, [pc, #664]	; (8008130 <HAL_RCC_OscConfig+0x32c>)
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	4ba5      	ldr	r3, [pc, #660]	; (8008130 <HAL_RCC_OscConfig+0x32c>)
 8007e9c:	2180      	movs	r1, #128	; 0x80
 8007e9e:	0249      	lsls	r1, r1, #9
 8007ea0:	430a      	orrs	r2, r1
 8007ea2:	601a      	str	r2, [r3, #0]
 8007ea4:	e00b      	b.n	8007ebe <HAL_RCC_OscConfig+0xba>
 8007ea6:	4ba2      	ldr	r3, [pc, #648]	; (8008130 <HAL_RCC_OscConfig+0x32c>)
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	4ba1      	ldr	r3, [pc, #644]	; (8008130 <HAL_RCC_OscConfig+0x32c>)
 8007eac:	49a1      	ldr	r1, [pc, #644]	; (8008134 <HAL_RCC_OscConfig+0x330>)
 8007eae:	400a      	ands	r2, r1
 8007eb0:	601a      	str	r2, [r3, #0]
 8007eb2:	4b9f      	ldr	r3, [pc, #636]	; (8008130 <HAL_RCC_OscConfig+0x32c>)
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	4b9e      	ldr	r3, [pc, #632]	; (8008130 <HAL_RCC_OscConfig+0x32c>)
 8007eb8:	499f      	ldr	r1, [pc, #636]	; (8008138 <HAL_RCC_OscConfig+0x334>)
 8007eba:	400a      	ands	r2, r1
 8007ebc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d014      	beq.n	8007ef0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ec6:	f7fd faa5 	bl	8005414 <HAL_GetTick>
 8007eca:	0003      	movs	r3, r0
 8007ecc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007ece:	e008      	b.n	8007ee2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ed0:	f7fd faa0 	bl	8005414 <HAL_GetTick>
 8007ed4:	0002      	movs	r2, r0
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	1ad3      	subs	r3, r2, r3
 8007eda:	2b64      	cmp	r3, #100	; 0x64
 8007edc:	d901      	bls.n	8007ee2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8007ede:	2303      	movs	r3, #3
 8007ee0:	e298      	b.n	8008414 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007ee2:	4b93      	ldr	r3, [pc, #588]	; (8008130 <HAL_RCC_OscConfig+0x32c>)
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	2380      	movs	r3, #128	; 0x80
 8007ee8:	029b      	lsls	r3, r3, #10
 8007eea:	4013      	ands	r3, r2
 8007eec:	d0f0      	beq.n	8007ed0 <HAL_RCC_OscConfig+0xcc>
 8007eee:	e015      	b.n	8007f1c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ef0:	f7fd fa90 	bl	8005414 <HAL_GetTick>
 8007ef4:	0003      	movs	r3, r0
 8007ef6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007ef8:	e008      	b.n	8007f0c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007efa:	f7fd fa8b 	bl	8005414 <HAL_GetTick>
 8007efe:	0002      	movs	r2, r0
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	1ad3      	subs	r3, r2, r3
 8007f04:	2b64      	cmp	r3, #100	; 0x64
 8007f06:	d901      	bls.n	8007f0c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007f08:	2303      	movs	r3, #3
 8007f0a:	e283      	b.n	8008414 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007f0c:	4b88      	ldr	r3, [pc, #544]	; (8008130 <HAL_RCC_OscConfig+0x32c>)
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	2380      	movs	r3, #128	; 0x80
 8007f12:	029b      	lsls	r3, r3, #10
 8007f14:	4013      	ands	r3, r2
 8007f16:	d1f0      	bne.n	8007efa <HAL_RCC_OscConfig+0xf6>
 8007f18:	e000      	b.n	8007f1c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f1a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	2202      	movs	r2, #2
 8007f22:	4013      	ands	r3, r2
 8007f24:	d100      	bne.n	8007f28 <HAL_RCC_OscConfig+0x124>
 8007f26:	e099      	b.n	800805c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f28:	4b81      	ldr	r3, [pc, #516]	; (8008130 <HAL_RCC_OscConfig+0x32c>)
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	2238      	movs	r2, #56	; 0x38
 8007f2e:	4013      	ands	r3, r2
 8007f30:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007f32:	4b7f      	ldr	r3, [pc, #508]	; (8008130 <HAL_RCC_OscConfig+0x32c>)
 8007f34:	68db      	ldr	r3, [r3, #12]
 8007f36:	2203      	movs	r2, #3
 8007f38:	4013      	ands	r3, r2
 8007f3a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8007f3c:	69bb      	ldr	r3, [r7, #24]
 8007f3e:	2b10      	cmp	r3, #16
 8007f40:	d102      	bne.n	8007f48 <HAL_RCC_OscConfig+0x144>
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	2b02      	cmp	r3, #2
 8007f46:	d002      	beq.n	8007f4e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8007f48:	69bb      	ldr	r3, [r7, #24]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d135      	bne.n	8007fba <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f4e:	4b78      	ldr	r3, [pc, #480]	; (8008130 <HAL_RCC_OscConfig+0x32c>)
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	2380      	movs	r3, #128	; 0x80
 8007f54:	00db      	lsls	r3, r3, #3
 8007f56:	4013      	ands	r3, r2
 8007f58:	d005      	beq.n	8007f66 <HAL_RCC_OscConfig+0x162>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d101      	bne.n	8007f66 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	e256      	b.n	8008414 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f66:	4b72      	ldr	r3, [pc, #456]	; (8008130 <HAL_RCC_OscConfig+0x32c>)
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	4a74      	ldr	r2, [pc, #464]	; (800813c <HAL_RCC_OscConfig+0x338>)
 8007f6c:	4013      	ands	r3, r2
 8007f6e:	0019      	movs	r1, r3
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	695b      	ldr	r3, [r3, #20]
 8007f74:	021a      	lsls	r2, r3, #8
 8007f76:	4b6e      	ldr	r3, [pc, #440]	; (8008130 <HAL_RCC_OscConfig+0x32c>)
 8007f78:	430a      	orrs	r2, r1
 8007f7a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d112      	bne.n	8007fa8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8007f82:	4b6b      	ldr	r3, [pc, #428]	; (8008130 <HAL_RCC_OscConfig+0x32c>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a6e      	ldr	r2, [pc, #440]	; (8008140 <HAL_RCC_OscConfig+0x33c>)
 8007f88:	4013      	ands	r3, r2
 8007f8a:	0019      	movs	r1, r3
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	691a      	ldr	r2, [r3, #16]
 8007f90:	4b67      	ldr	r3, [pc, #412]	; (8008130 <HAL_RCC_OscConfig+0x32c>)
 8007f92:	430a      	orrs	r2, r1
 8007f94:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8007f96:	4b66      	ldr	r3, [pc, #408]	; (8008130 <HAL_RCC_OscConfig+0x32c>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	0adb      	lsrs	r3, r3, #11
 8007f9c:	2207      	movs	r2, #7
 8007f9e:	4013      	ands	r3, r2
 8007fa0:	4a68      	ldr	r2, [pc, #416]	; (8008144 <HAL_RCC_OscConfig+0x340>)
 8007fa2:	40da      	lsrs	r2, r3
 8007fa4:	4b68      	ldr	r3, [pc, #416]	; (8008148 <HAL_RCC_OscConfig+0x344>)
 8007fa6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007fa8:	4b68      	ldr	r3, [pc, #416]	; (800814c <HAL_RCC_OscConfig+0x348>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	0018      	movs	r0, r3
 8007fae:	f7fd f9d5 	bl	800535c <HAL_InitTick>
 8007fb2:	1e03      	subs	r3, r0, #0
 8007fb4:	d051      	beq.n	800805a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e22c      	b.n	8008414 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	68db      	ldr	r3, [r3, #12]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d030      	beq.n	8008024 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8007fc2:	4b5b      	ldr	r3, [pc, #364]	; (8008130 <HAL_RCC_OscConfig+0x32c>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a5e      	ldr	r2, [pc, #376]	; (8008140 <HAL_RCC_OscConfig+0x33c>)
 8007fc8:	4013      	ands	r3, r2
 8007fca:	0019      	movs	r1, r3
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	691a      	ldr	r2, [r3, #16]
 8007fd0:	4b57      	ldr	r3, [pc, #348]	; (8008130 <HAL_RCC_OscConfig+0x32c>)
 8007fd2:	430a      	orrs	r2, r1
 8007fd4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8007fd6:	4b56      	ldr	r3, [pc, #344]	; (8008130 <HAL_RCC_OscConfig+0x32c>)
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	4b55      	ldr	r3, [pc, #340]	; (8008130 <HAL_RCC_OscConfig+0x32c>)
 8007fdc:	2180      	movs	r1, #128	; 0x80
 8007fde:	0049      	lsls	r1, r1, #1
 8007fe0:	430a      	orrs	r2, r1
 8007fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fe4:	f7fd fa16 	bl	8005414 <HAL_GetTick>
 8007fe8:	0003      	movs	r3, r0
 8007fea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007fec:	e008      	b.n	8008000 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007fee:	f7fd fa11 	bl	8005414 <HAL_GetTick>
 8007ff2:	0002      	movs	r2, r0
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	1ad3      	subs	r3, r2, r3
 8007ff8:	2b02      	cmp	r3, #2
 8007ffa:	d901      	bls.n	8008000 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	e209      	b.n	8008414 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008000:	4b4b      	ldr	r3, [pc, #300]	; (8008130 <HAL_RCC_OscConfig+0x32c>)
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	2380      	movs	r3, #128	; 0x80
 8008006:	00db      	lsls	r3, r3, #3
 8008008:	4013      	ands	r3, r2
 800800a:	d0f0      	beq.n	8007fee <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800800c:	4b48      	ldr	r3, [pc, #288]	; (8008130 <HAL_RCC_OscConfig+0x32c>)
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	4a4a      	ldr	r2, [pc, #296]	; (800813c <HAL_RCC_OscConfig+0x338>)
 8008012:	4013      	ands	r3, r2
 8008014:	0019      	movs	r1, r3
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	695b      	ldr	r3, [r3, #20]
 800801a:	021a      	lsls	r2, r3, #8
 800801c:	4b44      	ldr	r3, [pc, #272]	; (8008130 <HAL_RCC_OscConfig+0x32c>)
 800801e:	430a      	orrs	r2, r1
 8008020:	605a      	str	r2, [r3, #4]
 8008022:	e01b      	b.n	800805c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8008024:	4b42      	ldr	r3, [pc, #264]	; (8008130 <HAL_RCC_OscConfig+0x32c>)
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	4b41      	ldr	r3, [pc, #260]	; (8008130 <HAL_RCC_OscConfig+0x32c>)
 800802a:	4949      	ldr	r1, [pc, #292]	; (8008150 <HAL_RCC_OscConfig+0x34c>)
 800802c:	400a      	ands	r2, r1
 800802e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008030:	f7fd f9f0 	bl	8005414 <HAL_GetTick>
 8008034:	0003      	movs	r3, r0
 8008036:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008038:	e008      	b.n	800804c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800803a:	f7fd f9eb 	bl	8005414 <HAL_GetTick>
 800803e:	0002      	movs	r2, r0
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	1ad3      	subs	r3, r2, r3
 8008044:	2b02      	cmp	r3, #2
 8008046:	d901      	bls.n	800804c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008048:	2303      	movs	r3, #3
 800804a:	e1e3      	b.n	8008414 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800804c:	4b38      	ldr	r3, [pc, #224]	; (8008130 <HAL_RCC_OscConfig+0x32c>)
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	2380      	movs	r3, #128	; 0x80
 8008052:	00db      	lsls	r3, r3, #3
 8008054:	4013      	ands	r3, r2
 8008056:	d1f0      	bne.n	800803a <HAL_RCC_OscConfig+0x236>
 8008058:	e000      	b.n	800805c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800805a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2208      	movs	r2, #8
 8008062:	4013      	ands	r3, r2
 8008064:	d047      	beq.n	80080f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008066:	4b32      	ldr	r3, [pc, #200]	; (8008130 <HAL_RCC_OscConfig+0x32c>)
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	2238      	movs	r2, #56	; 0x38
 800806c:	4013      	ands	r3, r2
 800806e:	2b18      	cmp	r3, #24
 8008070:	d10a      	bne.n	8008088 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8008072:	4b2f      	ldr	r3, [pc, #188]	; (8008130 <HAL_RCC_OscConfig+0x32c>)
 8008074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008076:	2202      	movs	r2, #2
 8008078:	4013      	ands	r3, r2
 800807a:	d03c      	beq.n	80080f6 <HAL_RCC_OscConfig+0x2f2>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	699b      	ldr	r3, [r3, #24]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d138      	bne.n	80080f6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8008084:	2301      	movs	r3, #1
 8008086:	e1c5      	b.n	8008414 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	699b      	ldr	r3, [r3, #24]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d019      	beq.n	80080c4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8008090:	4b27      	ldr	r3, [pc, #156]	; (8008130 <HAL_RCC_OscConfig+0x32c>)
 8008092:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008094:	4b26      	ldr	r3, [pc, #152]	; (8008130 <HAL_RCC_OscConfig+0x32c>)
 8008096:	2101      	movs	r1, #1
 8008098:	430a      	orrs	r2, r1
 800809a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800809c:	f7fd f9ba 	bl	8005414 <HAL_GetTick>
 80080a0:	0003      	movs	r3, r0
 80080a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80080a4:	e008      	b.n	80080b8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080a6:	f7fd f9b5 	bl	8005414 <HAL_GetTick>
 80080aa:	0002      	movs	r2, r0
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	1ad3      	subs	r3, r2, r3
 80080b0:	2b02      	cmp	r3, #2
 80080b2:	d901      	bls.n	80080b8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80080b4:	2303      	movs	r3, #3
 80080b6:	e1ad      	b.n	8008414 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80080b8:	4b1d      	ldr	r3, [pc, #116]	; (8008130 <HAL_RCC_OscConfig+0x32c>)
 80080ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080bc:	2202      	movs	r2, #2
 80080be:	4013      	ands	r3, r2
 80080c0:	d0f1      	beq.n	80080a6 <HAL_RCC_OscConfig+0x2a2>
 80080c2:	e018      	b.n	80080f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80080c4:	4b1a      	ldr	r3, [pc, #104]	; (8008130 <HAL_RCC_OscConfig+0x32c>)
 80080c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80080c8:	4b19      	ldr	r3, [pc, #100]	; (8008130 <HAL_RCC_OscConfig+0x32c>)
 80080ca:	2101      	movs	r1, #1
 80080cc:	438a      	bics	r2, r1
 80080ce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080d0:	f7fd f9a0 	bl	8005414 <HAL_GetTick>
 80080d4:	0003      	movs	r3, r0
 80080d6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80080d8:	e008      	b.n	80080ec <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080da:	f7fd f99b 	bl	8005414 <HAL_GetTick>
 80080de:	0002      	movs	r2, r0
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	1ad3      	subs	r3, r2, r3
 80080e4:	2b02      	cmp	r3, #2
 80080e6:	d901      	bls.n	80080ec <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80080e8:	2303      	movs	r3, #3
 80080ea:	e193      	b.n	8008414 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80080ec:	4b10      	ldr	r3, [pc, #64]	; (8008130 <HAL_RCC_OscConfig+0x32c>)
 80080ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080f0:	2202      	movs	r2, #2
 80080f2:	4013      	ands	r3, r2
 80080f4:	d1f1      	bne.n	80080da <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2204      	movs	r2, #4
 80080fc:	4013      	ands	r3, r2
 80080fe:	d100      	bne.n	8008102 <HAL_RCC_OscConfig+0x2fe>
 8008100:	e0c6      	b.n	8008290 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008102:	231f      	movs	r3, #31
 8008104:	18fb      	adds	r3, r7, r3
 8008106:	2200      	movs	r2, #0
 8008108:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800810a:	4b09      	ldr	r3, [pc, #36]	; (8008130 <HAL_RCC_OscConfig+0x32c>)
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	2238      	movs	r2, #56	; 0x38
 8008110:	4013      	ands	r3, r2
 8008112:	2b20      	cmp	r3, #32
 8008114:	d11e      	bne.n	8008154 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8008116:	4b06      	ldr	r3, [pc, #24]	; (8008130 <HAL_RCC_OscConfig+0x32c>)
 8008118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800811a:	2202      	movs	r2, #2
 800811c:	4013      	ands	r3, r2
 800811e:	d100      	bne.n	8008122 <HAL_RCC_OscConfig+0x31e>
 8008120:	e0b6      	b.n	8008290 <HAL_RCC_OscConfig+0x48c>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d000      	beq.n	800812c <HAL_RCC_OscConfig+0x328>
 800812a:	e0b1      	b.n	8008290 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800812c:	2301      	movs	r3, #1
 800812e:	e171      	b.n	8008414 <HAL_RCC_OscConfig+0x610>
 8008130:	40021000 	.word	0x40021000
 8008134:	fffeffff 	.word	0xfffeffff
 8008138:	fffbffff 	.word	0xfffbffff
 800813c:	ffff80ff 	.word	0xffff80ff
 8008140:	ffffc7ff 	.word	0xffffc7ff
 8008144:	00f42400 	.word	0x00f42400
 8008148:	20000034 	.word	0x20000034
 800814c:	20000038 	.word	0x20000038
 8008150:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008154:	4bb1      	ldr	r3, [pc, #708]	; (800841c <HAL_RCC_OscConfig+0x618>)
 8008156:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008158:	2380      	movs	r3, #128	; 0x80
 800815a:	055b      	lsls	r3, r3, #21
 800815c:	4013      	ands	r3, r2
 800815e:	d101      	bne.n	8008164 <HAL_RCC_OscConfig+0x360>
 8008160:	2301      	movs	r3, #1
 8008162:	e000      	b.n	8008166 <HAL_RCC_OscConfig+0x362>
 8008164:	2300      	movs	r3, #0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d011      	beq.n	800818e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800816a:	4bac      	ldr	r3, [pc, #688]	; (800841c <HAL_RCC_OscConfig+0x618>)
 800816c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800816e:	4bab      	ldr	r3, [pc, #684]	; (800841c <HAL_RCC_OscConfig+0x618>)
 8008170:	2180      	movs	r1, #128	; 0x80
 8008172:	0549      	lsls	r1, r1, #21
 8008174:	430a      	orrs	r2, r1
 8008176:	63da      	str	r2, [r3, #60]	; 0x3c
 8008178:	4ba8      	ldr	r3, [pc, #672]	; (800841c <HAL_RCC_OscConfig+0x618>)
 800817a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800817c:	2380      	movs	r3, #128	; 0x80
 800817e:	055b      	lsls	r3, r3, #21
 8008180:	4013      	ands	r3, r2
 8008182:	60fb      	str	r3, [r7, #12]
 8008184:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8008186:	231f      	movs	r3, #31
 8008188:	18fb      	adds	r3, r7, r3
 800818a:	2201      	movs	r2, #1
 800818c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800818e:	4ba4      	ldr	r3, [pc, #656]	; (8008420 <HAL_RCC_OscConfig+0x61c>)
 8008190:	681a      	ldr	r2, [r3, #0]
 8008192:	2380      	movs	r3, #128	; 0x80
 8008194:	005b      	lsls	r3, r3, #1
 8008196:	4013      	ands	r3, r2
 8008198:	d11a      	bne.n	80081d0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800819a:	4ba1      	ldr	r3, [pc, #644]	; (8008420 <HAL_RCC_OscConfig+0x61c>)
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	4ba0      	ldr	r3, [pc, #640]	; (8008420 <HAL_RCC_OscConfig+0x61c>)
 80081a0:	2180      	movs	r1, #128	; 0x80
 80081a2:	0049      	lsls	r1, r1, #1
 80081a4:	430a      	orrs	r2, r1
 80081a6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80081a8:	f7fd f934 	bl	8005414 <HAL_GetTick>
 80081ac:	0003      	movs	r3, r0
 80081ae:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80081b0:	e008      	b.n	80081c4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081b2:	f7fd f92f 	bl	8005414 <HAL_GetTick>
 80081b6:	0002      	movs	r2, r0
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	1ad3      	subs	r3, r2, r3
 80081bc:	2b02      	cmp	r3, #2
 80081be:	d901      	bls.n	80081c4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80081c0:	2303      	movs	r3, #3
 80081c2:	e127      	b.n	8008414 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80081c4:	4b96      	ldr	r3, [pc, #600]	; (8008420 <HAL_RCC_OscConfig+0x61c>)
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	2380      	movs	r3, #128	; 0x80
 80081ca:	005b      	lsls	r3, r3, #1
 80081cc:	4013      	ands	r3, r2
 80081ce:	d0f0      	beq.n	80081b2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d106      	bne.n	80081e6 <HAL_RCC_OscConfig+0x3e2>
 80081d8:	4b90      	ldr	r3, [pc, #576]	; (800841c <HAL_RCC_OscConfig+0x618>)
 80081da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80081dc:	4b8f      	ldr	r3, [pc, #572]	; (800841c <HAL_RCC_OscConfig+0x618>)
 80081de:	2101      	movs	r1, #1
 80081e0:	430a      	orrs	r2, r1
 80081e2:	65da      	str	r2, [r3, #92]	; 0x5c
 80081e4:	e01c      	b.n	8008220 <HAL_RCC_OscConfig+0x41c>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	2b05      	cmp	r3, #5
 80081ec:	d10c      	bne.n	8008208 <HAL_RCC_OscConfig+0x404>
 80081ee:	4b8b      	ldr	r3, [pc, #556]	; (800841c <HAL_RCC_OscConfig+0x618>)
 80081f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80081f2:	4b8a      	ldr	r3, [pc, #552]	; (800841c <HAL_RCC_OscConfig+0x618>)
 80081f4:	2104      	movs	r1, #4
 80081f6:	430a      	orrs	r2, r1
 80081f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80081fa:	4b88      	ldr	r3, [pc, #544]	; (800841c <HAL_RCC_OscConfig+0x618>)
 80081fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80081fe:	4b87      	ldr	r3, [pc, #540]	; (800841c <HAL_RCC_OscConfig+0x618>)
 8008200:	2101      	movs	r1, #1
 8008202:	430a      	orrs	r2, r1
 8008204:	65da      	str	r2, [r3, #92]	; 0x5c
 8008206:	e00b      	b.n	8008220 <HAL_RCC_OscConfig+0x41c>
 8008208:	4b84      	ldr	r3, [pc, #528]	; (800841c <HAL_RCC_OscConfig+0x618>)
 800820a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800820c:	4b83      	ldr	r3, [pc, #524]	; (800841c <HAL_RCC_OscConfig+0x618>)
 800820e:	2101      	movs	r1, #1
 8008210:	438a      	bics	r2, r1
 8008212:	65da      	str	r2, [r3, #92]	; 0x5c
 8008214:	4b81      	ldr	r3, [pc, #516]	; (800841c <HAL_RCC_OscConfig+0x618>)
 8008216:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008218:	4b80      	ldr	r3, [pc, #512]	; (800841c <HAL_RCC_OscConfig+0x618>)
 800821a:	2104      	movs	r1, #4
 800821c:	438a      	bics	r2, r1
 800821e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d014      	beq.n	8008252 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008228:	f7fd f8f4 	bl	8005414 <HAL_GetTick>
 800822c:	0003      	movs	r3, r0
 800822e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008230:	e009      	b.n	8008246 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008232:	f7fd f8ef 	bl	8005414 <HAL_GetTick>
 8008236:	0002      	movs	r2, r0
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	1ad3      	subs	r3, r2, r3
 800823c:	4a79      	ldr	r2, [pc, #484]	; (8008424 <HAL_RCC_OscConfig+0x620>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d901      	bls.n	8008246 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8008242:	2303      	movs	r3, #3
 8008244:	e0e6      	b.n	8008414 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008246:	4b75      	ldr	r3, [pc, #468]	; (800841c <HAL_RCC_OscConfig+0x618>)
 8008248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800824a:	2202      	movs	r2, #2
 800824c:	4013      	ands	r3, r2
 800824e:	d0f0      	beq.n	8008232 <HAL_RCC_OscConfig+0x42e>
 8008250:	e013      	b.n	800827a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008252:	f7fd f8df 	bl	8005414 <HAL_GetTick>
 8008256:	0003      	movs	r3, r0
 8008258:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800825a:	e009      	b.n	8008270 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800825c:	f7fd f8da 	bl	8005414 <HAL_GetTick>
 8008260:	0002      	movs	r2, r0
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	1ad3      	subs	r3, r2, r3
 8008266:	4a6f      	ldr	r2, [pc, #444]	; (8008424 <HAL_RCC_OscConfig+0x620>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d901      	bls.n	8008270 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800826c:	2303      	movs	r3, #3
 800826e:	e0d1      	b.n	8008414 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008270:	4b6a      	ldr	r3, [pc, #424]	; (800841c <HAL_RCC_OscConfig+0x618>)
 8008272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008274:	2202      	movs	r2, #2
 8008276:	4013      	ands	r3, r2
 8008278:	d1f0      	bne.n	800825c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800827a:	231f      	movs	r3, #31
 800827c:	18fb      	adds	r3, r7, r3
 800827e:	781b      	ldrb	r3, [r3, #0]
 8008280:	2b01      	cmp	r3, #1
 8008282:	d105      	bne.n	8008290 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8008284:	4b65      	ldr	r3, [pc, #404]	; (800841c <HAL_RCC_OscConfig+0x618>)
 8008286:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008288:	4b64      	ldr	r3, [pc, #400]	; (800841c <HAL_RCC_OscConfig+0x618>)
 800828a:	4967      	ldr	r1, [pc, #412]	; (8008428 <HAL_RCC_OscConfig+0x624>)
 800828c:	400a      	ands	r2, r1
 800828e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	69db      	ldr	r3, [r3, #28]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d100      	bne.n	800829a <HAL_RCC_OscConfig+0x496>
 8008298:	e0bb      	b.n	8008412 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800829a:	4b60      	ldr	r3, [pc, #384]	; (800841c <HAL_RCC_OscConfig+0x618>)
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	2238      	movs	r2, #56	; 0x38
 80082a0:	4013      	ands	r3, r2
 80082a2:	2b10      	cmp	r3, #16
 80082a4:	d100      	bne.n	80082a8 <HAL_RCC_OscConfig+0x4a4>
 80082a6:	e07b      	b.n	80083a0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	69db      	ldr	r3, [r3, #28]
 80082ac:	2b02      	cmp	r3, #2
 80082ae:	d156      	bne.n	800835e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082b0:	4b5a      	ldr	r3, [pc, #360]	; (800841c <HAL_RCC_OscConfig+0x618>)
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	4b59      	ldr	r3, [pc, #356]	; (800841c <HAL_RCC_OscConfig+0x618>)
 80082b6:	495d      	ldr	r1, [pc, #372]	; (800842c <HAL_RCC_OscConfig+0x628>)
 80082b8:	400a      	ands	r2, r1
 80082ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082bc:	f7fd f8aa 	bl	8005414 <HAL_GetTick>
 80082c0:	0003      	movs	r3, r0
 80082c2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80082c4:	e008      	b.n	80082d8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082c6:	f7fd f8a5 	bl	8005414 <HAL_GetTick>
 80082ca:	0002      	movs	r2, r0
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	1ad3      	subs	r3, r2, r3
 80082d0:	2b02      	cmp	r3, #2
 80082d2:	d901      	bls.n	80082d8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80082d4:	2303      	movs	r3, #3
 80082d6:	e09d      	b.n	8008414 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80082d8:	4b50      	ldr	r3, [pc, #320]	; (800841c <HAL_RCC_OscConfig+0x618>)
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	2380      	movs	r3, #128	; 0x80
 80082de:	049b      	lsls	r3, r3, #18
 80082e0:	4013      	ands	r3, r2
 80082e2:	d1f0      	bne.n	80082c6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80082e4:	4b4d      	ldr	r3, [pc, #308]	; (800841c <HAL_RCC_OscConfig+0x618>)
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	4a51      	ldr	r2, [pc, #324]	; (8008430 <HAL_RCC_OscConfig+0x62c>)
 80082ea:	4013      	ands	r3, r2
 80082ec:	0019      	movs	r1, r3
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6a1a      	ldr	r2, [r3, #32]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f6:	431a      	orrs	r2, r3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082fc:	021b      	lsls	r3, r3, #8
 80082fe:	431a      	orrs	r2, r3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008304:	431a      	orrs	r2, r3
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800830a:	431a      	orrs	r2, r3
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008310:	431a      	orrs	r2, r3
 8008312:	4b42      	ldr	r3, [pc, #264]	; (800841c <HAL_RCC_OscConfig+0x618>)
 8008314:	430a      	orrs	r2, r1
 8008316:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008318:	4b40      	ldr	r3, [pc, #256]	; (800841c <HAL_RCC_OscConfig+0x618>)
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	4b3f      	ldr	r3, [pc, #252]	; (800841c <HAL_RCC_OscConfig+0x618>)
 800831e:	2180      	movs	r1, #128	; 0x80
 8008320:	0449      	lsls	r1, r1, #17
 8008322:	430a      	orrs	r2, r1
 8008324:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8008326:	4b3d      	ldr	r3, [pc, #244]	; (800841c <HAL_RCC_OscConfig+0x618>)
 8008328:	68da      	ldr	r2, [r3, #12]
 800832a:	4b3c      	ldr	r3, [pc, #240]	; (800841c <HAL_RCC_OscConfig+0x618>)
 800832c:	2180      	movs	r1, #128	; 0x80
 800832e:	0549      	lsls	r1, r1, #21
 8008330:	430a      	orrs	r2, r1
 8008332:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008334:	f7fd f86e 	bl	8005414 <HAL_GetTick>
 8008338:	0003      	movs	r3, r0
 800833a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800833c:	e008      	b.n	8008350 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800833e:	f7fd f869 	bl	8005414 <HAL_GetTick>
 8008342:	0002      	movs	r2, r0
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	1ad3      	subs	r3, r2, r3
 8008348:	2b02      	cmp	r3, #2
 800834a:	d901      	bls.n	8008350 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800834c:	2303      	movs	r3, #3
 800834e:	e061      	b.n	8008414 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008350:	4b32      	ldr	r3, [pc, #200]	; (800841c <HAL_RCC_OscConfig+0x618>)
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	2380      	movs	r3, #128	; 0x80
 8008356:	049b      	lsls	r3, r3, #18
 8008358:	4013      	ands	r3, r2
 800835a:	d0f0      	beq.n	800833e <HAL_RCC_OscConfig+0x53a>
 800835c:	e059      	b.n	8008412 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800835e:	4b2f      	ldr	r3, [pc, #188]	; (800841c <HAL_RCC_OscConfig+0x618>)
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	4b2e      	ldr	r3, [pc, #184]	; (800841c <HAL_RCC_OscConfig+0x618>)
 8008364:	4931      	ldr	r1, [pc, #196]	; (800842c <HAL_RCC_OscConfig+0x628>)
 8008366:	400a      	ands	r2, r1
 8008368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800836a:	f7fd f853 	bl	8005414 <HAL_GetTick>
 800836e:	0003      	movs	r3, r0
 8008370:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008372:	e008      	b.n	8008386 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008374:	f7fd f84e 	bl	8005414 <HAL_GetTick>
 8008378:	0002      	movs	r2, r0
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	1ad3      	subs	r3, r2, r3
 800837e:	2b02      	cmp	r3, #2
 8008380:	d901      	bls.n	8008386 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8008382:	2303      	movs	r3, #3
 8008384:	e046      	b.n	8008414 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008386:	4b25      	ldr	r3, [pc, #148]	; (800841c <HAL_RCC_OscConfig+0x618>)
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	2380      	movs	r3, #128	; 0x80
 800838c:	049b      	lsls	r3, r3, #18
 800838e:	4013      	ands	r3, r2
 8008390:	d1f0      	bne.n	8008374 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8008392:	4b22      	ldr	r3, [pc, #136]	; (800841c <HAL_RCC_OscConfig+0x618>)
 8008394:	68da      	ldr	r2, [r3, #12]
 8008396:	4b21      	ldr	r3, [pc, #132]	; (800841c <HAL_RCC_OscConfig+0x618>)
 8008398:	4926      	ldr	r1, [pc, #152]	; (8008434 <HAL_RCC_OscConfig+0x630>)
 800839a:	400a      	ands	r2, r1
 800839c:	60da      	str	r2, [r3, #12]
 800839e:	e038      	b.n	8008412 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	69db      	ldr	r3, [r3, #28]
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d101      	bne.n	80083ac <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80083a8:	2301      	movs	r3, #1
 80083aa:	e033      	b.n	8008414 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80083ac:	4b1b      	ldr	r3, [pc, #108]	; (800841c <HAL_RCC_OscConfig+0x618>)
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	2203      	movs	r2, #3
 80083b6:	401a      	ands	r2, r3
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6a1b      	ldr	r3, [r3, #32]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d126      	bne.n	800840e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	2270      	movs	r2, #112	; 0x70
 80083c4:	401a      	ands	r2, r3
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d11f      	bne.n	800840e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80083ce:	697a      	ldr	r2, [r7, #20]
 80083d0:	23fe      	movs	r3, #254	; 0xfe
 80083d2:	01db      	lsls	r3, r3, #7
 80083d4:	401a      	ands	r2, r3
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083da:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80083dc:	429a      	cmp	r2, r3
 80083de:	d116      	bne.n	800840e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80083e0:	697a      	ldr	r2, [r7, #20]
 80083e2:	23f8      	movs	r3, #248	; 0xf8
 80083e4:	039b      	lsls	r3, r3, #14
 80083e6:	401a      	ands	r2, r3
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d10e      	bne.n	800840e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80083f0:	697a      	ldr	r2, [r7, #20]
 80083f2:	23e0      	movs	r3, #224	; 0xe0
 80083f4:	051b      	lsls	r3, r3, #20
 80083f6:	401a      	ands	r2, r3
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d106      	bne.n	800840e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	0f5b      	lsrs	r3, r3, #29
 8008404:	075a      	lsls	r2, r3, #29
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800840a:	429a      	cmp	r2, r3
 800840c:	d001      	beq.n	8008412 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	e000      	b.n	8008414 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8008412:	2300      	movs	r3, #0
}
 8008414:	0018      	movs	r0, r3
 8008416:	46bd      	mov	sp, r7
 8008418:	b008      	add	sp, #32
 800841a:	bd80      	pop	{r7, pc}
 800841c:	40021000 	.word	0x40021000
 8008420:	40007000 	.word	0x40007000
 8008424:	00001388 	.word	0x00001388
 8008428:	efffffff 	.word	0xefffffff
 800842c:	feffffff 	.word	0xfeffffff
 8008430:	11c1808c 	.word	0x11c1808c
 8008434:	eefefffc 	.word	0xeefefffc

08008438 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b084      	sub	sp, #16
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d101      	bne.n	800844c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	e0e9      	b.n	8008620 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800844c:	4b76      	ldr	r3, [pc, #472]	; (8008628 <HAL_RCC_ClockConfig+0x1f0>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2207      	movs	r2, #7
 8008452:	4013      	ands	r3, r2
 8008454:	683a      	ldr	r2, [r7, #0]
 8008456:	429a      	cmp	r2, r3
 8008458:	d91e      	bls.n	8008498 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800845a:	4b73      	ldr	r3, [pc, #460]	; (8008628 <HAL_RCC_ClockConfig+0x1f0>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	2207      	movs	r2, #7
 8008460:	4393      	bics	r3, r2
 8008462:	0019      	movs	r1, r3
 8008464:	4b70      	ldr	r3, [pc, #448]	; (8008628 <HAL_RCC_ClockConfig+0x1f0>)
 8008466:	683a      	ldr	r2, [r7, #0]
 8008468:	430a      	orrs	r2, r1
 800846a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800846c:	f7fc ffd2 	bl	8005414 <HAL_GetTick>
 8008470:	0003      	movs	r3, r0
 8008472:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008474:	e009      	b.n	800848a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008476:	f7fc ffcd 	bl	8005414 <HAL_GetTick>
 800847a:	0002      	movs	r2, r0
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	1ad3      	subs	r3, r2, r3
 8008480:	4a6a      	ldr	r2, [pc, #424]	; (800862c <HAL_RCC_ClockConfig+0x1f4>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d901      	bls.n	800848a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8008486:	2303      	movs	r3, #3
 8008488:	e0ca      	b.n	8008620 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800848a:	4b67      	ldr	r3, [pc, #412]	; (8008628 <HAL_RCC_ClockConfig+0x1f0>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	2207      	movs	r2, #7
 8008490:	4013      	ands	r3, r2
 8008492:	683a      	ldr	r2, [r7, #0]
 8008494:	429a      	cmp	r2, r3
 8008496:	d1ee      	bne.n	8008476 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	2202      	movs	r2, #2
 800849e:	4013      	ands	r3, r2
 80084a0:	d015      	beq.n	80084ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	2204      	movs	r2, #4
 80084a8:	4013      	ands	r3, r2
 80084aa:	d006      	beq.n	80084ba <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80084ac:	4b60      	ldr	r3, [pc, #384]	; (8008630 <HAL_RCC_ClockConfig+0x1f8>)
 80084ae:	689a      	ldr	r2, [r3, #8]
 80084b0:	4b5f      	ldr	r3, [pc, #380]	; (8008630 <HAL_RCC_ClockConfig+0x1f8>)
 80084b2:	21e0      	movs	r1, #224	; 0xe0
 80084b4:	01c9      	lsls	r1, r1, #7
 80084b6:	430a      	orrs	r2, r1
 80084b8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80084ba:	4b5d      	ldr	r3, [pc, #372]	; (8008630 <HAL_RCC_ClockConfig+0x1f8>)
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	4a5d      	ldr	r2, [pc, #372]	; (8008634 <HAL_RCC_ClockConfig+0x1fc>)
 80084c0:	4013      	ands	r3, r2
 80084c2:	0019      	movs	r1, r3
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	689a      	ldr	r2, [r3, #8]
 80084c8:	4b59      	ldr	r3, [pc, #356]	; (8008630 <HAL_RCC_ClockConfig+0x1f8>)
 80084ca:	430a      	orrs	r2, r1
 80084cc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	2201      	movs	r2, #1
 80084d4:	4013      	ands	r3, r2
 80084d6:	d057      	beq.n	8008588 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d107      	bne.n	80084f0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80084e0:	4b53      	ldr	r3, [pc, #332]	; (8008630 <HAL_RCC_ClockConfig+0x1f8>)
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	2380      	movs	r3, #128	; 0x80
 80084e6:	029b      	lsls	r3, r3, #10
 80084e8:	4013      	ands	r3, r2
 80084ea:	d12b      	bne.n	8008544 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80084ec:	2301      	movs	r3, #1
 80084ee:	e097      	b.n	8008620 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	2b02      	cmp	r3, #2
 80084f6:	d107      	bne.n	8008508 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80084f8:	4b4d      	ldr	r3, [pc, #308]	; (8008630 <HAL_RCC_ClockConfig+0x1f8>)
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	2380      	movs	r3, #128	; 0x80
 80084fe:	049b      	lsls	r3, r3, #18
 8008500:	4013      	ands	r3, r2
 8008502:	d11f      	bne.n	8008544 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008504:	2301      	movs	r3, #1
 8008506:	e08b      	b.n	8008620 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d107      	bne.n	8008520 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008510:	4b47      	ldr	r3, [pc, #284]	; (8008630 <HAL_RCC_ClockConfig+0x1f8>)
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	2380      	movs	r3, #128	; 0x80
 8008516:	00db      	lsls	r3, r3, #3
 8008518:	4013      	ands	r3, r2
 800851a:	d113      	bne.n	8008544 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800851c:	2301      	movs	r3, #1
 800851e:	e07f      	b.n	8008620 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	2b03      	cmp	r3, #3
 8008526:	d106      	bne.n	8008536 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008528:	4b41      	ldr	r3, [pc, #260]	; (8008630 <HAL_RCC_ClockConfig+0x1f8>)
 800852a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800852c:	2202      	movs	r2, #2
 800852e:	4013      	ands	r3, r2
 8008530:	d108      	bne.n	8008544 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008532:	2301      	movs	r3, #1
 8008534:	e074      	b.n	8008620 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008536:	4b3e      	ldr	r3, [pc, #248]	; (8008630 <HAL_RCC_ClockConfig+0x1f8>)
 8008538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800853a:	2202      	movs	r2, #2
 800853c:	4013      	ands	r3, r2
 800853e:	d101      	bne.n	8008544 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008540:	2301      	movs	r3, #1
 8008542:	e06d      	b.n	8008620 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008544:	4b3a      	ldr	r3, [pc, #232]	; (8008630 <HAL_RCC_ClockConfig+0x1f8>)
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	2207      	movs	r2, #7
 800854a:	4393      	bics	r3, r2
 800854c:	0019      	movs	r1, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	685a      	ldr	r2, [r3, #4]
 8008552:	4b37      	ldr	r3, [pc, #220]	; (8008630 <HAL_RCC_ClockConfig+0x1f8>)
 8008554:	430a      	orrs	r2, r1
 8008556:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008558:	f7fc ff5c 	bl	8005414 <HAL_GetTick>
 800855c:	0003      	movs	r3, r0
 800855e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008560:	e009      	b.n	8008576 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008562:	f7fc ff57 	bl	8005414 <HAL_GetTick>
 8008566:	0002      	movs	r2, r0
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	1ad3      	subs	r3, r2, r3
 800856c:	4a2f      	ldr	r2, [pc, #188]	; (800862c <HAL_RCC_ClockConfig+0x1f4>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d901      	bls.n	8008576 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8008572:	2303      	movs	r3, #3
 8008574:	e054      	b.n	8008620 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008576:	4b2e      	ldr	r3, [pc, #184]	; (8008630 <HAL_RCC_ClockConfig+0x1f8>)
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	2238      	movs	r2, #56	; 0x38
 800857c:	401a      	ands	r2, r3
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	00db      	lsls	r3, r3, #3
 8008584:	429a      	cmp	r2, r3
 8008586:	d1ec      	bne.n	8008562 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008588:	4b27      	ldr	r3, [pc, #156]	; (8008628 <HAL_RCC_ClockConfig+0x1f0>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	2207      	movs	r2, #7
 800858e:	4013      	ands	r3, r2
 8008590:	683a      	ldr	r2, [r7, #0]
 8008592:	429a      	cmp	r2, r3
 8008594:	d21e      	bcs.n	80085d4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008596:	4b24      	ldr	r3, [pc, #144]	; (8008628 <HAL_RCC_ClockConfig+0x1f0>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	2207      	movs	r2, #7
 800859c:	4393      	bics	r3, r2
 800859e:	0019      	movs	r1, r3
 80085a0:	4b21      	ldr	r3, [pc, #132]	; (8008628 <HAL_RCC_ClockConfig+0x1f0>)
 80085a2:	683a      	ldr	r2, [r7, #0]
 80085a4:	430a      	orrs	r2, r1
 80085a6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80085a8:	f7fc ff34 	bl	8005414 <HAL_GetTick>
 80085ac:	0003      	movs	r3, r0
 80085ae:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80085b0:	e009      	b.n	80085c6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80085b2:	f7fc ff2f 	bl	8005414 <HAL_GetTick>
 80085b6:	0002      	movs	r2, r0
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	1ad3      	subs	r3, r2, r3
 80085bc:	4a1b      	ldr	r2, [pc, #108]	; (800862c <HAL_RCC_ClockConfig+0x1f4>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d901      	bls.n	80085c6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80085c2:	2303      	movs	r3, #3
 80085c4:	e02c      	b.n	8008620 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80085c6:	4b18      	ldr	r3, [pc, #96]	; (8008628 <HAL_RCC_ClockConfig+0x1f0>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	2207      	movs	r2, #7
 80085cc:	4013      	ands	r3, r2
 80085ce:	683a      	ldr	r2, [r7, #0]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d1ee      	bne.n	80085b2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	2204      	movs	r2, #4
 80085da:	4013      	ands	r3, r2
 80085dc:	d009      	beq.n	80085f2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80085de:	4b14      	ldr	r3, [pc, #80]	; (8008630 <HAL_RCC_ClockConfig+0x1f8>)
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	4a15      	ldr	r2, [pc, #84]	; (8008638 <HAL_RCC_ClockConfig+0x200>)
 80085e4:	4013      	ands	r3, r2
 80085e6:	0019      	movs	r1, r3
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	68da      	ldr	r2, [r3, #12]
 80085ec:	4b10      	ldr	r3, [pc, #64]	; (8008630 <HAL_RCC_ClockConfig+0x1f8>)
 80085ee:	430a      	orrs	r2, r1
 80085f0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80085f2:	f000 f829 	bl	8008648 <HAL_RCC_GetSysClockFreq>
 80085f6:	0001      	movs	r1, r0
 80085f8:	4b0d      	ldr	r3, [pc, #52]	; (8008630 <HAL_RCC_ClockConfig+0x1f8>)
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	0a1b      	lsrs	r3, r3, #8
 80085fe:	220f      	movs	r2, #15
 8008600:	401a      	ands	r2, r3
 8008602:	4b0e      	ldr	r3, [pc, #56]	; (800863c <HAL_RCC_ClockConfig+0x204>)
 8008604:	0092      	lsls	r2, r2, #2
 8008606:	58d3      	ldr	r3, [r2, r3]
 8008608:	221f      	movs	r2, #31
 800860a:	4013      	ands	r3, r2
 800860c:	000a      	movs	r2, r1
 800860e:	40da      	lsrs	r2, r3
 8008610:	4b0b      	ldr	r3, [pc, #44]	; (8008640 <HAL_RCC_ClockConfig+0x208>)
 8008612:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008614:	4b0b      	ldr	r3, [pc, #44]	; (8008644 <HAL_RCC_ClockConfig+0x20c>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	0018      	movs	r0, r3
 800861a:	f7fc fe9f 	bl	800535c <HAL_InitTick>
 800861e:	0003      	movs	r3, r0
}
 8008620:	0018      	movs	r0, r3
 8008622:	46bd      	mov	sp, r7
 8008624:	b004      	add	sp, #16
 8008626:	bd80      	pop	{r7, pc}
 8008628:	40022000 	.word	0x40022000
 800862c:	00001388 	.word	0x00001388
 8008630:	40021000 	.word	0x40021000
 8008634:	fffff0ff 	.word	0xfffff0ff
 8008638:	ffff8fff 	.word	0xffff8fff
 800863c:	0801835c 	.word	0x0801835c
 8008640:	20000034 	.word	0x20000034
 8008644:	20000038 	.word	0x20000038

08008648 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b086      	sub	sp, #24
 800864c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800864e:	4b3c      	ldr	r3, [pc, #240]	; (8008740 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	2238      	movs	r2, #56	; 0x38
 8008654:	4013      	ands	r3, r2
 8008656:	d10f      	bne.n	8008678 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8008658:	4b39      	ldr	r3, [pc, #228]	; (8008740 <HAL_RCC_GetSysClockFreq+0xf8>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	0adb      	lsrs	r3, r3, #11
 800865e:	2207      	movs	r2, #7
 8008660:	4013      	ands	r3, r2
 8008662:	2201      	movs	r2, #1
 8008664:	409a      	lsls	r2, r3
 8008666:	0013      	movs	r3, r2
 8008668:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800866a:	6839      	ldr	r1, [r7, #0]
 800866c:	4835      	ldr	r0, [pc, #212]	; (8008744 <HAL_RCC_GetSysClockFreq+0xfc>)
 800866e:	f7f7 fd49 	bl	8000104 <__udivsi3>
 8008672:	0003      	movs	r3, r0
 8008674:	613b      	str	r3, [r7, #16]
 8008676:	e05d      	b.n	8008734 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008678:	4b31      	ldr	r3, [pc, #196]	; (8008740 <HAL_RCC_GetSysClockFreq+0xf8>)
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	2238      	movs	r2, #56	; 0x38
 800867e:	4013      	ands	r3, r2
 8008680:	2b08      	cmp	r3, #8
 8008682:	d102      	bne.n	800868a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008684:	4b30      	ldr	r3, [pc, #192]	; (8008748 <HAL_RCC_GetSysClockFreq+0x100>)
 8008686:	613b      	str	r3, [r7, #16]
 8008688:	e054      	b.n	8008734 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800868a:	4b2d      	ldr	r3, [pc, #180]	; (8008740 <HAL_RCC_GetSysClockFreq+0xf8>)
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	2238      	movs	r2, #56	; 0x38
 8008690:	4013      	ands	r3, r2
 8008692:	2b10      	cmp	r3, #16
 8008694:	d138      	bne.n	8008708 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8008696:	4b2a      	ldr	r3, [pc, #168]	; (8008740 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	2203      	movs	r2, #3
 800869c:	4013      	ands	r3, r2
 800869e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80086a0:	4b27      	ldr	r3, [pc, #156]	; (8008740 <HAL_RCC_GetSysClockFreq+0xf8>)
 80086a2:	68db      	ldr	r3, [r3, #12]
 80086a4:	091b      	lsrs	r3, r3, #4
 80086a6:	2207      	movs	r2, #7
 80086a8:	4013      	ands	r3, r2
 80086aa:	3301      	adds	r3, #1
 80086ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2b03      	cmp	r3, #3
 80086b2:	d10d      	bne.n	80086d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80086b4:	68b9      	ldr	r1, [r7, #8]
 80086b6:	4824      	ldr	r0, [pc, #144]	; (8008748 <HAL_RCC_GetSysClockFreq+0x100>)
 80086b8:	f7f7 fd24 	bl	8000104 <__udivsi3>
 80086bc:	0003      	movs	r3, r0
 80086be:	0019      	movs	r1, r3
 80086c0:	4b1f      	ldr	r3, [pc, #124]	; (8008740 <HAL_RCC_GetSysClockFreq+0xf8>)
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	0a1b      	lsrs	r3, r3, #8
 80086c6:	227f      	movs	r2, #127	; 0x7f
 80086c8:	4013      	ands	r3, r2
 80086ca:	434b      	muls	r3, r1
 80086cc:	617b      	str	r3, [r7, #20]
        break;
 80086ce:	e00d      	b.n	80086ec <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80086d0:	68b9      	ldr	r1, [r7, #8]
 80086d2:	481c      	ldr	r0, [pc, #112]	; (8008744 <HAL_RCC_GetSysClockFreq+0xfc>)
 80086d4:	f7f7 fd16 	bl	8000104 <__udivsi3>
 80086d8:	0003      	movs	r3, r0
 80086da:	0019      	movs	r1, r3
 80086dc:	4b18      	ldr	r3, [pc, #96]	; (8008740 <HAL_RCC_GetSysClockFreq+0xf8>)
 80086de:	68db      	ldr	r3, [r3, #12]
 80086e0:	0a1b      	lsrs	r3, r3, #8
 80086e2:	227f      	movs	r2, #127	; 0x7f
 80086e4:	4013      	ands	r3, r2
 80086e6:	434b      	muls	r3, r1
 80086e8:	617b      	str	r3, [r7, #20]
        break;
 80086ea:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80086ec:	4b14      	ldr	r3, [pc, #80]	; (8008740 <HAL_RCC_GetSysClockFreq+0xf8>)
 80086ee:	68db      	ldr	r3, [r3, #12]
 80086f0:	0f5b      	lsrs	r3, r3, #29
 80086f2:	2207      	movs	r2, #7
 80086f4:	4013      	ands	r3, r2
 80086f6:	3301      	adds	r3, #1
 80086f8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80086fa:	6879      	ldr	r1, [r7, #4]
 80086fc:	6978      	ldr	r0, [r7, #20]
 80086fe:	f7f7 fd01 	bl	8000104 <__udivsi3>
 8008702:	0003      	movs	r3, r0
 8008704:	613b      	str	r3, [r7, #16]
 8008706:	e015      	b.n	8008734 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008708:	4b0d      	ldr	r3, [pc, #52]	; (8008740 <HAL_RCC_GetSysClockFreq+0xf8>)
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	2238      	movs	r2, #56	; 0x38
 800870e:	4013      	ands	r3, r2
 8008710:	2b20      	cmp	r3, #32
 8008712:	d103      	bne.n	800871c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8008714:	2380      	movs	r3, #128	; 0x80
 8008716:	021b      	lsls	r3, r3, #8
 8008718:	613b      	str	r3, [r7, #16]
 800871a:	e00b      	b.n	8008734 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800871c:	4b08      	ldr	r3, [pc, #32]	; (8008740 <HAL_RCC_GetSysClockFreq+0xf8>)
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	2238      	movs	r2, #56	; 0x38
 8008722:	4013      	ands	r3, r2
 8008724:	2b18      	cmp	r3, #24
 8008726:	d103      	bne.n	8008730 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8008728:	23fa      	movs	r3, #250	; 0xfa
 800872a:	01db      	lsls	r3, r3, #7
 800872c:	613b      	str	r3, [r7, #16]
 800872e:	e001      	b.n	8008734 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8008730:	2300      	movs	r3, #0
 8008732:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008734:	693b      	ldr	r3, [r7, #16]
}
 8008736:	0018      	movs	r0, r3
 8008738:	46bd      	mov	sp, r7
 800873a:	b006      	add	sp, #24
 800873c:	bd80      	pop	{r7, pc}
 800873e:	46c0      	nop			; (mov r8, r8)
 8008740:	40021000 	.word	0x40021000
 8008744:	00f42400 	.word	0x00f42400
 8008748:	007a1200 	.word	0x007a1200

0800874c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008750:	4b02      	ldr	r3, [pc, #8]	; (800875c <HAL_RCC_GetHCLKFreq+0x10>)
 8008752:	681b      	ldr	r3, [r3, #0]
}
 8008754:	0018      	movs	r0, r3
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	46c0      	nop			; (mov r8, r8)
 800875c:	20000034 	.word	0x20000034

08008760 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008760:	b5b0      	push	{r4, r5, r7, lr}
 8008762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8008764:	f7ff fff2 	bl	800874c <HAL_RCC_GetHCLKFreq>
 8008768:	0004      	movs	r4, r0
 800876a:	f7ff fb3f 	bl	8007dec <LL_RCC_GetAPB1Prescaler>
 800876e:	0003      	movs	r3, r0
 8008770:	0b1a      	lsrs	r2, r3, #12
 8008772:	4b05      	ldr	r3, [pc, #20]	; (8008788 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008774:	0092      	lsls	r2, r2, #2
 8008776:	58d3      	ldr	r3, [r2, r3]
 8008778:	221f      	movs	r2, #31
 800877a:	4013      	ands	r3, r2
 800877c:	40dc      	lsrs	r4, r3
 800877e:	0023      	movs	r3, r4
}
 8008780:	0018      	movs	r0, r3
 8008782:	46bd      	mov	sp, r7
 8008784:	bdb0      	pop	{r4, r5, r7, pc}
 8008786:	46c0      	nop			; (mov r8, r8)
 8008788:	0801839c 	.word	0x0801839c

0800878c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b086      	sub	sp, #24
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8008794:	2313      	movs	r3, #19
 8008796:	18fb      	adds	r3, r7, r3
 8008798:	2200      	movs	r2, #0
 800879a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800879c:	2312      	movs	r3, #18
 800879e:	18fb      	adds	r3, r7, r3
 80087a0:	2200      	movs	r2, #0
 80087a2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	2380      	movs	r3, #128	; 0x80
 80087aa:	029b      	lsls	r3, r3, #10
 80087ac:	4013      	ands	r3, r2
 80087ae:	d100      	bne.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80087b0:	e0a3      	b.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80087b2:	2011      	movs	r0, #17
 80087b4:	183b      	adds	r3, r7, r0
 80087b6:	2200      	movs	r2, #0
 80087b8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80087ba:	4bc3      	ldr	r3, [pc, #780]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80087bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087be:	2380      	movs	r3, #128	; 0x80
 80087c0:	055b      	lsls	r3, r3, #21
 80087c2:	4013      	ands	r3, r2
 80087c4:	d110      	bne.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80087c6:	4bc0      	ldr	r3, [pc, #768]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80087c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087ca:	4bbf      	ldr	r3, [pc, #764]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80087cc:	2180      	movs	r1, #128	; 0x80
 80087ce:	0549      	lsls	r1, r1, #21
 80087d0:	430a      	orrs	r2, r1
 80087d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80087d4:	4bbc      	ldr	r3, [pc, #752]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80087d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087d8:	2380      	movs	r3, #128	; 0x80
 80087da:	055b      	lsls	r3, r3, #21
 80087dc:	4013      	ands	r3, r2
 80087de:	60bb      	str	r3, [r7, #8]
 80087e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80087e2:	183b      	adds	r3, r7, r0
 80087e4:	2201      	movs	r2, #1
 80087e6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80087e8:	4bb8      	ldr	r3, [pc, #736]	; (8008acc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	4bb7      	ldr	r3, [pc, #732]	; (8008acc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80087ee:	2180      	movs	r1, #128	; 0x80
 80087f0:	0049      	lsls	r1, r1, #1
 80087f2:	430a      	orrs	r2, r1
 80087f4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80087f6:	f7fc fe0d 	bl	8005414 <HAL_GetTick>
 80087fa:	0003      	movs	r3, r0
 80087fc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80087fe:	e00b      	b.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008800:	f7fc fe08 	bl	8005414 <HAL_GetTick>
 8008804:	0002      	movs	r2, r0
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	1ad3      	subs	r3, r2, r3
 800880a:	2b02      	cmp	r3, #2
 800880c:	d904      	bls.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800880e:	2313      	movs	r3, #19
 8008810:	18fb      	adds	r3, r7, r3
 8008812:	2203      	movs	r2, #3
 8008814:	701a      	strb	r2, [r3, #0]
        break;
 8008816:	e005      	b.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008818:	4bac      	ldr	r3, [pc, #688]	; (8008acc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	2380      	movs	r3, #128	; 0x80
 800881e:	005b      	lsls	r3, r3, #1
 8008820:	4013      	ands	r3, r2
 8008822:	d0ed      	beq.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8008824:	2313      	movs	r3, #19
 8008826:	18fb      	adds	r3, r7, r3
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d154      	bne.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800882e:	4ba6      	ldr	r3, [pc, #664]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008830:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008832:	23c0      	movs	r3, #192	; 0xc0
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	4013      	ands	r3, r2
 8008838:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d019      	beq.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008844:	697a      	ldr	r2, [r7, #20]
 8008846:	429a      	cmp	r2, r3
 8008848:	d014      	beq.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800884a:	4b9f      	ldr	r3, [pc, #636]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800884c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800884e:	4aa0      	ldr	r2, [pc, #640]	; (8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8008850:	4013      	ands	r3, r2
 8008852:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008854:	4b9c      	ldr	r3, [pc, #624]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008856:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008858:	4b9b      	ldr	r3, [pc, #620]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800885a:	2180      	movs	r1, #128	; 0x80
 800885c:	0249      	lsls	r1, r1, #9
 800885e:	430a      	orrs	r2, r1
 8008860:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008862:	4b99      	ldr	r3, [pc, #612]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008864:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008866:	4b98      	ldr	r3, [pc, #608]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008868:	499a      	ldr	r1, [pc, #616]	; (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800886a:	400a      	ands	r2, r1
 800886c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800886e:	4b96      	ldr	r3, [pc, #600]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008870:	697a      	ldr	r2, [r7, #20]
 8008872:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	2201      	movs	r2, #1
 8008878:	4013      	ands	r3, r2
 800887a:	d016      	beq.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800887c:	f7fc fdca 	bl	8005414 <HAL_GetTick>
 8008880:	0003      	movs	r3, r0
 8008882:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008884:	e00c      	b.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008886:	f7fc fdc5 	bl	8005414 <HAL_GetTick>
 800888a:	0002      	movs	r2, r0
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	1ad3      	subs	r3, r2, r3
 8008890:	4a91      	ldr	r2, [pc, #580]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d904      	bls.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8008896:	2313      	movs	r3, #19
 8008898:	18fb      	adds	r3, r7, r3
 800889a:	2203      	movs	r2, #3
 800889c:	701a      	strb	r2, [r3, #0]
            break;
 800889e:	e004      	b.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80088a0:	4b89      	ldr	r3, [pc, #548]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80088a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088a4:	2202      	movs	r2, #2
 80088a6:	4013      	ands	r3, r2
 80088a8:	d0ed      	beq.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80088aa:	2313      	movs	r3, #19
 80088ac:	18fb      	adds	r3, r7, r3
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d10a      	bne.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80088b4:	4b84      	ldr	r3, [pc, #528]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80088b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088b8:	4a85      	ldr	r2, [pc, #532]	; (8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80088ba:	4013      	ands	r3, r2
 80088bc:	0019      	movs	r1, r3
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088c2:	4b81      	ldr	r3, [pc, #516]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80088c4:	430a      	orrs	r2, r1
 80088c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80088c8:	e00c      	b.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80088ca:	2312      	movs	r3, #18
 80088cc:	18fb      	adds	r3, r7, r3
 80088ce:	2213      	movs	r2, #19
 80088d0:	18ba      	adds	r2, r7, r2
 80088d2:	7812      	ldrb	r2, [r2, #0]
 80088d4:	701a      	strb	r2, [r3, #0]
 80088d6:	e005      	b.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088d8:	2312      	movs	r3, #18
 80088da:	18fb      	adds	r3, r7, r3
 80088dc:	2213      	movs	r2, #19
 80088de:	18ba      	adds	r2, r7, r2
 80088e0:	7812      	ldrb	r2, [r2, #0]
 80088e2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80088e4:	2311      	movs	r3, #17
 80088e6:	18fb      	adds	r3, r7, r3
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d105      	bne.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80088ee:	4b76      	ldr	r3, [pc, #472]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80088f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088f2:	4b75      	ldr	r3, [pc, #468]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80088f4:	4979      	ldr	r1, [pc, #484]	; (8008adc <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80088f6:	400a      	ands	r2, r1
 80088f8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	2201      	movs	r2, #1
 8008900:	4013      	ands	r3, r2
 8008902:	d009      	beq.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008904:	4b70      	ldr	r3, [pc, #448]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008908:	2203      	movs	r2, #3
 800890a:	4393      	bics	r3, r2
 800890c:	0019      	movs	r1, r3
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	685a      	ldr	r2, [r3, #4]
 8008912:	4b6d      	ldr	r3, [pc, #436]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008914:	430a      	orrs	r2, r1
 8008916:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	2202      	movs	r2, #2
 800891e:	4013      	ands	r3, r2
 8008920:	d009      	beq.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008922:	4b69      	ldr	r3, [pc, #420]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008926:	220c      	movs	r2, #12
 8008928:	4393      	bics	r3, r2
 800892a:	0019      	movs	r1, r3
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	689a      	ldr	r2, [r3, #8]
 8008930:	4b65      	ldr	r3, [pc, #404]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008932:	430a      	orrs	r2, r1
 8008934:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2210      	movs	r2, #16
 800893c:	4013      	ands	r3, r2
 800893e:	d009      	beq.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008940:	4b61      	ldr	r3, [pc, #388]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008944:	4a66      	ldr	r2, [pc, #408]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8008946:	4013      	ands	r3, r2
 8008948:	0019      	movs	r1, r3
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	68da      	ldr	r2, [r3, #12]
 800894e:	4b5e      	ldr	r3, [pc, #376]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008950:	430a      	orrs	r2, r1
 8008952:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	2380      	movs	r3, #128	; 0x80
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	4013      	ands	r3, r2
 800895e:	d009      	beq.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008960:	4b59      	ldr	r3, [pc, #356]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008964:	4a5f      	ldr	r2, [pc, #380]	; (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008966:	4013      	ands	r3, r2
 8008968:	0019      	movs	r1, r3
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	699a      	ldr	r2, [r3, #24]
 800896e:	4b56      	ldr	r3, [pc, #344]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008970:	430a      	orrs	r2, r1
 8008972:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	2380      	movs	r3, #128	; 0x80
 800897a:	00db      	lsls	r3, r3, #3
 800897c:	4013      	ands	r3, r2
 800897e:	d009      	beq.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008980:	4b51      	ldr	r3, [pc, #324]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008984:	4a58      	ldr	r2, [pc, #352]	; (8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008986:	4013      	ands	r3, r2
 8008988:	0019      	movs	r1, r3
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	69da      	ldr	r2, [r3, #28]
 800898e:	4b4e      	ldr	r3, [pc, #312]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008990:	430a      	orrs	r2, r1
 8008992:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	2220      	movs	r2, #32
 800899a:	4013      	ands	r3, r2
 800899c:	d009      	beq.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800899e:	4b4a      	ldr	r3, [pc, #296]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089a2:	4a52      	ldr	r2, [pc, #328]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80089a4:	4013      	ands	r3, r2
 80089a6:	0019      	movs	r1, r3
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	691a      	ldr	r2, [r3, #16]
 80089ac:	4b46      	ldr	r3, [pc, #280]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089ae:	430a      	orrs	r2, r1
 80089b0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	2380      	movs	r3, #128	; 0x80
 80089b8:	01db      	lsls	r3, r3, #7
 80089ba:	4013      	ands	r3, r2
 80089bc:	d015      	beq.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80089be:	4b42      	ldr	r3, [pc, #264]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	0899      	lsrs	r1, r3, #2
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6a1a      	ldr	r2, [r3, #32]
 80089ca:	4b3f      	ldr	r3, [pc, #252]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089cc:	430a      	orrs	r2, r1
 80089ce:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6a1a      	ldr	r2, [r3, #32]
 80089d4:	2380      	movs	r3, #128	; 0x80
 80089d6:	05db      	lsls	r3, r3, #23
 80089d8:	429a      	cmp	r2, r3
 80089da:	d106      	bne.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80089dc:	4b3a      	ldr	r3, [pc, #232]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089de:	68da      	ldr	r2, [r3, #12]
 80089e0:	4b39      	ldr	r3, [pc, #228]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089e2:	2180      	movs	r1, #128	; 0x80
 80089e4:	0249      	lsls	r1, r1, #9
 80089e6:	430a      	orrs	r2, r1
 80089e8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	2380      	movs	r3, #128	; 0x80
 80089f0:	031b      	lsls	r3, r3, #12
 80089f2:	4013      	ands	r3, r2
 80089f4:	d009      	beq.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80089f6:	4b34      	ldr	r3, [pc, #208]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089fa:	2240      	movs	r2, #64	; 0x40
 80089fc:	4393      	bics	r3, r2
 80089fe:	0019      	movs	r1, r3
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a04:	4b30      	ldr	r3, [pc, #192]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a06:	430a      	orrs	r2, r1
 8008a08:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	2380      	movs	r3, #128	; 0x80
 8008a10:	039b      	lsls	r3, r3, #14
 8008a12:	4013      	ands	r3, r2
 8008a14:	d016      	beq.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8008a16:	4b2c      	ldr	r3, [pc, #176]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a1a:	4a35      	ldr	r2, [pc, #212]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8008a1c:	4013      	ands	r3, r2
 8008a1e:	0019      	movs	r1, r3
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a24:	4b28      	ldr	r3, [pc, #160]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a26:	430a      	orrs	r2, r1
 8008a28:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a2e:	2380      	movs	r3, #128	; 0x80
 8008a30:	03db      	lsls	r3, r3, #15
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d106      	bne.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008a36:	4b24      	ldr	r3, [pc, #144]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a38:	68da      	ldr	r2, [r3, #12]
 8008a3a:	4b23      	ldr	r3, [pc, #140]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a3c:	2180      	movs	r1, #128	; 0x80
 8008a3e:	0449      	lsls	r1, r1, #17
 8008a40:	430a      	orrs	r2, r1
 8008a42:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	2380      	movs	r3, #128	; 0x80
 8008a4a:	03db      	lsls	r3, r3, #15
 8008a4c:	4013      	ands	r3, r2
 8008a4e:	d016      	beq.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8008a50:	4b1d      	ldr	r3, [pc, #116]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a54:	4a27      	ldr	r2, [pc, #156]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8008a56:	4013      	ands	r3, r2
 8008a58:	0019      	movs	r1, r3
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a5e:	4b1a      	ldr	r3, [pc, #104]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a60:	430a      	orrs	r2, r1
 8008a62:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a68:	2380      	movs	r3, #128	; 0x80
 8008a6a:	045b      	lsls	r3, r3, #17
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d106      	bne.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008a70:	4b15      	ldr	r3, [pc, #84]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a72:	68da      	ldr	r2, [r3, #12]
 8008a74:	4b14      	ldr	r3, [pc, #80]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a76:	2180      	movs	r1, #128	; 0x80
 8008a78:	0449      	lsls	r1, r1, #17
 8008a7a:	430a      	orrs	r2, r1
 8008a7c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	2380      	movs	r3, #128	; 0x80
 8008a84:	011b      	lsls	r3, r3, #4
 8008a86:	4013      	ands	r3, r2
 8008a88:	d016      	beq.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8008a8a:	4b0f      	ldr	r3, [pc, #60]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a8e:	4a1a      	ldr	r2, [pc, #104]	; (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8008a90:	4013      	ands	r3, r2
 8008a92:	0019      	movs	r1, r3
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	695a      	ldr	r2, [r3, #20]
 8008a98:	4b0b      	ldr	r3, [pc, #44]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a9a:	430a      	orrs	r2, r1
 8008a9c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	695a      	ldr	r2, [r3, #20]
 8008aa2:	2380      	movs	r3, #128	; 0x80
 8008aa4:	01db      	lsls	r3, r3, #7
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d106      	bne.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008aaa:	4b07      	ldr	r3, [pc, #28]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008aac:	68da      	ldr	r2, [r3, #12]
 8008aae:	4b06      	ldr	r3, [pc, #24]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008ab0:	2180      	movs	r1, #128	; 0x80
 8008ab2:	0249      	lsls	r1, r1, #9
 8008ab4:	430a      	orrs	r2, r1
 8008ab6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8008ab8:	2312      	movs	r3, #18
 8008aba:	18fb      	adds	r3, r7, r3
 8008abc:	781b      	ldrb	r3, [r3, #0]
}
 8008abe:	0018      	movs	r0, r3
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	b006      	add	sp, #24
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	46c0      	nop			; (mov r8, r8)
 8008ac8:	40021000 	.word	0x40021000
 8008acc:	40007000 	.word	0x40007000
 8008ad0:	fffffcff 	.word	0xfffffcff
 8008ad4:	fffeffff 	.word	0xfffeffff
 8008ad8:	00001388 	.word	0x00001388
 8008adc:	efffffff 	.word	0xefffffff
 8008ae0:	fffff3ff 	.word	0xfffff3ff
 8008ae4:	fff3ffff 	.word	0xfff3ffff
 8008ae8:	ffcfffff 	.word	0xffcfffff
 8008aec:	ffffcfff 	.word	0xffffcfff
 8008af0:	ffbfffff 	.word	0xffbfffff
 8008af4:	feffffff 	.word	0xfeffffff
 8008af8:	ffff3fff 	.word	0xffff3fff

08008afc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b086      	sub	sp, #24
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8008b04:	2300      	movs	r3, #0
 8008b06:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8008b08:	687a      	ldr	r2, [r7, #4]
 8008b0a:	2380      	movs	r3, #128	; 0x80
 8008b0c:	029b      	lsls	r3, r3, #10
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d136      	bne.n	8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8008b12:	4bcd      	ldr	r3, [pc, #820]	; (8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008b14:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008b16:	23c0      	movs	r3, #192	; 0xc0
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	4013      	ands	r3, r2
 8008b1c:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8008b1e:	4bca      	ldr	r3, [pc, #808]	; (8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b22:	2202      	movs	r2, #2
 8008b24:	4013      	ands	r3, r2
 8008b26:	2b02      	cmp	r3, #2
 8008b28:	d108      	bne.n	8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8008b2a:	68fa      	ldr	r2, [r7, #12]
 8008b2c:	2380      	movs	r3, #128	; 0x80
 8008b2e:	005b      	lsls	r3, r3, #1
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d103      	bne.n	8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8008b34:	2380      	movs	r3, #128	; 0x80
 8008b36:	021b      	lsls	r3, r3, #8
 8008b38:	617b      	str	r3, [r7, #20]
 8008b3a:	e31c      	b.n	8009176 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8008b3c:	4bc2      	ldr	r3, [pc, #776]	; (8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008b3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b40:	2202      	movs	r2, #2
 8008b42:	4013      	ands	r3, r2
 8008b44:	2b02      	cmp	r3, #2
 8008b46:	d108      	bne.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8008b48:	68fa      	ldr	r2, [r7, #12]
 8008b4a:	2380      	movs	r3, #128	; 0x80
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d103      	bne.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 8008b52:	23fa      	movs	r3, #250	; 0xfa
 8008b54:	01db      	lsls	r3, r3, #7
 8008b56:	617b      	str	r3, [r7, #20]
 8008b58:	e30d      	b.n	8009176 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8008b5a:	4bbb      	ldr	r3, [pc, #748]	; (8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	2380      	movs	r3, #128	; 0x80
 8008b60:	029b      	lsls	r3, r3, #10
 8008b62:	401a      	ands	r2, r3
 8008b64:	2380      	movs	r3, #128	; 0x80
 8008b66:	029b      	lsls	r3, r3, #10
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	d000      	beq.n	8008b6e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 8008b6c:	e303      	b.n	8009176 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
 8008b6e:	68fa      	ldr	r2, [r7, #12]
 8008b70:	23c0      	movs	r3, #192	; 0xc0
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d000      	beq.n	8008b7a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 8008b78:	e2fd      	b.n	8009176 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    {
      frequency = HSE_VALUE / 32U;
 8008b7a:	4bb4      	ldr	r3, [pc, #720]	; (8008e4c <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8008b7c:	617b      	str	r3, [r7, #20]
 8008b7e:	e2fa      	b.n	8009176 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 8008b80:	4bb1      	ldr	r3, [pc, #708]	; (8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008b82:	68db      	ldr	r3, [r3, #12]
 8008b84:	2203      	movs	r2, #3
 8008b86:	4013      	ands	r3, r2
 8008b88:	2b02      	cmp	r3, #2
 8008b8a:	d102      	bne.n	8008b92 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 8008b8c:	4bb0      	ldr	r3, [pc, #704]	; (8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008b8e:	613b      	str	r3, [r7, #16]
 8008b90:	e00a      	b.n	8008ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 8008b92:	4bad      	ldr	r3, [pc, #692]	; (8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	2203      	movs	r2, #3
 8008b98:	4013      	ands	r3, r2
 8008b9a:	2b03      	cmp	r3, #3
 8008b9c:	d102      	bne.n	8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 8008b9e:	4bad      	ldr	r3, [pc, #692]	; (8008e54 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8008ba0:	613b      	str	r3, [r7, #16]
 8008ba2:	e001      	b.n	8008ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008ba8:	4ba7      	ldr	r3, [pc, #668]	; (8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008baa:	68db      	ldr	r3, [r3, #12]
 8008bac:	091b      	lsrs	r3, r3, #4
 8008bae:	2207      	movs	r2, #7
 8008bb0:	4013      	ands	r3, r2
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	0019      	movs	r1, r3
 8008bb6:	6938      	ldr	r0, [r7, #16]
 8008bb8:	f7f7 faa4 	bl	8000104 <__udivsi3>
 8008bbc:	0003      	movs	r3, r0
 8008bbe:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 8008bc0:	687a      	ldr	r2, [r7, #4]
 8008bc2:	2380      	movs	r3, #128	; 0x80
 8008bc4:	03db      	lsls	r3, r3, #15
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d100      	bne.n	8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 8008bca:	e28e      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 8008bcc:	687a      	ldr	r2, [r7, #4]
 8008bce:	2380      	movs	r3, #128	; 0x80
 8008bd0:	03db      	lsls	r3, r3, #15
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d900      	bls.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8008bd6:	e2b7      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008bd8:	687a      	ldr	r2, [r7, #4]
 8008bda:	2380      	movs	r3, #128	; 0x80
 8008bdc:	039b      	lsls	r3, r3, #14
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d100      	bne.n	8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8008be2:	e253      	b.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 8008be4:	687a      	ldr	r2, [r7, #4]
 8008be6:	2380      	movs	r3, #128	; 0x80
 8008be8:	039b      	lsls	r3, r3, #14
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d900      	bls.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8008bee:	e2ab      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	2380      	movs	r3, #128	; 0x80
 8008bf4:	031b      	lsls	r3, r3, #12
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d100      	bne.n	8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8008bfa:	e0b2      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	2380      	movs	r3, #128	; 0x80
 8008c00:	031b      	lsls	r3, r3, #12
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d900      	bls.n	8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8008c06:	e29f      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	2380      	movs	r3, #128	; 0x80
 8008c0c:	01db      	lsls	r3, r3, #7
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d100      	bne.n	8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 8008c12:	e103      	b.n	8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	2380      	movs	r3, #128	; 0x80
 8008c18:	01db      	lsls	r3, r3, #7
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d900      	bls.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008c1e:	e293      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	2380      	movs	r3, #128	; 0x80
 8008c24:	011b      	lsls	r3, r3, #4
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d100      	bne.n	8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8008c2a:	e165      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	2380      	movs	r3, #128	; 0x80
 8008c30:	011b      	lsls	r3, r3, #4
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d900      	bls.n	8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8008c36:	e287      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	2380      	movs	r3, #128	; 0x80
 8008c3c:	00db      	lsls	r3, r3, #3
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d100      	bne.n	8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8008c42:	e1e3      	b.n	800900c <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	2380      	movs	r3, #128	; 0x80
 8008c48:	00db      	lsls	r3, r3, #3
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d900      	bls.n	8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8008c4e:	e27b      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008c50:	687a      	ldr	r2, [r7, #4]
 8008c52:	2380      	movs	r3, #128	; 0x80
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d100      	bne.n	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8008c5a:	e197      	b.n	8008f8c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	2380      	movs	r3, #128	; 0x80
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d900      	bls.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8008c66:	e26f      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2b20      	cmp	r3, #32
 8008c6c:	d100      	bne.n	8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 8008c6e:	e118      	b.n	8008ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2b20      	cmp	r3, #32
 8008c74:	d900      	bls.n	8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
 8008c76:	e267      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2b10      	cmp	r3, #16
 8008c7c:	d100      	bne.n	8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8008c7e:	e093      	b.n	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2b10      	cmp	r3, #16
 8008c84:	d900      	bls.n	8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8008c86:	e25f      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d003      	beq.n	8008c96 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2b02      	cmp	r3, #2
 8008c92:	d033      	beq.n	8008cfc <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 8008c94:	e258      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008c96:	4b6c      	ldr	r3, [pc, #432]	; (8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c9a:	2203      	movs	r2, #3
 8008c9c:	4013      	ands	r3, r2
 8008c9e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d104      	bne.n	8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008ca6:	f7ff fd5b 	bl	8008760 <HAL_RCC_GetPCLK1Freq>
 8008caa:	0003      	movs	r3, r0
 8008cac:	617b      	str	r3, [r7, #20]
        break;
 8008cae:	e24d      	b.n	800914c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d104      	bne.n	8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
          frequency = HAL_RCC_GetSysClockFreq();
 8008cb6:	f7ff fcc7 	bl	8008648 <HAL_RCC_GetSysClockFreq>
 8008cba:	0003      	movs	r3, r0
 8008cbc:	617b      	str	r3, [r7, #20]
        break;
 8008cbe:	e245      	b.n	800914c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8008cc0:	4b61      	ldr	r3, [pc, #388]	; (8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	2380      	movs	r3, #128	; 0x80
 8008cc6:	00db      	lsls	r3, r3, #3
 8008cc8:	401a      	ands	r2, r3
 8008cca:	2380      	movs	r3, #128	; 0x80
 8008ccc:	00db      	lsls	r3, r3, #3
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d105      	bne.n	8008cde <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2b02      	cmp	r3, #2
 8008cd6:	d102      	bne.n	8008cde <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
          frequency = HSI_VALUE;
 8008cd8:	4b5d      	ldr	r3, [pc, #372]	; (8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008cda:	617b      	str	r3, [r7, #20]
        break;
 8008cdc:	e236      	b.n	800914c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008cde:	4b5a      	ldr	r3, [pc, #360]	; (8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ce2:	2202      	movs	r2, #2
 8008ce4:	4013      	ands	r3, r2
 8008ce6:	2b02      	cmp	r3, #2
 8008ce8:	d000      	beq.n	8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
 8008cea:	e22f      	b.n	800914c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2b03      	cmp	r3, #3
 8008cf0:	d000      	beq.n	8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>
 8008cf2:	e22b      	b.n	800914c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          frequency = LSE_VALUE;
 8008cf4:	2380      	movs	r3, #128	; 0x80
 8008cf6:	021b      	lsls	r3, r3, #8
 8008cf8:	617b      	str	r3, [r7, #20]
        break;
 8008cfa:	e227      	b.n	800914c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008cfc:	4b52      	ldr	r3, [pc, #328]	; (8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d00:	220c      	movs	r2, #12
 8008d02:	4013      	ands	r3, r2
 8008d04:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d104      	bne.n	8008d16 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008d0c:	f7ff fd28 	bl	8008760 <HAL_RCC_GetPCLK1Freq>
 8008d10:	0003      	movs	r3, r0
 8008d12:	617b      	str	r3, [r7, #20]
        break;
 8008d14:	e21c      	b.n	8009150 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2b04      	cmp	r3, #4
 8008d1a:	d104      	bne.n	8008d26 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          frequency = HAL_RCC_GetSysClockFreq();
 8008d1c:	f7ff fc94 	bl	8008648 <HAL_RCC_GetSysClockFreq>
 8008d20:	0003      	movs	r3, r0
 8008d22:	617b      	str	r3, [r7, #20]
        break;
 8008d24:	e214      	b.n	8009150 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8008d26:	4b48      	ldr	r3, [pc, #288]	; (8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008d28:	681a      	ldr	r2, [r3, #0]
 8008d2a:	2380      	movs	r3, #128	; 0x80
 8008d2c:	00db      	lsls	r3, r3, #3
 8008d2e:	401a      	ands	r2, r3
 8008d30:	2380      	movs	r3, #128	; 0x80
 8008d32:	00db      	lsls	r3, r3, #3
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d105      	bne.n	8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2b08      	cmp	r3, #8
 8008d3c:	d102      	bne.n	8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
          frequency = HSI_VALUE;
 8008d3e:	4b44      	ldr	r3, [pc, #272]	; (8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008d40:	617b      	str	r3, [r7, #20]
        break;
 8008d42:	e205      	b.n	8009150 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008d44:	4b40      	ldr	r3, [pc, #256]	; (8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d48:	2202      	movs	r2, #2
 8008d4a:	4013      	ands	r3, r2
 8008d4c:	2b02      	cmp	r3, #2
 8008d4e:	d000      	beq.n	8008d52 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8008d50:	e1fe      	b.n	8009150 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2b0c      	cmp	r3, #12
 8008d56:	d000      	beq.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8008d58:	e1fa      	b.n	8009150 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
          frequency = LSE_VALUE;
 8008d5a:	2380      	movs	r3, #128	; 0x80
 8008d5c:	021b      	lsls	r3, r3, #8
 8008d5e:	617b      	str	r3, [r7, #20]
        break;
 8008d60:	e1f6      	b.n	8009150 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8008d62:	4b39      	ldr	r3, [pc, #228]	; (8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d66:	2240      	movs	r2, #64	; 0x40
 8008d68:	4013      	ands	r3, r2
 8008d6a:	60fb      	str	r3, [r7, #12]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_CECCLKSOURCE_HSI_DIV488))
 8008d6c:	4b36      	ldr	r3, [pc, #216]	; (8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	2380      	movs	r3, #128	; 0x80
 8008d72:	00db      	lsls	r3, r3, #3
 8008d74:	401a      	ands	r2, r3
 8008d76:	2380      	movs	r3, #128	; 0x80
 8008d78:	00db      	lsls	r3, r3, #3
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d105      	bne.n	8008d8a <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d102      	bne.n	8008d8a <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
          frequency = (HSI_VALUE / 488U);
 8008d84:	4b34      	ldr	r3, [pc, #208]	; (8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 8008d86:	617b      	str	r3, [r7, #20]
        break;
 8008d88:	e1e4      	b.n	8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8008d8a:	4b2f      	ldr	r3, [pc, #188]	; (8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d8e:	2202      	movs	r2, #2
 8008d90:	4013      	ands	r3, r2
 8008d92:	2b02      	cmp	r3, #2
 8008d94:	d000      	beq.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 8008d96:	e1dd      	b.n	8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2b40      	cmp	r3, #64	; 0x40
 8008d9c:	d000      	beq.n	8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 8008d9e:	e1d9      	b.n	8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
          frequency = LSE_VALUE;
 8008da0:	2380      	movs	r3, #128	; 0x80
 8008da2:	021b      	lsls	r3, r3, #8
 8008da4:	617b      	str	r3, [r7, #20]
        break;
 8008da6:	e1d5      	b.n	8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008da8:	4b27      	ldr	r3, [pc, #156]	; (8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008daa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008dac:	23c0      	movs	r3, #192	; 0xc0
 8008dae:	011b      	lsls	r3, r3, #4
 8008db0:	4013      	ands	r3, r2
 8008db2:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d104      	bne.n	8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008dba:	f7ff fcd1 	bl	8008760 <HAL_RCC_GetPCLK1Freq>
 8008dbe:	0003      	movs	r3, r0
 8008dc0:	617b      	str	r3, [r7, #20]
        break;
 8008dc2:	e1c9      	b.n	8009158 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8008dc4:	68fa      	ldr	r2, [r7, #12]
 8008dc6:	2380      	movs	r3, #128	; 0x80
 8008dc8:	00db      	lsls	r3, r3, #3
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d104      	bne.n	8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>
          frequency = HAL_RCC_GetSysClockFreq();
 8008dce:	f7ff fc3b 	bl	8008648 <HAL_RCC_GetSysClockFreq>
 8008dd2:	0003      	movs	r3, r0
 8008dd4:	617b      	str	r3, [r7, #20]
        break;
 8008dd6:	e1bf      	b.n	8009158 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8008dd8:	4b1b      	ldr	r3, [pc, #108]	; (8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	2380      	movs	r3, #128	; 0x80
 8008dde:	00db      	lsls	r3, r3, #3
 8008de0:	401a      	ands	r2, r3
 8008de2:	2380      	movs	r3, #128	; 0x80
 8008de4:	00db      	lsls	r3, r3, #3
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d107      	bne.n	8008dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
 8008dea:	68fa      	ldr	r2, [r7, #12]
 8008dec:	2380      	movs	r3, #128	; 0x80
 8008dee:	011b      	lsls	r3, r3, #4
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d102      	bne.n	8008dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
          frequency = HSI_VALUE;
 8008df4:	4b16      	ldr	r3, [pc, #88]	; (8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008df6:	617b      	str	r3, [r7, #20]
        break;
 8008df8:	e1ae      	b.n	8009158 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8008dfa:	4b13      	ldr	r3, [pc, #76]	; (8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dfe:	2202      	movs	r2, #2
 8008e00:	4013      	ands	r3, r2
 8008e02:	2b02      	cmp	r3, #2
 8008e04:	d000      	beq.n	8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8008e06:	e1a7      	b.n	8009158 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8008e08:	68fa      	ldr	r2, [r7, #12]
 8008e0a:	23c0      	movs	r3, #192	; 0xc0
 8008e0c:	011b      	lsls	r3, r3, #4
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d000      	beq.n	8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8008e12:	e1a1      	b.n	8009158 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
          frequency = LSE_VALUE;
 8008e14:	2380      	movs	r3, #128	; 0x80
 8008e16:	021b      	lsls	r3, r3, #8
 8008e18:	617b      	str	r3, [r7, #20]
        break;
 8008e1a:	e19d      	b.n	8009158 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008e1c:	4b0a      	ldr	r3, [pc, #40]	; (8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e20:	0f9b      	lsrs	r3, r3, #30
 8008e22:	079b      	lsls	r3, r3, #30
 8008e24:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d104      	bne.n	8008e36 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
          frequency = HAL_RCC_GetSysClockFreq();
 8008e2c:	f7ff fc0c 	bl	8008648 <HAL_RCC_GetSysClockFreq>
 8008e30:	0003      	movs	r3, r0
 8008e32:	617b      	str	r3, [r7, #20]
        break;
 8008e34:	e192      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 8008e36:	68fa      	ldr	r2, [r7, #12]
 8008e38:	2380      	movs	r3, #128	; 0x80
 8008e3a:	061b      	lsls	r3, r3, #24
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	d10d      	bne.n	8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
          frequency = HSI_VALUE;
 8008e40:	4b03      	ldr	r3, [pc, #12]	; (8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008e42:	617b      	str	r3, [r7, #20]
        break;
 8008e44:	e18a      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008e46:	46c0      	nop			; (mov r8, r8)
 8008e48:	40021000 	.word	0x40021000
 8008e4c:	0003d090 	.word	0x0003d090
 8008e50:	00f42400 	.word	0x00f42400
 8008e54:	007a1200 	.word	0x007a1200
 8008e58:	00008012 	.word	0x00008012
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 8008e5c:	68fa      	ldr	r2, [r7, #12]
 8008e5e:	2380      	movs	r3, #128	; 0x80
 8008e60:	05db      	lsls	r3, r3, #23
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d000      	beq.n	8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
 8008e66:	e179      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8008e68:	4bc5      	ldr	r3, [pc, #788]	; (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008e6a:	68da      	ldr	r2, [r3, #12]
 8008e6c:	2380      	movs	r3, #128	; 0x80
 8008e6e:	025b      	lsls	r3, r3, #9
 8008e70:	4013      	ands	r3, r2
 8008e72:	d100      	bne.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8008e74:	e172      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008e76:	4bc2      	ldr	r3, [pc, #776]	; (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008e78:	68db      	ldr	r3, [r3, #12]
 8008e7a:	0a1b      	lsrs	r3, r3, #8
 8008e7c:	227f      	movs	r2, #127	; 0x7f
 8008e7e:	4013      	ands	r3, r2
 8008e80:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	68ba      	ldr	r2, [r7, #8]
 8008e86:	435a      	muls	r2, r3
 8008e88:	4bbd      	ldr	r3, [pc, #756]	; (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	0c5b      	lsrs	r3, r3, #17
 8008e8e:	211f      	movs	r1, #31
 8008e90:	400b      	ands	r3, r1
 8008e92:	3301      	adds	r3, #1
 8008e94:	0019      	movs	r1, r3
 8008e96:	0010      	movs	r0, r2
 8008e98:	f7f7 f934 	bl	8000104 <__udivsi3>
 8008e9c:	0003      	movs	r3, r0
 8008e9e:	617b      	str	r3, [r7, #20]
        break;
 8008ea0:	e15c      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008ea2:	4bb7      	ldr	r3, [pc, #732]	; (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008ea4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ea6:	23c0      	movs	r3, #192	; 0xc0
 8008ea8:	019b      	lsls	r3, r3, #6
 8008eaa:	4013      	ands	r3, r2
 8008eac:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d104      	bne.n	8008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008eb4:	f7ff fc54 	bl	8008760 <HAL_RCC_GetPCLK1Freq>
 8008eb8:	0003      	movs	r3, r0
 8008eba:	617b      	str	r3, [r7, #20]
        break;
 8008ebc:	e150      	b.n	8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8008ebe:	68fa      	ldr	r2, [r7, #12]
 8008ec0:	2380      	movs	r3, #128	; 0x80
 8008ec2:	015b      	lsls	r3, r3, #5
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d104      	bne.n	8008ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          frequency = HAL_RCC_GetSysClockFreq();
 8008ec8:	f7ff fbbe 	bl	8008648 <HAL_RCC_GetSysClockFreq>
 8008ecc:	0003      	movs	r3, r0
 8008ece:	617b      	str	r3, [r7, #20]
        break;
 8008ed0:	e146      	b.n	8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8008ed2:	4bab      	ldr	r3, [pc, #684]	; (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008ed4:	681a      	ldr	r2, [r3, #0]
 8008ed6:	2380      	movs	r3, #128	; 0x80
 8008ed8:	00db      	lsls	r3, r3, #3
 8008eda:	401a      	ands	r2, r3
 8008edc:	2380      	movs	r3, #128	; 0x80
 8008ede:	00db      	lsls	r3, r3, #3
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d000      	beq.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 8008ee4:	e13c      	b.n	8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8008ee6:	68fa      	ldr	r2, [r7, #12]
 8008ee8:	2380      	movs	r3, #128	; 0x80
 8008eea:	019b      	lsls	r3, r3, #6
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d000      	beq.n	8008ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 8008ef0:	e136      	b.n	8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HSI_VALUE;
 8008ef2:	4ba4      	ldr	r3, [pc, #656]	; (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8008ef4:	617b      	str	r3, [r7, #20]
        break;
 8008ef6:	e133      	b.n	8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 8008ef8:	4ba1      	ldr	r3, [pc, #644]	; (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008efa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008efc:	23c0      	movs	r3, #192	; 0xc0
 8008efe:	021b      	lsls	r3, r3, #8
 8008f00:	4013      	ands	r3, r2
 8008f02:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 8008f04:	68fa      	ldr	r2, [r7, #12]
 8008f06:	2380      	movs	r3, #128	; 0x80
 8008f08:	01db      	lsls	r3, r3, #7
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d11c      	bne.n	8008f48 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8008f0e:	4b9c      	ldr	r3, [pc, #624]	; (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008f10:	68da      	ldr	r2, [r3, #12]
 8008f12:	2380      	movs	r3, #128	; 0x80
 8008f14:	025b      	lsls	r3, r3, #9
 8008f16:	4013      	ands	r3, r2
 8008f18:	d100      	bne.n	8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 8008f1a:	e123      	b.n	8009164 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008f1c:	4b98      	ldr	r3, [pc, #608]	; (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008f1e:	68db      	ldr	r3, [r3, #12]
 8008f20:	0a1b      	lsrs	r3, r3, #8
 8008f22:	227f      	movs	r2, #127	; 0x7f
 8008f24:	4013      	ands	r3, r2
 8008f26:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	68ba      	ldr	r2, [r7, #8]
 8008f2c:	435a      	muls	r2, r3
 8008f2e:	4b94      	ldr	r3, [pc, #592]	; (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	0c5b      	lsrs	r3, r3, #17
 8008f34:	211f      	movs	r1, #31
 8008f36:	400b      	ands	r3, r1
 8008f38:	3301      	adds	r3, #1
 8008f3a:	0019      	movs	r1, r3
 8008f3c:	0010      	movs	r0, r2
 8008f3e:	f7f7 f8e1 	bl	8000104 <__udivsi3>
 8008f42:	0003      	movs	r3, r0
 8008f44:	617b      	str	r3, [r7, #20]
        break;
 8008f46:	e10d      	b.n	8009164 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d104      	bne.n	8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
          frequency = HAL_RCC_GetSysClockFreq();
 8008f4e:	f7ff fb7b 	bl	8008648 <HAL_RCC_GetSysClockFreq>
 8008f52:	0003      	movs	r3, r0
 8008f54:	617b      	str	r3, [r7, #20]
        break;
 8008f56:	e105      	b.n	8009164 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 8008f58:	4b89      	ldr	r3, [pc, #548]	; (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	2380      	movs	r3, #128	; 0x80
 8008f5e:	00db      	lsls	r3, r3, #3
 8008f60:	401a      	ands	r2, r3
 8008f62:	2380      	movs	r3, #128	; 0x80
 8008f64:	00db      	lsls	r3, r3, #3
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d107      	bne.n	8008f7a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
 8008f6a:	68fa      	ldr	r2, [r7, #12]
 8008f6c:	2380      	movs	r3, #128	; 0x80
 8008f6e:	021b      	lsls	r3, r3, #8
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d102      	bne.n	8008f7a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          frequency = HSI_VALUE;
 8008f74:	4b83      	ldr	r3, [pc, #524]	; (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8008f76:	617b      	str	r3, [r7, #20]
        break;
 8008f78:	e0f4      	b.n	8009164 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 8008f7a:	68fa      	ldr	r2, [r7, #12]
 8008f7c:	23c0      	movs	r3, #192	; 0xc0
 8008f7e:	021b      	lsls	r3, r3, #8
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d000      	beq.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008f84:	e0ee      	b.n	8009164 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 8008f86:	4b80      	ldr	r3, [pc, #512]	; (8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8008f88:	617b      	str	r3, [r7, #20]
        break;
 8008f8a:	e0eb      	b.n	8009164 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008f8c:	4b7c      	ldr	r3, [pc, #496]	; (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008f8e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f90:	23c0      	movs	r3, #192	; 0xc0
 8008f92:	031b      	lsls	r3, r3, #12
 8008f94:	4013      	ands	r3, r2
 8008f96:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d104      	bne.n	8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008f9e:	f7ff fbdf 	bl	8008760 <HAL_RCC_GetPCLK1Freq>
 8008fa2:	0003      	movs	r3, r0
 8008fa4:	617b      	str	r3, [r7, #20]
        break;
 8008fa6:	e0df      	b.n	8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8008fa8:	4b75      	ldr	r3, [pc, #468]	; (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fac:	2202      	movs	r2, #2
 8008fae:	4013      	ands	r3, r2
 8008fb0:	2b02      	cmp	r3, #2
 8008fb2:	d108      	bne.n	8008fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 8008fb4:	68fa      	ldr	r2, [r7, #12]
 8008fb6:	2380      	movs	r3, #128	; 0x80
 8008fb8:	02db      	lsls	r3, r3, #11
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d103      	bne.n	8008fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          frequency = LSI_VALUE;
 8008fbe:	23fa      	movs	r3, #250	; 0xfa
 8008fc0:	01db      	lsls	r3, r3, #7
 8008fc2:	617b      	str	r3, [r7, #20]
 8008fc4:	e021      	b.n	800900a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8008fc6:	4b6e      	ldr	r3, [pc, #440]	; (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008fc8:	681a      	ldr	r2, [r3, #0]
 8008fca:	2380      	movs	r3, #128	; 0x80
 8008fcc:	00db      	lsls	r3, r3, #3
 8008fce:	401a      	ands	r2, r3
 8008fd0:	2380      	movs	r3, #128	; 0x80
 8008fd2:	00db      	lsls	r3, r3, #3
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d107      	bne.n	8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8008fd8:	68fa      	ldr	r2, [r7, #12]
 8008fda:	2380      	movs	r3, #128	; 0x80
 8008fdc:	031b      	lsls	r3, r3, #12
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d102      	bne.n	8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          frequency = HSI_VALUE;
 8008fe2:	4b68      	ldr	r3, [pc, #416]	; (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8008fe4:	617b      	str	r3, [r7, #20]
 8008fe6:	e010      	b.n	800900a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8008fe8:	4b65      	ldr	r3, [pc, #404]	; (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fec:	2202      	movs	r2, #2
 8008fee:	4013      	ands	r3, r2
 8008ff0:	2b02      	cmp	r3, #2
 8008ff2:	d000      	beq.n	8008ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008ff4:	e0b8      	b.n	8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8008ff6:	68fa      	ldr	r2, [r7, #12]
 8008ff8:	23c0      	movs	r3, #192	; 0xc0
 8008ffa:	031b      	lsls	r3, r3, #12
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d000      	beq.n	8009002 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009000:	e0b2      	b.n	8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          frequency = LSE_VALUE;
 8009002:	2380      	movs	r3, #128	; 0x80
 8009004:	021b      	lsls	r3, r3, #8
 8009006:	617b      	str	r3, [r7, #20]
        break;
 8009008:	e0ae      	b.n	8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 800900a:	e0ad      	b.n	8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800900c:	4b5c      	ldr	r3, [pc, #368]	; (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800900e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009010:	23c0      	movs	r3, #192	; 0xc0
 8009012:	039b      	lsls	r3, r3, #14
 8009014:	4013      	ands	r3, r2
 8009016:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d104      	bne.n	8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
          frequency = HAL_RCC_GetPCLK1Freq();
 800901e:	f7ff fb9f 	bl	8008760 <HAL_RCC_GetPCLK1Freq>
 8009022:	0003      	movs	r3, r0
 8009024:	617b      	str	r3, [r7, #20]
        break;
 8009026:	e0a1      	b.n	800916c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8009028:	4b55      	ldr	r3, [pc, #340]	; (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800902a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800902c:	2202      	movs	r2, #2
 800902e:	4013      	ands	r3, r2
 8009030:	2b02      	cmp	r3, #2
 8009032:	d108      	bne.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 8009034:	68fa      	ldr	r2, [r7, #12]
 8009036:	2380      	movs	r3, #128	; 0x80
 8009038:	035b      	lsls	r3, r3, #13
 800903a:	429a      	cmp	r2, r3
 800903c:	d103      	bne.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = LSI_VALUE;
 800903e:	23fa      	movs	r3, #250	; 0xfa
 8009040:	01db      	lsls	r3, r3, #7
 8009042:	617b      	str	r3, [r7, #20]
 8009044:	e021      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8009046:	4b4e      	ldr	r3, [pc, #312]	; (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	2380      	movs	r3, #128	; 0x80
 800904c:	00db      	lsls	r3, r3, #3
 800904e:	401a      	ands	r2, r3
 8009050:	2380      	movs	r3, #128	; 0x80
 8009052:	00db      	lsls	r3, r3, #3
 8009054:	429a      	cmp	r2, r3
 8009056:	d107      	bne.n	8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 8009058:	68fa      	ldr	r2, [r7, #12]
 800905a:	2380      	movs	r3, #128	; 0x80
 800905c:	039b      	lsls	r3, r3, #14
 800905e:	429a      	cmp	r2, r3
 8009060:	d102      	bne.n	8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
          frequency = HSI_VALUE;
 8009062:	4b48      	ldr	r3, [pc, #288]	; (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8009064:	617b      	str	r3, [r7, #20]
 8009066:	e010      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8009068:	4b45      	ldr	r3, [pc, #276]	; (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800906a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800906c:	2202      	movs	r2, #2
 800906e:	4013      	ands	r3, r2
 8009070:	2b02      	cmp	r3, #2
 8009072:	d000      	beq.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8009074:	e07a      	b.n	800916c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 8009076:	68fa      	ldr	r2, [r7, #12]
 8009078:	23c0      	movs	r3, #192	; 0xc0
 800907a:	039b      	lsls	r3, r3, #14
 800907c:	429a      	cmp	r2, r3
 800907e:	d000      	beq.n	8009082 <HAL_RCCEx_GetPeriphCLKFreq+0x586>
 8009080:	e074      	b.n	800916c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          frequency = LSE_VALUE;
 8009082:	2380      	movs	r3, #128	; 0x80
 8009084:	021b      	lsls	r3, r3, #8
 8009086:	617b      	str	r3, [r7, #20]
        break;
 8009088:	e070      	b.n	800916c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 800908a:	e06f      	b.n	800916c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 800908c:	4b3c      	ldr	r3, [pc, #240]	; (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800908e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009090:	2380      	movs	r3, #128	; 0x80
 8009092:	03db      	lsls	r3, r3, #15
 8009094:	4013      	ands	r3, r2
 8009096:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 8009098:	68fa      	ldr	r2, [r7, #12]
 800909a:	2380      	movs	r3, #128	; 0x80
 800909c:	03db      	lsls	r3, r3, #15
 800909e:	429a      	cmp	r2, r3
 80090a0:	d11b      	bne.n	80090da <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 80090a2:	4b37      	ldr	r3, [pc, #220]	; (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80090a4:	68da      	ldr	r2, [r3, #12]
 80090a6:	2380      	movs	r3, #128	; 0x80
 80090a8:	045b      	lsls	r3, r3, #17
 80090aa:	4013      	ands	r3, r2
 80090ac:	d060      	beq.n	8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80090ae:	4b34      	ldr	r3, [pc, #208]	; (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80090b0:	68db      	ldr	r3, [r3, #12]
 80090b2:	0a1b      	lsrs	r3, r3, #8
 80090b4:	227f      	movs	r2, #127	; 0x7f
 80090b6:	4013      	ands	r3, r2
 80090b8:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	68ba      	ldr	r2, [r7, #8]
 80090be:	435a      	muls	r2, r3
 80090c0:	4b2f      	ldr	r3, [pc, #188]	; (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80090c2:	68db      	ldr	r3, [r3, #12]
 80090c4:	0e5b      	lsrs	r3, r3, #25
 80090c6:	2107      	movs	r1, #7
 80090c8:	400b      	ands	r3, r1
 80090ca:	3301      	adds	r3, #1
 80090cc:	0019      	movs	r1, r3
 80090ce:	0010      	movs	r0, r2
 80090d0:	f7f7 f818 	bl	8000104 <__udivsi3>
 80090d4:	0003      	movs	r3, r0
 80090d6:	617b      	str	r3, [r7, #20]
        break;
 80090d8:	e04a      	b.n	8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d147      	bne.n	8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          frequency = HAL_RCC_GetPCLK1Freq();
 80090e0:	f7ff fb3e 	bl	8008760 <HAL_RCC_GetPCLK1Freq>
 80090e4:	0003      	movs	r3, r0
 80090e6:	617b      	str	r3, [r7, #20]
        break;
 80090e8:	e042      	b.n	8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM15SEL);
 80090ea:	4b25      	ldr	r3, [pc, #148]	; (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80090ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80090ee:	2380      	movs	r3, #128	; 0x80
 80090f0:	045b      	lsls	r3, r3, #17
 80090f2:	4013      	ands	r3, r2
 80090f4:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM15CLKSOURCE_PLL) /* PLL ? */
 80090f6:	68fa      	ldr	r2, [r7, #12]
 80090f8:	2380      	movs	r3, #128	; 0x80
 80090fa:	045b      	lsls	r3, r3, #17
 80090fc:	429a      	cmp	r2, r3
 80090fe:	d11b      	bne.n	8009138 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8009100:	4b1f      	ldr	r3, [pc, #124]	; (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009102:	68da      	ldr	r2, [r3, #12]
 8009104:	2380      	movs	r3, #128	; 0x80
 8009106:	045b      	lsls	r3, r3, #17
 8009108:	4013      	ands	r3, r2
 800910a:	d033      	beq.n	8009174 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800910c:	4b1c      	ldr	r3, [pc, #112]	; (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800910e:	68db      	ldr	r3, [r3, #12]
 8009110:	0a1b      	lsrs	r3, r3, #8
 8009112:	227f      	movs	r2, #127	; 0x7f
 8009114:	4013      	ands	r3, r2
 8009116:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	68ba      	ldr	r2, [r7, #8]
 800911c:	435a      	muls	r2, r3
 800911e:	4b18      	ldr	r3, [pc, #96]	; (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009120:	68db      	ldr	r3, [r3, #12]
 8009122:	0e5b      	lsrs	r3, r3, #25
 8009124:	2107      	movs	r1, #7
 8009126:	400b      	ands	r3, r1
 8009128:	3301      	adds	r3, #1
 800912a:	0019      	movs	r1, r3
 800912c:	0010      	movs	r0, r2
 800912e:	f7f6 ffe9 	bl	8000104 <__udivsi3>
 8009132:	0003      	movs	r3, r0
 8009134:	617b      	str	r3, [r7, #20]
        break;
 8009136:	e01d      	b.n	8009174 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        else if (srcclk == RCC_TIM15CLKSOURCE_PCLK1) /* PCLK1 ? */
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d11a      	bne.n	8009174 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
          frequency = HAL_RCC_GetPCLK1Freq();
 800913e:	f7ff fb0f 	bl	8008760 <HAL_RCC_GetPCLK1Freq>
 8009142:	0003      	movs	r3, r0
 8009144:	617b      	str	r3, [r7, #20]
        break;
 8009146:	e015      	b.n	8009174 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        break;
 8009148:	46c0      	nop			; (mov r8, r8)
 800914a:	e014      	b.n	8009176 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800914c:	46c0      	nop			; (mov r8, r8)
 800914e:	e012      	b.n	8009176 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009150:	46c0      	nop			; (mov r8, r8)
 8009152:	e010      	b.n	8009176 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009154:	46c0      	nop			; (mov r8, r8)
 8009156:	e00e      	b.n	8009176 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009158:	46c0      	nop			; (mov r8, r8)
 800915a:	e00c      	b.n	8009176 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800915c:	46c0      	nop			; (mov r8, r8)
 800915e:	e00a      	b.n	8009176 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009160:	46c0      	nop			; (mov r8, r8)
 8009162:	e008      	b.n	8009176 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009164:	46c0      	nop			; (mov r8, r8)
 8009166:	e006      	b.n	8009176 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009168:	46c0      	nop			; (mov r8, r8)
 800916a:	e004      	b.n	8009176 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800916c:	46c0      	nop			; (mov r8, r8)
 800916e:	e002      	b.n	8009176 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009170:	46c0      	nop			; (mov r8, r8)
 8009172:	e000      	b.n	8009176 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009174:	46c0      	nop			; (mov r8, r8)
    }
  }

  return (frequency);
 8009176:	697b      	ldr	r3, [r7, #20]
}
 8009178:	0018      	movs	r0, r3
 800917a:	46bd      	mov	sp, r7
 800917c:	b006      	add	sp, #24
 800917e:	bd80      	pop	{r7, pc}
 8009180:	40021000 	.word	0x40021000
 8009184:	00f42400 	.word	0x00f42400
 8009188:	0000bb80 	.word	0x0000bb80

0800918c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d101      	bne.n	800919e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800919a:	2301      	movs	r3, #1
 800919c:	e0a8      	b.n	80092f0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d109      	bne.n	80091ba <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	685a      	ldr	r2, [r3, #4]
 80091aa:	2382      	movs	r3, #130	; 0x82
 80091ac:	005b      	lsls	r3, r3, #1
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d009      	beq.n	80091c6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2200      	movs	r2, #0
 80091b6:	61da      	str	r2, [r3, #28]
 80091b8:	e005      	b.n	80091c6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2200      	movs	r2, #0
 80091be:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2200      	movs	r2, #0
 80091c4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2200      	movs	r2, #0
 80091ca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	225d      	movs	r2, #93	; 0x5d
 80091d0:	5c9b      	ldrb	r3, [r3, r2]
 80091d2:	b2db      	uxtb	r3, r3
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d107      	bne.n	80091e8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	225c      	movs	r2, #92	; 0x5c
 80091dc:	2100      	movs	r1, #0
 80091de:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	0018      	movs	r0, r3
 80091e4:	f7fb fe10 	bl	8004e08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	225d      	movs	r2, #93	; 0x5d
 80091ec:	2102      	movs	r1, #2
 80091ee:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	681a      	ldr	r2, [r3, #0]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2140      	movs	r1, #64	; 0x40
 80091fc:	438a      	bics	r2, r1
 80091fe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	68da      	ldr	r2, [r3, #12]
 8009204:	23e0      	movs	r3, #224	; 0xe0
 8009206:	00db      	lsls	r3, r3, #3
 8009208:	429a      	cmp	r2, r3
 800920a:	d902      	bls.n	8009212 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800920c:	2300      	movs	r3, #0
 800920e:	60fb      	str	r3, [r7, #12]
 8009210:	e002      	b.n	8009218 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009212:	2380      	movs	r3, #128	; 0x80
 8009214:	015b      	lsls	r3, r3, #5
 8009216:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	68da      	ldr	r2, [r3, #12]
 800921c:	23f0      	movs	r3, #240	; 0xf0
 800921e:	011b      	lsls	r3, r3, #4
 8009220:	429a      	cmp	r2, r3
 8009222:	d008      	beq.n	8009236 <HAL_SPI_Init+0xaa>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	68da      	ldr	r2, [r3, #12]
 8009228:	23e0      	movs	r3, #224	; 0xe0
 800922a:	00db      	lsls	r3, r3, #3
 800922c:	429a      	cmp	r2, r3
 800922e:	d002      	beq.n	8009236 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2200      	movs	r2, #0
 8009234:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	685a      	ldr	r2, [r3, #4]
 800923a:	2382      	movs	r3, #130	; 0x82
 800923c:	005b      	lsls	r3, r3, #1
 800923e:	401a      	ands	r2, r3
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6899      	ldr	r1, [r3, #8]
 8009244:	2384      	movs	r3, #132	; 0x84
 8009246:	021b      	lsls	r3, r3, #8
 8009248:	400b      	ands	r3, r1
 800924a:	431a      	orrs	r2, r3
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	691b      	ldr	r3, [r3, #16]
 8009250:	2102      	movs	r1, #2
 8009252:	400b      	ands	r3, r1
 8009254:	431a      	orrs	r2, r3
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	695b      	ldr	r3, [r3, #20]
 800925a:	2101      	movs	r1, #1
 800925c:	400b      	ands	r3, r1
 800925e:	431a      	orrs	r2, r3
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6999      	ldr	r1, [r3, #24]
 8009264:	2380      	movs	r3, #128	; 0x80
 8009266:	009b      	lsls	r3, r3, #2
 8009268:	400b      	ands	r3, r1
 800926a:	431a      	orrs	r2, r3
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	69db      	ldr	r3, [r3, #28]
 8009270:	2138      	movs	r1, #56	; 0x38
 8009272:	400b      	ands	r3, r1
 8009274:	431a      	orrs	r2, r3
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6a1b      	ldr	r3, [r3, #32]
 800927a:	2180      	movs	r1, #128	; 0x80
 800927c:	400b      	ands	r3, r1
 800927e:	431a      	orrs	r2, r3
 8009280:	0011      	movs	r1, r2
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009286:	2380      	movs	r3, #128	; 0x80
 8009288:	019b      	lsls	r3, r3, #6
 800928a:	401a      	ands	r2, r3
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	430a      	orrs	r2, r1
 8009292:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	699b      	ldr	r3, [r3, #24]
 8009298:	0c1b      	lsrs	r3, r3, #16
 800929a:	2204      	movs	r2, #4
 800929c:	401a      	ands	r2, r3
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a2:	2110      	movs	r1, #16
 80092a4:	400b      	ands	r3, r1
 80092a6:	431a      	orrs	r2, r3
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ac:	2108      	movs	r1, #8
 80092ae:	400b      	ands	r3, r1
 80092b0:	431a      	orrs	r2, r3
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	68d9      	ldr	r1, [r3, #12]
 80092b6:	23f0      	movs	r3, #240	; 0xf0
 80092b8:	011b      	lsls	r3, r3, #4
 80092ba:	400b      	ands	r3, r1
 80092bc:	431a      	orrs	r2, r3
 80092be:	0011      	movs	r1, r2
 80092c0:	68fa      	ldr	r2, [r7, #12]
 80092c2:	2380      	movs	r3, #128	; 0x80
 80092c4:	015b      	lsls	r3, r3, #5
 80092c6:	401a      	ands	r2, r3
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	430a      	orrs	r2, r1
 80092ce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	69da      	ldr	r2, [r3, #28]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4907      	ldr	r1, [pc, #28]	; (80092f8 <HAL_SPI_Init+0x16c>)
 80092dc:	400a      	ands	r2, r1
 80092de:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2200      	movs	r2, #0
 80092e4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	225d      	movs	r2, #93	; 0x5d
 80092ea:	2101      	movs	r1, #1
 80092ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80092ee:	2300      	movs	r3, #0
}
 80092f0:	0018      	movs	r0, r3
 80092f2:	46bd      	mov	sp, r7
 80092f4:	b004      	add	sp, #16
 80092f6:	bd80      	pop	{r7, pc}
 80092f8:	fffff7ff 	.word	0xfffff7ff

080092fc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b088      	sub	sp, #32
 8009300:	af00      	add	r7, sp, #0
 8009302:	60f8      	str	r0, [r7, #12]
 8009304:	60b9      	str	r1, [r7, #8]
 8009306:	603b      	str	r3, [r7, #0]
 8009308:	1dbb      	adds	r3, r7, #6
 800930a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800930c:	231f      	movs	r3, #31
 800930e:	18fb      	adds	r3, r7, r3
 8009310:	2200      	movs	r2, #0
 8009312:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	225c      	movs	r2, #92	; 0x5c
 8009318:	5c9b      	ldrb	r3, [r3, r2]
 800931a:	2b01      	cmp	r3, #1
 800931c:	d101      	bne.n	8009322 <HAL_SPI_Transmit+0x26>
 800931e:	2302      	movs	r3, #2
 8009320:	e140      	b.n	80095a4 <HAL_SPI_Transmit+0x2a8>
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	225c      	movs	r2, #92	; 0x5c
 8009326:	2101      	movs	r1, #1
 8009328:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800932a:	f7fc f873 	bl	8005414 <HAL_GetTick>
 800932e:	0003      	movs	r3, r0
 8009330:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8009332:	2316      	movs	r3, #22
 8009334:	18fb      	adds	r3, r7, r3
 8009336:	1dba      	adds	r2, r7, #6
 8009338:	8812      	ldrh	r2, [r2, #0]
 800933a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	225d      	movs	r2, #93	; 0x5d
 8009340:	5c9b      	ldrb	r3, [r3, r2]
 8009342:	b2db      	uxtb	r3, r3
 8009344:	2b01      	cmp	r3, #1
 8009346:	d004      	beq.n	8009352 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8009348:	231f      	movs	r3, #31
 800934a:	18fb      	adds	r3, r7, r3
 800934c:	2202      	movs	r2, #2
 800934e:	701a      	strb	r2, [r3, #0]
    goto error;
 8009350:	e11d      	b.n	800958e <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d003      	beq.n	8009360 <HAL_SPI_Transmit+0x64>
 8009358:	1dbb      	adds	r3, r7, #6
 800935a:	881b      	ldrh	r3, [r3, #0]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d104      	bne.n	800936a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8009360:	231f      	movs	r3, #31
 8009362:	18fb      	adds	r3, r7, r3
 8009364:	2201      	movs	r2, #1
 8009366:	701a      	strb	r2, [r3, #0]
    goto error;
 8009368:	e111      	b.n	800958e <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	225d      	movs	r2, #93	; 0x5d
 800936e:	2103      	movs	r1, #3
 8009370:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2200      	movs	r2, #0
 8009376:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	68ba      	ldr	r2, [r7, #8]
 800937c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	1dba      	adds	r2, r7, #6
 8009382:	8812      	ldrh	r2, [r2, #0]
 8009384:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	1dba      	adds	r2, r7, #6
 800938a:	8812      	ldrh	r2, [r2, #0]
 800938c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2200      	movs	r2, #0
 8009392:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2244      	movs	r2, #68	; 0x44
 8009398:	2100      	movs	r1, #0
 800939a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2246      	movs	r2, #70	; 0x46
 80093a0:	2100      	movs	r1, #0
 80093a2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2200      	movs	r2, #0
 80093a8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2200      	movs	r2, #0
 80093ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	689a      	ldr	r2, [r3, #8]
 80093b4:	2380      	movs	r3, #128	; 0x80
 80093b6:	021b      	lsls	r3, r3, #8
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d110      	bne.n	80093de <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	681a      	ldr	r2, [r3, #0]
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2140      	movs	r1, #64	; 0x40
 80093c8:	438a      	bics	r2, r1
 80093ca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	2180      	movs	r1, #128	; 0x80
 80093d8:	01c9      	lsls	r1, r1, #7
 80093da:	430a      	orrs	r2, r1
 80093dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	2240      	movs	r2, #64	; 0x40
 80093e6:	4013      	ands	r3, r2
 80093e8:	2b40      	cmp	r3, #64	; 0x40
 80093ea:	d007      	beq.n	80093fc <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	2140      	movs	r1, #64	; 0x40
 80093f8:	430a      	orrs	r2, r1
 80093fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	68da      	ldr	r2, [r3, #12]
 8009400:	23e0      	movs	r3, #224	; 0xe0
 8009402:	00db      	lsls	r3, r3, #3
 8009404:	429a      	cmp	r2, r3
 8009406:	d94e      	bls.n	80094a6 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d004      	beq.n	800941a <HAL_SPI_Transmit+0x11e>
 8009410:	2316      	movs	r3, #22
 8009412:	18fb      	adds	r3, r7, r3
 8009414:	881b      	ldrh	r3, [r3, #0]
 8009416:	2b01      	cmp	r3, #1
 8009418:	d13f      	bne.n	800949a <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800941e:	881a      	ldrh	r2, [r3, #0]
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800942a:	1c9a      	adds	r2, r3, #2
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009434:	b29b      	uxth	r3, r3
 8009436:	3b01      	subs	r3, #1
 8009438:	b29a      	uxth	r2, r3
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800943e:	e02c      	b.n	800949a <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	2202      	movs	r2, #2
 8009448:	4013      	ands	r3, r2
 800944a:	2b02      	cmp	r3, #2
 800944c:	d112      	bne.n	8009474 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009452:	881a      	ldrh	r2, [r3, #0]
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800945e:	1c9a      	adds	r2, r3, #2
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009468:	b29b      	uxth	r3, r3
 800946a:	3b01      	subs	r3, #1
 800946c:	b29a      	uxth	r2, r3
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009472:	e012      	b.n	800949a <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009474:	f7fb ffce 	bl	8005414 <HAL_GetTick>
 8009478:	0002      	movs	r2, r0
 800947a:	69bb      	ldr	r3, [r7, #24]
 800947c:	1ad3      	subs	r3, r2, r3
 800947e:	683a      	ldr	r2, [r7, #0]
 8009480:	429a      	cmp	r2, r3
 8009482:	d802      	bhi.n	800948a <HAL_SPI_Transmit+0x18e>
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	3301      	adds	r3, #1
 8009488:	d102      	bne.n	8009490 <HAL_SPI_Transmit+0x194>
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d104      	bne.n	800949a <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8009490:	231f      	movs	r3, #31
 8009492:	18fb      	adds	r3, r7, r3
 8009494:	2203      	movs	r2, #3
 8009496:	701a      	strb	r2, [r3, #0]
          goto error;
 8009498:	e079      	b.n	800958e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800949e:	b29b      	uxth	r3, r3
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d1cd      	bne.n	8009440 <HAL_SPI_Transmit+0x144>
 80094a4:	e04f      	b.n	8009546 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d004      	beq.n	80094b8 <HAL_SPI_Transmit+0x1bc>
 80094ae:	2316      	movs	r3, #22
 80094b0:	18fb      	adds	r3, r7, r3
 80094b2:	881b      	ldrh	r3, [r3, #0]
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	d141      	bne.n	800953c <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	330c      	adds	r3, #12
 80094c2:	7812      	ldrb	r2, [r2, #0]
 80094c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ca:	1c5a      	adds	r2, r3, #1
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	3b01      	subs	r3, #1
 80094d8:	b29a      	uxth	r2, r3
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80094de:	e02d      	b.n	800953c <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	689b      	ldr	r3, [r3, #8]
 80094e6:	2202      	movs	r2, #2
 80094e8:	4013      	ands	r3, r2
 80094ea:	2b02      	cmp	r3, #2
 80094ec:	d113      	bne.n	8009516 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	330c      	adds	r3, #12
 80094f8:	7812      	ldrb	r2, [r2, #0]
 80094fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009500:	1c5a      	adds	r2, r3, #1
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800950a:	b29b      	uxth	r3, r3
 800950c:	3b01      	subs	r3, #1
 800950e:	b29a      	uxth	r2, r3
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009514:	e012      	b.n	800953c <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009516:	f7fb ff7d 	bl	8005414 <HAL_GetTick>
 800951a:	0002      	movs	r2, r0
 800951c:	69bb      	ldr	r3, [r7, #24]
 800951e:	1ad3      	subs	r3, r2, r3
 8009520:	683a      	ldr	r2, [r7, #0]
 8009522:	429a      	cmp	r2, r3
 8009524:	d802      	bhi.n	800952c <HAL_SPI_Transmit+0x230>
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	3301      	adds	r3, #1
 800952a:	d102      	bne.n	8009532 <HAL_SPI_Transmit+0x236>
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d104      	bne.n	800953c <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8009532:	231f      	movs	r3, #31
 8009534:	18fb      	adds	r3, r7, r3
 8009536:	2203      	movs	r2, #3
 8009538:	701a      	strb	r2, [r3, #0]
          goto error;
 800953a:	e028      	b.n	800958e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009540:	b29b      	uxth	r3, r3
 8009542:	2b00      	cmp	r3, #0
 8009544:	d1cc      	bne.n	80094e0 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009546:	69ba      	ldr	r2, [r7, #24]
 8009548:	6839      	ldr	r1, [r7, #0]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	0018      	movs	r0, r3
 800954e:	f000 fdf5 	bl	800a13c <SPI_EndRxTxTransaction>
 8009552:	1e03      	subs	r3, r0, #0
 8009554:	d002      	beq.n	800955c <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2220      	movs	r2, #32
 800955a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	689b      	ldr	r3, [r3, #8]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d10a      	bne.n	800957a <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009564:	2300      	movs	r3, #0
 8009566:	613b      	str	r3, [r7, #16]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	68db      	ldr	r3, [r3, #12]
 800956e:	613b      	str	r3, [r7, #16]
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	689b      	ldr	r3, [r3, #8]
 8009576:	613b      	str	r3, [r7, #16]
 8009578:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800957e:	2b00      	cmp	r3, #0
 8009580:	d004      	beq.n	800958c <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8009582:	231f      	movs	r3, #31
 8009584:	18fb      	adds	r3, r7, r3
 8009586:	2201      	movs	r2, #1
 8009588:	701a      	strb	r2, [r3, #0]
 800958a:	e000      	b.n	800958e <HAL_SPI_Transmit+0x292>
  }

error:
 800958c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	225d      	movs	r2, #93	; 0x5d
 8009592:	2101      	movs	r1, #1
 8009594:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	225c      	movs	r2, #92	; 0x5c
 800959a:	2100      	movs	r1, #0
 800959c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800959e:	231f      	movs	r3, #31
 80095a0:	18fb      	adds	r3, r7, r3
 80095a2:	781b      	ldrb	r3, [r3, #0]
}
 80095a4:	0018      	movs	r0, r3
 80095a6:	46bd      	mov	sp, r7
 80095a8:	b008      	add	sp, #32
 80095aa:	bd80      	pop	{r7, pc}

080095ac <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095ac:	b590      	push	{r4, r7, lr}
 80095ae:	b089      	sub	sp, #36	; 0x24
 80095b0:	af02      	add	r7, sp, #8
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	60b9      	str	r1, [r7, #8]
 80095b6:	603b      	str	r3, [r7, #0]
 80095b8:	1dbb      	adds	r3, r7, #6
 80095ba:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80095bc:	2317      	movs	r3, #23
 80095be:	18fb      	adds	r3, r7, r3
 80095c0:	2200      	movs	r2, #0
 80095c2:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	685a      	ldr	r2, [r3, #4]
 80095c8:	2382      	movs	r3, #130	; 0x82
 80095ca:	005b      	lsls	r3, r3, #1
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d113      	bne.n	80095f8 <HAL_SPI_Receive+0x4c>
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d10f      	bne.n	80095f8 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	225d      	movs	r2, #93	; 0x5d
 80095dc:	2104      	movs	r1, #4
 80095de:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80095e0:	1dbb      	adds	r3, r7, #6
 80095e2:	881c      	ldrh	r4, [r3, #0]
 80095e4:	68ba      	ldr	r2, [r7, #8]
 80095e6:	68b9      	ldr	r1, [r7, #8]
 80095e8:	68f8      	ldr	r0, [r7, #12]
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	9300      	str	r3, [sp, #0]
 80095ee:	0023      	movs	r3, r4
 80095f0:	f000 f928 	bl	8009844 <HAL_SPI_TransmitReceive>
 80095f4:	0003      	movs	r3, r0
 80095f6:	e11c      	b.n	8009832 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	225c      	movs	r2, #92	; 0x5c
 80095fc:	5c9b      	ldrb	r3, [r3, r2]
 80095fe:	2b01      	cmp	r3, #1
 8009600:	d101      	bne.n	8009606 <HAL_SPI_Receive+0x5a>
 8009602:	2302      	movs	r3, #2
 8009604:	e115      	b.n	8009832 <HAL_SPI_Receive+0x286>
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	225c      	movs	r2, #92	; 0x5c
 800960a:	2101      	movs	r1, #1
 800960c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800960e:	f7fb ff01 	bl	8005414 <HAL_GetTick>
 8009612:	0003      	movs	r3, r0
 8009614:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	225d      	movs	r2, #93	; 0x5d
 800961a:	5c9b      	ldrb	r3, [r3, r2]
 800961c:	b2db      	uxtb	r3, r3
 800961e:	2b01      	cmp	r3, #1
 8009620:	d004      	beq.n	800962c <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8009622:	2317      	movs	r3, #23
 8009624:	18fb      	adds	r3, r7, r3
 8009626:	2202      	movs	r2, #2
 8009628:	701a      	strb	r2, [r3, #0]
    goto error;
 800962a:	e0f7      	b.n	800981c <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d003      	beq.n	800963a <HAL_SPI_Receive+0x8e>
 8009632:	1dbb      	adds	r3, r7, #6
 8009634:	881b      	ldrh	r3, [r3, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d104      	bne.n	8009644 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800963a:	2317      	movs	r3, #23
 800963c:	18fb      	adds	r3, r7, r3
 800963e:	2201      	movs	r2, #1
 8009640:	701a      	strb	r2, [r3, #0]
    goto error;
 8009642:	e0eb      	b.n	800981c <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	225d      	movs	r2, #93	; 0x5d
 8009648:	2104      	movs	r1, #4
 800964a:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2200      	movs	r2, #0
 8009650:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	68ba      	ldr	r2, [r7, #8]
 8009656:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	1dba      	adds	r2, r7, #6
 800965c:	2144      	movs	r1, #68	; 0x44
 800965e:	8812      	ldrh	r2, [r2, #0]
 8009660:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	1dba      	adds	r2, r7, #6
 8009666:	2146      	movs	r1, #70	; 0x46
 8009668:	8812      	ldrh	r2, [r2, #0]
 800966a:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2200      	movs	r2, #0
 8009670:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2200      	movs	r2, #0
 8009676:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2200      	movs	r2, #0
 800967c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2200      	movs	r2, #0
 8009682:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2200      	movs	r2, #0
 8009688:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	68da      	ldr	r2, [r3, #12]
 800968e:	23e0      	movs	r3, #224	; 0xe0
 8009690:	00db      	lsls	r3, r3, #3
 8009692:	429a      	cmp	r2, r3
 8009694:	d908      	bls.n	80096a8 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	685a      	ldr	r2, [r3, #4]
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4966      	ldr	r1, [pc, #408]	; (800983c <HAL_SPI_Receive+0x290>)
 80096a2:	400a      	ands	r2, r1
 80096a4:	605a      	str	r2, [r3, #4]
 80096a6:	e008      	b.n	80096ba <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	685a      	ldr	r2, [r3, #4]
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	2180      	movs	r1, #128	; 0x80
 80096b4:	0149      	lsls	r1, r1, #5
 80096b6:	430a      	orrs	r2, r1
 80096b8:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	689a      	ldr	r2, [r3, #8]
 80096be:	2380      	movs	r3, #128	; 0x80
 80096c0:	021b      	lsls	r3, r3, #8
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d10f      	bne.n	80096e6 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	2140      	movs	r1, #64	; 0x40
 80096d2:	438a      	bics	r2, r1
 80096d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4957      	ldr	r1, [pc, #348]	; (8009840 <HAL_SPI_Receive+0x294>)
 80096e2:	400a      	ands	r2, r1
 80096e4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	2240      	movs	r2, #64	; 0x40
 80096ee:	4013      	ands	r3, r2
 80096f0:	2b40      	cmp	r3, #64	; 0x40
 80096f2:	d007      	beq.n	8009704 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	681a      	ldr	r2, [r3, #0]
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	2140      	movs	r1, #64	; 0x40
 8009700:	430a      	orrs	r2, r1
 8009702:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	68da      	ldr	r2, [r3, #12]
 8009708:	23e0      	movs	r3, #224	; 0xe0
 800970a:	00db      	lsls	r3, r3, #3
 800970c:	429a      	cmp	r2, r3
 800970e:	d900      	bls.n	8009712 <HAL_SPI_Receive+0x166>
 8009710:	e069      	b.n	80097e6 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009712:	e031      	b.n	8009778 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	689b      	ldr	r3, [r3, #8]
 800971a:	2201      	movs	r2, #1
 800971c:	4013      	ands	r3, r2
 800971e:	2b01      	cmp	r3, #1
 8009720:	d117      	bne.n	8009752 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	330c      	adds	r3, #12
 8009728:	001a      	movs	r2, r3
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800972e:	7812      	ldrb	r2, [r2, #0]
 8009730:	b2d2      	uxtb	r2, r2
 8009732:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009738:	1c5a      	adds	r2, r3, #1
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2246      	movs	r2, #70	; 0x46
 8009742:	5a9b      	ldrh	r3, [r3, r2]
 8009744:	b29b      	uxth	r3, r3
 8009746:	3b01      	subs	r3, #1
 8009748:	b299      	uxth	r1, r3
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2246      	movs	r2, #70	; 0x46
 800974e:	5299      	strh	r1, [r3, r2]
 8009750:	e012      	b.n	8009778 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009752:	f7fb fe5f 	bl	8005414 <HAL_GetTick>
 8009756:	0002      	movs	r2, r0
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	1ad3      	subs	r3, r2, r3
 800975c:	683a      	ldr	r2, [r7, #0]
 800975e:	429a      	cmp	r2, r3
 8009760:	d802      	bhi.n	8009768 <HAL_SPI_Receive+0x1bc>
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	3301      	adds	r3, #1
 8009766:	d102      	bne.n	800976e <HAL_SPI_Receive+0x1c2>
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d104      	bne.n	8009778 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 800976e:	2317      	movs	r3, #23
 8009770:	18fb      	adds	r3, r7, r3
 8009772:	2203      	movs	r2, #3
 8009774:	701a      	strb	r2, [r3, #0]
          goto error;
 8009776:	e051      	b.n	800981c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2246      	movs	r2, #70	; 0x46
 800977c:	5a9b      	ldrh	r3, [r3, r2]
 800977e:	b29b      	uxth	r3, r3
 8009780:	2b00      	cmp	r3, #0
 8009782:	d1c7      	bne.n	8009714 <HAL_SPI_Receive+0x168>
 8009784:	e035      	b.n	80097f2 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	689b      	ldr	r3, [r3, #8]
 800978c:	2201      	movs	r2, #1
 800978e:	4013      	ands	r3, r2
 8009790:	2b01      	cmp	r3, #1
 8009792:	d115      	bne.n	80097c0 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	68da      	ldr	r2, [r3, #12]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800979e:	b292      	uxth	r2, r2
 80097a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097a6:	1c9a      	adds	r2, r3, #2
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2246      	movs	r2, #70	; 0x46
 80097b0:	5a9b      	ldrh	r3, [r3, r2]
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	3b01      	subs	r3, #1
 80097b6:	b299      	uxth	r1, r3
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2246      	movs	r2, #70	; 0x46
 80097bc:	5299      	strh	r1, [r3, r2]
 80097be:	e012      	b.n	80097e6 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80097c0:	f7fb fe28 	bl	8005414 <HAL_GetTick>
 80097c4:	0002      	movs	r2, r0
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	1ad3      	subs	r3, r2, r3
 80097ca:	683a      	ldr	r2, [r7, #0]
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d802      	bhi.n	80097d6 <HAL_SPI_Receive+0x22a>
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	3301      	adds	r3, #1
 80097d4:	d102      	bne.n	80097dc <HAL_SPI_Receive+0x230>
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d104      	bne.n	80097e6 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 80097dc:	2317      	movs	r3, #23
 80097de:	18fb      	adds	r3, r7, r3
 80097e0:	2203      	movs	r2, #3
 80097e2:	701a      	strb	r2, [r3, #0]
          goto error;
 80097e4:	e01a      	b.n	800981c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2246      	movs	r2, #70	; 0x46
 80097ea:	5a9b      	ldrh	r3, [r3, r2]
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d1c9      	bne.n	8009786 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80097f2:	693a      	ldr	r2, [r7, #16]
 80097f4:	6839      	ldr	r1, [r7, #0]
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	0018      	movs	r0, r3
 80097fa:	f000 fc41 	bl	800a080 <SPI_EndRxTransaction>
 80097fe:	1e03      	subs	r3, r0, #0
 8009800:	d002      	beq.n	8009808 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2220      	movs	r2, #32
 8009806:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800980c:	2b00      	cmp	r3, #0
 800980e:	d004      	beq.n	800981a <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8009810:	2317      	movs	r3, #23
 8009812:	18fb      	adds	r3, r7, r3
 8009814:	2201      	movs	r2, #1
 8009816:	701a      	strb	r2, [r3, #0]
 8009818:	e000      	b.n	800981c <HAL_SPI_Receive+0x270>
  }

error :
 800981a:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	225d      	movs	r2, #93	; 0x5d
 8009820:	2101      	movs	r1, #1
 8009822:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	225c      	movs	r2, #92	; 0x5c
 8009828:	2100      	movs	r1, #0
 800982a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800982c:	2317      	movs	r3, #23
 800982e:	18fb      	adds	r3, r7, r3
 8009830:	781b      	ldrb	r3, [r3, #0]
}
 8009832:	0018      	movs	r0, r3
 8009834:	46bd      	mov	sp, r7
 8009836:	b007      	add	sp, #28
 8009838:	bd90      	pop	{r4, r7, pc}
 800983a:	46c0      	nop			; (mov r8, r8)
 800983c:	ffffefff 	.word	0xffffefff
 8009840:	ffffbfff 	.word	0xffffbfff

08009844 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b08a      	sub	sp, #40	; 0x28
 8009848:	af00      	add	r7, sp, #0
 800984a:	60f8      	str	r0, [r7, #12]
 800984c:	60b9      	str	r1, [r7, #8]
 800984e:	607a      	str	r2, [r7, #4]
 8009850:	001a      	movs	r2, r3
 8009852:	1cbb      	adds	r3, r7, #2
 8009854:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009856:	2301      	movs	r3, #1
 8009858:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800985a:	2323      	movs	r3, #35	; 0x23
 800985c:	18fb      	adds	r3, r7, r3
 800985e:	2200      	movs	r2, #0
 8009860:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	225c      	movs	r2, #92	; 0x5c
 8009866:	5c9b      	ldrb	r3, [r3, r2]
 8009868:	2b01      	cmp	r3, #1
 800986a:	d101      	bne.n	8009870 <HAL_SPI_TransmitReceive+0x2c>
 800986c:	2302      	movs	r3, #2
 800986e:	e1b5      	b.n	8009bdc <HAL_SPI_TransmitReceive+0x398>
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	225c      	movs	r2, #92	; 0x5c
 8009874:	2101      	movs	r1, #1
 8009876:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009878:	f7fb fdcc 	bl	8005414 <HAL_GetTick>
 800987c:	0003      	movs	r3, r0
 800987e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009880:	201b      	movs	r0, #27
 8009882:	183b      	adds	r3, r7, r0
 8009884:	68fa      	ldr	r2, [r7, #12]
 8009886:	215d      	movs	r1, #93	; 0x5d
 8009888:	5c52      	ldrb	r2, [r2, r1]
 800988a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8009892:	2312      	movs	r3, #18
 8009894:	18fb      	adds	r3, r7, r3
 8009896:	1cba      	adds	r2, r7, #2
 8009898:	8812      	ldrh	r2, [r2, #0]
 800989a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800989c:	183b      	adds	r3, r7, r0
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d011      	beq.n	80098c8 <HAL_SPI_TransmitReceive+0x84>
 80098a4:	697a      	ldr	r2, [r7, #20]
 80098a6:	2382      	movs	r3, #130	; 0x82
 80098a8:	005b      	lsls	r3, r3, #1
 80098aa:	429a      	cmp	r2, r3
 80098ac:	d107      	bne.n	80098be <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	689b      	ldr	r3, [r3, #8]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d103      	bne.n	80098be <HAL_SPI_TransmitReceive+0x7a>
 80098b6:	183b      	adds	r3, r7, r0
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	2b04      	cmp	r3, #4
 80098bc:	d004      	beq.n	80098c8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80098be:	2323      	movs	r3, #35	; 0x23
 80098c0:	18fb      	adds	r3, r7, r3
 80098c2:	2202      	movs	r2, #2
 80098c4:	701a      	strb	r2, [r3, #0]
    goto error;
 80098c6:	e17e      	b.n	8009bc6 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d006      	beq.n	80098dc <HAL_SPI_TransmitReceive+0x98>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d003      	beq.n	80098dc <HAL_SPI_TransmitReceive+0x98>
 80098d4:	1cbb      	adds	r3, r7, #2
 80098d6:	881b      	ldrh	r3, [r3, #0]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d104      	bne.n	80098e6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80098dc:	2323      	movs	r3, #35	; 0x23
 80098de:	18fb      	adds	r3, r7, r3
 80098e0:	2201      	movs	r2, #1
 80098e2:	701a      	strb	r2, [r3, #0]
    goto error;
 80098e4:	e16f      	b.n	8009bc6 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	225d      	movs	r2, #93	; 0x5d
 80098ea:	5c9b      	ldrb	r3, [r3, r2]
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	2b04      	cmp	r3, #4
 80098f0:	d003      	beq.n	80098fa <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	225d      	movs	r2, #93	; 0x5d
 80098f6:	2105      	movs	r1, #5
 80098f8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2200      	movs	r2, #0
 80098fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	687a      	ldr	r2, [r7, #4]
 8009904:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	1cba      	adds	r2, r7, #2
 800990a:	2146      	movs	r1, #70	; 0x46
 800990c:	8812      	ldrh	r2, [r2, #0]
 800990e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	1cba      	adds	r2, r7, #2
 8009914:	2144      	movs	r1, #68	; 0x44
 8009916:	8812      	ldrh	r2, [r2, #0]
 8009918:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	68ba      	ldr	r2, [r7, #8]
 800991e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	1cba      	adds	r2, r7, #2
 8009924:	8812      	ldrh	r2, [r2, #0]
 8009926:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	1cba      	adds	r2, r7, #2
 800992c:	8812      	ldrh	r2, [r2, #0]
 800992e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2200      	movs	r2, #0
 8009934:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2200      	movs	r2, #0
 800993a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	68da      	ldr	r2, [r3, #12]
 8009940:	23e0      	movs	r3, #224	; 0xe0
 8009942:	00db      	lsls	r3, r3, #3
 8009944:	429a      	cmp	r2, r3
 8009946:	d908      	bls.n	800995a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	685a      	ldr	r2, [r3, #4]
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	49a4      	ldr	r1, [pc, #656]	; (8009be4 <HAL_SPI_TransmitReceive+0x3a0>)
 8009954:	400a      	ands	r2, r1
 8009956:	605a      	str	r2, [r3, #4]
 8009958:	e008      	b.n	800996c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	685a      	ldr	r2, [r3, #4]
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	2180      	movs	r1, #128	; 0x80
 8009966:	0149      	lsls	r1, r1, #5
 8009968:	430a      	orrs	r2, r1
 800996a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	2240      	movs	r2, #64	; 0x40
 8009974:	4013      	ands	r3, r2
 8009976:	2b40      	cmp	r3, #64	; 0x40
 8009978:	d007      	beq.n	800998a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	681a      	ldr	r2, [r3, #0]
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	2140      	movs	r1, #64	; 0x40
 8009986:	430a      	orrs	r2, r1
 8009988:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	68da      	ldr	r2, [r3, #12]
 800998e:	23e0      	movs	r3, #224	; 0xe0
 8009990:	00db      	lsls	r3, r3, #3
 8009992:	429a      	cmp	r2, r3
 8009994:	d800      	bhi.n	8009998 <HAL_SPI_TransmitReceive+0x154>
 8009996:	e07f      	b.n	8009a98 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d005      	beq.n	80099ac <HAL_SPI_TransmitReceive+0x168>
 80099a0:	2312      	movs	r3, #18
 80099a2:	18fb      	adds	r3, r7, r3
 80099a4:	881b      	ldrh	r3, [r3, #0]
 80099a6:	2b01      	cmp	r3, #1
 80099a8:	d000      	beq.n	80099ac <HAL_SPI_TransmitReceive+0x168>
 80099aa:	e069      	b.n	8009a80 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099b0:	881a      	ldrh	r2, [r3, #0]
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099bc:	1c9a      	adds	r2, r3, #2
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099c6:	b29b      	uxth	r3, r3
 80099c8:	3b01      	subs	r3, #1
 80099ca:	b29a      	uxth	r2, r3
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80099d0:	e056      	b.n	8009a80 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	689b      	ldr	r3, [r3, #8]
 80099d8:	2202      	movs	r2, #2
 80099da:	4013      	ands	r3, r2
 80099dc:	2b02      	cmp	r3, #2
 80099de:	d11b      	bne.n	8009a18 <HAL_SPI_TransmitReceive+0x1d4>
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099e4:	b29b      	uxth	r3, r3
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d016      	beq.n	8009a18 <HAL_SPI_TransmitReceive+0x1d4>
 80099ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d113      	bne.n	8009a18 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099f4:	881a      	ldrh	r2, [r3, #0]
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a00:	1c9a      	adds	r2, r3, #2
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	3b01      	subs	r3, #1
 8009a0e:	b29a      	uxth	r2, r3
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009a14:	2300      	movs	r3, #0
 8009a16:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	689b      	ldr	r3, [r3, #8]
 8009a1e:	2201      	movs	r2, #1
 8009a20:	4013      	ands	r3, r2
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d11c      	bne.n	8009a60 <HAL_SPI_TransmitReceive+0x21c>
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	2246      	movs	r2, #70	; 0x46
 8009a2a:	5a9b      	ldrh	r3, [r3, r2]
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d016      	beq.n	8009a60 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	68da      	ldr	r2, [r3, #12]
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a3c:	b292      	uxth	r2, r2
 8009a3e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a44:	1c9a      	adds	r2, r3, #2
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2246      	movs	r2, #70	; 0x46
 8009a4e:	5a9b      	ldrh	r3, [r3, r2]
 8009a50:	b29b      	uxth	r3, r3
 8009a52:	3b01      	subs	r3, #1
 8009a54:	b299      	uxth	r1, r3
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2246      	movs	r2, #70	; 0x46
 8009a5a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009a60:	f7fb fcd8 	bl	8005414 <HAL_GetTick>
 8009a64:	0002      	movs	r2, r0
 8009a66:	69fb      	ldr	r3, [r7, #28]
 8009a68:	1ad3      	subs	r3, r2, r3
 8009a6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d807      	bhi.n	8009a80 <HAL_SPI_TransmitReceive+0x23c>
 8009a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a72:	3301      	adds	r3, #1
 8009a74:	d004      	beq.n	8009a80 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8009a76:	2323      	movs	r3, #35	; 0x23
 8009a78:	18fb      	adds	r3, r7, r3
 8009a7a:	2203      	movs	r2, #3
 8009a7c:	701a      	strb	r2, [r3, #0]
        goto error;
 8009a7e:	e0a2      	b.n	8009bc6 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d1a3      	bne.n	80099d2 <HAL_SPI_TransmitReceive+0x18e>
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2246      	movs	r2, #70	; 0x46
 8009a8e:	5a9b      	ldrh	r3, [r3, r2]
 8009a90:	b29b      	uxth	r3, r3
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d19d      	bne.n	80099d2 <HAL_SPI_TransmitReceive+0x18e>
 8009a96:	e085      	b.n	8009ba4 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	685b      	ldr	r3, [r3, #4]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d005      	beq.n	8009aac <HAL_SPI_TransmitReceive+0x268>
 8009aa0:	2312      	movs	r3, #18
 8009aa2:	18fb      	adds	r3, r7, r3
 8009aa4:	881b      	ldrh	r3, [r3, #0]
 8009aa6:	2b01      	cmp	r3, #1
 8009aa8:	d000      	beq.n	8009aac <HAL_SPI_TransmitReceive+0x268>
 8009aaa:	e070      	b.n	8009b8e <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	330c      	adds	r3, #12
 8009ab6:	7812      	ldrb	r2, [r2, #0]
 8009ab8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009abe:	1c5a      	adds	r2, r3, #1
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ac8:	b29b      	uxth	r3, r3
 8009aca:	3b01      	subs	r3, #1
 8009acc:	b29a      	uxth	r2, r3
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ad2:	e05c      	b.n	8009b8e <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	689b      	ldr	r3, [r3, #8]
 8009ada:	2202      	movs	r2, #2
 8009adc:	4013      	ands	r3, r2
 8009ade:	2b02      	cmp	r3, #2
 8009ae0:	d11c      	bne.n	8009b1c <HAL_SPI_TransmitReceive+0x2d8>
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ae6:	b29b      	uxth	r3, r3
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d017      	beq.n	8009b1c <HAL_SPI_TransmitReceive+0x2d8>
 8009aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	d114      	bne.n	8009b1c <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	330c      	adds	r3, #12
 8009afc:	7812      	ldrb	r2, [r2, #0]
 8009afe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b04:	1c5a      	adds	r2, r3, #1
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b0e:	b29b      	uxth	r3, r3
 8009b10:	3b01      	subs	r3, #1
 8009b12:	b29a      	uxth	r2, r3
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	689b      	ldr	r3, [r3, #8]
 8009b22:	2201      	movs	r2, #1
 8009b24:	4013      	ands	r3, r2
 8009b26:	2b01      	cmp	r3, #1
 8009b28:	d11e      	bne.n	8009b68 <HAL_SPI_TransmitReceive+0x324>
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2246      	movs	r2, #70	; 0x46
 8009b2e:	5a9b      	ldrh	r3, [r3, r2]
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d018      	beq.n	8009b68 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	330c      	adds	r3, #12
 8009b3c:	001a      	movs	r2, r3
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b42:	7812      	ldrb	r2, [r2, #0]
 8009b44:	b2d2      	uxtb	r2, r2
 8009b46:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b4c:	1c5a      	adds	r2, r3, #1
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2246      	movs	r2, #70	; 0x46
 8009b56:	5a9b      	ldrh	r3, [r3, r2]
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	3b01      	subs	r3, #1
 8009b5c:	b299      	uxth	r1, r3
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2246      	movs	r2, #70	; 0x46
 8009b62:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009b64:	2301      	movs	r3, #1
 8009b66:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009b68:	f7fb fc54 	bl	8005414 <HAL_GetTick>
 8009b6c:	0002      	movs	r2, r0
 8009b6e:	69fb      	ldr	r3, [r7, #28]
 8009b70:	1ad3      	subs	r3, r2, r3
 8009b72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b74:	429a      	cmp	r2, r3
 8009b76:	d802      	bhi.n	8009b7e <HAL_SPI_TransmitReceive+0x33a>
 8009b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	d102      	bne.n	8009b84 <HAL_SPI_TransmitReceive+0x340>
 8009b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d104      	bne.n	8009b8e <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8009b84:	2323      	movs	r3, #35	; 0x23
 8009b86:	18fb      	adds	r3, r7, r3
 8009b88:	2203      	movs	r2, #3
 8009b8a:	701a      	strb	r2, [r3, #0]
        goto error;
 8009b8c:	e01b      	b.n	8009bc6 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b92:	b29b      	uxth	r3, r3
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d19d      	bne.n	8009ad4 <HAL_SPI_TransmitReceive+0x290>
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	2246      	movs	r2, #70	; 0x46
 8009b9c:	5a9b      	ldrh	r3, [r3, r2]
 8009b9e:	b29b      	uxth	r3, r3
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d197      	bne.n	8009ad4 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009ba4:	69fa      	ldr	r2, [r7, #28]
 8009ba6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	0018      	movs	r0, r3
 8009bac:	f000 fac6 	bl	800a13c <SPI_EndRxTxTransaction>
 8009bb0:	1e03      	subs	r3, r0, #0
 8009bb2:	d007      	beq.n	8009bc4 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8009bb4:	2323      	movs	r3, #35	; 0x23
 8009bb6:	18fb      	adds	r3, r7, r3
 8009bb8:	2201      	movs	r2, #1
 8009bba:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	2220      	movs	r2, #32
 8009bc0:	661a      	str	r2, [r3, #96]	; 0x60
 8009bc2:	e000      	b.n	8009bc6 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8009bc4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	225d      	movs	r2, #93	; 0x5d
 8009bca:	2101      	movs	r1, #1
 8009bcc:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	225c      	movs	r2, #92	; 0x5c
 8009bd2:	2100      	movs	r1, #0
 8009bd4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009bd6:	2323      	movs	r3, #35	; 0x23
 8009bd8:	18fb      	adds	r3, r7, r3
 8009bda:	781b      	ldrb	r3, [r3, #0]
}
 8009bdc:	0018      	movs	r0, r3
 8009bde:	46bd      	mov	sp, r7
 8009be0:	b00a      	add	sp, #40	; 0x28
 8009be2:	bd80      	pop	{r7, pc}
 8009be4:	ffffefff 	.word	0xffffefff

08009be8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b088      	sub	sp, #32
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	685b      	ldr	r3, [r3, #4]
 8009bf6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	689b      	ldr	r3, [r3, #8]
 8009bfe:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009c00:	69bb      	ldr	r3, [r7, #24]
 8009c02:	099b      	lsrs	r3, r3, #6
 8009c04:	001a      	movs	r2, r3
 8009c06:	2301      	movs	r3, #1
 8009c08:	4013      	ands	r3, r2
 8009c0a:	d10f      	bne.n	8009c2c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009c0c:	69bb      	ldr	r3, [r7, #24]
 8009c0e:	2201      	movs	r2, #1
 8009c10:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009c12:	d00b      	beq.n	8009c2c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009c14:	69fb      	ldr	r3, [r7, #28]
 8009c16:	099b      	lsrs	r3, r3, #6
 8009c18:	001a      	movs	r2, r3
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	4013      	ands	r3, r2
 8009c1e:	d005      	beq.n	8009c2c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	0010      	movs	r0, r2
 8009c28:	4798      	blx	r3
    return;
 8009c2a:	e0d5      	b.n	8009dd8 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009c2c:	69bb      	ldr	r3, [r7, #24]
 8009c2e:	085b      	lsrs	r3, r3, #1
 8009c30:	001a      	movs	r2, r3
 8009c32:	2301      	movs	r3, #1
 8009c34:	4013      	ands	r3, r2
 8009c36:	d00b      	beq.n	8009c50 <HAL_SPI_IRQHandler+0x68>
 8009c38:	69fb      	ldr	r3, [r7, #28]
 8009c3a:	09db      	lsrs	r3, r3, #7
 8009c3c:	001a      	movs	r2, r3
 8009c3e:	2301      	movs	r3, #1
 8009c40:	4013      	ands	r3, r2
 8009c42:	d005      	beq.n	8009c50 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	0010      	movs	r0, r2
 8009c4c:	4798      	blx	r3
    return;
 8009c4e:	e0c3      	b.n	8009dd8 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009c50:	69bb      	ldr	r3, [r7, #24]
 8009c52:	095b      	lsrs	r3, r3, #5
 8009c54:	001a      	movs	r2, r3
 8009c56:	2301      	movs	r3, #1
 8009c58:	4013      	ands	r3, r2
 8009c5a:	d10c      	bne.n	8009c76 <HAL_SPI_IRQHandler+0x8e>
 8009c5c:	69bb      	ldr	r3, [r7, #24]
 8009c5e:	099b      	lsrs	r3, r3, #6
 8009c60:	001a      	movs	r2, r3
 8009c62:	2301      	movs	r3, #1
 8009c64:	4013      	ands	r3, r2
 8009c66:	d106      	bne.n	8009c76 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009c68:	69bb      	ldr	r3, [r7, #24]
 8009c6a:	0a1b      	lsrs	r3, r3, #8
 8009c6c:	001a      	movs	r2, r3
 8009c6e:	2301      	movs	r3, #1
 8009c70:	4013      	ands	r3, r2
 8009c72:	d100      	bne.n	8009c76 <HAL_SPI_IRQHandler+0x8e>
 8009c74:	e0b0      	b.n	8009dd8 <HAL_SPI_IRQHandler+0x1f0>
 8009c76:	69fb      	ldr	r3, [r7, #28]
 8009c78:	095b      	lsrs	r3, r3, #5
 8009c7a:	001a      	movs	r2, r3
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	4013      	ands	r3, r2
 8009c80:	d100      	bne.n	8009c84 <HAL_SPI_IRQHandler+0x9c>
 8009c82:	e0a9      	b.n	8009dd8 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009c84:	69bb      	ldr	r3, [r7, #24]
 8009c86:	099b      	lsrs	r3, r3, #6
 8009c88:	001a      	movs	r2, r3
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	4013      	ands	r3, r2
 8009c8e:	d023      	beq.n	8009cd8 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	225d      	movs	r2, #93	; 0x5d
 8009c94:	5c9b      	ldrb	r3, [r3, r2]
 8009c96:	b2db      	uxtb	r3, r3
 8009c98:	2b03      	cmp	r3, #3
 8009c9a:	d011      	beq.n	8009cc0 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ca0:	2204      	movs	r2, #4
 8009ca2:	431a      	orrs	r2, r3
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009ca8:	2300      	movs	r3, #0
 8009caa:	617b      	str	r3, [r7, #20]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	68db      	ldr	r3, [r3, #12]
 8009cb2:	617b      	str	r3, [r7, #20]
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	689b      	ldr	r3, [r3, #8]
 8009cba:	617b      	str	r3, [r7, #20]
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	e00b      	b.n	8009cd8 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	613b      	str	r3, [r7, #16]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	68db      	ldr	r3, [r3, #12]
 8009cca:	613b      	str	r3, [r7, #16]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	689b      	ldr	r3, [r3, #8]
 8009cd2:	613b      	str	r3, [r7, #16]
 8009cd4:	693b      	ldr	r3, [r7, #16]
        return;
 8009cd6:	e07f      	b.n	8009dd8 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009cd8:	69bb      	ldr	r3, [r7, #24]
 8009cda:	095b      	lsrs	r3, r3, #5
 8009cdc:	001a      	movs	r2, r3
 8009cde:	2301      	movs	r3, #1
 8009ce0:	4013      	ands	r3, r2
 8009ce2:	d014      	beq.n	8009d0e <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ce8:	2201      	movs	r2, #1
 8009cea:	431a      	orrs	r2, r3
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	60fb      	str	r3, [r7, #12]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	689b      	ldr	r3, [r3, #8]
 8009cfa:	60fb      	str	r3, [r7, #12]
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	681a      	ldr	r2, [r3, #0]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	2140      	movs	r1, #64	; 0x40
 8009d08:	438a      	bics	r2, r1
 8009d0a:	601a      	str	r2, [r3, #0]
 8009d0c:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009d0e:	69bb      	ldr	r3, [r7, #24]
 8009d10:	0a1b      	lsrs	r3, r3, #8
 8009d12:	001a      	movs	r2, r3
 8009d14:	2301      	movs	r3, #1
 8009d16:	4013      	ands	r3, r2
 8009d18:	d00c      	beq.n	8009d34 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d1e:	2208      	movs	r2, #8
 8009d20:	431a      	orrs	r2, r3
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009d26:	2300      	movs	r3, #0
 8009d28:	60bb      	str	r3, [r7, #8]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	689b      	ldr	r3, [r3, #8]
 8009d30:	60bb      	str	r3, [r7, #8]
 8009d32:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d04c      	beq.n	8009dd6 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	685a      	ldr	r2, [r3, #4]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	21e0      	movs	r1, #224	; 0xe0
 8009d48:	438a      	bics	r2, r1
 8009d4a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	225d      	movs	r2, #93	; 0x5d
 8009d50:	2101      	movs	r1, #1
 8009d52:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009d54:	69fb      	ldr	r3, [r7, #28]
 8009d56:	2202      	movs	r2, #2
 8009d58:	4013      	ands	r3, r2
 8009d5a:	d103      	bne.n	8009d64 <HAL_SPI_IRQHandler+0x17c>
 8009d5c:	69fb      	ldr	r3, [r7, #28]
 8009d5e:	2201      	movs	r2, #1
 8009d60:	4013      	ands	r3, r2
 8009d62:	d032      	beq.n	8009dca <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	685a      	ldr	r2, [r3, #4]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	2103      	movs	r1, #3
 8009d70:	438a      	bics	r2, r1
 8009d72:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d010      	beq.n	8009d9e <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d80:	4a17      	ldr	r2, [pc, #92]	; (8009de0 <HAL_SPI_IRQHandler+0x1f8>)
 8009d82:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d88:	0018      	movs	r0, r3
 8009d8a:	f7fb ffd5 	bl	8005d38 <HAL_DMA_Abort_IT>
 8009d8e:	1e03      	subs	r3, r0, #0
 8009d90:	d005      	beq.n	8009d9e <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d96:	2240      	movs	r2, #64	; 0x40
 8009d98:	431a      	orrs	r2, r3
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d016      	beq.n	8009dd4 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009daa:	4a0d      	ldr	r2, [pc, #52]	; (8009de0 <HAL_SPI_IRQHandler+0x1f8>)
 8009dac:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009db2:	0018      	movs	r0, r3
 8009db4:	f7fb ffc0 	bl	8005d38 <HAL_DMA_Abort_IT>
 8009db8:	1e03      	subs	r3, r0, #0
 8009dba:	d00b      	beq.n	8009dd4 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009dc0:	2240      	movs	r2, #64	; 0x40
 8009dc2:	431a      	orrs	r2, r3
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8009dc8:	e004      	b.n	8009dd4 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	0018      	movs	r0, r3
 8009dce:	f000 f809 	bl	8009de4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009dd2:	e000      	b.n	8009dd6 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8009dd4:	46c0      	nop			; (mov r8, r8)
    return;
 8009dd6:	46c0      	nop			; (mov r8, r8)
  }
}
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	b008      	add	sp, #32
 8009ddc:	bd80      	pop	{r7, pc}
 8009dde:	46c0      	nop			; (mov r8, r8)
 8009de0:	08009df5 	.word	0x08009df5

08009de4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b082      	sub	sp, #8
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009dec:	46c0      	nop			; (mov r8, r8)
 8009dee:	46bd      	mov	sp, r7
 8009df0:	b002      	add	sp, #8
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e00:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	2246      	movs	r2, #70	; 0x46
 8009e06:	2100      	movs	r1, #0
 8009e08:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	0018      	movs	r0, r3
 8009e14:	f7ff ffe6 	bl	8009de4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009e18:	46c0      	nop			; (mov r8, r8)
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	b004      	add	sp, #16
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b088      	sub	sp, #32
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	60f8      	str	r0, [r7, #12]
 8009e28:	60b9      	str	r1, [r7, #8]
 8009e2a:	603b      	str	r3, [r7, #0]
 8009e2c:	1dfb      	adds	r3, r7, #7
 8009e2e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009e30:	f7fb faf0 	bl	8005414 <HAL_GetTick>
 8009e34:	0002      	movs	r2, r0
 8009e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e38:	1a9b      	subs	r3, r3, r2
 8009e3a:	683a      	ldr	r2, [r7, #0]
 8009e3c:	18d3      	adds	r3, r2, r3
 8009e3e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009e40:	f7fb fae8 	bl	8005414 <HAL_GetTick>
 8009e44:	0003      	movs	r3, r0
 8009e46:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009e48:	4b3a      	ldr	r3, [pc, #232]	; (8009f34 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	015b      	lsls	r3, r3, #5
 8009e4e:	0d1b      	lsrs	r3, r3, #20
 8009e50:	69fa      	ldr	r2, [r7, #28]
 8009e52:	4353      	muls	r3, r2
 8009e54:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009e56:	e058      	b.n	8009f0a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	3301      	adds	r3, #1
 8009e5c:	d055      	beq.n	8009f0a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009e5e:	f7fb fad9 	bl	8005414 <HAL_GetTick>
 8009e62:	0002      	movs	r2, r0
 8009e64:	69bb      	ldr	r3, [r7, #24]
 8009e66:	1ad3      	subs	r3, r2, r3
 8009e68:	69fa      	ldr	r2, [r7, #28]
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d902      	bls.n	8009e74 <SPI_WaitFlagStateUntilTimeout+0x54>
 8009e6e:	69fb      	ldr	r3, [r7, #28]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d142      	bne.n	8009efa <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	685a      	ldr	r2, [r3, #4]
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	21e0      	movs	r1, #224	; 0xe0
 8009e80:	438a      	bics	r2, r1
 8009e82:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	685a      	ldr	r2, [r3, #4]
 8009e88:	2382      	movs	r3, #130	; 0x82
 8009e8a:	005b      	lsls	r3, r3, #1
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d113      	bne.n	8009eb8 <SPI_WaitFlagStateUntilTimeout+0x98>
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	689a      	ldr	r2, [r3, #8]
 8009e94:	2380      	movs	r3, #128	; 0x80
 8009e96:	021b      	lsls	r3, r3, #8
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d005      	beq.n	8009ea8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	689a      	ldr	r2, [r3, #8]
 8009ea0:	2380      	movs	r3, #128	; 0x80
 8009ea2:	00db      	lsls	r3, r3, #3
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	d107      	bne.n	8009eb8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	681a      	ldr	r2, [r3, #0]
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	2140      	movs	r1, #64	; 0x40
 8009eb4:	438a      	bics	r2, r1
 8009eb6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ebc:	2380      	movs	r3, #128	; 0x80
 8009ebe:	019b      	lsls	r3, r3, #6
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	d110      	bne.n	8009ee6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	681a      	ldr	r2, [r3, #0]
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	491a      	ldr	r1, [pc, #104]	; (8009f38 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8009ed0:	400a      	ands	r2, r1
 8009ed2:	601a      	str	r2, [r3, #0]
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	681a      	ldr	r2, [r3, #0]
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	2180      	movs	r1, #128	; 0x80
 8009ee0:	0189      	lsls	r1, r1, #6
 8009ee2:	430a      	orrs	r2, r1
 8009ee4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	225d      	movs	r2, #93	; 0x5d
 8009eea:	2101      	movs	r1, #1
 8009eec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	225c      	movs	r2, #92	; 0x5c
 8009ef2:	2100      	movs	r1, #0
 8009ef4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009ef6:	2303      	movs	r3, #3
 8009ef8:	e017      	b.n	8009f2a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d101      	bne.n	8009f04 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8009f00:	2300      	movs	r3, #0
 8009f02:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	3b01      	subs	r3, #1
 8009f08:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	689b      	ldr	r3, [r3, #8]
 8009f10:	68ba      	ldr	r2, [r7, #8]
 8009f12:	4013      	ands	r3, r2
 8009f14:	68ba      	ldr	r2, [r7, #8]
 8009f16:	1ad3      	subs	r3, r2, r3
 8009f18:	425a      	negs	r2, r3
 8009f1a:	4153      	adcs	r3, r2
 8009f1c:	b2db      	uxtb	r3, r3
 8009f1e:	001a      	movs	r2, r3
 8009f20:	1dfb      	adds	r3, r7, #7
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d197      	bne.n	8009e58 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009f28:	2300      	movs	r3, #0
}
 8009f2a:	0018      	movs	r0, r3
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	b008      	add	sp, #32
 8009f30:	bd80      	pop	{r7, pc}
 8009f32:	46c0      	nop			; (mov r8, r8)
 8009f34:	20000034 	.word	0x20000034
 8009f38:	ffffdfff 	.word	0xffffdfff

08009f3c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b08a      	sub	sp, #40	; 0x28
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	60f8      	str	r0, [r7, #12]
 8009f44:	60b9      	str	r1, [r7, #8]
 8009f46:	607a      	str	r2, [r7, #4]
 8009f48:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009f4a:	2317      	movs	r3, #23
 8009f4c:	18fb      	adds	r3, r7, r3
 8009f4e:	2200      	movs	r2, #0
 8009f50:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009f52:	f7fb fa5f 	bl	8005414 <HAL_GetTick>
 8009f56:	0002      	movs	r2, r0
 8009f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f5a:	1a9b      	subs	r3, r3, r2
 8009f5c:	683a      	ldr	r2, [r7, #0]
 8009f5e:	18d3      	adds	r3, r2, r3
 8009f60:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009f62:	f7fb fa57 	bl	8005414 <HAL_GetTick>
 8009f66:	0003      	movs	r3, r0
 8009f68:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	330c      	adds	r3, #12
 8009f70:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009f72:	4b41      	ldr	r3, [pc, #260]	; (800a078 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8009f74:	681a      	ldr	r2, [r3, #0]
 8009f76:	0013      	movs	r3, r2
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	189b      	adds	r3, r3, r2
 8009f7c:	00da      	lsls	r2, r3, #3
 8009f7e:	1ad3      	subs	r3, r2, r3
 8009f80:	0d1b      	lsrs	r3, r3, #20
 8009f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f84:	4353      	muls	r3, r2
 8009f86:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009f88:	e068      	b.n	800a05c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009f8a:	68ba      	ldr	r2, [r7, #8]
 8009f8c:	23c0      	movs	r3, #192	; 0xc0
 8009f8e:	00db      	lsls	r3, r3, #3
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d10a      	bne.n	8009faa <SPI_WaitFifoStateUntilTimeout+0x6e>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d107      	bne.n	8009faa <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009f9a:	69fb      	ldr	r3, [r7, #28]
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	b2da      	uxtb	r2, r3
 8009fa0:	2117      	movs	r1, #23
 8009fa2:	187b      	adds	r3, r7, r1
 8009fa4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009fa6:	187b      	adds	r3, r7, r1
 8009fa8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	3301      	adds	r3, #1
 8009fae:	d055      	beq.n	800a05c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009fb0:	f7fb fa30 	bl	8005414 <HAL_GetTick>
 8009fb4:	0002      	movs	r2, r0
 8009fb6:	6a3b      	ldr	r3, [r7, #32]
 8009fb8:	1ad3      	subs	r3, r2, r3
 8009fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	d902      	bls.n	8009fc6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8009fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d142      	bne.n	800a04c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	685a      	ldr	r2, [r3, #4]
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	21e0      	movs	r1, #224	; 0xe0
 8009fd2:	438a      	bics	r2, r1
 8009fd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	685a      	ldr	r2, [r3, #4]
 8009fda:	2382      	movs	r3, #130	; 0x82
 8009fdc:	005b      	lsls	r3, r3, #1
 8009fde:	429a      	cmp	r2, r3
 8009fe0:	d113      	bne.n	800a00a <SPI_WaitFifoStateUntilTimeout+0xce>
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	689a      	ldr	r2, [r3, #8]
 8009fe6:	2380      	movs	r3, #128	; 0x80
 8009fe8:	021b      	lsls	r3, r3, #8
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d005      	beq.n	8009ffa <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	689a      	ldr	r2, [r3, #8]
 8009ff2:	2380      	movs	r3, #128	; 0x80
 8009ff4:	00db      	lsls	r3, r3, #3
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	d107      	bne.n	800a00a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	681a      	ldr	r2, [r3, #0]
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	2140      	movs	r1, #64	; 0x40
 800a006:	438a      	bics	r2, r1
 800a008:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a00e:	2380      	movs	r3, #128	; 0x80
 800a010:	019b      	lsls	r3, r3, #6
 800a012:	429a      	cmp	r2, r3
 800a014:	d110      	bne.n	800a038 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	681a      	ldr	r2, [r3, #0]
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4916      	ldr	r1, [pc, #88]	; (800a07c <SPI_WaitFifoStateUntilTimeout+0x140>)
 800a022:	400a      	ands	r2, r1
 800a024:	601a      	str	r2, [r3, #0]
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	681a      	ldr	r2, [r3, #0]
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	2180      	movs	r1, #128	; 0x80
 800a032:	0189      	lsls	r1, r1, #6
 800a034:	430a      	orrs	r2, r1
 800a036:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	225d      	movs	r2, #93	; 0x5d
 800a03c:	2101      	movs	r1, #1
 800a03e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	225c      	movs	r2, #92	; 0x5c
 800a044:	2100      	movs	r1, #0
 800a046:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a048:	2303      	movs	r3, #3
 800a04a:	e010      	b.n	800a06e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a04c:	69bb      	ldr	r3, [r7, #24]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d101      	bne.n	800a056 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800a052:	2300      	movs	r3, #0
 800a054:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800a056:	69bb      	ldr	r3, [r7, #24]
 800a058:	3b01      	subs	r3, #1
 800a05a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	689b      	ldr	r3, [r3, #8]
 800a062:	68ba      	ldr	r2, [r7, #8]
 800a064:	4013      	ands	r3, r2
 800a066:	687a      	ldr	r2, [r7, #4]
 800a068:	429a      	cmp	r2, r3
 800a06a:	d18e      	bne.n	8009f8a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800a06c:	2300      	movs	r3, #0
}
 800a06e:	0018      	movs	r0, r3
 800a070:	46bd      	mov	sp, r7
 800a072:	b00a      	add	sp, #40	; 0x28
 800a074:	bd80      	pop	{r7, pc}
 800a076:	46c0      	nop			; (mov r8, r8)
 800a078:	20000034 	.word	0x20000034
 800a07c:	ffffdfff 	.word	0xffffdfff

0800a080 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b086      	sub	sp, #24
 800a084:	af02      	add	r7, sp, #8
 800a086:	60f8      	str	r0, [r7, #12]
 800a088:	60b9      	str	r1, [r7, #8]
 800a08a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	685a      	ldr	r2, [r3, #4]
 800a090:	2382      	movs	r3, #130	; 0x82
 800a092:	005b      	lsls	r3, r3, #1
 800a094:	429a      	cmp	r2, r3
 800a096:	d113      	bne.n	800a0c0 <SPI_EndRxTransaction+0x40>
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	689a      	ldr	r2, [r3, #8]
 800a09c:	2380      	movs	r3, #128	; 0x80
 800a09e:	021b      	lsls	r3, r3, #8
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d005      	beq.n	800a0b0 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	689a      	ldr	r2, [r3, #8]
 800a0a8:	2380      	movs	r3, #128	; 0x80
 800a0aa:	00db      	lsls	r3, r3, #3
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d107      	bne.n	800a0c0 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	681a      	ldr	r2, [r3, #0]
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	2140      	movs	r1, #64	; 0x40
 800a0bc:	438a      	bics	r2, r1
 800a0be:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a0c0:	68ba      	ldr	r2, [r7, #8]
 800a0c2:	68f8      	ldr	r0, [r7, #12]
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	9300      	str	r3, [sp, #0]
 800a0c8:	0013      	movs	r3, r2
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	2180      	movs	r1, #128	; 0x80
 800a0ce:	f7ff fea7 	bl	8009e20 <SPI_WaitFlagStateUntilTimeout>
 800a0d2:	1e03      	subs	r3, r0, #0
 800a0d4:	d007      	beq.n	800a0e6 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0da:	2220      	movs	r2, #32
 800a0dc:	431a      	orrs	r2, r3
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a0e2:	2303      	movs	r3, #3
 800a0e4:	e026      	b.n	800a134 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	685a      	ldr	r2, [r3, #4]
 800a0ea:	2382      	movs	r3, #130	; 0x82
 800a0ec:	005b      	lsls	r3, r3, #1
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d11f      	bne.n	800a132 <SPI_EndRxTransaction+0xb2>
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	689a      	ldr	r2, [r3, #8]
 800a0f6:	2380      	movs	r3, #128	; 0x80
 800a0f8:	021b      	lsls	r3, r3, #8
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	d005      	beq.n	800a10a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	689a      	ldr	r2, [r3, #8]
 800a102:	2380      	movs	r3, #128	; 0x80
 800a104:	00db      	lsls	r3, r3, #3
 800a106:	429a      	cmp	r2, r3
 800a108:	d113      	bne.n	800a132 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a10a:	68ba      	ldr	r2, [r7, #8]
 800a10c:	23c0      	movs	r3, #192	; 0xc0
 800a10e:	00d9      	lsls	r1, r3, #3
 800a110:	68f8      	ldr	r0, [r7, #12]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	9300      	str	r3, [sp, #0]
 800a116:	0013      	movs	r3, r2
 800a118:	2200      	movs	r2, #0
 800a11a:	f7ff ff0f 	bl	8009f3c <SPI_WaitFifoStateUntilTimeout>
 800a11e:	1e03      	subs	r3, r0, #0
 800a120:	d007      	beq.n	800a132 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a126:	2220      	movs	r2, #32
 800a128:	431a      	orrs	r2, r3
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800a12e:	2303      	movs	r3, #3
 800a130:	e000      	b.n	800a134 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800a132:	2300      	movs	r3, #0
}
 800a134:	0018      	movs	r0, r3
 800a136:	46bd      	mov	sp, r7
 800a138:	b004      	add	sp, #16
 800a13a:	bd80      	pop	{r7, pc}

0800a13c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b086      	sub	sp, #24
 800a140:	af02      	add	r7, sp, #8
 800a142:	60f8      	str	r0, [r7, #12]
 800a144:	60b9      	str	r1, [r7, #8]
 800a146:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a148:	68ba      	ldr	r2, [r7, #8]
 800a14a:	23c0      	movs	r3, #192	; 0xc0
 800a14c:	0159      	lsls	r1, r3, #5
 800a14e:	68f8      	ldr	r0, [r7, #12]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	9300      	str	r3, [sp, #0]
 800a154:	0013      	movs	r3, r2
 800a156:	2200      	movs	r2, #0
 800a158:	f7ff fef0 	bl	8009f3c <SPI_WaitFifoStateUntilTimeout>
 800a15c:	1e03      	subs	r3, r0, #0
 800a15e:	d007      	beq.n	800a170 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a164:	2220      	movs	r2, #32
 800a166:	431a      	orrs	r2, r3
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a16c:	2303      	movs	r3, #3
 800a16e:	e027      	b.n	800a1c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a170:	68ba      	ldr	r2, [r7, #8]
 800a172:	68f8      	ldr	r0, [r7, #12]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	9300      	str	r3, [sp, #0]
 800a178:	0013      	movs	r3, r2
 800a17a:	2200      	movs	r2, #0
 800a17c:	2180      	movs	r1, #128	; 0x80
 800a17e:	f7ff fe4f 	bl	8009e20 <SPI_WaitFlagStateUntilTimeout>
 800a182:	1e03      	subs	r3, r0, #0
 800a184:	d007      	beq.n	800a196 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a18a:	2220      	movs	r2, #32
 800a18c:	431a      	orrs	r2, r3
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a192:	2303      	movs	r3, #3
 800a194:	e014      	b.n	800a1c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a196:	68ba      	ldr	r2, [r7, #8]
 800a198:	23c0      	movs	r3, #192	; 0xc0
 800a19a:	00d9      	lsls	r1, r3, #3
 800a19c:	68f8      	ldr	r0, [r7, #12]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	9300      	str	r3, [sp, #0]
 800a1a2:	0013      	movs	r3, r2
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	f7ff fec9 	bl	8009f3c <SPI_WaitFifoStateUntilTimeout>
 800a1aa:	1e03      	subs	r3, r0, #0
 800a1ac:	d007      	beq.n	800a1be <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1b2:	2220      	movs	r2, #32
 800a1b4:	431a      	orrs	r2, r3
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a1ba:	2303      	movs	r3, #3
 800a1bc:	e000      	b.n	800a1c0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a1be:	2300      	movs	r3, #0
}
 800a1c0:	0018      	movs	r0, r3
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	b004      	add	sp, #16
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b082      	sub	sp, #8
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d101      	bne.n	800a1da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	e04a      	b.n	800a270 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	223d      	movs	r2, #61	; 0x3d
 800a1de:	5c9b      	ldrb	r3, [r3, r2]
 800a1e0:	b2db      	uxtb	r3, r3
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d107      	bne.n	800a1f6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	223c      	movs	r2, #60	; 0x3c
 800a1ea:	2100      	movs	r1, #0
 800a1ec:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	0018      	movs	r0, r3
 800a1f2:	f7fa fe73 	bl	8004edc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	223d      	movs	r2, #61	; 0x3d
 800a1fa:	2102      	movs	r1, #2
 800a1fc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681a      	ldr	r2, [r3, #0]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	3304      	adds	r3, #4
 800a206:	0019      	movs	r1, r3
 800a208:	0010      	movs	r0, r2
 800a20a:	f000 fb55 	bl	800a8b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2248      	movs	r2, #72	; 0x48
 800a212:	2101      	movs	r1, #1
 800a214:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	223e      	movs	r2, #62	; 0x3e
 800a21a:	2101      	movs	r1, #1
 800a21c:	5499      	strb	r1, [r3, r2]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	223f      	movs	r2, #63	; 0x3f
 800a222:	2101      	movs	r1, #1
 800a224:	5499      	strb	r1, [r3, r2]
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2240      	movs	r2, #64	; 0x40
 800a22a:	2101      	movs	r1, #1
 800a22c:	5499      	strb	r1, [r3, r2]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2241      	movs	r2, #65	; 0x41
 800a232:	2101      	movs	r1, #1
 800a234:	5499      	strb	r1, [r3, r2]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2242      	movs	r2, #66	; 0x42
 800a23a:	2101      	movs	r1, #1
 800a23c:	5499      	strb	r1, [r3, r2]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2243      	movs	r2, #67	; 0x43
 800a242:	2101      	movs	r1, #1
 800a244:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2244      	movs	r2, #68	; 0x44
 800a24a:	2101      	movs	r1, #1
 800a24c:	5499      	strb	r1, [r3, r2]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2245      	movs	r2, #69	; 0x45
 800a252:	2101      	movs	r1, #1
 800a254:	5499      	strb	r1, [r3, r2]
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2246      	movs	r2, #70	; 0x46
 800a25a:	2101      	movs	r1, #1
 800a25c:	5499      	strb	r1, [r3, r2]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2247      	movs	r2, #71	; 0x47
 800a262:	2101      	movs	r1, #1
 800a264:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	223d      	movs	r2, #61	; 0x3d
 800a26a:	2101      	movs	r1, #1
 800a26c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a26e:	2300      	movs	r3, #0
}
 800a270:	0018      	movs	r0, r3
 800a272:	46bd      	mov	sp, r7
 800a274:	b002      	add	sp, #8
 800a276:	bd80      	pop	{r7, pc}

0800a278 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b082      	sub	sp, #8
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d101      	bne.n	800a28a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a286:	2301      	movs	r3, #1
 800a288:	e04a      	b.n	800a320 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	223d      	movs	r2, #61	; 0x3d
 800a28e:	5c9b      	ldrb	r3, [r3, r2]
 800a290:	b2db      	uxtb	r3, r3
 800a292:	2b00      	cmp	r3, #0
 800a294:	d107      	bne.n	800a2a6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	223c      	movs	r2, #60	; 0x3c
 800a29a:	2100      	movs	r1, #0
 800a29c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	0018      	movs	r0, r3
 800a2a2:	f000 f841 	bl	800a328 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	223d      	movs	r2, #61	; 0x3d
 800a2aa:	2102      	movs	r1, #2
 800a2ac:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681a      	ldr	r2, [r3, #0]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	3304      	adds	r3, #4
 800a2b6:	0019      	movs	r1, r3
 800a2b8:	0010      	movs	r0, r2
 800a2ba:	f000 fafd 	bl	800a8b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2248      	movs	r2, #72	; 0x48
 800a2c2:	2101      	movs	r1, #1
 800a2c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	223e      	movs	r2, #62	; 0x3e
 800a2ca:	2101      	movs	r1, #1
 800a2cc:	5499      	strb	r1, [r3, r2]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	223f      	movs	r2, #63	; 0x3f
 800a2d2:	2101      	movs	r1, #1
 800a2d4:	5499      	strb	r1, [r3, r2]
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2240      	movs	r2, #64	; 0x40
 800a2da:	2101      	movs	r1, #1
 800a2dc:	5499      	strb	r1, [r3, r2]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2241      	movs	r2, #65	; 0x41
 800a2e2:	2101      	movs	r1, #1
 800a2e4:	5499      	strb	r1, [r3, r2]
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2242      	movs	r2, #66	; 0x42
 800a2ea:	2101      	movs	r1, #1
 800a2ec:	5499      	strb	r1, [r3, r2]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2243      	movs	r2, #67	; 0x43
 800a2f2:	2101      	movs	r1, #1
 800a2f4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2244      	movs	r2, #68	; 0x44
 800a2fa:	2101      	movs	r1, #1
 800a2fc:	5499      	strb	r1, [r3, r2]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2245      	movs	r2, #69	; 0x45
 800a302:	2101      	movs	r1, #1
 800a304:	5499      	strb	r1, [r3, r2]
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2246      	movs	r2, #70	; 0x46
 800a30a:	2101      	movs	r1, #1
 800a30c:	5499      	strb	r1, [r3, r2]
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2247      	movs	r2, #71	; 0x47
 800a312:	2101      	movs	r1, #1
 800a314:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	223d      	movs	r2, #61	; 0x3d
 800a31a:	2101      	movs	r1, #1
 800a31c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a31e:	2300      	movs	r3, #0
}
 800a320:	0018      	movs	r0, r3
 800a322:	46bd      	mov	sp, r7
 800a324:	b002      	add	sp, #8
 800a326:	bd80      	pop	{r7, pc}

0800a328 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b082      	sub	sp, #8
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a330:	46c0      	nop			; (mov r8, r8)
 800a332:	46bd      	mov	sp, r7
 800a334:	b002      	add	sp, #8
 800a336:	bd80      	pop	{r7, pc}

0800a338 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b084      	sub	sp, #16
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d108      	bne.n	800a35a <HAL_TIM_PWM_Start+0x22>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	223e      	movs	r2, #62	; 0x3e
 800a34c:	5c9b      	ldrb	r3, [r3, r2]
 800a34e:	b2db      	uxtb	r3, r3
 800a350:	3b01      	subs	r3, #1
 800a352:	1e5a      	subs	r2, r3, #1
 800a354:	4193      	sbcs	r3, r2
 800a356:	b2db      	uxtb	r3, r3
 800a358:	e037      	b.n	800a3ca <HAL_TIM_PWM_Start+0x92>
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	2b04      	cmp	r3, #4
 800a35e:	d108      	bne.n	800a372 <HAL_TIM_PWM_Start+0x3a>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	223f      	movs	r2, #63	; 0x3f
 800a364:	5c9b      	ldrb	r3, [r3, r2]
 800a366:	b2db      	uxtb	r3, r3
 800a368:	3b01      	subs	r3, #1
 800a36a:	1e5a      	subs	r2, r3, #1
 800a36c:	4193      	sbcs	r3, r2
 800a36e:	b2db      	uxtb	r3, r3
 800a370:	e02b      	b.n	800a3ca <HAL_TIM_PWM_Start+0x92>
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	2b08      	cmp	r3, #8
 800a376:	d108      	bne.n	800a38a <HAL_TIM_PWM_Start+0x52>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2240      	movs	r2, #64	; 0x40
 800a37c:	5c9b      	ldrb	r3, [r3, r2]
 800a37e:	b2db      	uxtb	r3, r3
 800a380:	3b01      	subs	r3, #1
 800a382:	1e5a      	subs	r2, r3, #1
 800a384:	4193      	sbcs	r3, r2
 800a386:	b2db      	uxtb	r3, r3
 800a388:	e01f      	b.n	800a3ca <HAL_TIM_PWM_Start+0x92>
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	2b0c      	cmp	r3, #12
 800a38e:	d108      	bne.n	800a3a2 <HAL_TIM_PWM_Start+0x6a>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2241      	movs	r2, #65	; 0x41
 800a394:	5c9b      	ldrb	r3, [r3, r2]
 800a396:	b2db      	uxtb	r3, r3
 800a398:	3b01      	subs	r3, #1
 800a39a:	1e5a      	subs	r2, r3, #1
 800a39c:	4193      	sbcs	r3, r2
 800a39e:	b2db      	uxtb	r3, r3
 800a3a0:	e013      	b.n	800a3ca <HAL_TIM_PWM_Start+0x92>
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	2b10      	cmp	r3, #16
 800a3a6:	d108      	bne.n	800a3ba <HAL_TIM_PWM_Start+0x82>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2242      	movs	r2, #66	; 0x42
 800a3ac:	5c9b      	ldrb	r3, [r3, r2]
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	3b01      	subs	r3, #1
 800a3b2:	1e5a      	subs	r2, r3, #1
 800a3b4:	4193      	sbcs	r3, r2
 800a3b6:	b2db      	uxtb	r3, r3
 800a3b8:	e007      	b.n	800a3ca <HAL_TIM_PWM_Start+0x92>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2243      	movs	r2, #67	; 0x43
 800a3be:	5c9b      	ldrb	r3, [r3, r2]
 800a3c0:	b2db      	uxtb	r3, r3
 800a3c2:	3b01      	subs	r3, #1
 800a3c4:	1e5a      	subs	r2, r3, #1
 800a3c6:	4193      	sbcs	r3, r2
 800a3c8:	b2db      	uxtb	r3, r3
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d001      	beq.n	800a3d2 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	e08b      	b.n	800a4ea <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d104      	bne.n	800a3e2 <HAL_TIM_PWM_Start+0xaa>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	223e      	movs	r2, #62	; 0x3e
 800a3dc:	2102      	movs	r1, #2
 800a3de:	5499      	strb	r1, [r3, r2]
 800a3e0:	e023      	b.n	800a42a <HAL_TIM_PWM_Start+0xf2>
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	2b04      	cmp	r3, #4
 800a3e6:	d104      	bne.n	800a3f2 <HAL_TIM_PWM_Start+0xba>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	223f      	movs	r2, #63	; 0x3f
 800a3ec:	2102      	movs	r1, #2
 800a3ee:	5499      	strb	r1, [r3, r2]
 800a3f0:	e01b      	b.n	800a42a <HAL_TIM_PWM_Start+0xf2>
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	2b08      	cmp	r3, #8
 800a3f6:	d104      	bne.n	800a402 <HAL_TIM_PWM_Start+0xca>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2240      	movs	r2, #64	; 0x40
 800a3fc:	2102      	movs	r1, #2
 800a3fe:	5499      	strb	r1, [r3, r2]
 800a400:	e013      	b.n	800a42a <HAL_TIM_PWM_Start+0xf2>
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	2b0c      	cmp	r3, #12
 800a406:	d104      	bne.n	800a412 <HAL_TIM_PWM_Start+0xda>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2241      	movs	r2, #65	; 0x41
 800a40c:	2102      	movs	r1, #2
 800a40e:	5499      	strb	r1, [r3, r2]
 800a410:	e00b      	b.n	800a42a <HAL_TIM_PWM_Start+0xf2>
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	2b10      	cmp	r3, #16
 800a416:	d104      	bne.n	800a422 <HAL_TIM_PWM_Start+0xea>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2242      	movs	r2, #66	; 0x42
 800a41c:	2102      	movs	r1, #2
 800a41e:	5499      	strb	r1, [r3, r2]
 800a420:	e003      	b.n	800a42a <HAL_TIM_PWM_Start+0xf2>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2243      	movs	r2, #67	; 0x43
 800a426:	2102      	movs	r1, #2
 800a428:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	6839      	ldr	r1, [r7, #0]
 800a430:	2201      	movs	r2, #1
 800a432:	0018      	movs	r0, r3
 800a434:	f000 fe20 	bl	800b078 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	4a2d      	ldr	r2, [pc, #180]	; (800a4f4 <HAL_TIM_PWM_Start+0x1bc>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d00e      	beq.n	800a460 <HAL_TIM_PWM_Start+0x128>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4a2c      	ldr	r2, [pc, #176]	; (800a4f8 <HAL_TIM_PWM_Start+0x1c0>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d009      	beq.n	800a460 <HAL_TIM_PWM_Start+0x128>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4a2a      	ldr	r2, [pc, #168]	; (800a4fc <HAL_TIM_PWM_Start+0x1c4>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d004      	beq.n	800a460 <HAL_TIM_PWM_Start+0x128>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a29      	ldr	r2, [pc, #164]	; (800a500 <HAL_TIM_PWM_Start+0x1c8>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d101      	bne.n	800a464 <HAL_TIM_PWM_Start+0x12c>
 800a460:	2301      	movs	r3, #1
 800a462:	e000      	b.n	800a466 <HAL_TIM_PWM_Start+0x12e>
 800a464:	2300      	movs	r3, #0
 800a466:	2b00      	cmp	r3, #0
 800a468:	d008      	beq.n	800a47c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	2180      	movs	r1, #128	; 0x80
 800a476:	0209      	lsls	r1, r1, #8
 800a478:	430a      	orrs	r2, r1
 800a47a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4a1c      	ldr	r2, [pc, #112]	; (800a4f4 <HAL_TIM_PWM_Start+0x1bc>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d00f      	beq.n	800a4a6 <HAL_TIM_PWM_Start+0x16e>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681a      	ldr	r2, [r3, #0]
 800a48a:	2380      	movs	r3, #128	; 0x80
 800a48c:	05db      	lsls	r3, r3, #23
 800a48e:	429a      	cmp	r2, r3
 800a490:	d009      	beq.n	800a4a6 <HAL_TIM_PWM_Start+0x16e>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4a1b      	ldr	r2, [pc, #108]	; (800a504 <HAL_TIM_PWM_Start+0x1cc>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d004      	beq.n	800a4a6 <HAL_TIM_PWM_Start+0x16e>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4a15      	ldr	r2, [pc, #84]	; (800a4f8 <HAL_TIM_PWM_Start+0x1c0>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d116      	bne.n	800a4d4 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	689b      	ldr	r3, [r3, #8]
 800a4ac:	4a16      	ldr	r2, [pc, #88]	; (800a508 <HAL_TIM_PWM_Start+0x1d0>)
 800a4ae:	4013      	ands	r3, r2
 800a4b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2b06      	cmp	r3, #6
 800a4b6:	d016      	beq.n	800a4e6 <HAL_TIM_PWM_Start+0x1ae>
 800a4b8:	68fa      	ldr	r2, [r7, #12]
 800a4ba:	2380      	movs	r3, #128	; 0x80
 800a4bc:	025b      	lsls	r3, r3, #9
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d011      	beq.n	800a4e6 <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	681a      	ldr	r2, [r3, #0]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	2101      	movs	r1, #1
 800a4ce:	430a      	orrs	r2, r1
 800a4d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4d2:	e008      	b.n	800a4e6 <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	681a      	ldr	r2, [r3, #0]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	2101      	movs	r1, #1
 800a4e0:	430a      	orrs	r2, r1
 800a4e2:	601a      	str	r2, [r3, #0]
 800a4e4:	e000      	b.n	800a4e8 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4e6:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800a4e8:	2300      	movs	r3, #0
}
 800a4ea:	0018      	movs	r0, r3
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	b004      	add	sp, #16
 800a4f0:	bd80      	pop	{r7, pc}
 800a4f2:	46c0      	nop			; (mov r8, r8)
 800a4f4:	40012c00 	.word	0x40012c00
 800a4f8:	40014000 	.word	0x40014000
 800a4fc:	40014400 	.word	0x40014400
 800a500:	40014800 	.word	0x40014800
 800a504:	40000400 	.word	0x40000400
 800a508:	00010007 	.word	0x00010007

0800a50c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b086      	sub	sp, #24
 800a510:	af00      	add	r7, sp, #0
 800a512:	60f8      	str	r0, [r7, #12]
 800a514:	60b9      	str	r1, [r7, #8]
 800a516:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a518:	2317      	movs	r3, #23
 800a51a:	18fb      	adds	r3, r7, r3
 800a51c:	2200      	movs	r2, #0
 800a51e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	223c      	movs	r2, #60	; 0x3c
 800a524:	5c9b      	ldrb	r3, [r3, r2]
 800a526:	2b01      	cmp	r3, #1
 800a528:	d101      	bne.n	800a52e <HAL_TIM_PWM_ConfigChannel+0x22>
 800a52a:	2302      	movs	r3, #2
 800a52c:	e0e5      	b.n	800a6fa <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	223c      	movs	r2, #60	; 0x3c
 800a532:	2101      	movs	r1, #1
 800a534:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2b14      	cmp	r3, #20
 800a53a:	d900      	bls.n	800a53e <HAL_TIM_PWM_ConfigChannel+0x32>
 800a53c:	e0d1      	b.n	800a6e2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	009a      	lsls	r2, r3, #2
 800a542:	4b70      	ldr	r3, [pc, #448]	; (800a704 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800a544:	18d3      	adds	r3, r2, r3
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	68ba      	ldr	r2, [r7, #8]
 800a550:	0011      	movs	r1, r2
 800a552:	0018      	movs	r0, r3
 800a554:	f000 fa30 	bl	800a9b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	699a      	ldr	r2, [r3, #24]
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	2108      	movs	r1, #8
 800a564:	430a      	orrs	r2, r1
 800a566:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	699a      	ldr	r2, [r3, #24]
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	2104      	movs	r1, #4
 800a574:	438a      	bics	r2, r1
 800a576:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	6999      	ldr	r1, [r3, #24]
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	691a      	ldr	r2, [r3, #16]
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	430a      	orrs	r2, r1
 800a588:	619a      	str	r2, [r3, #24]
      break;
 800a58a:	e0af      	b.n	800a6ec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	68ba      	ldr	r2, [r7, #8]
 800a592:	0011      	movs	r1, r2
 800a594:	0018      	movs	r0, r3
 800a596:	f000 fa99 	bl	800aacc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	699a      	ldr	r2, [r3, #24]
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	2180      	movs	r1, #128	; 0x80
 800a5a6:	0109      	lsls	r1, r1, #4
 800a5a8:	430a      	orrs	r2, r1
 800a5aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	699a      	ldr	r2, [r3, #24]
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	4954      	ldr	r1, [pc, #336]	; (800a708 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a5b8:	400a      	ands	r2, r1
 800a5ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	6999      	ldr	r1, [r3, #24]
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	691b      	ldr	r3, [r3, #16]
 800a5c6:	021a      	lsls	r2, r3, #8
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	430a      	orrs	r2, r1
 800a5ce:	619a      	str	r2, [r3, #24]
      break;
 800a5d0:	e08c      	b.n	800a6ec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	68ba      	ldr	r2, [r7, #8]
 800a5d8:	0011      	movs	r1, r2
 800a5da:	0018      	movs	r0, r3
 800a5dc:	f000 fafa 	bl	800abd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	69da      	ldr	r2, [r3, #28]
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	2108      	movs	r1, #8
 800a5ec:	430a      	orrs	r2, r1
 800a5ee:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	69da      	ldr	r2, [r3, #28]
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	2104      	movs	r1, #4
 800a5fc:	438a      	bics	r2, r1
 800a5fe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	69d9      	ldr	r1, [r3, #28]
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	691a      	ldr	r2, [r3, #16]
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	430a      	orrs	r2, r1
 800a610:	61da      	str	r2, [r3, #28]
      break;
 800a612:	e06b      	b.n	800a6ec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	68ba      	ldr	r2, [r7, #8]
 800a61a:	0011      	movs	r1, r2
 800a61c:	0018      	movs	r0, r3
 800a61e:	f000 fb61 	bl	800ace4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	69da      	ldr	r2, [r3, #28]
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	2180      	movs	r1, #128	; 0x80
 800a62e:	0109      	lsls	r1, r1, #4
 800a630:	430a      	orrs	r2, r1
 800a632:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	69da      	ldr	r2, [r3, #28]
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	4932      	ldr	r1, [pc, #200]	; (800a708 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a640:	400a      	ands	r2, r1
 800a642:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	69d9      	ldr	r1, [r3, #28]
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	691b      	ldr	r3, [r3, #16]
 800a64e:	021a      	lsls	r2, r3, #8
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	430a      	orrs	r2, r1
 800a656:	61da      	str	r2, [r3, #28]
      break;
 800a658:	e048      	b.n	800a6ec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	68ba      	ldr	r2, [r7, #8]
 800a660:	0011      	movs	r1, r2
 800a662:	0018      	movs	r0, r3
 800a664:	f000 fba8 	bl	800adb8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	2108      	movs	r1, #8
 800a674:	430a      	orrs	r2, r1
 800a676:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	2104      	movs	r1, #4
 800a684:	438a      	bics	r2, r1
 800a686:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	691a      	ldr	r2, [r3, #16]
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	430a      	orrs	r2, r1
 800a698:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a69a:	e027      	b.n	800a6ec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	68ba      	ldr	r2, [r7, #8]
 800a6a2:	0011      	movs	r1, r2
 800a6a4:	0018      	movs	r0, r3
 800a6a6:	f000 fbe7 	bl	800ae78 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	2180      	movs	r1, #128	; 0x80
 800a6b6:	0109      	lsls	r1, r1, #4
 800a6b8:	430a      	orrs	r2, r1
 800a6ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	4910      	ldr	r1, [pc, #64]	; (800a708 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a6c8:	400a      	ands	r2, r1
 800a6ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	691b      	ldr	r3, [r3, #16]
 800a6d6:	021a      	lsls	r2, r3, #8
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	430a      	orrs	r2, r1
 800a6de:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a6e0:	e004      	b.n	800a6ec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800a6e2:	2317      	movs	r3, #23
 800a6e4:	18fb      	adds	r3, r7, r3
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	701a      	strb	r2, [r3, #0]
      break;
 800a6ea:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	223c      	movs	r2, #60	; 0x3c
 800a6f0:	2100      	movs	r1, #0
 800a6f2:	5499      	strb	r1, [r3, r2]

  return status;
 800a6f4:	2317      	movs	r3, #23
 800a6f6:	18fb      	adds	r3, r7, r3
 800a6f8:	781b      	ldrb	r3, [r3, #0]
}
 800a6fa:	0018      	movs	r0, r3
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	b006      	add	sp, #24
 800a700:	bd80      	pop	{r7, pc}
 800a702:	46c0      	nop			; (mov r8, r8)
 800a704:	080183bc 	.word	0x080183bc
 800a708:	fffffbff 	.word	0xfffffbff

0800a70c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b084      	sub	sp, #16
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a716:	230f      	movs	r3, #15
 800a718:	18fb      	adds	r3, r7, r3
 800a71a:	2200      	movs	r2, #0
 800a71c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	223c      	movs	r2, #60	; 0x3c
 800a722:	5c9b      	ldrb	r3, [r3, r2]
 800a724:	2b01      	cmp	r3, #1
 800a726:	d101      	bne.n	800a72c <HAL_TIM_ConfigClockSource+0x20>
 800a728:	2302      	movs	r3, #2
 800a72a:	e0bc      	b.n	800a8a6 <HAL_TIM_ConfigClockSource+0x19a>
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	223c      	movs	r2, #60	; 0x3c
 800a730:	2101      	movs	r1, #1
 800a732:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	223d      	movs	r2, #61	; 0x3d
 800a738:	2102      	movs	r1, #2
 800a73a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	689b      	ldr	r3, [r3, #8]
 800a742:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	4a5a      	ldr	r2, [pc, #360]	; (800a8b0 <HAL_TIM_ConfigClockSource+0x1a4>)
 800a748:	4013      	ands	r3, r2
 800a74a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	4a59      	ldr	r2, [pc, #356]	; (800a8b4 <HAL_TIM_ConfigClockSource+0x1a8>)
 800a750:	4013      	ands	r3, r2
 800a752:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	68ba      	ldr	r2, [r7, #8]
 800a75a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	2280      	movs	r2, #128	; 0x80
 800a762:	0192      	lsls	r2, r2, #6
 800a764:	4293      	cmp	r3, r2
 800a766:	d040      	beq.n	800a7ea <HAL_TIM_ConfigClockSource+0xde>
 800a768:	2280      	movs	r2, #128	; 0x80
 800a76a:	0192      	lsls	r2, r2, #6
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d900      	bls.n	800a772 <HAL_TIM_ConfigClockSource+0x66>
 800a770:	e088      	b.n	800a884 <HAL_TIM_ConfigClockSource+0x178>
 800a772:	2280      	movs	r2, #128	; 0x80
 800a774:	0152      	lsls	r2, r2, #5
 800a776:	4293      	cmp	r3, r2
 800a778:	d100      	bne.n	800a77c <HAL_TIM_ConfigClockSource+0x70>
 800a77a:	e088      	b.n	800a88e <HAL_TIM_ConfigClockSource+0x182>
 800a77c:	2280      	movs	r2, #128	; 0x80
 800a77e:	0152      	lsls	r2, r2, #5
 800a780:	4293      	cmp	r3, r2
 800a782:	d900      	bls.n	800a786 <HAL_TIM_ConfigClockSource+0x7a>
 800a784:	e07e      	b.n	800a884 <HAL_TIM_ConfigClockSource+0x178>
 800a786:	2b70      	cmp	r3, #112	; 0x70
 800a788:	d018      	beq.n	800a7bc <HAL_TIM_ConfigClockSource+0xb0>
 800a78a:	d900      	bls.n	800a78e <HAL_TIM_ConfigClockSource+0x82>
 800a78c:	e07a      	b.n	800a884 <HAL_TIM_ConfigClockSource+0x178>
 800a78e:	2b60      	cmp	r3, #96	; 0x60
 800a790:	d04f      	beq.n	800a832 <HAL_TIM_ConfigClockSource+0x126>
 800a792:	d900      	bls.n	800a796 <HAL_TIM_ConfigClockSource+0x8a>
 800a794:	e076      	b.n	800a884 <HAL_TIM_ConfigClockSource+0x178>
 800a796:	2b50      	cmp	r3, #80	; 0x50
 800a798:	d03b      	beq.n	800a812 <HAL_TIM_ConfigClockSource+0x106>
 800a79a:	d900      	bls.n	800a79e <HAL_TIM_ConfigClockSource+0x92>
 800a79c:	e072      	b.n	800a884 <HAL_TIM_ConfigClockSource+0x178>
 800a79e:	2b40      	cmp	r3, #64	; 0x40
 800a7a0:	d057      	beq.n	800a852 <HAL_TIM_ConfigClockSource+0x146>
 800a7a2:	d900      	bls.n	800a7a6 <HAL_TIM_ConfigClockSource+0x9a>
 800a7a4:	e06e      	b.n	800a884 <HAL_TIM_ConfigClockSource+0x178>
 800a7a6:	2b30      	cmp	r3, #48	; 0x30
 800a7a8:	d063      	beq.n	800a872 <HAL_TIM_ConfigClockSource+0x166>
 800a7aa:	d86b      	bhi.n	800a884 <HAL_TIM_ConfigClockSource+0x178>
 800a7ac:	2b20      	cmp	r3, #32
 800a7ae:	d060      	beq.n	800a872 <HAL_TIM_ConfigClockSource+0x166>
 800a7b0:	d868      	bhi.n	800a884 <HAL_TIM_ConfigClockSource+0x178>
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d05d      	beq.n	800a872 <HAL_TIM_ConfigClockSource+0x166>
 800a7b6:	2b10      	cmp	r3, #16
 800a7b8:	d05b      	beq.n	800a872 <HAL_TIM_ConfigClockSource+0x166>
 800a7ba:	e063      	b.n	800a884 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6818      	ldr	r0, [r3, #0]
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	6899      	ldr	r1, [r3, #8]
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	685a      	ldr	r2, [r3, #4]
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	68db      	ldr	r3, [r3, #12]
 800a7cc:	f000 fc34 	bl	800b038 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	689b      	ldr	r3, [r3, #8]
 800a7d6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	2277      	movs	r2, #119	; 0x77
 800a7dc:	4313      	orrs	r3, r2
 800a7de:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	68ba      	ldr	r2, [r7, #8]
 800a7e6:	609a      	str	r2, [r3, #8]
      break;
 800a7e8:	e052      	b.n	800a890 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6818      	ldr	r0, [r3, #0]
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	6899      	ldr	r1, [r3, #8]
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	685a      	ldr	r2, [r3, #4]
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	68db      	ldr	r3, [r3, #12]
 800a7fa:	f000 fc1d 	bl	800b038 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	689a      	ldr	r2, [r3, #8]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	2180      	movs	r1, #128	; 0x80
 800a80a:	01c9      	lsls	r1, r1, #7
 800a80c:	430a      	orrs	r2, r1
 800a80e:	609a      	str	r2, [r3, #8]
      break;
 800a810:	e03e      	b.n	800a890 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6818      	ldr	r0, [r3, #0]
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	6859      	ldr	r1, [r3, #4]
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	68db      	ldr	r3, [r3, #12]
 800a81e:	001a      	movs	r2, r3
 800a820:	f000 fb8e 	bl	800af40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	2150      	movs	r1, #80	; 0x50
 800a82a:	0018      	movs	r0, r3
 800a82c:	f000 fbe8 	bl	800b000 <TIM_ITRx_SetConfig>
      break;
 800a830:	e02e      	b.n	800a890 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6818      	ldr	r0, [r3, #0]
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	6859      	ldr	r1, [r3, #4]
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	68db      	ldr	r3, [r3, #12]
 800a83e:	001a      	movs	r2, r3
 800a840:	f000 fbac 	bl	800af9c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	2160      	movs	r1, #96	; 0x60
 800a84a:	0018      	movs	r0, r3
 800a84c:	f000 fbd8 	bl	800b000 <TIM_ITRx_SetConfig>
      break;
 800a850:	e01e      	b.n	800a890 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6818      	ldr	r0, [r3, #0]
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	6859      	ldr	r1, [r3, #4]
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	68db      	ldr	r3, [r3, #12]
 800a85e:	001a      	movs	r2, r3
 800a860:	f000 fb6e 	bl	800af40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	2140      	movs	r1, #64	; 0x40
 800a86a:	0018      	movs	r0, r3
 800a86c:	f000 fbc8 	bl	800b000 <TIM_ITRx_SetConfig>
      break;
 800a870:	e00e      	b.n	800a890 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681a      	ldr	r2, [r3, #0]
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	0019      	movs	r1, r3
 800a87c:	0010      	movs	r0, r2
 800a87e:	f000 fbbf 	bl	800b000 <TIM_ITRx_SetConfig>
      break;
 800a882:	e005      	b.n	800a890 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800a884:	230f      	movs	r3, #15
 800a886:	18fb      	adds	r3, r7, r3
 800a888:	2201      	movs	r2, #1
 800a88a:	701a      	strb	r2, [r3, #0]
      break;
 800a88c:	e000      	b.n	800a890 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800a88e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	223d      	movs	r2, #61	; 0x3d
 800a894:	2101      	movs	r1, #1
 800a896:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	223c      	movs	r2, #60	; 0x3c
 800a89c:	2100      	movs	r1, #0
 800a89e:	5499      	strb	r1, [r3, r2]

  return status;
 800a8a0:	230f      	movs	r3, #15
 800a8a2:	18fb      	adds	r3, r7, r3
 800a8a4:	781b      	ldrb	r3, [r3, #0]
}
 800a8a6:	0018      	movs	r0, r3
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	b004      	add	sp, #16
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	46c0      	nop			; (mov r8, r8)
 800a8b0:	ffceff88 	.word	0xffceff88
 800a8b4:	ffff00ff 	.word	0xffff00ff

0800a8b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b084      	sub	sp, #16
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	4a34      	ldr	r2, [pc, #208]	; (800a99c <TIM_Base_SetConfig+0xe4>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d008      	beq.n	800a8e2 <TIM_Base_SetConfig+0x2a>
 800a8d0:	687a      	ldr	r2, [r7, #4]
 800a8d2:	2380      	movs	r3, #128	; 0x80
 800a8d4:	05db      	lsls	r3, r3, #23
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	d003      	beq.n	800a8e2 <TIM_Base_SetConfig+0x2a>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	4a30      	ldr	r2, [pc, #192]	; (800a9a0 <TIM_Base_SetConfig+0xe8>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d108      	bne.n	800a8f4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	2270      	movs	r2, #112	; 0x70
 800a8e6:	4393      	bics	r3, r2
 800a8e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	68fa      	ldr	r2, [r7, #12]
 800a8f0:	4313      	orrs	r3, r2
 800a8f2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	4a29      	ldr	r2, [pc, #164]	; (800a99c <TIM_Base_SetConfig+0xe4>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d018      	beq.n	800a92e <TIM_Base_SetConfig+0x76>
 800a8fc:	687a      	ldr	r2, [r7, #4]
 800a8fe:	2380      	movs	r3, #128	; 0x80
 800a900:	05db      	lsls	r3, r3, #23
 800a902:	429a      	cmp	r2, r3
 800a904:	d013      	beq.n	800a92e <TIM_Base_SetConfig+0x76>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	4a25      	ldr	r2, [pc, #148]	; (800a9a0 <TIM_Base_SetConfig+0xe8>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d00f      	beq.n	800a92e <TIM_Base_SetConfig+0x76>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	4a24      	ldr	r2, [pc, #144]	; (800a9a4 <TIM_Base_SetConfig+0xec>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d00b      	beq.n	800a92e <TIM_Base_SetConfig+0x76>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	4a23      	ldr	r2, [pc, #140]	; (800a9a8 <TIM_Base_SetConfig+0xf0>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d007      	beq.n	800a92e <TIM_Base_SetConfig+0x76>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	4a22      	ldr	r2, [pc, #136]	; (800a9ac <TIM_Base_SetConfig+0xf4>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d003      	beq.n	800a92e <TIM_Base_SetConfig+0x76>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	4a21      	ldr	r2, [pc, #132]	; (800a9b0 <TIM_Base_SetConfig+0xf8>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d108      	bne.n	800a940 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	4a20      	ldr	r2, [pc, #128]	; (800a9b4 <TIM_Base_SetConfig+0xfc>)
 800a932:	4013      	ands	r3, r2
 800a934:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	68db      	ldr	r3, [r3, #12]
 800a93a:	68fa      	ldr	r2, [r7, #12]
 800a93c:	4313      	orrs	r3, r2
 800a93e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	2280      	movs	r2, #128	; 0x80
 800a944:	4393      	bics	r3, r2
 800a946:	001a      	movs	r2, r3
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	695b      	ldr	r3, [r3, #20]
 800a94c:	4313      	orrs	r3, r2
 800a94e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	68fa      	ldr	r2, [r7, #12]
 800a954:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	689a      	ldr	r2, [r3, #8]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	681a      	ldr	r2, [r3, #0]
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	4a0c      	ldr	r2, [pc, #48]	; (800a99c <TIM_Base_SetConfig+0xe4>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d00b      	beq.n	800a986 <TIM_Base_SetConfig+0xce>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	4a0d      	ldr	r2, [pc, #52]	; (800a9a8 <TIM_Base_SetConfig+0xf0>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d007      	beq.n	800a986 <TIM_Base_SetConfig+0xce>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	4a0c      	ldr	r2, [pc, #48]	; (800a9ac <TIM_Base_SetConfig+0xf4>)
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d003      	beq.n	800a986 <TIM_Base_SetConfig+0xce>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	4a0b      	ldr	r2, [pc, #44]	; (800a9b0 <TIM_Base_SetConfig+0xf8>)
 800a982:	4293      	cmp	r3, r2
 800a984:	d103      	bne.n	800a98e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	691a      	ldr	r2, [r3, #16]
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2201      	movs	r2, #1
 800a992:	615a      	str	r2, [r3, #20]
}
 800a994:	46c0      	nop			; (mov r8, r8)
 800a996:	46bd      	mov	sp, r7
 800a998:	b004      	add	sp, #16
 800a99a:	bd80      	pop	{r7, pc}
 800a99c:	40012c00 	.word	0x40012c00
 800a9a0:	40000400 	.word	0x40000400
 800a9a4:	40002000 	.word	0x40002000
 800a9a8:	40014000 	.word	0x40014000
 800a9ac:	40014400 	.word	0x40014400
 800a9b0:	40014800 	.word	0x40014800
 800a9b4:	fffffcff 	.word	0xfffffcff

0800a9b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b086      	sub	sp, #24
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6a1b      	ldr	r3, [r3, #32]
 800a9c6:	2201      	movs	r2, #1
 800a9c8:	4393      	bics	r3, r2
 800a9ca:	001a      	movs	r2, r3
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6a1b      	ldr	r3, [r3, #32]
 800a9d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	699b      	ldr	r3, [r3, #24]
 800a9e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	4a32      	ldr	r2, [pc, #200]	; (800aab0 <TIM_OC1_SetConfig+0xf8>)
 800a9e6:	4013      	ands	r3, r2
 800a9e8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	2203      	movs	r2, #3
 800a9ee:	4393      	bics	r3, r2
 800a9f0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	68fa      	ldr	r2, [r7, #12]
 800a9f8:	4313      	orrs	r3, r2
 800a9fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	2202      	movs	r2, #2
 800aa00:	4393      	bics	r3, r2
 800aa02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	689b      	ldr	r3, [r3, #8]
 800aa08:	697a      	ldr	r2, [r7, #20]
 800aa0a:	4313      	orrs	r3, r2
 800aa0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	4a28      	ldr	r2, [pc, #160]	; (800aab4 <TIM_OC1_SetConfig+0xfc>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d00b      	beq.n	800aa2e <TIM_OC1_SetConfig+0x76>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	4a27      	ldr	r2, [pc, #156]	; (800aab8 <TIM_OC1_SetConfig+0x100>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d007      	beq.n	800aa2e <TIM_OC1_SetConfig+0x76>
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	4a26      	ldr	r2, [pc, #152]	; (800aabc <TIM_OC1_SetConfig+0x104>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d003      	beq.n	800aa2e <TIM_OC1_SetConfig+0x76>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	4a25      	ldr	r2, [pc, #148]	; (800aac0 <TIM_OC1_SetConfig+0x108>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d10c      	bne.n	800aa48 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	2208      	movs	r2, #8
 800aa32:	4393      	bics	r3, r2
 800aa34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	68db      	ldr	r3, [r3, #12]
 800aa3a:	697a      	ldr	r2, [r7, #20]
 800aa3c:	4313      	orrs	r3, r2
 800aa3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	2204      	movs	r2, #4
 800aa44:	4393      	bics	r3, r2
 800aa46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	4a1a      	ldr	r2, [pc, #104]	; (800aab4 <TIM_OC1_SetConfig+0xfc>)
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d00b      	beq.n	800aa68 <TIM_OC1_SetConfig+0xb0>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	4a19      	ldr	r2, [pc, #100]	; (800aab8 <TIM_OC1_SetConfig+0x100>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d007      	beq.n	800aa68 <TIM_OC1_SetConfig+0xb0>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	4a18      	ldr	r2, [pc, #96]	; (800aabc <TIM_OC1_SetConfig+0x104>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d003      	beq.n	800aa68 <TIM_OC1_SetConfig+0xb0>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	4a17      	ldr	r2, [pc, #92]	; (800aac0 <TIM_OC1_SetConfig+0x108>)
 800aa64:	4293      	cmp	r3, r2
 800aa66:	d111      	bne.n	800aa8c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	4a16      	ldr	r2, [pc, #88]	; (800aac4 <TIM_OC1_SetConfig+0x10c>)
 800aa6c:	4013      	ands	r3, r2
 800aa6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	4a15      	ldr	r2, [pc, #84]	; (800aac8 <TIM_OC1_SetConfig+0x110>)
 800aa74:	4013      	ands	r3, r2
 800aa76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	695b      	ldr	r3, [r3, #20]
 800aa7c:	693a      	ldr	r2, [r7, #16]
 800aa7e:	4313      	orrs	r3, r2
 800aa80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	699b      	ldr	r3, [r3, #24]
 800aa86:	693a      	ldr	r2, [r7, #16]
 800aa88:	4313      	orrs	r3, r2
 800aa8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	693a      	ldr	r2, [r7, #16]
 800aa90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	68fa      	ldr	r2, [r7, #12]
 800aa96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	685a      	ldr	r2, [r3, #4]
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	697a      	ldr	r2, [r7, #20]
 800aaa4:	621a      	str	r2, [r3, #32]
}
 800aaa6:	46c0      	nop			; (mov r8, r8)
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	b006      	add	sp, #24
 800aaac:	bd80      	pop	{r7, pc}
 800aaae:	46c0      	nop			; (mov r8, r8)
 800aab0:	fffeff8f 	.word	0xfffeff8f
 800aab4:	40012c00 	.word	0x40012c00
 800aab8:	40014000 	.word	0x40014000
 800aabc:	40014400 	.word	0x40014400
 800aac0:	40014800 	.word	0x40014800
 800aac4:	fffffeff 	.word	0xfffffeff
 800aac8:	fffffdff 	.word	0xfffffdff

0800aacc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b086      	sub	sp, #24
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
 800aad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6a1b      	ldr	r3, [r3, #32]
 800aada:	2210      	movs	r2, #16
 800aadc:	4393      	bics	r3, r2
 800aade:	001a      	movs	r2, r3
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6a1b      	ldr	r3, [r3, #32]
 800aae8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	685b      	ldr	r3, [r3, #4]
 800aaee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	699b      	ldr	r3, [r3, #24]
 800aaf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	4a2e      	ldr	r2, [pc, #184]	; (800abb4 <TIM_OC2_SetConfig+0xe8>)
 800aafa:	4013      	ands	r3, r2
 800aafc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	4a2d      	ldr	r2, [pc, #180]	; (800abb8 <TIM_OC2_SetConfig+0xec>)
 800ab02:	4013      	ands	r3, r2
 800ab04:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	021b      	lsls	r3, r3, #8
 800ab0c:	68fa      	ldr	r2, [r7, #12]
 800ab0e:	4313      	orrs	r3, r2
 800ab10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	2220      	movs	r2, #32
 800ab16:	4393      	bics	r3, r2
 800ab18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	689b      	ldr	r3, [r3, #8]
 800ab1e:	011b      	lsls	r3, r3, #4
 800ab20:	697a      	ldr	r2, [r7, #20]
 800ab22:	4313      	orrs	r3, r2
 800ab24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	4a24      	ldr	r2, [pc, #144]	; (800abbc <TIM_OC2_SetConfig+0xf0>)
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	d10d      	bne.n	800ab4a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	2280      	movs	r2, #128	; 0x80
 800ab32:	4393      	bics	r3, r2
 800ab34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	68db      	ldr	r3, [r3, #12]
 800ab3a:	011b      	lsls	r3, r3, #4
 800ab3c:	697a      	ldr	r2, [r7, #20]
 800ab3e:	4313      	orrs	r3, r2
 800ab40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	2240      	movs	r2, #64	; 0x40
 800ab46:	4393      	bics	r3, r2
 800ab48:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	4a1b      	ldr	r2, [pc, #108]	; (800abbc <TIM_OC2_SetConfig+0xf0>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d00b      	beq.n	800ab6a <TIM_OC2_SetConfig+0x9e>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	4a1a      	ldr	r2, [pc, #104]	; (800abc0 <TIM_OC2_SetConfig+0xf4>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d007      	beq.n	800ab6a <TIM_OC2_SetConfig+0x9e>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	4a19      	ldr	r2, [pc, #100]	; (800abc4 <TIM_OC2_SetConfig+0xf8>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d003      	beq.n	800ab6a <TIM_OC2_SetConfig+0x9e>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	4a18      	ldr	r2, [pc, #96]	; (800abc8 <TIM_OC2_SetConfig+0xfc>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d113      	bne.n	800ab92 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ab6a:	693b      	ldr	r3, [r7, #16]
 800ab6c:	4a17      	ldr	r2, [pc, #92]	; (800abcc <TIM_OC2_SetConfig+0x100>)
 800ab6e:	4013      	ands	r3, r2
 800ab70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ab72:	693b      	ldr	r3, [r7, #16]
 800ab74:	4a16      	ldr	r2, [pc, #88]	; (800abd0 <TIM_OC2_SetConfig+0x104>)
 800ab76:	4013      	ands	r3, r2
 800ab78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	695b      	ldr	r3, [r3, #20]
 800ab7e:	009b      	lsls	r3, r3, #2
 800ab80:	693a      	ldr	r2, [r7, #16]
 800ab82:	4313      	orrs	r3, r2
 800ab84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	699b      	ldr	r3, [r3, #24]
 800ab8a:	009b      	lsls	r3, r3, #2
 800ab8c:	693a      	ldr	r2, [r7, #16]
 800ab8e:	4313      	orrs	r3, r2
 800ab90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	693a      	ldr	r2, [r7, #16]
 800ab96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	68fa      	ldr	r2, [r7, #12]
 800ab9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	685a      	ldr	r2, [r3, #4]
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	697a      	ldr	r2, [r7, #20]
 800abaa:	621a      	str	r2, [r3, #32]
}
 800abac:	46c0      	nop			; (mov r8, r8)
 800abae:	46bd      	mov	sp, r7
 800abb0:	b006      	add	sp, #24
 800abb2:	bd80      	pop	{r7, pc}
 800abb4:	feff8fff 	.word	0xfeff8fff
 800abb8:	fffffcff 	.word	0xfffffcff
 800abbc:	40012c00 	.word	0x40012c00
 800abc0:	40014000 	.word	0x40014000
 800abc4:	40014400 	.word	0x40014400
 800abc8:	40014800 	.word	0x40014800
 800abcc:	fffffbff 	.word	0xfffffbff
 800abd0:	fffff7ff 	.word	0xfffff7ff

0800abd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b086      	sub	sp, #24
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6a1b      	ldr	r3, [r3, #32]
 800abe2:	4a35      	ldr	r2, [pc, #212]	; (800acb8 <TIM_OC3_SetConfig+0xe4>)
 800abe4:	401a      	ands	r2, r3
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6a1b      	ldr	r3, [r3, #32]
 800abee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	69db      	ldr	r3, [r3, #28]
 800abfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	4a2f      	ldr	r2, [pc, #188]	; (800acbc <TIM_OC3_SetConfig+0xe8>)
 800ac00:	4013      	ands	r3, r2
 800ac02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	2203      	movs	r2, #3
 800ac08:	4393      	bics	r3, r2
 800ac0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	68fa      	ldr	r2, [r7, #12]
 800ac12:	4313      	orrs	r3, r2
 800ac14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	4a29      	ldr	r2, [pc, #164]	; (800acc0 <TIM_OC3_SetConfig+0xec>)
 800ac1a:	4013      	ands	r3, r2
 800ac1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	689b      	ldr	r3, [r3, #8]
 800ac22:	021b      	lsls	r3, r3, #8
 800ac24:	697a      	ldr	r2, [r7, #20]
 800ac26:	4313      	orrs	r3, r2
 800ac28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	4a25      	ldr	r2, [pc, #148]	; (800acc4 <TIM_OC3_SetConfig+0xf0>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d10d      	bne.n	800ac4e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	4a24      	ldr	r2, [pc, #144]	; (800acc8 <TIM_OC3_SetConfig+0xf4>)
 800ac36:	4013      	ands	r3, r2
 800ac38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	68db      	ldr	r3, [r3, #12]
 800ac3e:	021b      	lsls	r3, r3, #8
 800ac40:	697a      	ldr	r2, [r7, #20]
 800ac42:	4313      	orrs	r3, r2
 800ac44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ac46:	697b      	ldr	r3, [r7, #20]
 800ac48:	4a20      	ldr	r2, [pc, #128]	; (800accc <TIM_OC3_SetConfig+0xf8>)
 800ac4a:	4013      	ands	r3, r2
 800ac4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	4a1c      	ldr	r2, [pc, #112]	; (800acc4 <TIM_OC3_SetConfig+0xf0>)
 800ac52:	4293      	cmp	r3, r2
 800ac54:	d00b      	beq.n	800ac6e <TIM_OC3_SetConfig+0x9a>
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	4a1d      	ldr	r2, [pc, #116]	; (800acd0 <TIM_OC3_SetConfig+0xfc>)
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d007      	beq.n	800ac6e <TIM_OC3_SetConfig+0x9a>
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	4a1c      	ldr	r2, [pc, #112]	; (800acd4 <TIM_OC3_SetConfig+0x100>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d003      	beq.n	800ac6e <TIM_OC3_SetConfig+0x9a>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	4a1b      	ldr	r2, [pc, #108]	; (800acd8 <TIM_OC3_SetConfig+0x104>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d113      	bne.n	800ac96 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	4a1a      	ldr	r2, [pc, #104]	; (800acdc <TIM_OC3_SetConfig+0x108>)
 800ac72:	4013      	ands	r3, r2
 800ac74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ac76:	693b      	ldr	r3, [r7, #16]
 800ac78:	4a19      	ldr	r2, [pc, #100]	; (800ace0 <TIM_OC3_SetConfig+0x10c>)
 800ac7a:	4013      	ands	r3, r2
 800ac7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	695b      	ldr	r3, [r3, #20]
 800ac82:	011b      	lsls	r3, r3, #4
 800ac84:	693a      	ldr	r2, [r7, #16]
 800ac86:	4313      	orrs	r3, r2
 800ac88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	699b      	ldr	r3, [r3, #24]
 800ac8e:	011b      	lsls	r3, r3, #4
 800ac90:	693a      	ldr	r2, [r7, #16]
 800ac92:	4313      	orrs	r3, r2
 800ac94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	693a      	ldr	r2, [r7, #16]
 800ac9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	68fa      	ldr	r2, [r7, #12]
 800aca0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	685a      	ldr	r2, [r3, #4]
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	697a      	ldr	r2, [r7, #20]
 800acae:	621a      	str	r2, [r3, #32]
}
 800acb0:	46c0      	nop			; (mov r8, r8)
 800acb2:	46bd      	mov	sp, r7
 800acb4:	b006      	add	sp, #24
 800acb6:	bd80      	pop	{r7, pc}
 800acb8:	fffffeff 	.word	0xfffffeff
 800acbc:	fffeff8f 	.word	0xfffeff8f
 800acc0:	fffffdff 	.word	0xfffffdff
 800acc4:	40012c00 	.word	0x40012c00
 800acc8:	fffff7ff 	.word	0xfffff7ff
 800accc:	fffffbff 	.word	0xfffffbff
 800acd0:	40014000 	.word	0x40014000
 800acd4:	40014400 	.word	0x40014400
 800acd8:	40014800 	.word	0x40014800
 800acdc:	ffffefff 	.word	0xffffefff
 800ace0:	ffffdfff 	.word	0xffffdfff

0800ace4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b086      	sub	sp, #24
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6a1b      	ldr	r3, [r3, #32]
 800acf2:	4a28      	ldr	r2, [pc, #160]	; (800ad94 <TIM_OC4_SetConfig+0xb0>)
 800acf4:	401a      	ands	r2, r3
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6a1b      	ldr	r3, [r3, #32]
 800acfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	69db      	ldr	r3, [r3, #28]
 800ad0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	4a22      	ldr	r2, [pc, #136]	; (800ad98 <TIM_OC4_SetConfig+0xb4>)
 800ad10:	4013      	ands	r3, r2
 800ad12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	4a21      	ldr	r2, [pc, #132]	; (800ad9c <TIM_OC4_SetConfig+0xb8>)
 800ad18:	4013      	ands	r3, r2
 800ad1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	021b      	lsls	r3, r3, #8
 800ad22:	68fa      	ldr	r2, [r7, #12]
 800ad24:	4313      	orrs	r3, r2
 800ad26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ad28:	693b      	ldr	r3, [r7, #16]
 800ad2a:	4a1d      	ldr	r2, [pc, #116]	; (800ada0 <TIM_OC4_SetConfig+0xbc>)
 800ad2c:	4013      	ands	r3, r2
 800ad2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	689b      	ldr	r3, [r3, #8]
 800ad34:	031b      	lsls	r3, r3, #12
 800ad36:	693a      	ldr	r2, [r7, #16]
 800ad38:	4313      	orrs	r3, r2
 800ad3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	4a19      	ldr	r2, [pc, #100]	; (800ada4 <TIM_OC4_SetConfig+0xc0>)
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d00b      	beq.n	800ad5c <TIM_OC4_SetConfig+0x78>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	4a18      	ldr	r2, [pc, #96]	; (800ada8 <TIM_OC4_SetConfig+0xc4>)
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	d007      	beq.n	800ad5c <TIM_OC4_SetConfig+0x78>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	4a17      	ldr	r2, [pc, #92]	; (800adac <TIM_OC4_SetConfig+0xc8>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d003      	beq.n	800ad5c <TIM_OC4_SetConfig+0x78>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	4a16      	ldr	r2, [pc, #88]	; (800adb0 <TIM_OC4_SetConfig+0xcc>)
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d109      	bne.n	800ad70 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	4a15      	ldr	r2, [pc, #84]	; (800adb4 <TIM_OC4_SetConfig+0xd0>)
 800ad60:	4013      	ands	r3, r2
 800ad62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	695b      	ldr	r3, [r3, #20]
 800ad68:	019b      	lsls	r3, r3, #6
 800ad6a:	697a      	ldr	r2, [r7, #20]
 800ad6c:	4313      	orrs	r3, r2
 800ad6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	697a      	ldr	r2, [r7, #20]
 800ad74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	68fa      	ldr	r2, [r7, #12]
 800ad7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	685a      	ldr	r2, [r3, #4]
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	693a      	ldr	r2, [r7, #16]
 800ad88:	621a      	str	r2, [r3, #32]
}
 800ad8a:	46c0      	nop			; (mov r8, r8)
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	b006      	add	sp, #24
 800ad90:	bd80      	pop	{r7, pc}
 800ad92:	46c0      	nop			; (mov r8, r8)
 800ad94:	ffffefff 	.word	0xffffefff
 800ad98:	feff8fff 	.word	0xfeff8fff
 800ad9c:	fffffcff 	.word	0xfffffcff
 800ada0:	ffffdfff 	.word	0xffffdfff
 800ada4:	40012c00 	.word	0x40012c00
 800ada8:	40014000 	.word	0x40014000
 800adac:	40014400 	.word	0x40014400
 800adb0:	40014800 	.word	0x40014800
 800adb4:	ffffbfff 	.word	0xffffbfff

0800adb8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b086      	sub	sp, #24
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
 800adc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6a1b      	ldr	r3, [r3, #32]
 800adc6:	4a25      	ldr	r2, [pc, #148]	; (800ae5c <TIM_OC5_SetConfig+0xa4>)
 800adc8:	401a      	ands	r2, r3
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6a1b      	ldr	r3, [r3, #32]
 800add2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	685b      	ldr	r3, [r3, #4]
 800add8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	4a1f      	ldr	r2, [pc, #124]	; (800ae60 <TIM_OC5_SetConfig+0xa8>)
 800ade4:	4013      	ands	r3, r2
 800ade6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	68fa      	ldr	r2, [r7, #12]
 800adee:	4313      	orrs	r3, r2
 800adf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	4a1b      	ldr	r2, [pc, #108]	; (800ae64 <TIM_OC5_SetConfig+0xac>)
 800adf6:	4013      	ands	r3, r2
 800adf8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	689b      	ldr	r3, [r3, #8]
 800adfe:	041b      	lsls	r3, r3, #16
 800ae00:	693a      	ldr	r2, [r7, #16]
 800ae02:	4313      	orrs	r3, r2
 800ae04:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	4a17      	ldr	r2, [pc, #92]	; (800ae68 <TIM_OC5_SetConfig+0xb0>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d00b      	beq.n	800ae26 <TIM_OC5_SetConfig+0x6e>
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	4a16      	ldr	r2, [pc, #88]	; (800ae6c <TIM_OC5_SetConfig+0xb4>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d007      	beq.n	800ae26 <TIM_OC5_SetConfig+0x6e>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	4a15      	ldr	r2, [pc, #84]	; (800ae70 <TIM_OC5_SetConfig+0xb8>)
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d003      	beq.n	800ae26 <TIM_OC5_SetConfig+0x6e>
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	4a14      	ldr	r2, [pc, #80]	; (800ae74 <TIM_OC5_SetConfig+0xbc>)
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d109      	bne.n	800ae3a <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	4a0c      	ldr	r2, [pc, #48]	; (800ae5c <TIM_OC5_SetConfig+0xa4>)
 800ae2a:	4013      	ands	r3, r2
 800ae2c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	695b      	ldr	r3, [r3, #20]
 800ae32:	021b      	lsls	r3, r3, #8
 800ae34:	697a      	ldr	r2, [r7, #20]
 800ae36:	4313      	orrs	r3, r2
 800ae38:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	697a      	ldr	r2, [r7, #20]
 800ae3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	68fa      	ldr	r2, [r7, #12]
 800ae44:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	685a      	ldr	r2, [r3, #4]
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	693a      	ldr	r2, [r7, #16]
 800ae52:	621a      	str	r2, [r3, #32]
}
 800ae54:	46c0      	nop			; (mov r8, r8)
 800ae56:	46bd      	mov	sp, r7
 800ae58:	b006      	add	sp, #24
 800ae5a:	bd80      	pop	{r7, pc}
 800ae5c:	fffeffff 	.word	0xfffeffff
 800ae60:	fffeff8f 	.word	0xfffeff8f
 800ae64:	fffdffff 	.word	0xfffdffff
 800ae68:	40012c00 	.word	0x40012c00
 800ae6c:	40014000 	.word	0x40014000
 800ae70:	40014400 	.word	0x40014400
 800ae74:	40014800 	.word	0x40014800

0800ae78 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b086      	sub	sp, #24
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
 800ae80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6a1b      	ldr	r3, [r3, #32]
 800ae86:	4a26      	ldr	r2, [pc, #152]	; (800af20 <TIM_OC6_SetConfig+0xa8>)
 800ae88:	401a      	ands	r2, r3
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6a1b      	ldr	r3, [r3, #32]
 800ae92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	685b      	ldr	r3, [r3, #4]
 800ae98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	4a20      	ldr	r2, [pc, #128]	; (800af24 <TIM_OC6_SetConfig+0xac>)
 800aea4:	4013      	ands	r3, r2
 800aea6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	021b      	lsls	r3, r3, #8
 800aeae:	68fa      	ldr	r2, [r7, #12]
 800aeb0:	4313      	orrs	r3, r2
 800aeb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800aeb4:	693b      	ldr	r3, [r7, #16]
 800aeb6:	4a1c      	ldr	r2, [pc, #112]	; (800af28 <TIM_OC6_SetConfig+0xb0>)
 800aeb8:	4013      	ands	r3, r2
 800aeba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	689b      	ldr	r3, [r3, #8]
 800aec0:	051b      	lsls	r3, r3, #20
 800aec2:	693a      	ldr	r2, [r7, #16]
 800aec4:	4313      	orrs	r3, r2
 800aec6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	4a18      	ldr	r2, [pc, #96]	; (800af2c <TIM_OC6_SetConfig+0xb4>)
 800aecc:	4293      	cmp	r3, r2
 800aece:	d00b      	beq.n	800aee8 <TIM_OC6_SetConfig+0x70>
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	4a17      	ldr	r2, [pc, #92]	; (800af30 <TIM_OC6_SetConfig+0xb8>)
 800aed4:	4293      	cmp	r3, r2
 800aed6:	d007      	beq.n	800aee8 <TIM_OC6_SetConfig+0x70>
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	4a16      	ldr	r2, [pc, #88]	; (800af34 <TIM_OC6_SetConfig+0xbc>)
 800aedc:	4293      	cmp	r3, r2
 800aede:	d003      	beq.n	800aee8 <TIM_OC6_SetConfig+0x70>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	4a15      	ldr	r2, [pc, #84]	; (800af38 <TIM_OC6_SetConfig+0xc0>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d109      	bne.n	800aefc <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	4a14      	ldr	r2, [pc, #80]	; (800af3c <TIM_OC6_SetConfig+0xc4>)
 800aeec:	4013      	ands	r3, r2
 800aeee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	695b      	ldr	r3, [r3, #20]
 800aef4:	029b      	lsls	r3, r3, #10
 800aef6:	697a      	ldr	r2, [r7, #20]
 800aef8:	4313      	orrs	r3, r2
 800aefa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	697a      	ldr	r2, [r7, #20]
 800af00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	68fa      	ldr	r2, [r7, #12]
 800af06:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	685a      	ldr	r2, [r3, #4]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	693a      	ldr	r2, [r7, #16]
 800af14:	621a      	str	r2, [r3, #32]
}
 800af16:	46c0      	nop			; (mov r8, r8)
 800af18:	46bd      	mov	sp, r7
 800af1a:	b006      	add	sp, #24
 800af1c:	bd80      	pop	{r7, pc}
 800af1e:	46c0      	nop			; (mov r8, r8)
 800af20:	ffefffff 	.word	0xffefffff
 800af24:	feff8fff 	.word	0xfeff8fff
 800af28:	ffdfffff 	.word	0xffdfffff
 800af2c:	40012c00 	.word	0x40012c00
 800af30:	40014000 	.word	0x40014000
 800af34:	40014400 	.word	0x40014400
 800af38:	40014800 	.word	0x40014800
 800af3c:	fffbffff 	.word	0xfffbffff

0800af40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b086      	sub	sp, #24
 800af44:	af00      	add	r7, sp, #0
 800af46:	60f8      	str	r0, [r7, #12]
 800af48:	60b9      	str	r1, [r7, #8]
 800af4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	6a1b      	ldr	r3, [r3, #32]
 800af50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	6a1b      	ldr	r3, [r3, #32]
 800af56:	2201      	movs	r2, #1
 800af58:	4393      	bics	r3, r2
 800af5a:	001a      	movs	r2, r3
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	699b      	ldr	r3, [r3, #24]
 800af64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	22f0      	movs	r2, #240	; 0xf0
 800af6a:	4393      	bics	r3, r2
 800af6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	011b      	lsls	r3, r3, #4
 800af72:	693a      	ldr	r2, [r7, #16]
 800af74:	4313      	orrs	r3, r2
 800af76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	220a      	movs	r2, #10
 800af7c:	4393      	bics	r3, r2
 800af7e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800af80:	697a      	ldr	r2, [r7, #20]
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	4313      	orrs	r3, r2
 800af86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	693a      	ldr	r2, [r7, #16]
 800af8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	697a      	ldr	r2, [r7, #20]
 800af92:	621a      	str	r2, [r3, #32]
}
 800af94:	46c0      	nop			; (mov r8, r8)
 800af96:	46bd      	mov	sp, r7
 800af98:	b006      	add	sp, #24
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b086      	sub	sp, #24
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	60f8      	str	r0, [r7, #12]
 800afa4:	60b9      	str	r1, [r7, #8]
 800afa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	6a1b      	ldr	r3, [r3, #32]
 800afac:	2210      	movs	r2, #16
 800afae:	4393      	bics	r3, r2
 800afb0:	001a      	movs	r2, r3
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	699b      	ldr	r3, [r3, #24]
 800afba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	6a1b      	ldr	r3, [r3, #32]
 800afc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	4a0d      	ldr	r2, [pc, #52]	; (800affc <TIM_TI2_ConfigInputStage+0x60>)
 800afc6:	4013      	ands	r3, r2
 800afc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	031b      	lsls	r3, r3, #12
 800afce:	697a      	ldr	r2, [r7, #20]
 800afd0:	4313      	orrs	r3, r2
 800afd2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	22a0      	movs	r2, #160	; 0xa0
 800afd8:	4393      	bics	r3, r2
 800afda:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	011b      	lsls	r3, r3, #4
 800afe0:	693a      	ldr	r2, [r7, #16]
 800afe2:	4313      	orrs	r3, r2
 800afe4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	697a      	ldr	r2, [r7, #20]
 800afea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	693a      	ldr	r2, [r7, #16]
 800aff0:	621a      	str	r2, [r3, #32]
}
 800aff2:	46c0      	nop			; (mov r8, r8)
 800aff4:	46bd      	mov	sp, r7
 800aff6:	b006      	add	sp, #24
 800aff8:	bd80      	pop	{r7, pc}
 800affa:	46c0      	nop			; (mov r8, r8)
 800affc:	ffff0fff 	.word	0xffff0fff

0800b000 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b084      	sub	sp, #16
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
 800b008:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	689b      	ldr	r3, [r3, #8]
 800b00e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	4a08      	ldr	r2, [pc, #32]	; (800b034 <TIM_ITRx_SetConfig+0x34>)
 800b014:	4013      	ands	r3, r2
 800b016:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b018:	683a      	ldr	r2, [r7, #0]
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	4313      	orrs	r3, r2
 800b01e:	2207      	movs	r2, #7
 800b020:	4313      	orrs	r3, r2
 800b022:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	68fa      	ldr	r2, [r7, #12]
 800b028:	609a      	str	r2, [r3, #8]
}
 800b02a:	46c0      	nop			; (mov r8, r8)
 800b02c:	46bd      	mov	sp, r7
 800b02e:	b004      	add	sp, #16
 800b030:	bd80      	pop	{r7, pc}
 800b032:	46c0      	nop			; (mov r8, r8)
 800b034:	ffcfff8f 	.word	0xffcfff8f

0800b038 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b086      	sub	sp, #24
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	60f8      	str	r0, [r7, #12]
 800b040:	60b9      	str	r1, [r7, #8]
 800b042:	607a      	str	r2, [r7, #4]
 800b044:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	689b      	ldr	r3, [r3, #8]
 800b04a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b04c:	697b      	ldr	r3, [r7, #20]
 800b04e:	4a09      	ldr	r2, [pc, #36]	; (800b074 <TIM_ETR_SetConfig+0x3c>)
 800b050:	4013      	ands	r3, r2
 800b052:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	021a      	lsls	r2, r3, #8
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	431a      	orrs	r2, r3
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	4313      	orrs	r3, r2
 800b060:	697a      	ldr	r2, [r7, #20]
 800b062:	4313      	orrs	r3, r2
 800b064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	697a      	ldr	r2, [r7, #20]
 800b06a:	609a      	str	r2, [r3, #8]
}
 800b06c:	46c0      	nop			; (mov r8, r8)
 800b06e:	46bd      	mov	sp, r7
 800b070:	b006      	add	sp, #24
 800b072:	bd80      	pop	{r7, pc}
 800b074:	ffff00ff 	.word	0xffff00ff

0800b078 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b086      	sub	sp, #24
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	60f8      	str	r0, [r7, #12]
 800b080:	60b9      	str	r1, [r7, #8]
 800b082:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	221f      	movs	r2, #31
 800b088:	4013      	ands	r3, r2
 800b08a:	2201      	movs	r2, #1
 800b08c:	409a      	lsls	r2, r3
 800b08e:	0013      	movs	r3, r2
 800b090:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	6a1b      	ldr	r3, [r3, #32]
 800b096:	697a      	ldr	r2, [r7, #20]
 800b098:	43d2      	mvns	r2, r2
 800b09a:	401a      	ands	r2, r3
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	6a1a      	ldr	r2, [r3, #32]
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	211f      	movs	r1, #31
 800b0a8:	400b      	ands	r3, r1
 800b0aa:	6879      	ldr	r1, [r7, #4]
 800b0ac:	4099      	lsls	r1, r3
 800b0ae:	000b      	movs	r3, r1
 800b0b0:	431a      	orrs	r2, r3
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	621a      	str	r2, [r3, #32]
}
 800b0b6:	46c0      	nop			; (mov r8, r8)
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	b006      	add	sp, #24
 800b0bc:	bd80      	pop	{r7, pc}
	...

0800b0c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b084      	sub	sp, #16
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	223c      	movs	r2, #60	; 0x3c
 800b0ce:	5c9b      	ldrb	r3, [r3, r2]
 800b0d0:	2b01      	cmp	r3, #1
 800b0d2:	d101      	bne.n	800b0d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b0d4:	2302      	movs	r3, #2
 800b0d6:	e055      	b.n	800b184 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	223c      	movs	r2, #60	; 0x3c
 800b0dc:	2101      	movs	r1, #1
 800b0de:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	223d      	movs	r2, #61	; 0x3d
 800b0e4:	2102      	movs	r1, #2
 800b0e6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	685b      	ldr	r3, [r3, #4]
 800b0ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	689b      	ldr	r3, [r3, #8]
 800b0f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	4a23      	ldr	r2, [pc, #140]	; (800b18c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d108      	bne.n	800b114 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	4a22      	ldr	r2, [pc, #136]	; (800b190 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b106:	4013      	ands	r3, r2
 800b108:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	685b      	ldr	r3, [r3, #4]
 800b10e:	68fa      	ldr	r2, [r7, #12]
 800b110:	4313      	orrs	r3, r2
 800b112:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	2270      	movs	r2, #112	; 0x70
 800b118:	4393      	bics	r3, r2
 800b11a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	68fa      	ldr	r2, [r7, #12]
 800b122:	4313      	orrs	r3, r2
 800b124:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	68fa      	ldr	r2, [r7, #12]
 800b12c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	4a16      	ldr	r2, [pc, #88]	; (800b18c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b134:	4293      	cmp	r3, r2
 800b136:	d00f      	beq.n	800b158 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681a      	ldr	r2, [r3, #0]
 800b13c:	2380      	movs	r3, #128	; 0x80
 800b13e:	05db      	lsls	r3, r3, #23
 800b140:	429a      	cmp	r2, r3
 800b142:	d009      	beq.n	800b158 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	4a12      	ldr	r2, [pc, #72]	; (800b194 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b14a:	4293      	cmp	r3, r2
 800b14c:	d004      	beq.n	800b158 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	4a11      	ldr	r2, [pc, #68]	; (800b198 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b154:	4293      	cmp	r3, r2
 800b156:	d10c      	bne.n	800b172 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	2280      	movs	r2, #128	; 0x80
 800b15c:	4393      	bics	r3, r2
 800b15e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	689b      	ldr	r3, [r3, #8]
 800b164:	68ba      	ldr	r2, [r7, #8]
 800b166:	4313      	orrs	r3, r2
 800b168:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	68ba      	ldr	r2, [r7, #8]
 800b170:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	223d      	movs	r2, #61	; 0x3d
 800b176:	2101      	movs	r1, #1
 800b178:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	223c      	movs	r2, #60	; 0x3c
 800b17e:	2100      	movs	r1, #0
 800b180:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b182:	2300      	movs	r3, #0
}
 800b184:	0018      	movs	r0, r3
 800b186:	46bd      	mov	sp, r7
 800b188:	b004      	add	sp, #16
 800b18a:	bd80      	pop	{r7, pc}
 800b18c:	40012c00 	.word	0x40012c00
 800b190:	ff0fffff 	.word	0xff0fffff
 800b194:	40000400 	.word	0x40000400
 800b198:	40014000 	.word	0x40014000

0800b19c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b084      	sub	sp, #16
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
 800b1a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	223c      	movs	r2, #60	; 0x3c
 800b1ae:	5c9b      	ldrb	r3, [r3, r2]
 800b1b0:	2b01      	cmp	r3, #1
 800b1b2:	d101      	bne.n	800b1b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b1b4:	2302      	movs	r3, #2
 800b1b6:	e079      	b.n	800b2ac <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	223c      	movs	r2, #60	; 0x3c
 800b1bc:	2101      	movs	r1, #1
 800b1be:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	22ff      	movs	r2, #255	; 0xff
 800b1c4:	4393      	bics	r3, r2
 800b1c6:	001a      	movs	r2, r3
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	68db      	ldr	r3, [r3, #12]
 800b1cc:	4313      	orrs	r3, r2
 800b1ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	4a38      	ldr	r2, [pc, #224]	; (800b2b4 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800b1d4:	401a      	ands	r2, r3
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	689b      	ldr	r3, [r3, #8]
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	4a35      	ldr	r2, [pc, #212]	; (800b2b8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b1e2:	401a      	ands	r2, r3
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	685b      	ldr	r3, [r3, #4]
 800b1e8:	4313      	orrs	r3, r2
 800b1ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	4a33      	ldr	r2, [pc, #204]	; (800b2bc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800b1f0:	401a      	ands	r2, r3
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	4313      	orrs	r3, r2
 800b1f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	4a30      	ldr	r2, [pc, #192]	; (800b2c0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b1fe:	401a      	ands	r2, r3
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	691b      	ldr	r3, [r3, #16]
 800b204:	4313      	orrs	r3, r2
 800b206:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	4a2e      	ldr	r2, [pc, #184]	; (800b2c4 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800b20c:	401a      	ands	r2, r3
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	695b      	ldr	r3, [r3, #20]
 800b212:	4313      	orrs	r3, r2
 800b214:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	4a2b      	ldr	r2, [pc, #172]	; (800b2c8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800b21a:	401a      	ands	r2, r3
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b220:	4313      	orrs	r3, r2
 800b222:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	4a29      	ldr	r2, [pc, #164]	; (800b2cc <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800b228:	401a      	ands	r2, r3
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	699b      	ldr	r3, [r3, #24]
 800b22e:	041b      	lsls	r3, r3, #16
 800b230:	4313      	orrs	r3, r2
 800b232:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	4a25      	ldr	r2, [pc, #148]	; (800b2d0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800b23a:	4293      	cmp	r3, r2
 800b23c:	d106      	bne.n	800b24c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	4a24      	ldr	r2, [pc, #144]	; (800b2d4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b242:	401a      	ands	r2, r3
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	69db      	ldr	r3, [r3, #28]
 800b248:	4313      	orrs	r3, r2
 800b24a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	4a1f      	ldr	r2, [pc, #124]	; (800b2d0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800b252:	4293      	cmp	r3, r2
 800b254:	d121      	bne.n	800b29a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	4a1f      	ldr	r2, [pc, #124]	; (800b2d8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b25a:	401a      	ands	r2, r3
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b260:	051b      	lsls	r3, r3, #20
 800b262:	4313      	orrs	r3, r2
 800b264:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	4a1c      	ldr	r2, [pc, #112]	; (800b2dc <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800b26a:	401a      	ands	r2, r3
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	6a1b      	ldr	r3, [r3, #32]
 800b270:	4313      	orrs	r3, r2
 800b272:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	4a1a      	ldr	r2, [pc, #104]	; (800b2e0 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 800b278:	401a      	ands	r2, r3
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b27e:	4313      	orrs	r3, r2
 800b280:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	4a12      	ldr	r2, [pc, #72]	; (800b2d0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800b288:	4293      	cmp	r3, r2
 800b28a:	d106      	bne.n	800b29a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	4a15      	ldr	r2, [pc, #84]	; (800b2e4 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 800b290:	401a      	ands	r2, r3
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b296:	4313      	orrs	r3, r2
 800b298:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	68fa      	ldr	r2, [r7, #12]
 800b2a0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	223c      	movs	r2, #60	; 0x3c
 800b2a6:	2100      	movs	r1, #0
 800b2a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b2aa:	2300      	movs	r3, #0
}
 800b2ac:	0018      	movs	r0, r3
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	b004      	add	sp, #16
 800b2b2:	bd80      	pop	{r7, pc}
 800b2b4:	fffffcff 	.word	0xfffffcff
 800b2b8:	fffffbff 	.word	0xfffffbff
 800b2bc:	fffff7ff 	.word	0xfffff7ff
 800b2c0:	ffffefff 	.word	0xffffefff
 800b2c4:	ffffdfff 	.word	0xffffdfff
 800b2c8:	ffffbfff 	.word	0xffffbfff
 800b2cc:	fff0ffff 	.word	0xfff0ffff
 800b2d0:	40012c00 	.word	0x40012c00
 800b2d4:	efffffff 	.word	0xefffffff
 800b2d8:	ff0fffff 	.word	0xff0fffff
 800b2dc:	feffffff 	.word	0xfeffffff
 800b2e0:	fdffffff 	.word	0xfdffffff
 800b2e4:	dfffffff 	.word	0xdfffffff

0800b2e8 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b08a      	sub	sp, #40	; 0x28
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	60f8      	str	r0, [r7, #12]
 800b2f0:	60b9      	str	r1, [r7, #8]
 800b2f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b2f4:	2327      	movs	r3, #39	; 0x27
 800b2f6:	18fb      	adds	r3, r7, r3
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	223c      	movs	r2, #60	; 0x3c
 800b300:	5c9b      	ldrb	r3, [r3, r2]
 800b302:	2b01      	cmp	r3, #1
 800b304:	d101      	bne.n	800b30a <HAL_TIMEx_ConfigBreakInput+0x22>
 800b306:	2302      	movs	r3, #2
 800b308:	e095      	b.n	800b436 <HAL_TIMEx_ConfigBreakInput+0x14e>
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	223c      	movs	r2, #60	; 0x3c
 800b30e:	2101      	movs	r1, #1
 800b310:	5499      	strb	r1, [r3, r2]

  switch (sBreakInputConfig->Source)
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	2b04      	cmp	r3, #4
 800b318:	d019      	beq.n	800b34e <HAL_TIMEx_ConfigBreakInput+0x66>
 800b31a:	d822      	bhi.n	800b362 <HAL_TIMEx_ConfigBreakInput+0x7a>
 800b31c:	2b01      	cmp	r3, #1
 800b31e:	d002      	beq.n	800b326 <HAL_TIMEx_ConfigBreakInput+0x3e>
 800b320:	2b02      	cmp	r3, #2
 800b322:	d00a      	beq.n	800b33a <HAL_TIMEx_ConfigBreakInput+0x52>
 800b324:	e01d      	b.n	800b362 <HAL_TIMEx_ConfigBreakInput+0x7a>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 800b326:	2301      	movs	r3, #1
 800b328:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 800b32a:	2300      	movs	r3, #0
 800b32c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 800b32e:	2380      	movs	r3, #128	; 0x80
 800b330:	009b      	lsls	r3, r3, #2
 800b332:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 800b334:	2309      	movs	r3, #9
 800b336:	617b      	str	r3, [r7, #20]
      break;
 800b338:	e01c      	b.n	800b374 <HAL_TIMEx_ConfigBreakInput+0x8c>
    }
#if defined(COMP1) && defined(COMP2)
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 800b33a:	2302      	movs	r3, #2
 800b33c:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 800b33e:	2301      	movs	r3, #1
 800b340:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 800b342:	2380      	movs	r3, #128	; 0x80
 800b344:	00db      	lsls	r3, r3, #3
 800b346:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 800b348:	230a      	movs	r3, #10
 800b34a:	617b      	str	r3, [r7, #20]
      break;
 800b34c:	e012      	b.n	800b374 <HAL_TIMEx_ConfigBreakInput+0x8c>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 800b34e:	2304      	movs	r3, #4
 800b350:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 800b352:	2302      	movs	r3, #2
 800b354:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 800b356:	2380      	movs	r3, #128	; 0x80
 800b358:	011b      	lsls	r3, r3, #4
 800b35a:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 800b35c:	230b      	movs	r3, #11
 800b35e:	617b      	str	r3, [r7, #20]
      break;
 800b360:	e008      	b.n	800b374 <HAL_TIMEx_ConfigBreakInput+0x8c>
    }
#endif /* COMP3 */

    default:
    {
      bkin_enable_mask = 0U;
 800b362:	2300      	movs	r3, #0
 800b364:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 800b366:	2300      	movs	r3, #0
 800b368:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 800b36a:	2300      	movs	r3, #0
 800b36c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 800b36e:	2300      	movs	r3, #0
 800b370:	617b      	str	r3, [r7, #20]
      break;
 800b372:	46c0      	nop			; (mov r8, r8)
    }
  }

  switch (BreakInput)
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	2b01      	cmp	r3, #1
 800b378:	d003      	beq.n	800b382 <HAL_TIMEx_ConfigBreakInput+0x9a>
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	2b02      	cmp	r3, #2
 800b37e:	d027      	beq.n	800b3d0 <HAL_TIMEx_ConfigBreakInput+0xe8>
 800b380:	e04d      	b.n	800b41e <HAL_TIMEx_ConfigBreakInput+0x136>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b388:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800b38a:	6a3b      	ldr	r3, [r7, #32]
 800b38c:	43da      	mvns	r2, r3
 800b38e:	693b      	ldr	r3, [r7, #16]
 800b390:	4013      	ands	r3, r2
 800b392:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	685a      	ldr	r2, [r3, #4]
 800b398:	69bb      	ldr	r3, [r7, #24]
 800b39a:	409a      	lsls	r2, r3
 800b39c:	0013      	movs	r3, r2
 800b39e:	6a3a      	ldr	r2, [r7, #32]
 800b3a0:	4013      	ands	r3, r2
 800b3a2:	693a      	ldr	r2, [r7, #16]
 800b3a4:	4313      	orrs	r3, r2
 800b3a6:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800b3a8:	69fb      	ldr	r3, [r7, #28]
 800b3aa:	43da      	mvns	r2, r3
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	4013      	ands	r3, r2
 800b3b0:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	689a      	ldr	r2, [r3, #8]
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	409a      	lsls	r2, r3
 800b3ba:	0013      	movs	r3, r2
 800b3bc:	69fa      	ldr	r2, [r7, #28]
 800b3be:	4013      	ands	r3, r2
 800b3c0:	693a      	ldr	r2, [r7, #16]
 800b3c2:	4313      	orrs	r3, r2
 800b3c4:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	693a      	ldr	r2, [r7, #16]
 800b3cc:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 800b3ce:	e02b      	b.n	800b428 <HAL_TIMEx_ConfigBreakInput+0x140>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3d6:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800b3d8:	6a3b      	ldr	r3, [r7, #32]
 800b3da:	43da      	mvns	r2, r3
 800b3dc:	693b      	ldr	r3, [r7, #16]
 800b3de:	4013      	ands	r3, r2
 800b3e0:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	685a      	ldr	r2, [r3, #4]
 800b3e6:	69bb      	ldr	r3, [r7, #24]
 800b3e8:	409a      	lsls	r2, r3
 800b3ea:	0013      	movs	r3, r2
 800b3ec:	6a3a      	ldr	r2, [r7, #32]
 800b3ee:	4013      	ands	r3, r2
 800b3f0:	693a      	ldr	r2, [r7, #16]
 800b3f2:	4313      	orrs	r3, r2
 800b3f4:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800b3f6:	69fb      	ldr	r3, [r7, #28]
 800b3f8:	43da      	mvns	r2, r3
 800b3fa:	693b      	ldr	r3, [r7, #16]
 800b3fc:	4013      	ands	r3, r2
 800b3fe:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	689a      	ldr	r2, [r3, #8]
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	409a      	lsls	r2, r3
 800b408:	0013      	movs	r3, r2
 800b40a:	69fa      	ldr	r2, [r7, #28]
 800b40c:	4013      	ands	r3, r2
 800b40e:	693a      	ldr	r2, [r7, #16]
 800b410:	4313      	orrs	r3, r2
 800b412:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	693a      	ldr	r2, [r7, #16]
 800b41a:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800b41c:	e004      	b.n	800b428 <HAL_TIMEx_ConfigBreakInput+0x140>
    }
    default:
      status = HAL_ERROR;
 800b41e:	2327      	movs	r3, #39	; 0x27
 800b420:	18fb      	adds	r3, r7, r3
 800b422:	2201      	movs	r2, #1
 800b424:	701a      	strb	r2, [r3, #0]
      break;
 800b426:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	223c      	movs	r2, #60	; 0x3c
 800b42c:	2100      	movs	r1, #0
 800b42e:	5499      	strb	r1, [r3, r2]

  return status;
 800b430:	2327      	movs	r3, #39	; 0x27
 800b432:	18fb      	adds	r3, r7, r3
 800b434:	781b      	ldrb	r3, [r3, #0]
}
 800b436:	0018      	movs	r0, r3
 800b438:	46bd      	mov	sp, r7
 800b43a:	b00a      	add	sp, #40	; 0x28
 800b43c:	bd80      	pop	{r7, pc}
	...

0800b440 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b082      	sub	sp, #8
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d101      	bne.n	800b452 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800b44e:	2301      	movs	r3, #1
 800b450:	e03f      	b.n	800b4d2 <HAL_USART_Init+0x92>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2259      	movs	r2, #89	; 0x59
 800b456:	5c9b      	ldrb	r3, [r3, r2]
 800b458:	b2db      	uxtb	r3, r3
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d107      	bne.n	800b46e <HAL_USART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2258      	movs	r2, #88	; 0x58
 800b462:	2100      	movs	r1, #0
 800b464:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	0018      	movs	r0, r3
 800b46a:	f7f9 fdab 	bl	8004fc4 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2259      	movs	r2, #89	; 0x59
 800b472:	2102      	movs	r1, #2
 800b474:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	681a      	ldr	r2, [r3, #0]
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	2101      	movs	r1, #1
 800b482:	438a      	bics	r2, r1
 800b484:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	0018      	movs	r0, r3
 800b48a:	f000 fae3 	bl	800ba54 <USART_SetConfig>
 800b48e:	0003      	movs	r3, r0
 800b490:	2b01      	cmp	r3, #1
 800b492:	d101      	bne.n	800b498 <HAL_USART_Init+0x58>
  {
    return HAL_ERROR;
 800b494:	2301      	movs	r3, #1
 800b496:	e01c      	b.n	800b4d2 <HAL_USART_Init+0x92>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	685a      	ldr	r2, [r3, #4]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	490e      	ldr	r1, [pc, #56]	; (800b4dc <HAL_USART_Init+0x9c>)
 800b4a4:	400a      	ands	r2, r1
 800b4a6:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	689a      	ldr	r2, [r3, #8]
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	212a      	movs	r1, #42	; 0x2a
 800b4b4:	438a      	bics	r2, r1
 800b4b6:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	681a      	ldr	r2, [r3, #0]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	2101      	movs	r1, #1
 800b4c4:	430a      	orrs	r2, r1
 800b4c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	0018      	movs	r0, r3
 800b4cc:	f000 fd5e 	bl	800bf8c <USART_CheckIdleState>
 800b4d0:	0003      	movs	r3, r0
}
 800b4d2:	0018      	movs	r0, r3
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	b002      	add	sp, #8
 800b4d8:	bd80      	pop	{r7, pc}
 800b4da:	46c0      	nop			; (mov r8, r8)
 800b4dc:	ffffbfff 	.word	0xffffbfff

0800b4e0 <HAL_USART_Transmit>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size,
                                     uint32_t Timeout)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b08a      	sub	sp, #40	; 0x28
 800b4e4:	af02      	add	r7, sp, #8
 800b4e6:	60f8      	str	r0, [r7, #12]
 800b4e8:	60b9      	str	r1, [r7, #8]
 800b4ea:	603b      	str	r3, [r7, #0]
 800b4ec:	1dbb      	adds	r3, r7, #6
 800b4ee:	801a      	strh	r2, [r3, #0]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	2259      	movs	r2, #89	; 0x59
 800b4f4:	5c9b      	ldrb	r3, [r3, r2]
 800b4f6:	b2db      	uxtb	r3, r3
 800b4f8:	2b01      	cmp	r3, #1
 800b4fa:	d000      	beq.n	800b4fe <HAL_USART_Transmit+0x1e>
 800b4fc:	e0a9      	b.n	800b652 <HAL_USART_Transmit+0x172>
  {
    if ((pTxData == NULL) || (Size == 0U))
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d003      	beq.n	800b50c <HAL_USART_Transmit+0x2c>
 800b504:	1dbb      	adds	r3, r7, #6
 800b506:	881b      	ldrh	r3, [r3, #0]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d101      	bne.n	800b510 <HAL_USART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b50c:	2301      	movs	r3, #1
 800b50e:	e0a1      	b.n	800b654 <HAL_USART_Transmit+0x174>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	689a      	ldr	r2, [r3, #8]
 800b514:	2380      	movs	r3, #128	; 0x80
 800b516:	015b      	lsls	r3, r3, #5
 800b518:	429a      	cmp	r2, r3
 800b51a:	d109      	bne.n	800b530 <HAL_USART_Transmit+0x50>
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	691b      	ldr	r3, [r3, #16]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d105      	bne.n	800b530 <HAL_USART_Transmit+0x50>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	2201      	movs	r2, #1
 800b528:	4013      	ands	r3, r2
 800b52a:	d001      	beq.n	800b530 <HAL_USART_Transmit+0x50>
      {
        return  HAL_ERROR;
 800b52c:	2301      	movs	r3, #1
 800b52e:	e091      	b.n	800b654 <HAL_USART_Transmit+0x174>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	2258      	movs	r2, #88	; 0x58
 800b534:	5c9b      	ldrb	r3, [r3, r2]
 800b536:	2b01      	cmp	r3, #1
 800b538:	d101      	bne.n	800b53e <HAL_USART_Transmit+0x5e>
 800b53a:	2302      	movs	r3, #2
 800b53c:	e08a      	b.n	800b654 <HAL_USART_Transmit+0x174>
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	2258      	movs	r2, #88	; 0x58
 800b542:	2101      	movs	r1, #1
 800b544:	5499      	strb	r1, [r3, r2]

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	2200      	movs	r2, #0
 800b54a:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	2259      	movs	r2, #89	; 0x59
 800b550:	2112      	movs	r1, #18
 800b552:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b554:	f7f9 ff5e 	bl	8005414 <HAL_GetTick>
 800b558:	0003      	movs	r3, r0
 800b55a:	617b      	str	r3, [r7, #20]

    husart->TxXferSize = Size;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	1dba      	adds	r2, r7, #6
 800b560:	8812      	ldrh	r2, [r2, #0]
 800b562:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	1dba      	adds	r2, r7, #6
 800b568:	8812      	ldrh	r2, [r2, #0]
 800b56a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	689a      	ldr	r2, [r3, #8]
 800b570:	2380      	movs	r3, #128	; 0x80
 800b572:	015b      	lsls	r3, r3, #5
 800b574:	429a      	cmp	r2, r3
 800b576:	d108      	bne.n	800b58a <HAL_USART_Transmit+0xaa>
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	691b      	ldr	r3, [r3, #16]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d104      	bne.n	800b58a <HAL_USART_Transmit+0xaa>
    {
      ptxdata8bits  = NULL;
 800b580:	2300      	movs	r3, #0
 800b582:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	61bb      	str	r3, [r7, #24]
 800b588:	e003      	b.n	800b592 <HAL_USART_Transmit+0xb2>
    }
    else
    {
      ptxdata8bits  = pTxData;
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 800b58e:	2300      	movs	r3, #0
 800b590:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 800b592:	e02a      	b.n	800b5ea <HAL_USART_Transmit+0x10a>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b594:	697a      	ldr	r2, [r7, #20]
 800b596:	68f8      	ldr	r0, [r7, #12]
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	9300      	str	r3, [sp, #0]
 800b59c:	0013      	movs	r3, r2
 800b59e:	2200      	movs	r2, #0
 800b5a0:	2180      	movs	r1, #128	; 0x80
 800b5a2:	f000 fa22 	bl	800b9ea <USART_WaitOnFlagUntilTimeout>
 800b5a6:	1e03      	subs	r3, r0, #0
 800b5a8:	d001      	beq.n	800b5ae <HAL_USART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 800b5aa:	2303      	movs	r3, #3
 800b5ac:	e052      	b.n	800b654 <HAL_USART_Transmit+0x174>
      }
      if (ptxdata8bits == NULL)
 800b5ae:	69fb      	ldr	r3, [r7, #28]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d10b      	bne.n	800b5cc <HAL_USART_Transmit+0xec>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 800b5b4:	69bb      	ldr	r3, [r7, #24]
 800b5b6:	881b      	ldrh	r3, [r3, #0]
 800b5b8:	001a      	movs	r2, r3
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	05d2      	lsls	r2, r2, #23
 800b5c0:	0dd2      	lsrs	r2, r2, #23
 800b5c2:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 800b5c4:	69bb      	ldr	r3, [r7, #24]
 800b5c6:	3302      	adds	r3, #2
 800b5c8:	61bb      	str	r3, [r7, #24]
 800b5ca:	e007      	b.n	800b5dc <HAL_USART_Transmit+0xfc>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 800b5cc:	69fb      	ldr	r3, [r7, #28]
 800b5ce:	781a      	ldrb	r2, [r3, #0]
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 800b5d6:	69fb      	ldr	r3, [r7, #28]
 800b5d8:	3301      	adds	r3, #1
 800b5da:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b5e0:	b29b      	uxth	r3, r3
 800b5e2:	3b01      	subs	r3, #1
 800b5e4:	b29a      	uxth	r2, r3
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (husart->TxXferCount > 0U)
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b5ee:	b29b      	uxth	r3, r3
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d1cf      	bne.n	800b594 <HAL_USART_Transmit+0xb4>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b5f4:	697a      	ldr	r2, [r7, #20]
 800b5f6:	68f8      	ldr	r0, [r7, #12]
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	9300      	str	r3, [sp, #0]
 800b5fc:	0013      	movs	r3, r2
 800b5fe:	2200      	movs	r2, #0
 800b600:	2140      	movs	r1, #64	; 0x40
 800b602:	f000 f9f2 	bl	800b9ea <USART_WaitOnFlagUntilTimeout>
 800b606:	1e03      	subs	r3, r0, #0
 800b608:	d001      	beq.n	800b60e <HAL_USART_Transmit+0x12e>
    {
      return HAL_TIMEOUT;
 800b60a:	2303      	movs	r3, #3
 800b60c:	e022      	b.n	800b654 <HAL_USART_Transmit+0x174>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	2240      	movs	r2, #64	; 0x40
 800b614:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	2208      	movs	r2, #8
 800b61c:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	699a      	ldr	r2, [r3, #24]
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	2108      	movs	r1, #8
 800b62a:	430a      	orrs	r2, r1
 800b62c:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	699a      	ldr	r2, [r3, #24]
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	2110      	movs	r1, #16
 800b63a:	430a      	orrs	r2, r1
 800b63c:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	2259      	movs	r2, #89	; 0x59
 800b642:	2101      	movs	r1, #1
 800b644:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	2258      	movs	r2, #88	; 0x58
 800b64a:	2100      	movs	r1, #0
 800b64c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800b64e:	2300      	movs	r3, #0
 800b650:	e000      	b.n	800b654 <HAL_USART_Transmit+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b652:	2302      	movs	r3, #2
  }
}
 800b654:	0018      	movs	r0, r3
 800b656:	46bd      	mov	sp, r7
 800b658:	b008      	add	sp, #32
 800b65a:	bd80      	pop	{r7, pc}

0800b65c <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b088      	sub	sp, #32
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	69db      	ldr	r3, [r3, #28]
 800b66a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	689b      	ldr	r3, [r3, #8]
 800b67a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF |
 800b67c:	69fb      	ldr	r3, [r7, #28]
 800b67e:	4ab3      	ldr	r2, [pc, #716]	; (800b94c <HAL_USART_IRQHandler+0x2f0>)
 800b680:	4013      	ands	r3, r2
 800b682:	613b      	str	r3, [r7, #16]
                                      USART_ISR_UDR));
  if (errorflags == 0U)
 800b684:	693b      	ldr	r3, [r7, #16]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d117      	bne.n	800b6ba <HAL_USART_IRQHandler+0x5e>
  {
    /* USART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b68a:	69fb      	ldr	r3, [r7, #28]
 800b68c:	2220      	movs	r2, #32
 800b68e:	4013      	ands	r3, r2
 800b690:	d013      	beq.n	800b6ba <HAL_USART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b692:	69bb      	ldr	r3, [r7, #24]
 800b694:	2220      	movs	r2, #32
 800b696:	4013      	ands	r3, r2
 800b698:	d104      	bne.n	800b6a4 <HAL_USART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b69a:	697a      	ldr	r2, [r7, #20]
 800b69c:	2380      	movs	r3, #128	; 0x80
 800b69e:	055b      	lsls	r3, r3, #21
 800b6a0:	4013      	ands	r3, r2
 800b6a2:	d00a      	beq.n	800b6ba <HAL_USART_IRQHandler+0x5e>
    {
      if (husart->RxISR != NULL)
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d100      	bne.n	800b6ae <HAL_USART_IRQHandler+0x52>
 800b6ac:	e14a      	b.n	800b944 <HAL_USART_IRQHandler+0x2e8>
      {
        husart->RxISR(husart);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6b2:	687a      	ldr	r2, [r7, #4]
 800b6b4:	0010      	movs	r0, r2
 800b6b6:	4798      	blx	r3
      }
      return;
 800b6b8:	e144      	b.n	800b944 <HAL_USART_IRQHandler+0x2e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d100      	bne.n	800b6c2 <HAL_USART_IRQHandler+0x66>
 800b6c0:	e100      	b.n	800b8c4 <HAL_USART_IRQHandler+0x268>
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	4aa2      	ldr	r2, [pc, #648]	; (800b950 <HAL_USART_IRQHandler+0x2f4>)
 800b6c6:	4013      	ands	r3, r2
 800b6c8:	d105      	bne.n	800b6d6 <HAL_USART_IRQHandler+0x7a>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
 800b6ca:	69ba      	ldr	r2, [r7, #24]
 800b6cc:	2390      	movs	r3, #144	; 0x90
 800b6ce:	005b      	lsls	r3, r3, #1
 800b6d0:	4013      	ands	r3, r2
 800b6d2:	d100      	bne.n	800b6d6 <HAL_USART_IRQHandler+0x7a>
 800b6d4:	e0f6      	b.n	800b8c4 <HAL_USART_IRQHandler+0x268>
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b6d6:	69fb      	ldr	r3, [r7, #28]
 800b6d8:	2201      	movs	r2, #1
 800b6da:	4013      	ands	r3, r2
 800b6dc:	d00e      	beq.n	800b6fc <HAL_USART_IRQHandler+0xa0>
 800b6de:	69ba      	ldr	r2, [r7, #24]
 800b6e0:	2380      	movs	r3, #128	; 0x80
 800b6e2:	005b      	lsls	r3, r3, #1
 800b6e4:	4013      	ands	r3, r2
 800b6e6:	d009      	beq.n	800b6fc <HAL_USART_IRQHandler+0xa0>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	2201      	movs	r2, #1
 800b6ee:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6f4:	2201      	movs	r2, #1
 800b6f6:	431a      	orrs	r2, r3
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b6fc:	69fb      	ldr	r3, [r7, #28]
 800b6fe:	2202      	movs	r2, #2
 800b700:	4013      	ands	r3, r2
 800b702:	d00d      	beq.n	800b720 <HAL_USART_IRQHandler+0xc4>
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	2201      	movs	r2, #1
 800b708:	4013      	ands	r3, r2
 800b70a:	d009      	beq.n	800b720 <HAL_USART_IRQHandler+0xc4>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	2202      	movs	r2, #2
 800b712:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b718:	2204      	movs	r2, #4
 800b71a:	431a      	orrs	r2, r3
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b720:	69fb      	ldr	r3, [r7, #28]
 800b722:	2204      	movs	r2, #4
 800b724:	4013      	ands	r3, r2
 800b726:	d00d      	beq.n	800b744 <HAL_USART_IRQHandler+0xe8>
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	2201      	movs	r2, #1
 800b72c:	4013      	ands	r3, r2
 800b72e:	d009      	beq.n	800b744 <HAL_USART_IRQHandler+0xe8>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	2204      	movs	r2, #4
 800b736:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b73c:	2202      	movs	r2, #2
 800b73e:	431a      	orrs	r2, r3
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b744:	69fb      	ldr	r3, [r7, #28]
 800b746:	2208      	movs	r2, #8
 800b748:	4013      	ands	r3, r2
 800b74a:	d011      	beq.n	800b770 <HAL_USART_IRQHandler+0x114>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b74c:	69bb      	ldr	r3, [r7, #24]
 800b74e:	2220      	movs	r2, #32
 800b750:	4013      	ands	r3, r2
 800b752:	d103      	bne.n	800b75c <HAL_USART_IRQHandler+0x100>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b754:	697b      	ldr	r3, [r7, #20]
 800b756:	4a7e      	ldr	r2, [pc, #504]	; (800b950 <HAL_USART_IRQHandler+0x2f4>)
 800b758:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b75a:	d009      	beq.n	800b770 <HAL_USART_IRQHandler+0x114>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	2208      	movs	r2, #8
 800b762:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b768:	2208      	movs	r2, #8
 800b76a:	431a      	orrs	r2, r3
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b770:	69fa      	ldr	r2, [r7, #28]
 800b772:	2380      	movs	r3, #128	; 0x80
 800b774:	011b      	lsls	r3, r3, #4
 800b776:	4013      	ands	r3, r2
 800b778:	d00f      	beq.n	800b79a <HAL_USART_IRQHandler+0x13e>
 800b77a:	69ba      	ldr	r2, [r7, #24]
 800b77c:	2380      	movs	r3, #128	; 0x80
 800b77e:	04db      	lsls	r3, r3, #19
 800b780:	4013      	ands	r3, r2
 800b782:	d00a      	beq.n	800b79a <HAL_USART_IRQHandler+0x13e>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_RTOF);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	2280      	movs	r2, #128	; 0x80
 800b78a:	0112      	lsls	r2, r2, #4
 800b78c:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_RTO;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b792:	2280      	movs	r2, #128	; 0x80
 800b794:	431a      	orrs	r2, r3
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART SPI slave underrun error interrupt occurred -------------------------*/
    if (((isrflags & USART_ISR_UDR) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b79a:	69fa      	ldr	r2, [r7, #28]
 800b79c:	2380      	movs	r3, #128	; 0x80
 800b79e:	019b      	lsls	r3, r3, #6
 800b7a0:	4013      	ands	r3, r2
 800b7a2:	d01a      	beq.n	800b7da <HAL_USART_IRQHandler+0x17e>
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	2201      	movs	r2, #1
 800b7a8:	4013      	ands	r3, r2
 800b7aa:	d016      	beq.n	800b7da <HAL_USART_IRQHandler+0x17e>
    {
      /* Ignore SPI slave underrun errors when reception is going on */
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2259      	movs	r2, #89	; 0x59
 800b7b0:	5c9b      	ldrb	r3, [r3, r2]
 800b7b2:	b2db      	uxtb	r3, r3
 800b7b4:	2b22      	cmp	r3, #34	; 0x22
 800b7b6:	d105      	bne.n	800b7c4 <HAL_USART_IRQHandler+0x168>
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	2280      	movs	r2, #128	; 0x80
 800b7be:	0192      	lsls	r2, r2, #6
 800b7c0:	621a      	str	r2, [r3, #32]
        return;
 800b7c2:	e0ca      	b.n	800b95a <HAL_USART_IRQHandler+0x2fe>
      }
      else
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	2280      	movs	r2, #128	; 0x80
 800b7ca:	0192      	lsls	r2, r2, #6
 800b7cc:	621a      	str	r2, [r3, #32]
        husart->ErrorCode |= HAL_USART_ERROR_UDR;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7d2:	2220      	movs	r2, #32
 800b7d4:	431a      	orrs	r2, r3
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d100      	bne.n	800b7e4 <HAL_USART_IRQHandler+0x188>
 800b7e2:	e0b1      	b.n	800b948 <HAL_USART_IRQHandler+0x2ec>
    {
      /* USART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b7e4:	69fb      	ldr	r3, [r7, #28]
 800b7e6:	2220      	movs	r2, #32
 800b7e8:	4013      	ands	r3, r2
 800b7ea:	d011      	beq.n	800b810 <HAL_USART_IRQHandler+0x1b4>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b7ec:	69bb      	ldr	r3, [r7, #24]
 800b7ee:	2220      	movs	r2, #32
 800b7f0:	4013      	ands	r3, r2
 800b7f2:	d104      	bne.n	800b7fe <HAL_USART_IRQHandler+0x1a2>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b7f4:	697a      	ldr	r2, [r7, #20]
 800b7f6:	2380      	movs	r3, #128	; 0x80
 800b7f8:	055b      	lsls	r3, r3, #21
 800b7fa:	4013      	ands	r3, r2
 800b7fc:	d008      	beq.n	800b810 <HAL_USART_IRQHandler+0x1b4>
      {
        if (husart->RxISR != NULL)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b802:	2b00      	cmp	r3, #0
 800b804:	d004      	beq.n	800b810 <HAL_USART_IRQHandler+0x1b4>
        {
          husart->RxISR(husart);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b80a:	687a      	ldr	r2, [r7, #4]
 800b80c:	0010      	movs	r0, r2
 800b80e:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b814:	2208      	movs	r2, #8
 800b816:	4013      	ands	r3, r2
 800b818:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	689b      	ldr	r3, [r3, #8]
 800b820:	2240      	movs	r2, #64	; 0x40
 800b822:	4013      	ands	r3, r2
 800b824:	2b40      	cmp	r3, #64	; 0x40
 800b826:	d002      	beq.n	800b82e <HAL_USART_IRQHandler+0x1d2>
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d040      	beq.n	800b8b0 <HAL_USART_IRQHandler+0x254>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	0018      	movs	r0, r3
 800b832:	f000 f8a5 	bl	800b980 <USART_EndTransfer>

        /* Abort the USART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	689b      	ldr	r3, [r3, #8]
 800b83c:	2240      	movs	r2, #64	; 0x40
 800b83e:	4013      	ands	r3, r2
 800b840:	2b40      	cmp	r3, #64	; 0x40
 800b842:	d130      	bne.n	800b8a6 <HAL_USART_IRQHandler+0x24a>
        {
          /* Disable the USART DMA Rx request if enabled */
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	689a      	ldr	r2, [r3, #8]
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	2140      	movs	r1, #64	; 0x40
 800b850:	438a      	bics	r2, r1
 800b852:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d008      	beq.n	800b86e <HAL_USART_IRQHandler+0x212>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b860:	2200      	movs	r2, #0
 800b862:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b868:	0018      	movs	r0, r3
 800b86a:	f7fa fa65 	bl	8005d38 <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b872:	2b00      	cmp	r3, #0
 800b874:	d012      	beq.n	800b89c <HAL_USART_IRQHandler+0x240>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b87a:	4a36      	ldr	r2, [pc, #216]	; (800b954 <HAL_USART_IRQHandler+0x2f8>)
 800b87c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b882:	0018      	movs	r0, r3
 800b884:	f7fa fa58 	bl	8005d38 <HAL_DMA_Abort_IT>
 800b888:	1e03      	subs	r3, r0, #0
 800b88a:	d019      	beq.n	800b8c0 <HAL_USART_IRQHandler+0x264>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b896:	0018      	movs	r0, r3
 800b898:	4790      	blx	r2
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b89a:	e011      	b.n	800b8c0 <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	0018      	movs	r0, r3
 800b8a0:	f000 f866 	bl	800b970 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b8a4:	e00c      	b.n	800b8c0 <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	0018      	movs	r0, r3
 800b8aa:	f000 f861 	bl	800b970 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b8ae:	e007      	b.n	800b8c0 <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	0018      	movs	r0, r3
 800b8b4:	f000 f85c 	bl	800b970 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }
    return;
 800b8be:	e043      	b.n	800b948 <HAL_USART_IRQHandler+0x2ec>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b8c0:	46c0      	nop			; (mov r8, r8)
    return;
 800b8c2:	e041      	b.n	800b948 <HAL_USART_IRQHandler+0x2ec>

  } /* End if some error occurs */


  /* USART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b8c4:	69fb      	ldr	r3, [r7, #28]
 800b8c6:	2280      	movs	r2, #128	; 0x80
 800b8c8:	4013      	ands	r3, r2
 800b8ca:	d012      	beq.n	800b8f2 <HAL_USART_IRQHandler+0x296>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b8cc:	69bb      	ldr	r3, [r7, #24]
 800b8ce:	2280      	movs	r2, #128	; 0x80
 800b8d0:	4013      	ands	r3, r2
 800b8d2:	d104      	bne.n	800b8de <HAL_USART_IRQHandler+0x282>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b8d4:	697a      	ldr	r2, [r7, #20]
 800b8d6:	2380      	movs	r3, #128	; 0x80
 800b8d8:	041b      	lsls	r3, r3, #16
 800b8da:	4013      	ands	r3, r2
 800b8dc:	d009      	beq.n	800b8f2 <HAL_USART_IRQHandler+0x296>
  {
    if (husart->TxISR != NULL)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d038      	beq.n	800b958 <HAL_USART_IRQHandler+0x2fc>
    {
      husart->TxISR(husart);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8ea:	687a      	ldr	r2, [r7, #4]
 800b8ec:	0010      	movs	r0, r2
 800b8ee:	4798      	blx	r3
    }
    return;
 800b8f0:	e032      	b.n	800b958 <HAL_USART_IRQHandler+0x2fc>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b8f2:	69fb      	ldr	r3, [r7, #28]
 800b8f4:	2240      	movs	r2, #64	; 0x40
 800b8f6:	4013      	ands	r3, r2
 800b8f8:	d008      	beq.n	800b90c <HAL_USART_IRQHandler+0x2b0>
 800b8fa:	69bb      	ldr	r3, [r7, #24]
 800b8fc:	2240      	movs	r2, #64	; 0x40
 800b8fe:	4013      	ands	r3, r2
 800b900:	d004      	beq.n	800b90c <HAL_USART_IRQHandler+0x2b0>
  {
    USART_EndTransmit_IT(husart);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	0018      	movs	r0, r3
 800b906:	f000 fb85 	bl	800c014 <USART_EndTransmit_IT>
    return;
 800b90a:	e026      	b.n	800b95a <HAL_USART_IRQHandler+0x2fe>
  }

  /* USART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b90c:	69fa      	ldr	r2, [r7, #28]
 800b90e:	2380      	movs	r3, #128	; 0x80
 800b910:	041b      	lsls	r3, r3, #16
 800b912:	4013      	ands	r3, r2
 800b914:	d009      	beq.n	800b92a <HAL_USART_IRQHandler+0x2ce>
 800b916:	69ba      	ldr	r2, [r7, #24]
 800b918:	2380      	movs	r3, #128	; 0x80
 800b91a:	05db      	lsls	r3, r3, #23
 800b91c:	4013      	ands	r3, r2
 800b91e:	d004      	beq.n	800b92a <HAL_USART_IRQHandler+0x2ce>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    husart->TxFifoEmptyCallback(husart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_USARTEx_TxFifoEmptyCallback(husart);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	0018      	movs	r0, r3
 800b924:	f000 fbc1 	bl	800c0aa <HAL_USARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 800b928:	e017      	b.n	800b95a <HAL_USART_IRQHandler+0x2fe>
  }

  /* USART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b92a:	69fa      	ldr	r2, [r7, #28]
 800b92c:	2380      	movs	r3, #128	; 0x80
 800b92e:	045b      	lsls	r3, r3, #17
 800b930:	4013      	ands	r3, r2
 800b932:	d012      	beq.n	800b95a <HAL_USART_IRQHandler+0x2fe>
 800b934:	69bb      	ldr	r3, [r7, #24]
 800b936:	2b00      	cmp	r3, #0
 800b938:	da0f      	bge.n	800b95a <HAL_USART_IRQHandler+0x2fe>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    husart->RxFifoFullCallback(husart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_USARTEx_RxFifoFullCallback(husart);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	0018      	movs	r0, r3
 800b93e:	f000 fbac 	bl	800c09a <HAL_USARTEx_RxFifoFullCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 800b942:	e00a      	b.n	800b95a <HAL_USART_IRQHandler+0x2fe>
      return;
 800b944:	46c0      	nop			; (mov r8, r8)
 800b946:	e008      	b.n	800b95a <HAL_USART_IRQHandler+0x2fe>
    return;
 800b948:	46c0      	nop			; (mov r8, r8)
 800b94a:	e006      	b.n	800b95a <HAL_USART_IRQHandler+0x2fe>
 800b94c:	0000280f 	.word	0x0000280f
 800b950:	10000001 	.word	0x10000001
 800b954:	0800b9c1 	.word	0x0800b9c1
    return;
 800b958:	46c0      	nop			; (mov r8, r8)
  }
}
 800b95a:	46bd      	mov	sp, r7
 800b95c:	b008      	add	sp, #32
 800b95e:	bd80      	pop	{r7, pc}

0800b960 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b082      	sub	sp, #8
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 800b968:	46c0      	nop			; (mov r8, r8)
 800b96a:	46bd      	mov	sp, r7
 800b96c:	b002      	add	sp, #8
 800b96e:	bd80      	pop	{r7, pc}

0800b970 <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b082      	sub	sp, #8
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 800b978:	46c0      	nop			; (mov r8, r8)
 800b97a:	46bd      	mov	sp, r7
 800b97c:	b002      	add	sp, #8
 800b97e:	bd80      	pop	{r7, pc}

0800b980 <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b082      	sub	sp, #8
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, RXFT, TXFT, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	681a      	ldr	r2, [r3, #0]
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	4909      	ldr	r1, [pc, #36]	; (800b9b8 <USART_EndTransfer+0x38>)
 800b994:	400a      	ands	r2, r1
 800b996:	601a      	str	r2, [r3, #0]
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	689a      	ldr	r2, [r3, #8]
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	4906      	ldr	r1, [pc, #24]	; (800b9bc <USART_EndTransfer+0x3c>)
 800b9a4:	400a      	ands	r2, r1
 800b9a6:	609a      	str	r2, [r3, #8]

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2259      	movs	r2, #89	; 0x59
 800b9ac:	2101      	movs	r1, #1
 800b9ae:	5499      	strb	r1, [r3, r2]
}
 800b9b0:	46c0      	nop			; (mov r8, r8)
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	b002      	add	sp, #8
 800b9b6:	bd80      	pop	{r7, pc}
 800b9b8:	fffffe1f 	.word	0xfffffe1f
 800b9bc:	ef7ffffe 	.word	0xef7ffffe

0800b9c0 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b084      	sub	sp, #16
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9cc:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	85da      	strh	r2, [r3, #46]	; 0x2e
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	0018      	movs	r0, r3
 800b9de:	f7ff ffc7 	bl	800b970 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 800b9e2:	46c0      	nop			; (mov r8, r8)
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	b004      	add	sp, #16
 800b9e8:	bd80      	pop	{r7, pc}

0800b9ea <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800b9ea:	b580      	push	{r7, lr}
 800b9ec:	b084      	sub	sp, #16
 800b9ee:	af00      	add	r7, sp, #0
 800b9f0:	60f8      	str	r0, [r7, #12]
 800b9f2:	60b9      	str	r1, [r7, #8]
 800b9f4:	603b      	str	r3, [r7, #0]
 800b9f6:	1dfb      	adds	r3, r7, #7
 800b9f8:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800b9fa:	e017      	b.n	800ba2c <USART_WaitOnFlagUntilTimeout+0x42>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b9fc:	69bb      	ldr	r3, [r7, #24]
 800b9fe:	3301      	adds	r3, #1
 800ba00:	d014      	beq.n	800ba2c <USART_WaitOnFlagUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba02:	f7f9 fd07 	bl	8005414 <HAL_GetTick>
 800ba06:	0002      	movs	r2, r0
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	1ad3      	subs	r3, r2, r3
 800ba0c:	69ba      	ldr	r2, [r7, #24]
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d302      	bcc.n	800ba18 <USART_WaitOnFlagUntilTimeout+0x2e>
 800ba12:	69bb      	ldr	r3, [r7, #24]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d109      	bne.n	800ba2c <USART_WaitOnFlagUntilTimeout+0x42>
      {
        husart->State = HAL_USART_STATE_READY;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	2259      	movs	r2, #89	; 0x59
 800ba1c:	2101      	movs	r1, #1
 800ba1e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	2258      	movs	r2, #88	; 0x58
 800ba24:	2100      	movs	r1, #0
 800ba26:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800ba28:	2303      	movs	r3, #3
 800ba2a:	e00f      	b.n	800ba4c <USART_WaitOnFlagUntilTimeout+0x62>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	69db      	ldr	r3, [r3, #28]
 800ba32:	68ba      	ldr	r2, [r7, #8]
 800ba34:	4013      	ands	r3, r2
 800ba36:	68ba      	ldr	r2, [r7, #8]
 800ba38:	1ad3      	subs	r3, r2, r3
 800ba3a:	425a      	negs	r2, r3
 800ba3c:	4153      	adcs	r3, r2
 800ba3e:	b2db      	uxtb	r3, r3
 800ba40:	001a      	movs	r2, r3
 800ba42:	1dfb      	adds	r3, r7, #7
 800ba44:	781b      	ldrb	r3, [r3, #0]
 800ba46:	429a      	cmp	r2, r3
 800ba48:	d0d8      	beq.n	800b9fc <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ba4a:	2300      	movs	r3, #0
}
 800ba4c:	0018      	movs	r0, r3
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	b004      	add	sp, #16
 800ba52:	bd80      	pop	{r7, pc}

0800ba54 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b088      	sub	sp, #32
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800ba5c:	231e      	movs	r3, #30
 800ba5e:	18fb      	adds	r3, r7, r3
 800ba60:	2200      	movs	r2, #0
 800ba62:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800ba64:	2300      	movs	r3, #0
 800ba66:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	689a      	ldr	r2, [r3, #8]
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	691b      	ldr	r3, [r3, #16]
 800ba70:	431a      	orrs	r2, r3
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	695b      	ldr	r3, [r3, #20]
 800ba76:	4313      	orrs	r3, r2
 800ba78:	2280      	movs	r2, #128	; 0x80
 800ba7a:	0212      	lsls	r2, r2, #8
 800ba7c:	4313      	orrs	r3, r2
 800ba7e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	4ab1      	ldr	r2, [pc, #708]	; (800bd4c <USART_SetConfig+0x2f8>)
 800ba88:	4013      	ands	r3, r2
 800ba8a:	0019      	movs	r1, r3
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	697a      	ldr	r2, [r7, #20]
 800ba92:	430a      	orrs	r2, r1
 800ba94:	601a      	str	r2, [r3, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800ba96:	2380      	movs	r3, #128	; 0x80
 800ba98:	011b      	lsls	r3, r3, #4
 800ba9a:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6a1b      	ldr	r3, [r3, #32]
 800baa0:	697a      	ldr	r2, [r7, #20]
 800baa2:	4313      	orrs	r3, r2
 800baa4:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	699a      	ldr	r2, [r3, #24]
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	69db      	ldr	r3, [r3, #28]
 800baae:	4313      	orrs	r3, r2
 800bab0:	697a      	ldr	r2, [r7, #20]
 800bab2:	4313      	orrs	r3, r2
 800bab4:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	68db      	ldr	r3, [r3, #12]
 800baba:	697a      	ldr	r2, [r7, #20]
 800babc:	4313      	orrs	r3, r2
 800babe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	685b      	ldr	r3, [r3, #4]
 800bac6:	4aa2      	ldr	r2, [pc, #648]	; (800bd50 <USART_SetConfig+0x2fc>)
 800bac8:	4013      	ands	r3, r2
 800baca:	0019      	movs	r1, r3
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	697a      	ldr	r2, [r7, #20]
 800bad2:	430a      	orrs	r2, r1
 800bad4:	605a      	str	r2, [r3, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800badc:	220f      	movs	r2, #15
 800bade:	4393      	bics	r3, r2
 800bae0:	0019      	movs	r1, r3
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	430a      	orrs	r2, r1
 800baec:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	4a98      	ldr	r2, [pc, #608]	; (800bd54 <USART_SetConfig+0x300>)
 800baf4:	4293      	cmp	r3, r2
 800baf6:	d127      	bne.n	800bb48 <USART_SetConfig+0xf4>
 800baf8:	4b97      	ldr	r3, [pc, #604]	; (800bd58 <USART_SetConfig+0x304>)
 800bafa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bafc:	2203      	movs	r2, #3
 800bafe:	4013      	ands	r3, r2
 800bb00:	2b03      	cmp	r3, #3
 800bb02:	d017      	beq.n	800bb34 <USART_SetConfig+0xe0>
 800bb04:	d81b      	bhi.n	800bb3e <USART_SetConfig+0xea>
 800bb06:	2b02      	cmp	r3, #2
 800bb08:	d00a      	beq.n	800bb20 <USART_SetConfig+0xcc>
 800bb0a:	d818      	bhi.n	800bb3e <USART_SetConfig+0xea>
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d002      	beq.n	800bb16 <USART_SetConfig+0xc2>
 800bb10:	2b01      	cmp	r3, #1
 800bb12:	d00a      	beq.n	800bb2a <USART_SetConfig+0xd6>
 800bb14:	e013      	b.n	800bb3e <USART_SetConfig+0xea>
 800bb16:	231f      	movs	r3, #31
 800bb18:	18fb      	adds	r3, r7, r3
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	701a      	strb	r2, [r3, #0]
 800bb1e:	e058      	b.n	800bbd2 <USART_SetConfig+0x17e>
 800bb20:	231f      	movs	r3, #31
 800bb22:	18fb      	adds	r3, r7, r3
 800bb24:	2202      	movs	r2, #2
 800bb26:	701a      	strb	r2, [r3, #0]
 800bb28:	e053      	b.n	800bbd2 <USART_SetConfig+0x17e>
 800bb2a:	231f      	movs	r3, #31
 800bb2c:	18fb      	adds	r3, r7, r3
 800bb2e:	2204      	movs	r2, #4
 800bb30:	701a      	strb	r2, [r3, #0]
 800bb32:	e04e      	b.n	800bbd2 <USART_SetConfig+0x17e>
 800bb34:	231f      	movs	r3, #31
 800bb36:	18fb      	adds	r3, r7, r3
 800bb38:	2208      	movs	r2, #8
 800bb3a:	701a      	strb	r2, [r3, #0]
 800bb3c:	e049      	b.n	800bbd2 <USART_SetConfig+0x17e>
 800bb3e:	231f      	movs	r3, #31
 800bb40:	18fb      	adds	r3, r7, r3
 800bb42:	2210      	movs	r2, #16
 800bb44:	701a      	strb	r2, [r3, #0]
 800bb46:	e044      	b.n	800bbd2 <USART_SetConfig+0x17e>
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	4a83      	ldr	r2, [pc, #524]	; (800bd5c <USART_SetConfig+0x308>)
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	d127      	bne.n	800bba2 <USART_SetConfig+0x14e>
 800bb52:	4b81      	ldr	r3, [pc, #516]	; (800bd58 <USART_SetConfig+0x304>)
 800bb54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb56:	220c      	movs	r2, #12
 800bb58:	4013      	ands	r3, r2
 800bb5a:	2b0c      	cmp	r3, #12
 800bb5c:	d017      	beq.n	800bb8e <USART_SetConfig+0x13a>
 800bb5e:	d81b      	bhi.n	800bb98 <USART_SetConfig+0x144>
 800bb60:	2b08      	cmp	r3, #8
 800bb62:	d00a      	beq.n	800bb7a <USART_SetConfig+0x126>
 800bb64:	d818      	bhi.n	800bb98 <USART_SetConfig+0x144>
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d002      	beq.n	800bb70 <USART_SetConfig+0x11c>
 800bb6a:	2b04      	cmp	r3, #4
 800bb6c:	d00a      	beq.n	800bb84 <USART_SetConfig+0x130>
 800bb6e:	e013      	b.n	800bb98 <USART_SetConfig+0x144>
 800bb70:	231f      	movs	r3, #31
 800bb72:	18fb      	adds	r3, r7, r3
 800bb74:	2200      	movs	r2, #0
 800bb76:	701a      	strb	r2, [r3, #0]
 800bb78:	e02b      	b.n	800bbd2 <USART_SetConfig+0x17e>
 800bb7a:	231f      	movs	r3, #31
 800bb7c:	18fb      	adds	r3, r7, r3
 800bb7e:	2202      	movs	r2, #2
 800bb80:	701a      	strb	r2, [r3, #0]
 800bb82:	e026      	b.n	800bbd2 <USART_SetConfig+0x17e>
 800bb84:	231f      	movs	r3, #31
 800bb86:	18fb      	adds	r3, r7, r3
 800bb88:	2204      	movs	r2, #4
 800bb8a:	701a      	strb	r2, [r3, #0]
 800bb8c:	e021      	b.n	800bbd2 <USART_SetConfig+0x17e>
 800bb8e:	231f      	movs	r3, #31
 800bb90:	18fb      	adds	r3, r7, r3
 800bb92:	2208      	movs	r2, #8
 800bb94:	701a      	strb	r2, [r3, #0]
 800bb96:	e01c      	b.n	800bbd2 <USART_SetConfig+0x17e>
 800bb98:	231f      	movs	r3, #31
 800bb9a:	18fb      	adds	r3, r7, r3
 800bb9c:	2210      	movs	r2, #16
 800bb9e:	701a      	strb	r2, [r3, #0]
 800bba0:	e017      	b.n	800bbd2 <USART_SetConfig+0x17e>
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	4a6e      	ldr	r2, [pc, #440]	; (800bd60 <USART_SetConfig+0x30c>)
 800bba8:	4293      	cmp	r3, r2
 800bbaa:	d104      	bne.n	800bbb6 <USART_SetConfig+0x162>
 800bbac:	231f      	movs	r3, #31
 800bbae:	18fb      	adds	r3, r7, r3
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	701a      	strb	r2, [r3, #0]
 800bbb4:	e00d      	b.n	800bbd2 <USART_SetConfig+0x17e>
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	4a6a      	ldr	r2, [pc, #424]	; (800bd64 <USART_SetConfig+0x310>)
 800bbbc:	4293      	cmp	r3, r2
 800bbbe:	d104      	bne.n	800bbca <USART_SetConfig+0x176>
 800bbc0:	231f      	movs	r3, #31
 800bbc2:	18fb      	adds	r3, r7, r3
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	701a      	strb	r2, [r3, #0]
 800bbc8:	e003      	b.n	800bbd2 <USART_SetConfig+0x17e>
 800bbca:	231f      	movs	r3, #31
 800bbcc:	18fb      	adds	r3, r7, r3
 800bbce:	2210      	movs	r2, #16
 800bbd0:	701a      	strb	r2, [r3, #0]

  switch (clocksource)
 800bbd2:	231f      	movs	r3, #31
 800bbd4:	18fb      	adds	r3, r7, r3
 800bbd6:	781b      	ldrb	r3, [r3, #0]
 800bbd8:	2b08      	cmp	r3, #8
 800bbda:	d100      	bne.n	800bbde <USART_SetConfig+0x18a>
 800bbdc:	e139      	b.n	800be52 <USART_SetConfig+0x3fe>
 800bbde:	dd00      	ble.n	800bbe2 <USART_SetConfig+0x18e>
 800bbe0:	e195      	b.n	800bf0e <USART_SetConfig+0x4ba>
 800bbe2:	2b04      	cmp	r3, #4
 800bbe4:	d100      	bne.n	800bbe8 <USART_SetConfig+0x194>
 800bbe6:	e0d3      	b.n	800bd90 <USART_SetConfig+0x33c>
 800bbe8:	dd00      	ble.n	800bbec <USART_SetConfig+0x198>
 800bbea:	e190      	b.n	800bf0e <USART_SetConfig+0x4ba>
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d003      	beq.n	800bbf8 <USART_SetConfig+0x1a4>
 800bbf0:	2b02      	cmp	r3, #2
 800bbf2:	d100      	bne.n	800bbf6 <USART_SetConfig+0x1a2>
 800bbf4:	e061      	b.n	800bcba <USART_SetConfig+0x266>
 800bbf6:	e18a      	b.n	800bf0e <USART_SetConfig+0x4ba>
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800bbf8:	f7fc fdb2 	bl	8008760 <HAL_RCC_GetPCLK1Freq>
 800bbfc:	0003      	movs	r3, r0
 800bbfe:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d044      	beq.n	800bc92 <USART_SetConfig+0x23e>
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc0c:	2b01      	cmp	r3, #1
 800bc0e:	d03e      	beq.n	800bc8e <USART_SetConfig+0x23a>
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc14:	2b02      	cmp	r3, #2
 800bc16:	d038      	beq.n	800bc8a <USART_SetConfig+0x236>
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc1c:	2b03      	cmp	r3, #3
 800bc1e:	d032      	beq.n	800bc86 <USART_SetConfig+0x232>
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc24:	2b04      	cmp	r3, #4
 800bc26:	d02c      	beq.n	800bc82 <USART_SetConfig+0x22e>
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc2c:	2b05      	cmp	r3, #5
 800bc2e:	d026      	beq.n	800bc7e <USART_SetConfig+0x22a>
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc34:	2b06      	cmp	r3, #6
 800bc36:	d020      	beq.n	800bc7a <USART_SetConfig+0x226>
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc3c:	2b07      	cmp	r3, #7
 800bc3e:	d01a      	beq.n	800bc76 <USART_SetConfig+0x222>
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc44:	2b08      	cmp	r3, #8
 800bc46:	d014      	beq.n	800bc72 <USART_SetConfig+0x21e>
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc4c:	2b09      	cmp	r3, #9
 800bc4e:	d00e      	beq.n	800bc6e <USART_SetConfig+0x21a>
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc54:	2b0a      	cmp	r3, #10
 800bc56:	d008      	beq.n	800bc6a <USART_SetConfig+0x216>
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc5c:	2b0b      	cmp	r3, #11
 800bc5e:	d102      	bne.n	800bc66 <USART_SetConfig+0x212>
 800bc60:	2380      	movs	r3, #128	; 0x80
 800bc62:	005b      	lsls	r3, r3, #1
 800bc64:	e016      	b.n	800bc94 <USART_SetConfig+0x240>
 800bc66:	2301      	movs	r3, #1
 800bc68:	e014      	b.n	800bc94 <USART_SetConfig+0x240>
 800bc6a:	2380      	movs	r3, #128	; 0x80
 800bc6c:	e012      	b.n	800bc94 <USART_SetConfig+0x240>
 800bc6e:	2340      	movs	r3, #64	; 0x40
 800bc70:	e010      	b.n	800bc94 <USART_SetConfig+0x240>
 800bc72:	2320      	movs	r3, #32
 800bc74:	e00e      	b.n	800bc94 <USART_SetConfig+0x240>
 800bc76:	2310      	movs	r3, #16
 800bc78:	e00c      	b.n	800bc94 <USART_SetConfig+0x240>
 800bc7a:	230c      	movs	r3, #12
 800bc7c:	e00a      	b.n	800bc94 <USART_SetConfig+0x240>
 800bc7e:	230a      	movs	r3, #10
 800bc80:	e008      	b.n	800bc94 <USART_SetConfig+0x240>
 800bc82:	2308      	movs	r3, #8
 800bc84:	e006      	b.n	800bc94 <USART_SetConfig+0x240>
 800bc86:	2306      	movs	r3, #6
 800bc88:	e004      	b.n	800bc94 <USART_SetConfig+0x240>
 800bc8a:	2304      	movs	r3, #4
 800bc8c:	e002      	b.n	800bc94 <USART_SetConfig+0x240>
 800bc8e:	2302      	movs	r3, #2
 800bc90:	e000      	b.n	800bc94 <USART_SetConfig+0x240>
 800bc92:	2301      	movs	r3, #1
 800bc94:	0019      	movs	r1, r3
 800bc96:	6938      	ldr	r0, [r7, #16]
 800bc98:	f7f4 fa34 	bl	8000104 <__udivsi3>
 800bc9c:	0003      	movs	r3, r0
 800bc9e:	005a      	lsls	r2, r3, #1
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	685b      	ldr	r3, [r3, #4]
 800bca4:	085b      	lsrs	r3, r3, #1
 800bca6:	18d2      	adds	r2, r2, r3
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	685b      	ldr	r3, [r3, #4]
 800bcac:	0019      	movs	r1, r3
 800bcae:	0010      	movs	r0, r2
 800bcb0:	f7f4 fa28 	bl	8000104 <__udivsi3>
 800bcb4:	0003      	movs	r3, r0
 800bcb6:	61bb      	str	r3, [r7, #24]
      break;
 800bcb8:	e12e      	b.n	800bf18 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d052      	beq.n	800bd68 <USART_SetConfig+0x314>
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcc6:	2b01      	cmp	r3, #1
 800bcc8:	d03e      	beq.n	800bd48 <USART_SetConfig+0x2f4>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcce:	2b02      	cmp	r3, #2
 800bcd0:	d038      	beq.n	800bd44 <USART_SetConfig+0x2f0>
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd6:	2b03      	cmp	r3, #3
 800bcd8:	d032      	beq.n	800bd40 <USART_SetConfig+0x2ec>
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcde:	2b04      	cmp	r3, #4
 800bce0:	d02c      	beq.n	800bd3c <USART_SetConfig+0x2e8>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce6:	2b05      	cmp	r3, #5
 800bce8:	d026      	beq.n	800bd38 <USART_SetConfig+0x2e4>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcee:	2b06      	cmp	r3, #6
 800bcf0:	d020      	beq.n	800bd34 <USART_SetConfig+0x2e0>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcf6:	2b07      	cmp	r3, #7
 800bcf8:	d01a      	beq.n	800bd30 <USART_SetConfig+0x2dc>
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcfe:	2b08      	cmp	r3, #8
 800bd00:	d014      	beq.n	800bd2c <USART_SetConfig+0x2d8>
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd06:	2b09      	cmp	r3, #9
 800bd08:	d00e      	beq.n	800bd28 <USART_SetConfig+0x2d4>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd0e:	2b0a      	cmp	r3, #10
 800bd10:	d008      	beq.n	800bd24 <USART_SetConfig+0x2d0>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd16:	2b0b      	cmp	r3, #11
 800bd18:	d102      	bne.n	800bd20 <USART_SetConfig+0x2cc>
 800bd1a:	2380      	movs	r3, #128	; 0x80
 800bd1c:	005b      	lsls	r3, r3, #1
 800bd1e:	e024      	b.n	800bd6a <USART_SetConfig+0x316>
 800bd20:	2301      	movs	r3, #1
 800bd22:	e022      	b.n	800bd6a <USART_SetConfig+0x316>
 800bd24:	2380      	movs	r3, #128	; 0x80
 800bd26:	e020      	b.n	800bd6a <USART_SetConfig+0x316>
 800bd28:	2340      	movs	r3, #64	; 0x40
 800bd2a:	e01e      	b.n	800bd6a <USART_SetConfig+0x316>
 800bd2c:	2320      	movs	r3, #32
 800bd2e:	e01c      	b.n	800bd6a <USART_SetConfig+0x316>
 800bd30:	2310      	movs	r3, #16
 800bd32:	e01a      	b.n	800bd6a <USART_SetConfig+0x316>
 800bd34:	230c      	movs	r3, #12
 800bd36:	e018      	b.n	800bd6a <USART_SetConfig+0x316>
 800bd38:	230a      	movs	r3, #10
 800bd3a:	e016      	b.n	800bd6a <USART_SetConfig+0x316>
 800bd3c:	2308      	movs	r3, #8
 800bd3e:	e014      	b.n	800bd6a <USART_SetConfig+0x316>
 800bd40:	2306      	movs	r3, #6
 800bd42:	e012      	b.n	800bd6a <USART_SetConfig+0x316>
 800bd44:	2304      	movs	r3, #4
 800bd46:	e010      	b.n	800bd6a <USART_SetConfig+0x316>
 800bd48:	2302      	movs	r3, #2
 800bd4a:	e00e      	b.n	800bd6a <USART_SetConfig+0x316>
 800bd4c:	cfff69f3 	.word	0xcfff69f3
 800bd50:	ffffc0f6 	.word	0xffffc0f6
 800bd54:	40013800 	.word	0x40013800
 800bd58:	40021000 	.word	0x40021000
 800bd5c:	40004400 	.word	0x40004400
 800bd60:	40004800 	.word	0x40004800
 800bd64:	40004c00 	.word	0x40004c00
 800bd68:	2301      	movs	r3, #1
 800bd6a:	0019      	movs	r1, r3
 800bd6c:	4886      	ldr	r0, [pc, #536]	; (800bf88 <USART_SetConfig+0x534>)
 800bd6e:	f7f4 f9c9 	bl	8000104 <__udivsi3>
 800bd72:	0003      	movs	r3, r0
 800bd74:	005a      	lsls	r2, r3, #1
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	685b      	ldr	r3, [r3, #4]
 800bd7a:	085b      	lsrs	r3, r3, #1
 800bd7c:	18d2      	adds	r2, r2, r3
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	685b      	ldr	r3, [r3, #4]
 800bd82:	0019      	movs	r1, r3
 800bd84:	0010      	movs	r0, r2
 800bd86:	f7f4 f9bd 	bl	8000104 <__udivsi3>
 800bd8a:	0003      	movs	r3, r0
 800bd8c:	61bb      	str	r3, [r7, #24]
      break;
 800bd8e:	e0c3      	b.n	800bf18 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 800bd90:	f7fc fc5a 	bl	8008648 <HAL_RCC_GetSysClockFreq>
 800bd94:	0003      	movs	r3, r0
 800bd96:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d044      	beq.n	800be2a <USART_SetConfig+0x3d6>
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bda4:	2b01      	cmp	r3, #1
 800bda6:	d03e      	beq.n	800be26 <USART_SetConfig+0x3d2>
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdac:	2b02      	cmp	r3, #2
 800bdae:	d038      	beq.n	800be22 <USART_SetConfig+0x3ce>
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdb4:	2b03      	cmp	r3, #3
 800bdb6:	d032      	beq.n	800be1e <USART_SetConfig+0x3ca>
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdbc:	2b04      	cmp	r3, #4
 800bdbe:	d02c      	beq.n	800be1a <USART_SetConfig+0x3c6>
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdc4:	2b05      	cmp	r3, #5
 800bdc6:	d026      	beq.n	800be16 <USART_SetConfig+0x3c2>
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdcc:	2b06      	cmp	r3, #6
 800bdce:	d020      	beq.n	800be12 <USART_SetConfig+0x3be>
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdd4:	2b07      	cmp	r3, #7
 800bdd6:	d01a      	beq.n	800be0e <USART_SetConfig+0x3ba>
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bddc:	2b08      	cmp	r3, #8
 800bdde:	d014      	beq.n	800be0a <USART_SetConfig+0x3b6>
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bde4:	2b09      	cmp	r3, #9
 800bde6:	d00e      	beq.n	800be06 <USART_SetConfig+0x3b2>
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdec:	2b0a      	cmp	r3, #10
 800bdee:	d008      	beq.n	800be02 <USART_SetConfig+0x3ae>
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdf4:	2b0b      	cmp	r3, #11
 800bdf6:	d102      	bne.n	800bdfe <USART_SetConfig+0x3aa>
 800bdf8:	2380      	movs	r3, #128	; 0x80
 800bdfa:	005b      	lsls	r3, r3, #1
 800bdfc:	e016      	b.n	800be2c <USART_SetConfig+0x3d8>
 800bdfe:	2301      	movs	r3, #1
 800be00:	e014      	b.n	800be2c <USART_SetConfig+0x3d8>
 800be02:	2380      	movs	r3, #128	; 0x80
 800be04:	e012      	b.n	800be2c <USART_SetConfig+0x3d8>
 800be06:	2340      	movs	r3, #64	; 0x40
 800be08:	e010      	b.n	800be2c <USART_SetConfig+0x3d8>
 800be0a:	2320      	movs	r3, #32
 800be0c:	e00e      	b.n	800be2c <USART_SetConfig+0x3d8>
 800be0e:	2310      	movs	r3, #16
 800be10:	e00c      	b.n	800be2c <USART_SetConfig+0x3d8>
 800be12:	230c      	movs	r3, #12
 800be14:	e00a      	b.n	800be2c <USART_SetConfig+0x3d8>
 800be16:	230a      	movs	r3, #10
 800be18:	e008      	b.n	800be2c <USART_SetConfig+0x3d8>
 800be1a:	2308      	movs	r3, #8
 800be1c:	e006      	b.n	800be2c <USART_SetConfig+0x3d8>
 800be1e:	2306      	movs	r3, #6
 800be20:	e004      	b.n	800be2c <USART_SetConfig+0x3d8>
 800be22:	2304      	movs	r3, #4
 800be24:	e002      	b.n	800be2c <USART_SetConfig+0x3d8>
 800be26:	2302      	movs	r3, #2
 800be28:	e000      	b.n	800be2c <USART_SetConfig+0x3d8>
 800be2a:	2301      	movs	r3, #1
 800be2c:	0019      	movs	r1, r3
 800be2e:	6938      	ldr	r0, [r7, #16]
 800be30:	f7f4 f968 	bl	8000104 <__udivsi3>
 800be34:	0003      	movs	r3, r0
 800be36:	005a      	lsls	r2, r3, #1
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	685b      	ldr	r3, [r3, #4]
 800be3c:	085b      	lsrs	r3, r3, #1
 800be3e:	18d2      	adds	r2, r2, r3
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	685b      	ldr	r3, [r3, #4]
 800be44:	0019      	movs	r1, r3
 800be46:	0010      	movs	r0, r2
 800be48:	f7f4 f95c 	bl	8000104 <__udivsi3>
 800be4c:	0003      	movs	r3, r0
 800be4e:	61bb      	str	r3, [r7, #24]
      break;
 800be50:	e062      	b.n	800bf18 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be56:	2b00      	cmp	r3, #0
 800be58:	d044      	beq.n	800bee4 <USART_SetConfig+0x490>
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be5e:	2b01      	cmp	r3, #1
 800be60:	d03e      	beq.n	800bee0 <USART_SetConfig+0x48c>
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be66:	2b02      	cmp	r3, #2
 800be68:	d038      	beq.n	800bedc <USART_SetConfig+0x488>
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be6e:	2b03      	cmp	r3, #3
 800be70:	d032      	beq.n	800bed8 <USART_SetConfig+0x484>
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be76:	2b04      	cmp	r3, #4
 800be78:	d02c      	beq.n	800bed4 <USART_SetConfig+0x480>
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be7e:	2b05      	cmp	r3, #5
 800be80:	d026      	beq.n	800bed0 <USART_SetConfig+0x47c>
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be86:	2b06      	cmp	r3, #6
 800be88:	d020      	beq.n	800becc <USART_SetConfig+0x478>
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be8e:	2b07      	cmp	r3, #7
 800be90:	d01a      	beq.n	800bec8 <USART_SetConfig+0x474>
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be96:	2b08      	cmp	r3, #8
 800be98:	d014      	beq.n	800bec4 <USART_SetConfig+0x470>
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be9e:	2b09      	cmp	r3, #9
 800bea0:	d00e      	beq.n	800bec0 <USART_SetConfig+0x46c>
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bea6:	2b0a      	cmp	r3, #10
 800bea8:	d008      	beq.n	800bebc <USART_SetConfig+0x468>
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beae:	2b0b      	cmp	r3, #11
 800beb0:	d102      	bne.n	800beb8 <USART_SetConfig+0x464>
 800beb2:	2380      	movs	r3, #128	; 0x80
 800beb4:	005b      	lsls	r3, r3, #1
 800beb6:	e016      	b.n	800bee6 <USART_SetConfig+0x492>
 800beb8:	2301      	movs	r3, #1
 800beba:	e014      	b.n	800bee6 <USART_SetConfig+0x492>
 800bebc:	2380      	movs	r3, #128	; 0x80
 800bebe:	e012      	b.n	800bee6 <USART_SetConfig+0x492>
 800bec0:	2340      	movs	r3, #64	; 0x40
 800bec2:	e010      	b.n	800bee6 <USART_SetConfig+0x492>
 800bec4:	2320      	movs	r3, #32
 800bec6:	e00e      	b.n	800bee6 <USART_SetConfig+0x492>
 800bec8:	2310      	movs	r3, #16
 800beca:	e00c      	b.n	800bee6 <USART_SetConfig+0x492>
 800becc:	230c      	movs	r3, #12
 800bece:	e00a      	b.n	800bee6 <USART_SetConfig+0x492>
 800bed0:	230a      	movs	r3, #10
 800bed2:	e008      	b.n	800bee6 <USART_SetConfig+0x492>
 800bed4:	2308      	movs	r3, #8
 800bed6:	e006      	b.n	800bee6 <USART_SetConfig+0x492>
 800bed8:	2306      	movs	r3, #6
 800beda:	e004      	b.n	800bee6 <USART_SetConfig+0x492>
 800bedc:	2304      	movs	r3, #4
 800bede:	e002      	b.n	800bee6 <USART_SetConfig+0x492>
 800bee0:	2302      	movs	r3, #2
 800bee2:	e000      	b.n	800bee6 <USART_SetConfig+0x492>
 800bee4:	2301      	movs	r3, #1
 800bee6:	0019      	movs	r1, r3
 800bee8:	2380      	movs	r3, #128	; 0x80
 800beea:	0218      	lsls	r0, r3, #8
 800beec:	f7f4 f90a 	bl	8000104 <__udivsi3>
 800bef0:	0003      	movs	r3, r0
 800bef2:	005a      	lsls	r2, r3, #1
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	685b      	ldr	r3, [r3, #4]
 800bef8:	085b      	lsrs	r3, r3, #1
 800befa:	18d2      	adds	r2, r2, r3
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	685b      	ldr	r3, [r3, #4]
 800bf00:	0019      	movs	r1, r3
 800bf02:	0010      	movs	r0, r2
 800bf04:	f7f4 f8fe 	bl	8000104 <__udivsi3>
 800bf08:	0003      	movs	r3, r0
 800bf0a:	61bb      	str	r3, [r7, #24]
      break;
 800bf0c:	e004      	b.n	800bf18 <USART_SetConfig+0x4c4>
    default:
      ret = HAL_ERROR;
 800bf0e:	231e      	movs	r3, #30
 800bf10:	18fb      	adds	r3, r7, r3
 800bf12:	2201      	movs	r2, #1
 800bf14:	701a      	strb	r2, [r3, #0]
      break;
 800bf16:	46c0      	nop			; (mov r8, r8)
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800bf18:	69bb      	ldr	r3, [r7, #24]
 800bf1a:	2b0f      	cmp	r3, #15
 800bf1c:	d91c      	bls.n	800bf58 <USART_SetConfig+0x504>
 800bf1e:	69ba      	ldr	r2, [r7, #24]
 800bf20:	2380      	movs	r3, #128	; 0x80
 800bf22:	025b      	lsls	r3, r3, #9
 800bf24:	429a      	cmp	r2, r3
 800bf26:	d217      	bcs.n	800bf58 <USART_SetConfig+0x504>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bf28:	69bb      	ldr	r3, [r7, #24]
 800bf2a:	b29a      	uxth	r2, r3
 800bf2c:	200e      	movs	r0, #14
 800bf2e:	183b      	adds	r3, r7, r0
 800bf30:	210f      	movs	r1, #15
 800bf32:	438a      	bics	r2, r1
 800bf34:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bf36:	69bb      	ldr	r3, [r7, #24]
 800bf38:	085b      	lsrs	r3, r3, #1
 800bf3a:	b29b      	uxth	r3, r3
 800bf3c:	2207      	movs	r2, #7
 800bf3e:	4013      	ands	r3, r2
 800bf40:	b299      	uxth	r1, r3
 800bf42:	183b      	adds	r3, r7, r0
 800bf44:	183a      	adds	r2, r7, r0
 800bf46:	8812      	ldrh	r2, [r2, #0]
 800bf48:	430a      	orrs	r2, r1
 800bf4a:	801a      	strh	r2, [r3, #0]
    husart->Instance->BRR = brrtemp;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	183a      	adds	r2, r7, r0
 800bf52:	8812      	ldrh	r2, [r2, #0]
 800bf54:	60da      	str	r2, [r3, #12]
 800bf56:	e003      	b.n	800bf60 <USART_SetConfig+0x50c>
  }
  else
  {
    ret = HAL_ERROR;
 800bf58:	231e      	movs	r3, #30
 800bf5a:	18fb      	adds	r3, r7, r3
 800bf5c:	2201      	movs	r2, #1
 800bf5e:	701a      	strb	r2, [r3, #0]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2201      	movs	r2, #1
 800bf64:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2201      	movs	r2, #1
 800bf6a:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2200      	movs	r2, #0
 800bf70:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2200      	movs	r2, #0
 800bf76:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 800bf78:	231e      	movs	r3, #30
 800bf7a:	18fb      	adds	r3, r7, r3
 800bf7c:	781b      	ldrb	r3, [r3, #0]
}
 800bf7e:	0018      	movs	r0, r3
 800bf80:	46bd      	mov	sp, r7
 800bf82:	b008      	add	sp, #32
 800bf84:	bd80      	pop	{r7, pc}
 800bf86:	46c0      	nop			; (mov r8, r8)
 800bf88:	00f42400 	.word	0x00f42400

0800bf8c <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b086      	sub	sp, #24
 800bf90:	af02      	add	r7, sp, #8
 800bf92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2200      	movs	r2, #0
 800bf98:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bf9a:	f7f9 fa3b 	bl	8005414 <HAL_GetTick>
 800bf9e:	0003      	movs	r3, r0
 800bfa0:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	2208      	movs	r2, #8
 800bfaa:	4013      	ands	r3, r2
 800bfac:	2b08      	cmp	r3, #8
 800bfae:	d10e      	bne.n	800bfce <USART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800bfb0:	68fa      	ldr	r2, [r7, #12]
 800bfb2:	2380      	movs	r3, #128	; 0x80
 800bfb4:	0399      	lsls	r1, r3, #14
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	23fa      	movs	r3, #250	; 0xfa
 800bfba:	009b      	lsls	r3, r3, #2
 800bfbc:	9300      	str	r3, [sp, #0]
 800bfbe:	0013      	movs	r3, r2
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	f7ff fd12 	bl	800b9ea <USART_WaitOnFlagUntilTimeout>
 800bfc6:	1e03      	subs	r3, r0, #0
 800bfc8:	d001      	beq.n	800bfce <USART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bfca:	2303      	movs	r3, #3
 800bfcc:	e01e      	b.n	800c00c <USART_CheckIdleState+0x80>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	2204      	movs	r2, #4
 800bfd6:	4013      	ands	r3, r2
 800bfd8:	2b04      	cmp	r3, #4
 800bfda:	d10e      	bne.n	800bffa <USART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800bfdc:	68fa      	ldr	r2, [r7, #12]
 800bfde:	2380      	movs	r3, #128	; 0x80
 800bfe0:	03d9      	lsls	r1, r3, #15
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	23fa      	movs	r3, #250	; 0xfa
 800bfe6:	009b      	lsls	r3, r3, #2
 800bfe8:	9300      	str	r3, [sp, #0]
 800bfea:	0013      	movs	r3, r2
 800bfec:	2200      	movs	r2, #0
 800bfee:	f7ff fcfc 	bl	800b9ea <USART_WaitOnFlagUntilTimeout>
 800bff2:	1e03      	subs	r3, r0, #0
 800bff4:	d001      	beq.n	800bffa <USART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bff6:	2303      	movs	r3, #3
 800bff8:	e008      	b.n	800c00c <USART_CheckIdleState+0x80>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2259      	movs	r2, #89	; 0x59
 800bffe:	2101      	movs	r1, #1
 800c000:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2258      	movs	r2, #88	; 0x58
 800c006:	2100      	movs	r1, #0
 800c008:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c00a:	2300      	movs	r3, #0
}
 800c00c:	0018      	movs	r0, r3
 800c00e:	46bd      	mov	sp, r7
 800c010:	b004      	add	sp, #16
 800c012:	bd80      	pop	{r7, pc}

0800c014 <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b082      	sub	sp, #8
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	681a      	ldr	r2, [r3, #0]
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	2140      	movs	r1, #64	; 0x40
 800c028:	438a      	bics	r2, r1
 800c02a:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	689a      	ldr	r2, [r3, #8]
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	2101      	movs	r1, #1
 800c038:	438a      	bics	r2, r1
 800c03a:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2200      	movs	r2, #0
 800c040:	64da      	str	r2, [r3, #76]	; 0x4c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2259      	movs	r2, #89	; 0x59
 800c046:	5c9b      	ldrb	r3, [r3, r2]
 800c048:	b2db      	uxtb	r3, r3
 800c04a:	2b12      	cmp	r3, #18
 800c04c:	d114      	bne.n	800c078 <USART_EndTransmit_IT+0x64>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	2208      	movs	r2, #8
 800c054:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	699a      	ldr	r2, [r3, #24]
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	2108      	movs	r1, #8
 800c062:	430a      	orrs	r2, r1
 800c064:	619a      	str	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2259      	movs	r2, #89	; 0x59
 800c06a:	2101      	movs	r1, #1
 800c06c:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	0018      	movs	r0, r3
 800c072:	f7f5 f817 	bl	80010a4 <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c076:	e00c      	b.n	800c092 <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c07c:	b29b      	uxth	r3, r3
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d107      	bne.n	800c092 <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2259      	movs	r2, #89	; 0x59
 800c086:	2101      	movs	r1, #1
 800c088:	5499      	strb	r1, [r3, r2]
    HAL_USART_TxRxCpltCallback(husart);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	0018      	movs	r0, r3
 800c08e:	f7ff fc67 	bl	800b960 <HAL_USART_TxRxCpltCallback>
}
 800c092:	46c0      	nop			; (mov r8, r8)
 800c094:	46bd      	mov	sp, r7
 800c096:	b002      	add	sp, #8
 800c098:	bd80      	pop	{r7, pc}

0800c09a <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
 800c09a:	b580      	push	{r7, lr}
 800c09c:	b082      	sub	sp, #8
 800c09e:	af00      	add	r7, sp, #0
 800c0a0:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c0a2:	46c0      	nop			; (mov r8, r8)
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	b002      	add	sp, #8
 800c0a8:	bd80      	pop	{r7, pc}

0800c0aa <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
 800c0aa:	b580      	push	{r7, lr}
 800c0ac:	b082      	sub	sp, #8
 800c0ae:	af00      	add	r7, sp, #0
 800c0b0:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c0b2:	46c0      	nop			; (mov r8, r8)
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	b002      	add	sp, #8
 800c0b8:	bd80      	pop	{r7, pc}

0800c0ba <LL_GPIO_SetPinMode>:
{
 800c0ba:	b580      	push	{r7, lr}
 800c0bc:	b084      	sub	sp, #16
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	60f8      	str	r0, [r7, #12]
 800c0c2:	60b9      	str	r1, [r7, #8]
 800c0c4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	6819      	ldr	r1, [r3, #0]
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	435b      	muls	r3, r3
 800c0ce:	001a      	movs	r2, r3
 800c0d0:	0013      	movs	r3, r2
 800c0d2:	005b      	lsls	r3, r3, #1
 800c0d4:	189b      	adds	r3, r3, r2
 800c0d6:	43db      	mvns	r3, r3
 800c0d8:	400b      	ands	r3, r1
 800c0da:	001a      	movs	r2, r3
 800c0dc:	68bb      	ldr	r3, [r7, #8]
 800c0de:	435b      	muls	r3, r3
 800c0e0:	6879      	ldr	r1, [r7, #4]
 800c0e2:	434b      	muls	r3, r1
 800c0e4:	431a      	orrs	r2, r3
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	601a      	str	r2, [r3, #0]
}
 800c0ea:	46c0      	nop			; (mov r8, r8)
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	b004      	add	sp, #16
 800c0f0:	bd80      	pop	{r7, pc}

0800c0f2 <LL_GPIO_SetPinOutputType>:
{
 800c0f2:	b580      	push	{r7, lr}
 800c0f4:	b084      	sub	sp, #16
 800c0f6:	af00      	add	r7, sp, #0
 800c0f8:	60f8      	str	r0, [r7, #12]
 800c0fa:	60b9      	str	r1, [r7, #8]
 800c0fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	685b      	ldr	r3, [r3, #4]
 800c102:	68ba      	ldr	r2, [r7, #8]
 800c104:	43d2      	mvns	r2, r2
 800c106:	401a      	ands	r2, r3
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	6879      	ldr	r1, [r7, #4]
 800c10c:	434b      	muls	r3, r1
 800c10e:	431a      	orrs	r2, r3
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	605a      	str	r2, [r3, #4]
}
 800c114:	46c0      	nop			; (mov r8, r8)
 800c116:	46bd      	mov	sp, r7
 800c118:	b004      	add	sp, #16
 800c11a:	bd80      	pop	{r7, pc}

0800c11c <LL_GPIO_SetPinSpeed>:
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b084      	sub	sp, #16
 800c120:	af00      	add	r7, sp, #0
 800c122:	60f8      	str	r0, [r7, #12]
 800c124:	60b9      	str	r1, [r7, #8]
 800c126:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	6899      	ldr	r1, [r3, #8]
 800c12c:	68bb      	ldr	r3, [r7, #8]
 800c12e:	435b      	muls	r3, r3
 800c130:	001a      	movs	r2, r3
 800c132:	0013      	movs	r3, r2
 800c134:	005b      	lsls	r3, r3, #1
 800c136:	189b      	adds	r3, r3, r2
 800c138:	43db      	mvns	r3, r3
 800c13a:	400b      	ands	r3, r1
 800c13c:	001a      	movs	r2, r3
 800c13e:	68bb      	ldr	r3, [r7, #8]
 800c140:	435b      	muls	r3, r3
 800c142:	6879      	ldr	r1, [r7, #4]
 800c144:	434b      	muls	r3, r1
 800c146:	431a      	orrs	r2, r3
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	609a      	str	r2, [r3, #8]
}
 800c14c:	46c0      	nop			; (mov r8, r8)
 800c14e:	46bd      	mov	sp, r7
 800c150:	b004      	add	sp, #16
 800c152:	bd80      	pop	{r7, pc}

0800c154 <LL_GPIO_SetPinPull>:
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b084      	sub	sp, #16
 800c158:	af00      	add	r7, sp, #0
 800c15a:	60f8      	str	r0, [r7, #12]
 800c15c:	60b9      	str	r1, [r7, #8]
 800c15e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	68d9      	ldr	r1, [r3, #12]
 800c164:	68bb      	ldr	r3, [r7, #8]
 800c166:	435b      	muls	r3, r3
 800c168:	001a      	movs	r2, r3
 800c16a:	0013      	movs	r3, r2
 800c16c:	005b      	lsls	r3, r3, #1
 800c16e:	189b      	adds	r3, r3, r2
 800c170:	43db      	mvns	r3, r3
 800c172:	400b      	ands	r3, r1
 800c174:	001a      	movs	r2, r3
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	435b      	muls	r3, r3
 800c17a:	6879      	ldr	r1, [r7, #4]
 800c17c:	434b      	muls	r3, r1
 800c17e:	431a      	orrs	r2, r3
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	60da      	str	r2, [r3, #12]
}
 800c184:	46c0      	nop			; (mov r8, r8)
 800c186:	46bd      	mov	sp, r7
 800c188:	b004      	add	sp, #16
 800c18a:	bd80      	pop	{r7, pc}

0800c18c <LL_GPIO_SetAFPin_0_7>:
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b084      	sub	sp, #16
 800c190:	af00      	add	r7, sp, #0
 800c192:	60f8      	str	r0, [r7, #12]
 800c194:	60b9      	str	r1, [r7, #8]
 800c196:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	6a19      	ldr	r1, [r3, #32]
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	435b      	muls	r3, r3
 800c1a0:	68ba      	ldr	r2, [r7, #8]
 800c1a2:	4353      	muls	r3, r2
 800c1a4:	68ba      	ldr	r2, [r7, #8]
 800c1a6:	435a      	muls	r2, r3
 800c1a8:	0013      	movs	r3, r2
 800c1aa:	011b      	lsls	r3, r3, #4
 800c1ac:	1a9b      	subs	r3, r3, r2
 800c1ae:	43db      	mvns	r3, r3
 800c1b0:	400b      	ands	r3, r1
 800c1b2:	001a      	movs	r2, r3
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	435b      	muls	r3, r3
 800c1b8:	68b9      	ldr	r1, [r7, #8]
 800c1ba:	434b      	muls	r3, r1
 800c1bc:	68b9      	ldr	r1, [r7, #8]
 800c1be:	434b      	muls	r3, r1
 800c1c0:	6879      	ldr	r1, [r7, #4]
 800c1c2:	434b      	muls	r3, r1
 800c1c4:	431a      	orrs	r2, r3
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	621a      	str	r2, [r3, #32]
}
 800c1ca:	46c0      	nop			; (mov r8, r8)
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	b004      	add	sp, #16
 800c1d0:	bd80      	pop	{r7, pc}

0800c1d2 <LL_GPIO_SetAFPin_8_15>:
{
 800c1d2:	b580      	push	{r7, lr}
 800c1d4:	b084      	sub	sp, #16
 800c1d6:	af00      	add	r7, sp, #0
 800c1d8:	60f8      	str	r0, [r7, #12]
 800c1da:	60b9      	str	r1, [r7, #8]
 800c1dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800c1e2:	68bb      	ldr	r3, [r7, #8]
 800c1e4:	0a1b      	lsrs	r3, r3, #8
 800c1e6:	68ba      	ldr	r2, [r7, #8]
 800c1e8:	0a12      	lsrs	r2, r2, #8
 800c1ea:	4353      	muls	r3, r2
 800c1ec:	68ba      	ldr	r2, [r7, #8]
 800c1ee:	0a12      	lsrs	r2, r2, #8
 800c1f0:	4353      	muls	r3, r2
 800c1f2:	68ba      	ldr	r2, [r7, #8]
 800c1f4:	0a12      	lsrs	r2, r2, #8
 800c1f6:	435a      	muls	r2, r3
 800c1f8:	0013      	movs	r3, r2
 800c1fa:	011b      	lsls	r3, r3, #4
 800c1fc:	1a9b      	subs	r3, r3, r2
 800c1fe:	43db      	mvns	r3, r3
 800c200:	400b      	ands	r3, r1
 800c202:	001a      	movs	r2, r3
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	0a1b      	lsrs	r3, r3, #8
 800c208:	68b9      	ldr	r1, [r7, #8]
 800c20a:	0a09      	lsrs	r1, r1, #8
 800c20c:	434b      	muls	r3, r1
 800c20e:	68b9      	ldr	r1, [r7, #8]
 800c210:	0a09      	lsrs	r1, r1, #8
 800c212:	434b      	muls	r3, r1
 800c214:	68b9      	ldr	r1, [r7, #8]
 800c216:	0a09      	lsrs	r1, r1, #8
 800c218:	434b      	muls	r3, r1
 800c21a:	6879      	ldr	r1, [r7, #4]
 800c21c:	434b      	muls	r3, r1
 800c21e:	431a      	orrs	r2, r3
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	625a      	str	r2, [r3, #36]	; 0x24
}
 800c224:	46c0      	nop			; (mov r8, r8)
 800c226:	46bd      	mov	sp, r7
 800c228:	b004      	add	sp, #16
 800c22a:	bd80      	pop	{r7, pc}

0800c22c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b084      	sub	sp, #16
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
 800c234:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800c236:	2300      	movs	r3, #0
 800c238:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800c23a:	e047      	b.n	800c2cc <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	2101      	movs	r1, #1
 800c242:	68fa      	ldr	r2, [r7, #12]
 800c244:	4091      	lsls	r1, r2
 800c246:	000a      	movs	r2, r1
 800c248:	4013      	ands	r3, r2
 800c24a:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d039      	beq.n	800c2c6 <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	685b      	ldr	r3, [r3, #4]
 800c256:	2b01      	cmp	r3, #1
 800c258:	d003      	beq.n	800c262 <LL_GPIO_Init+0x36>
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	685b      	ldr	r3, [r3, #4]
 800c25e:	2b02      	cmp	r3, #2
 800c260:	d10d      	bne.n	800c27e <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	689a      	ldr	r2, [r3, #8]
 800c266:	68b9      	ldr	r1, [r7, #8]
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	0018      	movs	r0, r3
 800c26c:	f7ff ff56 	bl	800c11c <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	68da      	ldr	r2, [r3, #12]
 800c274:	68b9      	ldr	r1, [r7, #8]
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	0018      	movs	r0, r3
 800c27a:	f7ff ff3a 	bl	800c0f2 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	691a      	ldr	r2, [r3, #16]
 800c282:	68b9      	ldr	r1, [r7, #8]
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	0018      	movs	r0, r3
 800c288:	f7ff ff64 	bl	800c154 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	685b      	ldr	r3, [r3, #4]
 800c290:	2b02      	cmp	r3, #2
 800c292:	d111      	bne.n	800c2b8 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	2bff      	cmp	r3, #255	; 0xff
 800c298:	d807      	bhi.n	800c2aa <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	695a      	ldr	r2, [r3, #20]
 800c29e:	68b9      	ldr	r1, [r7, #8]
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	0018      	movs	r0, r3
 800c2a4:	f7ff ff72 	bl	800c18c <LL_GPIO_SetAFPin_0_7>
 800c2a8:	e006      	b.n	800c2b8 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	695a      	ldr	r2, [r3, #20]
 800c2ae:	68b9      	ldr	r1, [r7, #8]
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	0018      	movs	r0, r3
 800c2b4:	f7ff ff8d 	bl	800c1d2 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	685a      	ldr	r2, [r3, #4]
 800c2bc:	68b9      	ldr	r1, [r7, #8]
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	0018      	movs	r0, r3
 800c2c2:	f7ff fefa 	bl	800c0ba <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	3301      	adds	r3, #1
 800c2ca:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	681a      	ldr	r2, [r3, #0]
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	40da      	lsrs	r2, r3
 800c2d4:	1e13      	subs	r3, r2, #0
 800c2d6:	d1b1      	bne.n	800c23c <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800c2d8:	2300      	movs	r3, #0
}
 800c2da:	0018      	movs	r0, r3
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	b004      	add	sp, #16
 800c2e0:	bd80      	pop	{r7, pc}
	...

0800c2e4 <LL_RCC_HSI_IsReady>:
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800c2e8:	4b07      	ldr	r3, [pc, #28]	; (800c308 <LL_RCC_HSI_IsReady+0x24>)
 800c2ea:	681a      	ldr	r2, [r3, #0]
 800c2ec:	2380      	movs	r3, #128	; 0x80
 800c2ee:	00db      	lsls	r3, r3, #3
 800c2f0:	401a      	ands	r2, r3
 800c2f2:	2380      	movs	r3, #128	; 0x80
 800c2f4:	00db      	lsls	r3, r3, #3
 800c2f6:	429a      	cmp	r2, r3
 800c2f8:	d101      	bne.n	800c2fe <LL_RCC_HSI_IsReady+0x1a>
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	e000      	b.n	800c300 <LL_RCC_HSI_IsReady+0x1c>
 800c2fe:	2300      	movs	r3, #0
}
 800c300:	0018      	movs	r0, r3
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}
 800c306:	46c0      	nop			; (mov r8, r8)
 800c308:	40021000 	.word	0x40021000

0800c30c <LL_RCC_LSE_IsReady>:
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800c310:	4b05      	ldr	r3, [pc, #20]	; (800c328 <LL_RCC_LSE_IsReady+0x1c>)
 800c312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c314:	2202      	movs	r2, #2
 800c316:	4013      	ands	r3, r2
 800c318:	2b02      	cmp	r3, #2
 800c31a:	d101      	bne.n	800c320 <LL_RCC_LSE_IsReady+0x14>
 800c31c:	2301      	movs	r3, #1
 800c31e:	e000      	b.n	800c322 <LL_RCC_LSE_IsReady+0x16>
 800c320:	2300      	movs	r3, #0
}
 800c322:	0018      	movs	r0, r3
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}
 800c328:	40021000 	.word	0x40021000

0800c32c <LL_RCC_GetSysClkSource>:
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800c330:	4b03      	ldr	r3, [pc, #12]	; (800c340 <LL_RCC_GetSysClkSource+0x14>)
 800c332:	689b      	ldr	r3, [r3, #8]
 800c334:	2238      	movs	r2, #56	; 0x38
 800c336:	4013      	ands	r3, r2
}
 800c338:	0018      	movs	r0, r3
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}
 800c33e:	46c0      	nop			; (mov r8, r8)
 800c340:	40021000 	.word	0x40021000

0800c344 <LL_RCC_GetAHBPrescaler>:
{
 800c344:	b580      	push	{r7, lr}
 800c346:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800c348:	4b03      	ldr	r3, [pc, #12]	; (800c358 <LL_RCC_GetAHBPrescaler+0x14>)
 800c34a:	689a      	ldr	r2, [r3, #8]
 800c34c:	23f0      	movs	r3, #240	; 0xf0
 800c34e:	011b      	lsls	r3, r3, #4
 800c350:	4013      	ands	r3, r2
}
 800c352:	0018      	movs	r0, r3
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}
 800c358:	40021000 	.word	0x40021000

0800c35c <LL_RCC_GetAPB1Prescaler>:
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800c360:	4b03      	ldr	r3, [pc, #12]	; (800c370 <LL_RCC_GetAPB1Prescaler+0x14>)
 800c362:	689a      	ldr	r2, [r3, #8]
 800c364:	23e0      	movs	r3, #224	; 0xe0
 800c366:	01db      	lsls	r3, r3, #7
 800c368:	4013      	ands	r3, r2
}
 800c36a:	0018      	movs	r0, r3
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}
 800c370:	40021000 	.word	0x40021000

0800c374 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  * (*) feature not available on all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b082      	sub	sp, #8
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800c37c:	4b05      	ldr	r3, [pc, #20]	; (800c394 <LL_RCC_GetUSARTClockSource+0x20>)
 800c37e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c380:	687a      	ldr	r2, [r7, #4]
 800c382:	401a      	ands	r2, r3
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	041b      	lsls	r3, r3, #16
 800c388:	4313      	orrs	r3, r2
}
 800c38a:	0018      	movs	r0, r3
 800c38c:	46bd      	mov	sp, r7
 800c38e:	b002      	add	sp, #8
 800c390:	bd80      	pop	{r7, pc}
 800c392:	46c0      	nop			; (mov r8, r8)
 800c394:	40021000 	.word	0x40021000

0800c398 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800c39c:	4b03      	ldr	r3, [pc, #12]	; (800c3ac <LL_RCC_PLL_GetN+0x14>)
 800c39e:	68db      	ldr	r3, [r3, #12]
 800c3a0:	0a1b      	lsrs	r3, r3, #8
 800c3a2:	227f      	movs	r2, #127	; 0x7f
 800c3a4:	4013      	ands	r3, r2
}
 800c3a6:	0018      	movs	r0, r3
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}
 800c3ac:	40021000 	.word	0x40021000

0800c3b0 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800c3b4:	4b03      	ldr	r3, [pc, #12]	; (800c3c4 <LL_RCC_PLL_GetR+0x14>)
 800c3b6:	68db      	ldr	r3, [r3, #12]
 800c3b8:	0f5b      	lsrs	r3, r3, #29
 800c3ba:	075b      	lsls	r3, r3, #29
}
 800c3bc:	0018      	movs	r0, r3
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}
 800c3c2:	46c0      	nop			; (mov r8, r8)
 800c3c4:	40021000 	.word	0x40021000

0800c3c8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800c3cc:	4b03      	ldr	r3, [pc, #12]	; (800c3dc <LL_RCC_PLL_GetMainSource+0x14>)
 800c3ce:	68db      	ldr	r3, [r3, #12]
 800c3d0:	2203      	movs	r2, #3
 800c3d2:	4013      	ands	r3, r2
}
 800c3d4:	0018      	movs	r0, r3
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}
 800c3da:	46c0      	nop			; (mov r8, r8)
 800c3dc:	40021000 	.word	0x40021000

0800c3e0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800c3e4:	4b03      	ldr	r3, [pc, #12]	; (800c3f4 <LL_RCC_PLL_GetDivider+0x14>)
 800c3e6:	68db      	ldr	r3, [r3, #12]
 800c3e8:	2270      	movs	r2, #112	; 0x70
 800c3ea:	4013      	ands	r3, r2
}
 800c3ec:	0018      	movs	r0, r3
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}
 800c3f2:	46c0      	nop			; (mov r8, r8)
 800c3f4:	40021000 	.word	0x40021000

0800c3f8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b082      	sub	sp, #8
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800c400:	f000 f8a8 	bl	800c554 <RCC_GetSystemClockFreq>
 800c404:	0002      	movs	r2, r0
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	0018      	movs	r0, r3
 800c410:	f000 f8ce 	bl	800c5b0 <RCC_GetHCLKClockFreq>
 800c414:	0002      	movs	r2, r0
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	685b      	ldr	r3, [r3, #4]
 800c41e:	0018      	movs	r0, r3
 800c420:	f000 f8de 	bl	800c5e0 <RCC_GetPCLK1ClockFreq>
 800c424:	0002      	movs	r2, r0
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	609a      	str	r2, [r3, #8]
}
 800c42a:	46c0      	nop			; (mov r8, r8)
 800c42c:	46bd      	mov	sp, r7
 800c42e:	b002      	add	sp, #8
 800c430:	bd80      	pop	{r7, pc}
	...

0800c434 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b084      	sub	sp, #16
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800c43c:	2300      	movs	r3, #0
 800c43e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2b03      	cmp	r3, #3
 800c444:	d134      	bne.n	800c4b0 <LL_RCC_GetUSARTClockFreq+0x7c>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	0018      	movs	r0, r3
 800c44a:	f7ff ff93 	bl	800c374 <LL_RCC_GetUSARTClockSource>
 800c44e:	0003      	movs	r3, r0
 800c450:	4a39      	ldr	r2, [pc, #228]	; (800c538 <LL_RCC_GetUSARTClockFreq+0x104>)
 800c452:	4293      	cmp	r3, r2
 800c454:	d016      	beq.n	800c484 <LL_RCC_GetUSARTClockFreq+0x50>
 800c456:	4a38      	ldr	r2, [pc, #224]	; (800c538 <LL_RCC_GetUSARTClockFreq+0x104>)
 800c458:	4293      	cmp	r3, r2
 800c45a:	d81c      	bhi.n	800c496 <LL_RCC_GetUSARTClockFreq+0x62>
 800c45c:	4a37      	ldr	r2, [pc, #220]	; (800c53c <LL_RCC_GetUSARTClockFreq+0x108>)
 800c45e:	4293      	cmp	r3, r2
 800c460:	d003      	beq.n	800c46a <LL_RCC_GetUSARTClockFreq+0x36>
 800c462:	4a37      	ldr	r2, [pc, #220]	; (800c540 <LL_RCC_GetUSARTClockFreq+0x10c>)
 800c464:	4293      	cmp	r3, r2
 800c466:	d005      	beq.n	800c474 <LL_RCC_GetUSARTClockFreq+0x40>
 800c468:	e015      	b.n	800c496 <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800c46a:	f000 f873 	bl	800c554 <RCC_GetSystemClockFreq>
 800c46e:	0003      	movs	r3, r0
 800c470:	60fb      	str	r3, [r7, #12]
        break;
 800c472:	e05c      	b.n	800c52e <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800c474:	f7ff ff36 	bl	800c2e4 <LL_RCC_HSI_IsReady>
 800c478:	0003      	movs	r3, r0
 800c47a:	2b01      	cmp	r3, #1
 800c47c:	d150      	bne.n	800c520 <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = HSI_VALUE;
 800c47e:	4b31      	ldr	r3, [pc, #196]	; (800c544 <LL_RCC_GetUSARTClockFreq+0x110>)
 800c480:	60fb      	str	r3, [r7, #12]
        }
        break;
 800c482:	e04d      	b.n	800c520 <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800c484:	f7ff ff42 	bl	800c30c <LL_RCC_LSE_IsReady>
 800c488:	0003      	movs	r3, r0
 800c48a:	2b01      	cmp	r3, #1
 800c48c:	d14a      	bne.n	800c524 <LL_RCC_GetUSARTClockFreq+0xf0>
        {
          usart_frequency = LSE_VALUE;
 800c48e:	2380      	movs	r3, #128	; 0x80
 800c490:	021b      	lsls	r3, r3, #8
 800c492:	60fb      	str	r3, [r7, #12]
        }
        break;
 800c494:	e046      	b.n	800c524 <LL_RCC_GetUSARTClockFreq+0xf0>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800c496:	f000 f85d 	bl	800c554 <RCC_GetSystemClockFreq>
 800c49a:	0003      	movs	r3, r0
 800c49c:	0018      	movs	r0, r3
 800c49e:	f000 f887 	bl	800c5b0 <RCC_GetHCLKClockFreq>
 800c4a2:	0003      	movs	r3, r0
 800c4a4:	0018      	movs	r0, r3
 800c4a6:	f000 f89b 	bl	800c5e0 <RCC_GetPCLK1ClockFreq>
 800c4aa:	0003      	movs	r3, r0
 800c4ac:	60fb      	str	r3, [r7, #12]
        break;
 800c4ae:	e03e      	b.n	800c52e <LL_RCC_GetUSARTClockFreq+0xfa>
    }
  }
#if defined(RCC_CCIPR_USART2SEL)
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2b0c      	cmp	r3, #12
 800c4b4:	d13b      	bne.n	800c52e <LL_RCC_GetUSARTClockFreq+0xfa>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	0018      	movs	r0, r3
 800c4ba:	f7ff ff5b 	bl	800c374 <LL_RCC_GetUSARTClockSource>
 800c4be:	0003      	movs	r3, r0
 800c4c0:	4a21      	ldr	r2, [pc, #132]	; (800c548 <LL_RCC_GetUSARTClockFreq+0x114>)
 800c4c2:	4293      	cmp	r3, r2
 800c4c4:	d016      	beq.n	800c4f4 <LL_RCC_GetUSARTClockFreq+0xc0>
 800c4c6:	4a20      	ldr	r2, [pc, #128]	; (800c548 <LL_RCC_GetUSARTClockFreq+0x114>)
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	d81c      	bhi.n	800c506 <LL_RCC_GetUSARTClockFreq+0xd2>
 800c4cc:	4a1f      	ldr	r2, [pc, #124]	; (800c54c <LL_RCC_GetUSARTClockFreq+0x118>)
 800c4ce:	4293      	cmp	r3, r2
 800c4d0:	d003      	beq.n	800c4da <LL_RCC_GetUSARTClockFreq+0xa6>
 800c4d2:	4a1f      	ldr	r2, [pc, #124]	; (800c550 <LL_RCC_GetUSARTClockFreq+0x11c>)
 800c4d4:	4293      	cmp	r3, r2
 800c4d6:	d005      	beq.n	800c4e4 <LL_RCC_GetUSARTClockFreq+0xb0>
 800c4d8:	e015      	b.n	800c506 <LL_RCC_GetUSARTClockFreq+0xd2>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800c4da:	f000 f83b 	bl	800c554 <RCC_GetSystemClockFreq>
 800c4de:	0003      	movs	r3, r0
 800c4e0:	60fb      	str	r3, [r7, #12]
        break;
 800c4e2:	e024      	b.n	800c52e <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800c4e4:	f7ff fefe 	bl	800c2e4 <LL_RCC_HSI_IsReady>
 800c4e8:	0003      	movs	r3, r0
 800c4ea:	2b01      	cmp	r3, #1
 800c4ec:	d11c      	bne.n	800c528 <LL_RCC_GetUSARTClockFreq+0xf4>
        {
          usart_frequency = HSI_VALUE;
 800c4ee:	4b15      	ldr	r3, [pc, #84]	; (800c544 <LL_RCC_GetUSARTClockFreq+0x110>)
 800c4f0:	60fb      	str	r3, [r7, #12]
        }
        break;
 800c4f2:	e019      	b.n	800c528 <LL_RCC_GetUSARTClockFreq+0xf4>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800c4f4:	f7ff ff0a 	bl	800c30c <LL_RCC_LSE_IsReady>
 800c4f8:	0003      	movs	r3, r0
 800c4fa:	2b01      	cmp	r3, #1
 800c4fc:	d116      	bne.n	800c52c <LL_RCC_GetUSARTClockFreq+0xf8>
        {
          usart_frequency = LSE_VALUE;
 800c4fe:	2380      	movs	r3, #128	; 0x80
 800c500:	021b      	lsls	r3, r3, #8
 800c502:	60fb      	str	r3, [r7, #12]
        }
        break;
 800c504:	e012      	b.n	800c52c <LL_RCC_GetUSARTClockFreq+0xf8>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800c506:	f000 f825 	bl	800c554 <RCC_GetSystemClockFreq>
 800c50a:	0003      	movs	r3, r0
 800c50c:	0018      	movs	r0, r3
 800c50e:	f000 f84f 	bl	800c5b0 <RCC_GetHCLKClockFreq>
 800c512:	0003      	movs	r3, r0
 800c514:	0018      	movs	r0, r3
 800c516:	f000 f863 	bl	800c5e0 <RCC_GetPCLK1ClockFreq>
 800c51a:	0003      	movs	r3, r0
 800c51c:	60fb      	str	r3, [r7, #12]
        break;
 800c51e:	e006      	b.n	800c52e <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800c520:	46c0      	nop			; (mov r8, r8)
 800c522:	e004      	b.n	800c52e <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800c524:	46c0      	nop			; (mov r8, r8)
 800c526:	e002      	b.n	800c52e <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800c528:	46c0      	nop			; (mov r8, r8)
 800c52a:	e000      	b.n	800c52e <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800c52c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 800c52e:	68fb      	ldr	r3, [r7, #12]
}
 800c530:	0018      	movs	r0, r3
 800c532:	46bd      	mov	sp, r7
 800c534:	b004      	add	sp, #16
 800c536:	bd80      	pop	{r7, pc}
 800c538:	00030003 	.word	0x00030003
 800c53c:	00030001 	.word	0x00030001
 800c540:	00030002 	.word	0x00030002
 800c544:	00f42400 	.word	0x00f42400
 800c548:	000c000c 	.word	0x000c000c
 800c54c:	000c0004 	.word	0x000c0004
 800c550:	000c0008 	.word	0x000c0008

0800c554 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b082      	sub	sp, #8
 800c558:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800c55a:	f7ff fee7 	bl	800c32c <LL_RCC_GetSysClkSource>
 800c55e:	0003      	movs	r3, r0
 800c560:	2b08      	cmp	r3, #8
 800c562:	d002      	beq.n	800c56a <RCC_GetSystemClockFreq+0x16>
 800c564:	2b10      	cmp	r3, #16
 800c566:	d003      	beq.n	800c570 <RCC_GetSystemClockFreq+0x1c>
 800c568:	e007      	b.n	800c57a <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800c56a:	4b0e      	ldr	r3, [pc, #56]	; (800c5a4 <RCC_GetSystemClockFreq+0x50>)
 800c56c:	607b      	str	r3, [r7, #4]
      break;
 800c56e:	e014      	b.n	800c59a <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800c570:	f000 f84c 	bl	800c60c <RCC_PLL_GetFreqDomain_SYS>
 800c574:	0003      	movs	r3, r0
 800c576:	607b      	str	r3, [r7, #4]
      break;
 800c578:	e00f      	b.n	800c59a <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800c57a:	4b0b      	ldr	r3, [pc, #44]	; (800c5a8 <RCC_GetSystemClockFreq+0x54>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	0adb      	lsrs	r3, r3, #11
 800c580:	2207      	movs	r2, #7
 800c582:	4013      	ands	r3, r2
 800c584:	2201      	movs	r2, #1
 800c586:	409a      	lsls	r2, r3
 800c588:	0013      	movs	r3, r2
 800c58a:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 800c58c:	6839      	ldr	r1, [r7, #0]
 800c58e:	4807      	ldr	r0, [pc, #28]	; (800c5ac <RCC_GetSystemClockFreq+0x58>)
 800c590:	f7f3 fdb8 	bl	8000104 <__udivsi3>
 800c594:	0003      	movs	r3, r0
 800c596:	607b      	str	r3, [r7, #4]
      break;
 800c598:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 800c59a:	687b      	ldr	r3, [r7, #4]
}
 800c59c:	0018      	movs	r0, r3
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	b002      	add	sp, #8
 800c5a2:	bd80      	pop	{r7, pc}
 800c5a4:	007a1200 	.word	0x007a1200
 800c5a8:	40021000 	.word	0x40021000
 800c5ac:	00f42400 	.word	0x00f42400

0800c5b0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b082      	sub	sp, #8
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800c5b8:	f7ff fec4 	bl	800c344 <LL_RCC_GetAHBPrescaler>
 800c5bc:	0003      	movs	r3, r0
 800c5be:	0a1b      	lsrs	r3, r3, #8
 800c5c0:	220f      	movs	r2, #15
 800c5c2:	401a      	ands	r2, r3
 800c5c4:	4b05      	ldr	r3, [pc, #20]	; (800c5dc <RCC_GetHCLKClockFreq+0x2c>)
 800c5c6:	0092      	lsls	r2, r2, #2
 800c5c8:	58d3      	ldr	r3, [r2, r3]
 800c5ca:	221f      	movs	r2, #31
 800c5cc:	4013      	ands	r3, r2
 800c5ce:	687a      	ldr	r2, [r7, #4]
 800c5d0:	40da      	lsrs	r2, r3
 800c5d2:	0013      	movs	r3, r2
}
 800c5d4:	0018      	movs	r0, r3
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	b002      	add	sp, #8
 800c5da:	bd80      	pop	{r7, pc}
 800c5dc:	0801835c 	.word	0x0801835c

0800c5e0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b082      	sub	sp, #8
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800c5e8:	f7ff feb8 	bl	800c35c <LL_RCC_GetAPB1Prescaler>
 800c5ec:	0003      	movs	r3, r0
 800c5ee:	0b1a      	lsrs	r2, r3, #12
 800c5f0:	4b05      	ldr	r3, [pc, #20]	; (800c608 <RCC_GetPCLK1ClockFreq+0x28>)
 800c5f2:	0092      	lsls	r2, r2, #2
 800c5f4:	58d3      	ldr	r3, [r2, r3]
 800c5f6:	221f      	movs	r2, #31
 800c5f8:	4013      	ands	r3, r2
 800c5fa:	687a      	ldr	r2, [r7, #4]
 800c5fc:	40da      	lsrs	r2, r3
 800c5fe:	0013      	movs	r3, r2
}
 800c600:	0018      	movs	r0, r3
 800c602:	46bd      	mov	sp, r7
 800c604:	b002      	add	sp, #8
 800c606:	bd80      	pop	{r7, pc}
 800c608:	0801839c 	.word	0x0801839c

0800c60c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800c60c:	b590      	push	{r4, r7, lr}
 800c60e:	b083      	sub	sp, #12
 800c610:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800c612:	f7ff fed9 	bl	800c3c8 <LL_RCC_PLL_GetMainSource>
 800c616:	0003      	movs	r3, r0
 800c618:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	2b02      	cmp	r3, #2
 800c61e:	d003      	beq.n	800c628 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	2b03      	cmp	r3, #3
 800c624:	d003      	beq.n	800c62e <RCC_PLL_GetFreqDomain_SYS+0x22>
 800c626:	e005      	b.n	800c634 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800c628:	4b13      	ldr	r3, [pc, #76]	; (800c678 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800c62a:	607b      	str	r3, [r7, #4]
      break;
 800c62c:	e005      	b.n	800c63a <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800c62e:	4b13      	ldr	r3, [pc, #76]	; (800c67c <RCC_PLL_GetFreqDomain_SYS+0x70>)
 800c630:	607b      	str	r3, [r7, #4]
      break;
 800c632:	e002      	b.n	800c63a <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 800c634:	4b10      	ldr	r3, [pc, #64]	; (800c678 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800c636:	607b      	str	r3, [r7, #4]
      break;
 800c638:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800c63a:	f7ff fead 	bl	800c398 <LL_RCC_PLL_GetN>
 800c63e:	0002      	movs	r2, r0
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	4353      	muls	r3, r2
 800c644:	001c      	movs	r4, r3
 800c646:	f7ff fecb 	bl	800c3e0 <LL_RCC_PLL_GetDivider>
 800c64a:	0003      	movs	r3, r0
 800c64c:	091b      	lsrs	r3, r3, #4
 800c64e:	3301      	adds	r3, #1
 800c650:	0019      	movs	r1, r3
 800c652:	0020      	movs	r0, r4
 800c654:	f7f3 fd56 	bl	8000104 <__udivsi3>
 800c658:	0003      	movs	r3, r0
 800c65a:	001c      	movs	r4, r3
 800c65c:	f7ff fea8 	bl	800c3b0 <LL_RCC_PLL_GetR>
 800c660:	0003      	movs	r3, r0
 800c662:	0f5b      	lsrs	r3, r3, #29
 800c664:	3301      	adds	r3, #1
 800c666:	0019      	movs	r1, r3
 800c668:	0020      	movs	r0, r4
 800c66a:	f7f3 fd4b 	bl	8000104 <__udivsi3>
 800c66e:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800c670:	0018      	movs	r0, r3
 800c672:	46bd      	mov	sp, r7
 800c674:	b003      	add	sp, #12
 800c676:	bd90      	pop	{r4, r7, pc}
 800c678:	00f42400 	.word	0x00f42400
 800c67c:	007a1200 	.word	0x007a1200

0800c680 <LL_USART_IsEnabled>:
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b082      	sub	sp, #8
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	2201      	movs	r2, #1
 800c68e:	4013      	ands	r3, r2
 800c690:	2b01      	cmp	r3, #1
 800c692:	d101      	bne.n	800c698 <LL_USART_IsEnabled+0x18>
 800c694:	2301      	movs	r3, #1
 800c696:	e000      	b.n	800c69a <LL_USART_IsEnabled+0x1a>
 800c698:	2300      	movs	r3, #0
}
 800c69a:	0018      	movs	r0, r3
 800c69c:	46bd      	mov	sp, r7
 800c69e:	b002      	add	sp, #8
 800c6a0:	bd80      	pop	{r7, pc}

0800c6a2 <LL_USART_SetPrescaler>:
{
 800c6a2:	b580      	push	{r7, lr}
 800c6a4:	b082      	sub	sp, #8
 800c6a6:	af00      	add	r7, sp, #0
 800c6a8:	6078      	str	r0, [r7, #4]
 800c6aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6b0:	220f      	movs	r2, #15
 800c6b2:	4393      	bics	r3, r2
 800c6b4:	683a      	ldr	r2, [r7, #0]
 800c6b6:	b292      	uxth	r2, r2
 800c6b8:	431a      	orrs	r2, r3
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800c6be:	46c0      	nop			; (mov r8, r8)
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	b002      	add	sp, #8
 800c6c4:	bd80      	pop	{r7, pc}
	...

0800c6c8 <LL_USART_SetStopBitsLength>:
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b082      	sub	sp, #8
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
 800c6d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	685b      	ldr	r3, [r3, #4]
 800c6d6:	4a05      	ldr	r2, [pc, #20]	; (800c6ec <LL_USART_SetStopBitsLength+0x24>)
 800c6d8:	401a      	ands	r2, r3
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	431a      	orrs	r2, r3
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	605a      	str	r2, [r3, #4]
}
 800c6e2:	46c0      	nop			; (mov r8, r8)
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	b002      	add	sp, #8
 800c6e8:	bd80      	pop	{r7, pc}
 800c6ea:	46c0      	nop			; (mov r8, r8)
 800c6ec:	ffffcfff 	.word	0xffffcfff

0800c6f0 <LL_USART_SetHWFlowCtrl>:
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b082      	sub	sp, #8
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
 800c6f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	689b      	ldr	r3, [r3, #8]
 800c6fe:	4a05      	ldr	r2, [pc, #20]	; (800c714 <LL_USART_SetHWFlowCtrl+0x24>)
 800c700:	401a      	ands	r2, r3
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	431a      	orrs	r2, r3
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	609a      	str	r2, [r3, #8]
}
 800c70a:	46c0      	nop			; (mov r8, r8)
 800c70c:	46bd      	mov	sp, r7
 800c70e:	b002      	add	sp, #8
 800c710:	bd80      	pop	{r7, pc}
 800c712:	46c0      	nop			; (mov r8, r8)
 800c714:	fffffcff 	.word	0xfffffcff

0800c718 <LL_USART_SetBaudRate>:
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b086      	sub	sp, #24
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	60f8      	str	r0, [r7, #12]
 800c720:	60b9      	str	r1, [r7, #8]
 800c722:	607a      	str	r2, [r7, #4]
 800c724:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2b0b      	cmp	r3, #11
 800c72a:	d846      	bhi.n	800c7ba <LL_USART_SetBaudRate+0xa2>
  else if (BaudRate == 0U)
 800c72c:	6a3b      	ldr	r3, [r7, #32]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d043      	beq.n	800c7ba <LL_USART_SetBaudRate+0xa2>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800c732:	683a      	ldr	r2, [r7, #0]
 800c734:	2380      	movs	r3, #128	; 0x80
 800c736:	021b      	lsls	r3, r3, #8
 800c738:	429a      	cmp	r2, r3
 800c73a:	d126      	bne.n	800c78a <LL_USART_SetBaudRate+0x72>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	b2db      	uxtb	r3, r3
 800c740:	001a      	movs	r2, r3
 800c742:	4b20      	ldr	r3, [pc, #128]	; (800c7c4 <LL_USART_SetBaudRate+0xac>)
 800c744:	0092      	lsls	r2, r2, #2
 800c746:	58d3      	ldr	r3, [r2, r3]
 800c748:	0019      	movs	r1, r3
 800c74a:	68b8      	ldr	r0, [r7, #8]
 800c74c:	f7f3 fcda 	bl	8000104 <__udivsi3>
 800c750:	0003      	movs	r3, r0
 800c752:	005a      	lsls	r2, r3, #1
 800c754:	6a3b      	ldr	r3, [r7, #32]
 800c756:	085b      	lsrs	r3, r3, #1
 800c758:	18d3      	adds	r3, r2, r3
 800c75a:	6a39      	ldr	r1, [r7, #32]
 800c75c:	0018      	movs	r0, r3
 800c75e:	f7f3 fcd1 	bl	8000104 <__udivsi3>
 800c762:	0003      	movs	r3, r0
 800c764:	b29b      	uxth	r3, r3
 800c766:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800c768:	697b      	ldr	r3, [r7, #20]
 800c76a:	4a17      	ldr	r2, [pc, #92]	; (800c7c8 <LL_USART_SetBaudRate+0xb0>)
 800c76c:	4013      	ands	r3, r2
 800c76e:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	085b      	lsrs	r3, r3, #1
 800c774:	b29b      	uxth	r3, r3
 800c776:	001a      	movs	r2, r3
 800c778:	2307      	movs	r3, #7
 800c77a:	4013      	ands	r3, r2
 800c77c:	693a      	ldr	r2, [r7, #16]
 800c77e:	4313      	orrs	r3, r2
 800c780:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	693a      	ldr	r2, [r7, #16]
 800c786:	60da      	str	r2, [r3, #12]
}
 800c788:	e017      	b.n	800c7ba <LL_USART_SetBaudRate+0xa2>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	b2db      	uxtb	r3, r3
 800c78e:	001a      	movs	r2, r3
 800c790:	4b0c      	ldr	r3, [pc, #48]	; (800c7c4 <LL_USART_SetBaudRate+0xac>)
 800c792:	0092      	lsls	r2, r2, #2
 800c794:	58d3      	ldr	r3, [r2, r3]
 800c796:	0019      	movs	r1, r3
 800c798:	68b8      	ldr	r0, [r7, #8]
 800c79a:	f7f3 fcb3 	bl	8000104 <__udivsi3>
 800c79e:	0003      	movs	r3, r0
 800c7a0:	001a      	movs	r2, r3
 800c7a2:	6a3b      	ldr	r3, [r7, #32]
 800c7a4:	085b      	lsrs	r3, r3, #1
 800c7a6:	18d3      	adds	r3, r2, r3
 800c7a8:	6a39      	ldr	r1, [r7, #32]
 800c7aa:	0018      	movs	r0, r3
 800c7ac:	f7f3 fcaa 	bl	8000104 <__udivsi3>
 800c7b0:	0003      	movs	r3, r0
 800c7b2:	b29b      	uxth	r3, r3
 800c7b4:	001a      	movs	r2, r3
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	60da      	str	r2, [r3, #12]
}
 800c7ba:	46c0      	nop			; (mov r8, r8)
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	b006      	add	sp, #24
 800c7c0:	bd80      	pop	{r7, pc}
 800c7c2:	46c0      	nop			; (mov r8, r8)
 800c7c4:	08018410 	.word	0x08018410
 800c7c8:	0000fff0 	.word	0x0000fff0

0800c7cc <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800c7cc:	b590      	push	{r4, r7, lr}
 800c7ce:	b08b      	sub	sp, #44	; 0x2c
 800c7d0:	af02      	add	r7, sp, #8
 800c7d2:	6078      	str	r0, [r7, #4]
 800c7d4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800c7d6:	231f      	movs	r3, #31
 800c7d8:	18fb      	adds	r3, r7, r3
 800c7da:	2201      	movs	r2, #1
 800c7dc:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800c7de:	2300      	movs	r3, #0
 800c7e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	0018      	movs	r0, r3
 800c7e6:	f7ff ff4b 	bl	800c680 <LL_USART_IsEnabled>
 800c7ea:	1e03      	subs	r3, r0, #0
 800c7ec:	d16a      	bne.n	800c8c4 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	4a38      	ldr	r2, [pc, #224]	; (800c8d4 <LL_USART_Init+0x108>)
 800c7f4:	401a      	ands	r2, r3
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	6899      	ldr	r1, [r3, #8]
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	691b      	ldr	r3, [r3, #16]
 800c7fe:	4319      	orrs	r1, r3
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	695b      	ldr	r3, [r3, #20]
 800c804:	4319      	orrs	r1, r3
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	69db      	ldr	r3, [r3, #28]
 800c80a:	430b      	orrs	r3, r1
 800c80c:	431a      	orrs	r2, r3
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	68da      	ldr	r2, [r3, #12]
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	0011      	movs	r1, r2
 800c81a:	0018      	movs	r0, r3
 800c81c:	f7ff ff54 	bl	800c6c8 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	699a      	ldr	r2, [r3, #24]
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	0011      	movs	r1, r2
 800c828:	0018      	movs	r0, r3
 800c82a:	f7ff ff61 	bl	800c6f0 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	4a29      	ldr	r2, [pc, #164]	; (800c8d8 <LL_USART_Init+0x10c>)
 800c832:	4293      	cmp	r3, r2
 800c834:	d105      	bne.n	800c842 <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800c836:	2003      	movs	r0, #3
 800c838:	f7ff fdfc 	bl	800c434 <LL_RCC_GetUSARTClockFreq>
 800c83c:	0003      	movs	r3, r0
 800c83e:	61bb      	str	r3, [r7, #24]
 800c840:	e022      	b.n	800c888 <LL_USART_Init+0xbc>
    }
    else if (USARTx == USART2)
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	4a25      	ldr	r2, [pc, #148]	; (800c8dc <LL_USART_Init+0x110>)
 800c846:	4293      	cmp	r3, r2
 800c848:	d105      	bne.n	800c856 <LL_USART_Init+0x8a>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800c84a:	200c      	movs	r0, #12
 800c84c:	f7ff fdf2 	bl	800c434 <LL_RCC_GetUSARTClockFreq>
 800c850:	0003      	movs	r3, r0
 800c852:	61bb      	str	r3, [r7, #24]
 800c854:	e018      	b.n	800c888 <LL_USART_Init+0xbc>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* USART2 Clock selector flag */
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	4a21      	ldr	r2, [pc, #132]	; (800c8e0 <LL_USART_Init+0x114>)
 800c85a:	4293      	cmp	r3, r2
 800c85c:	d108      	bne.n	800c870 <LL_USART_Init+0xa4>
    {
#if defined(RCC_CCIPR_USART3SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800c85e:	240c      	movs	r4, #12
 800c860:	193b      	adds	r3, r7, r4
 800c862:	0018      	movs	r0, r3
 800c864:	f7ff fdc8 	bl	800c3f8 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800c868:	193b      	adds	r3, r7, r4
 800c86a:	689b      	ldr	r3, [r3, #8]
 800c86c:	61bb      	str	r3, [r7, #24]
 800c86e:	e00b      	b.n	800c888 <LL_USART_Init+0xbc>
#endif /* USART3 Clock selector flag */
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	4a1c      	ldr	r2, [pc, #112]	; (800c8e4 <LL_USART_Init+0x118>)
 800c874:	4293      	cmp	r3, r2
 800c876:	d107      	bne.n	800c888 <LL_USART_Init+0xbc>
    {
#if defined(RCC_CCIPR_USART4SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART4_CLKSOURCE);
#else
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800c878:	240c      	movs	r4, #12
 800c87a:	193b      	adds	r3, r7, r4
 800c87c:	0018      	movs	r0, r3
 800c87e:	f7ff fdbb 	bl	800c3f8 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800c882:	193b      	adds	r3, r7, r4
 800c884:	689b      	ldr	r3, [r3, #8]
 800c886:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800c888:	69bb      	ldr	r3, [r7, #24]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d013      	beq.n	800c8b6 <LL_USART_Init+0xea>
        && (USART_InitStruct->BaudRate != 0U))
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	685b      	ldr	r3, [r3, #4]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d00f      	beq.n	800c8b6 <LL_USART_Init+0xea>
    {
      status = SUCCESS;
 800c896:	231f      	movs	r3, #31
 800c898:	18fb      	adds	r3, r7, r3
 800c89a:	2200      	movs	r2, #0
 800c89c:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	681a      	ldr	r2, [r3, #0]
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	69dc      	ldr	r4, [r3, #28]
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	685b      	ldr	r3, [r3, #4]
 800c8aa:	69b9      	ldr	r1, [r7, #24]
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	9300      	str	r3, [sp, #0]
 800c8b0:	0023      	movs	r3, r4
 800c8b2:	f7ff ff31 	bl	800c718 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	681a      	ldr	r2, [r3, #0]
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	0011      	movs	r1, r2
 800c8be:	0018      	movs	r0, r3
 800c8c0:	f7ff feef 	bl	800c6a2 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800c8c4:	231f      	movs	r3, #31
 800c8c6:	18fb      	adds	r3, r7, r3
 800c8c8:	781b      	ldrb	r3, [r3, #0]
}
 800c8ca:	0018      	movs	r0, r3
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	b009      	add	sp, #36	; 0x24
 800c8d0:	bd90      	pop	{r4, r7, pc}
 800c8d2:	46c0      	nop			; (mov r8, r8)
 800c8d4:	efff69f3 	.word	0xefff69f3
 800c8d8:	40013800 	.word	0x40013800
 800c8dc:	40004400 	.word	0x40004400
 800c8e0:	40004800 	.word	0x40004800
 800c8e4:	40004c00 	.word	0x40004c00

0800c8e8 <__libc_init_array>:
 800c8e8:	b570      	push	{r4, r5, r6, lr}
 800c8ea:	2600      	movs	r6, #0
 800c8ec:	4d0c      	ldr	r5, [pc, #48]	; (800c920 <__libc_init_array+0x38>)
 800c8ee:	4c0d      	ldr	r4, [pc, #52]	; (800c924 <__libc_init_array+0x3c>)
 800c8f0:	1b64      	subs	r4, r4, r5
 800c8f2:	10a4      	asrs	r4, r4, #2
 800c8f4:	42a6      	cmp	r6, r4
 800c8f6:	d109      	bne.n	800c90c <__libc_init_array+0x24>
 800c8f8:	2600      	movs	r6, #0
 800c8fa:	f000 f821 	bl	800c940 <_init>
 800c8fe:	4d0a      	ldr	r5, [pc, #40]	; (800c928 <__libc_init_array+0x40>)
 800c900:	4c0a      	ldr	r4, [pc, #40]	; (800c92c <__libc_init_array+0x44>)
 800c902:	1b64      	subs	r4, r4, r5
 800c904:	10a4      	asrs	r4, r4, #2
 800c906:	42a6      	cmp	r6, r4
 800c908:	d105      	bne.n	800c916 <__libc_init_array+0x2e>
 800c90a:	bd70      	pop	{r4, r5, r6, pc}
 800c90c:	00b3      	lsls	r3, r6, #2
 800c90e:	58eb      	ldr	r3, [r5, r3]
 800c910:	4798      	blx	r3
 800c912:	3601      	adds	r6, #1
 800c914:	e7ee      	b.n	800c8f4 <__libc_init_array+0xc>
 800c916:	00b3      	lsls	r3, r6, #2
 800c918:	58eb      	ldr	r3, [r5, r3]
 800c91a:	4798      	blx	r3
 800c91c:	3601      	adds	r6, #1
 800c91e:	e7f2      	b.n	800c906 <__libc_init_array+0x1e>
 800c920:	08018440 	.word	0x08018440
 800c924:	08018440 	.word	0x08018440
 800c928:	08018440 	.word	0x08018440
 800c92c:	08018444 	.word	0x08018444

0800c930 <memset>:
 800c930:	0003      	movs	r3, r0
 800c932:	1882      	adds	r2, r0, r2
 800c934:	4293      	cmp	r3, r2
 800c936:	d100      	bne.n	800c93a <memset+0xa>
 800c938:	4770      	bx	lr
 800c93a:	7019      	strb	r1, [r3, #0]
 800c93c:	3301      	adds	r3, #1
 800c93e:	e7f9      	b.n	800c934 <memset+0x4>

0800c940 <_init>:
 800c940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c942:	46c0      	nop			; (mov r8, r8)
 800c944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c946:	bc08      	pop	{r3}
 800c948:	469e      	mov	lr, r3
 800c94a:	4770      	bx	lr

0800c94c <_fini>:
 800c94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c94e:	46c0      	nop			; (mov r8, r8)
 800c950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c952:	bc08      	pop	{r3}
 800c954:	469e      	mov	lr, r3
 800c956:	4770      	bx	lr
