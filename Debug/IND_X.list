
IND_X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098d4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08009990  08009990  00019990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a74  08009a74  00025140  2**0
                  CONTENTS
  4 .ARM          00000000  08009a74  08009a74  00025140  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009a74  08009a74  00025140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a74  08009a74  00019a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a78  08009a78  00019a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00005140  20000000  08009a7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  20005140  0800ebbc  00025140  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200054c0  0800ebbc  000254c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00025140  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001821f  00000000  00000000  00025168  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000307d  00000000  00000000  0003d387  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001858  00000000  00000000  00040408  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016e0  00000000  00000000  00041c60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c36e  00000000  00000000  00043340  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015439  00000000  00000000  0005f6ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ae0fc  00000000  00000000  00074ae7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00122be3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058dc  00000000  00000000  00122c60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20005140 	.word	0x20005140
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08009978 	.word	0x08009978

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20005144 	.word	0x20005144
 8000100:	08009978 	.word	0x08009978

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b7f      	cmp	r3, #127	; 0x7f
 800022e:	d809      	bhi.n	8000244 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000230:	1dfb      	adds	r3, r7, #7
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	001a      	movs	r2, r3
 8000236:	231f      	movs	r3, #31
 8000238:	401a      	ands	r2, r3
 800023a:	4b04      	ldr	r3, [pc, #16]	; (800024c <__NVIC_EnableIRQ+0x30>)
 800023c:	2101      	movs	r1, #1
 800023e:	4091      	lsls	r1, r2
 8000240:	000a      	movs	r2, r1
 8000242:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e100 	.word	0xe000e100

08000250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	0002      	movs	r2, r0
 8000258:	6039      	str	r1, [r7, #0]
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b7f      	cmp	r3, #127	; 0x7f
 8000264:	d828      	bhi.n	80002b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000266:	4a2f      	ldr	r2, [pc, #188]	; (8000324 <__NVIC_SetPriority+0xd4>)
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	b25b      	sxtb	r3, r3
 800026e:	089b      	lsrs	r3, r3, #2
 8000270:	33c0      	adds	r3, #192	; 0xc0
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	589b      	ldr	r3, [r3, r2]
 8000276:	1dfa      	adds	r2, r7, #7
 8000278:	7812      	ldrb	r2, [r2, #0]
 800027a:	0011      	movs	r1, r2
 800027c:	2203      	movs	r2, #3
 800027e:	400a      	ands	r2, r1
 8000280:	00d2      	lsls	r2, r2, #3
 8000282:	21ff      	movs	r1, #255	; 0xff
 8000284:	4091      	lsls	r1, r2
 8000286:	000a      	movs	r2, r1
 8000288:	43d2      	mvns	r2, r2
 800028a:	401a      	ands	r2, r3
 800028c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	019b      	lsls	r3, r3, #6
 8000292:	22ff      	movs	r2, #255	; 0xff
 8000294:	401a      	ands	r2, r3
 8000296:	1dfb      	adds	r3, r7, #7
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	0018      	movs	r0, r3
 800029c:	2303      	movs	r3, #3
 800029e:	4003      	ands	r3, r0
 80002a0:	00db      	lsls	r3, r3, #3
 80002a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a4:	481f      	ldr	r0, [pc, #124]	; (8000324 <__NVIC_SetPriority+0xd4>)
 80002a6:	1dfb      	adds	r3, r7, #7
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	b25b      	sxtb	r3, r3
 80002ac:	089b      	lsrs	r3, r3, #2
 80002ae:	430a      	orrs	r2, r1
 80002b0:	33c0      	adds	r3, #192	; 0xc0
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002b6:	e031      	b.n	800031c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <__NVIC_SetPriority+0xd8>)
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	0019      	movs	r1, r3
 80002c0:	230f      	movs	r3, #15
 80002c2:	400b      	ands	r3, r1
 80002c4:	3b08      	subs	r3, #8
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	3306      	adds	r3, #6
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	18d3      	adds	r3, r2, r3
 80002ce:	3304      	adds	r3, #4
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1dfa      	adds	r2, r7, #7
 80002d4:	7812      	ldrb	r2, [r2, #0]
 80002d6:	0011      	movs	r1, r2
 80002d8:	2203      	movs	r2, #3
 80002da:	400a      	ands	r2, r1
 80002dc:	00d2      	lsls	r2, r2, #3
 80002de:	21ff      	movs	r1, #255	; 0xff
 80002e0:	4091      	lsls	r1, r2
 80002e2:	000a      	movs	r2, r1
 80002e4:	43d2      	mvns	r2, r2
 80002e6:	401a      	ands	r2, r3
 80002e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	019b      	lsls	r3, r3, #6
 80002ee:	22ff      	movs	r2, #255	; 0xff
 80002f0:	401a      	ands	r2, r3
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	0018      	movs	r0, r3
 80002f8:	2303      	movs	r3, #3
 80002fa:	4003      	ands	r3, r0
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	4809      	ldr	r0, [pc, #36]	; (8000328 <__NVIC_SetPriority+0xd8>)
 8000302:	1dfb      	adds	r3, r7, #7
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	001c      	movs	r4, r3
 8000308:	230f      	movs	r3, #15
 800030a:	4023      	ands	r3, r4
 800030c:	3b08      	subs	r3, #8
 800030e:	089b      	lsrs	r3, r3, #2
 8000310:	430a      	orrs	r2, r1
 8000312:	3306      	adds	r3, #6
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	18c3      	adds	r3, r0, r3
 8000318:	3304      	adds	r3, #4
 800031a:	601a      	str	r2, [r3, #0]
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b003      	add	sp, #12
 8000322:	bd90      	pop	{r4, r7, pc}
 8000324:	e000e100 	.word	0xe000e100
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2201      	movs	r2, #1
 800033a:	431a      	orrs	r2, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	601a      	str	r2, [r3, #0]
}
 8000340:	46c0      	nop			; (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	b002      	add	sp, #8
 8000346:	bd80      	pop	{r7, pc}

08000348 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a03      	ldr	r2, [pc, #12]	; (8000364 <LL_USART_DisableFIFO+0x1c>)
 8000356:	401a      	ands	r2, r3
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	601a      	str	r2, [r3, #0]
}
 800035c:	46c0      	nop			; (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	b002      	add	sp, #8
 8000362:	bd80      	pop	{r7, pc}
 8000364:	dfffffff 	.word	0xdfffffff

08000368 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	689b      	ldr	r3, [r3, #8]
 8000376:	00db      	lsls	r3, r3, #3
 8000378:	08da      	lsrs	r2, r3, #3
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	075b      	lsls	r3, r3, #29
 800037e:	431a      	orrs	r2, r3
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	609a      	str	r2, [r3, #8]
}
 8000384:	46c0      	nop			; (mov r8, r8)
 8000386:	46bd      	mov	sp, r7
 8000388:	b002      	add	sp, #8
 800038a:	bd80      	pop	{r7, pc}

0800038c <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	689b      	ldr	r3, [r3, #8]
 800039a:	4a05      	ldr	r2, [pc, #20]	; (80003b0 <LL_USART_SetRXFIFOThreshold+0x24>)
 800039c:	401a      	ands	r2, r3
 800039e:	683b      	ldr	r3, [r7, #0]
 80003a0:	065b      	lsls	r3, r3, #25
 80003a2:	431a      	orrs	r2, r3
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	609a      	str	r2, [r3, #8]
}
 80003a8:	46c0      	nop			; (mov r8, r8)
 80003aa:	46bd      	mov	sp, r7
 80003ac:	b002      	add	sp, #8
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	f1ffffff 	.word	0xf1ffffff

080003b4 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	685b      	ldr	r3, [r3, #4]
 80003c0:	4a07      	ldr	r2, [pc, #28]	; (80003e0 <LL_USART_ConfigAsyncMode+0x2c>)
 80003c2:	401a      	ands	r2, r3
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	689b      	ldr	r3, [r3, #8]
 80003cc:	222a      	movs	r2, #42	; 0x2a
 80003ce:	4393      	bics	r3, r2
 80003d0:	001a      	movs	r2, r3
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	609a      	str	r2, [r3, #8]
}
 80003d6:	46c0      	nop			; (mov r8, r8)
 80003d8:	46bd      	mov	sp, r7
 80003da:	b002      	add	sp, #8
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	46c0      	nop			; (mov r8, r8)
 80003e0:	ffffb7ff 	.word	0xffffb7ff

080003e4 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	69da      	ldr	r2, [r3, #28]
 80003f0:	2380      	movs	r3, #128	; 0x80
 80003f2:	039b      	lsls	r3, r3, #14
 80003f4:	401a      	ands	r2, r3
 80003f6:	2380      	movs	r3, #128	; 0x80
 80003f8:	039b      	lsls	r3, r3, #14
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d101      	bne.n	8000402 <LL_USART_IsActiveFlag_TEACK+0x1e>
 80003fe:	2301      	movs	r3, #1
 8000400:	e000      	b.n	8000404 <LL_USART_IsActiveFlag_TEACK+0x20>
 8000402:	2300      	movs	r3, #0
}
 8000404:	0018      	movs	r0, r3
 8000406:	46bd      	mov	sp, r7
 8000408:	b002      	add	sp, #8
 800040a:	bd80      	pop	{r7, pc}

0800040c <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	69da      	ldr	r2, [r3, #28]
 8000418:	2380      	movs	r3, #128	; 0x80
 800041a:	03db      	lsls	r3, r3, #15
 800041c:	401a      	ands	r2, r3
 800041e:	2380      	movs	r3, #128	; 0x80
 8000420:	03db      	lsls	r3, r3, #15
 8000422:	429a      	cmp	r2, r3
 8000424:	d101      	bne.n	800042a <LL_USART_IsActiveFlag_REACK+0x1e>
 8000426:	2301      	movs	r3, #1
 8000428:	e000      	b.n	800042c <LL_USART_IsActiveFlag_REACK+0x20>
 800042a:	2300      	movs	r3, #0
}
 800042c:	0018      	movs	r0, r3
 800042e:	46bd      	mov	sp, r7
 8000430:	b002      	add	sp, #8
 8000432:	bd80      	pop	{r7, pc}

08000434 <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	2220      	movs	r2, #32
 8000442:	431a      	orrs	r2, r3
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	601a      	str	r2, [r3, #0]
}
 8000448:	46c0      	nop			; (mov r8, r8)
 800044a:	46bd      	mov	sp, r7
 800044c:	b002      	add	sp, #8
 800044e:	bd80      	pop	{r7, pc}

08000450 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	689b      	ldr	r3, [r3, #8]
 800045c:	2201      	movs	r2, #1
 800045e:	431a      	orrs	r2, r3
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	609a      	str	r2, [r3, #8]
}
 8000464:	46c0      	nop			; (mov r8, r8)
 8000466:	46bd      	mov	sp, r7
 8000468:	b002      	add	sp, #8
 800046a:	bd80      	pop	{r7, pc}

0800046c <LL_USART_ReceiveData9>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData9
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
  */
__STATIC_INLINE uint16_t LL_USART_ReceiveData9(USART_TypeDef *USARTx)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000478:	b29b      	uxth	r3, r3
 800047a:	05db      	lsls	r3, r3, #23
 800047c:	0ddb      	lsrs	r3, r3, #23
 800047e:	b29b      	uxth	r3, r3
}
 8000480:	0018      	movs	r0, r3
 8000482:	46bd      	mov	sp, r7
 8000484:	b002      	add	sp, #8
 8000486:	bd80      	pop	{r7, pc}

08000488 <LL_SYSCFG_EnableFastModePlus>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 8000490:	4b04      	ldr	r3, [pc, #16]	; (80004a4 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8000492:	6819      	ldr	r1, [r3, #0]
 8000494:	4b03      	ldr	r3, [pc, #12]	; (80004a4 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8000496:	687a      	ldr	r2, [r7, #4]
 8000498:	430a      	orrs	r2, r1
 800049a:	601a      	str	r2, [r3, #0]
}
 800049c:	46c0      	nop			; (mov r8, r8)
 800049e:	46bd      	mov	sp, r7
 80004a0:	b002      	add	sp, #8
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	40010000 	.word	0x40010000

080004a8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	683a      	ldr	r2, [r7, #0]
 80004b6:	619a      	str	r2, [r3, #24]
}
 80004b8:	46c0      	nop			; (mov r8, r8)
 80004ba:	46bd      	mov	sp, r7
 80004bc:	b002      	add	sp, #8
 80004be:	bd80      	pop	{r7, pc}

080004c0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 80004c8:	4b07      	ldr	r3, [pc, #28]	; (80004e8 <LL_APB1_GRP1_EnableClock+0x28>)
 80004ca:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80004cc:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <LL_APB1_GRP1_EnableClock+0x28>)
 80004ce:	687a      	ldr	r2, [r7, #4]
 80004d0:	430a      	orrs	r2, r1
 80004d2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80004d4:	4b04      	ldr	r3, [pc, #16]	; (80004e8 <LL_APB1_GRP1_EnableClock+0x28>)
 80004d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004d8:	687a      	ldr	r2, [r7, #4]
 80004da:	4013      	ands	r3, r2
 80004dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004de:	68fb      	ldr	r3, [r7, #12]
}
 80004e0:	46c0      	nop			; (mov r8, r8)
 80004e2:	46bd      	mov	sp, r7
 80004e4:	b004      	add	sp, #16
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	40021000 	.word	0x40021000

080004ec <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 80004f4:	4b07      	ldr	r3, [pc, #28]	; (8000514 <LL_IOP_GRP1_EnableClock+0x28>)
 80004f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <LL_IOP_GRP1_EnableClock+0x28>)
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	430a      	orrs	r2, r1
 80004fe:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000500:	4b04      	ldr	r3, [pc, #16]	; (8000514 <LL_IOP_GRP1_EnableClock+0x28>)
 8000502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000504:	687a      	ldr	r2, [r7, #4]
 8000506:	4013      	ands	r3, r2
 8000508:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800050a:	68fb      	ldr	r3, [r7, #12]
}
 800050c:	46c0      	nop			; (mov r8, r8)
 800050e:	46bd      	mov	sp, r7
 8000510:	b004      	add	sp, #16
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40021000 	.word	0x40021000

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b088      	sub	sp, #32
 800051c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint16_t testINPUT = 0;
 800051e:	2316      	movs	r3, #22
 8000520:	18fb      	adds	r3, r7, r3
 8000522:	2200      	movs	r2, #0
 8000524:	801a      	strh	r2, [r3, #0]
	uint16_t testAns = 0;
 8000526:	2314      	movs	r3, #20
 8000528:	18fb      	adds	r3, r7, r3
 800052a:	2200      	movs	r2, #0
 800052c:	801a      	strh	r2, [r3, #0]
	uint16_t i = 0;
 800052e:	2312      	movs	r3, #18
 8000530:	18fb      	adds	r3, r7, r3
 8000532:	2200      	movs	r2, #0
 8000534:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000536:	f002 fc25 	bl	8002d84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053a:	f000 f875 	bl	8000628 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800053e:	4b34      	ldr	r3, [pc, #208]	; (8000610 <main+0xf8>)
 8000540:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000542:	4b33      	ldr	r3, [pc, #204]	; (8000610 <main+0xf8>)
 8000544:	2101      	movs	r1, #1
 8000546:	430a      	orrs	r2, r1
 8000548:	635a      	str	r2, [r3, #52]	; 0x34
 800054a:	4b31      	ldr	r3, [pc, #196]	; (8000610 <main+0xf8>)
 800054c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800054e:	2201      	movs	r2, #1
 8000550:	4013      	ands	r3, r2
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000556:	4b2e      	ldr	r3, [pc, #184]	; (8000610 <main+0xf8>)
 8000558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800055a:	4b2d      	ldr	r3, [pc, #180]	; (8000610 <main+0xf8>)
 800055c:	2102      	movs	r1, #2
 800055e:	430a      	orrs	r2, r1
 8000560:	635a      	str	r2, [r3, #52]	; 0x34
 8000562:	4b2b      	ldr	r3, [pc, #172]	; (8000610 <main+0xf8>)
 8000564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000566:	2202      	movs	r2, #2
 8000568:	4013      	ands	r3, r2
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800056e:	4b28      	ldr	r3, [pc, #160]	; (8000610 <main+0xf8>)
 8000570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000572:	4b27      	ldr	r3, [pc, #156]	; (8000610 <main+0xf8>)
 8000574:	2104      	movs	r1, #4
 8000576:	430a      	orrs	r2, r1
 8000578:	635a      	str	r2, [r3, #52]	; 0x34
 800057a:	4b25      	ldr	r3, [pc, #148]	; (8000610 <main+0xf8>)
 800057c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800057e:	2204      	movs	r2, #4
 8000580:	4013      	ands	r3, r2
 8000582:	603b      	str	r3, [r7, #0]
 8000584:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 fb97 	bl	8000cb8 <MX_GPIO_Init>
  MX_DMA_Init();
 800058a:	f000 fb77 	bl	8000c7c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800058e:	f000 fa9f 	bl	8000ad0 <MX_USART2_UART_Init>
  MX_COMP1_Init();
 8000592:	f000 f8c9 	bl	8000728 <MX_COMP1_Init>
  MX_TIM1_Init();
 8000596:	f000 f9a1 	bl	80008dc <MX_TIM1_Init>
  MX_USART3_Init();
 800059a:	f000 fb37 	bl	8000c0c <MX_USART3_Init>
  MX_I2S1_Init();
 800059e:	f000 f935 	bl	800080c <MX_I2S1_Init>
  MX_I2C1_Init();
 80005a2:	f000 f8f3 	bl	800078c <MX_I2C1_Init>
  MX_SPI2_Init();
 80005a6:	f000 f95b 	bl	8000860 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	HAL_COMP_Start(&hcomp1);
 80005aa:	4b1a      	ldr	r3, [pc, #104]	; (8000614 <main+0xfc>)
 80005ac:	0018      	movs	r0, r3
 80005ae:	f002 feb3 	bl	8003318 <HAL_COMP_Start>
	HAL_Delay(100);
 80005b2:	2064      	movs	r0, #100	; 0x64
 80005b4:	f002 fc6c 	bl	8002e90 <HAL_Delay>
	uint8_t I2Cbuf[5];
	MEM_Reset();
 80005b8:	f001 fc30 	bl	8001e1c <MEM_Reset>
	weoClear();
 80005bc:	f000 fe58 	bl	8001270 <weoClear>
	weoInit();
 80005c0:	f000 fe00 	bl	80011c4 <weoInit>
	MEM_GetID();
 80005c4:	f001 fe7a 	bl	80022bc <MEM_GetID>

	weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, h1);
 80005c8:	4b13      	ldr	r3, [pc, #76]	; (8000618 <main+0x100>)
 80005ca:	9301      	str	r3, [sp, #4]
 80005cc:	23ff      	movs	r3, #255	; 0xff
 80005ce:	9300      	str	r3, [sp, #0]
 80005d0:	237f      	movs	r3, #127	; 0x7f
 80005d2:	227f      	movs	r2, #127	; 0x7f
 80005d4:	2100      	movs	r1, #0
 80005d6:	2000      	movs	r0, #0
 80005d8:	f000 fe64 	bl	80012a4 <weoDrawRectangleFilled>
//	weoDrawRectangleFilled(0x00,0x00,0x06,0x0D,0xFF,FONT_X[0xFE]);
//	weoDrawRectangleFilled(0x00, 0x00,0x00+X_increment-1,0x00+ASCII_height-1, 0xFF, image_data_Font_0x31);
//	weoDrawRectangleFilled(0x00, 0x00, 0x0E, 0x25, 0xFF, h2);
	USART2->CR1 |= (USART_CR1_UE | USART_CR1_RE | USART_CR1_TE|USART_CR1_M); // Enable USART, Receive and Transmit
 80005dc:	4b0f      	ldr	r3, [pc, #60]	; (800061c <main+0x104>)
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	4b0e      	ldr	r3, [pc, #56]	; (800061c <main+0x104>)
 80005e2:	490f      	ldr	r1, [pc, #60]	; (8000620 <main+0x108>)
 80005e4:	430a      	orrs	r2, r1
 80005e6:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	LL_USART_EnableIT_RXNE(USART2);
 80005e8:	4b0c      	ldr	r3, [pc, #48]	; (800061c <main+0x104>)
 80005ea:	0018      	movs	r0, r3
 80005ec:	f7ff ff22 	bl	8000434 <LL_USART_EnableIT_RXNE_RXFNE>
	LL_USART_EnableIT_ERROR(USART2);
 80005f0:	4b0a      	ldr	r3, [pc, #40]	; (800061c <main+0x104>)
 80005f2:	0018      	movs	r0, r3
 80005f4:	f7ff ff2c 	bl	8000450 <LL_USART_EnableIT_ERROR>
//	dataASCII[0]= 0x30;
//	dataASCII[1]=0x31;
	USART2->ICR|=USART_ICR_ORECF;
 80005f8:	4b08      	ldr	r3, [pc, #32]	; (800061c <main+0x104>)
 80005fa:	6a1a      	ldr	r2, [r3, #32]
 80005fc:	4b07      	ldr	r3, [pc, #28]	; (800061c <main+0x104>)
 80005fe:	2108      	movs	r1, #8
 8000600:	430a      	orrs	r2, r1
 8000602:	621a      	str	r2, [r3, #32]
//	showFullScreen(0x00);
	while (1) {
//		MEM_GetID();
//		lookInfoPrintImage(0x00, 0x00, 0x00);
//		printASCIIarray(0,0,1,dataASCII);
		cmdExecute(cmd2Execute);
 8000604:	4b07      	ldr	r3, [pc, #28]	; (8000624 <main+0x10c>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	0018      	movs	r0, r3
 800060a:	f001 feb5 	bl	8002378 <cmdExecute>
 800060e:	e7f9      	b.n	8000604 <main+0xec>
 8000610:	40021000 	.word	0x40021000
 8000614:	20005280 	.word	0x20005280
 8000618:	20003134 	.word	0x20003134
 800061c:	40004400 	.word	0x40004400
 8000620:	1000100d 	.word	0x1000100d
 8000624:	20005376 	.word	0x20005376

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b590      	push	{r4, r7, lr}
 800062a:	b0a1      	sub	sp, #132	; 0x84
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	2448      	movs	r4, #72	; 0x48
 8000630:	193b      	adds	r3, r7, r4
 8000632:	0018      	movs	r0, r3
 8000634:	2338      	movs	r3, #56	; 0x38
 8000636:	001a      	movs	r2, r3
 8000638:	2100      	movs	r1, #0
 800063a:	f009 f995 	bl	8009968 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063e:	2338      	movs	r3, #56	; 0x38
 8000640:	18fb      	adds	r3, r7, r3
 8000642:	0018      	movs	r0, r3
 8000644:	2310      	movs	r3, #16
 8000646:	001a      	movs	r2, r3
 8000648:	2100      	movs	r1, #0
 800064a:	f009 f98d 	bl	8009968 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	0018      	movs	r0, r3
 8000652:	2334      	movs	r3, #52	; 0x34
 8000654:	001a      	movs	r2, r3
 8000656:	2100      	movs	r1, #0
 8000658:	f009 f986 	bl	8009968 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065c:	2380      	movs	r3, #128	; 0x80
 800065e:	009b      	lsls	r3, r3, #2
 8000660:	0018      	movs	r0, r3
 8000662:	f004 fc01 	bl	8004e68 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000666:	193b      	adds	r3, r7, r4
 8000668:	2202      	movs	r2, #2
 800066a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066c:	193b      	adds	r3, r7, r4
 800066e:	2280      	movs	r2, #128	; 0x80
 8000670:	0052      	lsls	r2, r2, #1
 8000672:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000674:	0021      	movs	r1, r4
 8000676:	187b      	adds	r3, r7, r1
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800067c:	187b      	adds	r3, r7, r1
 800067e:	2240      	movs	r2, #64	; 0x40
 8000680:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000682:	187b      	adds	r3, r7, r1
 8000684:	2202      	movs	r2, #2
 8000686:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000688:	187b      	adds	r3, r7, r1
 800068a:	2202      	movs	r2, #2
 800068c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800068e:	187b      	adds	r3, r7, r1
 8000690:	2200      	movs	r2, #0
 8000692:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000694:	187b      	adds	r3, r7, r1
 8000696:	2208      	movs	r2, #8
 8000698:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800069a:	187b      	adds	r3, r7, r1
 800069c:	2280      	movs	r2, #128	; 0x80
 800069e:	0292      	lsls	r2, r2, #10
 80006a0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006a2:	187b      	adds	r3, r7, r1
 80006a4:	2280      	movs	r2, #128	; 0x80
 80006a6:	0492      	lsls	r2, r2, #18
 80006a8:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006aa:	187b      	adds	r3, r7, r1
 80006ac:	2280      	movs	r2, #128	; 0x80
 80006ae:	0592      	lsls	r2, r2, #22
 80006b0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	0018      	movs	r0, r3
 80006b6:	f004 fc23 	bl	8004f00 <HAL_RCC_OscConfig>
 80006ba:	1e03      	subs	r3, r0, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006be:	f001 ff83 	bl	80025c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c2:	2138      	movs	r1, #56	; 0x38
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	2207      	movs	r2, #7
 80006c8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	2202      	movs	r2, #2
 80006ce:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d0:	187b      	adds	r3, r7, r1
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	2200      	movs	r2, #0
 80006da:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	2102      	movs	r1, #2
 80006e0:	0018      	movs	r0, r3
 80006e2:	f004 ff2d 	bl	8005540 <HAL_RCC_ClockConfig>
 80006e6:	1e03      	subs	r3, r0, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006ea:	f001 ff6d 	bl	80025c8 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	4a0c      	ldr	r2, [pc, #48]	; (8000724 <SystemClock_Config+0xfc>)
 80006f2:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2S1|RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	2200      	movs	r2, #0
 8000704:	615a      	str	r2, [r3, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	2200      	movs	r2, #0
 800070a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	0018      	movs	r0, r3
 8000710:	f005 f8c0 	bl	8005894 <HAL_RCCEx_PeriphCLKConfig>
 8000714:	1e03      	subs	r3, r0, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000718:	f001 ff56 	bl	80025c8 <Error_Handler>
  }
}
 800071c:	46c0      	nop			; (mov r8, r8)
 800071e:	46bd      	mov	sp, r7
 8000720:	b021      	add	sp, #132	; 0x84
 8000722:	bd90      	pop	{r4, r7, pc}
 8000724:	00200822 	.word	0x00200822

08000728 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 800072c:	4b15      	ldr	r3, [pc, #84]	; (8000784 <MX_COMP1_Init+0x5c>)
 800072e:	4a16      	ldr	r2, [pc, #88]	; (8000788 <MX_COMP1_Init+0x60>)
 8000730:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 8000732:	4b14      	ldr	r3, [pc, #80]	; (8000784 <MX_COMP1_Init+0x5c>)
 8000734:	2280      	movs	r2, #128	; 0x80
 8000736:	0052      	lsls	r2, r2, #1
 8000738:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 800073a:	4b12      	ldr	r3, [pc, #72]	; (8000784 <MX_COMP1_Init+0x5c>)
 800073c:	2230      	movs	r2, #48	; 0x30
 800073e:	615a      	str	r2, [r3, #20]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000740:	4b10      	ldr	r3, [pc, #64]	; (8000784 <MX_COMP1_Init+0x5c>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 8000746:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_COMP1_Init+0x5c>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800074c:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <MX_COMP1_Init+0x5c>)
 800074e:	2200      	movs	r2, #0
 8000750:	619a      	str	r2, [r3, #24]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_TIM1_OC5;
 8000752:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <MX_COMP1_Init+0x5c>)
 8000754:	2280      	movs	r2, #128	; 0x80
 8000756:	0392      	lsls	r2, r2, #14
 8000758:	621a      	str	r2, [r3, #32]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 800075a:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <MX_COMP1_Init+0x5c>)
 800075c:	2200      	movs	r2, #0
 800075e:	60da      	str	r2, [r3, #12]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <MX_COMP1_Init+0x5c>)
 8000762:	2200      	movs	r2, #0
 8000764:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_EVENT_RISING;
 8000766:	4b07      	ldr	r3, [pc, #28]	; (8000784 <MX_COMP1_Init+0x5c>)
 8000768:	2212      	movs	r2, #18
 800076a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <MX_COMP1_Init+0x5c>)
 800076e:	0018      	movs	r0, r3
 8000770:	f002 fc72 	bl	8003058 <HAL_COMP_Init>
 8000774:	1e03      	subs	r3, r0, #0
 8000776:	d001      	beq.n	800077c <MX_COMP1_Init+0x54>
  {
    Error_Handler();
 8000778:	f001 ff26 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 800077c:	46c0      	nop			; (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	20005280 	.word	0x20005280
 8000788:	40010200 	.word	0x40010200

0800078c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000790:	4b1b      	ldr	r3, [pc, #108]	; (8000800 <MX_I2C1_Init+0x74>)
 8000792:	4a1c      	ldr	r2, [pc, #112]	; (8000804 <MX_I2C1_Init+0x78>)
 8000794:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x1094102C;
 8000796:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <MX_I2C1_Init+0x74>)
 8000798:	4a1b      	ldr	r2, [pc, #108]	; (8000808 <MX_I2C1_Init+0x7c>)
 800079a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800079c:	4b18      	ldr	r3, [pc, #96]	; (8000800 <MX_I2C1_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a2:	4b17      	ldr	r3, [pc, #92]	; (8000800 <MX_I2C1_Init+0x74>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a8:	4b15      	ldr	r3, [pc, #84]	; (8000800 <MX_I2C1_Init+0x74>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007ae:	4b14      	ldr	r3, [pc, #80]	; (8000800 <MX_I2C1_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <MX_I2C1_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ba:	4b11      	ldr	r3, [pc, #68]	; (8000800 <MX_I2C1_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <MX_I2C1_Init+0x74>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <MX_I2C1_Init+0x74>)
 80007c8:	0018      	movs	r0, r3
 80007ca:	f003 fa3d 	bl	8003c48 <HAL_I2C_Init>
 80007ce:	1e03      	subs	r3, r0, #0
 80007d0:	d001      	beq.n	80007d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007d2:	f001 fef9 	bl	80025c8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007d6:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <MX_I2C1_Init+0x74>)
 80007d8:	2100      	movs	r1, #0
 80007da:	0018      	movs	r0, r3
 80007dc:	f004 f8d4 	bl	8004988 <HAL_I2CEx_ConfigAnalogFilter>
 80007e0:	1e03      	subs	r3, r0, #0
 80007e2:	d001      	beq.n	80007e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007e4:	f001 fef0 	bl	80025c8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007e8:	4b05      	ldr	r3, [pc, #20]	; (8000800 <MX_I2C1_Init+0x74>)
 80007ea:	2100      	movs	r1, #0
 80007ec:	0018      	movs	r0, r3
 80007ee:	f004 f917 	bl	8004a20 <HAL_I2CEx_ConfigDigitalFilter>
 80007f2:	1e03      	subs	r3, r0, #0
 80007f4:	d001      	beq.n	80007fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007f6:	f001 fee7 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	2000521c 	.word	0x2000521c
 8000804:	40005400 	.word	0x40005400
 8000808:	1094102c 	.word	0x1094102c

0800080c <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000810:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_I2S1_Init+0x4c>)
 8000812:	4a12      	ldr	r2, [pc, #72]	; (800085c <MX_I2S1_Init+0x50>)
 8000814:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8000816:	4b10      	ldr	r3, [pc, #64]	; (8000858 <MX_I2S1_Init+0x4c>)
 8000818:	2280      	movs	r2, #128	; 0x80
 800081a:	0092      	lsls	r2, r2, #2
 800081c:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_I2S1_Init+0x4c>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000824:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <MX_I2S1_Init+0x4c>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800082a:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <MX_I2S1_Init+0x4c>)
 800082c:	2280      	movs	r2, #128	; 0x80
 800082e:	0092      	lsls	r2, r2, #2
 8000830:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_I2S1_Init+0x4c>)
 8000834:	22fa      	movs	r2, #250	; 0xfa
 8000836:	0192      	lsls	r2, r2, #6
 8000838:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 800083a:	4b07      	ldr	r3, [pc, #28]	; (8000858 <MX_I2S1_Init+0x4c>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <MX_I2S1_Init+0x4c>)
 8000842:	0018      	movs	r0, r3
 8000844:	f004 f938 	bl	8004ab8 <HAL_I2S_Init>
 8000848:	1e03      	subs	r3, r0, #0
 800084a:	d001      	beq.n	8000850 <MX_I2S1_Init+0x44>
  {
    Error_Handler();
 800084c:	f001 febc 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000850:	46c0      	nop			; (mov r8, r8)
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	20005378 	.word	0x20005378
 800085c:	40013000 	.word	0x40013000

08000860 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000864:	4b1b      	ldr	r3, [pc, #108]	; (80008d4 <MX_SPI2_Init+0x74>)
 8000866:	4a1c      	ldr	r2, [pc, #112]	; (80008d8 <MX_SPI2_Init+0x78>)
 8000868:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800086a:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <MX_SPI2_Init+0x74>)
 800086c:	2282      	movs	r2, #130	; 0x82
 800086e:	0052      	lsls	r2, r2, #1
 8000870:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000872:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <MX_SPI2_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000878:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <MX_SPI2_Init+0x74>)
 800087a:	22e0      	movs	r2, #224	; 0xe0
 800087c:	00d2      	lsls	r2, r2, #3
 800087e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000880:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <MX_SPI2_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000886:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <MX_SPI2_Init+0x74>)
 8000888:	2200      	movs	r2, #0
 800088a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800088c:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <MX_SPI2_Init+0x74>)
 800088e:	2280      	movs	r2, #128	; 0x80
 8000890:	0092      	lsls	r2, r2, #2
 8000892:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MX_SPI2_Init+0x74>)
 8000896:	2210      	movs	r2, #16
 8000898:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <MX_SPI2_Init+0x74>)
 800089c:	2200      	movs	r2, #0
 800089e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <MX_SPI2_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <MX_SPI2_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80008ac:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_SPI2_Init+0x74>)
 80008ae:	2207      	movs	r2, #7
 80008b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008b2:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <MX_SPI2_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_SPI2_Init+0x74>)
 80008ba:	2208      	movs	r2, #8
 80008bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008be:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <MX_SPI2_Init+0x74>)
 80008c0:	0018      	movs	r0, r3
 80008c2:	f005 fcb5 	bl	8006230 <HAL_SPI_Init>
 80008c6:	1e03      	subs	r3, r0, #0
 80008c8:	d001      	beq.n	80008ce <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80008ca:	f001 fe7d 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	200051a4 	.word	0x200051a4
 80008d8:	40003800 	.word	0x40003800

080008dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b09e      	sub	sp, #120	; 0x78
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008e2:	2368      	movs	r3, #104	; 0x68
 80008e4:	18fb      	adds	r3, r7, r3
 80008e6:	0018      	movs	r0, r3
 80008e8:	2310      	movs	r3, #16
 80008ea:	001a      	movs	r2, r3
 80008ec:	2100      	movs	r1, #0
 80008ee:	f009 f83b 	bl	8009968 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f2:	235c      	movs	r3, #92	; 0x5c
 80008f4:	18fb      	adds	r3, r7, r3
 80008f6:	0018      	movs	r0, r3
 80008f8:	230c      	movs	r3, #12
 80008fa:	001a      	movs	r2, r3
 80008fc:	2100      	movs	r1, #0
 80008fe:	f009 f833 	bl	8009968 <memset>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8000902:	2350      	movs	r3, #80	; 0x50
 8000904:	18fb      	adds	r3, r7, r3
 8000906:	0018      	movs	r0, r3
 8000908:	230c      	movs	r3, #12
 800090a:	001a      	movs	r2, r3
 800090c:	2100      	movs	r1, #0
 800090e:	f009 f82b 	bl	8009968 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000912:	2334      	movs	r3, #52	; 0x34
 8000914:	18fb      	adds	r3, r7, r3
 8000916:	0018      	movs	r0, r3
 8000918:	231c      	movs	r3, #28
 800091a:	001a      	movs	r2, r3
 800091c:	2100      	movs	r1, #0
 800091e:	f009 f823 	bl	8009968 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000922:	003b      	movs	r3, r7
 8000924:	0018      	movs	r0, r3
 8000926:	2334      	movs	r3, #52	; 0x34
 8000928:	001a      	movs	r2, r3
 800092a:	2100      	movs	r1, #0
 800092c:	f009 f81c 	bl	8009968 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000930:	4b64      	ldr	r3, [pc, #400]	; (8000ac4 <MX_TIM1_Init+0x1e8>)
 8000932:	4a65      	ldr	r2, [pc, #404]	; (8000ac8 <MX_TIM1_Init+0x1ec>)
 8000934:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000936:	4b63      	ldr	r3, [pc, #396]	; (8000ac4 <MX_TIM1_Init+0x1e8>)
 8000938:	2200      	movs	r2, #0
 800093a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093c:	4b61      	ldr	r3, [pc, #388]	; (8000ac4 <MX_TIM1_Init+0x1e8>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 639;
 8000942:	4b60      	ldr	r3, [pc, #384]	; (8000ac4 <MX_TIM1_Init+0x1e8>)
 8000944:	4a61      	ldr	r2, [pc, #388]	; (8000acc <MX_TIM1_Init+0x1f0>)
 8000946:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000948:	4b5e      	ldr	r3, [pc, #376]	; (8000ac4 <MX_TIM1_Init+0x1e8>)
 800094a:	2200      	movs	r2, #0
 800094c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800094e:	4b5d      	ldr	r3, [pc, #372]	; (8000ac4 <MX_TIM1_Init+0x1e8>)
 8000950:	2200      	movs	r2, #0
 8000952:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000954:	4b5b      	ldr	r3, [pc, #364]	; (8000ac4 <MX_TIM1_Init+0x1e8>)
 8000956:	2280      	movs	r2, #128	; 0x80
 8000958:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800095a:	4b5a      	ldr	r3, [pc, #360]	; (8000ac4 <MX_TIM1_Init+0x1e8>)
 800095c:	0018      	movs	r0, r3
 800095e:	f006 fc7b 	bl	8007258 <HAL_TIM_Base_Init>
 8000962:	1e03      	subs	r3, r0, #0
 8000964:	d001      	beq.n	800096a <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000966:	f001 fe2f 	bl	80025c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800096a:	2168      	movs	r1, #104	; 0x68
 800096c:	187b      	adds	r3, r7, r1
 800096e:	2280      	movs	r2, #128	; 0x80
 8000970:	0152      	lsls	r2, r2, #5
 8000972:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000974:	187a      	adds	r2, r7, r1
 8000976:	4b53      	ldr	r3, [pc, #332]	; (8000ac4 <MX_TIM1_Init+0x1e8>)
 8000978:	0011      	movs	r1, r2
 800097a:	0018      	movs	r0, r3
 800097c:	f006 ff04 	bl	8007788 <HAL_TIM_ConfigClockSource>
 8000980:	1e03      	subs	r3, r0, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000984:	f001 fe20 	bl	80025c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000988:	4b4e      	ldr	r3, [pc, #312]	; (8000ac4 <MX_TIM1_Init+0x1e8>)
 800098a:	0018      	movs	r0, r3
 800098c:	f006 fcbc 	bl	8007308 <HAL_TIM_PWM_Init>
 8000990:	1e03      	subs	r3, r0, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000994:	f001 fe18 	bl	80025c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000998:	215c      	movs	r1, #92	; 0x5c
 800099a:	187b      	adds	r3, r7, r1
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009a0:	187b      	adds	r3, r7, r1
 80009a2:	2200      	movs	r2, #0
 80009a4:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009ac:	187a      	adds	r2, r7, r1
 80009ae:	4b45      	ldr	r3, [pc, #276]	; (8000ac4 <MX_TIM1_Init+0x1e8>)
 80009b0:	0011      	movs	r1, r2
 80009b2:	0018      	movs	r0, r3
 80009b4:	f007 fbac 	bl	8008110 <HAL_TIMEx_MasterConfigSynchronization>
 80009b8:	1e03      	subs	r3, r0, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 80009bc:	f001 fe04 	bl	80025c8 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 80009c0:	2150      	movs	r1, #80	; 0x50
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	2202      	movs	r2, #2
 80009c6:	601a      	str	r2, [r3, #0]
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	2201      	movs	r2, #1
 80009cc:	605a      	str	r2, [r3, #4]
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80009d4:	187a      	adds	r2, r7, r1
 80009d6:	4b3b      	ldr	r3, [pc, #236]	; (8000ac4 <MX_TIM1_Init+0x1e8>)
 80009d8:	2101      	movs	r1, #1
 80009da:	0018      	movs	r0, r3
 80009dc:	f007 fcac 	bl	8008338 <HAL_TIMEx_ConfigBreakInput>
 80009e0:	1e03      	subs	r3, r0, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 80009e4:	f001 fdf0 	bl	80025c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009e8:	2134      	movs	r1, #52	; 0x34
 80009ea:	187b      	adds	r3, r7, r1
 80009ec:	2260      	movs	r2, #96	; 0x60
 80009ee:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 300;
 80009f0:	187b      	adds	r3, r7, r1
 80009f2:	2296      	movs	r2, #150	; 0x96
 80009f4:	0052      	lsls	r2, r2, #1
 80009f6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009f8:	187b      	adds	r3, r7, r1
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009fe:	187b      	adds	r3, r7, r1
 8000a00:	2200      	movs	r2, #0
 8000a02:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	2204      	movs	r2, #4
 8000a08:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a0a:	187b      	adds	r3, r7, r1
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a10:	187b      	adds	r3, r7, r1
 8000a12:	2200      	movs	r2, #0
 8000a14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a16:	1879      	adds	r1, r7, r1
 8000a18:	4b2a      	ldr	r3, [pc, #168]	; (8000ac4 <MX_TIM1_Init+0x1e8>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f006 fdbd 	bl	800759c <HAL_TIM_PWM_ConfigChannel>
 8000a22:	1e03      	subs	r3, r0, #0
 8000a24:	d001      	beq.n	8000a2a <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8000a26:	f001 fdcf 	bl	80025c8 <Error_Handler>
  }
  sConfigOC.Pulse = 50;
 8000a2a:	2134      	movs	r1, #52	; 0x34
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	2232      	movs	r2, #50	; 0x32
 8000a30:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 8000a32:	1879      	adds	r1, r7, r1
 8000a34:	4b23      	ldr	r3, [pc, #140]	; (8000ac4 <MX_TIM1_Init+0x1e8>)
 8000a36:	2210      	movs	r2, #16
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f006 fdaf 	bl	800759c <HAL_TIM_PWM_ConfigChannel>
 8000a3e:	1e03      	subs	r3, r0, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 8000a42:	f001 fdc1 	bl	80025c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000a46:	003b      	movs	r3, r7
 8000a48:	2280      	movs	r2, #128	; 0x80
 8000a4a:	0112      	lsls	r2, r2, #4
 8000a4c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000a4e:	003b      	movs	r3, r7
 8000a50:	2280      	movs	r2, #128	; 0x80
 8000a52:	00d2      	lsls	r2, r2, #3
 8000a54:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a56:	003b      	movs	r3, r7
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a5c:	003b      	movs	r3, r7
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000a62:	003b      	movs	r3, r7
 8000a64:	2280      	movs	r2, #128	; 0x80
 8000a66:	0152      	lsls	r2, r2, #5
 8000a68:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a6a:	003b      	movs	r3, r7
 8000a6c:	2280      	movs	r2, #128	; 0x80
 8000a6e:	0192      	lsls	r2, r2, #6
 8000a70:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 10;
 8000a72:	003b      	movs	r3, r7
 8000a74:	220a      	movs	r2, #10
 8000a76:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a78:	003b      	movs	r3, r7
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a7e:	003b      	movs	r3, r7
 8000a80:	2200      	movs	r2, #0
 8000a82:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a84:	003b      	movs	r3, r7
 8000a86:	2280      	movs	r2, #128	; 0x80
 8000a88:	0492      	lsls	r2, r2, #18
 8000a8a:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a8c:	003b      	movs	r3, r7
 8000a8e:	2200      	movs	r2, #0
 8000a90:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000a92:	003b      	movs	r3, r7
 8000a94:	2200      	movs	r2, #0
 8000a96:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000a98:	003b      	movs	r3, r7
 8000a9a:	2280      	movs	r2, #128	; 0x80
 8000a9c:	01d2      	lsls	r2, r2, #7
 8000a9e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000aa0:	003a      	movs	r2, r7
 8000aa2:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <MX_TIM1_Init+0x1e8>)
 8000aa4:	0011      	movs	r1, r2
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f007 fba0 	bl	80081ec <HAL_TIMEx_ConfigBreakDeadTime>
 8000aac:	1e03      	subs	r3, r0, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_TIM1_Init+0x1d8>
  {
    Error_Handler();
 8000ab0:	f001 fd8a 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ab4:	4b03      	ldr	r3, [pc, #12]	; (8000ac4 <MX_TIM1_Init+0x1e8>)
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f001 ff74 	bl	80029a4 <HAL_TIM_MspPostInit>

}
 8000abc:	46c0      	nop			; (mov r8, r8)
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	b01e      	add	sp, #120	; 0x78
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20005328 	.word	0x20005328
 8000ac8:	40012c00 	.word	0x40012c00
 8000acc:	0000027f 	.word	0x0000027f

08000ad0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ad0:	b590      	push	{r4, r7, lr}
 8000ad2:	b08f      	sub	sp, #60	; 0x3c
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000ad6:	2418      	movs	r4, #24
 8000ad8:	193b      	adds	r3, r7, r4
 8000ada:	0018      	movs	r0, r3
 8000adc:	2320      	movs	r3, #32
 8000ade:	001a      	movs	r2, r3
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	f008 ff41 	bl	8009968 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae6:	003b      	movs	r3, r7
 8000ae8:	0018      	movs	r0, r3
 8000aea:	2318      	movs	r3, #24
 8000aec:	001a      	movs	r2, r3
 8000aee:	2100      	movs	r1, #0
 8000af0:	f008 ff3a 	bl	8009968 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000af4:	2380      	movs	r3, #128	; 0x80
 8000af6:	029b      	lsls	r3, r3, #10
 8000af8:	0018      	movs	r0, r3
 8000afa:	f7ff fce1 	bl	80004c0 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000afe:	2001      	movs	r0, #1
 8000b00:	f7ff fcf4 	bl	80004ec <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000b04:	003b      	movs	r3, r7
 8000b06:	2204      	movs	r2, #4
 8000b08:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b0a:	003b      	movs	r3, r7
 8000b0c:	2202      	movs	r2, #2
 8000b0e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b10:	003b      	movs	r3, r7
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b16:	003b      	movs	r3, r7
 8000b18:	2200      	movs	r2, #0
 8000b1a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b1c:	003b      	movs	r3, r7
 8000b1e:	2200      	movs	r2, #0
 8000b20:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000b22:	003b      	movs	r3, r7
 8000b24:	2201      	movs	r2, #1
 8000b26:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b28:	003a      	movs	r2, r7
 8000b2a:	23a0      	movs	r3, #160	; 0xa0
 8000b2c:	05db      	lsls	r3, r3, #23
 8000b2e:	0011      	movs	r1, r2
 8000b30:	0018      	movs	r0, r3
 8000b32:	f008 fba2 	bl	800927a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000b36:	003b      	movs	r3, r7
 8000b38:	2208      	movs	r2, #8
 8000b3a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b3c:	003b      	movs	r3, r7
 8000b3e:	2202      	movs	r2, #2
 8000b40:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b42:	003b      	movs	r3, r7
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b48:	003b      	movs	r3, r7
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b4e:	003b      	movs	r3, r7
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000b54:	003b      	movs	r3, r7
 8000b56:	2201      	movs	r2, #1
 8000b58:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5a:	003a      	movs	r2, r7
 8000b5c:	23a0      	movs	r3, #160	; 0xa0
 8000b5e:	05db      	lsls	r3, r3, #23
 8000b60:	0011      	movs	r1, r2
 8000b62:	0018      	movs	r0, r3
 8000b64:	f008 fb89 	bl	800927a <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8000b68:	2100      	movs	r1, #0
 8000b6a:	201c      	movs	r0, #28
 8000b6c:	f7ff fb70 	bl	8000250 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000b70:	201c      	movs	r0, #28
 8000b72:	f7ff fb53 	bl	800021c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000b76:	193b      	adds	r3, r7, r4
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 57600;
 8000b7c:	193b      	adds	r3, r7, r4
 8000b7e:	22e1      	movs	r2, #225	; 0xe1
 8000b80:	0212      	lsls	r2, r2, #8
 8000b82:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8000b84:	193b      	adds	r3, r7, r4
 8000b86:	2280      	movs	r2, #128	; 0x80
 8000b88:	0152      	lsls	r2, r2, #5
 8000b8a:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000b8c:	0021      	movs	r1, r4
 8000b8e:	187b      	adds	r3, r7, r1
 8000b90:	2200      	movs	r2, #0
 8000b92:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000b94:	187b      	adds	r3, r7, r1
 8000b96:	2200      	movs	r2, #0
 8000b98:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	220c      	movs	r2, #12
 8000b9e:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000ba0:	187b      	adds	r3, r7, r1
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000ba6:	187b      	adds	r3, r7, r1
 8000ba8:	2200      	movs	r2, #0
 8000baa:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART2, &USART_InitStruct);
 8000bac:	187b      	adds	r3, r7, r1
 8000bae:	4a16      	ldr	r2, [pc, #88]	; (8000c08 <MX_USART2_UART_Init+0x138>)
 8000bb0:	0019      	movs	r1, r3
 8000bb2:	0010      	movs	r0, r2
 8000bb4:	f008 fe26 	bl	8009804 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000bb8:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <MX_USART2_UART_Init+0x138>)
 8000bba:	2100      	movs	r1, #0
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f7ff fbd3 	bl	8000368 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000bc2:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <MX_USART2_UART_Init+0x138>)
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f7ff fbe0 	bl	800038c <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART2);
 8000bcc:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <MX_USART2_UART_Init+0x138>)
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f7ff fbba 	bl	8000348 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART2);
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <MX_USART2_UART_Init+0x138>)
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f7ff fbec 	bl	80003b4 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 8000bdc:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <MX_USART2_UART_Init+0x138>)
 8000bde:	0018      	movs	r0, r3
 8000be0:	f7ff fba4 	bl	800032c <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 8000be4:	46c0      	nop			; (mov r8, r8)
 8000be6:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <MX_USART2_UART_Init+0x138>)
 8000be8:	0018      	movs	r0, r3
 8000bea:	f7ff fbfb 	bl	80003e4 <LL_USART_IsActiveFlag_TEACK>
 8000bee:	1e03      	subs	r3, r0, #0
 8000bf0:	d0f9      	beq.n	8000be6 <MX_USART2_UART_Init+0x116>
 8000bf2:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <MX_USART2_UART_Init+0x138>)
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f7ff fc09 	bl	800040c <LL_USART_IsActiveFlag_REACK>
 8000bfa:	1e03      	subs	r3, r0, #0
 8000bfc:	d0f3      	beq.n	8000be6 <MX_USART2_UART_Init+0x116>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	46bd      	mov	sp, r7
 8000c02:	b00f      	add	sp, #60	; 0x3c
 8000c04:	bd90      	pop	{r4, r7, pc}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	40004400 	.word	0x40004400

08000c0c <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8000c10:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <MX_USART3_Init+0x64>)
 8000c12:	4a18      	ldr	r2, [pc, #96]	; (8000c74 <MX_USART3_Init+0x68>)
 8000c14:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 4000000;
 8000c16:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <MX_USART3_Init+0x64>)
 8000c18:	4a17      	ldr	r2, [pc, #92]	; (8000c78 <MX_USART3_Init+0x6c>)
 8000c1a:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8000c1c:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <MX_USART3_Init+0x64>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8000c22:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <MX_USART3_Init+0x64>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8000c28:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <MX_USART3_Init+0x64>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX;
 8000c2e:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <MX_USART3_Init+0x64>)
 8000c30:	2208      	movs	r2, #8
 8000c32:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_HIGH;
 8000c34:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <MX_USART3_Init+0x64>)
 8000c36:	2280      	movs	r2, #128	; 0x80
 8000c38:	00d2      	lsls	r2, r2, #3
 8000c3a:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_2EDGE;
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <MX_USART3_Init+0x64>)
 8000c3e:	2280      	movs	r2, #128	; 0x80
 8000c40:	0092      	lsls	r2, r2, #2
 8000c42:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_ENABLE;
 8000c44:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <MX_USART3_Init+0x64>)
 8000c46:	2280      	movs	r2, #128	; 0x80
 8000c48:	0052      	lsls	r2, r2, #1
 8000c4a:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8000c4c:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <MX_USART3_Init+0x64>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 8000c52:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <MX_USART3_Init+0x64>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8000c58:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <MX_USART3_Init+0x64>)
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f007 fc0a 	bl	8008474 <HAL_USART_Init>
 8000c60:	1e03      	subs	r3, r0, #0
 8000c62:	d001      	beq.n	8000c68 <MX_USART3_Init+0x5c>
  {
    Error_Handler();
 8000c64:	f001 fcb0 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c68:	46c0      	nop			; (mov r8, r8)
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	46c0      	nop			; (mov r8, r8)
 8000c70:	200052b8 	.word	0x200052b8
 8000c74:	40004800 	.word	0x40004800
 8000c78:	003d0900 	.word	0x003d0900

08000c7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <MX_DMA_Init+0x38>)
 8000c84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c86:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <MX_DMA_Init+0x38>)
 8000c88:	2101      	movs	r1, #1
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	639a      	str	r2, [r3, #56]	; 0x38
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <MX_DMA_Init+0x38>)
 8000c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c92:	2201      	movs	r2, #1
 8000c94:	4013      	ands	r3, r2
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	2009      	movs	r0, #9
 8000ca0:	f002 fc38 	bl	8003514 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ca4:	2009      	movs	r0, #9
 8000ca6:	f002 fc4a 	bl	800353e <HAL_NVIC_EnableIRQ>

}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	46bd      	mov	sp, r7
 8000cae:	b002      	add	sp, #8
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	40021000 	.word	0x40021000

08000cb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbe:	003b      	movs	r3, r7
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	2318      	movs	r3, #24
 8000cc4:	001a      	movs	r2, r3
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	f008 fe4e 	bl	8009968 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000ccc:	2002      	movs	r0, #2
 8000cce:	f7ff fc0d 	bl	80004ec <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000cd2:	2004      	movs	r0, #4
 8000cd4:	f7ff fc0a 	bl	80004ec <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000cd8:	2001      	movs	r0, #1
 8000cda:	f7ff fc07 	bl	80004ec <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(MEM_HOLD_GPIO_Port, MEM_HOLD_Pin);
 8000cde:	2380      	movs	r3, #128	; 0x80
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	4a92      	ldr	r2, [pc, #584]	; (8000f2c <MX_GPIO_Init+0x274>)
 8000ce4:	0019      	movs	r1, r3
 8000ce6:	0010      	movs	r0, r2
 8000ce8:	f7ff fbde 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_WP_GPIO_Port, MEM_WP_Pin);
 8000cec:	2380      	movs	r3, #128	; 0x80
 8000cee:	01db      	lsls	r3, r3, #7
 8000cf0:	4a8f      	ldr	r2, [pc, #572]	; (8000f30 <MX_GPIO_Init+0x278>)
 8000cf2:	0019      	movs	r1, r3
 8000cf4:	0010      	movs	r0, r2
 8000cf6:	f7ff fbd7 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_CS_GPIO_Port, MEM_CS_Pin);
 8000cfa:	2380      	movs	r3, #128	; 0x80
 8000cfc:	021b      	lsls	r3, r3, #8
 8000cfe:	4a8c      	ldr	r2, [pc, #560]	; (8000f30 <MX_GPIO_Init+0x278>)
 8000d00:	0019      	movs	r1, r3
 8000d02:	0010      	movs	r0, r2
 8000d04:	f7ff fbd0 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_CS_GPIO_Port, DISP_CS_Pin);
 8000d08:	23a0      	movs	r3, #160	; 0xa0
 8000d0a:	05db      	lsls	r3, r3, #23
 8000d0c:	2140      	movs	r1, #64	; 0x40
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f7ff fbca 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_D_C_GPIO_Port, DISP_D_C_Pin);
 8000d14:	23a0      	movs	r3, #160	; 0xa0
 8000d16:	05db      	lsls	r3, r3, #23
 8000d18:	2180      	movs	r1, #128	; 0x80
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f7ff fbc4 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(BF_GPIO_Port, BF_Pin);
 8000d20:	4b83      	ldr	r3, [pc, #524]	; (8000f30 <MX_GPIO_Init+0x278>)
 8000d22:	2140      	movs	r1, #64	; 0x40
 8000d24:	0018      	movs	r0, r3
 8000d26:	f7ff fbbf 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = MEM_HOLD_Pin;
 8000d2a:	003b      	movs	r3, r7
 8000d2c:	2280      	movs	r2, #128	; 0x80
 8000d2e:	0092      	lsls	r2, r2, #2
 8000d30:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d32:	003b      	movs	r3, r7
 8000d34:	2201      	movs	r2, #1
 8000d36:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000d38:	003b      	movs	r3, r7
 8000d3a:	2203      	movs	r2, #3
 8000d3c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d3e:	003b      	movs	r3, r7
 8000d40:	2200      	movs	r2, #0
 8000d42:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d44:	003b      	movs	r3, r7
 8000d46:	2200      	movs	r2, #0
 8000d48:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_HOLD_GPIO_Port, &GPIO_InitStruct);
 8000d4a:	003b      	movs	r3, r7
 8000d4c:	4a77      	ldr	r2, [pc, #476]	; (8000f2c <MX_GPIO_Init+0x274>)
 8000d4e:	0019      	movs	r1, r3
 8000d50:	0010      	movs	r0, r2
 8000d52:	f008 fa92 	bl	800927a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_WP_Pin;
 8000d56:	003b      	movs	r3, r7
 8000d58:	2280      	movs	r2, #128	; 0x80
 8000d5a:	01d2      	lsls	r2, r2, #7
 8000d5c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d5e:	003b      	movs	r3, r7
 8000d60:	2201      	movs	r2, #1
 8000d62:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d64:	003b      	movs	r3, r7
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d6a:	003b      	movs	r3, r7
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d70:	003b      	movs	r3, r7
 8000d72:	2200      	movs	r2, #0
 8000d74:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_WP_GPIO_Port, &GPIO_InitStruct);
 8000d76:	003b      	movs	r3, r7
 8000d78:	4a6d      	ldr	r2, [pc, #436]	; (8000f30 <MX_GPIO_Init+0x278>)
 8000d7a:	0019      	movs	r1, r3
 8000d7c:	0010      	movs	r0, r2
 8000d7e:	f008 fa7c 	bl	800927a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_CS_Pin;
 8000d82:	003b      	movs	r3, r7
 8000d84:	2280      	movs	r2, #128	; 0x80
 8000d86:	0212      	lsls	r2, r2, #8
 8000d88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d8a:	003b      	movs	r3, r7
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d90:	003b      	movs	r3, r7
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d96:	003b      	movs	r3, r7
 8000d98:	2200      	movs	r2, #0
 8000d9a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d9c:	003b      	movs	r3, r7
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_CS_GPIO_Port, &GPIO_InitStruct);
 8000da2:	003b      	movs	r3, r7
 8000da4:	4a62      	ldr	r2, [pc, #392]	; (8000f30 <MX_GPIO_Init+0x278>)
 8000da6:	0019      	movs	r1, r3
 8000da8:	0010      	movs	r0, r2
 8000daa:	f008 fa66 	bl	800927a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_1_Pin;
 8000dae:	003b      	movs	r3, r7
 8000db0:	2201      	movs	r2, #1
 8000db2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000db4:	003b      	movs	r3, r7
 8000db6:	2200      	movs	r2, #0
 8000db8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000dba:	003b      	movs	r3, r7
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_1_GPIO_Port, &GPIO_InitStruct);
 8000dc0:	003a      	movs	r2, r7
 8000dc2:	23a0      	movs	r3, #160	; 0xa0
 8000dc4:	05db      	lsls	r3, r3, #23
 8000dc6:	0011      	movs	r1, r2
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f008 fa56 	bl	800927a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_2_Pin;
 8000dce:	003b      	movs	r3, r7
 8000dd0:	2202      	movs	r2, #2
 8000dd2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000dd4:	003b      	movs	r3, r7
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000dda:	003b      	movs	r3, r7
 8000ddc:	2201      	movs	r2, #1
 8000dde:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_2_GPIO_Port, &GPIO_InitStruct);
 8000de0:	003a      	movs	r2, r7
 8000de2:	23a0      	movs	r3, #160	; 0xa0
 8000de4:	05db      	lsls	r3, r3, #23
 8000de6:	0011      	movs	r1, r2
 8000de8:	0018      	movs	r0, r3
 8000dea:	f008 fa46 	bl	800927a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_3_Pin;
 8000dee:	003b      	movs	r3, r7
 8000df0:	2210      	movs	r2, #16
 8000df2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000df4:	003b      	movs	r3, r7
 8000df6:	2200      	movs	r2, #0
 8000df8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000dfa:	003b      	movs	r3, r7
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_3_GPIO_Port, &GPIO_InitStruct);
 8000e00:	003a      	movs	r2, r7
 8000e02:	23a0      	movs	r3, #160	; 0xa0
 8000e04:	05db      	lsls	r3, r3, #23
 8000e06:	0011      	movs	r1, r2
 8000e08:	0018      	movs	r0, r3
 8000e0a:	f008 fa36 	bl	800927a <LL_GPIO_Init>
  /**/
  	  GPIO_InitStruct.Pin = KEY_4_Pin;
 8000e0e:	003b      	movs	r3, r7
 8000e10:	2280      	movs	r2, #128	; 0x80
 8000e12:	0192      	lsls	r2, r2, #6
 8000e14:	601a      	str	r2, [r3, #0]
  	  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e16:	003b      	movs	r3, r7
 8000e18:	2200      	movs	r2, #0
 8000e1a:	605a      	str	r2, [r3, #4]
  	  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e1c:	003b      	movs	r3, r7
 8000e1e:	2201      	movs	r2, #1
 8000e20:	611a      	str	r2, [r3, #16]
  	  LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 8000e22:	003a      	movs	r2, r7
 8000e24:	23a0      	movs	r3, #160	; 0xa0
 8000e26:	05db      	lsls	r3, r3, #23
 8000e28:	0011      	movs	r1, r2
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f008 fa25 	bl	800927a <LL_GPIO_Init>
  	  /**/
  	    GPIO_InitStruct.Pin = KEY_5_Pin;
 8000e30:	003b      	movs	r3, r7
 8000e32:	2280      	movs	r2, #128	; 0x80
 8000e34:	01d2      	lsls	r2, r2, #7
 8000e36:	601a      	str	r2, [r3, #0]
  	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e38:	003b      	movs	r3, r7
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	605a      	str	r2, [r3, #4]
  	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e3e:	003b      	movs	r3, r7
 8000e40:	2201      	movs	r2, #1
 8000e42:	611a      	str	r2, [r3, #16]
  	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 8000e44:	003a      	movs	r2, r7
 8000e46:	23a0      	movs	r3, #160	; 0xa0
 8000e48:	05db      	lsls	r3, r3, #23
 8000e4a:	0011      	movs	r1, r2
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f008 fa14 	bl	800927a <LL_GPIO_Init>
  /**/
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 8000e52:	003b      	movs	r3, r7
 8000e54:	2240      	movs	r2, #64	; 0x40
 8000e56:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e58:	003b      	movs	r3, r7
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5e:	003b      	movs	r3, r7
 8000e60:	2203      	movs	r2, #3
 8000e62:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e64:	003b      	movs	r3, r7
 8000e66:	2200      	movs	r2, #0
 8000e68:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e6a:	003b      	movs	r3, r7
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 8000e70:	003a      	movs	r2, r7
 8000e72:	23a0      	movs	r3, #160	; 0xa0
 8000e74:	05db      	lsls	r3, r3, #23
 8000e76:	0011      	movs	r1, r2
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f008 f9fe 	bl	800927a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_D_C_Pin;
 8000e7e:	003b      	movs	r3, r7
 8000e80:	2280      	movs	r2, #128	; 0x80
 8000e82:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e84:	003b      	movs	r3, r7
 8000e86:	2201      	movs	r2, #1
 8000e88:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8a:	003b      	movs	r3, r7
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e90:	003b      	movs	r3, r7
 8000e92:	2200      	movs	r2, #0
 8000e94:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e96:	003b      	movs	r3, r7
 8000e98:	2200      	movs	r2, #0
 8000e9a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_D_C_GPIO_Port, &GPIO_InitStruct);
 8000e9c:	003a      	movs	r2, r7
 8000e9e:	23a0      	movs	r3, #160	; 0xa0
 8000ea0:	05db      	lsls	r3, r3, #23
 8000ea2:	0011      	movs	r1, r2
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	f008 f9e8 	bl	800927a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BF_Pin;
 8000eaa:	003b      	movs	r3, r7
 8000eac:	2240      	movs	r2, #64	; 0x40
 8000eae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000eb0:	003b      	movs	r3, r7
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb6:	003b      	movs	r3, r7
 8000eb8:	2203      	movs	r2, #3
 8000eba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ebc:	003b      	movs	r3, r7
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ec2:	003b      	movs	r3, r7
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BF_GPIO_Port, &GPIO_InitStruct);
 8000ec8:	003b      	movs	r3, r7
 8000eca:	4a19      	ldr	r2, [pc, #100]	; (8000f30 <MX_GPIO_Init+0x278>)
 8000ecc:	0019      	movs	r1, r3
 8000ece:	0010      	movs	r0, r2
 8000ed0:	f008 f9d3 	bl	800927a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ACCEL_INT1_Pin;
 8000ed4:	003b      	movs	r3, r7
 8000ed6:	2280      	movs	r2, #128	; 0x80
 8000ed8:	0112      	lsls	r2, r2, #4
 8000eda:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000edc:	003b      	movs	r3, r7
 8000ede:	2200      	movs	r2, #0
 8000ee0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ee2:	003b      	movs	r3, r7
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ACCEL_INT1_GPIO_Port, &GPIO_InitStruct);
 8000ee8:	003a      	movs	r2, r7
 8000eea:	23a0      	movs	r3, #160	; 0xa0
 8000eec:	05db      	lsls	r3, r3, #23
 8000eee:	0011      	movs	r1, r2
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f008 f9c2 	bl	800927a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ACCEL_INT2_Pin;
 8000ef6:	003b      	movs	r3, r7
 8000ef8:	2280      	movs	r2, #128	; 0x80
 8000efa:	0152      	lsls	r2, r2, #5
 8000efc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000efe:	003b      	movs	r3, r7
 8000f00:	2200      	movs	r2, #0
 8000f02:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f04:	003b      	movs	r3, r7
 8000f06:	2200      	movs	r2, #0
 8000f08:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ACCEL_INT2_GPIO_Port, &GPIO_InitStruct);
 8000f0a:	003a      	movs	r2, r7
 8000f0c:	23a0      	movs	r3, #160	; 0xa0
 8000f0e:	05db      	lsls	r3, r3, #23
 8000f10:	0011      	movs	r1, r2
 8000f12:	0018      	movs	r0, r3
 8000f14:	f008 f9b1 	bl	800927a <LL_GPIO_Init>

  /**/
  LL_SYSCFG_EnableFastModePlus(LL_SYSCFG_I2C_FASTMODEPLUS_PB9);
 8000f18:	2380      	movs	r3, #128	; 0x80
 8000f1a:	031b      	lsls	r3, r3, #12
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f7ff fab3 	bl	8000488 <LL_SYSCFG_EnableFastModePlus>

}
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	46bd      	mov	sp, r7
 8000f26:	b006      	add	sp, #24
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	50000400 	.word	0x50000400
 8000f30:	50000800 	.word	0x50000800

08000f34 <USART2_RX_Callback>:
//	    GPIO_InitStruct.Pin = KEY_5_Pin;
//	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
//	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
//	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
void  USART2_RX_Callback(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0

  dt1 = LL_USART_ReceiveData9(USART2);// LL implementaion of 1 byte receive
 8000f38:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <USART2_RX_Callback+0x60>)
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f7ff fa96 	bl	800046c <LL_USART_ReceiveData9>
 8000f40:	0003      	movs	r3, r0
 8000f42:	001a      	movs	r2, r3
 8000f44:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <USART2_RX_Callback+0x64>)
 8000f46:	801a      	strh	r2, [r3, #0]
	dt1 = (uint16_t)(USART2->RDR & 0x01FF);//CMSIS implementaion of 1 byte receive
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <USART2_RX_Callback+0x60>)
 8000f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	05db      	lsls	r3, r3, #23
 8000f50:	0ddb      	lsrs	r3, r3, #23
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <USART2_RX_Callback+0x64>)
 8000f56:	801a      	strh	r2, [r3, #0]
  ByteReceived=1;
 8000f58:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <USART2_RX_Callback+0x68>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	701a      	strb	r2, [r3, #0]
  if(dt1>0xFF){
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <USART2_RX_Callback+0x64>)
 8000f60:	881b      	ldrh	r3, [r3, #0]
 8000f62:	2bff      	cmp	r3, #255	; 0xff
 8000f64:	d90a      	bls.n	8000f7c <USART2_RX_Callback+0x48>
	  cmd[0]=dt1;
 8000f66:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <USART2_RX_Callback+0x64>)
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <USART2_RX_Callback+0x6c>)
 8000f6e:	701a      	strb	r2, [r3, #0]
	  ind = 0;
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <USART2_RX_Callback+0x70>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	801a      	strh	r2, [r3, #0]
	  firstByteReceived=1;
 8000f76:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <USART2_RX_Callback+0x74>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	701a      	strb	r2, [r3, #0]
//  while (!LL_USART_IsActiveFlag_TXE(USART2)) {}
//  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
  }
//  cmdReceive();
  if(firstByteReceived==1){
 8000f7c:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <USART2_RX_Callback+0x74>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d104      	bne.n	8000f8e <USART2_RX_Callback+0x5a>
	  cmdReceive(dt1);
 8000f84:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <USART2_RX_Callback+0x64>)
 8000f86:	881b      	ldrh	r3, [r3, #0]
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f000 f80f 	bl	8000fac <cmdReceive>
  }
}
 8000f8e:	46c0      	nop			; (mov r8, r8)
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40004400 	.word	0x40004400
 8000f98:	20005498 	.word	0x20005498
 8000f9c:	20005160 	.word	0x20005160
 8000fa0:	200054a0 	.word	0x200054a0
 8000fa4:	20005162 	.word	0x20005162
 8000fa8:	20005161 	.word	0x20005161

08000fac <cmdReceive>:
	void cmdReceive (uint16_t dt1)
	{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	0002      	movs	r2, r0
 8000fb4:	1dbb      	adds	r3, r7, #6
 8000fb6:	801a      	strh	r2, [r3, #0]
	  uint8_t inputCS=0;
 8000fb8:	230f      	movs	r3, #15
 8000fba:	18fb      	adds	r3, r7, r3
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	701a      	strb	r2, [r3, #0]
	  uint8_t i=0;
 8000fc0:	230e      	movs	r3, #14
 8000fc2:	18fb      	adds	r3, r7, r3
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	701a      	strb	r2, [r3, #0]
	  while (!ByteReceived) {}
 8000fc8:	46c0      	nop			; (mov r8, r8)
 8000fca:	4b28      	ldr	r3, [pc, #160]	; (800106c <cmdReceive+0xc0>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d0fb      	beq.n	8000fca <cmdReceive+0x1e>
	  ByteReceived=0;
 8000fd2:	4b26      	ldr	r3, [pc, #152]	; (800106c <cmdReceive+0xc0>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	701a      	strb	r2, [r3, #0]
	  cmd[ind] = dt1;
 8000fd8:	4b25      	ldr	r3, [pc, #148]	; (8001070 <cmdReceive+0xc4>)
 8000fda:	881b      	ldrh	r3, [r3, #0]
 8000fdc:	001a      	movs	r2, r3
 8000fde:	1dbb      	adds	r3, r7, #6
 8000fe0:	881b      	ldrh	r3, [r3, #0]
 8000fe2:	b2d9      	uxtb	r1, r3
 8000fe4:	4b23      	ldr	r3, [pc, #140]	; (8001074 <cmdReceive+0xc8>)
 8000fe6:	5499      	strb	r1, [r3, r2]
	  ind++;
 8000fe8:	4b21      	ldr	r3, [pc, #132]	; (8001070 <cmdReceive+0xc4>)
 8000fea:	881b      	ldrh	r3, [r3, #0]
 8000fec:	3301      	adds	r3, #1
 8000fee:	b29a      	uxth	r2, r3
 8000ff0:	4b1f      	ldr	r3, [pc, #124]	; (8001070 <cmdReceive+0xc4>)
 8000ff2:	801a      	strh	r2, [r3, #0]
	  if(ind>=1){
 8000ff4:	4b1e      	ldr	r3, [pc, #120]	; (8001070 <cmdReceive+0xc4>)
 8000ff6:	881b      	ldrh	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d02d      	beq.n	8001058 <cmdReceive+0xac>
//		  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
		  if(ind>cmd[1]+1){
 8000ffc:	4b1c      	ldr	r3, [pc, #112]	; (8001070 <cmdReceive+0xc4>)
 8000ffe:	881b      	ldrh	r3, [r3, #0]
 8001000:	001a      	movs	r2, r3
 8001002:	4b1c      	ldr	r3, [pc, #112]	; (8001074 <cmdReceive+0xc8>)
 8001004:	785b      	ldrb	r3, [r3, #1]
 8001006:	3301      	adds	r3, #1
 8001008:	429a      	cmp	r2, r3
 800100a:	dd25      	ble.n	8001058 <cmdReceive+0xac>
//			  LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 for(i=0;i<(cmd[1]+2);i++){
 800100c:	230e      	movs	r3, #14
 800100e:	18fb      	adds	r3, r7, r3
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]
 8001014:	e00f      	b.n	8001036 <cmdReceive+0x8a>
				 inputCS+=cmd[i];
 8001016:	200e      	movs	r0, #14
 8001018:	183b      	adds	r3, r7, r0
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	4a15      	ldr	r2, [pc, #84]	; (8001074 <cmdReceive+0xc8>)
 800101e:	5cd1      	ldrb	r1, [r2, r3]
 8001020:	220f      	movs	r2, #15
 8001022:	18bb      	adds	r3, r7, r2
 8001024:	18ba      	adds	r2, r7, r2
 8001026:	7812      	ldrb	r2, [r2, #0]
 8001028:	188a      	adds	r2, r1, r2
 800102a:	701a      	strb	r2, [r3, #0]
			 for(i=0;i<(cmd[1]+2);i++){
 800102c:	183b      	adds	r3, r7, r0
 800102e:	781a      	ldrb	r2, [r3, #0]
 8001030:	183b      	adds	r3, r7, r0
 8001032:	3201      	adds	r2, #1
 8001034:	701a      	strb	r2, [r3, #0]
 8001036:	230e      	movs	r3, #14
 8001038:	18fb      	adds	r3, r7, r3
 800103a:	781a      	ldrb	r2, [r3, #0]
 800103c:	4b0d      	ldr	r3, [pc, #52]	; (8001074 <cmdReceive+0xc8>)
 800103e:	785b      	ldrb	r3, [r3, #1]
 8001040:	3302      	adds	r3, #2
 8001042:	429a      	cmp	r2, r3
 8001044:	dbe7      	blt.n	8001016 <cmdReceive+0x6a>
			 }
			 if(inputCS==0){
 8001046:	230f      	movs	r3, #15
 8001048:	18fb      	adds	r3, r7, r3
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d103      	bne.n	8001058 <cmdReceive+0xac>
//			 	LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 				  answer2CPU(cmd);
 8001050:	4b08      	ldr	r3, [pc, #32]	; (8001074 <cmdReceive+0xc8>)
 8001052:	0018      	movs	r0, r3
 8001054:	f000 faa0 	bl	8001598 <answer2CPU>
			 }
		  }
	  }
//	  ind = 0;
	  USART2->ICR|=USART_ICR_ORECF;
 8001058:	4b07      	ldr	r3, [pc, #28]	; (8001078 <cmdReceive+0xcc>)
 800105a:	6a1a      	ldr	r2, [r3, #32]
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <cmdReceive+0xcc>)
 800105e:	2108      	movs	r1, #8
 8001060:	430a      	orrs	r2, r1
 8001062:	621a      	str	r2, [r3, #32]
	}
 8001064:	46c0      	nop			; (mov r8, r8)
 8001066:	46bd      	mov	sp, r7
 8001068:	b004      	add	sp, #16
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20005160 	.word	0x20005160
 8001070:	20005162 	.word	0x20005162
 8001074:	200054a0 	.word	0x200054a0
 8001078:	40004400 	.word	0x40004400

0800107c <USART_AS_SPI_sendCMD>:
	void USART_AS_SPI_sendCMD(uint8_t byte) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	0002      	movs	r2, r0
 8001084:	1dfb      	adds	r3, r7, #7
 8001086:	701a      	strb	r2, [r3, #0]
			byte = (byte & 0x55) << 1 | (byte & 0xAA) >> 1;
 8001088:	1dfb      	adds	r3, r7, #7
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	b25b      	sxtb	r3, r3
 8001090:	2255      	movs	r2, #85	; 0x55
 8001092:	4393      	bics	r3, r2
 8001094:	b25a      	sxtb	r2, r3
 8001096:	1dfb      	adds	r3, r7, #7
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	105b      	asrs	r3, r3, #1
 800109c:	b25b      	sxtb	r3, r3
 800109e:	2155      	movs	r1, #85	; 0x55
 80010a0:	400b      	ands	r3, r1
 80010a2:	b25b      	sxtb	r3, r3
 80010a4:	4313      	orrs	r3, r2
 80010a6:	b25b      	sxtb	r3, r3
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	1dfb      	adds	r3, r7, #7
 80010ac:	701a      	strb	r2, [r3, #0]
			byte = (byte & 0x33) << 2 | (byte & 0xCC) >> 2;
 80010ae:	1dfb      	adds	r3, r7, #7
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	b25b      	sxtb	r3, r3
 80010b6:	2233      	movs	r2, #51	; 0x33
 80010b8:	4393      	bics	r3, r2
 80010ba:	b25a      	sxtb	r2, r3
 80010bc:	1dfb      	adds	r3, r7, #7
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	109b      	asrs	r3, r3, #2
 80010c2:	b25b      	sxtb	r3, r3
 80010c4:	2133      	movs	r1, #51	; 0x33
 80010c6:	400b      	ands	r3, r1
 80010c8:	b25b      	sxtb	r3, r3
 80010ca:	4313      	orrs	r3, r2
 80010cc:	b25b      	sxtb	r3, r3
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	1dfb      	adds	r3, r7, #7
 80010d2:	701a      	strb	r2, [r3, #0]
			byte = (byte & 0x0F) << 4 | (byte & 0xF0) >> 4;
 80010d4:	1dfb      	adds	r3, r7, #7
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	011b      	lsls	r3, r3, #4
 80010da:	b25a      	sxtb	r2, r3
 80010dc:	1dfb      	adds	r3, r7, #7
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	091b      	lsrs	r3, r3, #4
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	b25b      	sxtb	r3, r3
 80010e6:	4313      	orrs	r3, r2
 80010e8:	b25b      	sxtb	r3, r3
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	1dfb      	adds	r3, r7, #7
 80010ee:	701a      	strb	r2, [r3, #0]
	//		GPIOA->ODR &= ~(1 << 6); //reset cs
	//		GPIOA->ODR &= ~(1 << 7); // reset d/c
			HAL_USART_Transmit(&husart3, (uint8_t*) &byte, 1, 1);
 80010f0:	1df9      	adds	r1, r7, #7
 80010f2:	4804      	ldr	r0, [pc, #16]	; (8001104 <USART_AS_SPI_sendCMD+0x88>)
 80010f4:	2301      	movs	r3, #1
 80010f6:	2201      	movs	r2, #1
 80010f8:	f007 fa0c 	bl	8008514 <HAL_USART_Transmit>
	//		GPIOA->ODR |= 1 << 6; //set cs
		}
 80010fc:	46c0      	nop			; (mov r8, r8)
 80010fe:	46bd      	mov	sp, r7
 8001100:	b002      	add	sp, #8
 8001102:	bd80      	pop	{r7, pc}
 8001104:	200052b8 	.word	0x200052b8

08001108 <USART_AS_SPI_sendDAT>:
	void USART_AS_SPI_sendDAT(uint8_t byte) //(Without CS and D/C)
	{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	0002      	movs	r2, r0
 8001110:	1dfb      	adds	r3, r7, #7
 8001112:	701a      	strb	r2, [r3, #0]
		byte = (byte & 0x55) << 1 | (byte & 0xAA) >> 1;
 8001114:	1dfb      	adds	r3, r7, #7
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	b25b      	sxtb	r3, r3
 800111c:	2255      	movs	r2, #85	; 0x55
 800111e:	4393      	bics	r3, r2
 8001120:	b25a      	sxtb	r2, r3
 8001122:	1dfb      	adds	r3, r7, #7
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	105b      	asrs	r3, r3, #1
 8001128:	b25b      	sxtb	r3, r3
 800112a:	2155      	movs	r1, #85	; 0x55
 800112c:	400b      	ands	r3, r1
 800112e:	b25b      	sxtb	r3, r3
 8001130:	4313      	orrs	r3, r2
 8001132:	b25b      	sxtb	r3, r3
 8001134:	b2da      	uxtb	r2, r3
 8001136:	1dfb      	adds	r3, r7, #7
 8001138:	701a      	strb	r2, [r3, #0]
		byte = (byte & 0x33) << 2 | (byte & 0xCC) >> 2;
 800113a:	1dfb      	adds	r3, r7, #7
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	b25b      	sxtb	r3, r3
 8001142:	2233      	movs	r2, #51	; 0x33
 8001144:	4393      	bics	r3, r2
 8001146:	b25a      	sxtb	r2, r3
 8001148:	1dfb      	adds	r3, r7, #7
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	109b      	asrs	r3, r3, #2
 800114e:	b25b      	sxtb	r3, r3
 8001150:	2133      	movs	r1, #51	; 0x33
 8001152:	400b      	ands	r3, r1
 8001154:	b25b      	sxtb	r3, r3
 8001156:	4313      	orrs	r3, r2
 8001158:	b25b      	sxtb	r3, r3
 800115a:	b2da      	uxtb	r2, r3
 800115c:	1dfb      	adds	r3, r7, #7
 800115e:	701a      	strb	r2, [r3, #0]
		byte = (byte & 0x0F) << 4 | (byte & 0xF0) >> 4;
 8001160:	1dfb      	adds	r3, r7, #7
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	011b      	lsls	r3, r3, #4
 8001166:	b25a      	sxtb	r2, r3
 8001168:	1dfb      	adds	r3, r7, #7
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	091b      	lsrs	r3, r3, #4
 800116e:	b2db      	uxtb	r3, r3
 8001170:	b25b      	sxtb	r3, r3
 8001172:	4313      	orrs	r3, r2
 8001174:	b25b      	sxtb	r3, r3
 8001176:	b2da      	uxtb	r2, r3
 8001178:	1dfb      	adds	r3, r7, #7
 800117a:	701a      	strb	r2, [r3, #0]
		GPIOA->ODR &= ~(1 << 6); //reset cs
 800117c:	23a0      	movs	r3, #160	; 0xa0
 800117e:	05db      	lsls	r3, r3, #23
 8001180:	695a      	ldr	r2, [r3, #20]
 8001182:	23a0      	movs	r3, #160	; 0xa0
 8001184:	05db      	lsls	r3, r3, #23
 8001186:	2140      	movs	r1, #64	; 0x40
 8001188:	438a      	bics	r2, r1
 800118a:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= 1 << 7; // set dc
 800118c:	23a0      	movs	r3, #160	; 0xa0
 800118e:	05db      	lsls	r3, r3, #23
 8001190:	695a      	ldr	r2, [r3, #20]
 8001192:	23a0      	movs	r3, #160	; 0xa0
 8001194:	05db      	lsls	r3, r3, #23
 8001196:	2180      	movs	r1, #128	; 0x80
 8001198:	430a      	orrs	r2, r1
 800119a:	615a      	str	r2, [r3, #20]
		HAL_USART_Transmit(&husart3, (uint8_t*) &byte, 1, 1);
 800119c:	1df9      	adds	r1, r7, #7
 800119e:	4808      	ldr	r0, [pc, #32]	; (80011c0 <USART_AS_SPI_sendDAT+0xb8>)
 80011a0:	2301      	movs	r3, #1
 80011a2:	2201      	movs	r2, #1
 80011a4:	f007 f9b6 	bl	8008514 <HAL_USART_Transmit>
		GPIOA->ODR |= 1 << 6; //set cs
 80011a8:	23a0      	movs	r3, #160	; 0xa0
 80011aa:	05db      	lsls	r3, r3, #23
 80011ac:	695a      	ldr	r2, [r3, #20]
 80011ae:	23a0      	movs	r3, #160	; 0xa0
 80011b0:	05db      	lsls	r3, r3, #23
 80011b2:	2140      	movs	r1, #64	; 0x40
 80011b4:	430a      	orrs	r2, r1
 80011b6:	615a      	str	r2, [r3, #20]

	}
 80011b8:	46c0      	nop			; (mov r8, r8)
 80011ba:	46bd      	mov	sp, r7
 80011bc:	b002      	add	sp, #8
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	200052b8 	.word	0x200052b8

080011c4 <weoInit>:
	void weoInit(void) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
		HAL_Delay(1);
 80011c8:	2001      	movs	r0, #1
 80011ca:	f001 fe61 	bl	8002e90 <HAL_Delay>
		HAL_Delay(1);
 80011ce:	2001      	movs	r0, #1
 80011d0:	f001 fe5e 	bl	8002e90 <HAL_Delay>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80011d4:	4b25      	ldr	r3, [pc, #148]	; (800126c <weoInit+0xa8>)
 80011d6:	2100      	movs	r1, #0
 80011d8:	0018      	movs	r0, r3
 80011da:	f006 f8f5 	bl	80073c8 <HAL_TIM_PWM_Start>
		HAL_Delay(1);
 80011de:	2001      	movs	r0, #1
 80011e0:	f001 fe56 	bl	8002e90 <HAL_Delay>
		GPIOA->ODR &= ~(1 << 6);	//reset cs
 80011e4:	23a0      	movs	r3, #160	; 0xa0
 80011e6:	05db      	lsls	r3, r3, #23
 80011e8:	695a      	ldr	r2, [r3, #20]
 80011ea:	23a0      	movs	r3, #160	; 0xa0
 80011ec:	05db      	lsls	r3, r3, #23
 80011ee:	2140      	movs	r1, #64	; 0x40
 80011f0:	438a      	bics	r2, r1
 80011f2:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1 << 7);	// reset dc
 80011f4:	23a0      	movs	r3, #160	; 0xa0
 80011f6:	05db      	lsls	r3, r3, #23
 80011f8:	695a      	ldr	r2, [r3, #20]
 80011fa:	23a0      	movs	r3, #160	; 0xa0
 80011fc:	05db      	lsls	r3, r3, #23
 80011fe:	2180      	movs	r1, #128	; 0x80
 8001200:	438a      	bics	r2, r1
 8001202:	615a      	str	r2, [r3, #20]
		USART_AS_SPI_sendCMD(0xAF);
 8001204:	20af      	movs	r0, #175	; 0xaf
 8001206:	f7ff ff39 	bl	800107c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA0);	//Set Re-map
 800120a:	20a0      	movs	r0, #160	; 0xa0
 800120c:	f7ff ff36 	bl	800107c <USART_AS_SPI_sendCMD>
//		USART_AS_SPI_sendCMD(0x54);
//		USART_AS_SPI_sendCMD(0b00010100);
		USART_AS_SPI_sendCMD(0x51); //	0x51 is a proper remap!
 8001210:	2051      	movs	r0, #81	; 0x51
 8001212:	f7ff ff33 	bl	800107c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 8001216:	2081      	movs	r0, #129	; 0x81
 8001218:	f7ff ff30 	bl	800107c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xFF);
 800121c:	20ff      	movs	r0, #255	; 0xff
 800121e:	f7ff ff2d 	bl	800107c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA1);	//Set Display Start Line
 8001222:	20a1      	movs	r0, #161	; 0xa1
 8001224:	f7ff ff2a 	bl	800107c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 8001228:	2000      	movs	r0, #0
 800122a:	f7ff ff27 	bl	800107c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA2);	//Set Display Offset
 800122e:	20a2      	movs	r0, #162	; 0xa2
 8001230:	f7ff ff24 	bl	800107c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 8001234:	2000      	movs	r0, #0
 8001236:	f7ff ff21 	bl	800107c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA8);  // Select Multiplex Ratio
 800123a:	20a8      	movs	r0, #168	; 0xa8
 800123c:	f7ff ff1e 	bl	800107c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x7F); // Default => 0x3F (1/64 Duty)	0x1F(1/32 Duty)
 8001240:	207f      	movs	r0, #127	; 0x7f
 8001242:	f7ff ff1b 	bl	800107c <USART_AS_SPI_sendCMD>
		GPIOA->ODR |= 1 << 7;	//set dc
 8001246:	23a0      	movs	r3, #160	; 0xa0
 8001248:	05db      	lsls	r3, r3, #23
 800124a:	695a      	ldr	r2, [r3, #20]
 800124c:	23a0      	movs	r3, #160	; 0xa0
 800124e:	05db      	lsls	r3, r3, #23
 8001250:	2180      	movs	r1, #128	; 0x80
 8001252:	430a      	orrs	r2, r1
 8001254:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= 1 << 6;	//set cs
 8001256:	23a0      	movs	r3, #160	; 0xa0
 8001258:	05db      	lsls	r3, r3, #23
 800125a:	695a      	ldr	r2, [r3, #20]
 800125c:	23a0      	movs	r3, #160	; 0xa0
 800125e:	05db      	lsls	r3, r3, #23
 8001260:	2140      	movs	r1, #64	; 0x40
 8001262:	430a      	orrs	r2, r1
 8001264:	615a      	str	r2, [r3, #20]
		//=======================================================================================================
	}
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20005328 	.word	0x20005328

08001270 <weoClear>:
	void weoClear(void) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
		uint16_t i;
		for (i = 0; i < 8192; i++) {
 8001276:	1dbb      	adds	r3, r7, #6
 8001278:	2200      	movs	r2, #0
 800127a:	801a      	strh	r2, [r3, #0]
 800127c:	e007      	b.n	800128e <weoClear+0x1e>
			USART_AS_SPI_sendDAT(BACKGROUND_COLOR);
 800127e:	2000      	movs	r0, #0
 8001280:	f7ff ff42 	bl	8001108 <USART_AS_SPI_sendDAT>
		for (i = 0; i < 8192; i++) {
 8001284:	1dbb      	adds	r3, r7, #6
 8001286:	881a      	ldrh	r2, [r3, #0]
 8001288:	1dbb      	adds	r3, r7, #6
 800128a:	3201      	adds	r2, #1
 800128c:	801a      	strh	r2, [r3, #0]
 800128e:	1dbb      	adds	r3, r7, #6
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	4a03      	ldr	r2, [pc, #12]	; (80012a0 <weoClear+0x30>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d9f2      	bls.n	800127e <weoClear+0xe>
		}
	}
 8001298:	46c0      	nop			; (mov r8, r8)
 800129a:	46bd      	mov	sp, r7
 800129c:	b002      	add	sp, #8
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	00001fff 	.word	0x00001fff

080012a4 <weoDrawRectangleFilled>:
			}
		}
	}
	void weoDrawRectangleFilled(unsigned char start_x, unsigned char start_y,
				unsigned char end_x, unsigned char end_y, unsigned char color,
				uint8_t MEM_Buffer[]) {
 80012a4:	b5b0      	push	{r4, r5, r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	0005      	movs	r5, r0
 80012ac:	000c      	movs	r4, r1
 80012ae:	0010      	movs	r0, r2
 80012b0:	0019      	movs	r1, r3
 80012b2:	1dfb      	adds	r3, r7, #7
 80012b4:	1c2a      	adds	r2, r5, #0
 80012b6:	701a      	strb	r2, [r3, #0]
 80012b8:	1dbb      	adds	r3, r7, #6
 80012ba:	1c22      	adds	r2, r4, #0
 80012bc:	701a      	strb	r2, [r3, #0]
 80012be:	1d7b      	adds	r3, r7, #5
 80012c0:	1c02      	adds	r2, r0, #0
 80012c2:	701a      	strb	r2, [r3, #0]
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	1c0a      	adds	r2, r1, #0
 80012c8:	701a      	strb	r2, [r3, #0]
			uint16_t i = 0;
 80012ca:	230e      	movs	r3, #14
 80012cc:	18fb      	adds	r3, r7, r3
 80012ce:	2200      	movs	r2, #0
 80012d0:	801a      	strh	r2, [r3, #0]
			uint8_t start_x_New,start_y_New,end_x_New,end_y_New;
			if (start_x > OLED_DIM_WIDTH || start_y > OLED_DIM_HEIGHT
 80012d2:	1dfb      	adds	r3, r7, #7
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	b25b      	sxtb	r3, r3
 80012d8:	2b00      	cmp	r3, #0
 80012da:	da00      	bge.n	80012de <weoDrawRectangleFilled+0x3a>
 80012dc:	e156      	b.n	800158c <weoDrawRectangleFilled+0x2e8>
 80012de:	1dbb      	adds	r3, r7, #6
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	b25b      	sxtb	r3, r3
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	da00      	bge.n	80012ea <weoDrawRectangleFilled+0x46>
 80012e8:	e150      	b.n	800158c <weoDrawRectangleFilled+0x2e8>
					|| end_x > OLED_DIM_WIDTH || end_y > OLED_DIM_HEIGHT) {
 80012ea:	1d7b      	adds	r3, r7, #5
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	b25b      	sxtb	r3, r3
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	da00      	bge.n	80012f6 <weoDrawRectangleFilled+0x52>
 80012f4:	e14a      	b.n	800158c <weoDrawRectangleFilled+0x2e8>
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	b25b      	sxtb	r3, r3
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	da00      	bge.n	8001302 <weoDrawRectangleFilled+0x5e>
 8001300:	e144      	b.n	800158c <weoDrawRectangleFilled+0x2e8>
				return;
			}

			start_x_New=start_x;
 8001302:	230d      	movs	r3, #13
 8001304:	18fb      	adds	r3, r7, r3
 8001306:	1dfa      	adds	r2, r7, #7
 8001308:	7812      	ldrb	r2, [r2, #0]
 800130a:	701a      	strb	r2, [r3, #0]
			start_y_New=0x7F-end_y;
 800130c:	230c      	movs	r3, #12
 800130e:	18fb      	adds	r3, r7, r3
 8001310:	1d3a      	adds	r2, r7, #4
 8001312:	7812      	ldrb	r2, [r2, #0]
 8001314:	217f      	movs	r1, #127	; 0x7f
 8001316:	1a8a      	subs	r2, r1, r2
 8001318:	701a      	strb	r2, [r3, #0]
			end_x_New=end_x;
 800131a:	230b      	movs	r3, #11
 800131c:	18fb      	adds	r3, r7, r3
 800131e:	1d7a      	adds	r2, r7, #5
 8001320:	7812      	ldrb	r2, [r2, #0]
 8001322:	701a      	strb	r2, [r3, #0]
			end_y_New=0x7F-start_y;
 8001324:	230a      	movs	r3, #10
 8001326:	18fb      	adds	r3, r7, r3
 8001328:	1dba      	adds	r2, r7, #6
 800132a:	7812      	ldrb	r2, [r2, #0]
 800132c:	217f      	movs	r1, #127	; 0x7f
 800132e:	1a8a      	subs	r2, r1, r2
 8001330:	701a      	strb	r2, [r3, #0]

			for (i = 0; i < ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New /2 - start_y_New/2 + 1));
 8001332:	230e      	movs	r3, #14
 8001334:	18fb      	adds	r3, r7, r3
 8001336:	2200      	movs	r2, #0
 8001338:	801a      	strh	r2, [r3, #0]
 800133a:	e054      	b.n	80013e6 <weoDrawRectangleFilled+0x142>
			i++) {
//			for (i = 0; i < 8192;i++) {
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x55) << 1
 800133c:	200e      	movs	r0, #14
 800133e:	183b      	adds	r3, r7, r0
 8001340:	881b      	ldrh	r3, [r3, #0]
 8001342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001344:	18d3      	adds	r3, r2, r3
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	b25b      	sxtb	r3, r3
 800134c:	2255      	movs	r2, #85	; 0x55
 800134e:	4393      	bics	r3, r2
 8001350:	b25a      	sxtb	r2, r3
				| (MEM_Buffer[i] & 0xAA) >> 1;
 8001352:	183b      	adds	r3, r7, r0
 8001354:	881b      	ldrh	r3, [r3, #0]
 8001356:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001358:	18cb      	adds	r3, r1, r3
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	105b      	asrs	r3, r3, #1
 800135e:	b25b      	sxtb	r3, r3
 8001360:	2155      	movs	r1, #85	; 0x55
 8001362:	400b      	ands	r3, r1
 8001364:	b25b      	sxtb	r3, r3
 8001366:	4313      	orrs	r3, r2
 8001368:	b259      	sxtb	r1, r3
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x55) << 1
 800136a:	183b      	adds	r3, r7, r0
 800136c:	881b      	ldrh	r3, [r3, #0]
 800136e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001370:	18d3      	adds	r3, r2, r3
				| (MEM_Buffer[i] & 0xAA) >> 1;
 8001372:	b2ca      	uxtb	r2, r1
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x55) << 1
 8001374:	701a      	strb	r2, [r3, #0]
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x33) << 2
 8001376:	183b      	adds	r3, r7, r0
 8001378:	881b      	ldrh	r3, [r3, #0]
 800137a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800137c:	18d3      	adds	r3, r2, r3
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	b25b      	sxtb	r3, r3
 8001384:	2233      	movs	r2, #51	; 0x33
 8001386:	4393      	bics	r3, r2
 8001388:	b25a      	sxtb	r2, r3
				| (MEM_Buffer[i] & 0xCC) >> 2;
 800138a:	183b      	adds	r3, r7, r0
 800138c:	881b      	ldrh	r3, [r3, #0]
 800138e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001390:	18cb      	adds	r3, r1, r3
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	109b      	asrs	r3, r3, #2
 8001396:	b25b      	sxtb	r3, r3
 8001398:	2133      	movs	r1, #51	; 0x33
 800139a:	400b      	ands	r3, r1
 800139c:	b25b      	sxtb	r3, r3
 800139e:	4313      	orrs	r3, r2
 80013a0:	b259      	sxtb	r1, r3
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x33) << 2
 80013a2:	183b      	adds	r3, r7, r0
 80013a4:	881b      	ldrh	r3, [r3, #0]
 80013a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013a8:	18d3      	adds	r3, r2, r3
				| (MEM_Buffer[i] & 0xCC) >> 2;
 80013aa:	b2ca      	uxtb	r2, r1
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x33) << 2
 80013ac:	701a      	strb	r2, [r3, #0]
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x0F) << 4
 80013ae:	183b      	adds	r3, r7, r0
 80013b0:	881b      	ldrh	r3, [r3, #0]
 80013b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013b4:	18d3      	adds	r3, r2, r3
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	011b      	lsls	r3, r3, #4
				| (MEM_Buffer[i] & 0xF0) >> 4;
 80013ba:	b25a      	sxtb	r2, r3
 80013bc:	183b      	adds	r3, r7, r0
 80013be:	881b      	ldrh	r3, [r3, #0]
 80013c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013c2:	18cb      	adds	r3, r1, r3
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	091b      	lsrs	r3, r3, #4
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	b25b      	sxtb	r3, r3
 80013cc:	4313      	orrs	r3, r2
 80013ce:	b259      	sxtb	r1, r3
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x0F) << 4
 80013d0:	183b      	adds	r3, r7, r0
 80013d2:	881b      	ldrh	r3, [r3, #0]
 80013d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013d6:	18d3      	adds	r3, r2, r3
				| (MEM_Buffer[i] & 0xF0) >> 4;
 80013d8:	b2ca      	uxtb	r2, r1
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x0F) << 4
 80013da:	701a      	strb	r2, [r3, #0]
			i++) {
 80013dc:	183b      	adds	r3, r7, r0
 80013de:	881a      	ldrh	r2, [r3, #0]
 80013e0:	183b      	adds	r3, r7, r0
 80013e2:	3201      	adds	r2, #1
 80013e4:	801a      	strh	r2, [r3, #0]
			for (i = 0; i < ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New /2 - start_y_New/2 + 1));
 80013e6:	230e      	movs	r3, #14
 80013e8:	18fb      	adds	r3, r7, r3
 80013ea:	881a      	ldrh	r2, [r3, #0]
 80013ec:	230b      	movs	r3, #11
 80013ee:	18fb      	adds	r3, r7, r3
 80013f0:	7819      	ldrb	r1, [r3, #0]
 80013f2:	230d      	movs	r3, #13
 80013f4:	18fb      	adds	r3, r7, r3
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	1acb      	subs	r3, r1, r3
 80013fa:	3301      	adds	r3, #1
 80013fc:	210a      	movs	r1, #10
 80013fe:	1879      	adds	r1, r7, r1
 8001400:	7809      	ldrb	r1, [r1, #0]
 8001402:	0849      	lsrs	r1, r1, #1
 8001404:	b2c9      	uxtb	r1, r1
 8001406:	0008      	movs	r0, r1
 8001408:	210c      	movs	r1, #12
 800140a:	1879      	adds	r1, r7, r1
 800140c:	7809      	ldrb	r1, [r1, #0]
 800140e:	0849      	lsrs	r1, r1, #1
 8001410:	b2c9      	uxtb	r1, r1
 8001412:	1a41      	subs	r1, r0, r1
 8001414:	3101      	adds	r1, #1
 8001416:	434b      	muls	r3, r1
 8001418:	429a      	cmp	r2, r3
 800141a:	db8f      	blt.n	800133c <weoDrawRectangleFilled+0x98>
			}
			GPIOA->ODR &= ~(1 << 6);	//reset cs
 800141c:	23a0      	movs	r3, #160	; 0xa0
 800141e:	05db      	lsls	r3, r3, #23
 8001420:	695a      	ldr	r2, [r3, #20]
 8001422:	23a0      	movs	r3, #160	; 0xa0
 8001424:	05db      	lsls	r3, r3, #23
 8001426:	2140      	movs	r1, #64	; 0x40
 8001428:	438a      	bics	r2, r1
 800142a:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 800142c:	23a0      	movs	r3, #160	; 0xa0
 800142e:	05db      	lsls	r3, r3, #23
 8001430:	695a      	ldr	r2, [r3, #20]
 8001432:	23a0      	movs	r3, #160	; 0xa0
 8001434:	05db      	lsls	r3, r3, #23
 8001436:	2180      	movs	r1, #128	; 0x80
 8001438:	438a      	bics	r2, r1
 800143a:	615a      	str	r2, [r3, #20]
			USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 800143c:	2075      	movs	r0, #117	; 0x75
 800143e:	f7ff fe1d 	bl	800107c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_x_New/1);
 8001442:	230d      	movs	r3, #13
 8001444:	18fb      	adds	r3, r7, r3
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	0018      	movs	r0, r3
 800144a:	f7ff fe17 	bl	800107c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_x_New/1);
 800144e:	230b      	movs	r3, #11
 8001450:	18fb      	adds	r3, r7, r3
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	0018      	movs	r0, r3
 8001456:	f7ff fe11 	bl	800107c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 800145a:	2015      	movs	r0, #21
 800145c:	f7ff fe0e 	bl	800107c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_y_New/2);
 8001460:	230c      	movs	r3, #12
 8001462:	18fb      	adds	r3, r7, r3
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	085b      	lsrs	r3, r3, #1
 8001468:	b2db      	uxtb	r3, r3
 800146a:	0018      	movs	r0, r3
 800146c:	f7ff fe06 	bl	800107c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_y_New/2);
 8001470:	230a      	movs	r3, #10
 8001472:	18fb      	adds	r3, r7, r3
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	085b      	lsrs	r3, r3, #1
 8001478:	b2db      	uxtb	r3, r3
 800147a:	0018      	movs	r0, r3
 800147c:	f7ff fdfe 	bl	800107c <USART_AS_SPI_sendCMD>
			GPIOA->ODR |= 1 << 7;	//set dc
 8001480:	23a0      	movs	r3, #160	; 0xa0
 8001482:	05db      	lsls	r3, r3, #23
 8001484:	695a      	ldr	r2, [r3, #20]
 8001486:	23a0      	movs	r3, #160	; 0xa0
 8001488:	05db      	lsls	r3, r3, #23
 800148a:	2180      	movs	r1, #128	; 0x80
 800148c:	430a      	orrs	r2, r1
 800148e:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 8001490:	23a0      	movs	r3, #160	; 0xa0
 8001492:	05db      	lsls	r3, r3, #23
 8001494:	695a      	ldr	r2, [r3, #20]
 8001496:	23a0      	movs	r3, #160	; 0xa0
 8001498:	05db      	lsls	r3, r3, #23
 800149a:	2140      	movs	r1, #64	; 0x40
 800149c:	430a      	orrs	r2, r1
 800149e:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 6);	//reset cs
 80014a0:	23a0      	movs	r3, #160	; 0xa0
 80014a2:	05db      	lsls	r3, r3, #23
 80014a4:	695a      	ldr	r2, [r3, #20]
 80014a6:	23a0      	movs	r3, #160	; 0xa0
 80014a8:	05db      	lsls	r3, r3, #23
 80014aa:	2140      	movs	r1, #64	; 0x40
 80014ac:	438a      	bics	r2, r1
 80014ae:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 7;	// set dc
 80014b0:	23a0      	movs	r3, #160	; 0xa0
 80014b2:	05db      	lsls	r3, r3, #23
 80014b4:	695a      	ldr	r2, [r3, #20]
 80014b6:	23a0      	movs	r3, #160	; 0xa0
 80014b8:	05db      	lsls	r3, r3, #23
 80014ba:	2180      	movs	r1, #128	; 0x80
 80014bc:	430a      	orrs	r2, r1
 80014be:	615a      	str	r2, [r3, #20]
			for (i = 0; i < ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New/2 - start_y_New /2 + 1));
 80014c0:	230e      	movs	r3, #14
 80014c2:	18fb      	adds	r3, r7, r3
 80014c4:	2200      	movs	r2, #0
 80014c6:	801a      	strh	r2, [r3, #0]
 80014c8:	e00e      	b.n	80014e8 <weoDrawRectangleFilled+0x244>
					i++) {
				HAL_USART_Transmit(&husart3, (uint8_t*) &MEM_Buffer[i], 1, 1);
 80014ca:	240e      	movs	r4, #14
 80014cc:	193b      	adds	r3, r7, r4
 80014ce:	881b      	ldrh	r3, [r3, #0]
 80014d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014d2:	18d1      	adds	r1, r2, r3
 80014d4:	482f      	ldr	r0, [pc, #188]	; (8001594 <weoDrawRectangleFilled+0x2f0>)
 80014d6:	2301      	movs	r3, #1
 80014d8:	2201      	movs	r2, #1
 80014da:	f007 f81b 	bl	8008514 <HAL_USART_Transmit>
					i++) {
 80014de:	193b      	adds	r3, r7, r4
 80014e0:	881a      	ldrh	r2, [r3, #0]
 80014e2:	193b      	adds	r3, r7, r4
 80014e4:	3201      	adds	r2, #1
 80014e6:	801a      	strh	r2, [r3, #0]
			for (i = 0; i < ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New/2 - start_y_New /2 + 1));
 80014e8:	230e      	movs	r3, #14
 80014ea:	18fb      	adds	r3, r7, r3
 80014ec:	881a      	ldrh	r2, [r3, #0]
 80014ee:	230b      	movs	r3, #11
 80014f0:	18fb      	adds	r3, r7, r3
 80014f2:	7819      	ldrb	r1, [r3, #0]
 80014f4:	230d      	movs	r3, #13
 80014f6:	18fb      	adds	r3, r7, r3
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	1acb      	subs	r3, r1, r3
 80014fc:	3301      	adds	r3, #1
 80014fe:	210a      	movs	r1, #10
 8001500:	1879      	adds	r1, r7, r1
 8001502:	7809      	ldrb	r1, [r1, #0]
 8001504:	0849      	lsrs	r1, r1, #1
 8001506:	b2c9      	uxtb	r1, r1
 8001508:	0008      	movs	r0, r1
 800150a:	210c      	movs	r1, #12
 800150c:	1879      	adds	r1, r7, r1
 800150e:	7809      	ldrb	r1, [r1, #0]
 8001510:	0849      	lsrs	r1, r1, #1
 8001512:	b2c9      	uxtb	r1, r1
 8001514:	1a41      	subs	r1, r0, r1
 8001516:	3101      	adds	r1, #1
 8001518:	434b      	muls	r3, r1
 800151a:	429a      	cmp	r2, r3
 800151c:	dbd5      	blt.n	80014ca <weoDrawRectangleFilled+0x226>
			}
			GPIOA->ODR &= ~(1 << 7);	//reset dc
 800151e:	23a0      	movs	r3, #160	; 0xa0
 8001520:	05db      	lsls	r3, r3, #23
 8001522:	695a      	ldr	r2, [r3, #20]
 8001524:	23a0      	movs	r3, #160	; 0xa0
 8001526:	05db      	lsls	r3, r3, #23
 8001528:	2180      	movs	r1, #128	; 0x80
 800152a:	438a      	bics	r2, r1
 800152c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 800152e:	23a0      	movs	r3, #160	; 0xa0
 8001530:	05db      	lsls	r3, r3, #23
 8001532:	695a      	ldr	r2, [r3, #20]
 8001534:	23a0      	movs	r3, #160	; 0xa0
 8001536:	05db      	lsls	r3, r3, #23
 8001538:	2140      	movs	r1, #64	; 0x40
 800153a:	430a      	orrs	r2, r1
 800153c:	615a      	str	r2, [r3, #20]
			for (i = 0; i < ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New/2 - start_y_New /2 + 1));
 800153e:	230e      	movs	r3, #14
 8001540:	18fb      	adds	r3, r7, r3
 8001542:	2200      	movs	r2, #0
 8001544:	801a      	strh	r2, [r3, #0]
 8001546:	e005      	b.n	8001554 <weoDrawRectangleFilled+0x2b0>
								i++) {
 8001548:	210e      	movs	r1, #14
 800154a:	187b      	adds	r3, r7, r1
 800154c:	881a      	ldrh	r2, [r3, #0]
 800154e:	187b      	adds	r3, r7, r1
 8001550:	3201      	adds	r2, #1
 8001552:	801a      	strh	r2, [r3, #0]
			for (i = 0; i < ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New/2 - start_y_New /2 + 1));
 8001554:	230e      	movs	r3, #14
 8001556:	18fb      	adds	r3, r7, r3
 8001558:	881a      	ldrh	r2, [r3, #0]
 800155a:	230b      	movs	r3, #11
 800155c:	18fb      	adds	r3, r7, r3
 800155e:	7819      	ldrb	r1, [r3, #0]
 8001560:	230d      	movs	r3, #13
 8001562:	18fb      	adds	r3, r7, r3
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	1acb      	subs	r3, r1, r3
 8001568:	3301      	adds	r3, #1
 800156a:	210a      	movs	r1, #10
 800156c:	1879      	adds	r1, r7, r1
 800156e:	7809      	ldrb	r1, [r1, #0]
 8001570:	0849      	lsrs	r1, r1, #1
 8001572:	b2c9      	uxtb	r1, r1
 8001574:	0008      	movs	r0, r1
 8001576:	210c      	movs	r1, #12
 8001578:	1879      	adds	r1, r7, r1
 800157a:	7809      	ldrb	r1, [r1, #0]
 800157c:	0849      	lsrs	r1, r1, #1
 800157e:	b2c9      	uxtb	r1, r1
 8001580:	1a41      	subs	r1, r0, r1
 8001582:	3101      	adds	r1, #1
 8001584:	434b      	muls	r3, r1
 8001586:	429a      	cmp	r2, r3
 8001588:	dbde      	blt.n	8001548 <weoDrawRectangleFilled+0x2a4>
 800158a:	e000      	b.n	800158e <weoDrawRectangleFilled+0x2ea>
				return;
 800158c:	46c0      	nop			; (mov r8, r8)
						}
		}
 800158e:	46bd      	mov	sp, r7
 8001590:	b004      	add	sp, #16
 8001592:	bdb0      	pop	{r4, r5, r7, pc}
 8001594:	200052b8 	.word	0x200052b8

08001598 <answer2CPU>:
		WriteReg_I2C_SOUND(0x3F, 0x90);	//DAC powered up, Soft step 1 per Fs. (P0, R63, D7=1, D5-D4=01, D3-D2=00, D1-D0=00)
		WriteReg_I2C_SOUND(0x41, 0x00);	//DAC digital gain 0dB (P0, R65, D7-D0=00000000)
		WriteReg_I2C_SOUND(0x40, 0x04);	//DAC volume not muted. (P0, R64, D3=0, D2=1)
	}
//=============================================================================================
	uint8_t answer2CPU(uint8_t cmd[]) {
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
		uint8_t keyboard = 0xFF;
 80015a0:	230f      	movs	r3, #15
 80015a2:	18fb      	adds	r3, r7, r3
 80015a4:	22ff      	movs	r2, #255	; 0xff
 80015a6:	701a      	strb	r2, [r3, #0]
//		uint16_t ans[10];
		uint8_t i;
		uint8_t myCS = 0;					//   COMMON PART FOR EVERY COMMAND
 80015a8:	230d      	movs	r3, #13
 80015aa:	18fb      	adds	r3, r7, r3
 80015ac:	2200      	movs	r2, #0
 80015ae:	701a      	strb	r2, [r3, #0]
		uint8_t myLength;
		uint16_t ind = 0;
 80015b0:	230a      	movs	r3, #10
 80015b2:	18fb      	adds	r3, r7, r3
 80015b4:	2200      	movs	r2, #0
 80015b6:	801a      	strh	r2, [r3, #0]
			ans[0] = cmd[0]|0x80;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2280      	movs	r2, #128	; 0x80
 80015be:	4252      	negs	r2, r2
 80015c0:	4313      	orrs	r3, r2
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	4bcc      	ldr	r3, [pc, #816]	; (80018f8 <answer2CPU+0x360>)
 80015c8:	801a      	strh	r2, [r3, #0]
//==================================================================================================
			if ((cmd[0] >= 0x10)&&(cmd[0] < 0x16)) { //answer is keyboard + stuff information                  0003
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b0f      	cmp	r3, #15
 80015d0:	d800      	bhi.n	80015d4 <answer2CPU+0x3c>
 80015d2:	e160      	b.n	8001896 <answer2CPU+0x2fe>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b15      	cmp	r3, #21
 80015da:	d900      	bls.n	80015de <answer2CPU+0x46>
 80015dc:	e15b      	b.n	8001896 <answer2CPU+0x2fe>
				if ((GPIOA->IDR & (1 << 0)) == 0) {
 80015de:	23a0      	movs	r3, #160	; 0xa0
 80015e0:	05db      	lsls	r3, r3, #23
 80015e2:	691b      	ldr	r3, [r3, #16]
 80015e4:	2201      	movs	r2, #1
 80015e6:	4013      	ands	r3, r2
 80015e8:	d106      	bne.n	80015f8 <answer2CPU+0x60>
					keyboard &= 0b11111110;
 80015ea:	220f      	movs	r2, #15
 80015ec:	18bb      	adds	r3, r7, r2
 80015ee:	18ba      	adds	r2, r7, r2
 80015f0:	7812      	ldrb	r2, [r2, #0]
 80015f2:	2101      	movs	r1, #1
 80015f4:	438a      	bics	r2, r1
 80015f6:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 1)) == 0) {
 80015f8:	23a0      	movs	r3, #160	; 0xa0
 80015fa:	05db      	lsls	r3, r3, #23
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	2202      	movs	r2, #2
 8001600:	4013      	ands	r3, r2
 8001602:	d106      	bne.n	8001612 <answer2CPU+0x7a>
					keyboard &= 0b11111101;
 8001604:	220f      	movs	r2, #15
 8001606:	18bb      	adds	r3, r7, r2
 8001608:	18ba      	adds	r2, r7, r2
 800160a:	7812      	ldrb	r2, [r2, #0]
 800160c:	2102      	movs	r1, #2
 800160e:	438a      	bics	r2, r1
 8001610:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 4)) == 0) {
 8001612:	23a0      	movs	r3, #160	; 0xa0
 8001614:	05db      	lsls	r3, r3, #23
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	2210      	movs	r2, #16
 800161a:	4013      	ands	r3, r2
 800161c:	d106      	bne.n	800162c <answer2CPU+0x94>
					keyboard &= 0b11111011;
 800161e:	220f      	movs	r2, #15
 8001620:	18bb      	adds	r3, r7, r2
 8001622:	18ba      	adds	r2, r7, r2
 8001624:	7812      	ldrb	r2, [r2, #0]
 8001626:	2104      	movs	r1, #4
 8001628:	438a      	bics	r2, r1
 800162a:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 13)) == 0) {
 800162c:	23a0      	movs	r3, #160	; 0xa0
 800162e:	05db      	lsls	r3, r3, #23
 8001630:	691a      	ldr	r2, [r3, #16]
 8001632:	2380      	movs	r3, #128	; 0x80
 8001634:	019b      	lsls	r3, r3, #6
 8001636:	4013      	ands	r3, r2
 8001638:	d106      	bne.n	8001648 <answer2CPU+0xb0>
					keyboard &= 0b11110111;
 800163a:	220f      	movs	r2, #15
 800163c:	18bb      	adds	r3, r7, r2
 800163e:	18ba      	adds	r2, r7, r2
 8001640:	7812      	ldrb	r2, [r2, #0]
 8001642:	2108      	movs	r1, #8
 8001644:	438a      	bics	r2, r1
 8001646:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 14)) == 0) {
 8001648:	23a0      	movs	r3, #160	; 0xa0
 800164a:	05db      	lsls	r3, r3, #23
 800164c:	691a      	ldr	r2, [r3, #16]
 800164e:	2380      	movs	r3, #128	; 0x80
 8001650:	01db      	lsls	r3, r3, #7
 8001652:	4013      	ands	r3, r2
 8001654:	d106      	bne.n	8001664 <answer2CPU+0xcc>
					keyboard &= 0b11101111;
 8001656:	220f      	movs	r2, #15
 8001658:	18bb      	adds	r3, r7, r2
 800165a:	18ba      	adds	r2, r7, r2
 800165c:	7812      	ldrb	r2, [r2, #0]
 800165e:	2110      	movs	r1, #16
 8001660:	438a      	bics	r2, r1
 8001662:	701a      	strb	r2, [r3, #0]
				}

				keyboard = ~keyboard;
 8001664:	210f      	movs	r1, #15
 8001666:	187b      	adds	r3, r7, r1
 8001668:	187a      	adds	r2, r7, r1
 800166a:	7812      	ldrb	r2, [r2, #0]
 800166c:	43d2      	mvns	r2, r2
 800166e:	701a      	strb	r2, [r3, #0]
//				keyboard&=bf;
				myLength = 0x04;
 8001670:	2009      	movs	r0, #9
 8001672:	183b      	adds	r3, r7, r0
 8001674:	2204      	movs	r2, #4
 8001676:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001678:	183b      	adds	r3, r7, r0
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	b29b      	uxth	r3, r3
 800167e:	3b02      	subs	r3, #2
 8001680:	b29a      	uxth	r2, r3
 8001682:	4b9d      	ldr	r3, [pc, #628]	; (80018f8 <answer2CPU+0x360>)
 8001684:	805a      	strh	r2, [r3, #2]
				ans[2] = keyboard;				//			MANAGEMENT COMMANDS
 8001686:	187b      	adds	r3, r7, r1
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	b29a      	uxth	r2, r3
 800168c:	4b9a      	ldr	r3, [pc, #616]	; (80018f8 <answer2CPU+0x360>)
 800168e:	809a      	strh	r2, [r3, #4]

				for (i = 0; i < myLength-1; i++) {
 8001690:	230e      	movs	r3, #14
 8001692:	18fb      	adds	r3, r7, r3
 8001694:	2200      	movs	r2, #0
 8001696:	701a      	strb	r2, [r3, #0]
 8001698:	e011      	b.n	80016be <answer2CPU+0x126>
					myCS = myCS + ans[i];
 800169a:	200e      	movs	r0, #14
 800169c:	183b      	adds	r3, r7, r0
 800169e:	781a      	ldrb	r2, [r3, #0]
 80016a0:	4b95      	ldr	r3, [pc, #596]	; (80018f8 <answer2CPU+0x360>)
 80016a2:	0052      	lsls	r2, r2, #1
 80016a4:	5ad3      	ldrh	r3, [r2, r3]
 80016a6:	b2d9      	uxtb	r1, r3
 80016a8:	220d      	movs	r2, #13
 80016aa:	18bb      	adds	r3, r7, r2
 80016ac:	18ba      	adds	r2, r7, r2
 80016ae:	7812      	ldrb	r2, [r2, #0]
 80016b0:	188a      	adds	r2, r1, r2
 80016b2:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 80016b4:	183b      	adds	r3, r7, r0
 80016b6:	781a      	ldrb	r2, [r3, #0]
 80016b8:	183b      	adds	r3, r7, r0
 80016ba:	3201      	adds	r2, #1
 80016bc:	701a      	strb	r2, [r3, #0]
 80016be:	230e      	movs	r3, #14
 80016c0:	18fb      	adds	r3, r7, r3
 80016c2:	781a      	ldrb	r2, [r3, #0]
 80016c4:	2309      	movs	r3, #9
 80016c6:	18fb      	adds	r3, r7, r3
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	429a      	cmp	r2, r3
 80016ce:	dbe4      	blt.n	800169a <answer2CPU+0x102>
				}
				myCS = 0 - myCS;
 80016d0:	210d      	movs	r1, #13
 80016d2:	187b      	adds	r3, r7, r1
 80016d4:	187a      	adds	r2, r7, r1
 80016d6:	7812      	ldrb	r2, [r2, #0]
 80016d8:	4252      	negs	r2, r2
 80016da:	701a      	strb	r2, [r3, #0]
				ans[3] = myCS;
 80016dc:	187b      	adds	r3, r7, r1
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	4b85      	ldr	r3, [pc, #532]	; (80018f8 <answer2CPU+0x360>)
 80016e4:	80da      	strh	r2, [r3, #6]
				i=0;
 80016e6:	230e      	movs	r3, #14
 80016e8:	18fb      	adds	r3, r7, r3
 80016ea:	2200      	movs	r2, #0
 80016ec:	701a      	strb	r2, [r3, #0]
//======================================================================================================================================
				while(!(USART2->ISR & USART_ISR_TXE)){};
 80016ee:	46c0      	nop			; (mov r8, r8)
 80016f0:	4b82      	ldr	r3, [pc, #520]	; (80018fc <answer2CPU+0x364>)
 80016f2:	69db      	ldr	r3, [r3, #28]
 80016f4:	2280      	movs	r2, #128	; 0x80
 80016f6:	4013      	ands	r3, r2
 80016f8:	d0fa      	beq.n	80016f0 <answer2CPU+0x158>
				USART2->TDR = ans[0]|0x0100;
 80016fa:	4b7f      	ldr	r3, [pc, #508]	; (80018f8 <answer2CPU+0x360>)
 80016fc:	881b      	ldrh	r3, [r3, #0]
 80016fe:	2280      	movs	r2, #128	; 0x80
 8001700:	0052      	lsls	r2, r2, #1
 8001702:	4313      	orrs	r3, r2
 8001704:	b29a      	uxth	r2, r3
 8001706:	4b7d      	ldr	r3, [pc, #500]	; (80018fc <answer2CPU+0x364>)
 8001708:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 800170a:	230e      	movs	r3, #14
 800170c:	18fb      	adds	r3, r7, r3
 800170e:	2201      	movs	r2, #1
 8001710:	701a      	strb	r2, [r3, #0]
 8001712:	e013      	b.n	800173c <answer2CPU+0x1a4>
				  {												//answer2cpu was given
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001714:	46c0      	nop			; (mov r8, r8)
 8001716:	4b79      	ldr	r3, [pc, #484]	; (80018fc <answer2CPU+0x364>)
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	2280      	movs	r2, #128	; 0x80
 800171c:	4013      	ands	r3, r2
 800171e:	d0fa      	beq.n	8001716 <answer2CPU+0x17e>
				    USART2->TDR = (uint8_t)ans[i];
 8001720:	210e      	movs	r1, #14
 8001722:	187b      	adds	r3, r7, r1
 8001724:	781a      	ldrb	r2, [r3, #0]
 8001726:	4b74      	ldr	r3, [pc, #464]	; (80018f8 <answer2CPU+0x360>)
 8001728:	0052      	lsls	r2, r2, #1
 800172a:	5ad3      	ldrh	r3, [r2, r3]
 800172c:	b2da      	uxtb	r2, r3
 800172e:	4b73      	ldr	r3, [pc, #460]	; (80018fc <answer2CPU+0x364>)
 8001730:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 8001732:	187b      	adds	r3, r7, r1
 8001734:	781a      	ldrb	r2, [r3, #0]
 8001736:	187b      	adds	r3, r7, r1
 8001738:	3201      	adds	r2, #1
 800173a:	701a      	strb	r2, [r3, #0]
 800173c:	230e      	movs	r3, #14
 800173e:	18fa      	adds	r2, r7, r3
 8001740:	2309      	movs	r3, #9
 8001742:	18fb      	adds	r3, r7, r3
 8001744:	7812      	ldrb	r2, [r2, #0]
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	429a      	cmp	r2, r3
 800174a:	d3e3      	bcc.n	8001714 <answer2CPU+0x17c>
				  }
//=======================================================================================================================================
				if (cmd[0] == 0x11) {             //Show full screen background;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b11      	cmp	r3, #17
 8001752:	d10c      	bne.n	800176e <answer2CPU+0x1d6>
					picNum = cmd[2];
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	789a      	ldrb	r2, [r3, #2]
 8001758:	4b69      	ldr	r3, [pc, #420]	; (8001900 <answer2CPU+0x368>)
 800175a:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x11;
 800175c:	4b69      	ldr	r3, [pc, #420]	; (8001904 <answer2CPU+0x36c>)
 800175e:	2211      	movs	r2, #17
 8001760:	701a      	strb	r2, [r3, #0]
					cmd[0]=0xFF;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	22ff      	movs	r2, #255	; 0xff
 8001766:	701a      	strb	r2, [r3, #0]
					bf4me=0x00; //reset BF flag for me
 8001768:	4b67      	ldr	r3, [pc, #412]	; (8001908 <answer2CPU+0x370>)
 800176a:	2200      	movs	r2, #0
 800176c:	701a      	strb	r2, [r3, #0]
				}
//=======================================================================================================================================
				if (cmd[0] == 0x12) {				//show small image
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b12      	cmp	r3, #18
 8001774:	d118      	bne.n	80017a8 <answer2CPU+0x210>
					imX = cmd[2];
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	3302      	adds	r3, #2
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	001a      	movs	r2, r3
 800177e:	4b63      	ldr	r3, [pc, #396]	; (800190c <answer2CPU+0x374>)
 8001780:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	3303      	adds	r3, #3
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	001a      	movs	r2, r3
 800178a:	4b61      	ldr	r3, [pc, #388]	; (8001910 <answer2CPU+0x378>)
 800178c:	601a      	str	r2, [r3, #0]
					picNum=cmd[4];
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	791a      	ldrb	r2, [r3, #4]
 8001792:	4b5b      	ldr	r3, [pc, #364]	; (8001900 <answer2CPU+0x368>)
 8001794:	701a      	strb	r2, [r3, #0]
//					lookInfoPrintImage(dataASCII[i], ASCII_X, ASCII_Y);
					cmd2Execute=0x12;
 8001796:	4b5b      	ldr	r3, [pc, #364]	; (8001904 <answer2CPU+0x36c>)
 8001798:	2212      	movs	r2, #18
 800179a:	701a      	strb	r2, [r3, #0]
					cmd[0]=0xFF;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	22ff      	movs	r2, #255	; 0xff
 80017a0:	701a      	strb	r2, [r3, #0]
					bf4me=0x00; //reset BF flag for me
 80017a2:	4b59      	ldr	r3, [pc, #356]	; (8001908 <answer2CPU+0x370>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x13) {			//show ASCII code(s)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b13      	cmp	r3, #19
 80017ae:	d137      	bne.n	8001820 <answer2CPU+0x288>
					imX = cmd[2];
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3302      	adds	r3, #2
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	001a      	movs	r2, r3
 80017b8:	4b54      	ldr	r3, [pc, #336]	; (800190c <answer2CPU+0x374>)
 80017ba:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3303      	adds	r3, #3
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	001a      	movs	r2, r3
 80017c4:	4b52      	ldr	r3, [pc, #328]	; (8001910 <answer2CPU+0x378>)
 80017c6:	601a      	str	r2, [r3, #0]
					strLen = cmd[1] -0x03;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3301      	adds	r3, #1
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	3b03      	subs	r3, #3
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	4b50      	ldr	r3, [pc, #320]	; (8001914 <answer2CPU+0x37c>)
 80017d4:	701a      	strb	r2, [r3, #0]
					for (i = 0; i <strLen; i++) {
 80017d6:	230e      	movs	r3, #14
 80017d8:	18fb      	adds	r3, r7, r3
 80017da:	2200      	movs	r2, #0
 80017dc:	701a      	strb	r2, [r3, #0]
 80017de:	e00f      	b.n	8001800 <answer2CPU+0x268>
					dataASCII[i] = cmd[i+4];
 80017e0:	200e      	movs	r0, #14
 80017e2:	183b      	adds	r3, r7, r0
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	3304      	adds	r3, #4
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	18d2      	adds	r2, r2, r3
 80017ec:	183b      	adds	r3, r7, r0
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	7811      	ldrb	r1, [r2, #0]
 80017f2:	4a49      	ldr	r2, [pc, #292]	; (8001918 <answer2CPU+0x380>)
 80017f4:	54d1      	strb	r1, [r2, r3]
					for (i = 0; i <strLen; i++) {
 80017f6:	183b      	adds	r3, r7, r0
 80017f8:	781a      	ldrb	r2, [r3, #0]
 80017fa:	183b      	adds	r3, r7, r0
 80017fc:	3201      	adds	r2, #1
 80017fe:	701a      	strb	r2, [r3, #0]
 8001800:	4b44      	ldr	r3, [pc, #272]	; (8001914 <answer2CPU+0x37c>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	220e      	movs	r2, #14
 8001806:	18ba      	adds	r2, r7, r2
 8001808:	7812      	ldrb	r2, [r2, #0]
 800180a:	429a      	cmp	r2, r3
 800180c:	d3e8      	bcc.n	80017e0 <answer2CPU+0x248>
				}
					cmd2Execute=0x13;
 800180e:	4b3d      	ldr	r3, [pc, #244]	; (8001904 <answer2CPU+0x36c>)
 8001810:	2213      	movs	r2, #19
 8001812:	701a      	strb	r2, [r3, #0]
					cmd[0]=0xFF;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	22ff      	movs	r2, #255	; 0xff
 8001818:	701a      	strb	r2, [r3, #0]
					bf4me=0x00; //reset BF flag for me
 800181a:	4b3b      	ldr	r3, [pc, #236]	; (8001908 <answer2CPU+0x370>)
 800181c:	2200      	movs	r2, #0
 800181e:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x14) {			//издать звук
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b14      	cmp	r3, #20
 8001826:	d10c      	bne.n	8001842 <answer2CPU+0x2aa>
					numSound = cmd[3];
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	78da      	ldrb	r2, [r3, #3]
 800182c:	4b3b      	ldr	r3, [pc, #236]	; (800191c <answer2CPU+0x384>)
 800182e:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x14;
 8001830:	4b34      	ldr	r3, [pc, #208]	; (8001904 <answer2CPU+0x36c>)
 8001832:	2214      	movs	r2, #20
 8001834:	701a      	strb	r2, [r3, #0]
					cmd[0]=0xFF;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	22ff      	movs	r2, #255	; 0xff
 800183a:	701a      	strb	r2, [r3, #0]
					bf4me=0x00; //reset BF flag for me
 800183c:	4b32      	ldr	r3, [pc, #200]	; (8001908 <answer2CPU+0x370>)
 800183e:	2200      	movs	r2, #0
 8001840:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x15) {
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b15      	cmp	r3, #21
 8001848:	d110      	bne.n	800186c <answer2CPU+0x2d4>
					volume = cmd[3];
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	78da      	ldrb	r2, [r3, #3]
 800184e:	4b34      	ldr	r3, [pc, #208]	; (8001920 <answer2CPU+0x388>)
 8001850:	701a      	strb	r2, [r3, #0]
					contrast = cmd[4];
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	791a      	ldrb	r2, [r3, #4]
 8001856:	4b33      	ldr	r3, [pc, #204]	; (8001924 <answer2CPU+0x38c>)
 8001858:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x15;
 800185a:	4b2a      	ldr	r3, [pc, #168]	; (8001904 <answer2CPU+0x36c>)
 800185c:	2215      	movs	r2, #21
 800185e:	701a      	strb	r2, [r3, #0]
					cmd[0]=0xFF;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	22ff      	movs	r2, #255	; 0xff
 8001864:	701a      	strb	r2, [r3, #0]
					bf4me=0x00; //reset BF flag for me
 8001866:	4b28      	ldr	r3, [pc, #160]	; (8001908 <answer2CPU+0x370>)
 8001868:	2200      	movs	r2, #0
 800186a:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x16) {
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b16      	cmp	r3, #22
 8001872:	d110      	bne.n	8001896 <answer2CPU+0x2fe>
					volume = cmd[3];
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	78da      	ldrb	r2, [r3, #3]
 8001878:	4b29      	ldr	r3, [pc, #164]	; (8001920 <answer2CPU+0x388>)
 800187a:	701a      	strb	r2, [r3, #0]
					contrast = cmd[4];
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	791a      	ldrb	r2, [r3, #4]
 8001880:	4b28      	ldr	r3, [pc, #160]	; (8001924 <answer2CPU+0x38c>)
 8001882:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x16;
 8001884:	4b1f      	ldr	r3, [pc, #124]	; (8001904 <answer2CPU+0x36c>)
 8001886:	2216      	movs	r2, #22
 8001888:	701a      	strb	r2, [r3, #0]
					cmd[0]=0xFF;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	22ff      	movs	r2, #255	; 0xff
 800188e:	701a      	strb	r2, [r3, #0]
					bf4me=0x00; //reset BF flag for me
 8001890:	4b1d      	ldr	r3, [pc, #116]	; (8001908 <answer2CPU+0x370>)
 8001892:	2200      	movs	r2, #0
 8001894:	701a      	strb	r2, [r3, #0]
				}
//				weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, Image);
//				USART2->ICR|=USART_ICR_ORECF;
			}
//==========================================================================================================================
			if (cmd[0] == 0x00) { //request of pcb type
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d000      	beq.n	80018a0 <answer2CPU+0x308>
 800189e:	e09c      	b.n	80019da <answer2CPU+0x442>
				myLength = 0x14; //20 bytes length answer
 80018a0:	2109      	movs	r1, #9
 80018a2:	187b      	adds	r3, r7, r1
 80018a4:	2214      	movs	r2, #20
 80018a6:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 80018a8:	187b      	adds	r3, r7, r1
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	3b02      	subs	r3, #2
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <answer2CPU+0x360>)
 80018b4:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 80018b6:	230e      	movs	r3, #14
 80018b8:	18fb      	adds	r3, r7, r3
 80018ba:	2200      	movs	r2, #0
 80018bc:	701a      	strb	r2, [r3, #0]
 80018be:	e010      	b.n	80018e2 <answer2CPU+0x34a>
					ans[i + 2] = PCB_type[i];
 80018c0:	200e      	movs	r0, #14
 80018c2:	183b      	adds	r3, r7, r0
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	4a18      	ldr	r2, [pc, #96]	; (8001928 <answer2CPU+0x390>)
 80018c8:	5cd1      	ldrb	r1, [r2, r3]
 80018ca:	183b      	adds	r3, r7, r0
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	1c9a      	adds	r2, r3, #2
 80018d0:	b289      	uxth	r1, r1
 80018d2:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <answer2CPU+0x360>)
 80018d4:	0052      	lsls	r2, r2, #1
 80018d6:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 80018d8:	183b      	adds	r3, r7, r0
 80018da:	781a      	ldrb	r2, [r3, #0]
 80018dc:	183b      	adds	r3, r7, r0
 80018de:	3201      	adds	r2, #1
 80018e0:	701a      	strb	r2, [r3, #0]
 80018e2:	230e      	movs	r3, #14
 80018e4:	18fb      	adds	r3, r7, r3
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b10      	cmp	r3, #16
 80018ea:	d9e9      	bls.n	80018c0 <answer2CPU+0x328>
				}
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 80018ec:	230e      	movs	r3, #14
 80018ee:	18fb      	adds	r3, r7, r3
 80018f0:	2200      	movs	r2, #0
 80018f2:	701a      	strb	r2, [r3, #0]
 80018f4:	e02c      	b.n	8001950 <answer2CPU+0x3b8>
 80018f6:	46c0      	nop			; (mov r8, r8)
 80018f8:	200053b8 	.word	0x200053b8
 80018fc:	40004400 	.word	0x40004400
 8001900:	20005375 	.word	0x20005375
 8001904:	20005376 	.word	0x20005376
 8001908:	200053cc 	.word	0x200053cc
 800190c:	2000527c 	.word	0x2000527c
 8001910:	200052b4 	.word	0x200052b4
 8001914:	200053b5 	.word	0x200053b5
 8001918:	20005194 	.word	0x20005194
 800191c:	20005434 	.word	0x20005434
 8001920:	2000527a 	.word	0x2000527a
 8001924:	20005318 	.word	0x20005318
 8001928:	20003100 	.word	0x20003100
					myCS = myCS + ans[i];
 800192c:	200e      	movs	r0, #14
 800192e:	183b      	adds	r3, r7, r0
 8001930:	781a      	ldrb	r2, [r3, #0]
 8001932:	4bc1      	ldr	r3, [pc, #772]	; (8001c38 <answer2CPU+0x6a0>)
 8001934:	0052      	lsls	r2, r2, #1
 8001936:	5ad3      	ldrh	r3, [r2, r3]
 8001938:	b2d9      	uxtb	r1, r3
 800193a:	220d      	movs	r2, #13
 800193c:	18bb      	adds	r3, r7, r2
 800193e:	18ba      	adds	r2, r7, r2
 8001940:	7812      	ldrb	r2, [r2, #0]
 8001942:	188a      	adds	r2, r1, r2
 8001944:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8001946:	183b      	adds	r3, r7, r0
 8001948:	781a      	ldrb	r2, [r3, #0]
 800194a:	183b      	adds	r3, r7, r0
 800194c:	3201      	adds	r2, #1
 800194e:	701a      	strb	r2, [r3, #0]
 8001950:	230e      	movs	r3, #14
 8001952:	18fb      	adds	r3, r7, r3
 8001954:	781a      	ldrb	r2, [r3, #0]
 8001956:	2309      	movs	r3, #9
 8001958:	18fb      	adds	r3, r7, r3
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	3b01      	subs	r3, #1
 800195e:	429a      	cmp	r2, r3
 8001960:	dbe4      	blt.n	800192c <answer2CPU+0x394>
				}
				myCS = 0 - myCS;
 8001962:	210d      	movs	r1, #13
 8001964:	187b      	adds	r3, r7, r1
 8001966:	187a      	adds	r2, r7, r1
 8001968:	7812      	ldrb	r2, [r2, #0]
 800196a:	4252      	negs	r2, r2
 800196c:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 800196e:	2309      	movs	r3, #9
 8001970:	18fb      	adds	r3, r7, r3
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	1e5a      	subs	r2, r3, #1
 8001976:	187b      	adds	r3, r7, r1
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	b299      	uxth	r1, r3
 800197c:	4bae      	ldr	r3, [pc, #696]	; (8001c38 <answer2CPU+0x6a0>)
 800197e:	0052      	lsls	r2, r2, #1
 8001980:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001982:	46c0      	nop			; (mov r8, r8)
 8001984:	4bad      	ldr	r3, [pc, #692]	; (8001c3c <answer2CPU+0x6a4>)
 8001986:	69db      	ldr	r3, [r3, #28]
 8001988:	2280      	movs	r2, #128	; 0x80
 800198a:	4013      	ands	r3, r2
 800198c:	d0fa      	beq.n	8001984 <answer2CPU+0x3ec>
				USART2->TDR = ans[0]|0x0100;
 800198e:	4baa      	ldr	r3, [pc, #680]	; (8001c38 <answer2CPU+0x6a0>)
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	2280      	movs	r2, #128	; 0x80
 8001994:	0052      	lsls	r2, r2, #1
 8001996:	4313      	orrs	r3, r2
 8001998:	b29a      	uxth	r2, r3
 800199a:	4ba8      	ldr	r3, [pc, #672]	; (8001c3c <answer2CPU+0x6a4>)
 800199c:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 800199e:	e014      	b.n	80019ca <answer2CPU+0x432>
				  {
				    i++;
 80019a0:	210e      	movs	r1, #14
 80019a2:	187b      	adds	r3, r7, r1
 80019a4:	781a      	ldrb	r2, [r3, #0]
 80019a6:	187b      	adds	r3, r7, r1
 80019a8:	3201      	adds	r2, #1
 80019aa:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 80019ac:	46c0      	nop			; (mov r8, r8)
 80019ae:	4ba3      	ldr	r3, [pc, #652]	; (8001c3c <answer2CPU+0x6a4>)
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	2280      	movs	r2, #128	; 0x80
 80019b4:	4013      	ands	r3, r2
 80019b6:	d0fa      	beq.n	80019ae <answer2CPU+0x416>
				    USART2->TDR = (uint8_t)ans[i];
 80019b8:	230e      	movs	r3, #14
 80019ba:	18fb      	adds	r3, r7, r3
 80019bc:	781a      	ldrb	r2, [r3, #0]
 80019be:	4b9e      	ldr	r3, [pc, #632]	; (8001c38 <answer2CPU+0x6a0>)
 80019c0:	0052      	lsls	r2, r2, #1
 80019c2:	5ad3      	ldrh	r3, [r2, r3]
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	4b9d      	ldr	r3, [pc, #628]	; (8001c3c <answer2CPU+0x6a4>)
 80019c8:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 80019ca:	230e      	movs	r3, #14
 80019cc:	18fb      	adds	r3, r7, r3
 80019ce:	781a      	ldrb	r2, [r3, #0]
 80019d0:	4b99      	ldr	r3, [pc, #612]	; (8001c38 <answer2CPU+0x6a0>)
 80019d2:	0052      	lsls	r2, r2, #1
 80019d4:	5ad3      	ldrh	r3, [r2, r3]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1e2      	bne.n	80019a0 <answer2CPU+0x408>
				  }
//				 cmd2Execute=0x00;
			}
//============================================================================================================================
			if (cmd[0] == 0x01) { //request of pcb revision
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d000      	beq.n	80019e4 <answer2CPU+0x44c>
 80019e2:	e081      	b.n	8001ae8 <answer2CPU+0x550>
				myLength = 0x0B; //19 bytes length answer
 80019e4:	2109      	movs	r1, #9
 80019e6:	187b      	adds	r3, r7, r1
 80019e8:	220b      	movs	r2, #11
 80019ea:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 80019ec:	187b      	adds	r3, r7, r1
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	3b02      	subs	r3, #2
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	4b90      	ldr	r3, [pc, #576]	; (8001c38 <answer2CPU+0x6a0>)
 80019f8:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 80019fa:	230e      	movs	r3, #14
 80019fc:	18fb      	adds	r3, r7, r3
 80019fe:	2200      	movs	r2, #0
 8001a00:	701a      	strb	r2, [r3, #0]
 8001a02:	e010      	b.n	8001a26 <answer2CPU+0x48e>
					ans[i + 2] = PCB_rev[i];
 8001a04:	200e      	movs	r0, #14
 8001a06:	183b      	adds	r3, r7, r0
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	4a8d      	ldr	r2, [pc, #564]	; (8001c40 <answer2CPU+0x6a8>)
 8001a0c:	5cd1      	ldrb	r1, [r2, r3]
 8001a0e:	183b      	adds	r3, r7, r0
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	1c9a      	adds	r2, r3, #2
 8001a14:	b289      	uxth	r1, r1
 8001a16:	4b88      	ldr	r3, [pc, #544]	; (8001c38 <answer2CPU+0x6a0>)
 8001a18:	0052      	lsls	r2, r2, #1
 8001a1a:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001a1c:	183b      	adds	r3, r7, r0
 8001a1e:	781a      	ldrb	r2, [r3, #0]
 8001a20:	183b      	adds	r3, r7, r0
 8001a22:	3201      	adds	r2, #1
 8001a24:	701a      	strb	r2, [r3, #0]
 8001a26:	230e      	movs	r3, #14
 8001a28:	18fb      	adds	r3, r7, r3
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b10      	cmp	r3, #16
 8001a2e:	d9e9      	bls.n	8001a04 <answer2CPU+0x46c>
				}
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001a30:	230e      	movs	r3, #14
 8001a32:	18fb      	adds	r3, r7, r3
 8001a34:	2200      	movs	r2, #0
 8001a36:	701a      	strb	r2, [r3, #0]
 8001a38:	e011      	b.n	8001a5e <answer2CPU+0x4c6>
					myCS = myCS + ans[i];
 8001a3a:	200e      	movs	r0, #14
 8001a3c:	183b      	adds	r3, r7, r0
 8001a3e:	781a      	ldrb	r2, [r3, #0]
 8001a40:	4b7d      	ldr	r3, [pc, #500]	; (8001c38 <answer2CPU+0x6a0>)
 8001a42:	0052      	lsls	r2, r2, #1
 8001a44:	5ad3      	ldrh	r3, [r2, r3]
 8001a46:	b2d9      	uxtb	r1, r3
 8001a48:	220d      	movs	r2, #13
 8001a4a:	18bb      	adds	r3, r7, r2
 8001a4c:	18ba      	adds	r2, r7, r2
 8001a4e:	7812      	ldrb	r2, [r2, #0]
 8001a50:	188a      	adds	r2, r1, r2
 8001a52:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001a54:	183b      	adds	r3, r7, r0
 8001a56:	781a      	ldrb	r2, [r3, #0]
 8001a58:	183b      	adds	r3, r7, r0
 8001a5a:	3201      	adds	r2, #1
 8001a5c:	701a      	strb	r2, [r3, #0]
 8001a5e:	230e      	movs	r3, #14
 8001a60:	18fb      	adds	r3, r7, r3
 8001a62:	781a      	ldrb	r2, [r3, #0]
 8001a64:	2309      	movs	r3, #9
 8001a66:	18fb      	adds	r3, r7, r3
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	dbe4      	blt.n	8001a3a <answer2CPU+0x4a2>
				}
				myCS = 0 - myCS;
 8001a70:	210d      	movs	r1, #13
 8001a72:	187b      	adds	r3, r7, r1
 8001a74:	187a      	adds	r2, r7, r1
 8001a76:	7812      	ldrb	r2, [r2, #0]
 8001a78:	4252      	negs	r2, r2
 8001a7a:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001a7c:	2309      	movs	r3, #9
 8001a7e:	18fb      	adds	r3, r7, r3
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	1e5a      	subs	r2, r3, #1
 8001a84:	187b      	adds	r3, r7, r1
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	b299      	uxth	r1, r3
 8001a8a:	4b6b      	ldr	r3, [pc, #428]	; (8001c38 <answer2CPU+0x6a0>)
 8001a8c:	0052      	lsls	r2, r2, #1
 8001a8e:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001a90:	46c0      	nop			; (mov r8, r8)
 8001a92:	4b6a      	ldr	r3, [pc, #424]	; (8001c3c <answer2CPU+0x6a4>)
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	2280      	movs	r2, #128	; 0x80
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d0fa      	beq.n	8001a92 <answer2CPU+0x4fa>
				USART2->TDR = ans[0]|0x0100;
 8001a9c:	4b66      	ldr	r3, [pc, #408]	; (8001c38 <answer2CPU+0x6a0>)
 8001a9e:	881b      	ldrh	r3, [r3, #0]
 8001aa0:	2280      	movs	r2, #128	; 0x80
 8001aa2:	0052      	lsls	r2, r2, #1
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	4b64      	ldr	r3, [pc, #400]	; (8001c3c <answer2CPU+0x6a4>)
 8001aaa:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001aac:	e014      	b.n	8001ad8 <answer2CPU+0x540>
					  {
					    i++;
 8001aae:	210e      	movs	r1, #14
 8001ab0:	187b      	adds	r3, r7, r1
 8001ab2:	781a      	ldrb	r2, [r3, #0]
 8001ab4:	187b      	adds	r3, r7, r1
 8001ab6:	3201      	adds	r2, #1
 8001ab8:	701a      	strb	r2, [r3, #0]
					    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001aba:	46c0      	nop			; (mov r8, r8)
 8001abc:	4b5f      	ldr	r3, [pc, #380]	; (8001c3c <answer2CPU+0x6a4>)
 8001abe:	69db      	ldr	r3, [r3, #28]
 8001ac0:	2280      	movs	r2, #128	; 0x80
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	d0fa      	beq.n	8001abc <answer2CPU+0x524>
					    USART2->TDR = (uint8_t)ans[i];
 8001ac6:	230e      	movs	r3, #14
 8001ac8:	18fb      	adds	r3, r7, r3
 8001aca:	781a      	ldrb	r2, [r3, #0]
 8001acc:	4b5a      	ldr	r3, [pc, #360]	; (8001c38 <answer2CPU+0x6a0>)
 8001ace:	0052      	lsls	r2, r2, #1
 8001ad0:	5ad3      	ldrh	r3, [r2, r3]
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	4b59      	ldr	r3, [pc, #356]	; (8001c3c <answer2CPU+0x6a4>)
 8001ad6:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001ad8:	230e      	movs	r3, #14
 8001ada:	18fb      	adds	r3, r7, r3
 8001adc:	781a      	ldrb	r2, [r3, #0]
 8001ade:	4b56      	ldr	r3, [pc, #344]	; (8001c38 <answer2CPU+0x6a0>)
 8001ae0:	0052      	lsls	r2, r2, #1
 8001ae2:	5ad3      	ldrh	r3, [r2, r3]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1e2      	bne.n	8001aae <answer2CPU+0x516>
					  }
//				 cmd2Execute=0x01;
			}
//================================================================================================================================
			if (cmd[0] == 0x02) { //request of emitter SN
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d000      	beq.n	8001af2 <answer2CPU+0x55a>
 8001af0:	e081      	b.n	8001bf6 <answer2CPU+0x65e>
				myLength = 0x13; //19 bytes length answer
 8001af2:	2109      	movs	r1, #9
 8001af4:	187b      	adds	r3, r7, r1
 8001af6:	2213      	movs	r2, #19
 8001af8:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001afa:	187b      	adds	r3, r7, r1
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	3b02      	subs	r3, #2
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	4b4c      	ldr	r3, [pc, #304]	; (8001c38 <answer2CPU+0x6a0>)
 8001b06:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001b08:	230e      	movs	r3, #14
 8001b0a:	18fb      	adds	r3, r7, r3
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	701a      	strb	r2, [r3, #0]
 8001b10:	e010      	b.n	8001b34 <answer2CPU+0x59c>
					ans[i + 2] = EmitterSN[i];
 8001b12:	200e      	movs	r0, #14
 8001b14:	183b      	adds	r3, r7, r0
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	4a4a      	ldr	r2, [pc, #296]	; (8001c44 <answer2CPU+0x6ac>)
 8001b1a:	5cd1      	ldrb	r1, [r2, r3]
 8001b1c:	183b      	adds	r3, r7, r0
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	1c9a      	adds	r2, r3, #2
 8001b22:	b289      	uxth	r1, r1
 8001b24:	4b44      	ldr	r3, [pc, #272]	; (8001c38 <answer2CPU+0x6a0>)
 8001b26:	0052      	lsls	r2, r2, #1
 8001b28:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001b2a:	183b      	adds	r3, r7, r0
 8001b2c:	781a      	ldrb	r2, [r3, #0]
 8001b2e:	183b      	adds	r3, r7, r0
 8001b30:	3201      	adds	r2, #1
 8001b32:	701a      	strb	r2, [r3, #0]
 8001b34:	230e      	movs	r3, #14
 8001b36:	18fb      	adds	r3, r7, r3
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	2b10      	cmp	r3, #16
 8001b3c:	d9e9      	bls.n	8001b12 <answer2CPU+0x57a>
				}
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001b3e:	230e      	movs	r3, #14
 8001b40:	18fb      	adds	r3, r7, r3
 8001b42:	2200      	movs	r2, #0
 8001b44:	701a      	strb	r2, [r3, #0]
 8001b46:	e011      	b.n	8001b6c <answer2CPU+0x5d4>
					myCS = myCS + ans[i];
 8001b48:	200e      	movs	r0, #14
 8001b4a:	183b      	adds	r3, r7, r0
 8001b4c:	781a      	ldrb	r2, [r3, #0]
 8001b4e:	4b3a      	ldr	r3, [pc, #232]	; (8001c38 <answer2CPU+0x6a0>)
 8001b50:	0052      	lsls	r2, r2, #1
 8001b52:	5ad3      	ldrh	r3, [r2, r3]
 8001b54:	b2d9      	uxtb	r1, r3
 8001b56:	220d      	movs	r2, #13
 8001b58:	18bb      	adds	r3, r7, r2
 8001b5a:	18ba      	adds	r2, r7, r2
 8001b5c:	7812      	ldrb	r2, [r2, #0]
 8001b5e:	188a      	adds	r2, r1, r2
 8001b60:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001b62:	183b      	adds	r3, r7, r0
 8001b64:	781a      	ldrb	r2, [r3, #0]
 8001b66:	183b      	adds	r3, r7, r0
 8001b68:	3201      	adds	r2, #1
 8001b6a:	701a      	strb	r2, [r3, #0]
 8001b6c:	230e      	movs	r3, #14
 8001b6e:	18fb      	adds	r3, r7, r3
 8001b70:	781a      	ldrb	r2, [r3, #0]
 8001b72:	2309      	movs	r3, #9
 8001b74:	18fb      	adds	r3, r7, r3
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	dbe4      	blt.n	8001b48 <answer2CPU+0x5b0>
				}
				myCS = 0 - myCS;
 8001b7e:	210d      	movs	r1, #13
 8001b80:	187b      	adds	r3, r7, r1
 8001b82:	187a      	adds	r2, r7, r1
 8001b84:	7812      	ldrb	r2, [r2, #0]
 8001b86:	4252      	negs	r2, r2
 8001b88:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001b8a:	2309      	movs	r3, #9
 8001b8c:	18fb      	adds	r3, r7, r3
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	1e5a      	subs	r2, r3, #1
 8001b92:	187b      	adds	r3, r7, r1
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	b299      	uxth	r1, r3
 8001b98:	4b27      	ldr	r3, [pc, #156]	; (8001c38 <answer2CPU+0x6a0>)
 8001b9a:	0052      	lsls	r2, r2, #1
 8001b9c:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001b9e:	46c0      	nop			; (mov r8, r8)
 8001ba0:	4b26      	ldr	r3, [pc, #152]	; (8001c3c <answer2CPU+0x6a4>)
 8001ba2:	69db      	ldr	r3, [r3, #28]
 8001ba4:	2280      	movs	r2, #128	; 0x80
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	d0fa      	beq.n	8001ba0 <answer2CPU+0x608>
				USART2->TDR = ans[0]|0x0100;
 8001baa:	4b23      	ldr	r3, [pc, #140]	; (8001c38 <answer2CPU+0x6a0>)
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	2280      	movs	r2, #128	; 0x80
 8001bb0:	0052      	lsls	r2, r2, #1
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	4b21      	ldr	r3, [pc, #132]	; (8001c3c <answer2CPU+0x6a4>)
 8001bb8:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001bba:	e014      	b.n	8001be6 <answer2CPU+0x64e>
				  {
				    i++;
 8001bbc:	210e      	movs	r1, #14
 8001bbe:	187b      	adds	r3, r7, r1
 8001bc0:	781a      	ldrb	r2, [r3, #0]
 8001bc2:	187b      	adds	r3, r7, r1
 8001bc4:	3201      	adds	r2, #1
 8001bc6:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001bc8:	46c0      	nop			; (mov r8, r8)
 8001bca:	4b1c      	ldr	r3, [pc, #112]	; (8001c3c <answer2CPU+0x6a4>)
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	2280      	movs	r2, #128	; 0x80
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d0fa      	beq.n	8001bca <answer2CPU+0x632>
				    	USART2->TDR = (uint8_t)ans[i];
 8001bd4:	230e      	movs	r3, #14
 8001bd6:	18fb      	adds	r3, r7, r3
 8001bd8:	781a      	ldrb	r2, [r3, #0]
 8001bda:	4b17      	ldr	r3, [pc, #92]	; (8001c38 <answer2CPU+0x6a0>)
 8001bdc:	0052      	lsls	r2, r2, #1
 8001bde:	5ad3      	ldrh	r3, [r2, r3]
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	4b16      	ldr	r3, [pc, #88]	; (8001c3c <answer2CPU+0x6a4>)
 8001be4:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001be6:	230e      	movs	r3, #14
 8001be8:	18fb      	adds	r3, r7, r3
 8001bea:	781a      	ldrb	r2, [r3, #0]
 8001bec:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <answer2CPU+0x6a0>)
 8001bee:	0052      	lsls	r2, r2, #1
 8001bf0:	5ad3      	ldrh	r3, [r2, r3]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1e2      	bne.n	8001bbc <answer2CPU+0x624>
				  }
//				cmd2Execute=0x02;
			}
//===============================================================================================================================
			if (cmd[0] == 0x03) { //request of current consumption
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b03      	cmp	r3, #3
 8001bfc:	d000      	beq.n	8001c00 <answer2CPU+0x668>
 8001bfe:	e07c      	b.n	8001cfa <answer2CPU+0x762>
				myLength = 0x04; //4 bytes length answer
 8001c00:	2109      	movs	r1, #9
 8001c02:	187b      	adds	r3, r7, r1
 8001c04:	2204      	movs	r2, #4
 8001c06:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001c08:	187b      	adds	r3, r7, r1
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	3b02      	subs	r3, #2
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <answer2CPU+0x6a0>)
 8001c14:	805a      	strh	r2, [r3, #2]
				ans[2] = currentConsumption;
 8001c16:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <answer2CPU+0x6b0>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <answer2CPU+0x6a0>)
 8001c1e:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8001c20:	230d      	movs	r3, #13
 8001c22:	18fb      	adds	r3, r7, r3
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	4b03      	ldr	r3, [pc, #12]	; (8001c38 <answer2CPU+0x6a0>)
 8001c2a:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8001c2c:	230e      	movs	r3, #14
 8001c2e:	18fb      	adds	r3, r7, r3
 8001c30:	2200      	movs	r2, #0
 8001c32:	701a      	strb	r2, [r3, #0]
 8001c34:	e01c      	b.n	8001c70 <answer2CPU+0x6d8>
 8001c36:	46c0      	nop			; (mov r8, r8)
 8001c38:	200053b8 	.word	0x200053b8
 8001c3c:	40004400 	.word	0x40004400
 8001c40:	20003114 	.word	0x20003114
 8001c44:	20003120 	.word	0x20003120
 8001c48:	2000311c 	.word	0x2000311c
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8001c4c:	200e      	movs	r0, #14
 8001c4e:	183b      	adds	r3, r7, r0
 8001c50:	781a      	ldrb	r2, [r3, #0]
 8001c52:	4b6e      	ldr	r3, [pc, #440]	; (8001e0c <answer2CPU+0x874>)
 8001c54:	0052      	lsls	r2, r2, #1
 8001c56:	5ad3      	ldrh	r3, [r2, r3]
 8001c58:	b2d9      	uxtb	r1, r3
 8001c5a:	220d      	movs	r2, #13
 8001c5c:	18bb      	adds	r3, r7, r2
 8001c5e:	18ba      	adds	r2, r7, r2
 8001c60:	7812      	ldrb	r2, [r2, #0]
 8001c62:	188a      	adds	r2, r1, r2
 8001c64:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001c66:	183b      	adds	r3, r7, r0
 8001c68:	781a      	ldrb	r2, [r3, #0]
 8001c6a:	183b      	adds	r3, r7, r0
 8001c6c:	3201      	adds	r2, #1
 8001c6e:	701a      	strb	r2, [r3, #0]
 8001c70:	230e      	movs	r3, #14
 8001c72:	18fb      	adds	r3, r7, r3
 8001c74:	781a      	ldrb	r2, [r3, #0]
 8001c76:	2309      	movs	r3, #9
 8001c78:	18fb      	adds	r3, r7, r3
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	dbe4      	blt.n	8001c4c <answer2CPU+0x6b4>
				}
				myCS = 0 - myCS;
 8001c82:	210d      	movs	r1, #13
 8001c84:	187b      	adds	r3, r7, r1
 8001c86:	187a      	adds	r2, r7, r1
 8001c88:	7812      	ldrb	r2, [r2, #0]
 8001c8a:	4252      	negs	r2, r2
 8001c8c:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001c8e:	2309      	movs	r3, #9
 8001c90:	18fb      	adds	r3, r7, r3
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	1e5a      	subs	r2, r3, #1
 8001c96:	187b      	adds	r3, r7, r1
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	b299      	uxth	r1, r3
 8001c9c:	4b5b      	ldr	r3, [pc, #364]	; (8001e0c <answer2CPU+0x874>)
 8001c9e:	0052      	lsls	r2, r2, #1
 8001ca0:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001ca2:	46c0      	nop			; (mov r8, r8)
 8001ca4:	4b5a      	ldr	r3, [pc, #360]	; (8001e10 <answer2CPU+0x878>)
 8001ca6:	69db      	ldr	r3, [r3, #28]
 8001ca8:	2280      	movs	r2, #128	; 0x80
 8001caa:	4013      	ands	r3, r2
 8001cac:	d0fa      	beq.n	8001ca4 <answer2CPU+0x70c>
					USART2->TDR = ans[0]|0x0100;
 8001cae:	4b57      	ldr	r3, [pc, #348]	; (8001e0c <answer2CPU+0x874>)
 8001cb0:	881b      	ldrh	r3, [r3, #0]
 8001cb2:	2280      	movs	r2, #128	; 0x80
 8001cb4:	0052      	lsls	r2, r2, #1
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	4b55      	ldr	r3, [pc, #340]	; (8001e10 <answer2CPU+0x878>)
 8001cbc:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8001cbe:	e014      	b.n	8001cea <answer2CPU+0x752>
						{
						  i++;
 8001cc0:	210e      	movs	r1, #14
 8001cc2:	187b      	adds	r3, r7, r1
 8001cc4:	781a      	ldrb	r2, [r3, #0]
 8001cc6:	187b      	adds	r3, r7, r1
 8001cc8:	3201      	adds	r2, #1
 8001cca:	701a      	strb	r2, [r3, #0]
						  while(!(USART2->ISR & USART_ISR_TXE)){};
 8001ccc:	46c0      	nop			; (mov r8, r8)
 8001cce:	4b50      	ldr	r3, [pc, #320]	; (8001e10 <answer2CPU+0x878>)
 8001cd0:	69db      	ldr	r3, [r3, #28]
 8001cd2:	2280      	movs	r2, #128	; 0x80
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d0fa      	beq.n	8001cce <answer2CPU+0x736>
						     USART2->TDR = (uint8_t)ans[i];
 8001cd8:	230e      	movs	r3, #14
 8001cda:	18fb      	adds	r3, r7, r3
 8001cdc:	781a      	ldrb	r2, [r3, #0]
 8001cde:	4b4b      	ldr	r3, [pc, #300]	; (8001e0c <answer2CPU+0x874>)
 8001ce0:	0052      	lsls	r2, r2, #1
 8001ce2:	5ad3      	ldrh	r3, [r2, r3]
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	4b4a      	ldr	r3, [pc, #296]	; (8001e10 <answer2CPU+0x878>)
 8001ce8:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8001cea:	230e      	movs	r3, #14
 8001cec:	18fb      	adds	r3, r7, r3
 8001cee:	781a      	ldrb	r2, [r3, #0]
 8001cf0:	4b46      	ldr	r3, [pc, #280]	; (8001e0c <answer2CPU+0x874>)
 8001cf2:	0052      	lsls	r2, r2, #1
 8001cf4:	5ad3      	ldrh	r3, [r2, r3]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1e2      	bne.n	8001cc0 <answer2CPU+0x728>
						}
//					cmd2Execute=0x03;
			}
			if (cmd[0] == 0x04) { //request of current consumption
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	d000      	beq.n	8001d04 <answer2CPU+0x76c>
 8001d02:	e077      	b.n	8001df4 <answer2CPU+0x85c>
				myLength = 0x04; //4 bytes length answer
 8001d04:	2109      	movs	r1, #9
 8001d06:	187b      	adds	r3, r7, r1
 8001d08:	2204      	movs	r2, #4
 8001d0a:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001d0c:	187b      	adds	r3, r7, r1
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	3b02      	subs	r3, #2
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	4b3d      	ldr	r3, [pc, #244]	; (8001e0c <answer2CPU+0x874>)
 8001d18:	805a      	strh	r2, [r3, #2]
				uartSpeed = cmd[2];
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	3302      	adds	r3, #2
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	001a      	movs	r2, r3
 8001d22:	4b3c      	ldr	r3, [pc, #240]	; (8001e14 <answer2CPU+0x87c>)
 8001d24:	601a      	str	r2, [r3, #0]
				ans[2] = currentUARTspeed;
 8001d26:	4b3c      	ldr	r3, [pc, #240]	; (8001e18 <answer2CPU+0x880>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	4b37      	ldr	r3, [pc, #220]	; (8001e0c <answer2CPU+0x874>)
 8001d2e:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8001d30:	230d      	movs	r3, #13
 8001d32:	18fb      	adds	r3, r7, r3
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	4b34      	ldr	r3, [pc, #208]	; (8001e0c <answer2CPU+0x874>)
 8001d3a:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8001d3c:	230e      	movs	r3, #14
 8001d3e:	18fb      	adds	r3, r7, r3
 8001d40:	2200      	movs	r2, #0
 8001d42:	701a      	strb	r2, [r3, #0]
 8001d44:	e011      	b.n	8001d6a <answer2CPU+0x7d2>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8001d46:	200e      	movs	r0, #14
 8001d48:	183b      	adds	r3, r7, r0
 8001d4a:	781a      	ldrb	r2, [r3, #0]
 8001d4c:	4b2f      	ldr	r3, [pc, #188]	; (8001e0c <answer2CPU+0x874>)
 8001d4e:	0052      	lsls	r2, r2, #1
 8001d50:	5ad3      	ldrh	r3, [r2, r3]
 8001d52:	b2d9      	uxtb	r1, r3
 8001d54:	220d      	movs	r2, #13
 8001d56:	18bb      	adds	r3, r7, r2
 8001d58:	18ba      	adds	r2, r7, r2
 8001d5a:	7812      	ldrb	r2, [r2, #0]
 8001d5c:	188a      	adds	r2, r1, r2
 8001d5e:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001d60:	183b      	adds	r3, r7, r0
 8001d62:	781a      	ldrb	r2, [r3, #0]
 8001d64:	183b      	adds	r3, r7, r0
 8001d66:	3201      	adds	r2, #1
 8001d68:	701a      	strb	r2, [r3, #0]
 8001d6a:	230e      	movs	r3, #14
 8001d6c:	18fb      	adds	r3, r7, r3
 8001d6e:	781a      	ldrb	r2, [r3, #0]
 8001d70:	2309      	movs	r3, #9
 8001d72:	18fb      	adds	r3, r7, r3
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	3b01      	subs	r3, #1
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	dbe4      	blt.n	8001d46 <answer2CPU+0x7ae>
				}
				myCS = 0 - myCS;
 8001d7c:	210d      	movs	r1, #13
 8001d7e:	187b      	adds	r3, r7, r1
 8001d80:	187a      	adds	r2, r7, r1
 8001d82:	7812      	ldrb	r2, [r2, #0]
 8001d84:	4252      	negs	r2, r2
 8001d86:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001d88:	2309      	movs	r3, #9
 8001d8a:	18fb      	adds	r3, r7, r3
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	1e5a      	subs	r2, r3, #1
 8001d90:	187b      	adds	r3, r7, r1
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	b299      	uxth	r1, r3
 8001d96:	4b1d      	ldr	r3, [pc, #116]	; (8001e0c <answer2CPU+0x874>)
 8001d98:	0052      	lsls	r2, r2, #1
 8001d9a:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001d9c:	46c0      	nop			; (mov r8, r8)
 8001d9e:	4b1c      	ldr	r3, [pc, #112]	; (8001e10 <answer2CPU+0x878>)
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	2280      	movs	r2, #128	; 0x80
 8001da4:	4013      	ands	r3, r2
 8001da6:	d0fa      	beq.n	8001d9e <answer2CPU+0x806>
				USART2->TDR = ans[0]|0x0100;
 8001da8:	4b18      	ldr	r3, [pc, #96]	; (8001e0c <answer2CPU+0x874>)
 8001daa:	881b      	ldrh	r3, [r3, #0]
 8001dac:	2280      	movs	r2, #128	; 0x80
 8001dae:	0052      	lsls	r2, r2, #1
 8001db0:	4313      	orrs	r3, r2
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	4b16      	ldr	r3, [pc, #88]	; (8001e10 <answer2CPU+0x878>)
 8001db6:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001db8:	e014      	b.n	8001de4 <answer2CPU+0x84c>
				{
				  i++;
 8001dba:	210e      	movs	r1, #14
 8001dbc:	187b      	adds	r3, r7, r1
 8001dbe:	781a      	ldrb	r2, [r3, #0]
 8001dc0:	187b      	adds	r3, r7, r1
 8001dc2:	3201      	adds	r2, #1
 8001dc4:	701a      	strb	r2, [r3, #0]
				  while(!(USART2->ISR & USART_ISR_TXE)){};
 8001dc6:	46c0      	nop			; (mov r8, r8)
 8001dc8:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <answer2CPU+0x878>)
 8001dca:	69db      	ldr	r3, [r3, #28]
 8001dcc:	2280      	movs	r2, #128	; 0x80
 8001dce:	4013      	ands	r3, r2
 8001dd0:	d0fa      	beq.n	8001dc8 <answer2CPU+0x830>
				  USART2->TDR = (uint8_t)ans[i];
 8001dd2:	230e      	movs	r3, #14
 8001dd4:	18fb      	adds	r3, r7, r3
 8001dd6:	781a      	ldrb	r2, [r3, #0]
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <answer2CPU+0x874>)
 8001dda:	0052      	lsls	r2, r2, #1
 8001ddc:	5ad3      	ldrh	r3, [r2, r3]
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <answer2CPU+0x878>)
 8001de2:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001de4:	230e      	movs	r3, #14
 8001de6:	18fb      	adds	r3, r7, r3
 8001de8:	781a      	ldrb	r2, [r3, #0]
 8001dea:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <answer2CPU+0x874>)
 8001dec:	0052      	lsls	r2, r2, #1
 8001dee:	5ad3      	ldrh	r3, [r2, r3]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1e2      	bne.n	8001dba <answer2CPU+0x822>
				}
//				cmd2Execute=0x04;
			}
//			weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, coala);
			USART2->ICR|=USART_ICR_ORECF;
 8001df4:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <answer2CPU+0x878>)
 8001df6:	6a1a      	ldr	r2, [r3, #32]
 8001df8:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <answer2CPU+0x878>)
 8001dfa:	2108      	movs	r1, #8
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	621a      	str	r2, [r3, #32]
}
 8001e00:	46c0      	nop			; (mov r8, r8)
 8001e02:	0018      	movs	r0, r3
 8001e04:	46bd      	mov	sp, r7
 8001e06:	b004      	add	sp, #16
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	46c0      	nop			; (mov r8, r8)
 8001e0c:	200053b8 	.word	0x200053b8
 8001e10:	40004400 	.word	0x40004400
 8001e14:	2000531c 	.word	0x2000531c
 8001e18:	2000527b 	.word	0x2000527b

08001e1c <MEM_Reset>:
//==================================================================================================================================
	void MEM_Reset(void) {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
		uint8_t memCMD;
		HAL_Delay(1); //200 ms by Andrew
 8001e22:	2001      	movs	r0, #1
 8001e24:	f001 f834 	bl	8002e90 <HAL_Delay>
		GPIOC->ODR &= ~(1 << 15); //reset cs
 8001e28:	4b28      	ldr	r3, [pc, #160]	; (8001ecc <MEM_Reset+0xb0>)
 8001e2a:	695a      	ldr	r2, [r3, #20]
 8001e2c:	4b27      	ldr	r3, [pc, #156]	; (8001ecc <MEM_Reset+0xb0>)
 8001e2e:	4928      	ldr	r1, [pc, #160]	; (8001ed0 <MEM_Reset+0xb4>)
 8001e30:	400a      	ands	r2, r1
 8001e32:	615a      	str	r2, [r3, #20]
		memCMD = 0x66;
 8001e34:	1dfb      	adds	r3, r7, #7
 8001e36:	2266      	movs	r2, #102	; 0x66
 8001e38:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8001e3a:	1df9      	adds	r1, r7, #7
 8001e3c:	4825      	ldr	r0, [pc, #148]	; (8001ed4 <MEM_Reset+0xb8>)
 8001e3e:	2305      	movs	r3, #5
 8001e40:	2201      	movs	r2, #1
 8001e42:	f004 faad 	bl	80063a0 <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8001e46:	4b21      	ldr	r3, [pc, #132]	; (8001ecc <MEM_Reset+0xb0>)
 8001e48:	695a      	ldr	r2, [r3, #20]
 8001e4a:	4b20      	ldr	r3, [pc, #128]	; (8001ecc <MEM_Reset+0xb0>)
 8001e4c:	2180      	movs	r1, #128	; 0x80
 8001e4e:	0209      	lsls	r1, r1, #8
 8001e50:	430a      	orrs	r2, r1
 8001e52:	615a      	str	r2, [r3, #20]
		asm("NOP");
 8001e54:	46c0      	nop			; (mov r8, r8)
		__NOP();
 8001e56:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8001e58:	46c0      	nop			; (mov r8, r8)
		__NOP();			//May be less NOPs?
 8001e5a:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8001e5c:	46c0      	nop			; (mov r8, r8)
		__NOP();
 8001e5e:	46c0      	nop			; (mov r8, r8)
		GPIOC->ODR &= ~(1 << 15);			//reset cs
 8001e60:	4b1a      	ldr	r3, [pc, #104]	; (8001ecc <MEM_Reset+0xb0>)
 8001e62:	695a      	ldr	r2, [r3, #20]
 8001e64:	4b19      	ldr	r3, [pc, #100]	; (8001ecc <MEM_Reset+0xb0>)
 8001e66:	491a      	ldr	r1, [pc, #104]	; (8001ed0 <MEM_Reset+0xb4>)
 8001e68:	400a      	ands	r2, r1
 8001e6a:	615a      	str	r2, [r3, #20]
		memCMD = 0x99;
 8001e6c:	1dfb      	adds	r3, r7, #7
 8001e6e:	2299      	movs	r2, #153	; 0x99
 8001e70:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset memory
 8001e72:	1df9      	adds	r1, r7, #7
 8001e74:	4817      	ldr	r0, [pc, #92]	; (8001ed4 <MEM_Reset+0xb8>)
 8001e76:	2305      	movs	r3, #5
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f004 fa91 	bl	80063a0 <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8001e7e:	4b13      	ldr	r3, [pc, #76]	; (8001ecc <MEM_Reset+0xb0>)
 8001e80:	695a      	ldr	r2, [r3, #20]
 8001e82:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <MEM_Reset+0xb0>)
 8001e84:	2180      	movs	r1, #128	; 0x80
 8001e86:	0209      	lsls	r1, r1, #8
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8001e8c:	2001      	movs	r0, #1
 8001e8e:	f000 ffff 	bl	8002e90 <HAL_Delay>
//=============================================================================================================
		memCMD = 0xB7;												//	Activation 0f 4-bytes address mode
 8001e92:	1dfb      	adds	r3, r7, #7
 8001e94:	22b7      	movs	r2, #183	; 0xb7
 8001e96:	701a      	strb	r2, [r3, #0]
		GPIOC->ODR &= ~(1 << 15); //reset cs
 8001e98:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <MEM_Reset+0xb0>)
 8001e9a:	695a      	ldr	r2, [r3, #20]
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <MEM_Reset+0xb0>)
 8001e9e:	490c      	ldr	r1, [pc, #48]	; (8001ed0 <MEM_Reset+0xb4>)
 8001ea0:	400a      	ands	r2, r1
 8001ea2:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8001ea4:	1df9      	adds	r1, r7, #7
 8001ea6:	480b      	ldr	r0, [pc, #44]	; (8001ed4 <MEM_Reset+0xb8>)
 8001ea8:	2305      	movs	r3, #5
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f004 fa78 	bl	80063a0 <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <MEM_Reset+0xb0>)
 8001eb2:	695a      	ldr	r2, [r3, #20]
 8001eb4:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <MEM_Reset+0xb0>)
 8001eb6:	2180      	movs	r1, #128	; 0x80
 8001eb8:	0209      	lsls	r1, r1, #8
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8001ebe:	2001      	movs	r0, #1
 8001ec0:	f000 ffe6 	bl	8002e90 <HAL_Delay>
	}
 8001ec4:	46c0      	nop			; (mov r8, r8)
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	b002      	add	sp, #8
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	50000800 	.word	0x50000800
 8001ed0:	ffff7fff 	.word	0xffff7fff
 8001ed4:	200051a4 	.word	0x200051a4

08001ed8 <showFullScreen>:
//==================================================================================================================================
	uint8_t showFullScreen(uint8_t picNum) {
 8001ed8:	b5b0      	push	{r4, r5, r7, lr}
 8001eda:	4c46      	ldr	r4, [pc, #280]	; (8001ff4 <showFullScreen+0x11c>)
 8001edc:	44a5      	add	sp, r4
 8001ede:	af02      	add	r7, sp, #8
 8001ee0:	0002      	movs	r2, r0
 8001ee2:	4b45      	ldr	r3, [pc, #276]	; (8001ff8 <showFullScreen+0x120>)
 8001ee4:	4945      	ldr	r1, [pc, #276]	; (8001ffc <showFullScreen+0x124>)
 8001ee6:	468c      	mov	ip, r1
 8001ee8:	44bc      	add	ip, r7
 8001eea:	4463      	add	r3, ip
 8001eec:	701a      	strb	r2, [r3, #0]
		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H;
		uint8_t MEM_Buffer[8192], firstImAddrArray[4],addrArray[4];
		uint16_t i, len;
		uint32_t addrInfo,addr,firstImAddr;
		memCMD = 0x13; //read command with 4-byte address
 8001eee:	4844      	ldr	r0, [pc, #272]	; (8002000 <showFullScreen+0x128>)
 8001ef0:	183b      	adds	r3, r7, r0
 8001ef2:	2213      	movs	r2, #19
 8001ef4:	701a      	strb	r2, [r3, #0]
//		picNum=0x02;
		addr=(picNum)*0x2000;
 8001ef6:	4b40      	ldr	r3, [pc, #256]	; (8001ff8 <showFullScreen+0x120>)
 8001ef8:	4a40      	ldr	r2, [pc, #256]	; (8001ffc <showFullScreen+0x124>)
 8001efa:	4694      	mov	ip, r2
 8001efc:	44bc      	add	ip, r7
 8001efe:	4463      	add	r3, ip
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	035b      	lsls	r3, r3, #13
 8001f04:	493f      	ldr	r1, [pc, #252]	; (8002004 <showFullScreen+0x12c>)
 8001f06:	187a      	adds	r2, r7, r1
 8001f08:	6013      	str	r3, [r2, #0]
//		addr=0x00003800;
		addrArray[0]=addr & 0xFF;
 8001f0a:	187b      	adds	r3, r7, r1
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	4b3d      	ldr	r3, [pc, #244]	; (8002008 <showFullScreen+0x130>)
 8001f12:	4c3a      	ldr	r4, [pc, #232]	; (8001ffc <showFullScreen+0x124>)
 8001f14:	46a4      	mov	ip, r4
 8001f16:	44bc      	add	ip, r7
 8001f18:	4463      	add	r3, ip
 8001f1a:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 8001f1c:	187b      	adds	r3, r7, r1
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	0a1b      	lsrs	r3, r3, #8
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	4b38      	ldr	r3, [pc, #224]	; (8002008 <showFullScreen+0x130>)
 8001f26:	4c35      	ldr	r4, [pc, #212]	; (8001ffc <showFullScreen+0x124>)
 8001f28:	46a4      	mov	ip, r4
 8001f2a:	44bc      	add	ip, r7
 8001f2c:	4463      	add	r3, ip
 8001f2e:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 8001f30:	187b      	adds	r3, r7, r1
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	0c1b      	lsrs	r3, r3, #16
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	4b33      	ldr	r3, [pc, #204]	; (8002008 <showFullScreen+0x130>)
 8001f3a:	4c30      	ldr	r4, [pc, #192]	; (8001ffc <showFullScreen+0x124>)
 8001f3c:	46a4      	mov	ip, r4
 8001f3e:	44bc      	add	ip, r7
 8001f40:	4463      	add	r3, ip
 8001f42:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 8001f44:	187b      	adds	r3, r7, r1
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	0e1b      	lsrs	r3, r3, #24
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	4b2e      	ldr	r3, [pc, #184]	; (8002008 <showFullScreen+0x130>)
 8001f4e:	492b      	ldr	r1, [pc, #172]	; (8001ffc <showFullScreen+0x124>)
 8001f50:	468c      	mov	ip, r1
 8001f52:	44bc      	add	ip, r7
 8001f54:	4463      	add	r3, ip
 8001f56:	70da      	strb	r2, [r3, #3]

		GPIOC->ODR &= ~(1 << 15); //reset cs
 8001f58:	4b2c      	ldr	r3, [pc, #176]	; (800200c <showFullScreen+0x134>)
 8001f5a:	695a      	ldr	r2, [r3, #20]
 8001f5c:	4b2b      	ldr	r3, [pc, #172]	; (800200c <showFullScreen+0x134>)
 8001f5e:	492c      	ldr	r1, [pc, #176]	; (8002010 <showFullScreen+0x138>)
 8001f60:	400a      	ands	r2, r1
 8001f62:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 8001f64:	1839      	adds	r1, r7, r0
 8001f66:	482b      	ldr	r0, [pc, #172]	; (8002014 <showFullScreen+0x13c>)
 8001f68:	2332      	movs	r3, #50	; 0x32
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f004 fa18 	bl	80063a0 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 8001f70:	2408      	movs	r4, #8
 8001f72:	193b      	adds	r3, r7, r4
 8001f74:	1cd9      	adds	r1, r3, #3
 8001f76:	4827      	ldr	r0, [pc, #156]	; (8002014 <showFullScreen+0x13c>)
 8001f78:	2332      	movs	r3, #50	; 0x32
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f004 fa10 	bl	80063a0 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 8001f80:	193b      	adds	r3, r7, r4
 8001f82:	1c99      	adds	r1, r3, #2
 8001f84:	4823      	ldr	r0, [pc, #140]	; (8002014 <showFullScreen+0x13c>)
 8001f86:	2332      	movs	r3, #50	; 0x32
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f004 fa09 	bl	80063a0 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 8001f8e:	193b      	adds	r3, r7, r4
 8001f90:	1c59      	adds	r1, r3, #1
 8001f92:	4820      	ldr	r0, [pc, #128]	; (8002014 <showFullScreen+0x13c>)
 8001f94:	2332      	movs	r3, #50	; 0x32
 8001f96:	2201      	movs	r2, #1
 8001f98:	f004 fa02 	bl	80063a0 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 8001f9c:	1939      	adds	r1, r7, r4
 8001f9e:	481d      	ldr	r0, [pc, #116]	; (8002014 <showFullScreen+0x13c>)
 8001fa0:	2332      	movs	r3, #50	; 0x32
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f004 f9fc 	bl	80063a0 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,8192, 5000);
 8001fa8:	4c1b      	ldr	r4, [pc, #108]	; (8002018 <showFullScreen+0x140>)
 8001faa:	2380      	movs	r3, #128	; 0x80
 8001fac:	019a      	lsls	r2, r3, #6
 8001fae:	2510      	movs	r5, #16
 8001fb0:	1979      	adds	r1, r7, r5
 8001fb2:	4818      	ldr	r0, [pc, #96]	; (8002014 <showFullScreen+0x13c>)
 8001fb4:	0023      	movs	r3, r4
 8001fb6:	f004 fb4b 	bl	8006650 <HAL_SPI_Receive>
		GPIOC->ODR |= 1 << 15; // set cs
 8001fba:	4b14      	ldr	r3, [pc, #80]	; (800200c <showFullScreen+0x134>)
 8001fbc:	695a      	ldr	r2, [r3, #20]
 8001fbe:	4b13      	ldr	r3, [pc, #76]	; (800200c <showFullScreen+0x134>)
 8001fc0:	2180      	movs	r1, #128	; 0x80
 8001fc2:	0209      	lsls	r1, r1, #8
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	615a      	str	r2, [r3, #20]
//    HAL_Delay(1);
		weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, MEM_Buffer); // Здесь ещё работает
 8001fc8:	197b      	adds	r3, r7, r5
 8001fca:	9301      	str	r3, [sp, #4]
 8001fcc:	23ff      	movs	r3, #255	; 0xff
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	237f      	movs	r3, #127	; 0x7f
 8001fd2:	227f      	movs	r2, #127	; 0x7f
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	f7ff f964 	bl	80012a4 <weoDrawRectangleFilled>
		GPIOC->ODR |= 1 << 6;	//set BF
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	; (800200c <showFullScreen+0x134>)
 8001fde:	695a      	ldr	r2, [r3, #20]
 8001fe0:	4b0a      	ldr	r3, [pc, #40]	; (800200c <showFullScreen+0x134>)
 8001fe2:	2140      	movs	r1, #64	; 0x40
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	615a      	str	r2, [r3, #20]

	}
 8001fe8:	46c0      	nop			; (mov r8, r8)
 8001fea:	0018      	movs	r0, r3
 8001fec:	46bd      	mov	sp, r7
 8001fee:	4b03      	ldr	r3, [pc, #12]	; (8001ffc <showFullScreen+0x124>)
 8001ff0:	449d      	add	sp, r3
 8001ff2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ff4:	ffffdfe0 	.word	0xffffdfe0
 8001ff8:	ffffdfef 	.word	0xffffdfef
 8001ffc:	00002018 	.word	0x00002018
 8002000:	00002013 	.word	0x00002013
 8002004:	00002014 	.word	0x00002014
 8002008:	ffffdff0 	.word	0xffffdff0
 800200c:	50000800 	.word	0x50000800
 8002010:	ffff7fff 	.word	0xffff7fff
 8002014:	200051a4 	.word	0x200051a4
 8002018:	00001388 	.word	0x00001388

0800201c <lookInfoPrintImage>:
	uint8_t lookInfoPrintImage(uint8_t picNum, uint8_t imX, uint8_t imY) {
 800201c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800201e:	4c95      	ldr	r4, [pc, #596]	; (8002274 <lookInfoPrintImage+0x258>)
 8002020:	44a5      	add	sp, r4
 8002022:	af02      	add	r7, sp, #8
 8002024:	0004      	movs	r4, r0
 8002026:	0008      	movs	r0, r1
 8002028:	0011      	movs	r1, r2
 800202a:	4b93      	ldr	r3, [pc, #588]	; (8002278 <lookInfoPrintImage+0x25c>)
 800202c:	4a93      	ldr	r2, [pc, #588]	; (800227c <lookInfoPrintImage+0x260>)
 800202e:	4694      	mov	ip, r2
 8002030:	44bc      	add	ip, r7
 8002032:	4463      	add	r3, ip
 8002034:	1c22      	adds	r2, r4, #0
 8002036:	701a      	strb	r2, [r3, #0]
 8002038:	4b91      	ldr	r3, [pc, #580]	; (8002280 <lookInfoPrintImage+0x264>)
 800203a:	4a90      	ldr	r2, [pc, #576]	; (800227c <lookInfoPrintImage+0x260>)
 800203c:	4694      	mov	ip, r2
 800203e:	44bc      	add	ip, r7
 8002040:	4463      	add	r3, ip
 8002042:	1c02      	adds	r2, r0, #0
 8002044:	701a      	strb	r2, [r3, #0]
 8002046:	4b8f      	ldr	r3, [pc, #572]	; (8002284 <lookInfoPrintImage+0x268>)
 8002048:	4a8c      	ldr	r2, [pc, #560]	; (800227c <lookInfoPrintImage+0x260>)
 800204a:	4694      	mov	ip, r2
 800204c:	44bc      	add	ip, r7
 800204e:	4463      	add	r3, ip
 8002050:	1c0a      	adds	r2, r1, #0
 8002052:	701a      	strb	r2, [r3, #0]

		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H;
		uint8_t MEM_Buffer[8192], imInfo[2],addrArray[4];
		uint16_t i, len;
		uint32_t addr;
		addr=0x00000000;
 8002054:	2300      	movs	r3, #0
 8002056:	498c      	ldr	r1, [pc, #560]	; (8002288 <lookInfoPrintImage+0x26c>)
 8002058:	187a      	adds	r2, r7, r1
 800205a:	6013      	str	r3, [r2, #0]
		memCMD = 0x13; //read command with 4-byte address
 800205c:	4d8b      	ldr	r5, [pc, #556]	; (800228c <lookInfoPrintImage+0x270>)
 800205e:	197b      	adds	r3, r7, r5
 8002060:	2213      	movs	r2, #19
 8002062:	701a      	strb	r2, [r3, #0]
		//look at info about image
//		picNum=0x20;
		addr=picNum*0x2000;// the right path is to multiply picNum * image repeat period!
 8002064:	4b84      	ldr	r3, [pc, #528]	; (8002278 <lookInfoPrintImage+0x25c>)
 8002066:	4a85      	ldr	r2, [pc, #532]	; (800227c <lookInfoPrintImage+0x260>)
 8002068:	4694      	mov	ip, r2
 800206a:	44bc      	add	ip, r7
 800206c:	4463      	add	r3, ip
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	035b      	lsls	r3, r3, #13
 8002072:	187a      	adds	r2, r7, r1
 8002074:	6013      	str	r3, [r2, #0]

		addrArray[0]=addr & 0xFF;
 8002076:	187b      	adds	r3, r7, r1
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	b2da      	uxtb	r2, r3
 800207c:	4b84      	ldr	r3, [pc, #528]	; (8002290 <lookInfoPrintImage+0x274>)
 800207e:	487f      	ldr	r0, [pc, #508]	; (800227c <lookInfoPrintImage+0x260>)
 8002080:	4684      	mov	ip, r0
 8002082:	44bc      	add	ip, r7
 8002084:	4463      	add	r3, ip
 8002086:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 8002088:	187b      	adds	r3, r7, r1
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	0a1b      	lsrs	r3, r3, #8
 800208e:	b2da      	uxtb	r2, r3
 8002090:	4b7f      	ldr	r3, [pc, #508]	; (8002290 <lookInfoPrintImage+0x274>)
 8002092:	487a      	ldr	r0, [pc, #488]	; (800227c <lookInfoPrintImage+0x260>)
 8002094:	4684      	mov	ip, r0
 8002096:	44bc      	add	ip, r7
 8002098:	4463      	add	r3, ip
 800209a:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 800209c:	187b      	adds	r3, r7, r1
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	0c1b      	lsrs	r3, r3, #16
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	4b7a      	ldr	r3, [pc, #488]	; (8002290 <lookInfoPrintImage+0x274>)
 80020a6:	4875      	ldr	r0, [pc, #468]	; (800227c <lookInfoPrintImage+0x260>)
 80020a8:	4684      	mov	ip, r0
 80020aa:	44bc      	add	ip, r7
 80020ac:	4463      	add	r3, ip
 80020ae:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 80020b0:	187b      	adds	r3, r7, r1
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	0e1b      	lsrs	r3, r3, #24
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	4b75      	ldr	r3, [pc, #468]	; (8002290 <lookInfoPrintImage+0x274>)
 80020ba:	4970      	ldr	r1, [pc, #448]	; (800227c <lookInfoPrintImage+0x260>)
 80020bc:	468c      	mov	ip, r1
 80020be:	44bc      	add	ip, r7
 80020c0:	4463      	add	r3, ip
 80020c2:	70da      	strb	r2, [r3, #3]

		GPIOC->ODR &= ~(1 << 15); //reset cs
 80020c4:	4b73      	ldr	r3, [pc, #460]	; (8002294 <lookInfoPrintImage+0x278>)
 80020c6:	695a      	ldr	r2, [r3, #20]
 80020c8:	4b72      	ldr	r3, [pc, #456]	; (8002294 <lookInfoPrintImage+0x278>)
 80020ca:	4973      	ldr	r1, [pc, #460]	; (8002298 <lookInfoPrintImage+0x27c>)
 80020cc:	400a      	ands	r2, r1
 80020ce:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 80020d0:	1979      	adds	r1, r7, r5
 80020d2:	4872      	ldr	r0, [pc, #456]	; (800229c <lookInfoPrintImage+0x280>)
 80020d4:	2332      	movs	r3, #50	; 0x32
 80020d6:	2201      	movs	r2, #1
 80020d8:	f004 f962 	bl	80063a0 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 80020dc:	240c      	movs	r4, #12
 80020de:	193b      	adds	r3, r7, r4
 80020e0:	1cd9      	adds	r1, r3, #3
 80020e2:	486e      	ldr	r0, [pc, #440]	; (800229c <lookInfoPrintImage+0x280>)
 80020e4:	2332      	movs	r3, #50	; 0x32
 80020e6:	2201      	movs	r2, #1
 80020e8:	f004 f95a 	bl	80063a0 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 80020ec:	193b      	adds	r3, r7, r4
 80020ee:	1c99      	adds	r1, r3, #2
 80020f0:	486a      	ldr	r0, [pc, #424]	; (800229c <lookInfoPrintImage+0x280>)
 80020f2:	2332      	movs	r3, #50	; 0x32
 80020f4:	2201      	movs	r2, #1
 80020f6:	f004 f953 	bl	80063a0 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 80020fa:	193b      	adds	r3, r7, r4
 80020fc:	1c59      	adds	r1, r3, #1
 80020fe:	4867      	ldr	r0, [pc, #412]	; (800229c <lookInfoPrintImage+0x280>)
 8002100:	2332      	movs	r3, #50	; 0x32
 8002102:	2201      	movs	r2, #1
 8002104:	f004 f94c 	bl	80063a0 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 8002108:	1939      	adds	r1, r7, r4
 800210a:	4864      	ldr	r0, [pc, #400]	; (800229c <lookInfoPrintImage+0x280>)
 800210c:	2332      	movs	r3, #50	; 0x32
 800210e:	2201      	movs	r2, #1
 8002110:	f004 f946 	bl	80063a0 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &imInfo,2, 5000);
 8002114:	4b62      	ldr	r3, [pc, #392]	; (80022a0 <lookInfoPrintImage+0x284>)
 8002116:	2210      	movs	r2, #16
 8002118:	18b9      	adds	r1, r7, r2
 800211a:	4860      	ldr	r0, [pc, #384]	; (800229c <lookInfoPrintImage+0x280>)
 800211c:	2202      	movs	r2, #2
 800211e:	f004 fa97 	bl	8006650 <HAL_SPI_Receive>
		GPIOC->ODR |= 1 << 15; // set cs
 8002122:	4b5c      	ldr	r3, [pc, #368]	; (8002294 <lookInfoPrintImage+0x278>)
 8002124:	695a      	ldr	r2, [r3, #20]
 8002126:	4b5b      	ldr	r3, [pc, #364]	; (8002294 <lookInfoPrintImage+0x278>)
 8002128:	2180      	movs	r1, #128	; 0x80
 800212a:	0209      	lsls	r1, r1, #8
 800212c:	430a      	orrs	r2, r1
 800212e:	615a      	str	r2, [r3, #20]
//
		width=imInfo[0];
 8002130:	4e5c      	ldr	r6, [pc, #368]	; (80022a4 <lookInfoPrintImage+0x288>)
 8002132:	19bb      	adds	r3, r7, r6
 8002134:	4a5c      	ldr	r2, [pc, #368]	; (80022a8 <lookInfoPrintImage+0x28c>)
 8002136:	4951      	ldr	r1, [pc, #324]	; (800227c <lookInfoPrintImage+0x260>)
 8002138:	468c      	mov	ip, r1
 800213a:	44bc      	add	ip, r7
 800213c:	4462      	add	r2, ip
 800213e:	7812      	ldrb	r2, [r2, #0]
 8002140:	701a      	strb	r2, [r3, #0]
//		width=0x10;
		height=imInfo[1];
 8002142:	495a      	ldr	r1, [pc, #360]	; (80022ac <lookInfoPrintImage+0x290>)
 8002144:	187b      	adds	r3, r7, r1
 8002146:	4a58      	ldr	r2, [pc, #352]	; (80022a8 <lookInfoPrintImage+0x28c>)
 8002148:	484c      	ldr	r0, [pc, #304]	; (800227c <lookInfoPrintImage+0x260>)
 800214a:	4684      	mov	ip, r0
 800214c:	44bc      	add	ip, r7
 800214e:	4462      	add	r2, ip
 8002150:	7852      	ldrb	r2, [r2, #1]
 8002152:	701a      	strb	r2, [r3, #0]
//		height=0x07;
		len=(width*height>>1)+0x20;
 8002154:	19bb      	adds	r3, r7, r6
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	187a      	adds	r2, r7, r1
 800215a:	7812      	ldrb	r2, [r2, #0]
 800215c:	4353      	muls	r3, r2
 800215e:	105b      	asrs	r3, r3, #1
 8002160:	b29a      	uxth	r2, r3
 8002162:	4b53      	ldr	r3, [pc, #332]	; (80022b0 <lookInfoPrintImage+0x294>)
 8002164:	18fb      	adds	r3, r7, r3
 8002166:	3220      	adds	r2, #32
 8002168:	801a      	strh	r2, [r3, #0]
		addrArray[0]+=0x02;
 800216a:	4b49      	ldr	r3, [pc, #292]	; (8002290 <lookInfoPrintImage+0x274>)
 800216c:	4a43      	ldr	r2, [pc, #268]	; (800227c <lookInfoPrintImage+0x260>)
 800216e:	4694      	mov	ip, r2
 8002170:	44bc      	add	ip, r7
 8002172:	4463      	add	r3, ip
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	3302      	adds	r3, #2
 8002178:	b2da      	uxtb	r2, r3
 800217a:	4b45      	ldr	r3, [pc, #276]	; (8002290 <lookInfoPrintImage+0x274>)
 800217c:	483f      	ldr	r0, [pc, #252]	; (800227c <lookInfoPrintImage+0x260>)
 800217e:	4684      	mov	ip, r0
 8002180:	44bc      	add	ip, r7
 8002182:	4463      	add	r3, ip
 8002184:	701a      	strb	r2, [r3, #0]
//len=0x38;
		USART2->ICR|=USART_ICR_ORECF;
 8002186:	4b4b      	ldr	r3, [pc, #300]	; (80022b4 <lookInfoPrintImage+0x298>)
 8002188:	6a1a      	ldr	r2, [r3, #32]
 800218a:	4b4a      	ldr	r3, [pc, #296]	; (80022b4 <lookInfoPrintImage+0x298>)
 800218c:	2108      	movs	r1, #8
 800218e:	430a      	orrs	r2, r1
 8002190:	621a      	str	r2, [r3, #32]
				memCMD = 0x13; //read command with 4-byte address
 8002192:	197b      	adds	r3, r7, r5
 8002194:	2213      	movs	r2, #19
 8002196:	701a      	strb	r2, [r3, #0]
//						addrArray[3]=0x00;
//						addrArray[2]=0x03;
//						addrArray[1]=0xC0;
//						addrArray[0]=0x02;

		GPIOC->ODR &= ~(1 << 15);	//reset cs
 8002198:	4b3e      	ldr	r3, [pc, #248]	; (8002294 <lookInfoPrintImage+0x278>)
 800219a:	695a      	ldr	r2, [r3, #20]
 800219c:	4b3d      	ldr	r3, [pc, #244]	; (8002294 <lookInfoPrintImage+0x278>)
 800219e:	493e      	ldr	r1, [pc, #248]	; (8002298 <lookInfoPrintImage+0x27c>)
 80021a0:	400a      	ands	r2, r1
 80021a2:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50);//read command with 4-byte address
 80021a4:	1979      	adds	r1, r7, r5
 80021a6:	483d      	ldr	r0, [pc, #244]	; (800229c <lookInfoPrintImage+0x280>)
 80021a8:	2332      	movs	r3, #50	; 0x32
 80021aa:	2201      	movs	r2, #1
 80021ac:	f004 f8f8 	bl	80063a0 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3],1, 50);	//send address
 80021b0:	193b      	adds	r3, r7, r4
 80021b2:	1cd9      	adds	r1, r3, #3
 80021b4:	4839      	ldr	r0, [pc, #228]	; (800229c <lookInfoPrintImage+0x280>)
 80021b6:	2332      	movs	r3, #50	; 0x32
 80021b8:	2201      	movs	r2, #1
 80021ba:	f004 f8f1 	bl	80063a0 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2],1, 50);	//send address
 80021be:	193b      	adds	r3, r7, r4
 80021c0:	1c99      	adds	r1, r3, #2
 80021c2:	4836      	ldr	r0, [pc, #216]	; (800229c <lookInfoPrintImage+0x280>)
 80021c4:	2332      	movs	r3, #50	; 0x32
 80021c6:	2201      	movs	r2, #1
 80021c8:	f004 f8ea 	bl	80063a0 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1],1, 50);	//send address
 80021cc:	193b      	adds	r3, r7, r4
 80021ce:	1c59      	adds	r1, r3, #1
 80021d0:	4832      	ldr	r0, [pc, #200]	; (800229c <lookInfoPrintImage+0x280>)
 80021d2:	2332      	movs	r3, #50	; 0x32
 80021d4:	2201      	movs	r2, #1
 80021d6:	f004 f8e3 	bl	80063a0 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0],1, 50);	//send address
 80021da:	1939      	adds	r1, r7, r4
 80021dc:	482f      	ldr	r0, [pc, #188]	; (800229c <lookInfoPrintImage+0x280>)
 80021de:	2332      	movs	r3, #50	; 0x32
 80021e0:	2201      	movs	r2, #1
 80021e2:	f004 f8dd 	bl	80063a0 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,len, 5000);// 7 information bits about the image
 80021e6:	4c2e      	ldr	r4, [pc, #184]	; (80022a0 <lookInfoPrintImage+0x284>)
 80021e8:	4b31      	ldr	r3, [pc, #196]	; (80022b0 <lookInfoPrintImage+0x294>)
 80021ea:	18fb      	adds	r3, r7, r3
 80021ec:	881a      	ldrh	r2, [r3, #0]
 80021ee:	2514      	movs	r5, #20
 80021f0:	1979      	adds	r1, r7, r5
 80021f2:	482a      	ldr	r0, [pc, #168]	; (800229c <lookInfoPrintImage+0x280>)
 80021f4:	0023      	movs	r3, r4
 80021f6:	f004 fa2b 	bl	8006650 <HAL_SPI_Receive>
		GPIOC->ODR |= 1 << 15;	// set cs
 80021fa:	4b26      	ldr	r3, [pc, #152]	; (8002294 <lookInfoPrintImage+0x278>)
 80021fc:	695a      	ldr	r2, [r3, #20]
 80021fe:	4b25      	ldr	r3, [pc, #148]	; (8002294 <lookInfoPrintImage+0x278>)
 8002200:	2180      	movs	r1, #128	; 0x80
 8002202:	0209      	lsls	r1, r1, #8
 8002204:	430a      	orrs	r2, r1
 8002206:	615a      	str	r2, [r3, #20]
		weoDrawRectangleFilled(imX, imY, (imX+width-0x01), (imY+height-0x01), 0xFF,MEM_Buffer);	// Здесь ещё работает 0xFF - затычка
 8002208:	4b1d      	ldr	r3, [pc, #116]	; (8002280 <lookInfoPrintImage+0x264>)
 800220a:	481c      	ldr	r0, [pc, #112]	; (800227c <lookInfoPrintImage+0x260>)
 800220c:	183a      	adds	r2, r7, r0
 800220e:	18d2      	adds	r2, r2, r3
 8002210:	19bb      	adds	r3, r7, r6
 8002212:	7812      	ldrb	r2, [r2, #0]
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	18d3      	adds	r3, r2, r3
 8002218:	b2db      	uxtb	r3, r3
 800221a:	3b01      	subs	r3, #1
 800221c:	b2dc      	uxtb	r4, r3
 800221e:	4b19      	ldr	r3, [pc, #100]	; (8002284 <lookInfoPrintImage+0x268>)
 8002220:	183a      	adds	r2, r7, r0
 8002222:	18d2      	adds	r2, r2, r3
 8002224:	4921      	ldr	r1, [pc, #132]	; (80022ac <lookInfoPrintImage+0x290>)
 8002226:	187b      	adds	r3, r7, r1
 8002228:	7812      	ldrb	r2, [r2, #0]
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	18d3      	adds	r3, r2, r3
 800222e:	b2db      	uxtb	r3, r3
 8002230:	3b01      	subs	r3, #1
 8002232:	b2da      	uxtb	r2, r3
 8002234:	4b13      	ldr	r3, [pc, #76]	; (8002284 <lookInfoPrintImage+0x268>)
 8002236:	4911      	ldr	r1, [pc, #68]	; (800227c <lookInfoPrintImage+0x260>)
 8002238:	468c      	mov	ip, r1
 800223a:	44bc      	add	ip, r7
 800223c:	4463      	add	r3, ip
 800223e:	7819      	ldrb	r1, [r3, #0]
 8002240:	4b0f      	ldr	r3, [pc, #60]	; (8002280 <lookInfoPrintImage+0x264>)
 8002242:	480e      	ldr	r0, [pc, #56]	; (800227c <lookInfoPrintImage+0x260>)
 8002244:	4684      	mov	ip, r0
 8002246:	44bc      	add	ip, r7
 8002248:	4463      	add	r3, ip
 800224a:	7818      	ldrb	r0, [r3, #0]
 800224c:	197b      	adds	r3, r7, r5
 800224e:	9301      	str	r3, [sp, #4]
 8002250:	23ff      	movs	r3, #255	; 0xff
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	0013      	movs	r3, r2
 8002256:	0022      	movs	r2, r4
 8002258:	f7ff f824 	bl	80012a4 <weoDrawRectangleFilled>
//		weoDrawRectangleFilled(0x00, 0x00, 0x0F, 0x06, 0xFF,MEM_Buffer);
//		printASCIIarray(0x20,0x00,0x01,width);
		GPIOC->ODR |= 1 << 6;	//set BF
 800225c:	4b0d      	ldr	r3, [pc, #52]	; (8002294 <lookInfoPrintImage+0x278>)
 800225e:	695a      	ldr	r2, [r3, #20]
 8002260:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <lookInfoPrintImage+0x278>)
 8002262:	2140      	movs	r1, #64	; 0x40
 8002264:	430a      	orrs	r2, r1
 8002266:	615a      	str	r2, [r3, #20]

	}
 8002268:	46c0      	nop			; (mov r8, r8)
 800226a:	0018      	movs	r0, r3
 800226c:	46bd      	mov	sp, r7
 800226e:	4b12      	ldr	r3, [pc, #72]	; (80022b8 <lookInfoPrintImage+0x29c>)
 8002270:	449d      	add	sp, r3
 8002272:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002274:	ffffdfd4 	.word	0xffffdfd4
 8002278:	ffffdfe7 	.word	0xffffdfe7
 800227c:	00002020 	.word	0x00002020
 8002280:	ffffdfe6 	.word	0xffffdfe6
 8002284:	ffffdfe5 	.word	0xffffdfe5
 8002288:	0000201c 	.word	0x0000201c
 800228c:	00002017 	.word	0x00002017
 8002290:	ffffdfec 	.word	0xffffdfec
 8002294:	50000800 	.word	0x50000800
 8002298:	ffff7fff 	.word	0xffff7fff
 800229c:	200051a4 	.word	0x200051a4
 80022a0:	00001388 	.word	0x00001388
 80022a4:	0000201b 	.word	0x0000201b
 80022a8:	ffffdff0 	.word	0xffffdff0
 80022ac:	0000201a 	.word	0x0000201a
 80022b0:	00002018 	.word	0x00002018
 80022b4:	40004400 	.word	0x40004400
 80022b8:	00002024 	.word	0x00002024

080022bc <MEM_GetID>:
		dat = 0x04;
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 5);//write disable Is it neccessary, if WP pin is used????????????????????????????
		GPIOC->ODR |= 1 << 15;	// set cs
//    GPIOC->ODR &= ~(1 << 14);//Write Disable
	}
	uint32_t MEM_GetID(void) {
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
		uint8_t dat;
		uint8_t tmp[1] = { 0x00 };
 80022c2:	1d3b      	adds	r3, r7, #4
 80022c4:	2200      	movs	r2, #0
 80022c6:	701a      	strb	r2, [r3, #0]
		dat = 0x9E;
 80022c8:	1dfb      	adds	r3, r7, #7
 80022ca:	229e      	movs	r2, #158	; 0x9e
 80022cc:	701a      	strb	r2, [r3, #0]
		GPIOC->ODR &= ~(1 << 15);	//reset cs
 80022ce:	4b26      	ldr	r3, [pc, #152]	; (8002368 <MEM_GetID+0xac>)
 80022d0:	695a      	ldr	r2, [r3, #20]
 80022d2:	4b25      	ldr	r3, [pc, #148]	; (8002368 <MEM_GetID+0xac>)
 80022d4:	4925      	ldr	r1, [pc, #148]	; (800236c <MEM_GetID+0xb0>)
 80022d6:	400a      	ands	r2, r1
 80022d8:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 50);	//read ID command
 80022da:	1df9      	adds	r1, r7, #7
 80022dc:	4824      	ldr	r0, [pc, #144]	; (8002370 <MEM_GetID+0xb4>)
 80022de:	2332      	movs	r3, #50	; 0x32
 80022e0:	2201      	movs	r2, #1
 80022e2:	f004 f85d 	bl	80063a0 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 80022e6:	23fa      	movs	r3, #250	; 0xfa
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	1d39      	adds	r1, r7, #4
 80022ec:	4820      	ldr	r0, [pc, #128]	; (8002370 <MEM_GetID+0xb4>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	f004 f9ae 	bl	8006650 <HAL_SPI_Receive>
		MEM_ID = (uint32_t) tmp[0];
 80022f4:	1d3b      	adds	r3, r7, #4
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	001a      	movs	r2, r3
 80022fa:	4b1e      	ldr	r3, [pc, #120]	; (8002374 <MEM_GetID+0xb8>)
 80022fc:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;                    			//MSB
 80022fe:	4b1d      	ldr	r3, [pc, #116]	; (8002374 <MEM_GetID+0xb8>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	021a      	lsls	r2, r3, #8
 8002304:	4b1b      	ldr	r3, [pc, #108]	; (8002374 <MEM_GetID+0xb8>)
 8002306:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002308:	23fa      	movs	r3, #250	; 0xfa
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	1d39      	adds	r1, r7, #4
 800230e:	4818      	ldr	r0, [pc, #96]	; (8002370 <MEM_GetID+0xb4>)
 8002310:	2201      	movs	r2, #1
 8002312:	f004 f99d 	bl	8006650 <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8002316:	1d3b      	adds	r3, r7, #4
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	001a      	movs	r2, r3
 800231c:	4b15      	ldr	r3, [pc, #84]	; (8002374 <MEM_GetID+0xb8>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	18d2      	adds	r2, r2, r3
 8002322:	4b14      	ldr	r3, [pc, #80]	; (8002374 <MEM_GetID+0xb8>)
 8002324:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;
 8002326:	4b13      	ldr	r3, [pc, #76]	; (8002374 <MEM_GetID+0xb8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	021a      	lsls	r2, r3, #8
 800232c:	4b11      	ldr	r3, [pc, #68]	; (8002374 <MEM_GetID+0xb8>)
 800232e:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002330:	23fa      	movs	r3, #250	; 0xfa
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	1d39      	adds	r1, r7, #4
 8002336:	480e      	ldr	r0, [pc, #56]	; (8002370 <MEM_GetID+0xb4>)
 8002338:	2201      	movs	r2, #1
 800233a:	f004 f989 	bl	8006650 <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 800233e:	1d3b      	adds	r3, r7, #4
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	001a      	movs	r2, r3
 8002344:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <MEM_GetID+0xb8>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	18d2      	adds	r2, r2, r3
 800234a:	4b0a      	ldr	r3, [pc, #40]	; (8002374 <MEM_GetID+0xb8>)
 800234c:	601a      	str	r2, [r3, #0]
		GPIOC->ODR |= 1 << 15;                    			// set cs
 800234e:	4b06      	ldr	r3, [pc, #24]	; (8002368 <MEM_GetID+0xac>)
 8002350:	695a      	ldr	r2, [r3, #20]
 8002352:	4b05      	ldr	r3, [pc, #20]	; (8002368 <MEM_GetID+0xac>)
 8002354:	2180      	movs	r1, #128	; 0x80
 8002356:	0209      	lsls	r1, r1, #8
 8002358:	430a      	orrs	r2, r1
 800235a:	615a      	str	r2, [r3, #20]
		return (MEM_ID);
 800235c:	4b05      	ldr	r3, [pc, #20]	; (8002374 <MEM_GetID+0xb8>)
 800235e:	681b      	ldr	r3, [r3, #0]
	}
 8002360:	0018      	movs	r0, r3
 8002362:	46bd      	mov	sp, r7
 8002364:	b002      	add	sp, #8
 8002366:	bd80      	pop	{r7, pc}
 8002368:	50000800 	.word	0x50000800
 800236c:	ffff7fff 	.word	0xffff7fff
 8002370:	200051a4 	.word	0x200051a4
 8002374:	2000515c 	.word	0x2000515c

08002378 <cmdExecute>:
//		HAL_Delay(1000);
	}
	uint16_t Scount(void){

	}
	uint8_t cmdExecute(uint8_t cmd2Execute){
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	0002      	movs	r2, r0
 8002380:	1dfb      	adds	r3, r7, #7
 8002382:	701a      	strb	r2, [r3, #0]
		if(cmd[0]==0xFF){}
 8002384:	4b39      	ldr	r3, [pc, #228]	; (800246c <cmdExecute+0xf4>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2bff      	cmp	r3, #255	; 0xff
 800238a:	d069      	beq.n	8002460 <cmdExecute+0xe8>
		else{
			if (bf4me!=0x00){}
 800238c:	4b38      	ldr	r3, [pc, #224]	; (8002470 <cmdExecute+0xf8>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d165      	bne.n	8002460 <cmdExecute+0xe8>
			else{
		USART2->ICR|=USART_ICR_ORECF;
 8002394:	4b37      	ldr	r3, [pc, #220]	; (8002474 <cmdExecute+0xfc>)
 8002396:	6a1a      	ldr	r2, [r3, #32]
 8002398:	4b36      	ldr	r3, [pc, #216]	; (8002474 <cmdExecute+0xfc>)
 800239a:	2108      	movs	r1, #8
 800239c:	430a      	orrs	r2, r1
 800239e:	621a      	str	r2, [r3, #32]
//			dataASCII[0]=0x31;
//			dataASCII[1]=0x32;
//			printASCIIarray(0x00,0x00,0x02,dataASCII);
//			weoDrawRectangleFilled(0x00, 0x00, 0x0E, 0x25, 0xFF, h2);//works
				}
		if(cmd2Execute==0x11){
 80023a0:	1dfb      	adds	r3, r7, #7
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	2b11      	cmp	r3, #17
 80023a6:	d10d      	bne.n	80023c4 <cmdExecute+0x4c>
			bf4me=0x11;	//set BF flag 4 me
 80023a8:	4b31      	ldr	r3, [pc, #196]	; (8002470 <cmdExecute+0xf8>)
 80023aa:	2211      	movs	r2, #17
 80023ac:	701a      	strb	r2, [r3, #0]
			GPIOC->ODR &= ~(1 << 6);	//reset BF
 80023ae:	4b32      	ldr	r3, [pc, #200]	; (8002478 <cmdExecute+0x100>)
 80023b0:	695a      	ldr	r2, [r3, #20]
 80023b2:	4b31      	ldr	r3, [pc, #196]	; (8002478 <cmdExecute+0x100>)
 80023b4:	2140      	movs	r1, #64	; 0x40
 80023b6:	438a      	bics	r2, r1
 80023b8:	615a      	str	r2, [r3, #20]

			showFullScreen(picNum);
 80023ba:	4b30      	ldr	r3, [pc, #192]	; (800247c <cmdExecute+0x104>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	0018      	movs	r0, r3
 80023c0:	f7ff fd8a 	bl	8001ed8 <showFullScreen>
//			lookInfoPrintImage(picNum,0x00,0x00);
				}
		if(cmd2Execute==0x12){
 80023c4:	1dfb      	adds	r3, r7, #7
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b12      	cmp	r3, #18
 80023ca:	d113      	bne.n	80023f4 <cmdExecute+0x7c>
			bf4me=0x12;	//set BF flag 4 me
 80023cc:	4b28      	ldr	r3, [pc, #160]	; (8002470 <cmdExecute+0xf8>)
 80023ce:	2212      	movs	r2, #18
 80023d0:	701a      	strb	r2, [r3, #0]
			GPIOC->ODR &= ~(1 << 6);	//reset BF
 80023d2:	4b29      	ldr	r3, [pc, #164]	; (8002478 <cmdExecute+0x100>)
 80023d4:	695a      	ldr	r2, [r3, #20]
 80023d6:	4b28      	ldr	r3, [pc, #160]	; (8002478 <cmdExecute+0x100>)
 80023d8:	2140      	movs	r1, #64	; 0x40
 80023da:	438a      	bics	r2, r1
 80023dc:	615a      	str	r2, [r3, #20]

			lookInfoPrintImage(picNum,imX,imY);
 80023de:	4b27      	ldr	r3, [pc, #156]	; (800247c <cmdExecute+0x104>)
 80023e0:	7818      	ldrb	r0, [r3, #0]
 80023e2:	4b27      	ldr	r3, [pc, #156]	; (8002480 <cmdExecute+0x108>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	b2d9      	uxtb	r1, r3
 80023e8:	4b26      	ldr	r3, [pc, #152]	; (8002484 <cmdExecute+0x10c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	001a      	movs	r2, r3
 80023f0:	f7ff fe14 	bl	800201c <lookInfoPrintImage>
				}
		if(cmd2Execute==0x13){
 80023f4:	1dfb      	adds	r3, r7, #7
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b13      	cmp	r3, #19
 80023fa:	d113      	bne.n	8002424 <cmdExecute+0xac>
			bf4me=0x13;	//set BF flag 4 me
 80023fc:	4b1c      	ldr	r3, [pc, #112]	; (8002470 <cmdExecute+0xf8>)
 80023fe:	2213      	movs	r2, #19
 8002400:	701a      	strb	r2, [r3, #0]
			GPIOC->ODR &= ~(1 << 6);	//reset BF
 8002402:	4b1d      	ldr	r3, [pc, #116]	; (8002478 <cmdExecute+0x100>)
 8002404:	695a      	ldr	r2, [r3, #20]
 8002406:	4b1c      	ldr	r3, [pc, #112]	; (8002478 <cmdExecute+0x100>)
 8002408:	2140      	movs	r1, #64	; 0x40
 800240a:	438a      	bics	r2, r1
 800240c:	615a      	str	r2, [r3, #20]

//			printASCIIarray_old(imX,imY, strLen,dataASCII);
			printASCIIarray(imX,imY, strLen,dataASCII);
 800240e:	4b1c      	ldr	r3, [pc, #112]	; (8002480 <cmdExecute+0x108>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	b2d8      	uxtb	r0, r3
 8002414:	4b1b      	ldr	r3, [pc, #108]	; (8002484 <cmdExecute+0x10c>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	b2d9      	uxtb	r1, r3
 800241a:	4b1b      	ldr	r3, [pc, #108]	; (8002488 <cmdExecute+0x110>)
 800241c:	781a      	ldrb	r2, [r3, #0]
 800241e:	4b1b      	ldr	r3, [pc, #108]	; (800248c <cmdExecute+0x114>)
 8002420:	f000 f836 	bl	8002490 <printASCIIarray>
				}
		if(cmd2Execute==0x14){
 8002424:	1dfb      	adds	r3, r7, #7
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	2b14      	cmp	r3, #20
 800242a:	d108      	bne.n	800243e <cmdExecute+0xc6>
			bf4me=0x14;	//set BF flag 4 me
 800242c:	4b10      	ldr	r3, [pc, #64]	; (8002470 <cmdExecute+0xf8>)
 800242e:	2214      	movs	r2, #20
 8002430:	701a      	strb	r2, [r3, #0]
			GPIOC->ODR &= ~(1 << 6);	//reset BF
 8002432:	4b11      	ldr	r3, [pc, #68]	; (8002478 <cmdExecute+0x100>)
 8002434:	695a      	ldr	r2, [r3, #20]
 8002436:	4b10      	ldr	r3, [pc, #64]	; (8002478 <cmdExecute+0x100>)
 8002438:	2140      	movs	r1, #64	; 0x40
 800243a:	438a      	bics	r2, r1
 800243c:	615a      	str	r2, [r3, #20]


				}
		if(cmd2Execute==0x15){
 800243e:	1dfb      	adds	r3, r7, #7
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b15      	cmp	r3, #21
 8002444:	d102      	bne.n	800244c <cmdExecute+0xd4>
			bf4me=0x15;	//set BF flag 4 me
 8002446:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <cmdExecute+0xf8>)
 8002448:	2215      	movs	r2, #21
 800244a:	701a      	strb	r2, [r3, #0]
				}
		if(cmd2Execute==0x16){
 800244c:	1dfb      	adds	r3, r7, #7
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b16      	cmp	r3, #22
 8002452:	d102      	bne.n	800245a <cmdExecute+0xe2>
			bf4me=0x16;	//set BF flag 4 me
 8002454:	4b06      	ldr	r3, [pc, #24]	; (8002470 <cmdExecute+0xf8>)
 8002456:	2216      	movs	r2, #22
 8002458:	701a      	strb	r2, [r3, #0]

				}
		if(cmd2Execute==0x00){

				}
		if(cmd2Execute=0x00){
 800245a:	1dfb      	adds	r3, r7, #7
 800245c:	2200      	movs	r2, #0
 800245e:	701a      	strb	r2, [r3, #0]

				}
			}
		}
	}
 8002460:	46c0      	nop			; (mov r8, r8)
 8002462:	0018      	movs	r0, r3
 8002464:	46bd      	mov	sp, r7
 8002466:	b002      	add	sp, #8
 8002468:	bd80      	pop	{r7, pc}
 800246a:	46c0      	nop			; (mov r8, r8)
 800246c:	200054a0 	.word	0x200054a0
 8002470:	200053cc 	.word	0x200053cc
 8002474:	40004400 	.word	0x40004400
 8002478:	50000800 	.word	0x50000800
 800247c:	20005375 	.word	0x20005375
 8002480:	2000527c 	.word	0x2000527c
 8002484:	200052b4 	.word	0x200052b4
 8002488:	200053b5 	.word	0x200053b5
 800248c:	20005194 	.word	0x20005194

08002490 <printASCIIarray>:
		for(i=0;i<48;i++){
		weoBuffer[i]=0x00;
		}
		GPIOC->ODR |= 1 << 6;	//set BF
	}
	uint8_t printASCIIarray(uint8_t imX,uint8_t imY,uint8_t strLen,uint8_t dataASCII[]){
 8002490:	b5b0      	push	{r4, r5, r7, lr}
 8002492:	b092      	sub	sp, #72	; 0x48
 8002494:	af02      	add	r7, sp, #8
 8002496:	0004      	movs	r4, r0
 8002498:	0008      	movs	r0, r1
 800249a:	0011      	movs	r1, r2
 800249c:	603b      	str	r3, [r7, #0]
 800249e:	1dfb      	adds	r3, r7, #7
 80024a0:	1c22      	adds	r2, r4, #0
 80024a2:	701a      	strb	r2, [r3, #0]
 80024a4:	1dbb      	adds	r3, r7, #6
 80024a6:	1c02      	adds	r2, r0, #0
 80024a8:	701a      	strb	r2, [r3, #0]
 80024aa:	1d7b      	adds	r3, r7, #5
 80024ac:	1c0a      	adds	r2, r1, #0
 80024ae:	701a      	strb	r2, [r3, #0]
			uint8_t j,Y_height,X_width,ASCII_X;
			uint8_t weoBuffer[49];
			uint16_t i;
			ASCII_X=imX;
 80024b0:	233e      	movs	r3, #62	; 0x3e
 80024b2:	18fb      	adds	r3, r7, r3
 80024b4:	1dfa      	adds	r2, r7, #7
 80024b6:	7812      	ldrb	r2, [r2, #0]
 80024b8:	701a      	strb	r2, [r3, #0]

			for (i=0;i<=strLen;i++){
 80024ba:	233c      	movs	r3, #60	; 0x3c
 80024bc:	18fb      	adds	r3, r7, r3
 80024be:	2200      	movs	r2, #0
 80024c0:	801a      	strh	r2, [r3, #0]
 80024c2:	e050      	b.n	8002566 <printASCIIarray+0xd6>
//			if ( dataASCII[i]==0x39 ) {
				for(j=0;j<49;j++){
 80024c4:	233f      	movs	r3, #63	; 0x3f
 80024c6:	18fb      	adds	r3, r7, r3
 80024c8:	2200      	movs	r2, #0
 80024ca:	701a      	strb	r2, [r3, #0]
 80024cc:	e01b      	b.n	8002506 <printASCIIarray+0x76>
									weoBuffer[j]=FONT_X[dataASCII[i]][j];
 80024ce:	233c      	movs	r3, #60	; 0x3c
 80024d0:	18fb      	adds	r3, r7, r3
 80024d2:	881b      	ldrh	r3, [r3, #0]
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	18d3      	adds	r3, r2, r3
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	001a      	movs	r2, r3
 80024dc:	253f      	movs	r5, #63	; 0x3f
 80024de:	197b      	adds	r3, r7, r5
 80024e0:	7818      	ldrb	r0, [r3, #0]
 80024e2:	197b      	adds	r3, r7, r5
 80024e4:	7819      	ldrb	r1, [r3, #0]
 80024e6:	4c34      	ldr	r4, [pc, #208]	; (80025b8 <printASCIIarray+0x128>)
 80024e8:	0013      	movs	r3, r2
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	1a9b      	subs	r3, r3, r2
 80024ee:	00da      	lsls	r2, r3, #3
 80024f0:	1ad2      	subs	r2, r2, r3
 80024f2:	18a3      	adds	r3, r4, r2
 80024f4:	5c1a      	ldrb	r2, [r3, r0]
 80024f6:	2308      	movs	r3, #8
 80024f8:	18fb      	adds	r3, r7, r3
 80024fa:	545a      	strb	r2, [r3, r1]
				for(j=0;j<49;j++){
 80024fc:	197b      	adds	r3, r7, r5
 80024fe:	781a      	ldrb	r2, [r3, #0]
 8002500:	197b      	adds	r3, r7, r5
 8002502:	3201      	adds	r2, #1
 8002504:	701a      	strb	r2, [r3, #0]
 8002506:	233f      	movs	r3, #63	; 0x3f
 8002508:	18fb      	adds	r3, r7, r3
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b30      	cmp	r3, #48	; 0x30
 800250e:	d9de      	bls.n	80024ce <printASCIIarray+0x3e>
									}
			        	weoDrawRectangleFilled(ASCII_X,imY,ASCII_X+X_increment-0,imY+ASCII_height-0,0xFF,weoBuffer);
 8002510:	4b2a      	ldr	r3, [pc, #168]	; (80025bc <printASCIIarray+0x12c>)
 8002512:	781a      	ldrb	r2, [r3, #0]
 8002514:	203e      	movs	r0, #62	; 0x3e
 8002516:	183b      	adds	r3, r7, r0
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	18d3      	adds	r3, r2, r3
 800251c:	b2dc      	uxtb	r4, r3
 800251e:	4b28      	ldr	r3, [pc, #160]	; (80025c0 <printASCIIarray+0x130>)
 8002520:	781a      	ldrb	r2, [r3, #0]
 8002522:	1dbb      	adds	r3, r7, #6
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	18d3      	adds	r3, r2, r3
 8002528:	b2da      	uxtb	r2, r3
 800252a:	1dbb      	adds	r3, r7, #6
 800252c:	7819      	ldrb	r1, [r3, #0]
 800252e:	0005      	movs	r5, r0
 8002530:	183b      	adds	r3, r7, r0
 8002532:	7818      	ldrb	r0, [r3, #0]
 8002534:	2308      	movs	r3, #8
 8002536:	18fb      	adds	r3, r7, r3
 8002538:	9301      	str	r3, [sp, #4]
 800253a:	23ff      	movs	r3, #255	; 0xff
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	0013      	movs	r3, r2
 8002540:	0022      	movs	r2, r4
 8002542:	f7fe feaf 	bl	80012a4 <weoDrawRectangleFilled>
//				weoDrawRectangleFilled(ASCII_X,imY,ASCII_X+X_increment-0,imY+ASCII_height-0,0xFF,FONT_X[dataASCII[i]]);
//				weoDrawRectangleFilled(ASCII_X,imY,ASCII_X+0x06,imY+0x0D,0xFF,weoBuffer);
//			}

				ASCII_X += X_increment+1;
 8002546:	4b1d      	ldr	r3, [pc, #116]	; (80025bc <printASCIIarray+0x12c>)
 8002548:	781a      	ldrb	r2, [r3, #0]
 800254a:	0028      	movs	r0, r5
 800254c:	183b      	adds	r3, r7, r0
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	18d3      	adds	r3, r2, r3
 8002552:	b2da      	uxtb	r2, r3
 8002554:	183b      	adds	r3, r7, r0
 8002556:	3201      	adds	r2, #1
 8002558:	701a      	strb	r2, [r3, #0]
			for (i=0;i<=strLen;i++){
 800255a:	213c      	movs	r1, #60	; 0x3c
 800255c:	187b      	adds	r3, r7, r1
 800255e:	881a      	ldrh	r2, [r3, #0]
 8002560:	187b      	adds	r3, r7, r1
 8002562:	3201      	adds	r2, #1
 8002564:	801a      	strh	r2, [r3, #0]
 8002566:	1d7b      	adds	r3, r7, #5
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	b29b      	uxth	r3, r3
 800256c:	223c      	movs	r2, #60	; 0x3c
 800256e:	18ba      	adds	r2, r7, r2
 8002570:	8812      	ldrh	r2, [r2, #0]
 8002572:	429a      	cmp	r2, r3
 8002574:	d9a6      	bls.n	80024c4 <printASCIIarray+0x34>
			}
			for(i=0;i<49;i++){
 8002576:	233c      	movs	r3, #60	; 0x3c
 8002578:	18fb      	adds	r3, r7, r3
 800257a:	2200      	movs	r2, #0
 800257c:	801a      	strh	r2, [r3, #0]
 800257e:	e00b      	b.n	8002598 <printASCIIarray+0x108>
			weoBuffer[i]=0x00;
 8002580:	203c      	movs	r0, #60	; 0x3c
 8002582:	183b      	adds	r3, r7, r0
 8002584:	881b      	ldrh	r3, [r3, #0]
 8002586:	2208      	movs	r2, #8
 8002588:	18ba      	adds	r2, r7, r2
 800258a:	2100      	movs	r1, #0
 800258c:	54d1      	strb	r1, [r2, r3]
			for(i=0;i<49;i++){
 800258e:	183b      	adds	r3, r7, r0
 8002590:	881a      	ldrh	r2, [r3, #0]
 8002592:	183b      	adds	r3, r7, r0
 8002594:	3201      	adds	r2, #1
 8002596:	801a      	strh	r2, [r3, #0]
 8002598:	233c      	movs	r3, #60	; 0x3c
 800259a:	18fb      	adds	r3, r7, r3
 800259c:	881b      	ldrh	r3, [r3, #0]
 800259e:	2b30      	cmp	r3, #48	; 0x30
 80025a0:	d9ee      	bls.n	8002580 <printASCIIarray+0xf0>
			}
			GPIOC->ODR |= 1 << 6;	//set BF
 80025a2:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <printASCIIarray+0x134>)
 80025a4:	695a      	ldr	r2, [r3, #20]
 80025a6:	4b07      	ldr	r3, [pc, #28]	; (80025c4 <printASCIIarray+0x134>)
 80025a8:	2140      	movs	r1, #64	; 0x40
 80025aa:	430a      	orrs	r2, r1
 80025ac:	615a      	str	r2, [r3, #20]

		}
 80025ae:	46c0      	nop			; (mov r8, r8)
 80025b0:	0018      	movs	r0, r3
 80025b2:	46bd      	mov	sp, r7
 80025b4:	b010      	add	sp, #64	; 0x40
 80025b6:	bdb0      	pop	{r4, r5, r7, pc}
 80025b8:	20000000 	.word	0x20000000
 80025bc:	20003130 	.word	0x20003130
 80025c0:	20003131 	.word	0x20003131
 80025c4:	50000800 	.word	0x50000800

080025c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80025cc:	46c0      	nop			; (mov r8, r8)
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
	...

080025d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025da:	4b11      	ldr	r3, [pc, #68]	; (8002620 <HAL_MspInit+0x4c>)
 80025dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025de:	4b10      	ldr	r3, [pc, #64]	; (8002620 <HAL_MspInit+0x4c>)
 80025e0:	2101      	movs	r1, #1
 80025e2:	430a      	orrs	r2, r1
 80025e4:	641a      	str	r2, [r3, #64]	; 0x40
 80025e6:	4b0e      	ldr	r3, [pc, #56]	; (8002620 <HAL_MspInit+0x4c>)
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	2201      	movs	r2, #1
 80025ec:	4013      	ands	r3, r2
 80025ee:	607b      	str	r3, [r7, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025f2:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <HAL_MspInit+0x4c>)
 80025f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025f6:	4b0a      	ldr	r3, [pc, #40]	; (8002620 <HAL_MspInit+0x4c>)
 80025f8:	2180      	movs	r1, #128	; 0x80
 80025fa:	0549      	lsls	r1, r1, #21
 80025fc:	430a      	orrs	r2, r1
 80025fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8002600:	4b07      	ldr	r3, [pc, #28]	; (8002620 <HAL_MspInit+0x4c>)
 8002602:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002604:	2380      	movs	r3, #128	; 0x80
 8002606:	055b      	lsls	r3, r3, #21
 8002608:	4013      	ands	r3, r2
 800260a:	603b      	str	r3, [r7, #0]
 800260c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 800260e:	2380      	movs	r3, #128	; 0x80
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	0018      	movs	r0, r3
 8002614:	f000 fc5e 	bl	8002ed4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002618:	46c0      	nop			; (mov r8, r8)
 800261a:	46bd      	mov	sp, r7
 800261c:	b002      	add	sp, #8
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40021000 	.word	0x40021000

08002624 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b088      	sub	sp, #32
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800262c:	230c      	movs	r3, #12
 800262e:	18fb      	adds	r3, r7, r3
 8002630:	0018      	movs	r0, r3
 8002632:	2314      	movs	r3, #20
 8002634:	001a      	movs	r2, r3
 8002636:	2100      	movs	r1, #0
 8002638:	f007 f996 	bl	8009968 <memset>
  if(hcomp->Instance==COMP1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a11      	ldr	r2, [pc, #68]	; (8002688 <HAL_COMP_MspInit+0x64>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d11b      	bne.n	800267e <HAL_COMP_MspInit+0x5a>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002646:	4b11      	ldr	r3, [pc, #68]	; (800268c <HAL_COMP_MspInit+0x68>)
 8002648:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800264a:	4b10      	ldr	r3, [pc, #64]	; (800268c <HAL_COMP_MspInit+0x68>)
 800264c:	2102      	movs	r1, #2
 800264e:	430a      	orrs	r2, r1
 8002650:	635a      	str	r2, [r3, #52]	; 0x34
 8002652:	4b0e      	ldr	r3, [pc, #56]	; (800268c <HAL_COMP_MspInit+0x68>)
 8002654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002656:	2202      	movs	r2, #2
 8002658:	4013      	ands	r3, r2
 800265a:	60bb      	str	r3, [r7, #8]
 800265c:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800265e:	210c      	movs	r1, #12
 8002660:	187b      	adds	r3, r7, r1
 8002662:	2204      	movs	r2, #4
 8002664:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002666:	187b      	adds	r3, r7, r1
 8002668:	2203      	movs	r2, #3
 800266a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266c:	187b      	adds	r3, r7, r1
 800266e:	2200      	movs	r2, #0
 8002670:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002672:	187b      	adds	r3, r7, r1
 8002674:	4a06      	ldr	r2, [pc, #24]	; (8002690 <HAL_COMP_MspInit+0x6c>)
 8002676:	0019      	movs	r1, r3
 8002678:	0010      	movs	r0, r2
 800267a:	f001 f981 	bl	8003980 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 800267e:	46c0      	nop			; (mov r8, r8)
 8002680:	46bd      	mov	sp, r7
 8002682:	b008      	add	sp, #32
 8002684:	bd80      	pop	{r7, pc}
 8002686:	46c0      	nop			; (mov r8, r8)
 8002688:	40010200 	.word	0x40010200
 800268c:	40021000 	.word	0x40021000
 8002690:	50000400 	.word	0x50000400

08002694 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b08a      	sub	sp, #40	; 0x28
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800269c:	2314      	movs	r3, #20
 800269e:	18fb      	adds	r3, r7, r3
 80026a0:	0018      	movs	r0, r3
 80026a2:	2314      	movs	r3, #20
 80026a4:	001a      	movs	r2, r3
 80026a6:	2100      	movs	r1, #0
 80026a8:	f007 f95e 	bl	8009968 <memset>
  if(hi2c->Instance==I2C1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a20      	ldr	r2, [pc, #128]	; (8002734 <HAL_I2C_MspInit+0xa0>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d139      	bne.n	800272a <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b6:	4b20      	ldr	r3, [pc, #128]	; (8002738 <HAL_I2C_MspInit+0xa4>)
 80026b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026ba:	4b1f      	ldr	r3, [pc, #124]	; (8002738 <HAL_I2C_MspInit+0xa4>)
 80026bc:	2101      	movs	r1, #1
 80026be:	430a      	orrs	r2, r1
 80026c0:	635a      	str	r2, [r3, #52]	; 0x34
 80026c2:	4b1d      	ldr	r3, [pc, #116]	; (8002738 <HAL_I2C_MspInit+0xa4>)
 80026c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c6:	2201      	movs	r2, #1
 80026c8:	4013      	ands	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
 80026cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80026ce:	2114      	movs	r1, #20
 80026d0:	187b      	adds	r3, r7, r1
 80026d2:	22c0      	movs	r2, #192	; 0xc0
 80026d4:	00d2      	lsls	r2, r2, #3
 80026d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026d8:	187b      	adds	r3, r7, r1
 80026da:	2212      	movs	r2, #18
 80026dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026de:	187b      	adds	r3, r7, r1
 80026e0:	2201      	movs	r2, #1
 80026e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e4:	187b      	adds	r3, r7, r1
 80026e6:	2200      	movs	r2, #0
 80026e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80026ea:	187b      	adds	r3, r7, r1
 80026ec:	2206      	movs	r2, #6
 80026ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f0:	187a      	adds	r2, r7, r1
 80026f2:	23a0      	movs	r3, #160	; 0xa0
 80026f4:	05db      	lsls	r3, r3, #23
 80026f6:	0011      	movs	r1, r2
 80026f8:	0018      	movs	r0, r3
 80026fa:	f001 f941 	bl	8003980 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026fe:	4b0e      	ldr	r3, [pc, #56]	; (8002738 <HAL_I2C_MspInit+0xa4>)
 8002700:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002702:	4b0d      	ldr	r3, [pc, #52]	; (8002738 <HAL_I2C_MspInit+0xa4>)
 8002704:	2180      	movs	r1, #128	; 0x80
 8002706:	0389      	lsls	r1, r1, #14
 8002708:	430a      	orrs	r2, r1
 800270a:	63da      	str	r2, [r3, #60]	; 0x3c
 800270c:	4b0a      	ldr	r3, [pc, #40]	; (8002738 <HAL_I2C_MspInit+0xa4>)
 800270e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002710:	2380      	movs	r3, #128	; 0x80
 8002712:	039b      	lsls	r3, r3, #14
 8002714:	4013      	ands	r3, r2
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800271a:	2200      	movs	r2, #0
 800271c:	2100      	movs	r1, #0
 800271e:	2017      	movs	r0, #23
 8002720:	f000 fef8 	bl	8003514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8002724:	2017      	movs	r0, #23
 8002726:	f000 ff0a 	bl	800353e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800272a:	46c0      	nop			; (mov r8, r8)
 800272c:	46bd      	mov	sp, r7
 800272e:	b00a      	add	sp, #40	; 0x28
 8002730:	bd80      	pop	{r7, pc}
 8002732:	46c0      	nop			; (mov r8, r8)
 8002734:	40005400 	.word	0x40005400
 8002738:	40021000 	.word	0x40021000

0800273c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800273c:	b590      	push	{r4, r7, lr}
 800273e:	b08b      	sub	sp, #44	; 0x2c
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002744:	2314      	movs	r3, #20
 8002746:	18fb      	adds	r3, r7, r3
 8002748:	0018      	movs	r0, r3
 800274a:	2314      	movs	r3, #20
 800274c:	001a      	movs	r2, r3
 800274e:	2100      	movs	r1, #0
 8002750:	f007 f90a 	bl	8009968 <memset>
  if(hi2s->Instance==SPI1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a47      	ldr	r2, [pc, #284]	; (8002878 <HAL_I2S_MspInit+0x13c>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d000      	beq.n	8002760 <HAL_I2S_MspInit+0x24>
 800275e:	e087      	b.n	8002870 <HAL_I2S_MspInit+0x134>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002760:	4b46      	ldr	r3, [pc, #280]	; (800287c <HAL_I2S_MspInit+0x140>)
 8002762:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002764:	4b45      	ldr	r3, [pc, #276]	; (800287c <HAL_I2S_MspInit+0x140>)
 8002766:	2180      	movs	r1, #128	; 0x80
 8002768:	0149      	lsls	r1, r1, #5
 800276a:	430a      	orrs	r2, r1
 800276c:	641a      	str	r2, [r3, #64]	; 0x40
 800276e:	4b43      	ldr	r3, [pc, #268]	; (800287c <HAL_I2S_MspInit+0x140>)
 8002770:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002772:	2380      	movs	r3, #128	; 0x80
 8002774:	015b      	lsls	r3, r3, #5
 8002776:	4013      	ands	r3, r2
 8002778:	613b      	str	r3, [r7, #16]
 800277a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800277c:	4b3f      	ldr	r3, [pc, #252]	; (800287c <HAL_I2S_MspInit+0x140>)
 800277e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002780:	4b3e      	ldr	r3, [pc, #248]	; (800287c <HAL_I2S_MspInit+0x140>)
 8002782:	2101      	movs	r1, #1
 8002784:	430a      	orrs	r2, r1
 8002786:	635a      	str	r2, [r3, #52]	; 0x34
 8002788:	4b3c      	ldr	r3, [pc, #240]	; (800287c <HAL_I2S_MspInit+0x140>)
 800278a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800278c:	2201      	movs	r2, #1
 800278e:	4013      	ands	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002794:	4b39      	ldr	r3, [pc, #228]	; (800287c <HAL_I2S_MspInit+0x140>)
 8002796:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002798:	4b38      	ldr	r3, [pc, #224]	; (800287c <HAL_I2S_MspInit+0x140>)
 800279a:	2102      	movs	r1, #2
 800279c:	430a      	orrs	r2, r1
 800279e:	635a      	str	r2, [r3, #52]	; 0x34
 80027a0:	4b36      	ldr	r3, [pc, #216]	; (800287c <HAL_I2S_MspInit+0x140>)
 80027a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a4:	2202      	movs	r2, #2
 80027a6:	4013      	ands	r3, r2
 80027a8:	60bb      	str	r3, [r7, #8]
 80027aa:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> I2S1_WS
    PB3     ------> I2S1_CK
    PB4     ------> I2S1_MCK
    PB5     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80027ac:	2114      	movs	r1, #20
 80027ae:	187b      	adds	r3, r7, r1
 80027b0:	2280      	movs	r2, #128	; 0x80
 80027b2:	0212      	lsls	r2, r2, #8
 80027b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b6:	000c      	movs	r4, r1
 80027b8:	193b      	adds	r3, r7, r4
 80027ba:	2202      	movs	r2, #2
 80027bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027be:	193b      	adds	r3, r7, r4
 80027c0:	2200      	movs	r2, #0
 80027c2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c4:	193b      	adds	r3, r7, r4
 80027c6:	2200      	movs	r2, #0
 80027c8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80027ca:	193b      	adds	r3, r7, r4
 80027cc:	2200      	movs	r2, #0
 80027ce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d0:	193a      	adds	r2, r7, r4
 80027d2:	23a0      	movs	r3, #160	; 0xa0
 80027d4:	05db      	lsls	r3, r3, #23
 80027d6:	0011      	movs	r1, r2
 80027d8:	0018      	movs	r0, r3
 80027da:	f001 f8d1 	bl	8003980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80027de:	0021      	movs	r1, r4
 80027e0:	187b      	adds	r3, r7, r1
 80027e2:	2238      	movs	r2, #56	; 0x38
 80027e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e6:	187b      	adds	r3, r7, r1
 80027e8:	2202      	movs	r2, #2
 80027ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ec:	187b      	adds	r3, r7, r1
 80027ee:	2200      	movs	r2, #0
 80027f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f2:	187b      	adds	r3, r7, r1
 80027f4:	2200      	movs	r2, #0
 80027f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80027f8:	187b      	adds	r3, r7, r1
 80027fa:	2200      	movs	r2, #0
 80027fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027fe:	187b      	adds	r3, r7, r1
 8002800:	4a1f      	ldr	r2, [pc, #124]	; (8002880 <HAL_I2S_MspInit+0x144>)
 8002802:	0019      	movs	r1, r3
 8002804:	0010      	movs	r0, r2
 8002806:	f001 f8bb 	bl	8003980 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 800280a:	4b1e      	ldr	r3, [pc, #120]	; (8002884 <HAL_I2S_MspInit+0x148>)
 800280c:	4a1e      	ldr	r2, [pc, #120]	; (8002888 <HAL_I2S_MspInit+0x14c>)
 800280e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8002810:	4b1c      	ldr	r3, [pc, #112]	; (8002884 <HAL_I2S_MspInit+0x148>)
 8002812:	2211      	movs	r2, #17
 8002814:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002816:	4b1b      	ldr	r3, [pc, #108]	; (8002884 <HAL_I2S_MspInit+0x148>)
 8002818:	2210      	movs	r2, #16
 800281a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800281c:	4b19      	ldr	r3, [pc, #100]	; (8002884 <HAL_I2S_MspInit+0x148>)
 800281e:	2200      	movs	r2, #0
 8002820:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002822:	4b18      	ldr	r3, [pc, #96]	; (8002884 <HAL_I2S_MspInit+0x148>)
 8002824:	2280      	movs	r2, #128	; 0x80
 8002826:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002828:	4b16      	ldr	r3, [pc, #88]	; (8002884 <HAL_I2S_MspInit+0x148>)
 800282a:	2280      	movs	r2, #128	; 0x80
 800282c:	0052      	lsls	r2, r2, #1
 800282e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002830:	4b14      	ldr	r3, [pc, #80]	; (8002884 <HAL_I2S_MspInit+0x148>)
 8002832:	2280      	movs	r2, #128	; 0x80
 8002834:	00d2      	lsls	r2, r2, #3
 8002836:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002838:	4b12      	ldr	r3, [pc, #72]	; (8002884 <HAL_I2S_MspInit+0x148>)
 800283a:	2200      	movs	r2, #0
 800283c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800283e:	4b11      	ldr	r3, [pc, #68]	; (8002884 <HAL_I2S_MspInit+0x148>)
 8002840:	2200      	movs	r2, #0
 8002842:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002844:	4b0f      	ldr	r3, [pc, #60]	; (8002884 <HAL_I2S_MspInit+0x148>)
 8002846:	0018      	movs	r0, r3
 8002848:	f000 fe96 	bl	8003578 <HAL_DMA_Init>
 800284c:	1e03      	subs	r3, r0, #0
 800284e:	d001      	beq.n	8002854 <HAL_I2S_MspInit+0x118>
    {
      Error_Handler();
 8002850:	f7ff feba 	bl	80025c8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a0b      	ldr	r2, [pc, #44]	; (8002884 <HAL_I2S_MspInit+0x148>)
 8002858:	62da      	str	r2, [r3, #44]	; 0x2c
 800285a:	4b0a      	ldr	r3, [pc, #40]	; (8002884 <HAL_I2S_MspInit+0x148>)
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	629a      	str	r2, [r3, #40]	; 0x28

    /* I2S1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002860:	2200      	movs	r2, #0
 8002862:	2100      	movs	r1, #0
 8002864:	2019      	movs	r0, #25
 8002866:	f000 fe55 	bl	8003514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800286a:	2019      	movs	r0, #25
 800286c:	f000 fe67 	bl	800353e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002870:	46c0      	nop			; (mov r8, r8)
 8002872:	46bd      	mov	sp, r7
 8002874:	b00b      	add	sp, #44	; 0x2c
 8002876:	bd90      	pop	{r4, r7, pc}
 8002878:	40013000 	.word	0x40013000
 800287c:	40021000 	.word	0x40021000
 8002880:	50000400 	.word	0x50000400
 8002884:	2000543c 	.word	0x2000543c
 8002888:	40020008 	.word	0x40020008

0800288c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800288c:	b590      	push	{r4, r7, lr}
 800288e:	b08b      	sub	sp, #44	; 0x2c
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002894:	2314      	movs	r3, #20
 8002896:	18fb      	adds	r3, r7, r3
 8002898:	0018      	movs	r0, r3
 800289a:	2314      	movs	r3, #20
 800289c:	001a      	movs	r2, r3
 800289e:	2100      	movs	r1, #0
 80028a0:	f007 f862 	bl	8009968 <memset>
  if(hspi->Instance==SPI2)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a2b      	ldr	r2, [pc, #172]	; (8002958 <HAL_SPI_MspInit+0xcc>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d14f      	bne.n	800294e <HAL_SPI_MspInit+0xc2>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80028ae:	4b2b      	ldr	r3, [pc, #172]	; (800295c <HAL_SPI_MspInit+0xd0>)
 80028b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028b2:	4b2a      	ldr	r3, [pc, #168]	; (800295c <HAL_SPI_MspInit+0xd0>)
 80028b4:	2180      	movs	r1, #128	; 0x80
 80028b6:	01c9      	lsls	r1, r1, #7
 80028b8:	430a      	orrs	r2, r1
 80028ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80028bc:	4b27      	ldr	r3, [pc, #156]	; (800295c <HAL_SPI_MspInit+0xd0>)
 80028be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028c0:	2380      	movs	r3, #128	; 0x80
 80028c2:	01db      	lsls	r3, r3, #7
 80028c4:	4013      	ands	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]
 80028c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ca:	4b24      	ldr	r3, [pc, #144]	; (800295c <HAL_SPI_MspInit+0xd0>)
 80028cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028ce:	4b23      	ldr	r3, [pc, #140]	; (800295c <HAL_SPI_MspInit+0xd0>)
 80028d0:	2102      	movs	r1, #2
 80028d2:	430a      	orrs	r2, r1
 80028d4:	635a      	str	r2, [r3, #52]	; 0x34
 80028d6:	4b21      	ldr	r3, [pc, #132]	; (800295c <HAL_SPI_MspInit+0xd0>)
 80028d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028da:	2202      	movs	r2, #2
 80028dc:	4013      	ands	r3, r2
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB6     ------> SPI2_MISO
    PB7     ------> SPI2_MOSI
    PB8     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80028e2:	2114      	movs	r1, #20
 80028e4:	187b      	adds	r3, r7, r1
 80028e6:	2240      	movs	r2, #64	; 0x40
 80028e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ea:	187b      	adds	r3, r7, r1
 80028ec:	2202      	movs	r2, #2
 80028ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f0:	187b      	adds	r3, r7, r1
 80028f2:	2200      	movs	r2, #0
 80028f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f6:	187b      	adds	r3, r7, r1
 80028f8:	2200      	movs	r2, #0
 80028fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI2;
 80028fc:	187b      	adds	r3, r7, r1
 80028fe:	2204      	movs	r2, #4
 8002900:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002902:	000c      	movs	r4, r1
 8002904:	187b      	adds	r3, r7, r1
 8002906:	4a16      	ldr	r2, [pc, #88]	; (8002960 <HAL_SPI_MspInit+0xd4>)
 8002908:	0019      	movs	r1, r3
 800290a:	0010      	movs	r0, r2
 800290c:	f001 f838 	bl	8003980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002910:	0021      	movs	r1, r4
 8002912:	187b      	adds	r3, r7, r1
 8002914:	22c0      	movs	r2, #192	; 0xc0
 8002916:	0052      	lsls	r2, r2, #1
 8002918:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291a:	187b      	adds	r3, r7, r1
 800291c:	2202      	movs	r2, #2
 800291e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002920:	187b      	adds	r3, r7, r1
 8002922:	2200      	movs	r2, #0
 8002924:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002926:	187b      	adds	r3, r7, r1
 8002928:	2200      	movs	r2, #0
 800292a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 800292c:	187b      	adds	r3, r7, r1
 800292e:	2201      	movs	r2, #1
 8002930:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002932:	187b      	adds	r3, r7, r1
 8002934:	4a0a      	ldr	r2, [pc, #40]	; (8002960 <HAL_SPI_MspInit+0xd4>)
 8002936:	0019      	movs	r1, r3
 8002938:	0010      	movs	r0, r2
 800293a:	f001 f821 	bl	8003980 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800293e:	2200      	movs	r2, #0
 8002940:	2100      	movs	r1, #0
 8002942:	201a      	movs	r0, #26
 8002944:	f000 fde6 	bl	8003514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002948:	201a      	movs	r0, #26
 800294a:	f000 fdf8 	bl	800353e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800294e:	46c0      	nop			; (mov r8, r8)
 8002950:	46bd      	mov	sp, r7
 8002952:	b00b      	add	sp, #44	; 0x2c
 8002954:	bd90      	pop	{r4, r7, pc}
 8002956:	46c0      	nop			; (mov r8, r8)
 8002958:	40003800 	.word	0x40003800
 800295c:	40021000 	.word	0x40021000
 8002960:	50000400 	.word	0x50000400

08002964 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a0a      	ldr	r2, [pc, #40]	; (800299c <HAL_TIM_Base_MspInit+0x38>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d10d      	bne.n	8002992 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002976:	4b0a      	ldr	r3, [pc, #40]	; (80029a0 <HAL_TIM_Base_MspInit+0x3c>)
 8002978:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800297a:	4b09      	ldr	r3, [pc, #36]	; (80029a0 <HAL_TIM_Base_MspInit+0x3c>)
 800297c:	2180      	movs	r1, #128	; 0x80
 800297e:	0109      	lsls	r1, r1, #4
 8002980:	430a      	orrs	r2, r1
 8002982:	641a      	str	r2, [r3, #64]	; 0x40
 8002984:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <HAL_TIM_Base_MspInit+0x3c>)
 8002986:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002988:	2380      	movs	r3, #128	; 0x80
 800298a:	011b      	lsls	r3, r3, #4
 800298c:	4013      	ands	r3, r2
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002992:	46c0      	nop			; (mov r8, r8)
 8002994:	46bd      	mov	sp, r7
 8002996:	b004      	add	sp, #16
 8002998:	bd80      	pop	{r7, pc}
 800299a:	46c0      	nop			; (mov r8, r8)
 800299c:	40012c00 	.word	0x40012c00
 80029a0:	40021000 	.word	0x40021000

080029a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b088      	sub	sp, #32
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ac:	230c      	movs	r3, #12
 80029ae:	18fb      	adds	r3, r7, r3
 80029b0:	0018      	movs	r0, r3
 80029b2:	2314      	movs	r3, #20
 80029b4:	001a      	movs	r2, r3
 80029b6:	2100      	movs	r1, #0
 80029b8:	f006 ffd6 	bl	8009968 <memset>
  if(htim->Instance==TIM1)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a15      	ldr	r2, [pc, #84]	; (8002a18 <HAL_TIM_MspPostInit+0x74>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d123      	bne.n	8002a0e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c6:	4b15      	ldr	r3, [pc, #84]	; (8002a1c <HAL_TIM_MspPostInit+0x78>)
 80029c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029ca:	4b14      	ldr	r3, [pc, #80]	; (8002a1c <HAL_TIM_MspPostInit+0x78>)
 80029cc:	2101      	movs	r1, #1
 80029ce:	430a      	orrs	r2, r1
 80029d0:	635a      	str	r2, [r3, #52]	; 0x34
 80029d2:	4b12      	ldr	r3, [pc, #72]	; (8002a1c <HAL_TIM_MspPostInit+0x78>)
 80029d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d6:	2201      	movs	r2, #1
 80029d8:	4013      	ands	r3, r2
 80029da:	60bb      	str	r3, [r7, #8]
 80029dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80029de:	210c      	movs	r1, #12
 80029e0:	187b      	adds	r3, r7, r1
 80029e2:	2280      	movs	r2, #128	; 0x80
 80029e4:	0052      	lsls	r2, r2, #1
 80029e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e8:	187b      	adds	r3, r7, r1
 80029ea:	2202      	movs	r2, #2
 80029ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80029ee:	187b      	adds	r3, r7, r1
 80029f0:	2202      	movs	r2, #2
 80029f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f4:	187b      	adds	r3, r7, r1
 80029f6:	2203      	movs	r2, #3
 80029f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80029fa:	187b      	adds	r3, r7, r1
 80029fc:	2202      	movs	r2, #2
 80029fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a00:	187a      	adds	r2, r7, r1
 8002a02:	23a0      	movs	r3, #160	; 0xa0
 8002a04:	05db      	lsls	r3, r3, #23
 8002a06:	0011      	movs	r1, r2
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f000 ffb9 	bl	8003980 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002a0e:	46c0      	nop			; (mov r8, r8)
 8002a10:	46bd      	mov	sp, r7
 8002a12:	b008      	add	sp, #32
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	46c0      	nop			; (mov r8, r8)
 8002a18:	40012c00 	.word	0x40012c00
 8002a1c:	40021000 	.word	0x40021000

08002a20 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8002a20:	b590      	push	{r4, r7, lr}
 8002a22:	b08b      	sub	sp, #44	; 0x2c
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a28:	2314      	movs	r3, #20
 8002a2a:	18fb      	adds	r3, r7, r3
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	2314      	movs	r3, #20
 8002a30:	001a      	movs	r2, r3
 8002a32:	2100      	movs	r1, #0
 8002a34:	f006 ff98 	bl	8009968 <memset>
  if(husart->Instance==USART3)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a30      	ldr	r2, [pc, #192]	; (8002b00 <HAL_USART_MspInit+0xe0>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d15a      	bne.n	8002af8 <HAL_USART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a42:	4b30      	ldr	r3, [pc, #192]	; (8002b04 <HAL_USART_MspInit+0xe4>)
 8002a44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a46:	4b2f      	ldr	r3, [pc, #188]	; (8002b04 <HAL_USART_MspInit+0xe4>)
 8002a48:	2180      	movs	r1, #128	; 0x80
 8002a4a:	02c9      	lsls	r1, r1, #11
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a50:	4b2c      	ldr	r3, [pc, #176]	; (8002b04 <HAL_USART_MspInit+0xe4>)
 8002a52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a54:	2380      	movs	r3, #128	; 0x80
 8002a56:	02db      	lsls	r3, r3, #11
 8002a58:	4013      	ands	r3, r2
 8002a5a:	613b      	str	r3, [r7, #16]
 8002a5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a5e:	4b29      	ldr	r3, [pc, #164]	; (8002b04 <HAL_USART_MspInit+0xe4>)
 8002a60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a62:	4b28      	ldr	r3, [pc, #160]	; (8002b04 <HAL_USART_MspInit+0xe4>)
 8002a64:	2101      	movs	r1, #1
 8002a66:	430a      	orrs	r2, r1
 8002a68:	635a      	str	r2, [r3, #52]	; 0x34
 8002a6a:	4b26      	ldr	r3, [pc, #152]	; (8002b04 <HAL_USART_MspInit+0xe4>)
 8002a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a6e:	2201      	movs	r2, #1
 8002a70:	4013      	ands	r3, r2
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a76:	4b23      	ldr	r3, [pc, #140]	; (8002b04 <HAL_USART_MspInit+0xe4>)
 8002a78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a7a:	4b22      	ldr	r3, [pc, #136]	; (8002b04 <HAL_USART_MspInit+0xe4>)
 8002a7c:	2102      	movs	r1, #2
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	635a      	str	r2, [r3, #52]	; 0x34
 8002a82:	4b20      	ldr	r3, [pc, #128]	; (8002b04 <HAL_USART_MspInit+0xe4>)
 8002a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a86:	2202      	movs	r2, #2
 8002a88:	4013      	ands	r3, r2
 8002a8a:	60bb      	str	r3, [r7, #8]
 8002a8c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA5     ------> USART3_TX
    PB0     ------> USART3_RX
    PB1     ------> USART3_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002a8e:	2414      	movs	r4, #20
 8002a90:	193b      	adds	r3, r7, r4
 8002a92:	2220      	movs	r2, #32
 8002a94:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a96:	193b      	adds	r3, r7, r4
 8002a98:	2202      	movs	r2, #2
 8002a9a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9c:	193b      	adds	r3, r7, r4
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa2:	193b      	adds	r3, r7, r4
 8002aa4:	2203      	movs	r2, #3
 8002aa6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8002aa8:	193b      	adds	r3, r7, r4
 8002aaa:	2204      	movs	r2, #4
 8002aac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aae:	193a      	adds	r2, r7, r4
 8002ab0:	23a0      	movs	r3, #160	; 0xa0
 8002ab2:	05db      	lsls	r3, r3, #23
 8002ab4:	0011      	movs	r1, r2
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	f000 ff62 	bl	8003980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002abc:	0021      	movs	r1, r4
 8002abe:	187b      	adds	r3, r7, r1
 8002ac0:	2203      	movs	r2, #3
 8002ac2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac4:	187b      	adds	r3, r7, r1
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aca:	187b      	adds	r3, r7, r1
 8002acc:	2200      	movs	r2, #0
 8002ace:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ad0:	187b      	adds	r3, r7, r1
 8002ad2:	2203      	movs	r2, #3
 8002ad4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8002ad6:	187b      	adds	r3, r7, r1
 8002ad8:	2204      	movs	r2, #4
 8002ada:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002adc:	187b      	adds	r3, r7, r1
 8002ade:	4a0a      	ldr	r2, [pc, #40]	; (8002b08 <HAL_USART_MspInit+0xe8>)
 8002ae0:	0019      	movs	r1, r3
 8002ae2:	0010      	movs	r0, r2
 8002ae4:	f000 ff4c 	bl	8003980 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 8002ae8:	2200      	movs	r2, #0
 8002aea:	2100      	movs	r1, #0
 8002aec:	201d      	movs	r0, #29
 8002aee:	f000 fd11 	bl	8003514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 8002af2:	201d      	movs	r0, #29
 8002af4:	f000 fd23 	bl	800353e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002af8:	46c0      	nop			; (mov r8, r8)
 8002afa:	46bd      	mov	sp, r7
 8002afc:	b00b      	add	sp, #44	; 0x2c
 8002afe:	bd90      	pop	{r4, r7, pc}
 8002b00:	40004800 	.word	0x40004800
 8002b04:	40021000 	.word	0x40021000
 8002b08:	50000400 	.word	0x50000400

08002b0c <LL_USART_IsActiveFlag_FE>:
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	69db      	ldr	r3, [r3, #28]
 8002b18:	2202      	movs	r2, #2
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d101      	bne.n	8002b24 <LL_USART_IsActiveFlag_FE+0x18>
 8002b20:	2301      	movs	r3, #1
 8002b22:	e000      	b.n	8002b26 <LL_USART_IsActiveFlag_FE+0x1a>
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	0018      	movs	r0, r3
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	b002      	add	sp, #8
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <LL_USART_IsActiveFlag_NE>:
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b082      	sub	sp, #8
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	2204      	movs	r2, #4
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d101      	bne.n	8002b46 <LL_USART_IsActiveFlag_NE+0x18>
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <LL_USART_IsActiveFlag_NE+0x1a>
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	0018      	movs	r0, r3
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	b002      	add	sp, #8
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <LL_USART_IsActiveFlag_ORE>:
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	69db      	ldr	r3, [r3, #28]
 8002b5c:	2208      	movs	r2, #8
 8002b5e:	4013      	ands	r3, r2
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	d101      	bne.n	8002b68 <LL_USART_IsActiveFlag_ORE+0x18>
 8002b64:	2301      	movs	r3, #1
 8002b66:	e000      	b.n	8002b6a <LL_USART_IsActiveFlag_ORE+0x1a>
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	b002      	add	sp, #8
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b082      	sub	sp, #8
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	69db      	ldr	r3, [r3, #28]
 8002b7e:	2220      	movs	r2, #32
 8002b80:	4013      	ands	r3, r2
 8002b82:	2b20      	cmp	r3, #32
 8002b84:	d101      	bne.n	8002b8a <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8002b86:	2301      	movs	r3, #1
 8002b88:	e000      	b.n	8002b8c <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	b002      	add	sp, #8
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <LL_USART_IsEnabledIT_RXNE_RXFNE>:
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2220      	movs	r2, #32
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	2b20      	cmp	r3, #32
 8002ba6:	d101      	bne.n	8002bac <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e000      	b.n	8002bae <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	0018      	movs	r0, r3
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	b002      	add	sp, #8
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bc4:	e7fe      	b.n	8002bc4 <HardFault_Handler+0x4>

08002bc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002bca:	46c0      	nop			; (mov r8, r8)
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bd4:	46c0      	nop			; (mov r8, r8)
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bde:	f000 f93b 	bl	8002e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002be2:	46c0      	nop			; (mov r8, r8)
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002bec:	4b03      	ldr	r3, [pc, #12]	; (8002bfc <DMA1_Channel1_IRQHandler+0x14>)
 8002bee:	0018      	movs	r0, r3
 8002bf0:	f000 fdb8 	bl	8003764 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002bf4:	46c0      	nop			; (mov r8, r8)
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	46c0      	nop			; (mov r8, r8)
 8002bfc:	2000543c 	.word	0x2000543c

08002c00 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8002c04:	4b09      	ldr	r3, [pc, #36]	; (8002c2c <I2C1_IRQHandler+0x2c>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	699a      	ldr	r2, [r3, #24]
 8002c0a:	23e0      	movs	r3, #224	; 0xe0
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	4013      	ands	r3, r2
 8002c10:	d004      	beq.n	8002c1c <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8002c12:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <I2C1_IRQHandler+0x2c>)
 8002c14:	0018      	movs	r0, r3
 8002c16:	f001 f8c7 	bl	8003da8 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8002c1a:	e003      	b.n	8002c24 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8002c1c:	4b03      	ldr	r3, [pc, #12]	; (8002c2c <I2C1_IRQHandler+0x2c>)
 8002c1e:	0018      	movs	r0, r3
 8002c20:	f001 f8a8 	bl	8003d74 <HAL_I2C_EV_IRQHandler>
}
 8002c24:	46c0      	nop			; (mov r8, r8)
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	46c0      	nop			; (mov r8, r8)
 8002c2c:	2000521c 	.word	0x2000521c

08002c30 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s1);
 8002c34:	4b03      	ldr	r3, [pc, #12]	; (8002c44 <SPI1_IRQHandler+0x14>)
 8002c36:	0018      	movs	r0, r3
 8002c38:	f002 f834 	bl	8004ca4 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002c3c:	46c0      	nop			; (mov r8, r8)
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	46c0      	nop			; (mov r8, r8)
 8002c44:	20005378 	.word	0x20005378

08002c48 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002c4c:	4b03      	ldr	r3, [pc, #12]	; (8002c5c <SPI2_IRQHandler+0x14>)
 8002c4e:	0018      	movs	r0, r3
 8002c50:	f004 f81e 	bl	8006c90 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002c54:	46c0      	nop			; (mov r8, r8)
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	46c0      	nop			; (mov r8, r8)
 8002c5c:	200051a4 	.word	0x200051a4

08002c60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART2->ICR|=USART_ICR_ORECF;
 8002c64:	4b25      	ldr	r3, [pc, #148]	; (8002cfc <USART2_IRQHandler+0x9c>)
 8002c66:	6a1a      	ldr	r2, [r3, #32]
 8002c68:	4b24      	ldr	r3, [pc, #144]	; (8002cfc <USART2_IRQHandler+0x9c>)
 8002c6a:	2108      	movs	r1, #8
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_FECF;
 8002c70:	4b22      	ldr	r3, [pc, #136]	; (8002cfc <USART2_IRQHandler+0x9c>)
 8002c72:	6a1a      	ldr	r2, [r3, #32]
 8002c74:	4b21      	ldr	r3, [pc, #132]	; (8002cfc <USART2_IRQHandler+0x9c>)
 8002c76:	2102      	movs	r1, #2
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_NECF;
 8002c7c:	4b1f      	ldr	r3, [pc, #124]	; (8002cfc <USART2_IRQHandler+0x9c>)
 8002c7e:	6a1a      	ldr	r2, [r3, #32]
 8002c80:	4b1e      	ldr	r3, [pc, #120]	; (8002cfc <USART2_IRQHandler+0x9c>)
 8002c82:	2104      	movs	r1, #4
 8002c84:	430a      	orrs	r2, r1
 8002c86:	621a      	str	r2, [r3, #32]
	if(LL_USART_IsActiveFlag_RXNE(USART2) && LL_USART_IsEnabledIT_RXNE(USART2))
 8002c88:	4b1c      	ldr	r3, [pc, #112]	; (8002cfc <USART2_IRQHandler+0x9c>)
 8002c8a:	0018      	movs	r0, r3
 8002c8c:	f7ff ff71 	bl	8002b72 <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8002c90:	1e03      	subs	r3, r0, #0
 8002c92:	d009      	beq.n	8002ca8 <USART2_IRQHandler+0x48>
 8002c94:	4b19      	ldr	r3, [pc, #100]	; (8002cfc <USART2_IRQHandler+0x9c>)
 8002c96:	0018      	movs	r0, r3
 8002c98:	f7ff ff7c 	bl	8002b94 <LL_USART_IsEnabledIT_RXNE_RXFNE>
 8002c9c:	1e03      	subs	r3, r0, #0
 8002c9e:	d003      	beq.n	8002ca8 <USART2_IRQHandler+0x48>
	  {
	    USART2_RX_Callback();// launching the receiving callback function //LL implentation
 8002ca0:	f7fe f948 	bl	8000f34 <USART2_RX_Callback>
	  {
 8002ca4:	46c0      	nop			; (mov r8, r8)
	  }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002ca6:	e025      	b.n	8002cf4 <USART2_IRQHandler+0x94>
		  USART2->ICR|=USART_ICR_ORECF;
 8002ca8:	4b14      	ldr	r3, [pc, #80]	; (8002cfc <USART2_IRQHandler+0x9c>)
 8002caa:	6a1a      	ldr	r2, [r3, #32]
 8002cac:	4b13      	ldr	r3, [pc, #76]	; (8002cfc <USART2_IRQHandler+0x9c>)
 8002cae:	2108      	movs	r1, #8
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	621a      	str	r2, [r3, #32]
	    if(LL_USART_IsActiveFlag_ORE(USART2))//clear the overrun flag by reading from RDR
 8002cb4:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <USART2_IRQHandler+0x9c>)
 8002cb6:	0018      	movs	r0, r3
 8002cb8:	f7ff ff4a 	bl	8002b50 <LL_USART_IsActiveFlag_ORE>
 8002cbc:	1e03      	subs	r3, r0, #0
 8002cbe:	d008      	beq.n	8002cd2 <USART2_IRQHandler+0x72>
	    	USART2->ICR|=USART_ICR_ORECF;
 8002cc0:	4b0e      	ldr	r3, [pc, #56]	; (8002cfc <USART2_IRQHandler+0x9c>)
 8002cc2:	6a1a      	ldr	r2, [r3, #32]
 8002cc4:	4b0d      	ldr	r3, [pc, #52]	; (8002cfc <USART2_IRQHandler+0x9c>)
 8002cc6:	2108      	movs	r1, #8
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	621a      	str	r2, [r3, #32]
	      (void) USART2->RDR;
 8002ccc:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <USART2_IRQHandler+0x9c>)
 8002cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002cd0:	e010      	b.n	8002cf4 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_FE(USART2))//clear another flag by reading from RDR
 8002cd2:	4b0a      	ldr	r3, [pc, #40]	; (8002cfc <USART2_IRQHandler+0x9c>)
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	f7ff ff19 	bl	8002b0c <LL_USART_IsActiveFlag_FE>
 8002cda:	1e03      	subs	r3, r0, #0
 8002cdc:	d002      	beq.n	8002ce4 <USART2_IRQHandler+0x84>
	      (void) USART2->RDR;
 8002cde:	4b07      	ldr	r3, [pc, #28]	; (8002cfc <USART2_IRQHandler+0x9c>)
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002ce2:	e007      	b.n	8002cf4 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_NE(USART2))//clear another flag by reading from RDR
 8002ce4:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <USART2_IRQHandler+0x9c>)
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	f7ff ff21 	bl	8002b2e <LL_USART_IsActiveFlag_NE>
 8002cec:	1e03      	subs	r3, r0, #0
 8002cee:	d001      	beq.n	8002cf4 <USART2_IRQHandler+0x94>
	      (void) USART2->RDR;
 8002cf0:	4b02      	ldr	r3, [pc, #8]	; (8002cfc <USART2_IRQHandler+0x9c>)
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002cf4:	46c0      	nop			; (mov r8, r8)
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	46c0      	nop			; (mov r8, r8)
 8002cfc:	40004400 	.word	0x40004400

08002d00 <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_USART_IRQHandler(&husart3);
 8002d04:	4b03      	ldr	r3, [pc, #12]	; (8002d14 <USART3_4_LPUART1_IRQHandler+0x14>)
 8002d06:	0018      	movs	r0, r3
 8002d08:	f005 fcc2 	bl	8008690 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 8002d0c:	46c0      	nop			; (mov r8, r8)
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	46c0      	nop			; (mov r8, r8)
 8002d14:	200052b8 	.word	0x200052b8

08002d18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d1c:	4b03      	ldr	r3, [pc, #12]	; (8002d2c <SystemInit+0x14>)
 8002d1e:	2280      	movs	r2, #128	; 0x80
 8002d20:	0512      	lsls	r2, r2, #20
 8002d22:	609a      	str	r2, [r3, #8]
#endif
}
 8002d24:	46c0      	nop			; (mov r8, r8)
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	46c0      	nop			; (mov r8, r8)
 8002d2c:	e000ed00 	.word	0xe000ed00

08002d30 <Reset_Handler>:
 8002d30:	480d      	ldr	r0, [pc, #52]	; (8002d68 <LoopForever+0x2>)
 8002d32:	4685      	mov	sp, r0
 8002d34:	f7ff fff0 	bl	8002d18 <SystemInit>
 8002d38:	480c      	ldr	r0, [pc, #48]	; (8002d6c <LoopForever+0x6>)
 8002d3a:	490d      	ldr	r1, [pc, #52]	; (8002d70 <LoopForever+0xa>)
 8002d3c:	4a0d      	ldr	r2, [pc, #52]	; (8002d74 <LoopForever+0xe>)
 8002d3e:	2300      	movs	r3, #0
 8002d40:	e002      	b.n	8002d48 <LoopCopyDataInit>

08002d42 <CopyDataInit>:
 8002d42:	58d4      	ldr	r4, [r2, r3]
 8002d44:	50c4      	str	r4, [r0, r3]
 8002d46:	3304      	adds	r3, #4

08002d48 <LoopCopyDataInit>:
 8002d48:	18c4      	adds	r4, r0, r3
 8002d4a:	428c      	cmp	r4, r1
 8002d4c:	d3f9      	bcc.n	8002d42 <CopyDataInit>
 8002d4e:	4a0a      	ldr	r2, [pc, #40]	; (8002d78 <LoopForever+0x12>)
 8002d50:	4c0a      	ldr	r4, [pc, #40]	; (8002d7c <LoopForever+0x16>)
 8002d52:	2300      	movs	r3, #0
 8002d54:	e001      	b.n	8002d5a <LoopFillZerobss>

08002d56 <FillZerobss>:
 8002d56:	6013      	str	r3, [r2, #0]
 8002d58:	3204      	adds	r2, #4

08002d5a <LoopFillZerobss>:
 8002d5a:	42a2      	cmp	r2, r4
 8002d5c:	d3fb      	bcc.n	8002d56 <FillZerobss>
 8002d5e:	f006 fddf 	bl	8009920 <__libc_init_array>
 8002d62:	f7fd fbd9 	bl	8000518 <main>

08002d66 <LoopForever>:
 8002d66:	e7fe      	b.n	8002d66 <LoopForever>
 8002d68:	20009000 	.word	0x20009000
 8002d6c:	20000000 	.word	0x20000000
 8002d70:	20005140 	.word	0x20005140
 8002d74:	08009a7c 	.word	0x08009a7c
 8002d78:	20005140 	.word	0x20005140
 8002d7c:	200054c0 	.word	0x200054c0

08002d80 <ADC1_COMP_IRQHandler>:
 8002d80:	e7fe      	b.n	8002d80 <ADC1_COMP_IRQHandler>
	...

08002d84 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d8a:	1dfb      	adds	r3, r7, #7
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d90:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <HAL_Init+0x3c>)
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	4b0a      	ldr	r3, [pc, #40]	; (8002dc0 <HAL_Init+0x3c>)
 8002d96:	2180      	movs	r1, #128	; 0x80
 8002d98:	0049      	lsls	r1, r1, #1
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d9e:	2000      	movs	r0, #0
 8002da0:	f000 f810 	bl	8002dc4 <HAL_InitTick>
 8002da4:	1e03      	subs	r3, r0, #0
 8002da6:	d003      	beq.n	8002db0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002da8:	1dfb      	adds	r3, r7, #7
 8002daa:	2201      	movs	r2, #1
 8002dac:	701a      	strb	r2, [r3, #0]
 8002dae:	e001      	b.n	8002db4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002db0:	f7ff fc10 	bl	80025d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002db4:	1dfb      	adds	r3, r7, #7
 8002db6:	781b      	ldrb	r3, [r3, #0]
}
 8002db8:	0018      	movs	r0, r3
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	b002      	add	sp, #8
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40022000 	.word	0x40022000

08002dc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dc4:	b590      	push	{r4, r7, lr}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002dcc:	230f      	movs	r3, #15
 8002dce:	18fb      	adds	r3, r7, r3
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002dd4:	4b1d      	ldr	r3, [pc, #116]	; (8002e4c <HAL_InitTick+0x88>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d02b      	beq.n	8002e34 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002ddc:	4b1c      	ldr	r3, [pc, #112]	; (8002e50 <HAL_InitTick+0x8c>)
 8002dde:	681c      	ldr	r4, [r3, #0]
 8002de0:	4b1a      	ldr	r3, [pc, #104]	; (8002e4c <HAL_InitTick+0x88>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	0019      	movs	r1, r3
 8002de6:	23fa      	movs	r3, #250	; 0xfa
 8002de8:	0098      	lsls	r0, r3, #2
 8002dea:	f7fd f98b 	bl	8000104 <__udivsi3>
 8002dee:	0003      	movs	r3, r0
 8002df0:	0019      	movs	r1, r3
 8002df2:	0020      	movs	r0, r4
 8002df4:	f7fd f986 	bl	8000104 <__udivsi3>
 8002df8:	0003      	movs	r3, r0
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	f000 fbaf 	bl	800355e <HAL_SYSTICK_Config>
 8002e00:	1e03      	subs	r3, r0, #0
 8002e02:	d112      	bne.n	8002e2a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b03      	cmp	r3, #3
 8002e08:	d80a      	bhi.n	8002e20 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	425b      	negs	r3, r3
 8002e10:	2200      	movs	r2, #0
 8002e12:	0018      	movs	r0, r3
 8002e14:	f000 fb7e 	bl	8003514 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e18:	4b0e      	ldr	r3, [pc, #56]	; (8002e54 <HAL_InitTick+0x90>)
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	e00d      	b.n	8002e3c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002e20:	230f      	movs	r3, #15
 8002e22:	18fb      	adds	r3, r7, r3
 8002e24:	2201      	movs	r2, #1
 8002e26:	701a      	strb	r2, [r3, #0]
 8002e28:	e008      	b.n	8002e3c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002e2a:	230f      	movs	r3, #15
 8002e2c:	18fb      	adds	r3, r7, r3
 8002e2e:	2201      	movs	r2, #1
 8002e30:	701a      	strb	r2, [r3, #0]
 8002e32:	e003      	b.n	8002e3c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e34:	230f      	movs	r3, #15
 8002e36:	18fb      	adds	r3, r7, r3
 8002e38:	2201      	movs	r2, #1
 8002e3a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002e3c:	230f      	movs	r3, #15
 8002e3e:	18fb      	adds	r3, r7, r3
 8002e40:	781b      	ldrb	r3, [r3, #0]
}
 8002e42:	0018      	movs	r0, r3
 8002e44:	46bd      	mov	sp, r7
 8002e46:	b005      	add	sp, #20
 8002e48:	bd90      	pop	{r4, r7, pc}
 8002e4a:	46c0      	nop			; (mov r8, r8)
 8002e4c:	2000513c 	.word	0x2000513c
 8002e50:	20005134 	.word	0x20005134
 8002e54:	20005138 	.word	0x20005138

08002e58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e5c:	4b05      	ldr	r3, [pc, #20]	; (8002e74 <HAL_IncTick+0x1c>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	001a      	movs	r2, r3
 8002e62:	4b05      	ldr	r3, [pc, #20]	; (8002e78 <HAL_IncTick+0x20>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	18d2      	adds	r2, r2, r3
 8002e68:	4b03      	ldr	r3, [pc, #12]	; (8002e78 <HAL_IncTick+0x20>)
 8002e6a:	601a      	str	r2, [r3, #0]
}
 8002e6c:	46c0      	nop			; (mov r8, r8)
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	46c0      	nop			; (mov r8, r8)
 8002e74:	2000513c 	.word	0x2000513c
 8002e78:	200054bc 	.word	0x200054bc

08002e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e80:	4b02      	ldr	r3, [pc, #8]	; (8002e8c <HAL_GetTick+0x10>)
 8002e82:	681b      	ldr	r3, [r3, #0]
}
 8002e84:	0018      	movs	r0, r3
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	46c0      	nop			; (mov r8, r8)
 8002e8c:	200054bc 	.word	0x200054bc

08002e90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e98:	f7ff fff0 	bl	8002e7c <HAL_GetTick>
 8002e9c:	0003      	movs	r3, r0
 8002e9e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	d005      	beq.n	8002eb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eaa:	4b09      	ldr	r3, [pc, #36]	; (8002ed0 <HAL_Delay+0x40>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	001a      	movs	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	189b      	adds	r3, r3, r2
 8002eb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002eb6:	46c0      	nop			; (mov r8, r8)
 8002eb8:	f7ff ffe0 	bl	8002e7c <HAL_GetTick>
 8002ebc:	0002      	movs	r2, r0
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d8f7      	bhi.n	8002eb8 <HAL_Delay+0x28>
  {
  }
}
 8002ec8:	46c0      	nop			; (mov r8, r8)
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	b004      	add	sp, #16
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	2000513c 	.word	0x2000513c

08002ed4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8002edc:	4b06      	ldr	r3, [pc, #24]	; (8002ef8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a06      	ldr	r2, [pc, #24]	; (8002efc <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	0019      	movs	r1, r3
 8002ee6:	4b04      	ldr	r3, [pc, #16]	; (8002ef8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	601a      	str	r2, [r3, #0]
}
 8002eee:	46c0      	nop			; (mov r8, r8)
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	b002      	add	sp, #8
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	46c0      	nop			; (mov r8, r8)
 8002ef8:	40010000 	.word	0x40010000
 8002efc:	fffff9ff 	.word	0xfffff9ff

08002f00 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002f08:	4a05      	ldr	r2, [pc, #20]	; (8002f20 <LL_EXTI_EnableIT_0_31+0x20>)
 8002f0a:	2380      	movs	r3, #128	; 0x80
 8002f0c:	58d2      	ldr	r2, [r2, r3]
 8002f0e:	4904      	ldr	r1, [pc, #16]	; (8002f20 <LL_EXTI_EnableIT_0_31+0x20>)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	2280      	movs	r2, #128	; 0x80
 8002f16:	508b      	str	r3, [r1, r2]
}
 8002f18:	46c0      	nop			; (mov r8, r8)
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	b002      	add	sp, #8
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40021800 	.word	0x40021800

08002f24 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002f2c:	4a06      	ldr	r2, [pc, #24]	; (8002f48 <LL_EXTI_DisableIT_0_31+0x24>)
 8002f2e:	2380      	movs	r3, #128	; 0x80
 8002f30:	58d3      	ldr	r3, [r2, r3]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	43d2      	mvns	r2, r2
 8002f36:	4904      	ldr	r1, [pc, #16]	; (8002f48 <LL_EXTI_DisableIT_0_31+0x24>)
 8002f38:	4013      	ands	r3, r2
 8002f3a:	2280      	movs	r2, #128	; 0x80
 8002f3c:	508b      	str	r3, [r1, r2]
}
 8002f3e:	46c0      	nop			; (mov r8, r8)
 8002f40:	46bd      	mov	sp, r7
 8002f42:	b002      	add	sp, #8
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	46c0      	nop			; (mov r8, r8)
 8002f48:	40021800 	.word	0x40021800

08002f4c <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8002f54:	4a05      	ldr	r2, [pc, #20]	; (8002f6c <LL_EXTI_EnableEvent_0_31+0x20>)
 8002f56:	2384      	movs	r3, #132	; 0x84
 8002f58:	58d2      	ldr	r2, [r2, r3]
 8002f5a:	4904      	ldr	r1, [pc, #16]	; (8002f6c <LL_EXTI_EnableEvent_0_31+0x20>)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	2284      	movs	r2, #132	; 0x84
 8002f62:	508b      	str	r3, [r1, r2]

}
 8002f64:	46c0      	nop			; (mov r8, r8)
 8002f66:	46bd      	mov	sp, r7
 8002f68:	b002      	add	sp, #8
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40021800 	.word	0x40021800

08002f70 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8002f78:	4a06      	ldr	r2, [pc, #24]	; (8002f94 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002f7a:	2384      	movs	r3, #132	; 0x84
 8002f7c:	58d3      	ldr	r3, [r2, r3]
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	43d2      	mvns	r2, r2
 8002f82:	4904      	ldr	r1, [pc, #16]	; (8002f94 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002f84:	4013      	ands	r3, r2
 8002f86:	2284      	movs	r2, #132	; 0x84
 8002f88:	508b      	str	r3, [r1, r2]
}
 8002f8a:	46c0      	nop			; (mov r8, r8)
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	b002      	add	sp, #8
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	46c0      	nop			; (mov r8, r8)
 8002f94:	40021800 	.word	0x40021800

08002f98 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002fa0:	4b04      	ldr	r3, [pc, #16]	; (8002fb4 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8002fa2:	6819      	ldr	r1, [r3, #0]
 8002fa4:	4b03      	ldr	r3, [pc, #12]	; (8002fb4 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	601a      	str	r2, [r3, #0]

}
 8002fac:	46c0      	nop			; (mov r8, r8)
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	b002      	add	sp, #8
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40021800 	.word	0x40021800

08002fb8 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8002fc0:	4b05      	ldr	r3, [pc, #20]	; (8002fd8 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	43d9      	mvns	r1, r3
 8002fc8:	4b03      	ldr	r3, [pc, #12]	; (8002fd8 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8002fca:	400a      	ands	r2, r1
 8002fcc:	601a      	str	r2, [r3, #0]

}
 8002fce:	46c0      	nop			; (mov r8, r8)
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	b002      	add	sp, #8
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	46c0      	nop			; (mov r8, r8)
 8002fd8:	40021800 	.word	0x40021800

08002fdc <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8002fe4:	4b04      	ldr	r3, [pc, #16]	; (8002ff8 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8002fe6:	6859      	ldr	r1, [r3, #4]
 8002fe8:	4b03      	ldr	r3, [pc, #12]	; (8002ff8 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	430a      	orrs	r2, r1
 8002fee:	605a      	str	r2, [r3, #4]
}
 8002ff0:	46c0      	nop			; (mov r8, r8)
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	b002      	add	sp, #8
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	40021800 	.word	0x40021800

08002ffc <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8003004:	4b05      	ldr	r3, [pc, #20]	; (800301c <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	43d9      	mvns	r1, r3
 800300c:	4b03      	ldr	r3, [pc, #12]	; (800301c <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800300e:	400a      	ands	r2, r1
 8003010:	605a      	str	r2, [r3, #4]
}
 8003012:	46c0      	nop			; (mov r8, r8)
 8003014:	46bd      	mov	sp, r7
 8003016:	b002      	add	sp, #8
 8003018:	bd80      	pop	{r7, pc}
 800301a:	46c0      	nop			; (mov r8, r8)
 800301c:	40021800 	.word	0x40021800

08003020 <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 8003028:	4b03      	ldr	r3, [pc, #12]	; (8003038 <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	611a      	str	r2, [r3, #16]
}
 800302e:	46c0      	nop			; (mov r8, r8)
 8003030:	46bd      	mov	sp, r7
 8003032:	b002      	add	sp, #8
 8003034:	bd80      	pop	{r7, pc}
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	40021800 	.word	0x40021800

0800303c <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 8003044:	4b03      	ldr	r3, [pc, #12]	; (8003054 <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	60da      	str	r2, [r3, #12]
}
 800304a:	46c0      	nop			; (mov r8, r8)
 800304c:	46bd      	mov	sp, r7
 800304e:	b002      	add	sp, #8
 8003050:	bd80      	pop	{r7, pc}
 8003052:	46c0      	nop			; (mov r8, r8)
 8003054:	40021800 	.word	0x40021800

08003058 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b088      	sub	sp, #32
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8003060:	2300      	movs	r3, #0
 8003062:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8003064:	231f      	movs	r3, #31
 8003066:	18fb      	adds	r3, r7, r3
 8003068:	2200      	movs	r2, #0
 800306a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t * comp_common_odd;
  __IO uint32_t * comp_common_even;
#endif

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d104      	bne.n	800307c <HAL_COMP_Init+0x24>
  {
    status = HAL_ERROR;
 8003072:	231f      	movs	r3, #31
 8003074:	18fb      	adds	r3, r7, r3
 8003076:	2201      	movs	r2, #1
 8003078:	701a      	strb	r2, [r3, #0]
 800307a:	e13a      	b.n	80032f2 <HAL_COMP_Init+0x29a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	0fdb      	lsrs	r3, r3, #31
 8003084:	07da      	lsls	r2, r3, #31
 8003086:	2380      	movs	r3, #128	; 0x80
 8003088:	061b      	lsls	r3, r3, #24
 800308a:	429a      	cmp	r2, r3
 800308c:	d104      	bne.n	8003098 <HAL_COMP_Init+0x40>
  {
    status = HAL_ERROR;
 800308e:	231f      	movs	r3, #31
 8003090:	18fb      	adds	r3, r7, r3
 8003092:	2201      	movs	r2, #1
 8003094:	701a      	strb	r2, [r3, #0]
 8003096:	e12c      	b.n	80032f2 <HAL_COMP_Init+0x29a>
    if(hcomp->Init.WindowMode != COMP_WINDOWMODE_DISABLE)
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2229      	movs	r2, #41	; 0x29
 800309c:	5c9b      	ldrb	r3, [r3, r2]
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d10a      	bne.n	80030ba <HAL_COMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2228      	movs	r2, #40	; 0x28
 80030a8:	2100      	movs	r1, #0
 80030aa:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	0018      	movs	r0, r3
 80030b6:	f7ff fab5 	bl	8002624 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2230      	movs	r2, #48	; 0x30
 80030c2:	4013      	ands	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	69db      	ldr	r3, [r3, #28]
 80030e0:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (  hcomp->Init.InputMinus
 80030e6:	4313      	orrs	r3, r2
 80030e8:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a83      	ldr	r2, [pc, #524]	; (8003300 <HAL_COMP_Init+0x2a8>)
 80030f2:	4013      	ands	r3, r2
 80030f4:	0019      	movs	r1, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(*comp_common_odd, COMP_CSR_WINOUT);
        CLEAR_BIT(*comp_common_even, COMP_CSR_WINOUT);
        break;
    }
#else
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	2380      	movs	r3, #128	; 0x80
 8003106:	011b      	lsls	r3, r3, #4
 8003108:	429a      	cmp	r2, r3
 800310a:	d10d      	bne.n	8003128 <HAL_COMP_Init+0xd0>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800310c:	4b7d      	ldr	r3, [pc, #500]	; (8003304 <HAL_COMP_Init+0x2ac>)
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	4b7c      	ldr	r3, [pc, #496]	; (8003304 <HAL_COMP_Init+0x2ac>)
 8003112:	497d      	ldr	r1, [pc, #500]	; (8003308 <HAL_COMP_Init+0x2b0>)
 8003114:	400a      	ands	r2, r1
 8003116:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8003118:	4b7a      	ldr	r3, [pc, #488]	; (8003304 <HAL_COMP_Init+0x2ac>)
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	4b79      	ldr	r3, [pc, #484]	; (8003304 <HAL_COMP_Init+0x2ac>)
 800311e:	2180      	movs	r1, #128	; 0x80
 8003120:	0109      	lsls	r1, r1, #4
 8003122:	430a      	orrs	r2, r1
 8003124:	605a      	str	r2, [r3, #4]
 8003126:	e01f      	b.n	8003168 <HAL_COMP_Init+0x110>
    }
    else if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	23c0      	movs	r3, #192	; 0xc0
 800312e:	015b      	lsls	r3, r3, #5
 8003130:	429a      	cmp	r2, r3
 8003132:	d10d      	bne.n	8003150 <HAL_COMP_Init+0xf8>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8003134:	4b73      	ldr	r3, [pc, #460]	; (8003304 <HAL_COMP_Init+0x2ac>)
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	4b72      	ldr	r3, [pc, #456]	; (8003304 <HAL_COMP_Init+0x2ac>)
 800313a:	2180      	movs	r1, #128	; 0x80
 800313c:	0109      	lsls	r1, r1, #4
 800313e:	430a      	orrs	r2, r1
 8003140:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8003142:	4b70      	ldr	r3, [pc, #448]	; (8003304 <HAL_COMP_Init+0x2ac>)
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	4b6f      	ldr	r3, [pc, #444]	; (8003304 <HAL_COMP_Init+0x2ac>)
 8003148:	496f      	ldr	r1, [pc, #444]	; (8003308 <HAL_COMP_Init+0x2b0>)
 800314a:	400a      	ands	r2, r1
 800314c:	605a      	str	r2, [r3, #4]
 800314e:	e00b      	b.n	8003168 <HAL_COMP_Init+0x110>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8003150:	4b6c      	ldr	r3, [pc, #432]	; (8003304 <HAL_COMP_Init+0x2ac>)
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	4b6b      	ldr	r3, [pc, #428]	; (8003304 <HAL_COMP_Init+0x2ac>)
 8003156:	496c      	ldr	r1, [pc, #432]	; (8003308 <HAL_COMP_Init+0x2b0>)
 8003158:	400a      	ands	r2, r1
 800315a:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800315c:	4b69      	ldr	r3, [pc, #420]	; (8003304 <HAL_COMP_Init+0x2ac>)
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	4b68      	ldr	r3, [pc, #416]	; (8003304 <HAL_COMP_Init+0x2ac>)
 8003162:	4969      	ldr	r1, [pc, #420]	; (8003308 <HAL_COMP_Init+0x2b0>)
 8003164:	400a      	ands	r2, r1
 8003166:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	2280      	movs	r2, #128	; 0x80
 800316e:	01d2      	lsls	r2, r2, #7
 8003170:	4293      	cmp	r3, r2
 8003172:	d006      	beq.n	8003182 <HAL_COMP_Init+0x12a>
 8003174:	22a0      	movs	r2, #160	; 0xa0
 8003176:	01d2      	lsls	r2, r2, #7
 8003178:	4293      	cmp	r3, r2
 800317a:	d010      	beq.n	800319e <HAL_COMP_Init+0x146>
 800317c:	2b01      	cmp	r3, #1
 800317e:	d01c      	beq.n	80031ba <HAL_COMP_Init+0x162>
 8003180:	e02a      	b.n	80031d8 <HAL_COMP_Init+0x180>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8003182:	4b60      	ldr	r3, [pc, #384]	; (8003304 <HAL_COMP_Init+0x2ac>)
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	4b5f      	ldr	r3, [pc, #380]	; (8003304 <HAL_COMP_Init+0x2ac>)
 8003188:	2180      	movs	r1, #128	; 0x80
 800318a:	01c9      	lsls	r1, r1, #7
 800318c:	430a      	orrs	r2, r1
 800318e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8003190:	4b5c      	ldr	r3, [pc, #368]	; (8003304 <HAL_COMP_Init+0x2ac>)
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	4b5b      	ldr	r3, [pc, #364]	; (8003304 <HAL_COMP_Init+0x2ac>)
 8003196:	495d      	ldr	r1, [pc, #372]	; (800330c <HAL_COMP_Init+0x2b4>)
 8003198:	400a      	ands	r2, r1
 800319a:	605a      	str	r2, [r3, #4]
        break;
 800319c:	e029      	b.n	80031f2 <HAL_COMP_Init+0x19a>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800319e:	4b59      	ldr	r3, [pc, #356]	; (8003304 <HAL_COMP_Init+0x2ac>)
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	4b58      	ldr	r3, [pc, #352]	; (8003304 <HAL_COMP_Init+0x2ac>)
 80031a4:	4959      	ldr	r1, [pc, #356]	; (800330c <HAL_COMP_Init+0x2b4>)
 80031a6:	400a      	ands	r2, r1
 80031a8:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80031aa:	4b56      	ldr	r3, [pc, #344]	; (8003304 <HAL_COMP_Init+0x2ac>)
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	4b55      	ldr	r3, [pc, #340]	; (8003304 <HAL_COMP_Init+0x2ac>)
 80031b0:	2180      	movs	r1, #128	; 0x80
 80031b2:	01c9      	lsls	r1, r1, #7
 80031b4:	430a      	orrs	r2, r1
 80031b6:	605a      	str	r2, [r3, #4]
        break;
 80031b8:	e01b      	b.n	80031f2 <HAL_COMP_Init+0x19a>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80031ba:	4b52      	ldr	r3, [pc, #328]	; (8003304 <HAL_COMP_Init+0x2ac>)
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	4b51      	ldr	r3, [pc, #324]	; (8003304 <HAL_COMP_Init+0x2ac>)
 80031c0:	2180      	movs	r1, #128	; 0x80
 80031c2:	01c9      	lsls	r1, r1, #7
 80031c4:	430a      	orrs	r2, r1
 80031c6:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80031c8:	4b4e      	ldr	r3, [pc, #312]	; (8003304 <HAL_COMP_Init+0x2ac>)
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	4b4d      	ldr	r3, [pc, #308]	; (8003304 <HAL_COMP_Init+0x2ac>)
 80031ce:	2180      	movs	r1, #128	; 0x80
 80031d0:	01c9      	lsls	r1, r1, #7
 80031d2:	430a      	orrs	r2, r1
 80031d4:	605a      	str	r2, [r3, #4]
        break;
 80031d6:	e00c      	b.n	80031f2 <HAL_COMP_Init+0x19a>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80031d8:	4b4a      	ldr	r3, [pc, #296]	; (8003304 <HAL_COMP_Init+0x2ac>)
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	4b49      	ldr	r3, [pc, #292]	; (8003304 <HAL_COMP_Init+0x2ac>)
 80031de:	494b      	ldr	r1, [pc, #300]	; (800330c <HAL_COMP_Init+0x2b4>)
 80031e0:	400a      	ands	r2, r1
 80031e2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80031e4:	4b47      	ldr	r3, [pc, #284]	; (8003304 <HAL_COMP_Init+0x2ac>)
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	4b46      	ldr	r3, [pc, #280]	; (8003304 <HAL_COMP_Init+0x2ac>)
 80031ea:	4948      	ldr	r1, [pc, #288]	; (800330c <HAL_COMP_Init+0x2b4>)
 80031ec:	400a      	ands	r2, r1
 80031ee:	605a      	str	r2, [r3, #4]
        break;
 80031f0:	46c0      	nop			; (mov r8, r8)
    }
#endif

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2230      	movs	r2, #48	; 0x30
 80031fa:	4013      	ands	r3, r2
 80031fc:	d016      	beq.n	800322c <HAL_COMP_Init+0x1d4>
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d113      	bne.n	800322c <HAL_COMP_Init+0x1d4>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003204:	4b42      	ldr	r3, [pc, #264]	; (8003310 <HAL_COMP_Init+0x2b8>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4942      	ldr	r1, [pc, #264]	; (8003314 <HAL_COMP_Init+0x2bc>)
 800320a:	0018      	movs	r0, r3
 800320c:	f7fc ff7a 	bl	8000104 <__udivsi3>
 8003210:	0003      	movs	r3, r0
 8003212:	001a      	movs	r2, r3
 8003214:	0013      	movs	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	189b      	adds	r3, r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800321e:	e002      	b.n	8003226 <HAL_COMP_Init+0x1ce>
      {
        wait_loop_index--;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	3b01      	subs	r3, #1
 8003224:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1f9      	bne.n	8003220 <HAL_COMP_Init+0x1c8>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a34      	ldr	r2, [pc, #208]	; (8003304 <HAL_COMP_Init+0x2ac>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d102      	bne.n	800323c <HAL_COMP_Init+0x1e4>
 8003236:	2380      	movs	r3, #128	; 0x80
 8003238:	029b      	lsls	r3, r3, #10
 800323a:	e001      	b.n	8003240 <HAL_COMP_Init+0x1e8>
 800323c:	2380      	movs	r3, #128	; 0x80
 800323e:	02db      	lsls	r3, r3, #11
 8003240:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003246:	2203      	movs	r2, #3
 8003248:	4013      	ands	r3, r2
 800324a:	d040      	beq.n	80032ce <HAL_COMP_Init+0x276>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003250:	2210      	movs	r2, #16
 8003252:	4013      	ands	r3, r2
 8003254:	d004      	beq.n	8003260 <HAL_COMP_Init+0x208>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	0018      	movs	r0, r3
 800325a:	f7ff fe9d 	bl	8002f98 <LL_EXTI_EnableRisingTrig_0_31>
 800325e:	e003      	b.n	8003268 <HAL_COMP_Init+0x210>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	0018      	movs	r0, r3
 8003264:	f7ff fea8 	bl	8002fb8 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326c:	2220      	movs	r2, #32
 800326e:	4013      	ands	r3, r2
 8003270:	d004      	beq.n	800327c <HAL_COMP_Init+0x224>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	0018      	movs	r0, r3
 8003276:	f7ff feb1 	bl	8002fdc <LL_EXTI_EnableFallingTrig_0_31>
 800327a:	e003      	b.n	8003284 <HAL_COMP_Init+0x22c>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	0018      	movs	r0, r3
 8003280:	f7ff febc 	bl	8002ffc <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	0018      	movs	r0, r3
 8003288:	f7ff fed8 	bl	800303c <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	0018      	movs	r0, r3
 8003290:	f7ff fec6 	bl	8003020 <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003298:	2202      	movs	r2, #2
 800329a:	4013      	ands	r3, r2
 800329c:	d004      	beq.n	80032a8 <HAL_COMP_Init+0x250>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	0018      	movs	r0, r3
 80032a2:	f7ff fe53 	bl	8002f4c <LL_EXTI_EnableEvent_0_31>
 80032a6:	e003      	b.n	80032b0 <HAL_COMP_Init+0x258>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	0018      	movs	r0, r3
 80032ac:	f7ff fe60 	bl	8002f70 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b4:	2201      	movs	r2, #1
 80032b6:	4013      	ands	r3, r2
 80032b8:	d004      	beq.n	80032c4 <HAL_COMP_Init+0x26c>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	0018      	movs	r0, r3
 80032be:	f7ff fe1f 	bl	8002f00 <LL_EXTI_EnableIT_0_31>
 80032c2:	e00c      	b.n	80032de <HAL_COMP_Init+0x286>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	0018      	movs	r0, r3
 80032c8:	f7ff fe2c 	bl	8002f24 <LL_EXTI_DisableIT_0_31>
 80032cc:	e007      	b.n	80032de <HAL_COMP_Init+0x286>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	0018      	movs	r0, r3
 80032d2:	f7ff fe4d 	bl	8002f70 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	0018      	movs	r0, r3
 80032da:	f7ff fe23 	bl	8002f24 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2229      	movs	r2, #41	; 0x29
 80032e2:	5c9b      	ldrb	r3, [r3, r2]
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d103      	bne.n	80032f2 <HAL_COMP_Init+0x29a>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2229      	movs	r2, #41	; 0x29
 80032ee:	2101      	movs	r1, #1
 80032f0:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80032f2:	231f      	movs	r3, #31
 80032f4:	18fb      	adds	r3, r7, r3
 80032f6:	781b      	ldrb	r3, [r3, #0]
}
 80032f8:	0018      	movs	r0, r3
 80032fa:	46bd      	mov	sp, r7
 80032fc:	b008      	add	sp, #32
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	fe00740f 	.word	0xfe00740f
 8003304:	40010200 	.word	0x40010200
 8003308:	fffff7ff 	.word	0xfffff7ff
 800330c:	ffffbfff 	.word	0xffffbfff
 8003310:	20005134 	.word	0x20005134
 8003314:	00030d40 	.word	0x00030d40

08003318 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8003320:	2300      	movs	r3, #0
 8003322:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003324:	230f      	movs	r3, #15
 8003326:	18fb      	adds	r3, r7, r3
 8003328:	2200      	movs	r2, #0
 800332a:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d104      	bne.n	800333c <HAL_COMP_Start+0x24>
  {
    status = HAL_ERROR;
 8003332:	230f      	movs	r3, #15
 8003334:	18fb      	adds	r3, r7, r3
 8003336:	2201      	movs	r2, #1
 8003338:	701a      	strb	r2, [r3, #0]
 800333a:	e034      	b.n	80033a6 <HAL_COMP_Start+0x8e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	0fdb      	lsrs	r3, r3, #31
 8003344:	07da      	lsls	r2, r3, #31
 8003346:	2380      	movs	r3, #128	; 0x80
 8003348:	061b      	lsls	r3, r3, #24
 800334a:	429a      	cmp	r2, r3
 800334c:	d104      	bne.n	8003358 <HAL_COMP_Start+0x40>
  {
    status = HAL_ERROR;
 800334e:	230f      	movs	r3, #15
 8003350:	18fb      	adds	r3, r7, r3
 8003352:	2201      	movs	r2, #1
 8003354:	701a      	strb	r2, [r3, #0]
 8003356:	e026      	b.n	80033a6 <HAL_COMP_Start+0x8e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2229      	movs	r2, #41	; 0x29
 800335c:	5c9b      	ldrb	r3, [r3, r2]
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b01      	cmp	r3, #1
 8003362:	d11c      	bne.n	800339e <HAL_COMP_Start+0x86>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2101      	movs	r1, #1
 8003370:	430a      	orrs	r2, r1
 8003372:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2229      	movs	r2, #41	; 0x29
 8003378:	2102      	movs	r1, #2
 800337a:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800337c:	4b0d      	ldr	r3, [pc, #52]	; (80033b4 <HAL_COMP_Start+0x9c>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	490d      	ldr	r1, [pc, #52]	; (80033b8 <HAL_COMP_Start+0xa0>)
 8003382:	0018      	movs	r0, r3
 8003384:	f7fc febe 	bl	8000104 <__udivsi3>
 8003388:	0003      	movs	r3, r0
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800338e:	e002      	b.n	8003396 <HAL_COMP_Start+0x7e>
      {
        wait_loop_index--;
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	3b01      	subs	r3, #1
 8003394:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1f9      	bne.n	8003390 <HAL_COMP_Start+0x78>
 800339c:	e003      	b.n	80033a6 <HAL_COMP_Start+0x8e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800339e:	230f      	movs	r3, #15
 80033a0:	18fb      	adds	r3, r7, r3
 80033a2:	2201      	movs	r2, #1
 80033a4:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80033a6:	230f      	movs	r3, #15
 80033a8:	18fb      	adds	r3, r7, r3
 80033aa:	781b      	ldrb	r3, [r3, #0]
}
 80033ac:	0018      	movs	r0, r3
 80033ae:	46bd      	mov	sp, r7
 80033b0:	b004      	add	sp, #16
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	20005134 	.word	0x20005134
 80033b8:	00030d40 	.word	0x00030d40

080033bc <__NVIC_EnableIRQ>:
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	0002      	movs	r2, r0
 80033c4:	1dfb      	adds	r3, r7, #7
 80033c6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80033c8:	1dfb      	adds	r3, r7, #7
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	2b7f      	cmp	r3, #127	; 0x7f
 80033ce:	d809      	bhi.n	80033e4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033d0:	1dfb      	adds	r3, r7, #7
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	001a      	movs	r2, r3
 80033d6:	231f      	movs	r3, #31
 80033d8:	401a      	ands	r2, r3
 80033da:	4b04      	ldr	r3, [pc, #16]	; (80033ec <__NVIC_EnableIRQ+0x30>)
 80033dc:	2101      	movs	r1, #1
 80033de:	4091      	lsls	r1, r2
 80033e0:	000a      	movs	r2, r1
 80033e2:	601a      	str	r2, [r3, #0]
}
 80033e4:	46c0      	nop			; (mov r8, r8)
 80033e6:	46bd      	mov	sp, r7
 80033e8:	b002      	add	sp, #8
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	e000e100 	.word	0xe000e100

080033f0 <__NVIC_SetPriority>:
{
 80033f0:	b590      	push	{r4, r7, lr}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	0002      	movs	r2, r0
 80033f8:	6039      	str	r1, [r7, #0]
 80033fa:	1dfb      	adds	r3, r7, #7
 80033fc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80033fe:	1dfb      	adds	r3, r7, #7
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	2b7f      	cmp	r3, #127	; 0x7f
 8003404:	d828      	bhi.n	8003458 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003406:	4a2f      	ldr	r2, [pc, #188]	; (80034c4 <__NVIC_SetPriority+0xd4>)
 8003408:	1dfb      	adds	r3, r7, #7
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	b25b      	sxtb	r3, r3
 800340e:	089b      	lsrs	r3, r3, #2
 8003410:	33c0      	adds	r3, #192	; 0xc0
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	589b      	ldr	r3, [r3, r2]
 8003416:	1dfa      	adds	r2, r7, #7
 8003418:	7812      	ldrb	r2, [r2, #0]
 800341a:	0011      	movs	r1, r2
 800341c:	2203      	movs	r2, #3
 800341e:	400a      	ands	r2, r1
 8003420:	00d2      	lsls	r2, r2, #3
 8003422:	21ff      	movs	r1, #255	; 0xff
 8003424:	4091      	lsls	r1, r2
 8003426:	000a      	movs	r2, r1
 8003428:	43d2      	mvns	r2, r2
 800342a:	401a      	ands	r2, r3
 800342c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	019b      	lsls	r3, r3, #6
 8003432:	22ff      	movs	r2, #255	; 0xff
 8003434:	401a      	ands	r2, r3
 8003436:	1dfb      	adds	r3, r7, #7
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	0018      	movs	r0, r3
 800343c:	2303      	movs	r3, #3
 800343e:	4003      	ands	r3, r0
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003444:	481f      	ldr	r0, [pc, #124]	; (80034c4 <__NVIC_SetPriority+0xd4>)
 8003446:	1dfb      	adds	r3, r7, #7
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	b25b      	sxtb	r3, r3
 800344c:	089b      	lsrs	r3, r3, #2
 800344e:	430a      	orrs	r2, r1
 8003450:	33c0      	adds	r3, #192	; 0xc0
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	501a      	str	r2, [r3, r0]
}
 8003456:	e031      	b.n	80034bc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003458:	4a1b      	ldr	r2, [pc, #108]	; (80034c8 <__NVIC_SetPriority+0xd8>)
 800345a:	1dfb      	adds	r3, r7, #7
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	0019      	movs	r1, r3
 8003460:	230f      	movs	r3, #15
 8003462:	400b      	ands	r3, r1
 8003464:	3b08      	subs	r3, #8
 8003466:	089b      	lsrs	r3, r3, #2
 8003468:	3306      	adds	r3, #6
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	18d3      	adds	r3, r2, r3
 800346e:	3304      	adds	r3, #4
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	1dfa      	adds	r2, r7, #7
 8003474:	7812      	ldrb	r2, [r2, #0]
 8003476:	0011      	movs	r1, r2
 8003478:	2203      	movs	r2, #3
 800347a:	400a      	ands	r2, r1
 800347c:	00d2      	lsls	r2, r2, #3
 800347e:	21ff      	movs	r1, #255	; 0xff
 8003480:	4091      	lsls	r1, r2
 8003482:	000a      	movs	r2, r1
 8003484:	43d2      	mvns	r2, r2
 8003486:	401a      	ands	r2, r3
 8003488:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	019b      	lsls	r3, r3, #6
 800348e:	22ff      	movs	r2, #255	; 0xff
 8003490:	401a      	ands	r2, r3
 8003492:	1dfb      	adds	r3, r7, #7
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	0018      	movs	r0, r3
 8003498:	2303      	movs	r3, #3
 800349a:	4003      	ands	r3, r0
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034a0:	4809      	ldr	r0, [pc, #36]	; (80034c8 <__NVIC_SetPriority+0xd8>)
 80034a2:	1dfb      	adds	r3, r7, #7
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	001c      	movs	r4, r3
 80034a8:	230f      	movs	r3, #15
 80034aa:	4023      	ands	r3, r4
 80034ac:	3b08      	subs	r3, #8
 80034ae:	089b      	lsrs	r3, r3, #2
 80034b0:	430a      	orrs	r2, r1
 80034b2:	3306      	adds	r3, #6
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	18c3      	adds	r3, r0, r3
 80034b8:	3304      	adds	r3, #4
 80034ba:	601a      	str	r2, [r3, #0]
}
 80034bc:	46c0      	nop			; (mov r8, r8)
 80034be:	46bd      	mov	sp, r7
 80034c0:	b003      	add	sp, #12
 80034c2:	bd90      	pop	{r4, r7, pc}
 80034c4:	e000e100 	.word	0xe000e100
 80034c8:	e000ed00 	.word	0xe000ed00

080034cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3b01      	subs	r3, #1
 80034d8:	4a0c      	ldr	r2, [pc, #48]	; (800350c <SysTick_Config+0x40>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d901      	bls.n	80034e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034de:	2301      	movs	r3, #1
 80034e0:	e010      	b.n	8003504 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034e2:	4b0b      	ldr	r3, [pc, #44]	; (8003510 <SysTick_Config+0x44>)
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	3a01      	subs	r2, #1
 80034e8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034ea:	2301      	movs	r3, #1
 80034ec:	425b      	negs	r3, r3
 80034ee:	2103      	movs	r1, #3
 80034f0:	0018      	movs	r0, r3
 80034f2:	f7ff ff7d 	bl	80033f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034f6:	4b06      	ldr	r3, [pc, #24]	; (8003510 <SysTick_Config+0x44>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034fc:	4b04      	ldr	r3, [pc, #16]	; (8003510 <SysTick_Config+0x44>)
 80034fe:	2207      	movs	r2, #7
 8003500:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003502:	2300      	movs	r3, #0
}
 8003504:	0018      	movs	r0, r3
 8003506:	46bd      	mov	sp, r7
 8003508:	b002      	add	sp, #8
 800350a:	bd80      	pop	{r7, pc}
 800350c:	00ffffff 	.word	0x00ffffff
 8003510:	e000e010 	.word	0xe000e010

08003514 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	60b9      	str	r1, [r7, #8]
 800351c:	607a      	str	r2, [r7, #4]
 800351e:	210f      	movs	r1, #15
 8003520:	187b      	adds	r3, r7, r1
 8003522:	1c02      	adds	r2, r0, #0
 8003524:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003526:	68ba      	ldr	r2, [r7, #8]
 8003528:	187b      	adds	r3, r7, r1
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	b25b      	sxtb	r3, r3
 800352e:	0011      	movs	r1, r2
 8003530:	0018      	movs	r0, r3
 8003532:	f7ff ff5d 	bl	80033f0 <__NVIC_SetPriority>
}
 8003536:	46c0      	nop			; (mov r8, r8)
 8003538:	46bd      	mov	sp, r7
 800353a:	b004      	add	sp, #16
 800353c:	bd80      	pop	{r7, pc}

0800353e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b082      	sub	sp, #8
 8003542:	af00      	add	r7, sp, #0
 8003544:	0002      	movs	r2, r0
 8003546:	1dfb      	adds	r3, r7, #7
 8003548:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800354a:	1dfb      	adds	r3, r7, #7
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	b25b      	sxtb	r3, r3
 8003550:	0018      	movs	r0, r3
 8003552:	f7ff ff33 	bl	80033bc <__NVIC_EnableIRQ>
}
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	46bd      	mov	sp, r7
 800355a:	b002      	add	sp, #8
 800355c:	bd80      	pop	{r7, pc}

0800355e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b082      	sub	sp, #8
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	0018      	movs	r0, r3
 800356a:	f7ff ffaf 	bl	80034cc <SysTick_Config>
 800356e:	0003      	movs	r3, r0
}
 8003570:	0018      	movs	r0, r3
 8003572:	46bd      	mov	sp, r7
 8003574:	b002      	add	sp, #8
 8003576:	bd80      	pop	{r7, pc}

08003578 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e077      	b.n	800367a <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a3d      	ldr	r2, [pc, #244]	; (8003684 <HAL_DMA_Init+0x10c>)
 8003590:	4694      	mov	ip, r2
 8003592:	4463      	add	r3, ip
 8003594:	2114      	movs	r1, #20
 8003596:	0018      	movs	r0, r3
 8003598:	f7fc fdb4 	bl	8000104 <__udivsi3>
 800359c:	0003      	movs	r3, r0
 800359e:	009a      	lsls	r2, r3, #2
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2225      	movs	r2, #37	; 0x25
 80035a8:	2102      	movs	r1, #2
 80035aa:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4934      	ldr	r1, [pc, #208]	; (8003688 <HAL_DMA_Init+0x110>)
 80035b8:	400a      	ands	r2, r1
 80035ba:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6819      	ldr	r1, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689a      	ldr	r2, [r3, #8]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	431a      	orrs	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	431a      	orrs	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	431a      	orrs	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	431a      	orrs	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	431a      	orrs	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	431a      	orrs	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	0018      	movs	r0, r3
 80035f6:	f000 f973 	bl	80038e0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	2380      	movs	r3, #128	; 0x80
 8003600:	01db      	lsls	r3, r3, #7
 8003602:	429a      	cmp	r2, r3
 8003604:	d102      	bne.n	800360c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003614:	213f      	movs	r1, #63	; 0x3f
 8003616:	400a      	ands	r2, r1
 8003618:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003622:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d011      	beq.n	8003650 <HAL_DMA_Init+0xd8>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2b04      	cmp	r3, #4
 8003632:	d80d      	bhi.n	8003650 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	0018      	movs	r0, r3
 8003638:	f000 f97e 	bl	8003938 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800364c:	605a      	str	r2, [r3, #4]
 800364e:	e008      	b.n	8003662 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2225      	movs	r2, #37	; 0x25
 800366c:	2101      	movs	r1, #1
 800366e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2224      	movs	r2, #36	; 0x24
 8003674:	2100      	movs	r1, #0
 8003676:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	0018      	movs	r0, r3
 800367c:	46bd      	mov	sp, r7
 800367e:	b002      	add	sp, #8
 8003680:	bd80      	pop	{r7, pc}
 8003682:	46c0      	nop			; (mov r8, r8)
 8003684:	bffdfff8 	.word	0xbffdfff8
 8003688:	ffff800f 	.word	0xffff800f

0800368c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003694:	230f      	movs	r3, #15
 8003696:	18fb      	adds	r3, r7, r3
 8003698:	2200      	movs	r2, #0
 800369a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2225      	movs	r2, #37	; 0x25
 80036a0:	5c9b      	ldrb	r3, [r3, r2]
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d007      	beq.n	80036b8 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2204      	movs	r2, #4
 80036ac:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80036ae:	230f      	movs	r3, #15
 80036b0:	18fb      	adds	r3, r7, r3
 80036b2:	2201      	movs	r2, #1
 80036b4:	701a      	strb	r2, [r3, #0]
 80036b6:	e049      	b.n	800374c <HAL_DMA_Abort_IT+0xc0>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	210e      	movs	r1, #14
 80036c4:	438a      	bics	r2, r1
 80036c6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2101      	movs	r1, #1
 80036d4:	438a      	bics	r2, r1
 80036d6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e2:	491e      	ldr	r1, [pc, #120]	; (800375c <HAL_DMA_Abort_IT+0xd0>)
 80036e4:	400a      	ands	r2, r1
 80036e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80036e8:	4b1d      	ldr	r3, [pc, #116]	; (8003760 <HAL_DMA_Abort_IT+0xd4>)
 80036ea:	6859      	ldr	r1, [r3, #4]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f0:	221c      	movs	r2, #28
 80036f2:	4013      	ands	r3, r2
 80036f4:	2201      	movs	r2, #1
 80036f6:	409a      	lsls	r2, r3
 80036f8:	4b19      	ldr	r3, [pc, #100]	; (8003760 <HAL_DMA_Abort_IT+0xd4>)
 80036fa:	430a      	orrs	r2, r1
 80036fc:	605a      	str	r2, [r3, #4]
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003706:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00c      	beq.n	800372a <HAL_DMA_Abort_IT+0x9e>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800371a:	4910      	ldr	r1, [pc, #64]	; (800375c <HAL_DMA_Abort_IT+0xd0>)
 800371c:	400a      	ands	r2, r1
 800371e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003728:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2225      	movs	r2, #37	; 0x25
 800372e:	2101      	movs	r1, #1
 8003730:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2224      	movs	r2, #36	; 0x24
 8003736:	2100      	movs	r1, #0
 8003738:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373e:	2b00      	cmp	r3, #0
 8003740:	d004      	beq.n	800374c <HAL_DMA_Abort_IT+0xc0>
    {
      hdma->XferAbortCallback(hdma);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	0010      	movs	r0, r2
 800374a:	4798      	blx	r3
    }
  }
  return status;
 800374c:	230f      	movs	r3, #15
 800374e:	18fb      	adds	r3, r7, r3
 8003750:	781b      	ldrb	r3, [r3, #0]
}
 8003752:	0018      	movs	r0, r3
 8003754:	46bd      	mov	sp, r7
 8003756:	b004      	add	sp, #16
 8003758:	bd80      	pop	{r7, pc}
 800375a:	46c0      	nop			; (mov r8, r8)
 800375c:	fffffeff 	.word	0xfffffeff
 8003760:	40020000 	.word	0x40020000

08003764 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 800376c:	4b55      	ldr	r3, [pc, #340]	; (80038c4 <HAL_DMA_IRQHandler+0x160>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t source_it = hdma->Instance->CCR;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	221c      	movs	r2, #28
 8003780:	4013      	ands	r3, r2
 8003782:	2204      	movs	r2, #4
 8003784:	409a      	lsls	r2, r3
 8003786:	0013      	movs	r3, r2
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	4013      	ands	r3, r2
 800378c:	d027      	beq.n	80037de <HAL_DMA_IRQHandler+0x7a>
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	2204      	movs	r2, #4
 8003792:	4013      	ands	r3, r2
 8003794:	d023      	beq.n	80037de <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2220      	movs	r2, #32
 800379e:	4013      	ands	r3, r2
 80037a0:	d107      	bne.n	80037b2 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2104      	movs	r1, #4
 80037ae:	438a      	bics	r2, r1
 80037b0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80037b2:	4b44      	ldr	r3, [pc, #272]	; (80038c4 <HAL_DMA_IRQHandler+0x160>)
 80037b4:	6859      	ldr	r1, [r3, #4]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	221c      	movs	r2, #28
 80037bc:	4013      	ands	r3, r2
 80037be:	2204      	movs	r2, #4
 80037c0:	409a      	lsls	r2, r3
 80037c2:	4b40      	ldr	r3, [pc, #256]	; (80038c4 <HAL_DMA_IRQHandler+0x160>)
 80037c4:	430a      	orrs	r2, r1
 80037c6:	605a      	str	r2, [r3, #4]
#endif

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d100      	bne.n	80037d2 <HAL_DMA_IRQHandler+0x6e>
 80037d0:	e073      	b.n	80038ba <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	0010      	movs	r0, r2
 80037da:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80037dc:	e06d      	b.n	80038ba <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	221c      	movs	r2, #28
 80037e4:	4013      	ands	r3, r2
 80037e6:	2202      	movs	r2, #2
 80037e8:	409a      	lsls	r2, r3
 80037ea:	0013      	movs	r3, r2
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	4013      	ands	r3, r2
 80037f0:	d02e      	beq.n	8003850 <HAL_DMA_IRQHandler+0xec>
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	2202      	movs	r2, #2
 80037f6:	4013      	ands	r3, r2
 80037f8:	d02a      	beq.n	8003850 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2220      	movs	r2, #32
 8003802:	4013      	ands	r3, r2
 8003804:	d10b      	bne.n	800381e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	210a      	movs	r1, #10
 8003812:	438a      	bics	r2, r1
 8003814:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2225      	movs	r2, #37	; 0x25
 800381a:	2101      	movs	r1, #1
 800381c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800381e:	4b29      	ldr	r3, [pc, #164]	; (80038c4 <HAL_DMA_IRQHandler+0x160>)
 8003820:	6859      	ldr	r1, [r3, #4]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	221c      	movs	r2, #28
 8003828:	4013      	ands	r3, r2
 800382a:	2202      	movs	r2, #2
 800382c:	409a      	lsls	r2, r3
 800382e:	4b25      	ldr	r3, [pc, #148]	; (80038c4 <HAL_DMA_IRQHandler+0x160>)
 8003830:	430a      	orrs	r2, r1
 8003832:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2224      	movs	r2, #36	; 0x24
 8003838:	2100      	movs	r1, #0
 800383a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003840:	2b00      	cmp	r3, #0
 8003842:	d03a      	beq.n	80038ba <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	0010      	movs	r0, r2
 800384c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800384e:	e034      	b.n	80038ba <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003854:	221c      	movs	r2, #28
 8003856:	4013      	ands	r3, r2
 8003858:	2208      	movs	r2, #8
 800385a:	409a      	lsls	r2, r3
 800385c:	0013      	movs	r3, r2
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	4013      	ands	r3, r2
 8003862:	d02b      	beq.n	80038bc <HAL_DMA_IRQHandler+0x158>
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	2208      	movs	r2, #8
 8003868:	4013      	ands	r3, r2
 800386a:	d027      	beq.n	80038bc <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	210e      	movs	r1, #14
 8003878:	438a      	bics	r2, r1
 800387a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800387c:	4b11      	ldr	r3, [pc, #68]	; (80038c4 <HAL_DMA_IRQHandler+0x160>)
 800387e:	6859      	ldr	r1, [r3, #4]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003884:	221c      	movs	r2, #28
 8003886:	4013      	ands	r3, r2
 8003888:	2201      	movs	r2, #1
 800388a:	409a      	lsls	r2, r3
 800388c:	4b0d      	ldr	r3, [pc, #52]	; (80038c4 <HAL_DMA_IRQHandler+0x160>)
 800388e:	430a      	orrs	r2, r1
 8003890:	605a      	str	r2, [r3, #4]
#endif

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2225      	movs	r2, #37	; 0x25
 800389c:	2101      	movs	r1, #1
 800389e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2224      	movs	r2, #36	; 0x24
 80038a4:	2100      	movs	r1, #0
 80038a6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d005      	beq.n	80038bc <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	0010      	movs	r0, r2
 80038b8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80038ba:	46c0      	nop			; (mov r8, r8)
 80038bc:	46c0      	nop			; (mov r8, r8)
}
 80038be:	46bd      	mov	sp, r7
 80038c0:	b004      	add	sp, #16
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	40020000 	.word	0x40020000

080038c8 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2225      	movs	r2, #37	; 0x25
 80038d4:	5c9b      	ldrb	r3, [r3, r2]
 80038d6:	b2db      	uxtb	r3, r3
}
 80038d8:	0018      	movs	r0, r3
 80038da:	46bd      	mov	sp, r7
 80038dc:	b002      	add	sp, #8
 80038de:	bd80      	pop	{r7, pc}

080038e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ec:	089b      	lsrs	r3, r3, #2
 80038ee:	4a10      	ldr	r2, [pc, #64]	; (8003930 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80038f0:	4694      	mov	ip, r2
 80038f2:	4463      	add	r3, ip
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	001a      	movs	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	001a      	movs	r2, r3
 8003902:	23ff      	movs	r3, #255	; 0xff
 8003904:	4013      	ands	r3, r2
 8003906:	3b08      	subs	r3, #8
 8003908:	2114      	movs	r1, #20
 800390a:	0018      	movs	r0, r3
 800390c:	f7fc fbfa 	bl	8000104 <__udivsi3>
 8003910:	0003      	movs	r3, r0
 8003912:	60fb      	str	r3, [r7, #12]
#endif

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a07      	ldr	r2, [pc, #28]	; (8003934 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003918:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	221f      	movs	r2, #31
 800391e:	4013      	ands	r3, r2
 8003920:	2201      	movs	r2, #1
 8003922:	409a      	lsls	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003928:	46c0      	nop			; (mov r8, r8)
 800392a:	46bd      	mov	sp, r7
 800392c:	b004      	add	sp, #16
 800392e:	bd80      	pop	{r7, pc}
 8003930:	10008200 	.word	0x10008200
 8003934:	40020880 	.word	0x40020880

08003938 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	223f      	movs	r2, #63	; 0x3f
 8003946:	4013      	ands	r3, r2
 8003948:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	4a0a      	ldr	r2, [pc, #40]	; (8003978 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800394e:	4694      	mov	ip, r2
 8003950:	4463      	add	r3, ip
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	001a      	movs	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a07      	ldr	r2, [pc, #28]	; (800397c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800395e:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	3b01      	subs	r3, #1
 8003964:	2203      	movs	r2, #3
 8003966:	4013      	ands	r3, r2
 8003968:	2201      	movs	r2, #1
 800396a:	409a      	lsls	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003970:	46c0      	nop			; (mov r8, r8)
 8003972:	46bd      	mov	sp, r7
 8003974:	b004      	add	sp, #16
 8003976:	bd80      	pop	{r7, pc}
 8003978:	1000823f 	.word	0x1000823f
 800397c:	40020940 	.word	0x40020940

08003980 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800398a:	2300      	movs	r3, #0
 800398c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800398e:	e147      	b.n	8003c20 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2101      	movs	r1, #1
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	4091      	lsls	r1, r2
 800399a:	000a      	movs	r2, r1
 800399c:	4013      	ands	r3, r2
 800399e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d100      	bne.n	80039a8 <HAL_GPIO_Init+0x28>
 80039a6:	e138      	b.n	8003c1a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d00b      	beq.n	80039c8 <HAL_GPIO_Init+0x48>
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d007      	beq.n	80039c8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039bc:	2b11      	cmp	r3, #17
 80039be:	d003      	beq.n	80039c8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	2b12      	cmp	r3, #18
 80039c6:	d130      	bne.n	8003a2a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	2203      	movs	r2, #3
 80039d4:	409a      	lsls	r2, r3
 80039d6:	0013      	movs	r3, r2
 80039d8:	43da      	mvns	r2, r3
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	4013      	ands	r3, r2
 80039de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	68da      	ldr	r2, [r3, #12]
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	409a      	lsls	r2, r3
 80039ea:	0013      	movs	r3, r2
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039fe:	2201      	movs	r2, #1
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	409a      	lsls	r2, r3
 8003a04:	0013      	movs	r3, r2
 8003a06:	43da      	mvns	r2, r3
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	091b      	lsrs	r3, r3, #4
 8003a14:	2201      	movs	r2, #1
 8003a16:	401a      	ands	r2, r3
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	409a      	lsls	r2, r3
 8003a1c:	0013      	movs	r3, r2
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	2203      	movs	r2, #3
 8003a36:	409a      	lsls	r2, r3
 8003a38:	0013      	movs	r3, r2
 8003a3a:	43da      	mvns	r2, r3
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	689a      	ldr	r2, [r3, #8]
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	409a      	lsls	r2, r3
 8003a4c:	0013      	movs	r3, r2
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d003      	beq.n	8003a6a <HAL_GPIO_Init+0xea>
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2b12      	cmp	r3, #18
 8003a68:	d123      	bne.n	8003ab2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	08da      	lsrs	r2, r3, #3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	3208      	adds	r2, #8
 8003a72:	0092      	lsls	r2, r2, #2
 8003a74:	58d3      	ldr	r3, [r2, r3]
 8003a76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	2207      	movs	r2, #7
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	220f      	movs	r2, #15
 8003a82:	409a      	lsls	r2, r3
 8003a84:	0013      	movs	r3, r2
 8003a86:	43da      	mvns	r2, r3
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	691a      	ldr	r2, [r3, #16]
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	2107      	movs	r1, #7
 8003a96:	400b      	ands	r3, r1
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	409a      	lsls	r2, r3
 8003a9c:	0013      	movs	r3, r2
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	08da      	lsrs	r2, r3, #3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	3208      	adds	r2, #8
 8003aac:	0092      	lsls	r2, r2, #2
 8003aae:	6939      	ldr	r1, [r7, #16]
 8003ab0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	005b      	lsls	r3, r3, #1
 8003abc:	2203      	movs	r2, #3
 8003abe:	409a      	lsls	r2, r3
 8003ac0:	0013      	movs	r3, r2
 8003ac2:	43da      	mvns	r2, r3
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	2203      	movs	r2, #3
 8003ad0:	401a      	ands	r2, r3
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	409a      	lsls	r2, r3
 8003ad8:	0013      	movs	r3, r2
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	2380      	movs	r3, #128	; 0x80
 8003aec:	055b      	lsls	r3, r3, #21
 8003aee:	4013      	ands	r3, r2
 8003af0:	d100      	bne.n	8003af4 <HAL_GPIO_Init+0x174>
 8003af2:	e092      	b.n	8003c1a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003af4:	4a50      	ldr	r2, [pc, #320]	; (8003c38 <HAL_GPIO_Init+0x2b8>)
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	089b      	lsrs	r3, r3, #2
 8003afa:	3318      	adds	r3, #24
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	589b      	ldr	r3, [r3, r2]
 8003b00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	2203      	movs	r2, #3
 8003b06:	4013      	ands	r3, r2
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	220f      	movs	r2, #15
 8003b0c:	409a      	lsls	r2, r3
 8003b0e:	0013      	movs	r3, r2
 8003b10:	43da      	mvns	r2, r3
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	4013      	ands	r3, r2
 8003b16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	23a0      	movs	r3, #160	; 0xa0
 8003b1c:	05db      	lsls	r3, r3, #23
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d013      	beq.n	8003b4a <HAL_GPIO_Init+0x1ca>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a45      	ldr	r2, [pc, #276]	; (8003c3c <HAL_GPIO_Init+0x2bc>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d00d      	beq.n	8003b46 <HAL_GPIO_Init+0x1c6>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a44      	ldr	r2, [pc, #272]	; (8003c40 <HAL_GPIO_Init+0x2c0>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d007      	beq.n	8003b42 <HAL_GPIO_Init+0x1c2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a43      	ldr	r2, [pc, #268]	; (8003c44 <HAL_GPIO_Init+0x2c4>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d101      	bne.n	8003b3e <HAL_GPIO_Init+0x1be>
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e006      	b.n	8003b4c <HAL_GPIO_Init+0x1cc>
 8003b3e:	2305      	movs	r3, #5
 8003b40:	e004      	b.n	8003b4c <HAL_GPIO_Init+0x1cc>
 8003b42:	2302      	movs	r3, #2
 8003b44:	e002      	b.n	8003b4c <HAL_GPIO_Init+0x1cc>
 8003b46:	2301      	movs	r3, #1
 8003b48:	e000      	b.n	8003b4c <HAL_GPIO_Init+0x1cc>
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	2103      	movs	r1, #3
 8003b50:	400a      	ands	r2, r1
 8003b52:	00d2      	lsls	r2, r2, #3
 8003b54:	4093      	lsls	r3, r2
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003b5c:	4936      	ldr	r1, [pc, #216]	; (8003c38 <HAL_GPIO_Init+0x2b8>)
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	089b      	lsrs	r3, r3, #2
 8003b62:	3318      	adds	r3, #24
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003b6a:	4a33      	ldr	r2, [pc, #204]	; (8003c38 <HAL_GPIO_Init+0x2b8>)
 8003b6c:	2380      	movs	r3, #128	; 0x80
 8003b6e:	58d3      	ldr	r3, [r2, r3]
 8003b70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	43da      	mvns	r2, r3
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	2380      	movs	r3, #128	; 0x80
 8003b82:	025b      	lsls	r3, r3, #9
 8003b84:	4013      	ands	r3, r2
 8003b86:	d003      	beq.n	8003b90 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b90:	4929      	ldr	r1, [pc, #164]	; (8003c38 <HAL_GPIO_Init+0x2b8>)
 8003b92:	2280      	movs	r2, #128	; 0x80
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8003b98:	4a27      	ldr	r2, [pc, #156]	; (8003c38 <HAL_GPIO_Init+0x2b8>)
 8003b9a:	2384      	movs	r3, #132	; 0x84
 8003b9c:	58d3      	ldr	r3, [r2, r3]
 8003b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	43da      	mvns	r2, r3
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	2380      	movs	r3, #128	; 0x80
 8003bb0:	029b      	lsls	r3, r3, #10
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	d003      	beq.n	8003bbe <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003bbe:	491e      	ldr	r1, [pc, #120]	; (8003c38 <HAL_GPIO_Init+0x2b8>)
 8003bc0:	2284      	movs	r2, #132	; 0x84
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003bc6:	4b1c      	ldr	r3, [pc, #112]	; (8003c38 <HAL_GPIO_Init+0x2b8>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	43da      	mvns	r2, r3
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	2380      	movs	r3, #128	; 0x80
 8003bdc:	035b      	lsls	r3, r3, #13
 8003bde:	4013      	ands	r3, r2
 8003be0:	d003      	beq.n	8003bea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003bea:	4b13      	ldr	r3, [pc, #76]	; (8003c38 <HAL_GPIO_Init+0x2b8>)
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003bf0:	4b11      	ldr	r3, [pc, #68]	; (8003c38 <HAL_GPIO_Init+0x2b8>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	43da      	mvns	r2, r3
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	2380      	movs	r3, #128	; 0x80
 8003c06:	039b      	lsls	r3, r3, #14
 8003c08:	4013      	ands	r3, r2
 8003c0a:	d003      	beq.n	8003c14 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c14:	4b08      	ldr	r3, [pc, #32]	; (8003c38 <HAL_GPIO_Init+0x2b8>)
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	40da      	lsrs	r2, r3
 8003c28:	1e13      	subs	r3, r2, #0
 8003c2a:	d000      	beq.n	8003c2e <HAL_GPIO_Init+0x2ae>
 8003c2c:	e6b0      	b.n	8003990 <HAL_GPIO_Init+0x10>
  }
}
 8003c2e:	46c0      	nop			; (mov r8, r8)
 8003c30:	46bd      	mov	sp, r7
 8003c32:	b006      	add	sp, #24
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	46c0      	nop			; (mov r8, r8)
 8003c38:	40021800 	.word	0x40021800
 8003c3c:	50000400 	.word	0x50000400
 8003c40:	50000800 	.word	0x50000800
 8003c44:	50000c00 	.word	0x50000c00

08003c48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e082      	b.n	8003d60 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2241      	movs	r2, #65	; 0x41
 8003c5e:	5c9b      	ldrb	r3, [r3, r2]
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d107      	bne.n	8003c76 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2240      	movs	r2, #64	; 0x40
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	0018      	movs	r0, r3
 8003c72:	f7fe fd0f 	bl	8002694 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2241      	movs	r2, #65	; 0x41
 8003c7a:	2124      	movs	r1, #36	; 0x24
 8003c7c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2101      	movs	r1, #1
 8003c8a:	438a      	bics	r2, r1
 8003c8c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4934      	ldr	r1, [pc, #208]	; (8003d68 <HAL_I2C_Init+0x120>)
 8003c98:	400a      	ands	r2, r1
 8003c9a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689a      	ldr	r2, [r3, #8]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4931      	ldr	r1, [pc, #196]	; (8003d6c <HAL_I2C_Init+0x124>)
 8003ca8:	400a      	ands	r2, r1
 8003caa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d108      	bne.n	8003cc6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689a      	ldr	r2, [r3, #8]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2180      	movs	r1, #128	; 0x80
 8003cbe:	0209      	lsls	r1, r1, #8
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	609a      	str	r2, [r3, #8]
 8003cc4:	e007      	b.n	8003cd6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	689a      	ldr	r2, [r3, #8]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2184      	movs	r1, #132	; 0x84
 8003cd0:	0209      	lsls	r1, r1, #8
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d104      	bne.n	8003ce8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2280      	movs	r2, #128	; 0x80
 8003ce4:	0112      	lsls	r2, r2, #4
 8003ce6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	491f      	ldr	r1, [pc, #124]	; (8003d70 <HAL_I2C_Init+0x128>)
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68da      	ldr	r2, [r3, #12]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	491a      	ldr	r1, [pc, #104]	; (8003d6c <HAL_I2C_Init+0x124>)
 8003d04:	400a      	ands	r2, r1
 8003d06:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	691a      	ldr	r2, [r3, #16]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	431a      	orrs	r2, r3
 8003d12:	0011      	movs	r1, r2
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	021a      	lsls	r2, r3, #8
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	69d9      	ldr	r1, [r3, #28]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a1a      	ldr	r2, [r3, #32]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2241      	movs	r2, #65	; 0x41
 8003d4c:	2120      	movs	r1, #32
 8003d4e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2242      	movs	r2, #66	; 0x42
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	0018      	movs	r0, r3
 8003d62:	46bd      	mov	sp, r7
 8003d64:	b002      	add	sp, #8
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	f0ffffff 	.word	0xf0ffffff
 8003d6c:	ffff7fff 	.word	0xffff7fff
 8003d70:	02008000 	.word	0x02008000

08003d74 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d005      	beq.n	8003da0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	68f9      	ldr	r1, [r7, #12]
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	4798      	blx	r3
  }
}
 8003da0:	46c0      	nop			; (mov r8, r8)
 8003da2:	46bd      	mov	sp, r7
 8003da4:	b004      	add	sp, #16
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	0a1b      	lsrs	r3, r3, #8
 8003dc4:	001a      	movs	r2, r3
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	4013      	ands	r3, r2
 8003dca:	d010      	beq.n	8003dee <HAL_I2C_ER_IRQHandler+0x46>
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	09db      	lsrs	r3, r3, #7
 8003dd0:	001a      	movs	r2, r3
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	d00a      	beq.n	8003dee <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ddc:	2201      	movs	r2, #1
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2280      	movs	r2, #128	; 0x80
 8003dea:	0052      	lsls	r2, r2, #1
 8003dec:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	0a9b      	lsrs	r3, r3, #10
 8003df2:	001a      	movs	r2, r3
 8003df4:	2301      	movs	r3, #1
 8003df6:	4013      	ands	r3, r2
 8003df8:	d010      	beq.n	8003e1c <HAL_I2C_ER_IRQHandler+0x74>
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	09db      	lsrs	r3, r3, #7
 8003dfe:	001a      	movs	r2, r3
 8003e00:	2301      	movs	r3, #1
 8003e02:	4013      	ands	r3, r2
 8003e04:	d00a      	beq.n	8003e1c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0a:	2208      	movs	r2, #8
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2280      	movs	r2, #128	; 0x80
 8003e18:	00d2      	lsls	r2, r2, #3
 8003e1a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	0a5b      	lsrs	r3, r3, #9
 8003e20:	001a      	movs	r2, r3
 8003e22:	2301      	movs	r3, #1
 8003e24:	4013      	ands	r3, r2
 8003e26:	d010      	beq.n	8003e4a <HAL_I2C_ER_IRQHandler+0xa2>
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	09db      	lsrs	r3, r3, #7
 8003e2c:	001a      	movs	r2, r3
 8003e2e:	2301      	movs	r3, #1
 8003e30:	4013      	ands	r3, r2
 8003e32:	d00a      	beq.n	8003e4a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e38:	2202      	movs	r2, #2
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2280      	movs	r2, #128	; 0x80
 8003e46:	0092      	lsls	r2, r2, #2
 8003e48:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	220b      	movs	r2, #11
 8003e54:	4013      	ands	r3, r2
 8003e56:	d005      	beq.n	8003e64 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	0011      	movs	r1, r2
 8003e5e:	0018      	movs	r0, r3
 8003e60:	f000 fbe0 	bl	8004624 <I2C_ITError>
  }
}
 8003e64:	46c0      	nop			; (mov r8, r8)
 8003e66:	46bd      	mov	sp, r7
 8003e68:	b006      	add	sp, #24
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003e74:	46c0      	nop			; (mov r8, r8)
 8003e76:	46bd      	mov	sp, r7
 8003e78:	b002      	add	sp, #8
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003e84:	46c0      	nop			; (mov r8, r8)
 8003e86:	46bd      	mov	sp, r7
 8003e88:	b002      	add	sp, #8
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	0008      	movs	r0, r1
 8003e96:	0011      	movs	r1, r2
 8003e98:	1cfb      	adds	r3, r7, #3
 8003e9a:	1c02      	adds	r2, r0, #0
 8003e9c:	701a      	strb	r2, [r3, #0]
 8003e9e:	003b      	movs	r3, r7
 8003ea0:	1c0a      	adds	r2, r1, #0
 8003ea2:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003ea4:	46c0      	nop			; (mov r8, r8)
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	b002      	add	sp, #8
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003eb4:	46c0      	nop			; (mov r8, r8)
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	b002      	add	sp, #8
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003ec4:	46c0      	nop			; (mov r8, r8)
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	b002      	add	sp, #8
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003ed4:	46c0      	nop			; (mov r8, r8)
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	b002      	add	sp, #8
 8003eda:	bd80      	pop	{r7, pc}

08003edc <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eec:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2240      	movs	r2, #64	; 0x40
 8003ef6:	5c9b      	ldrb	r3, [r3, r2]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d101      	bne.n	8003f00 <I2C_Slave_ISR_IT+0x24>
 8003efc:	2302      	movs	r3, #2
 8003efe:	e0fa      	b.n	80040f6 <I2C_Slave_ISR_IT+0x21a>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2240      	movs	r2, #64	; 0x40
 8003f04:	2101      	movs	r1, #1
 8003f06:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	095b      	lsrs	r3, r3, #5
 8003f0c:	001a      	movs	r2, r3
 8003f0e:	2301      	movs	r3, #1
 8003f10:	4013      	ands	r3, r2
 8003f12:	d00b      	beq.n	8003f2c <I2C_Slave_ISR_IT+0x50>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	095b      	lsrs	r3, r3, #5
 8003f18:	001a      	movs	r2, r3
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	d005      	beq.n	8003f2c <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	0011      	movs	r1, r2
 8003f26:	0018      	movs	r0, r3
 8003f28:	f000 f9fc 	bl	8004324 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	091b      	lsrs	r3, r3, #4
 8003f30:	001a      	movs	r2, r3
 8003f32:	2301      	movs	r3, #1
 8003f34:	4013      	ands	r3, r2
 8003f36:	d054      	beq.n	8003fe2 <I2C_Slave_ISR_IT+0x106>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	091b      	lsrs	r3, r3, #4
 8003f3c:	001a      	movs	r2, r3
 8003f3e:	2301      	movs	r3, #1
 8003f40:	4013      	ands	r3, r2
 8003f42:	d04e      	beq.n	8003fe2 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d12d      	bne.n	8003faa <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2241      	movs	r2, #65	; 0x41
 8003f52:	5c9b      	ldrb	r3, [r3, r2]
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b28      	cmp	r3, #40	; 0x28
 8003f58:	d10b      	bne.n	8003f72 <I2C_Slave_ISR_IT+0x96>
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	2380      	movs	r3, #128	; 0x80
 8003f5e:	049b      	lsls	r3, r3, #18
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d106      	bne.n	8003f72 <I2C_Slave_ISR_IT+0x96>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	0011      	movs	r1, r2
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	f000 fb00 	bl	8004570 <I2C_ITListenCplt>
 8003f70:	e036      	b.n	8003fe0 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2241      	movs	r2, #65	; 0x41
 8003f76:	5c9b      	ldrb	r3, [r3, r2]
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b29      	cmp	r3, #41	; 0x29
 8003f7c:	d110      	bne.n	8003fa0 <I2C_Slave_ISR_IT+0xc4>
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	4a5f      	ldr	r2, [pc, #380]	; (8004100 <I2C_Slave_ISR_IT+0x224>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d00c      	beq.n	8003fa0 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2210      	movs	r2, #16
 8003f8c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	0018      	movs	r0, r3
 8003f92:	f000 fc54 	bl	800483e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	0018      	movs	r0, r3
 8003f9a:	f000 f95d 	bl	8004258 <I2C_ITSlaveSeqCplt>
 8003f9e:	e01f      	b.n	8003fe0 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2210      	movs	r2, #16
 8003fa6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003fa8:	e09d      	b.n	80040e6 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2210      	movs	r2, #16
 8003fb0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb6:	2204      	movs	r2, #4
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d005      	beq.n	8003fd0 <I2C_Slave_ISR_IT+0xf4>
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	2380      	movs	r3, #128	; 0x80
 8003fc8:	045b      	lsls	r3, r3, #17
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d000      	beq.n	8003fd0 <I2C_Slave_ISR_IT+0xf4>
 8003fce:	e08a      	b.n	80040e6 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	0011      	movs	r1, r2
 8003fd8:	0018      	movs	r0, r3
 8003fda:	f000 fb23 	bl	8004624 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003fde:	e082      	b.n	80040e6 <I2C_Slave_ISR_IT+0x20a>
 8003fe0:	e081      	b.n	80040e6 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	089b      	lsrs	r3, r3, #2
 8003fe6:	001a      	movs	r2, r3
 8003fe8:	2301      	movs	r3, #1
 8003fea:	4013      	ands	r3, r2
 8003fec:	d031      	beq.n	8004052 <I2C_Slave_ISR_IT+0x176>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	089b      	lsrs	r3, r3, #2
 8003ff2:	001a      	movs	r2, r3
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	d02b      	beq.n	8004052 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	2b00      	cmp	r3, #0
 8004002:	d018      	beq.n	8004036 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	b2d2      	uxtb	r2, r2
 8004010:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004016:	1c5a      	adds	r2, r3, #1
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004020:	3b01      	subs	r3, #1
 8004022:	b29a      	uxth	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800402c:	b29b      	uxth	r3, r3
 800402e:	3b01      	subs	r3, #1
 8004030:	b29a      	uxth	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800403a:	b29b      	uxth	r3, r3
 800403c:	2b00      	cmp	r3, #0
 800403e:	d154      	bne.n	80040ea <I2C_Slave_ISR_IT+0x20e>
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	4a2f      	ldr	r2, [pc, #188]	; (8004100 <I2C_Slave_ISR_IT+0x224>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d050      	beq.n	80040ea <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	0018      	movs	r0, r3
 800404c:	f000 f904 	bl	8004258 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004050:	e04b      	b.n	80040ea <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	08db      	lsrs	r3, r3, #3
 8004056:	001a      	movs	r2, r3
 8004058:	2301      	movs	r3, #1
 800405a:	4013      	ands	r3, r2
 800405c:	d00c      	beq.n	8004078 <I2C_Slave_ISR_IT+0x19c>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	08db      	lsrs	r3, r3, #3
 8004062:	001a      	movs	r2, r3
 8004064:	2301      	movs	r3, #1
 8004066:	4013      	ands	r3, r2
 8004068:	d006      	beq.n	8004078 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	0011      	movs	r1, r2
 8004070:	0018      	movs	r0, r3
 8004072:	f000 f847 	bl	8004104 <I2C_ITAddrCplt>
 8004076:	e039      	b.n	80040ec <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	085b      	lsrs	r3, r3, #1
 800407c:	001a      	movs	r2, r3
 800407e:	2301      	movs	r3, #1
 8004080:	4013      	ands	r3, r2
 8004082:	d033      	beq.n	80040ec <I2C_Slave_ISR_IT+0x210>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	085b      	lsrs	r3, r3, #1
 8004088:	001a      	movs	r2, r3
 800408a:	2301      	movs	r3, #1
 800408c:	4013      	ands	r3, r2
 800408e:	d02d      	beq.n	80040ec <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004094:	b29b      	uxth	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d018      	beq.n	80040cc <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409e:	781a      	ldrb	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040aa:	1c5a      	adds	r2, r3, #1
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	3b01      	subs	r3, #1
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c2:	3b01      	subs	r3, #1
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	851a      	strh	r2, [r3, #40]	; 0x28
 80040ca:	e00f      	b.n	80040ec <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	2380      	movs	r3, #128	; 0x80
 80040d0:	045b      	lsls	r3, r3, #17
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d002      	beq.n	80040dc <I2C_Slave_ISR_IT+0x200>
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d107      	bne.n	80040ec <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	0018      	movs	r0, r3
 80040e0:	f000 f8ba 	bl	8004258 <I2C_ITSlaveSeqCplt>
 80040e4:	e002      	b.n	80040ec <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 80040e6:	46c0      	nop			; (mov r8, r8)
 80040e8:	e000      	b.n	80040ec <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 80040ea:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2240      	movs	r2, #64	; 0x40
 80040f0:	2100      	movs	r1, #0
 80040f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	0018      	movs	r0, r3
 80040f8:	46bd      	mov	sp, r7
 80040fa:	b006      	add	sp, #24
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	46c0      	nop			; (mov r8, r8)
 8004100:	ffff0000 	.word	0xffff0000

08004104 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004104:	b590      	push	{r4, r7, lr}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2241      	movs	r2, #65	; 0x41
 8004112:	5c9b      	ldrb	r3, [r3, r2]
 8004114:	b2db      	uxtb	r3, r3
 8004116:	001a      	movs	r2, r3
 8004118:	2328      	movs	r3, #40	; 0x28
 800411a:	4013      	ands	r3, r2
 800411c:	2b28      	cmp	r3, #40	; 0x28
 800411e:	d000      	beq.n	8004122 <I2C_ITAddrCplt+0x1e>
 8004120:	e08d      	b.n	800423e <I2C_ITAddrCplt+0x13a>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	0c1b      	lsrs	r3, r3, #16
 800412a:	b2da      	uxtb	r2, r3
 800412c:	230f      	movs	r3, #15
 800412e:	18fb      	adds	r3, r7, r3
 8004130:	2101      	movs	r1, #1
 8004132:	400a      	ands	r2, r1
 8004134:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	0c1b      	lsrs	r3, r3, #16
 800413e:	b29a      	uxth	r2, r3
 8004140:	230c      	movs	r3, #12
 8004142:	18fb      	adds	r3, r7, r3
 8004144:	21fe      	movs	r1, #254	; 0xfe
 8004146:	400a      	ands	r2, r1
 8004148:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	b29a      	uxth	r2, r3
 8004152:	230a      	movs	r3, #10
 8004154:	18fb      	adds	r3, r7, r3
 8004156:	0592      	lsls	r2, r2, #22
 8004158:	0d92      	lsrs	r2, r2, #22
 800415a:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	b29a      	uxth	r2, r3
 8004164:	2308      	movs	r3, #8
 8004166:	18fb      	adds	r3, r7, r3
 8004168:	21fe      	movs	r1, #254	; 0xfe
 800416a:	400a      	ands	r2, r1
 800416c:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	2b02      	cmp	r3, #2
 8004174:	d14d      	bne.n	8004212 <I2C_ITAddrCplt+0x10e>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8004176:	230a      	movs	r3, #10
 8004178:	18fb      	adds	r3, r7, r3
 800417a:	881b      	ldrh	r3, [r3, #0]
 800417c:	09db      	lsrs	r3, r3, #7
 800417e:	b29a      	uxth	r2, r3
 8004180:	230c      	movs	r3, #12
 8004182:	18fb      	adds	r3, r7, r3
 8004184:	881b      	ldrh	r3, [r3, #0]
 8004186:	4053      	eors	r3, r2
 8004188:	b29b      	uxth	r3, r3
 800418a:	001a      	movs	r2, r3
 800418c:	2306      	movs	r3, #6
 800418e:	4013      	ands	r3, r2
 8004190:	d124      	bne.n	80041dc <I2C_ITAddrCplt+0xd8>
      {
        slaveaddrcode = ownadd1code;
 8004192:	230c      	movs	r3, #12
 8004194:	18fb      	adds	r3, r7, r3
 8004196:	220a      	movs	r2, #10
 8004198:	18ba      	adds	r2, r7, r2
 800419a:	8812      	ldrh	r2, [r2, #0]
 800419c:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041a2:	1c5a      	adds	r2, r3, #1
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d14e      	bne.n	800424e <I2C_ITAddrCplt+0x14a>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2208      	movs	r2, #8
 80041bc:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2240      	movs	r2, #64	; 0x40
 80041c2:	2100      	movs	r1, #0
 80041c4:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80041c6:	230c      	movs	r3, #12
 80041c8:	18fb      	adds	r3, r7, r3
 80041ca:	881a      	ldrh	r2, [r3, #0]
 80041cc:	230f      	movs	r3, #15
 80041ce:	18fb      	adds	r3, r7, r3
 80041d0:	7819      	ldrb	r1, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	0018      	movs	r0, r3
 80041d6:	f7ff fe59 	bl	8003e8c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80041da:	e038      	b.n	800424e <I2C_ITAddrCplt+0x14a>
        slaveaddrcode = ownadd2code;
 80041dc:	240c      	movs	r4, #12
 80041de:	193b      	adds	r3, r7, r4
 80041e0:	2208      	movs	r2, #8
 80041e2:	18ba      	adds	r2, r7, r2
 80041e4:	8812      	ldrh	r2, [r2, #0]
 80041e6:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80041e8:	2380      	movs	r3, #128	; 0x80
 80041ea:	021a      	lsls	r2, r3, #8
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	0011      	movs	r1, r2
 80041f0:	0018      	movs	r0, r3
 80041f2:	f000 fb65 	bl	80048c0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2240      	movs	r2, #64	; 0x40
 80041fa:	2100      	movs	r1, #0
 80041fc:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80041fe:	193b      	adds	r3, r7, r4
 8004200:	881a      	ldrh	r2, [r3, #0]
 8004202:	230f      	movs	r3, #15
 8004204:	18fb      	adds	r3, r7, r3
 8004206:	7819      	ldrb	r1, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	0018      	movs	r0, r3
 800420c:	f7ff fe3e 	bl	8003e8c <HAL_I2C_AddrCallback>
}
 8004210:	e01d      	b.n	800424e <I2C_ITAddrCplt+0x14a>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004212:	2380      	movs	r3, #128	; 0x80
 8004214:	021a      	lsls	r2, r3, #8
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	0011      	movs	r1, r2
 800421a:	0018      	movs	r0, r3
 800421c:	f000 fb50 	bl	80048c0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2240      	movs	r2, #64	; 0x40
 8004224:	2100      	movs	r1, #0
 8004226:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004228:	230c      	movs	r3, #12
 800422a:	18fb      	adds	r3, r7, r3
 800422c:	881a      	ldrh	r2, [r3, #0]
 800422e:	230f      	movs	r3, #15
 8004230:	18fb      	adds	r3, r7, r3
 8004232:	7819      	ldrb	r1, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	0018      	movs	r0, r3
 8004238:	f7ff fe28 	bl	8003e8c <HAL_I2C_AddrCallback>
}
 800423c:	e007      	b.n	800424e <I2C_ITAddrCplt+0x14a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2208      	movs	r2, #8
 8004244:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2240      	movs	r2, #64	; 0x40
 800424a:	2100      	movs	r1, #0
 800424c:	5499      	strb	r1, [r3, r2]
}
 800424e:	46c0      	nop			; (mov r8, r8)
 8004250:	46bd      	mov	sp, r7
 8004252:	b005      	add	sp, #20
 8004254:	bd90      	pop	{r4, r7, pc}
	...

08004258 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2242      	movs	r2, #66	; 0x42
 800426c:	2100      	movs	r1, #0
 800426e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	0b9b      	lsrs	r3, r3, #14
 8004274:	001a      	movs	r2, r3
 8004276:	2301      	movs	r3, #1
 8004278:	4013      	ands	r3, r2
 800427a:	d008      	beq.n	800428e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4925      	ldr	r1, [pc, #148]	; (800431c <I2C_ITSlaveSeqCplt+0xc4>)
 8004288:	400a      	ands	r2, r1
 800428a:	601a      	str	r2, [r3, #0]
 800428c:	e00d      	b.n	80042aa <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	0bdb      	lsrs	r3, r3, #15
 8004292:	001a      	movs	r2, r3
 8004294:	2301      	movs	r3, #1
 8004296:	4013      	ands	r3, r2
 8004298:	d007      	beq.n	80042aa <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	491e      	ldr	r1, [pc, #120]	; (8004320 <I2C_ITSlaveSeqCplt+0xc8>)
 80042a6:	400a      	ands	r2, r1
 80042a8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2241      	movs	r2, #65	; 0x41
 80042ae:	5c9b      	ldrb	r3, [r3, r2]
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b29      	cmp	r3, #41	; 0x29
 80042b4:	d114      	bne.n	80042e0 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2241      	movs	r2, #65	; 0x41
 80042ba:	2128      	movs	r1, #40	; 0x28
 80042bc:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2221      	movs	r2, #33	; 0x21
 80042c2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2101      	movs	r1, #1
 80042c8:	0018      	movs	r0, r3
 80042ca:	f000 faf9 	bl	80048c0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2240      	movs	r2, #64	; 0x40
 80042d2:	2100      	movs	r1, #0
 80042d4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	0018      	movs	r0, r3
 80042da:	f7ff fdc7 	bl	8003e6c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80042de:	e019      	b.n	8004314 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2241      	movs	r2, #65	; 0x41
 80042e4:	5c9b      	ldrb	r3, [r3, r2]
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b2a      	cmp	r3, #42	; 0x2a
 80042ea:	d113      	bne.n	8004314 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2241      	movs	r2, #65	; 0x41
 80042f0:	2128      	movs	r1, #40	; 0x28
 80042f2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2222      	movs	r2, #34	; 0x22
 80042f8:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2102      	movs	r1, #2
 80042fe:	0018      	movs	r0, r3
 8004300:	f000 fade 	bl	80048c0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2240      	movs	r2, #64	; 0x40
 8004308:	2100      	movs	r1, #0
 800430a:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	0018      	movs	r0, r3
 8004310:	f7ff fdb4 	bl	8003e7c <HAL_I2C_SlaveRxCpltCallback>
}
 8004314:	46c0      	nop			; (mov r8, r8)
 8004316:	46bd      	mov	sp, r7
 8004318:	b004      	add	sp, #16
 800431a:	bd80      	pop	{r7, pc}
 800431c:	ffffbfff 	.word	0xffffbfff
 8004320:	ffff7fff 	.word	0xffff7fff

08004324 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b086      	sub	sp, #24
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800433a:	200f      	movs	r0, #15
 800433c:	183b      	adds	r3, r7, r0
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	2141      	movs	r1, #65	; 0x41
 8004342:	5c52      	ldrb	r2, [r2, r1]
 8004344:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2220      	movs	r2, #32
 800434c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800434e:	183b      	adds	r3, r7, r0
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	2b21      	cmp	r3, #33	; 0x21
 8004354:	d004      	beq.n	8004360 <I2C_ITSlaveCplt+0x3c>
 8004356:	230f      	movs	r3, #15
 8004358:	18fb      	adds	r3, r7, r3
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	2b29      	cmp	r3, #41	; 0x29
 800435e:	d109      	bne.n	8004374 <I2C_ITSlaveCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004360:	4a7d      	ldr	r2, [pc, #500]	; (8004558 <I2C_ITSlaveCplt+0x234>)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	0011      	movs	r1, r2
 8004366:	0018      	movs	r0, r3
 8004368:	f000 faaa 	bl	80048c0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2221      	movs	r2, #33	; 0x21
 8004370:	631a      	str	r2, [r3, #48]	; 0x30
 8004372:	e012      	b.n	800439a <I2C_ITSlaveCplt+0x76>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004374:	230f      	movs	r3, #15
 8004376:	18fb      	adds	r3, r7, r3
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	2b22      	cmp	r3, #34	; 0x22
 800437c:	d004      	beq.n	8004388 <I2C_ITSlaveCplt+0x64>
 800437e:	230f      	movs	r3, #15
 8004380:	18fb      	adds	r3, r7, r3
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	2b2a      	cmp	r3, #42	; 0x2a
 8004386:	d108      	bne.n	800439a <I2C_ITSlaveCplt+0x76>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004388:	4a74      	ldr	r2, [pc, #464]	; (800455c <I2C_ITSlaveCplt+0x238>)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	0011      	movs	r1, r2
 800438e:	0018      	movs	r0, r3
 8004390:	f000 fa96 	bl	80048c0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2222      	movs	r2, #34	; 0x22
 8004398:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2180      	movs	r1, #128	; 0x80
 80043a6:	0209      	lsls	r1, r1, #8
 80043a8:	430a      	orrs	r2, r1
 80043aa:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	496a      	ldr	r1, [pc, #424]	; (8004560 <I2C_ITSlaveCplt+0x23c>)
 80043b8:	400a      	ands	r2, r1
 80043ba:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	0018      	movs	r0, r3
 80043c0:	f000 fa3d 	bl	800483e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	0b9b      	lsrs	r3, r3, #14
 80043c8:	001a      	movs	r2, r3
 80043ca:	2301      	movs	r3, #1
 80043cc:	4013      	ands	r3, r2
 80043ce:	d013      	beq.n	80043f8 <I2C_ITSlaveCplt+0xd4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4962      	ldr	r1, [pc, #392]	; (8004564 <I2C_ITSlaveCplt+0x240>)
 80043dc:	400a      	ands	r2, r1
 80043de:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d020      	beq.n	800442a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043f6:	e018      	b.n	800442a <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	0bdb      	lsrs	r3, r3, #15
 80043fc:	001a      	movs	r2, r3
 80043fe:	2301      	movs	r3, #1
 8004400:	4013      	ands	r3, r2
 8004402:	d012      	beq.n	800442a <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4956      	ldr	r1, [pc, #344]	; (8004568 <I2C_ITSlaveCplt+0x244>)
 8004410:	400a      	ands	r2, r1
 8004412:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004418:	2b00      	cmp	r3, #0
 800441a:	d006      	beq.n	800442a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	b29a      	uxth	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	089b      	lsrs	r3, r3, #2
 800442e:	001a      	movs	r2, r3
 8004430:	2301      	movs	r3, #1
 8004432:	4013      	ands	r3, r2
 8004434:	d020      	beq.n	8004478 <I2C_ITSlaveCplt+0x154>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	2204      	movs	r2, #4
 800443a:	4393      	bics	r3, r2
 800443c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	b2d2      	uxtb	r2, r2
 800444a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004450:	1c5a      	adds	r2, r3, #1
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00c      	beq.n	8004478 <I2C_ITSlaveCplt+0x154>
    {
      hi2c->XferSize--;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004462:	3b01      	subs	r3, #1
 8004464:	b29a      	uxth	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800446e:	b29b      	uxth	r3, r3
 8004470:	3b01      	subs	r3, #1
 8004472:	b29a      	uxth	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800447c:	b29b      	uxth	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d005      	beq.n	800448e <I2C_ITSlaveCplt+0x16a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004486:	2204      	movs	r2, #4
 8004488:	431a      	orrs	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2242      	movs	r2, #66	; 0x42
 8004492:	2100      	movs	r1, #0
 8004494:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d013      	beq.n	80044cc <I2C_ITSlaveCplt+0x1a8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	0011      	movs	r1, r2
 80044ac:	0018      	movs	r0, r3
 80044ae:	f000 f8b9 	bl	8004624 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2241      	movs	r2, #65	; 0x41
 80044b6:	5c9b      	ldrb	r3, [r3, r2]
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b28      	cmp	r3, #40	; 0x28
 80044bc:	d147      	bne.n	800454e <I2C_ITSlaveCplt+0x22a>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	0011      	movs	r1, r2
 80044c4:	0018      	movs	r0, r3
 80044c6:	f000 f853 	bl	8004570 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80044ca:	e040      	b.n	800454e <I2C_ITSlaveCplt+0x22a>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d0:	4a26      	ldr	r2, [pc, #152]	; (800456c <I2C_ITSlaveCplt+0x248>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d016      	beq.n	8004504 <I2C_ITSlaveCplt+0x1e0>
    I2C_ITSlaveSeqCplt(hi2c);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	0018      	movs	r0, r3
 80044da:	f7ff febd 	bl	8004258 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a22      	ldr	r2, [pc, #136]	; (800456c <I2C_ITSlaveCplt+0x248>)
 80044e2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2241      	movs	r2, #65	; 0x41
 80044e8:	2120      	movs	r1, #32
 80044ea:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2240      	movs	r2, #64	; 0x40
 80044f6:	2100      	movs	r1, #0
 80044f8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	0018      	movs	r0, r3
 80044fe:	f7ff fcd5 	bl	8003eac <HAL_I2C_ListenCpltCallback>
}
 8004502:	e024      	b.n	800454e <I2C_ITSlaveCplt+0x22a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2241      	movs	r2, #65	; 0x41
 8004508:	5c9b      	ldrb	r3, [r3, r2]
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b22      	cmp	r3, #34	; 0x22
 800450e:	d10f      	bne.n	8004530 <I2C_ITSlaveCplt+0x20c>
    hi2c->State = HAL_I2C_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2241      	movs	r2, #65	; 0x41
 8004514:	2120      	movs	r1, #32
 8004516:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2240      	movs	r2, #64	; 0x40
 8004522:	2100      	movs	r1, #0
 8004524:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	0018      	movs	r0, r3
 800452a:	f7ff fca7 	bl	8003e7c <HAL_I2C_SlaveRxCpltCallback>
}
 800452e:	e00e      	b.n	800454e <I2C_ITSlaveCplt+0x22a>
    hi2c->State = HAL_I2C_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2241      	movs	r2, #65	; 0x41
 8004534:	2120      	movs	r1, #32
 8004536:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2240      	movs	r2, #64	; 0x40
 8004542:	2100      	movs	r1, #0
 8004544:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	0018      	movs	r0, r3
 800454a:	f7ff fc8f 	bl	8003e6c <HAL_I2C_SlaveTxCpltCallback>
}
 800454e:	46c0      	nop			; (mov r8, r8)
 8004550:	46bd      	mov	sp, r7
 8004552:	b006      	add	sp, #24
 8004554:	bd80      	pop	{r7, pc}
 8004556:	46c0      	nop			; (mov r8, r8)
 8004558:	00008001 	.word	0x00008001
 800455c:	00008002 	.word	0x00008002
 8004560:	fe00e800 	.word	0xfe00e800
 8004564:	ffffbfff 	.word	0xffffbfff
 8004568:	ffff7fff 	.word	0xffff7fff
 800456c:	ffff0000 	.word	0xffff0000

08004570 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a27      	ldr	r2, [pc, #156]	; (800461c <I2C_ITListenCplt+0xac>)
 800457e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2241      	movs	r2, #65	; 0x41
 800458a:	2120      	movs	r1, #32
 800458c:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2242      	movs	r2, #66	; 0x42
 8004592:	2100      	movs	r1, #0
 8004594:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	089b      	lsrs	r3, r3, #2
 80045a0:	001a      	movs	r2, r3
 80045a2:	2301      	movs	r3, #1
 80045a4:	4013      	ands	r3, r2
 80045a6:	d022      	beq.n	80045ee <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	b2d2      	uxtb	r2, r2
 80045b4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ba:	1c5a      	adds	r2, r3, #1
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d012      	beq.n	80045ee <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045cc:	3b01      	subs	r3, #1
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d8:	b29b      	uxth	r3, r3
 80045da:	3b01      	subs	r3, #1
 80045dc:	b29a      	uxth	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e6:	2204      	movs	r2, #4
 80045e8:	431a      	orrs	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80045ee:	4a0c      	ldr	r2, [pc, #48]	; (8004620 <I2C_ITListenCplt+0xb0>)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	0011      	movs	r1, r2
 80045f4:	0018      	movs	r0, r3
 80045f6:	f000 f963 	bl	80048c0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2210      	movs	r2, #16
 8004600:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2240      	movs	r2, #64	; 0x40
 8004606:	2100      	movs	r1, #0
 8004608:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	0018      	movs	r0, r3
 800460e:	f7ff fc4d 	bl	8003eac <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004612:	46c0      	nop			; (mov r8, r8)
 8004614:	46bd      	mov	sp, r7
 8004616:	b002      	add	sp, #8
 8004618:	bd80      	pop	{r7, pc}
 800461a:	46c0      	nop			; (mov r8, r8)
 800461c:	ffff0000 	.word	0xffff0000
 8004620:	00008003 	.word	0x00008003

08004624 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800462e:	200f      	movs	r0, #15
 8004630:	183b      	adds	r3, r7, r0
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	2141      	movs	r1, #65	; 0x41
 8004636:	5c52      	ldrb	r2, [r2, r1]
 8004638:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2242      	movs	r2, #66	; 0x42
 800463e:	2100      	movs	r1, #0
 8004640:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a63      	ldr	r2, [pc, #396]	; (80047d4 <I2C_ITError+0x1b0>)
 8004646:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	431a      	orrs	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800465a:	183b      	adds	r3, r7, r0
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	2b28      	cmp	r3, #40	; 0x28
 8004660:	d009      	beq.n	8004676 <I2C_ITError+0x52>
 8004662:	230f      	movs	r3, #15
 8004664:	18fb      	adds	r3, r7, r3
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	2b29      	cmp	r3, #41	; 0x29
 800466a:	d004      	beq.n	8004676 <I2C_ITError+0x52>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800466c:	230f      	movs	r3, #15
 800466e:	18fb      	adds	r3, r7, r3
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	2b2a      	cmp	r3, #42	; 0x2a
 8004674:	d10c      	bne.n	8004690 <I2C_ITError+0x6c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2103      	movs	r1, #3
 800467a:	0018      	movs	r0, r3
 800467c:	f000 f920 	bl	80048c0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2241      	movs	r2, #65	; 0x41
 8004684:	2128      	movs	r1, #40	; 0x28
 8004686:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a53      	ldr	r2, [pc, #332]	; (80047d8 <I2C_ITError+0x1b4>)
 800468c:	635a      	str	r2, [r3, #52]	; 0x34
 800468e:	e012      	b.n	80046b6 <I2C_ITError+0x92>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004690:	4a52      	ldr	r2, [pc, #328]	; (80047dc <I2C_ITError+0x1b8>)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	0011      	movs	r1, r2
 8004696:	0018      	movs	r0, r3
 8004698:	f000 f912 	bl	80048c0 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2241      	movs	r2, #65	; 0x41
 80046a0:	5c9b      	ldrb	r3, [r3, r2]
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2b60      	cmp	r3, #96	; 0x60
 80046a6:	d003      	beq.n	80046b0 <I2C_ITError+0x8c>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2241      	movs	r2, #65	; 0x41
 80046ac:	2120      	movs	r1, #32
 80046ae:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ba:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d03b      	beq.n	800473c <I2C_ITError+0x118>
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	2b11      	cmp	r3, #17
 80046c8:	d002      	beq.n	80046d0 <I2C_ITError+0xac>
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	2b21      	cmp	r3, #33	; 0x21
 80046ce:	d135      	bne.n	800473c <I2C_ITError+0x118>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	2380      	movs	r3, #128	; 0x80
 80046d8:	01db      	lsls	r3, r3, #7
 80046da:	401a      	ands	r2, r3
 80046dc:	2380      	movs	r3, #128	; 0x80
 80046de:	01db      	lsls	r3, r3, #7
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d107      	bne.n	80046f4 <I2C_ITError+0xd0>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	493c      	ldr	r1, [pc, #240]	; (80047e0 <I2C_ITError+0x1bc>)
 80046f0:	400a      	ands	r2, r1
 80046f2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f8:	0018      	movs	r0, r3
 80046fa:	f7ff f8e5 	bl	80038c8 <HAL_DMA_GetState>
 80046fe:	0003      	movs	r3, r0
 8004700:	2b01      	cmp	r3, #1
 8004702:	d016      	beq.n	8004732 <I2C_ITError+0x10e>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004708:	4a36      	ldr	r2, [pc, #216]	; (80047e4 <I2C_ITError+0x1c0>)
 800470a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2240      	movs	r2, #64	; 0x40
 8004710:	2100      	movs	r1, #0
 8004712:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004718:	0018      	movs	r0, r3
 800471a:	f7fe ffb7 	bl	800368c <HAL_DMA_Abort_IT>
 800471e:	1e03      	subs	r3, r0, #0
 8004720:	d051      	beq.n	80047c6 <I2C_ITError+0x1a2>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004726:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472c:	0018      	movs	r0, r3
 800472e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004730:	e049      	b.n	80047c6 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	0018      	movs	r0, r3
 8004736:	f000 f859 	bl	80047ec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800473a:	e044      	b.n	80047c6 <I2C_ITError+0x1a2>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004740:	2b00      	cmp	r3, #0
 8004742:	d03b      	beq.n	80047bc <I2C_ITError+0x198>
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	2b12      	cmp	r3, #18
 8004748:	d002      	beq.n	8004750 <I2C_ITError+0x12c>
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	2b22      	cmp	r3, #34	; 0x22
 800474e:	d135      	bne.n	80047bc <I2C_ITError+0x198>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	2380      	movs	r3, #128	; 0x80
 8004758:	021b      	lsls	r3, r3, #8
 800475a:	401a      	ands	r2, r3
 800475c:	2380      	movs	r3, #128	; 0x80
 800475e:	021b      	lsls	r3, r3, #8
 8004760:	429a      	cmp	r2, r3
 8004762:	d107      	bne.n	8004774 <I2C_ITError+0x150>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	491e      	ldr	r1, [pc, #120]	; (80047e8 <I2C_ITError+0x1c4>)
 8004770:	400a      	ands	r2, r1
 8004772:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004778:	0018      	movs	r0, r3
 800477a:	f7ff f8a5 	bl	80038c8 <HAL_DMA_GetState>
 800477e:	0003      	movs	r3, r0
 8004780:	2b01      	cmp	r3, #1
 8004782:	d016      	beq.n	80047b2 <I2C_ITError+0x18e>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004788:	4a16      	ldr	r2, [pc, #88]	; (80047e4 <I2C_ITError+0x1c0>)
 800478a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2240      	movs	r2, #64	; 0x40
 8004790:	2100      	movs	r1, #0
 8004792:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004798:	0018      	movs	r0, r3
 800479a:	f7fe ff77 	bl	800368c <HAL_DMA_Abort_IT>
 800479e:	1e03      	subs	r3, r0, #0
 80047a0:	d013      	beq.n	80047ca <I2C_ITError+0x1a6>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ac:	0018      	movs	r0, r3
 80047ae:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80047b0:	e00b      	b.n	80047ca <I2C_ITError+0x1a6>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	0018      	movs	r0, r3
 80047b6:	f000 f819 	bl	80047ec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80047ba:	e006      	b.n	80047ca <I2C_ITError+0x1a6>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	0018      	movs	r0, r3
 80047c0:	f000 f814 	bl	80047ec <I2C_TreatErrorCallback>
  }
}
 80047c4:	e002      	b.n	80047cc <I2C_ITError+0x1a8>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80047c6:	46c0      	nop			; (mov r8, r8)
 80047c8:	e000      	b.n	80047cc <I2C_ITError+0x1a8>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80047ca:	46c0      	nop			; (mov r8, r8)
}
 80047cc:	46c0      	nop			; (mov r8, r8)
 80047ce:	46bd      	mov	sp, r7
 80047d0:	b004      	add	sp, #16
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	ffff0000 	.word	0xffff0000
 80047d8:	08003edd 	.word	0x08003edd
 80047dc:	00008003 	.word	0x00008003
 80047e0:	ffffbfff 	.word	0xffffbfff
 80047e4:	08004883 	.word	0x08004883
 80047e8:	ffff7fff 	.word	0xffff7fff

080047ec <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2241      	movs	r2, #65	; 0x41
 80047f8:	5c9b      	ldrb	r3, [r3, r2]
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	2b60      	cmp	r3, #96	; 0x60
 80047fe:	d10f      	bne.n	8004820 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2241      	movs	r2, #65	; 0x41
 8004804:	2120      	movs	r1, #32
 8004806:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2240      	movs	r2, #64	; 0x40
 8004812:	2100      	movs	r1, #0
 8004814:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	0018      	movs	r0, r3
 800481a:	f7ff fb57 	bl	8003ecc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800481e:	e00a      	b.n	8004836 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2240      	movs	r2, #64	; 0x40
 800482a:	2100      	movs	r1, #0
 800482c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	0018      	movs	r0, r3
 8004832:	f7ff fb43 	bl	8003ebc <HAL_I2C_ErrorCallback>
}
 8004836:	46c0      	nop			; (mov r8, r8)
 8004838:	46bd      	mov	sp, r7
 800483a:	b002      	add	sp, #8
 800483c:	bd80      	pop	{r7, pc}

0800483e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b082      	sub	sp, #8
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	2202      	movs	r2, #2
 800484e:	4013      	ands	r3, r2
 8004850:	2b02      	cmp	r3, #2
 8004852:	d103      	bne.n	800485c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2200      	movs	r2, #0
 800485a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	2201      	movs	r2, #1
 8004864:	4013      	ands	r3, r2
 8004866:	2b01      	cmp	r3, #1
 8004868:	d007      	beq.n	800487a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	699a      	ldr	r2, [r3, #24]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2101      	movs	r1, #1
 8004876:	430a      	orrs	r2, r1
 8004878:	619a      	str	r2, [r3, #24]
  }
}
 800487a:	46c0      	nop			; (mov r8, r8)
 800487c:	46bd      	mov	sp, r7
 800487e:	b002      	add	sp, #8
 8004880:	bd80      	pop	{r7, pc}

08004882 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b084      	sub	sp, #16
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004894:	2b00      	cmp	r3, #0
 8004896:	d003      	beq.n	80048a0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489c:	2200      	movs	r2, #0
 800489e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d003      	beq.n	80048b0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ac:	2200      	movs	r2, #0
 80048ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	0018      	movs	r0, r3
 80048b4:	f7ff ff9a 	bl	80047ec <I2C_TreatErrorCallback>
}
 80048b8:	46c0      	nop			; (mov r8, r8)
 80048ba:	46bd      	mov	sp, r7
 80048bc:	b004      	add	sp, #16
 80048be:	bd80      	pop	{r7, pc}

080048c0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	000a      	movs	r2, r1
 80048ca:	1cbb      	adds	r3, r7, #2
 80048cc:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80048ce:	2300      	movs	r3, #0
 80048d0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80048d2:	1cbb      	adds	r3, r7, #2
 80048d4:	881b      	ldrh	r3, [r3, #0]
 80048d6:	2201      	movs	r2, #1
 80048d8:	4013      	ands	r3, r2
 80048da:	d010      	beq.n	80048fe <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2242      	movs	r2, #66	; 0x42
 80048e0:	4313      	orrs	r3, r2
 80048e2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2241      	movs	r2, #65	; 0x41
 80048e8:	5c9b      	ldrb	r3, [r3, r2]
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	001a      	movs	r2, r3
 80048ee:	2328      	movs	r3, #40	; 0x28
 80048f0:	4013      	ands	r3, r2
 80048f2:	2b28      	cmp	r3, #40	; 0x28
 80048f4:	d003      	beq.n	80048fe <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	22b0      	movs	r2, #176	; 0xb0
 80048fa:	4313      	orrs	r3, r2
 80048fc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80048fe:	1cbb      	adds	r3, r7, #2
 8004900:	881b      	ldrh	r3, [r3, #0]
 8004902:	2202      	movs	r2, #2
 8004904:	4013      	ands	r3, r2
 8004906:	d010      	beq.n	800492a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2244      	movs	r2, #68	; 0x44
 800490c:	4313      	orrs	r3, r2
 800490e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2241      	movs	r2, #65	; 0x41
 8004914:	5c9b      	ldrb	r3, [r3, r2]
 8004916:	b2db      	uxtb	r3, r3
 8004918:	001a      	movs	r2, r3
 800491a:	2328      	movs	r3, #40	; 0x28
 800491c:	4013      	ands	r3, r2
 800491e:	2b28      	cmp	r3, #40	; 0x28
 8004920:	d003      	beq.n	800492a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	22b0      	movs	r2, #176	; 0xb0
 8004926:	4313      	orrs	r3, r2
 8004928:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800492a:	1cbb      	adds	r3, r7, #2
 800492c:	2200      	movs	r2, #0
 800492e:	5e9b      	ldrsh	r3, [r3, r2]
 8004930:	2b00      	cmp	r3, #0
 8004932:	da03      	bge.n	800493c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	22b8      	movs	r2, #184	; 0xb8
 8004938:	4313      	orrs	r3, r2
 800493a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800493c:	1cbb      	adds	r3, r7, #2
 800493e:	881b      	ldrh	r3, [r3, #0]
 8004940:	2b10      	cmp	r3, #16
 8004942:	d103      	bne.n	800494c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2290      	movs	r2, #144	; 0x90
 8004948:	4313      	orrs	r3, r2
 800494a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800494c:	1cbb      	adds	r3, r7, #2
 800494e:	881b      	ldrh	r3, [r3, #0]
 8004950:	2b20      	cmp	r3, #32
 8004952:	d103      	bne.n	800495c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2220      	movs	r2, #32
 8004958:	4313      	orrs	r3, r2
 800495a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800495c:	1cbb      	adds	r3, r7, #2
 800495e:	881b      	ldrh	r3, [r3, #0]
 8004960:	2b40      	cmp	r3, #64	; 0x40
 8004962:	d103      	bne.n	800496c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2240      	movs	r2, #64	; 0x40
 8004968:	4313      	orrs	r3, r2
 800496a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	43d9      	mvns	r1, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	400a      	ands	r2, r1
 800497c:	601a      	str	r2, [r3, #0]
}
 800497e:	46c0      	nop			; (mov r8, r8)
 8004980:	46bd      	mov	sp, r7
 8004982:	b004      	add	sp, #16
 8004984:	bd80      	pop	{r7, pc}
	...

08004988 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2241      	movs	r2, #65	; 0x41
 8004996:	5c9b      	ldrb	r3, [r3, r2]
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b20      	cmp	r3, #32
 800499c:	d138      	bne.n	8004a10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2240      	movs	r2, #64	; 0x40
 80049a2:	5c9b      	ldrb	r3, [r3, r2]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d101      	bne.n	80049ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80049a8:	2302      	movs	r3, #2
 80049aa:	e032      	b.n	8004a12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2240      	movs	r2, #64	; 0x40
 80049b0:	2101      	movs	r1, #1
 80049b2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2241      	movs	r2, #65	; 0x41
 80049b8:	2124      	movs	r1, #36	; 0x24
 80049ba:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2101      	movs	r1, #1
 80049c8:	438a      	bics	r2, r1
 80049ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4911      	ldr	r1, [pc, #68]	; (8004a1c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80049d8:	400a      	ands	r2, r1
 80049da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6819      	ldr	r1, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	430a      	orrs	r2, r1
 80049ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2101      	movs	r1, #1
 80049f8:	430a      	orrs	r2, r1
 80049fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2241      	movs	r2, #65	; 0x41
 8004a00:	2120      	movs	r1, #32
 8004a02:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2240      	movs	r2, #64	; 0x40
 8004a08:	2100      	movs	r1, #0
 8004a0a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	e000      	b.n	8004a12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004a10:	2302      	movs	r3, #2
  }
}
 8004a12:	0018      	movs	r0, r3
 8004a14:	46bd      	mov	sp, r7
 8004a16:	b002      	add	sp, #8
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	46c0      	nop			; (mov r8, r8)
 8004a1c:	ffffefff 	.word	0xffffefff

08004a20 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2241      	movs	r2, #65	; 0x41
 8004a2e:	5c9b      	ldrb	r3, [r3, r2]
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b20      	cmp	r3, #32
 8004a34:	d139      	bne.n	8004aaa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2240      	movs	r2, #64	; 0x40
 8004a3a:	5c9b      	ldrb	r3, [r3, r2]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d101      	bne.n	8004a44 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004a40:	2302      	movs	r3, #2
 8004a42:	e033      	b.n	8004aac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2240      	movs	r2, #64	; 0x40
 8004a48:	2101      	movs	r1, #1
 8004a4a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2241      	movs	r2, #65	; 0x41
 8004a50:	2124      	movs	r1, #36	; 0x24
 8004a52:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2101      	movs	r1, #1
 8004a60:	438a      	bics	r2, r1
 8004a62:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	4a11      	ldr	r2, [pc, #68]	; (8004ab4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004a70:	4013      	ands	r3, r2
 8004a72:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	021b      	lsls	r3, r3, #8
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2101      	movs	r1, #1
 8004a92:	430a      	orrs	r2, r1
 8004a94:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2241      	movs	r2, #65	; 0x41
 8004a9a:	2120      	movs	r1, #32
 8004a9c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2240      	movs	r2, #64	; 0x40
 8004aa2:	2100      	movs	r1, #0
 8004aa4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	e000      	b.n	8004aac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004aaa:	2302      	movs	r3, #2
  }
}
 8004aac:	0018      	movs	r0, r3
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	b004      	add	sp, #16
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	fffff0ff 	.word	0xfffff0ff

08004ab8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b088      	sub	sp, #32
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e0e5      	b.n	8004c96 <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2235      	movs	r2, #53	; 0x35
 8004ace:	5c9b      	ldrb	r3, [r3, r2]
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d107      	bne.n	8004ae6 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2234      	movs	r2, #52	; 0x34
 8004ada:	2100      	movs	r1, #0
 8004adc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	0018      	movs	r0, r3
 8004ae2:	f7fd fe2b 	bl	800273c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2235      	movs	r2, #53	; 0x35
 8004aea:	2102      	movs	r1, #2
 8004aec:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	69da      	ldr	r2, [r3, #28]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4969      	ldr	r1, [pc, #420]	; (8004ca0 <HAL_I2S_Init+0x1e8>)
 8004afa:	400a      	ands	r2, r1
 8004afc:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2202      	movs	r2, #2
 8004b04:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d100      	bne.n	8004b10 <HAL_I2S_Init+0x58>
 8004b0e:	e076      	b.n	8004bfe <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d102      	bne.n	8004b1e <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004b18:	2310      	movs	r3, #16
 8004b1a:	617b      	str	r3, [r7, #20]
 8004b1c:	e001      	b.n	8004b22 <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004b1e:	2320      	movs	r3, #32
 8004b20:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	2b20      	cmp	r3, #32
 8004b28:	d802      	bhi.n	8004b30 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	005b      	lsls	r3, r3, #1
 8004b2e:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 8004b30:	2380      	movs	r3, #128	; 0x80
 8004b32:	011b      	lsls	r3, r3, #4
 8004b34:	0018      	movs	r0, r3
 8004b36:	f001 f865 	bl	8005c04 <HAL_RCCEx_GetPeriphCLKFreq>
 8004b3a:	0003      	movs	r3, r0
 8004b3c:	60fb      	str	r3, [r7, #12]
#endif
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	691a      	ldr	r2, [r3, #16]
 8004b42:	2380      	movs	r3, #128	; 0x80
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d131      	bne.n	8004bae <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d016      	beq.n	8004b80 <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	0019      	movs	r1, r3
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f7fb fad3 	bl	8000104 <__udivsi3>
 8004b5e:	0003      	movs	r3, r0
 8004b60:	001a      	movs	r2, r3
 8004b62:	0013      	movs	r3, r2
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	189b      	adds	r3, r3, r2
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	001a      	movs	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	695b      	ldr	r3, [r3, #20]
 8004b70:	0019      	movs	r1, r3
 8004b72:	0010      	movs	r0, r2
 8004b74:	f7fb fac6 	bl	8000104 <__udivsi3>
 8004b78:	0003      	movs	r3, r0
 8004b7a:	3305      	adds	r3, #5
 8004b7c:	613b      	str	r3, [r7, #16]
 8004b7e:	e02a      	b.n	8004bd6 <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	0019      	movs	r1, r3
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f7fb fabc 	bl	8000104 <__udivsi3>
 8004b8c:	0003      	movs	r3, r0
 8004b8e:	001a      	movs	r2, r3
 8004b90:	0013      	movs	r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	189b      	adds	r3, r3, r2
 8004b96:	005b      	lsls	r3, r3, #1
 8004b98:	001a      	movs	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	0019      	movs	r1, r3
 8004ba0:	0010      	movs	r0, r2
 8004ba2:	f7fb faaf 	bl	8000104 <__udivsi3>
 8004ba6:	0003      	movs	r3, r0
 8004ba8:	3305      	adds	r3, #5
 8004baa:	613b      	str	r3, [r7, #16]
 8004bac:	e013      	b.n	8004bd6 <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004bae:	6979      	ldr	r1, [r7, #20]
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f7fb faa7 	bl	8000104 <__udivsi3>
 8004bb6:	0003      	movs	r3, r0
 8004bb8:	001a      	movs	r2, r3
 8004bba:	0013      	movs	r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	189b      	adds	r3, r3, r2
 8004bc0:	005b      	lsls	r3, r3, #1
 8004bc2:	001a      	movs	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	695b      	ldr	r3, [r3, #20]
 8004bc8:	0019      	movs	r1, r3
 8004bca:	0010      	movs	r0, r2
 8004bcc:	f7fb fa9a 	bl	8000104 <__udivsi3>
 8004bd0:	0003      	movs	r3, r0
 8004bd2:	3305      	adds	r3, #5
 8004bd4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	210a      	movs	r1, #10
 8004bda:	0018      	movs	r0, r3
 8004bdc:	f7fb fa92 	bl	8000104 <__udivsi3>
 8004be0:	0003      	movs	r3, r0
 8004be2:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	2201      	movs	r2, #1
 8004be8:	4013      	ands	r3, r2
 8004bea:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	085b      	lsrs	r3, r3, #1
 8004bf4:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	021b      	lsls	r3, r3, #8
 8004bfa:	61bb      	str	r3, [r7, #24]
 8004bfc:	e003      	b.n	8004c06 <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004bfe:	2302      	movs	r3, #2
 8004c00:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004c02:	2300      	movs	r3, #0
 8004c04:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d902      	bls.n	8004c12 <HAL_I2S_Init+0x15a>
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	2bff      	cmp	r3, #255	; 0xff
 8004c10:	d907      	bls.n	8004c22 <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c16:	2210      	movs	r2, #16
 8004c18:	431a      	orrs	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e039      	b.n	8004c96 <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	691a      	ldr	r2, [r3, #16]
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	431a      	orrs	r2, r3
 8004c2a:	0011      	movs	r1, r2
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	69fa      	ldr	r2, [r7, #28]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	69db      	ldr	r3, [r3, #28]
 8004c3c:	4a18      	ldr	r2, [pc, #96]	; (8004ca0 <HAL_I2S_Init+0x1e8>)
 8004c3e:	401a      	ands	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6859      	ldr	r1, [r3, #4]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	4319      	orrs	r1, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	4319      	orrs	r1, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	430b      	orrs	r3, r1
 8004c56:	431a      	orrs	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2180      	movs	r1, #128	; 0x80
 8004c5e:	0109      	lsls	r1, r1, #4
 8004c60:	430a      	orrs	r2, r1
 8004c62:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	2b30      	cmp	r3, #48	; 0x30
 8004c6a:	d003      	beq.n	8004c74 <HAL_I2S_Init+0x1bc>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	2bb0      	cmp	r3, #176	; 0xb0
 8004c72:	d108      	bne.n	8004c86 <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	69da      	ldr	r2, [r3, #28]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2180      	movs	r1, #128	; 0x80
 8004c80:	0149      	lsls	r1, r1, #5
 8004c82:	430a      	orrs	r2, r1
 8004c84:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2235      	movs	r2, #53	; 0x35
 8004c90:	2101      	movs	r1, #1
 8004c92:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	0018      	movs	r0, r3
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	b008      	add	sp, #32
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	46c0      	nop			; (mov r8, r8)
 8004ca0:	fffff040 	.word	0xfffff040

08004ca4 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hi2s->Instance->CR2;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hi2s->Instance->SR;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	60bb      	str	r3, [r7, #8]

  /* I2S in mode Receiver ------------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	099b      	lsrs	r3, r3, #6
 8004cc0:	001a      	movs	r2, r3
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	d10e      	bne.n	8004ce6 <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	4013      	ands	r3, r2
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8004cce:	d00a      	beq.n	8004ce6 <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	099b      	lsrs	r3, r3, #6
 8004cd4:	001a      	movs	r2, r3
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	4013      	ands	r3, r2
 8004cda:	d004      	beq.n	8004ce6 <HAL_I2S_IRQHandler+0x42>
  {
    I2S_Receive_IT(hi2s);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	0018      	movs	r0, r3
 8004ce0:	f000 f892 	bl	8004e08 <I2S_Receive_IT>
    return;
 8004ce4:	e046      	b.n	8004d74 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S in mode Tramitter -----------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_TXE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_TXE) != RESET))
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	085b      	lsrs	r3, r3, #1
 8004cea:	001a      	movs	r2, r3
 8004cec:	2301      	movs	r3, #1
 8004cee:	4013      	ands	r3, r2
 8004cf0:	d00a      	beq.n	8004d08 <HAL_I2S_IRQHandler+0x64>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	09db      	lsrs	r3, r3, #7
 8004cf6:	001a      	movs	r2, r3
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	d004      	beq.n	8004d08 <HAL_I2S_IRQHandler+0x64>
  {
    I2S_Transmit_IT(hi2s);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	0018      	movs	r0, r3
 8004d02:	f000 f852 	bl	8004daa <I2S_Transmit_IT>
    return;
 8004d06:	e035      	b.n	8004d74 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S interrupt error -------------------------------------------------*/
  if (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_ERR) != RESET)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	095b      	lsrs	r3, r3, #5
 8004d0c:	001a      	movs	r2, r3
 8004d0e:	2301      	movs	r3, #1
 8004d10:	4013      	ands	r3, r2
 8004d12:	d02f      	beq.n	8004d74 <HAL_I2S_IRQHandler+0xd0>
  {
    /* I2S Overrun error interrupt occurred ---------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) != RESET)
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	099b      	lsrs	r3, r3, #6
 8004d18:	001a      	movs	r2, r3
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	d00d      	beq.n	8004d3c <HAL_I2S_IRQHandler+0x98>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	685a      	ldr	r2, [r3, #4]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2160      	movs	r1, #96	; 0x60
 8004d2c:	438a      	bics	r2, r1
 8004d2e:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d34:	2202      	movs	r2, #2
 8004d36:	431a      	orrs	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_UDR) != RESET)
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	08db      	lsrs	r3, r3, #3
 8004d40:	001a      	movs	r2, r3
 8004d42:	2301      	movs	r3, #1
 8004d44:	4013      	ands	r3, r2
 8004d46:	d00d      	beq.n	8004d64 <HAL_I2S_IRQHandler+0xc0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685a      	ldr	r2, [r3, #4]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	21a0      	movs	r1, #160	; 0xa0
 8004d54:	438a      	bics	r2, r1
 8004d56:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5c:	2204      	movs	r2, #4
 8004d5e:	431a      	orrs	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Set the I2S State ready */
    hi2s->State = HAL_I2S_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2235      	movs	r2, #53	; 0x35
 8004d68:	2101      	movs	r1, #1
 8004d6a:	5499      	strb	r1, [r3, r2]

    /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->ErrorCallback(hi2s);
#else
    HAL_I2S_ErrorCallback(hi2s);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	0018      	movs	r0, r3
 8004d70:	f000 f813 	bl	8004d9a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004d74:	46bd      	mov	sp, r7
 8004d76:	b004      	add	sp, #16
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b082      	sub	sp, #8
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004d82:	46c0      	nop			; (mov r8, r8)
 8004d84:	46bd      	mov	sp, r7
 8004d86:	b002      	add	sp, #8
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b082      	sub	sp, #8
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004d92:	46c0      	nop			; (mov r8, r8)
 8004d94:	46bd      	mov	sp, r7
 8004d96:	b002      	add	sp, #8
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b082      	sub	sp, #8
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004da2:	46c0      	nop			; (mov r8, r8)
 8004da4:	46bd      	mov	sp, r7
 8004da6:	b002      	add	sp, #8
 8004da8:	bd80      	pop	{r7, pc}

08004daa <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b082      	sub	sp, #8
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	69db      	ldr	r3, [r3, #28]
 8004db6:	881a      	ldrh	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	69db      	ldr	r3, [r3, #28]
 8004dc2:	1c9a      	adds	r2, r3, #2
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	61da      	str	r2, [r3, #28]
  hi2s->TxXferCount--;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	845a      	strh	r2, [r3, #34]	; 0x22

  if (hi2s->TxXferCount == 0U)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10f      	bne.n	8004e00 <I2S_Transmit_IT+0x56>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	21a0      	movs	r1, #160	; 0xa0
 8004dec:	438a      	bics	r2, r1
 8004dee:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2235      	movs	r2, #53	; 0x35
 8004df4:	2101      	movs	r1, #1
 8004df6:	5499      	strb	r1, [r3, r2]
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	0018      	movs	r0, r3
 8004dfc:	f7ff ffbd 	bl	8004d7a <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004e00:	46c0      	nop			; (mov r8, r8)
 8004e02:	46bd      	mov	sp, r7
 8004e04:	b002      	add	sp, #8
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68da      	ldr	r2, [r3, #12]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1a:	b292      	uxth	r2, r2
 8004e1c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e22:	1c9a      	adds	r2, r3, #2
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->RxXferCount--;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->RxXferCount == 0U)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10f      	bne.n	8004e60 <I2S_Receive_IT+0x58>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	685a      	ldr	r2, [r3, #4]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2160      	movs	r1, #96	; 0x60
 8004e4c:	438a      	bics	r2, r1
 8004e4e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2235      	movs	r2, #53	; 0x35
 8004e54:	2101      	movs	r1, #1
 8004e56:	5499      	strb	r1, [r3, r2]
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	0018      	movs	r0, r3
 8004e5c:	f7ff ff95 	bl	8004d8a <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004e60:	46c0      	nop			; (mov r8, r8)
 8004e62:	46bd      	mov	sp, r7
 8004e64:	b002      	add	sp, #8
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004e70:	4b19      	ldr	r3, [pc, #100]	; (8004ed8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a19      	ldr	r2, [pc, #100]	; (8004edc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004e76:	4013      	ands	r3, r2
 8004e78:	0019      	movs	r1, r3
 8004e7a:	4b17      	ldr	r3, [pc, #92]	; (8004ed8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	2380      	movs	r3, #128	; 0x80
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d11f      	bne.n	8004ecc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8004e8c:	4b14      	ldr	r3, [pc, #80]	; (8004ee0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	0013      	movs	r3, r2
 8004e92:	005b      	lsls	r3, r3, #1
 8004e94:	189b      	adds	r3, r3, r2
 8004e96:	005b      	lsls	r3, r3, #1
 8004e98:	4912      	ldr	r1, [pc, #72]	; (8004ee4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004e9a:	0018      	movs	r0, r3
 8004e9c:	f7fb f932 	bl	8000104 <__udivsi3>
 8004ea0:	0003      	movs	r3, r0
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ea6:	e008      	b.n	8004eba <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d003      	beq.n	8004eb6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	60fb      	str	r3, [r7, #12]
 8004eb4:	e001      	b.n	8004eba <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e009      	b.n	8004ece <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004eba:	4b07      	ldr	r3, [pc, #28]	; (8004ed8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004ebc:	695a      	ldr	r2, [r3, #20]
 8004ebe:	2380      	movs	r3, #128	; 0x80
 8004ec0:	00db      	lsls	r3, r3, #3
 8004ec2:	401a      	ands	r2, r3
 8004ec4:	2380      	movs	r3, #128	; 0x80
 8004ec6:	00db      	lsls	r3, r3, #3
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d0ed      	beq.n	8004ea8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	0018      	movs	r0, r3
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	b004      	add	sp, #16
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	46c0      	nop			; (mov r8, r8)
 8004ed8:	40007000 	.word	0x40007000
 8004edc:	fffff9ff 	.word	0xfffff9ff
 8004ee0:	20005134 	.word	0x20005134
 8004ee4:	000f4240 	.word	0x000f4240

08004ee8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004eec:	4b03      	ldr	r3, [pc, #12]	; (8004efc <LL_RCC_GetAPB1Prescaler+0x14>)
 8004eee:	689a      	ldr	r2, [r3, #8]
 8004ef0:	23e0      	movs	r3, #224	; 0xe0
 8004ef2:	01db      	lsls	r3, r3, #7
 8004ef4:	4013      	ands	r3, r2
}
 8004ef6:	0018      	movs	r0, r3
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	40021000 	.word	0x40021000

08004f00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b088      	sub	sp, #32
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d101      	bne.n	8004f12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e304      	b.n	800551c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2201      	movs	r2, #1
 8004f18:	4013      	ands	r3, r2
 8004f1a:	d100      	bne.n	8004f1e <HAL_RCC_OscConfig+0x1e>
 8004f1c:	e07c      	b.n	8005018 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f1e:	4bc3      	ldr	r3, [pc, #780]	; (800522c <HAL_RCC_OscConfig+0x32c>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	2238      	movs	r2, #56	; 0x38
 8004f24:	4013      	ands	r3, r2
 8004f26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f28:	4bc0      	ldr	r3, [pc, #768]	; (800522c <HAL_RCC_OscConfig+0x32c>)
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	2203      	movs	r2, #3
 8004f2e:	4013      	ands	r3, r2
 8004f30:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	2b10      	cmp	r3, #16
 8004f36:	d102      	bne.n	8004f3e <HAL_RCC_OscConfig+0x3e>
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	2b03      	cmp	r3, #3
 8004f3c:	d002      	beq.n	8004f44 <HAL_RCC_OscConfig+0x44>
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	2b08      	cmp	r3, #8
 8004f42:	d10b      	bne.n	8004f5c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f44:	4bb9      	ldr	r3, [pc, #740]	; (800522c <HAL_RCC_OscConfig+0x32c>)
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	2380      	movs	r3, #128	; 0x80
 8004f4a:	029b      	lsls	r3, r3, #10
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	d062      	beq.n	8005016 <HAL_RCC_OscConfig+0x116>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d15e      	bne.n	8005016 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e2df      	b.n	800551c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	2380      	movs	r3, #128	; 0x80
 8004f62:	025b      	lsls	r3, r3, #9
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d107      	bne.n	8004f78 <HAL_RCC_OscConfig+0x78>
 8004f68:	4bb0      	ldr	r3, [pc, #704]	; (800522c <HAL_RCC_OscConfig+0x32c>)
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	4baf      	ldr	r3, [pc, #700]	; (800522c <HAL_RCC_OscConfig+0x32c>)
 8004f6e:	2180      	movs	r1, #128	; 0x80
 8004f70:	0249      	lsls	r1, r1, #9
 8004f72:	430a      	orrs	r2, r1
 8004f74:	601a      	str	r2, [r3, #0]
 8004f76:	e020      	b.n	8004fba <HAL_RCC_OscConfig+0xba>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685a      	ldr	r2, [r3, #4]
 8004f7c:	23a0      	movs	r3, #160	; 0xa0
 8004f7e:	02db      	lsls	r3, r3, #11
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d10e      	bne.n	8004fa2 <HAL_RCC_OscConfig+0xa2>
 8004f84:	4ba9      	ldr	r3, [pc, #676]	; (800522c <HAL_RCC_OscConfig+0x32c>)
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	4ba8      	ldr	r3, [pc, #672]	; (800522c <HAL_RCC_OscConfig+0x32c>)
 8004f8a:	2180      	movs	r1, #128	; 0x80
 8004f8c:	02c9      	lsls	r1, r1, #11
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	601a      	str	r2, [r3, #0]
 8004f92:	4ba6      	ldr	r3, [pc, #664]	; (800522c <HAL_RCC_OscConfig+0x32c>)
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	4ba5      	ldr	r3, [pc, #660]	; (800522c <HAL_RCC_OscConfig+0x32c>)
 8004f98:	2180      	movs	r1, #128	; 0x80
 8004f9a:	0249      	lsls	r1, r1, #9
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	601a      	str	r2, [r3, #0]
 8004fa0:	e00b      	b.n	8004fba <HAL_RCC_OscConfig+0xba>
 8004fa2:	4ba2      	ldr	r3, [pc, #648]	; (800522c <HAL_RCC_OscConfig+0x32c>)
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	4ba1      	ldr	r3, [pc, #644]	; (800522c <HAL_RCC_OscConfig+0x32c>)
 8004fa8:	49a1      	ldr	r1, [pc, #644]	; (8005230 <HAL_RCC_OscConfig+0x330>)
 8004faa:	400a      	ands	r2, r1
 8004fac:	601a      	str	r2, [r3, #0]
 8004fae:	4b9f      	ldr	r3, [pc, #636]	; (800522c <HAL_RCC_OscConfig+0x32c>)
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	4b9e      	ldr	r3, [pc, #632]	; (800522c <HAL_RCC_OscConfig+0x32c>)
 8004fb4:	499f      	ldr	r1, [pc, #636]	; (8005234 <HAL_RCC_OscConfig+0x334>)
 8004fb6:	400a      	ands	r2, r1
 8004fb8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d014      	beq.n	8004fec <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc2:	f7fd ff5b 	bl	8002e7c <HAL_GetTick>
 8004fc6:	0003      	movs	r3, r0
 8004fc8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fca:	e008      	b.n	8004fde <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fcc:	f7fd ff56 	bl	8002e7c <HAL_GetTick>
 8004fd0:	0002      	movs	r2, r0
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b64      	cmp	r3, #100	; 0x64
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e29e      	b.n	800551c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fde:	4b93      	ldr	r3, [pc, #588]	; (800522c <HAL_RCC_OscConfig+0x32c>)
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	2380      	movs	r3, #128	; 0x80
 8004fe4:	029b      	lsls	r3, r3, #10
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	d0f0      	beq.n	8004fcc <HAL_RCC_OscConfig+0xcc>
 8004fea:	e015      	b.n	8005018 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fec:	f7fd ff46 	bl	8002e7c <HAL_GetTick>
 8004ff0:	0003      	movs	r3, r0
 8004ff2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ff4:	e008      	b.n	8005008 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ff6:	f7fd ff41 	bl	8002e7c <HAL_GetTick>
 8004ffa:	0002      	movs	r2, r0
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	2b64      	cmp	r3, #100	; 0x64
 8005002:	d901      	bls.n	8005008 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e289      	b.n	800551c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005008:	4b88      	ldr	r3, [pc, #544]	; (800522c <HAL_RCC_OscConfig+0x32c>)
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	2380      	movs	r3, #128	; 0x80
 800500e:	029b      	lsls	r3, r3, #10
 8005010:	4013      	ands	r3, r2
 8005012:	d1f0      	bne.n	8004ff6 <HAL_RCC_OscConfig+0xf6>
 8005014:	e000      	b.n	8005018 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005016:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2202      	movs	r2, #2
 800501e:	4013      	ands	r3, r2
 8005020:	d100      	bne.n	8005024 <HAL_RCC_OscConfig+0x124>
 8005022:	e099      	b.n	8005158 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005024:	4b81      	ldr	r3, [pc, #516]	; (800522c <HAL_RCC_OscConfig+0x32c>)
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	2238      	movs	r2, #56	; 0x38
 800502a:	4013      	ands	r3, r2
 800502c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800502e:	4b7f      	ldr	r3, [pc, #508]	; (800522c <HAL_RCC_OscConfig+0x32c>)
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	2203      	movs	r2, #3
 8005034:	4013      	ands	r3, r2
 8005036:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	2b10      	cmp	r3, #16
 800503c:	d102      	bne.n	8005044 <HAL_RCC_OscConfig+0x144>
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	2b02      	cmp	r3, #2
 8005042:	d002      	beq.n	800504a <HAL_RCC_OscConfig+0x14a>
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d135      	bne.n	80050b6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800504a:	4b78      	ldr	r3, [pc, #480]	; (800522c <HAL_RCC_OscConfig+0x32c>)
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	2380      	movs	r3, #128	; 0x80
 8005050:	00db      	lsls	r3, r3, #3
 8005052:	4013      	ands	r3, r2
 8005054:	d005      	beq.n	8005062 <HAL_RCC_OscConfig+0x162>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d101      	bne.n	8005062 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e25c      	b.n	800551c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005062:	4b72      	ldr	r3, [pc, #456]	; (800522c <HAL_RCC_OscConfig+0x32c>)
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	4a74      	ldr	r2, [pc, #464]	; (8005238 <HAL_RCC_OscConfig+0x338>)
 8005068:	4013      	ands	r3, r2
 800506a:	0019      	movs	r1, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	021a      	lsls	r2, r3, #8
 8005072:	4b6e      	ldr	r3, [pc, #440]	; (800522c <HAL_RCC_OscConfig+0x32c>)
 8005074:	430a      	orrs	r2, r1
 8005076:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d112      	bne.n	80050a4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800507e:	4b6b      	ldr	r3, [pc, #428]	; (800522c <HAL_RCC_OscConfig+0x32c>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a6e      	ldr	r2, [pc, #440]	; (800523c <HAL_RCC_OscConfig+0x33c>)
 8005084:	4013      	ands	r3, r2
 8005086:	0019      	movs	r1, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	691a      	ldr	r2, [r3, #16]
 800508c:	4b67      	ldr	r3, [pc, #412]	; (800522c <HAL_RCC_OscConfig+0x32c>)
 800508e:	430a      	orrs	r2, r1
 8005090:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005092:	4b66      	ldr	r3, [pc, #408]	; (800522c <HAL_RCC_OscConfig+0x32c>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	0adb      	lsrs	r3, r3, #11
 8005098:	2207      	movs	r2, #7
 800509a:	4013      	ands	r3, r2
 800509c:	4a68      	ldr	r2, [pc, #416]	; (8005240 <HAL_RCC_OscConfig+0x340>)
 800509e:	40da      	lsrs	r2, r3
 80050a0:	4b68      	ldr	r3, [pc, #416]	; (8005244 <HAL_RCC_OscConfig+0x344>)
 80050a2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80050a4:	4b68      	ldr	r3, [pc, #416]	; (8005248 <HAL_RCC_OscConfig+0x348>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	0018      	movs	r0, r3
 80050aa:	f7fd fe8b 	bl	8002dc4 <HAL_InitTick>
 80050ae:	1e03      	subs	r3, r0, #0
 80050b0:	d051      	beq.n	8005156 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e232      	b.n	800551c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d030      	beq.n	8005120 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80050be:	4b5b      	ldr	r3, [pc, #364]	; (800522c <HAL_RCC_OscConfig+0x32c>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a5e      	ldr	r2, [pc, #376]	; (800523c <HAL_RCC_OscConfig+0x33c>)
 80050c4:	4013      	ands	r3, r2
 80050c6:	0019      	movs	r1, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	691a      	ldr	r2, [r3, #16]
 80050cc:	4b57      	ldr	r3, [pc, #348]	; (800522c <HAL_RCC_OscConfig+0x32c>)
 80050ce:	430a      	orrs	r2, r1
 80050d0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80050d2:	4b56      	ldr	r3, [pc, #344]	; (800522c <HAL_RCC_OscConfig+0x32c>)
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	4b55      	ldr	r3, [pc, #340]	; (800522c <HAL_RCC_OscConfig+0x32c>)
 80050d8:	2180      	movs	r1, #128	; 0x80
 80050da:	0049      	lsls	r1, r1, #1
 80050dc:	430a      	orrs	r2, r1
 80050de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e0:	f7fd fecc 	bl	8002e7c <HAL_GetTick>
 80050e4:	0003      	movs	r3, r0
 80050e6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050e8:	e008      	b.n	80050fc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050ea:	f7fd fec7 	bl	8002e7c <HAL_GetTick>
 80050ee:	0002      	movs	r2, r0
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d901      	bls.n	80050fc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e20f      	b.n	800551c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050fc:	4b4b      	ldr	r3, [pc, #300]	; (800522c <HAL_RCC_OscConfig+0x32c>)
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	2380      	movs	r3, #128	; 0x80
 8005102:	00db      	lsls	r3, r3, #3
 8005104:	4013      	ands	r3, r2
 8005106:	d0f0      	beq.n	80050ea <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005108:	4b48      	ldr	r3, [pc, #288]	; (800522c <HAL_RCC_OscConfig+0x32c>)
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	4a4a      	ldr	r2, [pc, #296]	; (8005238 <HAL_RCC_OscConfig+0x338>)
 800510e:	4013      	ands	r3, r2
 8005110:	0019      	movs	r1, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	021a      	lsls	r2, r3, #8
 8005118:	4b44      	ldr	r3, [pc, #272]	; (800522c <HAL_RCC_OscConfig+0x32c>)
 800511a:	430a      	orrs	r2, r1
 800511c:	605a      	str	r2, [r3, #4]
 800511e:	e01b      	b.n	8005158 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005120:	4b42      	ldr	r3, [pc, #264]	; (800522c <HAL_RCC_OscConfig+0x32c>)
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	4b41      	ldr	r3, [pc, #260]	; (800522c <HAL_RCC_OscConfig+0x32c>)
 8005126:	4949      	ldr	r1, [pc, #292]	; (800524c <HAL_RCC_OscConfig+0x34c>)
 8005128:	400a      	ands	r2, r1
 800512a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800512c:	f7fd fea6 	bl	8002e7c <HAL_GetTick>
 8005130:	0003      	movs	r3, r0
 8005132:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005134:	e008      	b.n	8005148 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005136:	f7fd fea1 	bl	8002e7c <HAL_GetTick>
 800513a:	0002      	movs	r2, r0
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	2b02      	cmp	r3, #2
 8005142:	d901      	bls.n	8005148 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e1e9      	b.n	800551c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005148:	4b38      	ldr	r3, [pc, #224]	; (800522c <HAL_RCC_OscConfig+0x32c>)
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	2380      	movs	r3, #128	; 0x80
 800514e:	00db      	lsls	r3, r3, #3
 8005150:	4013      	ands	r3, r2
 8005152:	d1f0      	bne.n	8005136 <HAL_RCC_OscConfig+0x236>
 8005154:	e000      	b.n	8005158 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005156:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2208      	movs	r2, #8
 800515e:	4013      	ands	r3, r2
 8005160:	d047      	beq.n	80051f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005162:	4b32      	ldr	r3, [pc, #200]	; (800522c <HAL_RCC_OscConfig+0x32c>)
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	2238      	movs	r2, #56	; 0x38
 8005168:	4013      	ands	r3, r2
 800516a:	2b18      	cmp	r3, #24
 800516c:	d10a      	bne.n	8005184 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800516e:	4b2f      	ldr	r3, [pc, #188]	; (800522c <HAL_RCC_OscConfig+0x32c>)
 8005170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005172:	2202      	movs	r2, #2
 8005174:	4013      	ands	r3, r2
 8005176:	d03c      	beq.n	80051f2 <HAL_RCC_OscConfig+0x2f2>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d138      	bne.n	80051f2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e1cb      	b.n	800551c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d019      	beq.n	80051c0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800518c:	4b27      	ldr	r3, [pc, #156]	; (800522c <HAL_RCC_OscConfig+0x32c>)
 800518e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005190:	4b26      	ldr	r3, [pc, #152]	; (800522c <HAL_RCC_OscConfig+0x32c>)
 8005192:	2101      	movs	r1, #1
 8005194:	430a      	orrs	r2, r1
 8005196:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005198:	f7fd fe70 	bl	8002e7c <HAL_GetTick>
 800519c:	0003      	movs	r3, r0
 800519e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051a0:	e008      	b.n	80051b4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051a2:	f7fd fe6b 	bl	8002e7c <HAL_GetTick>
 80051a6:	0002      	movs	r2, r0
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d901      	bls.n	80051b4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e1b3      	b.n	800551c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051b4:	4b1d      	ldr	r3, [pc, #116]	; (800522c <HAL_RCC_OscConfig+0x32c>)
 80051b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051b8:	2202      	movs	r2, #2
 80051ba:	4013      	ands	r3, r2
 80051bc:	d0f1      	beq.n	80051a2 <HAL_RCC_OscConfig+0x2a2>
 80051be:	e018      	b.n	80051f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80051c0:	4b1a      	ldr	r3, [pc, #104]	; (800522c <HAL_RCC_OscConfig+0x32c>)
 80051c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80051c4:	4b19      	ldr	r3, [pc, #100]	; (800522c <HAL_RCC_OscConfig+0x32c>)
 80051c6:	2101      	movs	r1, #1
 80051c8:	438a      	bics	r2, r1
 80051ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051cc:	f7fd fe56 	bl	8002e7c <HAL_GetTick>
 80051d0:	0003      	movs	r3, r0
 80051d2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051d4:	e008      	b.n	80051e8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051d6:	f7fd fe51 	bl	8002e7c <HAL_GetTick>
 80051da:	0002      	movs	r2, r0
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d901      	bls.n	80051e8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e199      	b.n	800551c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051e8:	4b10      	ldr	r3, [pc, #64]	; (800522c <HAL_RCC_OscConfig+0x32c>)
 80051ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ec:	2202      	movs	r2, #2
 80051ee:	4013      	ands	r3, r2
 80051f0:	d1f1      	bne.n	80051d6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2204      	movs	r2, #4
 80051f8:	4013      	ands	r3, r2
 80051fa:	d100      	bne.n	80051fe <HAL_RCC_OscConfig+0x2fe>
 80051fc:	e0c6      	b.n	800538c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051fe:	231f      	movs	r3, #31
 8005200:	18fb      	adds	r3, r7, r3
 8005202:	2200      	movs	r2, #0
 8005204:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005206:	4b09      	ldr	r3, [pc, #36]	; (800522c <HAL_RCC_OscConfig+0x32c>)
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	2238      	movs	r2, #56	; 0x38
 800520c:	4013      	ands	r3, r2
 800520e:	2b20      	cmp	r3, #32
 8005210:	d11e      	bne.n	8005250 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005212:	4b06      	ldr	r3, [pc, #24]	; (800522c <HAL_RCC_OscConfig+0x32c>)
 8005214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005216:	2202      	movs	r2, #2
 8005218:	4013      	ands	r3, r2
 800521a:	d100      	bne.n	800521e <HAL_RCC_OscConfig+0x31e>
 800521c:	e0b6      	b.n	800538c <HAL_RCC_OscConfig+0x48c>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d000      	beq.n	8005228 <HAL_RCC_OscConfig+0x328>
 8005226:	e0b1      	b.n	800538c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e177      	b.n	800551c <HAL_RCC_OscConfig+0x61c>
 800522c:	40021000 	.word	0x40021000
 8005230:	fffeffff 	.word	0xfffeffff
 8005234:	fffbffff 	.word	0xfffbffff
 8005238:	ffff80ff 	.word	0xffff80ff
 800523c:	ffffc7ff 	.word	0xffffc7ff
 8005240:	00f42400 	.word	0x00f42400
 8005244:	20005134 	.word	0x20005134
 8005248:	20005138 	.word	0x20005138
 800524c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005250:	4bb4      	ldr	r3, [pc, #720]	; (8005524 <HAL_RCC_OscConfig+0x624>)
 8005252:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005254:	2380      	movs	r3, #128	; 0x80
 8005256:	055b      	lsls	r3, r3, #21
 8005258:	4013      	ands	r3, r2
 800525a:	d101      	bne.n	8005260 <HAL_RCC_OscConfig+0x360>
 800525c:	2301      	movs	r3, #1
 800525e:	e000      	b.n	8005262 <HAL_RCC_OscConfig+0x362>
 8005260:	2300      	movs	r3, #0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d011      	beq.n	800528a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005266:	4baf      	ldr	r3, [pc, #700]	; (8005524 <HAL_RCC_OscConfig+0x624>)
 8005268:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800526a:	4bae      	ldr	r3, [pc, #696]	; (8005524 <HAL_RCC_OscConfig+0x624>)
 800526c:	2180      	movs	r1, #128	; 0x80
 800526e:	0549      	lsls	r1, r1, #21
 8005270:	430a      	orrs	r2, r1
 8005272:	63da      	str	r2, [r3, #60]	; 0x3c
 8005274:	4bab      	ldr	r3, [pc, #684]	; (8005524 <HAL_RCC_OscConfig+0x624>)
 8005276:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005278:	2380      	movs	r3, #128	; 0x80
 800527a:	055b      	lsls	r3, r3, #21
 800527c:	4013      	ands	r3, r2
 800527e:	60fb      	str	r3, [r7, #12]
 8005280:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005282:	231f      	movs	r3, #31
 8005284:	18fb      	adds	r3, r7, r3
 8005286:	2201      	movs	r2, #1
 8005288:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800528a:	4ba7      	ldr	r3, [pc, #668]	; (8005528 <HAL_RCC_OscConfig+0x628>)
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	2380      	movs	r3, #128	; 0x80
 8005290:	005b      	lsls	r3, r3, #1
 8005292:	4013      	ands	r3, r2
 8005294:	d11a      	bne.n	80052cc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005296:	4ba4      	ldr	r3, [pc, #656]	; (8005528 <HAL_RCC_OscConfig+0x628>)
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	4ba3      	ldr	r3, [pc, #652]	; (8005528 <HAL_RCC_OscConfig+0x628>)
 800529c:	2180      	movs	r1, #128	; 0x80
 800529e:	0049      	lsls	r1, r1, #1
 80052a0:	430a      	orrs	r2, r1
 80052a2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80052a4:	f7fd fdea 	bl	8002e7c <HAL_GetTick>
 80052a8:	0003      	movs	r3, r0
 80052aa:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052ac:	e008      	b.n	80052c0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052ae:	f7fd fde5 	bl	8002e7c <HAL_GetTick>
 80052b2:	0002      	movs	r2, r0
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d901      	bls.n	80052c0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e12d      	b.n	800551c <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052c0:	4b99      	ldr	r3, [pc, #612]	; (8005528 <HAL_RCC_OscConfig+0x628>)
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	2380      	movs	r3, #128	; 0x80
 80052c6:	005b      	lsls	r3, r3, #1
 80052c8:	4013      	ands	r3, r2
 80052ca:	d0f0      	beq.n	80052ae <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d106      	bne.n	80052e2 <HAL_RCC_OscConfig+0x3e2>
 80052d4:	4b93      	ldr	r3, [pc, #588]	; (8005524 <HAL_RCC_OscConfig+0x624>)
 80052d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052d8:	4b92      	ldr	r3, [pc, #584]	; (8005524 <HAL_RCC_OscConfig+0x624>)
 80052da:	2101      	movs	r1, #1
 80052dc:	430a      	orrs	r2, r1
 80052de:	65da      	str	r2, [r3, #92]	; 0x5c
 80052e0:	e01c      	b.n	800531c <HAL_RCC_OscConfig+0x41c>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	2b05      	cmp	r3, #5
 80052e8:	d10c      	bne.n	8005304 <HAL_RCC_OscConfig+0x404>
 80052ea:	4b8e      	ldr	r3, [pc, #568]	; (8005524 <HAL_RCC_OscConfig+0x624>)
 80052ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052ee:	4b8d      	ldr	r3, [pc, #564]	; (8005524 <HAL_RCC_OscConfig+0x624>)
 80052f0:	2104      	movs	r1, #4
 80052f2:	430a      	orrs	r2, r1
 80052f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80052f6:	4b8b      	ldr	r3, [pc, #556]	; (8005524 <HAL_RCC_OscConfig+0x624>)
 80052f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052fa:	4b8a      	ldr	r3, [pc, #552]	; (8005524 <HAL_RCC_OscConfig+0x624>)
 80052fc:	2101      	movs	r1, #1
 80052fe:	430a      	orrs	r2, r1
 8005300:	65da      	str	r2, [r3, #92]	; 0x5c
 8005302:	e00b      	b.n	800531c <HAL_RCC_OscConfig+0x41c>
 8005304:	4b87      	ldr	r3, [pc, #540]	; (8005524 <HAL_RCC_OscConfig+0x624>)
 8005306:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005308:	4b86      	ldr	r3, [pc, #536]	; (8005524 <HAL_RCC_OscConfig+0x624>)
 800530a:	2101      	movs	r1, #1
 800530c:	438a      	bics	r2, r1
 800530e:	65da      	str	r2, [r3, #92]	; 0x5c
 8005310:	4b84      	ldr	r3, [pc, #528]	; (8005524 <HAL_RCC_OscConfig+0x624>)
 8005312:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005314:	4b83      	ldr	r3, [pc, #524]	; (8005524 <HAL_RCC_OscConfig+0x624>)
 8005316:	2104      	movs	r1, #4
 8005318:	438a      	bics	r2, r1
 800531a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d014      	beq.n	800534e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005324:	f7fd fdaa 	bl	8002e7c <HAL_GetTick>
 8005328:	0003      	movs	r3, r0
 800532a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800532c:	e009      	b.n	8005342 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800532e:	f7fd fda5 	bl	8002e7c <HAL_GetTick>
 8005332:	0002      	movs	r2, r0
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	4a7c      	ldr	r2, [pc, #496]	; (800552c <HAL_RCC_OscConfig+0x62c>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d901      	bls.n	8005342 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e0ec      	b.n	800551c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005342:	4b78      	ldr	r3, [pc, #480]	; (8005524 <HAL_RCC_OscConfig+0x624>)
 8005344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005346:	2202      	movs	r2, #2
 8005348:	4013      	ands	r3, r2
 800534a:	d0f0      	beq.n	800532e <HAL_RCC_OscConfig+0x42e>
 800534c:	e013      	b.n	8005376 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800534e:	f7fd fd95 	bl	8002e7c <HAL_GetTick>
 8005352:	0003      	movs	r3, r0
 8005354:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005356:	e009      	b.n	800536c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005358:	f7fd fd90 	bl	8002e7c <HAL_GetTick>
 800535c:	0002      	movs	r2, r0
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	4a72      	ldr	r2, [pc, #456]	; (800552c <HAL_RCC_OscConfig+0x62c>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d901      	bls.n	800536c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e0d7      	b.n	800551c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800536c:	4b6d      	ldr	r3, [pc, #436]	; (8005524 <HAL_RCC_OscConfig+0x624>)
 800536e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005370:	2202      	movs	r2, #2
 8005372:	4013      	ands	r3, r2
 8005374:	d1f0      	bne.n	8005358 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005376:	231f      	movs	r3, #31
 8005378:	18fb      	adds	r3, r7, r3
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d105      	bne.n	800538c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005380:	4b68      	ldr	r3, [pc, #416]	; (8005524 <HAL_RCC_OscConfig+0x624>)
 8005382:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005384:	4b67      	ldr	r3, [pc, #412]	; (8005524 <HAL_RCC_OscConfig+0x624>)
 8005386:	496a      	ldr	r1, [pc, #424]	; (8005530 <HAL_RCC_OscConfig+0x630>)
 8005388:	400a      	ands	r2, r1
 800538a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	69db      	ldr	r3, [r3, #28]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d100      	bne.n	8005396 <HAL_RCC_OscConfig+0x496>
 8005394:	e0c1      	b.n	800551a <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005396:	4b63      	ldr	r3, [pc, #396]	; (8005524 <HAL_RCC_OscConfig+0x624>)
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	2238      	movs	r2, #56	; 0x38
 800539c:	4013      	ands	r3, r2
 800539e:	2b10      	cmp	r3, #16
 80053a0:	d100      	bne.n	80053a4 <HAL_RCC_OscConfig+0x4a4>
 80053a2:	e081      	b.n	80054a8 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	69db      	ldr	r3, [r3, #28]
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d156      	bne.n	800545a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ac:	4b5d      	ldr	r3, [pc, #372]	; (8005524 <HAL_RCC_OscConfig+0x624>)
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	4b5c      	ldr	r3, [pc, #368]	; (8005524 <HAL_RCC_OscConfig+0x624>)
 80053b2:	4960      	ldr	r1, [pc, #384]	; (8005534 <HAL_RCC_OscConfig+0x634>)
 80053b4:	400a      	ands	r2, r1
 80053b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b8:	f7fd fd60 	bl	8002e7c <HAL_GetTick>
 80053bc:	0003      	movs	r3, r0
 80053be:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053c0:	e008      	b.n	80053d4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053c2:	f7fd fd5b 	bl	8002e7c <HAL_GetTick>
 80053c6:	0002      	movs	r2, r0
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d901      	bls.n	80053d4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e0a3      	b.n	800551c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053d4:	4b53      	ldr	r3, [pc, #332]	; (8005524 <HAL_RCC_OscConfig+0x624>)
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	2380      	movs	r3, #128	; 0x80
 80053da:	049b      	lsls	r3, r3, #18
 80053dc:	4013      	ands	r3, r2
 80053de:	d1f0      	bne.n	80053c2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053e0:	4b50      	ldr	r3, [pc, #320]	; (8005524 <HAL_RCC_OscConfig+0x624>)
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	4a54      	ldr	r2, [pc, #336]	; (8005538 <HAL_RCC_OscConfig+0x638>)
 80053e6:	4013      	ands	r3, r2
 80053e8:	0019      	movs	r1, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a1a      	ldr	r2, [r3, #32]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f2:	431a      	orrs	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f8:	021b      	lsls	r3, r3, #8
 80053fa:	431a      	orrs	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005400:	431a      	orrs	r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005406:	431a      	orrs	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800540c:	431a      	orrs	r2, r3
 800540e:	4b45      	ldr	r3, [pc, #276]	; (8005524 <HAL_RCC_OscConfig+0x624>)
 8005410:	430a      	orrs	r2, r1
 8005412:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005414:	4b43      	ldr	r3, [pc, #268]	; (8005524 <HAL_RCC_OscConfig+0x624>)
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	4b42      	ldr	r3, [pc, #264]	; (8005524 <HAL_RCC_OscConfig+0x624>)
 800541a:	2180      	movs	r1, #128	; 0x80
 800541c:	0449      	lsls	r1, r1, #17
 800541e:	430a      	orrs	r2, r1
 8005420:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005422:	4b40      	ldr	r3, [pc, #256]	; (8005524 <HAL_RCC_OscConfig+0x624>)
 8005424:	68da      	ldr	r2, [r3, #12]
 8005426:	4b3f      	ldr	r3, [pc, #252]	; (8005524 <HAL_RCC_OscConfig+0x624>)
 8005428:	2180      	movs	r1, #128	; 0x80
 800542a:	0549      	lsls	r1, r1, #21
 800542c:	430a      	orrs	r2, r1
 800542e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005430:	f7fd fd24 	bl	8002e7c <HAL_GetTick>
 8005434:	0003      	movs	r3, r0
 8005436:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005438:	e008      	b.n	800544c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800543a:	f7fd fd1f 	bl	8002e7c <HAL_GetTick>
 800543e:	0002      	movs	r2, r0
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	2b02      	cmp	r3, #2
 8005446:	d901      	bls.n	800544c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e067      	b.n	800551c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800544c:	4b35      	ldr	r3, [pc, #212]	; (8005524 <HAL_RCC_OscConfig+0x624>)
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	2380      	movs	r3, #128	; 0x80
 8005452:	049b      	lsls	r3, r3, #18
 8005454:	4013      	ands	r3, r2
 8005456:	d0f0      	beq.n	800543a <HAL_RCC_OscConfig+0x53a>
 8005458:	e05f      	b.n	800551a <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800545a:	4b32      	ldr	r3, [pc, #200]	; (8005524 <HAL_RCC_OscConfig+0x624>)
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	4b31      	ldr	r3, [pc, #196]	; (8005524 <HAL_RCC_OscConfig+0x624>)
 8005460:	4934      	ldr	r1, [pc, #208]	; (8005534 <HAL_RCC_OscConfig+0x634>)
 8005462:	400a      	ands	r2, r1
 8005464:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005466:	4b2f      	ldr	r3, [pc, #188]	; (8005524 <HAL_RCC_OscConfig+0x624>)
 8005468:	68da      	ldr	r2, [r3, #12]
 800546a:	4b2e      	ldr	r3, [pc, #184]	; (8005524 <HAL_RCC_OscConfig+0x624>)
 800546c:	2103      	movs	r1, #3
 800546e:	438a      	bics	r2, r1
 8005470:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8005472:	4b2c      	ldr	r3, [pc, #176]	; (8005524 <HAL_RCC_OscConfig+0x624>)
 8005474:	68da      	ldr	r2, [r3, #12]
 8005476:	4b2b      	ldr	r3, [pc, #172]	; (8005524 <HAL_RCC_OscConfig+0x624>)
 8005478:	4930      	ldr	r1, [pc, #192]	; (800553c <HAL_RCC_OscConfig+0x63c>)
 800547a:	400a      	ands	r2, r1
 800547c:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800547e:	f7fd fcfd 	bl	8002e7c <HAL_GetTick>
 8005482:	0003      	movs	r3, r0
 8005484:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005486:	e008      	b.n	800549a <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005488:	f7fd fcf8 	bl	8002e7c <HAL_GetTick>
 800548c:	0002      	movs	r2, r0
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b02      	cmp	r3, #2
 8005494:	d901      	bls.n	800549a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e040      	b.n	800551c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800549a:	4b22      	ldr	r3, [pc, #136]	; (8005524 <HAL_RCC_OscConfig+0x624>)
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	2380      	movs	r3, #128	; 0x80
 80054a0:	049b      	lsls	r3, r3, #18
 80054a2:	4013      	ands	r3, r2
 80054a4:	d1f0      	bne.n	8005488 <HAL_RCC_OscConfig+0x588>
 80054a6:	e038      	b.n	800551a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	69db      	ldr	r3, [r3, #28]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d101      	bne.n	80054b4 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e033      	b.n	800551c <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80054b4:	4b1b      	ldr	r3, [pc, #108]	; (8005524 <HAL_RCC_OscConfig+0x624>)
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	2203      	movs	r2, #3
 80054be:	401a      	ands	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a1b      	ldr	r3, [r3, #32]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d126      	bne.n	8005516 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	2270      	movs	r2, #112	; 0x70
 80054cc:	401a      	ands	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d11f      	bne.n	8005516 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	23fe      	movs	r3, #254	; 0xfe
 80054da:	01db      	lsls	r3, r3, #7
 80054dc:	401a      	ands	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d116      	bne.n	8005516 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80054e8:	697a      	ldr	r2, [r7, #20]
 80054ea:	23f8      	movs	r3, #248	; 0xf8
 80054ec:	039b      	lsls	r3, r3, #14
 80054ee:	401a      	ands	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d10e      	bne.n	8005516 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80054f8:	697a      	ldr	r2, [r7, #20]
 80054fa:	23e0      	movs	r3, #224	; 0xe0
 80054fc:	051b      	lsls	r3, r3, #20
 80054fe:	401a      	ands	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005504:	429a      	cmp	r2, r3
 8005506:	d106      	bne.n	8005516 <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	0f5b      	lsrs	r3, r3, #29
 800550c:	075a      	lsls	r2, r3, #29
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005512:	429a      	cmp	r2, r3
 8005514:	d001      	beq.n	800551a <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e000      	b.n	800551c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	0018      	movs	r0, r3
 800551e:	46bd      	mov	sp, r7
 8005520:	b008      	add	sp, #32
 8005522:	bd80      	pop	{r7, pc}
 8005524:	40021000 	.word	0x40021000
 8005528:	40007000 	.word	0x40007000
 800552c:	00001388 	.word	0x00001388
 8005530:	efffffff 	.word	0xefffffff
 8005534:	feffffff 	.word	0xfeffffff
 8005538:	11c1808c 	.word	0x11c1808c
 800553c:	eefeffff 	.word	0xeefeffff

08005540 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d101      	bne.n	8005554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e0e9      	b.n	8005728 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005554:	4b76      	ldr	r3, [pc, #472]	; (8005730 <HAL_RCC_ClockConfig+0x1f0>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2207      	movs	r2, #7
 800555a:	4013      	ands	r3, r2
 800555c:	683a      	ldr	r2, [r7, #0]
 800555e:	429a      	cmp	r2, r3
 8005560:	d91e      	bls.n	80055a0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005562:	4b73      	ldr	r3, [pc, #460]	; (8005730 <HAL_RCC_ClockConfig+0x1f0>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2207      	movs	r2, #7
 8005568:	4393      	bics	r3, r2
 800556a:	0019      	movs	r1, r3
 800556c:	4b70      	ldr	r3, [pc, #448]	; (8005730 <HAL_RCC_ClockConfig+0x1f0>)
 800556e:	683a      	ldr	r2, [r7, #0]
 8005570:	430a      	orrs	r2, r1
 8005572:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005574:	f7fd fc82 	bl	8002e7c <HAL_GetTick>
 8005578:	0003      	movs	r3, r0
 800557a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800557c:	e009      	b.n	8005592 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800557e:	f7fd fc7d 	bl	8002e7c <HAL_GetTick>
 8005582:	0002      	movs	r2, r0
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	4a6a      	ldr	r2, [pc, #424]	; (8005734 <HAL_RCC_ClockConfig+0x1f4>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d901      	bls.n	8005592 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e0ca      	b.n	8005728 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005592:	4b67      	ldr	r3, [pc, #412]	; (8005730 <HAL_RCC_ClockConfig+0x1f0>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2207      	movs	r2, #7
 8005598:	4013      	ands	r3, r2
 800559a:	683a      	ldr	r2, [r7, #0]
 800559c:	429a      	cmp	r2, r3
 800559e:	d1ee      	bne.n	800557e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2202      	movs	r2, #2
 80055a6:	4013      	ands	r3, r2
 80055a8:	d015      	beq.n	80055d6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2204      	movs	r2, #4
 80055b0:	4013      	ands	r3, r2
 80055b2:	d006      	beq.n	80055c2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80055b4:	4b60      	ldr	r3, [pc, #384]	; (8005738 <HAL_RCC_ClockConfig+0x1f8>)
 80055b6:	689a      	ldr	r2, [r3, #8]
 80055b8:	4b5f      	ldr	r3, [pc, #380]	; (8005738 <HAL_RCC_ClockConfig+0x1f8>)
 80055ba:	21e0      	movs	r1, #224	; 0xe0
 80055bc:	01c9      	lsls	r1, r1, #7
 80055be:	430a      	orrs	r2, r1
 80055c0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055c2:	4b5d      	ldr	r3, [pc, #372]	; (8005738 <HAL_RCC_ClockConfig+0x1f8>)
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	4a5d      	ldr	r2, [pc, #372]	; (800573c <HAL_RCC_ClockConfig+0x1fc>)
 80055c8:	4013      	ands	r3, r2
 80055ca:	0019      	movs	r1, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	689a      	ldr	r2, [r3, #8]
 80055d0:	4b59      	ldr	r3, [pc, #356]	; (8005738 <HAL_RCC_ClockConfig+0x1f8>)
 80055d2:	430a      	orrs	r2, r1
 80055d4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2201      	movs	r2, #1
 80055dc:	4013      	ands	r3, r2
 80055de:	d057      	beq.n	8005690 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d107      	bne.n	80055f8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055e8:	4b53      	ldr	r3, [pc, #332]	; (8005738 <HAL_RCC_ClockConfig+0x1f8>)
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	2380      	movs	r3, #128	; 0x80
 80055ee:	029b      	lsls	r3, r3, #10
 80055f0:	4013      	ands	r3, r2
 80055f2:	d12b      	bne.n	800564c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e097      	b.n	8005728 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d107      	bne.n	8005610 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005600:	4b4d      	ldr	r3, [pc, #308]	; (8005738 <HAL_RCC_ClockConfig+0x1f8>)
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	2380      	movs	r3, #128	; 0x80
 8005606:	049b      	lsls	r3, r3, #18
 8005608:	4013      	ands	r3, r2
 800560a:	d11f      	bne.n	800564c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e08b      	b.n	8005728 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d107      	bne.n	8005628 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005618:	4b47      	ldr	r3, [pc, #284]	; (8005738 <HAL_RCC_ClockConfig+0x1f8>)
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	2380      	movs	r3, #128	; 0x80
 800561e:	00db      	lsls	r3, r3, #3
 8005620:	4013      	ands	r3, r2
 8005622:	d113      	bne.n	800564c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e07f      	b.n	8005728 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	2b03      	cmp	r3, #3
 800562e:	d106      	bne.n	800563e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005630:	4b41      	ldr	r3, [pc, #260]	; (8005738 <HAL_RCC_ClockConfig+0x1f8>)
 8005632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005634:	2202      	movs	r2, #2
 8005636:	4013      	ands	r3, r2
 8005638:	d108      	bne.n	800564c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e074      	b.n	8005728 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800563e:	4b3e      	ldr	r3, [pc, #248]	; (8005738 <HAL_RCC_ClockConfig+0x1f8>)
 8005640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005642:	2202      	movs	r2, #2
 8005644:	4013      	ands	r3, r2
 8005646:	d101      	bne.n	800564c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e06d      	b.n	8005728 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800564c:	4b3a      	ldr	r3, [pc, #232]	; (8005738 <HAL_RCC_ClockConfig+0x1f8>)
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	2207      	movs	r2, #7
 8005652:	4393      	bics	r3, r2
 8005654:	0019      	movs	r1, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685a      	ldr	r2, [r3, #4]
 800565a:	4b37      	ldr	r3, [pc, #220]	; (8005738 <HAL_RCC_ClockConfig+0x1f8>)
 800565c:	430a      	orrs	r2, r1
 800565e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005660:	f7fd fc0c 	bl	8002e7c <HAL_GetTick>
 8005664:	0003      	movs	r3, r0
 8005666:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005668:	e009      	b.n	800567e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800566a:	f7fd fc07 	bl	8002e7c <HAL_GetTick>
 800566e:	0002      	movs	r2, r0
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	4a2f      	ldr	r2, [pc, #188]	; (8005734 <HAL_RCC_ClockConfig+0x1f4>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d901      	bls.n	800567e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e054      	b.n	8005728 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800567e:	4b2e      	ldr	r3, [pc, #184]	; (8005738 <HAL_RCC_ClockConfig+0x1f8>)
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	2238      	movs	r2, #56	; 0x38
 8005684:	401a      	ands	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	00db      	lsls	r3, r3, #3
 800568c:	429a      	cmp	r2, r3
 800568e:	d1ec      	bne.n	800566a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005690:	4b27      	ldr	r3, [pc, #156]	; (8005730 <HAL_RCC_ClockConfig+0x1f0>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2207      	movs	r2, #7
 8005696:	4013      	ands	r3, r2
 8005698:	683a      	ldr	r2, [r7, #0]
 800569a:	429a      	cmp	r2, r3
 800569c:	d21e      	bcs.n	80056dc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800569e:	4b24      	ldr	r3, [pc, #144]	; (8005730 <HAL_RCC_ClockConfig+0x1f0>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2207      	movs	r2, #7
 80056a4:	4393      	bics	r3, r2
 80056a6:	0019      	movs	r1, r3
 80056a8:	4b21      	ldr	r3, [pc, #132]	; (8005730 <HAL_RCC_ClockConfig+0x1f0>)
 80056aa:	683a      	ldr	r2, [r7, #0]
 80056ac:	430a      	orrs	r2, r1
 80056ae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80056b0:	f7fd fbe4 	bl	8002e7c <HAL_GetTick>
 80056b4:	0003      	movs	r3, r0
 80056b6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80056b8:	e009      	b.n	80056ce <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056ba:	f7fd fbdf 	bl	8002e7c <HAL_GetTick>
 80056be:	0002      	movs	r2, r0
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	4a1b      	ldr	r2, [pc, #108]	; (8005734 <HAL_RCC_ClockConfig+0x1f4>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d901      	bls.n	80056ce <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e02c      	b.n	8005728 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80056ce:	4b18      	ldr	r3, [pc, #96]	; (8005730 <HAL_RCC_ClockConfig+0x1f0>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2207      	movs	r2, #7
 80056d4:	4013      	ands	r3, r2
 80056d6:	683a      	ldr	r2, [r7, #0]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d1ee      	bne.n	80056ba <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2204      	movs	r2, #4
 80056e2:	4013      	ands	r3, r2
 80056e4:	d009      	beq.n	80056fa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80056e6:	4b14      	ldr	r3, [pc, #80]	; (8005738 <HAL_RCC_ClockConfig+0x1f8>)
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	4a15      	ldr	r2, [pc, #84]	; (8005740 <HAL_RCC_ClockConfig+0x200>)
 80056ec:	4013      	ands	r3, r2
 80056ee:	0019      	movs	r1, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	68da      	ldr	r2, [r3, #12]
 80056f4:	4b10      	ldr	r3, [pc, #64]	; (8005738 <HAL_RCC_ClockConfig+0x1f8>)
 80056f6:	430a      	orrs	r2, r1
 80056f8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80056fa:	f000 f829 	bl	8005750 <HAL_RCC_GetSysClockFreq>
 80056fe:	0001      	movs	r1, r0
 8005700:	4b0d      	ldr	r3, [pc, #52]	; (8005738 <HAL_RCC_ClockConfig+0x1f8>)
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	0a1b      	lsrs	r3, r3, #8
 8005706:	220f      	movs	r2, #15
 8005708:	401a      	ands	r2, r3
 800570a:	4b0e      	ldr	r3, [pc, #56]	; (8005744 <HAL_RCC_ClockConfig+0x204>)
 800570c:	0092      	lsls	r2, r2, #2
 800570e:	58d3      	ldr	r3, [r2, r3]
 8005710:	221f      	movs	r2, #31
 8005712:	4013      	ands	r3, r2
 8005714:	000a      	movs	r2, r1
 8005716:	40da      	lsrs	r2, r3
 8005718:	4b0b      	ldr	r3, [pc, #44]	; (8005748 <HAL_RCC_ClockConfig+0x208>)
 800571a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800571c:	4b0b      	ldr	r3, [pc, #44]	; (800574c <HAL_RCC_ClockConfig+0x20c>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	0018      	movs	r0, r3
 8005722:	f7fd fb4f 	bl	8002dc4 <HAL_InitTick>
 8005726:	0003      	movs	r3, r0
}
 8005728:	0018      	movs	r0, r3
 800572a:	46bd      	mov	sp, r7
 800572c:	b004      	add	sp, #16
 800572e:	bd80      	pop	{r7, pc}
 8005730:	40022000 	.word	0x40022000
 8005734:	00001388 	.word	0x00001388
 8005738:	40021000 	.word	0x40021000
 800573c:	fffff0ff 	.word	0xfffff0ff
 8005740:	ffff8fff 	.word	0xffff8fff
 8005744:	08009990 	.word	0x08009990
 8005748:	20005134 	.word	0x20005134
 800574c:	20005138 	.word	0x20005138

08005750 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b086      	sub	sp, #24
 8005754:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005756:	4b3c      	ldr	r3, [pc, #240]	; (8005848 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	2238      	movs	r2, #56	; 0x38
 800575c:	4013      	ands	r3, r2
 800575e:	d10f      	bne.n	8005780 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005760:	4b39      	ldr	r3, [pc, #228]	; (8005848 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	0adb      	lsrs	r3, r3, #11
 8005766:	2207      	movs	r2, #7
 8005768:	4013      	ands	r3, r2
 800576a:	2201      	movs	r2, #1
 800576c:	409a      	lsls	r2, r3
 800576e:	0013      	movs	r3, r2
 8005770:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005772:	6839      	ldr	r1, [r7, #0]
 8005774:	4835      	ldr	r0, [pc, #212]	; (800584c <HAL_RCC_GetSysClockFreq+0xfc>)
 8005776:	f7fa fcc5 	bl	8000104 <__udivsi3>
 800577a:	0003      	movs	r3, r0
 800577c:	613b      	str	r3, [r7, #16]
 800577e:	e05d      	b.n	800583c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005780:	4b31      	ldr	r3, [pc, #196]	; (8005848 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	2238      	movs	r2, #56	; 0x38
 8005786:	4013      	ands	r3, r2
 8005788:	2b08      	cmp	r3, #8
 800578a:	d102      	bne.n	8005792 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800578c:	4b30      	ldr	r3, [pc, #192]	; (8005850 <HAL_RCC_GetSysClockFreq+0x100>)
 800578e:	613b      	str	r3, [r7, #16]
 8005790:	e054      	b.n	800583c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005792:	4b2d      	ldr	r3, [pc, #180]	; (8005848 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	2238      	movs	r2, #56	; 0x38
 8005798:	4013      	ands	r3, r2
 800579a:	2b10      	cmp	r3, #16
 800579c:	d138      	bne.n	8005810 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800579e:	4b2a      	ldr	r3, [pc, #168]	; (8005848 <HAL_RCC_GetSysClockFreq+0xf8>)
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	2203      	movs	r2, #3
 80057a4:	4013      	ands	r3, r2
 80057a6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80057a8:	4b27      	ldr	r3, [pc, #156]	; (8005848 <HAL_RCC_GetSysClockFreq+0xf8>)
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	091b      	lsrs	r3, r3, #4
 80057ae:	2207      	movs	r2, #7
 80057b0:	4013      	ands	r3, r2
 80057b2:	3301      	adds	r3, #1
 80057b4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2b03      	cmp	r3, #3
 80057ba:	d10d      	bne.n	80057d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80057bc:	68b9      	ldr	r1, [r7, #8]
 80057be:	4824      	ldr	r0, [pc, #144]	; (8005850 <HAL_RCC_GetSysClockFreq+0x100>)
 80057c0:	f7fa fca0 	bl	8000104 <__udivsi3>
 80057c4:	0003      	movs	r3, r0
 80057c6:	0019      	movs	r1, r3
 80057c8:	4b1f      	ldr	r3, [pc, #124]	; (8005848 <HAL_RCC_GetSysClockFreq+0xf8>)
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	0a1b      	lsrs	r3, r3, #8
 80057ce:	227f      	movs	r2, #127	; 0x7f
 80057d0:	4013      	ands	r3, r2
 80057d2:	434b      	muls	r3, r1
 80057d4:	617b      	str	r3, [r7, #20]
        break;
 80057d6:	e00d      	b.n	80057f4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80057d8:	68b9      	ldr	r1, [r7, #8]
 80057da:	481c      	ldr	r0, [pc, #112]	; (800584c <HAL_RCC_GetSysClockFreq+0xfc>)
 80057dc:	f7fa fc92 	bl	8000104 <__udivsi3>
 80057e0:	0003      	movs	r3, r0
 80057e2:	0019      	movs	r1, r3
 80057e4:	4b18      	ldr	r3, [pc, #96]	; (8005848 <HAL_RCC_GetSysClockFreq+0xf8>)
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	0a1b      	lsrs	r3, r3, #8
 80057ea:	227f      	movs	r2, #127	; 0x7f
 80057ec:	4013      	ands	r3, r2
 80057ee:	434b      	muls	r3, r1
 80057f0:	617b      	str	r3, [r7, #20]
        break;
 80057f2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80057f4:	4b14      	ldr	r3, [pc, #80]	; (8005848 <HAL_RCC_GetSysClockFreq+0xf8>)
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	0f5b      	lsrs	r3, r3, #29
 80057fa:	2207      	movs	r2, #7
 80057fc:	4013      	ands	r3, r2
 80057fe:	3301      	adds	r3, #1
 8005800:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005802:	6879      	ldr	r1, [r7, #4]
 8005804:	6978      	ldr	r0, [r7, #20]
 8005806:	f7fa fc7d 	bl	8000104 <__udivsi3>
 800580a:	0003      	movs	r3, r0
 800580c:	613b      	str	r3, [r7, #16]
 800580e:	e015      	b.n	800583c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005810:	4b0d      	ldr	r3, [pc, #52]	; (8005848 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	2238      	movs	r2, #56	; 0x38
 8005816:	4013      	ands	r3, r2
 8005818:	2b20      	cmp	r3, #32
 800581a:	d103      	bne.n	8005824 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800581c:	2380      	movs	r3, #128	; 0x80
 800581e:	021b      	lsls	r3, r3, #8
 8005820:	613b      	str	r3, [r7, #16]
 8005822:	e00b      	b.n	800583c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005824:	4b08      	ldr	r3, [pc, #32]	; (8005848 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	2238      	movs	r2, #56	; 0x38
 800582a:	4013      	ands	r3, r2
 800582c:	2b18      	cmp	r3, #24
 800582e:	d103      	bne.n	8005838 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005830:	23fa      	movs	r3, #250	; 0xfa
 8005832:	01db      	lsls	r3, r3, #7
 8005834:	613b      	str	r3, [r7, #16]
 8005836:	e001      	b.n	800583c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005838:	2300      	movs	r3, #0
 800583a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800583c:	693b      	ldr	r3, [r7, #16]
}
 800583e:	0018      	movs	r0, r3
 8005840:	46bd      	mov	sp, r7
 8005842:	b006      	add	sp, #24
 8005844:	bd80      	pop	{r7, pc}
 8005846:	46c0      	nop			; (mov r8, r8)
 8005848:	40021000 	.word	0x40021000
 800584c:	00f42400 	.word	0x00f42400
 8005850:	007a1200 	.word	0x007a1200

08005854 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005858:	4b02      	ldr	r3, [pc, #8]	; (8005864 <HAL_RCC_GetHCLKFreq+0x10>)
 800585a:	681b      	ldr	r3, [r3, #0]
}
 800585c:	0018      	movs	r0, r3
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	46c0      	nop			; (mov r8, r8)
 8005864:	20005134 	.word	0x20005134

08005868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005868:	b5b0      	push	{r4, r5, r7, lr}
 800586a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800586c:	f7ff fff2 	bl	8005854 <HAL_RCC_GetHCLKFreq>
 8005870:	0004      	movs	r4, r0
 8005872:	f7ff fb39 	bl	8004ee8 <LL_RCC_GetAPB1Prescaler>
 8005876:	0003      	movs	r3, r0
 8005878:	0b1a      	lsrs	r2, r3, #12
 800587a:	4b05      	ldr	r3, [pc, #20]	; (8005890 <HAL_RCC_GetPCLK1Freq+0x28>)
 800587c:	0092      	lsls	r2, r2, #2
 800587e:	58d3      	ldr	r3, [r2, r3]
 8005880:	221f      	movs	r2, #31
 8005882:	4013      	ands	r3, r2
 8005884:	40dc      	lsrs	r4, r3
 8005886:	0023      	movs	r3, r4
}
 8005888:	0018      	movs	r0, r3
 800588a:	46bd      	mov	sp, r7
 800588c:	bdb0      	pop	{r4, r5, r7, pc}
 800588e:	46c0      	nop			; (mov r8, r8)
 8005890:	080099d0 	.word	0x080099d0

08005894 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800589c:	2313      	movs	r3, #19
 800589e:	18fb      	adds	r3, r7, r3
 80058a0:	2200      	movs	r2, #0
 80058a2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80058a4:	2312      	movs	r3, #18
 80058a6:	18fb      	adds	r3, r7, r3
 80058a8:	2200      	movs	r2, #0
 80058aa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	2380      	movs	r3, #128	; 0x80
 80058b2:	029b      	lsls	r3, r3, #10
 80058b4:	4013      	ands	r3, r2
 80058b6:	d100      	bne.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x26>
 80058b8:	e0a4      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058ba:	2311      	movs	r3, #17
 80058bc:	18fb      	adds	r3, r7, r3
 80058be:	2200      	movs	r2, #0
 80058c0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058c2:	4bc3      	ldr	r3, [pc, #780]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80058c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058c6:	2380      	movs	r3, #128	; 0x80
 80058c8:	055b      	lsls	r3, r3, #21
 80058ca:	4013      	ands	r3, r2
 80058cc:	d111      	bne.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058ce:	4bc0      	ldr	r3, [pc, #768]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80058d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058d2:	4bbf      	ldr	r3, [pc, #764]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80058d4:	2180      	movs	r1, #128	; 0x80
 80058d6:	0549      	lsls	r1, r1, #21
 80058d8:	430a      	orrs	r2, r1
 80058da:	63da      	str	r2, [r3, #60]	; 0x3c
 80058dc:	4bbc      	ldr	r3, [pc, #752]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80058de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058e0:	2380      	movs	r3, #128	; 0x80
 80058e2:	055b      	lsls	r3, r3, #21
 80058e4:	4013      	ands	r3, r2
 80058e6:	60bb      	str	r3, [r7, #8]
 80058e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058ea:	2311      	movs	r3, #17
 80058ec:	18fb      	adds	r3, r7, r3
 80058ee:	2201      	movs	r2, #1
 80058f0:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058f2:	4bb8      	ldr	r3, [pc, #736]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	4bb7      	ldr	r3, [pc, #732]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80058f8:	2180      	movs	r1, #128	; 0x80
 80058fa:	0049      	lsls	r1, r1, #1
 80058fc:	430a      	orrs	r2, r1
 80058fe:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005900:	f7fd fabc 	bl	8002e7c <HAL_GetTick>
 8005904:	0003      	movs	r3, r0
 8005906:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005908:	e00b      	b.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800590a:	f7fd fab7 	bl	8002e7c <HAL_GetTick>
 800590e:	0002      	movs	r2, r0
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	2b02      	cmp	r3, #2
 8005916:	d904      	bls.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8005918:	2313      	movs	r3, #19
 800591a:	18fb      	adds	r3, r7, r3
 800591c:	2203      	movs	r2, #3
 800591e:	701a      	strb	r2, [r3, #0]
        break;
 8005920:	e005      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005922:	4bac      	ldr	r3, [pc, #688]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	2380      	movs	r3, #128	; 0x80
 8005928:	005b      	lsls	r3, r3, #1
 800592a:	4013      	ands	r3, r2
 800592c:	d0ed      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 800592e:	2313      	movs	r3, #19
 8005930:	18fb      	adds	r3, r7, r3
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d154      	bne.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005938:	4ba5      	ldr	r3, [pc, #660]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800593a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800593c:	23c0      	movs	r3, #192	; 0xc0
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4013      	ands	r3, r2
 8005942:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d019      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0xea>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	429a      	cmp	r2, r3
 8005952:	d014      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005954:	4b9e      	ldr	r3, [pc, #632]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005958:	4a9f      	ldr	r2, [pc, #636]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800595a:	4013      	ands	r3, r2
 800595c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800595e:	4b9c      	ldr	r3, [pc, #624]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005960:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005962:	4b9b      	ldr	r3, [pc, #620]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005964:	2180      	movs	r1, #128	; 0x80
 8005966:	0249      	lsls	r1, r1, #9
 8005968:	430a      	orrs	r2, r1
 800596a:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800596c:	4b98      	ldr	r3, [pc, #608]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800596e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005970:	4b97      	ldr	r3, [pc, #604]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005972:	499a      	ldr	r1, [pc, #616]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005974:	400a      	ands	r2, r1
 8005976:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005978:	4b95      	ldr	r3, [pc, #596]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	2201      	movs	r2, #1
 8005982:	4013      	ands	r3, r2
 8005984:	d016      	beq.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005986:	f7fd fa79 	bl	8002e7c <HAL_GetTick>
 800598a:	0003      	movs	r3, r0
 800598c:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800598e:	e00c      	b.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005990:	f7fd fa74 	bl	8002e7c <HAL_GetTick>
 8005994:	0002      	movs	r2, r0
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	4a91      	ldr	r2, [pc, #580]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d904      	bls.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 80059a0:	2313      	movs	r3, #19
 80059a2:	18fb      	adds	r3, r7, r3
 80059a4:	2203      	movs	r2, #3
 80059a6:	701a      	strb	r2, [r3, #0]
            break;
 80059a8:	e004      	b.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059aa:	4b89      	ldr	r3, [pc, #548]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80059ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059ae:	2202      	movs	r2, #2
 80059b0:	4013      	ands	r3, r2
 80059b2:	d0ed      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 80059b4:	2313      	movs	r3, #19
 80059b6:	18fb      	adds	r3, r7, r3
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d10a      	bne.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059be:	4b84      	ldr	r3, [pc, #528]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80059c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059c2:	4a85      	ldr	r2, [pc, #532]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80059c4:	4013      	ands	r3, r2
 80059c6:	0019      	movs	r1, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059cc:	4b80      	ldr	r3, [pc, #512]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80059ce:	430a      	orrs	r2, r1
 80059d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80059d2:	e00c      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80059d4:	2312      	movs	r3, #18
 80059d6:	18fb      	adds	r3, r7, r3
 80059d8:	2213      	movs	r2, #19
 80059da:	18ba      	adds	r2, r7, r2
 80059dc:	7812      	ldrb	r2, [r2, #0]
 80059de:	701a      	strb	r2, [r3, #0]
 80059e0:	e005      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059e2:	2312      	movs	r3, #18
 80059e4:	18fb      	adds	r3, r7, r3
 80059e6:	2213      	movs	r2, #19
 80059e8:	18ba      	adds	r2, r7, r2
 80059ea:	7812      	ldrb	r2, [r2, #0]
 80059ec:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80059ee:	2311      	movs	r3, #17
 80059f0:	18fb      	adds	r3, r7, r3
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d105      	bne.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059f8:	4b75      	ldr	r3, [pc, #468]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80059fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059fc:	4b74      	ldr	r3, [pc, #464]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80059fe:	4979      	ldr	r1, [pc, #484]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8005a00:	400a      	ands	r2, r1
 8005a02:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	d009      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a0e:	4b70      	ldr	r3, [pc, #448]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a12:	2203      	movs	r2, #3
 8005a14:	4393      	bics	r3, r2
 8005a16:	0019      	movs	r1, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685a      	ldr	r2, [r3, #4]
 8005a1c:	4b6c      	ldr	r3, [pc, #432]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2202      	movs	r2, #2
 8005a28:	4013      	ands	r3, r2
 8005a2a:	d009      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a2c:	4b68      	ldr	r3, [pc, #416]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a30:	220c      	movs	r2, #12
 8005a32:	4393      	bics	r3, r2
 8005a34:	0019      	movs	r1, r3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	689a      	ldr	r2, [r3, #8]
 8005a3a:	4b65      	ldr	r3, [pc, #404]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a3c:	430a      	orrs	r2, r1
 8005a3e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2210      	movs	r2, #16
 8005a46:	4013      	ands	r3, r2
 8005a48:	d009      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a4a:	4b61      	ldr	r3, [pc, #388]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a4e:	4a66      	ldr	r2, [pc, #408]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8005a50:	4013      	ands	r3, r2
 8005a52:	0019      	movs	r1, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	68da      	ldr	r2, [r3, #12]
 8005a58:	4b5d      	ldr	r3, [pc, #372]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	2380      	movs	r3, #128	; 0x80
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	4013      	ands	r3, r2
 8005a68:	d009      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a6a:	4b59      	ldr	r3, [pc, #356]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a6e:	4a5f      	ldr	r2, [pc, #380]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005a70:	4013      	ands	r3, r2
 8005a72:	0019      	movs	r1, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	699a      	ldr	r2, [r3, #24]
 8005a78:	4b55      	ldr	r3, [pc, #340]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a7a:	430a      	orrs	r2, r1
 8005a7c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	2380      	movs	r3, #128	; 0x80
 8005a84:	00db      	lsls	r3, r3, #3
 8005a86:	4013      	ands	r3, r2
 8005a88:	d009      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a8a:	4b51      	ldr	r3, [pc, #324]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a8e:	4a58      	ldr	r2, [pc, #352]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a90:	4013      	ands	r3, r2
 8005a92:	0019      	movs	r1, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	69da      	ldr	r2, [r3, #28]
 8005a98:	4b4d      	ldr	r3, [pc, #308]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	d009      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005aa8:	4b49      	ldr	r3, [pc, #292]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aac:	4a51      	ldr	r2, [pc, #324]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8005aae:	4013      	ands	r3, r2
 8005ab0:	0019      	movs	r1, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	691a      	ldr	r2, [r3, #16]
 8005ab6:	4b46      	ldr	r3, [pc, #280]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ab8:	430a      	orrs	r2, r1
 8005aba:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	2380      	movs	r3, #128	; 0x80
 8005ac2:	01db      	lsls	r3, r3, #7
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	d015      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ac8:	4b41      	ldr	r3, [pc, #260]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	0899      	lsrs	r1, r3, #2
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a1a      	ldr	r2, [r3, #32]
 8005ad4:	4b3e      	ldr	r3, [pc, #248]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ad6:	430a      	orrs	r2, r1
 8005ad8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a1a      	ldr	r2, [r3, #32]
 8005ade:	2380      	movs	r3, #128	; 0x80
 8005ae0:	05db      	lsls	r3, r3, #23
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d106      	bne.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005ae6:	4b3a      	ldr	r3, [pc, #232]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ae8:	68da      	ldr	r2, [r3, #12]
 8005aea:	4b39      	ldr	r3, [pc, #228]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005aec:	2180      	movs	r1, #128	; 0x80
 8005aee:	0249      	lsls	r1, r1, #9
 8005af0:	430a      	orrs	r2, r1
 8005af2:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	2380      	movs	r3, #128	; 0x80
 8005afa:	031b      	lsls	r3, r3, #12
 8005afc:	4013      	ands	r3, r2
 8005afe:	d009      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005b00:	4b33      	ldr	r3, [pc, #204]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b04:	2240      	movs	r2, #64	; 0x40
 8005b06:	4393      	bics	r3, r2
 8005b08:	0019      	movs	r1, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b0e:	4b30      	ldr	r3, [pc, #192]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b10:	430a      	orrs	r2, r1
 8005b12:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	2380      	movs	r3, #128	; 0x80
 8005b1a:	039b      	lsls	r3, r3, #14
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	d016      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005b20:	4b2b      	ldr	r3, [pc, #172]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b24:	4a34      	ldr	r2, [pc, #208]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005b26:	4013      	ands	r3, r2
 8005b28:	0019      	movs	r1, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b2e:	4b28      	ldr	r3, [pc, #160]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b30:	430a      	orrs	r2, r1
 8005b32:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b38:	2380      	movs	r3, #128	; 0x80
 8005b3a:	03db      	lsls	r3, r3, #15
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d106      	bne.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005b40:	4b23      	ldr	r3, [pc, #140]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b42:	68da      	ldr	r2, [r3, #12]
 8005b44:	4b22      	ldr	r3, [pc, #136]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b46:	2180      	movs	r1, #128	; 0x80
 8005b48:	0449      	lsls	r1, r1, #17
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	2380      	movs	r3, #128	; 0x80
 8005b54:	03db      	lsls	r3, r3, #15
 8005b56:	4013      	ands	r3, r2
 8005b58:	d016      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005b5a:	4b1d      	ldr	r3, [pc, #116]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b5e:	4a27      	ldr	r2, [pc, #156]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8005b60:	4013      	ands	r3, r2
 8005b62:	0019      	movs	r1, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b68:	4b19      	ldr	r3, [pc, #100]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b72:	2380      	movs	r3, #128	; 0x80
 8005b74:	045b      	lsls	r3, r3, #17
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d106      	bne.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005b7a:	4b15      	ldr	r3, [pc, #84]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b7c:	68da      	ldr	r2, [r3, #12]
 8005b7e:	4b14      	ldr	r3, [pc, #80]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b80:	2180      	movs	r1, #128	; 0x80
 8005b82:	0449      	lsls	r1, r1, #17
 8005b84:	430a      	orrs	r2, r1
 8005b86:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	2380      	movs	r3, #128	; 0x80
 8005b8e:	011b      	lsls	r3, r3, #4
 8005b90:	4013      	ands	r3, r2
 8005b92:	d016      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005b94:	4b0e      	ldr	r3, [pc, #56]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b98:	4a19      	ldr	r2, [pc, #100]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	0019      	movs	r1, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	695a      	ldr	r2, [r3, #20]
 8005ba2:	4b0b      	ldr	r3, [pc, #44]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	695a      	ldr	r2, [r3, #20]
 8005bac:	2380      	movs	r3, #128	; 0x80
 8005bae:	01db      	lsls	r3, r3, #7
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d106      	bne.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005bb4:	4b06      	ldr	r3, [pc, #24]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005bb6:	68da      	ldr	r2, [r3, #12]
 8005bb8:	4b05      	ldr	r3, [pc, #20]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005bba:	2180      	movs	r1, #128	; 0x80
 8005bbc:	0249      	lsls	r1, r1, #9
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005bc2:	2312      	movs	r3, #18
 8005bc4:	18fb      	adds	r3, r7, r3
 8005bc6:	781b      	ldrb	r3, [r3, #0]
}
 8005bc8:	0018      	movs	r0, r3
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	b006      	add	sp, #24
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	40021000 	.word	0x40021000
 8005bd4:	40007000 	.word	0x40007000
 8005bd8:	fffffcff 	.word	0xfffffcff
 8005bdc:	fffeffff 	.word	0xfffeffff
 8005be0:	00001388 	.word	0x00001388
 8005be4:	efffffff 	.word	0xefffffff
 8005be8:	fffff3ff 	.word	0xfffff3ff
 8005bec:	fff3ffff 	.word	0xfff3ffff
 8005bf0:	ffcfffff 	.word	0xffcfffff
 8005bf4:	ffffcfff 	.word	0xffffcfff
 8005bf8:	ffbfffff 	.word	0xffbfffff
 8005bfc:	feffffff 	.word	0xfeffffff
 8005c00:	ffff3fff 	.word	0xffff3fff

08005c04 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b086      	sub	sp, #24
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	2380      	movs	r3, #128	; 0x80
 8005c14:	029b      	lsls	r3, r3, #10
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d136      	bne.n	8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005c1a:	4bc6      	ldr	r3, [pc, #792]	; (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005c1c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c1e:	23c0      	movs	r3, #192	; 0xc0
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	4013      	ands	r3, r2
 8005c24:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005c26:	4bc3      	ldr	r3, [pc, #780]	; (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c2a:	2202      	movs	r2, #2
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d108      	bne.n	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	2380      	movs	r3, #128	; 0x80
 8005c36:	005b      	lsls	r3, r3, #1
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d103      	bne.n	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8005c3c:	2380      	movs	r3, #128	; 0x80
 8005c3e:	021b      	lsls	r3, r3, #8
 8005c40:	617b      	str	r3, [r7, #20]
 8005c42:	e2e9      	b.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005c44:	4bbb      	ldr	r3, [pc, #748]	; (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c48:	2202      	movs	r2, #2
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d108      	bne.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	2380      	movs	r3, #128	; 0x80
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d103      	bne.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 8005c5a:	23fa      	movs	r3, #250	; 0xfa
 8005c5c:	01db      	lsls	r3, r3, #7
 8005c5e:	617b      	str	r3, [r7, #20]
 8005c60:	e2da      	b.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8005c62:	4bb4      	ldr	r3, [pc, #720]	; (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	2380      	movs	r3, #128	; 0x80
 8005c68:	029b      	lsls	r3, r3, #10
 8005c6a:	401a      	ands	r2, r3
 8005c6c:	2380      	movs	r3, #128	; 0x80
 8005c6e:	029b      	lsls	r3, r3, #10
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d000      	beq.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 8005c74:	e2d0      	b.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	23c0      	movs	r3, #192	; 0xc0
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d000      	beq.n	8005c82 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 8005c80:	e2ca      	b.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    {
      frequency = HSE_VALUE / 32U;
 8005c82:	4bad      	ldr	r3, [pc, #692]	; (8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 8005c84:	617b      	str	r3, [r7, #20]
 8005c86:	e2c7      	b.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 8005c88:	4baa      	ldr	r3, [pc, #680]	; (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	2203      	movs	r2, #3
 8005c8e:	4013      	ands	r3, r2
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d102      	bne.n	8005c9a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 8005c94:	4ba9      	ldr	r3, [pc, #676]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8005c96:	613b      	str	r3, [r7, #16]
 8005c98:	e00a      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 8005c9a:	4ba6      	ldr	r3, [pc, #664]	; (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	2203      	movs	r2, #3
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	2b03      	cmp	r3, #3
 8005ca4:	d102      	bne.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 8005ca6:	4ba6      	ldr	r3, [pc, #664]	; (8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 8005ca8:	613b      	str	r3, [r7, #16]
 8005caa:	e001      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 8005cac:	2300      	movs	r3, #0
 8005cae:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005cb0:	4ba0      	ldr	r3, [pc, #640]	; (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	091b      	lsrs	r3, r3, #4
 8005cb6:	2207      	movs	r2, #7
 8005cb8:	4013      	ands	r3, r2
 8005cba:	3301      	adds	r3, #1
 8005cbc:	0019      	movs	r1, r3
 8005cbe:	6938      	ldr	r0, [r7, #16]
 8005cc0:	f7fa fa20 	bl	8000104 <__udivsi3>
 8005cc4:	0003      	movs	r3, r0
 8005cc6:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2280      	movs	r2, #128	; 0x80
 8005ccc:	00d2      	lsls	r2, r2, #3
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d100      	bne.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 8005cd2:	e1ee      	b.n	80060b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8005cd4:	2280      	movs	r2, #128	; 0x80
 8005cd6:	00d2      	lsls	r2, r2, #3
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d811      	bhi.n	8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
 8005cdc:	2b10      	cmp	r3, #16
 8005cde:	d100      	bne.n	8005ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xde>
 8005ce0:	e0b6      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 8005ce2:	d804      	bhi.n	8005cee <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d02a      	beq.n	8005d3e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d05b      	beq.n	8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 8005cec:	e294      	b.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    switch (PeriphClk)
 8005cee:	2b20      	cmp	r3, #32
 8005cf0:	d100      	bne.n	8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 8005cf2:	e129      	b.n	8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
 8005cf4:	2280      	movs	r2, #128	; 0x80
 8005cf6:	0092      	lsls	r2, r2, #2
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d100      	bne.n	8005cfe <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8005cfc:	e199      	b.n	8006032 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
        break;
 8005cfe:	e28b      	b.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    switch (PeriphClk)
 8005d00:	2280      	movs	r2, #128	; 0x80
 8005d02:	0312      	lsls	r2, r2, #12
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d100      	bne.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x106>
 8005d08:	e07f      	b.n	8005e0a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 8005d0a:	2280      	movs	r2, #128	; 0x80
 8005d0c:	0312      	lsls	r2, r2, #12
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d80a      	bhi.n	8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8005d12:	2280      	movs	r2, #128	; 0x80
 8005d14:	0112      	lsls	r2, r2, #4
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d100      	bne.n	8005d1c <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 8005d1a:	e140      	b.n	8005f9e <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8005d1c:	2280      	movs	r2, #128	; 0x80
 8005d1e:	01d2      	lsls	r2, r2, #7
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d100      	bne.n	8005d26 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8005d24:	e0ce      	b.n	8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
        break;
 8005d26:	e277      	b.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    switch (PeriphClk)
 8005d28:	2280      	movs	r2, #128	; 0x80
 8005d2a:	0392      	lsls	r2, r2, #14
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d100      	bne.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 8005d30:	e1ff      	b.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 8005d32:	2280      	movs	r2, #128	; 0x80
 8005d34:	03d2      	lsls	r2, r2, #15
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d100      	bne.n	8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8005d3a:	e229      	b.n	8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
        break;
 8005d3c:	e26c      	b.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005d3e:	4b7d      	ldr	r3, [pc, #500]	; (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d42:	2203      	movs	r2, #3
 8005d44:	4013      	ands	r3, r2
 8005d46:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d104      	bne.n	8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d4e:	f7ff fd8b 	bl	8005868 <HAL_RCC_GetPCLK1Freq>
 8005d52:	0003      	movs	r3, r0
 8005d54:	617b      	str	r3, [r7, #20]
        break;
 8005d56:	e24a      	b.n	80061ee <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d104      	bne.n	8005d68 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
          frequency = HAL_RCC_GetSysClockFreq();
 8005d5e:	f7ff fcf7 	bl	8005750 <HAL_RCC_GetSysClockFreq>
 8005d62:	0003      	movs	r3, r0
 8005d64:	617b      	str	r3, [r7, #20]
        break;
 8005d66:	e242      	b.n	80061ee <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8005d68:	4b72      	ldr	r3, [pc, #456]	; (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	2380      	movs	r3, #128	; 0x80
 8005d6e:	00db      	lsls	r3, r3, #3
 8005d70:	401a      	ands	r2, r3
 8005d72:	2380      	movs	r3, #128	; 0x80
 8005d74:	00db      	lsls	r3, r3, #3
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d105      	bne.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d102      	bne.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
          frequency = HSI_VALUE;
 8005d80:	4b6e      	ldr	r3, [pc, #440]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8005d82:	617b      	str	r3, [r7, #20]
        break;
 8005d84:	e233      	b.n	80061ee <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8005d86:	4b6b      	ldr	r3, [pc, #428]	; (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d8a:	2202      	movs	r2, #2
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d000      	beq.n	8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8005d92:	e22c      	b.n	80061ee <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2b03      	cmp	r3, #3
 8005d98:	d000      	beq.n	8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 8005d9a:	e228      	b.n	80061ee <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
          frequency = LSE_VALUE;
 8005d9c:	2380      	movs	r3, #128	; 0x80
 8005d9e:	021b      	lsls	r3, r3, #8
 8005da0:	617b      	str	r3, [r7, #20]
        break;
 8005da2:	e224      	b.n	80061ee <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005da4:	4b63      	ldr	r3, [pc, #396]	; (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005da8:	220c      	movs	r2, #12
 8005daa:	4013      	ands	r3, r2
 8005dac:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d104      	bne.n	8005dbe <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005db4:	f7ff fd58 	bl	8005868 <HAL_RCC_GetPCLK1Freq>
 8005db8:	0003      	movs	r3, r0
 8005dba:	617b      	str	r3, [r7, #20]
        break;
 8005dbc:	e219      	b.n	80061f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
        else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2b04      	cmp	r3, #4
 8005dc2:	d104      	bne.n	8005dce <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
          frequency = HAL_RCC_GetSysClockFreq();
 8005dc4:	f7ff fcc4 	bl	8005750 <HAL_RCC_GetSysClockFreq>
 8005dc8:	0003      	movs	r3, r0
 8005dca:	617b      	str	r3, [r7, #20]
        break;
 8005dcc:	e211      	b.n	80061f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8005dce:	4b59      	ldr	r3, [pc, #356]	; (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	2380      	movs	r3, #128	; 0x80
 8005dd4:	00db      	lsls	r3, r3, #3
 8005dd6:	401a      	ands	r2, r3
 8005dd8:	2380      	movs	r3, #128	; 0x80
 8005dda:	00db      	lsls	r3, r3, #3
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d105      	bne.n	8005dec <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2b08      	cmp	r3, #8
 8005de4:	d102      	bne.n	8005dec <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
          frequency = HSI_VALUE;
 8005de6:	4b55      	ldr	r3, [pc, #340]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8005de8:	617b      	str	r3, [r7, #20]
        break;
 8005dea:	e202      	b.n	80061f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8005dec:	4b51      	ldr	r3, [pc, #324]	; (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005df0:	2202      	movs	r2, #2
 8005df2:	4013      	ands	r3, r2
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d000      	beq.n	8005dfa <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
 8005df8:	e1fb      	b.n	80061f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2b0c      	cmp	r3, #12
 8005dfe:	d000      	beq.n	8005e02 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
 8005e00:	e1f7      	b.n	80061f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          frequency = LSE_VALUE;
 8005e02:	2380      	movs	r3, #128	; 0x80
 8005e04:	021b      	lsls	r3, r3, #8
 8005e06:	617b      	str	r3, [r7, #20]
        break;
 8005e08:	e1f3      	b.n	80061f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8005e0a:	4b4a      	ldr	r3, [pc, #296]	; (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e0e:	2240      	movs	r2, #64	; 0x40
 8005e10:	4013      	ands	r3, r2
 8005e12:	60fb      	str	r3, [r7, #12]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_CECCLKSOURCE_HSI_DIV488))
 8005e14:	4b47      	ldr	r3, [pc, #284]	; (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	2380      	movs	r3, #128	; 0x80
 8005e1a:	00db      	lsls	r3, r3, #3
 8005e1c:	401a      	ands	r2, r3
 8005e1e:	2380      	movs	r3, #128	; 0x80
 8005e20:	00db      	lsls	r3, r3, #3
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d105      	bne.n	8005e32 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d102      	bne.n	8005e32 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          frequency = (HSI_VALUE / 488U);
 8005e2c:	4b45      	ldr	r3, [pc, #276]	; (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 8005e2e:	617b      	str	r3, [r7, #20]
        break;
 8005e30:	e1e1      	b.n	80061f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8005e32:	4b40      	ldr	r3, [pc, #256]	; (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e36:	2202      	movs	r2, #2
 8005e38:	4013      	ands	r3, r2
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d000      	beq.n	8005e40 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
 8005e3e:	e1da      	b.n	80061f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2b40      	cmp	r3, #64	; 0x40
 8005e44:	d000      	beq.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8005e46:	e1d6      	b.n	80061f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          frequency = LSE_VALUE;
 8005e48:	2380      	movs	r3, #128	; 0x80
 8005e4a:	021b      	lsls	r3, r3, #8
 8005e4c:	617b      	str	r3, [r7, #20]
        break;
 8005e4e:	e1d2      	b.n	80061f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005e50:	4b38      	ldr	r3, [pc, #224]	; (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005e52:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e54:	23c0      	movs	r3, #192	; 0xc0
 8005e56:	011b      	lsls	r3, r3, #4
 8005e58:	4013      	ands	r3, r2
 8005e5a:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d104      	bne.n	8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x268>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005e62:	f7ff fd01 	bl	8005868 <HAL_RCC_GetPCLK1Freq>
 8005e66:	0003      	movs	r3, r0
 8005e68:	617b      	str	r3, [r7, #20]
        break;
 8005e6a:	e1c6      	b.n	80061fa <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	2380      	movs	r3, #128	; 0x80
 8005e70:	00db      	lsls	r3, r3, #3
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d104      	bne.n	8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
          frequency = HAL_RCC_GetSysClockFreq();
 8005e76:	f7ff fc6b 	bl	8005750 <HAL_RCC_GetSysClockFreq>
 8005e7a:	0003      	movs	r3, r0
 8005e7c:	617b      	str	r3, [r7, #20]
        break;
 8005e7e:	e1bc      	b.n	80061fa <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8005e80:	4b2c      	ldr	r3, [pc, #176]	; (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	2380      	movs	r3, #128	; 0x80
 8005e86:	00db      	lsls	r3, r3, #3
 8005e88:	401a      	ands	r2, r3
 8005e8a:	2380      	movs	r3, #128	; 0x80
 8005e8c:	00db      	lsls	r3, r3, #3
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d107      	bne.n	8005ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	2380      	movs	r3, #128	; 0x80
 8005e96:	011b      	lsls	r3, r3, #4
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d102      	bne.n	8005ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
          frequency = HSI_VALUE;
 8005e9c:	4b27      	ldr	r3, [pc, #156]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8005e9e:	617b      	str	r3, [r7, #20]
        break;
 8005ea0:	e1ab      	b.n	80061fa <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8005ea2:	4b24      	ldr	r3, [pc, #144]	; (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ea6:	2202      	movs	r2, #2
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d000      	beq.n	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
 8005eae:	e1a4      	b.n	80061fa <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	23c0      	movs	r3, #192	; 0xc0
 8005eb4:	011b      	lsls	r3, r3, #4
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d000      	beq.n	8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8005eba:	e19e      	b.n	80061fa <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          frequency = LSE_VALUE;
 8005ebc:	2380      	movs	r3, #128	; 0x80
 8005ebe:	021b      	lsls	r3, r3, #8
 8005ec0:	617b      	str	r3, [r7, #20]
        break;
 8005ec2:	e19a      	b.n	80061fa <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005ec4:	4b1b      	ldr	r3, [pc, #108]	; (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec8:	0f9b      	lsrs	r3, r3, #30
 8005eca:	079b      	lsls	r3, r3, #30
 8005ecc:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d104      	bne.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0x2da>
          frequency = HAL_RCC_GetSysClockFreq();
 8005ed4:	f7ff fc3c 	bl	8005750 <HAL_RCC_GetSysClockFreq>
 8005ed8:	0003      	movs	r3, r0
 8005eda:	617b      	str	r3, [r7, #20]
        break;
 8005edc:	e18f      	b.n	80061fe <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	2380      	movs	r3, #128	; 0x80
 8005ee2:	061b      	lsls	r3, r3, #24
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d102      	bne.n	8005eee <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
          frequency = HSI_VALUE;
 8005ee8:	4b14      	ldr	r3, [pc, #80]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8005eea:	617b      	str	r3, [r7, #20]
        break;
 8005eec:	e187      	b.n	80061fe <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	2380      	movs	r3, #128	; 0x80
 8005ef2:	05db      	lsls	r3, r3, #23
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d000      	beq.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 8005ef8:	e181      	b.n	80061fe <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8005efa:	4b0e      	ldr	r3, [pc, #56]	; (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005efc:	68da      	ldr	r2, [r3, #12]
 8005efe:	2380      	movs	r3, #128	; 0x80
 8005f00:	025b      	lsls	r3, r3, #9
 8005f02:	4013      	ands	r3, r2
 8005f04:	d100      	bne.n	8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8005f06:	e17a      	b.n	80061fe <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005f08:	4b0a      	ldr	r3, [pc, #40]	; (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	0a1b      	lsrs	r3, r3, #8
 8005f0e:	227f      	movs	r2, #127	; 0x7f
 8005f10:	4013      	ands	r3, r2
 8005f12:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	68ba      	ldr	r2, [r7, #8]
 8005f18:	435a      	muls	r2, r3
 8005f1a:	0010      	movs	r0, r2
 8005f1c:	4b05      	ldr	r3, [pc, #20]	; (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	0c5b      	lsrs	r3, r3, #17
 8005f22:	221f      	movs	r2, #31
 8005f24:	4013      	ands	r3, r2
 8005f26:	3301      	adds	r3, #1
 8005f28:	0019      	movs	r1, r3
 8005f2a:	f7fa f8eb 	bl	8000104 <__udivsi3>
 8005f2e:	0003      	movs	r3, r0
 8005f30:	617b      	str	r3, [r7, #20]
        break;
 8005f32:	e164      	b.n	80061fe <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
 8005f34:	40021000 	.word	0x40021000
 8005f38:	0003d090 	.word	0x0003d090
 8005f3c:	00f42400 	.word	0x00f42400
 8005f40:	007a1200 	.word	0x007a1200
 8005f44:	00008012 	.word	0x00008012
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005f48:	4bb6      	ldr	r3, [pc, #728]	; (8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8005f4a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f4c:	23c0      	movs	r3, #192	; 0xc0
 8005f4e:	019b      	lsls	r3, r3, #6
 8005f50:	4013      	ands	r3, r2
 8005f52:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d104      	bne.n	8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005f5a:	f7ff fc85 	bl	8005868 <HAL_RCC_GetPCLK1Freq>
 8005f5e:	0003      	movs	r3, r0
 8005f60:	617b      	str	r3, [r7, #20]
        break;
 8005f62:	e14e      	b.n	8006202 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	2380      	movs	r3, #128	; 0x80
 8005f68:	015b      	lsls	r3, r3, #5
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d104      	bne.n	8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0x374>
          frequency = HAL_RCC_GetSysClockFreq();
 8005f6e:	f7ff fbef 	bl	8005750 <HAL_RCC_GetSysClockFreq>
 8005f72:	0003      	movs	r3, r0
 8005f74:	617b      	str	r3, [r7, #20]
        break;
 8005f76:	e144      	b.n	8006202 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8005f78:	4baa      	ldr	r3, [pc, #680]	; (8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	2380      	movs	r3, #128	; 0x80
 8005f7e:	00db      	lsls	r3, r3, #3
 8005f80:	401a      	ands	r2, r3
 8005f82:	2380      	movs	r3, #128	; 0x80
 8005f84:	00db      	lsls	r3, r3, #3
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d000      	beq.n	8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8005f8a:	e13a      	b.n	8006202 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	2380      	movs	r3, #128	; 0x80
 8005f90:	019b      	lsls	r3, r3, #6
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d000      	beq.n	8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8005f96:	e134      	b.n	8006202 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          frequency = HSI_VALUE;
 8005f98:	4ba3      	ldr	r3, [pc, #652]	; (8006228 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 8005f9a:	617b      	str	r3, [r7, #20]
        break;
 8005f9c:	e131      	b.n	8006202 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 8005f9e:	4ba1      	ldr	r3, [pc, #644]	; (8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8005fa0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fa2:	23c0      	movs	r3, #192	; 0xc0
 8005fa4:	021b      	lsls	r3, r3, #8
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	2380      	movs	r3, #128	; 0x80
 8005fae:	01db      	lsls	r3, r3, #7
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d11c      	bne.n	8005fee <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8005fb4:	4b9b      	ldr	r3, [pc, #620]	; (8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8005fb6:	68da      	ldr	r2, [r3, #12]
 8005fb8:	2380      	movs	r3, #128	; 0x80
 8005fba:	025b      	lsls	r3, r3, #9
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	d100      	bne.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005fc0:	e121      	b.n	8006206 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005fc2:	4b98      	ldr	r3, [pc, #608]	; (8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	0a1b      	lsrs	r3, r3, #8
 8005fc8:	227f      	movs	r2, #127	; 0x7f
 8005fca:	4013      	ands	r3, r2
 8005fcc:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	68ba      	ldr	r2, [r7, #8]
 8005fd2:	435a      	muls	r2, r3
 8005fd4:	0010      	movs	r0, r2
 8005fd6:	4b93      	ldr	r3, [pc, #588]	; (8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	0c5b      	lsrs	r3, r3, #17
 8005fdc:	221f      	movs	r2, #31
 8005fde:	4013      	ands	r3, r2
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	0019      	movs	r1, r3
 8005fe4:	f7fa f88e 	bl	8000104 <__udivsi3>
 8005fe8:	0003      	movs	r3, r0
 8005fea:	617b      	str	r3, [r7, #20]
        break;
 8005fec:	e10b      	b.n	8006206 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d104      	bne.n	8005ffe <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          frequency = HAL_RCC_GetSysClockFreq();
 8005ff4:	f7ff fbac 	bl	8005750 <HAL_RCC_GetSysClockFreq>
 8005ff8:	0003      	movs	r3, r0
 8005ffa:	617b      	str	r3, [r7, #20]
        break;
 8005ffc:	e103      	b.n	8006206 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 8005ffe:	4b89      	ldr	r3, [pc, #548]	; (8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	2380      	movs	r3, #128	; 0x80
 8006004:	00db      	lsls	r3, r3, #3
 8006006:	401a      	ands	r2, r3
 8006008:	2380      	movs	r3, #128	; 0x80
 800600a:	00db      	lsls	r3, r3, #3
 800600c:	429a      	cmp	r2, r3
 800600e:	d107      	bne.n	8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	2380      	movs	r3, #128	; 0x80
 8006014:	021b      	lsls	r3, r3, #8
 8006016:	429a      	cmp	r2, r3
 8006018:	d102      	bne.n	8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          frequency = HSI_VALUE;
 800601a:	4b83      	ldr	r3, [pc, #524]	; (8006228 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 800601c:	617b      	str	r3, [r7, #20]
        break;
 800601e:	e0f2      	b.n	8006206 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	23c0      	movs	r3, #192	; 0xc0
 8006024:	021b      	lsls	r3, r3, #8
 8006026:	429a      	cmp	r2, r3
 8006028:	d000      	beq.n	800602c <HAL_RCCEx_GetPeriphCLKFreq+0x428>
 800602a:	e0ec      	b.n	8006206 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 800602c:	4b7f      	ldr	r3, [pc, #508]	; (800622c <HAL_RCCEx_GetPeriphCLKFreq+0x628>)
 800602e:	617b      	str	r3, [r7, #20]
        break;
 8006030:	e0e9      	b.n	8006206 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006032:	4b7c      	ldr	r3, [pc, #496]	; (8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8006034:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006036:	23c0      	movs	r3, #192	; 0xc0
 8006038:	031b      	lsls	r3, r3, #12
 800603a:	4013      	ands	r3, r2
 800603c:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d104      	bne.n	800604e <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006044:	f7ff fc10 	bl	8005868 <HAL_RCC_GetPCLK1Freq>
 8006048:	0003      	movs	r3, r0
 800604a:	617b      	str	r3, [r7, #20]
        break;
 800604c:	e0dd      	b.n	800620a <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800604e:	4b75      	ldr	r3, [pc, #468]	; (8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8006050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006052:	2202      	movs	r2, #2
 8006054:	4013      	ands	r3, r2
 8006056:	2b02      	cmp	r3, #2
 8006058:	d108      	bne.n	800606c <HAL_RCCEx_GetPeriphCLKFreq+0x468>
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	2380      	movs	r3, #128	; 0x80
 800605e:	02db      	lsls	r3, r3, #11
 8006060:	429a      	cmp	r2, r3
 8006062:	d103      	bne.n	800606c <HAL_RCCEx_GetPeriphCLKFreq+0x468>
          frequency = LSI_VALUE;
 8006064:	23fa      	movs	r3, #250	; 0xfa
 8006066:	01db      	lsls	r3, r3, #7
 8006068:	617b      	str	r3, [r7, #20]
 800606a:	e021      	b.n	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800606c:	4b6d      	ldr	r3, [pc, #436]	; (8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	2380      	movs	r3, #128	; 0x80
 8006072:	00db      	lsls	r3, r3, #3
 8006074:	401a      	ands	r2, r3
 8006076:	2380      	movs	r3, #128	; 0x80
 8006078:	00db      	lsls	r3, r3, #3
 800607a:	429a      	cmp	r2, r3
 800607c:	d107      	bne.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	2380      	movs	r3, #128	; 0x80
 8006082:	031b      	lsls	r3, r3, #12
 8006084:	429a      	cmp	r2, r3
 8006086:	d102      	bne.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          frequency = HSI_VALUE;
 8006088:	4b67      	ldr	r3, [pc, #412]	; (8006228 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 800608a:	617b      	str	r3, [r7, #20]
 800608c:	e010      	b.n	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800608e:	4b65      	ldr	r3, [pc, #404]	; (8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8006090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006092:	2202      	movs	r2, #2
 8006094:	4013      	ands	r3, r2
 8006096:	2b02      	cmp	r3, #2
 8006098:	d000      	beq.n	800609c <HAL_RCCEx_GetPeriphCLKFreq+0x498>
 800609a:	e0b6      	b.n	800620a <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	23c0      	movs	r3, #192	; 0xc0
 80060a0:	031b      	lsls	r3, r3, #12
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d000      	beq.n	80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
 80060a6:	e0b0      	b.n	800620a <HAL_RCCEx_GetPeriphCLKFreq+0x606>
          frequency = LSE_VALUE;
 80060a8:	2380      	movs	r3, #128	; 0x80
 80060aa:	021b      	lsls	r3, r3, #8
 80060ac:	617b      	str	r3, [r7, #20]
        break;
 80060ae:	e0ac      	b.n	800620a <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 80060b0:	e0ab      	b.n	800620a <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80060b2:	4b5c      	ldr	r3, [pc, #368]	; (8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 80060b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060b6:	23c0      	movs	r3, #192	; 0xc0
 80060b8:	039b      	lsls	r3, r3, #14
 80060ba:	4013      	ands	r3, r2
 80060bc:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d104      	bne.n	80060ce <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          frequency = HAL_RCC_GetPCLK1Freq();
 80060c4:	f7ff fbd0 	bl	8005868 <HAL_RCC_GetPCLK1Freq>
 80060c8:	0003      	movs	r3, r0
 80060ca:	617b      	str	r3, [r7, #20]
        break;
 80060cc:	e09f      	b.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80060ce:	4b55      	ldr	r3, [pc, #340]	; (8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 80060d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060d2:	2202      	movs	r2, #2
 80060d4:	4013      	ands	r3, r2
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d108      	bne.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	2380      	movs	r3, #128	; 0x80
 80060de:	035b      	lsls	r3, r3, #13
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d103      	bne.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = LSI_VALUE;
 80060e4:	23fa      	movs	r3, #250	; 0xfa
 80060e6:	01db      	lsls	r3, r3, #7
 80060e8:	617b      	str	r3, [r7, #20]
 80060ea:	e021      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80060ec:	4b4d      	ldr	r3, [pc, #308]	; (8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	2380      	movs	r3, #128	; 0x80
 80060f2:	00db      	lsls	r3, r3, #3
 80060f4:	401a      	ands	r2, r3
 80060f6:	2380      	movs	r3, #128	; 0x80
 80060f8:	00db      	lsls	r3, r3, #3
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d107      	bne.n	800610e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	2380      	movs	r3, #128	; 0x80
 8006102:	039b      	lsls	r3, r3, #14
 8006104:	429a      	cmp	r2, r3
 8006106:	d102      	bne.n	800610e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
          frequency = HSI_VALUE;
 8006108:	4b47      	ldr	r3, [pc, #284]	; (8006228 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 800610a:	617b      	str	r3, [r7, #20]
 800610c:	e010      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800610e:	4b45      	ldr	r3, [pc, #276]	; (8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8006110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006112:	2202      	movs	r2, #2
 8006114:	4013      	ands	r3, r2
 8006116:	2b02      	cmp	r3, #2
 8006118:	d000      	beq.n	800611c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800611a:	e078      	b.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	23c0      	movs	r3, #192	; 0xc0
 8006120:	039b      	lsls	r3, r3, #14
 8006122:	429a      	cmp	r2, r3
 8006124:	d000      	beq.n	8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
 8006126:	e072      	b.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = LSE_VALUE;
 8006128:	2380      	movs	r3, #128	; 0x80
 800612a:	021b      	lsls	r3, r3, #8
 800612c:	617b      	str	r3, [r7, #20]
        break;
 800612e:	e06e      	b.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 8006130:	e06d      	b.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 8006132:	4b3c      	ldr	r3, [pc, #240]	; (8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8006134:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006136:	2380      	movs	r3, #128	; 0x80
 8006138:	03db      	lsls	r3, r3, #15
 800613a:	4013      	ands	r3, r2
 800613c:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	2380      	movs	r3, #128	; 0x80
 8006142:	03db      	lsls	r3, r3, #15
 8006144:	429a      	cmp	r2, r3
 8006146:	d11b      	bne.n	8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8006148:	4b36      	ldr	r3, [pc, #216]	; (8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 800614a:	68da      	ldr	r2, [r3, #12]
 800614c:	2380      	movs	r3, #128	; 0x80
 800614e:	045b      	lsls	r3, r3, #17
 8006150:	4013      	ands	r3, r2
 8006152:	d05e      	beq.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006154:	4b33      	ldr	r3, [pc, #204]	; (8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	0a1b      	lsrs	r3, r3, #8
 800615a:	227f      	movs	r2, #127	; 0x7f
 800615c:	4013      	ands	r3, r2
 800615e:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	68ba      	ldr	r2, [r7, #8]
 8006164:	435a      	muls	r2, r3
 8006166:	0010      	movs	r0, r2
 8006168:	4b2e      	ldr	r3, [pc, #184]	; (8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	0e5b      	lsrs	r3, r3, #25
 800616e:	2207      	movs	r2, #7
 8006170:	4013      	ands	r3, r2
 8006172:	3301      	adds	r3, #1
 8006174:	0019      	movs	r1, r3
 8006176:	f7f9 ffc5 	bl	8000104 <__udivsi3>
 800617a:	0003      	movs	r3, r0
 800617c:	617b      	str	r3, [r7, #20]
        break;
 800617e:	e048      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d145      	bne.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006186:	f7ff fb6f 	bl	8005868 <HAL_RCC_GetPCLK1Freq>
 800618a:	0003      	movs	r3, r0
 800618c:	617b      	str	r3, [r7, #20]
        break;
 800618e:	e040      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM15SEL);
 8006190:	4b24      	ldr	r3, [pc, #144]	; (8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8006192:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006194:	2380      	movs	r3, #128	; 0x80
 8006196:	045b      	lsls	r3, r3, #17
 8006198:	4013      	ands	r3, r2
 800619a:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM15CLKSOURCE_PLL) /* PLL ? */
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	2380      	movs	r3, #128	; 0x80
 80061a0:	045b      	lsls	r3, r3, #17
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d11b      	bne.n	80061de <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 80061a6:	4b1f      	ldr	r3, [pc, #124]	; (8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 80061a8:	68da      	ldr	r2, [r3, #12]
 80061aa:	2380      	movs	r3, #128	; 0x80
 80061ac:	045b      	lsls	r3, r3, #17
 80061ae:	4013      	ands	r3, r2
 80061b0:	d031      	beq.n	8006216 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80061b2:	4b1c      	ldr	r3, [pc, #112]	; (8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	0a1b      	lsrs	r3, r3, #8
 80061b8:	227f      	movs	r2, #127	; 0x7f
 80061ba:	4013      	ands	r3, r2
 80061bc:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	68ba      	ldr	r2, [r7, #8]
 80061c2:	435a      	muls	r2, r3
 80061c4:	0010      	movs	r0, r2
 80061c6:	4b17      	ldr	r3, [pc, #92]	; (8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	0e5b      	lsrs	r3, r3, #25
 80061cc:	2207      	movs	r2, #7
 80061ce:	4013      	ands	r3, r2
 80061d0:	3301      	adds	r3, #1
 80061d2:	0019      	movs	r1, r3
 80061d4:	f7f9 ff96 	bl	8000104 <__udivsi3>
 80061d8:	0003      	movs	r3, r0
 80061da:	617b      	str	r3, [r7, #20]
        break;
 80061dc:	e01b      	b.n	8006216 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
        else if (srcclk == RCC_TIM15CLKSOURCE_PCLK1) /* PCLK1 ? */
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d118      	bne.n	8006216 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
          frequency = HAL_RCC_GetPCLK1Freq();
 80061e4:	f7ff fb40 	bl	8005868 <HAL_RCC_GetPCLK1Freq>
 80061e8:	0003      	movs	r3, r0
 80061ea:	617b      	str	r3, [r7, #20]
        break;
 80061ec:	e013      	b.n	8006216 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
        break;
 80061ee:	46c0      	nop			; (mov r8, r8)
 80061f0:	e012      	b.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
        break;
 80061f2:	46c0      	nop			; (mov r8, r8)
 80061f4:	e010      	b.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
        break;
 80061f6:	46c0      	nop			; (mov r8, r8)
 80061f8:	e00e      	b.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
        break;
 80061fa:	46c0      	nop			; (mov r8, r8)
 80061fc:	e00c      	b.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
        break;
 80061fe:	46c0      	nop			; (mov r8, r8)
 8006200:	e00a      	b.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
        break;
 8006202:	46c0      	nop			; (mov r8, r8)
 8006204:	e008      	b.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
        break;
 8006206:	46c0      	nop			; (mov r8, r8)
 8006208:	e006      	b.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
        break;
 800620a:	46c0      	nop			; (mov r8, r8)
 800620c:	e004      	b.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
        break;
 800620e:	46c0      	nop			; (mov r8, r8)
 8006210:	e002      	b.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
        break;
 8006212:	46c0      	nop			; (mov r8, r8)
 8006214:	e000      	b.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
        break;
 8006216:	46c0      	nop			; (mov r8, r8)
    }
  }

  return (frequency);
 8006218:	697b      	ldr	r3, [r7, #20]
}
 800621a:	0018      	movs	r0, r3
 800621c:	46bd      	mov	sp, r7
 800621e:	b006      	add	sp, #24
 8006220:	bd80      	pop	{r7, pc}
 8006222:	46c0      	nop			; (mov r8, r8)
 8006224:	40021000 	.word	0x40021000
 8006228:	00f42400 	.word	0x00f42400
 800622c:	0000bb80 	.word	0x0000bb80

08006230 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d101      	bne.n	8006242 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e0a8      	b.n	8006394 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006246:	2b00      	cmp	r3, #0
 8006248:	d109      	bne.n	800625e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685a      	ldr	r2, [r3, #4]
 800624e:	2382      	movs	r3, #130	; 0x82
 8006250:	005b      	lsls	r3, r3, #1
 8006252:	429a      	cmp	r2, r3
 8006254:	d009      	beq.n	800626a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	61da      	str	r2, [r3, #28]
 800625c:	e005      	b.n	800626a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	225d      	movs	r2, #93	; 0x5d
 8006274:	5c9b      	ldrb	r3, [r3, r2]
 8006276:	b2db      	uxtb	r3, r3
 8006278:	2b00      	cmp	r3, #0
 800627a:	d107      	bne.n	800628c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	225c      	movs	r2, #92	; 0x5c
 8006280:	2100      	movs	r1, #0
 8006282:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	0018      	movs	r0, r3
 8006288:	f7fc fb00 	bl	800288c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	225d      	movs	r2, #93	; 0x5d
 8006290:	2102      	movs	r1, #2
 8006292:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2140      	movs	r1, #64	; 0x40
 80062a0:	438a      	bics	r2, r1
 80062a2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	68da      	ldr	r2, [r3, #12]
 80062a8:	23e0      	movs	r3, #224	; 0xe0
 80062aa:	00db      	lsls	r3, r3, #3
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d902      	bls.n	80062b6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80062b0:	2300      	movs	r3, #0
 80062b2:	60fb      	str	r3, [r7, #12]
 80062b4:	e002      	b.n	80062bc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80062b6:	2380      	movs	r3, #128	; 0x80
 80062b8:	015b      	lsls	r3, r3, #5
 80062ba:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	68da      	ldr	r2, [r3, #12]
 80062c0:	23f0      	movs	r3, #240	; 0xf0
 80062c2:	011b      	lsls	r3, r3, #4
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d008      	beq.n	80062da <HAL_SPI_Init+0xaa>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	68da      	ldr	r2, [r3, #12]
 80062cc:	23e0      	movs	r3, #224	; 0xe0
 80062ce:	00db      	lsls	r3, r3, #3
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d002      	beq.n	80062da <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685a      	ldr	r2, [r3, #4]
 80062de:	2382      	movs	r3, #130	; 0x82
 80062e0:	005b      	lsls	r3, r3, #1
 80062e2:	401a      	ands	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6899      	ldr	r1, [r3, #8]
 80062e8:	2384      	movs	r3, #132	; 0x84
 80062ea:	021b      	lsls	r3, r3, #8
 80062ec:	400b      	ands	r3, r1
 80062ee:	431a      	orrs	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	2102      	movs	r1, #2
 80062f6:	400b      	ands	r3, r1
 80062f8:	431a      	orrs	r2, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	695b      	ldr	r3, [r3, #20]
 80062fe:	2101      	movs	r1, #1
 8006300:	400b      	ands	r3, r1
 8006302:	431a      	orrs	r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6999      	ldr	r1, [r3, #24]
 8006308:	2380      	movs	r3, #128	; 0x80
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	400b      	ands	r3, r1
 800630e:	431a      	orrs	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	69db      	ldr	r3, [r3, #28]
 8006314:	2138      	movs	r1, #56	; 0x38
 8006316:	400b      	ands	r3, r1
 8006318:	431a      	orrs	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	2180      	movs	r1, #128	; 0x80
 8006320:	400b      	ands	r3, r1
 8006322:	431a      	orrs	r2, r3
 8006324:	0011      	movs	r1, r2
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800632a:	2380      	movs	r3, #128	; 0x80
 800632c:	019b      	lsls	r3, r3, #6
 800632e:	401a      	ands	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	430a      	orrs	r2, r1
 8006336:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	699b      	ldr	r3, [r3, #24]
 800633c:	0c1b      	lsrs	r3, r3, #16
 800633e:	2204      	movs	r2, #4
 8006340:	401a      	ands	r2, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006346:	2110      	movs	r1, #16
 8006348:	400b      	ands	r3, r1
 800634a:	431a      	orrs	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006350:	2108      	movs	r1, #8
 8006352:	400b      	ands	r3, r1
 8006354:	431a      	orrs	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	68d9      	ldr	r1, [r3, #12]
 800635a:	23f0      	movs	r3, #240	; 0xf0
 800635c:	011b      	lsls	r3, r3, #4
 800635e:	400b      	ands	r3, r1
 8006360:	431a      	orrs	r2, r3
 8006362:	0011      	movs	r1, r2
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	2380      	movs	r3, #128	; 0x80
 8006368:	015b      	lsls	r3, r3, #5
 800636a:	401a      	ands	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	430a      	orrs	r2, r1
 8006372:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	69da      	ldr	r2, [r3, #28]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4907      	ldr	r1, [pc, #28]	; (800639c <HAL_SPI_Init+0x16c>)
 8006380:	400a      	ands	r2, r1
 8006382:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	225d      	movs	r2, #93	; 0x5d
 800638e:	2101      	movs	r1, #1
 8006390:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006392:	2300      	movs	r3, #0
}
 8006394:	0018      	movs	r0, r3
 8006396:	46bd      	mov	sp, r7
 8006398:	b004      	add	sp, #16
 800639a:	bd80      	pop	{r7, pc}
 800639c:	fffff7ff 	.word	0xfffff7ff

080063a0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b088      	sub	sp, #32
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	603b      	str	r3, [r7, #0]
 80063ac:	1dbb      	adds	r3, r7, #6
 80063ae:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80063b0:	231f      	movs	r3, #31
 80063b2:	18fb      	adds	r3, r7, r3
 80063b4:	2200      	movs	r2, #0
 80063b6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	225c      	movs	r2, #92	; 0x5c
 80063bc:	5c9b      	ldrb	r3, [r3, r2]
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d101      	bne.n	80063c6 <HAL_SPI_Transmit+0x26>
 80063c2:	2302      	movs	r3, #2
 80063c4:	e140      	b.n	8006648 <HAL_SPI_Transmit+0x2a8>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	225c      	movs	r2, #92	; 0x5c
 80063ca:	2101      	movs	r1, #1
 80063cc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063ce:	f7fc fd55 	bl	8002e7c <HAL_GetTick>
 80063d2:	0003      	movs	r3, r0
 80063d4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80063d6:	2316      	movs	r3, #22
 80063d8:	18fb      	adds	r3, r7, r3
 80063da:	1dba      	adds	r2, r7, #6
 80063dc:	8812      	ldrh	r2, [r2, #0]
 80063de:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	225d      	movs	r2, #93	; 0x5d
 80063e4:	5c9b      	ldrb	r3, [r3, r2]
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d004      	beq.n	80063f6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80063ec:	231f      	movs	r3, #31
 80063ee:	18fb      	adds	r3, r7, r3
 80063f0:	2202      	movs	r2, #2
 80063f2:	701a      	strb	r2, [r3, #0]
    goto error;
 80063f4:	e11d      	b.n	8006632 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d003      	beq.n	8006404 <HAL_SPI_Transmit+0x64>
 80063fc:	1dbb      	adds	r3, r7, #6
 80063fe:	881b      	ldrh	r3, [r3, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d104      	bne.n	800640e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006404:	231f      	movs	r3, #31
 8006406:	18fb      	adds	r3, r7, r3
 8006408:	2201      	movs	r2, #1
 800640a:	701a      	strb	r2, [r3, #0]
    goto error;
 800640c:	e111      	b.n	8006632 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	225d      	movs	r2, #93	; 0x5d
 8006412:	2103      	movs	r1, #3
 8006414:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2200      	movs	r2, #0
 800641a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	68ba      	ldr	r2, [r7, #8]
 8006420:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	1dba      	adds	r2, r7, #6
 8006426:	8812      	ldrh	r2, [r2, #0]
 8006428:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	1dba      	adds	r2, r7, #6
 800642e:	8812      	ldrh	r2, [r2, #0]
 8006430:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2244      	movs	r2, #68	; 0x44
 800643c:	2100      	movs	r1, #0
 800643e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2246      	movs	r2, #70	; 0x46
 8006444:	2100      	movs	r1, #0
 8006446:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	689a      	ldr	r2, [r3, #8]
 8006458:	2380      	movs	r3, #128	; 0x80
 800645a:	021b      	lsls	r3, r3, #8
 800645c:	429a      	cmp	r2, r3
 800645e:	d110      	bne.n	8006482 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2140      	movs	r1, #64	; 0x40
 800646c:	438a      	bics	r2, r1
 800646e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2180      	movs	r1, #128	; 0x80
 800647c:	01c9      	lsls	r1, r1, #7
 800647e:	430a      	orrs	r2, r1
 8006480:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2240      	movs	r2, #64	; 0x40
 800648a:	4013      	ands	r3, r2
 800648c:	2b40      	cmp	r3, #64	; 0x40
 800648e:	d007      	beq.n	80064a0 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2140      	movs	r1, #64	; 0x40
 800649c:	430a      	orrs	r2, r1
 800649e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	68da      	ldr	r2, [r3, #12]
 80064a4:	23e0      	movs	r3, #224	; 0xe0
 80064a6:	00db      	lsls	r3, r3, #3
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d94e      	bls.n	800654a <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d004      	beq.n	80064be <HAL_SPI_Transmit+0x11e>
 80064b4:	2316      	movs	r3, #22
 80064b6:	18fb      	adds	r3, r7, r3
 80064b8:	881b      	ldrh	r3, [r3, #0]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d13f      	bne.n	800653e <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c2:	881a      	ldrh	r2, [r3, #0]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ce:	1c9a      	adds	r2, r3, #2
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064d8:	b29b      	uxth	r3, r3
 80064da:	3b01      	subs	r3, #1
 80064dc:	b29a      	uxth	r2, r3
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80064e2:	e02c      	b.n	800653e <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	2202      	movs	r2, #2
 80064ec:	4013      	ands	r3, r2
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d112      	bne.n	8006518 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f6:	881a      	ldrh	r2, [r3, #0]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006502:	1c9a      	adds	r2, r3, #2
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800650c:	b29b      	uxth	r3, r3
 800650e:	3b01      	subs	r3, #1
 8006510:	b29a      	uxth	r2, r3
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006516:	e012      	b.n	800653e <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006518:	f7fc fcb0 	bl	8002e7c <HAL_GetTick>
 800651c:	0002      	movs	r2, r0
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	683a      	ldr	r2, [r7, #0]
 8006524:	429a      	cmp	r2, r3
 8006526:	d802      	bhi.n	800652e <HAL_SPI_Transmit+0x18e>
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	3301      	adds	r3, #1
 800652c:	d102      	bne.n	8006534 <HAL_SPI_Transmit+0x194>
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d104      	bne.n	800653e <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8006534:	231f      	movs	r3, #31
 8006536:	18fb      	adds	r3, r7, r3
 8006538:	2203      	movs	r2, #3
 800653a:	701a      	strb	r2, [r3, #0]
          goto error;
 800653c:	e079      	b.n	8006632 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006542:	b29b      	uxth	r3, r3
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1cd      	bne.n	80064e4 <HAL_SPI_Transmit+0x144>
 8006548:	e04f      	b.n	80065ea <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d004      	beq.n	800655c <HAL_SPI_Transmit+0x1bc>
 8006552:	2316      	movs	r3, #22
 8006554:	18fb      	adds	r3, r7, r3
 8006556:	881b      	ldrh	r3, [r3, #0]
 8006558:	2b01      	cmp	r3, #1
 800655a:	d141      	bne.n	80065e0 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	330c      	adds	r3, #12
 8006566:	7812      	ldrb	r2, [r2, #0]
 8006568:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656e:	1c5a      	adds	r2, r3, #1
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006578:	b29b      	uxth	r3, r3
 800657a:	3b01      	subs	r3, #1
 800657c:	b29a      	uxth	r2, r3
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8006582:	e02d      	b.n	80065e0 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	2202      	movs	r2, #2
 800658c:	4013      	ands	r3, r2
 800658e:	2b02      	cmp	r3, #2
 8006590:	d113      	bne.n	80065ba <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	330c      	adds	r3, #12
 800659c:	7812      	ldrb	r2, [r2, #0]
 800659e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a4:	1c5a      	adds	r2, r3, #1
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	3b01      	subs	r3, #1
 80065b2:	b29a      	uxth	r2, r3
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80065b8:	e012      	b.n	80065e0 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065ba:	f7fc fc5f 	bl	8002e7c <HAL_GetTick>
 80065be:	0002      	movs	r2, r0
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	683a      	ldr	r2, [r7, #0]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d802      	bhi.n	80065d0 <HAL_SPI_Transmit+0x230>
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	3301      	adds	r3, #1
 80065ce:	d102      	bne.n	80065d6 <HAL_SPI_Transmit+0x236>
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d104      	bne.n	80065e0 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80065d6:	231f      	movs	r3, #31
 80065d8:	18fb      	adds	r3, r7, r3
 80065da:	2203      	movs	r2, #3
 80065dc:	701a      	strb	r2, [r3, #0]
          goto error;
 80065de:	e028      	b.n	8006632 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1cc      	bne.n	8006584 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065ea:	69ba      	ldr	r2, [r7, #24]
 80065ec:	6839      	ldr	r1, [r7, #0]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	0018      	movs	r0, r3
 80065f2:	f000 fdeb 	bl	80071cc <SPI_EndRxTxTransaction>
 80065f6:	1e03      	subs	r3, r0, #0
 80065f8:	d002      	beq.n	8006600 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2220      	movs	r2, #32
 80065fe:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d10a      	bne.n	800661e <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006608:	2300      	movs	r3, #0
 800660a:	613b      	str	r3, [r7, #16]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	613b      	str	r3, [r7, #16]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	613b      	str	r3, [r7, #16]
 800661c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006622:	2b00      	cmp	r3, #0
 8006624:	d004      	beq.n	8006630 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8006626:	231f      	movs	r3, #31
 8006628:	18fb      	adds	r3, r7, r3
 800662a:	2201      	movs	r2, #1
 800662c:	701a      	strb	r2, [r3, #0]
 800662e:	e000      	b.n	8006632 <HAL_SPI_Transmit+0x292>
  }

error:
 8006630:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	225d      	movs	r2, #93	; 0x5d
 8006636:	2101      	movs	r1, #1
 8006638:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	225c      	movs	r2, #92	; 0x5c
 800663e:	2100      	movs	r1, #0
 8006640:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006642:	231f      	movs	r3, #31
 8006644:	18fb      	adds	r3, r7, r3
 8006646:	781b      	ldrb	r3, [r3, #0]
}
 8006648:	0018      	movs	r0, r3
 800664a:	46bd      	mov	sp, r7
 800664c:	b008      	add	sp, #32
 800664e:	bd80      	pop	{r7, pc}

08006650 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006650:	b590      	push	{r4, r7, lr}
 8006652:	b089      	sub	sp, #36	; 0x24
 8006654:	af02      	add	r7, sp, #8
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	603b      	str	r3, [r7, #0]
 800665c:	1dbb      	adds	r3, r7, #6
 800665e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006660:	2317      	movs	r3, #23
 8006662:	18fb      	adds	r3, r7, r3
 8006664:	2200      	movs	r2, #0
 8006666:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	685a      	ldr	r2, [r3, #4]
 800666c:	2382      	movs	r3, #130	; 0x82
 800666e:	005b      	lsls	r3, r3, #1
 8006670:	429a      	cmp	r2, r3
 8006672:	d113      	bne.n	800669c <HAL_SPI_Receive+0x4c>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d10f      	bne.n	800669c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	225d      	movs	r2, #93	; 0x5d
 8006680:	2104      	movs	r1, #4
 8006682:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006684:	1dbb      	adds	r3, r7, #6
 8006686:	881c      	ldrh	r4, [r3, #0]
 8006688:	68ba      	ldr	r2, [r7, #8]
 800668a:	68b9      	ldr	r1, [r7, #8]
 800668c:	68f8      	ldr	r0, [r7, #12]
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	9300      	str	r3, [sp, #0]
 8006692:	0023      	movs	r3, r4
 8006694:	f000 f928 	bl	80068e8 <HAL_SPI_TransmitReceive>
 8006698:	0003      	movs	r3, r0
 800669a:	e11c      	b.n	80068d6 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	225c      	movs	r2, #92	; 0x5c
 80066a0:	5c9b      	ldrb	r3, [r3, r2]
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d101      	bne.n	80066aa <HAL_SPI_Receive+0x5a>
 80066a6:	2302      	movs	r3, #2
 80066a8:	e115      	b.n	80068d6 <HAL_SPI_Receive+0x286>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	225c      	movs	r2, #92	; 0x5c
 80066ae:	2101      	movs	r1, #1
 80066b0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066b2:	f7fc fbe3 	bl	8002e7c <HAL_GetTick>
 80066b6:	0003      	movs	r3, r0
 80066b8:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	225d      	movs	r2, #93	; 0x5d
 80066be:	5c9b      	ldrb	r3, [r3, r2]
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d004      	beq.n	80066d0 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 80066c6:	2317      	movs	r3, #23
 80066c8:	18fb      	adds	r3, r7, r3
 80066ca:	2202      	movs	r2, #2
 80066cc:	701a      	strb	r2, [r3, #0]
    goto error;
 80066ce:	e0f7      	b.n	80068c0 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d003      	beq.n	80066de <HAL_SPI_Receive+0x8e>
 80066d6:	1dbb      	adds	r3, r7, #6
 80066d8:	881b      	ldrh	r3, [r3, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d104      	bne.n	80066e8 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 80066de:	2317      	movs	r3, #23
 80066e0:	18fb      	adds	r3, r7, r3
 80066e2:	2201      	movs	r2, #1
 80066e4:	701a      	strb	r2, [r3, #0]
    goto error;
 80066e6:	e0eb      	b.n	80068c0 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	225d      	movs	r2, #93	; 0x5d
 80066ec:	2104      	movs	r1, #4
 80066ee:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2200      	movs	r2, #0
 80066f4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	68ba      	ldr	r2, [r7, #8]
 80066fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	1dba      	adds	r2, r7, #6
 8006700:	2144      	movs	r1, #68	; 0x44
 8006702:	8812      	ldrh	r2, [r2, #0]
 8006704:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	1dba      	adds	r2, r7, #6
 800670a:	2146      	movs	r1, #70	; 0x46
 800670c:	8812      	ldrh	r2, [r2, #0]
 800670e:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2200      	movs	r2, #0
 8006714:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2200      	movs	r2, #0
 8006720:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2200      	movs	r2, #0
 800672c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	68da      	ldr	r2, [r3, #12]
 8006732:	23e0      	movs	r3, #224	; 0xe0
 8006734:	00db      	lsls	r3, r3, #3
 8006736:	429a      	cmp	r2, r3
 8006738:	d908      	bls.n	800674c <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	685a      	ldr	r2, [r3, #4]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4966      	ldr	r1, [pc, #408]	; (80068e0 <HAL_SPI_Receive+0x290>)
 8006746:	400a      	ands	r2, r1
 8006748:	605a      	str	r2, [r3, #4]
 800674a:	e008      	b.n	800675e <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	685a      	ldr	r2, [r3, #4]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2180      	movs	r1, #128	; 0x80
 8006758:	0149      	lsls	r1, r1, #5
 800675a:	430a      	orrs	r2, r1
 800675c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	689a      	ldr	r2, [r3, #8]
 8006762:	2380      	movs	r3, #128	; 0x80
 8006764:	021b      	lsls	r3, r3, #8
 8006766:	429a      	cmp	r2, r3
 8006768:	d10f      	bne.n	800678a <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2140      	movs	r1, #64	; 0x40
 8006776:	438a      	bics	r2, r1
 8006778:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4957      	ldr	r1, [pc, #348]	; (80068e4 <HAL_SPI_Receive+0x294>)
 8006786:	400a      	ands	r2, r1
 8006788:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2240      	movs	r2, #64	; 0x40
 8006792:	4013      	ands	r3, r2
 8006794:	2b40      	cmp	r3, #64	; 0x40
 8006796:	d007      	beq.n	80067a8 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2140      	movs	r1, #64	; 0x40
 80067a4:	430a      	orrs	r2, r1
 80067a6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	68da      	ldr	r2, [r3, #12]
 80067ac:	23e0      	movs	r3, #224	; 0xe0
 80067ae:	00db      	lsls	r3, r3, #3
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d900      	bls.n	80067b6 <HAL_SPI_Receive+0x166>
 80067b4:	e069      	b.n	800688a <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80067b6:	e031      	b.n	800681c <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	2201      	movs	r2, #1
 80067c0:	4013      	ands	r3, r2
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d117      	bne.n	80067f6 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	330c      	adds	r3, #12
 80067cc:	001a      	movs	r2, r3
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d2:	7812      	ldrb	r2, [r2, #0]
 80067d4:	b2d2      	uxtb	r2, r2
 80067d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067dc:	1c5a      	adds	r2, r3, #1
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2246      	movs	r2, #70	; 0x46
 80067e6:	5a9b      	ldrh	r3, [r3, r2]
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	3b01      	subs	r3, #1
 80067ec:	b299      	uxth	r1, r3
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2246      	movs	r2, #70	; 0x46
 80067f2:	5299      	strh	r1, [r3, r2]
 80067f4:	e012      	b.n	800681c <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067f6:	f7fc fb41 	bl	8002e7c <HAL_GetTick>
 80067fa:	0002      	movs	r2, r0
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	683a      	ldr	r2, [r7, #0]
 8006802:	429a      	cmp	r2, r3
 8006804:	d802      	bhi.n	800680c <HAL_SPI_Receive+0x1bc>
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	3301      	adds	r3, #1
 800680a:	d102      	bne.n	8006812 <HAL_SPI_Receive+0x1c2>
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d104      	bne.n	800681c <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8006812:	2317      	movs	r3, #23
 8006814:	18fb      	adds	r3, r7, r3
 8006816:	2203      	movs	r2, #3
 8006818:	701a      	strb	r2, [r3, #0]
          goto error;
 800681a:	e051      	b.n	80068c0 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2246      	movs	r2, #70	; 0x46
 8006820:	5a9b      	ldrh	r3, [r3, r2]
 8006822:	b29b      	uxth	r3, r3
 8006824:	2b00      	cmp	r3, #0
 8006826:	d1c7      	bne.n	80067b8 <HAL_SPI_Receive+0x168>
 8006828:	e035      	b.n	8006896 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	2201      	movs	r2, #1
 8006832:	4013      	ands	r3, r2
 8006834:	2b01      	cmp	r3, #1
 8006836:	d115      	bne.n	8006864 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68da      	ldr	r2, [r3, #12]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006842:	b292      	uxth	r2, r2
 8006844:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684a:	1c9a      	adds	r2, r3, #2
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2246      	movs	r2, #70	; 0x46
 8006854:	5a9b      	ldrh	r3, [r3, r2]
 8006856:	b29b      	uxth	r3, r3
 8006858:	3b01      	subs	r3, #1
 800685a:	b299      	uxth	r1, r3
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2246      	movs	r2, #70	; 0x46
 8006860:	5299      	strh	r1, [r3, r2]
 8006862:	e012      	b.n	800688a <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006864:	f7fc fb0a 	bl	8002e7c <HAL_GetTick>
 8006868:	0002      	movs	r2, r0
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	683a      	ldr	r2, [r7, #0]
 8006870:	429a      	cmp	r2, r3
 8006872:	d802      	bhi.n	800687a <HAL_SPI_Receive+0x22a>
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	3301      	adds	r3, #1
 8006878:	d102      	bne.n	8006880 <HAL_SPI_Receive+0x230>
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d104      	bne.n	800688a <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8006880:	2317      	movs	r3, #23
 8006882:	18fb      	adds	r3, r7, r3
 8006884:	2203      	movs	r2, #3
 8006886:	701a      	strb	r2, [r3, #0]
          goto error;
 8006888:	e01a      	b.n	80068c0 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2246      	movs	r2, #70	; 0x46
 800688e:	5a9b      	ldrh	r3, [r3, r2]
 8006890:	b29b      	uxth	r3, r3
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1c9      	bne.n	800682a <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006896:	693a      	ldr	r2, [r7, #16]
 8006898:	6839      	ldr	r1, [r7, #0]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	0018      	movs	r0, r3
 800689e:	f000 fc37 	bl	8007110 <SPI_EndRxTransaction>
 80068a2:	1e03      	subs	r3, r0, #0
 80068a4:	d002      	beq.n	80068ac <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2220      	movs	r2, #32
 80068aa:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d004      	beq.n	80068be <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 80068b4:	2317      	movs	r3, #23
 80068b6:	18fb      	adds	r3, r7, r3
 80068b8:	2201      	movs	r2, #1
 80068ba:	701a      	strb	r2, [r3, #0]
 80068bc:	e000      	b.n	80068c0 <HAL_SPI_Receive+0x270>
  }

error :
 80068be:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	225d      	movs	r2, #93	; 0x5d
 80068c4:	2101      	movs	r1, #1
 80068c6:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	225c      	movs	r2, #92	; 0x5c
 80068cc:	2100      	movs	r1, #0
 80068ce:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80068d0:	2317      	movs	r3, #23
 80068d2:	18fb      	adds	r3, r7, r3
 80068d4:	781b      	ldrb	r3, [r3, #0]
}
 80068d6:	0018      	movs	r0, r3
 80068d8:	46bd      	mov	sp, r7
 80068da:	b007      	add	sp, #28
 80068dc:	bd90      	pop	{r4, r7, pc}
 80068de:	46c0      	nop			; (mov r8, r8)
 80068e0:	ffffefff 	.word	0xffffefff
 80068e4:	ffffbfff 	.word	0xffffbfff

080068e8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b08a      	sub	sp, #40	; 0x28
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	607a      	str	r2, [r7, #4]
 80068f4:	001a      	movs	r2, r3
 80068f6:	1cbb      	adds	r3, r7, #2
 80068f8:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80068fa:	2301      	movs	r3, #1
 80068fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80068fe:	2323      	movs	r3, #35	; 0x23
 8006900:	18fb      	adds	r3, r7, r3
 8006902:	2200      	movs	r2, #0
 8006904:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	225c      	movs	r2, #92	; 0x5c
 800690a:	5c9b      	ldrb	r3, [r3, r2]
 800690c:	2b01      	cmp	r3, #1
 800690e:	d101      	bne.n	8006914 <HAL_SPI_TransmitReceive+0x2c>
 8006910:	2302      	movs	r3, #2
 8006912:	e1b6      	b.n	8006c82 <HAL_SPI_TransmitReceive+0x39a>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	225c      	movs	r2, #92	; 0x5c
 8006918:	2101      	movs	r1, #1
 800691a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800691c:	f7fc faae 	bl	8002e7c <HAL_GetTick>
 8006920:	0003      	movs	r3, r0
 8006922:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006924:	201b      	movs	r0, #27
 8006926:	183b      	adds	r3, r7, r0
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	215d      	movs	r1, #93	; 0x5d
 800692c:	5c52      	ldrb	r2, [r2, r1]
 800692e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006936:	2312      	movs	r3, #18
 8006938:	18fb      	adds	r3, r7, r3
 800693a:	1cba      	adds	r2, r7, #2
 800693c:	8812      	ldrh	r2, [r2, #0]
 800693e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006940:	183b      	adds	r3, r7, r0
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d012      	beq.n	800696e <HAL_SPI_TransmitReceive+0x86>
 8006948:	697a      	ldr	r2, [r7, #20]
 800694a:	2382      	movs	r3, #130	; 0x82
 800694c:	005b      	lsls	r3, r3, #1
 800694e:	429a      	cmp	r2, r3
 8006950:	d108      	bne.n	8006964 <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d104      	bne.n	8006964 <HAL_SPI_TransmitReceive+0x7c>
 800695a:	231b      	movs	r3, #27
 800695c:	18fb      	adds	r3, r7, r3
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	2b04      	cmp	r3, #4
 8006962:	d004      	beq.n	800696e <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 8006964:	2323      	movs	r3, #35	; 0x23
 8006966:	18fb      	adds	r3, r7, r3
 8006968:	2202      	movs	r2, #2
 800696a:	701a      	strb	r2, [r3, #0]
    goto error;
 800696c:	e17e      	b.n	8006c6c <HAL_SPI_TransmitReceive+0x384>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d006      	beq.n	8006982 <HAL_SPI_TransmitReceive+0x9a>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d003      	beq.n	8006982 <HAL_SPI_TransmitReceive+0x9a>
 800697a:	1cbb      	adds	r3, r7, #2
 800697c:	881b      	ldrh	r3, [r3, #0]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d104      	bne.n	800698c <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 8006982:	2323      	movs	r3, #35	; 0x23
 8006984:	18fb      	adds	r3, r7, r3
 8006986:	2201      	movs	r2, #1
 8006988:	701a      	strb	r2, [r3, #0]
    goto error;
 800698a:	e16f      	b.n	8006c6c <HAL_SPI_TransmitReceive+0x384>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	225d      	movs	r2, #93	; 0x5d
 8006990:	5c9b      	ldrb	r3, [r3, r2]
 8006992:	b2db      	uxtb	r3, r3
 8006994:	2b04      	cmp	r3, #4
 8006996:	d003      	beq.n	80069a0 <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	225d      	movs	r2, #93	; 0x5d
 800699c:	2105      	movs	r1, #5
 800699e:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2200      	movs	r2, #0
 80069a4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	1cba      	adds	r2, r7, #2
 80069b0:	2146      	movs	r1, #70	; 0x46
 80069b2:	8812      	ldrh	r2, [r2, #0]
 80069b4:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	1cba      	adds	r2, r7, #2
 80069ba:	2144      	movs	r1, #68	; 0x44
 80069bc:	8812      	ldrh	r2, [r2, #0]
 80069be:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	68ba      	ldr	r2, [r7, #8]
 80069c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	1cba      	adds	r2, r7, #2
 80069ca:	8812      	ldrh	r2, [r2, #0]
 80069cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	1cba      	adds	r2, r7, #2
 80069d2:	8812      	ldrh	r2, [r2, #0]
 80069d4:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2200      	movs	r2, #0
 80069da:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	68da      	ldr	r2, [r3, #12]
 80069e6:	23e0      	movs	r3, #224	; 0xe0
 80069e8:	00db      	lsls	r3, r3, #3
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d908      	bls.n	8006a00 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	685a      	ldr	r2, [r3, #4]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	49a4      	ldr	r1, [pc, #656]	; (8006c8c <HAL_SPI_TransmitReceive+0x3a4>)
 80069fa:	400a      	ands	r2, r1
 80069fc:	605a      	str	r2, [r3, #4]
 80069fe:	e008      	b.n	8006a12 <HAL_SPI_TransmitReceive+0x12a>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	685a      	ldr	r2, [r3, #4]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2180      	movs	r1, #128	; 0x80
 8006a0c:	0149      	lsls	r1, r1, #5
 8006a0e:	430a      	orrs	r2, r1
 8006a10:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2240      	movs	r2, #64	; 0x40
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	2b40      	cmp	r3, #64	; 0x40
 8006a1e:	d007      	beq.n	8006a30 <HAL_SPI_TransmitReceive+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	2140      	movs	r1, #64	; 0x40
 8006a2c:	430a      	orrs	r2, r1
 8006a2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	68da      	ldr	r2, [r3, #12]
 8006a34:	23e0      	movs	r3, #224	; 0xe0
 8006a36:	00db      	lsls	r3, r3, #3
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d800      	bhi.n	8006a3e <HAL_SPI_TransmitReceive+0x156>
 8006a3c:	e07f      	b.n	8006b3e <HAL_SPI_TransmitReceive+0x256>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d005      	beq.n	8006a52 <HAL_SPI_TransmitReceive+0x16a>
 8006a46:	2312      	movs	r3, #18
 8006a48:	18fb      	adds	r3, r7, r3
 8006a4a:	881b      	ldrh	r3, [r3, #0]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d000      	beq.n	8006a52 <HAL_SPI_TransmitReceive+0x16a>
 8006a50:	e069      	b.n	8006b26 <HAL_SPI_TransmitReceive+0x23e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a56:	881a      	ldrh	r2, [r3, #0]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a62:	1c9a      	adds	r2, r3, #2
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a76:	e056      	b.n	8006b26 <HAL_SPI_TransmitReceive+0x23e>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	2202      	movs	r2, #2
 8006a80:	4013      	ands	r3, r2
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	d11b      	bne.n	8006abe <HAL_SPI_TransmitReceive+0x1d6>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d016      	beq.n	8006abe <HAL_SPI_TransmitReceive+0x1d6>
 8006a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d113      	bne.n	8006abe <HAL_SPI_TransmitReceive+0x1d6>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9a:	881a      	ldrh	r2, [r3, #0]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa6:	1c9a      	adds	r2, r3, #2
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006aba:	2300      	movs	r3, #0
 8006abc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	4013      	ands	r3, r2
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d11c      	bne.n	8006b06 <HAL_SPI_TransmitReceive+0x21e>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2246      	movs	r2, #70	; 0x46
 8006ad0:	5a9b      	ldrh	r3, [r3, r2]
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d016      	beq.n	8006b06 <HAL_SPI_TransmitReceive+0x21e>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	68da      	ldr	r2, [r3, #12]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae2:	b292      	uxth	r2, r2
 8006ae4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aea:	1c9a      	adds	r2, r3, #2
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2246      	movs	r2, #70	; 0x46
 8006af4:	5a9b      	ldrh	r3, [r3, r2]
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	3b01      	subs	r3, #1
 8006afa:	b299      	uxth	r1, r3
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2246      	movs	r2, #70	; 0x46
 8006b00:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b02:	2301      	movs	r3, #1
 8006b04:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006b06:	f7fc f9b9 	bl	8002e7c <HAL_GetTick>
 8006b0a:	0002      	movs	r2, r0
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d807      	bhi.n	8006b26 <HAL_SPI_TransmitReceive+0x23e>
 8006b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b18:	3301      	adds	r3, #1
 8006b1a:	d004      	beq.n	8006b26 <HAL_SPI_TransmitReceive+0x23e>
      {
        errorcode = HAL_TIMEOUT;
 8006b1c:	2323      	movs	r3, #35	; 0x23
 8006b1e:	18fb      	adds	r3, r7, r3
 8006b20:	2203      	movs	r2, #3
 8006b22:	701a      	strb	r2, [r3, #0]
        goto error;
 8006b24:	e0a2      	b.n	8006c6c <HAL_SPI_TransmitReceive+0x384>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1a3      	bne.n	8006a78 <HAL_SPI_TransmitReceive+0x190>
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2246      	movs	r2, #70	; 0x46
 8006b34:	5a9b      	ldrh	r3, [r3, r2]
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d19d      	bne.n	8006a78 <HAL_SPI_TransmitReceive+0x190>
 8006b3c:	e085      	b.n	8006c4a <HAL_SPI_TransmitReceive+0x362>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d005      	beq.n	8006b52 <HAL_SPI_TransmitReceive+0x26a>
 8006b46:	2312      	movs	r3, #18
 8006b48:	18fb      	adds	r3, r7, r3
 8006b4a:	881b      	ldrh	r3, [r3, #0]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d000      	beq.n	8006b52 <HAL_SPI_TransmitReceive+0x26a>
 8006b50:	e070      	b.n	8006c34 <HAL_SPI_TransmitReceive+0x34c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	330c      	adds	r3, #12
 8006b5c:	7812      	ldrb	r2, [r2, #0]
 8006b5e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b64:	1c5a      	adds	r2, r3, #1
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	3b01      	subs	r3, #1
 8006b72:	b29a      	uxth	r2, r3
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b78:	e05c      	b.n	8006c34 <HAL_SPI_TransmitReceive+0x34c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	2202      	movs	r2, #2
 8006b82:	4013      	ands	r3, r2
 8006b84:	2b02      	cmp	r3, #2
 8006b86:	d11c      	bne.n	8006bc2 <HAL_SPI_TransmitReceive+0x2da>
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d017      	beq.n	8006bc2 <HAL_SPI_TransmitReceive+0x2da>
 8006b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d114      	bne.n	8006bc2 <HAL_SPI_TransmitReceive+0x2da>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	330c      	adds	r3, #12
 8006ba2:	7812      	ldrb	r2, [r2, #0]
 8006ba4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006baa:	1c5a      	adds	r2, r3, #1
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	b29a      	uxth	r2, r3
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	4013      	ands	r3, r2
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d11e      	bne.n	8006c0e <HAL_SPI_TransmitReceive+0x326>
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2246      	movs	r2, #70	; 0x46
 8006bd4:	5a9b      	ldrh	r3, [r3, r2]
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d018      	beq.n	8006c0e <HAL_SPI_TransmitReceive+0x326>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	330c      	adds	r3, #12
 8006be2:	001a      	movs	r2, r3
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be8:	7812      	ldrb	r2, [r2, #0]
 8006bea:	b2d2      	uxtb	r2, r2
 8006bec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf2:	1c5a      	adds	r2, r3, #1
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2246      	movs	r2, #70	; 0x46
 8006bfc:	5a9b      	ldrh	r3, [r3, r2]
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	3b01      	subs	r3, #1
 8006c02:	b299      	uxth	r1, r3
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2246      	movs	r2, #70	; 0x46
 8006c08:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006c0e:	f7fc f935 	bl	8002e7c <HAL_GetTick>
 8006c12:	0002      	movs	r2, r0
 8006c14:	69fb      	ldr	r3, [r7, #28]
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d802      	bhi.n	8006c24 <HAL_SPI_TransmitReceive+0x33c>
 8006c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c20:	3301      	adds	r3, #1
 8006c22:	d102      	bne.n	8006c2a <HAL_SPI_TransmitReceive+0x342>
 8006c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d104      	bne.n	8006c34 <HAL_SPI_TransmitReceive+0x34c>
      {
        errorcode = HAL_TIMEOUT;
 8006c2a:	2323      	movs	r3, #35	; 0x23
 8006c2c:	18fb      	adds	r3, r7, r3
 8006c2e:	2203      	movs	r2, #3
 8006c30:	701a      	strb	r2, [r3, #0]
        goto error;
 8006c32:	e01b      	b.n	8006c6c <HAL_SPI_TransmitReceive+0x384>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d19d      	bne.n	8006b7a <HAL_SPI_TransmitReceive+0x292>
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2246      	movs	r2, #70	; 0x46
 8006c42:	5a9b      	ldrh	r3, [r3, r2]
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d197      	bne.n	8006b7a <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c4a:	69fa      	ldr	r2, [r7, #28]
 8006c4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	0018      	movs	r0, r3
 8006c52:	f000 fabb 	bl	80071cc <SPI_EndRxTxTransaction>
 8006c56:	1e03      	subs	r3, r0, #0
 8006c58:	d007      	beq.n	8006c6a <HAL_SPI_TransmitReceive+0x382>
  {
    errorcode = HAL_ERROR;
 8006c5a:	2323      	movs	r3, #35	; 0x23
 8006c5c:	18fb      	adds	r3, r7, r3
 8006c5e:	2201      	movs	r2, #1
 8006c60:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2220      	movs	r2, #32
 8006c66:	661a      	str	r2, [r3, #96]	; 0x60
 8006c68:	e000      	b.n	8006c6c <HAL_SPI_TransmitReceive+0x384>
  }

error :
 8006c6a:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	225d      	movs	r2, #93	; 0x5d
 8006c70:	2101      	movs	r1, #1
 8006c72:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	225c      	movs	r2, #92	; 0x5c
 8006c78:	2100      	movs	r1, #0
 8006c7a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006c7c:	2323      	movs	r3, #35	; 0x23
 8006c7e:	18fb      	adds	r3, r7, r3
 8006c80:	781b      	ldrb	r3, [r3, #0]
}
 8006c82:	0018      	movs	r0, r3
 8006c84:	46bd      	mov	sp, r7
 8006c86:	b00a      	add	sp, #40	; 0x28
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	46c0      	nop			; (mov r8, r8)
 8006c8c:	ffffefff 	.word	0xffffefff

08006c90 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b088      	sub	sp, #32
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	099b      	lsrs	r3, r3, #6
 8006cac:	001a      	movs	r2, r3
 8006cae:	2301      	movs	r3, #1
 8006cb0:	4013      	ands	r3, r2
 8006cb2:	d10f      	bne.n	8006cd4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006cba:	d00b      	beq.n	8006cd4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	099b      	lsrs	r3, r3, #6
 8006cc0:	001a      	movs	r2, r3
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	d005      	beq.n	8006cd4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	0010      	movs	r0, r2
 8006cd0:	4798      	blx	r3
    return;
 8006cd2:	e0d6      	b.n	8006e82 <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	085b      	lsrs	r3, r3, #1
 8006cd8:	001a      	movs	r2, r3
 8006cda:	2301      	movs	r3, #1
 8006cdc:	4013      	ands	r3, r2
 8006cde:	d00b      	beq.n	8006cf8 <HAL_SPI_IRQHandler+0x68>
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	09db      	lsrs	r3, r3, #7
 8006ce4:	001a      	movs	r2, r3
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	4013      	ands	r3, r2
 8006cea:	d005      	beq.n	8006cf8 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	0010      	movs	r0, r2
 8006cf4:	4798      	blx	r3
    return;
 8006cf6:	e0c4      	b.n	8006e82 <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	095b      	lsrs	r3, r3, #5
 8006cfc:	001a      	movs	r2, r3
 8006cfe:	2301      	movs	r3, #1
 8006d00:	4013      	ands	r3, r2
 8006d02:	d10c      	bne.n	8006d1e <HAL_SPI_IRQHandler+0x8e>
 8006d04:	69bb      	ldr	r3, [r7, #24]
 8006d06:	099b      	lsrs	r3, r3, #6
 8006d08:	001a      	movs	r2, r3
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	d106      	bne.n	8006d1e <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	0a1b      	lsrs	r3, r3, #8
 8006d14:	001a      	movs	r2, r3
 8006d16:	2301      	movs	r3, #1
 8006d18:	4013      	ands	r3, r2
 8006d1a:	d100      	bne.n	8006d1e <HAL_SPI_IRQHandler+0x8e>
 8006d1c:	e0b1      	b.n	8006e82 <HAL_SPI_IRQHandler+0x1f2>
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	095b      	lsrs	r3, r3, #5
 8006d22:	001a      	movs	r2, r3
 8006d24:	2301      	movs	r3, #1
 8006d26:	4013      	ands	r3, r2
 8006d28:	d100      	bne.n	8006d2c <HAL_SPI_IRQHandler+0x9c>
 8006d2a:	e0aa      	b.n	8006e82 <HAL_SPI_IRQHandler+0x1f2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	099b      	lsrs	r3, r3, #6
 8006d30:	001a      	movs	r2, r3
 8006d32:	2301      	movs	r3, #1
 8006d34:	4013      	ands	r3, r2
 8006d36:	d023      	beq.n	8006d80 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	225d      	movs	r2, #93	; 0x5d
 8006d3c:	5c9b      	ldrb	r3, [r3, r2]
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	2b03      	cmp	r3, #3
 8006d42:	d011      	beq.n	8006d68 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d48:	2204      	movs	r2, #4
 8006d4a:	431a      	orrs	r2, r3
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d50:	2300      	movs	r3, #0
 8006d52:	617b      	str	r3, [r7, #20]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	617b      	str	r3, [r7, #20]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	617b      	str	r3, [r7, #20]
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	e00b      	b.n	8006d80 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d68:	2300      	movs	r3, #0
 8006d6a:	613b      	str	r3, [r7, #16]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	613b      	str	r3, [r7, #16]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	613b      	str	r3, [r7, #16]
 8006d7c:	693b      	ldr	r3, [r7, #16]
        return;
 8006d7e:	e080      	b.n	8006e82 <HAL_SPI_IRQHandler+0x1f2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	095b      	lsrs	r3, r3, #5
 8006d84:	001a      	movs	r2, r3
 8006d86:	2301      	movs	r3, #1
 8006d88:	4013      	ands	r3, r2
 8006d8a:	d014      	beq.n	8006db6 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d90:	2201      	movs	r2, #1
 8006d92:	431a      	orrs	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006d98:	2300      	movs	r3, #0
 8006d9a:	60fb      	str	r3, [r7, #12]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	60fb      	str	r3, [r7, #12]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2140      	movs	r1, #64	; 0x40
 8006db0:	438a      	bics	r2, r1
 8006db2:	601a      	str	r2, [r3, #0]
 8006db4:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	0a1b      	lsrs	r3, r3, #8
 8006dba:	001a      	movs	r2, r3
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	4013      	ands	r3, r2
 8006dc0:	d00c      	beq.n	8006ddc <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dc6:	2208      	movs	r2, #8
 8006dc8:	431a      	orrs	r2, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006dce:	2300      	movs	r3, #0
 8006dd0:	60bb      	str	r3, [r7, #8]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	60bb      	str	r3, [r7, #8]
 8006dda:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d04d      	beq.n	8006e80 <HAL_SPI_IRQHandler+0x1f0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	685a      	ldr	r2, [r3, #4]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	21e0      	movs	r1, #224	; 0xe0
 8006df0:	438a      	bics	r2, r1
 8006df2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	225d      	movs	r2, #93	; 0x5d
 8006df8:	2101      	movs	r1, #1
 8006dfa:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	2202      	movs	r2, #2
 8006e00:	4013      	ands	r3, r2
 8006e02:	d103      	bne.n	8006e0c <HAL_SPI_IRQHandler+0x17c>
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	2201      	movs	r2, #1
 8006e08:	4013      	ands	r3, r2
 8006e0a:	d032      	beq.n	8006e72 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	685a      	ldr	r2, [r3, #4]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2103      	movs	r1, #3
 8006e18:	438a      	bics	r2, r1
 8006e1a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d010      	beq.n	8006e46 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e28:	4a17      	ldr	r2, [pc, #92]	; (8006e88 <HAL_SPI_IRQHandler+0x1f8>)
 8006e2a:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e30:	0018      	movs	r0, r3
 8006e32:	f7fc fc2b 	bl	800368c <HAL_DMA_Abort_IT>
 8006e36:	1e03      	subs	r3, r0, #0
 8006e38:	d005      	beq.n	8006e46 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e3e:	2240      	movs	r2, #64	; 0x40
 8006e40:	431a      	orrs	r2, r3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d016      	beq.n	8006e7c <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e52:	4a0d      	ldr	r2, [pc, #52]	; (8006e88 <HAL_SPI_IRQHandler+0x1f8>)
 8006e54:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e5a:	0018      	movs	r0, r3
 8006e5c:	f7fc fc16 	bl	800368c <HAL_DMA_Abort_IT>
 8006e60:	1e03      	subs	r3, r0, #0
 8006e62:	d00b      	beq.n	8006e7c <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e68:	2240      	movs	r2, #64	; 0x40
 8006e6a:	431a      	orrs	r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006e70:	e004      	b.n	8006e7c <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	0018      	movs	r0, r3
 8006e76:	f000 f809 	bl	8006e8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006e7a:	e000      	b.n	8006e7e <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8006e7c:	46c0      	nop			; (mov r8, r8)
    return;
 8006e7e:	46c0      	nop			; (mov r8, r8)
 8006e80:	46c0      	nop			; (mov r8, r8)
  }
}
 8006e82:	46bd      	mov	sp, r7
 8006e84:	b008      	add	sp, #32
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	08006e9d 	.word	0x08006e9d

08006e8c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006e94:	46c0      	nop			; (mov r8, r8)
 8006e96:	46bd      	mov	sp, r7
 8006e98:	b002      	add	sp, #8
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2246      	movs	r2, #70	; 0x46
 8006eae:	2100      	movs	r1, #0
 8006eb0:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	0018      	movs	r0, r3
 8006ebc:	f7ff ffe6 	bl	8006e8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006ec0:	46c0      	nop			; (mov r8, r8)
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	b004      	add	sp, #16
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b088      	sub	sp, #32
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	60b9      	str	r1, [r7, #8]
 8006ed2:	603b      	str	r3, [r7, #0]
 8006ed4:	1dfb      	adds	r3, r7, #7
 8006ed6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006ed8:	f7fb ffd0 	bl	8002e7c <HAL_GetTick>
 8006edc:	0002      	movs	r2, r0
 8006ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee0:	1a9b      	subs	r3, r3, r2
 8006ee2:	683a      	ldr	r2, [r7, #0]
 8006ee4:	18d3      	adds	r3, r2, r3
 8006ee6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006ee8:	f7fb ffc8 	bl	8002e7c <HAL_GetTick>
 8006eec:	0003      	movs	r3, r0
 8006eee:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006ef0:	4b3a      	ldr	r3, [pc, #232]	; (8006fdc <SPI_WaitFlagStateUntilTimeout+0x114>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	015b      	lsls	r3, r3, #5
 8006ef6:	0d1b      	lsrs	r3, r3, #20
 8006ef8:	69fa      	ldr	r2, [r7, #28]
 8006efa:	4353      	muls	r3, r2
 8006efc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006efe:	e058      	b.n	8006fb2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	3301      	adds	r3, #1
 8006f04:	d055      	beq.n	8006fb2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f06:	f7fb ffb9 	bl	8002e7c <HAL_GetTick>
 8006f0a:	0002      	movs	r2, r0
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	1ad3      	subs	r3, r2, r3
 8006f10:	69fa      	ldr	r2, [r7, #28]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d902      	bls.n	8006f1c <SPI_WaitFlagStateUntilTimeout+0x54>
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d142      	bne.n	8006fa2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	685a      	ldr	r2, [r3, #4]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	21e0      	movs	r1, #224	; 0xe0
 8006f28:	438a      	bics	r2, r1
 8006f2a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	685a      	ldr	r2, [r3, #4]
 8006f30:	2382      	movs	r3, #130	; 0x82
 8006f32:	005b      	lsls	r3, r3, #1
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d113      	bne.n	8006f60 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	689a      	ldr	r2, [r3, #8]
 8006f3c:	2380      	movs	r3, #128	; 0x80
 8006f3e:	021b      	lsls	r3, r3, #8
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d005      	beq.n	8006f50 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	689a      	ldr	r2, [r3, #8]
 8006f48:	2380      	movs	r3, #128	; 0x80
 8006f4a:	00db      	lsls	r3, r3, #3
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d107      	bne.n	8006f60 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2140      	movs	r1, #64	; 0x40
 8006f5c:	438a      	bics	r2, r1
 8006f5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f64:	2380      	movs	r3, #128	; 0x80
 8006f66:	019b      	lsls	r3, r3, #6
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d110      	bne.n	8006f8e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	491a      	ldr	r1, [pc, #104]	; (8006fe0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006f78:	400a      	ands	r2, r1
 8006f7a:	601a      	str	r2, [r3, #0]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	2180      	movs	r1, #128	; 0x80
 8006f88:	0189      	lsls	r1, r1, #6
 8006f8a:	430a      	orrs	r2, r1
 8006f8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	225d      	movs	r2, #93	; 0x5d
 8006f92:	2101      	movs	r1, #1
 8006f94:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	225c      	movs	r2, #92	; 0x5c
 8006f9a:	2100      	movs	r1, #0
 8006f9c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	e017      	b.n	8006fd2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d101      	bne.n	8006fac <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	68ba      	ldr	r2, [r7, #8]
 8006fba:	4013      	ands	r3, r2
 8006fbc:	68ba      	ldr	r2, [r7, #8]
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	425a      	negs	r2, r3
 8006fc2:	4153      	adcs	r3, r2
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	001a      	movs	r2, r3
 8006fc8:	1dfb      	adds	r3, r7, #7
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d197      	bne.n	8006f00 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	0018      	movs	r0, r3
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	b008      	add	sp, #32
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	46c0      	nop			; (mov r8, r8)
 8006fdc:	20005134 	.word	0x20005134
 8006fe0:	ffffdfff 	.word	0xffffdfff

08006fe4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b088      	sub	sp, #32
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	607a      	str	r2, [r7, #4]
 8006ff0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006ff2:	f7fb ff43 	bl	8002e7c <HAL_GetTick>
 8006ff6:	0002      	movs	r2, r0
 8006ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffa:	1a9b      	subs	r3, r3, r2
 8006ffc:	683a      	ldr	r2, [r7, #0]
 8006ffe:	18d3      	adds	r3, r2, r3
 8007000:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007002:	f7fb ff3b 	bl	8002e7c <HAL_GetTick>
 8007006:	0003      	movs	r3, r0
 8007008:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800700a:	4b3f      	ldr	r3, [pc, #252]	; (8007108 <SPI_WaitFifoStateUntilTimeout+0x124>)
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	0013      	movs	r3, r2
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	189b      	adds	r3, r3, r2
 8007014:	00da      	lsls	r2, r3, #3
 8007016:	1ad3      	subs	r3, r2, r3
 8007018:	0d1b      	lsrs	r3, r3, #20
 800701a:	69fa      	ldr	r2, [r7, #28]
 800701c:	4353      	muls	r3, r2
 800701e:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8007020:	e064      	b.n	80070ec <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007022:	68ba      	ldr	r2, [r7, #8]
 8007024:	23c0      	movs	r3, #192	; 0xc0
 8007026:	00db      	lsls	r3, r3, #3
 8007028:	429a      	cmp	r2, r3
 800702a:	d106      	bne.n	800703a <SPI_WaitFifoStateUntilTimeout+0x56>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d103      	bne.n	800703a <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	330c      	adds	r3, #12
 8007038:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	3301      	adds	r3, #1
 800703e:	d055      	beq.n	80070ec <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007040:	f7fb ff1c 	bl	8002e7c <HAL_GetTick>
 8007044:	0002      	movs	r2, r0
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	69fa      	ldr	r2, [r7, #28]
 800704c:	429a      	cmp	r2, r3
 800704e:	d902      	bls.n	8007056 <SPI_WaitFifoStateUntilTimeout+0x72>
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d142      	bne.n	80070dc <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	685a      	ldr	r2, [r3, #4]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	21e0      	movs	r1, #224	; 0xe0
 8007062:	438a      	bics	r2, r1
 8007064:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	685a      	ldr	r2, [r3, #4]
 800706a:	2382      	movs	r3, #130	; 0x82
 800706c:	005b      	lsls	r3, r3, #1
 800706e:	429a      	cmp	r2, r3
 8007070:	d113      	bne.n	800709a <SPI_WaitFifoStateUntilTimeout+0xb6>
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	689a      	ldr	r2, [r3, #8]
 8007076:	2380      	movs	r3, #128	; 0x80
 8007078:	021b      	lsls	r3, r3, #8
 800707a:	429a      	cmp	r2, r3
 800707c:	d005      	beq.n	800708a <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	689a      	ldr	r2, [r3, #8]
 8007082:	2380      	movs	r3, #128	; 0x80
 8007084:	00db      	lsls	r3, r3, #3
 8007086:	429a      	cmp	r2, r3
 8007088:	d107      	bne.n	800709a <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	2140      	movs	r1, #64	; 0x40
 8007096:	438a      	bics	r2, r1
 8007098:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800709e:	2380      	movs	r3, #128	; 0x80
 80070a0:	019b      	lsls	r3, r3, #6
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d110      	bne.n	80070c8 <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4916      	ldr	r1, [pc, #88]	; (800710c <SPI_WaitFifoStateUntilTimeout+0x128>)
 80070b2:	400a      	ands	r2, r1
 80070b4:	601a      	str	r2, [r3, #0]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2180      	movs	r1, #128	; 0x80
 80070c2:	0189      	lsls	r1, r1, #6
 80070c4:	430a      	orrs	r2, r1
 80070c6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	225d      	movs	r2, #93	; 0x5d
 80070cc:	2101      	movs	r1, #1
 80070ce:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	225c      	movs	r2, #92	; 0x5c
 80070d4:	2100      	movs	r1, #0
 80070d6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80070d8:	2303      	movs	r3, #3
 80070da:	e010      	b.n	80070fe <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d101      	bne.n	80070e6 <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 80070e2:	2300      	movs	r3, #0
 80070e4:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	3b01      	subs	r3, #1
 80070ea:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	68ba      	ldr	r2, [r7, #8]
 80070f4:	4013      	ands	r3, r2
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d192      	bne.n	8007022 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	0018      	movs	r0, r3
 8007100:	46bd      	mov	sp, r7
 8007102:	b008      	add	sp, #32
 8007104:	bd80      	pop	{r7, pc}
 8007106:	46c0      	nop			; (mov r8, r8)
 8007108:	20005134 	.word	0x20005134
 800710c:	ffffdfff 	.word	0xffffdfff

08007110 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b086      	sub	sp, #24
 8007114:	af02      	add	r7, sp, #8
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	685a      	ldr	r2, [r3, #4]
 8007120:	2382      	movs	r3, #130	; 0x82
 8007122:	005b      	lsls	r3, r3, #1
 8007124:	429a      	cmp	r2, r3
 8007126:	d113      	bne.n	8007150 <SPI_EndRxTransaction+0x40>
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	689a      	ldr	r2, [r3, #8]
 800712c:	2380      	movs	r3, #128	; 0x80
 800712e:	021b      	lsls	r3, r3, #8
 8007130:	429a      	cmp	r2, r3
 8007132:	d005      	beq.n	8007140 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	689a      	ldr	r2, [r3, #8]
 8007138:	2380      	movs	r3, #128	; 0x80
 800713a:	00db      	lsls	r3, r3, #3
 800713c:	429a      	cmp	r2, r3
 800713e:	d107      	bne.n	8007150 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2140      	movs	r1, #64	; 0x40
 800714c:	438a      	bics	r2, r1
 800714e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007150:	68ba      	ldr	r2, [r7, #8]
 8007152:	68f8      	ldr	r0, [r7, #12]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	9300      	str	r3, [sp, #0]
 8007158:	0013      	movs	r3, r2
 800715a:	2200      	movs	r2, #0
 800715c:	2180      	movs	r1, #128	; 0x80
 800715e:	f7ff feb3 	bl	8006ec8 <SPI_WaitFlagStateUntilTimeout>
 8007162:	1e03      	subs	r3, r0, #0
 8007164:	d007      	beq.n	8007176 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800716a:	2220      	movs	r2, #32
 800716c:	431a      	orrs	r2, r3
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007172:	2303      	movs	r3, #3
 8007174:	e026      	b.n	80071c4 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	685a      	ldr	r2, [r3, #4]
 800717a:	2382      	movs	r3, #130	; 0x82
 800717c:	005b      	lsls	r3, r3, #1
 800717e:	429a      	cmp	r2, r3
 8007180:	d11f      	bne.n	80071c2 <SPI_EndRxTransaction+0xb2>
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	689a      	ldr	r2, [r3, #8]
 8007186:	2380      	movs	r3, #128	; 0x80
 8007188:	021b      	lsls	r3, r3, #8
 800718a:	429a      	cmp	r2, r3
 800718c:	d005      	beq.n	800719a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	689a      	ldr	r2, [r3, #8]
 8007192:	2380      	movs	r3, #128	; 0x80
 8007194:	00db      	lsls	r3, r3, #3
 8007196:	429a      	cmp	r2, r3
 8007198:	d113      	bne.n	80071c2 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800719a:	68ba      	ldr	r2, [r7, #8]
 800719c:	23c0      	movs	r3, #192	; 0xc0
 800719e:	00d9      	lsls	r1, r3, #3
 80071a0:	68f8      	ldr	r0, [r7, #12]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	9300      	str	r3, [sp, #0]
 80071a6:	0013      	movs	r3, r2
 80071a8:	2200      	movs	r2, #0
 80071aa:	f7ff ff1b 	bl	8006fe4 <SPI_WaitFifoStateUntilTimeout>
 80071ae:	1e03      	subs	r3, r0, #0
 80071b0:	d007      	beq.n	80071c2 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071b6:	2220      	movs	r2, #32
 80071b8:	431a      	orrs	r2, r3
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80071be:	2303      	movs	r3, #3
 80071c0:	e000      	b.n	80071c4 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	0018      	movs	r0, r3
 80071c6:	46bd      	mov	sp, r7
 80071c8:	b004      	add	sp, #16
 80071ca:	bd80      	pop	{r7, pc}

080071cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b086      	sub	sp, #24
 80071d0:	af02      	add	r7, sp, #8
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80071d8:	68ba      	ldr	r2, [r7, #8]
 80071da:	23c0      	movs	r3, #192	; 0xc0
 80071dc:	0159      	lsls	r1, r3, #5
 80071de:	68f8      	ldr	r0, [r7, #12]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	9300      	str	r3, [sp, #0]
 80071e4:	0013      	movs	r3, r2
 80071e6:	2200      	movs	r2, #0
 80071e8:	f7ff fefc 	bl	8006fe4 <SPI_WaitFifoStateUntilTimeout>
 80071ec:	1e03      	subs	r3, r0, #0
 80071ee:	d007      	beq.n	8007200 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071f4:	2220      	movs	r2, #32
 80071f6:	431a      	orrs	r2, r3
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80071fc:	2303      	movs	r3, #3
 80071fe:	e027      	b.n	8007250 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007200:	68ba      	ldr	r2, [r7, #8]
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	9300      	str	r3, [sp, #0]
 8007208:	0013      	movs	r3, r2
 800720a:	2200      	movs	r2, #0
 800720c:	2180      	movs	r1, #128	; 0x80
 800720e:	f7ff fe5b 	bl	8006ec8 <SPI_WaitFlagStateUntilTimeout>
 8007212:	1e03      	subs	r3, r0, #0
 8007214:	d007      	beq.n	8007226 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800721a:	2220      	movs	r2, #32
 800721c:	431a      	orrs	r2, r3
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007222:	2303      	movs	r3, #3
 8007224:	e014      	b.n	8007250 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007226:	68ba      	ldr	r2, [r7, #8]
 8007228:	23c0      	movs	r3, #192	; 0xc0
 800722a:	00d9      	lsls	r1, r3, #3
 800722c:	68f8      	ldr	r0, [r7, #12]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	9300      	str	r3, [sp, #0]
 8007232:	0013      	movs	r3, r2
 8007234:	2200      	movs	r2, #0
 8007236:	f7ff fed5 	bl	8006fe4 <SPI_WaitFifoStateUntilTimeout>
 800723a:	1e03      	subs	r3, r0, #0
 800723c:	d007      	beq.n	800724e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007242:	2220      	movs	r2, #32
 8007244:	431a      	orrs	r2, r3
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800724a:	2303      	movs	r3, #3
 800724c:	e000      	b.n	8007250 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800724e:	2300      	movs	r3, #0
}
 8007250:	0018      	movs	r0, r3
 8007252:	46bd      	mov	sp, r7
 8007254:	b004      	add	sp, #16
 8007256:	bd80      	pop	{r7, pc}

08007258 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d101      	bne.n	800726a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	e04a      	b.n	8007300 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	223d      	movs	r2, #61	; 0x3d
 800726e:	5c9b      	ldrb	r3, [r3, r2]
 8007270:	b2db      	uxtb	r3, r3
 8007272:	2b00      	cmp	r3, #0
 8007274:	d107      	bne.n	8007286 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	223c      	movs	r2, #60	; 0x3c
 800727a:	2100      	movs	r1, #0
 800727c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	0018      	movs	r0, r3
 8007282:	f7fb fb6f 	bl	8002964 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	223d      	movs	r2, #61	; 0x3d
 800728a:	2102      	movs	r1, #2
 800728c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	3304      	adds	r3, #4
 8007296:	0019      	movs	r1, r3
 8007298:	0010      	movs	r0, r2
 800729a:	f000 fb35 	bl	8007908 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2248      	movs	r2, #72	; 0x48
 80072a2:	2101      	movs	r1, #1
 80072a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	223e      	movs	r2, #62	; 0x3e
 80072aa:	2101      	movs	r1, #1
 80072ac:	5499      	strb	r1, [r3, r2]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	223f      	movs	r2, #63	; 0x3f
 80072b2:	2101      	movs	r1, #1
 80072b4:	5499      	strb	r1, [r3, r2]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2240      	movs	r2, #64	; 0x40
 80072ba:	2101      	movs	r1, #1
 80072bc:	5499      	strb	r1, [r3, r2]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2241      	movs	r2, #65	; 0x41
 80072c2:	2101      	movs	r1, #1
 80072c4:	5499      	strb	r1, [r3, r2]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2242      	movs	r2, #66	; 0x42
 80072ca:	2101      	movs	r1, #1
 80072cc:	5499      	strb	r1, [r3, r2]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2243      	movs	r2, #67	; 0x43
 80072d2:	2101      	movs	r1, #1
 80072d4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2244      	movs	r2, #68	; 0x44
 80072da:	2101      	movs	r1, #1
 80072dc:	5499      	strb	r1, [r3, r2]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2245      	movs	r2, #69	; 0x45
 80072e2:	2101      	movs	r1, #1
 80072e4:	5499      	strb	r1, [r3, r2]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2246      	movs	r2, #70	; 0x46
 80072ea:	2101      	movs	r1, #1
 80072ec:	5499      	strb	r1, [r3, r2]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2247      	movs	r2, #71	; 0x47
 80072f2:	2101      	movs	r1, #1
 80072f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	223d      	movs	r2, #61	; 0x3d
 80072fa:	2101      	movs	r1, #1
 80072fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	0018      	movs	r0, r3
 8007302:	46bd      	mov	sp, r7
 8007304:	b002      	add	sp, #8
 8007306:	bd80      	pop	{r7, pc}

08007308 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d101      	bne.n	800731a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e04a      	b.n	80073b0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	223d      	movs	r2, #61	; 0x3d
 800731e:	5c9b      	ldrb	r3, [r3, r2]
 8007320:	b2db      	uxtb	r3, r3
 8007322:	2b00      	cmp	r3, #0
 8007324:	d107      	bne.n	8007336 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	223c      	movs	r2, #60	; 0x3c
 800732a:	2100      	movs	r1, #0
 800732c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	0018      	movs	r0, r3
 8007332:	f000 f841 	bl	80073b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	223d      	movs	r2, #61	; 0x3d
 800733a:	2102      	movs	r1, #2
 800733c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	3304      	adds	r3, #4
 8007346:	0019      	movs	r1, r3
 8007348:	0010      	movs	r0, r2
 800734a:	f000 fadd 	bl	8007908 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2248      	movs	r2, #72	; 0x48
 8007352:	2101      	movs	r1, #1
 8007354:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	223e      	movs	r2, #62	; 0x3e
 800735a:	2101      	movs	r1, #1
 800735c:	5499      	strb	r1, [r3, r2]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	223f      	movs	r2, #63	; 0x3f
 8007362:	2101      	movs	r1, #1
 8007364:	5499      	strb	r1, [r3, r2]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2240      	movs	r2, #64	; 0x40
 800736a:	2101      	movs	r1, #1
 800736c:	5499      	strb	r1, [r3, r2]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2241      	movs	r2, #65	; 0x41
 8007372:	2101      	movs	r1, #1
 8007374:	5499      	strb	r1, [r3, r2]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2242      	movs	r2, #66	; 0x42
 800737a:	2101      	movs	r1, #1
 800737c:	5499      	strb	r1, [r3, r2]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2243      	movs	r2, #67	; 0x43
 8007382:	2101      	movs	r1, #1
 8007384:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2244      	movs	r2, #68	; 0x44
 800738a:	2101      	movs	r1, #1
 800738c:	5499      	strb	r1, [r3, r2]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2245      	movs	r2, #69	; 0x45
 8007392:	2101      	movs	r1, #1
 8007394:	5499      	strb	r1, [r3, r2]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2246      	movs	r2, #70	; 0x46
 800739a:	2101      	movs	r1, #1
 800739c:	5499      	strb	r1, [r3, r2]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2247      	movs	r2, #71	; 0x47
 80073a2:	2101      	movs	r1, #1
 80073a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	223d      	movs	r2, #61	; 0x3d
 80073aa:	2101      	movs	r1, #1
 80073ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	0018      	movs	r0, r3
 80073b2:	46bd      	mov	sp, r7
 80073b4:	b002      	add	sp, #8
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b082      	sub	sp, #8
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80073c0:	46c0      	nop			; (mov r8, r8)
 80073c2:	46bd      	mov	sp, r7
 80073c4:	b002      	add	sp, #8
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d108      	bne.n	80073ea <HAL_TIM_PWM_Start+0x22>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	223e      	movs	r2, #62	; 0x3e
 80073dc:	5c9b      	ldrb	r3, [r3, r2]
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	3b01      	subs	r3, #1
 80073e2:	1e5a      	subs	r2, r3, #1
 80073e4:	4193      	sbcs	r3, r2
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	e037      	b.n	800745a <HAL_TIM_PWM_Start+0x92>
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	2b04      	cmp	r3, #4
 80073ee:	d108      	bne.n	8007402 <HAL_TIM_PWM_Start+0x3a>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	223f      	movs	r2, #63	; 0x3f
 80073f4:	5c9b      	ldrb	r3, [r3, r2]
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	3b01      	subs	r3, #1
 80073fa:	1e5a      	subs	r2, r3, #1
 80073fc:	4193      	sbcs	r3, r2
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	e02b      	b.n	800745a <HAL_TIM_PWM_Start+0x92>
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	2b08      	cmp	r3, #8
 8007406:	d108      	bne.n	800741a <HAL_TIM_PWM_Start+0x52>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2240      	movs	r2, #64	; 0x40
 800740c:	5c9b      	ldrb	r3, [r3, r2]
 800740e:	b2db      	uxtb	r3, r3
 8007410:	3b01      	subs	r3, #1
 8007412:	1e5a      	subs	r2, r3, #1
 8007414:	4193      	sbcs	r3, r2
 8007416:	b2db      	uxtb	r3, r3
 8007418:	e01f      	b.n	800745a <HAL_TIM_PWM_Start+0x92>
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	2b0c      	cmp	r3, #12
 800741e:	d108      	bne.n	8007432 <HAL_TIM_PWM_Start+0x6a>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2241      	movs	r2, #65	; 0x41
 8007424:	5c9b      	ldrb	r3, [r3, r2]
 8007426:	b2db      	uxtb	r3, r3
 8007428:	3b01      	subs	r3, #1
 800742a:	1e5a      	subs	r2, r3, #1
 800742c:	4193      	sbcs	r3, r2
 800742e:	b2db      	uxtb	r3, r3
 8007430:	e013      	b.n	800745a <HAL_TIM_PWM_Start+0x92>
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	2b10      	cmp	r3, #16
 8007436:	d108      	bne.n	800744a <HAL_TIM_PWM_Start+0x82>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2242      	movs	r2, #66	; 0x42
 800743c:	5c9b      	ldrb	r3, [r3, r2]
 800743e:	b2db      	uxtb	r3, r3
 8007440:	3b01      	subs	r3, #1
 8007442:	1e5a      	subs	r2, r3, #1
 8007444:	4193      	sbcs	r3, r2
 8007446:	b2db      	uxtb	r3, r3
 8007448:	e007      	b.n	800745a <HAL_TIM_PWM_Start+0x92>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2243      	movs	r2, #67	; 0x43
 800744e:	5c9b      	ldrb	r3, [r3, r2]
 8007450:	b2db      	uxtb	r3, r3
 8007452:	3b01      	subs	r3, #1
 8007454:	1e5a      	subs	r2, r3, #1
 8007456:	4193      	sbcs	r3, r2
 8007458:	b2db      	uxtb	r3, r3
 800745a:	2b00      	cmp	r3, #0
 800745c:	d001      	beq.n	8007462 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e08b      	b.n	800757a <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d104      	bne.n	8007472 <HAL_TIM_PWM_Start+0xaa>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	223e      	movs	r2, #62	; 0x3e
 800746c:	2102      	movs	r1, #2
 800746e:	5499      	strb	r1, [r3, r2]
 8007470:	e023      	b.n	80074ba <HAL_TIM_PWM_Start+0xf2>
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	2b04      	cmp	r3, #4
 8007476:	d104      	bne.n	8007482 <HAL_TIM_PWM_Start+0xba>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	223f      	movs	r2, #63	; 0x3f
 800747c:	2102      	movs	r1, #2
 800747e:	5499      	strb	r1, [r3, r2]
 8007480:	e01b      	b.n	80074ba <HAL_TIM_PWM_Start+0xf2>
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	2b08      	cmp	r3, #8
 8007486:	d104      	bne.n	8007492 <HAL_TIM_PWM_Start+0xca>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2240      	movs	r2, #64	; 0x40
 800748c:	2102      	movs	r1, #2
 800748e:	5499      	strb	r1, [r3, r2]
 8007490:	e013      	b.n	80074ba <HAL_TIM_PWM_Start+0xf2>
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	2b0c      	cmp	r3, #12
 8007496:	d104      	bne.n	80074a2 <HAL_TIM_PWM_Start+0xda>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2241      	movs	r2, #65	; 0x41
 800749c:	2102      	movs	r1, #2
 800749e:	5499      	strb	r1, [r3, r2]
 80074a0:	e00b      	b.n	80074ba <HAL_TIM_PWM_Start+0xf2>
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	2b10      	cmp	r3, #16
 80074a6:	d104      	bne.n	80074b2 <HAL_TIM_PWM_Start+0xea>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2242      	movs	r2, #66	; 0x42
 80074ac:	2102      	movs	r1, #2
 80074ae:	5499      	strb	r1, [r3, r2]
 80074b0:	e003      	b.n	80074ba <HAL_TIM_PWM_Start+0xf2>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2243      	movs	r2, #67	; 0x43
 80074b6:	2102      	movs	r1, #2
 80074b8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	6839      	ldr	r1, [r7, #0]
 80074c0:	2201      	movs	r2, #1
 80074c2:	0018      	movs	r0, r3
 80074c4:	f000 fe00 	bl	80080c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a2d      	ldr	r2, [pc, #180]	; (8007584 <HAL_TIM_PWM_Start+0x1bc>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d00e      	beq.n	80074f0 <HAL_TIM_PWM_Start+0x128>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a2c      	ldr	r2, [pc, #176]	; (8007588 <HAL_TIM_PWM_Start+0x1c0>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d009      	beq.n	80074f0 <HAL_TIM_PWM_Start+0x128>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a2a      	ldr	r2, [pc, #168]	; (800758c <HAL_TIM_PWM_Start+0x1c4>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d004      	beq.n	80074f0 <HAL_TIM_PWM_Start+0x128>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a29      	ldr	r2, [pc, #164]	; (8007590 <HAL_TIM_PWM_Start+0x1c8>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d101      	bne.n	80074f4 <HAL_TIM_PWM_Start+0x12c>
 80074f0:	2301      	movs	r3, #1
 80074f2:	e000      	b.n	80074f6 <HAL_TIM_PWM_Start+0x12e>
 80074f4:	2300      	movs	r3, #0
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d008      	beq.n	800750c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2180      	movs	r1, #128	; 0x80
 8007506:	0209      	lsls	r1, r1, #8
 8007508:	430a      	orrs	r2, r1
 800750a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a1c      	ldr	r2, [pc, #112]	; (8007584 <HAL_TIM_PWM_Start+0x1bc>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d00f      	beq.n	8007536 <HAL_TIM_PWM_Start+0x16e>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	2380      	movs	r3, #128	; 0x80
 800751c:	05db      	lsls	r3, r3, #23
 800751e:	429a      	cmp	r2, r3
 8007520:	d009      	beq.n	8007536 <HAL_TIM_PWM_Start+0x16e>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a1b      	ldr	r2, [pc, #108]	; (8007594 <HAL_TIM_PWM_Start+0x1cc>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d004      	beq.n	8007536 <HAL_TIM_PWM_Start+0x16e>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a15      	ldr	r2, [pc, #84]	; (8007588 <HAL_TIM_PWM_Start+0x1c0>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d116      	bne.n	8007564 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	4a16      	ldr	r2, [pc, #88]	; (8007598 <HAL_TIM_PWM_Start+0x1d0>)
 800753e:	4013      	ands	r3, r2
 8007540:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2b06      	cmp	r3, #6
 8007546:	d016      	beq.n	8007576 <HAL_TIM_PWM_Start+0x1ae>
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	2380      	movs	r3, #128	; 0x80
 800754c:	025b      	lsls	r3, r3, #9
 800754e:	429a      	cmp	r2, r3
 8007550:	d011      	beq.n	8007576 <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2101      	movs	r1, #1
 800755e:	430a      	orrs	r2, r1
 8007560:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007562:	e008      	b.n	8007576 <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2101      	movs	r1, #1
 8007570:	430a      	orrs	r2, r1
 8007572:	601a      	str	r2, [r3, #0]
 8007574:	e000      	b.n	8007578 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007576:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8007578:	2300      	movs	r3, #0
}
 800757a:	0018      	movs	r0, r3
 800757c:	46bd      	mov	sp, r7
 800757e:	b004      	add	sp, #16
 8007580:	bd80      	pop	{r7, pc}
 8007582:	46c0      	nop			; (mov r8, r8)
 8007584:	40012c00 	.word	0x40012c00
 8007588:	40014000 	.word	0x40014000
 800758c:	40014400 	.word	0x40014400
 8007590:	40014800 	.word	0x40014800
 8007594:	40000400 	.word	0x40000400
 8007598:	00010007 	.word	0x00010007

0800759c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	223c      	movs	r2, #60	; 0x3c
 80075ac:	5c9b      	ldrb	r3, [r3, r2]
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d101      	bne.n	80075b6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80075b2:	2302      	movs	r3, #2
 80075b4:	e0df      	b.n	8007776 <HAL_TIM_PWM_ConfigChannel+0x1da>
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	223c      	movs	r2, #60	; 0x3c
 80075ba:	2101      	movs	r1, #1
 80075bc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2b14      	cmp	r3, #20
 80075c2:	d900      	bls.n	80075c6 <HAL_TIM_PWM_ConfigChannel+0x2a>
 80075c4:	e0d1      	b.n	800776a <HAL_TIM_PWM_ConfigChannel+0x1ce>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	009a      	lsls	r2, r3, #2
 80075ca:	4b6d      	ldr	r3, [pc, #436]	; (8007780 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 80075cc:	18d3      	adds	r3, r2, r3
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	68ba      	ldr	r2, [r7, #8]
 80075d8:	0011      	movs	r1, r2
 80075da:	0018      	movs	r0, r3
 80075dc:	f000 fa14 	bl	8007a08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	699a      	ldr	r2, [r3, #24]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2108      	movs	r1, #8
 80075ec:	430a      	orrs	r2, r1
 80075ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	699a      	ldr	r2, [r3, #24]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2104      	movs	r1, #4
 80075fc:	438a      	bics	r2, r1
 80075fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	6999      	ldr	r1, [r3, #24]
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	691a      	ldr	r2, [r3, #16]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	430a      	orrs	r2, r1
 8007610:	619a      	str	r2, [r3, #24]
      break;
 8007612:	e0ab      	b.n	800776c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	68ba      	ldr	r2, [r7, #8]
 800761a:	0011      	movs	r1, r2
 800761c:	0018      	movs	r0, r3
 800761e:	f000 fa7d 	bl	8007b1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	699a      	ldr	r2, [r3, #24]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2180      	movs	r1, #128	; 0x80
 800762e:	0109      	lsls	r1, r1, #4
 8007630:	430a      	orrs	r2, r1
 8007632:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	699a      	ldr	r2, [r3, #24]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4951      	ldr	r1, [pc, #324]	; (8007784 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8007640:	400a      	ands	r2, r1
 8007642:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	6999      	ldr	r1, [r3, #24]
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	021a      	lsls	r2, r3, #8
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	430a      	orrs	r2, r1
 8007656:	619a      	str	r2, [r3, #24]
      break;
 8007658:	e088      	b.n	800776c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68ba      	ldr	r2, [r7, #8]
 8007660:	0011      	movs	r1, r2
 8007662:	0018      	movs	r0, r3
 8007664:	f000 fade 	bl	8007c24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	69da      	ldr	r2, [r3, #28]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	2108      	movs	r1, #8
 8007674:	430a      	orrs	r2, r1
 8007676:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	69da      	ldr	r2, [r3, #28]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	2104      	movs	r1, #4
 8007684:	438a      	bics	r2, r1
 8007686:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	69d9      	ldr	r1, [r3, #28]
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	691a      	ldr	r2, [r3, #16]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	430a      	orrs	r2, r1
 8007698:	61da      	str	r2, [r3, #28]
      break;
 800769a:	e067      	b.n	800776c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	68ba      	ldr	r2, [r7, #8]
 80076a2:	0011      	movs	r1, r2
 80076a4:	0018      	movs	r0, r3
 80076a6:	f000 fb45 	bl	8007d34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	69da      	ldr	r2, [r3, #28]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2180      	movs	r1, #128	; 0x80
 80076b6:	0109      	lsls	r1, r1, #4
 80076b8:	430a      	orrs	r2, r1
 80076ba:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	69da      	ldr	r2, [r3, #28]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	492f      	ldr	r1, [pc, #188]	; (8007784 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80076c8:	400a      	ands	r2, r1
 80076ca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	69d9      	ldr	r1, [r3, #28]
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	021a      	lsls	r2, r3, #8
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	430a      	orrs	r2, r1
 80076de:	61da      	str	r2, [r3, #28]
      break;
 80076e0:	e044      	b.n	800776c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	68ba      	ldr	r2, [r7, #8]
 80076e8:	0011      	movs	r1, r2
 80076ea:	0018      	movs	r0, r3
 80076ec:	f000 fb8c 	bl	8007e08 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	2108      	movs	r1, #8
 80076fc:	430a      	orrs	r2, r1
 80076fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	2104      	movs	r1, #4
 800770c:	438a      	bics	r2, r1
 800770e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	691a      	ldr	r2, [r3, #16]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	430a      	orrs	r2, r1
 8007720:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007722:	e023      	b.n	800776c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	68ba      	ldr	r2, [r7, #8]
 800772a:	0011      	movs	r1, r2
 800772c:	0018      	movs	r0, r3
 800772e:	f000 fbcb 	bl	8007ec8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2180      	movs	r1, #128	; 0x80
 800773e:	0109      	lsls	r1, r1, #4
 8007740:	430a      	orrs	r2, r1
 8007742:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	490d      	ldr	r1, [pc, #52]	; (8007784 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8007750:	400a      	ands	r2, r1
 8007752:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	691b      	ldr	r3, [r3, #16]
 800775e:	021a      	lsls	r2, r3, #8
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	430a      	orrs	r2, r1
 8007766:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007768:	e000      	b.n	800776c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 800776a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	223c      	movs	r2, #60	; 0x3c
 8007770:	2100      	movs	r1, #0
 8007772:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007774:	2300      	movs	r3, #0
}
 8007776:	0018      	movs	r0, r3
 8007778:	46bd      	mov	sp, r7
 800777a:	b004      	add	sp, #16
 800777c:	bd80      	pop	{r7, pc}
 800777e:	46c0      	nop			; (mov r8, r8)
 8007780:	080099f0 	.word	0x080099f0
 8007784:	fffffbff 	.word	0xfffffbff

08007788 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	223c      	movs	r2, #60	; 0x3c
 8007796:	5c9b      	ldrb	r3, [r3, r2]
 8007798:	2b01      	cmp	r3, #1
 800779a:	d101      	bne.n	80077a0 <HAL_TIM_ConfigClockSource+0x18>
 800779c:	2302      	movs	r3, #2
 800779e:	e0ab      	b.n	80078f8 <HAL_TIM_ConfigClockSource+0x170>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	223c      	movs	r2, #60	; 0x3c
 80077a4:	2101      	movs	r1, #1
 80077a6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	223d      	movs	r2, #61	; 0x3d
 80077ac:	2102      	movs	r1, #2
 80077ae:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	4a51      	ldr	r2, [pc, #324]	; (8007900 <HAL_TIM_ConfigClockSource+0x178>)
 80077bc:	4013      	ands	r3, r2
 80077be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	4a50      	ldr	r2, [pc, #320]	; (8007904 <HAL_TIM_ConfigClockSource+0x17c>)
 80077c4:	4013      	ands	r3, r2
 80077c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68fa      	ldr	r2, [r7, #12]
 80077ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2b40      	cmp	r3, #64	; 0x40
 80077d6:	d100      	bne.n	80077da <HAL_TIM_ConfigClockSource+0x52>
 80077d8:	e06b      	b.n	80078b2 <HAL_TIM_ConfigClockSource+0x12a>
 80077da:	d80e      	bhi.n	80077fa <HAL_TIM_ConfigClockSource+0x72>
 80077dc:	2b10      	cmp	r3, #16
 80077de:	d100      	bne.n	80077e2 <HAL_TIM_ConfigClockSource+0x5a>
 80077e0:	e077      	b.n	80078d2 <HAL_TIM_ConfigClockSource+0x14a>
 80077e2:	d803      	bhi.n	80077ec <HAL_TIM_ConfigClockSource+0x64>
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d100      	bne.n	80077ea <HAL_TIM_ConfigClockSource+0x62>
 80077e8:	e073      	b.n	80078d2 <HAL_TIM_ConfigClockSource+0x14a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80077ea:	e07c      	b.n	80078e6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80077ec:	2b20      	cmp	r3, #32
 80077ee:	d100      	bne.n	80077f2 <HAL_TIM_ConfigClockSource+0x6a>
 80077f0:	e06f      	b.n	80078d2 <HAL_TIM_ConfigClockSource+0x14a>
 80077f2:	2b30      	cmp	r3, #48	; 0x30
 80077f4:	d100      	bne.n	80077f8 <HAL_TIM_ConfigClockSource+0x70>
 80077f6:	e06c      	b.n	80078d2 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 80077f8:	e075      	b.n	80078e6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80077fa:	2b70      	cmp	r3, #112	; 0x70
 80077fc:	d00e      	beq.n	800781c <HAL_TIM_ConfigClockSource+0x94>
 80077fe:	d804      	bhi.n	800780a <HAL_TIM_ConfigClockSource+0x82>
 8007800:	2b50      	cmp	r3, #80	; 0x50
 8007802:	d036      	beq.n	8007872 <HAL_TIM_ConfigClockSource+0xea>
 8007804:	2b60      	cmp	r3, #96	; 0x60
 8007806:	d044      	beq.n	8007892 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8007808:	e06d      	b.n	80078e6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800780a:	2280      	movs	r2, #128	; 0x80
 800780c:	0152      	lsls	r2, r2, #5
 800780e:	4293      	cmp	r3, r2
 8007810:	d068      	beq.n	80078e4 <HAL_TIM_ConfigClockSource+0x15c>
 8007812:	2280      	movs	r2, #128	; 0x80
 8007814:	0192      	lsls	r2, r2, #6
 8007816:	4293      	cmp	r3, r2
 8007818:	d017      	beq.n	800784a <HAL_TIM_ConfigClockSource+0xc2>
      break;
 800781a:	e064      	b.n	80078e6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6818      	ldr	r0, [r3, #0]
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	6899      	ldr	r1, [r3, #8]
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	685a      	ldr	r2, [r3, #4]
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	f000 fc2c 	bl	8008088 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2277      	movs	r2, #119	; 0x77
 800783c:	4313      	orrs	r3, r2
 800783e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	68fa      	ldr	r2, [r7, #12]
 8007846:	609a      	str	r2, [r3, #8]
      break;
 8007848:	e04d      	b.n	80078e6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6818      	ldr	r0, [r3, #0]
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	6899      	ldr	r1, [r3, #8]
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	685a      	ldr	r2, [r3, #4]
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	f000 fc15 	bl	8008088 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	689a      	ldr	r2, [r3, #8]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2180      	movs	r1, #128	; 0x80
 800786a:	01c9      	lsls	r1, r1, #7
 800786c:	430a      	orrs	r2, r1
 800786e:	609a      	str	r2, [r3, #8]
      break;
 8007870:	e039      	b.n	80078e6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6818      	ldr	r0, [r3, #0]
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	6859      	ldr	r1, [r3, #4]
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	001a      	movs	r2, r3
 8007880:	f000 fb86 	bl	8007f90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	2150      	movs	r1, #80	; 0x50
 800788a:	0018      	movs	r0, r3
 800788c:	f000 fbe0 	bl	8008050 <TIM_ITRx_SetConfig>
      break;
 8007890:	e029      	b.n	80078e6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6818      	ldr	r0, [r3, #0]
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	6859      	ldr	r1, [r3, #4]
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	001a      	movs	r2, r3
 80078a0:	f000 fba4 	bl	8007fec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2160      	movs	r1, #96	; 0x60
 80078aa:	0018      	movs	r0, r3
 80078ac:	f000 fbd0 	bl	8008050 <TIM_ITRx_SetConfig>
      break;
 80078b0:	e019      	b.n	80078e6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6818      	ldr	r0, [r3, #0]
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	6859      	ldr	r1, [r3, #4]
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	001a      	movs	r2, r3
 80078c0:	f000 fb66 	bl	8007f90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	2140      	movs	r1, #64	; 0x40
 80078ca:	0018      	movs	r0, r3
 80078cc:	f000 fbc0 	bl	8008050 <TIM_ITRx_SetConfig>
      break;
 80078d0:	e009      	b.n	80078e6 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	0019      	movs	r1, r3
 80078dc:	0010      	movs	r0, r2
 80078de:	f000 fbb7 	bl	8008050 <TIM_ITRx_SetConfig>
        break;
 80078e2:	e000      	b.n	80078e6 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 80078e4:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	223d      	movs	r2, #61	; 0x3d
 80078ea:	2101      	movs	r1, #1
 80078ec:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	223c      	movs	r2, #60	; 0x3c
 80078f2:	2100      	movs	r1, #0
 80078f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80078f6:	2300      	movs	r3, #0
}
 80078f8:	0018      	movs	r0, r3
 80078fa:	46bd      	mov	sp, r7
 80078fc:	b004      	add	sp, #16
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	ffceff88 	.word	0xffceff88
 8007904:	ffff00ff 	.word	0xffff00ff

08007908 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	4a34      	ldr	r2, [pc, #208]	; (80079ec <TIM_Base_SetConfig+0xe4>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d008      	beq.n	8007932 <TIM_Base_SetConfig+0x2a>
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	2380      	movs	r3, #128	; 0x80
 8007924:	05db      	lsls	r3, r3, #23
 8007926:	429a      	cmp	r2, r3
 8007928:	d003      	beq.n	8007932 <TIM_Base_SetConfig+0x2a>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a30      	ldr	r2, [pc, #192]	; (80079f0 <TIM_Base_SetConfig+0xe8>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d108      	bne.n	8007944 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2270      	movs	r2, #112	; 0x70
 8007936:	4393      	bics	r3, r2
 8007938:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	68fa      	ldr	r2, [r7, #12]
 8007940:	4313      	orrs	r3, r2
 8007942:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	4a29      	ldr	r2, [pc, #164]	; (80079ec <TIM_Base_SetConfig+0xe4>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d018      	beq.n	800797e <TIM_Base_SetConfig+0x76>
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	2380      	movs	r3, #128	; 0x80
 8007950:	05db      	lsls	r3, r3, #23
 8007952:	429a      	cmp	r2, r3
 8007954:	d013      	beq.n	800797e <TIM_Base_SetConfig+0x76>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4a25      	ldr	r2, [pc, #148]	; (80079f0 <TIM_Base_SetConfig+0xe8>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d00f      	beq.n	800797e <TIM_Base_SetConfig+0x76>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a24      	ldr	r2, [pc, #144]	; (80079f4 <TIM_Base_SetConfig+0xec>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d00b      	beq.n	800797e <TIM_Base_SetConfig+0x76>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4a23      	ldr	r2, [pc, #140]	; (80079f8 <TIM_Base_SetConfig+0xf0>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d007      	beq.n	800797e <TIM_Base_SetConfig+0x76>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4a22      	ldr	r2, [pc, #136]	; (80079fc <TIM_Base_SetConfig+0xf4>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d003      	beq.n	800797e <TIM_Base_SetConfig+0x76>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	4a21      	ldr	r2, [pc, #132]	; (8007a00 <TIM_Base_SetConfig+0xf8>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d108      	bne.n	8007990 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	4a20      	ldr	r2, [pc, #128]	; (8007a04 <TIM_Base_SetConfig+0xfc>)
 8007982:	4013      	ands	r3, r2
 8007984:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	68db      	ldr	r3, [r3, #12]
 800798a:	68fa      	ldr	r2, [r7, #12]
 800798c:	4313      	orrs	r3, r2
 800798e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2280      	movs	r2, #128	; 0x80
 8007994:	4393      	bics	r3, r2
 8007996:	001a      	movs	r2, r3
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	695b      	ldr	r3, [r3, #20]
 800799c:	4313      	orrs	r3, r2
 800799e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	689a      	ldr	r2, [r3, #8]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a0c      	ldr	r2, [pc, #48]	; (80079ec <TIM_Base_SetConfig+0xe4>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d00b      	beq.n	80079d6 <TIM_Base_SetConfig+0xce>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4a0d      	ldr	r2, [pc, #52]	; (80079f8 <TIM_Base_SetConfig+0xf0>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d007      	beq.n	80079d6 <TIM_Base_SetConfig+0xce>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4a0c      	ldr	r2, [pc, #48]	; (80079fc <TIM_Base_SetConfig+0xf4>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d003      	beq.n	80079d6 <TIM_Base_SetConfig+0xce>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a0b      	ldr	r2, [pc, #44]	; (8007a00 <TIM_Base_SetConfig+0xf8>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d103      	bne.n	80079de <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	691a      	ldr	r2, [r3, #16]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2201      	movs	r2, #1
 80079e2:	615a      	str	r2, [r3, #20]
}
 80079e4:	46c0      	nop			; (mov r8, r8)
 80079e6:	46bd      	mov	sp, r7
 80079e8:	b004      	add	sp, #16
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	40012c00 	.word	0x40012c00
 80079f0:	40000400 	.word	0x40000400
 80079f4:	40002000 	.word	0x40002000
 80079f8:	40014000 	.word	0x40014000
 80079fc:	40014400 	.word	0x40014400
 8007a00:	40014800 	.word	0x40014800
 8007a04:	fffffcff 	.word	0xfffffcff

08007a08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b086      	sub	sp, #24
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a1b      	ldr	r3, [r3, #32]
 8007a16:	2201      	movs	r2, #1
 8007a18:	4393      	bics	r3, r2
 8007a1a:	001a      	movs	r2, r3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6a1b      	ldr	r3, [r3, #32]
 8007a24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	699b      	ldr	r3, [r3, #24]
 8007a30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	4a32      	ldr	r2, [pc, #200]	; (8007b00 <TIM_OC1_SetConfig+0xf8>)
 8007a36:	4013      	ands	r3, r2
 8007a38:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2203      	movs	r2, #3
 8007a3e:	4393      	bics	r3, r2
 8007a40:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68fa      	ldr	r2, [r7, #12]
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	2202      	movs	r2, #2
 8007a50:	4393      	bics	r3, r2
 8007a52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	697a      	ldr	r2, [r7, #20]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a28      	ldr	r2, [pc, #160]	; (8007b04 <TIM_OC1_SetConfig+0xfc>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d00b      	beq.n	8007a7e <TIM_OC1_SetConfig+0x76>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a27      	ldr	r2, [pc, #156]	; (8007b08 <TIM_OC1_SetConfig+0x100>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d007      	beq.n	8007a7e <TIM_OC1_SetConfig+0x76>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a26      	ldr	r2, [pc, #152]	; (8007b0c <TIM_OC1_SetConfig+0x104>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d003      	beq.n	8007a7e <TIM_OC1_SetConfig+0x76>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4a25      	ldr	r2, [pc, #148]	; (8007b10 <TIM_OC1_SetConfig+0x108>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d10c      	bne.n	8007a98 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	2208      	movs	r2, #8
 8007a82:	4393      	bics	r3, r2
 8007a84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	68db      	ldr	r3, [r3, #12]
 8007a8a:	697a      	ldr	r2, [r7, #20]
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	2204      	movs	r2, #4
 8007a94:	4393      	bics	r3, r2
 8007a96:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4a1a      	ldr	r2, [pc, #104]	; (8007b04 <TIM_OC1_SetConfig+0xfc>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d00b      	beq.n	8007ab8 <TIM_OC1_SetConfig+0xb0>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4a19      	ldr	r2, [pc, #100]	; (8007b08 <TIM_OC1_SetConfig+0x100>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d007      	beq.n	8007ab8 <TIM_OC1_SetConfig+0xb0>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4a18      	ldr	r2, [pc, #96]	; (8007b0c <TIM_OC1_SetConfig+0x104>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d003      	beq.n	8007ab8 <TIM_OC1_SetConfig+0xb0>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4a17      	ldr	r2, [pc, #92]	; (8007b10 <TIM_OC1_SetConfig+0x108>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d111      	bne.n	8007adc <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	4a16      	ldr	r2, [pc, #88]	; (8007b14 <TIM_OC1_SetConfig+0x10c>)
 8007abc:	4013      	ands	r3, r2
 8007abe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	4a15      	ldr	r2, [pc, #84]	; (8007b18 <TIM_OC1_SetConfig+0x110>)
 8007ac4:	4013      	ands	r3, r2
 8007ac6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	695b      	ldr	r3, [r3, #20]
 8007acc:	693a      	ldr	r2, [r7, #16]
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	699b      	ldr	r3, [r3, #24]
 8007ad6:	693a      	ldr	r2, [r7, #16]
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	693a      	ldr	r2, [r7, #16]
 8007ae0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	685a      	ldr	r2, [r3, #4]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	697a      	ldr	r2, [r7, #20]
 8007af4:	621a      	str	r2, [r3, #32]
}
 8007af6:	46c0      	nop			; (mov r8, r8)
 8007af8:	46bd      	mov	sp, r7
 8007afa:	b006      	add	sp, #24
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	46c0      	nop			; (mov r8, r8)
 8007b00:	fffeff8f 	.word	0xfffeff8f
 8007b04:	40012c00 	.word	0x40012c00
 8007b08:	40014000 	.word	0x40014000
 8007b0c:	40014400 	.word	0x40014400
 8007b10:	40014800 	.word	0x40014800
 8007b14:	fffffeff 	.word	0xfffffeff
 8007b18:	fffffdff 	.word	0xfffffdff

08007b1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b086      	sub	sp, #24
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6a1b      	ldr	r3, [r3, #32]
 8007b2a:	2210      	movs	r2, #16
 8007b2c:	4393      	bics	r3, r2
 8007b2e:	001a      	movs	r2, r3
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6a1b      	ldr	r3, [r3, #32]
 8007b38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	699b      	ldr	r3, [r3, #24]
 8007b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	4a2e      	ldr	r2, [pc, #184]	; (8007c04 <TIM_OC2_SetConfig+0xe8>)
 8007b4a:	4013      	ands	r3, r2
 8007b4c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	4a2d      	ldr	r2, [pc, #180]	; (8007c08 <TIM_OC2_SetConfig+0xec>)
 8007b52:	4013      	ands	r3, r2
 8007b54:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	021b      	lsls	r3, r3, #8
 8007b5c:	68fa      	ldr	r2, [r7, #12]
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	2220      	movs	r2, #32
 8007b66:	4393      	bics	r3, r2
 8007b68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	011b      	lsls	r3, r3, #4
 8007b70:	697a      	ldr	r2, [r7, #20]
 8007b72:	4313      	orrs	r3, r2
 8007b74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4a24      	ldr	r2, [pc, #144]	; (8007c0c <TIM_OC2_SetConfig+0xf0>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d10d      	bne.n	8007b9a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	2280      	movs	r2, #128	; 0x80
 8007b82:	4393      	bics	r3, r2
 8007b84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	011b      	lsls	r3, r3, #4
 8007b8c:	697a      	ldr	r2, [r7, #20]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	2240      	movs	r2, #64	; 0x40
 8007b96:	4393      	bics	r3, r2
 8007b98:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4a1b      	ldr	r2, [pc, #108]	; (8007c0c <TIM_OC2_SetConfig+0xf0>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d00b      	beq.n	8007bba <TIM_OC2_SetConfig+0x9e>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4a1a      	ldr	r2, [pc, #104]	; (8007c10 <TIM_OC2_SetConfig+0xf4>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d007      	beq.n	8007bba <TIM_OC2_SetConfig+0x9e>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	4a19      	ldr	r2, [pc, #100]	; (8007c14 <TIM_OC2_SetConfig+0xf8>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d003      	beq.n	8007bba <TIM_OC2_SetConfig+0x9e>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	4a18      	ldr	r2, [pc, #96]	; (8007c18 <TIM_OC2_SetConfig+0xfc>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d113      	bne.n	8007be2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	4a17      	ldr	r2, [pc, #92]	; (8007c1c <TIM_OC2_SetConfig+0x100>)
 8007bbe:	4013      	ands	r3, r2
 8007bc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	4a16      	ldr	r2, [pc, #88]	; (8007c20 <TIM_OC2_SetConfig+0x104>)
 8007bc6:	4013      	ands	r3, r2
 8007bc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	695b      	ldr	r3, [r3, #20]
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	693a      	ldr	r2, [r7, #16]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	699b      	ldr	r3, [r3, #24]
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	693a      	ldr	r2, [r7, #16]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	693a      	ldr	r2, [r7, #16]
 8007be6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	68fa      	ldr	r2, [r7, #12]
 8007bec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	685a      	ldr	r2, [r3, #4]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	697a      	ldr	r2, [r7, #20]
 8007bfa:	621a      	str	r2, [r3, #32]
}
 8007bfc:	46c0      	nop			; (mov r8, r8)
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	b006      	add	sp, #24
 8007c02:	bd80      	pop	{r7, pc}
 8007c04:	feff8fff 	.word	0xfeff8fff
 8007c08:	fffffcff 	.word	0xfffffcff
 8007c0c:	40012c00 	.word	0x40012c00
 8007c10:	40014000 	.word	0x40014000
 8007c14:	40014400 	.word	0x40014400
 8007c18:	40014800 	.word	0x40014800
 8007c1c:	fffffbff 	.word	0xfffffbff
 8007c20:	fffff7ff 	.word	0xfffff7ff

08007c24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b086      	sub	sp, #24
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a1b      	ldr	r3, [r3, #32]
 8007c32:	4a35      	ldr	r2, [pc, #212]	; (8007d08 <TIM_OC3_SetConfig+0xe4>)
 8007c34:	401a      	ands	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6a1b      	ldr	r3, [r3, #32]
 8007c3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	69db      	ldr	r3, [r3, #28]
 8007c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	4a2f      	ldr	r2, [pc, #188]	; (8007d0c <TIM_OC3_SetConfig+0xe8>)
 8007c50:	4013      	ands	r3, r2
 8007c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2203      	movs	r2, #3
 8007c58:	4393      	bics	r3, r2
 8007c5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	68fa      	ldr	r2, [r7, #12]
 8007c62:	4313      	orrs	r3, r2
 8007c64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	4a29      	ldr	r2, [pc, #164]	; (8007d10 <TIM_OC3_SetConfig+0xec>)
 8007c6a:	4013      	ands	r3, r2
 8007c6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	021b      	lsls	r3, r3, #8
 8007c74:	697a      	ldr	r2, [r7, #20]
 8007c76:	4313      	orrs	r3, r2
 8007c78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4a25      	ldr	r2, [pc, #148]	; (8007d14 <TIM_OC3_SetConfig+0xf0>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d10d      	bne.n	8007c9e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	4a24      	ldr	r2, [pc, #144]	; (8007d18 <TIM_OC3_SetConfig+0xf4>)
 8007c86:	4013      	ands	r3, r2
 8007c88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	021b      	lsls	r3, r3, #8
 8007c90:	697a      	ldr	r2, [r7, #20]
 8007c92:	4313      	orrs	r3, r2
 8007c94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	4a20      	ldr	r2, [pc, #128]	; (8007d1c <TIM_OC3_SetConfig+0xf8>)
 8007c9a:	4013      	ands	r3, r2
 8007c9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	4a1c      	ldr	r2, [pc, #112]	; (8007d14 <TIM_OC3_SetConfig+0xf0>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d00b      	beq.n	8007cbe <TIM_OC3_SetConfig+0x9a>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	4a1d      	ldr	r2, [pc, #116]	; (8007d20 <TIM_OC3_SetConfig+0xfc>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d007      	beq.n	8007cbe <TIM_OC3_SetConfig+0x9a>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	4a1c      	ldr	r2, [pc, #112]	; (8007d24 <TIM_OC3_SetConfig+0x100>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d003      	beq.n	8007cbe <TIM_OC3_SetConfig+0x9a>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4a1b      	ldr	r2, [pc, #108]	; (8007d28 <TIM_OC3_SetConfig+0x104>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d113      	bne.n	8007ce6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	4a1a      	ldr	r2, [pc, #104]	; (8007d2c <TIM_OC3_SetConfig+0x108>)
 8007cc2:	4013      	ands	r3, r2
 8007cc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	4a19      	ldr	r2, [pc, #100]	; (8007d30 <TIM_OC3_SetConfig+0x10c>)
 8007cca:	4013      	ands	r3, r2
 8007ccc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	695b      	ldr	r3, [r3, #20]
 8007cd2:	011b      	lsls	r3, r3, #4
 8007cd4:	693a      	ldr	r2, [r7, #16]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	699b      	ldr	r3, [r3, #24]
 8007cde:	011b      	lsls	r3, r3, #4
 8007ce0:	693a      	ldr	r2, [r7, #16]
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	693a      	ldr	r2, [r7, #16]
 8007cea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	685a      	ldr	r2, [r3, #4]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	697a      	ldr	r2, [r7, #20]
 8007cfe:	621a      	str	r2, [r3, #32]
}
 8007d00:	46c0      	nop			; (mov r8, r8)
 8007d02:	46bd      	mov	sp, r7
 8007d04:	b006      	add	sp, #24
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	fffffeff 	.word	0xfffffeff
 8007d0c:	fffeff8f 	.word	0xfffeff8f
 8007d10:	fffffdff 	.word	0xfffffdff
 8007d14:	40012c00 	.word	0x40012c00
 8007d18:	fffff7ff 	.word	0xfffff7ff
 8007d1c:	fffffbff 	.word	0xfffffbff
 8007d20:	40014000 	.word	0x40014000
 8007d24:	40014400 	.word	0x40014400
 8007d28:	40014800 	.word	0x40014800
 8007d2c:	ffffefff 	.word	0xffffefff
 8007d30:	ffffdfff 	.word	0xffffdfff

08007d34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b086      	sub	sp, #24
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6a1b      	ldr	r3, [r3, #32]
 8007d42:	4a28      	ldr	r2, [pc, #160]	; (8007de4 <TIM_OC4_SetConfig+0xb0>)
 8007d44:	401a      	ands	r2, r3
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6a1b      	ldr	r3, [r3, #32]
 8007d4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	69db      	ldr	r3, [r3, #28]
 8007d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	4a22      	ldr	r2, [pc, #136]	; (8007de8 <TIM_OC4_SetConfig+0xb4>)
 8007d60:	4013      	ands	r3, r2
 8007d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	4a21      	ldr	r2, [pc, #132]	; (8007dec <TIM_OC4_SetConfig+0xb8>)
 8007d68:	4013      	ands	r3, r2
 8007d6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	021b      	lsls	r3, r3, #8
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	4a1d      	ldr	r2, [pc, #116]	; (8007df0 <TIM_OC4_SetConfig+0xbc>)
 8007d7c:	4013      	ands	r3, r2
 8007d7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	031b      	lsls	r3, r3, #12
 8007d86:	693a      	ldr	r2, [r7, #16]
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4a19      	ldr	r2, [pc, #100]	; (8007df4 <TIM_OC4_SetConfig+0xc0>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d00b      	beq.n	8007dac <TIM_OC4_SetConfig+0x78>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4a18      	ldr	r2, [pc, #96]	; (8007df8 <TIM_OC4_SetConfig+0xc4>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d007      	beq.n	8007dac <TIM_OC4_SetConfig+0x78>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	4a17      	ldr	r2, [pc, #92]	; (8007dfc <TIM_OC4_SetConfig+0xc8>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d003      	beq.n	8007dac <TIM_OC4_SetConfig+0x78>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	4a16      	ldr	r2, [pc, #88]	; (8007e00 <TIM_OC4_SetConfig+0xcc>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d109      	bne.n	8007dc0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	4a15      	ldr	r2, [pc, #84]	; (8007e04 <TIM_OC4_SetConfig+0xd0>)
 8007db0:	4013      	ands	r3, r2
 8007db2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	695b      	ldr	r3, [r3, #20]
 8007db8:	019b      	lsls	r3, r3, #6
 8007dba:	697a      	ldr	r2, [r7, #20]
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	697a      	ldr	r2, [r7, #20]
 8007dc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	68fa      	ldr	r2, [r7, #12]
 8007dca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	685a      	ldr	r2, [r3, #4]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	693a      	ldr	r2, [r7, #16]
 8007dd8:	621a      	str	r2, [r3, #32]
}
 8007dda:	46c0      	nop			; (mov r8, r8)
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	b006      	add	sp, #24
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	46c0      	nop			; (mov r8, r8)
 8007de4:	ffffefff 	.word	0xffffefff
 8007de8:	feff8fff 	.word	0xfeff8fff
 8007dec:	fffffcff 	.word	0xfffffcff
 8007df0:	ffffdfff 	.word	0xffffdfff
 8007df4:	40012c00 	.word	0x40012c00
 8007df8:	40014000 	.word	0x40014000
 8007dfc:	40014400 	.word	0x40014400
 8007e00:	40014800 	.word	0x40014800
 8007e04:	ffffbfff 	.word	0xffffbfff

08007e08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b086      	sub	sp, #24
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6a1b      	ldr	r3, [r3, #32]
 8007e16:	4a25      	ldr	r2, [pc, #148]	; (8007eac <TIM_OC5_SetConfig+0xa4>)
 8007e18:	401a      	ands	r2, r3
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6a1b      	ldr	r3, [r3, #32]
 8007e22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	4a1f      	ldr	r2, [pc, #124]	; (8007eb0 <TIM_OC5_SetConfig+0xa8>)
 8007e34:	4013      	ands	r3, r2
 8007e36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	68fa      	ldr	r2, [r7, #12]
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	4a1b      	ldr	r2, [pc, #108]	; (8007eb4 <TIM_OC5_SetConfig+0xac>)
 8007e46:	4013      	ands	r3, r2
 8007e48:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	041b      	lsls	r3, r3, #16
 8007e50:	693a      	ldr	r2, [r7, #16]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4a17      	ldr	r2, [pc, #92]	; (8007eb8 <TIM_OC5_SetConfig+0xb0>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d00b      	beq.n	8007e76 <TIM_OC5_SetConfig+0x6e>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4a16      	ldr	r2, [pc, #88]	; (8007ebc <TIM_OC5_SetConfig+0xb4>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d007      	beq.n	8007e76 <TIM_OC5_SetConfig+0x6e>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	4a15      	ldr	r2, [pc, #84]	; (8007ec0 <TIM_OC5_SetConfig+0xb8>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d003      	beq.n	8007e76 <TIM_OC5_SetConfig+0x6e>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	4a14      	ldr	r2, [pc, #80]	; (8007ec4 <TIM_OC5_SetConfig+0xbc>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d109      	bne.n	8007e8a <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	4a0c      	ldr	r2, [pc, #48]	; (8007eac <TIM_OC5_SetConfig+0xa4>)
 8007e7a:	4013      	ands	r3, r2
 8007e7c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	695b      	ldr	r3, [r3, #20]
 8007e82:	021b      	lsls	r3, r3, #8
 8007e84:	697a      	ldr	r2, [r7, #20]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	697a      	ldr	r2, [r7, #20]
 8007e8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	68fa      	ldr	r2, [r7, #12]
 8007e94:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	685a      	ldr	r2, [r3, #4]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	693a      	ldr	r2, [r7, #16]
 8007ea2:	621a      	str	r2, [r3, #32]
}
 8007ea4:	46c0      	nop			; (mov r8, r8)
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	b006      	add	sp, #24
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	fffeffff 	.word	0xfffeffff
 8007eb0:	fffeff8f 	.word	0xfffeff8f
 8007eb4:	fffdffff 	.word	0xfffdffff
 8007eb8:	40012c00 	.word	0x40012c00
 8007ebc:	40014000 	.word	0x40014000
 8007ec0:	40014400 	.word	0x40014400
 8007ec4:	40014800 	.word	0x40014800

08007ec8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b086      	sub	sp, #24
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6a1b      	ldr	r3, [r3, #32]
 8007ed6:	4a26      	ldr	r2, [pc, #152]	; (8007f70 <TIM_OC6_SetConfig+0xa8>)
 8007ed8:	401a      	ands	r2, r3
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a1b      	ldr	r3, [r3, #32]
 8007ee2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	4a20      	ldr	r2, [pc, #128]	; (8007f74 <TIM_OC6_SetConfig+0xac>)
 8007ef4:	4013      	ands	r3, r2
 8007ef6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	021b      	lsls	r3, r3, #8
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	4313      	orrs	r3, r2
 8007f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	4a1c      	ldr	r2, [pc, #112]	; (8007f78 <TIM_OC6_SetConfig+0xb0>)
 8007f08:	4013      	ands	r3, r2
 8007f0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	051b      	lsls	r3, r3, #20
 8007f12:	693a      	ldr	r2, [r7, #16]
 8007f14:	4313      	orrs	r3, r2
 8007f16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4a18      	ldr	r2, [pc, #96]	; (8007f7c <TIM_OC6_SetConfig+0xb4>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d00b      	beq.n	8007f38 <TIM_OC6_SetConfig+0x70>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4a17      	ldr	r2, [pc, #92]	; (8007f80 <TIM_OC6_SetConfig+0xb8>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d007      	beq.n	8007f38 <TIM_OC6_SetConfig+0x70>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4a16      	ldr	r2, [pc, #88]	; (8007f84 <TIM_OC6_SetConfig+0xbc>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d003      	beq.n	8007f38 <TIM_OC6_SetConfig+0x70>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4a15      	ldr	r2, [pc, #84]	; (8007f88 <TIM_OC6_SetConfig+0xc0>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d109      	bne.n	8007f4c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	4a14      	ldr	r2, [pc, #80]	; (8007f8c <TIM_OC6_SetConfig+0xc4>)
 8007f3c:	4013      	ands	r3, r2
 8007f3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	695b      	ldr	r3, [r3, #20]
 8007f44:	029b      	lsls	r3, r3, #10
 8007f46:	697a      	ldr	r2, [r7, #20]
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	697a      	ldr	r2, [r7, #20]
 8007f50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	68fa      	ldr	r2, [r7, #12]
 8007f56:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	685a      	ldr	r2, [r3, #4]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	693a      	ldr	r2, [r7, #16]
 8007f64:	621a      	str	r2, [r3, #32]
}
 8007f66:	46c0      	nop			; (mov r8, r8)
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	b006      	add	sp, #24
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	46c0      	nop			; (mov r8, r8)
 8007f70:	ffefffff 	.word	0xffefffff
 8007f74:	feff8fff 	.word	0xfeff8fff
 8007f78:	ffdfffff 	.word	0xffdfffff
 8007f7c:	40012c00 	.word	0x40012c00
 8007f80:	40014000 	.word	0x40014000
 8007f84:	40014400 	.word	0x40014400
 8007f88:	40014800 	.word	0x40014800
 8007f8c:	fffbffff 	.word	0xfffbffff

08007f90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b086      	sub	sp, #24
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6a1b      	ldr	r3, [r3, #32]
 8007fa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	6a1b      	ldr	r3, [r3, #32]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	4393      	bics	r3, r2
 8007faa:	001a      	movs	r2, r3
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	699b      	ldr	r3, [r3, #24]
 8007fb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	22f0      	movs	r2, #240	; 0xf0
 8007fba:	4393      	bics	r3, r2
 8007fbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	011b      	lsls	r3, r3, #4
 8007fc2:	693a      	ldr	r2, [r7, #16]
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	220a      	movs	r2, #10
 8007fcc:	4393      	bics	r3, r2
 8007fce:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007fd0:	697a      	ldr	r2, [r7, #20]
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	693a      	ldr	r2, [r7, #16]
 8007fdc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	697a      	ldr	r2, [r7, #20]
 8007fe2:	621a      	str	r2, [r3, #32]
}
 8007fe4:	46c0      	nop			; (mov r8, r8)
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	b006      	add	sp, #24
 8007fea:	bd80      	pop	{r7, pc}

08007fec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b086      	sub	sp, #24
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6a1b      	ldr	r3, [r3, #32]
 8007ffc:	2210      	movs	r2, #16
 8007ffe:	4393      	bics	r3, r2
 8008000:	001a      	movs	r2, r3
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	699b      	ldr	r3, [r3, #24]
 800800a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6a1b      	ldr	r3, [r3, #32]
 8008010:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	4a0d      	ldr	r2, [pc, #52]	; (800804c <TIM_TI2_ConfigInputStage+0x60>)
 8008016:	4013      	ands	r3, r2
 8008018:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	031b      	lsls	r3, r3, #12
 800801e:	697a      	ldr	r2, [r7, #20]
 8008020:	4313      	orrs	r3, r2
 8008022:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	22a0      	movs	r2, #160	; 0xa0
 8008028:	4393      	bics	r3, r2
 800802a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	011b      	lsls	r3, r3, #4
 8008030:	693a      	ldr	r2, [r7, #16]
 8008032:	4313      	orrs	r3, r2
 8008034:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	697a      	ldr	r2, [r7, #20]
 800803a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	693a      	ldr	r2, [r7, #16]
 8008040:	621a      	str	r2, [r3, #32]
}
 8008042:	46c0      	nop			; (mov r8, r8)
 8008044:	46bd      	mov	sp, r7
 8008046:	b006      	add	sp, #24
 8008048:	bd80      	pop	{r7, pc}
 800804a:	46c0      	nop			; (mov r8, r8)
 800804c:	ffff0fff 	.word	0xffff0fff

08008050 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	4a08      	ldr	r2, [pc, #32]	; (8008084 <TIM_ITRx_SetConfig+0x34>)
 8008064:	4013      	ands	r3, r2
 8008066:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008068:	683a      	ldr	r2, [r7, #0]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	4313      	orrs	r3, r2
 800806e:	2207      	movs	r2, #7
 8008070:	4313      	orrs	r3, r2
 8008072:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	68fa      	ldr	r2, [r7, #12]
 8008078:	609a      	str	r2, [r3, #8]
}
 800807a:	46c0      	nop			; (mov r8, r8)
 800807c:	46bd      	mov	sp, r7
 800807e:	b004      	add	sp, #16
 8008080:	bd80      	pop	{r7, pc}
 8008082:	46c0      	nop			; (mov r8, r8)
 8008084:	ffcfff8f 	.word	0xffcfff8f

08008088 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b086      	sub	sp, #24
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	607a      	str	r2, [r7, #4]
 8008094:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	4a09      	ldr	r2, [pc, #36]	; (80080c4 <TIM_ETR_SetConfig+0x3c>)
 80080a0:	4013      	ands	r3, r2
 80080a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	021a      	lsls	r2, r3, #8
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	431a      	orrs	r2, r3
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	697a      	ldr	r2, [r7, #20]
 80080b2:	4313      	orrs	r3, r2
 80080b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	697a      	ldr	r2, [r7, #20]
 80080ba:	609a      	str	r2, [r3, #8]
}
 80080bc:	46c0      	nop			; (mov r8, r8)
 80080be:	46bd      	mov	sp, r7
 80080c0:	b006      	add	sp, #24
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	ffff00ff 	.word	0xffff00ff

080080c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b086      	sub	sp, #24
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	221f      	movs	r2, #31
 80080d8:	4013      	ands	r3, r2
 80080da:	2201      	movs	r2, #1
 80080dc:	409a      	lsls	r2, r3
 80080de:	0013      	movs	r3, r2
 80080e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6a1b      	ldr	r3, [r3, #32]
 80080e6:	697a      	ldr	r2, [r7, #20]
 80080e8:	43d2      	mvns	r2, r2
 80080ea:	401a      	ands	r2, r3
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6a1a      	ldr	r2, [r3, #32]
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	211f      	movs	r1, #31
 80080f8:	400b      	ands	r3, r1
 80080fa:	6879      	ldr	r1, [r7, #4]
 80080fc:	4099      	lsls	r1, r3
 80080fe:	000b      	movs	r3, r1
 8008100:	431a      	orrs	r2, r3
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	621a      	str	r2, [r3, #32]
}
 8008106:	46c0      	nop			; (mov r8, r8)
 8008108:	46bd      	mov	sp, r7
 800810a:	b006      	add	sp, #24
 800810c:	bd80      	pop	{r7, pc}
	...

08008110 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	223c      	movs	r2, #60	; 0x3c
 800811e:	5c9b      	ldrb	r3, [r3, r2]
 8008120:	2b01      	cmp	r3, #1
 8008122:	d101      	bne.n	8008128 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008124:	2302      	movs	r3, #2
 8008126:	e055      	b.n	80081d4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	223c      	movs	r2, #60	; 0x3c
 800812c:	2101      	movs	r1, #1
 800812e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	223d      	movs	r2, #61	; 0x3d
 8008134:	2102      	movs	r1, #2
 8008136:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a23      	ldr	r2, [pc, #140]	; (80081dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d108      	bne.n	8008164 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	4a22      	ldr	r2, [pc, #136]	; (80081e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008156:	4013      	ands	r3, r2
 8008158:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	68fa      	ldr	r2, [r7, #12]
 8008160:	4313      	orrs	r3, r2
 8008162:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2270      	movs	r2, #112	; 0x70
 8008168:	4393      	bics	r3, r2
 800816a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	68fa      	ldr	r2, [r7, #12]
 8008172:	4313      	orrs	r3, r2
 8008174:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	68fa      	ldr	r2, [r7, #12]
 800817c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a16      	ldr	r2, [pc, #88]	; (80081dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d00f      	beq.n	80081a8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	2380      	movs	r3, #128	; 0x80
 800818e:	05db      	lsls	r3, r3, #23
 8008190:	429a      	cmp	r2, r3
 8008192:	d009      	beq.n	80081a8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a12      	ldr	r2, [pc, #72]	; (80081e4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d004      	beq.n	80081a8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a11      	ldr	r2, [pc, #68]	; (80081e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d10c      	bne.n	80081c2 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	2280      	movs	r2, #128	; 0x80
 80081ac:	4393      	bics	r3, r2
 80081ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	68ba      	ldr	r2, [r7, #8]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	68ba      	ldr	r2, [r7, #8]
 80081c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	223d      	movs	r2, #61	; 0x3d
 80081c6:	2101      	movs	r1, #1
 80081c8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	223c      	movs	r2, #60	; 0x3c
 80081ce:	2100      	movs	r1, #0
 80081d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80081d2:	2300      	movs	r3, #0
}
 80081d4:	0018      	movs	r0, r3
 80081d6:	46bd      	mov	sp, r7
 80081d8:	b004      	add	sp, #16
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	40012c00 	.word	0x40012c00
 80081e0:	ff0fffff 	.word	0xff0fffff
 80081e4:	40000400 	.word	0x40000400
 80081e8:	40014000 	.word	0x40014000

080081ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80081f6:	2300      	movs	r3, #0
 80081f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	223c      	movs	r2, #60	; 0x3c
 80081fe:	5c9b      	ldrb	r3, [r3, r2]
 8008200:	2b01      	cmp	r3, #1
 8008202:	d101      	bne.n	8008208 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008204:	2302      	movs	r3, #2
 8008206:	e079      	b.n	80082fc <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	223c      	movs	r2, #60	; 0x3c
 800820c:	2101      	movs	r1, #1
 800820e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	22ff      	movs	r2, #255	; 0xff
 8008214:	4393      	bics	r3, r2
 8008216:	001a      	movs	r2, r3
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	4313      	orrs	r3, r2
 800821e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	4a38      	ldr	r2, [pc, #224]	; (8008304 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8008224:	401a      	ands	r2, r3
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	4313      	orrs	r3, r2
 800822c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	4a35      	ldr	r2, [pc, #212]	; (8008308 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008232:	401a      	ands	r2, r3
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	4313      	orrs	r3, r2
 800823a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	4a33      	ldr	r2, [pc, #204]	; (800830c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008240:	401a      	ands	r2, r3
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4313      	orrs	r3, r2
 8008248:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	4a30      	ldr	r2, [pc, #192]	; (8008310 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800824e:	401a      	ands	r2, r3
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	691b      	ldr	r3, [r3, #16]
 8008254:	4313      	orrs	r3, r2
 8008256:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	4a2e      	ldr	r2, [pc, #184]	; (8008314 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800825c:	401a      	ands	r2, r3
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	695b      	ldr	r3, [r3, #20]
 8008262:	4313      	orrs	r3, r2
 8008264:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	4a2b      	ldr	r2, [pc, #172]	; (8008318 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800826a:	401a      	ands	r2, r3
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008270:	4313      	orrs	r3, r2
 8008272:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	4a29      	ldr	r2, [pc, #164]	; (800831c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8008278:	401a      	ands	r2, r3
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	699b      	ldr	r3, [r3, #24]
 800827e:	041b      	lsls	r3, r3, #16
 8008280:	4313      	orrs	r3, r2
 8008282:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a25      	ldr	r2, [pc, #148]	; (8008320 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d106      	bne.n	800829c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	4a24      	ldr	r2, [pc, #144]	; (8008324 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008292:	401a      	ands	r2, r3
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	69db      	ldr	r3, [r3, #28]
 8008298:	4313      	orrs	r3, r2
 800829a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a1f      	ldr	r2, [pc, #124]	; (8008320 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d121      	bne.n	80082ea <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	4a1f      	ldr	r2, [pc, #124]	; (8008328 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80082aa:	401a      	ands	r2, r3
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082b0:	051b      	lsls	r3, r3, #20
 80082b2:	4313      	orrs	r3, r2
 80082b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	4a1c      	ldr	r2, [pc, #112]	; (800832c <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 80082ba:	401a      	ands	r2, r3
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	6a1b      	ldr	r3, [r3, #32]
 80082c0:	4313      	orrs	r3, r2
 80082c2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	4a1a      	ldr	r2, [pc, #104]	; (8008330 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 80082c8:	401a      	ands	r2, r3
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ce:	4313      	orrs	r3, r2
 80082d0:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a12      	ldr	r2, [pc, #72]	; (8008320 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d106      	bne.n	80082ea <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	4a15      	ldr	r2, [pc, #84]	; (8008334 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 80082e0:	401a      	ands	r2, r3
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e6:	4313      	orrs	r3, r2
 80082e8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	223c      	movs	r2, #60	; 0x3c
 80082f6:	2100      	movs	r1, #0
 80082f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80082fa:	2300      	movs	r3, #0
}
 80082fc:	0018      	movs	r0, r3
 80082fe:	46bd      	mov	sp, r7
 8008300:	b004      	add	sp, #16
 8008302:	bd80      	pop	{r7, pc}
 8008304:	fffffcff 	.word	0xfffffcff
 8008308:	fffffbff 	.word	0xfffffbff
 800830c:	fffff7ff 	.word	0xfffff7ff
 8008310:	ffffefff 	.word	0xffffefff
 8008314:	ffffdfff 	.word	0xffffdfff
 8008318:	ffffbfff 	.word	0xffffbfff
 800831c:	fff0ffff 	.word	0xfff0ffff
 8008320:	40012c00 	.word	0x40012c00
 8008324:	efffffff 	.word	0xefffffff
 8008328:	ff0fffff 	.word	0xff0fffff
 800832c:	feffffff 	.word	0xfeffffff
 8008330:	fdffffff 	.word	0xfdffffff
 8008334:	dfffffff 	.word	0xdfffffff

08008338 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 8008338:	b580      	push	{r7, lr}
 800833a:	b08a      	sub	sp, #40	; 0x28
 800833c:	af00      	add	r7, sp, #0
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	60b9      	str	r1, [r7, #8]
 8008342:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	223c      	movs	r2, #60	; 0x3c
 8008348:	5c9b      	ldrb	r3, [r3, r2]
 800834a:	2b01      	cmp	r3, #1
 800834c:	d101      	bne.n	8008352 <HAL_TIMEx_ConfigBreakInput+0x1a>
 800834e:	2302      	movs	r3, #2
 8008350:	e08b      	b.n	800846a <HAL_TIMEx_ConfigBreakInput+0x132>
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	223c      	movs	r2, #60	; 0x3c
 8008356:	2101      	movs	r1, #1
 8008358:	5499      	strb	r1, [r3, r2]

  switch (sBreakInputConfig->Source)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	2b02      	cmp	r3, #2
 8008360:	d00d      	beq.n	800837e <HAL_TIMEx_ConfigBreakInput+0x46>
 8008362:	2b04      	cmp	r3, #4
 8008364:	d015      	beq.n	8008392 <HAL_TIMEx_ConfigBreakInput+0x5a>
 8008366:	2b01      	cmp	r3, #1
 8008368:	d11d      	bne.n	80083a6 <HAL_TIMEx_ConfigBreakInput+0x6e>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 800836a:	2301      	movs	r3, #1
 800836c:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 800836e:	2300      	movs	r3, #0
 8008370:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 8008372:	2380      	movs	r3, #128	; 0x80
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 8008378:	2309      	movs	r3, #9
 800837a:	61bb      	str	r3, [r7, #24]
      break;
 800837c:	e01c      	b.n	80083b8 <HAL_TIMEx_ConfigBreakInput+0x80>
    }
#if defined(COMP1) && defined(COMP2)
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 800837e:	2302      	movs	r3, #2
 8008380:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 8008382:	2301      	movs	r3, #1
 8008384:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 8008386:	2380      	movs	r3, #128	; 0x80
 8008388:	00db      	lsls	r3, r3, #3
 800838a:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 800838c:	230a      	movs	r3, #10
 800838e:	61bb      	str	r3, [r7, #24]
      break;
 8008390:	e012      	b.n	80083b8 <HAL_TIMEx_ConfigBreakInput+0x80>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 8008392:	2304      	movs	r3, #4
 8008394:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 8008396:	2302      	movs	r3, #2
 8008398:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 800839a:	2380      	movs	r3, #128	; 0x80
 800839c:	011b      	lsls	r3, r3, #4
 800839e:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 80083a0:	230b      	movs	r3, #11
 80083a2:	61bb      	str	r3, [r7, #24]
      break;
 80083a4:	e008      	b.n	80083b8 <HAL_TIMEx_ConfigBreakInput+0x80>
    }
#endif /* COMP3 */

    default:
    {
      bkin_enable_mask = 0U;
 80083a6:	2300      	movs	r3, #0
 80083a8:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_polarity_mask = 0U;
 80083aa:	2300      	movs	r3, #0
 80083ac:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = 0U;
 80083ae:	2300      	movs	r3, #0
 80083b0:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 80083b2:	2300      	movs	r3, #0
 80083b4:	61bb      	str	r3, [r7, #24]
      break;
 80083b6:	46c0      	nop			; (mov r8, r8)
    }
  }

  switch (BreakInput)
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d002      	beq.n	80083c4 <HAL_TIMEx_ConfigBreakInput+0x8c>
 80083be:	2b02      	cmp	r3, #2
 80083c0:	d027      	beq.n	8008412 <HAL_TIMEx_ConfigBreakInput+0xda>
      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
      break;
    }
    default:
      break;
 80083c2:	e04d      	b.n	8008460 <HAL_TIMEx_ConfigBreakInput+0x128>
      tmporx = htim->Instance->AF1;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083ca:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 80083cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ce:	43da      	mvns	r2, r3
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	4013      	ands	r3, r2
 80083d4:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	685a      	ldr	r2, [r3, #4]
 80083da:	69fb      	ldr	r3, [r7, #28]
 80083dc:	409a      	lsls	r2, r3
 80083de:	0013      	movs	r3, r2
 80083e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083e2:	4013      	ands	r3, r2
 80083e4:	697a      	ldr	r2, [r7, #20]
 80083e6:	4313      	orrs	r3, r2
 80083e8:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 80083ea:	6a3b      	ldr	r3, [r7, #32]
 80083ec:	43da      	mvns	r2, r3
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	4013      	ands	r3, r2
 80083f2:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	689a      	ldr	r2, [r3, #8]
 80083f8:	69bb      	ldr	r3, [r7, #24]
 80083fa:	409a      	lsls	r2, r3
 80083fc:	0013      	movs	r3, r2
 80083fe:	6a3a      	ldr	r2, [r7, #32]
 8008400:	4013      	ands	r3, r2
 8008402:	697a      	ldr	r2, [r7, #20]
 8008404:	4313      	orrs	r3, r2
 8008406:	617b      	str	r3, [r7, #20]
      htim->Instance->AF1 = tmporx;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	697a      	ldr	r2, [r7, #20]
 800840e:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 8008410:	e026      	b.n	8008460 <HAL_TIMEx_ConfigBreakInput+0x128>
      tmporx = htim->Instance->AF2;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008418:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 800841a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841c:	43da      	mvns	r2, r3
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	4013      	ands	r3, r2
 8008422:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	685a      	ldr	r2, [r3, #4]
 8008428:	69fb      	ldr	r3, [r7, #28]
 800842a:	409a      	lsls	r2, r3
 800842c:	0013      	movs	r3, r2
 800842e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008430:	4013      	ands	r3, r2
 8008432:	697a      	ldr	r2, [r7, #20]
 8008434:	4313      	orrs	r3, r2
 8008436:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 8008438:	6a3b      	ldr	r3, [r7, #32]
 800843a:	43da      	mvns	r2, r3
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	4013      	ands	r3, r2
 8008440:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	689a      	ldr	r2, [r3, #8]
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	409a      	lsls	r2, r3
 800844a:	0013      	movs	r3, r2
 800844c:	6a3a      	ldr	r2, [r7, #32]
 800844e:	4013      	ands	r3, r2
 8008450:	697a      	ldr	r2, [r7, #20]
 8008452:	4313      	orrs	r3, r2
 8008454:	617b      	str	r3, [r7, #20]
      htim->Instance->AF2 = tmporx;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	697a      	ldr	r2, [r7, #20]
 800845c:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800845e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	223c      	movs	r2, #60	; 0x3c
 8008464:	2100      	movs	r1, #0
 8008466:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	0018      	movs	r0, r3
 800846c:	46bd      	mov	sp, r7
 800846e:	b00a      	add	sp, #40	; 0x28
 8008470:	bd80      	pop	{r7, pc}
	...

08008474 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d101      	bne.n	8008486 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	e03f      	b.n	8008506 <HAL_USART_Init+0x92>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2259      	movs	r2, #89	; 0x59
 800848a:	5c9b      	ldrb	r3, [r3, r2]
 800848c:	b2db      	uxtb	r3, r3
 800848e:	2b00      	cmp	r3, #0
 8008490:	d107      	bne.n	80084a2 <HAL_USART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2258      	movs	r2, #88	; 0x58
 8008496:	2100      	movs	r1, #0
 8008498:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	0018      	movs	r0, r3
 800849e:	f7fa fabf 	bl	8002a20 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2259      	movs	r2, #89	; 0x59
 80084a6:	2102      	movs	r1, #2
 80084a8:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	2101      	movs	r1, #1
 80084b6:	438a      	bics	r2, r1
 80084b8:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	0018      	movs	r0, r3
 80084be:	f000 fad7 	bl	8008a70 <USART_SetConfig>
 80084c2:	0003      	movs	r3, r0
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d101      	bne.n	80084cc <HAL_USART_Init+0x58>
  {
    return HAL_ERROR;
 80084c8:	2301      	movs	r3, #1
 80084ca:	e01c      	b.n	8008506 <HAL_USART_Init+0x92>
  }

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	685a      	ldr	r2, [r3, #4]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	490e      	ldr	r1, [pc, #56]	; (8008510 <HAL_USART_Init+0x9c>)
 80084d8:	400a      	ands	r2, r1
 80084da:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	689a      	ldr	r2, [r3, #8]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	212a      	movs	r1, #42	; 0x2a
 80084e8:	438a      	bics	r2, r1
 80084ea:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2101      	movs	r1, #1
 80084f8:	430a      	orrs	r2, r1
 80084fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	0018      	movs	r0, r3
 8008500:	f000 fd66 	bl	8008fd0 <USART_CheckIdleState>
 8008504:	0003      	movs	r3, r0
}
 8008506:	0018      	movs	r0, r3
 8008508:	46bd      	mov	sp, r7
 800850a:	b002      	add	sp, #8
 800850c:	bd80      	pop	{r7, pc}
 800850e:	46c0      	nop			; (mov r8, r8)
 8008510:	ffffbfff 	.word	0xffffbfff

08008514 <HAL_USART_Transmit>:
  * @param  Size Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b08a      	sub	sp, #40	; 0x28
 8008518:	af02      	add	r7, sp, #8
 800851a:	60f8      	str	r0, [r7, #12]
 800851c:	60b9      	str	r1, [r7, #8]
 800851e:	603b      	str	r3, [r7, #0]
 8008520:	1dbb      	adds	r3, r7, #6
 8008522:	801a      	strh	r2, [r3, #0]
  uint8_t  *ptxdata8bits;
  uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2259      	movs	r2, #89	; 0x59
 8008528:	5c9b      	ldrb	r3, [r3, r2]
 800852a:	b2db      	uxtb	r3, r3
 800852c:	2b01      	cmp	r3, #1
 800852e:	d000      	beq.n	8008532 <HAL_USART_Transmit+0x1e>
 8008530:	e0a9      	b.n	8008686 <HAL_USART_Transmit+0x172>
  {
    if ((pTxData == NULL) || (Size == 0U))
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d003      	beq.n	8008540 <HAL_USART_Transmit+0x2c>
 8008538:	1dbb      	adds	r3, r7, #6
 800853a:	881b      	ldrh	r3, [r3, #0]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d101      	bne.n	8008544 <HAL_USART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008540:	2301      	movs	r3, #1
 8008542:	e0a1      	b.n	8008688 <HAL_USART_Transmit+0x174>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	689a      	ldr	r2, [r3, #8]
 8008548:	2380      	movs	r3, #128	; 0x80
 800854a:	015b      	lsls	r3, r3, #5
 800854c:	429a      	cmp	r2, r3
 800854e:	d109      	bne.n	8008564 <HAL_USART_Transmit+0x50>
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	691b      	ldr	r3, [r3, #16]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d105      	bne.n	8008564 <HAL_USART_Transmit+0x50>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	2201      	movs	r2, #1
 800855c:	4013      	ands	r3, r2
 800855e:	d001      	beq.n	8008564 <HAL_USART_Transmit+0x50>
      {
        return  HAL_ERROR;
 8008560:	2301      	movs	r3, #1
 8008562:	e091      	b.n	8008688 <HAL_USART_Transmit+0x174>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2258      	movs	r2, #88	; 0x58
 8008568:	5c9b      	ldrb	r3, [r3, r2]
 800856a:	2b01      	cmp	r3, #1
 800856c:	d101      	bne.n	8008572 <HAL_USART_Transmit+0x5e>
 800856e:	2302      	movs	r3, #2
 8008570:	e08a      	b.n	8008688 <HAL_USART_Transmit+0x174>
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2258      	movs	r2, #88	; 0x58
 8008576:	2101      	movs	r1, #1
 8008578:	5499      	strb	r1, [r3, r2]

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2200      	movs	r2, #0
 800857e:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2259      	movs	r2, #89	; 0x59
 8008584:	2112      	movs	r1, #18
 8008586:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008588:	f7fa fc78 	bl	8002e7c <HAL_GetTick>
 800858c:	0003      	movs	r3, r0
 800858e:	617b      	str	r3, [r7, #20]

    husart->TxXferSize = Size;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	1dba      	adds	r2, r7, #6
 8008594:	8812      	ldrh	r2, [r2, #0]
 8008596:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	1dba      	adds	r2, r7, #6
 800859c:	8812      	ldrh	r2, [r2, #0]
 800859e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	689a      	ldr	r2, [r3, #8]
 80085a4:	2380      	movs	r3, #128	; 0x80
 80085a6:	015b      	lsls	r3, r3, #5
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d108      	bne.n	80085be <HAL_USART_Transmit+0xaa>
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	691b      	ldr	r3, [r3, #16]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d104      	bne.n	80085be <HAL_USART_Transmit+0xaa>
    {
      ptxdata8bits  = NULL;
 80085b4:	2300      	movs	r3, #0
 80085b6:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (uint16_t *) pTxData;
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	61bb      	str	r3, [r7, #24]
 80085bc:	e003      	b.n	80085c6 <HAL_USART_Transmit+0xb2>
    }
    else
    {
      ptxdata8bits  = pTxData;
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 80085c2:	2300      	movs	r3, #0
 80085c4:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 80085c6:	e02a      	b.n	800861e <HAL_USART_Transmit+0x10a>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80085c8:	697a      	ldr	r2, [r7, #20]
 80085ca:	68f8      	ldr	r0, [r7, #12]
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	9300      	str	r3, [sp, #0]
 80085d0:	0013      	movs	r3, r2
 80085d2:	2200      	movs	r2, #0
 80085d4:	2180      	movs	r1, #128	; 0x80
 80085d6:	f000 fa16 	bl	8008a06 <USART_WaitOnFlagUntilTimeout>
 80085da:	1e03      	subs	r3, r0, #0
 80085dc:	d001      	beq.n	80085e2 <HAL_USART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 80085de:	2303      	movs	r3, #3
 80085e0:	e052      	b.n	8008688 <HAL_USART_Transmit+0x174>
      }
      if (ptxdata8bits == NULL)
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d10b      	bne.n	8008600 <HAL_USART_Transmit+0xec>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 80085e8:	69bb      	ldr	r3, [r7, #24]
 80085ea:	881b      	ldrh	r3, [r3, #0]
 80085ec:	001a      	movs	r2, r3
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	05d2      	lsls	r2, r2, #23
 80085f4:	0dd2      	lsrs	r2, r2, #23
 80085f6:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 80085f8:	69bb      	ldr	r3, [r7, #24]
 80085fa:	3302      	adds	r3, #2
 80085fc:	61bb      	str	r3, [r7, #24]
 80085fe:	e007      	b.n	8008610 <HAL_USART_Transmit+0xfc>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	781a      	ldrb	r2, [r3, #0]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	3301      	adds	r3, #1
 800860e:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008614:	b29b      	uxth	r3, r3
 8008616:	3b01      	subs	r3, #1
 8008618:	b29a      	uxth	r2, r3
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (husart->TxXferCount > 0U)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008622:	b29b      	uxth	r3, r3
 8008624:	2b00      	cmp	r3, #0
 8008626:	d1cf      	bne.n	80085c8 <HAL_USART_Transmit+0xb4>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008628:	697a      	ldr	r2, [r7, #20]
 800862a:	68f8      	ldr	r0, [r7, #12]
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	9300      	str	r3, [sp, #0]
 8008630:	0013      	movs	r3, r2
 8008632:	2200      	movs	r2, #0
 8008634:	2140      	movs	r1, #64	; 0x40
 8008636:	f000 f9e6 	bl	8008a06 <USART_WaitOnFlagUntilTimeout>
 800863a:	1e03      	subs	r3, r0, #0
 800863c:	d001      	beq.n	8008642 <HAL_USART_Transmit+0x12e>
    {
      return HAL_TIMEOUT;
 800863e:	2303      	movs	r3, #3
 8008640:	e022      	b.n	8008688 <HAL_USART_Transmit+0x174>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	2240      	movs	r2, #64	; 0x40
 8008648:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	2208      	movs	r2, #8
 8008650:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	699a      	ldr	r2, [r3, #24]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	2108      	movs	r1, #8
 800865e:	430a      	orrs	r2, r1
 8008660:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	699a      	ldr	r2, [r3, #24]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	2110      	movs	r1, #16
 800866e:	430a      	orrs	r2, r1
 8008670:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2259      	movs	r2, #89	; 0x59
 8008676:	2101      	movs	r1, #1
 8008678:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2258      	movs	r2, #88	; 0x58
 800867e:	2100      	movs	r1, #0
 8008680:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008682:	2300      	movs	r3, #0
 8008684:	e000      	b.n	8008688 <HAL_USART_Transmit+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008686:	2302      	movs	r3, #2
  }
}
 8008688:	0018      	movs	r0, r3
 800868a:	46bd      	mov	sp, r7
 800868c:	b008      	add	sp, #32
 800868e:	bd80      	pop	{r7, pc}

08008690 <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b088      	sub	sp, #32
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	69db      	ldr	r3, [r3, #28]
 800869e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_UDR));
 80086b0:	69fb      	ldr	r3, [r7, #28]
 80086b2:	4aab      	ldr	r2, [pc, #684]	; (8008960 <HAL_USART_IRQHandler+0x2d0>)
 80086b4:	4013      	ands	r3, r2
 80086b6:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d117      	bne.n	80086ee <HAL_USART_IRQHandler+0x5e>
  {
    /* USART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80086be:	69fb      	ldr	r3, [r7, #28]
 80086c0:	2220      	movs	r2, #32
 80086c2:	4013      	ands	r3, r2
 80086c4:	d013      	beq.n	80086ee <HAL_USART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	2220      	movs	r2, #32
 80086ca:	4013      	ands	r3, r2
 80086cc:	d104      	bne.n	80086d8 <HAL_USART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80086ce:	697a      	ldr	r2, [r7, #20]
 80086d0:	2380      	movs	r3, #128	; 0x80
 80086d2:	055b      	lsls	r3, r3, #21
 80086d4:	4013      	ands	r3, r2
 80086d6:	d00a      	beq.n	80086ee <HAL_USART_IRQHandler+0x5e>
    {
      if (husart->RxISR != NULL)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d100      	bne.n	80086e2 <HAL_USART_IRQHandler+0x52>
 80086e0:	e136      	b.n	8008950 <HAL_USART_IRQHandler+0x2c0>
      {
        husart->RxISR(husart);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	0010      	movs	r0, r2
 80086ea:	4798      	blx	r3
      }
      return;
 80086ec:	e130      	b.n	8008950 <HAL_USART_IRQHandler+0x2c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d100      	bne.n	80086f6 <HAL_USART_IRQHandler+0x66>
 80086f4:	e0eb      	b.n	80088ce <HAL_USART_IRQHandler+0x23e>
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	4a9a      	ldr	r2, [pc, #616]	; (8008964 <HAL_USART_IRQHandler+0x2d4>)
 80086fa:	4013      	ands	r3, r2
 80086fc:	d105      	bne.n	800870a <HAL_USART_IRQHandler+0x7a>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
 80086fe:	69ba      	ldr	r2, [r7, #24]
 8008700:	2390      	movs	r3, #144	; 0x90
 8008702:	005b      	lsls	r3, r3, #1
 8008704:	4013      	ands	r3, r2
 8008706:	d100      	bne.n	800870a <HAL_USART_IRQHandler+0x7a>
 8008708:	e0e1      	b.n	80088ce <HAL_USART_IRQHandler+0x23e>
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800870a:	69fb      	ldr	r3, [r7, #28]
 800870c:	2201      	movs	r2, #1
 800870e:	4013      	ands	r3, r2
 8008710:	d00e      	beq.n	8008730 <HAL_USART_IRQHandler+0xa0>
 8008712:	69ba      	ldr	r2, [r7, #24]
 8008714:	2380      	movs	r3, #128	; 0x80
 8008716:	005b      	lsls	r3, r3, #1
 8008718:	4013      	ands	r3, r2
 800871a:	d009      	beq.n	8008730 <HAL_USART_IRQHandler+0xa0>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	2201      	movs	r2, #1
 8008722:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008728:	2201      	movs	r2, #1
 800872a:	431a      	orrs	r2, r3
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	2202      	movs	r2, #2
 8008734:	4013      	ands	r3, r2
 8008736:	d00d      	beq.n	8008754 <HAL_USART_IRQHandler+0xc4>
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	2201      	movs	r2, #1
 800873c:	4013      	ands	r3, r2
 800873e:	d009      	beq.n	8008754 <HAL_USART_IRQHandler+0xc4>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	2202      	movs	r2, #2
 8008746:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800874c:	2204      	movs	r2, #4
 800874e:	431a      	orrs	r2, r3
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008754:	69fb      	ldr	r3, [r7, #28]
 8008756:	2204      	movs	r2, #4
 8008758:	4013      	ands	r3, r2
 800875a:	d00d      	beq.n	8008778 <HAL_USART_IRQHandler+0xe8>
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	2201      	movs	r2, #1
 8008760:	4013      	ands	r3, r2
 8008762:	d009      	beq.n	8008778 <HAL_USART_IRQHandler+0xe8>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2204      	movs	r2, #4
 800876a:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008770:	2202      	movs	r2, #2
 8008772:	431a      	orrs	r2, r3
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008778:	69fb      	ldr	r3, [r7, #28]
 800877a:	2208      	movs	r2, #8
 800877c:	4013      	ands	r3, r2
 800877e:	d011      	beq.n	80087a4 <HAL_USART_IRQHandler+0x114>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008780:	69bb      	ldr	r3, [r7, #24]
 8008782:	2220      	movs	r2, #32
 8008784:	4013      	ands	r3, r2
 8008786:	d103      	bne.n	8008790 <HAL_USART_IRQHandler+0x100>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	4a76      	ldr	r2, [pc, #472]	; (8008964 <HAL_USART_IRQHandler+0x2d4>)
 800878c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800878e:	d009      	beq.n	80087a4 <HAL_USART_IRQHandler+0x114>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2208      	movs	r2, #8
 8008796:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800879c:	2208      	movs	r2, #8
 800879e:	431a      	orrs	r2, r3
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART SPI slave underrun error interrupt occurred -------------------------*/
    if (((isrflags & USART_ISR_UDR) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80087a4:	69fa      	ldr	r2, [r7, #28]
 80087a6:	2380      	movs	r3, #128	; 0x80
 80087a8:	019b      	lsls	r3, r3, #6
 80087aa:	4013      	ands	r3, r2
 80087ac:	d01a      	beq.n	80087e4 <HAL_USART_IRQHandler+0x154>
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	2201      	movs	r2, #1
 80087b2:	4013      	ands	r3, r2
 80087b4:	d016      	beq.n	80087e4 <HAL_USART_IRQHandler+0x154>
    {
      /* Ignore SPI slave underrun errors when reception is going on */
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2259      	movs	r2, #89	; 0x59
 80087ba:	5c9b      	ldrb	r3, [r3, r2]
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	2b22      	cmp	r3, #34	; 0x22
 80087c0:	d105      	bne.n	80087ce <HAL_USART_IRQHandler+0x13e>
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2280      	movs	r2, #128	; 0x80
 80087c8:	0192      	lsls	r2, r2, #6
 80087ca:	621a      	str	r2, [r3, #32]
        return;
 80087cc:	e0c5      	b.n	800895a <HAL_USART_IRQHandler+0x2ca>
      }
      else
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	2280      	movs	r2, #128	; 0x80
 80087d4:	0192      	lsls	r2, r2, #6
 80087d6:	621a      	str	r2, [r3, #32]
        husart->ErrorCode |= HAL_USART_ERROR_UDR;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087dc:	2220      	movs	r2, #32
 80087de:	431a      	orrs	r2, r3
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d100      	bne.n	80087ee <HAL_USART_IRQHandler+0x15e>
 80087ec:	e0b2      	b.n	8008954 <HAL_USART_IRQHandler+0x2c4>
    {
      /* USART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80087ee:	69fb      	ldr	r3, [r7, #28]
 80087f0:	2220      	movs	r2, #32
 80087f2:	4013      	ands	r3, r2
 80087f4:	d011      	beq.n	800881a <HAL_USART_IRQHandler+0x18a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	2220      	movs	r2, #32
 80087fa:	4013      	ands	r3, r2
 80087fc:	d104      	bne.n	8008808 <HAL_USART_IRQHandler+0x178>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80087fe:	697a      	ldr	r2, [r7, #20]
 8008800:	2380      	movs	r3, #128	; 0x80
 8008802:	055b      	lsls	r3, r3, #21
 8008804:	4013      	ands	r3, r2
 8008806:	d008      	beq.n	800881a <HAL_USART_IRQHandler+0x18a>
      {
        if (husart->RxISR != NULL)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800880c:	2b00      	cmp	r3, #0
 800880e:	d004      	beq.n	800881a <HAL_USART_IRQHandler+0x18a>
        {
          husart->RxISR(husart);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	0010      	movs	r0, r2
 8008818:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800881e:	2208      	movs	r2, #8
 8008820:	4013      	ands	r3, r2
 8008822:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	689b      	ldr	r3, [r3, #8]
 800882a:	2240      	movs	r2, #64	; 0x40
 800882c:	4013      	ands	r3, r2
 800882e:	2b40      	cmp	r3, #64	; 0x40
 8008830:	d002      	beq.n	8008838 <HAL_USART_IRQHandler+0x1a8>
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d040      	beq.n	80088ba <HAL_USART_IRQHandler+0x22a>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	0018      	movs	r0, r3
 800883c:	f000 f8ae 	bl	800899c <USART_EndTransfer>

        /* Disable the USART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	689b      	ldr	r3, [r3, #8]
 8008846:	2240      	movs	r2, #64	; 0x40
 8008848:	4013      	ands	r3, r2
 800884a:	2b40      	cmp	r3, #64	; 0x40
 800884c:	d130      	bne.n	80088b0 <HAL_USART_IRQHandler+0x220>
        {
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	689a      	ldr	r2, [r3, #8]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2140      	movs	r1, #64	; 0x40
 800885a:	438a      	bics	r2, r1
 800885c:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008862:	2b00      	cmp	r3, #0
 8008864:	d008      	beq.n	8008878 <HAL_USART_IRQHandler+0x1e8>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800886a:	2200      	movs	r2, #0
 800886c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008872:	0018      	movs	r0, r3
 8008874:	f7fa ff0a 	bl	800368c <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800887c:	2b00      	cmp	r3, #0
 800887e:	d012      	beq.n	80088a6 <HAL_USART_IRQHandler+0x216>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008884:	4a38      	ldr	r2, [pc, #224]	; (8008968 <HAL_USART_IRQHandler+0x2d8>)
 8008886:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800888c:	0018      	movs	r0, r3
 800888e:	f7fa fefd 	bl	800368c <HAL_DMA_Abort_IT>
 8008892:	1e03      	subs	r3, r0, #0
 8008894:	d019      	beq.n	80088ca <HAL_USART_IRQHandler+0x23a>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800889a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088a0:	0018      	movs	r0, r3
 80088a2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80088a4:	e011      	b.n	80088ca <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	0018      	movs	r0, r3
 80088aa:	f000 f86f 	bl	800898c <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80088ae:	e00c      	b.n	80088ca <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	0018      	movs	r0, r3
 80088b4:	f000 f86a 	bl	800898c <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80088b8:	e007      	b.n	80088ca <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	0018      	movs	r0, r3
 80088be:	f000 f865 	bl	800898c <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }
    return;
 80088c8:	e044      	b.n	8008954 <HAL_USART_IRQHandler+0x2c4>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80088ca:	46c0      	nop			; (mov r8, r8)
    return;
 80088cc:	e042      	b.n	8008954 <HAL_USART_IRQHandler+0x2c4>

  } /* End if some error occurs */


  /* USART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80088ce:	69fb      	ldr	r3, [r7, #28]
 80088d0:	2280      	movs	r2, #128	; 0x80
 80088d2:	4013      	ands	r3, r2
 80088d4:	d012      	beq.n	80088fc <HAL_USART_IRQHandler+0x26c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80088d6:	69bb      	ldr	r3, [r7, #24]
 80088d8:	2280      	movs	r2, #128	; 0x80
 80088da:	4013      	ands	r3, r2
 80088dc:	d104      	bne.n	80088e8 <HAL_USART_IRQHandler+0x258>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80088de:	697a      	ldr	r2, [r7, #20]
 80088e0:	2380      	movs	r3, #128	; 0x80
 80088e2:	041b      	lsls	r3, r3, #16
 80088e4:	4013      	ands	r3, r2
 80088e6:	d009      	beq.n	80088fc <HAL_USART_IRQHandler+0x26c>
  {
    if (husart->TxISR != NULL)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d033      	beq.n	8008958 <HAL_USART_IRQHandler+0x2c8>
    {
      husart->TxISR(husart);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	0010      	movs	r0, r2
 80088f8:	4798      	blx	r3
    }
    return;
 80088fa:	e02d      	b.n	8008958 <HAL_USART_IRQHandler+0x2c8>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	2240      	movs	r2, #64	; 0x40
 8008900:	4013      	ands	r3, r2
 8008902:	d008      	beq.n	8008916 <HAL_USART_IRQHandler+0x286>
 8008904:	69bb      	ldr	r3, [r7, #24]
 8008906:	2240      	movs	r2, #64	; 0x40
 8008908:	4013      	ands	r3, r2
 800890a:	d004      	beq.n	8008916 <HAL_USART_IRQHandler+0x286>
  {
    USART_EndTransmit_IT(husart);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	0018      	movs	r0, r3
 8008910:	f000 fba2 	bl	8009058 <USART_EndTransmit_IT>
    return;
 8008914:	e021      	b.n	800895a <HAL_USART_IRQHandler+0x2ca>
  }

  /* USART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008916:	69fa      	ldr	r2, [r7, #28]
 8008918:	2380      	movs	r3, #128	; 0x80
 800891a:	041b      	lsls	r3, r3, #16
 800891c:	4013      	ands	r3, r2
 800891e:	d009      	beq.n	8008934 <HAL_USART_IRQHandler+0x2a4>
 8008920:	69ba      	ldr	r2, [r7, #24]
 8008922:	2380      	movs	r3, #128	; 0x80
 8008924:	05db      	lsls	r3, r3, #23
 8008926:	4013      	ands	r3, r2
 8008928:	d004      	beq.n	8008934 <HAL_USART_IRQHandler+0x2a4>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    husart->TxFifoEmptyCallback(husart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_USARTEx_TxFifoEmptyCallback(husart);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	0018      	movs	r0, r3
 800892e:	f000 fbde 	bl	80090ee <HAL_USARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 8008932:	e012      	b.n	800895a <HAL_USART_IRQHandler+0x2ca>
  }

  /* USART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008934:	69fa      	ldr	r2, [r7, #28]
 8008936:	2380      	movs	r3, #128	; 0x80
 8008938:	045b      	lsls	r3, r3, #17
 800893a:	4013      	ands	r3, r2
 800893c:	d00d      	beq.n	800895a <HAL_USART_IRQHandler+0x2ca>
 800893e:	69bb      	ldr	r3, [r7, #24]
 8008940:	2b00      	cmp	r3, #0
 8008942:	da0a      	bge.n	800895a <HAL_USART_IRQHandler+0x2ca>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    husart->RxFifoFullCallback(husart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_USARTEx_RxFifoFullCallback(husart);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	0018      	movs	r0, r3
 8008948:	f000 fbc9 	bl	80090de <HAL_USARTEx_RxFifoFullCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 800894c:	46c0      	nop			; (mov r8, r8)
 800894e:	e004      	b.n	800895a <HAL_USART_IRQHandler+0x2ca>
      return;
 8008950:	46c0      	nop			; (mov r8, r8)
 8008952:	e002      	b.n	800895a <HAL_USART_IRQHandler+0x2ca>
    return;
 8008954:	46c0      	nop			; (mov r8, r8)
 8008956:	e000      	b.n	800895a <HAL_USART_IRQHandler+0x2ca>
    return;
 8008958:	46c0      	nop			; (mov r8, r8)
  }
}
 800895a:	46bd      	mov	sp, r7
 800895c:	b008      	add	sp, #32
 800895e:	bd80      	pop	{r7, pc}
 8008960:	0000200f 	.word	0x0000200f
 8008964:	10000001 	.word	0x10000001
 8008968:	080089dd 	.word	0x080089dd

0800896c <HAL_USART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxCpltCallback can be implemented in the user file.
   */
}
 8008974:	46c0      	nop			; (mov r8, r8)
 8008976:	46bd      	mov	sp, r7
 8008978:	b002      	add	sp, #8
 800897a:	bd80      	pop	{r7, pc}

0800897c <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 8008984:	46c0      	nop			; (mov r8, r8)
 8008986:	46bd      	mov	sp, r7
 8008988:	b002      	add	sp, #8
 800898a:	bd80      	pop	{r7, pc}

0800898c <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 8008994:	46c0      	nop			; (mov r8, r8)
 8008996:	46bd      	mov	sp, r7
 8008998:	b002      	add	sp, #8
 800899a:	bd80      	pop	{r7, pc}

0800899c <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, RXFT, TXFT, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	681a      	ldr	r2, [r3, #0]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4909      	ldr	r1, [pc, #36]	; (80089d4 <USART_EndTransfer+0x38>)
 80089b0:	400a      	ands	r2, r1
 80089b2:	601a      	str	r2, [r3, #0]
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	689a      	ldr	r2, [r3, #8]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4906      	ldr	r1, [pc, #24]	; (80089d8 <USART_EndTransfer+0x3c>)
 80089c0:	400a      	ands	r2, r1
 80089c2:	609a      	str	r2, [r3, #8]

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2259      	movs	r2, #89	; 0x59
 80089c8:	2101      	movs	r1, #1
 80089ca:	5499      	strb	r1, [r3, r2]
}
 80089cc:	46c0      	nop			; (mov r8, r8)
 80089ce:	46bd      	mov	sp, r7
 80089d0:	b002      	add	sp, #8
 80089d2:	bd80      	pop	{r7, pc}
 80089d4:	fffffe1f 	.word	0xfffffe1f
 80089d8:	ef7ffffe 	.word	0xef7ffffe

080089dc <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e8:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2200      	movs	r2, #0
 80089ee:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2200      	movs	r2, #0
 80089f4:	85da      	strh	r2, [r3, #46]	; 0x2e
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	0018      	movs	r0, r3
 80089fa:	f7ff ffc7 	bl	800898c <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 80089fe:	46c0      	nop			; (mov r8, r8)
 8008a00:	46bd      	mov	sp, r7
 8008a02:	b004      	add	sp, #16
 8008a04:	bd80      	pop	{r7, pc}

08008a06 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8008a06:	b580      	push	{r7, lr}
 8008a08:	b084      	sub	sp, #16
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	60f8      	str	r0, [r7, #12]
 8008a0e:	60b9      	str	r1, [r7, #8]
 8008a10:	603b      	str	r3, [r7, #0]
 8008a12:	1dfb      	adds	r3, r7, #7
 8008a14:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8008a16:	e017      	b.n	8008a48 <USART_WaitOnFlagUntilTimeout+0x42>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a18:	69bb      	ldr	r3, [r7, #24]
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	d014      	beq.n	8008a48 <USART_WaitOnFlagUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a1e:	f7fa fa2d 	bl	8002e7c <HAL_GetTick>
 8008a22:	0002      	movs	r2, r0
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	1ad3      	subs	r3, r2, r3
 8008a28:	69ba      	ldr	r2, [r7, #24]
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d302      	bcc.n	8008a34 <USART_WaitOnFlagUntilTimeout+0x2e>
 8008a2e:	69bb      	ldr	r3, [r7, #24]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d109      	bne.n	8008a48 <USART_WaitOnFlagUntilTimeout+0x42>
      {
        husart->State = HAL_USART_STATE_READY;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2259      	movs	r2, #89	; 0x59
 8008a38:	2101      	movs	r1, #1
 8008a3a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2258      	movs	r2, #88	; 0x58
 8008a40:	2100      	movs	r1, #0
 8008a42:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008a44:	2303      	movs	r3, #3
 8008a46:	e00f      	b.n	8008a68 <USART_WaitOnFlagUntilTimeout+0x62>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	69db      	ldr	r3, [r3, #28]
 8008a4e:	68ba      	ldr	r2, [r7, #8]
 8008a50:	4013      	ands	r3, r2
 8008a52:	68ba      	ldr	r2, [r7, #8]
 8008a54:	1ad3      	subs	r3, r2, r3
 8008a56:	425a      	negs	r2, r3
 8008a58:	4153      	adcs	r3, r2
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	001a      	movs	r2, r3
 8008a5e:	1dfb      	adds	r3, r7, #7
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d0d8      	beq.n	8008a18 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008a66:	2300      	movs	r3, #0
}
 8008a68:	0018      	movs	r0, r3
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	b004      	add	sp, #16
 8008a6e:	bd80      	pop	{r7, pc}

08008a70 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b088      	sub	sp, #32
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8008a78:	231e      	movs	r3, #30
 8008a7a:	18fb      	adds	r3, r7, r3
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8008a80:	2300      	movs	r3, #0
 8008a82:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	689a      	ldr	r2, [r3, #8]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	691b      	ldr	r3, [r3, #16]
 8008a8c:	431a      	orrs	r2, r3
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	695b      	ldr	r3, [r3, #20]
 8008a92:	4313      	orrs	r3, r2
 8008a94:	2280      	movs	r2, #128	; 0x80
 8008a96:	0212      	lsls	r2, r2, #8
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4ab6      	ldr	r2, [pc, #728]	; (8008d7c <USART_SetConfig+0x30c>)
 8008aa4:	4013      	ands	r3, r2
 8008aa6:	0019      	movs	r1, r3
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	697a      	ldr	r2, [r7, #20]
 8008aae:	430a      	orrs	r2, r1
 8008ab0:	601a      	str	r2, [r3, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8008ab2:	2380      	movs	r3, #128	; 0x80
 8008ab4:	011b      	lsls	r3, r3, #4
 8008ab6:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6a1b      	ldr	r3, [r3, #32]
 8008abc:	697a      	ldr	r2, [r7, #20]
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	699a      	ldr	r2, [r3, #24]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	69db      	ldr	r3, [r3, #28]
 8008aca:	4313      	orrs	r3, r2
 8008acc:	697a      	ldr	r2, [r7, #20]
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	68db      	ldr	r3, [r3, #12]
 8008ad6:	697a      	ldr	r2, [r7, #20]
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	4aa7      	ldr	r2, [pc, #668]	; (8008d80 <USART_SetConfig+0x310>)
 8008ae4:	4013      	ands	r3, r2
 8008ae6:	0019      	movs	r1, r3
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	697a      	ldr	r2, [r7, #20]
 8008aee:	430a      	orrs	r2, r1
 8008af0:	605a      	str	r2, [r3, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af8:	220f      	movs	r2, #15
 8008afa:	4393      	bics	r3, r2
 8008afc:	0019      	movs	r1, r3
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	430a      	orrs	r2, r1
 8008b08:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a9d      	ldr	r2, [pc, #628]	; (8008d84 <USART_SetConfig+0x314>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d125      	bne.n	8008b60 <USART_SetConfig+0xf0>
 8008b14:	4b9c      	ldr	r3, [pc, #624]	; (8008d88 <USART_SetConfig+0x318>)
 8008b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b18:	2203      	movs	r2, #3
 8008b1a:	4013      	ands	r3, r2
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d00f      	beq.n	8008b40 <USART_SetConfig+0xd0>
 8008b20:	d304      	bcc.n	8008b2c <USART_SetConfig+0xbc>
 8008b22:	2b02      	cmp	r3, #2
 8008b24:	d007      	beq.n	8008b36 <USART_SetConfig+0xc6>
 8008b26:	2b03      	cmp	r3, #3
 8008b28:	d00f      	beq.n	8008b4a <USART_SetConfig+0xda>
 8008b2a:	e013      	b.n	8008b54 <USART_SetConfig+0xe4>
 8008b2c:	231f      	movs	r3, #31
 8008b2e:	18fb      	adds	r3, r7, r3
 8008b30:	2200      	movs	r2, #0
 8008b32:	701a      	strb	r2, [r3, #0]
 8008b34:	e05a      	b.n	8008bec <USART_SetConfig+0x17c>
 8008b36:	231f      	movs	r3, #31
 8008b38:	18fb      	adds	r3, r7, r3
 8008b3a:	2202      	movs	r2, #2
 8008b3c:	701a      	strb	r2, [r3, #0]
 8008b3e:	e055      	b.n	8008bec <USART_SetConfig+0x17c>
 8008b40:	231f      	movs	r3, #31
 8008b42:	18fb      	adds	r3, r7, r3
 8008b44:	2204      	movs	r2, #4
 8008b46:	701a      	strb	r2, [r3, #0]
 8008b48:	e050      	b.n	8008bec <USART_SetConfig+0x17c>
 8008b4a:	231f      	movs	r3, #31
 8008b4c:	18fb      	adds	r3, r7, r3
 8008b4e:	2208      	movs	r2, #8
 8008b50:	701a      	strb	r2, [r3, #0]
 8008b52:	e04b      	b.n	8008bec <USART_SetConfig+0x17c>
 8008b54:	231f      	movs	r3, #31
 8008b56:	18fb      	adds	r3, r7, r3
 8008b58:	2210      	movs	r2, #16
 8008b5a:	701a      	strb	r2, [r3, #0]
 8008b5c:	46c0      	nop			; (mov r8, r8)
 8008b5e:	e045      	b.n	8008bec <USART_SetConfig+0x17c>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a89      	ldr	r2, [pc, #548]	; (8008d8c <USART_SetConfig+0x31c>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d128      	bne.n	8008bbc <USART_SetConfig+0x14c>
 8008b6a:	4b87      	ldr	r3, [pc, #540]	; (8008d88 <USART_SetConfig+0x318>)
 8008b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b6e:	220c      	movs	r2, #12
 8008b70:	4013      	ands	r3, r2
 8008b72:	2b04      	cmp	r3, #4
 8008b74:	d012      	beq.n	8008b9c <USART_SetConfig+0x12c>
 8008b76:	d802      	bhi.n	8008b7e <USART_SetConfig+0x10e>
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d005      	beq.n	8008b88 <USART_SetConfig+0x118>
 8008b7c:	e018      	b.n	8008bb0 <USART_SetConfig+0x140>
 8008b7e:	2b08      	cmp	r3, #8
 8008b80:	d007      	beq.n	8008b92 <USART_SetConfig+0x122>
 8008b82:	2b0c      	cmp	r3, #12
 8008b84:	d00f      	beq.n	8008ba6 <USART_SetConfig+0x136>
 8008b86:	e013      	b.n	8008bb0 <USART_SetConfig+0x140>
 8008b88:	231f      	movs	r3, #31
 8008b8a:	18fb      	adds	r3, r7, r3
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	701a      	strb	r2, [r3, #0]
 8008b90:	e02c      	b.n	8008bec <USART_SetConfig+0x17c>
 8008b92:	231f      	movs	r3, #31
 8008b94:	18fb      	adds	r3, r7, r3
 8008b96:	2202      	movs	r2, #2
 8008b98:	701a      	strb	r2, [r3, #0]
 8008b9a:	e027      	b.n	8008bec <USART_SetConfig+0x17c>
 8008b9c:	231f      	movs	r3, #31
 8008b9e:	18fb      	adds	r3, r7, r3
 8008ba0:	2204      	movs	r2, #4
 8008ba2:	701a      	strb	r2, [r3, #0]
 8008ba4:	e022      	b.n	8008bec <USART_SetConfig+0x17c>
 8008ba6:	231f      	movs	r3, #31
 8008ba8:	18fb      	adds	r3, r7, r3
 8008baa:	2208      	movs	r2, #8
 8008bac:	701a      	strb	r2, [r3, #0]
 8008bae:	e01d      	b.n	8008bec <USART_SetConfig+0x17c>
 8008bb0:	231f      	movs	r3, #31
 8008bb2:	18fb      	adds	r3, r7, r3
 8008bb4:	2210      	movs	r2, #16
 8008bb6:	701a      	strb	r2, [r3, #0]
 8008bb8:	46c0      	nop			; (mov r8, r8)
 8008bba:	e017      	b.n	8008bec <USART_SetConfig+0x17c>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a73      	ldr	r2, [pc, #460]	; (8008d90 <USART_SetConfig+0x320>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d104      	bne.n	8008bd0 <USART_SetConfig+0x160>
 8008bc6:	231f      	movs	r3, #31
 8008bc8:	18fb      	adds	r3, r7, r3
 8008bca:	2200      	movs	r2, #0
 8008bcc:	701a      	strb	r2, [r3, #0]
 8008bce:	e00d      	b.n	8008bec <USART_SetConfig+0x17c>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a6f      	ldr	r2, [pc, #444]	; (8008d94 <USART_SetConfig+0x324>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d104      	bne.n	8008be4 <USART_SetConfig+0x174>
 8008bda:	231f      	movs	r3, #31
 8008bdc:	18fb      	adds	r3, r7, r3
 8008bde:	2200      	movs	r2, #0
 8008be0:	701a      	strb	r2, [r3, #0]
 8008be2:	e003      	b.n	8008bec <USART_SetConfig+0x17c>
 8008be4:	231f      	movs	r3, #31
 8008be6:	18fb      	adds	r3, r7, r3
 8008be8:	2210      	movs	r2, #16
 8008bea:	701a      	strb	r2, [r3, #0]

  switch (clocksource)
 8008bec:	231f      	movs	r3, #31
 8008bee:	18fb      	adds	r3, r7, r3
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	2b02      	cmp	r3, #2
 8008bf4:	d100      	bne.n	8008bf8 <USART_SetConfig+0x188>
 8008bf6:	e06b      	b.n	8008cd0 <USART_SetConfig+0x260>
 8008bf8:	dc02      	bgt.n	8008c00 <USART_SetConfig+0x190>
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d007      	beq.n	8008c0e <USART_SetConfig+0x19e>
 8008bfe:	e1a4      	b.n	8008f4a <USART_SetConfig+0x4da>
 8008c00:	2b04      	cmp	r3, #4
 8008c02:	d100      	bne.n	8008c06 <USART_SetConfig+0x196>
 8008c04:	e0e0      	b.n	8008dc8 <USART_SetConfig+0x358>
 8008c06:	2b08      	cmp	r3, #8
 8008c08:	d100      	bne.n	8008c0c <USART_SetConfig+0x19c>
 8008c0a:	e13e      	b.n	8008e8a <USART_SetConfig+0x41a>
 8008c0c:	e19d      	b.n	8008f4a <USART_SetConfig+0x4da>
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8008c0e:	f7fc fe2b 	bl	8005868 <HAL_RCC_GetPCLK1Freq>
 8008c12:	0003      	movs	r3, r0
 8008c14:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d044      	beq.n	8008ca8 <USART_SetConfig+0x238>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d03e      	beq.n	8008ca4 <USART_SetConfig+0x234>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2a:	2b02      	cmp	r3, #2
 8008c2c:	d038      	beq.n	8008ca0 <USART_SetConfig+0x230>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c32:	2b03      	cmp	r3, #3
 8008c34:	d032      	beq.n	8008c9c <USART_SetConfig+0x22c>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c3a:	2b04      	cmp	r3, #4
 8008c3c:	d02c      	beq.n	8008c98 <USART_SetConfig+0x228>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c42:	2b05      	cmp	r3, #5
 8008c44:	d026      	beq.n	8008c94 <USART_SetConfig+0x224>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c4a:	2b06      	cmp	r3, #6
 8008c4c:	d020      	beq.n	8008c90 <USART_SetConfig+0x220>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c52:	2b07      	cmp	r3, #7
 8008c54:	d01a      	beq.n	8008c8c <USART_SetConfig+0x21c>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c5a:	2b08      	cmp	r3, #8
 8008c5c:	d014      	beq.n	8008c88 <USART_SetConfig+0x218>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c62:	2b09      	cmp	r3, #9
 8008c64:	d00e      	beq.n	8008c84 <USART_SetConfig+0x214>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c6a:	2b0a      	cmp	r3, #10
 8008c6c:	d008      	beq.n	8008c80 <USART_SetConfig+0x210>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c72:	2b0b      	cmp	r3, #11
 8008c74:	d102      	bne.n	8008c7c <USART_SetConfig+0x20c>
 8008c76:	2380      	movs	r3, #128	; 0x80
 8008c78:	005b      	lsls	r3, r3, #1
 8008c7a:	e016      	b.n	8008caa <USART_SetConfig+0x23a>
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	e014      	b.n	8008caa <USART_SetConfig+0x23a>
 8008c80:	2380      	movs	r3, #128	; 0x80
 8008c82:	e012      	b.n	8008caa <USART_SetConfig+0x23a>
 8008c84:	2340      	movs	r3, #64	; 0x40
 8008c86:	e010      	b.n	8008caa <USART_SetConfig+0x23a>
 8008c88:	2320      	movs	r3, #32
 8008c8a:	e00e      	b.n	8008caa <USART_SetConfig+0x23a>
 8008c8c:	2310      	movs	r3, #16
 8008c8e:	e00c      	b.n	8008caa <USART_SetConfig+0x23a>
 8008c90:	230c      	movs	r3, #12
 8008c92:	e00a      	b.n	8008caa <USART_SetConfig+0x23a>
 8008c94:	230a      	movs	r3, #10
 8008c96:	e008      	b.n	8008caa <USART_SetConfig+0x23a>
 8008c98:	2308      	movs	r3, #8
 8008c9a:	e006      	b.n	8008caa <USART_SetConfig+0x23a>
 8008c9c:	2306      	movs	r3, #6
 8008c9e:	e004      	b.n	8008caa <USART_SetConfig+0x23a>
 8008ca0:	2304      	movs	r3, #4
 8008ca2:	e002      	b.n	8008caa <USART_SetConfig+0x23a>
 8008ca4:	2302      	movs	r3, #2
 8008ca6:	e000      	b.n	8008caa <USART_SetConfig+0x23a>
 8008ca8:	2301      	movs	r3, #1
 8008caa:	0019      	movs	r1, r3
 8008cac:	6938      	ldr	r0, [r7, #16]
 8008cae:	f7f7 fa29 	bl	8000104 <__udivsi3>
 8008cb2:	0003      	movs	r3, r0
 8008cb4:	005a      	lsls	r2, r3, #1
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	085b      	lsrs	r3, r3, #1
 8008cbc:	18d2      	adds	r2, r2, r3
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	0019      	movs	r1, r3
 8008cc4:	0010      	movs	r0, r2
 8008cc6:	f7f7 fa1d 	bl	8000104 <__udivsi3>
 8008cca:	0003      	movs	r3, r0
 8008ccc:	61bb      	str	r3, [r7, #24]
      break;
 8008cce:	e141      	b.n	8008f54 <USART_SetConfig+0x4e4>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d043      	beq.n	8008d60 <USART_SetConfig+0x2f0>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d03d      	beq.n	8008d5c <USART_SetConfig+0x2ec>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce4:	2b02      	cmp	r3, #2
 8008ce6:	d037      	beq.n	8008d58 <USART_SetConfig+0x2e8>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cec:	2b03      	cmp	r3, #3
 8008cee:	d031      	beq.n	8008d54 <USART_SetConfig+0x2e4>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf4:	2b04      	cmp	r3, #4
 8008cf6:	d02b      	beq.n	8008d50 <USART_SetConfig+0x2e0>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cfc:	2b05      	cmp	r3, #5
 8008cfe:	d025      	beq.n	8008d4c <USART_SetConfig+0x2dc>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d04:	2b06      	cmp	r3, #6
 8008d06:	d01f      	beq.n	8008d48 <USART_SetConfig+0x2d8>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d0c:	2b07      	cmp	r3, #7
 8008d0e:	d019      	beq.n	8008d44 <USART_SetConfig+0x2d4>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d14:	2b08      	cmp	r3, #8
 8008d16:	d013      	beq.n	8008d40 <USART_SetConfig+0x2d0>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d1c:	2b09      	cmp	r3, #9
 8008d1e:	d00d      	beq.n	8008d3c <USART_SetConfig+0x2cc>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d24:	2b0a      	cmp	r3, #10
 8008d26:	d007      	beq.n	8008d38 <USART_SetConfig+0x2c8>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d2c:	2b0b      	cmp	r3, #11
 8008d2e:	d101      	bne.n	8008d34 <USART_SetConfig+0x2c4>
 8008d30:	4b19      	ldr	r3, [pc, #100]	; (8008d98 <USART_SetConfig+0x328>)
 8008d32:	e016      	b.n	8008d62 <USART_SetConfig+0x2f2>
 8008d34:	4b19      	ldr	r3, [pc, #100]	; (8008d9c <USART_SetConfig+0x32c>)
 8008d36:	e014      	b.n	8008d62 <USART_SetConfig+0x2f2>
 8008d38:	4b19      	ldr	r3, [pc, #100]	; (8008da0 <USART_SetConfig+0x330>)
 8008d3a:	e012      	b.n	8008d62 <USART_SetConfig+0x2f2>
 8008d3c:	4b19      	ldr	r3, [pc, #100]	; (8008da4 <USART_SetConfig+0x334>)
 8008d3e:	e010      	b.n	8008d62 <USART_SetConfig+0x2f2>
 8008d40:	4b19      	ldr	r3, [pc, #100]	; (8008da8 <USART_SetConfig+0x338>)
 8008d42:	e00e      	b.n	8008d62 <USART_SetConfig+0x2f2>
 8008d44:	4b19      	ldr	r3, [pc, #100]	; (8008dac <USART_SetConfig+0x33c>)
 8008d46:	e00c      	b.n	8008d62 <USART_SetConfig+0x2f2>
 8008d48:	4b19      	ldr	r3, [pc, #100]	; (8008db0 <USART_SetConfig+0x340>)
 8008d4a:	e00a      	b.n	8008d62 <USART_SetConfig+0x2f2>
 8008d4c:	4b19      	ldr	r3, [pc, #100]	; (8008db4 <USART_SetConfig+0x344>)
 8008d4e:	e008      	b.n	8008d62 <USART_SetConfig+0x2f2>
 8008d50:	4b19      	ldr	r3, [pc, #100]	; (8008db8 <USART_SetConfig+0x348>)
 8008d52:	e006      	b.n	8008d62 <USART_SetConfig+0x2f2>
 8008d54:	4b19      	ldr	r3, [pc, #100]	; (8008dbc <USART_SetConfig+0x34c>)
 8008d56:	e004      	b.n	8008d62 <USART_SetConfig+0x2f2>
 8008d58:	4b19      	ldr	r3, [pc, #100]	; (8008dc0 <USART_SetConfig+0x350>)
 8008d5a:	e002      	b.n	8008d62 <USART_SetConfig+0x2f2>
 8008d5c:	4b19      	ldr	r3, [pc, #100]	; (8008dc4 <USART_SetConfig+0x354>)
 8008d5e:	e000      	b.n	8008d62 <USART_SetConfig+0x2f2>
 8008d60:	4b0e      	ldr	r3, [pc, #56]	; (8008d9c <USART_SetConfig+0x32c>)
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	6852      	ldr	r2, [r2, #4]
 8008d66:	0852      	lsrs	r2, r2, #1
 8008d68:	189a      	adds	r2, r3, r2
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	0019      	movs	r1, r3
 8008d70:	0010      	movs	r0, r2
 8008d72:	f7f7 f9c7 	bl	8000104 <__udivsi3>
 8008d76:	0003      	movs	r3, r0
 8008d78:	61bb      	str	r3, [r7, #24]
      break;
 8008d7a:	e0eb      	b.n	8008f54 <USART_SetConfig+0x4e4>
 8008d7c:	cfff69f3 	.word	0xcfff69f3
 8008d80:	ffffc0f6 	.word	0xffffc0f6
 8008d84:	40013800 	.word	0x40013800
 8008d88:	40021000 	.word	0x40021000
 8008d8c:	40004400 	.word	0x40004400
 8008d90:	40004800 	.word	0x40004800
 8008d94:	40004c00 	.word	0x40004c00
 8008d98:	0001e848 	.word	0x0001e848
 8008d9c:	01e84800 	.word	0x01e84800
 8008da0:	0003d090 	.word	0x0003d090
 8008da4:	0007a120 	.word	0x0007a120
 8008da8:	000f4240 	.word	0x000f4240
 8008dac:	001e8480 	.word	0x001e8480
 8008db0:	0028b0aa 	.word	0x0028b0aa
 8008db4:	0030d400 	.word	0x0030d400
 8008db8:	003d0900 	.word	0x003d0900
 8008dbc:	00516154 	.word	0x00516154
 8008dc0:	007a1200 	.word	0x007a1200
 8008dc4:	00f42400 	.word	0x00f42400
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8008dc8:	f7fc fcc2 	bl	8005750 <HAL_RCC_GetSysClockFreq>
 8008dcc:	0003      	movs	r3, r0
 8008dce:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d044      	beq.n	8008e62 <USART_SetConfig+0x3f2>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d03e      	beq.n	8008e5e <USART_SetConfig+0x3ee>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de4:	2b02      	cmp	r3, #2
 8008de6:	d038      	beq.n	8008e5a <USART_SetConfig+0x3ea>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dec:	2b03      	cmp	r3, #3
 8008dee:	d032      	beq.n	8008e56 <USART_SetConfig+0x3e6>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df4:	2b04      	cmp	r3, #4
 8008df6:	d02c      	beq.n	8008e52 <USART_SetConfig+0x3e2>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dfc:	2b05      	cmp	r3, #5
 8008dfe:	d026      	beq.n	8008e4e <USART_SetConfig+0x3de>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e04:	2b06      	cmp	r3, #6
 8008e06:	d020      	beq.n	8008e4a <USART_SetConfig+0x3da>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e0c:	2b07      	cmp	r3, #7
 8008e0e:	d01a      	beq.n	8008e46 <USART_SetConfig+0x3d6>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e14:	2b08      	cmp	r3, #8
 8008e16:	d014      	beq.n	8008e42 <USART_SetConfig+0x3d2>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1c:	2b09      	cmp	r3, #9
 8008e1e:	d00e      	beq.n	8008e3e <USART_SetConfig+0x3ce>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e24:	2b0a      	cmp	r3, #10
 8008e26:	d008      	beq.n	8008e3a <USART_SetConfig+0x3ca>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e2c:	2b0b      	cmp	r3, #11
 8008e2e:	d102      	bne.n	8008e36 <USART_SetConfig+0x3c6>
 8008e30:	2380      	movs	r3, #128	; 0x80
 8008e32:	005b      	lsls	r3, r3, #1
 8008e34:	e016      	b.n	8008e64 <USART_SetConfig+0x3f4>
 8008e36:	2301      	movs	r3, #1
 8008e38:	e014      	b.n	8008e64 <USART_SetConfig+0x3f4>
 8008e3a:	2380      	movs	r3, #128	; 0x80
 8008e3c:	e012      	b.n	8008e64 <USART_SetConfig+0x3f4>
 8008e3e:	2340      	movs	r3, #64	; 0x40
 8008e40:	e010      	b.n	8008e64 <USART_SetConfig+0x3f4>
 8008e42:	2320      	movs	r3, #32
 8008e44:	e00e      	b.n	8008e64 <USART_SetConfig+0x3f4>
 8008e46:	2310      	movs	r3, #16
 8008e48:	e00c      	b.n	8008e64 <USART_SetConfig+0x3f4>
 8008e4a:	230c      	movs	r3, #12
 8008e4c:	e00a      	b.n	8008e64 <USART_SetConfig+0x3f4>
 8008e4e:	230a      	movs	r3, #10
 8008e50:	e008      	b.n	8008e64 <USART_SetConfig+0x3f4>
 8008e52:	2308      	movs	r3, #8
 8008e54:	e006      	b.n	8008e64 <USART_SetConfig+0x3f4>
 8008e56:	2306      	movs	r3, #6
 8008e58:	e004      	b.n	8008e64 <USART_SetConfig+0x3f4>
 8008e5a:	2304      	movs	r3, #4
 8008e5c:	e002      	b.n	8008e64 <USART_SetConfig+0x3f4>
 8008e5e:	2302      	movs	r3, #2
 8008e60:	e000      	b.n	8008e64 <USART_SetConfig+0x3f4>
 8008e62:	2301      	movs	r3, #1
 8008e64:	0019      	movs	r1, r3
 8008e66:	6938      	ldr	r0, [r7, #16]
 8008e68:	f7f7 f94c 	bl	8000104 <__udivsi3>
 8008e6c:	0003      	movs	r3, r0
 8008e6e:	005a      	lsls	r2, r3, #1
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	085b      	lsrs	r3, r3, #1
 8008e76:	18d2      	adds	r2, r2, r3
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	0019      	movs	r1, r3
 8008e7e:	0010      	movs	r0, r2
 8008e80:	f7f7 f940 	bl	8000104 <__udivsi3>
 8008e84:	0003      	movs	r3, r0
 8008e86:	61bb      	str	r3, [r7, #24]
      break;
 8008e88:	e064      	b.n	8008f54 <USART_SetConfig+0x4e4>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8((uint32_t)LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d04c      	beq.n	8008f2c <USART_SetConfig+0x4bc>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e96:	2b01      	cmp	r3, #1
 8008e98:	d045      	beq.n	8008f26 <USART_SetConfig+0x4b6>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e9e:	2b02      	cmp	r3, #2
 8008ea0:	d03e      	beq.n	8008f20 <USART_SetConfig+0x4b0>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea6:	2b03      	cmp	r3, #3
 8008ea8:	d038      	beq.n	8008f1c <USART_SetConfig+0x4ac>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eae:	2b04      	cmp	r3, #4
 8008eb0:	d031      	beq.n	8008f16 <USART_SetConfig+0x4a6>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb6:	2b05      	cmp	r3, #5
 8008eb8:	d02b      	beq.n	8008f12 <USART_SetConfig+0x4a2>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ebe:	2b06      	cmp	r3, #6
 8008ec0:	d025      	beq.n	8008f0e <USART_SetConfig+0x49e>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec6:	2b07      	cmp	r3, #7
 8008ec8:	d01e      	beq.n	8008f08 <USART_SetConfig+0x498>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ece:	2b08      	cmp	r3, #8
 8008ed0:	d017      	beq.n	8008f02 <USART_SetConfig+0x492>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed6:	2b09      	cmp	r3, #9
 8008ed8:	d010      	beq.n	8008efc <USART_SetConfig+0x48c>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ede:	2b0a      	cmp	r3, #10
 8008ee0:	d009      	beq.n	8008ef6 <USART_SetConfig+0x486>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee6:	2b0b      	cmp	r3, #11
 8008ee8:	d102      	bne.n	8008ef0 <USART_SetConfig+0x480>
 8008eea:	2380      	movs	r3, #128	; 0x80
 8008eec:	005b      	lsls	r3, r3, #1
 8008eee:	e01f      	b.n	8008f30 <USART_SetConfig+0x4c0>
 8008ef0:	2380      	movs	r3, #128	; 0x80
 8008ef2:	025b      	lsls	r3, r3, #9
 8008ef4:	e01c      	b.n	8008f30 <USART_SetConfig+0x4c0>
 8008ef6:	2380      	movs	r3, #128	; 0x80
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	e019      	b.n	8008f30 <USART_SetConfig+0x4c0>
 8008efc:	2380      	movs	r3, #128	; 0x80
 8008efe:	00db      	lsls	r3, r3, #3
 8008f00:	e016      	b.n	8008f30 <USART_SetConfig+0x4c0>
 8008f02:	2380      	movs	r3, #128	; 0x80
 8008f04:	011b      	lsls	r3, r3, #4
 8008f06:	e013      	b.n	8008f30 <USART_SetConfig+0x4c0>
 8008f08:	2380      	movs	r3, #128	; 0x80
 8008f0a:	015b      	lsls	r3, r3, #5
 8008f0c:	e010      	b.n	8008f30 <USART_SetConfig+0x4c0>
 8008f0e:	4b2c      	ldr	r3, [pc, #176]	; (8008fc0 <USART_SetConfig+0x550>)
 8008f10:	e00e      	b.n	8008f30 <USART_SetConfig+0x4c0>
 8008f12:	4b2c      	ldr	r3, [pc, #176]	; (8008fc4 <USART_SetConfig+0x554>)
 8008f14:	e00c      	b.n	8008f30 <USART_SetConfig+0x4c0>
 8008f16:	2380      	movs	r3, #128	; 0x80
 8008f18:	019b      	lsls	r3, r3, #6
 8008f1a:	e009      	b.n	8008f30 <USART_SetConfig+0x4c0>
 8008f1c:	4b2a      	ldr	r3, [pc, #168]	; (8008fc8 <USART_SetConfig+0x558>)
 8008f1e:	e007      	b.n	8008f30 <USART_SetConfig+0x4c0>
 8008f20:	2380      	movs	r3, #128	; 0x80
 8008f22:	01db      	lsls	r3, r3, #7
 8008f24:	e004      	b.n	8008f30 <USART_SetConfig+0x4c0>
 8008f26:	2380      	movs	r3, #128	; 0x80
 8008f28:	021b      	lsls	r3, r3, #8
 8008f2a:	e001      	b.n	8008f30 <USART_SetConfig+0x4c0>
 8008f2c:	2380      	movs	r3, #128	; 0x80
 8008f2e:	025b      	lsls	r3, r3, #9
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	6852      	ldr	r2, [r2, #4]
 8008f34:	0852      	lsrs	r2, r2, #1
 8008f36:	189a      	adds	r2, r3, r2
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	0019      	movs	r1, r3
 8008f3e:	0010      	movs	r0, r2
 8008f40:	f7f7 f8e0 	bl	8000104 <__udivsi3>
 8008f44:	0003      	movs	r3, r0
 8008f46:	61bb      	str	r3, [r7, #24]
      break;
 8008f48:	e004      	b.n	8008f54 <USART_SetConfig+0x4e4>
    default:
      ret = HAL_ERROR;
 8008f4a:	231e      	movs	r3, #30
 8008f4c:	18fb      	adds	r3, r7, r3
 8008f4e:	2201      	movs	r2, #1
 8008f50:	701a      	strb	r2, [r3, #0]
      break;
 8008f52:	46c0      	nop			; (mov r8, r8)
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8008f54:	69bb      	ldr	r3, [r7, #24]
 8008f56:	2b0f      	cmp	r3, #15
 8008f58:	d91b      	bls.n	8008f92 <USART_SetConfig+0x522>
 8008f5a:	69bb      	ldr	r3, [r7, #24]
 8008f5c:	4a1b      	ldr	r2, [pc, #108]	; (8008fcc <USART_SetConfig+0x55c>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d817      	bhi.n	8008f92 <USART_SetConfig+0x522>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f62:	69bb      	ldr	r3, [r7, #24]
 8008f64:	b29a      	uxth	r2, r3
 8008f66:	200e      	movs	r0, #14
 8008f68:	183b      	adds	r3, r7, r0
 8008f6a:	210f      	movs	r1, #15
 8008f6c:	438a      	bics	r2, r1
 8008f6e:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f70:	69bb      	ldr	r3, [r7, #24]
 8008f72:	085b      	lsrs	r3, r3, #1
 8008f74:	b29b      	uxth	r3, r3
 8008f76:	2207      	movs	r2, #7
 8008f78:	4013      	ands	r3, r2
 8008f7a:	b299      	uxth	r1, r3
 8008f7c:	183b      	adds	r3, r7, r0
 8008f7e:	183a      	adds	r2, r7, r0
 8008f80:	8812      	ldrh	r2, [r2, #0]
 8008f82:	430a      	orrs	r2, r1
 8008f84:	801a      	strh	r2, [r3, #0]
    husart->Instance->BRR = brrtemp;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	183a      	adds	r2, r7, r0
 8008f8c:	8812      	ldrh	r2, [r2, #0]
 8008f8e:	60da      	str	r2, [r3, #12]
 8008f90:	e003      	b.n	8008f9a <USART_SetConfig+0x52a>
  }
  else
  {
    ret = HAL_ERROR;
 8008f92:	231e      	movs	r3, #30
 8008f94:	18fb      	adds	r3, r7, r3
 8008f96:	2201      	movs	r2, #1
 8008f98:	701a      	strb	r2, [r3, #0]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 8008fb2:	231e      	movs	r3, #30
 8008fb4:	18fb      	adds	r3, r7, r3
 8008fb6:	781b      	ldrb	r3, [r3, #0]
}
 8008fb8:	0018      	movs	r0, r3
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	b008      	add	sp, #32
 8008fbe:	bd80      	pop	{r7, pc}
 8008fc0:	00001554 	.word	0x00001554
 8008fc4:	00001998 	.word	0x00001998
 8008fc8:	00002aaa 	.word	0x00002aaa
 8008fcc:	0000ffff 	.word	0x0000ffff

08008fd0 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b086      	sub	sp, #24
 8008fd4:	af02      	add	r7, sp, #8
 8008fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008fde:	f7f9 ff4d 	bl	8002e7c <HAL_GetTick>
 8008fe2:	0003      	movs	r3, r0
 8008fe4:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	2208      	movs	r2, #8
 8008fee:	4013      	ands	r3, r2
 8008ff0:	2b08      	cmp	r3, #8
 8008ff2:	d10e      	bne.n	8009012 <USART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8008ff4:	68fa      	ldr	r2, [r7, #12]
 8008ff6:	2380      	movs	r3, #128	; 0x80
 8008ff8:	0399      	lsls	r1, r3, #14
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	23fa      	movs	r3, #250	; 0xfa
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	9300      	str	r3, [sp, #0]
 8009002:	0013      	movs	r3, r2
 8009004:	2200      	movs	r2, #0
 8009006:	f7ff fcfe 	bl	8008a06 <USART_WaitOnFlagUntilTimeout>
 800900a:	1e03      	subs	r3, r0, #0
 800900c:	d001      	beq.n	8009012 <USART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800900e:	2303      	movs	r3, #3
 8009010:	e01e      	b.n	8009050 <USART_CheckIdleState+0x80>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	2204      	movs	r2, #4
 800901a:	4013      	ands	r3, r2
 800901c:	2b04      	cmp	r3, #4
 800901e:	d10e      	bne.n	800903e <USART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8009020:	68fa      	ldr	r2, [r7, #12]
 8009022:	2380      	movs	r3, #128	; 0x80
 8009024:	03d9      	lsls	r1, r3, #15
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	23fa      	movs	r3, #250	; 0xfa
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	9300      	str	r3, [sp, #0]
 800902e:	0013      	movs	r3, r2
 8009030:	2200      	movs	r2, #0
 8009032:	f7ff fce8 	bl	8008a06 <USART_WaitOnFlagUntilTimeout>
 8009036:	1e03      	subs	r3, r0, #0
 8009038:	d001      	beq.n	800903e <USART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800903a:	2303      	movs	r3, #3
 800903c:	e008      	b.n	8009050 <USART_CheckIdleState+0x80>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2259      	movs	r2, #89	; 0x59
 8009042:	2101      	movs	r1, #1
 8009044:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2258      	movs	r2, #88	; 0x58
 800904a:	2100      	movs	r1, #0
 800904c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800904e:	2300      	movs	r3, #0
}
 8009050:	0018      	movs	r0, r3
 8009052:	46bd      	mov	sp, r7
 8009054:	b004      	add	sp, #16
 8009056:	bd80      	pop	{r7, pc}

08009058 <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	681a      	ldr	r2, [r3, #0]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	2140      	movs	r1, #64	; 0x40
 800906c:	438a      	bics	r2, r1
 800906e:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	689a      	ldr	r2, [r3, #8]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	2101      	movs	r1, #1
 800907c:	438a      	bics	r2, r1
 800907e:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2200      	movs	r2, #0
 8009084:	64da      	str	r2, [r3, #76]	; 0x4c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2259      	movs	r2, #89	; 0x59
 800908a:	5c9b      	ldrb	r3, [r3, r2]
 800908c:	b2db      	uxtb	r3, r3
 800908e:	2b12      	cmp	r3, #18
 8009090:	d114      	bne.n	80090bc <USART_EndTransmit_IT+0x64>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	2208      	movs	r2, #8
 8009098:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	699a      	ldr	r2, [r3, #24]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	2108      	movs	r1, #8
 80090a6:	430a      	orrs	r2, r1
 80090a8:	619a      	str	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2259      	movs	r2, #89	; 0x59
 80090ae:	2101      	movs	r1, #1
 80090b0:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	0018      	movs	r0, r3
 80090b6:	f7ff fc59 	bl	800896c <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80090ba:	e00c      	b.n	80090d6 <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090c0:	b29b      	uxth	r3, r3
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d107      	bne.n	80090d6 <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2259      	movs	r2, #89	; 0x59
 80090ca:	2101      	movs	r1, #1
 80090cc:	5499      	strb	r1, [r3, r2]
    HAL_USART_TxRxCpltCallback(husart);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	0018      	movs	r0, r3
 80090d2:	f7ff fc53 	bl	800897c <HAL_USART_TxRxCpltCallback>
}
 80090d6:	46c0      	nop			; (mov r8, r8)
 80090d8:	46bd      	mov	sp, r7
 80090da:	b002      	add	sp, #8
 80090dc:	bd80      	pop	{r7, pc}

080090de <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
 80090de:	b580      	push	{r7, lr}
 80090e0:	b082      	sub	sp, #8
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80090e6:	46c0      	nop			; (mov r8, r8)
 80090e8:	46bd      	mov	sp, r7
 80090ea:	b002      	add	sp, #8
 80090ec:	bd80      	pop	{r7, pc}

080090ee <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
 80090ee:	b580      	push	{r7, lr}
 80090f0:	b082      	sub	sp, #8
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80090f6:	46c0      	nop			; (mov r8, r8)
 80090f8:	46bd      	mov	sp, r7
 80090fa:	b002      	add	sp, #8
 80090fc:	bd80      	pop	{r7, pc}

080090fe <LL_GPIO_SetPinMode>:
{
 80090fe:	b580      	push	{r7, lr}
 8009100:	b084      	sub	sp, #16
 8009102:	af00      	add	r7, sp, #0
 8009104:	60f8      	str	r0, [r7, #12]
 8009106:	60b9      	str	r1, [r7, #8]
 8009108:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	6819      	ldr	r1, [r3, #0]
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	68ba      	ldr	r2, [r7, #8]
 8009112:	435a      	muls	r2, r3
 8009114:	0013      	movs	r3, r2
 8009116:	005b      	lsls	r3, r3, #1
 8009118:	189b      	adds	r3, r3, r2
 800911a:	43db      	mvns	r3, r3
 800911c:	400b      	ands	r3, r1
 800911e:	001a      	movs	r2, r3
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	68b9      	ldr	r1, [r7, #8]
 8009124:	434b      	muls	r3, r1
 8009126:	6879      	ldr	r1, [r7, #4]
 8009128:	434b      	muls	r3, r1
 800912a:	431a      	orrs	r2, r3
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	601a      	str	r2, [r3, #0]
}
 8009130:	46c0      	nop			; (mov r8, r8)
 8009132:	46bd      	mov	sp, r7
 8009134:	b004      	add	sp, #16
 8009136:	bd80      	pop	{r7, pc}

08009138 <LL_GPIO_SetPinOutputType>:
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b084      	sub	sp, #16
 800913c:	af00      	add	r7, sp, #0
 800913e:	60f8      	str	r0, [r7, #12]
 8009140:	60b9      	str	r1, [r7, #8]
 8009142:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	68ba      	ldr	r2, [r7, #8]
 800914a:	43d2      	mvns	r2, r2
 800914c:	401a      	ands	r2, r3
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	6879      	ldr	r1, [r7, #4]
 8009152:	434b      	muls	r3, r1
 8009154:	431a      	orrs	r2, r3
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	605a      	str	r2, [r3, #4]
}
 800915a:	46c0      	nop			; (mov r8, r8)
 800915c:	46bd      	mov	sp, r7
 800915e:	b004      	add	sp, #16
 8009160:	bd80      	pop	{r7, pc}

08009162 <LL_GPIO_SetPinSpeed>:
{
 8009162:	b580      	push	{r7, lr}
 8009164:	b084      	sub	sp, #16
 8009166:	af00      	add	r7, sp, #0
 8009168:	60f8      	str	r0, [r7, #12]
 800916a:	60b9      	str	r1, [r7, #8]
 800916c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	6899      	ldr	r1, [r3, #8]
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	68ba      	ldr	r2, [r7, #8]
 8009176:	435a      	muls	r2, r3
 8009178:	0013      	movs	r3, r2
 800917a:	005b      	lsls	r3, r3, #1
 800917c:	189b      	adds	r3, r3, r2
 800917e:	43db      	mvns	r3, r3
 8009180:	400b      	ands	r3, r1
 8009182:	001a      	movs	r2, r3
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	68b9      	ldr	r1, [r7, #8]
 8009188:	434b      	muls	r3, r1
 800918a:	6879      	ldr	r1, [r7, #4]
 800918c:	434b      	muls	r3, r1
 800918e:	431a      	orrs	r2, r3
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	609a      	str	r2, [r3, #8]
}
 8009194:	46c0      	nop			; (mov r8, r8)
 8009196:	46bd      	mov	sp, r7
 8009198:	b004      	add	sp, #16
 800919a:	bd80      	pop	{r7, pc}

0800919c <LL_GPIO_SetPinPull>:
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b084      	sub	sp, #16
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	60f8      	str	r0, [r7, #12]
 80091a4:	60b9      	str	r1, [r7, #8]
 80091a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	68d9      	ldr	r1, [r3, #12]
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	68ba      	ldr	r2, [r7, #8]
 80091b0:	435a      	muls	r2, r3
 80091b2:	0013      	movs	r3, r2
 80091b4:	005b      	lsls	r3, r3, #1
 80091b6:	189b      	adds	r3, r3, r2
 80091b8:	43db      	mvns	r3, r3
 80091ba:	400b      	ands	r3, r1
 80091bc:	001a      	movs	r2, r3
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	68b9      	ldr	r1, [r7, #8]
 80091c2:	434b      	muls	r3, r1
 80091c4:	6879      	ldr	r1, [r7, #4]
 80091c6:	434b      	muls	r3, r1
 80091c8:	431a      	orrs	r2, r3
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	60da      	str	r2, [r3, #12]
}
 80091ce:	46c0      	nop			; (mov r8, r8)
 80091d0:	46bd      	mov	sp, r7
 80091d2:	b004      	add	sp, #16
 80091d4:	bd80      	pop	{r7, pc}

080091d6 <LL_GPIO_SetAFPin_0_7>:
{
 80091d6:	b580      	push	{r7, lr}
 80091d8:	b084      	sub	sp, #16
 80091da:	af00      	add	r7, sp, #0
 80091dc:	60f8      	str	r0, [r7, #12]
 80091de:	60b9      	str	r1, [r7, #8]
 80091e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	6a19      	ldr	r1, [r3, #32]
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	68ba      	ldr	r2, [r7, #8]
 80091ea:	4353      	muls	r3, r2
 80091ec:	68ba      	ldr	r2, [r7, #8]
 80091ee:	4353      	muls	r3, r2
 80091f0:	68ba      	ldr	r2, [r7, #8]
 80091f2:	435a      	muls	r2, r3
 80091f4:	0013      	movs	r3, r2
 80091f6:	011b      	lsls	r3, r3, #4
 80091f8:	1a9b      	subs	r3, r3, r2
 80091fa:	43db      	mvns	r3, r3
 80091fc:	400b      	ands	r3, r1
 80091fe:	001a      	movs	r2, r3
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	68b9      	ldr	r1, [r7, #8]
 8009204:	434b      	muls	r3, r1
 8009206:	68b9      	ldr	r1, [r7, #8]
 8009208:	434b      	muls	r3, r1
 800920a:	68b9      	ldr	r1, [r7, #8]
 800920c:	434b      	muls	r3, r1
 800920e:	6879      	ldr	r1, [r7, #4]
 8009210:	434b      	muls	r3, r1
 8009212:	431a      	orrs	r2, r3
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	621a      	str	r2, [r3, #32]
}
 8009218:	46c0      	nop			; (mov r8, r8)
 800921a:	46bd      	mov	sp, r7
 800921c:	b004      	add	sp, #16
 800921e:	bd80      	pop	{r7, pc}

08009220 <LL_GPIO_SetAFPin_8_15>:
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b084      	sub	sp, #16
 8009224:	af00      	add	r7, sp, #0
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	0a1b      	lsrs	r3, r3, #8
 8009234:	68ba      	ldr	r2, [r7, #8]
 8009236:	0a12      	lsrs	r2, r2, #8
 8009238:	4353      	muls	r3, r2
 800923a:	68ba      	ldr	r2, [r7, #8]
 800923c:	0a12      	lsrs	r2, r2, #8
 800923e:	4353      	muls	r3, r2
 8009240:	68ba      	ldr	r2, [r7, #8]
 8009242:	0a12      	lsrs	r2, r2, #8
 8009244:	435a      	muls	r2, r3
 8009246:	0013      	movs	r3, r2
 8009248:	011b      	lsls	r3, r3, #4
 800924a:	1a9b      	subs	r3, r3, r2
 800924c:	43db      	mvns	r3, r3
 800924e:	400b      	ands	r3, r1
 8009250:	001a      	movs	r2, r3
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	0a1b      	lsrs	r3, r3, #8
 8009256:	68b9      	ldr	r1, [r7, #8]
 8009258:	0a09      	lsrs	r1, r1, #8
 800925a:	434b      	muls	r3, r1
 800925c:	68b9      	ldr	r1, [r7, #8]
 800925e:	0a09      	lsrs	r1, r1, #8
 8009260:	434b      	muls	r3, r1
 8009262:	68b9      	ldr	r1, [r7, #8]
 8009264:	0a09      	lsrs	r1, r1, #8
 8009266:	434b      	muls	r3, r1
 8009268:	6879      	ldr	r1, [r7, #4]
 800926a:	434b      	muls	r3, r1
 800926c:	431a      	orrs	r2, r3
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009272:	46c0      	nop			; (mov r8, r8)
 8009274:	46bd      	mov	sp, r7
 8009276:	b004      	add	sp, #16
 8009278:	bd80      	pop	{r7, pc}

0800927a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800927a:	b580      	push	{r7, lr}
 800927c:	b084      	sub	sp, #16
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
 8009282:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8009284:	2300      	movs	r3, #0
 8009286:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8009288:	e047      	b.n	800931a <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	2101      	movs	r1, #1
 8009290:	68fa      	ldr	r2, [r7, #12]
 8009292:	4091      	lsls	r1, r2
 8009294:	000a      	movs	r2, r1
 8009296:	4013      	ands	r3, r2
 8009298:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d039      	beq.n	8009314 <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	2b01      	cmp	r3, #1
 80092a6:	d003      	beq.n	80092b0 <LL_GPIO_Init+0x36>
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	2b02      	cmp	r3, #2
 80092ae:	d10d      	bne.n	80092cc <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	689a      	ldr	r2, [r3, #8]
 80092b4:	68b9      	ldr	r1, [r7, #8]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	0018      	movs	r0, r3
 80092ba:	f7ff ff52 	bl	8009162 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	68da      	ldr	r2, [r3, #12]
 80092c2:	68b9      	ldr	r1, [r7, #8]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	0018      	movs	r0, r3
 80092c8:	f7ff ff36 	bl	8009138 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	691a      	ldr	r2, [r3, #16]
 80092d0:	68b9      	ldr	r1, [r7, #8]
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	0018      	movs	r0, r3
 80092d6:	f7ff ff61 	bl	800919c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	2b02      	cmp	r3, #2
 80092e0:	d111      	bne.n	8009306 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	2bff      	cmp	r3, #255	; 0xff
 80092e6:	d807      	bhi.n	80092f8 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	695a      	ldr	r2, [r3, #20]
 80092ec:	68b9      	ldr	r1, [r7, #8]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	0018      	movs	r0, r3
 80092f2:	f7ff ff70 	bl	80091d6 <LL_GPIO_SetAFPin_0_7>
 80092f6:	e006      	b.n	8009306 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	695a      	ldr	r2, [r3, #20]
 80092fc:	68b9      	ldr	r1, [r7, #8]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	0018      	movs	r0, r3
 8009302:	f7ff ff8d 	bl	8009220 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	685a      	ldr	r2, [r3, #4]
 800930a:	68b9      	ldr	r1, [r7, #8]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	0018      	movs	r0, r3
 8009310:	f7ff fef5 	bl	80090fe <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	3301      	adds	r3, #1
 8009318:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	40da      	lsrs	r2, r3
 8009322:	1e13      	subs	r3, r2, #0
 8009324:	d1b1      	bne.n	800928a <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8009326:	2300      	movs	r3, #0
}
 8009328:	0018      	movs	r0, r3
 800932a:	46bd      	mov	sp, r7
 800932c:	b004      	add	sp, #16
 800932e:	bd80      	pop	{r7, pc}

08009330 <LL_RCC_HSI_IsReady>:
{
 8009330:	b580      	push	{r7, lr}
 8009332:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8009334:	4b07      	ldr	r3, [pc, #28]	; (8009354 <LL_RCC_HSI_IsReady+0x24>)
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	2380      	movs	r3, #128	; 0x80
 800933a:	00db      	lsls	r3, r3, #3
 800933c:	401a      	ands	r2, r3
 800933e:	2380      	movs	r3, #128	; 0x80
 8009340:	00db      	lsls	r3, r3, #3
 8009342:	429a      	cmp	r2, r3
 8009344:	d101      	bne.n	800934a <LL_RCC_HSI_IsReady+0x1a>
 8009346:	2301      	movs	r3, #1
 8009348:	e000      	b.n	800934c <LL_RCC_HSI_IsReady+0x1c>
 800934a:	2300      	movs	r3, #0
}
 800934c:	0018      	movs	r0, r3
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
 8009352:	46c0      	nop			; (mov r8, r8)
 8009354:	40021000 	.word	0x40021000

08009358 <LL_RCC_LSE_IsReady>:
{
 8009358:	b580      	push	{r7, lr}
 800935a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800935c:	4b05      	ldr	r3, [pc, #20]	; (8009374 <LL_RCC_LSE_IsReady+0x1c>)
 800935e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009360:	2202      	movs	r2, #2
 8009362:	4013      	ands	r3, r2
 8009364:	2b02      	cmp	r3, #2
 8009366:	d101      	bne.n	800936c <LL_RCC_LSE_IsReady+0x14>
 8009368:	2301      	movs	r3, #1
 800936a:	e000      	b.n	800936e <LL_RCC_LSE_IsReady+0x16>
 800936c:	2300      	movs	r3, #0
}
 800936e:	0018      	movs	r0, r3
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}
 8009374:	40021000 	.word	0x40021000

08009378 <LL_RCC_GetSysClkSource>:
{
 8009378:	b580      	push	{r7, lr}
 800937a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800937c:	4b03      	ldr	r3, [pc, #12]	; (800938c <LL_RCC_GetSysClkSource+0x14>)
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	2238      	movs	r2, #56	; 0x38
 8009382:	4013      	ands	r3, r2
}
 8009384:	0018      	movs	r0, r3
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
 800938a:	46c0      	nop			; (mov r8, r8)
 800938c:	40021000 	.word	0x40021000

08009390 <LL_RCC_GetAHBPrescaler>:
{
 8009390:	b580      	push	{r7, lr}
 8009392:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8009394:	4b03      	ldr	r3, [pc, #12]	; (80093a4 <LL_RCC_GetAHBPrescaler+0x14>)
 8009396:	689a      	ldr	r2, [r3, #8]
 8009398:	23f0      	movs	r3, #240	; 0xf0
 800939a:	011b      	lsls	r3, r3, #4
 800939c:	4013      	ands	r3, r2
}
 800939e:	0018      	movs	r0, r3
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}
 80093a4:	40021000 	.word	0x40021000

080093a8 <LL_RCC_GetAPB1Prescaler>:
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80093ac:	4b03      	ldr	r3, [pc, #12]	; (80093bc <LL_RCC_GetAPB1Prescaler+0x14>)
 80093ae:	689a      	ldr	r2, [r3, #8]
 80093b0:	23e0      	movs	r3, #224	; 0xe0
 80093b2:	01db      	lsls	r3, r3, #7
 80093b4:	4013      	ands	r3, r2
}
 80093b6:	0018      	movs	r0, r3
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}
 80093bc:	40021000 	.word	0x40021000

080093c0 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  * (*) feature not available on all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80093c8:	4b05      	ldr	r3, [pc, #20]	; (80093e0 <LL_RCC_GetUSARTClockSource+0x20>)
 80093ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	401a      	ands	r2, r3
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	041b      	lsls	r3, r3, #16
 80093d4:	4313      	orrs	r3, r2
}
 80093d6:	0018      	movs	r0, r3
 80093d8:	46bd      	mov	sp, r7
 80093da:	b002      	add	sp, #8
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	46c0      	nop			; (mov r8, r8)
 80093e0:	40021000 	.word	0x40021000

080093e4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80093e8:	4b03      	ldr	r3, [pc, #12]	; (80093f8 <LL_RCC_PLL_GetN+0x14>)
 80093ea:	68db      	ldr	r3, [r3, #12]
 80093ec:	0a1b      	lsrs	r3, r3, #8
 80093ee:	227f      	movs	r2, #127	; 0x7f
 80093f0:	4013      	ands	r3, r2
}
 80093f2:	0018      	movs	r0, r3
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	40021000 	.word	0x40021000

080093fc <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8009400:	4b03      	ldr	r3, [pc, #12]	; (8009410 <LL_RCC_PLL_GetR+0x14>)
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	0f5b      	lsrs	r3, r3, #29
 8009406:	075b      	lsls	r3, r3, #29
}
 8009408:	0018      	movs	r0, r3
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	46c0      	nop			; (mov r8, r8)
 8009410:	40021000 	.word	0x40021000

08009414 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8009418:	4b03      	ldr	r3, [pc, #12]	; (8009428 <LL_RCC_PLL_GetMainSource+0x14>)
 800941a:	68db      	ldr	r3, [r3, #12]
 800941c:	2203      	movs	r2, #3
 800941e:	4013      	ands	r3, r2
}
 8009420:	0018      	movs	r0, r3
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	46c0      	nop			; (mov r8, r8)
 8009428:	40021000 	.word	0x40021000

0800942c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8009430:	4b03      	ldr	r3, [pc, #12]	; (8009440 <LL_RCC_PLL_GetDivider+0x14>)
 8009432:	68db      	ldr	r3, [r3, #12]
 8009434:	2270      	movs	r2, #112	; 0x70
 8009436:	4013      	ands	r3, r2
}
 8009438:	0018      	movs	r0, r3
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
 800943e:	46c0      	nop			; (mov r8, r8)
 8009440:	40021000 	.word	0x40021000

08009444 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800944c:	f000 f8a2 	bl	8009594 <RCC_GetSystemClockFreq>
 8009450:	0002      	movs	r2, r0
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	0018      	movs	r0, r3
 800945c:	f000 f8c8 	bl	80095f0 <RCC_GetHCLKClockFreq>
 8009460:	0002      	movs	r2, r0
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	0018      	movs	r0, r3
 800946c:	f000 f8d8 	bl	8009620 <RCC_GetPCLK1ClockFreq>
 8009470:	0002      	movs	r2, r0
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	609a      	str	r2, [r3, #8]
}
 8009476:	46c0      	nop			; (mov r8, r8)
 8009478:	46bd      	mov	sp, r7
 800947a:	b002      	add	sp, #8
 800947c:	bd80      	pop	{r7, pc}
	...

08009480 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b084      	sub	sp, #16
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8009488:	2300      	movs	r3, #0
 800948a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2b03      	cmp	r3, #3
 8009490:	d131      	bne.n	80094f6 <LL_RCC_GetUSARTClockFreq+0x76>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	0018      	movs	r0, r3
 8009496:	f7ff ff93 	bl	80093c0 <LL_RCC_GetUSARTClockSource>
 800949a:	0003      	movs	r3, r0
 800949c:	4a36      	ldr	r2, [pc, #216]	; (8009578 <LL_RCC_GetUSARTClockFreq+0xf8>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d00a      	beq.n	80094b8 <LL_RCC_GetUSARTClockFreq+0x38>
 80094a2:	4a36      	ldr	r2, [pc, #216]	; (800957c <LL_RCC_GetUSARTClockFreq+0xfc>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d00f      	beq.n	80094c8 <LL_RCC_GetUSARTClockFreq+0x48>
 80094a8:	4a35      	ldr	r2, [pc, #212]	; (8009580 <LL_RCC_GetUSARTClockFreq+0x100>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d115      	bne.n	80094da <LL_RCC_GetUSARTClockFreq+0x5a>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80094ae:	f000 f871 	bl	8009594 <RCC_GetSystemClockFreq>
 80094b2:	0003      	movs	r3, r0
 80094b4:	60fb      	str	r3, [r7, #12]
        break;
 80094b6:	e05a      	b.n	800956e <LL_RCC_GetUSARTClockFreq+0xee>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 80094b8:	f7ff ff3a 	bl	8009330 <LL_RCC_HSI_IsReady>
 80094bc:	0003      	movs	r3, r0
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d14e      	bne.n	8009560 <LL_RCC_GetUSARTClockFreq+0xe0>
        {
          usart_frequency = HSI_VALUE;
 80094c2:	4b30      	ldr	r3, [pc, #192]	; (8009584 <LL_RCC_GetUSARTClockFreq+0x104>)
 80094c4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80094c6:	e04b      	b.n	8009560 <LL_RCC_GetUSARTClockFreq+0xe0>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 80094c8:	f7ff ff46 	bl	8009358 <LL_RCC_LSE_IsReady>
 80094cc:	0003      	movs	r3, r0
 80094ce:	2b01      	cmp	r3, #1
 80094d0:	d148      	bne.n	8009564 <LL_RCC_GetUSARTClockFreq+0xe4>
        {
          usart_frequency = LSE_VALUE;
 80094d2:	2380      	movs	r3, #128	; 0x80
 80094d4:	021b      	lsls	r3, r3, #8
 80094d6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80094d8:	e044      	b.n	8009564 <LL_RCC_GetUSARTClockFreq+0xe4>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80094da:	f000 f85b 	bl	8009594 <RCC_GetSystemClockFreq>
 80094de:	0003      	movs	r3, r0
 80094e0:	0018      	movs	r0, r3
 80094e2:	f000 f885 	bl	80095f0 <RCC_GetHCLKClockFreq>
 80094e6:	0003      	movs	r3, r0
 80094e8:	0018      	movs	r0, r3
 80094ea:	f000 f899 	bl	8009620 <RCC_GetPCLK1ClockFreq>
 80094ee:	0003      	movs	r3, r0
 80094f0:	60fb      	str	r3, [r7, #12]
        break;
 80094f2:	46c0      	nop			; (mov r8, r8)
 80094f4:	e03b      	b.n	800956e <LL_RCC_GetUSARTClockFreq+0xee>
    }
  }
#if defined(RCC_CCIPR_USART2SEL)
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2b0c      	cmp	r3, #12
 80094fa:	d138      	bne.n	800956e <LL_RCC_GetUSARTClockFreq+0xee>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	0018      	movs	r0, r3
 8009500:	f7ff ff5e 	bl	80093c0 <LL_RCC_GetUSARTClockSource>
 8009504:	0003      	movs	r3, r0
 8009506:	4a20      	ldr	r2, [pc, #128]	; (8009588 <LL_RCC_GetUSARTClockFreq+0x108>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d00a      	beq.n	8009522 <LL_RCC_GetUSARTClockFreq+0xa2>
 800950c:	4a1f      	ldr	r2, [pc, #124]	; (800958c <LL_RCC_GetUSARTClockFreq+0x10c>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d00f      	beq.n	8009532 <LL_RCC_GetUSARTClockFreq+0xb2>
 8009512:	4a1f      	ldr	r2, [pc, #124]	; (8009590 <LL_RCC_GetUSARTClockFreq+0x110>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d115      	bne.n	8009544 <LL_RCC_GetUSARTClockFreq+0xc4>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8009518:	f000 f83c 	bl	8009594 <RCC_GetSystemClockFreq>
 800951c:	0003      	movs	r3, r0
 800951e:	60fb      	str	r3, [r7, #12]
        break;
 8009520:	e025      	b.n	800956e <LL_RCC_GetUSARTClockFreq+0xee>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 8009522:	f7ff ff05 	bl	8009330 <LL_RCC_HSI_IsReady>
 8009526:	0003      	movs	r3, r0
 8009528:	2b01      	cmp	r3, #1
 800952a:	d11d      	bne.n	8009568 <LL_RCC_GetUSARTClockFreq+0xe8>
        {
          usart_frequency = HSI_VALUE;
 800952c:	4b15      	ldr	r3, [pc, #84]	; (8009584 <LL_RCC_GetUSARTClockFreq+0x104>)
 800952e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8009530:	e01a      	b.n	8009568 <LL_RCC_GetUSARTClockFreq+0xe8>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 8009532:	f7ff ff11 	bl	8009358 <LL_RCC_LSE_IsReady>
 8009536:	0003      	movs	r3, r0
 8009538:	2b01      	cmp	r3, #1
 800953a:	d117      	bne.n	800956c <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = LSE_VALUE;
 800953c:	2380      	movs	r3, #128	; 0x80
 800953e:	021b      	lsls	r3, r3, #8
 8009540:	60fb      	str	r3, [r7, #12]
        }
        break;
 8009542:	e013      	b.n	800956c <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8009544:	f000 f826 	bl	8009594 <RCC_GetSystemClockFreq>
 8009548:	0003      	movs	r3, r0
 800954a:	0018      	movs	r0, r3
 800954c:	f000 f850 	bl	80095f0 <RCC_GetHCLKClockFreq>
 8009550:	0003      	movs	r3, r0
 8009552:	0018      	movs	r0, r3
 8009554:	f000 f864 	bl	8009620 <RCC_GetPCLK1ClockFreq>
 8009558:	0003      	movs	r3, r0
 800955a:	60fb      	str	r3, [r7, #12]
        break;
 800955c:	46c0      	nop			; (mov r8, r8)
 800955e:	e006      	b.n	800956e <LL_RCC_GetUSARTClockFreq+0xee>
        break;
 8009560:	46c0      	nop			; (mov r8, r8)
 8009562:	e004      	b.n	800956e <LL_RCC_GetUSARTClockFreq+0xee>
        break;
 8009564:	46c0      	nop			; (mov r8, r8)
 8009566:	e002      	b.n	800956e <LL_RCC_GetUSARTClockFreq+0xee>
        break;
 8009568:	46c0      	nop			; (mov r8, r8)
 800956a:	e000      	b.n	800956e <LL_RCC_GetUSARTClockFreq+0xee>
        break;
 800956c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 800956e:	68fb      	ldr	r3, [r7, #12]
}
 8009570:	0018      	movs	r0, r3
 8009572:	46bd      	mov	sp, r7
 8009574:	b004      	add	sp, #16
 8009576:	bd80      	pop	{r7, pc}
 8009578:	00030002 	.word	0x00030002
 800957c:	00030003 	.word	0x00030003
 8009580:	00030001 	.word	0x00030001
 8009584:	00f42400 	.word	0x00f42400
 8009588:	000c0008 	.word	0x000c0008
 800958c:	000c000c 	.word	0x000c000c
 8009590:	000c0004 	.word	0x000c0004

08009594 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b082      	sub	sp, #8
 8009598:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800959a:	f7ff feed 	bl	8009378 <LL_RCC_GetSysClkSource>
 800959e:	0003      	movs	r3, r0
 80095a0:	2b08      	cmp	r3, #8
 80095a2:	d002      	beq.n	80095aa <RCC_GetSystemClockFreq+0x16>
 80095a4:	2b10      	cmp	r3, #16
 80095a6:	d003      	beq.n	80095b0 <RCC_GetSystemClockFreq+0x1c>
 80095a8:	e007      	b.n	80095ba <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80095aa:	4b0e      	ldr	r3, [pc, #56]	; (80095e4 <RCC_GetSystemClockFreq+0x50>)
 80095ac:	607b      	str	r3, [r7, #4]
      break;
 80095ae:	e014      	b.n	80095da <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80095b0:	f000 f84c 	bl	800964c <RCC_PLL_GetFreqDomain_SYS>
 80095b4:	0003      	movs	r3, r0
 80095b6:	607b      	str	r3, [r7, #4]
      break;
 80095b8:	e00f      	b.n	80095da <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80095ba:	4b0b      	ldr	r3, [pc, #44]	; (80095e8 <RCC_GetSystemClockFreq+0x54>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	0adb      	lsrs	r3, r3, #11
 80095c0:	2207      	movs	r2, #7
 80095c2:	4013      	ands	r3, r2
 80095c4:	2201      	movs	r2, #1
 80095c6:	409a      	lsls	r2, r3
 80095c8:	0013      	movs	r3, r2
 80095ca:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 80095cc:	6839      	ldr	r1, [r7, #0]
 80095ce:	4807      	ldr	r0, [pc, #28]	; (80095ec <RCC_GetSystemClockFreq+0x58>)
 80095d0:	f7f6 fd98 	bl	8000104 <__udivsi3>
 80095d4:	0003      	movs	r3, r0
 80095d6:	607b      	str	r3, [r7, #4]
      break;
 80095d8:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 80095da:	687b      	ldr	r3, [r7, #4]
}
 80095dc:	0018      	movs	r0, r3
 80095de:	46bd      	mov	sp, r7
 80095e0:	b002      	add	sp, #8
 80095e2:	bd80      	pop	{r7, pc}
 80095e4:	007a1200 	.word	0x007a1200
 80095e8:	40021000 	.word	0x40021000
 80095ec:	00f42400 	.word	0x00f42400

080095f0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80095f8:	f7ff feca 	bl	8009390 <LL_RCC_GetAHBPrescaler>
 80095fc:	0003      	movs	r3, r0
 80095fe:	0a1b      	lsrs	r3, r3, #8
 8009600:	220f      	movs	r2, #15
 8009602:	401a      	ands	r2, r3
 8009604:	4b05      	ldr	r3, [pc, #20]	; (800961c <RCC_GetHCLKClockFreq+0x2c>)
 8009606:	0092      	lsls	r2, r2, #2
 8009608:	58d3      	ldr	r3, [r2, r3]
 800960a:	221f      	movs	r2, #31
 800960c:	4013      	ands	r3, r2
 800960e:	687a      	ldr	r2, [r7, #4]
 8009610:	40da      	lsrs	r2, r3
 8009612:	0013      	movs	r3, r2
}
 8009614:	0018      	movs	r0, r3
 8009616:	46bd      	mov	sp, r7
 8009618:	b002      	add	sp, #8
 800961a:	bd80      	pop	{r7, pc}
 800961c:	08009990 	.word	0x08009990

08009620 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8009628:	f7ff febe 	bl	80093a8 <LL_RCC_GetAPB1Prescaler>
 800962c:	0003      	movs	r3, r0
 800962e:	0b1a      	lsrs	r2, r3, #12
 8009630:	4b05      	ldr	r3, [pc, #20]	; (8009648 <RCC_GetPCLK1ClockFreq+0x28>)
 8009632:	0092      	lsls	r2, r2, #2
 8009634:	58d3      	ldr	r3, [r2, r3]
 8009636:	221f      	movs	r2, #31
 8009638:	4013      	ands	r3, r2
 800963a:	687a      	ldr	r2, [r7, #4]
 800963c:	40da      	lsrs	r2, r3
 800963e:	0013      	movs	r3, r2
}
 8009640:	0018      	movs	r0, r3
 8009642:	46bd      	mov	sp, r7
 8009644:	b002      	add	sp, #8
 8009646:	bd80      	pop	{r7, pc}
 8009648:	080099d0 	.word	0x080099d0

0800964c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800964c:	b590      	push	{r4, r7, lr}
 800964e:	b083      	sub	sp, #12
 8009650:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8009652:	f7ff fedf 	bl	8009414 <LL_RCC_PLL_GetMainSource>
 8009656:	0003      	movs	r3, r0
 8009658:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	2b02      	cmp	r3, #2
 800965e:	d002      	beq.n	8009666 <RCC_PLL_GetFreqDomain_SYS+0x1a>
 8009660:	2b03      	cmp	r3, #3
 8009662:	d003      	beq.n	800966c <RCC_PLL_GetFreqDomain_SYS+0x20>
 8009664:	e005      	b.n	8009672 <RCC_PLL_GetFreqDomain_SYS+0x26>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8009666:	4b14      	ldr	r3, [pc, #80]	; (80096b8 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8009668:	607b      	str	r3, [r7, #4]
      break;
 800966a:	e005      	b.n	8009678 <RCC_PLL_GetFreqDomain_SYS+0x2c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800966c:	4b13      	ldr	r3, [pc, #76]	; (80096bc <RCC_PLL_GetFreqDomain_SYS+0x70>)
 800966e:	607b      	str	r3, [r7, #4]
      break;
 8009670:	e002      	b.n	8009678 <RCC_PLL_GetFreqDomain_SYS+0x2c>

    default:
      pllinputfreq = HSI_VALUE;
 8009672:	4b11      	ldr	r3, [pc, #68]	; (80096b8 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8009674:	607b      	str	r3, [r7, #4]
      break;
 8009676:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8009678:	f7ff feb4 	bl	80093e4 <LL_RCC_PLL_GetN>
 800967c:	0002      	movs	r2, r0
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	4353      	muls	r3, r2
 8009682:	001c      	movs	r4, r3
 8009684:	f7ff fed2 	bl	800942c <LL_RCC_PLL_GetDivider>
 8009688:	0003      	movs	r3, r0
 800968a:	091b      	lsrs	r3, r3, #4
 800968c:	3301      	adds	r3, #1
 800968e:	0019      	movs	r1, r3
 8009690:	0020      	movs	r0, r4
 8009692:	f7f6 fd37 	bl	8000104 <__udivsi3>
 8009696:	0003      	movs	r3, r0
 8009698:	001c      	movs	r4, r3
 800969a:	f7ff feaf 	bl	80093fc <LL_RCC_PLL_GetR>
 800969e:	0003      	movs	r3, r0
 80096a0:	0f5b      	lsrs	r3, r3, #29
 80096a2:	3301      	adds	r3, #1
 80096a4:	0019      	movs	r1, r3
 80096a6:	0020      	movs	r0, r4
 80096a8:	f7f6 fd2c 	bl	8000104 <__udivsi3>
 80096ac:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 80096ae:	0018      	movs	r0, r3
 80096b0:	46bd      	mov	sp, r7
 80096b2:	b003      	add	sp, #12
 80096b4:	bd90      	pop	{r4, r7, pc}
 80096b6:	46c0      	nop			; (mov r8, r8)
 80096b8:	00f42400 	.word	0x00f42400
 80096bc:	007a1200 	.word	0x007a1200

080096c0 <LL_USART_IsEnabled>:
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b082      	sub	sp, #8
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	2201      	movs	r2, #1
 80096ce:	4013      	ands	r3, r2
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d101      	bne.n	80096d8 <LL_USART_IsEnabled+0x18>
 80096d4:	2301      	movs	r3, #1
 80096d6:	e000      	b.n	80096da <LL_USART_IsEnabled+0x1a>
 80096d8:	2300      	movs	r3, #0
}
 80096da:	0018      	movs	r0, r3
 80096dc:	46bd      	mov	sp, r7
 80096de:	b002      	add	sp, #8
 80096e0:	bd80      	pop	{r7, pc}

080096e2 <LL_USART_SetPrescaler>:
{
 80096e2:	b580      	push	{r7, lr}
 80096e4:	b082      	sub	sp, #8
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6078      	str	r0, [r7, #4]
 80096ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096f0:	220f      	movs	r2, #15
 80096f2:	4393      	bics	r3, r2
 80096f4:	683a      	ldr	r2, [r7, #0]
 80096f6:	b292      	uxth	r2, r2
 80096f8:	431a      	orrs	r2, r3
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80096fe:	46c0      	nop			; (mov r8, r8)
 8009700:	46bd      	mov	sp, r7
 8009702:	b002      	add	sp, #8
 8009704:	bd80      	pop	{r7, pc}
	...

08009708 <LL_USART_SetStopBitsLength>:
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b082      	sub	sp, #8
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	4a05      	ldr	r2, [pc, #20]	; (800972c <LL_USART_SetStopBitsLength+0x24>)
 8009718:	401a      	ands	r2, r3
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	431a      	orrs	r2, r3
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	605a      	str	r2, [r3, #4]
}
 8009722:	46c0      	nop			; (mov r8, r8)
 8009724:	46bd      	mov	sp, r7
 8009726:	b002      	add	sp, #8
 8009728:	bd80      	pop	{r7, pc}
 800972a:	46c0      	nop			; (mov r8, r8)
 800972c:	ffffcfff 	.word	0xffffcfff

08009730 <LL_USART_SetHWFlowCtrl>:
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	689b      	ldr	r3, [r3, #8]
 800973e:	4a05      	ldr	r2, [pc, #20]	; (8009754 <LL_USART_SetHWFlowCtrl+0x24>)
 8009740:	401a      	ands	r2, r3
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	431a      	orrs	r2, r3
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	609a      	str	r2, [r3, #8]
}
 800974a:	46c0      	nop			; (mov r8, r8)
 800974c:	46bd      	mov	sp, r7
 800974e:	b002      	add	sp, #8
 8009750:	bd80      	pop	{r7, pc}
 8009752:	46c0      	nop			; (mov r8, r8)
 8009754:	fffffcff 	.word	0xfffffcff

08009758 <LL_USART_SetBaudRate>:
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b086      	sub	sp, #24
 800975c:	af00      	add	r7, sp, #0
 800975e:	60f8      	str	r0, [r7, #12]
 8009760:	60b9      	str	r1, [r7, #8]
 8009762:	607a      	str	r2, [r7, #4]
 8009764:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2b0b      	cmp	r3, #11
 800976a:	d843      	bhi.n	80097f4 <LL_USART_SetBaudRate+0x9c>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800976c:	683a      	ldr	r2, [r7, #0]
 800976e:	2380      	movs	r3, #128	; 0x80
 8009770:	021b      	lsls	r3, r3, #8
 8009772:	429a      	cmp	r2, r3
 8009774:	d126      	bne.n	80097c4 <LL_USART_SetBaudRate+0x6c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	b2db      	uxtb	r3, r3
 800977a:	001a      	movs	r2, r3
 800977c:	4b1f      	ldr	r3, [pc, #124]	; (80097fc <LL_USART_SetBaudRate+0xa4>)
 800977e:	0092      	lsls	r2, r2, #2
 8009780:	58d3      	ldr	r3, [r2, r3]
 8009782:	0019      	movs	r1, r3
 8009784:	68b8      	ldr	r0, [r7, #8]
 8009786:	f7f6 fcbd 	bl	8000104 <__udivsi3>
 800978a:	0003      	movs	r3, r0
 800978c:	005a      	lsls	r2, r3, #1
 800978e:	6a3b      	ldr	r3, [r7, #32]
 8009790:	085b      	lsrs	r3, r3, #1
 8009792:	18d3      	adds	r3, r2, r3
 8009794:	6a39      	ldr	r1, [r7, #32]
 8009796:	0018      	movs	r0, r3
 8009798:	f7f6 fcb4 	bl	8000104 <__udivsi3>
 800979c:	0003      	movs	r3, r0
 800979e:	b29b      	uxth	r3, r3
 80097a0:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	4a16      	ldr	r2, [pc, #88]	; (8009800 <LL_USART_SetBaudRate+0xa8>)
 80097a6:	4013      	ands	r3, r2
 80097a8:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	085b      	lsrs	r3, r3, #1
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	001a      	movs	r2, r3
 80097b2:	2307      	movs	r3, #7
 80097b4:	4013      	ands	r3, r2
 80097b6:	693a      	ldr	r2, [r7, #16]
 80097b8:	4313      	orrs	r3, r2
 80097ba:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	693a      	ldr	r2, [r7, #16]
 80097c0:	60da      	str	r2, [r3, #12]
}
 80097c2:	e017      	b.n	80097f4 <LL_USART_SetBaudRate+0x9c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	001a      	movs	r2, r3
 80097ca:	4b0c      	ldr	r3, [pc, #48]	; (80097fc <LL_USART_SetBaudRate+0xa4>)
 80097cc:	0092      	lsls	r2, r2, #2
 80097ce:	58d3      	ldr	r3, [r2, r3]
 80097d0:	0019      	movs	r1, r3
 80097d2:	68b8      	ldr	r0, [r7, #8]
 80097d4:	f7f6 fc96 	bl	8000104 <__udivsi3>
 80097d8:	0003      	movs	r3, r0
 80097da:	001a      	movs	r2, r3
 80097dc:	6a3b      	ldr	r3, [r7, #32]
 80097de:	085b      	lsrs	r3, r3, #1
 80097e0:	18d3      	adds	r3, r2, r3
 80097e2:	6a39      	ldr	r1, [r7, #32]
 80097e4:	0018      	movs	r0, r3
 80097e6:	f7f6 fc8d 	bl	8000104 <__udivsi3>
 80097ea:	0003      	movs	r3, r0
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	001a      	movs	r2, r3
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	60da      	str	r2, [r3, #12]
}
 80097f4:	46c0      	nop			; (mov r8, r8)
 80097f6:	46bd      	mov	sp, r7
 80097f8:	b006      	add	sp, #24
 80097fa:	bd80      	pop	{r7, pc}
 80097fc:	08009a44 	.word	0x08009a44
 8009800:	0000fff0 	.word	0x0000fff0

08009804 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8009804:	b590      	push	{r4, r7, lr}
 8009806:	b08b      	sub	sp, #44	; 0x2c
 8009808:	af02      	add	r7, sp, #8
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800980e:	231f      	movs	r3, #31
 8009810:	18fb      	adds	r3, r7, r3
 8009812:	2201      	movs	r2, #1
 8009814:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8009816:	2300      	movs	r3, #0
 8009818:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	0018      	movs	r0, r3
 800981e:	f7ff ff4f 	bl	80096c0 <LL_USART_IsEnabled>
 8009822:	1e03      	subs	r3, r0, #0
 8009824:	d16a      	bne.n	80098fc <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4a38      	ldr	r2, [pc, #224]	; (800990c <LL_USART_Init+0x108>)
 800982c:	401a      	ands	r2, r3
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	6899      	ldr	r1, [r3, #8]
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	691b      	ldr	r3, [r3, #16]
 8009836:	4319      	orrs	r1, r3
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	695b      	ldr	r3, [r3, #20]
 800983c:	4319      	orrs	r1, r3
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	69db      	ldr	r3, [r3, #28]
 8009842:	430b      	orrs	r3, r1
 8009844:	431a      	orrs	r2, r3
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	68da      	ldr	r2, [r3, #12]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	0011      	movs	r1, r2
 8009852:	0018      	movs	r0, r3
 8009854:	f7ff ff58 	bl	8009708 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	699a      	ldr	r2, [r3, #24]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	0011      	movs	r1, r2
 8009860:	0018      	movs	r0, r3
 8009862:	f7ff ff65 	bl	8009730 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	4a29      	ldr	r2, [pc, #164]	; (8009910 <LL_USART_Init+0x10c>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d105      	bne.n	800987a <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800986e:	2003      	movs	r0, #3
 8009870:	f7ff fe06 	bl	8009480 <LL_RCC_GetUSARTClockFreq>
 8009874:	0003      	movs	r3, r0
 8009876:	61bb      	str	r3, [r7, #24]
 8009878:	e022      	b.n	80098c0 <LL_USART_Init+0xbc>
    }
    else if (USARTx == USART2)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	4a25      	ldr	r2, [pc, #148]	; (8009914 <LL_USART_Init+0x110>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d105      	bne.n	800988e <LL_USART_Init+0x8a>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8009882:	200c      	movs	r0, #12
 8009884:	f7ff fdfc 	bl	8009480 <LL_RCC_GetUSARTClockFreq>
 8009888:	0003      	movs	r3, r0
 800988a:	61bb      	str	r3, [r7, #24]
 800988c:	e018      	b.n	80098c0 <LL_USART_Init+0xbc>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* RCC_CCIPR_USART2SEL */
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	4a21      	ldr	r2, [pc, #132]	; (8009918 <LL_USART_Init+0x114>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d108      	bne.n	80098a8 <LL_USART_Init+0xa4>
    {
#if defined(RCC_CCIPR_USART3SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8009896:	240c      	movs	r4, #12
 8009898:	193b      	adds	r3, r7, r4
 800989a:	0018      	movs	r0, r3
 800989c:	f7ff fdd2 	bl	8009444 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80098a0:	193b      	adds	r3, r7, r4
 80098a2:	689b      	ldr	r3, [r3, #8]
 80098a4:	61bb      	str	r3, [r7, #24]
 80098a6:	e00b      	b.n	80098c0 <LL_USART_Init+0xbc>
#endif /* RCC_CCIPR_USART3SEL */
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	4a1c      	ldr	r2, [pc, #112]	; (800991c <LL_USART_Init+0x118>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d107      	bne.n	80098c0 <LL_USART_Init+0xbc>
    {
#if defined(RCC_CCIPR_USART4SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART4_CLKSOURCE);
#else
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80098b0:	240c      	movs	r4, #12
 80098b2:	193b      	adds	r3, r7, r4
 80098b4:	0018      	movs	r0, r3
 80098b6:	f7ff fdc5 	bl	8009444 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80098ba:	193b      	adds	r3, r7, r4
 80098bc:	689b      	ldr	r3, [r3, #8]
 80098be:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80098c0:	69bb      	ldr	r3, [r7, #24]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d013      	beq.n	80098ee <LL_USART_Init+0xea>
        && (USART_InitStruct->BaudRate != 0U))
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	685b      	ldr	r3, [r3, #4]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d00f      	beq.n	80098ee <LL_USART_Init+0xea>
    {
      status = SUCCESS;
 80098ce:	231f      	movs	r3, #31
 80098d0:	18fb      	adds	r3, r7, r3
 80098d2:	2200      	movs	r2, #0
 80098d4:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	69dc      	ldr	r4, [r3, #28]
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	69b9      	ldr	r1, [r7, #24]
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	9300      	str	r3, [sp, #0]
 80098e8:	0023      	movs	r3, r4
 80098ea:	f7ff ff35 	bl	8009758 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	0011      	movs	r1, r2
 80098f6:	0018      	movs	r0, r3
 80098f8:	f7ff fef3 	bl	80096e2 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80098fc:	231f      	movs	r3, #31
 80098fe:	18fb      	adds	r3, r7, r3
 8009900:	781b      	ldrb	r3, [r3, #0]
}
 8009902:	0018      	movs	r0, r3
 8009904:	46bd      	mov	sp, r7
 8009906:	b009      	add	sp, #36	; 0x24
 8009908:	bd90      	pop	{r4, r7, pc}
 800990a:	46c0      	nop			; (mov r8, r8)
 800990c:	efff69f3 	.word	0xefff69f3
 8009910:	40013800 	.word	0x40013800
 8009914:	40004400 	.word	0x40004400
 8009918:	40004800 	.word	0x40004800
 800991c:	40004c00 	.word	0x40004c00

08009920 <__libc_init_array>:
 8009920:	b570      	push	{r4, r5, r6, lr}
 8009922:	2600      	movs	r6, #0
 8009924:	4d0c      	ldr	r5, [pc, #48]	; (8009958 <__libc_init_array+0x38>)
 8009926:	4c0d      	ldr	r4, [pc, #52]	; (800995c <__libc_init_array+0x3c>)
 8009928:	1b64      	subs	r4, r4, r5
 800992a:	10a4      	asrs	r4, r4, #2
 800992c:	42a6      	cmp	r6, r4
 800992e:	d109      	bne.n	8009944 <__libc_init_array+0x24>
 8009930:	2600      	movs	r6, #0
 8009932:	f000 f821 	bl	8009978 <_init>
 8009936:	4d0a      	ldr	r5, [pc, #40]	; (8009960 <__libc_init_array+0x40>)
 8009938:	4c0a      	ldr	r4, [pc, #40]	; (8009964 <__libc_init_array+0x44>)
 800993a:	1b64      	subs	r4, r4, r5
 800993c:	10a4      	asrs	r4, r4, #2
 800993e:	42a6      	cmp	r6, r4
 8009940:	d105      	bne.n	800994e <__libc_init_array+0x2e>
 8009942:	bd70      	pop	{r4, r5, r6, pc}
 8009944:	00b3      	lsls	r3, r6, #2
 8009946:	58eb      	ldr	r3, [r5, r3]
 8009948:	4798      	blx	r3
 800994a:	3601      	adds	r6, #1
 800994c:	e7ee      	b.n	800992c <__libc_init_array+0xc>
 800994e:	00b3      	lsls	r3, r6, #2
 8009950:	58eb      	ldr	r3, [r5, r3]
 8009952:	4798      	blx	r3
 8009954:	3601      	adds	r6, #1
 8009956:	e7f2      	b.n	800993e <__libc_init_array+0x1e>
 8009958:	08009a74 	.word	0x08009a74
 800995c:	08009a74 	.word	0x08009a74
 8009960:	08009a74 	.word	0x08009a74
 8009964:	08009a78 	.word	0x08009a78

08009968 <memset>:
 8009968:	0003      	movs	r3, r0
 800996a:	1812      	adds	r2, r2, r0
 800996c:	4293      	cmp	r3, r2
 800996e:	d100      	bne.n	8009972 <memset+0xa>
 8009970:	4770      	bx	lr
 8009972:	7019      	strb	r1, [r3, #0]
 8009974:	3301      	adds	r3, #1
 8009976:	e7f9      	b.n	800996c <memset+0x4>

08009978 <_init>:
 8009978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800997a:	46c0      	nop			; (mov r8, r8)
 800997c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800997e:	bc08      	pop	{r3}
 8009980:	469e      	mov	lr, r3
 8009982:	4770      	bx	lr

08009984 <_fini>:
 8009984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009986:	46c0      	nop			; (mov r8, r8)
 8009988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800998a:	bc08      	pop	{r3}
 800998c:	469e      	mov	lr, r3
 800998e:	4770      	bx	lr
